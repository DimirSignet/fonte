{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PureFunctionIdentifier.java",
  "functionName": "visitFunction",
  "functionId": "$visitFunction___traversal-NodeTraversal__node-Node__parent-Node__gramp-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
  "functionAnnotation": "",
  "functionDoc": "Record function and check for @nosideeffects annotations.\n",
  "functionStartLine": 601,
  "functionEndLine": 662,
  "numCommitsSeen": 66,
  "timeTaken": 1941,
  "changeHistory": [
    "d48e656b8ef676a9d4d87503028d59628013307f",
    "6d4979514fd802dd4deded67f3ba1929e74a928d",
    "3a76f8e3ce96a5c3fc7baed2012ef8e079ebb9f3",
    "6a2378d43d1f06344f6418388d45c66fe3466a07",
    "92d3cd3eaa7d7e8b5b36322e9bab8eabe6a53c01",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "d48e656b8ef676a9d4d87503028d59628013307f": "Ymultichange(Yparameterchange,Ybodychange)",
    "6d4979514fd802dd4deded67f3ba1929e74a928d": "Ymultichange(Yparameterchange,Ybodychange)",
    "3a76f8e3ce96a5c3fc7baed2012ef8e079ebb9f3": "Ybodychange",
    "6a2378d43d1f06344f6418388d45c66fe3466a07": "Ybodychange",
    "92d3cd3eaa7d7e8b5b36322e9bab8eabe6a53c01": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d48e656b8ef676a9d4d87503028d59628013307f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks builds\n\n*** Original change description ***\n\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dacleung,niranjan\nDELTA\u003d1003  (254 added, 671 deleted, 78 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@568 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 7:55 PM",
      "commitName": "d48e656b8ef676a9d4d87503028d59628013307f",
      "commitAuthor": "diegosalas@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks builds\n\n*** Original change description ***\n\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dacleung,niranjan\nDELTA\u003d1003  (254 added, 671 deleted, 78 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@568 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/22/10, 7:55 PM",
          "commitName": "d48e656b8ef676a9d4d87503028d59628013307f",
          "commitAuthor": "diegosalas@google.com",
          "commitDateOld": "11/22/10, 3:02 PM",
          "commitNameOld": "6d4979514fd802dd4deded67f3ba1929e74a928d",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.2,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n    Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n    functionSideEffectMap.put(node, sideEffectInfo);\n    if (inExterns) {\n        JSType jstype \u003d node.getJSType();\n        boolean knownLocalResult \u003d false;\n        if (jstype !\u003d null \u0026\u0026 jstype.isFunctionType()) {\n            FunctionType functionType \u003d (FunctionType) jstype;\n            JSType jstypeReturn \u003d functionType.getReturnType();\n            if (isLocalValueType(jstypeReturn, true)) {\n                knownLocalResult \u003d true;\n            }\n        }\n        if (!knownLocalResult) {\n            sideEffectInfo.setTaintsReturn();\n        }\n    }\n    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n    if (info !\u003d null) {\n        boolean hasSpecificSideEffects \u003d false;\n        if (hasSideEffectsThisAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsThis();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (hasSideEffectsArgumentsAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsArguments();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (!hasSpecificSideEffects) {\n            if (hasNoSideEffectsAnnotation(info)) {\n                if (inExterns) {\n                    sideEffectInfo.setIsPure();\n                } else {\n                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n                }\n            } else if (inExterns) {\n                sideEffectInfo.setTaintsGlobalState();\n            }\n        }\n    } else {\n        if (inExterns) {\n            sideEffectInfo.setTaintsGlobalState();\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
          "functionStartLine": 601,
          "functionName": "visitFunction",
          "functionAnnotation": "",
          "functionDoc": "Record function and check for @nosideeffects annotations.\n",
          "diff": "@@ -1,17 +1,54 @@\n-private void visitFunction(NodeTraversal traversal, Node node) {\n+private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n     Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n-    FunctionSideEffectData sideEffectInfo \u003d new FunctionSideEffectData(inExterns, traversal.getScope());\n+    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n     functionSideEffectMap.put(node, sideEffectInfo);\n-    if (!inExterns) {\n-        Scope localScope \u003d traversal.getScope();\n-        Iterator\u003cVar\u003e i \u003d localScope.getVars();\n-        while (i.hasNext()) {\n-            Var v \u003d i.next();\n-            Node parent \u003d v.getParentNode();\n-            if (parent.getType() \u003d\u003d Token.LP || parent.getType() \u003d\u003d Token.CATCH) {\n-                sideEffectInfo.addNonLocalValue(v);\n+    if (inExterns) {\n+        JSType jstype \u003d node.getJSType();\n+        boolean knownLocalResult \u003d false;\n+        if (jstype !\u003d null \u0026\u0026 jstype.isFunctionType()) {\n+            FunctionType functionType \u003d (FunctionType) jstype;\n+            JSType jstypeReturn \u003d functionType.getReturnType();\n+            if (isLocalValueType(jstypeReturn, true)) {\n+                knownLocalResult \u003d true;\n             }\n         }\n+        if (!knownLocalResult) {\n+            sideEffectInfo.setTaintsReturn();\n+        }\n     }\n-    processFunctionAnnotations(sideEffectInfo, traversal, node);\n+    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n+    if (info !\u003d null) {\n+        boolean hasSpecificSideEffects \u003d false;\n+        if (hasSideEffectsThisAnnotation(info)) {\n+            if (inExterns) {\n+                hasSpecificSideEffects \u003d true;\n+                sideEffectInfo.setTaintsThis();\n+            } else {\n+                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n+            }\n+        }\n+        if (hasSideEffectsArgumentsAnnotation(info)) {\n+            if (inExterns) {\n+                hasSpecificSideEffects \u003d true;\n+                sideEffectInfo.setTaintsArguments();\n+            } else {\n+                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n+            }\n+        }\n+        if (!hasSpecificSideEffects) {\n+            if (hasNoSideEffectsAnnotation(info)) {\n+                if (inExterns) {\n+                    sideEffectInfo.setIsPure();\n+                } else {\n+                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n+                }\n+            } else if (inExterns) {\n+                sideEffectInfo.setTaintsGlobalState();\n+            }\n+        }\n+    } else {\n+        if (inExterns) {\n+            sideEffectInfo.setTaintsGlobalState();\n+        }\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[traversal-NodeTraversal, node-Node]",
            "newValue": "[traversal-NodeTraversal, node-Node, parent-Node, gramp-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks builds\n\n*** Original change description ***\n\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dacleung,niranjan\nDELTA\u003d1003  (254 added, 671 deleted, 78 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@568 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/22/10, 7:55 PM",
          "commitName": "d48e656b8ef676a9d4d87503028d59628013307f",
          "commitAuthor": "diegosalas@google.com",
          "commitDateOld": "11/22/10, 3:02 PM",
          "commitNameOld": "6d4979514fd802dd4deded67f3ba1929e74a928d",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.2,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n    Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n    functionSideEffectMap.put(node, sideEffectInfo);\n    if (inExterns) {\n        JSType jstype \u003d node.getJSType();\n        boolean knownLocalResult \u003d false;\n        if (jstype !\u003d null \u0026\u0026 jstype.isFunctionType()) {\n            FunctionType functionType \u003d (FunctionType) jstype;\n            JSType jstypeReturn \u003d functionType.getReturnType();\n            if (isLocalValueType(jstypeReturn, true)) {\n                knownLocalResult \u003d true;\n            }\n        }\n        if (!knownLocalResult) {\n            sideEffectInfo.setTaintsReturn();\n        }\n    }\n    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n    if (info !\u003d null) {\n        boolean hasSpecificSideEffects \u003d false;\n        if (hasSideEffectsThisAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsThis();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (hasSideEffectsArgumentsAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsArguments();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (!hasSpecificSideEffects) {\n            if (hasNoSideEffectsAnnotation(info)) {\n                if (inExterns) {\n                    sideEffectInfo.setIsPure();\n                } else {\n                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n                }\n            } else if (inExterns) {\n                sideEffectInfo.setTaintsGlobalState();\n            }\n        }\n    } else {\n        if (inExterns) {\n            sideEffectInfo.setTaintsGlobalState();\n        }\n    }\n}",
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
          "functionStartLine": 601,
          "functionName": "visitFunction",
          "functionAnnotation": "",
          "functionDoc": "Record function and check for @nosideeffects annotations.\n",
          "diff": "@@ -1,17 +1,54 @@\n-private void visitFunction(NodeTraversal traversal, Node node) {\n+private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n     Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n-    FunctionSideEffectData sideEffectInfo \u003d new FunctionSideEffectData(inExterns, traversal.getScope());\n+    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n     functionSideEffectMap.put(node, sideEffectInfo);\n-    if (!inExterns) {\n-        Scope localScope \u003d traversal.getScope();\n-        Iterator\u003cVar\u003e i \u003d localScope.getVars();\n-        while (i.hasNext()) {\n-            Var v \u003d i.next();\n-            Node parent \u003d v.getParentNode();\n-            if (parent.getType() \u003d\u003d Token.LP || parent.getType() \u003d\u003d Token.CATCH) {\n-                sideEffectInfo.addNonLocalValue(v);\n+    if (inExterns) {\n+        JSType jstype \u003d node.getJSType();\n+        boolean knownLocalResult \u003d false;\n+        if (jstype !\u003d null \u0026\u0026 jstype.isFunctionType()) {\n+            FunctionType functionType \u003d (FunctionType) jstype;\n+            JSType jstypeReturn \u003d functionType.getReturnType();\n+            if (isLocalValueType(jstypeReturn, true)) {\n+                knownLocalResult \u003d true;\n             }\n         }\n+        if (!knownLocalResult) {\n+            sideEffectInfo.setTaintsReturn();\n+        }\n     }\n-    processFunctionAnnotations(sideEffectInfo, traversal, node);\n+    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n+    if (info !\u003d null) {\n+        boolean hasSpecificSideEffects \u003d false;\n+        if (hasSideEffectsThisAnnotation(info)) {\n+            if (inExterns) {\n+                hasSpecificSideEffects \u003d true;\n+                sideEffectInfo.setTaintsThis();\n+            } else {\n+                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n+            }\n+        }\n+        if (hasSideEffectsArgumentsAnnotation(info)) {\n+            if (inExterns) {\n+                hasSpecificSideEffects \u003d true;\n+                sideEffectInfo.setTaintsArguments();\n+            } else {\n+                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n+            }\n+        }\n+        if (!hasSpecificSideEffects) {\n+            if (hasNoSideEffectsAnnotation(info)) {\n+                if (inExterns) {\n+                    sideEffectInfo.setIsPure();\n+                } else {\n+                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n+                }\n+            } else if (inExterns) {\n+                sideEffectInfo.setTaintsGlobalState();\n+            }\n+        }\n+    } else {\n+        if (inExterns) {\n+            sideEffectInfo.setTaintsGlobalState();\n+        }\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6d4979514fd802dd4deded67f3ba1929e74a928d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dnicksantos\nDELTA\u003d1000  (667 added, 250 deleted, 83 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d0\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@567 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 3:02 PM",
      "commitName": "6d4979514fd802dd4deded67f3ba1929e74a928d",
      "commitAuthor": "johnlenz@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dnicksantos\nDELTA\u003d1000  (667 added, 250 deleted, 83 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d0\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@567 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/22/10, 3:02 PM",
          "commitName": "6d4979514fd802dd4deded67f3ba1929e74a928d",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "11/15/10, 10:20 PM",
          "commitNameOld": "da794a3a9cb2cebc0efb708ba9b465a4510c7235",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.7,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "private void visitFunction(NodeTraversal traversal, Node node) {\n    Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n    FunctionSideEffectData sideEffectInfo \u003d new FunctionSideEffectData(inExterns, traversal.getScope());\n    functionSideEffectMap.put(node, sideEffectInfo);\n    if (!inExterns) {\n        Scope localScope \u003d traversal.getScope();\n        Iterator\u003cVar\u003e i \u003d localScope.getVars();\n        while (i.hasNext()) {\n            Var v \u003d i.next();\n            Node parent \u003d v.getParentNode();\n            if (parent.getType() \u003d\u003d Token.LP || parent.getType() \u003d\u003d Token.CATCH) {\n                sideEffectInfo.addNonLocalValue(v);\n            }\n        }\n    }\n    processFunctionAnnotations(sideEffectInfo, traversal, node);\n}",
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
          "functionStartLine": 577,
          "functionName": "visitFunction",
          "functionAnnotation": "",
          "functionDoc": "Record function and check for @nosideeffects annotations.\n",
          "diff": "@@ -1,54 +1,17 @@\n-private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n+private void visitFunction(NodeTraversal traversal, Node node) {\n     Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n-    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n+    FunctionSideEffectData sideEffectInfo \u003d new FunctionSideEffectData(inExterns, traversal.getScope());\n     functionSideEffectMap.put(node, sideEffectInfo);\n-    if (inExterns) {\n-        JSType jstype \u003d node.getJSType();\n-        boolean knownLocalResult \u003d false;\n-        if (jstype !\u003d null \u0026\u0026 jstype.isFunctionType()) {\n-            FunctionType functionType \u003d (FunctionType) jstype;\n-            JSType jstypeReturn \u003d functionType.getReturnType();\n-            if (isLocalValueType(jstypeReturn, true)) {\n-                knownLocalResult \u003d true;\n+    if (!inExterns) {\n+        Scope localScope \u003d traversal.getScope();\n+        Iterator\u003cVar\u003e i \u003d localScope.getVars();\n+        while (i.hasNext()) {\n+            Var v \u003d i.next();\n+            Node parent \u003d v.getParentNode();\n+            if (parent.getType() \u003d\u003d Token.LP || parent.getType() \u003d\u003d Token.CATCH) {\n+                sideEffectInfo.addNonLocalValue(v);\n             }\n         }\n-        if (!knownLocalResult) {\n-            sideEffectInfo.setTaintsReturn();\n-        }\n     }\n-    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n-    if (info !\u003d null) {\n-        boolean hasSpecificSideEffects \u003d false;\n-        if (hasSideEffectsThisAnnotation(info)) {\n-            if (inExterns) {\n-                hasSpecificSideEffects \u003d true;\n-                sideEffectInfo.setTaintsThis();\n-            } else {\n-                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n-            }\n-        }\n-        if (hasSideEffectsArgumentsAnnotation(info)) {\n-            if (inExterns) {\n-                hasSpecificSideEffects \u003d true;\n-                sideEffectInfo.setTaintsArguments();\n-            } else {\n-                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n-            }\n-        }\n-        if (!hasSpecificSideEffects) {\n-            if (hasNoSideEffectsAnnotation(info)) {\n-                if (inExterns) {\n-                    sideEffectInfo.setIsPure();\n-                } else {\n-                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n-                }\n-            } else if (inExterns) {\n-                sideEffectInfo.setTaintsGlobalState();\n-            }\n-        }\n-    } else {\n-        if (inExterns) {\n-            sideEffectInfo.setTaintsGlobalState();\n-        }\n-    }\n+    processFunctionAnnotations(sideEffectInfo, traversal, node);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[traversal-NodeTraversal, node-Node, parent-Node, gramp-Node]",
            "newValue": "[traversal-NodeTraversal, node-Node]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dnicksantos\nDELTA\u003d1000  (667 added, 250 deleted, 83 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d0\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@567 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/22/10, 3:02 PM",
          "commitName": "6d4979514fd802dd4deded67f3ba1929e74a928d",
          "commitAuthor": "johnlenz@google.com",
          "commitDateOld": "11/15/10, 10:20 PM",
          "commitNameOld": "da794a3a9cb2cebc0efb708ba9b465a4510c7235",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 6.7,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "private void visitFunction(NodeTraversal traversal, Node node) {\n    Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n    FunctionSideEffectData sideEffectInfo \u003d new FunctionSideEffectData(inExterns, traversal.getScope());\n    functionSideEffectMap.put(node, sideEffectInfo);\n    if (!inExterns) {\n        Scope localScope \u003d traversal.getScope();\n        Iterator\u003cVar\u003e i \u003d localScope.getVars();\n        while (i.hasNext()) {\n            Var v \u003d i.next();\n            Node parent \u003d v.getParentNode();\n            if (parent.getType() \u003d\u003d Token.LP || parent.getType() \u003d\u003d Token.CATCH) {\n                sideEffectInfo.addNonLocalValue(v);\n            }\n        }\n    }\n    processFunctionAnnotations(sideEffectInfo, traversal, node);\n}",
          "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
          "functionStartLine": 577,
          "functionName": "visitFunction",
          "functionAnnotation": "",
          "functionDoc": "Record function and check for @nosideeffects annotations.\n",
          "diff": "@@ -1,54 +1,17 @@\n-private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n+private void visitFunction(NodeTraversal traversal, Node node) {\n     Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n-    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n+    FunctionSideEffectData sideEffectInfo \u003d new FunctionSideEffectData(inExterns, traversal.getScope());\n     functionSideEffectMap.put(node, sideEffectInfo);\n-    if (inExterns) {\n-        JSType jstype \u003d node.getJSType();\n-        boolean knownLocalResult \u003d false;\n-        if (jstype !\u003d null \u0026\u0026 jstype.isFunctionType()) {\n-            FunctionType functionType \u003d (FunctionType) jstype;\n-            JSType jstypeReturn \u003d functionType.getReturnType();\n-            if (isLocalValueType(jstypeReturn, true)) {\n-                knownLocalResult \u003d true;\n+    if (!inExterns) {\n+        Scope localScope \u003d traversal.getScope();\n+        Iterator\u003cVar\u003e i \u003d localScope.getVars();\n+        while (i.hasNext()) {\n+            Var v \u003d i.next();\n+            Node parent \u003d v.getParentNode();\n+            if (parent.getType() \u003d\u003d Token.LP || parent.getType() \u003d\u003d Token.CATCH) {\n+                sideEffectInfo.addNonLocalValue(v);\n             }\n         }\n-        if (!knownLocalResult) {\n-            sideEffectInfo.setTaintsReturn();\n-        }\n     }\n-    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n-    if (info !\u003d null) {\n-        boolean hasSpecificSideEffects \u003d false;\n-        if (hasSideEffectsThisAnnotation(info)) {\n-            if (inExterns) {\n-                hasSpecificSideEffects \u003d true;\n-                sideEffectInfo.setTaintsThis();\n-            } else {\n-                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n-            }\n-        }\n-        if (hasSideEffectsArgumentsAnnotation(info)) {\n-            if (inExterns) {\n-                hasSpecificSideEffects \u003d true;\n-                sideEffectInfo.setTaintsArguments();\n-            } else {\n-                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n-            }\n-        }\n-        if (!hasSpecificSideEffects) {\n-            if (hasNoSideEffectsAnnotation(info)) {\n-                if (inExterns) {\n-                    sideEffectInfo.setIsPure();\n-                } else {\n-                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n-                }\n-            } else if (inExterns) {\n-                sideEffectInfo.setTaintsGlobalState();\n-            }\n-        }\n-    } else {\n-        if (inExterns) {\n-            sideEffectInfo.setTaintsGlobalState();\n-        }\n-    }\n+    processFunctionAnnotations(sideEffectInfo, traversal, node);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3a76f8e3ce96a5c3fc7baed2012ef8e079ebb9f3": {
      "type": "Ybodychange",
      "commitMessage": "\nUse return type information to infer the locality of the\nfunction result when possible.\n\nR\u003dnicksantos\nDELTA\u003d56  (48 added, 3 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d273400\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@467 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/28/10, 3:06 PM",
      "commitName": "3a76f8e3ce96a5c3fc7baed2012ef8e079ebb9f3",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/27/10, 4:16 PM",
      "commitNameOld": "6a2378d43d1f06344f6418388d45c66fe3466a07",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n    Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n    functionSideEffectMap.put(node, sideEffectInfo);\n    if (inExterns) {\n        JSType jstype \u003d node.getJSType();\n        boolean knownLocalResult \u003d false;\n        if (jstype !\u003d null \u0026\u0026 jstype.isFunctionType()) {\n            FunctionType functionType \u003d (FunctionType) jstype;\n            JSType jstypeReturn \u003d functionType.getReturnType();\n            if (isLocalValueType(jstypeReturn, true)) {\n                knownLocalResult \u003d true;\n            }\n        }\n        if (!knownLocalResult) {\n            sideEffectInfo.setTaintsReturn();\n        }\n    }\n    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n    if (info !\u003d null) {\n        boolean hasSpecificSideEffects \u003d false;\n        if (hasSideEffectsThisAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsThis();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (hasSideEffectsArgumentsAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsArguments();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (!hasSpecificSideEffects) {\n            if (hasNoSideEffectsAnnotation(info)) {\n                if (inExterns) {\n                    sideEffectInfo.setIsPure();\n                } else {\n                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n                }\n            } else if (inExterns) {\n                sideEffectInfo.setTaintsGlobalState();\n            }\n        }\n    } else {\n        if (inExterns) {\n            sideEffectInfo.setTaintsGlobalState();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 601,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Record function and check for @nosideeffects annotations.\n",
      "diff": "@@ -1,43 +1,54 @@\n private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n     Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n     FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n     functionSideEffectMap.put(node, sideEffectInfo);\n     if (inExterns) {\n-        sideEffectInfo.setTaintsReturn();\n+        JSType jstype \u003d node.getJSType();\n+        boolean knownLocalResult \u003d false;\n+        if (jstype !\u003d null \u0026\u0026 jstype.isFunctionType()) {\n+            FunctionType functionType \u003d (FunctionType) jstype;\n+            JSType jstypeReturn \u003d functionType.getReturnType();\n+            if (isLocalValueType(jstypeReturn, true)) {\n+                knownLocalResult \u003d true;\n+            }\n+        }\n+        if (!knownLocalResult) {\n+            sideEffectInfo.setTaintsReturn();\n+        }\n     }\n     JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n     if (info !\u003d null) {\n         boolean hasSpecificSideEffects \u003d false;\n         if (hasSideEffectsThisAnnotation(info)) {\n             if (inExterns) {\n                 hasSpecificSideEffects \u003d true;\n                 sideEffectInfo.setTaintsThis();\n             } else {\n                 traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n             }\n         }\n         if (hasSideEffectsArgumentsAnnotation(info)) {\n             if (inExterns) {\n                 hasSpecificSideEffects \u003d true;\n                 sideEffectInfo.setTaintsArguments();\n             } else {\n                 traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n             }\n         }\n         if (!hasSpecificSideEffects) {\n             if (hasNoSideEffectsAnnotation(info)) {\n                 if (inExterns) {\n                     sideEffectInfo.setIsPure();\n                 } else {\n                     traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n                 }\n             } else if (inExterns) {\n                 sideEffectInfo.setTaintsGlobalState();\n             }\n         }\n     } else {\n         if (inExterns) {\n             sideEffectInfo.setTaintsGlobalState();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a2378d43d1f06344f6418388d45c66fe3466a07": {
      "type": "Ybodychange",
      "commitMessage": "\nTake advantage of the finer grain side-effect information when\ndetermining side-effects.\nThe bulk of the changes here are the move of the \"isKnownLocalValue\"\nfunction and its tests from to NodeUtil/NodeUtilTest.\n\nR\u003dnicksantos\nDELTA\u003d664  (419 added, 201 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d260873\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@466 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/27/10, 4:16 PM",
      "commitName": "6a2378d43d1f06344f6418388d45c66fe3466a07",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/24/10, 11:05 AM",
      "commitNameOld": "9a05def053bc2ac4b24a5c1f72b35f6a2e753b0e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.22,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n    Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n    functionSideEffectMap.put(node, sideEffectInfo);\n    if (inExterns) {\n        sideEffectInfo.setTaintsReturn();\n    }\n    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n    if (info !\u003d null) {\n        boolean hasSpecificSideEffects \u003d false;\n        if (hasSideEffectsThisAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsThis();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (hasSideEffectsArgumentsAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsArguments();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (!hasSpecificSideEffects) {\n            if (hasNoSideEffectsAnnotation(info)) {\n                if (inExterns) {\n                    sideEffectInfo.setIsPure();\n                } else {\n                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n                }\n            } else if (inExterns) {\n                sideEffectInfo.setTaintsGlobalState();\n            }\n        }\n    } else {\n        if (inExterns) {\n            sideEffectInfo.setTaintsGlobalState();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 598,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Record function and check for @nosideeffects annotations.\n",
      "diff": "@@ -1,40 +1,43 @@\n private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n     Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n     FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n     functionSideEffectMap.put(node, sideEffectInfo);\n+    if (inExterns) {\n+        sideEffectInfo.setTaintsReturn();\n+    }\n     JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n     if (info !\u003d null) {\n         boolean hasSpecificSideEffects \u003d false;\n         if (hasSideEffectsThisAnnotation(info)) {\n             if (inExterns) {\n                 hasSpecificSideEffects \u003d true;\n                 sideEffectInfo.setTaintsThis();\n             } else {\n                 traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n             }\n         }\n         if (hasSideEffectsArgumentsAnnotation(info)) {\n             if (inExterns) {\n                 hasSpecificSideEffects \u003d true;\n                 sideEffectInfo.setTaintsArguments();\n             } else {\n                 traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n             }\n         }\n         if (!hasSpecificSideEffects) {\n             if (hasNoSideEffectsAnnotation(info)) {\n                 if (inExterns) {\n                     sideEffectInfo.setIsPure();\n                 } else {\n                     traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n                 }\n             } else if (inExterns) {\n                 sideEffectInfo.setTaintsGlobalState();\n             }\n         }\n     } else {\n         if (inExterns) {\n             sideEffectInfo.setTaintsGlobalState();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "92d3cd3eaa7d7e8b5b36322e9bab8eabe6a53c01": {
      "type": "Ybodychange",
      "commitMessage": "\nUse new @modifies{this} annotations\n\nR\u003davd\nDELTA\u003d214  (185 added, 4 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d249465\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@460 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/24/10, 11:11 AM",
      "commitName": "92d3cd3eaa7d7e8b5b36322e9bab8eabe6a53c01",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "9/23/10, 5:03 PM",
      "commitNameOld": "a095236ba70304d61b8ec02ea316d3504cc0ea1d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n    Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n    functionSideEffectMap.put(node, sideEffectInfo);\n    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n    if (info !\u003d null) {\n        boolean hasSpecificSideEffects \u003d false;\n        if (hasSideEffectsThisAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsThis();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (hasSideEffectsArgumentsAnnotation(info)) {\n            if (inExterns) {\n                hasSpecificSideEffects \u003d true;\n                sideEffectInfo.setTaintsArguments();\n            } else {\n                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n            }\n        }\n        if (!hasSpecificSideEffects) {\n            if (hasNoSideEffectsAnnotation(info)) {\n                if (inExterns) {\n                    sideEffectInfo.setIsPure();\n                } else {\n                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n                }\n            } else if (inExterns) {\n                sideEffectInfo.setTaintsGlobalState();\n            }\n        }\n    } else {\n        if (inExterns) {\n            sideEffectInfo.setTaintsGlobalState();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 649,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Record function and check for @nosideeffects annotations.\n",
      "diff": "@@ -1,14 +1,40 @@\n private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n     Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n     FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n     functionSideEffectMap.put(node, sideEffectInfo);\n-    if (hasNoSideEffectsAnnotation(node, parent, gramp)) {\n-        if (inExterns) {\n-            sideEffectInfo.setIsPure();\n-        } else {\n-            traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n+    JSDocInfo info \u003d getJSDocInfoForFunction(node, parent, gramp);\n+    if (info !\u003d null) {\n+        boolean hasSpecificSideEffects \u003d false;\n+        if (hasSideEffectsThisAnnotation(info)) {\n+            if (inExterns) {\n+                hasSpecificSideEffects \u003d true;\n+                sideEffectInfo.setTaintsThis();\n+            } else {\n+                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n+            }\n         }\n-    } else if (inExterns) {\n-        sideEffectInfo.setTaintsGlobalState();\n+        if (hasSideEffectsArgumentsAnnotation(info)) {\n+            if (inExterns) {\n+                hasSpecificSideEffects \u003d true;\n+                sideEffectInfo.setTaintsArguments();\n+            } else {\n+                traversal.report(node, INVALID_MODIFIES_ANNOTATION);\n+            }\n+        }\n+        if (!hasSpecificSideEffects) {\n+            if (hasNoSideEffectsAnnotation(info)) {\n+                if (inExterns) {\n+                    sideEffectInfo.setIsPure();\n+                } else {\n+                    traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n+                }\n+            } else if (inExterns) {\n+                sideEffectInfo.setTaintsGlobalState();\n+            }\n+        }\n+    } else {\n+        if (inExterns) {\n+            sideEffectInfo.setTaintsGlobalState();\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,14 @@\n+private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n+    Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n+    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n+    functionSideEffectMap.put(node, sideEffectInfo);\n+    if (hasNoSideEffectsAnnotation(node, parent, gramp)) {\n+        if (inExterns) {\n+            sideEffectInfo.setIsPure();\n+        } else {\n+            traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n+        }\n+    } else if (inExterns) {\n+        sideEffectInfo.setTaintsGlobalState();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void visitFunction(NodeTraversal traversal, Node node, Node parent, Node gramp) {\n    Preconditions.checkArgument(!functionSideEffectMap.containsKey(node));\n    FunctionInformation sideEffectInfo \u003d new FunctionInformation(inExterns);\n    functionSideEffectMap.put(node, sideEffectInfo);\n    if (hasNoSideEffectsAnnotation(node, parent, gramp)) {\n        if (inExterns) {\n            sideEffectInfo.setIsPure();\n        } else {\n            traversal.report(node, INVALID_NO_SIDE_EFFECT_ANNOTATION);\n        }\n    } else if (inExterns) {\n        sideEffectInfo.setTaintsGlobalState();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 411,
      "functionName": "visitFunction",
      "functionAnnotation": "",
      "functionDoc": "Record function and check for @nosideeffects annotations.\n"
    }
  }
}