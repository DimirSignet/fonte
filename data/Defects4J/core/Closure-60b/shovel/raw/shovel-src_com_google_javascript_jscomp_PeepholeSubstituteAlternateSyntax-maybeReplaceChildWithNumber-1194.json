{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeepholeSubstituteAlternateSyntax.java",
  "functionName": "maybeReplaceChildWithNumber",
  "functionId": "maybeReplaceChildWithNumber___n-Node__parent-Node__num-int",
  "sourceFilePath": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
  "functionAnnotation": "",
  "functionDoc": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n\nReturns the replacement for n if it was replaced, otherwise returns n.\n",
  "functionStartLine": 1194,
  "functionEndLine": 1204,
  "numCommitsSeen": 51,
  "timeTaken": 4584,
  "changeHistory": [
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "b4801b28ceea8db0f63da7440d6769cb9b7cce8a": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Ydocchange,Yparameterchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/29/10, 2:10 PM",
      "commitNameOld": "541402929a600a95bf099513908b4efd8b0e1c5b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.73,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n    Node newNode \u003d Node.newNumber(num);\n    if (!newNode.isEquivalentTo(n)) {\n        parent.replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n    }\n    return n;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
      "functionStartLine": 654,
      "functionName": "maybeReplaceChildWithNumber",
      "functionAnnotation": "",
      "functionDoc": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n\nReturns the replacement for n if it was replaced, otherwise returns n.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "b4801b28ceea8db0f63da7440d6769cb9b7cce8a": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Ydocchange,Yparameterchange)",
      "commitMessage": "\nChange on 2010/05/28 by johnlenz\n\n        Inline functions with inner functions into global scope if they don\u0027t\n        declare any names.\n\n        R\u003dacleung\n        DELTA\u003d329  (244 added, 27 deleted, 58 changed)\n\nChange on 2010/05/28 by dcc\n\n        First pass on refactoring FoldConstants into separate peephole optimizations. This changelist adds the notion of an AbstractPeepholeOptimization and adds a PeepholeOptimizationsPass that runs them. In this go around the minimization aspects of FoldConstants have been factored out into PeepholeMinimize. A future change will factor out the other components of FoldConstants into their own PeepholeOptimizations. DefaultPassConfig has also been updated to run the new PeepholeOptimizationPass.\n\n        This change does not move the minimization-related unit tests from FoldConstantsTest to PeepholeMinimizeTest -- a future, separate, change will do so. Hopefully this will make it easier to review.\n\n        R\u003dacleung\n        DELTA\u003d1966  (1271 added, 675 deleted, 20 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d13010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@235 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/29/10, 1:07 PM",
      "commitName": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "\nChange on 2010/05/28 by johnlenz\n\n        Inline functions with inner functions into global scope if they don\u0027t\n        declare any names.\n\n        R\u003dacleung\n        DELTA\u003d329  (244 added, 27 deleted, 58 changed)\n\nChange on 2010/05/28 by dcc\n\n        First pass on refactoring FoldConstants into separate peephole optimizations. This changelist adds the notion of an AbstractPeepholeOptimization and adds a PeepholeOptimizationsPass that runs them. In this go around the minimization aspects of FoldConstants have been factored out into PeepholeMinimize. A future change will factor out the other components of FoldConstants into their own PeepholeOptimizations. DefaultPassConfig has also been updated to run the new PeepholeOptimizationPass.\n\n        This change does not move the minimization-related unit tests from FoldConstantsTest to PeepholeMinimizeTest -- a future, separate, change will do so. Hopefully this will make it easier to review.\n\n        R\u003dacleung\n        DELTA\u003d1966  (1271 added, 675 deleted, 20 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d13010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@235 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/29/10, 1:07 PM",
          "commitName": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/27/10, 10:18 PM",
          "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.62,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n    Node newNode \u003d Node.newNumber(num);\n    if (!newNode.isEquivalentTo(n)) {\n        parent.replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
          "functionStartLine": 640,
          "functionName": "maybeReplaceChildWithNumber",
          "functionAnnotation": "",
          "functionDoc": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n\nReturns the replacement for n if it was replaced, otherwise returns n.\n",
          "diff": "@@ -1,7 +1,9 @@\n-private void maybeReplaceChildWithNumber(NodeTraversal t, Node n, Node parent, int num) {\n+private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n     Node newNode \u003d Node.newNumber(num);\n     if (!newNode.isEquivalentTo(n)) {\n         parent.replaceChild(n, newNode);\n-        t.getCompiler().reportCodeChange();\n+        reportCodeChange();\n+        return newNode;\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "src/com/google/javascript/jscomp/FoldConstants.java",
            "newPath": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
            "oldMethodName": "maybeReplaceChildWithNumber",
            "newMethodName": "maybeReplaceChildWithNumber"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nChange on 2010/05/28 by johnlenz\n\n        Inline functions with inner functions into global scope if they don\u0027t\n        declare any names.\n\n        R\u003dacleung\n        DELTA\u003d329  (244 added, 27 deleted, 58 changed)\n\nChange on 2010/05/28 by dcc\n\n        First pass on refactoring FoldConstants into separate peephole optimizations. This changelist adds the notion of an AbstractPeepholeOptimization and adds a PeepholeOptimizationsPass that runs them. In this go around the minimization aspects of FoldConstants have been factored out into PeepholeMinimize. A future change will factor out the other components of FoldConstants into their own PeepholeOptimizations. DefaultPassConfig has also been updated to run the new PeepholeOptimizationPass.\n\n        This change does not move the minimization-related unit tests from FoldConstantsTest to PeepholeMinimizeTest -- a future, separate, change will do so. Hopefully this will make it easier to review.\n\n        R\u003dacleung\n        DELTA\u003d1966  (1271 added, 675 deleted, 20 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d13010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@235 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/29/10, 1:07 PM",
          "commitName": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/27/10, 10:18 PM",
          "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.62,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n    Node newNode \u003d Node.newNumber(num);\n    if (!newNode.isEquivalentTo(n)) {\n        parent.replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
          "functionStartLine": 640,
          "functionName": "maybeReplaceChildWithNumber",
          "functionAnnotation": "",
          "functionDoc": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n\nReturns the replacement for n if it was replaced, otherwise returns n.\n",
          "diff": "@@ -1,7 +1,9 @@\n-private void maybeReplaceChildWithNumber(NodeTraversal t, Node n, Node parent, int num) {\n+private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n     Node newNode \u003d Node.newNumber(num);\n     if (!newNode.isEquivalentTo(n)) {\n         parent.replaceChild(n, newNode);\n-        t.getCompiler().reportCodeChange();\n+        reportCodeChange();\n+        return newNode;\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "Node"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/05/28 by johnlenz\n\n        Inline functions with inner functions into global scope if they don\u0027t\n        declare any names.\n\n        R\u003dacleung\n        DELTA\u003d329  (244 added, 27 deleted, 58 changed)\n\nChange on 2010/05/28 by dcc\n\n        First pass on refactoring FoldConstants into separate peephole optimizations. This changelist adds the notion of an AbstractPeepholeOptimization and adds a PeepholeOptimizationsPass that runs them. In this go around the minimization aspects of FoldConstants have been factored out into PeepholeMinimize. A future change will factor out the other components of FoldConstants into their own PeepholeOptimizations. DefaultPassConfig has also been updated to run the new PeepholeOptimizationPass.\n\n        This change does not move the minimization-related unit tests from FoldConstantsTest to PeepholeMinimizeTest -- a future, separate, change will do so. Hopefully this will make it easier to review.\n\n        R\u003dacleung\n        DELTA\u003d1966  (1271 added, 675 deleted, 20 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d13010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@235 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/29/10, 1:07 PM",
          "commitName": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/27/10, 10:18 PM",
          "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.62,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n    Node newNode \u003d Node.newNumber(num);\n    if (!newNode.isEquivalentTo(n)) {\n        parent.replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
          "functionStartLine": 640,
          "functionName": "maybeReplaceChildWithNumber",
          "functionAnnotation": "",
          "functionDoc": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n\nReturns the replacement for n if it was replaced, otherwise returns n.\n",
          "diff": "@@ -1,7 +1,9 @@\n-private void maybeReplaceChildWithNumber(NodeTraversal t, Node n, Node parent, int num) {\n+private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n     Node newNode \u003d Node.newNumber(num);\n     if (!newNode.isEquivalentTo(n)) {\n         parent.replaceChild(n, newNode);\n-        t.getCompiler().reportCodeChange();\n+        reportCodeChange();\n+        return newNode;\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/05/28 by johnlenz\n\n        Inline functions with inner functions into global scope if they don\u0027t\n        declare any names.\n\n        R\u003dacleung\n        DELTA\u003d329  (244 added, 27 deleted, 58 changed)\n\nChange on 2010/05/28 by dcc\n\n        First pass on refactoring FoldConstants into separate peephole optimizations. This changelist adds the notion of an AbstractPeepholeOptimization and adds a PeepholeOptimizationsPass that runs them. In this go around the minimization aspects of FoldConstants have been factored out into PeepholeMinimize. A future change will factor out the other components of FoldConstants into their own PeepholeOptimizations. DefaultPassConfig has also been updated to run the new PeepholeOptimizationPass.\n\n        This change does not move the minimization-related unit tests from FoldConstantsTest to PeepholeMinimizeTest -- a future, separate, change will do so. Hopefully this will make it easier to review.\n\n        R\u003dacleung\n        DELTA\u003d1966  (1271 added, 675 deleted, 20 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d13010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@235 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/29/10, 1:07 PM",
          "commitName": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/27/10, 10:18 PM",
          "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.62,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n    Node newNode \u003d Node.newNumber(num);\n    if (!newNode.isEquivalentTo(n)) {\n        parent.replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
          "functionStartLine": 640,
          "functionName": "maybeReplaceChildWithNumber",
          "functionAnnotation": "",
          "functionDoc": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n\nReturns the replacement for n if it was replaced, otherwise returns n.\n",
          "diff": "@@ -1,7 +1,9 @@\n-private void maybeReplaceChildWithNumber(NodeTraversal t, Node n, Node parent, int num) {\n+private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n     Node newNode \u003d Node.newNumber(num);\n     if (!newNode.isEquivalentTo(n)) {\n         parent.replaceChild(n, newNode);\n-        t.getCompiler().reportCodeChange();\n+        reportCodeChange();\n+        return newNode;\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n",
            "newValue": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n\nReturns the replacement for n if it was replaced, otherwise returns n.\n"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nChange on 2010/05/28 by johnlenz\n\n        Inline functions with inner functions into global scope if they don\u0027t\n        declare any names.\n\n        R\u003dacleung\n        DELTA\u003d329  (244 added, 27 deleted, 58 changed)\n\nChange on 2010/05/28 by dcc\n\n        First pass on refactoring FoldConstants into separate peephole optimizations. This changelist adds the notion of an AbstractPeepholeOptimization and adds a PeepholeOptimizationsPass that runs them. In this go around the minimization aspects of FoldConstants have been factored out into PeepholeMinimize. A future change will factor out the other components of FoldConstants into their own PeepholeOptimizations. DefaultPassConfig has also been updated to run the new PeepholeOptimizationPass.\n\n        This change does not move the minimization-related unit tests from FoldConstantsTest to PeepholeMinimizeTest -- a future, separate, change will do so. Hopefully this will make it easier to review.\n\n        R\u003dacleung\n        DELTA\u003d1966  (1271 added, 675 deleted, 20 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d13010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@235 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "5/29/10, 1:07 PM",
          "commitName": "b4801b28ceea8db0f63da7440d6769cb9b7cce8a",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "5/27/10, 10:18 PM",
          "commitNameOld": "6d00ac1a68612aade8a19d7ecc9b180f00ae5234",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 1.62,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n    Node newNode \u003d Node.newNumber(num);\n    if (!newNode.isEquivalentTo(n)) {\n        parent.replaceChild(n, newNode);\n        reportCodeChange();\n        return newNode;\n    }\n    return n;\n}",
          "path": "src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java",
          "functionStartLine": 640,
          "functionName": "maybeReplaceChildWithNumber",
          "functionAnnotation": "",
          "functionDoc": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n\nReturns the replacement for n if it was replaced, otherwise returns n.\n",
          "diff": "@@ -1,7 +1,9 @@\n-private void maybeReplaceChildWithNumber(NodeTraversal t, Node n, Node parent, int num) {\n+private Node maybeReplaceChildWithNumber(Node n, Node parent, int num) {\n     Node newNode \u003d Node.newNumber(num);\n     if (!newNode.isEquivalentTo(n)) {\n         parent.replaceChild(n, newNode);\n-        t.getCompiler().reportCodeChange();\n+        reportCodeChange();\n+        return newNode;\n     }\n+    return n;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[t-NodeTraversal, n-Node, parent-Node, num-int]",
            "newValue": "[n-Node, parent-Node, num-int]"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,7 @@\n+private void maybeReplaceChildWithNumber(NodeTraversal t, Node n, Node parent, int num) {\n+    Node newNode \u003d Node.newNumber(num);\n+    if (!newNode.isEquivalentTo(n)) {\n+        parent.replaceChild(n, newNode);\n+        t.getCompiler().reportCodeChange();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void maybeReplaceChildWithNumber(NodeTraversal t, Node n, Node parent, int num) {\n    Node newNode \u003d Node.newNumber(num);\n    if (!newNode.isEquivalentTo(n)) {\n        parent.replaceChild(n, newNode);\n        t.getCompiler().reportCodeChange();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FoldConstants.java",
      "functionStartLine": 1921,
      "functionName": "maybeReplaceChildWithNumber",
      "functionAnnotation": "",
      "functionDoc": "Replaces a node with a number node if the new number node is not equivalent\nto the current node.\n"
    }
  }
}