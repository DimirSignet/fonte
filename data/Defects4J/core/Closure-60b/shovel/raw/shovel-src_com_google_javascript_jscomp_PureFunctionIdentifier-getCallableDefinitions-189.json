{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PureFunctionIdentifier.java",
  "functionName": "getCallableDefinitions",
  "functionId": "getCallableDefinitions___definitionProvider-DefinitionProvider__name-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
  "functionAnnotation": "",
  "functionDoc": "Query the DefinitionProvider for the list of definitions that\ncorrespond to a given qualified name subtree.  Return null if\nDefinitionProvider does not contain an entry for a given name,\none or more of the values returned by getDeclarations is not\ncallable, or the \"name\" node is not a GETPROP or NAME.\n\n@param definitionProvider The name reference graph\n@param name Query node\n@return non-empty definition list or null\n",
  "functionStartLine": 189,
  "functionEndLine": 244,
  "numCommitsSeen": 25,
  "timeTaken": 1400,
  "changeHistory": [
    "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "e33e925eea3a8e4de958864e531e1adc4da62e18",
    "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "e33e925eea3a8e4de958864e531e1adc4da62e18": "Ybodychange",
    "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd Definition#isInExterns().\n\nChanged the Definition interface to indicate whether a definition comes from the exports or not.\n\nChanged NameReferenceGraph and SimpleDefinitionFinder to provide this information (which they are\nalready calculating for internal use) when creating Definitions.\n\nPureFunctionIdentifier also creates definitions in PureFunctionIdentifier#getCallableDefinitions(). I had\nto change this from a static method to an instance method to be able to access the instance variable\nmap that stores whether a function was defined in externs or not. Nothing seems to rely on that\nmethod being static, but it probably needs some scrutiny.\n\nR\u003dacleung,avd\nDELTA\u003d199  (109 added, 2 deleted, 88 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d54007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@295 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/20/10, 8:22 AM",
      "commitName": "8e0ba4ed8fa6d97f698d59d24a26a1ac96b888ff",
      "commitAuthor": "dcc@google.com",
      "commitDateOld": "7/1/10, 7:38 AM",
      "commitNameOld": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 19.03,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Collection\u003cDefinition\u003e getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n    if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {\n        List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n        Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n        if (decls \u003d\u003d null) {\n            return null;\n        }\n        for (Definition current : decls) {\n            Node rValue \u003d current.getRValue();\n            if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n                result.add(current);\n            } else {\n                return null;\n            }\n        }\n        return result;\n    } else if (name.getType() \u003d\u003d Token.OR || name.getType() \u003d\u003d Token.HOOK) {\n        Node firstVal;\n        if (name.getType() \u003d\u003d Token.HOOK) {\n            firstVal \u003d name.getFirstChild().getNext();\n        } else {\n            firstVal \u003d name.getFirstChild();\n        }\n        Collection\u003cDefinition\u003e defs1 \u003d getCallableDefinitions(definitionProvider, firstVal);\n        Collection\u003cDefinition\u003e defs2 \u003d getCallableDefinitions(definitionProvider, firstVal.getNext());\n        if (defs1 !\u003d null \u0026\u0026 defs2 !\u003d null) {\n            defs1.addAll(defs2);\n            return defs1;\n        } else {\n            return null;\n        }\n    } else if (NodeUtil.isFunctionExpression(name)) {\n        return Lists.newArrayList((Definition) new DefinitionsRemover.FunctionExpressionDefinition(name, false));\n    } else {\n        return null;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 175,
      "functionName": "getCallableDefinitions",
      "functionAnnotation": "",
      "functionDoc": "Query the DefinitionProvider for the list of definitions that\ncorrespond to a given qualified name subtree.  Return null if\nDefinitionProvider does not contain an entry for a given name,\none or more of the values returned by getDeclarations is not\ncallable, or the \"name\" node is not a GETPROP or NAME.\n\n@param definitionProvider The name reference graph\n@param name Query node\n@return non-empty definition list or null\n",
      "diff": "@@ -1,37 +1,37 @@\n private static Collection\u003cDefinition\u003e getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n     if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {\n         List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n         Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n         if (decls \u003d\u003d null) {\n             return null;\n         }\n         for (Definition current : decls) {\n             Node rValue \u003d current.getRValue();\n             if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n                 result.add(current);\n             } else {\n                 return null;\n             }\n         }\n         return result;\n     } else if (name.getType() \u003d\u003d Token.OR || name.getType() \u003d\u003d Token.HOOK) {\n         Node firstVal;\n         if (name.getType() \u003d\u003d Token.HOOK) {\n             firstVal \u003d name.getFirstChild().getNext();\n         } else {\n             firstVal \u003d name.getFirstChild();\n         }\n         Collection\u003cDefinition\u003e defs1 \u003d getCallableDefinitions(definitionProvider, firstVal);\n         Collection\u003cDefinition\u003e defs2 \u003d getCallableDefinitions(definitionProvider, firstVal.getNext());\n         if (defs1 !\u003d null \u0026\u0026 defs2 !\u003d null) {\n             defs1.addAll(defs2);\n             return defs1;\n         } else {\n             return null;\n         }\n     } else if (NodeUtil.isFunctionExpression(name)) {\n-        return Lists.newArrayList((Definition) new DefinitionsRemover.FunctionExpressionDefinition(name));\n+        return Lists.newArrayList((Definition) new DefinitionsRemover.FunctionExpressionDefinition(name, false));\n     } else {\n         return null;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/16/10, 12:33 PM",
      "commitNameOld": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 14.8,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Collection\u003cDefinition\u003e getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n    if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {\n        List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n        Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n        if (decls \u003d\u003d null) {\n            return null;\n        }\n        for (Definition current : decls) {\n            Node rValue \u003d current.getRValue();\n            if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n                result.add(current);\n            } else {\n                return null;\n            }\n        }\n        return result;\n    } else if (name.getType() \u003d\u003d Token.OR || name.getType() \u003d\u003d Token.HOOK) {\n        Node firstVal;\n        if (name.getType() \u003d\u003d Token.HOOK) {\n            firstVal \u003d name.getFirstChild().getNext();\n        } else {\n            firstVal \u003d name.getFirstChild();\n        }\n        Collection\u003cDefinition\u003e defs1 \u003d getCallableDefinitions(definitionProvider, firstVal);\n        Collection\u003cDefinition\u003e defs2 \u003d getCallableDefinitions(definitionProvider, firstVal.getNext());\n        if (defs1 !\u003d null \u0026\u0026 defs2 !\u003d null) {\n            defs1.addAll(defs2);\n            return defs1;\n        } else {\n            return null;\n        }\n    } else if (NodeUtil.isFunctionExpression(name)) {\n        return Lists.newArrayList((Definition) new DefinitionsRemover.FunctionExpressionDefinition(name));\n    } else {\n        return null;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 175,
      "functionName": "getCallableDefinitions",
      "functionAnnotation": "",
      "functionDoc": "Query the DefinitionProvider for the list of definitions that\ncorrespond to a given qualified name subtree.  Return null if\nDefinitionProvider does not contain an entry for a given name,\none or more of the values returned by getDeclarations is not\ncallable, or the \"name\" node is not a GETPROP or NAME.\n\n@param definitionProvider The name reference graph\n@param name Query node\n@return non-empty definition list or null\n",
      "diff": "",
      "extendedDetails": {}
    },
    "e33e925eea3a8e4de958864e531e1adc4da62e18": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/14 by johnlenz\n\n        Remove unneed parenthese from hook expressions.\n\n        R\u003dacleung\n        DELTA\u003d76  (20 added, 4 deleted, 52 changed)\n\nChange on 2010/06/14 by johnlenz\n\n        Fix non-determinisim.\n\n        R\u003djschorr\n        DELTA\u003d5  (3 added, 0 deleted, 2 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        fix a regression caused by a change in the ordering in which\n        constant folding is done.\n        parts of PeepholeSubstituteAlternateSyntax will crash if they\n        see a NEG node with a NUMBER child.\n        They were assuming that FoldConstants would fold these into one node.\n\n        R\u003ddcc,acleung\n        DELTA\u003d153  (70 added, 6 deleted, 77 changed)\n\nChange on 2010/06/15 by johnlenz\n\n        More debug diffing improvements: convert unique globally unique names\n        to locally unique names for reproduciblity.\n\n        R\u003dacleung\n        DELTA\u003d222  (44 added, 7 deleted, 171 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        Add the @nocompile annotation as a signal that this file should\n        be dropped silently if it gets pulled into a --manage_closure_dependencies\n        build.\n\n        R\u003dbowdidge,gboyer\n        DELTA\u003d82  (60 added, 1 deleted, 21 changed)\n\nChange on 2010/06/15 by dcc\n\n        Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.\n\n        R\u003dacleung\n        DELTA\u003d744  (403 added, 307 deleted, 34 changed)\n\nChange on 2010/06/15 by dcc\n\n        ExternExports test now emits type annotation for exported externs.\n                - Changed ExternExportsPass to generate the externs as an AST and then print\n        to a String rather than ad hoc with a StringBuilder.\n                - Changed TypedCodeGenerator to generate \u0027*\u0027 (AllType) for parameters with unknown types rather than \u0027?\u0027 (UnknownType) since \u0027?\u0027 is not valid JSDoc.\n\n        R\u003dacleung\n        DELTA\u003d643  (496 added, 66 deleted, 81 changed)\n\nChange on 2010/06/16 by johnlenz\n\n        Tweak to PureFunctionIndentifier to propagate the side-effects for\n        anonymous function expressions like: (Date.now||function(){return\n        +new Date})()\n\n        R\u003davd\n        DELTA\u003d42  (39 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/10, 12:33 PM",
      "commitName": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/12/10, 7:59 AM",
      "commitNameOld": "80fe41fd0173c3eaa56f4abb783031966ea89cef",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 65.19,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Collection\u003cDefinition\u003e getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n    if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {\n        List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n        Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n        if (decls \u003d\u003d null) {\n            return null;\n        }\n        for (Definition current : decls) {\n            Node rValue \u003d current.getRValue();\n            if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n                result.add(current);\n            } else {\n                return null;\n            }\n        }\n        return result;\n    } else if (name.getType() \u003d\u003d Token.OR || name.getType() \u003d\u003d Token.HOOK) {\n        Node firstVal;\n        if (name.getType() \u003d\u003d Token.HOOK) {\n            firstVal \u003d name.getFirstChild().getNext();\n        } else {\n            firstVal \u003d name.getFirstChild();\n        }\n        Collection\u003cDefinition\u003e defs1 \u003d getCallableDefinitions(definitionProvider, firstVal);\n        Collection\u003cDefinition\u003e defs2 \u003d getCallableDefinitions(definitionProvider, firstVal.getNext());\n        if (defs1 !\u003d null \u0026\u0026 defs2 !\u003d null) {\n            defs1.addAll(defs2);\n            return defs1;\n        } else {\n            return null;\n        }\n    } else if (NodeUtil.isFunctionExpression(name)) {\n        return Lists.newArrayList((Definition) new DefinitionsRemover.FunctionExpressionDefinition(name));\n    } else {\n        return null;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 175,
      "functionName": "getCallableDefinitions",
      "functionAnnotation": "",
      "functionDoc": "Query the DefinitionProvider for the list of definitions that\ncorrespond to a given qualified name subtree.  Return null if\nDefinitionProvider does not contain an entry for a given name,\none or more of the values returned by getDeclarations is not\ncallable, or the \"name\" node is not a GETPROP or NAME.\n\n@param definitionProvider The name reference graph\n@param name Query node\n@return non-empty definition list or null\n",
      "diff": "@@ -1,35 +1,37 @@\n private static Collection\u003cDefinition\u003e getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n     if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {\n         List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n         Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n         if (decls \u003d\u003d null) {\n             return null;\n         }\n         for (Definition current : decls) {\n             Node rValue \u003d current.getRValue();\n             if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n                 result.add(current);\n             } else {\n                 return null;\n             }\n         }\n         return result;\n     } else if (name.getType() \u003d\u003d Token.OR || name.getType() \u003d\u003d Token.HOOK) {\n         Node firstVal;\n         if (name.getType() \u003d\u003d Token.HOOK) {\n             firstVal \u003d name.getFirstChild().getNext();\n         } else {\n             firstVal \u003d name.getFirstChild();\n         }\n         Collection\u003cDefinition\u003e defs1 \u003d getCallableDefinitions(definitionProvider, firstVal);\n         Collection\u003cDefinition\u003e defs2 \u003d getCallableDefinitions(definitionProvider, firstVal.getNext());\n         if (defs1 !\u003d null \u0026\u0026 defs2 !\u003d null) {\n             defs1.addAll(defs2);\n             return defs1;\n         } else {\n             return null;\n         }\n+    } else if (NodeUtil.isFunctionExpression(name)) {\n+        return Lists.newArrayList((Definition) new DefinitionsRemover.FunctionExpressionDefinition(name));\n     } else {\n         return null;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3": {
      "type": "Ybodychange",
      "commitMessage": "Tweak to allow chained initialization:\nnew Node(Token.EXPR_RESULT, a).copyInformationFrom(a); (John)\nR\u003dalan\nDELTA\u003d10  (6 added, 0 deleted, 4 changed)\n\n\nTeach PureFunctionnIdentifier about (f || g)() calls (antonio)\nFixes issue 116\nR\u003djohn\nDELTA\u003d105  (84 added, 0 deleted, 21 changed)\n\nFix decomposition issue \nAnonymous function declaration can not be side-effected and are\nside-effect free. (John)\nR\u003dalan\nDELTA\u003d115  (101 added, 8 deleted, 6 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@154 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/10, 8:58 AM",
      "commitName": "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 141.67,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Collection\u003cDefinition\u003e getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n    if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {\n        List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n        Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n        if (decls \u003d\u003d null) {\n            return null;\n        }\n        for (Definition current : decls) {\n            Node rValue \u003d current.getRValue();\n            if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n                result.add(current);\n            } else {\n                return null;\n            }\n        }\n        return result;\n    } else if (name.getType() \u003d\u003d Token.OR || name.getType() \u003d\u003d Token.HOOK) {\n        Node firstVal;\n        if (name.getType() \u003d\u003d Token.HOOK) {\n            firstVal \u003d name.getFirstChild().getNext();\n        } else {\n            firstVal \u003d name.getFirstChild();\n        }\n        Collection\u003cDefinition\u003e defs1 \u003d getCallableDefinitions(definitionProvider, firstVal);\n        Collection\u003cDefinition\u003e defs2 \u003d getCallableDefinitions(definitionProvider, firstVal.getNext());\n        if (defs1 !\u003d null \u0026\u0026 defs2 !\u003d null) {\n            defs1.addAll(defs2);\n            return defs1;\n        } else {\n            return null;\n        }\n    } else {\n        return null;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 175,
      "functionName": "getCallableDefinitions",
      "functionAnnotation": "",
      "functionDoc": "Query the DefinitionProvider for the list of definitions that\ncorrespond to a given qualified name subtree.  Return null if\nDefinitionProvider does not contain an entry for a given name,\none or more of the values returned by getDeclarations is not\ncallable, or the \"name\" node is not a GETPROP or NAME.\n\n@param definitionProvider The name reference graph\n@param name Query node\n@return non-empty definition list or null\n",
      "diff": "@@ -1,19 +1,35 @@\n private static Collection\u003cDefinition\u003e getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n-    List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n-    if (!NodeUtil.isGetProp(name) \u0026\u0026 !NodeUtil.isName(name)) {\n-        return null;\n-    }\n-    Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n-    if (decls \u003d\u003d null) {\n-        return null;\n-    }\n-    for (Definition current : decls) {\n-        Node rValue \u003d current.getRValue();\n-        if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n-            result.add(current);\n+    if (NodeUtil.isGetProp(name) || NodeUtil.isName(name)) {\n+        List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n+        Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n+        if (decls \u003d\u003d null) {\n+            return null;\n+        }\n+        for (Definition current : decls) {\n+            Node rValue \u003d current.getRValue();\n+            if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n+                result.add(current);\n+            } else {\n+                return null;\n+            }\n+        }\n+        return result;\n+    } else if (name.getType() \u003d\u003d Token.OR || name.getType() \u003d\u003d Token.HOOK) {\n+        Node firstVal;\n+        if (name.getType() \u003d\u003d Token.HOOK) {\n+            firstVal \u003d name.getFirstChild().getNext();\n+        } else {\n+            firstVal \u003d name.getFirstChild();\n+        }\n+        Collection\u003cDefinition\u003e defs1 \u003d getCallableDefinitions(definitionProvider, firstVal);\n+        Collection\u003cDefinition\u003e defs2 \u003d getCallableDefinitions(definitionProvider, firstVal.getNext());\n+        if (defs1 !\u003d null \u0026\u0026 defs2 !\u003d null) {\n+            defs1.addAll(defs2);\n+            return defs1;\n         } else {\n             return null;\n         }\n+    } else {\n+        return null;\n     }\n-    return result;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,19 @@\n+private static Collection\u003cDefinition\u003e getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n+    List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n+    if (!NodeUtil.isGetProp(name) \u0026\u0026 !NodeUtil.isName(name)) {\n+        return null;\n+    }\n+    Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n+    if (decls \u003d\u003d null) {\n+        return null;\n+    }\n+    for (Definition current : decls) {\n+        Node rValue \u003d current.getRValue();\n+        if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n+            result.add(current);\n+        } else {\n+            return null;\n+        }\n+    }\n+    return result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static Collection\u003cDefinition\u003e getCallableDefinitions(DefinitionProvider definitionProvider, Node name) {\n    List\u003cDefinition\u003e result \u003d Lists.newArrayList();\n    if (!NodeUtil.isGetProp(name) \u0026\u0026 !NodeUtil.isName(name)) {\n        return null;\n    }\n    Collection\u003cDefinition\u003e decls \u003d definitionProvider.getDefinitionsReferencedAt(name);\n    if (decls \u003d\u003d null) {\n        return null;\n    }\n    for (Definition current : decls) {\n        Node rValue \u003d current.getRValue();\n        if ((rValue !\u003d null) \u0026\u0026 NodeUtil.isFunction(rValue)) {\n            result.add(current);\n        } else {\n            return null;\n        }\n    }\n    return result;\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 175,
      "functionName": "getCallableDefinitions",
      "functionAnnotation": "",
      "functionDoc": "Query the DefinitionProvider for the list of definitions that\ncorrespond to a given qualified name subtree.  Return null if\nDefinitionProvider does not contain an entry for a given name,\none or more of the values returned by getDeclarations is not\ncallable, or the \"name\" node is not a GETPROP or NAME.\n\n@param definitionProvider The name reference graph\n@param name Query node\n@return non-empty definition list or null\n"
    }
  }
}