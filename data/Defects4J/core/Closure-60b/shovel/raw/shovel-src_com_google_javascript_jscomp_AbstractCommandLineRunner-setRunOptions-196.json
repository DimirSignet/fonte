{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCommandLineRunner.java",
  "functionName": "setRunOptions",
  "functionId": "setRunOptions___options-CompilerOptions",
  "sourceFilePath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
  "functionAnnotation": "",
  "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
  "functionStartLine": 196,
  "functionEndLine": 274,
  "numCommitsSeen": 88,
  "timeTaken": 4342,
  "changeHistory": [
    "1a400824eb5299485e84d40698d811c4e284511e",
    "e4e139965fccdb7dbe55d04151fa4305bb4bac48",
    "a2d9c861616c0308024d74a3be2b34f3d4cdd066",
    "fcccf543e85a214f0948d1ac5cab3fa05363e845",
    "524c758183be741ff1519acfa8a4bf714dd2c4cd",
    "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956",
    "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450",
    "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5",
    "08fc2551ca3c811a02407d593b6ae39d2439a88c",
    "cf96848764f0b01a57bd9daa512903a1f0b1c00a",
    "4cede4f156740b7ce93d92d824066e9a42257541",
    "053636cbd1a8fb97e55b4f82bc4b5bee8beaf47e",
    "114620510958121ebec3dd8d037d70571fb7da20",
    "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7",
    "6f2539acd3c37bd7f0d031b43364f75a5cd6d5f7",
    "c080c668a4ccd9eb151cbb4f90980ddbbfbaba44",
    "848ace840362a1f5558bec065cb40548ff66587a",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3",
    "6a6ea480bae01f40f9795218ac911bb7de18d34a"
  ],
  "changeHistoryShort": {
    "1a400824eb5299485e84d40698d811c4e284511e": "Ybodychange",
    "e4e139965fccdb7dbe55d04151fa4305bb4bac48": "Ybodychange",
    "a2d9c861616c0308024d74a3be2b34f3d4cdd066": "Ymodifierchange",
    "fcccf543e85a214f0948d1ac5cab3fa05363e845": "Ybodychange",
    "524c758183be741ff1519acfa8a4bf714dd2c4cd": "Ybodychange",
    "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956": "Ybodychange",
    "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450": "Ybodychange",
    "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5": "Ybodychange",
    "08fc2551ca3c811a02407d593b6ae39d2439a88c": "Ybodychange",
    "cf96848764f0b01a57bd9daa512903a1f0b1c00a": "Ybodychange",
    "4cede4f156740b7ce93d92d824066e9a42257541": "Ybodychange",
    "053636cbd1a8fb97e55b4f82bc4b5bee8beaf47e": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange,Ydocchange)",
    "114620510958121ebec3dd8d037d70571fb7da20": "Ybodychange",
    "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7": "Ybodychange",
    "6f2539acd3c37bd7f0d031b43364f75a5cd6d5f7": "Ybodychange",
    "c080c668a4ccd9eb151cbb4f90980ddbbfbaba44": "Ybodychange",
    "848ace840362a1f5558bec065cb40548ff66587a": "Yfilerename",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": "Ymultichange(Yexceptionschange,Ybodychange)",
    "6a6ea480bae01f40f9795218ac911bb7de18d34a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1a400824eb5299485e84d40698d811c4e284511e": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd skip_normal_outputs to do dummy compilation (initialize modules and check dependency), used when we want to generate MF/bundle files but compile \u003d 0\n\nR\u003dnicksantos\nDELTA\u003d151  (144 added, 1 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2254\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1175 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/13/11, 11:04 AM",
      "commitName": "1a400824eb5299485e84d40698d811c4e284511e",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "5/18/11, 12:14 PM",
      "commitNameOld": "e4e139965fccdb7dbe55d04151fa4305bb4bac48",
      "commitAuthorOld": "rsturgell@google.com",
      "daysBetweenCommits": 25.95,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    if (config.warningGuards !\u003d null) {\n        for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n            diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n        }\n    }\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        if (config.skipNormalOutputs) {\n            throw new FlagUsageException(\"skip_normal_outputs and js_output_file\" + \" cannot be used together.\");\n        } else {\n            options.jsOutputFile \u003d config.jsOutputFile;\n        }\n    }\n    if (config.skipNormalOutputs \u0026\u0026 config.printAst) {\n        throw new FlagUsageException(\"skip_normal_outputs and print_ast cannot\" + \" be used together.\");\n    }\n    if (config.skipNormalOutputs \u0026\u0026 config.printTree) {\n        throw new FlagUsageException(\"skip_normal_outputs and print_tree cannot\" + \" be used together.\");\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    options.sourceMapFormat \u003d config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() \u003e 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n        }\n    }\n    options.acceptConstKeyword \u003d config.acceptConstKeyword;\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 195,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,46 +1,56 @@\n protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     if (config.warningGuards !\u003d null) {\n         for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n             diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n         }\n     }\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() \u003e 0) {\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n-        options.jsOutputFile \u003d config.jsOutputFile;\n+        if (config.skipNormalOutputs) {\n+            throw new FlagUsageException(\"skip_normal_outputs and js_output_file\" + \" cannot be used together.\");\n+        } else {\n+            options.jsOutputFile \u003d config.jsOutputFile;\n+        }\n+    }\n+    if (config.skipNormalOutputs \u0026\u0026 config.printAst) {\n+        throw new FlagUsageException(\"skip_normal_outputs and print_ast cannot\" + \" be used together.\");\n+    }\n+    if (config.skipNormalOutputs \u0026\u0026 config.printTree) {\n+        throw new FlagUsageException(\"skip_normal_outputs and print_tree cannot\" + \" be used together.\");\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     options.sourceMapFormat \u003d config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n     if (config.languageIn.length() \u003e 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n         } else {\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n         }\n     }\n     options.acceptConstKeyword \u003d config.acceptConstKeyword;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4e139965fccdb7dbe55d04151fa4305bb4bac48": {
      "type": "Ybodychange",
      "commitMessage": "\nhandle ECMASCRIPT5_STRICT in jscompiler AbastractCommandLineRunner\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1945\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1114 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/18/11, 12:14 PM",
      "commitName": "e4e139965fccdb7dbe55d04151fa4305bb4bac48",
      "commitAuthor": "rsturgell@google.com",
      "commitDateOld": "4/27/11, 12:58 PM",
      "commitNameOld": "a2d9c861616c0308024d74a3be2b34f3d4cdd066",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 20.97,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    if (config.warningGuards !\u003d null) {\n        for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n            diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n        }\n    }\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    options.sourceMapFormat \u003d config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() \u003e 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n        }\n    }\n    options.acceptConstKeyword \u003d config.acceptConstKeyword;\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 195,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,46 +1,46 @@\n protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     if (config.warningGuards !\u003d null) {\n         for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n             diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n         }\n     }\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() \u003e 0) {\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     options.sourceMapFormat \u003d config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n     if (config.languageIn.length() \u003e 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5_STRICT);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n         } else {\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n         }\n     }\n     options.acceptConstKeyword \u003d config.acceptConstKeyword;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2d9c861616c0308024d74a3be2b34f3d4cdd066": {
      "type": "Ymodifierchange",
      "commitMessage": "\nCreate an Emergency fail-safe switch\n\nR\u003dacleung\nDELTA\u003d198  (173 added, 13 deleted, 12 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1650\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1043 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/27/11, 12:58 PM",
      "commitName": "a2d9c861616c0308024d74a3be2b34f3d4cdd066",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 15.03,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "actualSource": "protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    if (config.warningGuards !\u003d null) {\n        for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n            diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n        }\n    }\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    options.sourceMapFormat \u003d config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() \u003e 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n        }\n    }\n    options.acceptConstKeyword \u003d config.acceptConstKeyword;\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 195,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,46 +1,46 @@\n-protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n+protected void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     if (config.warningGuards !\u003d null) {\n         for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n             diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n         }\n     }\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() \u003e 0) {\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     options.sourceMapFormat \u003d config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n     if (config.languageIn.length() \u003e 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n         } else {\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n         }\n     }\n     options.acceptConstKeyword \u003d config.acceptConstKeyword;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[protected, final]",
        "newValue": "[protected]"
      }
    },
    "fcccf543e85a214f0948d1ac5cab3fa05363e845": {
      "type": "Ybodychange",
      "commitMessage": "\nCreate new command-line parsers so that jscomp_off, jscomp_warning\njscomp_error get interpreted in the correct order relative\nto one another.\nFixes issue 407\n\nR\u003dzhuyi,acleung\nDELTA\u003d239  (181 added, 33 deleted, 25 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1281\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@973 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/6/11, 11:16 AM",
      "commitName": "fcccf543e85a214f0948d1ac5cab3fa05363e845",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/25/11, 11:28 AM",
      "commitNameOld": "a1c49b11a34f950da65cd7288ee9a0d0c3bf0b86",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 11.99,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    if (config.warningGuards !\u003d null) {\n        for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n            diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n        }\n    }\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    options.sourceMapFormat \u003d config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() \u003e 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n        }\n    }\n    options.acceptConstKeyword \u003d config.acceptConstKeyword;\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 193,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,44 +1,46 @@\n protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n-    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n-    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n-    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    if (config.warningGuards !\u003d null) {\n+        for (WarningGuardSpec.Entry entry : config.warningGuards.entries) {\n+            diagnosticGroups.setWarningLevel(options, entry.groupName, entry.level);\n+        }\n+    }\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() \u003e 0) {\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     options.sourceMapFormat \u003d config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n     if (config.languageIn.length() \u003e 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n             options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n         } else {\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n         }\n     }\n     options.acceptConstKeyword \u003d config.acceptConstKeyword;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "524c758183be741ff1519acfa8a4bf714dd2c4cd": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduce EcmaScript 5 Strict mode output\n\nR\u003dacleung\nDELTA\u003d98  (60 added, 0 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d820\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@873 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/10/11, 11:48 AM",
      "commitName": "524c758183be741ff1519acfa8a4bf714dd2c4cd",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/8/11, 9:20 AM",
      "commitNameOld": "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    options.sourceMapFormat \u003d config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() \u003e 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n        }\n    }\n    options.acceptConstKeyword \u003d config.acceptConstKeyword;\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 193,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,44 +1,44 @@\n protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() \u003e 0) {\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     options.sourceMapFormat \u003d config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n     if (config.languageIn.length() \u003e 0) {\n         if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n-            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n-            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT5);\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n-            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT3;\n+            options.setLanguageIn(CompilerOptions.LanguageMode.ECMASCRIPT3);\n         } else {\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n         }\n     }\n     options.acceptConstKeyword \u003d config.acceptConstKeyword;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduce a ECMASCRIPT5_STRICT language mode.  Run strict mode tests when in that mode.\n\nR\u003dacleung\nDELTA\u003d47  (42 added, 1 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d800\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@864 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/8/11, 9:20 AM",
      "commitName": "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/25/11, 12:23 PM",
      "commitNameOld": "3e42e575f21275d2d0f8196f2f22b4ea06995d5b",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 10.87,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    options.sourceMapFormat \u003d config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() \u003e 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT3;\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n        }\n    }\n    options.acceptConstKeyword \u003d config.acceptConstKeyword;\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 193,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,42 +1,44 @@\n protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() \u003e 0) {\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     options.sourceMapFormat \u003d config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n     if (config.languageIn.length() \u003e 0) {\n-        if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n+        if (config.languageIn.equals(\"ECMASCRIPT5_STRICT\") || config.languageIn.equals(\"ES5_STRICT\")) {\n+            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n+        } else if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n             options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n         } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n             options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT3;\n         } else {\n             throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n         }\n     }\n     options.acceptConstKeyword \u003d config.acceptConstKeyword;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd --accept_const_keyword and --language_in flag so that we can accept \u0027const\u0027 keyword and ECMAScript5 compatible\njavascript source code.\n\nR\u003djohnlenz\nDELTA\u003d115  (104 added, 0 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d480\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@771 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/8/11, 9:38 PM",
      "commitName": "d38121222cc7c1d5e8dd2c34dcea4c2dc7468450",
      "commitAuthor": "kochi@google.com",
      "commitDateOld": "1/31/11, 4:27 PM",
      "commitNameOld": "36a890d0dd7911a5a1b8e1682435945972a05cdc",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.22,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    options.sourceMapFormat \u003d config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.languageIn.length() \u003e 0) {\n        if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT3;\n        } else {\n            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n        }\n    }\n    options.acceptConstKeyword \u003d config.acceptConstKeyword;\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 193,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,32 +1,42 @@\n protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineOrTweakReplacements(config.define, options, false);\n     options.setTweakProcessing(config.tweakProcessing);\n     createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() \u003e 0) {\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     options.sourceMapFormat \u003d config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n+    if (config.languageIn.length() \u003e 0) {\n+        if (config.languageIn.equals(\"ECMASCRIPT5\") || config.languageIn.equals(\"ES5\")) {\n+            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT5;\n+        } else if (config.languageIn.equals(\"ECMASCRIPT3\") || config.languageIn.equals(\"ES3\")) {\n+            options.languageIn \u003d CompilerOptions.LanguageMode.ECMASCRIPT3;\n+        } else {\n+            throw new FlagUsageException(\"Unknown language `\" + config.languageIn + \"\u0027 specified.\");\n+        }\n+    }\n+    options.acceptConstKeyword \u003d config.acceptConstKeyword;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5": {
      "type": "Ybodychange",
      "commitMessage": "\n-Add command line options for the ProcessTweaks pass.\n\nR\u003dnicksantos\nDELTA\u003d202  (151 added, 22 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d277\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@692 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/13/11, 11:07 AM",
      "commitName": "606015f2b48ebaefb3cb1193d2b9d0310f3dc2f5",
      "commitAuthor": "agrieve@google.com",
      "commitDateOld": "11/18/10, 4:43 PM",
      "commitNameOld": "e94b5cc0f19b45dbd6fb65ea365f67d038e815ef",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 55.77,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineOrTweakReplacements(config.define, options, false);\n    options.setTweakProcessing(config.tweakProcessing);\n    createDefineOrTweakReplacements(config.tweak, options, true);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    options.sourceMapFormat \u003d config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 191,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,30 +1,32 @@\n protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n-    createDefineReplacements(config.define, options);\n+    createDefineOrTweakReplacements(config.define, options, false);\n+    options.setTweakProcessing(config.tweakProcessing);\n+    createDefineOrTweakReplacements(config.tweak, options, true);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() \u003e 0) {\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     options.sourceMapFormat \u003d config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "08fc2551ca3c811a02407d593b6ae39d2439a88c": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd missing wiring for the source_map_format option.\n\nR\u003dnicksantos\nDELTA\u003d210  (210 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d804006\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@518 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/27/10, 12:28 PM",
      "commitName": "08fc2551ca3c811a02407d593b6ae39d2439a88c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "10/5/10, 8:56 AM",
      "commitNameOld": "cf96848764f0b01a57bd9daa512903a1f0b1c00a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 22.15,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    options.sourceMapFormat \u003d config.sourceMapFormat;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 190,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,29 +1,30 @@\n protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     if (config.closureEntryPoints.size() \u003e 0) {\n         options.setManageClosureDependencies(config.closureEntryPoints);\n     }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n+    options.sourceMapFormat \u003d config.sourceMapFormat;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cf96848764f0b01a57bd9daa512903a1f0b1c00a": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd a flag for defining entry points that we won\u0027t remove\nin manage_closure_dependencies mode.\nFixes issue 187\n\nR\u003dacleung\nDELTA\u003d232  (199 added, 15 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d285838\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@476 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/5/10, 8:56 AM",
      "commitName": "cf96848764f0b01a57bd9daa512903a1f0b1c00a",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/20/10, 9:35 PM",
      "commitNameOld": "4b5d62920ef4606fd30dfa42eb72df2785415533",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 14.47,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    if (config.closureEntryPoints.size() \u003e 0) {\n        options.setManageClosureDependencies(config.closureEntryPoints);\n    }\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 190,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,26 +1,29 @@\n protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n+    if (config.closureEntryPoints.size() \u003e 0) {\n+        options.setManageClosureDependencies(config.closureEntryPoints);\n+    }\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4cede4f156740b7ce93d92d824066e9a42257541": {
      "type": "Ybodychange",
      "commitMessage": "\nUnify output encoding for real this time\nFixes issue 224.\n\nRevision created by MOE tool push_codebase.\n\nR\u003djohnlenz\nDELTA\u003d39  (5 added, 5 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d196345\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@394 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/30/10, 4:16 PM",
      "commitName": "4cede4f156740b7ce93d92d824066e9a42257541",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "8/27/10, 3:52 PM",
      "commitNameOld": "e152ec001d2c6a9bbd6e0d9443552371d11e461f",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 190,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
      "diff": "@@ -1,26 +1,26 @@\n protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n     DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n     diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n     diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n     diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n     createDefineReplacements(config.define, options);\n     options.manageClosureDependencies \u003d config.manageClosureDependencies;\n     options.devMode \u003d config.jscompDevMode;\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n-    options.outputCharset \u003d getOutputCharset();\n+    outputCharset \u003d options.outputCharset \u003d getOutputCharset();\n     inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "053636cbd1a8fb97e55b4f82bc4b5bee8beaf47e": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange,Ydocchange)",
      "commitMessage": "\nClean up the command-line runner api, which uncovered a bunch\nof bugs in Options serialization.\nSet the output charset to US-ASCII by default, but let the user\nset it to UTF-8.\nFixes Issue 205\n\nR\u003dbowdidge\nDELTA\u003d107  (69 added, 17 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d87017\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@344 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/5/10, 7:38 PM",
      "commitName": "053636cbd1a8fb97e55b4f82bc4b5bee8beaf47e",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "\nClean up the command-line runner api, which uncovered a bunch\nof bugs in Options serialization.\nSet the output charset to US-ASCII by default, but let the user\nset it to UTF-8.\nFixes Issue 205\n\nR\u003dbowdidge\nDELTA\u003d107  (69 added, 17 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d87017\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@344 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/5/10, 7:38 PM",
          "commitName": "053636cbd1a8fb97e55b4f82bc4b5bee8beaf47e",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/5/10, 4:13 PM",
          "commitNameOld": "114620510958121ebec3dd8d037d70571fb7da20",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 141,
          "functionName": "setRunOptions",
          "functionAnnotation": "",
          "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
          "diff": "@@ -1,18 +1,26 @@\n-protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n+protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n+    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n+    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    createDefineReplacements(config.define, options);\n+    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n+    options.devMode \u003d config.jscompDevMode;\n+    options.setCodingConvention(config.codingConvention);\n+    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+    options.outputCharset \u003d getOutputCharset();\n+    inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n-    inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[options-B]",
            "newValue": "[options-CompilerOptions]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "\nClean up the command-line runner api, which uncovered a bunch\nof bugs in Options serialization.\nSet the output charset to US-ASCII by default, but let the user\nset it to UTF-8.\nFixes Issue 205\n\nR\u003dbowdidge\nDELTA\u003d107  (69 added, 17 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d87017\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@344 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/5/10, 7:38 PM",
          "commitName": "053636cbd1a8fb97e55b4f82bc4b5bee8beaf47e",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/5/10, 4:13 PM",
          "commitNameOld": "114620510958121ebec3dd8d037d70571fb7da20",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 141,
          "functionName": "setRunOptions",
          "functionAnnotation": "",
          "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
          "diff": "@@ -1,18 +1,26 @@\n-protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n+protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n+    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n+    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    createDefineReplacements(config.define, options);\n+    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n+    options.devMode \u003d config.jscompDevMode;\n+    options.setCodingConvention(config.codingConvention);\n+    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+    options.outputCharset \u003d getOutputCharset();\n+    inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n-    inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[IOException, FlagUsageException]",
            "newValue": "[FlagUsageException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nClean up the command-line runner api, which uncovered a bunch\nof bugs in Options serialization.\nSet the output charset to US-ASCII by default, but let the user\nset it to UTF-8.\nFixes Issue 205\n\nR\u003dbowdidge\nDELTA\u003d107  (69 added, 17 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d87017\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@344 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/5/10, 7:38 PM",
          "commitName": "053636cbd1a8fb97e55b4f82bc4b5bee8beaf47e",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/5/10, 4:13 PM",
          "commitNameOld": "114620510958121ebec3dd8d037d70571fb7da20",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 141,
          "functionName": "setRunOptions",
          "functionAnnotation": "",
          "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
          "diff": "@@ -1,18 +1,26 @@\n-protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n+protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n+    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n+    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    createDefineReplacements(config.define, options);\n+    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n+    options.devMode \u003d config.jscompDevMode;\n+    options.setCodingConvention(config.codingConvention);\n+    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+    options.outputCharset \u003d getOutputCharset();\n+    inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n-    inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nClean up the command-line runner api, which uncovered a bunch\nof bugs in Options serialization.\nSet the output charset to US-ASCII by default, but let the user\nset it to UTF-8.\nFixes Issue 205\n\nR\u003dbowdidge\nDELTA\u003d107  (69 added, 17 deleted, 21 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d87017\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@344 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/5/10, 7:38 PM",
          "commitName": "053636cbd1a8fb97e55b4f82bc4b5bee8beaf47e",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/5/10, 4:13 PM",
          "commitNameOld": "114620510958121ebec3dd8d037d70571fb7da20",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n    createDefineReplacements(config.define, options);\n    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n    options.devMode \u003d config.jscompDevMode;\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    options.outputCharset \u003d getOutputCharset();\n    inputCharset \u003d getInputCharset();\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
          "functionStartLine": 141,
          "functionName": "setRunOptions",
          "functionAnnotation": "",
          "functionDoc": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n",
          "diff": "@@ -1,18 +1,26 @@\n-protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n+protected final void setRunOptions(CompilerOptions options) throws FlagUsageException, IOException {\n+    DiagnosticGroups diagnosticGroups \u003d getDiagnosticGroups();\n+    diagnosticGroups.setWarningLevels(options, config.jscompError, CheckLevel.ERROR);\n+    diagnosticGroups.setWarningLevels(options, config.jscompWarning, CheckLevel.WARNING);\n+    diagnosticGroups.setWarningLevels(options, config.jscompOff, CheckLevel.OFF);\n+    createDefineReplacements(config.define, options);\n+    options.manageClosureDependencies \u003d config.manageClosureDependencies;\n+    options.devMode \u003d config.jscompDevMode;\n+    options.setCodingConvention(config.codingConvention);\n+    options.setSummaryDetailLevel(config.summaryDetailLevel);\n+    options.outputCharset \u003d getOutputCharset();\n+    inputCharset \u003d getInputCharset();\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    options.setCodingConvention(config.codingConvention);\n-    options.setSummaryDetailLevel(config.summaryDetailLevel);\n-    inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "Sets options based on the configurations set flags API.\nCalled during the run() run() method.\nIf you want to ignore the flags API, or intepret flags your own way,\nthen you should override this method.\n"
          }
        }
      ]
    },
    "114620510958121ebec3dd8d037d70571fb7da20": {
      "type": "Ybodychange",
      "commitMessage": "\nFiltering what is presented in the source map is independent of the\nsource map format so lets default to a more limited set of nodes by\ndefault now.\n\nR\u003djschorr\nDELTA\u003d200  (170 added, 11 deleted, 19 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d85017\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@340 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/5/10, 4:13 PM",
      "commitName": "114620510958121ebec3dd8d037d70571fb7da20",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "8/4/10, 12:46 PM",
      "commitNameOld": "69b2d38e6c621ef6557eabe4948f69f78bd7f363",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.14,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset \u003d getInputCharset();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 151,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,17 +1,18 @@\n protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n+    options.sourceMapDetailLevel \u003d config.sourceMapDetailLevel;\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n     options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7": {
      "type": "Ybodychange",
      "commitMessage": "Refactor how coding conventions are set (Nick)\nR\u003dalan\n\nDon\u0027t use NAME for label names, introduce LABEL_NAME. This improves\nthe correctness of the compiler as many passes don\u0027t distinguish\nbetween label names and variable names appropriately. (John)\nR\u003drobert\nDELTA\u003d57  (29 added, 12 deleted, 16 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@163 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/30/10, 9:01 PM",
      "commitName": "8c5eb247cb5361a6ffa2d86aa4c2de17c234bda7",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/22/10, 10:51 PM",
      "commitNameOld": "a70a7c599e53a7752cf4b9e6e82b4408c3c4c04b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.92,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    options.setCodingConvention(config.codingConvention);\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset \u003d getInputCharset();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 145,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,19 +1,17 @@\n protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (config.thirdParty) {\n-        options.setCodingConvention(new DefaultCodingConvention());\n-    }\n+    options.setCodingConvention(config.codingConvention);\n     options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6f2539acd3c37bd7f0d031b43364f75a5cd6d5f7": {
      "type": "Ybodychange",
      "commitMessage": "fix some code that was initializing options from flags twice.\n(and thus re-parsing the js messages bundles)\nas it turns out, there are a lot of ways to not initialize options. (Nick)\nR\u003djohn\nDELTA\u003d99  (72 added, 24 deleted, 3 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@147 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/10, 10:41 AM",
      "commitName": "6f2539acd3c37bd7f0d031b43364f75a5cd6d5f7",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 10.51,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.thirdParty) {\n        options.setCodingConvention(new DefaultCodingConvention());\n    }\n    options.setSummaryDetailLevel(config.summaryDetailLevel);\n    inputCharset \u003d getInputCharset();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 145,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,19 @@\n protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n     if (config.jsOutputFile.length() \u003e 0) {\n         options.jsOutputFile \u003d config.jsOutputFile;\n     }\n     if (config.createSourceMap.length() \u003e 0) {\n         options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n     if (!config.variableMapInputFile.equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n     if (!config.propertyMapInputFile.equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n     if (config.thirdParty) {\n         options.setCodingConvention(new DefaultCodingConvention());\n     }\n+    options.setSummaryDetailLevel(config.summaryDetailLevel);\n     inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c080c668a4ccd9eb151cbb4f90980ddbbfbaba44": {
      "type": "Ybodychange",
      "commitMessage": "rolling back the EventTarget changes for a little bit\n\ndecouple command-line options from command-line parsing. (Nick)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@127 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/4/10, 10:33 AM",
      "commitName": "c080c668a4ccd9eb151cbb4f90980ddbbfbaba44",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/26/10, 6:04 PM",
      "commitNameOld": "848ace840362a1f5558bec065cb40548ff66587a",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 5.69,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n    if (config.jsOutputFile.length() \u003e 0) {\n        options.jsOutputFile \u003d config.jsOutputFile;\n    }\n    if (config.createSourceMap.length() \u003e 0) {\n        options.sourceMapOutputPath \u003d config.createSourceMap;\n    }\n    if (!config.variableMapInputFile.equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n    }\n    if (!config.propertyMapInputFile.equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n    }\n    if (config.thirdParty) {\n        options.setCodingConvention(new DefaultCodingConvention());\n    }\n    inputCharset \u003d getInputCharset();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 143,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,18 +1,18 @@\n protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n-    if (FLAG_js_output_file.get().length() \u003e 0) {\n-        options.jsOutputFile \u003d FLAG_js_output_file.get();\n+    if (config.jsOutputFile.length() \u003e 0) {\n+        options.jsOutputFile \u003d config.jsOutputFile;\n     }\n-    if (FLAG_create_source_map.get().length() \u003e 0) {\n-        options.sourceMapOutputPath \u003d FLAG_create_source_map.get();\n+    if (config.createSourceMap.length() \u003e 0) {\n+        options.sourceMapOutputPath \u003d config.createSourceMap;\n     }\n-    if (!FLAG_variable_map_input_file.get().equals(\"\")) {\n-        options.inputVariableMapSerialized \u003d VariableMap.load(FLAG_variable_map_input_file.get()).toBytes();\n+    if (!config.variableMapInputFile.equals(\"\")) {\n+        options.inputVariableMapSerialized \u003d VariableMap.load(config.variableMapInputFile).toBytes();\n     }\n-    if (!FLAG_property_map_input_file.get().equals(\"\")) {\n-        options.inputPropertyMapSerialized \u003d VariableMap.load(FLAG_property_map_input_file.get()).toBytes();\n+    if (!config.propertyMapInputFile.equals(\"\")) {\n+        options.inputPropertyMapSerialized \u003d VariableMap.load(config.propertyMapInputFile).toBytes();\n     }\n-    if (FLAG_third_party.get()) {\n+    if (config.thirdParty) {\n         options.setCodingConvention(new DefaultCodingConvention());\n     }\n     inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "848ace840362a1f5558bec065cb40548ff66587a": {
      "type": "Yfilerename",
      "commitMessage": "Rename CompilerRunner -\u003e CommandLineRunner.\nI\u0027ll also do this for JSCompilerRunner, but it will be a much\nbigger change. (Nick)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@119 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/26/10, 6:04 PM",
      "commitName": "848ace840362a1f5558bec065cb40548ff66587a",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/26/10, 3:45 PM",
      "commitNameOld": "50c1b3d39ff5b17c956a2235f97f7b5da05ab6f0",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n    if (FLAG_js_output_file.get().length() \u003e 0) {\n        options.jsOutputFile \u003d FLAG_js_output_file.get();\n    }\n    if (FLAG_create_source_map.get().length() \u003e 0) {\n        options.sourceMapOutputPath \u003d FLAG_create_source_map.get();\n    }\n    if (!FLAG_variable_map_input_file.get().equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(FLAG_variable_map_input_file.get()).toBytes();\n    }\n    if (!FLAG_property_map_input_file.get().equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(FLAG_property_map_input_file.get()).toBytes();\n    }\n    if (FLAG_third_party.get()) {\n        options.setCodingConvention(new DefaultCodingConvention());\n    }\n    inputCharset \u003d getInputCharset();\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java",
      "functionStartLine": 296,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
        "newPath": "src/com/google/javascript/jscomp/AbstractCommandLineRunner.java"
      }
    },
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/09, 3:50 PM",
      "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/8/09, 3:50 PM",
          "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "12/7/09, 1:53 PM",
          "commitNameOld": "845f5ff65858fd0d1829f3d2f16f758725e8028f",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n    if (FLAG_js_output_file.get().length() \u003e 0) {\n        options.jsOutputFile \u003d FLAG_js_output_file.get();\n    }\n    if (FLAG_create_source_map.get().length() \u003e 0) {\n        options.sourceMapOutputPath \u003d FLAG_create_source_map.get();\n    }\n    if (!FLAG_variable_map_input_file.get().equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(FLAG_variable_map_input_file.get()).toBytes();\n    }\n    if (!FLAG_property_map_input_file.get().equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(FLAG_property_map_input_file.get()).toBytes();\n    }\n    if (FLAG_third_party.get()) {\n        options.setCodingConvention(new DefaultCodingConvention());\n    }\n    inputCharset \u003d getInputCharset();\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
          "functionStartLine": 273,
          "functionName": "setRunOptions",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,18 @@\n-protected final void setRunOptions(B options) throws IOException {\n+protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n     if (FLAG_js_output_file.get().length() \u003e 0) {\n         options.jsOutputFile \u003d FLAG_js_output_file.get();\n     }\n     if (FLAG_create_source_map.get().length() \u003e 0) {\n         options.sourceMapOutputPath \u003d FLAG_create_source_map.get();\n     }\n     if (!FLAG_variable_map_input_file.get().equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(FLAG_variable_map_input_file.get()).toBytes();\n     }\n     if (!FLAG_property_map_input_file.get().equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(FLAG_property_map_input_file.get()).toBytes();\n     }\n     if (FLAG_third_party.get()) {\n         options.setCodingConvention(new DefaultCodingConvention());\n     }\n+    inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, FlagUsageException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/8/09, 3:50 PM",
          "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "12/7/09, 1:53 PM",
          "commitNameOld": "845f5ff65858fd0d1829f3d2f16f758725e8028f",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n    if (FLAG_js_output_file.get().length() \u003e 0) {\n        options.jsOutputFile \u003d FLAG_js_output_file.get();\n    }\n    if (FLAG_create_source_map.get().length() \u003e 0) {\n        options.sourceMapOutputPath \u003d FLAG_create_source_map.get();\n    }\n    if (!FLAG_variable_map_input_file.get().equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(FLAG_variable_map_input_file.get()).toBytes();\n    }\n    if (!FLAG_property_map_input_file.get().equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(FLAG_property_map_input_file.get()).toBytes();\n    }\n    if (FLAG_third_party.get()) {\n        options.setCodingConvention(new DefaultCodingConvention());\n    }\n    inputCharset \u003d getInputCharset();\n}",
          "path": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
          "functionStartLine": 273,
          "functionName": "setRunOptions",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,17 +1,18 @@\n-protected final void setRunOptions(B options) throws IOException {\n+protected final void setRunOptions(B options) throws IOException, FlagUsageException {\n     if (FLAG_js_output_file.get().length() \u003e 0) {\n         options.jsOutputFile \u003d FLAG_js_output_file.get();\n     }\n     if (FLAG_create_source_map.get().length() \u003e 0) {\n         options.sourceMapOutputPath \u003d FLAG_create_source_map.get();\n     }\n     if (!FLAG_variable_map_input_file.get().equals(\"\")) {\n         options.inputVariableMapSerialized \u003d VariableMap.load(FLAG_variable_map_input_file.get()).toBytes();\n     }\n     if (!FLAG_property_map_input_file.get().equals(\"\")) {\n         options.inputPropertyMapSerialized \u003d VariableMap.load(FLAG_property_map_input_file.get()).toBytes();\n     }\n     if (FLAG_third_party.get()) {\n         options.setCodingConvention(new DefaultCodingConvention());\n     }\n+    inputCharset \u003d getInputCharset();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6a6ea480bae01f40f9795218ac911bb7de18d34a": {
      "type": "Yintroduced",
      "commitMessage": "Don\u0027t warn about duplicate variable declarations unless warning_level is\nset to VERBOSE.\n\nImplementation of libary function goog.base.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@13 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/19/09, 1:23 PM",
      "commitName": "6a6ea480bae01f40f9795218ac911bb7de18d34a",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,17 @@\n+protected final void setRunOptions(B options) throws IOException {\n+    if (FLAG_js_output_file.get().length() \u003e 0) {\n+        options.jsOutputFile \u003d FLAG_js_output_file.get();\n+    }\n+    if (FLAG_create_source_map.get().length() \u003e 0) {\n+        options.sourceMapOutputPath \u003d FLAG_create_source_map.get();\n+    }\n+    if (!FLAG_variable_map_input_file.get().equals(\"\")) {\n+        options.inputVariableMapSerialized \u003d VariableMap.load(FLAG_variable_map_input_file.get()).toBytes();\n+    }\n+    if (!FLAG_property_map_input_file.get().equals(\"\")) {\n+        options.inputPropertyMapSerialized \u003d VariableMap.load(FLAG_property_map_input_file.get()).toBytes();\n+    }\n+    if (FLAG_third_party.get()) {\n+        options.setCodingConvention(new DefaultCodingConvention());\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "protected final void setRunOptions(B options) throws IOException {\n    if (FLAG_js_output_file.get().length() \u003e 0) {\n        options.jsOutputFile \u003d FLAG_js_output_file.get();\n    }\n    if (FLAG_create_source_map.get().length() \u003e 0) {\n        options.sourceMapOutputPath \u003d FLAG_create_source_map.get();\n    }\n    if (!FLAG_variable_map_input_file.get().equals(\"\")) {\n        options.inputVariableMapSerialized \u003d VariableMap.load(FLAG_variable_map_input_file.get()).toBytes();\n    }\n    if (!FLAG_property_map_input_file.get().equals(\"\")) {\n        options.inputPropertyMapSerialized \u003d VariableMap.load(FLAG_property_map_input_file.get()).toBytes();\n    }\n    if (FLAG_third_party.get()) {\n        options.setCodingConvention(new DefaultCodingConvention());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/AbstractCompilerRunner.java",
      "functionStartLine": 237,
      "functionName": "setRunOptions",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}