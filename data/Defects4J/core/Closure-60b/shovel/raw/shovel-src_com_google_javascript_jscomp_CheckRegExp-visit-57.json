{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CheckRegExp.java",
  "functionName": "visit",
  "functionId": "visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/CheckRegExp.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 57,
  "functionEndLine": 82,
  "numCommitsSeen": 9,
  "timeTaken": 944,
  "changeHistory": [
    "8f4b174685e702b19e32a46eb6623d8a74ac79e1",
    "a2715a52745d816a87c05d3007ed8bfe7ef18491",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
    "74a817bbf5256d671036356c58096f612535e4a2"
  ],
  "changeHistoryShort": {
    "8f4b174685e702b19e32a46eb6623d8a74ac79e1": "Ybodychange",
    "a2715a52745d816a87c05d3007ed8bfe7ef18491": "Yformatchange",
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": "Ybodychange",
    "74a817bbf5256d671036356c58096f612535e4a2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8f4b174685e702b19e32a46eb6623d8a74ac79e1": {
      "type": "Ybodychange",
      "commitMessage": "\nAn optimization pass for regular expression bodies.\n\nI don\u0027t know about the overall utility of this, or how/whether\nit should be rolled out, but it saves between 3-6.5% pre-gzip\nand between 1.5-3% post-gzip on parsing code that I\u0027ve been\ntrying to aggressively minify.\n\nR\u003dacleung,johnlenz\nDELTA\u003d3492  (3486 added, 1 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1861\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1090 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/12/11, 4:06 PM",
      "commitName": "8f4b174685e702b19e32a46eb6623d8a74ac79e1",
      "commitAuthor": "msamuel@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.16,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.isReferenceName(n)) {\n        String name \u003d n.getString();\n        if (name.equals(\"RegExp\") \u0026\u0026 t.getScope().getVar(name) \u003d\u003d null) {\n            int parentType \u003d parent.getType();\n            boolean first \u003d (n \u003d\u003d parent.getFirstChild());\n            if (!((parentType \u003d\u003d Token.NEW \u0026\u0026 first) || (parentType \u003d\u003d Token.CALL \u0026\u0026 first) || (parentType \u003d\u003d Token.INSTANCEOF \u0026\u0026 !first))) {\n                t.report(n, REGEXP_REFERENCE);\n                globalRegExpPropertiesUsed \u003d true;\n            }\n        }\n    } else if (n.getType() \u003d\u003d Token.REGEXP) {\n        String pattern \u003d n.getFirstChild().getString();\n        String flags \u003d n.getChildCount() \u003d\u003d 2 ? n.getLastChild().getString() : \"\";\n        try {\n            RegExpTree.parseRegExp(pattern, flags);\n        } catch (IllegalArgumentException ex) {\n            t.report(n, MALFORMED_REGEXP, ex.getMessage());\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckRegExp.java",
      "functionStartLine": 57,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,14 +1,22 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (NodeUtil.isReferenceName(n)) {\n         String name \u003d n.getString();\n         if (name.equals(\"RegExp\") \u0026\u0026 t.getScope().getVar(name) \u003d\u003d null) {\n             int parentType \u003d parent.getType();\n             boolean first \u003d (n \u003d\u003d parent.getFirstChild());\n             if (!((parentType \u003d\u003d Token.NEW \u0026\u0026 first) || (parentType \u003d\u003d Token.CALL \u0026\u0026 first) || (parentType \u003d\u003d Token.INSTANCEOF \u0026\u0026 !first))) {\n                 t.report(n, REGEXP_REFERENCE);\n                 globalRegExpPropertiesUsed \u003d true;\n             }\n         }\n+    } else if (n.getType() \u003d\u003d Token.REGEXP) {\n+        String pattern \u003d n.getFirstChild().getString();\n+        String flags \u003d n.getChildCount() \u003d\u003d 2 ? n.getLastChild().getString() : \"\";\n+        try {\n+            RegExpTree.parseRegExp(pattern, flags);\n+        } catch (IllegalArgumentException ex) {\n+            t.report(n, MALFORMED_REGEXP, ex.getMessage());\n+        }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a2715a52745d816a87c05d3007ed8bfe7ef18491": {
      "type": "Yformatchange",
      "commitMessage": "\ndelete all trailing whitespace\nfix up the presubmit to skip generated files\n\nR\u003djohnlenz\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d822\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@875 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/10/11, 3:34 PM",
      "commitName": "a2715a52745d816a87c05d3007ed8bfe7ef18491",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 118.74,
      "commitsBetweenForRepo": 317,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.isReferenceName(n)) {\n        String name \u003d n.getString();\n        if (name.equals(\"RegExp\") \u0026\u0026 t.getScope().getVar(name) \u003d\u003d null) {\n            int parentType \u003d parent.getType();\n            boolean first \u003d (n \u003d\u003d parent.getFirstChild());\n            if (!((parentType \u003d\u003d Token.NEW \u0026\u0026 first) || (parentType \u003d\u003d Token.CALL \u0026\u0026 first) || (parentType \u003d\u003d Token.INSTANCEOF \u0026\u0026 !first))) {\n                t.report(n, REGEXP_REFERENCE);\n                globalRegExpPropertiesUsed \u003d true;\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckRegExp.java",
      "functionStartLine": 52,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/15 by nick\n\n        Move the construction of ArrowTypes out of FunctionType.\n\n        R\u003djohn\n        DELTA\u003d197  (79 added, 27 deleted, 91 changed)\n\nChange on 2010/04/15 by nick\n\n        if a file is marked as an @extern, then make it an extern.\n\n        R\u003drobert\n        DELTA\u003d51  (46 added, 0 deleted, 5 changed)\n\nChange on 2010/04/15 by john\n\n        Maintain source information.\n\n        R\u003dalan\n        DELTA\u003d60  (28 added, 7 deleted, 25 changed)\n\nChange on 2010/04/15 by john\n\n        Fix overly aggressive RegExp check.\n\n        R\u003dalan\n        DELTA\u003d15  (12 added, 0 deleted, 3 changed)\n\nChange on 2010/04/15 by nick\n\n        more fun with function-type building.\n\n        R\u003djohn\n        DELTA\u003d432  (206 added, 142 deleted, 84 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003doqlcyn\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@186 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/15/10, 4:45 PM",
      "commitName": "e3bcc1c6e7ce7e9bfc3098cd5bf57774049f5baa",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/9/10, 7:21 AM",
      "commitNameOld": "74a817bbf5256d671036356c58096f612535e4a2",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 6.39,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.isReferenceName(n)) {\n        String name \u003d n.getString();\n        if (name.equals(\"RegExp\") \u0026\u0026 t.getScope().getVar(name) \u003d\u003d null) {\n            int parentType \u003d parent.getType();\n            boolean first \u003d (n \u003d\u003d parent.getFirstChild());\n            if (!((parentType \u003d\u003d Token.NEW \u0026\u0026 first) || (parentType \u003d\u003d Token.CALL \u0026\u0026 first) || (parentType \u003d\u003d Token.INSTANCEOF \u0026\u0026 !first))) {\n                t.report(n, REGEXP_REFERENCE);\n                globalRegExpPropertiesUsed \u003d true;\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckRegExp.java",
      "functionStartLine": 53,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,12 +1,14 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (NodeUtil.isReferenceName(n)) {\n         String name \u003d n.getString();\n         if (name.equals(\"RegExp\") \u0026\u0026 t.getScope().getVar(name) \u003d\u003d null) {\n-            if (parent.getType() !\u003d Token.NEW || n !\u003d parent.getFirstChild()) {\n+            int parentType \u003d parent.getType();\n+            boolean first \u003d (n \u003d\u003d parent.getFirstChild());\n+            if (!((parentType \u003d\u003d Token.NEW \u0026\u0026 first) || (parentType \u003d\u003d Token.CALL \u0026\u0026 first) || (parentType \u003d\u003d Token.INSTANCEOF \u0026\u0026 !first))) {\n                 t.report(n, REGEXP_REFERENCE);\n                 globalRegExpPropertiesUsed \u003d true;\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "74a817bbf5256d671036356c58096f612535e4a2": {
      "type": "Yintroduced",
      "commitMessage": "\nChange on 2010/04/08 by john\n\n        Part I: Add a pass that checks for references to the global RegExp object.\n\n        R\u003dalan\n        DELTA\u003d192  (185 added, 1 deleted, 6 changed)\n\nChange on 2010/04/08 by nick\n\n        type annotation fixit. Fixes issue 140.\n\n        R\u003dalan\n        DELTA\u003d69  (41 added, 0 deleted, 28 changed)\n\nChange on 2010/04/08 by alan\n\n        Fix the flow sensitive inlining case that breaks code.\n\n        R\u003djohn\n        DELTA\u003d163  (158 added, 0 deleted, 5 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003djfazwv\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@178 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/9/10, 7:21 AM",
      "commitName": "74a817bbf5256d671036356c58096f612535e4a2",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,12 @@\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (NodeUtil.isReferenceName(n)) {\n+        String name \u003d n.getString();\n+        if (name.equals(\"RegExp\") \u0026\u0026 t.getScope().getVar(name) \u003d\u003d null) {\n+            if (parent.getType() !\u003d Token.NEW || n !\u003d parent.getFirstChild()) {\n+                t.report(n, REGEXP_REFERENCE);\n+                globalRegExpPropertiesUsed \u003d true;\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (NodeUtil.isReferenceName(n)) {\n        String name \u003d n.getString();\n        if (name.equals(\"RegExp\") \u0026\u0026 t.getScope().getVar(name) \u003d\u003d null) {\n            if (parent.getType() !\u003d Token.NEW || n !\u003d parent.getFirstChild()) {\n                t.report(n, REGEXP_REFERENCE);\n                globalRegExpPropertiesUsed \u003d true;\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/CheckRegExp.java",
      "functionStartLine": 53,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}