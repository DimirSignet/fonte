{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PureFunctionIdentifier.java",
  "functionName": "propagateSideEffects",
  "functionId": "propagateSideEffects",
  "sourceFilePath": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
  "functionAnnotation": "",
  "functionDoc": "Propagate side effect information by building a graph based on\ncall site information stored in FunctionInformation and the\nDefinitionProvider and then running GraphReachability to\ndetermine the set of functions that have side effects.\n",
  "functionStartLine": 252,
  "functionEndLine": 302,
  "numCommitsSeen": 25,
  "timeTaken": 1517,
  "changeHistory": [
    "3c5a6f6a1b87c655c5eb3ed0ebcfce886ab6a614",
    "d48e656b8ef676a9d4d87503028d59628013307f",
    "6d4979514fd802dd4deded67f3ba1929e74a928d",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3c5a6f6a1b87c655c5eb3ed0ebcfce886ab6a614": "Ybodychange",
    "d48e656b8ef676a9d4d87503028d59628013307f": "Ybodychange",
    "6d4979514fd802dd4deded67f3ba1929e74a928d": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3c5a6f6a1b87c655c5eb3ed0ebcfce886ab6a614": {
      "type": "Ybodychange",
      "commitMessage": "\nAllow graphs without annotations.\n\nR\u003dacleung\nDELTA\u003d405  (249 added, 83 deleted, 73 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d58\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@592 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/3/10, 2:10 PM",
      "commitName": "3c5a6f6a1b87c655c5eb3ed0ebcfce886ab6a614",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/22/10, 7:55 PM",
      "commitNameOld": "d48e656b8ef676a9d4d87503028d59628013307f",
      "commitAuthorOld": "diegosalas@google.com",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private void propagateSideEffects() {\n    DiGraph\u003cFunctionInformation, Node\u003e sideEffectGraph \u003d LinkedDirectedGraph.createWithoutAnnotations();\n    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n        sideEffectGraph.createNode(functionInfo);\n    }\n    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n        if (!functionInfo.mayHaveSideEffects()) {\n            continue;\n        }\n        for (Node callSite : functionInfo.getCallsInFunctionBody()) {\n            Node callee \u003d callSite.getFirstChild();\n            Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, callee);\n            if (defs \u003d\u003d null) {\n                functionInfo.setTaintsUnknown();\n                break;\n            }\n            for (Definition def : defs) {\n                Node defValue \u003d def.getRValue();\n                FunctionInformation dep \u003d functionSideEffectMap.get(defValue);\n                Preconditions.checkNotNull(dep);\n                sideEffectGraph.connect(dep, callSite, functionInfo);\n            }\n        }\n    }\n    FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback()).computeFixedPoint(sideEffectGraph);\n    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n        if (functionInfo.mayBePure()) {\n            functionInfo.setIsPure();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 252,
      "functionName": "propagateSideEffects",
      "functionAnnotation": "",
      "functionDoc": "Propagate side effect information by building a graph based on\ncall site information stored in FunctionInformation and the\nDefinitionProvider and then running GraphReachability to\ndetermine the set of functions that have side effects.\n",
      "diff": "@@ -1,31 +1,31 @@\n private void propagateSideEffects() {\n-    DiGraph\u003cFunctionInformation, Node\u003e sideEffectGraph \u003d new LinkedDirectedGraph\u003cFunctionInformation, Node\u003e();\n+    DiGraph\u003cFunctionInformation, Node\u003e sideEffectGraph \u003d LinkedDirectedGraph.createWithoutAnnotations();\n     for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n         sideEffectGraph.createNode(functionInfo);\n     }\n     for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n         if (!functionInfo.mayHaveSideEffects()) {\n             continue;\n         }\n         for (Node callSite : functionInfo.getCallsInFunctionBody()) {\n             Node callee \u003d callSite.getFirstChild();\n             Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, callee);\n             if (defs \u003d\u003d null) {\n                 functionInfo.setTaintsUnknown();\n                 break;\n             }\n             for (Definition def : defs) {\n                 Node defValue \u003d def.getRValue();\n                 FunctionInformation dep \u003d functionSideEffectMap.get(defValue);\n                 Preconditions.checkNotNull(dep);\n                 sideEffectGraph.connect(dep, callSite, functionInfo);\n             }\n         }\n     }\n     FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback()).computeFixedPoint(sideEffectGraph);\n     for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n         if (functionInfo.mayBePure()) {\n             functionInfo.setIsPure();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d48e656b8ef676a9d4d87503028d59628013307f": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks builds\n\n*** Original change description ***\n\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dacleung,niranjan\nDELTA\u003d1003  (254 added, 671 deleted, 78 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@568 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 7:55 PM",
      "commitName": "d48e656b8ef676a9d4d87503028d59628013307f",
      "commitAuthor": "diegosalas@google.com",
      "commitDateOld": "11/22/10, 3:02 PM",
      "commitNameOld": "6d4979514fd802dd4deded67f3ba1929e74a928d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void propagateSideEffects() {\n    DiGraph\u003cFunctionInformation, Node\u003e sideEffectGraph \u003d new LinkedDirectedGraph\u003cFunctionInformation, Node\u003e();\n    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n        sideEffectGraph.createNode(functionInfo);\n    }\n    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n        if (!functionInfo.mayHaveSideEffects()) {\n            continue;\n        }\n        for (Node callSite : functionInfo.getCallsInFunctionBody()) {\n            Node callee \u003d callSite.getFirstChild();\n            Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, callee);\n            if (defs \u003d\u003d null) {\n                functionInfo.setTaintsUnknown();\n                break;\n            }\n            for (Definition def : defs) {\n                Node defValue \u003d def.getRValue();\n                FunctionInformation dep \u003d functionSideEffectMap.get(defValue);\n                Preconditions.checkNotNull(dep);\n                sideEffectGraph.connect(dep, callSite, functionInfo);\n            }\n        }\n    }\n    FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback()).computeFixedPoint(sideEffectGraph);\n    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n        if (functionInfo.mayBePure()) {\n            functionInfo.setIsPure();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 252,
      "functionName": "propagateSideEffects",
      "functionAnnotation": "",
      "functionDoc": "Propagate side effect information by building a graph based on\ncall site information stored in FunctionInformation and the\nDefinitionProvider and then running GraphReachability to\ndetermine the set of functions that have side effects.\n",
      "diff": "@@ -1,31 +1,31 @@\n private void propagateSideEffects() {\n-    DiGraph\u003cFunctionSideEffectData, Node\u003e sideEffectGraph \u003d new LinkedDirectedGraph\u003cFunctionSideEffectData, Node\u003e();\n-    for (FunctionSideEffectData functionInfo : functionSideEffectMap.values()) {\n+    DiGraph\u003cFunctionInformation, Node\u003e sideEffectGraph \u003d new LinkedDirectedGraph\u003cFunctionInformation, Node\u003e();\n+    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n         sideEffectGraph.createNode(functionInfo);\n     }\n-    for (FunctionSideEffectData functionInfo : functionSideEffectMap.values()) {\n+    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n         if (!functionInfo.mayHaveSideEffects()) {\n             continue;\n         }\n         for (Node callSite : functionInfo.getCallsInFunctionBody()) {\n             Node callee \u003d callSite.getFirstChild();\n             Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, callee);\n             if (defs \u003d\u003d null) {\n                 functionInfo.setTaintsUnknown();\n                 break;\n             }\n             for (Definition def : defs) {\n                 Node defValue \u003d def.getRValue();\n-                FunctionSideEffectData dep \u003d functionSideEffectMap.get(defValue);\n+                FunctionInformation dep \u003d functionSideEffectMap.get(defValue);\n                 Preconditions.checkNotNull(dep);\n                 sideEffectGraph.connect(dep, callSite, functionInfo);\n             }\n         }\n     }\n     FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback()).computeFixedPoint(sideEffectGraph);\n-    for (FunctionSideEffectData functionInfo : functionSideEffectMap.values()) {\n+    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n         if (functionInfo.mayBePure()) {\n             functionInfo.setIsPure();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d4979514fd802dd4deded67f3ba1929e74a928d": {
      "type": "Ybodychange",
      "commitMessage": "\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dnicksantos\nDELTA\u003d1000  (667 added, 250 deleted, 83 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d0\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@567 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 3:02 PM",
      "commitName": "6d4979514fd802dd4deded67f3ba1929e74a928d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/15/10, 10:20 PM",
      "commitNameOld": "da794a3a9cb2cebc0efb708ba9b465a4510c7235",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.7,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private void propagateSideEffects() {\n    DiGraph\u003cFunctionSideEffectData, Node\u003e sideEffectGraph \u003d new LinkedDirectedGraph\u003cFunctionSideEffectData, Node\u003e();\n    for (FunctionSideEffectData functionInfo : functionSideEffectMap.values()) {\n        sideEffectGraph.createNode(functionInfo);\n    }\n    for (FunctionSideEffectData functionInfo : functionSideEffectMap.values()) {\n        if (!functionInfo.mayHaveSideEffects()) {\n            continue;\n        }\n        for (Node callSite : functionInfo.getCallsInFunctionBody()) {\n            Node callee \u003d callSite.getFirstChild();\n            Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, callee);\n            if (defs \u003d\u003d null) {\n                functionInfo.setTaintsUnknown();\n                break;\n            }\n            for (Definition def : defs) {\n                Node defValue \u003d def.getRValue();\n                FunctionSideEffectData dep \u003d functionSideEffectMap.get(defValue);\n                Preconditions.checkNotNull(dep);\n                sideEffectGraph.connect(dep, callSite, functionInfo);\n            }\n        }\n    }\n    FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback()).computeFixedPoint(sideEffectGraph);\n    for (FunctionSideEffectData functionInfo : functionSideEffectMap.values()) {\n        if (functionInfo.mayBePure()) {\n            functionInfo.setIsPure();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 255,
      "functionName": "propagateSideEffects",
      "functionAnnotation": "",
      "functionDoc": "Propagate side effect information by building a graph based on\ncall site information stored in FunctionInformation and the\nDefinitionProvider and then running GraphReachability to\ndetermine the set of functions that have side effects.\n",
      "diff": "@@ -1,31 +1,31 @@\n private void propagateSideEffects() {\n-    DiGraph\u003cFunctionInformation, Node\u003e sideEffectGraph \u003d new LinkedDirectedGraph\u003cFunctionInformation, Node\u003e();\n-    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n+    DiGraph\u003cFunctionSideEffectData, Node\u003e sideEffectGraph \u003d new LinkedDirectedGraph\u003cFunctionSideEffectData, Node\u003e();\n+    for (FunctionSideEffectData functionInfo : functionSideEffectMap.values()) {\n         sideEffectGraph.createNode(functionInfo);\n     }\n-    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n+    for (FunctionSideEffectData functionInfo : functionSideEffectMap.values()) {\n         if (!functionInfo.mayHaveSideEffects()) {\n             continue;\n         }\n         for (Node callSite : functionInfo.getCallsInFunctionBody()) {\n             Node callee \u003d callSite.getFirstChild();\n             Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, callee);\n             if (defs \u003d\u003d null) {\n                 functionInfo.setTaintsUnknown();\n                 break;\n             }\n             for (Definition def : defs) {\n                 Node defValue \u003d def.getRValue();\n-                FunctionInformation dep \u003d functionSideEffectMap.get(defValue);\n+                FunctionSideEffectData dep \u003d functionSideEffectMap.get(defValue);\n                 Preconditions.checkNotNull(dep);\n                 sideEffectGraph.connect(dep, callSite, functionInfo);\n             }\n         }\n     }\n     FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback()).computeFixedPoint(sideEffectGraph);\n-    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n+    for (FunctionSideEffectData functionInfo : functionSideEffectMap.values()) {\n         if (functionInfo.mayBePure()) {\n             functionInfo.setIsPure();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,31 @@\n+private void propagateSideEffects() {\n+    DiGraph\u003cFunctionInformation, Node\u003e sideEffectGraph \u003d new LinkedDirectedGraph\u003cFunctionInformation, Node\u003e();\n+    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n+        sideEffectGraph.createNode(functionInfo);\n+    }\n+    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n+        if (!functionInfo.mayHaveSideEffects()) {\n+            continue;\n+        }\n+        for (Node callSite : functionInfo.getCallsInFunctionBody()) {\n+            Node callee \u003d callSite.getFirstChild();\n+            Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, callee);\n+            if (defs \u003d\u003d null) {\n+                functionInfo.setTaintsUnknown();\n+                break;\n+            }\n+            for (Definition def : defs) {\n+                Node defValue \u003d def.getRValue();\n+                FunctionInformation dep \u003d functionSideEffectMap.get(defValue);\n+                Preconditions.checkNotNull(dep);\n+                sideEffectGraph.connect(dep, callSite, functionInfo);\n+            }\n+        }\n+    }\n+    FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback()).computeFixedPoint(sideEffectGraph);\n+    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n+        if (functionInfo.mayBePure()) {\n+            functionInfo.setIsPure();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void propagateSideEffects() {\n    DiGraph\u003cFunctionInformation, Node\u003e sideEffectGraph \u003d new LinkedDirectedGraph\u003cFunctionInformation, Node\u003e();\n    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n        sideEffectGraph.createNode(functionInfo);\n    }\n    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n        if (!functionInfo.mayHaveSideEffects()) {\n            continue;\n        }\n        for (Node callSite : functionInfo.getCallsInFunctionBody()) {\n            Node callee \u003d callSite.getFirstChild();\n            Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, callee);\n            if (defs \u003d\u003d null) {\n                functionInfo.setTaintsUnknown();\n                break;\n            }\n            for (Definition def : defs) {\n                Node defValue \u003d def.getRValue();\n                FunctionInformation dep \u003d functionSideEffectMap.get(defValue);\n                Preconditions.checkNotNull(dep);\n                sideEffectGraph.connect(dep, callSite, functionInfo);\n            }\n        }\n    }\n    FixedPointGraphTraversal.newTraversal(new SideEffectPropagationCallback()).computeFixedPoint(sideEffectGraph);\n    for (FunctionInformation functionInfo : functionSideEffectMap.values()) {\n        if (functionInfo.mayBePure()) {\n            functionInfo.setIsPure();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 207,
      "functionName": "propagateSideEffects",
      "functionAnnotation": "",
      "functionDoc": "Propagate side effect information by building a graph based on\ncall site information stored in FunctionInformation and the\nDefinitionProvider and then running GraphReachability to\ndetermine the set of functions that have side effects.\n"
    }
  }
}