{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RenameVars.java",
  "functionName": "visit",
  "functionId": "$visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/RenameVars.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 214,
  "functionEndLine": 284,
  "numCommitsSeen": 20,
  "timeTaken": 1172,
  "changeHistory": [
    "a39658930c714323e70092d545cb82b5f13b6280",
    "b6e3f5c01de00915df7682dba4e9a7f733630d34",
    "95ac6a7f06053f4a85286e30394836d62d141518",
    "1860001c0e04ba7f3085bcbcf0ea6fb2ddc3f83c",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "55d1c8181d46a0b5e5a121db314145be37a10934",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "938f48a60c544f6b7bdb5d49006f654a51ca9a22",
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "a39658930c714323e70092d545cb82b5f13b6280": "Ybodychange",
    "b6e3f5c01de00915df7682dba4e9a7f733630d34": "Yformatchange",
    "95ac6a7f06053f4a85286e30394836d62d141518": "Ybodychange",
    "1860001c0e04ba7f3085bcbcf0ea6fb2ddc3f83c": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "55d1c8181d46a0b5e5a121db314145be37a10934": "Ybodychange",
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ybodychange",
    "938f48a60c544f6b7bdb5d49006f654a51ca9a22": "Ybodychange",
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a39658930c714323e70092d545cb82b5f13b6280": {
      "type": "Ybodychange",
      "commitMessage": "\nRemoves useless Input variable in RenameVars.Assignment.\n\nR\u003dnicksantos\nDELTA\u003d8  (0 added, 3 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d641\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@810 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/23/11, 12:28 AM",
      "commitName": "a39658930c714323e70092d545cb82b5f13b6280",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/22/11, 2:58 PM",
      "commitNameOld": "b6e3f5c01de00915df7682dba4e9a7f733630d34",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 0.4,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal() \u0026\u0026 (!var.scope.getParent().isGlobal() || !var.isBleedingFunction());\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        if (local) {\n            String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n            if (!newName.equals(name)) {\n                n.setString(newName);\n            }\n        }\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (pseudoNameMap !\u003d null) {\n        recordPseudoName(n);\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + getLocalVarIndex(var);\n        incCount(tempName);\n        localNameNodes.add(n);\n        n.setString(tempName);\n    } else if (var !\u003d null) {\n        incCount(name);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 214,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,47 +1,47 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String name \u003d n.getString();\n     if (name.length() \u003d\u003d 0) {\n         return;\n     }\n     Scope.Var var \u003d t.getScope().getVar(name);\n     boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal() \u0026\u0026 (!var.scope.getParent().isGlobal() || !var.isBleedingFunction());\n     if (!local \u0026\u0026 localRenamingOnly) {\n         reservedNames.add(name);\n         return;\n     }\n     if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n         reservedNames.add(name);\n         return;\n     }\n     if (!okToRenameVar(name, local)) {\n         if (local) {\n             String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n             if (!newName.equals(name)) {\n                 n.setString(newName);\n             }\n         }\n         return;\n     }\n     if (isExternsPass_) {\n         if (!local) {\n             externNames.add(name);\n         }\n         return;\n     }\n     if (pseudoNameMap !\u003d null) {\n         recordPseudoName(n);\n     }\n     if (local) {\n         String tempName \u003d LOCAL_VAR_PREFIX + getLocalVarIndex(var);\n-        incCount(tempName, null);\n+        incCount(tempName);\n         localNameNodes.add(n);\n         n.setString(tempName);\n     } else if (var !\u003d null) {\n-        incCount(name, var.input);\n+        incCount(name);\n         globalNameNodes.add(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b6e3f5c01de00915df7682dba4e9a7f733630d34": {
      "type": "Yformatchange",
      "commitMessage": "\nShadows variables\n\nR\u003djohnlenz,nicksantos\nDELTA\u003d580  (531 added, 7 deleted, 42 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d639\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@808 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/22/11, 2:58 PM",
      "commitName": "b6e3f5c01de00915df7682dba4e9a7f733630d34",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/14/11, 1:50 PM",
      "commitNameOld": "95ac6a7f06053f4a85286e30394836d62d141518",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.05,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal() \u0026\u0026 (!var.scope.getParent().isGlobal() || !var.isBleedingFunction());\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        if (local) {\n            String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n            if (!newName.equals(name)) {\n                n.setString(newName);\n            }\n        }\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (pseudoNameMap !\u003d null) {\n        recordPseudoName(n);\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + getLocalVarIndex(var);\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        n.setString(tempName);\n    } else if (var !\u003d null) {\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 217,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "95ac6a7f06053f4a85286e30394836d62d141518": {
      "type": "Ybodychange",
      "commitMessage": "\nHandle bleeding functions in local scopes.\n\nR\u003dacleung\nDELTA\u003d134  (90 added, 29 deleted, 15 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d519\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@780 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/14/11, 1:50 PM",
      "commitName": "95ac6a7f06053f4a85286e30394836d62d141518",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "2/8/11, 4:17 PM",
      "commitNameOld": "1860001c0e04ba7f3085bcbcf0ea6fb2ddc3f83c",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 5.9,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal() \u0026\u0026 (!var.scope.getParent().isGlobal() || !var.isBleedingFunction());\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        if (local) {\n            String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n            if (!newName.equals(name)) {\n                n.setString(newName);\n            }\n        }\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (pseudoNameMap !\u003d null) {\n        recordPseudoName(n);\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + getLocalVarIndex(var);\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        n.setString(tempName);\n    } else if (var !\u003d null) {\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 213,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,47 +1,47 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String name \u003d n.getString();\n     if (name.length() \u003d\u003d 0) {\n         return;\n     }\n     Scope.Var var \u003d t.getScope().getVar(name);\n     boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal() \u0026\u0026 (!var.scope.getParent().isGlobal() || !var.isBleedingFunction());\n     if (!local \u0026\u0026 localRenamingOnly) {\n         reservedNames.add(name);\n         return;\n     }\n     if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n         reservedNames.add(name);\n         return;\n     }\n     if (!okToRenameVar(name, local)) {\n         if (local) {\n             String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n             if (!newName.equals(name)) {\n                 n.setString(newName);\n             }\n         }\n         return;\n     }\n     if (isExternsPass_) {\n         if (!local) {\n             externNames.add(name);\n         }\n         return;\n     }\n     if (pseudoNameMap !\u003d null) {\n         recordPseudoName(n);\n     }\n     if (local) {\n-        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n+        String tempName \u003d LOCAL_VAR_PREFIX + getLocalVarIndex(var);\n         incCount(tempName, null);\n         localNameNodes.add(n);\n         n.setString(tempName);\n     } else if (var !\u003d null) {\n         incCount(name, var.input);\n         globalNameNodes.add(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1860001c0e04ba7f3085bcbcf0ea6fb2ddc3f83c": {
      "type": "Ybodychange",
      "commitMessage": "\nFix bleeding-function shadowing bug\n\nR\u003djohnlenz\nDELTA\u003d40  (36 added, 0 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d477\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@768 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/8/11, 4:17 PM",
      "commitName": "1860001c0e04ba7f3085bcbcf0ea6fb2ddc3f83c",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 88.77,
      "commitsBetweenForRepo": 213,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal() \u0026\u0026 (!var.scope.getParent().isGlobal() || !var.isBleedingFunction());\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        if (local) {\n            String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n            if (!newName.equals(name)) {\n                n.setString(newName);\n            }\n        }\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (pseudoNameMap !\u003d null) {\n        recordPseudoName(n);\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        n.setString(tempName);\n    } else if (var !\u003d null) {\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 185,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,47 +1,47 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String name \u003d n.getString();\n     if (name.length() \u003d\u003d 0) {\n         return;\n     }\n     Scope.Var var \u003d t.getScope().getVar(name);\n-    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n+    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal() \u0026\u0026 (!var.scope.getParent().isGlobal() || !var.isBleedingFunction());\n     if (!local \u0026\u0026 localRenamingOnly) {\n         reservedNames.add(name);\n         return;\n     }\n     if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n         reservedNames.add(name);\n         return;\n     }\n     if (!okToRenameVar(name, local)) {\n         if (local) {\n             String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n             if (!newName.equals(name)) {\n                 n.setString(newName);\n             }\n         }\n         return;\n     }\n     if (isExternsPass_) {\n         if (!local) {\n             externNames.add(name);\n         }\n         return;\n     }\n     if (pseudoNameMap !\u003d null) {\n         recordPseudoName(n);\n     }\n     if (local) {\n         String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n         incCount(tempName, null);\n         localNameNodes.add(n);\n         n.setString(tempName);\n     } else if (var !\u003d null) {\n         incCount(name, var.input);\n         globalNameNodes.add(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/14/10, 7:02 PM",
      "commitNameOld": "55d1c8181d46a0b5e5a121db314145be37a10934",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 47.52,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        if (local) {\n            String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n            if (!newName.equals(name)) {\n                n.setString(newName);\n            }\n        }\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (pseudoNameMap !\u003d null) {\n        recordPseudoName(n);\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        n.setString(tempName);\n    } else if (var !\u003d null) {\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 187,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "55d1c8181d46a0b5e5a121db314145be37a10934": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/14 by nick\n\n        update maps api v3. fixes issue 153.\n        contributed by chad killingsworth\n\n        R\u003dalan\n        DELTA\u003d403  (309 added, 71 deleted, 23 changed)\n\nChange on 2010/05/14 by alan\n\n        Temporary rename variables to L_0 when gathering name usages.\n\n        R\u003dnick\n        DELTA\u003d46  (27 added, 5 deleted, 14 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1003\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@213 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/14/10, 7:02 PM",
      "commitName": "55d1c8181d46a0b5e5a121db314145be37a10934",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/23/10, 11:31 AM",
      "commitNameOld": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 21.31,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        if (local) {\n            String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n            if (!newName.equals(name)) {\n                n.setString(newName);\n            }\n        }\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (pseudoNameMap !\u003d null) {\n        recordPseudoName(n);\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        n.setString(tempName);\n    } else if (var !\u003d null) {\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 187,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,44 +1,47 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String name \u003d n.getString();\n     if (name.length() \u003d\u003d 0) {\n         return;\n     }\n     Scope.Var var \u003d t.getScope().getVar(name);\n     boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n     if (!local \u0026\u0026 localRenamingOnly) {\n         reservedNames.add(name);\n         return;\n     }\n     if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n         reservedNames.add(name);\n         return;\n     }\n     if (!okToRenameVar(name, local)) {\n         if (local) {\n             String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n             if (!newName.equals(name)) {\n                 n.setString(newName);\n             }\n         }\n         return;\n     }\n     if (isExternsPass_) {\n         if (!local) {\n             externNames.add(name);\n         }\n         return;\n     }\n+    if (pseudoNameMap !\u003d null) {\n+        recordPseudoName(n);\n+    }\n     if (local) {\n         String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n         incCount(tempName, null);\n         localNameNodes.add(n);\n-        localTempNames.add(tempName);\n+        n.setString(tempName);\n     } else if (var !\u003d null) {\n         incCount(name, var.input);\n         globalNameNodes.add(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/19/10, 4:28 PM",
      "commitNameOld": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 3.79,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        if (local) {\n            String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n            if (!newName.equals(name)) {\n                n.setString(newName);\n            }\n        }\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        localTempNames.add(tempName);\n    } else if (var !\u003d null) {\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 171,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,44 +1,44 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String name \u003d n.getString();\n     if (name.length() \u003d\u003d 0) {\n         return;\n     }\n     Scope.Var var \u003d t.getScope().getVar(name);\n     boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n     if (!local \u0026\u0026 localRenamingOnly) {\n         reservedNames.add(name);\n         return;\n     }\n-    if (preserveAnonymousFunctionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isAnonymousFunction(var.getParentNode())) {\n+    if (preserveFunctionExpressionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isFunctionExpression(var.getParentNode())) {\n         reservedNames.add(name);\n         return;\n     }\n     if (!okToRenameVar(name, local)) {\n         if (local) {\n             String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n             if (!newName.equals(name)) {\n                 n.setString(newName);\n             }\n         }\n         return;\n     }\n     if (isExternsPass_) {\n         if (!local) {\n             externNames.add(name);\n         }\n         return;\n     }\n     if (local) {\n         String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n         incCount(tempName, null);\n         localNameNodes.add(n);\n         localTempNames.add(tempName);\n     } else if (var !\u003d null) {\n         incCount(name, var.input);\n         globalNameNodes.add(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "938f48a60c544f6b7bdb5d49006f654a51ca9a22": {
      "type": "Ybodychange",
      "commitMessage": "The MethodCompilerPass was being a little too smart for itself, leading\nto incorrect behavior by the InlineGetter pass (inlining extern\ndefinitions of functions which it thought were empty functions). This\nresults in slight worse behavior by the depreciated \"MethodCheck\" pass,\nbut most projects have moved on to \"check_types\" which is on by default. (John)\nR\u003dAlan\nDELTA\u003d77  (44 added, 28 deleted, 5 changed)\n\nIssue 103: Fix inappropriate renaming of local \"$super\" when the coding\nconvention declares it to be \"exported\". (John)\nFixes issue 103.\nR\u003dAlan\nDELTA\u003d86  (77 added, 3 deleted, 6 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@139 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/16/10, 3:53 PM",
      "commitName": "938f48a60c544f6b7bdb5d49006f654a51ca9a22",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "12/1/09, 8:28 AM",
      "commitNameOld": "a478193982ce1fb9271e3f7ebcc1369913c9a859",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 105.27,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (preserveAnonymousFunctionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isAnonymousFunction(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        if (local) {\n            String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n            if (!newName.equals(name)) {\n                n.setString(newName);\n            }\n        }\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        localTempNames.add(tempName);\n    } else if (var !\u003d null) {\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 171,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,38 +1,44 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String name \u003d n.getString();\n     if (name.length() \u003d\u003d 0) {\n         return;\n     }\n     Scope.Var var \u003d t.getScope().getVar(name);\n     boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n     if (!local \u0026\u0026 localRenamingOnly) {\n         reservedNames.add(name);\n         return;\n     }\n     if (preserveAnonymousFunctionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isAnonymousFunction(var.getParentNode())) {\n         reservedNames.add(name);\n         return;\n     }\n     if (!okToRenameVar(name, local)) {\n+        if (local) {\n+            String newName \u003d MakeDeclaredNamesUnique.ContextualRenameInverter.getOrginalName(name);\n+            if (!newName.equals(name)) {\n+                n.setString(newName);\n+            }\n+        }\n         return;\n     }\n     if (isExternsPass_) {\n         if (!local) {\n             externNames.add(name);\n         }\n         return;\n     }\n     if (local) {\n         String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n         incCount(tempName, null);\n         localNameNodes.add(n);\n         localTempNames.add(tempName);\n     } else if (var !\u003d null) {\n         incCount(name, var.input);\n         globalNameNodes.add(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0": {
      "type": "Ybodychange",
      "commitMessage": "A bunch of bug fixes\nAdded the --warning_level\u003d{QUIET|DEFAULT|VERBOSE} flag,\nto match the webservice API\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@3 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/6/09, 5:24 PM",
      "commitName": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (preserveAnonymousFunctionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isAnonymousFunction(var.getParentNode())) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        localTempNames.add(tempName);\n    } else if (var !\u003d null) {\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 166,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,38 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() !\u003d Token.NAME) {\n         return;\n     }\n     String name \u003d n.getString();\n     if (name.length() \u003d\u003d 0) {\n         return;\n     }\n     Scope.Var var \u003d t.getScope().getVar(name);\n     boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n     if (!local \u0026\u0026 localRenamingOnly) {\n         reservedNames.add(name);\n         return;\n     }\n+    if (preserveAnonymousFunctionNames \u0026\u0026 var !\u003d null \u0026\u0026 NodeUtil.isAnonymousFunction(var.getParentNode())) {\n+        reservedNames.add(name);\n+        return;\n+    }\n     if (!okToRenameVar(name, local)) {\n         return;\n     }\n     if (isExternsPass_) {\n         if (!local) {\n             externNames.add(name);\n         }\n         return;\n     }\n     if (local) {\n         String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n         incCount(tempName, null);\n         localNameNodes.add(n);\n         localTempNames.add(tempName);\n     } else if (var !\u003d null) {\n         incCount(name, var.input);\n         globalNameNodes.add(n);\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,34 @@\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    if (n.getType() !\u003d Token.NAME) {\n+        return;\n+    }\n+    String name \u003d n.getString();\n+    if (name.length() \u003d\u003d 0) {\n+        return;\n+    }\n+    Scope.Var var \u003d t.getScope().getVar(name);\n+    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n+    if (!local \u0026\u0026 localRenamingOnly) {\n+        reservedNames.add(name);\n+        return;\n+    }\n+    if (!okToRenameVar(name, local)) {\n+        return;\n+    }\n+    if (isExternsPass_) {\n+        if (!local) {\n+            externNames.add(name);\n+        }\n+        return;\n+    }\n+    if (local) {\n+        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n+        incCount(tempName, null);\n+        localNameNodes.add(n);\n+        localTempNames.add(tempName);\n+    } else if (var !\u003d null) {\n+        incCount(name, var.input);\n+        globalNameNodes.add(n);\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    if (n.getType() !\u003d Token.NAME) {\n        return;\n    }\n    String name \u003d n.getString();\n    if (name.length() \u003d\u003d 0) {\n        return;\n    }\n    Scope.Var var \u003d t.getScope().getVar(name);\n    boolean local \u003d (var !\u003d null) \u0026\u0026 var.isLocal();\n    if (!local \u0026\u0026 localRenamingOnly) {\n        reservedNames.add(name);\n        return;\n    }\n    if (!okToRenameVar(name, local)) {\n        return;\n    }\n    if (isExternsPass_) {\n        if (!local) {\n            externNames.add(name);\n        }\n        return;\n    }\n    if (local) {\n        String tempName \u003d LOCAL_VAR_PREFIX + var.getLocalVarIndex();\n        incCount(tempName, null);\n        localNameNodes.add(n);\n        localTempNames.add(tempName);\n    } else if (var !\u003d null) {\n        incCount(name, var.input);\n        globalNameNodes.add(n);\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 155,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}