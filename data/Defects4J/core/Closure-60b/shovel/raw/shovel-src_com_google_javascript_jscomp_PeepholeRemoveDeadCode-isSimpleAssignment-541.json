{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeepholeRemoveDeadCode.java",
  "functionName": "isSimpleAssignment",
  "functionId": "isSimpleAssignment___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
  "functionAnnotation": "",
  "functionDoc": "\n@return whether the node is a assignment to a simple name, or simple var\ndeclaration with initialization.\n",
  "functionStartLine": 541,
  "functionEndLine": 553,
  "numCommitsSeen": 24,
  "timeTaken": 1709,
  "changeHistory": [
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa"
  ],
  "changeHistoryShort": {
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ad32e173b7c78f48ff85324dc310fa5b5888e2aa": {
      "type": "Yintroduced",
      "commitMessage": "\nChanges to completely remove goog.userAgent as required by\njavatests/com/google/javascript/closure/CompileUserAgentTest.  This\nrequires three changes:\n\n1) being able to remove expressions without side-effects in the global\nscope with the PeepholeRemoveDeadCode pass. This is simply a change to\nhandle both BLOCK and SCRIPT.\n\n2) a change to be able to fold constant result if conditions that have\nside-effects (a \u003d 1).  This was a change to include a smarter version\nof NodeUtil.getBooleanValue. A general expression evaluator would be\npreferred.\n\n3) and finally a bit of a hack to handle assignments followed by if\nstatements.  I would prefer a general solution, but this works well\nenough for this purpose.  A good general solution would need a general\nin-place expression evaluator and control-flow value propagation, both\nof which I\u0027ve special cased. It handles this:\n\na \u003d /MSIE/\nif (a) {\na.exec(value);\n}\n\n(we want the regexp object to get inlined into the exec call so it is known to\nbe side-effect free).\n\nR\u003dgboyer,acleung\nDELTA\u003d388  (333 added, 28 deleted, 27 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d90004\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@326 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 12:47 PM",
      "commitName": "ad32e173b7c78f48ff85324dc310fa5b5888e2aa",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,8 @@\n+private boolean isSimpleAssignment(Node n) {\n+    if (NodeUtil.isExprAssign(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild().getFirstChild())) {\n+        return true;\n+    } else if (n.getType() \u003d\u003d Token.VAR \u0026\u0026 n.hasOneChild() \u0026\u0026 n.getFirstChild().getFirstChild() !\u003d null) {\n+        return true;\n+    }\n+    return false;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean isSimpleAssignment(Node n) {\n    if (NodeUtil.isExprAssign(n) \u0026\u0026 NodeUtil.isName(n.getFirstChild().getFirstChild())) {\n        return true;\n    } else if (n.getType() \u003d\u003d Token.VAR \u0026\u0026 n.hasOneChild() \u0026\u0026 n.getFirstChild().getFirstChild() !\u003d null) {\n        return true;\n    }\n    return false;\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java",
      "functionStartLine": 183,
      "functionName": "isSimpleAssignment",
      "functionAnnotation": "",
      "functionDoc": "\n@return whether the node is a assignment to a simple name, or simple var\ndeclaration with initialization.\n"
    }
  }
}