{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MethodCompilerPass.java",
  "functionName": "visit",
  "functionId": "$visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 127,
  "functionEndLine": 172,
  "numCommitsSeen": 14,
  "timeTaken": 635,
  "changeHistory": [
    "75aa5f653b08995428743f6951a99ad101e73e37",
    "ac9fde2263db9e1216a8d4c9a7aa7b3026a6bd8d",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "75aa5f653b08995428743f6951a99ad101e73e37": "Ybodychange",
    "ac9fde2263db9e1216a8d4c9a7aa7b3026a6bd8d": "Ybodychange",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "75aa5f653b08995428743f6951a99ad101e73e37": {
      "type": "Ybodychange",
      "commitMessage": "\nCleanup obsolete handling of NUMBER keys of OBJECTLIT.\n\nR\u003dnicksantos\nDELTA\u003d109  (3 added, 48 deleted, 58 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1253\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@967 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/4/11, 2:40 PM",
      "commitName": "75aa5f653b08995428743f6951a99ad101e73e37",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/10/10, 9:37 AM",
      "commitNameOld": "ac9fde2263db9e1216a8d4c9a7aa7b3026a6bd8d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 115.17,
      "commitsBetweenForRepo": 330,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n        case Token.GETELEM:\n            Node dest \u003d n.getFirstChild().getNext();\n            if (dest.getType() \u003d\u003d Token.STRING) {\n                if (dest.getString().equals(\"prototype\")) {\n                    processPrototypeParent(t, parent);\n                } else {\n                    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n                        addPossibleSignature(dest.getString(), n.getNext(), t);\n                    }\n                }\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                switch(key.getType()) {\n                    case Token.STRING:\n                        addPossibleSignature(key.getString(), key.getFirstChild(), t);\n                        break;\n                    case Token.SET:\n                    case Token.GET:\n                        nonMethodProperties.add(key.getString());\n                        break;\n                    default:\n                        throw new IllegalStateException(\"unexpect OBJECTLIT key: \" + key);\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
      "functionStartLine": 180,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,32 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.GETPROP:\n         case Token.GETELEM:\n             Node dest \u003d n.getFirstChild().getNext();\n             if (dest.getType() \u003d\u003d Token.STRING) {\n                 if (dest.getString().equals(\"prototype\")) {\n                     processPrototypeParent(t, parent);\n                 } else {\n                     if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n                         addPossibleSignature(dest.getString(), n.getNext(), t);\n                     }\n                 }\n             }\n             break;\n         case Token.OBJECTLIT:\n             for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                 switch(key.getType()) {\n                     case Token.STRING:\n                         addPossibleSignature(key.getString(), key.getFirstChild(), t);\n                         break;\n                     case Token.SET:\n                     case Token.GET:\n                         nonMethodProperties.add(key.getString());\n                         break;\n-                    case Token.NUMBER:\n-                        break;\n                     default:\n                         throw new IllegalStateException(\"unexpect OBJECTLIT key: \" + key);\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ac9fde2263db9e1216a8d4c9a7aa7b3026a6bd8d": {
      "type": "Ybodychange",
      "commitMessage": "\nTweak inline getters to be safe around \"get\" and \"set\".\n\nR\u003dnicksantos\nDELTA\u003d71  (57 added, 3 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d111\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@618 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/10/10, 9:37 AM",
      "commitName": "ac9fde2263db9e1216a8d4c9a7aa7b3026a6bd8d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 28.5,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n        case Token.GETELEM:\n            Node dest \u003d n.getFirstChild().getNext();\n            if (dest.getType() \u003d\u003d Token.STRING) {\n                if (dest.getString().equals(\"prototype\")) {\n                    processPrototypeParent(t, parent);\n                } else {\n                    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n                        addPossibleSignature(dest.getString(), n.getNext(), t);\n                    }\n                }\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                switch(key.getType()) {\n                    case Token.STRING:\n                        addPossibleSignature(key.getString(), key.getFirstChild(), t);\n                        break;\n                    case Token.SET:\n                    case Token.GET:\n                        nonMethodProperties.add(key.getString());\n                        break;\n                    case Token.NUMBER:\n                        break;\n                    default:\n                        throw new IllegalStateException(\"unexpect OBJECTLIT key: \" + key);\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
      "functionStartLine": 182,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,34 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.GETPROP:\n         case Token.GETELEM:\n             Node dest \u003d n.getFirstChild().getNext();\n             if (dest.getType() \u003d\u003d Token.STRING) {\n                 if (dest.getString().equals(\"prototype\")) {\n                     processPrototypeParent(t, parent);\n                 } else {\n                     if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n                         addPossibleSignature(dest.getString(), n.getNext(), t);\n                     }\n                 }\n             }\n             break;\n         case Token.OBJECTLIT:\n             for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n-                if (key.getType() \u003d\u003d Token.STRING) {\n-                    Node value \u003d key.getFirstChild();\n-                    addPossibleSignature(key.getString(), value, t);\n+                switch(key.getType()) {\n+                    case Token.STRING:\n+                        addPossibleSignature(key.getString(), key.getFirstChild(), t);\n+                        break;\n+                    case Token.SET:\n+                    case Token.GET:\n+                        nonMethodProperties.add(key.getString());\n+                        break;\n+                    case Token.NUMBER:\n+                        break;\n+                    default:\n+                        throw new IllegalStateException(\"unexpect OBJECTLIT key: \" + key);\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": {
      "type": "Ybodychange",
      "commitMessage": "\nChange the OBJECTLIT AST structure from:\n\nOBJECTLIT\n  KEY1\n  VALUE1\n\nto\n\nOBJECTLIT\n  KEY1\n    VALUE1\n\nFixes issue 241\n\nR\u003dacleung,johnlenz,stevey\nDELTA\u003d268  (101 added, 51 deleted, 116 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d356416\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@494 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/18/10, 2:55 PM",
      "commitName": "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 35.15,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n        case Token.GETELEM:\n            Node dest \u003d n.getFirstChild().getNext();\n            if (dest.getType() \u003d\u003d Token.STRING) {\n                if (dest.getString().equals(\"prototype\")) {\n                    processPrototypeParent(t, parent);\n                } else {\n                    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n                        addPossibleSignature(dest.getString(), n.getNext(), t);\n                    }\n                }\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                if (key.getType() \u003d\u003d Token.STRING) {\n                    Node value \u003d key.getFirstChild();\n                    addPossibleSignature(key.getString(), value, t);\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
      "functionStartLine": 184,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.GETPROP:\n         case Token.GETELEM:\n             Node dest \u003d n.getFirstChild().getNext();\n             if (dest.getType() \u003d\u003d Token.STRING) {\n                 if (dest.getString().equals(\"prototype\")) {\n                     processPrototypeParent(t, parent);\n                 } else {\n                     if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n                         addPossibleSignature(dest.getString(), n.getNext(), t);\n                     }\n                 }\n             }\n             break;\n         case Token.OBJECTLIT:\n-            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n+            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                 if (key.getType() \u003d\u003d Token.STRING) {\n-                    Node value \u003d key.getNext();\n+                    Node value \u003d key.getFirstChild();\n                     addPossibleSignature(key.getString(), value, t);\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,25 @@\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    switch(n.getType()) {\n+        case Token.GETPROP:\n+        case Token.GETELEM:\n+            Node dest \u003d n.getFirstChild().getNext();\n+            if (dest.getType() \u003d\u003d Token.STRING) {\n+                if (dest.getString().equals(\"prototype\")) {\n+                    processPrototypeParent(t, parent);\n+                } else {\n+                    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+                        addPossibleSignature(dest.getString(), n.getNext(), t);\n+                    }\n+                }\n+            }\n+            break;\n+        case Token.OBJECTLIT:\n+            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n+                if (key.getType() \u003d\u003d Token.STRING) {\n+                    Node value \u003d key.getNext();\n+                    addPossibleSignature(key.getString(), value, t);\n+                }\n+            }\n+            break;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n        case Token.GETELEM:\n            Node dest \u003d n.getFirstChild().getNext();\n            if (dest.getType() \u003d\u003d Token.STRING) {\n                if (dest.getString().equals(\"prototype\")) {\n                    processPrototypeParent(t, parent);\n                } else {\n                    if (parent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n                        addPossibleSignature(dest.getString(), n.getNext(), t);\n                    }\n                }\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n                if (key.getType() \u003d\u003d Token.STRING) {\n                    Node value \u003d key.getNext();\n                    addPossibleSignature(key.getString(), value, t);\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MethodCompilerPass.java",
      "functionStartLine": 209,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}