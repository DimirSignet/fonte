{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CompilerOptions.java",
  "functionName": "getReplacementsHelper",
  "functionId": "getReplacementsHelper___source-Map__String,Object__",
  "sourceFilePath": "src/com/google/javascript/jscomp/CompilerOptions.java",
  "functionAnnotation": "",
  "functionDoc": "Creates a map of String-\u003eNode from a map of String-\u003eNumber/String/Boolean.\n",
  "functionStartLine": 833,
  "functionEndLine": 852,
  "numCommitsSeen": 111,
  "timeTaken": 1949,
  "changeHistory": [
    "d24a652c89b3798648fade2401b741eae981d535",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "d24a652c89b3798648fade2401b741eae981d535": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d24a652c89b3798648fade2401b741eae981d535": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Ydocchange)",
      "commitMessage": "\nEnhance the ProcessTweaks pass so that it:\n-Strips out all goog.tweak calls when tweakProcessing \u003d\u003d STRIP\n-Adds a var to the beginning of the input with compiler overrides when\ntweakProcessing \u003d\u003d CHECK\n\nR\u003dnicksantos\nDELTA\u003d369  (356 added, 3 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d235\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@681 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/10/11, 11:27 AM",
      "commitName": "d24a652c89b3798648fade2401b741eae981d535",
      "commitAuthor": "agrieve@google.com",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nEnhance the ProcessTweaks pass so that it:\n-Strips out all goog.tweak calls when tweakProcessing \u003d\u003d STRIP\n-Adds a var to the beginning of the input with compiler overrides when\ntweakProcessing \u003d\u003d CHECK\n\nR\u003dnicksantos\nDELTA\u003d369  (356 added, 3 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d235\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@681 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/10/11, 11:27 AM",
          "commitName": "d24a652c89b3798648fade2401b741eae981d535",
          "commitAuthor": "agrieve@google.com",
          "commitDateOld": "12/7/10, 12:48 PM",
          "commitNameOld": "be0104009f06fafdb7428398d2c8299d13a1df12",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 33.94,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n    Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n        String name \u003d entry.getKey();\n        Object value \u003d entry.getValue();\n        if (value instanceof Boolean) {\n            map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n        } else if (value instanceof Integer) {\n            map.put(name, Node.newNumber(((Integer) value).intValue()));\n        } else if (value instanceof Double) {\n            map.put(name, Node.newNumber(((Double) value).doubleValue()));\n        } else {\n            Preconditions.checkState(value instanceof String);\n            map.put(name, Node.newString((String) value));\n        }\n    }\n    return map;\n}",
          "path": "src/com/google/javascript/jscomp/CompilerOptions.java",
          "functionStartLine": 788,
          "functionName": "getReplacementsHelper",
          "functionAnnotation": "",
          "functionDoc": "Creates a map of String-\u003eNode from a map of String-\u003eNumber/String/Boolean.\n",
          "diff": "@@ -1,18 +1,18 @@\n-public Map\u003cString, Node\u003e getDefineReplacements() {\n+private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n     Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n-    for (Map.Entry\u003cString, Object\u003e entry : defineReplacements.entrySet()) {\n+    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n         String name \u003d entry.getKey();\n         Object value \u003d entry.getValue();\n         if (value instanceof Boolean) {\n             map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n         } else if (value instanceof Integer) {\n             map.put(name, Node.newNumber(((Integer) value).intValue()));\n         } else if (value instanceof Double) {\n             map.put(name, Node.newNumber(((Double) value).doubleValue()));\n         } else {\n             Preconditions.checkState(value instanceof String);\n             map.put(name, Node.newString((String) value));\n         }\n     }\n     return map;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "getDefineReplacements",
            "newValue": "getReplacementsHelper"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "\nEnhance the ProcessTweaks pass so that it:\n-Strips out all goog.tweak calls when tweakProcessing \u003d\u003d STRIP\n-Adds a var to the beginning of the input with compiler overrides when\ntweakProcessing \u003d\u003d CHECK\n\nR\u003dnicksantos\nDELTA\u003d369  (356 added, 3 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d235\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@681 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/10/11, 11:27 AM",
          "commitName": "d24a652c89b3798648fade2401b741eae981d535",
          "commitAuthor": "agrieve@google.com",
          "commitDateOld": "12/7/10, 12:48 PM",
          "commitNameOld": "be0104009f06fafdb7428398d2c8299d13a1df12",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 33.94,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n    Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n        String name \u003d entry.getKey();\n        Object value \u003d entry.getValue();\n        if (value instanceof Boolean) {\n            map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n        } else if (value instanceof Integer) {\n            map.put(name, Node.newNumber(((Integer) value).intValue()));\n        } else if (value instanceof Double) {\n            map.put(name, Node.newNumber(((Double) value).doubleValue()));\n        } else {\n            Preconditions.checkState(value instanceof String);\n            map.put(name, Node.newString((String) value));\n        }\n    }\n    return map;\n}",
          "path": "src/com/google/javascript/jscomp/CompilerOptions.java",
          "functionStartLine": 788,
          "functionName": "getReplacementsHelper",
          "functionAnnotation": "",
          "functionDoc": "Creates a map of String-\u003eNode from a map of String-\u003eNumber/String/Boolean.\n",
          "diff": "@@ -1,18 +1,18 @@\n-public Map\u003cString, Node\u003e getDefineReplacements() {\n+private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n     Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n-    for (Map.Entry\u003cString, Object\u003e entry : defineReplacements.entrySet()) {\n+    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n         String name \u003d entry.getKey();\n         Object value \u003d entry.getValue();\n         if (value instanceof Boolean) {\n             map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n         } else if (value instanceof Integer) {\n             map.put(name, Node.newNumber(((Integer) value).intValue()));\n         } else if (value instanceof Double) {\n             map.put(name, Node.newNumber(((Double) value).doubleValue()));\n         } else {\n             Preconditions.checkState(value instanceof String);\n             map.put(name, Node.newString((String) value));\n         }\n     }\n     return map;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[source-Map\u003cString,Object\u003e]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "\nEnhance the ProcessTweaks pass so that it:\n-Strips out all goog.tweak calls when tweakProcessing \u003d\u003d STRIP\n-Adds a var to the beginning of the input with compiler overrides when\ntweakProcessing \u003d\u003d CHECK\n\nR\u003dnicksantos\nDELTA\u003d369  (356 added, 3 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d235\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@681 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/10/11, 11:27 AM",
          "commitName": "d24a652c89b3798648fade2401b741eae981d535",
          "commitAuthor": "agrieve@google.com",
          "commitDateOld": "12/7/10, 12:48 PM",
          "commitNameOld": "be0104009f06fafdb7428398d2c8299d13a1df12",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 33.94,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n    Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n        String name \u003d entry.getKey();\n        Object value \u003d entry.getValue();\n        if (value instanceof Boolean) {\n            map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n        } else if (value instanceof Integer) {\n            map.put(name, Node.newNumber(((Integer) value).intValue()));\n        } else if (value instanceof Double) {\n            map.put(name, Node.newNumber(((Double) value).doubleValue()));\n        } else {\n            Preconditions.checkState(value instanceof String);\n            map.put(name, Node.newString((String) value));\n        }\n    }\n    return map;\n}",
          "path": "src/com/google/javascript/jscomp/CompilerOptions.java",
          "functionStartLine": 788,
          "functionName": "getReplacementsHelper",
          "functionAnnotation": "",
          "functionDoc": "Creates a map of String-\u003eNode from a map of String-\u003eNumber/String/Boolean.\n",
          "diff": "@@ -1,18 +1,18 @@\n-public Map\u003cString, Node\u003e getDefineReplacements() {\n+private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n     Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n-    for (Map.Entry\u003cString, Object\u003e entry : defineReplacements.entrySet()) {\n+    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n         String name \u003d entry.getKey();\n         Object value \u003d entry.getValue();\n         if (value instanceof Boolean) {\n             map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n         } else if (value instanceof Integer) {\n             map.put(name, Node.newNumber(((Integer) value).intValue()));\n         } else if (value instanceof Double) {\n             map.put(name, Node.newNumber(((Double) value).doubleValue()));\n         } else {\n             Preconditions.checkState(value instanceof String);\n             map.put(name, Node.newString((String) value));\n         }\n     }\n     return map;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nEnhance the ProcessTweaks pass so that it:\n-Strips out all goog.tweak calls when tweakProcessing \u003d\u003d STRIP\n-Adds a var to the beginning of the input with compiler overrides when\ntweakProcessing \u003d\u003d CHECK\n\nR\u003dnicksantos\nDELTA\u003d369  (356 added, 3 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d235\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@681 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/10/11, 11:27 AM",
          "commitName": "d24a652c89b3798648fade2401b741eae981d535",
          "commitAuthor": "agrieve@google.com",
          "commitDateOld": "12/7/10, 12:48 PM",
          "commitNameOld": "be0104009f06fafdb7428398d2c8299d13a1df12",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 33.94,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n    Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n        String name \u003d entry.getKey();\n        Object value \u003d entry.getValue();\n        if (value instanceof Boolean) {\n            map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n        } else if (value instanceof Integer) {\n            map.put(name, Node.newNumber(((Integer) value).intValue()));\n        } else if (value instanceof Double) {\n            map.put(name, Node.newNumber(((Double) value).doubleValue()));\n        } else {\n            Preconditions.checkState(value instanceof String);\n            map.put(name, Node.newString((String) value));\n        }\n    }\n    return map;\n}",
          "path": "src/com/google/javascript/jscomp/CompilerOptions.java",
          "functionStartLine": 788,
          "functionName": "getReplacementsHelper",
          "functionAnnotation": "",
          "functionDoc": "Creates a map of String-\u003eNode from a map of String-\u003eNumber/String/Boolean.\n",
          "diff": "@@ -1,18 +1,18 @@\n-public Map\u003cString, Node\u003e getDefineReplacements() {\n+private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n     Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n-    for (Map.Entry\u003cString, Object\u003e entry : defineReplacements.entrySet()) {\n+    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n         String name \u003d entry.getKey();\n         Object value \u003d entry.getValue();\n         if (value instanceof Boolean) {\n             map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n         } else if (value instanceof Integer) {\n             map.put(name, Node.newNumber(((Integer) value).intValue()));\n         } else if (value instanceof Double) {\n             map.put(name, Node.newNumber(((Double) value).doubleValue()));\n         } else {\n             Preconditions.checkState(value instanceof String);\n             map.put(name, Node.newString((String) value));\n         }\n     }\n     return map;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nEnhance the ProcessTweaks pass so that it:\n-Strips out all goog.tweak calls when tweakProcessing \u003d\u003d STRIP\n-Adds a var to the beginning of the input with compiler overrides when\ntweakProcessing \u003d\u003d CHECK\n\nR\u003dnicksantos\nDELTA\u003d369  (356 added, 3 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d235\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@681 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "1/10/11, 11:27 AM",
          "commitName": "d24a652c89b3798648fade2401b741eae981d535",
          "commitAuthor": "agrieve@google.com",
          "commitDateOld": "12/7/10, 12:48 PM",
          "commitNameOld": "be0104009f06fafdb7428398d2c8299d13a1df12",
          "commitAuthorOld": "johnlenz@google.com",
          "daysBetweenCommits": 33.94,
          "commitsBetweenForRepo": 73,
          "commitsBetweenForFile": 1,
          "actualSource": "private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n    Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n        String name \u003d entry.getKey();\n        Object value \u003d entry.getValue();\n        if (value instanceof Boolean) {\n            map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n        } else if (value instanceof Integer) {\n            map.put(name, Node.newNumber(((Integer) value).intValue()));\n        } else if (value instanceof Double) {\n            map.put(name, Node.newNumber(((Double) value).doubleValue()));\n        } else {\n            Preconditions.checkState(value instanceof String);\n            map.put(name, Node.newString((String) value));\n        }\n    }\n    return map;\n}",
          "path": "src/com/google/javascript/jscomp/CompilerOptions.java",
          "functionStartLine": 788,
          "functionName": "getReplacementsHelper",
          "functionAnnotation": "",
          "functionDoc": "Creates a map of String-\u003eNode from a map of String-\u003eNumber/String/Boolean.\n",
          "diff": "@@ -1,18 +1,18 @@\n-public Map\u003cString, Node\u003e getDefineReplacements() {\n+private static Map\u003cString, Node\u003e getReplacementsHelper(Map\u003cString, Object\u003e source) {\n     Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n-    for (Map.Entry\u003cString, Object\u003e entry : defineReplacements.entrySet()) {\n+    for (Map.Entry\u003cString, Object\u003e entry : source.entrySet()) {\n         String name \u003d entry.getKey();\n         Object value \u003d entry.getValue();\n         if (value instanceof Boolean) {\n             map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n         } else if (value instanceof Integer) {\n             map.put(name, Node.newNumber(((Integer) value).intValue()));\n         } else if (value instanceof Double) {\n             map.put(name, Node.newNumber(((Double) value).doubleValue()));\n         } else {\n             Preconditions.checkState(value instanceof String);\n             map.put(name, Node.newString((String) value));\n         }\n     }\n     return map;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Returns the map of define replacements.\n",
            "newValue": "Creates a map of String-\u003eNode from a map of String-\u003eNumber/String/Boolean.\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,18 @@\n+public Map\u003cString, Node\u003e getDefineReplacements() {\n+    Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n+    for (Map.Entry\u003cString, Object\u003e entry : defineReplacements.entrySet()) {\n+        String name \u003d entry.getKey();\n+        Object value \u003d entry.getValue();\n+        if (value instanceof Boolean) {\n+            map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n+        } else if (value instanceof Integer) {\n+            map.put(name, Node.newNumber(((Integer) value).intValue()));\n+        } else if (value instanceof Double) {\n+            map.put(name, Node.newNumber(((Double) value).doubleValue()));\n+        } else {\n+            Preconditions.checkState(value instanceof String);\n+            map.put(name, Node.newString((String) value));\n+        }\n+    }\n+    return map;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public Map\u003cString, Node\u003e getDefineReplacements() {\n    Map\u003cString, Node\u003e map \u003d Maps.newHashMap();\n    for (Map.Entry\u003cString, Object\u003e entry : defineReplacements.entrySet()) {\n        String name \u003d entry.getKey();\n        Object value \u003d entry.getValue();\n        if (value instanceof Boolean) {\n            map.put(name, ((Boolean) value).booleanValue() ? new Node(Token.TRUE) : new Node(Token.FALSE));\n        } else if (value instanceof Integer) {\n            map.put(name, Node.newNumber(((Integer) value).intValue()));\n        } else if (value instanceof Double) {\n            map.put(name, Node.newNumber(((Double) value).doubleValue()));\n        } else {\n            Preconditions.checkState(value instanceof String);\n            map.put(name, Node.newString((String) value));\n        }\n    }\n    return map;\n}",
      "path": "src/com/google/javascript/jscomp/CompilerOptions.java",
      "functionStartLine": 648,
      "functionName": "getDefineReplacements",
      "functionAnnotation": "",
      "functionDoc": "Returns the map of define replacements.\n"
    }
  }
}