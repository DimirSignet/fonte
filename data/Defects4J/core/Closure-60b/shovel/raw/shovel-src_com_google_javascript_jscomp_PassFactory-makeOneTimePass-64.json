{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PassFactory.java",
  "functionName": "makeOneTimePass",
  "functionId": "makeOneTimePass",
  "sourceFilePath": "src/com/google/javascript/jscomp/PassFactory.java",
  "functionAnnotation": "",
  "functionDoc": "Make a new pass factory that only creates one-time passes.\n",
  "functionStartLine": 64,
  "functionEndLine": 80,
  "numCommitsSeen": 6,
  "timeTaken": 306,
  "changeHistory": [
    "940d5ecc692b4a6b6b530d04316c23c61da51615",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "940d5ecc692b4a6b6b530d04316c23c61da51615": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "940d5ecc692b4a6b6b530d04316c23c61da51615": {
      "type": "Ybodychange",
      "commitMessage": "\nUse DefaultPassConfig to find hot-swap passes plus implementation of hot-swap\nfor the following passes (i) closurePasss (ii) inferTypes (iii) checkTypes.\n\nR\u003dnicksantos,johnlenz,acleung\nDELTA\u003d535  (330 added, 167 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1750\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1056 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/3/11, 3:16 PM",
      "commitName": "940d5ecc692b4a6b6b530d04316c23c61da51615",
      "commitAuthor": "bashir@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 21.13,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "PassFactory makeOneTimePass() {\n    if (isOneTimePass()) {\n        return this;\n    }\n    final PassFactory self \u003d this;\n    return new PassFactory(name, true) {\n\n        @Override\n        protected CompilerPass createInternal(AbstractCompiler compiler) {\n            return self.createInternal(compiler);\n        }\n\n        @Override\n        HotSwapCompilerPass getHotSwapPass(AbstractCompiler compiler) {\n            return self.getHotSwapPass(compiler);\n        }\n    };\n}",
      "path": "src/com/google/javascript/jscomp/PassFactory.java",
      "functionStartLine": 64,
      "functionName": "makeOneTimePass",
      "functionAnnotation": "",
      "functionDoc": "Make a new pass factory that only creates one-time passes.\n",
      "diff": "@@ -1,13 +1,18 @@\n PassFactory makeOneTimePass() {\n     if (isOneTimePass()) {\n         return this;\n     }\n     final PassFactory self \u003d this;\n     return new PassFactory(name, true) {\n \n         @Override\n         protected CompilerPass createInternal(AbstractCompiler compiler) {\n             return self.createInternal(compiler);\n         }\n+\n+        @Override\n+        HotSwapCompilerPass getHotSwapPass(AbstractCompiler compiler) {\n+            return self.getHotSwapPass(compiler);\n+        }\n     };\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,13 @@\n+PassFactory makeOneTimePass() {\n+    if (isOneTimePass()) {\n+        return this;\n+    }\n+    final PassFactory self \u003d this;\n+    return new PassFactory(name, true) {\n+\n+        @Override\n+        protected CompilerPass createInternal(AbstractCompiler compiler) {\n+            return self.createInternal(compiler);\n+        }\n+    };\n+}\n\\ No newline at end of file\n",
      "actualSource": "PassFactory makeOneTimePass() {\n    if (isOneTimePass()) {\n        return this;\n    }\n    final PassFactory self \u003d this;\n    return new PassFactory(name, true) {\n\n        @Override\n        protected CompilerPass createInternal(AbstractCompiler compiler) {\n            return self.createInternal(compiler);\n        }\n    };\n}",
      "path": "src/com/google/javascript/jscomp/PassFactory.java",
      "functionStartLine": 64,
      "functionName": "makeOneTimePass",
      "functionAnnotation": "",
      "functionDoc": "Make a new pass factory that only creates one-time passes.\n"
    }
  }
}