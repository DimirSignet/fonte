{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PureFunctionIdentifier.java",
  "functionName": "visit",
  "functionId": "$visit___traversal-NodeTraversal__node-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 397,
  "functionEndLine": 467,
  "numCommitsSeen": 25,
  "timeTaken": 1624,
  "changeHistory": [
    "d48e656b8ef676a9d4d87503028d59628013307f",
    "6d4979514fd802dd4deded67f3ba1929e74a928d",
    "6a2378d43d1f06344f6418388d45c66fe3466a07",
    "a095236ba70304d61b8ec02ea316d3504cc0ea1d",
    "530ed0eff3806a9bb9dd6b58d15597f9a91c66a6",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "d48e656b8ef676a9d4d87503028d59628013307f": "Ybodychange",
    "6d4979514fd802dd4deded67f3ba1929e74a928d": "Ybodychange",
    "6a2378d43d1f06344f6418388d45c66fe3466a07": "Ybodychange",
    "a095236ba70304d61b8ec02ea316d3504cc0ea1d": "Ybodychange",
    "530ed0eff3806a9bb9dd6b58d15597f9a91c66a6": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d48e656b8ef676a9d4d87503028d59628013307f": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks builds\n\n*** Original change description ***\n\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dacleung,niranjan\nDELTA\u003d1003  (254 added, 671 deleted, 78 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@568 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 7:55 PM",
      "commitName": "d48e656b8ef676a9d4d87503028d59628013307f",
      "commitAuthor": "diegosalas@google.com",
      "commitDateOld": "11/22/10, 3:02 PM",
      "commitNameOld": "6d4979514fd802dd4deded67f3ba1929e74a928d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal traversal, Node node, Node parent) {\n    if (inExterns) {\n        return;\n    }\n    if (!NodeUtil.nodeTypeMayHaveSideEffects(node) \u0026\u0026 node.getType() !\u003d Token.RETURN) {\n        return;\n    }\n    if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n        allFunctionCalls.add(node);\n    }\n    Node enclosingFunction \u003d traversal.getEnclosingFunction();\n    if (enclosingFunction !\u003d null) {\n        FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n        Preconditions.checkNotNull(sideEffectInfo);\n        if (NodeUtil.isAssignmentOp(node)) {\n            visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n        } else {\n            switch(node.getType()) {\n                case Token.CALL:\n                case Token.NEW:\n                    visitCall(sideEffectInfo, node);\n                    break;\n                case Token.DELPROP:\n                case Token.DEC:\n                case Token.INC:\n                    visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                    break;\n                case Token.NAME:\n                    Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                    Node value \u003d node.getFirstChild();\n                    if (value !\u003d null \u0026\u0026 !NodeUtil.evaluatesToLocalValue(value)) {\n                        Scope scope \u003d traversal.getScope();\n                        Var var \u003d scope.getVar(node.getString());\n                        sideEffectInfo.blacklistLocal(var);\n                    }\n                    break;\n                case Token.THROW:\n                    visitThrow(sideEffectInfo);\n                    break;\n                case Token.RETURN:\n                    if (node.hasChildren() \u0026\u0026 !NodeUtil.evaluatesToLocalValue(node.getFirstChild())) {\n                        sideEffectInfo.setTaintsReturn();\n                    }\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 397,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,51 +1,51 @@\n @Override\n public void visit(NodeTraversal traversal, Node node, Node parent) {\n     if (inExterns) {\n         return;\n     }\n     if (!NodeUtil.nodeTypeMayHaveSideEffects(node) \u0026\u0026 node.getType() !\u003d Token.RETURN) {\n         return;\n     }\n     if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n         allFunctionCalls.add(node);\n     }\n     Node enclosingFunction \u003d traversal.getEnclosingFunction();\n     if (enclosingFunction !\u003d null) {\n-        FunctionSideEffectData sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n+        FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n         Preconditions.checkNotNull(sideEffectInfo);\n         if (NodeUtil.isAssignmentOp(node)) {\n             visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n         } else {\n             switch(node.getType()) {\n                 case Token.CALL:\n                 case Token.NEW:\n                     visitCall(sideEffectInfo, node);\n                     break;\n                 case Token.DELPROP:\n                 case Token.DEC:\n                 case Token.INC:\n                     visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                     break;\n                 case Token.NAME:\n                     Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                     Node value \u003d node.getFirstChild();\n-                    if (value !\u003d null \u0026\u0026 !analyzeSet(new NameValueEntry(node), value, sideEffectInfo)) {\n+                    if (value !\u003d null \u0026\u0026 !NodeUtil.evaluatesToLocalValue(value)) {\n                         Scope scope \u003d traversal.getScope();\n                         Var var \u003d scope.getVar(node.getString());\n-                        sideEffectInfo.addNonLocalValue(var);\n+                        sideEffectInfo.blacklistLocal(var);\n                     }\n                     break;\n                 case Token.THROW:\n                     visitThrow(sideEffectInfo);\n                     break;\n                 case Token.RETURN:\n-                    if (node.hasChildren() \u0026\u0026 !analyzeSet(KeywordValueEntry.RETURN, node.getFirstChild(), sideEffectInfo)) {\n+                    if (node.hasChildren() \u0026\u0026 !NodeUtil.evaluatesToLocalValue(node.getFirstChild())) {\n                         sideEffectInfo.setTaintsReturn();\n                     }\n                     break;\n                 default:\n                     throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d4979514fd802dd4deded67f3ba1929e74a928d": {
      "type": "Ybodychange",
      "commitMessage": "\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dnicksantos\nDELTA\u003d1000  (667 added, 250 deleted, 83 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d0\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@567 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 3:02 PM",
      "commitName": "6d4979514fd802dd4deded67f3ba1929e74a928d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/15/10, 10:20 PM",
      "commitNameOld": "da794a3a9cb2cebc0efb708ba9b465a4510c7235",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.7,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal traversal, Node node, Node parent) {\n    if (inExterns) {\n        return;\n    }\n    if (!NodeUtil.nodeTypeMayHaveSideEffects(node) \u0026\u0026 node.getType() !\u003d Token.RETURN) {\n        return;\n    }\n    if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n        allFunctionCalls.add(node);\n    }\n    Node enclosingFunction \u003d traversal.getEnclosingFunction();\n    if (enclosingFunction !\u003d null) {\n        FunctionSideEffectData sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n        Preconditions.checkNotNull(sideEffectInfo);\n        if (NodeUtil.isAssignmentOp(node)) {\n            visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n        } else {\n            switch(node.getType()) {\n                case Token.CALL:\n                case Token.NEW:\n                    visitCall(sideEffectInfo, node);\n                    break;\n                case Token.DELPROP:\n                case Token.DEC:\n                case Token.INC:\n                    visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                    break;\n                case Token.NAME:\n                    Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                    Node value \u003d node.getFirstChild();\n                    if (value !\u003d null \u0026\u0026 !analyzeSet(new NameValueEntry(node), value, sideEffectInfo)) {\n                        Scope scope \u003d traversal.getScope();\n                        Var var \u003d scope.getVar(node.getString());\n                        sideEffectInfo.addNonLocalValue(var);\n                    }\n                    break;\n                case Token.THROW:\n                    visitThrow(sideEffectInfo);\n                    break;\n                case Token.RETURN:\n                    if (node.hasChildren() \u0026\u0026 !analyzeSet(KeywordValueEntry.RETURN, node.getFirstChild(), sideEffectInfo)) {\n                        sideEffectInfo.setTaintsReturn();\n                    }\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 393,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,51 +1,51 @@\n @Override\n public void visit(NodeTraversal traversal, Node node, Node parent) {\n     if (inExterns) {\n         return;\n     }\n     if (!NodeUtil.nodeTypeMayHaveSideEffects(node) \u0026\u0026 node.getType() !\u003d Token.RETURN) {\n         return;\n     }\n     if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n         allFunctionCalls.add(node);\n     }\n     Node enclosingFunction \u003d traversal.getEnclosingFunction();\n     if (enclosingFunction !\u003d null) {\n-        FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n+        FunctionSideEffectData sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n         Preconditions.checkNotNull(sideEffectInfo);\n         if (NodeUtil.isAssignmentOp(node)) {\n             visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n         } else {\n             switch(node.getType()) {\n                 case Token.CALL:\n                 case Token.NEW:\n                     visitCall(sideEffectInfo, node);\n                     break;\n                 case Token.DELPROP:\n                 case Token.DEC:\n                 case Token.INC:\n                     visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                     break;\n                 case Token.NAME:\n                     Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                     Node value \u003d node.getFirstChild();\n-                    if (value !\u003d null \u0026\u0026 !NodeUtil.evaluatesToLocalValue(value)) {\n+                    if (value !\u003d null \u0026\u0026 !analyzeSet(new NameValueEntry(node), value, sideEffectInfo)) {\n                         Scope scope \u003d traversal.getScope();\n                         Var var \u003d scope.getVar(node.getString());\n-                        sideEffectInfo.blacklistLocal(var);\n+                        sideEffectInfo.addNonLocalValue(var);\n                     }\n                     break;\n                 case Token.THROW:\n                     visitThrow(sideEffectInfo);\n                     break;\n                 case Token.RETURN:\n-                    if (node.hasChildren() \u0026\u0026 !NodeUtil.evaluatesToLocalValue(node.getFirstChild())) {\n+                    if (node.hasChildren() \u0026\u0026 !analyzeSet(KeywordValueEntry.RETURN, node.getFirstChild(), sideEffectInfo)) {\n                         sideEffectInfo.setTaintsReturn();\n                     }\n                     break;\n                 default:\n                     throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a2378d43d1f06344f6418388d45c66fe3466a07": {
      "type": "Ybodychange",
      "commitMessage": "\nTake advantage of the finer grain side-effect information when\ndetermining side-effects.\nThe bulk of the changes here are the move of the \"isKnownLocalValue\"\nfunction and its tests from to NodeUtil/NodeUtilTest.\n\nR\u003dnicksantos\nDELTA\u003d664  (419 added, 201 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d260873\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@466 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/27/10, 4:16 PM",
      "commitName": "6a2378d43d1f06344f6418388d45c66fe3466a07",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/24/10, 11:05 AM",
      "commitNameOld": "9a05def053bc2ac4b24a5c1f72b35f6a2e753b0e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.22,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal traversal, Node node, Node parent) {\n    if (inExterns) {\n        return;\n    }\n    if (!NodeUtil.nodeTypeMayHaveSideEffects(node) \u0026\u0026 node.getType() !\u003d Token.RETURN) {\n        return;\n    }\n    if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n        allFunctionCalls.add(node);\n    }\n    Node enclosingFunction \u003d traversal.getEnclosingFunction();\n    if (enclosingFunction !\u003d null) {\n        FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n        Preconditions.checkNotNull(sideEffectInfo);\n        if (NodeUtil.isAssignmentOp(node)) {\n            visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n        } else {\n            switch(node.getType()) {\n                case Token.CALL:\n                case Token.NEW:\n                    visitCall(sideEffectInfo, node);\n                    break;\n                case Token.DELPROP:\n                case Token.DEC:\n                case Token.INC:\n                    visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                    break;\n                case Token.NAME:\n                    Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                    Node value \u003d node.getFirstChild();\n                    if (value !\u003d null \u0026\u0026 !NodeUtil.evaluatesToLocalValue(value)) {\n                        Scope scope \u003d traversal.getScope();\n                        Var var \u003d scope.getVar(node.getString());\n                        sideEffectInfo.blacklistLocal(var);\n                    }\n                    break;\n                case Token.THROW:\n                    visitThrow(sideEffectInfo);\n                    break;\n                case Token.RETURN:\n                    if (node.hasChildren() \u0026\u0026 !NodeUtil.evaluatesToLocalValue(node.getFirstChild())) {\n                        sideEffectInfo.setTaintsReturn();\n                    }\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 394,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,51 +1,51 @@\n @Override\n public void visit(NodeTraversal traversal, Node node, Node parent) {\n     if (inExterns) {\n         return;\n     }\n     if (!NodeUtil.nodeTypeMayHaveSideEffects(node) \u0026\u0026 node.getType() !\u003d Token.RETURN) {\n         return;\n     }\n     if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n         allFunctionCalls.add(node);\n     }\n     Node enclosingFunction \u003d traversal.getEnclosingFunction();\n     if (enclosingFunction !\u003d null) {\n         FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n         Preconditions.checkNotNull(sideEffectInfo);\n         if (NodeUtil.isAssignmentOp(node)) {\n             visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n         } else {\n             switch(node.getType()) {\n                 case Token.CALL:\n                 case Token.NEW:\n                     visitCall(sideEffectInfo, node);\n                     break;\n                 case Token.DELPROP:\n                 case Token.DEC:\n                 case Token.INC:\n                     visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                     break;\n                 case Token.NAME:\n                     Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                     Node value \u003d node.getFirstChild();\n-                    if (value !\u003d null \u0026\u0026 !isKnownLocalValue(value)) {\n+                    if (value !\u003d null \u0026\u0026 !NodeUtil.evaluatesToLocalValue(value)) {\n                         Scope scope \u003d traversal.getScope();\n                         Var var \u003d scope.getVar(node.getString());\n                         sideEffectInfo.blacklistLocal(var);\n                     }\n                     break;\n                 case Token.THROW:\n                     visitThrow(sideEffectInfo);\n                     break;\n                 case Token.RETURN:\n-                    if (node.hasChildren() \u0026\u0026 !isKnownLocalValue(node.getFirstChild())) {\n+                    if (node.hasChildren() \u0026\u0026 !NodeUtil.evaluatesToLocalValue(node.getFirstChild())) {\n                         sideEffectInfo.setTaintsReturn();\n                     }\n                     break;\n                 default:\n                     throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a095236ba70304d61b8ec02ea316d3504cc0ea1d": {
      "type": "Ybodychange",
      "commitMessage": "\nStore finer grain side-effect information on call nodes, also gather\nand a store call \"result locality\" information on call nodes.\n\nR\u003dnicksantos\nDELTA\u003d243  (210 added, 0 deleted, 33 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d249459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@459 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/23/10, 5:03 PM",
      "commitName": "a095236ba70304d61b8ec02ea316d3504cc0ea1d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/22/10, 8:39 PM",
      "commitNameOld": "ff81c557b950927e7853ca6d2c7441b6b1fe8822",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal traversal, Node node, Node parent) {\n    if (inExterns) {\n        return;\n    }\n    if (!NodeUtil.nodeTypeMayHaveSideEffects(node) \u0026\u0026 node.getType() !\u003d Token.RETURN) {\n        return;\n    }\n    if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n        allFunctionCalls.add(node);\n    }\n    Node enclosingFunction \u003d traversal.getEnclosingFunction();\n    if (enclosingFunction !\u003d null) {\n        FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n        Preconditions.checkNotNull(sideEffectInfo);\n        if (NodeUtil.isAssignmentOp(node)) {\n            visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n        } else {\n            switch(node.getType()) {\n                case Token.CALL:\n                case Token.NEW:\n                    visitCall(sideEffectInfo, node);\n                    break;\n                case Token.DELPROP:\n                case Token.DEC:\n                case Token.INC:\n                    visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                    break;\n                case Token.NAME:\n                    Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                    Node value \u003d node.getFirstChild();\n                    if (value !\u003d null \u0026\u0026 !isKnownLocalValue(value)) {\n                        Scope scope \u003d traversal.getScope();\n                        Var var \u003d scope.getVar(node.getString());\n                        sideEffectInfo.blacklistLocal(var);\n                    }\n                    break;\n                case Token.THROW:\n                    visitThrow(sideEffectInfo);\n                    break;\n                case Token.RETURN:\n                    if (node.hasChildren() \u0026\u0026 !isKnownLocalValue(node.getFirstChild())) {\n                        sideEffectInfo.setTaintsReturn();\n                    }\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 442,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,46 +1,51 @@\n @Override\n public void visit(NodeTraversal traversal, Node node, Node parent) {\n     if (inExterns) {\n         return;\n     }\n-    if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {\n+    if (!NodeUtil.nodeTypeMayHaveSideEffects(node) \u0026\u0026 node.getType() !\u003d Token.RETURN) {\n         return;\n     }\n     if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n         allFunctionCalls.add(node);\n     }\n     Node enclosingFunction \u003d traversal.getEnclosingFunction();\n     if (enclosingFunction !\u003d null) {\n         FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n         Preconditions.checkNotNull(sideEffectInfo);\n         if (NodeUtil.isAssignmentOp(node)) {\n             visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n         } else {\n             switch(node.getType()) {\n                 case Token.CALL:\n                 case Token.NEW:\n                     visitCall(sideEffectInfo, node);\n                     break;\n                 case Token.DELPROP:\n                 case Token.DEC:\n                 case Token.INC:\n                     visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                     break;\n                 case Token.NAME:\n                     Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                     Node value \u003d node.getFirstChild();\n                     if (value !\u003d null \u0026\u0026 !isKnownLocalValue(value)) {\n                         Scope scope \u003d traversal.getScope();\n                         Var var \u003d scope.getVar(node.getString());\n                         sideEffectInfo.blacklistLocal(var);\n                     }\n                     break;\n                 case Token.THROW:\n                     visitThrow(sideEffectInfo);\n                     break;\n+                case Token.RETURN:\n+                    if (node.hasChildren() \u0026\u0026 !isKnownLocalValue(node.getFirstChild())) {\n+                        sideEffectInfo.setTaintsReturn();\n+                    }\n+                    break;\n                 default:\n                     throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "530ed0eff3806a9bb9dd6b58d15597f9a91c66a6": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduce the concept of local object side-effects.\n\nR\u003davd\nDELTA\u003d447  (422 added, 3 deleted, 22 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d242506\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@454 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/22/10, 3:14 PM",
      "commitName": "530ed0eff3806a9bb9dd6b58d15597f9a91c66a6",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 9.17,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal traversal, Node node, Node parent) {\n    if (inExterns) {\n        return;\n    }\n    if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {\n        return;\n    }\n    if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n        allFunctionCalls.add(node);\n    }\n    Node enclosingFunction \u003d traversal.getEnclosingFunction();\n    if (enclosingFunction !\u003d null) {\n        FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n        Preconditions.checkNotNull(sideEffectInfo);\n        if (NodeUtil.isAssignmentOp(node)) {\n            visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n        } else {\n            switch(node.getType()) {\n                case Token.CALL:\n                case Token.NEW:\n                    visitCall(sideEffectInfo, node);\n                    break;\n                case Token.DELPROP:\n                case Token.DEC:\n                case Token.INC:\n                    visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                    break;\n                case Token.NAME:\n                    Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                    Node value \u003d node.getFirstChild();\n                    if (value !\u003d null \u0026\u0026 !isKnownLocalValue(value)) {\n                        Scope scope \u003d traversal.getScope();\n                        Var var \u003d scope.getVar(node.getString());\n                        sideEffectInfo.blacklistLocal(var);\n                    }\n                    break;\n                case Token.THROW:\n                    visitThrow(sideEffectInfo);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 368,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,40 +1,46 @@\n @Override\n public void visit(NodeTraversal traversal, Node node, Node parent) {\n     if (inExterns) {\n         return;\n     }\n     if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {\n         return;\n     }\n     if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n         allFunctionCalls.add(node);\n     }\n     Node enclosingFunction \u003d traversal.getEnclosingFunction();\n     if (enclosingFunction !\u003d null) {\n         FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n         Preconditions.checkNotNull(sideEffectInfo);\n         if (NodeUtil.isAssignmentOp(node)) {\n-            visitAssignmentOrUnaryOperatorLhs(sideEffectInfo, traversal.getScope(), node.getFirstChild());\n+            visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), node.getLastChild());\n         } else {\n             switch(node.getType()) {\n                 case Token.CALL:\n                 case Token.NEW:\n                     visitCall(sideEffectInfo, node);\n                     break;\n                 case Token.DELPROP:\n                 case Token.DEC:\n                 case Token.INC:\n-                    visitAssignmentOrUnaryOperatorLhs(sideEffectInfo, traversal.getScope(), node.getFirstChild());\n+                    visitAssignmentOrUnaryOperator(sideEffectInfo, traversal.getScope(), node, node.getFirstChild(), null);\n                     break;\n                 case Token.NAME:\n                     Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n+                    Node value \u003d node.getFirstChild();\n+                    if (value !\u003d null \u0026\u0026 !isKnownLocalValue(value)) {\n+                        Scope scope \u003d traversal.getScope();\n+                        Var var \u003d scope.getVar(node.getString());\n+                        sideEffectInfo.blacklistLocal(var);\n+                    }\n                     break;\n                 case Token.THROW:\n                     visitThrow(sideEffectInfo);\n                     break;\n                 default:\n                     throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,40 @@\n+@Override\n+public void visit(NodeTraversal traversal, Node node, Node parent) {\n+    if (inExterns) {\n+        return;\n+    }\n+    if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {\n+        return;\n+    }\n+    if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n+        allFunctionCalls.add(node);\n+    }\n+    Node enclosingFunction \u003d traversal.getEnclosingFunction();\n+    if (enclosingFunction !\u003d null) {\n+        FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n+        Preconditions.checkNotNull(sideEffectInfo);\n+        if (NodeUtil.isAssignmentOp(node)) {\n+            visitAssignmentOrUnaryOperatorLhs(sideEffectInfo, traversal.getScope(), node.getFirstChild());\n+        } else {\n+            switch(node.getType()) {\n+                case Token.CALL:\n+                case Token.NEW:\n+                    visitCall(sideEffectInfo, node);\n+                    break;\n+                case Token.DELPROP:\n+                case Token.DEC:\n+                case Token.INC:\n+                    visitAssignmentOrUnaryOperatorLhs(sideEffectInfo, traversal.getScope(), node.getFirstChild());\n+                    break;\n+                case Token.NAME:\n+                    Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n+                    break;\n+                case Token.THROW:\n+                    visitThrow(sideEffectInfo);\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal traversal, Node node, Node parent) {\n    if (inExterns) {\n        return;\n    }\n    if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {\n        return;\n    }\n    if (NodeUtil.isCall(node) || NodeUtil.isNew(node)) {\n        allFunctionCalls.add(node);\n    }\n    Node enclosingFunction \u003d traversal.getEnclosingFunction();\n    if (enclosingFunction !\u003d null) {\n        FunctionInformation sideEffectInfo \u003d functionSideEffectMap.get(enclosingFunction);\n        Preconditions.checkNotNull(sideEffectInfo);\n        if (NodeUtil.isAssignmentOp(node)) {\n            visitAssignmentOrUnaryOperatorLhs(sideEffectInfo, traversal.getScope(), node.getFirstChild());\n        } else {\n            switch(node.getType()) {\n                case Token.CALL:\n                case Token.NEW:\n                    visitCall(sideEffectInfo, node);\n                    break;\n                case Token.DELPROP:\n                case Token.DEC:\n                case Token.INC:\n                    visitAssignmentOrUnaryOperatorLhs(sideEffectInfo, traversal.getScope(), node.getFirstChild());\n                    break;\n                case Token.NAME:\n                    Preconditions.checkArgument(NodeUtil.isVarDeclaration(node));\n                    break;\n                case Token.THROW:\n                    visitThrow(sideEffectInfo);\n                    break;\n                default:\n                    throw new IllegalArgumentException(\"Unhandled side effect node type \" + Token.name(node.getType()));\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 321,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}