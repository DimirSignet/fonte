{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultPassConfig.java",
  "functionName": "getChecks",
  "functionId": "getChecks",
  "sourceFilePath": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 165,
  "functionEndLine": 307,
  "numCommitsSeen": 117,
  "timeTaken": 8360,
  "changeHistory": [
    "9d1fbeb46eb8a09b2710d6dd9a94a337d5e676ca",
    "69ee87f71287ff5d6e4858bd5547dd82785e9116",
    "4d27fdcfda10b3cfbf0c87b3b6d691da5b5291a7",
    "c00a33b88d00f3b28787da26e3bb65ae2c1f4893",
    "1e03ad032456a42908e19a7f2df46786969e7121",
    "8bf67e65c7ee2a202ac2dbf252727ae656642350",
    "524c758183be741ff1519acfa8a4bf714dd2c4cd",
    "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956",
    "5709ec1d0bbe5b7726a14d06f7eab9c35150e314",
    "8268221c77c7d18834cbe8c55dbfadfd2733a7a0",
    "d24a652c89b3798648fade2401b741eae981d535",
    "1004aa6826a19fcb9e6a33b029b492a100fa081b",
    "98d279bce83ddb2dca499be4bc365939f809a923",
    "5885b9b72a64533fb2bd6f05d66c65b58c7d3b45",
    "279196b617c5de1ade21110979b6b13d8eda6342",
    "de13c3313c05f4449c50c560324389d6905a214d",
    "74a817bbf5256d671036356c58096f612535e4a2",
    "40ab7fc97ed52e3a1c1235ee20f97c10e39d6390",
    "915752b8e4ffd312eea298fb749dddd0edc0db2e",
    "3924ff1e4a236d68a0b5448d185537d90ca04419",
    "6a6ea480bae01f40f9795218ac911bb7de18d34a",
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "9d1fbeb46eb8a09b2710d6dd9a94a337d5e676ca": "Ybodychange",
    "69ee87f71287ff5d6e4858bd5547dd82785e9116": "Ybodychange",
    "4d27fdcfda10b3cfbf0c87b3b6d691da5b5291a7": "Ybodychange",
    "c00a33b88d00f3b28787da26e3bb65ae2c1f4893": "Ybodychange",
    "1e03ad032456a42908e19a7f2df46786969e7121": "Ybodychange",
    "8bf67e65c7ee2a202ac2dbf252727ae656642350": "Ybodychange",
    "524c758183be741ff1519acfa8a4bf714dd2c4cd": "Ybodychange",
    "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956": "Ybodychange",
    "5709ec1d0bbe5b7726a14d06f7eab9c35150e314": "Ybodychange",
    "8268221c77c7d18834cbe8c55dbfadfd2733a7a0": "Ybodychange",
    "d24a652c89b3798648fade2401b741eae981d535": "Ybodychange",
    "1004aa6826a19fcb9e6a33b029b492a100fa081b": "Ybodychange",
    "98d279bce83ddb2dca499be4bc365939f809a923": "Ybodychange",
    "5885b9b72a64533fb2bd6f05d66c65b58c7d3b45": "Ybodychange",
    "279196b617c5de1ade21110979b6b13d8eda6342": "Ybodychange",
    "de13c3313c05f4449c50c560324389d6905a214d": "Ybodychange",
    "74a817bbf5256d671036356c58096f612535e4a2": "Ybodychange",
    "40ab7fc97ed52e3a1c1235ee20f97c10e39d6390": "Ybodychange",
    "915752b8e4ffd312eea298fb749dddd0edc0db2e": "Ybodychange",
    "3924ff1e4a236d68a0b5448d185537d90ca04419": "Ybodychange",
    "6a6ea480bae01f40f9795218ac911bb7de18d34a": "Ybodychange",
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9d1fbeb46eb8a09b2710d6dd9a94a337d5e676ca": {
      "type": "Ybodychange",
      "commitMessage": "\nES5 Strict changes:\n* demote ES5 checks from errors to warnings by default.\n* enable ES5 checks by default\n* depreciate the compiler option and command-line flag\nin favor of the diagnostic group.\n* promote the ES5 strict checks to errors when running in the\n* ES5_STRICT language mode.\n\nR\u003dacleung\nDELTA\u003d56  (16 added, 10 deleted, 30 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2502\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1244 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/5/11, 1:07 PM",
      "commitName": "9d1fbeb46eb8a09b2710d6dd9a94a337d5e676ca",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "6/29/11, 4:04 PM",
      "commitNameOld": "4859a081fed75137d36963372411b891a82c8e8c",
      "commitAuthorOld": "fmeawad@google.com",
      "daysBetweenCommits": 5.88,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes || options.inferTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        if (options.checkTypes) {\n            checks.add(checkTypes.makeOneTimePass());\n        } else {\n            checks.add(inferJsDocInfo.makeOneTimePass());\n        }\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    checks.add(checkStrictMode);\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 165,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,95 +1,93 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes || options.inferTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         if (options.checkTypes) {\n             checks.add(checkTypes.makeOneTimePass());\n         } else {\n             checks.add(inferJsDocInfo.makeOneTimePass());\n         }\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n-    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n-        checks.add(checkStrictMode);\n-    }\n+    checks.add(checkStrictMode);\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "69ee87f71287ff5d6e4858bd5547dd82785e9116": {
      "type": "Ybodychange",
      "commitMessage": "\nDelete undefined properties check\n\nR\u003djohnlenz\nDELTA\u003d602  (16 added, 579 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2319\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1187 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/11, 1:02 PM",
      "commitName": "69ee87f71287ff5d6e4858bd5547dd82785e9116",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/14/11, 5:29 PM",
      "commitNameOld": "3fc66a99d98015dc798215a666f6b5ad268028c2",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes || options.inferTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        if (options.checkTypes) {\n            checks.add(checkTypes.makeOneTimePass());\n        } else {\n            checks.add(inferJsDocInfo.makeOneTimePass());\n        }\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 165,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,98 +1,95 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes || options.inferTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         if (options.checkTypes) {\n             checks.add(checkTypes.makeOneTimePass());\n         } else {\n             checks.add(inferJsDocInfo.makeOneTimePass());\n         }\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n-    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n-        checks.add(checkSuspiciousProperties);\n-    }\n     if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4d27fdcfda10b3cfbf0c87b3b6d691da5b5291a7": {
      "type": "Ybodychange",
      "commitMessage": "\nFor IDE-type invocations, added an \"infer types flag\" that is similar to the existing\ncheckTypes step, except for the actual TypeCheck step.\n\nR\u003djohnlenz,nicksantos\nDELTA\u003d67  (64 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1620\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1034 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/26/11, 7:14 AM",
      "commitName": "4d27fdcfda10b3cfbf0c87b3b6d691da5b5291a7",
      "commitAuthor": "davidplass@google.com",
      "commitDateOld": "4/21/11, 10:24 AM",
      "commitNameOld": "31628adfc829bdd7b1607f0d9d99c2290b1c28cd",
      "commitAuthorOld": "bashir@google.com",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes || options.inferTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        if (options.checkTypes) {\n            checks.add(checkTypes.makeOneTimePass());\n        } else {\n            checks.add(inferJsDocInfo.makeOneTimePass());\n        }\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 165,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,94 +1,98 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n-    if (options.checkTypes) {\n+    if (options.checkTypes || options.inferTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n-        checks.add(checkTypes.makeOneTimePass());\n+        if (options.checkTypes) {\n+            checks.add(checkTypes.makeOneTimePass());\n+        } else {\n+            checks.add(inferJsDocInfo.makeOneTimePass());\n+        }\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c00a33b88d00f3b28787da26e3bb65ae2c1f4893": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nSame change. The warnings guard issue has been fixed\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\ncausing problems. not sure why yet.\n\n*** Original change description ***\n\nAllow the \"global this\" warning to be suppressed on a per-file basis\n\nR\u003djohnlenz\nDELTA\u003d82  (50 added, 22 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d953\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@915 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/11, 5:19 PM",
      "commitName": "c00a33b88d00f3b28787da26e3bb65ae2c1f4893",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/18/11, 1:52 PM",
      "commitNameOld": "1e03ad032456a42908e19a7f2df46786969e7121",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 165,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,94 +1,94 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n-    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n+    if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1e03ad032456a42908e19a7f2df46786969e7121": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\ncausing problems. not sure why yet.\n\n*** Original change description ***\n\nAllow the \"global this\" warning to be suppressed on a per-file basis\n\nDELTA\u003d82  (22 added, 50 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d948\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@910 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/11, 1:52 PM",
      "commitName": "1e03ad032456a42908e19a7f2df46786969e7121",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/18/11, 5:25 PM",
      "commitNameOld": "8bf67e65c7ee2a202ac2dbf252727ae656642350",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": -0.15,
      "commitsBetweenForRepo": 0,
      "commitsBetweenForFile": 0,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 165,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,94 +1,94 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n-    if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n+    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8bf67e65c7ee2a202ac2dbf252727ae656642350": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2011-03-18 10:06:19-07:00 by nicksantos\n\n\tAllow suppression of duplicate property declarations when\n\tthe property is in an object literal\n\n\tR\u003djohnlenz\n\tDELTA\u003d48  (47 added, 0 deleted, 1 changed)\n\nChange on 2011-03-18 12:02:54-07:00 by nicksantos\n\n\tAllow the \"global this\" warning to be suppressed on a per-file basis\n\n\tR\u003djohnlenz\n\tDELTA\u003d82  (50 added, 22 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d945\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@909 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/18/11, 5:25 PM",
      "commitName": "8bf67e65c7ee2a202ac2dbf252727ae656642350",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/16/11, 7:07 AM",
      "commitNameOld": "10587cd1fbd6b189089444d0bd2aa24d557b480c",
      "commitAuthorOld": "agrieve@google.com",
      "daysBetweenCommits": 2.43,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 165,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,94 +1,94 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n-    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n+    if (options.checkSuspiciousCode || options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "524c758183be741ff1519acfa8a4bf714dd2c4cd": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduce EcmaScript 5 Strict mode output\n\nR\u003dacleung\nDELTA\u003d98  (60 added, 0 deleted, 38 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d820\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@873 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/10/11, 11:48 AM",
      "commitName": "524c758183be741ff1519acfa8a4bf714dd2c4cd",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/8/11, 9:20 AM",
      "commitNameOld": "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 165,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,94 +1,94 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n-    if (options.languageIn \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n+    if (options.getLanguageIn() \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduce a ECMASCRIPT5_STRICT language mode.  Run strict mode tests when in that mode.\n\nR\u003dacleung\nDELTA\u003d47  (42 added, 1 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d800\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@864 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/8/11, 9:20 AM",
      "commitName": "d132d6d962bf9a1999eff3fcaa6d8b53b4d66956",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/7/11, 4:19 PM",
      "commitNameOld": "b326ab0a322d0ece76e61955852ada034122192b",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.languageIn \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 165,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,94 +1,94 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n-    if (options.checkCaja || options.checkEs5Strict) {\n+    if (options.languageIn \u003d\u003d LanguageMode.ECMASCRIPT5_STRICT || options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5709ec1d0bbe5b7726a14d06f7eab9c35150e314": {
      "type": "Ybodychange",
      "commitMessage": "\nPut bad type annotations behind a diagnostic group, so that they\naren\u0027t reported if type-checking isn\u0027t on.\n\nR\u003dacleung\nDELTA\u003d300  (110 added, 11 deleted, 179 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d780\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@857 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/7/11, 12:59 PM",
      "commitName": "5709ec1d0bbe5b7726a14d06f7eab9c35150e314",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/2/11, 2:12 PM",
      "commitNameOld": "f3c23f757da302483c86414ec8b9c502f10fce00",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 4.95,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 164,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,99 +1,94 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-        options.checkTypes \u003d true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-        options.checkTypes \u003d false;\n-    }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8268221c77c7d18834cbe8c55dbfadfd2733a7a0": {
      "type": "Ybodychange",
      "commitMessage": "\nTouch up the constant property check and enable it by default.\n\nR\u003dzhuyi\nDELTA\u003d6  (1 added, 1 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d669\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@818 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/24/11, 10:27 PM",
      "commitName": "8268221c77c7d18834cbe8c55dbfadfd2733a7a0",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/23/11, 6:02 PM",
      "commitNameOld": "902503a7f8aa4d86bbfc01a0933f2a9e6d952e7f",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 1.18,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 164,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,99 +1,99 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d false;\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n-    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n+    if (options.checkTypes \u0026\u0026 (options.enables(DiagnosticGroups.ACCESS_CONTROLS) || options.enables(DiagnosticGroups.CONSTANT_PROPERTY))) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     if (options.getTweakProcessing().isOn()) {\n         checks.add(processTweaks);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d24a652c89b3798648fade2401b741eae981d535": {
      "type": "Ybodychange",
      "commitMessage": "\nEnhance the ProcessTweaks pass so that it:\n-Strips out all goog.tweak calls when tweakProcessing \u003d\u003d STRIP\n-Adds a var to the beginning of the input with compiler overrides when\ntweakProcessing \u003d\u003d CHECK\n\nR\u003dnicksantos\nDELTA\u003d369  (356 added, 3 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d235\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@681 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/10/11, 11:27 AM",
      "commitName": "d24a652c89b3798648fade2401b741eae981d535",
      "commitAuthor": "agrieve@google.com",
      "commitDateOld": "1/7/11, 1:09 PM",
      "commitNameOld": "5741fcbabf37d54f3d37f4b497b44527ede76be1",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 2.93,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    if (options.getTweakProcessing().isOn()) {\n        checks.add(processTweaks);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 164,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,96 +1,99 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d false;\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n+    if (options.getTweakProcessing().isOn()) {\n+        checks.add(processTweaks);\n+    }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1004aa6826a19fcb9e6a33b029b492a100fa081b": {
      "type": "Ybodychange",
      "commitMessage": "\nMake all named warning groups suppressable.\nThe real radical change here is that in order to do this,\nwe need to tell the compiler which diagnostic groups it\u0027s running\nwith, which requires a bit of clean-up in the compiler\u0027s\nbootstrapping sequence.\n\nR\u003djohnlenz\nDELTA\u003d94  (74 added, 14 deleted, 6 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d114010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@358 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/12/10, 6:27 PM",
      "commitName": "1004aa6826a19fcb9e6a33b029b492a100fa081b",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/12/10, 11:58 AM",
      "commitNameOld": "44e59948342527c9d8ffc6f2b01d86af72aaef54",
      "commitAuthorOld": "dcc@google.com",
      "daysBetweenCommits": 0.27,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 159,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,100 +1,96 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n-    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n-    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n-        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n-    }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d false;\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n         checks.add(printNameReferenceGraph);\n     }\n     if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n         checks.add(printNameReferenceReport);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "98d279bce83ddb2dca499be4bc365939f809a923": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/12 15:42:05 by nicksantos\n\n\tAdd a couple test cases that i was curious about.\n\n\tR\u003drobbyw\n\tDELTA\u003d25  (25 added, 0 deleted, 0 changed)\n\nChange on 2010/07/12 17:12:33 by nicksantos\n\n\tAdd CONST annotations to synthesized vars.\n\n\tR\u003djohnlenz\n\tDELTA\u003d11  (11 added, 0 deleted, 0 changed)\n\nChange on 2010/07/12 17:55:03 by johnlenz\n\n\tOpen source the name reference graph report and html report.\n\n\tR\u003dacleung\n\tDELTA\u003d185  (93 added, 90 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d48009\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@273 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/13/10, 10:54 AM",
      "commitName": "98d279bce83ddb2dca499be4bc365939f809a923",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/9/10, 4:02 PM",
      "commitNameOld": "82a9956c6337d2f5d4a94ebe624d64faa54d9182",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 3.79,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n        checks.add(printNameReferenceGraph);\n    }\n    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n        checks.add(printNameReferenceReport);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 159,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,94 +1,100 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.closurePass) {\n         checks.add(closureGoogScopeAliases);\n     }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d false;\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n+    if (options.nameReferenceGraphPath !\u003d null \u0026\u0026 !options.nameReferenceGraphPath.isEmpty()) {\n+        checks.add(printNameReferenceGraph);\n+    }\n+    if (options.nameReferenceReportPath !\u003d null \u0026\u0026 !options.nameReferenceReportPath.isEmpty()) {\n+        checks.add(printNameReferenceReport);\n+    }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5885b9b72a64533fb2bd6f05d66c65b58c7d3b45": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/21 by nicksantos\n\n        Add a messagebundle to compileroptions.\n\n        R\u003djohnlenz\n        DELTA\u003d65  (53 added, 7 deleted, 5 changed)\n\nChange on 2010/05/21 by johnlenz\n\n        Automated g4 rollback of changelist 15608158.\n\n        *** Reason for rollback ***\n\n          Incorrectly inlines into loops.\n\n        *** Original change description ***\n\n        Enable flow sensitive inlining in open source world.\n\n        R\u003dacleung\n        DELTA\u003d2  (0 added, 2 deleted, 0 changed)\n\nChange on 2010/05/21 by johnlenz\n\n        Automated g4 rollback of changelist 15557333.\n\n        *** Reason for rollback ***\n\n          Flow sensitive inlining incorrectly inlines into loops.\n\n        *** Original change description ***\n\n        Automated g4 rollback of changelist 15443639.\n\n        *** Reason for rollback ***\n\n          Fixed by 15522083\n\n        *** Original change description ***\n\n        Automated g4 rollback of changelist 15380611.\n\n        *** Reason for rollback ***\n\n        see attached bug\n\n        *** Original change description ***\n\n        Enable Flow Sensitive Inlining by default. Passes GMail automation test.\n\n        R\u003dacleung\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/05/21 by acleung\n\n        Automated g4 rollback of changelist 15093982.\n\n        *** Reason for rollback ***\n\n          Because third time is a charm.\n\n        *** Original change description ***\n\n        Automated g4 rollback of changelist 15093106.\n\n        *** Reason for rollback ***\n\n        breaks caribou b/c of new warnings.\n\n        *** Original change description ***\n\n        Make unreachable code detection a bit smarter.\n\n        R\u003djohnlenz\n        DELTA\u003d77  (70 added, 3 deleted, 4 changed)\n\nChange on 2010/05/21 by nicksantos\n\n        Create a shortcut mode for the deps file parser, and turn it on\n        by default.\n        Also, add tracers to deps generator.\n\n        R\u003dagrieve\n        DELTA\u003d171  (117 added, 44 deleted, 10 changed)\n\nChange on 2010/05/21 by acleung\n\n        Make ExtractPrototypeMemberDeclarations skip over devirtualized prototype methods\n\n        R\u003davd\n        DELTA\u003d80  (80 added, 0 deleted, 0 changed)\n\nChange on 2010/05/21 by robbyw\n\n        Attach ScopedAliases to the closurePass flag.\n\n        R\u003dnicksantos\n        DELTA\u003d13  (13 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d11001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@226 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/21/10, 2:27 PM",
      "commitName": "5885b9b72a64533fb2bd6f05d66c65b58c7d3b45",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/5/10, 4:36 PM",
      "commitNameOld": "279196b617c5de1ade21110979b6b13d8eda6342",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 15.91,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.closurePass) {\n        checks.add(closureGoogScopeAliases);\n    }\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 151,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,90 +1,94 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n+    if (options.closurePass) {\n+        checks.add(closureGoogScopeAliases);\n+    }\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d false;\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n+    checks.add(options.messageBundle !\u003d null ? replaceMessages : createEmptyPass(\"replaceMessages\"));\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "279196b617c5de1ade21110979b6b13d8eda6342": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/04 by nick\n\n        Pipe everything through the module code path.\n        This teases out a bunch of edge-case bugs that worked in the non-module\n        code path, but not the module code path (and vice-versa)\n\n        R\u003dalan\n        DELTA\u003d136  (67 added, 19 deleted, 50 changed)\n\nChange on 2010/05/04 by nick\n\n        fiddle with the check_global_this_level decision tree\n        This should be off by default if collapse_properties is off,\n        and on by default if collapse_properties is on.\n\n        R\u003dalan\n        DELTA\u003d47  (32 added, 4 deleted, 11 changed)\n\nChange on 2010/05/04 by andrew\n\n        -Infer that arguments to goog.asserts.assert() are non-nullable after the\n        call.\n        -Infer the types of arguments to goog.asserts.assert{String,Number,...} after\n        the call.\n\n        Tested:\n          -Added new unit tests.\n\n        R\u003dnick\n        DELTA\u003d277  (266 added, 4 deleted, 7 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dqdhuno\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@203 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/5/10, 4:36 PM",
      "commitName": "279196b617c5de1ade21110979b6b13d8eda6342",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/28/10, 11:13 AM",
      "commitNameOld": "3c2047d4ed1b14fc5e5269d08ee17bfc19bb5374",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 7.22,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 151,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,90 +1,90 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n-    if (options.checkSuspiciousCode) {\n+    if (options.checkSuspiciousCode || options.checkGlobalThisLevel.isOn()) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d false;\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "de13c3313c05f4449c50c560324389d6905a214d": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/13 by john\n\n        Experimental option: Flag to change named object references from \"Object|null\" to \"Object|null|undefined\".\n\n        R\u003dalan,nick\n        DELTA\u003d7144  (7131 added, 5 deleted, 8 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        get rid of some backdoor gmail apis.\n\n        R\u003djohn\n        DELTA\u003d44  (0 added, 33 deleted, 11 changed)\n\nChange on 2010/04/13 by nicksantos\n\n        fix TypeCheckTest to parse externs files properly.\n        i still need to merge the TypeCheckTest-forking cl into this one.\n\n        R\u003djohn\n        DELTA\u003d42  (12 added, 0 deleted, 30 changed)\n\nChange on 2010/04/13 by john\n\n        Enable expression decomposition for function inlining by default.\n\n        R\u003dnick\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by john\n\n        Move ReplaceCssNames to allow type checking of goog.getCssName.\n\n        R\u003dmark\n        DELTA\u003d39  (35 added, 4 deleted, 0 changed)\n\nChange on 2010/04/13 by john\n\n        Maintain source and type information during ReplaceCssNames.\n\n        R\u003dmark\n        DELTA\u003d31  (30 added, 0 deleted, 1 changed)\n\nChange on 2010/04/13 by nick\n\n        fix up type information on event listener functions.\n\n        R\u003dalan\n        DELTA\u003d2  (0 added, 0 deleted, 2 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dwescxy\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@182 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/13/10, 2:39 PM",
      "commitName": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/12/10, 7:59 AM",
      "commitNameOld": "80fe41fd0173c3eaa56f4abb783031966ea89cef",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.28,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 147,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,90 +1,90 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n-    if (options.closurePass) {\n-        checks.add(closureReplaceGetCssName);\n-    }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n     }\n     checks.add(checkVars);\n     if (options.computeFunctionSideEffects) {\n         checks.add(checkRegExp);\n     }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d false;\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n+    if (options.closurePass) {\n+        checks.add(closureReplaceGetCssName);\n+    }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "74a817bbf5256d671036356c58096f612535e4a2": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/08 by john\n\n        Part I: Add a pass that checks for references to the global RegExp object.\n\n        R\u003dalan\n        DELTA\u003d192  (185 added, 1 deleted, 6 changed)\n\nChange on 2010/04/08 by nick\n\n        type annotation fixit. Fixes issue 140.\n\n        R\u003dalan\n        DELTA\u003d69  (41 added, 0 deleted, 28 changed)\n\nChange on 2010/04/08 by alan\n\n        Fix the flow sensitive inlining case that breaks code.\n\n        R\u003djohn\n        DELTA\u003d163  (158 added, 0 deleted, 5 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003djfazwv\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@178 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/9/10, 7:21 AM",
      "commitName": "74a817bbf5256d671036356c58096f612535e4a2",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/30/10, 3:01 PM",
      "commitNameOld": "1c2f9589453a5269f45adefed4f38b1b8253d235",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 9.68,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.computeFunctionSideEffects) {\n        checks.add(checkRegExp);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 147,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,87 +1,90 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n     }\n     checks.add(checkVars);\n+    if (options.computeFunctionSideEffects) {\n+        checks.add(checkRegExp);\n+    }\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d false;\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "40ab7fc97ed52e3a1c1235ee20f97c10e39d6390": {
      "type": "Ybodychange",
      "commitMessage": "Delete the heuristic arity checks.\nAlmost all BUILD rules in google3 with this flag turned on are using\ntype-checking, which overrides this flag. I don\u0027t think it\u0027s worth\nsupporting for the few people left who use it. (Nick)\nR\u003dJohn\nDELTA\u003d659  (0 added, 654 deleted, 5 changed)\n\nuse the right error-reporting apis. (Nick)\nR\u003dJohn\nDELTA\u003d19  (2 added, 0 deleted, 17 changed)\n\ninline aliases of \u0027this\u0027 (Nick)\nR\u003dJohn\nDELTA\u003d34  (31 added, 1 deleted, 2 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@155 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/10, 1:21 PM",
      "commitName": "40ab7fc97ed52e3a1c1235ee20f97c10e39d6390",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/16/10, 10:44 AM",
      "commitNameOld": "2131059de15ba858adf7646bfba5cbd04b661336",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 9.11,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 147,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,94 +1,87 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n     }\n     checks.add(checkVars);\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d true;\n     } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n         options.checkTypes \u003d false;\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n-    } else {\n-        if (options.checkFunctions.isOn()) {\n-            checks.add(checkFunctions);\n-        }\n-        if (options.checkMethods.isOn()) {\n-            checks.add(checkMethods);\n-        }\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "915752b8e4ffd312eea298fb749dddd0edc0db2e": {
      "type": "Ybodychange",
      "commitMessage": "Add boatloads of tests.\n\nAdd support for --jscomp_warning\u003dcheckTypes\n\nAdd phase optimization improvements.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@49 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/23/09, 9:33 AM",
      "commitName": "915752b8e4ffd312eea298fb749dddd0edc0db2e",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/17/09, 4:20 PM",
      "commitNameOld": "14ddcfdc0b8d1cece3c79221b1870b84f055d419",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 5.72,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d true;\n    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n        options.checkTypes \u003d false;\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    } else {\n        if (options.checkFunctions.isOn()) {\n            checks.add(checkFunctions);\n        }\n        if (options.checkMethods.isOn()) {\n            checks.add(checkMethods);\n        }\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 148,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,89 +1,94 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.nameAnonymousFunctionsOnly) {\n         if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n             checks.add(nameMappedAnonymousFunctions);\n         } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n             checks.add(nameUnmappedAnonymousFunctions);\n         }\n         return checks;\n     }\n     if (options.checkSuspiciousCode) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n     }\n     checks.add(checkVars);\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+        options.checkTypes \u003d false;\n+    }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     } else {\n         if (options.checkFunctions.isOn()) {\n             checks.add(checkFunctions);\n         }\n         if (options.checkMethods.isOn()) {\n             checks.add(checkMethods);\n         }\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     checks.add(processDefines);\n     if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n         checks.add(computeFunctionNames);\n     }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3924ff1e4a236d68a0b5448d185537d90ca04419": {
      "type": "Ybodychange",
      "commitMessage": "Warn about all with statements, unless there\u0027s an explicit\n/** @suppress {with} */ tag\n\nRefactor a bunch of stuff into PassConfigs\n\nAdd a bunch of parser tests.\n\nUp-integrate John and Norris\u0027 latest changes to Rhino at trunk\n\nMinor type-tightening bug fixes.\n\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@18 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/2/09, 5:12 PM",
      "commitName": "3924ff1e4a236d68a0b5448d185537d90ca04419",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/25/09, 6:53 AM",
      "commitNameOld": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 7.43,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.nameAnonymousFunctionsOnly) {\n        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n            checks.add(nameMappedAnonymousFunctions);\n        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n            checks.add(nameUnmappedAnonymousFunctions);\n        }\n        return checks;\n    }\n    if (options.checkSuspiciousCode) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    } else {\n        if (options.checkFunctions.isOn()) {\n            checks.add(checkFunctions);\n        }\n        if (options.checkMethods.isOn()) {\n            checks.add(checkMethods);\n        }\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    checks.add(processDefines);\n    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n        checks.add(computeFunctionNames);\n    }\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 148,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,78 +1,89 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n+    if (options.nameAnonymousFunctionsOnly) {\n+        if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.MAPPED) {\n+            checks.add(nameMappedAnonymousFunctions);\n+        } else if (options.anonymousFunctionNaming \u003d\u003d AnonymousFunctionNamingPolicy.UNMAPPED) {\n+            checks.add(nameUnmappedAnonymousFunctions);\n+        }\n+        return checks;\n+    }\n     if (options.checkSuspiciousCode) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n     WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n     if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n         options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n     }\n     checks.add(checkVars);\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     } else {\n         if (options.checkFunctions.isOn()) {\n             checks.add(checkFunctions);\n         }\n         if (options.checkMethods.isOn()) {\n             checks.add(checkMethods);\n         }\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     checks.add(processDefines);\n+    if (options.instrumentationTemplate !\u003d null || options.recordFunctionInformation) {\n+        checks.add(computeFunctionNames);\n+    }\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a6ea480bae01f40f9795218ac911bb7de18d34a": {
      "type": "Ybodychange",
      "commitMessage": "Don\u0027t warn about duplicate variable declarations unless warning_level is\nset to VERBOSE.\n\nImplementation of libary function goog.base.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@13 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/19/09, 1:23 PM",
      "commitName": "6a6ea480bae01f40f9795218ac911bb7de18d34a",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/16/09, 4:04 PM",
      "commitNameOld": "2acd6c1986e36bfdbae85c09eb83ac1940b86c73",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 2.89,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.checkSuspiciousCode) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    } else {\n        if (options.checkFunctions.isOn()) {\n            checks.add(checkFunctions);\n        }\n        if (options.checkMethods.isOn()) {\n            checks.add(checkMethods);\n        }\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    checks.add(processDefines);\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 84,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,77 +1,78 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.checkSuspiciousCode) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n-    if (!options.checkSymbols) {\n-        options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARIABLES, CheckLevel.OFF);\n+    WarningsGuard warningsGuard \u003d options.getWarningsGuard();\n+    if (!options.checkSymbols \u0026\u0026 (warningsGuard \u003d\u003d null || !warningsGuard.disables(DiagnosticGroups.CHECK_VARIABLES))) {\n+        options.setWarningLevel(DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF);\n     }\n     checks.add(checkVars);\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     } else {\n         if (options.checkFunctions.isOn()) {\n             checks.add(checkFunctions);\n         }\n         if (options.checkMethods.isOn()) {\n             checks.add(checkMethods);\n         }\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     checks.add(processDefines);\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0": {
      "type": "Ybodychange",
      "commitMessage": "A bunch of bug fixes\nAdded the --warning_level\u003d{QUIET|DEFAULT|VERBOSE} flag,\nto match the webservice API\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@3 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/6/09, 5:24 PM",
      "commitName": "0b7eccf2fd3a9293d7b513fbb766d7bc06abd7e0",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.checkSuspiciousCode) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    if (!options.checkSymbols) {\n        options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARIABLES, CheckLevel.OFF);\n    }\n    checks.add(checkVars);\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    } else {\n        if (options.checkFunctions.isOn()) {\n            checks.add(checkFunctions);\n        }\n        if (options.checkMethods.isOn()) {\n            checks.add(checkMethods);\n        }\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    checks.add(processDefines);\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 84,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,76 +1,77 @@\n @Override\n protected List\u003cPassFactory\u003e getChecks() {\n     List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n     if (options.checkSuspiciousCode) {\n         checks.add(suspiciousCode);\n     }\n     if (options.checkControlStructures) {\n         checks.add(checkControlStructures);\n     }\n     if (options.checkRequires.isOn()) {\n         checks.add(checkRequires);\n     }\n     if (options.checkProvides.isOn()) {\n         checks.add(checkProvides);\n     }\n     if (options.generateExports) {\n         checks.add(generateExports);\n     }\n     if (options.exportTestFunctions) {\n         checks.add(exportTestFunctions);\n     }\n     if (options.closurePass) {\n         checks.add(closurePrimitives.makeOneTimePass());\n     }\n     if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n         checks.add(closureCheckGetCssName);\n     }\n     if (options.closurePass) {\n         checks.add(closureReplaceGetCssName);\n     }\n     if (options.syntheticBlockStartMarker !\u003d null) {\n         checks.add(createSyntheticBlocks);\n     }\n-    if (options.checkSymbols) {\n-        checks.add(checkVars);\n+    if (!options.checkSymbols) {\n+        options.setWarningLevel(DiagnosticGroups.UNDEFINED_VARIABLES, CheckLevel.OFF);\n     }\n+    checks.add(checkVars);\n     if (options.checkShadowVars.isOn()) {\n         checks.add(checkShadowVars);\n     }\n     if (options.aggressiveVarCheck.isOn()) {\n         checks.add(checkVariableReferences);\n     }\n     if (options.processObjectPropertyString) {\n         checks.add(objectPropertyStringPreprocess);\n     }\n     if (options.checkTypes) {\n         checks.add(resolveTypes.makeOneTimePass());\n         checks.add(inferTypes.makeOneTimePass());\n         checks.add(checkTypes.makeOneTimePass());\n     } else {\n         if (options.checkFunctions.isOn()) {\n             checks.add(checkFunctions);\n         }\n         if (options.checkMethods.isOn()) {\n             checks.add(checkMethods);\n         }\n     }\n     if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n         checks.add(checkControlFlow);\n     }\n     if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n         checks.add(checkAccessControls);\n     }\n     if (options.checkGlobalNamesLevel.isOn()) {\n         checks.add(checkGlobalNames);\n     }\n     if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n         checks.add(checkSuspiciousProperties);\n     }\n     if (options.checkCaja || options.checkEs5Strict) {\n         checks.add(checkStrictMode);\n     }\n     checks.add(processDefines);\n     assertAllOneTimePasses(checks);\n     return checks;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,76 @@\n+@Override\n+protected List\u003cPassFactory\u003e getChecks() {\n+    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n+    if (options.checkSuspiciousCode) {\n+        checks.add(suspiciousCode);\n+    }\n+    if (options.checkControlStructures) {\n+        checks.add(checkControlStructures);\n+    }\n+    if (options.checkRequires.isOn()) {\n+        checks.add(checkRequires);\n+    }\n+    if (options.checkProvides.isOn()) {\n+        checks.add(checkProvides);\n+    }\n+    if (options.generateExports) {\n+        checks.add(generateExports);\n+    }\n+    if (options.exportTestFunctions) {\n+        checks.add(exportTestFunctions);\n+    }\n+    if (options.closurePass) {\n+        checks.add(closurePrimitives.makeOneTimePass());\n+    }\n+    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n+        checks.add(closureCheckGetCssName);\n+    }\n+    if (options.closurePass) {\n+        checks.add(closureReplaceGetCssName);\n+    }\n+    if (options.syntheticBlockStartMarker !\u003d null) {\n+        checks.add(createSyntheticBlocks);\n+    }\n+    if (options.checkSymbols) {\n+        checks.add(checkVars);\n+    }\n+    if (options.checkShadowVars.isOn()) {\n+        checks.add(checkShadowVars);\n+    }\n+    if (options.aggressiveVarCheck.isOn()) {\n+        checks.add(checkVariableReferences);\n+    }\n+    if (options.processObjectPropertyString) {\n+        checks.add(objectPropertyStringPreprocess);\n+    }\n+    if (options.checkTypes) {\n+        checks.add(resolveTypes.makeOneTimePass());\n+        checks.add(inferTypes.makeOneTimePass());\n+        checks.add(checkTypes.makeOneTimePass());\n+    } else {\n+        if (options.checkFunctions.isOn()) {\n+            checks.add(checkFunctions);\n+        }\n+        if (options.checkMethods.isOn()) {\n+            checks.add(checkMethods);\n+        }\n+    }\n+    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n+        checks.add(checkControlFlow);\n+    }\n+    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n+        checks.add(checkAccessControls);\n+    }\n+    if (options.checkGlobalNamesLevel.isOn()) {\n+        checks.add(checkGlobalNames);\n+    }\n+    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n+        checks.add(checkSuspiciousProperties);\n+    }\n+    if (options.checkCaja || options.checkEs5Strict) {\n+        checks.add(checkStrictMode);\n+    }\n+    checks.add(processDefines);\n+    assertAllOneTimePasses(checks);\n+    return checks;\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\nprotected List\u003cPassFactory\u003e getChecks() {\n    List\u003cPassFactory\u003e checks \u003d Lists.newArrayList();\n    if (options.checkSuspiciousCode) {\n        checks.add(suspiciousCode);\n    }\n    if (options.checkControlStructures) {\n        checks.add(checkControlStructures);\n    }\n    if (options.checkRequires.isOn()) {\n        checks.add(checkRequires);\n    }\n    if (options.checkProvides.isOn()) {\n        checks.add(checkProvides);\n    }\n    if (options.generateExports) {\n        checks.add(generateExports);\n    }\n    if (options.exportTestFunctions) {\n        checks.add(exportTestFunctions);\n    }\n    if (options.closurePass) {\n        checks.add(closurePrimitives.makeOneTimePass());\n    }\n    if (options.closurePass \u0026\u0026 options.checkMissingGetCssNameLevel.isOn()) {\n        checks.add(closureCheckGetCssName);\n    }\n    if (options.closurePass) {\n        checks.add(closureReplaceGetCssName);\n    }\n    if (options.syntheticBlockStartMarker !\u003d null) {\n        checks.add(createSyntheticBlocks);\n    }\n    if (options.checkSymbols) {\n        checks.add(checkVars);\n    }\n    if (options.checkShadowVars.isOn()) {\n        checks.add(checkShadowVars);\n    }\n    if (options.aggressiveVarCheck.isOn()) {\n        checks.add(checkVariableReferences);\n    }\n    if (options.processObjectPropertyString) {\n        checks.add(objectPropertyStringPreprocess);\n    }\n    if (options.checkTypes) {\n        checks.add(resolveTypes.makeOneTimePass());\n        checks.add(inferTypes.makeOneTimePass());\n        checks.add(checkTypes.makeOneTimePass());\n    } else {\n        if (options.checkFunctions.isOn()) {\n            checks.add(checkFunctions);\n        }\n        if (options.checkMethods.isOn()) {\n            checks.add(checkMethods);\n        }\n    }\n    if (options.checkUnreachableCode.isOn() || (options.checkTypes \u0026\u0026 options.checkMissingReturn.isOn())) {\n        checks.add(checkControlFlow);\n    }\n    if (options.enables(DiagnosticGroups.ACCESS_CONTROLS) \u0026\u0026 options.checkTypes) {\n        checks.add(checkAccessControls);\n    }\n    if (options.checkGlobalNamesLevel.isOn()) {\n        checks.add(checkGlobalNames);\n    }\n    if (options.checkUndefinedProperties.isOn() || options.checkUnusedPropertiesEarly) {\n        checks.add(checkSuspiciousProperties);\n    }\n    if (options.checkCaja || options.checkEs5Strict) {\n        checks.add(checkStrictMode);\n    }\n    checks.add(processDefines);\n    assertAllOneTimePasses(checks);\n    return checks;\n}",
      "path": "src/com/google/javascript/jscomp/DefaultPassConfig.java",
      "functionStartLine": 84,
      "functionName": "getChecks",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}