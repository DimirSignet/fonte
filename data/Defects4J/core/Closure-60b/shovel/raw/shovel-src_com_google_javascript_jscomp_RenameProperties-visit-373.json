{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RenameProperties.java",
  "functionName": "visit",
  "functionId": "$visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/RenameProperties.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 373,
  "functionEndLine": 389,
  "numCommitsSeen": 18,
  "timeTaken": 990,
  "changeHistory": [
    "75aa5f653b08995428743f6951a99ad101e73e37",
    "bbff7b87746d7ded975d0d122fc0e0c3485e5c5f",
    "25904fa3b61c1d6ef494dd7839eae1d1f49ff38d",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
    "5da32cba7b68d69acfc535f57f21d652475d256f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "75aa5f653b08995428743f6951a99ad101e73e37": "Ybodychange",
    "bbff7b87746d7ded975d0d122fc0e0c3485e5c5f": "Ybodychange",
    "25904fa3b61c1d6ef494dd7839eae1d1f49ff38d": "Ybodychange",
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": "Ybodychange",
    "5da32cba7b68d69acfc535f57f21d652475d256f": "Ymultichange(Yannotationchange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "75aa5f653b08995428743f6951a99ad101e73e37": {
      "type": "Ybodychange",
      "commitMessage": "\nCleanup obsolete handling of NUMBER keys of OBJECTLIT.\n\nR\u003dnicksantos\nDELTA\u003d109  (3 added, 48 deleted, 58 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1253\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@967 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/4/11, 2:40 PM",
      "commitName": "75aa5f653b08995428743f6951a99ad101e73e37",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/30/11, 7:59 AM",
      "commitNameOld": "8703ffc3c1e71d42a8a41932055a875bf428bf8d",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 5.28,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n            Node propNode \u003d n.getFirstChild().getNext();\n            if (propNode.getType() \u003d\u003d Token.STRING) {\n                maybeMarkCandidate(propNode);\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                if (!key.isQuotedString()) {\n                    maybeMarkCandidate(key);\n                } else {\n                    quotedNames.add(key.getString());\n                }\n            }\n            break;\n        case Token.GETELEM:\n            Node child \u003d n.getLastChild();\n            if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                quotedNames.add(child.getString());\n            }\n            break;\n        case Token.CALL:\n            Node fnName \u003d n.getFirstChild();\n            if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                callNodeToParentMap.put(n, parent);\n                countCallCandidates(t, n);\n            }\n            break;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionDeclaration(n)) {\n                String name \u003d n.getFirstChild().getString();\n                if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                    if (NodeUtil.isExpressionNode(parent)) {\n                        parent.detachFromParent();\n                    } else {\n                        parent.removeChild(n);\n                    }\n                    compiler.reportCodeChange();\n                }\n            } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                Node varNode \u003d parent.getParent();\n                if (varNode.getType() \u003d\u003d Token.VAR) {\n                    varNode.removeChild(parent);\n                    if (!varNode.hasChildren()) {\n                        varNode.detachFromParent();\n                    }\n                    compiler.reportCodeChange();\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 405,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,55 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.GETPROP:\n             Node propNode \u003d n.getFirstChild().getNext();\n             if (propNode.getType() \u003d\u003d Token.STRING) {\n                 maybeMarkCandidate(propNode);\n             }\n             break;\n         case Token.OBJECTLIT:\n             for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n-                if (key.getType() !\u003d Token.NUMBER) {\n-                    if (!key.isQuotedString()) {\n-                        maybeMarkCandidate(key);\n-                    } else {\n-                        quotedNames.add(key.getString());\n-                    }\n+                if (!key.isQuotedString()) {\n+                    maybeMarkCandidate(key);\n+                } else {\n+                    quotedNames.add(key.getString());\n                 }\n             }\n             break;\n         case Token.GETELEM:\n             Node child \u003d n.getLastChild();\n             if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                 quotedNames.add(child.getString());\n             }\n             break;\n         case Token.CALL:\n             Node fnName \u003d n.getFirstChild();\n             if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                 callNodeToParentMap.put(n, parent);\n                 countCallCandidates(t, n);\n             }\n             break;\n         case Token.FUNCTION:\n             if (NodeUtil.isFunctionDeclaration(n)) {\n                 String name \u003d n.getFirstChild().getString();\n                 if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                     if (NodeUtil.isExpressionNode(parent)) {\n                         parent.detachFromParent();\n                     } else {\n                         parent.removeChild(n);\n                     }\n                     compiler.reportCodeChange();\n                 }\n             } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                 Node varNode \u003d parent.getParent();\n                 if (varNode.getType() \u003d\u003d Token.VAR) {\n                     varNode.removeChild(parent);\n                     if (!varNode.hasChildren()) {\n                         varNode.detachFromParent();\n                     }\n                     compiler.reportCodeChange();\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bbff7b87746d7ded975d0d122fc0e0c3485e5c5f": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd get and set support to the property renaming passes.\n\nR\u003dnicksantos\nDELTA\u003d70  (58 added, 5 deleted, 7 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d122\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@624 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/13/10, 10:46 AM",
      "commitName": "bbff7b87746d7ded975d0d122fc0e0c3485e5c5f",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/12/10, 1:38 PM",
      "commitNameOld": "25904fa3b61c1d6ef494dd7839eae1d1f49ff38d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 30.88,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n            Node propNode \u003d n.getFirstChild().getNext();\n            if (propNode.getType() \u003d\u003d Token.STRING) {\n                maybeMarkCandidate(propNode);\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                if (key.getType() !\u003d Token.NUMBER) {\n                    if (!key.isQuotedString()) {\n                        maybeMarkCandidate(key);\n                    } else {\n                        quotedNames.add(key.getString());\n                    }\n                }\n            }\n            break;\n        case Token.GETELEM:\n            Node child \u003d n.getLastChild();\n            if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                quotedNames.add(child.getString());\n            }\n            break;\n        case Token.CALL:\n            Node fnName \u003d n.getFirstChild();\n            if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                callNodeToParentMap.put(n, parent);\n                countCallCandidates(t, n);\n            }\n            break;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionDeclaration(n)) {\n                String name \u003d n.getFirstChild().getString();\n                if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                    if (NodeUtil.isExpressionNode(parent)) {\n                        parent.detachFromParent();\n                    } else {\n                        parent.removeChild(n);\n                    }\n                    compiler.reportCodeChange();\n                }\n            } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                Node varNode \u003d parent.getParent();\n                if (varNode.getType() \u003d\u003d Token.VAR) {\n                    varNode.removeChild(parent);\n                    if (!varNode.hasChildren()) {\n                        varNode.detachFromParent();\n                    }\n                    compiler.reportCodeChange();\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 321,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,57 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.GETPROP:\n             Node propNode \u003d n.getFirstChild().getNext();\n             if (propNode.getType() \u003d\u003d Token.STRING) {\n                 maybeMarkCandidate(propNode);\n             }\n             break;\n         case Token.OBJECTLIT:\n             for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n-                if (key.getType() \u003d\u003d Token.STRING) {\n+                if (key.getType() !\u003d Token.NUMBER) {\n                     if (!key.isQuotedString()) {\n                         maybeMarkCandidate(key);\n                     } else {\n                         quotedNames.add(key.getString());\n                     }\n                 }\n             }\n             break;\n         case Token.GETELEM:\n             Node child \u003d n.getLastChild();\n             if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                 quotedNames.add(child.getString());\n             }\n             break;\n         case Token.CALL:\n             Node fnName \u003d n.getFirstChild();\n             if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                 callNodeToParentMap.put(n, parent);\n                 countCallCandidates(t, n);\n             }\n             break;\n         case Token.FUNCTION:\n             if (NodeUtil.isFunctionDeclaration(n)) {\n                 String name \u003d n.getFirstChild().getString();\n                 if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                     if (NodeUtil.isExpressionNode(parent)) {\n                         parent.detachFromParent();\n                     } else {\n                         parent.removeChild(n);\n                     }\n                     compiler.reportCodeChange();\n                 }\n             } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                 Node varNode \u003d parent.getParent();\n                 if (varNode.getType() \u003d\u003d Token.VAR) {\n                     varNode.removeChild(parent);\n                     if (!varNode.hasChildren()) {\n                         varNode.detachFromParent();\n                     }\n                     compiler.reportCodeChange();\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "25904fa3b61c1d6ef494dd7839eae1d1f49ff38d": {
      "type": "Ybodychange",
      "commitMessage": "\nSome eclipse warnings clean up.\n\nR\u003dnicksantos\nDELTA\u003d65  (4 added, 35 deleted, 26 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1190007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@550 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/12/10, 1:38 PM",
      "commitName": "25904fa3b61c1d6ef494dd7839eae1d1f49ff38d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.66,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n            Node propNode \u003d n.getFirstChild().getNext();\n            if (propNode.getType() \u003d\u003d Token.STRING) {\n                maybeMarkCandidate(propNode);\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                if (key.getType() \u003d\u003d Token.STRING) {\n                    if (!key.isQuotedString()) {\n                        maybeMarkCandidate(key);\n                    } else {\n                        quotedNames.add(key.getString());\n                    }\n                }\n            }\n            break;\n        case Token.GETELEM:\n            Node child \u003d n.getLastChild();\n            if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                quotedNames.add(child.getString());\n            }\n            break;\n        case Token.CALL:\n            Node fnName \u003d n.getFirstChild();\n            if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                callNodeToParentMap.put(n, parent);\n                countCallCandidates(t, n);\n            }\n            break;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionDeclaration(n)) {\n                String name \u003d n.getFirstChild().getString();\n                if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                    if (NodeUtil.isExpressionNode(parent)) {\n                        parent.detachFromParent();\n                    } else {\n                        parent.removeChild(n);\n                    }\n                    compiler.reportCodeChange();\n                }\n            } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                Node varNode \u003d parent.getParent();\n                if (varNode.getType() \u003d\u003d Token.VAR) {\n                    varNode.removeChild(parent);\n                    if (!varNode.hasChildren()) {\n                        varNode.detachFromParent();\n                    }\n                    compiler.reportCodeChange();\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 321,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,57 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.GETPROP:\n             Node propNode \u003d n.getFirstChild().getNext();\n             if (propNode.getType() \u003d\u003d Token.STRING) {\n-                maybeMarkCandidate(propNode, t);\n+                maybeMarkCandidate(propNode);\n             }\n             break;\n         case Token.OBJECTLIT:\n             for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                 if (key.getType() \u003d\u003d Token.STRING) {\n                     if (!key.isQuotedString()) {\n-                        maybeMarkCandidate(key, t);\n+                        maybeMarkCandidate(key);\n                     } else {\n                         quotedNames.add(key.getString());\n                     }\n                 }\n             }\n             break;\n         case Token.GETELEM:\n             Node child \u003d n.getLastChild();\n             if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                 quotedNames.add(child.getString());\n             }\n             break;\n         case Token.CALL:\n             Node fnName \u003d n.getFirstChild();\n             if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                 callNodeToParentMap.put(n, parent);\n                 countCallCandidates(t, n);\n             }\n             break;\n         case Token.FUNCTION:\n             if (NodeUtil.isFunctionDeclaration(n)) {\n                 String name \u003d n.getFirstChild().getString();\n                 if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                     if (NodeUtil.isExpressionNode(parent)) {\n                         parent.detachFromParent();\n                     } else {\n                         parent.removeChild(n);\n                     }\n                     compiler.reportCodeChange();\n                 }\n             } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                 Node varNode \u003d parent.getParent();\n                 if (varNode.getType() \u003d\u003d Token.VAR) {\n                     varNode.removeChild(parent);\n                     if (!varNode.hasChildren()) {\n                         varNode.detachFromParent();\n                     }\n                     compiler.reportCodeChange();\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42": {
      "type": "Ybodychange",
      "commitMessage": "\nChange the OBJECTLIT AST structure from:\n\nOBJECTLIT\n  KEY1\n  VALUE1\n\nto\n\nOBJECTLIT\n  KEY1\n    VALUE1\n\nFixes issue 241\n\nR\u003dacleung,johnlenz,stevey\nDELTA\u003d268  (101 added, 51 deleted, 116 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d356416\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@494 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/18/10, 2:55 PM",
      "commitName": "34fd5f8275ae69fc772c2283a3c5fd13b93a7c42",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/13/10, 11:12 AM",
      "commitNameOld": "4c6e1039b80859f17de5f3cbcfeba61ed8ea0485",
      "commitAuthorOld": "elbaum@google.com",
      "daysBetweenCommits": 35.15,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n            Node propNode \u003d n.getFirstChild().getNext();\n            if (propNode.getType() \u003d\u003d Token.STRING) {\n                maybeMarkCandidate(propNode, t);\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                if (key.getType() \u003d\u003d Token.STRING) {\n                    if (!key.isQuotedString()) {\n                        maybeMarkCandidate(key, t);\n                    } else {\n                        quotedNames.add(key.getString());\n                    }\n                }\n            }\n            break;\n        case Token.GETELEM:\n            Node child \u003d n.getLastChild();\n            if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                quotedNames.add(child.getString());\n            }\n            break;\n        case Token.CALL:\n            Node fnName \u003d n.getFirstChild();\n            if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                callNodeToParentMap.put(n, parent);\n                countCallCandidates(t, n);\n            }\n            break;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionDeclaration(n)) {\n                String name \u003d n.getFirstChild().getString();\n                if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                    if (NodeUtil.isExpressionNode(parent)) {\n                        parent.detachFromParent();\n                    } else {\n                        parent.removeChild(n);\n                    }\n                    compiler.reportCodeChange();\n                }\n            } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                Node varNode \u003d parent.getParent();\n                if (varNode.getType() \u003d\u003d Token.VAR) {\n                    varNode.removeChild(parent);\n                    if (!varNode.hasChildren()) {\n                        varNode.detachFromParent();\n                    }\n                    compiler.reportCodeChange();\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 321,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,57 +1,57 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.GETPROP:\n             Node propNode \u003d n.getFirstChild().getNext();\n             if (propNode.getType() \u003d\u003d Token.STRING) {\n                 maybeMarkCandidate(propNode, t);\n             }\n             break;\n         case Token.OBJECTLIT:\n-            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n+            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext()) {\n                 if (key.getType() \u003d\u003d Token.STRING) {\n                     if (!key.isQuotedString()) {\n                         maybeMarkCandidate(key, t);\n                     } else {\n                         quotedNames.add(key.getString());\n                     }\n                 }\n             }\n             break;\n         case Token.GETELEM:\n             Node child \u003d n.getLastChild();\n             if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                 quotedNames.add(child.getString());\n             }\n             break;\n         case Token.CALL:\n             Node fnName \u003d n.getFirstChild();\n             if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                 callNodeToParentMap.put(n, parent);\n                 countCallCandidates(t, n);\n             }\n             break;\n         case Token.FUNCTION:\n             if (NodeUtil.isFunctionDeclaration(n)) {\n                 String name \u003d n.getFirstChild().getString();\n                 if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                     if (NodeUtil.isExpressionNode(parent)) {\n                         parent.detachFromParent();\n                     } else {\n                         parent.removeChild(n);\n                     }\n                     compiler.reportCodeChange();\n                 }\n             } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                 Node varNode \u003d parent.getParent();\n                 if (varNode.getType() \u003d\u003d Token.VAR) {\n                     varNode.removeChild(parent);\n                     if (!varNode.hasChildren()) {\n                         varNode.detachFromParent();\n                     }\n                     compiler.reportCodeChange();\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5da32cba7b68d69acfc535f57f21d652475d256f": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/19/10, 4:28 PM",
      "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 166.98,
          "commitsBetweenForRepo": 161,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n            Node propNode \u003d n.getFirstChild().getNext();\n            if (propNode.getType() \u003d\u003d Token.STRING) {\n                maybeMarkCandidate(propNode, t);\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n                if (key.getType() \u003d\u003d Token.STRING) {\n                    if (!key.isQuotedString()) {\n                        maybeMarkCandidate(key, t);\n                    } else {\n                        quotedNames.add(key.getString());\n                    }\n                }\n            }\n            break;\n        case Token.GETELEM:\n            Node child \u003d n.getLastChild();\n            if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                quotedNames.add(child.getString());\n            }\n            break;\n        case Token.CALL:\n            Node fnName \u003d n.getFirstChild();\n            if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                callNodeToParentMap.put(n, parent);\n                countCallCandidates(t, n);\n            }\n            break;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionDeclaration(n)) {\n                String name \u003d n.getFirstChild().getString();\n                if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                    if (NodeUtil.isExpressionNode(parent)) {\n                        parent.detachFromParent();\n                    } else {\n                        parent.removeChild(n);\n                    }\n                    compiler.reportCodeChange();\n                }\n            } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                Node varNode \u003d parent.getParent();\n                if (varNode.getType() \u003d\u003d Token.VAR) {\n                    varNode.removeChild(parent);\n                    if (!varNode.hasChildren()) {\n                        varNode.detachFromParent();\n                    }\n                    compiler.reportCodeChange();\n                }\n            }\n            break;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/RenameProperties.java",
          "functionStartLine": 323,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,56 +1,57 @@\n+@Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.GETPROP:\n             Node propNode \u003d n.getFirstChild().getNext();\n             if (propNode.getType() \u003d\u003d Token.STRING) {\n                 maybeMarkCandidate(propNode, t);\n             }\n             break;\n         case Token.OBJECTLIT:\n             for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n                 if (key.getType() \u003d\u003d Token.STRING) {\n                     if (!key.isQuotedString()) {\n                         maybeMarkCandidate(key, t);\n                     } else {\n                         quotedNames.add(key.getString());\n                     }\n                 }\n             }\n             break;\n         case Token.GETELEM:\n             Node child \u003d n.getLastChild();\n             if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                 quotedNames.add(child.getString());\n             }\n             break;\n         case Token.CALL:\n             Node fnName \u003d n.getFirstChild();\n             if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                 callNodeToParentMap.put(n, parent);\n                 countCallCandidates(t, n);\n             }\n             break;\n         case Token.FUNCTION:\n             if (NodeUtil.isFunctionDeclaration(n)) {\n                 String name \u003d n.getFirstChild().getString();\n                 if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                     if (NodeUtil.isExpressionNode(parent)) {\n                         parent.detachFromParent();\n                     } else {\n                         parent.removeChild(n);\n                     }\n                     compiler.reportCodeChange();\n                 }\n             } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                 Node varNode \u003d parent.getParent();\n                 if (varNode.getType() \u003d\u003d Token.VAR) {\n                     varNode.removeChild(parent);\n                     if (!varNode.hasChildren()) {\n                         varNode.detachFromParent();\n                     }\n                     compiler.reportCodeChange();\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 166.98,
          "commitsBetweenForRepo": 161,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n            Node propNode \u003d n.getFirstChild().getNext();\n            if (propNode.getType() \u003d\u003d Token.STRING) {\n                maybeMarkCandidate(propNode, t);\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n                if (key.getType() \u003d\u003d Token.STRING) {\n                    if (!key.isQuotedString()) {\n                        maybeMarkCandidate(key, t);\n                    } else {\n                        quotedNames.add(key.getString());\n                    }\n                }\n            }\n            break;\n        case Token.GETELEM:\n            Node child \u003d n.getLastChild();\n            if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                quotedNames.add(child.getString());\n            }\n            break;\n        case Token.CALL:\n            Node fnName \u003d n.getFirstChild();\n            if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                callNodeToParentMap.put(n, parent);\n                countCallCandidates(t, n);\n            }\n            break;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionDeclaration(n)) {\n                String name \u003d n.getFirstChild().getString();\n                if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                    if (NodeUtil.isExpressionNode(parent)) {\n                        parent.detachFromParent();\n                    } else {\n                        parent.removeChild(n);\n                    }\n                    compiler.reportCodeChange();\n                }\n            } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                Node varNode \u003d parent.getParent();\n                if (varNode.getType() \u003d\u003d Token.VAR) {\n                    varNode.removeChild(parent);\n                    if (!varNode.hasChildren()) {\n                        varNode.detachFromParent();\n                    }\n                    compiler.reportCodeChange();\n                }\n            }\n            break;\n    }\n}",
          "path": "src/com/google/javascript/jscomp/RenameProperties.java",
          "functionStartLine": 323,
          "functionName": "visit",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,56 +1,57 @@\n+@Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.GETPROP:\n             Node propNode \u003d n.getFirstChild().getNext();\n             if (propNode.getType() \u003d\u003d Token.STRING) {\n                 maybeMarkCandidate(propNode, t);\n             }\n             break;\n         case Token.OBJECTLIT:\n             for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n                 if (key.getType() \u003d\u003d Token.STRING) {\n                     if (!key.isQuotedString()) {\n                         maybeMarkCandidate(key, t);\n                     } else {\n                         quotedNames.add(key.getString());\n                     }\n                 }\n             }\n             break;\n         case Token.GETELEM:\n             Node child \u003d n.getLastChild();\n             if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                 quotedNames.add(child.getString());\n             }\n             break;\n         case Token.CALL:\n             Node fnName \u003d n.getFirstChild();\n             if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                 callNodeToParentMap.put(n, parent);\n                 countCallCandidates(t, n);\n             }\n             break;\n         case Token.FUNCTION:\n             if (NodeUtil.isFunctionDeclaration(n)) {\n                 String name \u003d n.getFirstChild().getString();\n                 if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                     if (NodeUtil.isExpressionNode(parent)) {\n                         parent.detachFromParent();\n                     } else {\n                         parent.removeChild(n);\n                     }\n                     compiler.reportCodeChange();\n                 }\n             } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                 Node varNode \u003d parent.getParent();\n                 if (varNode.getType() \u003d\u003d Token.VAR) {\n                     varNode.removeChild(parent);\n                     if (!varNode.hasChildren()) {\n                         varNode.detachFromParent();\n                     }\n                     compiler.reportCodeChange();\n                 }\n             }\n             break;\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@inheritDoc}\n",
            "newValue": ""
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,56 @@\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    switch(n.getType()) {\n+        case Token.GETPROP:\n+            Node propNode \u003d n.getFirstChild().getNext();\n+            if (propNode.getType() \u003d\u003d Token.STRING) {\n+                maybeMarkCandidate(propNode, t);\n+            }\n+            break;\n+        case Token.OBJECTLIT:\n+            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n+                if (key.getType() \u003d\u003d Token.STRING) {\n+                    if (!key.isQuotedString()) {\n+                        maybeMarkCandidate(key, t);\n+                    } else {\n+                        quotedNames.add(key.getString());\n+                    }\n+                }\n+            }\n+            break;\n+        case Token.GETELEM:\n+            Node child \u003d n.getLastChild();\n+            if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n+                quotedNames.add(child.getString());\n+            }\n+            break;\n+        case Token.CALL:\n+            Node fnName \u003d n.getFirstChild();\n+            if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n+                callNodeToParentMap.put(n, parent);\n+                countCallCandidates(t, n);\n+            }\n+            break;\n+        case Token.FUNCTION:\n+            if (NodeUtil.isFunctionDeclaration(n)) {\n+                String name \u003d n.getFirstChild().getString();\n+                if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n+                    if (NodeUtil.isExpressionNode(parent)) {\n+                        parent.detachFromParent();\n+                    } else {\n+                        parent.removeChild(n);\n+                    }\n+                    compiler.reportCodeChange();\n+                }\n+            } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n+                Node varNode \u003d parent.getParent();\n+                if (varNode.getType() \u003d\u003d Token.VAR) {\n+                    varNode.removeChild(parent);\n+                    if (!varNode.hasChildren()) {\n+                        varNode.detachFromParent();\n+                    }\n+                    compiler.reportCodeChange();\n+                }\n+            }\n+            break;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.GETPROP:\n            Node propNode \u003d n.getFirstChild().getNext();\n            if (propNode.getType() \u003d\u003d Token.STRING) {\n                maybeMarkCandidate(propNode, t);\n            }\n            break;\n        case Token.OBJECTLIT:\n            for (Node key \u003d n.getFirstChild(); key !\u003d null; key \u003d key.getNext().getNext()) {\n                if (key.getType() \u003d\u003d Token.STRING) {\n                    if (!key.isQuotedString()) {\n                        maybeMarkCandidate(key, t);\n                    } else {\n                        quotedNames.add(key.getString());\n                    }\n                }\n            }\n            break;\n        case Token.GETELEM:\n            Node child \u003d n.getLastChild();\n            if (child !\u003d null \u0026\u0026 child.getType() \u003d\u003d Token.STRING) {\n                quotedNames.add(child.getString());\n            }\n            break;\n        case Token.CALL:\n            Node fnName \u003d n.getFirstChild();\n            if (fnName.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(fnName.getString())) {\n                callNodeToParentMap.put(n, parent);\n                countCallCandidates(t, n);\n            }\n            break;\n        case Token.FUNCTION:\n            if (NodeUtil.isFunctionDeclaration(n)) {\n                String name \u003d n.getFirstChild().getString();\n                if (RENAME_PROPERTY_FUNCTION_NAME.equals(name)) {\n                    if (NodeUtil.isExpressionNode(parent)) {\n                        parent.detachFromParent();\n                    } else {\n                        parent.removeChild(n);\n                    }\n                    compiler.reportCodeChange();\n                }\n            } else if (parent.getType() \u003d\u003d Token.NAME \u0026\u0026 RENAME_PROPERTY_FUNCTION_NAME.equals(parent.getString())) {\n                Node varNode \u003d parent.getParent();\n                if (varNode.getType() \u003d\u003d Token.VAR) {\n                    varNode.removeChild(parent);\n                    if (!varNode.hasChildren()) {\n                        varNode.detachFromParent();\n                    }\n                    compiler.reportCodeChange();\n                }\n            }\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 325,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n"
    }
  }
}