{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcessDefines.java",
  "functionName": "visit",
  "functionId": "$visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ProcessDefines.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 283,
  "functionEndLine": 367,
  "numCommitsSeen": 10,
  "timeTaken": 566,
  "changeHistory": [
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4": {
      "type": "Ybodychange",
      "commitMessage": "Remove circular dependency between error-reporting and the rest\nof the compiler. (Nick)\nR\u003dalan\nDELTA\u003d152  (27 added, 28 deleted, 97 changed)\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@159 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/10, 7:04 AM",
      "commitName": "3cc8b3a5889f8b88ef7a2bd0b8ccea8cb0d916c4",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/11/10, 9:31 PM",
      "commitNameOld": "7bfdbd9164601af44d17edd51be829fde2cc51aa",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 17.36,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    RefInfo refInfo \u003d allRefInfo.get(n);\n    if (refInfo !\u003d null) {\n        Ref ref \u003d refInfo.ref;\n        Name name \u003d refInfo.name;\n        String fullName \u003d name.fullName();\n        switch(ref.type) {\n            case SET_FROM_GLOBAL:\n            case SET_FROM_LOCAL:\n                Node valParent \u003d getValueParent(ref);\n                Node val \u003d valParent.getLastChild();\n                if (valParent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 name.isSimpleName() \u0026\u0026 name.declaration \u003d\u003d ref) {\n                    compiler.report(t.makeError(val, INVALID_DEFINE_INIT_ERROR, fullName));\n                } else if (processDefineAssignment(t, fullName, val, valParent)) {\n                    refInfo.name.removeRef(ref);\n                    lvalueToRemoveLater \u003d valParent;\n                }\n                break;\n            default:\n                if (t.inGlobalScope()) {\n                    DefineInfo info \u003d assignableDefines.get(fullName);\n                    if (info !\u003d null) {\n                        setDefineInfoNotAssignable(info, t);\n                        assignableDefines.remove(fullName);\n                    }\n                }\n                break;\n        }\n    }\n    if (!t.inGlobalScope() \u0026\u0026 n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isDefine()) {\n        compiler.report(t.makeError(n, NON_GLOBAL_DEFINE_INIT_ERROR, \"\"));\n    }\n    if (lvalueToRemoveLater \u003d\u003d n) {\n        lvalueToRemoveLater \u003d null;\n        if (n.getType() \u003d\u003d Token.ASSIGN) {\n            Node last \u003d n.getLastChild();\n            n.removeChild(last);\n            parent.replaceChild(n, last);\n        } else {\n            Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n            n.removeChild(n.getFirstChild());\n        }\n        compiler.reportCodeChange();\n    }\n    if (n.getType() \u003d\u003d Token.CALL) {\n        if (t.inGlobalScope()) {\n            for (DefineInfo info : assignableDefines.values()) {\n                setDefineInfoNotAssignable(info, t);\n            }\n            assignableDefines.clear();\n        }\n    }\n    updateAssignAllowedStack(n, false);\n}",
      "path": "src/com/google/javascript/jscomp/ProcessDefines.java",
      "functionStartLine": 247,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,54 +1,54 @@\n public void visit(NodeTraversal t, Node n, Node parent) {\n     RefInfo refInfo \u003d allRefInfo.get(n);\n     if (refInfo !\u003d null) {\n         Ref ref \u003d refInfo.ref;\n         Name name \u003d refInfo.name;\n         String fullName \u003d name.fullName();\n         switch(ref.type) {\n             case SET_FROM_GLOBAL:\n             case SET_FROM_LOCAL:\n                 Node valParent \u003d getValueParent(ref);\n                 Node val \u003d valParent.getLastChild();\n                 if (valParent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 name.isSimpleName() \u0026\u0026 name.declaration \u003d\u003d ref) {\n-                    compiler.report(JSError.make(t, val, INVALID_DEFINE_INIT_ERROR, fullName));\n+                    compiler.report(t.makeError(val, INVALID_DEFINE_INIT_ERROR, fullName));\n                 } else if (processDefineAssignment(t, fullName, val, valParent)) {\n                     refInfo.name.removeRef(ref);\n                     lvalueToRemoveLater \u003d valParent;\n                 }\n                 break;\n             default:\n                 if (t.inGlobalScope()) {\n                     DefineInfo info \u003d assignableDefines.get(fullName);\n                     if (info !\u003d null) {\n                         setDefineInfoNotAssignable(info, t);\n                         assignableDefines.remove(fullName);\n                     }\n                 }\n                 break;\n         }\n     }\n     if (!t.inGlobalScope() \u0026\u0026 n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isDefine()) {\n-        compiler.report(JSError.make(t, n, NON_GLOBAL_DEFINE_INIT_ERROR, \"\"));\n+        compiler.report(t.makeError(n, NON_GLOBAL_DEFINE_INIT_ERROR, \"\"));\n     }\n     if (lvalueToRemoveLater \u003d\u003d n) {\n         lvalueToRemoveLater \u003d null;\n         if (n.getType() \u003d\u003d Token.ASSIGN) {\n             Node last \u003d n.getLastChild();\n             n.removeChild(last);\n             parent.replaceChild(n, last);\n         } else {\n             Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n             n.removeChild(n.getFirstChild());\n         }\n         compiler.reportCodeChange();\n     }\n     if (n.getType() \u003d\u003d Token.CALL) {\n         if (t.inGlobalScope()) {\n             for (DefineInfo info : assignableDefines.values()) {\n                 setDefineInfoNotAssignable(info, t);\n             }\n             assignableDefines.clear();\n         }\n     }\n     updateAssignAllowedStack(n, false);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,54 @@\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    RefInfo refInfo \u003d allRefInfo.get(n);\n+    if (refInfo !\u003d null) {\n+        Ref ref \u003d refInfo.ref;\n+        Name name \u003d refInfo.name;\n+        String fullName \u003d name.fullName();\n+        switch(ref.type) {\n+            case SET_FROM_GLOBAL:\n+            case SET_FROM_LOCAL:\n+                Node valParent \u003d getValueParent(ref);\n+                Node val \u003d valParent.getLastChild();\n+                if (valParent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 name.isSimpleName() \u0026\u0026 name.declaration \u003d\u003d ref) {\n+                    compiler.report(JSError.make(t, val, INVALID_DEFINE_INIT_ERROR, fullName));\n+                } else if (processDefineAssignment(t, fullName, val, valParent)) {\n+                    refInfo.name.removeRef(ref);\n+                    lvalueToRemoveLater \u003d valParent;\n+                }\n+                break;\n+            default:\n+                if (t.inGlobalScope()) {\n+                    DefineInfo info \u003d assignableDefines.get(fullName);\n+                    if (info !\u003d null) {\n+                        setDefineInfoNotAssignable(info, t);\n+                        assignableDefines.remove(fullName);\n+                    }\n+                }\n+                break;\n+        }\n+    }\n+    if (!t.inGlobalScope() \u0026\u0026 n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isDefine()) {\n+        compiler.report(JSError.make(t, n, NON_GLOBAL_DEFINE_INIT_ERROR, \"\"));\n+    }\n+    if (lvalueToRemoveLater \u003d\u003d n) {\n+        lvalueToRemoveLater \u003d null;\n+        if (n.getType() \u003d\u003d Token.ASSIGN) {\n+            Node last \u003d n.getLastChild();\n+            n.removeChild(last);\n+            parent.replaceChild(n, last);\n+        } else {\n+            Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n+            n.removeChild(n.getFirstChild());\n+        }\n+        compiler.reportCodeChange();\n+    }\n+    if (n.getType() \u003d\u003d Token.CALL) {\n+        if (t.inGlobalScope()) {\n+            for (DefineInfo info : assignableDefines.values()) {\n+                setDefineInfoNotAssignable(info, t);\n+            }\n+            assignableDefines.clear();\n+        }\n+    }\n+    updateAssignAllowedStack(n, false);\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void visit(NodeTraversal t, Node n, Node parent) {\n    RefInfo refInfo \u003d allRefInfo.get(n);\n    if (refInfo !\u003d null) {\n        Ref ref \u003d refInfo.ref;\n        Name name \u003d refInfo.name;\n        String fullName \u003d name.fullName();\n        switch(ref.type) {\n            case SET_FROM_GLOBAL:\n            case SET_FROM_LOCAL:\n                Node valParent \u003d getValueParent(ref);\n                Node val \u003d valParent.getLastChild();\n                if (valParent.getType() \u003d\u003d Token.ASSIGN \u0026\u0026 name.isSimpleName() \u0026\u0026 name.declaration \u003d\u003d ref) {\n                    compiler.report(JSError.make(t, val, INVALID_DEFINE_INIT_ERROR, fullName));\n                } else if (processDefineAssignment(t, fullName, val, valParent)) {\n                    refInfo.name.removeRef(ref);\n                    lvalueToRemoveLater \u003d valParent;\n                }\n                break;\n            default:\n                if (t.inGlobalScope()) {\n                    DefineInfo info \u003d assignableDefines.get(fullName);\n                    if (info !\u003d null) {\n                        setDefineInfoNotAssignable(info, t);\n                        assignableDefines.remove(fullName);\n                    }\n                }\n                break;\n        }\n    }\n    if (!t.inGlobalScope() \u0026\u0026 n.getJSDocInfo() !\u003d null \u0026\u0026 n.getJSDocInfo().isDefine()) {\n        compiler.report(JSError.make(t, n, NON_GLOBAL_DEFINE_INIT_ERROR, \"\"));\n    }\n    if (lvalueToRemoveLater \u003d\u003d n) {\n        lvalueToRemoveLater \u003d null;\n        if (n.getType() \u003d\u003d Token.ASSIGN) {\n            Node last \u003d n.getLastChild();\n            n.removeChild(last);\n            parent.replaceChild(n, last);\n        } else {\n            Preconditions.checkState(n.getType() \u003d\u003d Token.NAME);\n            n.removeChild(n.getFirstChild());\n        }\n        compiler.reportCodeChange();\n    }\n    if (n.getType() \u003d\u003d Token.CALL) {\n        if (t.inGlobalScope()) {\n            for (DefineInfo info : assignableDefines.values()) {\n                setDefineInfoNotAssignable(info, t);\n            }\n            assignableDefines.clear();\n        }\n    }\n    updateAssignAllowedStack(n, false);\n}",
      "path": "src/com/google/javascript/jscomp/ProcessDefines.java",
      "functionStartLine": 248,
      "functionName": "visit",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}