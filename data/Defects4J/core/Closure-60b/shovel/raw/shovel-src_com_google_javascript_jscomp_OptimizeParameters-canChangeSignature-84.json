{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OptimizeParameters.java",
  "functionName": "canChangeSignature",
  "functionId": "canChangeSignature___definitionSite-DefinitionSite__defFinder-SimpleDefinitionFinder",
  "sourceFilePath": "src/com/google/javascript/jscomp/OptimizeParameters.java",
  "functionAnnotation": "",
  "functionDoc": "\n@return Whether the definitionSite represents a function whose call\n     signature can be modified.\n",
  "functionStartLine": 84,
  "functionEndLine": 146,
  "numCommitsSeen": 21,
  "timeTaken": 1092,
  "changeHistory": [
    "77063ce89ab93f9778c34804a992079c672d8ba5",
    "6a4bafed443e5365d8580ac18af603e7d250fe2d",
    "73f98ee988dad825ba8320bf4d8df0413fde531c",
    "4c6f8d4352bb3b3f631d74559d5ac8f23f9fcd32"
  ],
  "changeHistoryShort": {
    "77063ce89ab93f9778c34804a992079c672d8ba5": "Ybodychange",
    "6a4bafed443e5365d8580ac18af603e7d250fe2d": "Ybodychange",
    "73f98ee988dad825ba8320bf4d8df0413fde531c": "Ybodychange",
    "4c6f8d4352bb3b3f631d74559d5ac8f23f9fcd32": "Yintroduced"
  },
  "changeHistoryDetails": {
    "77063ce89ab93f9778c34804a992079c672d8ba5": {
      "type": "Ybodychange",
      "commitMessage": "\nMove reflection-detecting code into SimpleDefinitionFinder\n\nR\u003djohnlenz\nDELTA\u003d115  (62 added, 45 deleted, 8 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1508\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1025 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/20/11, 8:16 AM",
      "commitName": "77063ce89ab93f9778c34804a992079c672d8ba5",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 7.83,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canChangeSignature(DefinitionSite definitionSite, SimpleDefinitionFinder defFinder) {\n    Definition definition \u003d definitionSite.definition;\n    if (definitionSite.inExterns) {\n        return false;\n    }\n    Node rValue \u003d definition.getRValue();\n    if (rValue \u003d\u003d null || !NodeUtil.isFunction(rValue) || NodeUtil.isVarArgsFunction(rValue)) {\n        return false;\n    }\n    if (!SimpleDefinitionFinder.isSimpleFunctionDeclaration(rValue)) {\n        return false;\n    }\n    if (!defFinder.canModifyDefinition(definition)) {\n        return false;\n    }\n    Collection\u003cUseSite\u003e useSites \u003d defFinder.getUseSites(definition);\n    if (useSites.isEmpty()) {\n        return false;\n    }\n    for (UseSite site : useSites) {\n        if (!SimpleDefinitionFinder.isCallOrNewSite(site)) {\n            return false;\n        }\n        Node nameNode \u003d site.node;\n        Collection\u003cDefinition\u003e singleSiteDefinitions \u003d defFinder.getDefinitionsReferencedAt(nameNode);\n        if (singleSiteDefinitions.size() \u003e 1) {\n            return false;\n        }\n        Preconditions.checkState(!singleSiteDefinitions.isEmpty());\n        Preconditions.checkState(singleSiteDefinitions.contains(definition));\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
      "functionStartLine": 84,
      "functionName": "canChangeSignature",
      "functionAnnotation": "",
      "functionDoc": "\n@return Whether the definitionSite represents a function whose call\n     signature can be modified.\n",
      "diff": "@@ -1,33 +1,33 @@\n private boolean canChangeSignature(DefinitionSite definitionSite, SimpleDefinitionFinder defFinder) {\n     Definition definition \u003d definitionSite.definition;\n     if (definitionSite.inExterns) {\n         return false;\n     }\n     Node rValue \u003d definition.getRValue();\n     if (rValue \u003d\u003d null || !NodeUtil.isFunction(rValue) || NodeUtil.isVarArgsFunction(rValue)) {\n         return false;\n     }\n     if (!SimpleDefinitionFinder.isSimpleFunctionDeclaration(rValue)) {\n         return false;\n     }\n-    if (SimpleDefinitionFinder.maybeExported(compiler, definition)) {\n+    if (!defFinder.canModifyDefinition(definition)) {\n         return false;\n     }\n     Collection\u003cUseSite\u003e useSites \u003d defFinder.getUseSites(definition);\n     if (useSites.isEmpty()) {\n         return false;\n     }\n     for (UseSite site : useSites) {\n         if (!SimpleDefinitionFinder.isCallOrNewSite(site)) {\n             return false;\n         }\n         Node nameNode \u003d site.node;\n         Collection\u003cDefinition\u003e singleSiteDefinitions \u003d defFinder.getDefinitionsReferencedAt(nameNode);\n         if (singleSiteDefinitions.size() \u003e 1) {\n             return false;\n         }\n         Preconditions.checkState(!singleSiteDefinitions.isEmpty());\n         Preconditions.checkState(singleSiteDefinitions.contains(definition));\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a4bafed443e5365d8580ac18af603e7d250fe2d": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd some unit tests.\n\nR\u003dacleung\nDELTA\u003d26  (24 added, 1 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d24\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@574 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/30/10, 9:17 AM",
      "commitName": "6a4bafed443e5365d8580ac18af603e7d250fe2d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/29/10, 10:09 AM",
      "commitNameOld": "73f98ee988dad825ba8320bf4d8df0413fde531c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canChangeSignature(DefinitionSite definitionSite, SimpleDefinitionFinder defFinder) {\n    Definition definition \u003d definitionSite.definition;\n    if (definitionSite.inExterns) {\n        return false;\n    }\n    Node rValue \u003d definition.getRValue();\n    if (rValue \u003d\u003d null || !NodeUtil.isFunction(rValue) || NodeUtil.isVarArgsFunction(rValue)) {\n        return false;\n    }\n    if (!SimpleDefinitionFinder.isSimpleFunctionDeclaration(rValue)) {\n        return false;\n    }\n    if (SimpleDefinitionFinder.maybeExported(compiler, definition)) {\n        return false;\n    }\n    Collection\u003cUseSite\u003e useSites \u003d defFinder.getUseSites(definition);\n    if (useSites.isEmpty()) {\n        return false;\n    }\n    for (UseSite site : useSites) {\n        if (!SimpleDefinitionFinder.isCallOrNewSite(site)) {\n            return false;\n        }\n        Node nameNode \u003d site.node;\n        Collection\u003cDefinition\u003e singleSiteDefinitions \u003d defFinder.getDefinitionsReferencedAt(nameNode);\n        if (singleSiteDefinitions.size() \u003e 1) {\n            return false;\n        }\n        Preconditions.checkState(!singleSiteDefinitions.isEmpty());\n        Preconditions.checkState(singleSiteDefinitions.contains(definition));\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
      "functionStartLine": 78,
      "functionName": "canChangeSignature",
      "functionAnnotation": "",
      "functionDoc": "\n@return Whether the definitionSite represents a function whose call\n     signature can be modified.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "73f98ee988dad825ba8320bf4d8df0413fde531c": {
      "type": "Ybodychange",
      "commitMessage": "\nLay the groundwork for the my next call optimization.\n\nR\u003dacleung\nDELTA\u003d428  (267 added, 117 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@570 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/29/10, 10:09 AM",
      "commitName": "73f98ee988dad825ba8320bf4d8df0413fde531c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/12/10, 3:38 PM",
      "commitNameOld": "4c6f8d4352bb3b3f631d74559d5ac8f23f9fcd32",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 16.77,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "actualSource": "private boolean canChangeSignature(DefinitionSite definitionSite, SimpleDefinitionFinder defFinder) {\n    Definition definition \u003d definitionSite.definition;\n    if (definitionSite.inExterns) {\n        return false;\n    }\n    Node rValue \u003d definition.getRValue();\n    if (rValue \u003d\u003d null || !NodeUtil.isFunction(rValue) || NodeUtil.isVarArgsFunction(rValue)) {\n        return false;\n    }\n    if (!SimpleDefinitionFinder.isSimpleFunctionDeclaration(rValue)) {\n        return false;\n    }\n    if (SimpleDefinitionFinder.maybeExported(compiler, definition)) {\n        return false;\n    }\n    Collection\u003cUseSite\u003e useSites \u003d defFinder.getUseSites(definition);\n    if (useSites.isEmpty()) {\n        return false;\n    }\n    for (UseSite site : useSites) {\n        if (!SimpleDefinitionFinder.isCallOrNewSite(site)) {\n            return false;\n        }\n        Node nameNode \u003d site.node;\n        Collection\u003cDefinition\u003e singleSiteDefinitions \u003d defFinder.getDefinitionsReferencedAt(nameNode);\n        if (singleSiteDefinitions.size() \u003e 1) {\n            return false;\n        }\n        Preconditions.checkState(!singleSiteDefinitions.isEmpty());\n        Preconditions.checkState(singleSiteDefinitions.contains(definition));\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
      "functionStartLine": 78,
      "functionName": "canChangeSignature",
      "functionAnnotation": "",
      "functionDoc": "\n@return Whether the definitionSite represents a function whose call\n     signature can be modified.\n",
      "diff": "@@ -1,33 +1,33 @@\n private boolean canChangeSignature(DefinitionSite definitionSite, SimpleDefinitionFinder defFinder) {\n     Definition definition \u003d definitionSite.definition;\n     if (definitionSite.inExterns) {\n         return false;\n     }\n     Node rValue \u003d definition.getRValue();\n     if (rValue \u003d\u003d null || !NodeUtil.isFunction(rValue) || NodeUtil.isVarArgsFunction(rValue)) {\n         return false;\n     }\n-    if (!OptimizeReturns.isSimpleFunctionDeclaration(rValue)) {\n+    if (!SimpleDefinitionFinder.isSimpleFunctionDeclaration(rValue)) {\n         return false;\n     }\n-    if (OptimizeReturns.maybeExported(compiler, definition)) {\n+    if (SimpleDefinitionFinder.maybeExported(compiler, definition)) {\n         return false;\n     }\n     Collection\u003cUseSite\u003e useSites \u003d defFinder.getUseSites(definition);\n     if (useSites.isEmpty()) {\n         return false;\n     }\n     for (UseSite site : useSites) {\n-        if (!isCallSite(site.node)) {\n+        if (!SimpleDefinitionFinder.isCallOrNewSite(site)) {\n             return false;\n         }\n         Node nameNode \u003d site.node;\n         Collection\u003cDefinition\u003e singleSiteDefinitions \u003d defFinder.getDefinitionsReferencedAt(nameNode);\n         if (singleSiteDefinitions.size() \u003e 1) {\n             return false;\n         }\n         Preconditions.checkState(!singleSiteDefinitions.isEmpty());\n         Preconditions.checkState(singleSiteDefinitions.contains(definition));\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4c6f8d4352bb3b3f631d74559d5ac8f23f9fcd32": {
      "type": "Yintroduced",
      "commitMessage": "\nChange optimize parameters to use the simple definition finder.\n\nR\u003dacleung\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1188240\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@552 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/12/10, 3:38 PM",
      "commitName": "4c6f8d4352bb3b3f631d74559d5ac8f23f9fcd32",
      "commitAuthor": "johnlenz@google.com",
      "diff": "@@ -0,0 +1,33 @@\n+private boolean canChangeSignature(DefinitionSite definitionSite, SimpleDefinitionFinder defFinder) {\n+    Definition definition \u003d definitionSite.definition;\n+    if (definitionSite.inExterns) {\n+        return false;\n+    }\n+    Node rValue \u003d definition.getRValue();\n+    if (rValue \u003d\u003d null || !NodeUtil.isFunction(rValue) || NodeUtil.isVarArgsFunction(rValue)) {\n+        return false;\n+    }\n+    if (!OptimizeReturns.isSimpleFunctionDeclaration(rValue)) {\n+        return false;\n+    }\n+    if (OptimizeReturns.maybeExported(compiler, definition)) {\n+        return false;\n+    }\n+    Collection\u003cUseSite\u003e useSites \u003d defFinder.getUseSites(definition);\n+    if (useSites.isEmpty()) {\n+        return false;\n+    }\n+    for (UseSite site : useSites) {\n+        if (!isCallSite(site.node)) {\n+            return false;\n+        }\n+        Node nameNode \u003d site.node;\n+        Collection\u003cDefinition\u003e singleSiteDefinitions \u003d defFinder.getDefinitionsReferencedAt(nameNode);\n+        if (singleSiteDefinitions.size() \u003e 1) {\n+            return false;\n+        }\n+        Preconditions.checkState(!singleSiteDefinitions.isEmpty());\n+        Preconditions.checkState(singleSiteDefinitions.contains(definition));\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private boolean canChangeSignature(DefinitionSite definitionSite, SimpleDefinitionFinder defFinder) {\n    Definition definition \u003d definitionSite.definition;\n    if (definitionSite.inExterns) {\n        return false;\n    }\n    Node rValue \u003d definition.getRValue();\n    if (rValue \u003d\u003d null || !NodeUtil.isFunction(rValue) || NodeUtil.isVarArgsFunction(rValue)) {\n        return false;\n    }\n    if (!OptimizeReturns.isSimpleFunctionDeclaration(rValue)) {\n        return false;\n    }\n    if (OptimizeReturns.maybeExported(compiler, definition)) {\n        return false;\n    }\n    Collection\u003cUseSite\u003e useSites \u003d defFinder.getUseSites(definition);\n    if (useSites.isEmpty()) {\n        return false;\n    }\n    for (UseSite site : useSites) {\n        if (!isCallSite(site.node)) {\n            return false;\n        }\n        Node nameNode \u003d site.node;\n        Collection\u003cDefinition\u003e singleSiteDefinitions \u003d defFinder.getDefinitionsReferencedAt(nameNode);\n        if (singleSiteDefinitions.size() \u003e 1) {\n            return false;\n        }\n        Preconditions.checkState(!singleSiteDefinitions.isEmpty());\n        Preconditions.checkState(singleSiteDefinitions.contains(definition));\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/OptimizeParameters.java",
      "functionStartLine": 77,
      "functionName": "canChangeSignature",
      "functionAnnotation": "",
      "functionDoc": "\n@return Whether the definitionSite represents a function whose call\n     signature can be modified.\n"
    }
  }
}