{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeUtil.java",
  "functionName": "isFunctionExpression",
  "functionId": "isFunctionExpression___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/NodeUtil.java",
  "functionAnnotation": "",
  "functionDoc": "Is a FUNCTION node an function expression? An function expression is one\nthat has either no name or a name that is not added to the current scope.\n\n\u003cp\u003eSome examples of function expressions:\n\u003cpre\u003e\n(function () {})\n(function f() {})()\n[ function f() {} ]\nvar f \u003d function f() {};\nfor (function f() {};;) {}\n\u003c/pre\u003e\n\n\u003cp\u003eSome examples of functions that are \u003cem\u003enot\u003c/em\u003e expressions:\n\u003cpre\u003e\nfunction f() {}\nif (x); else function f() {}\nfor (;;) { function f() {} }\n\u003c/pre\u003e\n\n@param n A node\n@return Whether n is an function used within an expression.\n",
  "functionStartLine": 1925,
  "functionEndLine": 1927,
  "numCommitsSeen": 115,
  "timeTaken": 7836,
  "changeHistory": [
    "ebb59a97610015bc41bda7f458dd1428a3a3e335",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ebb59a97610015bc41bda7f458dd1428a3a3e335": {
      "type": "Ymultichange(Yrename,Ybodychange,Ydocchange)",
      "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/23/10, 11:31 AM",
      "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/23/10, 11:31 AM",
          "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/16/10, 10:20 AM",
          "commitNameOld": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 7.05,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean isFunctionExpression(Node n) {\n    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 !isStatement(n);\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 1231,
          "functionName": "isFunctionExpression",
          "functionAnnotation": "",
          "functionDoc": "Is a FUNCTION node an function expression? An function expression is one\nthat has either no name or a name that is not added to the current scope.\n\n\u003cp\u003eSome examples of function expressions:\n\u003cpre\u003e\n(function () {})\n(function f() {})()\n[ function f() {} ]\nvar f \u003d function f() {};\nfor (function f() {};;) {}\n\u003c/pre\u003e\n\n\u003cp\u003eSome examples of functions that are \u003cem\u003enot\u003c/em\u003e expressions:\n\u003cpre\u003e\nfunction f() {}\nif (x); else function f() {}\nfor (;;) { function f() {} }\n\u003c/pre\u003e\n\n@param n A node\n@return Whether n is an function used within an expression.\n",
          "diff": "@@ -1,3 +1,3 @@\n-static boolean isAnonymousFunction(Node n) {\n-    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 isFunctionAnonymous(n);\n+static boolean isFunctionExpression(Node n) {\n+    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 !isStatement(n);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "isAnonymousFunction",
            "newValue": "isFunctionExpression"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/23/10, 11:31 AM",
          "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/16/10, 10:20 AM",
          "commitNameOld": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 7.05,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean isFunctionExpression(Node n) {\n    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 !isStatement(n);\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 1231,
          "functionName": "isFunctionExpression",
          "functionAnnotation": "",
          "functionDoc": "Is a FUNCTION node an function expression? An function expression is one\nthat has either no name or a name that is not added to the current scope.\n\n\u003cp\u003eSome examples of function expressions:\n\u003cpre\u003e\n(function () {})\n(function f() {})()\n[ function f() {} ]\nvar f \u003d function f() {};\nfor (function f() {};;) {}\n\u003c/pre\u003e\n\n\u003cp\u003eSome examples of functions that are \u003cem\u003enot\u003c/em\u003e expressions:\n\u003cpre\u003e\nfunction f() {}\nif (x); else function f() {}\nfor (;;) { function f() {} }\n\u003c/pre\u003e\n\n@param n A node\n@return Whether n is an function used within an expression.\n",
          "diff": "@@ -1,3 +1,3 @@\n-static boolean isAnonymousFunction(Node n) {\n-    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 isFunctionAnonymous(n);\n+static boolean isFunctionExpression(Node n) {\n+    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 !isStatement(n);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/04/22 by nick\n\n        fix the extern definition of Window.prototype.stop\n\n        R\u003dsiggy\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/04/22 by john\n\n        \"Anonymous function\" is a confusing term for functions with names.\n        Properly we are usually distinguishing between functions statements\n        (function declarations) and function expressions.\n\n        R\u003dalan\n        DELTA\u003d172  (7 added, 14 deleted, 151 changed)\n\nChange on 2010/04/22 by john\n\n        Standardize the definition of setTimeout/setInterval.\n        Fix for Issue 137\n\n        R\u003dnick\n        DELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\nChange on 2010/04/22 by mark\n\n        Various delegate fixes.\n\n        Give the delegate proxy a name unique from the delegate base so that\n        InstanceObjectType#equals distinguishes them. This is necessary for\n        AmbiguateProperties to work.\n\n        Fix the prototype of the delegate proxy. This makes\n        DisambiguateProperties continue to work.\n\n        Add superclass methods of the delegate base to the delegate proxy.\n\n\n        R\u003dandrew,nada\n        DELTA\u003d526  (383 added, 104 deleted, 39 changed)\n\nChange on 2010/04/23 by john\n\n        Allow variable inlining of function statements. For simplicity  limited to functions defined before first use.\n\n        R\u003dnick\n        DELTA\u003d79  (49 added, 3 deleted, 27 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dhakjvx\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/23/10, 11:31 AM",
          "commitName": "ebb59a97610015bc41bda7f458dd1428a3a3e335",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "4/16/10, 10:20 AM",
          "commitNameOld": "6e3eb4f7619179ba6c23db2af7549ef02f588c35",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 7.05,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "actualSource": "static boolean isFunctionExpression(Node n) {\n    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 !isStatement(n);\n}",
          "path": "src/com/google/javascript/jscomp/NodeUtil.java",
          "functionStartLine": 1231,
          "functionName": "isFunctionExpression",
          "functionAnnotation": "",
          "functionDoc": "Is a FUNCTION node an function expression? An function expression is one\nthat has either no name or a name that is not added to the current scope.\n\n\u003cp\u003eSome examples of function expressions:\n\u003cpre\u003e\n(function () {})\n(function f() {})()\n[ function f() {} ]\nvar f \u003d function f() {};\nfor (function f() {};;) {}\n\u003c/pre\u003e\n\n\u003cp\u003eSome examples of functions that are \u003cem\u003enot\u003c/em\u003e expressions:\n\u003cpre\u003e\nfunction f() {}\nif (x); else function f() {}\nfor (;;) { function f() {} }\n\u003c/pre\u003e\n\n@param n A node\n@return Whether n is an function used within an expression.\n",
          "diff": "@@ -1,3 +1,3 @@\n-static boolean isAnonymousFunction(Node n) {\n-    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 isFunctionAnonymous(n);\n+static boolean isFunctionExpression(Node n) {\n+    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 !isStatement(n);\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "Is this node an anonymous function? An anonymous function is one that has\neither no name or a name that is not added to the current scope (see\n{@link #isFunctionAnonymous}).\n",
            "newValue": "Is a FUNCTION node an function expression? An function expression is one\nthat has either no name or a name that is not added to the current scope.\n\n\u003cp\u003eSome examples of function expressions:\n\u003cpre\u003e\n(function () {})\n(function f() {})()\n[ function f() {} ]\nvar f \u003d function f() {};\nfor (function f() {};;) {}\n\u003c/pre\u003e\n\n\u003cp\u003eSome examples of functions that are \u003cem\u003enot\u003c/em\u003e expressions:\n\u003cpre\u003e\nfunction f() {}\nif (x); else function f() {}\nfor (;;) { function f() {} }\n\u003c/pre\u003e\n\n@param n A node\n@return Whether n is an function used within an expression.\n"
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,3 @@\n+static boolean isAnonymousFunction(Node n) {\n+    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 isFunctionAnonymous(n);\n+}\n\\ No newline at end of file\n",
      "actualSource": "static boolean isAnonymousFunction(Node n) {\n    return n.getType() \u003d\u003d Token.FUNCTION \u0026\u0026 isFunctionAnonymous(n);\n}",
      "path": "src/com/google/javascript/jscomp/NodeUtil.java",
      "functionStartLine": 1167,
      "functionName": "isAnonymousFunction",
      "functionAnnotation": "",
      "functionDoc": "Is this node an anonymous function? An anonymous function is one that has\neither no name or a name that is not added to the current scope (see\n{@link #isFunctionAnonymous}).\n"
    }
  }
}