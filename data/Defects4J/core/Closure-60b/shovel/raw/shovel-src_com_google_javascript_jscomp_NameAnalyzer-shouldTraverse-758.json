{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameAnalyzer.java",
  "functionName": "shouldTraverse",
  "functionId": "$shouldTraverse___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/NameAnalyzer.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 758,
  "functionEndLine": 804,
  "numCommitsSeen": 28,
  "timeTaken": 2085,
  "changeHistory": [
    "95876c343fb7e628978397bc8311f1b3788e28f2",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "95876c343fb7e628978397bc8311f1b3788e28f2": "Ybodychange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95876c343fb7e628978397bc8311f1b3788e28f2": {
      "type": "Ybodychange",
      "commitMessage": "\nFix smart name removal handling of \"throw\" statements in global scope.\n\nR\u003dacleung\nDELTA\u003d14  (13 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d716\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@839 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/1/11, 3:41 PM",
      "commitName": "95876c343fb7e628978397bc8311f1b3788e28f2",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "2/28/11, 9:30 AM",
      "commitNameOld": "5f8de0b972f1c3c359ee7a0441729691105a3d62",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 1.26,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return true;\n    }\n    if (n.getType() \u003d\u003d Token.FOR) {\n        if (!NodeUtil.isForIn(n)) {\n            Node decl \u003d n.getFirstChild();\n            Node pred \u003d decl.getNext();\n            Node step \u003d pred.getNext();\n            addSimplifiedExpression(decl, n);\n            addSimplifiedExpression(pred, n);\n            addSimplifiedExpression(step, n);\n        } else {\n            Node decl \u003d n.getFirstChild();\n            Node iter \u003d decl.getNext();\n            addAllChildren(decl);\n            addAllChildren(iter);\n        }\n    }\n    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.EXPR_RESULT || parent.getType() \u003d\u003d Token.RETURN || parent.getType() \u003d\u003d Token.THROW) {\n        addSimplifiedExpression(n, parent);\n    }\n    if ((parent.getType() \u003d\u003d Token.IF || parent.getType() \u003d\u003d Token.WHILE || parent.getType() \u003d\u003d Token.WITH || parent.getType() \u003d\u003d Token.SWITCH || parent.getType() \u003d\u003d Token.CASE) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        addAllChildren(n);\n    }\n    if (parent.getType() \u003d\u003d Token.DO \u0026\u0026 parent.getLastChild() \u003d\u003d n) {\n        addAllChildren(n);\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
      "functionStartLine": 743,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (parent \u003d\u003d null) {\n         return true;\n     }\n     if (n.getType() \u003d\u003d Token.FOR) {\n         if (!NodeUtil.isForIn(n)) {\n             Node decl \u003d n.getFirstChild();\n             Node pred \u003d decl.getNext();\n             Node step \u003d pred.getNext();\n             addSimplifiedExpression(decl, n);\n             addSimplifiedExpression(pred, n);\n             addSimplifiedExpression(step, n);\n         } else {\n             Node decl \u003d n.getFirstChild();\n             Node iter \u003d decl.getNext();\n             addAllChildren(decl);\n             addAllChildren(iter);\n         }\n     }\n-    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.EXPR_RESULT || parent.getType() \u003d\u003d Token.RETURN) {\n+    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.EXPR_RESULT || parent.getType() \u003d\u003d Token.RETURN || parent.getType() \u003d\u003d Token.THROW) {\n         addSimplifiedExpression(n, parent);\n     }\n     if ((parent.getType() \u003d\u003d Token.IF || parent.getType() \u003d\u003d Token.WHILE || parent.getType() \u003d\u003d Token.WITH || parent.getType() \u003d\u003d Token.SWITCH || parent.getType() \u003d\u003d Token.CASE) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         addAllChildren(n);\n     }\n     if (parent.getType() \u003d\u003d Token.DO \u0026\u0026 parent.getLastChild() \u003d\u003d n) {\n         addAllChildren(n);\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return true;\n    }\n    if (n.getType() \u003d\u003d Token.FOR) {\n        if (!NodeUtil.isForIn(n)) {\n            Node decl \u003d n.getFirstChild();\n            Node pred \u003d decl.getNext();\n            Node step \u003d pred.getNext();\n            addSimplifiedExpression(decl, n);\n            addSimplifiedExpression(pred, n);\n            addSimplifiedExpression(step, n);\n        } else {\n            Node decl \u003d n.getFirstChild();\n            Node iter \u003d decl.getNext();\n            addAllChildren(decl);\n            addAllChildren(iter);\n        }\n    }\n    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.EXPR_RESULT || parent.getType() \u003d\u003d Token.RETURN) {\n        addSimplifiedExpression(n, parent);\n    }\n    if ((parent.getType() \u003d\u003d Token.IF || parent.getType() \u003d\u003d Token.WHILE || parent.getType() \u003d\u003d Token.WITH || parent.getType() \u003d\u003d Token.SWITCH || parent.getType() \u003d\u003d Token.CASE) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        addAllChildren(n);\n    }\n    if (parent.getType() \u003d\u003d Token.DO \u0026\u0026 parent.getLastChild() \u003d\u003d n) {\n        addAllChildren(n);\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
      "functionStartLine": 674,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,30 +1,30 @@\n public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n     if (parent \u003d\u003d null) {\n         return true;\n     }\n     if (n.getType() \u003d\u003d Token.FOR) {\n-        if (n.getChildCount() \u003d\u003d 4) {\n+        if (!NodeUtil.isForIn(n)) {\n             Node decl \u003d n.getFirstChild();\n             Node pred \u003d decl.getNext();\n             Node step \u003d pred.getNext();\n             addSimplifiedExpression(decl, n);\n             addSimplifiedExpression(pred, n);\n             addSimplifiedExpression(step, n);\n         } else {\n             Node decl \u003d n.getFirstChild();\n             Node iter \u003d decl.getNext();\n             addAllChildren(decl);\n             addAllChildren(iter);\n         }\n     }\n     if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.EXPR_RESULT || parent.getType() \u003d\u003d Token.RETURN) {\n         addSimplifiedExpression(n, parent);\n     }\n     if ((parent.getType() \u003d\u003d Token.IF || parent.getType() \u003d\u003d Token.WHILE || parent.getType() \u003d\u003d Token.WITH || parent.getType() \u003d\u003d Token.SWITCH || parent.getType() \u003d\u003d Token.CASE) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n         addAllChildren(n);\n     }\n     if (parent.getType() \u003d\u003d Token.DO \u0026\u0026 parent.getLastChild() \u003d\u003d n) {\n         addAllChildren(n);\n     }\n     return true;\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,30 @@\n+public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n+    if (parent \u003d\u003d null) {\n+        return true;\n+    }\n+    if (n.getType() \u003d\u003d Token.FOR) {\n+        if (n.getChildCount() \u003d\u003d 4) {\n+            Node decl \u003d n.getFirstChild();\n+            Node pred \u003d decl.getNext();\n+            Node step \u003d pred.getNext();\n+            addSimplifiedExpression(decl, n);\n+            addSimplifiedExpression(pred, n);\n+            addSimplifiedExpression(step, n);\n+        } else {\n+            Node decl \u003d n.getFirstChild();\n+            Node iter \u003d decl.getNext();\n+            addAllChildren(decl);\n+            addAllChildren(iter);\n+        }\n+    }\n+    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.EXPR_RESULT || parent.getType() \u003d\u003d Token.RETURN) {\n+        addSimplifiedExpression(n, parent);\n+    }\n+    if ((parent.getType() \u003d\u003d Token.IF || parent.getType() \u003d\u003d Token.WHILE || parent.getType() \u003d\u003d Token.WITH || parent.getType() \u003d\u003d Token.SWITCH || parent.getType() \u003d\u003d Token.CASE) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n+        addAllChildren(n);\n+    }\n+    if (parent.getType() \u003d\u003d Token.DO \u0026\u0026 parent.getLastChild() \u003d\u003d n) {\n+        addAllChildren(n);\n+    }\n+    return true;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n    if (parent \u003d\u003d null) {\n        return true;\n    }\n    if (n.getType() \u003d\u003d Token.FOR) {\n        if (n.getChildCount() \u003d\u003d 4) {\n            Node decl \u003d n.getFirstChild();\n            Node pred \u003d decl.getNext();\n            Node step \u003d pred.getNext();\n            addSimplifiedExpression(decl, n);\n            addSimplifiedExpression(pred, n);\n            addSimplifiedExpression(step, n);\n        } else {\n            Node decl \u003d n.getFirstChild();\n            Node iter \u003d decl.getNext();\n            addAllChildren(decl);\n            addAllChildren(iter);\n        }\n    }\n    if (parent.getType() \u003d\u003d Token.VAR || parent.getType() \u003d\u003d Token.EXPR_RESULT || parent.getType() \u003d\u003d Token.RETURN) {\n        addSimplifiedExpression(n, parent);\n    }\n    if ((parent.getType() \u003d\u003d Token.IF || parent.getType() \u003d\u003d Token.WHILE || parent.getType() \u003d\u003d Token.WITH || parent.getType() \u003d\u003d Token.SWITCH || parent.getType() \u003d\u003d Token.CASE) \u0026\u0026 parent.getFirstChild() \u003d\u003d n) {\n        addAllChildren(n);\n    }\n    if (parent.getType() \u003d\u003d Token.DO \u0026\u0026 parent.getLastChild() \u003d\u003d n) {\n        addAllChildren(n);\n    }\n    return true;\n}",
      "path": "src/com/google/javascript/jscomp/NameAnalyzer.java",
      "functionStartLine": 674,
      "functionName": "shouldTraverse",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}