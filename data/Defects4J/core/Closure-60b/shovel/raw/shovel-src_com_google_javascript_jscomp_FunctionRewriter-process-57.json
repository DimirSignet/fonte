{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionRewriter.java",
  "functionName": "process",
  "functionId": "process___externs-Node__root-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/FunctionRewriter.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 57,
  "functionEndLine": 103,
  "numCommitsSeen": 12,
  "timeTaken": 488,
  "changeHistory": [
    "847b296c23a63aa0a0b38cc3e63883e1688288e3",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": {
      "type": "Ybodychange",
      "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/09, 3:50 PM",
      "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 35.0,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    List\u003cReducer\u003e reducers \u003d ImmutableList.of(new ReturnConstantReducer(), new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer());\n    Multimap\u003cReducer, Reduction\u003e reductionMap \u003d HashMultimap.create();\n    NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));\n    for (Reducer reducer : reducers) {\n        Collection\u003cReduction\u003e reductions \u003d reductionMap.get(reducer);\n        if (reductions.isEmpty()) {\n            continue;\n        }\n        Node helperCode \u003d parseHelperCode(reducer);\n        if (helperCode \u003d\u003d null) {\n            continue;\n        }\n        int helperCodeCost \u003d InlineCostEstimator.getCost(helperCode);\n        int savings \u003d 0;\n        for (Reduction reduction : reductions) {\n            savings +\u003d reduction.estimateSavings();\n        }\n        if (savings \u003e (helperCodeCost + SAVINGS_THRESHOLD)) {\n            for (Reduction reduction : reductions) {\n                reduction.apply();\n            }\n            Node addingRoot \u003d compiler.getNodeForCodeInsertion(null);\n            addingRoot.addChildrenToFront(helperCode);\n            compiler.reportCodeChange();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
      "functionStartLine": 58,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,29 +1,29 @@\n @Override\n public void process(Node externs, Node root) {\n     List\u003cReducer\u003e reducers \u003d ImmutableList.of(new ReturnConstantReducer(), new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer());\n-    Multimap\u003cReducer, Reduction\u003e reductionMap \u003d Multimaps.newHashMultimap();\n+    Multimap\u003cReducer, Reduction\u003e reductionMap \u003d HashMultimap.create();\n     NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));\n     for (Reducer reducer : reducers) {\n         Collection\u003cReduction\u003e reductions \u003d reductionMap.get(reducer);\n         if (reductions.isEmpty()) {\n             continue;\n         }\n         Node helperCode \u003d parseHelperCode(reducer);\n         if (helperCode \u003d\u003d null) {\n             continue;\n         }\n         int helperCodeCost \u003d InlineCostEstimator.getCost(helperCode);\n         int savings \u003d 0;\n         for (Reduction reduction : reductions) {\n             savings +\u003d reduction.estimateSavings();\n         }\n         if (savings \u003e (helperCodeCost + SAVINGS_THRESHOLD)) {\n             for (Reduction reduction : reductions) {\n                 reduction.apply();\n             }\n             Node addingRoot \u003d compiler.getNodeForCodeInsertion(null);\n             addingRoot.addChildrenToFront(helperCode);\n             compiler.reportCodeChange();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,29 @@\n+@Override\n+public void process(Node externs, Node root) {\n+    List\u003cReducer\u003e reducers \u003d ImmutableList.of(new ReturnConstantReducer(), new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer());\n+    Multimap\u003cReducer, Reduction\u003e reductionMap \u003d Multimaps.newHashMultimap();\n+    NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));\n+    for (Reducer reducer : reducers) {\n+        Collection\u003cReduction\u003e reductions \u003d reductionMap.get(reducer);\n+        if (reductions.isEmpty()) {\n+            continue;\n+        }\n+        Node helperCode \u003d parseHelperCode(reducer);\n+        if (helperCode \u003d\u003d null) {\n+            continue;\n+        }\n+        int helperCodeCost \u003d InlineCostEstimator.getCost(helperCode);\n+        int savings \u003d 0;\n+        for (Reduction reduction : reductions) {\n+            savings +\u003d reduction.estimateSavings();\n+        }\n+        if (savings \u003e (helperCodeCost + SAVINGS_THRESHOLD)) {\n+            for (Reduction reduction : reductions) {\n+                reduction.apply();\n+            }\n+            Node addingRoot \u003d compiler.getNodeForCodeInsertion(null);\n+            addingRoot.addChildrenToFront(helperCode);\n+            compiler.reportCodeChange();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    List\u003cReducer\u003e reducers \u003d ImmutableList.of(new ReturnConstantReducer(), new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer());\n    Multimap\u003cReducer, Reduction\u003e reductionMap \u003d Multimaps.newHashMultimap();\n    NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));\n    for (Reducer reducer : reducers) {\n        Collection\u003cReduction\u003e reductions \u003d reductionMap.get(reducer);\n        if (reductions.isEmpty()) {\n            continue;\n        }\n        Node helperCode \u003d parseHelperCode(reducer);\n        if (helperCode \u003d\u003d null) {\n            continue;\n        }\n        int helperCodeCost \u003d InlineCostEstimator.getCost(helperCode);\n        int savings \u003d 0;\n        for (Reduction reduction : reductions) {\n            savings +\u003d reduction.estimateSavings();\n        }\n        if (savings \u003e (helperCodeCost + SAVINGS_THRESHOLD)) {\n            for (Reduction reduction : reductions) {\n                reduction.apply();\n            }\n            Node addingRoot \u003d compiler.getNodeForCodeInsertion(null);\n            addingRoot.addChildrenToFront(helperCode);\n            compiler.reportCodeChange();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/FunctionRewriter.java",
      "functionStartLine": 58,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}