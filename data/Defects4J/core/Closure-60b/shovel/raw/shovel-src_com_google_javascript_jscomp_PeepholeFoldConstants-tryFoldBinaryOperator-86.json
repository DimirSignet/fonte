{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PeepholeFoldConstants.java",
  "functionName": "tryFoldBinaryOperator",
  "functionId": "tryFoldBinaryOperator___subtree-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 86,
  "functionEndLine": 153,
  "numCommitsSeen": 48,
  "timeTaken": 4801,
  "changeHistory": [
    "685443251d5be1186e0d8abf4ad1181153bebe01",
    "510ff24ac51a8c73ff3f2401379654c37a00546b",
    "86fc0c596ece8917888075e8e8b42f701131632e",
    "b14f33a0c7d07320600acdf732f16f6f52aa999c",
    "bbf3ed85e0f668331edb269329bf577fe27932a8",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5"
  ],
  "changeHistoryShort": {
    "685443251d5be1186e0d8abf4ad1181153bebe01": "Ybodychange",
    "510ff24ac51a8c73ff3f2401379654c37a00546b": "Ybodychange",
    "86fc0c596ece8917888075e8e8b42f701131632e": "Ybodychange",
    "b14f33a0c7d07320600acdf732f16f6f52aa999c": "Ybodychange",
    "bbf3ed85e0f668331edb269329bf577fe27932a8": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "685443251d5be1186e0d8abf4ad1181153bebe01": {
      "type": "Ybodychange",
      "commitMessage": "\nAdd BITXOR to the list of commutative and associative operators.\n\nR\u003dnicksantos\nDELTA\u003d21  (21 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d250\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@687 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/11/11, 3:59 PM",
      "commitName": "685443251d5be1186e0d8abf4ad1181153bebe01",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "12/8/10, 2:31 PM",
      "commitNameOld": "510ff24ac51a8c73ff3f2401379654c37a00546b",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 34.06,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldBinaryOperator(Node subtree) {\n    Node left \u003d subtree.getFirstChild();\n    if (left \u003d\u003d null) {\n        return subtree;\n    }\n    Node right \u003d left.getNext();\n    if (right \u003d\u003d null) {\n        return subtree;\n    }\n    switch(subtree.getType()) {\n        case Token.GETPROP:\n            return tryFoldGetProp(subtree, left, right);\n        case Token.GETELEM:\n            return tryFoldGetElem(subtree, left, right);\n        case Token.INSTANCEOF:\n            return tryFoldInstanceof(subtree, left, right);\n        case Token.AND:\n        case Token.OR:\n            return tryFoldAndOr(subtree, left, right);\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n            return tryFoldShift(subtree, left, right);\n        case Token.ASSIGN:\n            return tryFoldAssign(subtree, left, right);\n        case Token.ADD:\n            return tryFoldAdd(subtree, left, right);\n        case Token.SUB:\n        case Token.DIV:\n        case Token.MOD:\n            return tryFoldArithmeticOp(subtree, left, right);\n        case Token.MUL:\n        case Token.BITAND:\n        case Token.BITOR:\n        case Token.BITXOR:\n            Node result \u003d tryFoldArithmeticOp(subtree, left, right);\n            if (result !\u003d subtree) {\n                return result;\n            }\n            return tryFoldLeftChildOp(subtree, left, right);\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.EQ:\n        case Token.NE:\n        case Token.SHEQ:\n        case Token.SHNE:\n            return tryFoldComparison(subtree, left, right);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 89,
      "functionName": "tryFoldBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,53 @@\n private Node tryFoldBinaryOperator(Node subtree) {\n     Node left \u003d subtree.getFirstChild();\n     if (left \u003d\u003d null) {\n         return subtree;\n     }\n     Node right \u003d left.getNext();\n     if (right \u003d\u003d null) {\n         return subtree;\n     }\n     switch(subtree.getType()) {\n         case Token.GETPROP:\n             return tryFoldGetProp(subtree, left, right);\n         case Token.GETELEM:\n             return tryFoldGetElem(subtree, left, right);\n         case Token.INSTANCEOF:\n             return tryFoldInstanceof(subtree, left, right);\n         case Token.AND:\n         case Token.OR:\n             return tryFoldAndOr(subtree, left, right);\n         case Token.LSH:\n         case Token.RSH:\n         case Token.URSH:\n             return tryFoldShift(subtree, left, right);\n         case Token.ASSIGN:\n             return tryFoldAssign(subtree, left, right);\n         case Token.ADD:\n             return tryFoldAdd(subtree, left, right);\n         case Token.SUB:\n         case Token.DIV:\n         case Token.MOD:\n             return tryFoldArithmeticOp(subtree, left, right);\n         case Token.MUL:\n         case Token.BITAND:\n         case Token.BITOR:\n+        case Token.BITXOR:\n             Node result \u003d tryFoldArithmeticOp(subtree, left, right);\n             if (result !\u003d subtree) {\n                 return result;\n             }\n             return tryFoldLeftChildOp(subtree, left, right);\n         case Token.LT:\n         case Token.GT:\n         case Token.LE:\n         case Token.GE:\n         case Token.EQ:\n         case Token.NE:\n         case Token.SHEQ:\n         case Token.SHNE:\n             return tryFoldComparison(subtree, left, right);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "510ff24ac51a8c73ff3f2401379654c37a00546b": {
      "type": "Ybodychange",
      "commitMessage": "\nFold a few more comparison cases.\n\nR\u003dnicksantos\nDELTA\u003d215  (169 added, 20 deleted, 26 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d98\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@610 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/10, 2:31 PM",
      "commitName": "510ff24ac51a8c73ff3f2401379654c37a00546b",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/30/10, 12:10 PM",
      "commitNameOld": "eaaa156632369f88e9667f55c7761cef8367cf57",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.1,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldBinaryOperator(Node subtree) {\n    Node left \u003d subtree.getFirstChild();\n    if (left \u003d\u003d null) {\n        return subtree;\n    }\n    Node right \u003d left.getNext();\n    if (right \u003d\u003d null) {\n        return subtree;\n    }\n    switch(subtree.getType()) {\n        case Token.GETPROP:\n            return tryFoldGetProp(subtree, left, right);\n        case Token.GETELEM:\n            return tryFoldGetElem(subtree, left, right);\n        case Token.INSTANCEOF:\n            return tryFoldInstanceof(subtree, left, right);\n        case Token.AND:\n        case Token.OR:\n            return tryFoldAndOr(subtree, left, right);\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n            return tryFoldShift(subtree, left, right);\n        case Token.ASSIGN:\n            return tryFoldAssign(subtree, left, right);\n        case Token.ADD:\n            return tryFoldAdd(subtree, left, right);\n        case Token.SUB:\n        case Token.DIV:\n        case Token.MOD:\n            return tryFoldArithmeticOp(subtree, left, right);\n        case Token.MUL:\n        case Token.BITAND:\n        case Token.BITOR:\n            Node result \u003d tryFoldArithmeticOp(subtree, left, right);\n            if (result !\u003d subtree) {\n                return result;\n            }\n            return tryFoldLeftChildOp(subtree, left, right);\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.EQ:\n        case Token.NE:\n        case Token.SHEQ:\n        case Token.SHNE:\n            return tryFoldComparison(subtree, left, right);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 89,
      "functionName": "tryFoldBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,52 @@\n private Node tryFoldBinaryOperator(Node subtree) {\n     Node left \u003d subtree.getFirstChild();\n     if (left \u003d\u003d null) {\n         return subtree;\n     }\n     Node right \u003d left.getNext();\n     if (right \u003d\u003d null) {\n         return subtree;\n     }\n     switch(subtree.getType()) {\n         case Token.GETPROP:\n             return tryFoldGetProp(subtree, left, right);\n         case Token.GETELEM:\n             return tryFoldGetElem(subtree, left, right);\n         case Token.INSTANCEOF:\n             return tryFoldInstanceof(subtree, left, right);\n         case Token.AND:\n         case Token.OR:\n             return tryFoldAndOr(subtree, left, right);\n         case Token.LSH:\n         case Token.RSH:\n         case Token.URSH:\n             return tryFoldShift(subtree, left, right);\n         case Token.ASSIGN:\n             return tryFoldAssign(subtree, left, right);\n         case Token.ADD:\n             return tryFoldAdd(subtree, left, right);\n         case Token.SUB:\n         case Token.DIV:\n         case Token.MOD:\n             return tryFoldArithmeticOp(subtree, left, right);\n         case Token.MUL:\n         case Token.BITAND:\n         case Token.BITOR:\n-            if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-                return tryFoldArithmeticOp(subtree, left, right);\n-            } else {\n-                return tryFoldLeftChildOp(subtree, left, right);\n+            Node result \u003d tryFoldArithmeticOp(subtree, left, right);\n+            if (result !\u003d subtree) {\n+                return result;\n             }\n+            return tryFoldLeftChildOp(subtree, left, right);\n         case Token.LT:\n         case Token.GT:\n         case Token.LE:\n         case Token.GE:\n         case Token.EQ:\n         case Token.NE:\n         case Token.SHEQ:\n         case Token.SHNE:\n             return tryFoldComparison(subtree, left, right);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "86fc0c596ece8917888075e8e8b42f701131632e": {
      "type": "Ybodychange",
      "commitMessage": "\nFix fold breakage with mixed constant types.\n\nR\u003dacleung\nDELTA\u003d20  (7 added, 4 deleted, 9 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1044274\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@531 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/1/10, 7:01 PM",
      "commitName": "86fc0c596ece8917888075e8e8b42f701131632e",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/1/10, 9:37 AM",
      "commitNameOld": "b14f33a0c7d07320600acdf732f16f6f52aa999c",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.39,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldBinaryOperator(Node subtree) {\n    Node left \u003d subtree.getFirstChild();\n    if (left \u003d\u003d null) {\n        return subtree;\n    }\n    Node right \u003d left.getNext();\n    if (right \u003d\u003d null) {\n        return subtree;\n    }\n    switch(subtree.getType()) {\n        case Token.GETPROP:\n            return tryFoldGetProp(subtree, left, right);\n        case Token.GETELEM:\n            return tryFoldGetElem(subtree, left, right);\n        case Token.INSTANCEOF:\n            return tryFoldInstanceof(subtree, left, right);\n        case Token.AND:\n        case Token.OR:\n            return tryFoldAndOr(subtree, left, right);\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n            return tryFoldShift(subtree, left, right);\n        case Token.ASSIGN:\n            return tryFoldAssign(subtree, left, right);\n        case Token.ADD:\n            return tryFoldAdd(subtree, left, right);\n        case Token.SUB:\n        case Token.DIV:\n        case Token.MOD:\n            return tryFoldArithmeticOp(subtree, left, right);\n        case Token.MUL:\n        case Token.BITAND:\n        case Token.BITOR:\n            if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n                return tryFoldArithmeticOp(subtree, left, right);\n            } else {\n                return tryFoldLeftChildOp(subtree, left, right);\n            }\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.EQ:\n        case Token.NE:\n        case Token.SHEQ:\n        case Token.SHNE:\n            return tryFoldComparison(subtree, left, right);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 89,
      "functionName": "tryFoldBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,56 +1,52 @@\n private Node tryFoldBinaryOperator(Node subtree) {\n     Node left \u003d subtree.getFirstChild();\n     if (left \u003d\u003d null) {\n         return subtree;\n     }\n     Node right \u003d left.getNext();\n     if (right \u003d\u003d null) {\n         return subtree;\n     }\n     switch(subtree.getType()) {\n         case Token.GETPROP:\n             return tryFoldGetProp(subtree, left, right);\n         case Token.GETELEM:\n             return tryFoldGetElem(subtree, left, right);\n         case Token.INSTANCEOF:\n             return tryFoldInstanceof(subtree, left, right);\n         case Token.AND:\n         case Token.OR:\n             return tryFoldAndOr(subtree, left, right);\n         case Token.LSH:\n         case Token.RSH:\n         case Token.URSH:\n             return tryFoldShift(subtree, left, right);\n         case Token.ASSIGN:\n             return tryFoldAssign(subtree, left, right);\n         case Token.ADD:\n             return tryFoldAdd(subtree, left, right);\n         case Token.SUB:\n         case Token.DIV:\n         case Token.MOD:\n-            if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-                return tryFoldOp(subtree, left, right);\n-            } else {\n-                return subtree;\n-            }\n+            return tryFoldArithmeticOp(subtree, left, right);\n         case Token.MUL:\n         case Token.BITAND:\n         case Token.BITOR:\n             if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n-                return tryFoldOp(subtree, left, right);\n+                return tryFoldArithmeticOp(subtree, left, right);\n             } else {\n                 return tryFoldLeftChildOp(subtree, left, right);\n             }\n         case Token.LT:\n         case Token.GT:\n         case Token.LE:\n         case Token.GE:\n         case Token.EQ:\n         case Token.NE:\n         case Token.SHEQ:\n         case Token.SHNE:\n             return tryFoldComparison(subtree, left, right);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b14f33a0c7d07320600acdf732f16f6f52aa999c": {
      "type": "Ybodychange",
      "commitMessage": "\nFold more associative operations.\nFixes issue 245\n\nR\u003dnicksantos\nDELTA\u003d250  (139 added, 61 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1041044\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@530 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/1/10, 9:37 AM",
      "commitName": "b14f33a0c7d07320600acdf732f16f6f52aa999c",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "10/25/10, 10:22 AM",
      "commitNameOld": "bbf3ed85e0f668331edb269329bf577fe27932a8",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.97,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldBinaryOperator(Node subtree) {\n    Node left \u003d subtree.getFirstChild();\n    if (left \u003d\u003d null) {\n        return subtree;\n    }\n    Node right \u003d left.getNext();\n    if (right \u003d\u003d null) {\n        return subtree;\n    }\n    switch(subtree.getType()) {\n        case Token.GETPROP:\n            return tryFoldGetProp(subtree, left, right);\n        case Token.GETELEM:\n            return tryFoldGetElem(subtree, left, right);\n        case Token.INSTANCEOF:\n            return tryFoldInstanceof(subtree, left, right);\n        case Token.AND:\n        case Token.OR:\n            return tryFoldAndOr(subtree, left, right);\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n            return tryFoldShift(subtree, left, right);\n        case Token.ASSIGN:\n            return tryFoldAssign(subtree, left, right);\n        case Token.ADD:\n            return tryFoldAdd(subtree, left, right);\n        case Token.SUB:\n        case Token.DIV:\n        case Token.MOD:\n            if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n                return tryFoldOp(subtree, left, right);\n            } else {\n                return subtree;\n            }\n        case Token.MUL:\n        case Token.BITAND:\n        case Token.BITOR:\n            if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n                return tryFoldOp(subtree, left, right);\n            } else {\n                return tryFoldLeftChildOp(subtree, left, right);\n            }\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.EQ:\n        case Token.NE:\n        case Token.SHEQ:\n        case Token.SHNE:\n            return tryFoldComparison(subtree, left, right);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 89,
      "functionName": "tryFoldBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,48 +1,56 @@\n private Node tryFoldBinaryOperator(Node subtree) {\n     Node left \u003d subtree.getFirstChild();\n     if (left \u003d\u003d null) {\n         return subtree;\n     }\n     Node right \u003d left.getNext();\n     if (right \u003d\u003d null) {\n         return subtree;\n     }\n     switch(subtree.getType()) {\n         case Token.GETPROP:\n             return tryFoldGetProp(subtree, left, right);\n         case Token.GETELEM:\n             return tryFoldGetElem(subtree, left, right);\n         case Token.INSTANCEOF:\n             return tryFoldInstanceof(subtree, left, right);\n         case Token.AND:\n         case Token.OR:\n             return tryFoldAndOr(subtree, left, right);\n-        case Token.BITAND:\n-        case Token.BITOR:\n-            return tryFoldBitAndOr(subtree, left, right);\n         case Token.LSH:\n         case Token.RSH:\n         case Token.URSH:\n             return tryFoldShift(subtree, left, right);\n         case Token.ASSIGN:\n             return tryFoldAssign(subtree, left, right);\n         case Token.ADD:\n             return tryFoldAdd(subtree, left, right);\n         case Token.SUB:\n-        case Token.MUL:\n         case Token.DIV:\n         case Token.MOD:\n-            return tryFoldArithmetic(subtree, left, right);\n+            if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n+                return tryFoldOp(subtree, left, right);\n+            } else {\n+                return subtree;\n+            }\n+        case Token.MUL:\n+        case Token.BITAND:\n+        case Token.BITOR:\n+            if (left.getType() \u003d\u003d Token.NUMBER \u0026\u0026 right.getType() \u003d\u003d Token.NUMBER) {\n+                return tryFoldOp(subtree, left, right);\n+            } else {\n+                return tryFoldLeftChildOp(subtree, left, right);\n+            }\n         case Token.LT:\n         case Token.GT:\n         case Token.LE:\n         case Token.GE:\n         case Token.EQ:\n         case Token.NE:\n         case Token.SHEQ:\n         case Token.SHNE:\n             return tryFoldComparison(subtree, left, right);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bbf3ed85e0f668331edb269329bf577fe27932a8": {
      "type": "Ybodychange",
      "commitMessage": "\nOptimize modulo like other operators.\nContributed by timwintle\nFixes issue 267\n\nRevision created by MOE tool push_codebase.\n\nR\u003djohnlenz\nDELTA\u003d11  (11 added, 0 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d716028\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@507 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/25/10, 10:22 AM",
      "commitName": "bbf3ed85e0f668331edb269329bf577fe27932a8",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "9/21/10, 9:21 AM",
      "commitNameOld": "b7ad2fb211e62adfb260852fd03e4d17ff51226e",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 34.04,
      "commitsBetweenForRepo": 56,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldBinaryOperator(Node subtree) {\n    Node left \u003d subtree.getFirstChild();\n    if (left \u003d\u003d null) {\n        return subtree;\n    }\n    Node right \u003d left.getNext();\n    if (right \u003d\u003d null) {\n        return subtree;\n    }\n    switch(subtree.getType()) {\n        case Token.GETPROP:\n            return tryFoldGetProp(subtree, left, right);\n        case Token.GETELEM:\n            return tryFoldGetElem(subtree, left, right);\n        case Token.INSTANCEOF:\n            return tryFoldInstanceof(subtree, left, right);\n        case Token.AND:\n        case Token.OR:\n            return tryFoldAndOr(subtree, left, right);\n        case Token.BITAND:\n        case Token.BITOR:\n            return tryFoldBitAndOr(subtree, left, right);\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n            return tryFoldShift(subtree, left, right);\n        case Token.ASSIGN:\n            return tryFoldAssign(subtree, left, right);\n        case Token.ADD:\n            return tryFoldAdd(subtree, left, right);\n        case Token.SUB:\n        case Token.MUL:\n        case Token.DIV:\n        case Token.MOD:\n            return tryFoldArithmetic(subtree, left, right);\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.EQ:\n        case Token.NE:\n        case Token.SHEQ:\n        case Token.SHNE:\n            return tryFoldComparison(subtree, left, right);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 89,
      "functionName": "tryFoldBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,47 +1,48 @@\n private Node tryFoldBinaryOperator(Node subtree) {\n     Node left \u003d subtree.getFirstChild();\n     if (left \u003d\u003d null) {\n         return subtree;\n     }\n     Node right \u003d left.getNext();\n     if (right \u003d\u003d null) {\n         return subtree;\n     }\n     switch(subtree.getType()) {\n         case Token.GETPROP:\n             return tryFoldGetProp(subtree, left, right);\n         case Token.GETELEM:\n             return tryFoldGetElem(subtree, left, right);\n         case Token.INSTANCEOF:\n             return tryFoldInstanceof(subtree, left, right);\n         case Token.AND:\n         case Token.OR:\n             return tryFoldAndOr(subtree, left, right);\n         case Token.BITAND:\n         case Token.BITOR:\n             return tryFoldBitAndOr(subtree, left, right);\n         case Token.LSH:\n         case Token.RSH:\n         case Token.URSH:\n             return tryFoldShift(subtree, left, right);\n         case Token.ASSIGN:\n             return tryFoldAssign(subtree, left, right);\n         case Token.ADD:\n             return tryFoldAdd(subtree, left, right);\n         case Token.SUB:\n         case Token.MUL:\n         case Token.DIV:\n+        case Token.MOD:\n             return tryFoldArithmetic(subtree, left, right);\n         case Token.LT:\n         case Token.GT:\n         case Token.LE:\n         case Token.GE:\n         case Token.EQ:\n         case Token.NE:\n         case Token.SHEQ:\n         case Token.SHNE:\n             return tryFoldComparison(subtree, left, right);\n         default:\n             return subtree;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "6/28/10, 5:30 PM",
      "commitNameOld": "9925370292834ea846727f1f9db76af0d40261df",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private Node tryFoldBinaryOperator(Node subtree) {\n    Node left \u003d subtree.getFirstChild();\n    if (left \u003d\u003d null) {\n        return subtree;\n    }\n    Node right \u003d left.getNext();\n    if (right \u003d\u003d null) {\n        return subtree;\n    }\n    switch(subtree.getType()) {\n        case Token.GETPROP:\n            return tryFoldGetProp(subtree, left, right);\n        case Token.GETELEM:\n            return tryFoldGetElem(subtree, left, right);\n        case Token.INSTANCEOF:\n            return tryFoldInstanceof(subtree, left, right);\n        case Token.AND:\n        case Token.OR:\n            return tryFoldAndOr(subtree, left, right);\n        case Token.BITAND:\n        case Token.BITOR:\n            return tryFoldBitAndOr(subtree, left, right);\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n            return tryFoldShift(subtree, left, right);\n        case Token.ASSIGN:\n            return tryFoldAssign(subtree, left, right);\n        case Token.ADD:\n            return tryFoldAdd(subtree, left, right);\n        case Token.SUB:\n        case Token.MUL:\n        case Token.DIV:\n            return tryFoldArithmetic(subtree, left, right);\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.EQ:\n        case Token.NE:\n        case Token.SHEQ:\n        case Token.SHNE:\n            return tryFoldComparison(subtree, left, right);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 88,
      "functionName": "tryFoldBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "c9e89727dc8063d087d28e42629606f4fd74a6e5": {
      "type": "Yintroduced",
      "commitMessage": "\nChange on 2010/06/22 by nicksantos\n\n\tvariable coalescing better be run AFTER ambiguate properties, and\n\tafter denormalization.\n\n\tR\u003djohnlenz\n\tDELTA\u003d36  (20 added, 16 deleted, 0 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d34005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@248 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/22/10, 4:00 PM",
      "commitName": "c9e89727dc8063d087d28e42629606f4fd74a6e5",
      "commitAuthor": "Nicholas.J.Santos",
      "diff": "@@ -0,0 +1,47 @@\n+private Node tryFoldBinaryOperator(Node subtree) {\n+    Node left \u003d subtree.getFirstChild();\n+    if (left \u003d\u003d null) {\n+        return subtree;\n+    }\n+    Node right \u003d left.getNext();\n+    if (right \u003d\u003d null) {\n+        return subtree;\n+    }\n+    switch(subtree.getType()) {\n+        case Token.GETPROP:\n+            return tryFoldGetProp(subtree, left, right);\n+        case Token.GETELEM:\n+            return tryFoldGetElem(subtree, left, right);\n+        case Token.INSTANCEOF:\n+            return tryFoldInstanceof(subtree, left, right);\n+        case Token.AND:\n+        case Token.OR:\n+            return tryFoldAndOr(subtree, left, right);\n+        case Token.BITAND:\n+        case Token.BITOR:\n+            return tryFoldBitAndOr(subtree, left, right);\n+        case Token.LSH:\n+        case Token.RSH:\n+        case Token.URSH:\n+            return tryFoldShift(subtree, left, right);\n+        case Token.ASSIGN:\n+            return tryFoldAssign(subtree, left, right);\n+        case Token.ADD:\n+            return tryFoldAdd(subtree, left, right);\n+        case Token.SUB:\n+        case Token.MUL:\n+        case Token.DIV:\n+            return tryFoldArithmetic(subtree, left, right);\n+        case Token.LT:\n+        case Token.GT:\n+        case Token.LE:\n+        case Token.GE:\n+        case Token.EQ:\n+        case Token.NE:\n+        case Token.SHEQ:\n+        case Token.SHNE:\n+            return tryFoldComparison(subtree, left, right);\n+        default:\n+            return subtree;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private Node tryFoldBinaryOperator(Node subtree) {\n    Node left \u003d subtree.getFirstChild();\n    if (left \u003d\u003d null) {\n        return subtree;\n    }\n    Node right \u003d left.getNext();\n    if (right \u003d\u003d null) {\n        return subtree;\n    }\n    switch(subtree.getType()) {\n        case Token.GETPROP:\n            return tryFoldGetProp(subtree, left, right);\n        case Token.GETELEM:\n            return tryFoldGetElem(subtree, left, right);\n        case Token.INSTANCEOF:\n            return tryFoldInstanceof(subtree, left, right);\n        case Token.AND:\n        case Token.OR:\n            return tryFoldAndOr(subtree, left, right);\n        case Token.BITAND:\n        case Token.BITOR:\n            return tryFoldBitAndOr(subtree, left, right);\n        case Token.LSH:\n        case Token.RSH:\n        case Token.URSH:\n            return tryFoldShift(subtree, left, right);\n        case Token.ASSIGN:\n            return tryFoldAssign(subtree, left, right);\n        case Token.ADD:\n            return tryFoldAdd(subtree, left, right);\n        case Token.SUB:\n        case Token.MUL:\n        case Token.DIV:\n            return tryFoldArithmetic(subtree, left, right);\n        case Token.LT:\n        case Token.GT:\n        case Token.LE:\n        case Token.GE:\n        case Token.EQ:\n        case Token.NE:\n        case Token.SHEQ:\n        case Token.SHNE:\n            return tryFoldComparison(subtree, left, right);\n        default:\n            return subtree;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PeepholeFoldConstants.java",
      "functionStartLine": 86,
      "functionName": "tryFoldBinaryOperator",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}