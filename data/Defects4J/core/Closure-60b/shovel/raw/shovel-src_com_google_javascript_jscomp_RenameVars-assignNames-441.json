{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RenameVars.java",
  "functionName": "assignNames",
  "functionId": "assignNames___varsToRename-Set__Assignment__",
  "sourceFilePath": "src/com/google/javascript/jscomp/RenameVars.java",
  "functionAnnotation": "",
  "functionDoc": "Determines which new names to substitute for the original names.\n",
  "functionStartLine": 441,
  "functionEndLine": 511,
  "numCommitsSeen": 20,
  "timeTaken": 866,
  "changeHistory": [
    "b6e3f5c01de00915df7682dba4e9a7f733630d34",
    "a478193982ce1fb9271e3f7ebcc1369913c9a859",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "b6e3f5c01de00915df7682dba4e9a7f733630d34": "Yformatchange",
    "a478193982ce1fb9271e3f7ebcc1369913c9a859": "Yformatchange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6e3f5c01de00915df7682dba4e9a7f733630d34": {
      "type": "Yformatchange",
      "commitMessage": "\nShadows variables\n\nR\u003djohnlenz,nicksantos\nDELTA\u003d580  (531 added, 7 deleted, 42 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d639\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@808 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/22/11, 2:58 PM",
      "commitName": "b6e3f5c01de00915df7682dba4e9a7f733630d34",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/14/11, 1:50 PM",
      "commitNameOld": "95ac6a7f06053f4a85286e30394836d62d141518",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 8.05,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "actualSource": "private void assignNames(Set\u003cAssignment\u003e varsToRename) {\n    NameGenerator globalNameGenerator \u003d new NameGenerator(reservedNames, prefix, reservedCharacters);\n    NameGenerator localNameGenerator \u003d prefix.isEmpty() ? globalNameGenerator : new NameGenerator(reservedNames, \"\", reservedCharacters);\n    List\u003cAssignment\u003e pendingAssignments \u003d new ArrayList\u003cAssignment\u003e();\n    List\u003cString\u003e generatedNamesForAssignments \u003d new ArrayList\u003cString\u003e();\n    for (Assignment a : varsToRename) {\n        if (a.newName !\u003d null) {\n            continue;\n        }\n        if (externNames.contains(a.oldName)) {\n            continue;\n        }\n        String newName;\n        if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) {\n            newName \u003d localNameGenerator.generateNextName();\n            finalizeNameAssignment(a, newName);\n        } else {\n            newName \u003d globalNameGenerator.generateNextName();\n            pendingAssignments.add(a);\n            generatedNamesForAssignments.add(newName);\n        }\n        reservedNames.add(newName);\n    }\n    int numPendingAssignments \u003d generatedNamesForAssignments.size();\n    for (int i \u003d 0; i \u003c numPendingAssignments; ) {\n        SortedSet\u003cAssignment\u003e varsByOrderOfOccurrence \u003d new TreeSet\u003cAssignment\u003e(ORDER_OF_OCCURRENCE_COMPARATOR);\n        int len \u003d generatedNamesForAssignments.get(i).length();\n        for (int j \u003d i; j \u003c numPendingAssignments \u0026\u0026 generatedNamesForAssignments.get(j).length() \u003d\u003d len; j++) {\n            varsByOrderOfOccurrence.add(pendingAssignments.get(j));\n        }\n        for (Assignment a : varsByOrderOfOccurrence) {\n            finalizeNameAssignment(a, generatedNamesForAssignments.get(i));\n            ++i;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 444,
      "functionName": "assignNames",
      "functionAnnotation": "",
      "functionDoc": "Determines which new names to substitute for the original names.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "a478193982ce1fb9271e3f7ebcc1369913c9a859": {
      "type": "Yformatchange",
      "commitMessage": "Add a debugging option for variable renaming.\nBug fixes for direct calls on the arguments array.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@17 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/1/09, 8:28 AM",
      "commitName": "a478193982ce1fb9271e3f7ebcc1369913c9a859",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/17/09, 4:21 PM",
      "commitNameOld": "fe64e87cccd2c38524c0b36c49beb4c988d1453a",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 13.67,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void assignNames(Set\u003cAssignment\u003e varsToRename) {\n    NameGenerator globalNameGenerator \u003d new NameGenerator(reservedNames, prefix, reservedCharacters);\n    NameGenerator localNameGenerator \u003d prefix.isEmpty() ? globalNameGenerator : new NameGenerator(reservedNames, \"\", reservedCharacters);\n    List\u003cAssignment\u003e pendingAssignments \u003d new ArrayList\u003cAssignment\u003e();\n    List\u003cString\u003e generatedNamesForAssignments \u003d new ArrayList\u003cString\u003e();\n    for (Assignment a : varsToRename) {\n        if (a.newName !\u003d null) {\n            continue;\n        }\n        if (externNames.contains(a.oldName)) {\n            continue;\n        }\n        String newName;\n        if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) {\n            newName \u003d localNameGenerator.generateNextName();\n            finalizeNameAssignment(a, newName);\n        } else {\n            newName \u003d globalNameGenerator.generateNextName();\n            pendingAssignments.add(a);\n            generatedNamesForAssignments.add(newName);\n        }\n        reservedNames.add(newName);\n    }\n    int numPendingAssignments \u003d generatedNamesForAssignments.size();\n    for (int i \u003d 0; i \u003c numPendingAssignments; ) {\n        SortedSet\u003cAssignment\u003e varsByOrderOfOccurrence \u003d new TreeSet\u003cAssignment\u003e(ORDER_OF_OCCURRENCE_COMPARATOR);\n        int len \u003d generatedNamesForAssignments.get(i).length();\n        for (int j \u003d i; j \u003c numPendingAssignments \u0026\u0026 generatedNamesForAssignments.get(j).length() \u003d\u003d len; j++) {\n            varsByOrderOfOccurrence.add(pendingAssignments.get(j));\n        }\n        for (Assignment a : varsByOrderOfOccurrence) {\n            finalizeNameAssignment(a, generatedNamesForAssignments.get(i));\n            ++i;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 380,
      "functionName": "assignNames",
      "functionAnnotation": "",
      "functionDoc": "Determines which new names to substitute for the original names.\n",
      "diff": "",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,36 @@\n+private void assignNames(Set\u003cAssignment\u003e varsToRename) {\n+    NameGenerator globalNameGenerator \u003d new NameGenerator(reservedNames, prefix, reservedCharacters);\n+    NameGenerator localNameGenerator \u003d prefix.isEmpty() ? globalNameGenerator : new NameGenerator(reservedNames, \"\", reservedCharacters);\n+    List\u003cAssignment\u003e pendingAssignments \u003d new ArrayList\u003cAssignment\u003e();\n+    List\u003cString\u003e generatedNamesForAssignments \u003d new ArrayList\u003cString\u003e();\n+    for (Assignment a : varsToRename) {\n+        if (a.newName !\u003d null) {\n+            continue;\n+        }\n+        if (externNames.contains(a.oldName)) {\n+            continue;\n+        }\n+        String newName;\n+        if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) {\n+            newName \u003d localNameGenerator.generateNextName();\n+            finalizeNameAssignment(a, newName);\n+        } else {\n+            newName \u003d globalNameGenerator.generateNextName();\n+            pendingAssignments.add(a);\n+            generatedNamesForAssignments.add(newName);\n+        }\n+        reservedNames.add(newName);\n+    }\n+    int numPendingAssignments \u003d generatedNamesForAssignments.size();\n+    for (int i \u003d 0; i \u003c numPendingAssignments; ) {\n+        SortedSet\u003cAssignment\u003e varsByOrderOfOccurrence \u003d new TreeSet\u003cAssignment\u003e(ORDER_OF_OCCURRENCE_COMPARATOR);\n+        int len \u003d generatedNamesForAssignments.get(i).length();\n+        for (int j \u003d i; j \u003c numPendingAssignments \u0026\u0026 generatedNamesForAssignments.get(j).length() \u003d\u003d len; j++) {\n+            varsByOrderOfOccurrence.add(pendingAssignments.get(j));\n+        }\n+        for (Assignment a : varsByOrderOfOccurrence) {\n+            finalizeNameAssignment(a, generatedNamesForAssignments.get(i));\n+            ++i;\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void assignNames(Set\u003cAssignment\u003e varsToRename) {\n    NameGenerator globalNameGenerator \u003d new NameGenerator(reservedNames, prefix, reservedCharacters);\n    NameGenerator localNameGenerator \u003d prefix.isEmpty() ? globalNameGenerator : new NameGenerator(reservedNames, \"\", reservedCharacters);\n    List\u003cAssignment\u003e pendingAssignments \u003d new ArrayList\u003cAssignment\u003e();\n    List\u003cString\u003e generatedNamesForAssignments \u003d new ArrayList\u003cString\u003e();\n    for (Assignment a : varsToRename) {\n        if (a.newName !\u003d null) {\n            continue;\n        }\n        if (externNames.contains(a.oldName)) {\n            continue;\n        }\n        String newName;\n        if (a.oldName.startsWith(LOCAL_VAR_PREFIX)) {\n            newName \u003d localNameGenerator.generateNextName();\n            finalizeNameAssignment(a, newName);\n        } else {\n            newName \u003d globalNameGenerator.generateNextName();\n            pendingAssignments.add(a);\n            generatedNamesForAssignments.add(newName);\n        }\n        reservedNames.add(newName);\n    }\n    int numPendingAssignments \u003d generatedNamesForAssignments.size();\n    for (int i \u003d 0; i \u003c numPendingAssignments; ) {\n        SortedSet\u003cAssignment\u003e varsByOrderOfOccurrence \u003d new TreeSet\u003cAssignment\u003e(ORDER_OF_OCCURRENCE_COMPARATOR);\n        int len \u003d generatedNamesForAssignments.get(i).length();\n        for (int j \u003d i; j \u003c numPendingAssignments \u0026\u0026 generatedNamesForAssignments.get(j).length() \u003d\u003d len; j++) {\n            varsByOrderOfOccurrence.add(pendingAssignments.get(j));\n        }\n        for (Assignment a : varsByOrderOfOccurrence) {\n            finalizeNameAssignment(a, generatedNamesForAssignments.get(i));\n            ++i;\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameVars.java",
      "functionStartLine": 325,
      "functionName": "assignNames",
      "functionAnnotation": "",
      "functionDoc": "Determines which new names to substitute for the original names.\n"
    }
  }
}