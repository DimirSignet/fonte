{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PureFunctionIdentifier.java",
  "functionName": "markPureFunctionCalls",
  "functionId": "markPureFunctionCalls",
  "sourceFilePath": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
  "functionAnnotation": "",
  "functionDoc": "Set no side effect property at pure-function call sites.\n",
  "functionStartLine": 307,
  "functionEndLine": 365,
  "numCommitsSeen": 25,
  "timeTaken": 1528,
  "changeHistory": [
    "d48e656b8ef676a9d4d87503028d59628013307f",
    "6d4979514fd802dd4deded67f3ba1929e74a928d",
    "6a2378d43d1f06344f6418388d45c66fe3466a07",
    "a095236ba70304d61b8ec02ea316d3504cc0ea1d",
    "80fe41fd0173c3eaa56f4abb783031966ea89cef",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "d48e656b8ef676a9d4d87503028d59628013307f": "Ybodychange",
    "6d4979514fd802dd4deded67f3ba1929e74a928d": "Ybodychange",
    "6a2378d43d1f06344f6418388d45c66fe3466a07": "Ybodychange",
    "a095236ba70304d61b8ec02ea316d3504cc0ea1d": "Ybodychange",
    "80fe41fd0173c3eaa56f4abb783031966ea89cef": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d48e656b8ef676a9d4d87503028d59628013307f": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nBreaks builds\n\n*** Original change description ***\n\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dacleung,niranjan\nDELTA\u003d1003  (254 added, 671 deleted, 78 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@568 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 7:55 PM",
      "commitName": "d48e656b8ef676a9d4d87503028d59628013307f",
      "commitAuthor": "diegosalas@google.com",
      "commitDateOld": "11/22/10, 3:02 PM",
      "commitNameOld": "6d4979514fd802dd4deded67f3ba1929e74a928d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void markPureFunctionCalls() {\n    for (Node callNode : allFunctionCalls) {\n        Node name \u003d callNode.getFirstChild();\n        Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n        Node.SideEffectFlags flags \u003d new Node.SideEffectFlags();\n        if (defs \u003d\u003d null) {\n            flags.setMutatesGlobalState();\n            flags.setThrows();\n            flags.setReturnsTainted();\n        } else {\n            flags.clearAllFlags();\n            for (Definition def : defs) {\n                FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n                Preconditions.checkNotNull(functionInfo);\n                if (functionInfo.mutatesGlobalState()) {\n                    flags.setMutatesGlobalState();\n                }\n                if (functionInfo.functionThrows) {\n                    flags.setThrows();\n                }\n                if (!NodeUtil.isNew(callNode)) {\n                    if (functionInfo.taintsThis) {\n                        flags.setMutatesThis();\n                    }\n                }\n                if (functionInfo.taintsReturn) {\n                    flags.setReturnsTainted();\n                }\n                if (flags.areAllFlagsSet()) {\n                    break;\n                }\n            }\n        }\n        if (NodeUtil.isCall(callNode)) {\n            Preconditions.checkState(compiler !\u003d null);\n            if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n                flags.clearSideEffectFlags();\n            }\n        } else if (NodeUtil.isNew(callNode)) {\n            if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n                flags.clearSideEffectFlags();\n            }\n        }\n        callNode.setSideEffectFlags(flags.valueOf());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 307,
      "functionName": "markPureFunctionCalls",
      "functionAnnotation": "",
      "functionDoc": "Set no side effect property at pure-function call sites.\n",
      "diff": "@@ -1,46 +1,46 @@\n private void markPureFunctionCalls() {\n     for (Node callNode : allFunctionCalls) {\n         Node name \u003d callNode.getFirstChild();\n         Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n         Node.SideEffectFlags flags \u003d new Node.SideEffectFlags();\n         if (defs \u003d\u003d null) {\n             flags.setMutatesGlobalState();\n             flags.setThrows();\n             flags.setReturnsTainted();\n         } else {\n             flags.clearAllFlags();\n             for (Definition def : defs) {\n-                FunctionSideEffectData functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n+                FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n                 Preconditions.checkNotNull(functionInfo);\n                 if (functionInfo.mutatesGlobalState()) {\n                     flags.setMutatesGlobalState();\n                 }\n-                if (functionInfo.functionThrows()) {\n+                if (functionInfo.functionThrows) {\n                     flags.setThrows();\n                 }\n                 if (!NodeUtil.isNew(callNode)) {\n-                    if (functionInfo.mutatesThis()) {\n+                    if (functionInfo.taintsThis) {\n                         flags.setMutatesThis();\n                     }\n                 }\n-                if (functionInfo.hasNonLocalReturnValue()) {\n+                if (functionInfo.taintsReturn) {\n                     flags.setReturnsTainted();\n                 }\n                 if (flags.areAllFlagsSet()) {\n                     break;\n                 }\n             }\n         }\n         if (NodeUtil.isCall(callNode)) {\n             Preconditions.checkState(compiler !\u003d null);\n             if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n                 flags.clearSideEffectFlags();\n             }\n         } else if (NodeUtil.isNew(callNode)) {\n             if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n                 flags.clearSideEffectFlags();\n             }\n         }\n         callNode.setSideEffectFlags(flags.valueOf());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d4979514fd802dd4deded67f3ba1929e74a928d": {
      "type": "Ybodychange",
      "commitMessage": "\nPropagate known local value information across functions.  This also fixes\nproblems with incomplete local information.\n\nR\u003dnicksantos\nDELTA\u003d1000  (667 added, 250 deleted, 83 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d0\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@567 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/22/10, 3:02 PM",
      "commitName": "6d4979514fd802dd4deded67f3ba1929e74a928d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/15/10, 10:20 PM",
      "commitNameOld": "da794a3a9cb2cebc0efb708ba9b465a4510c7235",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 6.7,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "private void markPureFunctionCalls() {\n    for (Node callNode : allFunctionCalls) {\n        Node name \u003d callNode.getFirstChild();\n        Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n        Node.SideEffectFlags flags \u003d new Node.SideEffectFlags();\n        if (defs \u003d\u003d null) {\n            flags.setMutatesGlobalState();\n            flags.setThrows();\n            flags.setReturnsTainted();\n        } else {\n            flags.clearAllFlags();\n            for (Definition def : defs) {\n                FunctionSideEffectData functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n                Preconditions.checkNotNull(functionInfo);\n                if (functionInfo.mutatesGlobalState()) {\n                    flags.setMutatesGlobalState();\n                }\n                if (functionInfo.functionThrows()) {\n                    flags.setThrows();\n                }\n                if (!NodeUtil.isNew(callNode)) {\n                    if (functionInfo.mutatesThis()) {\n                        flags.setMutatesThis();\n                    }\n                }\n                if (functionInfo.hasNonLocalReturnValue()) {\n                    flags.setReturnsTainted();\n                }\n                if (flags.areAllFlagsSet()) {\n                    break;\n                }\n            }\n        }\n        if (NodeUtil.isCall(callNode)) {\n            Preconditions.checkState(compiler !\u003d null);\n            if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n                flags.clearSideEffectFlags();\n            }\n        } else if (NodeUtil.isNew(callNode)) {\n            if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n                flags.clearSideEffectFlags();\n            }\n        }\n        callNode.setSideEffectFlags(flags.valueOf());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 310,
      "functionName": "markPureFunctionCalls",
      "functionAnnotation": "",
      "functionDoc": "Set no side effect property at pure-function call sites.\n",
      "diff": "@@ -1,46 +1,46 @@\n private void markPureFunctionCalls() {\n     for (Node callNode : allFunctionCalls) {\n         Node name \u003d callNode.getFirstChild();\n         Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n         Node.SideEffectFlags flags \u003d new Node.SideEffectFlags();\n         if (defs \u003d\u003d null) {\n             flags.setMutatesGlobalState();\n             flags.setThrows();\n             flags.setReturnsTainted();\n         } else {\n             flags.clearAllFlags();\n             for (Definition def : defs) {\n-                FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n+                FunctionSideEffectData functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n                 Preconditions.checkNotNull(functionInfo);\n                 if (functionInfo.mutatesGlobalState()) {\n                     flags.setMutatesGlobalState();\n                 }\n-                if (functionInfo.functionThrows) {\n+                if (functionInfo.functionThrows()) {\n                     flags.setThrows();\n                 }\n                 if (!NodeUtil.isNew(callNode)) {\n-                    if (functionInfo.taintsThis) {\n+                    if (functionInfo.mutatesThis()) {\n                         flags.setMutatesThis();\n                     }\n                 }\n-                if (functionInfo.taintsReturn) {\n+                if (functionInfo.hasNonLocalReturnValue()) {\n                     flags.setReturnsTainted();\n                 }\n                 if (flags.areAllFlagsSet()) {\n                     break;\n                 }\n             }\n         }\n         if (NodeUtil.isCall(callNode)) {\n             Preconditions.checkState(compiler !\u003d null);\n             if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n                 flags.clearSideEffectFlags();\n             }\n         } else if (NodeUtil.isNew(callNode)) {\n             if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n                 flags.clearSideEffectFlags();\n             }\n         }\n         callNode.setSideEffectFlags(flags.valueOf());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6a2378d43d1f06344f6418388d45c66fe3466a07": {
      "type": "Ybodychange",
      "commitMessage": "\nTake advantage of the finer grain side-effect information when\ndetermining side-effects.\nThe bulk of the changes here are the move of the \"isKnownLocalValue\"\nfunction and its tests from to NodeUtil/NodeUtilTest.\n\nR\u003dnicksantos\nDELTA\u003d664  (419 added, 201 deleted, 44 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d260873\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@466 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/27/10, 4:16 PM",
      "commitName": "6a2378d43d1f06344f6418388d45c66fe3466a07",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/24/10, 11:05 AM",
      "commitNameOld": "9a05def053bc2ac4b24a5c1f72b35f6a2e753b0e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 3.22,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "private void markPureFunctionCalls() {\n    for (Node callNode : allFunctionCalls) {\n        Node name \u003d callNode.getFirstChild();\n        Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n        Node.SideEffectFlags flags \u003d new Node.SideEffectFlags();\n        if (defs \u003d\u003d null) {\n            flags.setMutatesGlobalState();\n            flags.setThrows();\n            flags.setReturnsTainted();\n        } else {\n            flags.clearAllFlags();\n            for (Definition def : defs) {\n                FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n                Preconditions.checkNotNull(functionInfo);\n                if (functionInfo.mutatesGlobalState()) {\n                    flags.setMutatesGlobalState();\n                }\n                if (functionInfo.functionThrows) {\n                    flags.setThrows();\n                }\n                if (!NodeUtil.isNew(callNode)) {\n                    if (functionInfo.taintsThis) {\n                        flags.setMutatesThis();\n                    }\n                }\n                if (functionInfo.taintsReturn) {\n                    flags.setReturnsTainted();\n                }\n                if (flags.areAllFlagsSet()) {\n                    break;\n                }\n            }\n        }\n        if (NodeUtil.isCall(callNode)) {\n            Preconditions.checkState(compiler !\u003d null);\n            if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n                flags.clearSideEffectFlags();\n            }\n        } else if (NodeUtil.isNew(callNode)) {\n            if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n                flags.clearSideEffectFlags();\n            }\n        }\n        callNode.setSideEffectFlags(flags.valueOf());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 304,
      "functionName": "markPureFunctionCalls",
      "functionAnnotation": "",
      "functionDoc": "Set no side effect property at pure-function call sites.\n",
      "diff": "@@ -1,46 +1,46 @@\n private void markPureFunctionCalls() {\n     for (Node callNode : allFunctionCalls) {\n         Node name \u003d callNode.getFirstChild();\n         Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n-        SideEffectFlags flags \u003d new SideEffectFlags();\n+        Node.SideEffectFlags flags \u003d new Node.SideEffectFlags();\n         if (defs \u003d\u003d null) {\n             flags.setMutatesGlobalState();\n             flags.setThrows();\n             flags.setReturnsTainted();\n         } else {\n             flags.clearAllFlags();\n             for (Definition def : defs) {\n                 FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n                 Preconditions.checkNotNull(functionInfo);\n                 if (functionInfo.mutatesGlobalState()) {\n                     flags.setMutatesGlobalState();\n                 }\n                 if (functionInfo.functionThrows) {\n                     flags.setThrows();\n                 }\n                 if (!NodeUtil.isNew(callNode)) {\n                     if (functionInfo.taintsThis) {\n                         flags.setMutatesThis();\n                     }\n                 }\n                 if (functionInfo.taintsReturn) {\n                     flags.setReturnsTainted();\n                 }\n                 if (flags.areAllFlagsSet()) {\n                     break;\n                 }\n             }\n         }\n         if (NodeUtil.isCall(callNode)) {\n             Preconditions.checkState(compiler !\u003d null);\n             if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n                 flags.clearSideEffectFlags();\n             }\n         } else if (NodeUtil.isNew(callNode)) {\n             if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n                 flags.clearSideEffectFlags();\n             }\n         }\n         callNode.setSideEffectFlags(flags.valueOf());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a095236ba70304d61b8ec02ea316d3504cc0ea1d": {
      "type": "Ybodychange",
      "commitMessage": "\nStore finer grain side-effect information on call nodes, also gather\nand a store call \"result locality\" information on call nodes.\n\nR\u003dnicksantos\nDELTA\u003d243  (210 added, 0 deleted, 33 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d249459\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@459 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/23/10, 5:03 PM",
      "commitName": "a095236ba70304d61b8ec02ea316d3504cc0ea1d",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "9/22/10, 8:39 PM",
      "commitNameOld": "ff81c557b950927e7853ca6d2c7441b6b1fe8822",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void markPureFunctionCalls() {\n    for (Node callNode : allFunctionCalls) {\n        Node name \u003d callNode.getFirstChild();\n        Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n        SideEffectFlags flags \u003d new SideEffectFlags();\n        if (defs \u003d\u003d null) {\n            flags.setMutatesGlobalState();\n            flags.setThrows();\n            flags.setReturnsTainted();\n        } else {\n            flags.clearAllFlags();\n            for (Definition def : defs) {\n                FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n                Preconditions.checkNotNull(functionInfo);\n                if (functionInfo.mutatesGlobalState()) {\n                    flags.setMutatesGlobalState();\n                }\n                if (functionInfo.functionThrows) {\n                    flags.setThrows();\n                }\n                if (!NodeUtil.isNew(callNode)) {\n                    if (functionInfo.taintsThis) {\n                        flags.setMutatesThis();\n                    }\n                }\n                if (functionInfo.taintsReturn) {\n                    flags.setReturnsTainted();\n                }\n                if (flags.areAllFlagsSet()) {\n                    break;\n                }\n            }\n        }\n        if (NodeUtil.isCall(callNode)) {\n            Preconditions.checkState(compiler !\u003d null);\n            if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n                flags.clearSideEffectFlags();\n            }\n        } else if (NodeUtil.isNew(callNode)) {\n            if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n                flags.clearSideEffectFlags();\n            }\n        }\n        callNode.setSideEffectFlags(flags.valueOf());\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 295,
      "functionName": "markPureFunctionCalls",
      "functionAnnotation": "",
      "functionDoc": "Set no side effect property at pure-function call sites.\n",
      "diff": "@@ -1,31 +1,46 @@\n private void markPureFunctionCalls() {\n     for (Node callNode : allFunctionCalls) {\n         Node name \u003d callNode.getFirstChild();\n         Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n-        boolean hasSideEffects \u003d true;\n-        if (defs !\u003d null) {\n-            hasSideEffects \u003d false;\n+        SideEffectFlags flags \u003d new SideEffectFlags();\n+        if (defs \u003d\u003d null) {\n+            flags.setMutatesGlobalState();\n+            flags.setThrows();\n+            flags.setReturnsTainted();\n+        } else {\n+            flags.clearAllFlags();\n             for (Definition def : defs) {\n                 FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n                 Preconditions.checkNotNull(functionInfo);\n-                if ((NodeUtil.isCall(callNode) \u0026\u0026 functionInfo.mayHaveSideEffects()) || (NodeUtil.isNew(callNode) \u0026\u0026 (functionInfo.mutatesGlobalState() || functionInfo.functionThrows()))) {\n-                    hasSideEffects \u003d true;\n+                if (functionInfo.mutatesGlobalState()) {\n+                    flags.setMutatesGlobalState();\n+                }\n+                if (functionInfo.functionThrows) {\n+                    flags.setThrows();\n+                }\n+                if (!NodeUtil.isNew(callNode)) {\n+                    if (functionInfo.taintsThis) {\n+                        flags.setMutatesThis();\n+                    }\n+                }\n+                if (functionInfo.taintsReturn) {\n+                    flags.setReturnsTainted();\n+                }\n+                if (flags.areAllFlagsSet()) {\n                     break;\n                 }\n             }\n         }\n         if (NodeUtil.isCall(callNode)) {\n             Preconditions.checkState(compiler !\u003d null);\n             if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n-                hasSideEffects \u003d false;\n+                flags.clearSideEffectFlags();\n             }\n         } else if (NodeUtil.isNew(callNode)) {\n             if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n-                hasSideEffects \u003d false;\n+                flags.clearSideEffectFlags();\n             }\n         }\n-        if (!hasSideEffects) {\n-            callNode.setIsNoSideEffectsCall();\n-        }\n+        callNode.setSideEffectFlags(flags.valueOf());\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "80fe41fd0173c3eaa56f4abb783031966ea89cef": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/04/09 by john\n\n        Part II: Use global RegExp reference information to optimize references when possible.\n\n        R\u003dalan\n        DELTA\u003d231  (173 added, 17 deleted, 41 changed)\n\nChange on 2010/04/09 by nicksantos\n\n        Make JsFileLineParser much more efficient for large files\n        (we were running into problems with it running out of memory.)\n\n        R\u003dandrew\n        DELTA\u003d192  (157 added, 1 deleted, 34 changed)\n\nChange on 2010/04/09 by alan\n\n        Fix typed code gen crash when generating typed code.\n\n        R\u003dnicksantos\n        DELTA\u003d35  (24 added, 2 deleted, 9 changed)\n\nChange on 2010/04/09 by alan\n\n        Disable method motion on functions that reads closure variables.\n\n        R\u003dnicksantos\n        DELTA\u003d171  (162 added, 1 deleted, 8 changed)\n\nChange on 2010/04/12 by nada\n\n        In AmbiguateProperties, invert the related type relationship, by\n        considering subclasses and implementors (down) instead of superclasses\n        and implemented interfaces (up). This has two advantages:\n\n        - The \u0027independent of\u0027 relationship is simplified, because we only\n          need to consider whether the related types intersect.\n\n        - We can account for \u0027multiple inheritance\u0027, which is a practical\n          issue because of interfaces.\n\n        Note that the \u0027up\u0027 relationship allows us to easily find common\n        ancestors while the \u0027down\u0027 relationship allows us to easily find\n        common descendants -- and this is what we care about for ambiguation.\n\n\n        R\u003dmoedinger\n        DELTA\u003d173  (124 added, 15 deleted, 34 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmwgnge\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@180 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/12/10, 7:59 AM",
      "commitName": "80fe41fd0173c3eaa56f4abb783031966ea89cef",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/25/10, 8:58 AM",
      "commitNameOld": "3ce4716848eb71b6e78a4545a2cc0c27e74a29b3",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 17.96,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "actualSource": "private void markPureFunctionCalls() {\n    for (Node callNode : allFunctionCalls) {\n        Node name \u003d callNode.getFirstChild();\n        Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n        boolean hasSideEffects \u003d true;\n        if (defs !\u003d null) {\n            hasSideEffects \u003d false;\n            for (Definition def : defs) {\n                FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n                Preconditions.checkNotNull(functionInfo);\n                if ((NodeUtil.isCall(callNode) \u0026\u0026 functionInfo.mayHaveSideEffects()) || (NodeUtil.isNew(callNode) \u0026\u0026 (functionInfo.mutatesGlobalState() || functionInfo.functionThrows()))) {\n                    hasSideEffects \u003d true;\n                    break;\n                }\n            }\n        }\n        if (NodeUtil.isCall(callNode)) {\n            Preconditions.checkState(compiler !\u003d null);\n            if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n                hasSideEffects \u003d false;\n            }\n        } else if (NodeUtil.isNew(callNode)) {\n            if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n                hasSideEffects \u003d false;\n            }\n        }\n        if (!hasSideEffects) {\n            callNode.setIsNoSideEffectsCall();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 280,
      "functionName": "markPureFunctionCalls",
      "functionAnnotation": "",
      "functionDoc": "Set no side effect property at pure-function call sites.\n",
      "diff": "@@ -1,21 +1,31 @@\n private void markPureFunctionCalls() {\n     for (Node callNode : allFunctionCalls) {\n         Node name \u003d callNode.getFirstChild();\n         Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n-        if (defs \u003d\u003d null) {\n-            continue;\n+        boolean hasSideEffects \u003d true;\n+        if (defs !\u003d null) {\n+            hasSideEffects \u003d false;\n+            for (Definition def : defs) {\n+                FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n+                Preconditions.checkNotNull(functionInfo);\n+                if ((NodeUtil.isCall(callNode) \u0026\u0026 functionInfo.mayHaveSideEffects()) || (NodeUtil.isNew(callNode) \u0026\u0026 (functionInfo.mutatesGlobalState() || functionInfo.functionThrows()))) {\n+                    hasSideEffects \u003d true;\n+                    break;\n+                }\n+            }\n         }\n-        boolean hasSideEffects \u003d false;\n-        for (Definition def : defs) {\n-            FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n-            Preconditions.checkNotNull(functionInfo);\n-            if ((NodeUtil.isCall(callNode) \u0026\u0026 functionInfo.mayHaveSideEffects()) || (NodeUtil.isNew(callNode) \u0026\u0026 (functionInfo.mutatesGlobalState() || functionInfo.functionThrows()))) {\n-                hasSideEffects \u003d true;\n-                break;\n+        if (NodeUtil.isCall(callNode)) {\n+            Preconditions.checkState(compiler !\u003d null);\n+            if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n+                hasSideEffects \u003d false;\n+            }\n+        } else if (NodeUtil.isNew(callNode)) {\n+            if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n+                hasSideEffects \u003d false;\n             }\n         }\n         if (!hasSideEffects) {\n             callNode.setIsNoSideEffectsCall();\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,21 @@\n+private void markPureFunctionCalls() {\n+    for (Node callNode : allFunctionCalls) {\n+        Node name \u003d callNode.getFirstChild();\n+        Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n+        if (defs \u003d\u003d null) {\n+            continue;\n+        }\n+        boolean hasSideEffects \u003d false;\n+        for (Definition def : defs) {\n+            FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n+            Preconditions.checkNotNull(functionInfo);\n+            if ((NodeUtil.isCall(callNode) \u0026\u0026 functionInfo.mayHaveSideEffects()) || (NodeUtil.isNew(callNode) \u0026\u0026 (functionInfo.mutatesGlobalState() || functionInfo.functionThrows()))) {\n+                hasSideEffects \u003d true;\n+                break;\n+            }\n+        }\n+        if (!hasSideEffects) {\n+            callNode.setIsNoSideEffectsCall();\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void markPureFunctionCalls() {\n    for (Node callNode : allFunctionCalls) {\n        Node name \u003d callNode.getFirstChild();\n        Collection\u003cDefinition\u003e defs \u003d getCallableDefinitions(definitionProvider, name);\n        if (defs \u003d\u003d null) {\n            continue;\n        }\n        boolean hasSideEffects \u003d false;\n        for (Definition def : defs) {\n            FunctionInformation functionInfo \u003d functionSideEffectMap.get(def.getRValue());\n            Preconditions.checkNotNull(functionInfo);\n            if ((NodeUtil.isCall(callNode) \u0026\u0026 functionInfo.mayHaveSideEffects()) || (NodeUtil.isNew(callNode) \u0026\u0026 (functionInfo.mutatesGlobalState() || functionInfo.functionThrows()))) {\n                hasSideEffects \u003d true;\n                break;\n            }\n        }\n        if (!hasSideEffects) {\n            callNode.setIsNoSideEffectsCall();\n        }\n    }\n}",
      "path": "src/com/google/javascript/jscomp/PureFunctionIdentifier.java",
      "functionStartLine": 262,
      "functionName": "markPureFunctionCalls",
      "functionAnnotation": "",
      "functionDoc": "Set no side effect property at pure-function call sites.\n"
    }
  }
}