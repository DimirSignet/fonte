{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MinimizeExitPoints.java",
  "functionName": "visit",
  "functionId": "visit___t-NodeTraversal__n-Node__parent-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 51,
  "functionEndLine": 83,
  "numCommitsSeen": 9,
  "timeTaken": 482,
  "changeHistory": [
    "86a7d25f3cc1177f35dc6480260fb807912c03fa",
    "e33e925eea3a8e4de958864e531e1adc4da62e18",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": "Ybodychange",
    "e33e925eea3a8e4de958864e531e1adc4da62e18": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "86a7d25f3cc1177f35dc6480260fb807912c03fa": {
      "type": "Ybodychange",
      "commitMessage": "\nFix bad folding of expressions containing object and array literals with side-effects.\n\nR\u003dnicksantos\nDELTA\u003d144  (94 added, 0 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1088\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@941 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/25/11, 4:27 PM",
      "commitName": "86a7d25f3cc1177f35dc6480260fb807912c03fa",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/10/11, 3:34 PM",
      "commitNameOld": "a2715a52745d816a87c05d3007ed8bfe7ef18491",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 14.99,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.LABEL:\n            tryMinimizeExits(n.getLastChild(), Token.BREAK, n.getFirstChild().getString());\n            break;\n        case Token.FOR:\n        case Token.WHILE:\n            tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n            break;\n        case Token.DO:\n            tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n            Node cond \u003d NodeUtil.getConditionExpression(n);\n            if (NodeUtil.getImpureBooleanValue(cond) \u003d\u003d TernaryValue.FALSE) {\n                tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);\n            }\n            break;\n        case Token.FUNCTION:\n            tryMinimizeExits(n.getLastChild(), Token.RETURN, null);\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
      "functionStartLine": 51,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.LABEL:\n             tryMinimizeExits(n.getLastChild(), Token.BREAK, n.getFirstChild().getString());\n             break;\n         case Token.FOR:\n         case Token.WHILE:\n             tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n             break;\n         case Token.DO:\n             tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n             Node cond \u003d NodeUtil.getConditionExpression(n);\n-            if (NodeUtil.getBooleanValue(cond) \u003d\u003d TernaryValue.FALSE) {\n+            if (NodeUtil.getImpureBooleanValue(cond) \u003d\u003d TernaryValue.FALSE) {\n                 tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);\n             }\n             break;\n         case Token.FUNCTION:\n             tryMinimizeExits(n.getLastChild(), Token.RETURN, null);\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e33e925eea3a8e4de958864e531e1adc4da62e18": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/06/14 by johnlenz\n\n        Remove unneed parenthese from hook expressions.\n\n        R\u003dacleung\n        DELTA\u003d76  (20 added, 4 deleted, 52 changed)\n\nChange on 2010/06/14 by johnlenz\n\n        Fix non-determinisim.\n\n        R\u003djschorr\n        DELTA\u003d5  (3 added, 0 deleted, 2 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        fix a regression caused by a change in the ordering in which\n        constant folding is done.\n        parts of PeepholeSubstituteAlternateSyntax will crash if they\n        see a NEG node with a NUMBER child.\n        They were assuming that FoldConstants would fold these into one node.\n\n        R\u003ddcc,acleung\n        DELTA\u003d153  (70 added, 6 deleted, 77 changed)\n\nChange on 2010/06/15 by johnlenz\n\n        More debug diffing improvements: convert unique globally unique names\n        to locally unique names for reproduciblity.\n\n        R\u003dacleung\n        DELTA\u003d222  (44 added, 7 deleted, 171 changed)\n\nChange on 2010/06/15 by nicksantos\n\n        Add the @nocompile annotation as a signal that this file should\n        be dropped silently if it gets pulled into a --manage_closure_dependencies\n        build.\n\n        R\u003dbowdidge,gboyer\n        DELTA\u003d82  (60 added, 1 deleted, 21 changed)\n\nChange on 2010/06/15 by dcc\n\n        Refactor FoldConstants dead code removal into PeepholeRemoveDeadCode.\n\n        R\u003dacleung\n        DELTA\u003d744  (403 added, 307 deleted, 34 changed)\n\nChange on 2010/06/15 by dcc\n\n        ExternExports test now emits type annotation for exported externs.\n                - Changed ExternExportsPass to generate the externs as an AST and then print\n        to a String rather than ad hoc with a StringBuilder.\n                - Changed TypedCodeGenerator to generate \u0027*\u0027 (AllType) for parameters with unknown types rather than \u0027?\u0027 (UnknownType) since \u0027?\u0027 is not valid JSDoc.\n\n        R\u003dacleung\n        DELTA\u003d643  (496 added, 66 deleted, 81 changed)\n\nChange on 2010/06/16 by johnlenz\n\n        Tweak to PureFunctionIndentifier to propagate the side-effects for\n        anonymous function expressions like: (Date.now||function(){return\n        +new Date})()\n\n        R\u003davd\n        DELTA\u003d42  (39 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d29010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@243 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/16/10, 12:33 PM",
      "commitName": "e33e925eea3a8e4de958864e531e1adc4da62e18",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/14/10, 4:53 PM",
      "commitNameOld": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 62.82,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.LABEL:\n            tryMinimizeExits(n.getLastChild(), Token.BREAK, n.getFirstChild().getString());\n            break;\n        case Token.FOR:\n        case Token.WHILE:\n            tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n            break;\n        case Token.DO:\n            tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n            Node cond \u003d NodeUtil.getConditionExpression(n);\n            if (NodeUtil.getBooleanValue(cond) \u003d\u003d TernaryValue.FALSE) {\n                tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);\n            }\n            break;\n        case Token.FUNCTION:\n            tryMinimizeExits(n.getLastChild(), Token.RETURN, null);\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
      "functionStartLine": 51,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,22 +1,22 @@\n @Override\n public void visit(NodeTraversal t, Node n, Node parent) {\n     switch(n.getType()) {\n         case Token.LABEL:\n             tryMinimizeExits(n.getLastChild(), Token.BREAK, n.getFirstChild().getString());\n             break;\n         case Token.FOR:\n         case Token.WHILE:\n             tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n             break;\n         case Token.DO:\n             tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n             Node cond \u003d NodeUtil.getConditionExpression(n);\n-            if (NodeUtil.isLiteralValue(cond) \u0026\u0026 !NodeUtil.getBooleanValue(cond)) {\n+            if (NodeUtil.getBooleanValue(cond) \u003d\u003d TernaryValue.FALSE) {\n                 tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);\n             }\n             break;\n         case Token.FUNCTION:\n             tryMinimizeExits(n.getLastChild(), Token.RETURN, null);\n             break;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,22 @@\n+@Override\n+public void visit(NodeTraversal t, Node n, Node parent) {\n+    switch(n.getType()) {\n+        case Token.LABEL:\n+            tryMinimizeExits(n.getLastChild(), Token.BREAK, n.getFirstChild().getString());\n+            break;\n+        case Token.FOR:\n+        case Token.WHILE:\n+            tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n+            break;\n+        case Token.DO:\n+            tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n+            Node cond \u003d NodeUtil.getConditionExpression(n);\n+            if (NodeUtil.isLiteralValue(cond) \u0026\u0026 !NodeUtil.getBooleanValue(cond)) {\n+                tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);\n+            }\n+            break;\n+        case Token.FUNCTION:\n+            tryMinimizeExits(n.getLastChild(), Token.RETURN, null);\n+            break;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void visit(NodeTraversal t, Node n, Node parent) {\n    switch(n.getType()) {\n        case Token.LABEL:\n            tryMinimizeExits(n.getLastChild(), Token.BREAK, n.getFirstChild().getString());\n            break;\n        case Token.FOR:\n        case Token.WHILE:\n            tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n            break;\n        case Token.DO:\n            tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n            Node cond \u003d NodeUtil.getConditionExpression(n);\n            if (NodeUtil.isLiteralValue(cond) \u0026\u0026 !NodeUtil.getBooleanValue(cond)) {\n                tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);\n            }\n            break;\n        case Token.FUNCTION:\n            tryMinimizeExits(n.getLastChild(), Token.RETURN, null);\n            break;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/MinimizeExitPoints.java",
      "functionStartLine": 50,
      "functionName": "visit",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}