{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LightweightMessageFormatter.java",
  "functionName": "format",
  "functionId": "format___error-JSError__warning-boolean",
  "sourceFilePath": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 66,
  "functionEndLine": 111,
  "numCommitsSeen": 14,
  "timeTaken": 686,
  "changeHistory": [
    "b12d1d6489329c989b15635f6f7f06681b3f6582",
    "22a1fcd79bd2bfbfdc9e80d5162bdf19065f9e5e",
    "37b0e1b0b5860e6cd4f48519c1105623778dc44f",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
    "030f59d811ce0b6cbeb7900004b4a08418942a04",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "b12d1d6489329c989b15635f6f7f06681b3f6582": "Ybodychange",
    "22a1fcd79bd2bfbfdc9e80d5162bdf19065f9e5e": "Ybodychange",
    "37b0e1b0b5860e6cd4f48519c1105623778dc44f": "Ybodychange",
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": "Yformatchange",
    "030f59d811ce0b6cbeb7900004b4a08418942a04": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b12d1d6489329c989b15635f6f7f06681b3f6582": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nFixes test case\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\n\n\n*** Original change description ***\n\nColumn-indicating caret can be in the end of a line. \nFixes issue 487.\n\nR\u003dkennberg,nicksantos\nDELTA\u003d24  (21 added, 0 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2423\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1220 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/28/11, 10:08 AM",
      "commitName": "b12d1d6489329c989b15635f6f7f06681b3f6582",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "6/27/11, 3:16 PM",
      "commitNameOld": "22a1fcd79bd2bfbfdc9e80d5162bdf19065f9e5e",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private String format(JSError error, boolean warning) {\n    SourceExcerptProvider source \u003d getSource();\n    String sourceExcerpt \u003d source \u003d\u003d null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n    StringBuilder b \u003d new StringBuilder();\n    if (error.sourceName !\u003d null) {\n        b.append(error.sourceName);\n        if (error.lineNumber \u003e 0) {\n            b.append(\u0027:\u0027);\n            b.append(error.lineNumber);\n        }\n        b.append(\": \");\n    }\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n    b.append(error.description);\n    b.append(\u0027\\n\u0027);\n    if (sourceExcerpt !\u003d null) {\n        b.append(sourceExcerpt);\n        b.append(\u0027\\n\u0027);\n        int charno \u003d error.getCharno();\n        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c\u003d sourceExcerpt.length()) {\n            for (int i \u003d 0; i \u003c charno; i++) {\n                char c \u003d sourceExcerpt.charAt(i);\n                if (Character.isWhitespace(c)) {\n                    b.append(c);\n                } else {\n                    b.append(\u0027 \u0027);\n                }\n            }\n            b.append(\"^\\n\");\n        }\n    }\n    return b.toString();\n}",
      "path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
      "functionStartLine": 66,
      "functionName": "format",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n private String format(JSError error, boolean warning) {\n     SourceExcerptProvider source \u003d getSource();\n     String sourceExcerpt \u003d source \u003d\u003d null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n     StringBuilder b \u003d new StringBuilder();\n     if (error.sourceName !\u003d null) {\n         b.append(error.sourceName);\n         if (error.lineNumber \u003e 0) {\n             b.append(\u0027:\u0027);\n             b.append(error.lineNumber);\n         }\n         b.append(\": \");\n     }\n     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n     b.append(\" - \");\n     b.append(error.description);\n     b.append(\u0027\\n\u0027);\n     if (sourceExcerpt !\u003d null) {\n         b.append(sourceExcerpt);\n         b.append(\u0027\\n\u0027);\n         int charno \u003d error.getCharno();\n-        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c sourceExcerpt.length()) {\n+        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c\u003d sourceExcerpt.length()) {\n             for (int i \u003d 0; i \u003c charno; i++) {\n                 char c \u003d sourceExcerpt.charAt(i);\n                 if (Character.isWhitespace(c)) {\n                     b.append(c);\n                 } else {\n                     b.append(\u0027 \u0027);\n                 }\n             }\n             b.append(\"^\\n\");\n         }\n     }\n     return b.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "22a1fcd79bd2bfbfdc9e80d5162bdf19065f9e5e": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\n\u003center reason for rollback\u003e\n\n*** Original change description ***\n\nColumn-indicating caret can be in the end of a line. \nFixes issue 487.\n\nR\u003dacleung\nDELTA\u003d21  (0 added, 20 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2421\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1218 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/27/11, 3:16 PM",
      "commitName": "22a1fcd79bd2bfbfdc9e80d5162bdf19065f9e5e",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "6/27/11, 1:47 PM",
      "commitNameOld": "37b0e1b0b5860e6cd4f48519c1105623778dc44f",
      "commitAuthorOld": "zhuyi@google.com",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private String format(JSError error, boolean warning) {\n    SourceExcerptProvider source \u003d getSource();\n    String sourceExcerpt \u003d source \u003d\u003d null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n    StringBuilder b \u003d new StringBuilder();\n    if (error.sourceName !\u003d null) {\n        b.append(error.sourceName);\n        if (error.lineNumber \u003e 0) {\n            b.append(\u0027:\u0027);\n            b.append(error.lineNumber);\n        }\n        b.append(\": \");\n    }\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n    b.append(error.description);\n    b.append(\u0027\\n\u0027);\n    if (sourceExcerpt !\u003d null) {\n        b.append(sourceExcerpt);\n        b.append(\u0027\\n\u0027);\n        int charno \u003d error.getCharno();\n        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c sourceExcerpt.length()) {\n            for (int i \u003d 0; i \u003c charno; i++) {\n                char c \u003d sourceExcerpt.charAt(i);\n                if (Character.isWhitespace(c)) {\n                    b.append(c);\n                } else {\n                    b.append(\u0027 \u0027);\n                }\n            }\n            b.append(\"^\\n\");\n        }\n    }\n    return b.toString();\n}",
      "path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
      "functionStartLine": 66,
      "functionName": "format",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n private String format(JSError error, boolean warning) {\n     SourceExcerptProvider source \u003d getSource();\n     String sourceExcerpt \u003d source \u003d\u003d null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n     StringBuilder b \u003d new StringBuilder();\n     if (error.sourceName !\u003d null) {\n         b.append(error.sourceName);\n         if (error.lineNumber \u003e 0) {\n             b.append(\u0027:\u0027);\n             b.append(error.lineNumber);\n         }\n         b.append(\": \");\n     }\n     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n     b.append(\" - \");\n     b.append(error.description);\n     b.append(\u0027\\n\u0027);\n     if (sourceExcerpt !\u003d null) {\n         b.append(sourceExcerpt);\n         b.append(\u0027\\n\u0027);\n         int charno \u003d error.getCharno();\n-        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c\u003d sourceExcerpt.length()) {\n+        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c sourceExcerpt.length()) {\n             for (int i \u003d 0; i \u003c charno; i++) {\n                 char c \u003d sourceExcerpt.charAt(i);\n                 if (Character.isWhitespace(c)) {\n                     b.append(c);\n                 } else {\n                     b.append(\u0027 \u0027);\n                 }\n             }\n             b.append(\"^\\n\");\n         }\n     }\n     return b.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "37b0e1b0b5860e6cd4f48519c1105623778dc44f": {
      "type": "Ybodychange",
      "commitMessage": "\nColumn-indicating caret can be in the end of a line. \nFixes issue 487.\n\nR\u003dacleung\nDELTA\u003d21  (20 added, 0 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2418\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1215 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/27/11, 1:47 PM",
      "commitName": "37b0e1b0b5860e6cd4f48519c1105623778dc44f",
      "commitAuthor": "zhuyi@google.com",
      "commitDateOld": "4/12/11, 12:15 PM",
      "commitNameOld": "f322be0e576d5e2114cb59c0a6537197997b9c59",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 76.06,
      "commitsBetweenForRepo": 210,
      "commitsBetweenForFile": 1,
      "actualSource": "private String format(JSError error, boolean warning) {\n    SourceExcerptProvider source \u003d getSource();\n    String sourceExcerpt \u003d source \u003d\u003d null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n    StringBuilder b \u003d new StringBuilder();\n    if (error.sourceName !\u003d null) {\n        b.append(error.sourceName);\n        if (error.lineNumber \u003e 0) {\n            b.append(\u0027:\u0027);\n            b.append(error.lineNumber);\n        }\n        b.append(\": \");\n    }\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n    b.append(error.description);\n    b.append(\u0027\\n\u0027);\n    if (sourceExcerpt !\u003d null) {\n        b.append(sourceExcerpt);\n        b.append(\u0027\\n\u0027);\n        int charno \u003d error.getCharno();\n        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c\u003d sourceExcerpt.length()) {\n            for (int i \u003d 0; i \u003c charno; i++) {\n                char c \u003d sourceExcerpt.charAt(i);\n                if (Character.isWhitespace(c)) {\n                    b.append(c);\n                } else {\n                    b.append(\u0027 \u0027);\n                }\n            }\n            b.append(\"^\\n\");\n        }\n    }\n    return b.toString();\n}",
      "path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
      "functionStartLine": 66,
      "functionName": "format",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n private String format(JSError error, boolean warning) {\n     SourceExcerptProvider source \u003d getSource();\n     String sourceExcerpt \u003d source \u003d\u003d null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n     StringBuilder b \u003d new StringBuilder();\n     if (error.sourceName !\u003d null) {\n         b.append(error.sourceName);\n         if (error.lineNumber \u003e 0) {\n             b.append(\u0027:\u0027);\n             b.append(error.lineNumber);\n         }\n         b.append(\": \");\n     }\n     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n     b.append(\" - \");\n     b.append(error.description);\n     b.append(\u0027\\n\u0027);\n     if (sourceExcerpt !\u003d null) {\n         b.append(sourceExcerpt);\n         b.append(\u0027\\n\u0027);\n         int charno \u003d error.getCharno();\n-        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c sourceExcerpt.length()) {\n+        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c\u003d sourceExcerpt.length()) {\n             for (int i \u003d 0; i \u003c charno; i++) {\n                 char c \u003d sourceExcerpt.charAt(i);\n                 if (Character.isWhitespace(c)) {\n                     b.append(c);\n                 } else {\n                     b.append(\u0027 \u0027);\n                 }\n             }\n             b.append(\"^\\n\");\n         }\n     }\n     return b.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9de5e9b4671773bb3f2d5932e57c1b4186b9b777": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/06/30 15:06:33 by johnlenz\n\n\tAdd a diagnostic group so that projects with weird externs can opt-out of the stricter extern checks.\n\n\tR\u003dnicksantos\n\tDELTA\u003d54  (52 added, 0 deleted, 2 changed)\n\nChange on 2010/06/30 17:56:51 by johnlenz\n\n\tRevert warning levels until after a release is put out to control them.\n\n\tR\u003dnicksantos\n\tDELTA\u003d4  (2 added, 0 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d47002\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@260 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/1/10, 7:38 AM",
      "commitName": "9de5e9b4671773bb3f2d5932e57c1b4186b9b777",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "3/19/10, 9:51 AM",
      "commitNameOld": "030f59d811ce0b6cbeb7900004b4a08418942a04",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 103.91,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "actualSource": "private String format(JSError error, boolean warning) {\n    SourceExcerptProvider source \u003d getSource();\n    String sourceExcerpt \u003d source \u003d\u003d null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n    StringBuilder b \u003d new StringBuilder();\n    if (error.sourceName !\u003d null) {\n        b.append(error.sourceName);\n        if (error.lineNumber \u003e 0) {\n            b.append(\u0027:\u0027);\n            b.append(error.lineNumber);\n        }\n        b.append(\": \");\n    }\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n    b.append(error.description);\n    b.append(\u0027\\n\u0027);\n    if (sourceExcerpt !\u003d null) {\n        b.append(sourceExcerpt);\n        b.append(\u0027\\n\u0027);\n        int charno \u003d error.getCharno();\n        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c sourceExcerpt.length()) {\n            for (int i \u003d 0; i \u003c charno; i++) {\n                char c \u003d sourceExcerpt.charAt(i);\n                if (Character.isWhitespace(c)) {\n                    b.append(c);\n                } else {\n                    b.append(\u0027 \u0027);\n                }\n            }\n            b.append(\"^\\n\");\n        }\n    }\n    return b.toString();\n}",
      "path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
      "functionStartLine": 67,
      "functionName": "format",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "030f59d811ce0b6cbeb7900004b4a08418942a04": {
      "type": "Ybodychange",
      "commitMessage": "a much cleaner way to do message formatting. (Nick)\nr\u003drobert\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@144 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/19/10, 9:51 AM",
      "commitName": "030f59d811ce0b6cbeb7900004b4a08418942a04",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "2/12/10, 11:40 AM",
      "commitNameOld": "b8c52bf5e76948ee8d561fa55a36cc6c9f5d0c68",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 34.88,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "actualSource": "private String format(JSError error, boolean warning) {\n    SourceExcerptProvider source \u003d getSource();\n    String sourceExcerpt \u003d source \u003d\u003d null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n    StringBuilder b \u003d new StringBuilder();\n    if (error.sourceName !\u003d null) {\n        b.append(error.sourceName);\n        if (error.lineNumber \u003e 0) {\n            b.append(\u0027:\u0027);\n            b.append(error.lineNumber);\n        }\n        b.append(\": \");\n    }\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n    b.append(error.description);\n    b.append(\u0027\\n\u0027);\n    if (sourceExcerpt !\u003d null) {\n        b.append(sourceExcerpt);\n        b.append(\u0027\\n\u0027);\n        int charno \u003d error.getCharno();\n        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c sourceExcerpt.length()) {\n            for (int i \u003d 0; i \u003c charno; i++) {\n                char c \u003d sourceExcerpt.charAt(i);\n                if (Character.isWhitespace(c)) {\n                    b.append(c);\n                } else {\n                    b.append(\u0027 \u0027);\n                }\n            }\n            b.append(\"^\\n\");\n        }\n    }\n    return b.toString();\n}",
      "path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
      "functionStartLine": 67,
      "functionName": "format",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,34 +1,34 @@\n private String format(JSError error, boolean warning) {\n     SourceExcerptProvider source \u003d getSource();\n-    String sourceExcerpt \u003d excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n+    String sourceExcerpt \u003d source \u003d\u003d null ? null : excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n     StringBuilder b \u003d new StringBuilder();\n     if (error.sourceName !\u003d null) {\n         b.append(error.sourceName);\n         if (error.lineNumber \u003e 0) {\n             b.append(\u0027:\u0027);\n             b.append(error.lineNumber);\n         }\n         b.append(\": \");\n     }\n     b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n     b.append(\" - \");\n     b.append(error.description);\n     b.append(\u0027\\n\u0027);\n     if (sourceExcerpt !\u003d null) {\n         b.append(sourceExcerpt);\n         b.append(\u0027\\n\u0027);\n         int charno \u003d error.getCharno();\n         if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c sourceExcerpt.length()) {\n             for (int i \u003d 0; i \u003c charno; i++) {\n                 char c \u003d sourceExcerpt.charAt(i);\n                 if (Character.isWhitespace(c)) {\n                     b.append(c);\n                 } else {\n                     b.append(\u0027 \u0027);\n                 }\n             }\n             b.append(\"^\\n\");\n         }\n     }\n     return b.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,34 @@\n+private String format(JSError error, boolean warning) {\n+    SourceExcerptProvider source \u003d getSource();\n+    String sourceExcerpt \u003d excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n+    StringBuilder b \u003d new StringBuilder();\n+    if (error.sourceName !\u003d null) {\n+        b.append(error.sourceName);\n+        if (error.lineNumber \u003e 0) {\n+            b.append(\u0027:\u0027);\n+            b.append(error.lineNumber);\n+        }\n+        b.append(\": \");\n+    }\n+    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n+    b.append(\" - \");\n+    b.append(error.description);\n+    b.append(\u0027\\n\u0027);\n+    if (sourceExcerpt !\u003d null) {\n+        b.append(sourceExcerpt);\n+        b.append(\u0027\\n\u0027);\n+        int charno \u003d error.getCharno();\n+        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c sourceExcerpt.length()) {\n+            for (int i \u003d 0; i \u003c charno; i++) {\n+                char c \u003d sourceExcerpt.charAt(i);\n+                if (Character.isWhitespace(c)) {\n+                    b.append(c);\n+                } else {\n+                    b.append(\u0027 \u0027);\n+                }\n+            }\n+            b.append(\"^\\n\");\n+        }\n+    }\n+    return b.toString();\n+}\n\\ No newline at end of file\n",
      "actualSource": "private String format(JSError error, boolean warning) {\n    SourceExcerptProvider source \u003d getSource();\n    String sourceExcerpt \u003d excerpt.get(source, error.sourceName, error.lineNumber, excerptFormatter);\n    StringBuilder b \u003d new StringBuilder();\n    if (error.sourceName !\u003d null) {\n        b.append(error.sourceName);\n        if (error.lineNumber \u003e 0) {\n            b.append(\u0027:\u0027);\n            b.append(error.lineNumber);\n        }\n        b.append(\": \");\n    }\n    b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));\n    b.append(\" - \");\n    b.append(error.description);\n    b.append(\u0027\\n\u0027);\n    if (sourceExcerpt !\u003d null) {\n        b.append(sourceExcerpt);\n        b.append(\u0027\\n\u0027);\n        int charno \u003d error.getCharno();\n        if (excerpt.equals(LINE) \u0026\u0026 0 \u003c\u003d charno \u0026\u0026 charno \u003c sourceExcerpt.length()) {\n            for (int i \u003d 0; i \u003c charno; i++) {\n                char c \u003d sourceExcerpt.charAt(i);\n                if (Character.isWhitespace(c)) {\n                    b.append(c);\n                } else {\n                    b.append(\u0027 \u0027);\n                }\n            }\n            b.append(\"^\\n\");\n        }\n    }\n    return b.toString();\n}",
      "path": "src/com/google/javascript/jscomp/LightweightMessageFormatter.java",
      "functionStartLine": 54,
      "functionName": "format",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}