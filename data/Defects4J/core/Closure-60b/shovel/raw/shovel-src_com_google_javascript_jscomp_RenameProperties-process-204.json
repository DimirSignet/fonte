{
  "origin": "codeshovel",
  "repositoryName": "Closure-60b",
  "repositoryPath": "/tmp/Closure-60b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RenameProperties.java",
  "functionName": "process",
  "functionId": "process___externs-Node__root-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/RenameProperties.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 204,
  "functionEndLine": 271,
  "numCommitsSeen": 18,
  "timeTaken": 1229,
  "changeHistory": [
    "8703ffc3c1e71d42a8a41932055a875bf428bf8d",
    "e13c794216c0a0e2affd53039a7d715086bc135e",
    "26d86562dbca7b21739296826935b74e2cd75dbf",
    "19ecde4b224e78d3cf3ebad293a76a0d7b7bf376",
    "5cd9c1efe90dc7c1be33cd7f8c1dcbaa9225909e",
    "5da32cba7b68d69acfc535f57f21d652475d256f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "8703ffc3c1e71d42a8a41932055a875bf428bf8d": "Ybodychange",
    "e13c794216c0a0e2affd53039a7d715086bc135e": "Ybodychange",
    "26d86562dbca7b21739296826935b74e2cd75dbf": "Ybodychange",
    "19ecde4b224e78d3cf3ebad293a76a0d7b7bf376": "Ybodychange",
    "5cd9c1efe90dc7c1be33cd7f8c1dcbaa9225909e": "Ybodychange",
    "5da32cba7b68d69acfc535f57f21d652475d256f": "Ymultichange(Yannotationchange,Ydocchange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8703ffc3c1e71d42a8a41932055a875bf428bf8d": {
      "type": "Ybodychange",
      "commitMessage": "\nFlag for property affinity.\n\nR\u003djohnlenz\nDELTA\u003d68  (56 added, 1 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1139\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@952 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/30/11, 7:59 AM",
      "commitName": "8703ffc3c1e71d42a8a41932055a875bf428bf8d",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "3/23/11, 12:40 PM",
      "commitNameOld": "e13c794216c0a0e2affd53039a7d715086bc135e",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 6.81,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n    Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n    reservedNames.addAll(externedNames);\n    reservedNames.addAll(quotedNames);\n    if (prevUsedPropertyMap !\u003d null) {\n        reusePropertyNames(reservedNames, propertyMap.values());\n    }\n    compiler.addToDebugLog(\"JS property assignments:\");\n    if (affinityGraph !\u003d null) {\n        computeAffinityScores();\n    }\n    Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n    propsByFreq.addAll(propertyMap.values());\n    generateNames(propsByFreq, reservedNames);\n    boolean changed \u003d false;\n    for (Node n : stringNodesToRename) {\n        String oldName \u003d n.getString();\n        Property p \u003d propertyMap.get(oldName);\n        if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n            Preconditions.checkState(oldName.equals(p.oldName));\n            n.setString(p.newName);\n            changed \u003d changed || !p.newName.equals(oldName);\n        }\n    }\n    for (Node n : callNodeToParentMap.keySet()) {\n        Node parent \u003d callNodeToParentMap.get(n);\n        Node firstArg \u003d n.getFirstChild().getNext();\n        StringBuilder sb \u003d new StringBuilder();\n        for (String oldName : firstArg.getString().split(\"[.]\")) {\n            Property p \u003d propertyMap.get(oldName);\n            String replacement;\n            if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                Preconditions.checkState(oldName.equals(p.oldName));\n                replacement \u003d p.newName;\n            } else {\n                replacement \u003d oldName;\n            }\n            if (sb.length() \u003e 0) {\n                sb.append(\u0027.\u0027);\n            }\n            sb.append(replacement);\n        }\n        parent.replaceChild(n, Node.newString(sb.toString()));\n        changed \u003d true;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 204,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,54 @@\n @Override\n public void process(Node externs, Node root) {\n     Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n     NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n     NodeTraversal.traverse(compiler, root, new ProcessProperties());\n     Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n     reservedNames.addAll(externedNames);\n     reservedNames.addAll(quotedNames);\n     if (prevUsedPropertyMap !\u003d null) {\n         reusePropertyNames(reservedNames, propertyMap.values());\n     }\n     compiler.addToDebugLog(\"JS property assignments:\");\n-    computeAffinityScores();\n+    if (affinityGraph !\u003d null) {\n+        computeAffinityScores();\n+    }\n     Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n     propsByFreq.addAll(propertyMap.values());\n     generateNames(propsByFreq, reservedNames);\n     boolean changed \u003d false;\n     for (Node n : stringNodesToRename) {\n         String oldName \u003d n.getString();\n         Property p \u003d propertyMap.get(oldName);\n         if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n             Preconditions.checkState(oldName.equals(p.oldName));\n             n.setString(p.newName);\n             changed \u003d changed || !p.newName.equals(oldName);\n         }\n     }\n     for (Node n : callNodeToParentMap.keySet()) {\n         Node parent \u003d callNodeToParentMap.get(n);\n         Node firstArg \u003d n.getFirstChild().getNext();\n         StringBuilder sb \u003d new StringBuilder();\n         for (String oldName : firstArg.getString().split(\"[.]\")) {\n             Property p \u003d propertyMap.get(oldName);\n             String replacement;\n             if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                 Preconditions.checkState(oldName.equals(p.oldName));\n                 replacement \u003d p.newName;\n             } else {\n                 replacement \u003d oldName;\n             }\n             if (sb.length() \u003e 0) {\n                 sb.append(\u0027.\u0027);\n             }\n             sb.append(replacement);\n         }\n         parent.replaceChild(n, Node.newString(sb.toString()));\n         changed \u003d true;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e13c794216c0a0e2affd53039a7d715086bc135e": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nThe old algorithm takes 49324ms to finish in gmail. Now it takes 1281 ms.\nIt used to take around 300-600ms without affinity.\n\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nRuns too slow.\n\n*** Original change description ***\n\nRenameProperties with affinity informations.\n\nR\u003dnicksantos\nDELTA\u003d174  (152 added, 6 deleted, 16 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1009\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@933 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/23/11, 12:40 PM",
      "commitName": "e13c794216c0a0e2affd53039a7d715086bc135e",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "3/21/11, 3:46 PM",
      "commitNameOld": "26d86562dbca7b21739296826935b74e2cd75dbf",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 1.87,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n    Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n    reservedNames.addAll(externedNames);\n    reservedNames.addAll(quotedNames);\n    if (prevUsedPropertyMap !\u003d null) {\n        reusePropertyNames(reservedNames, propertyMap.values());\n    }\n    compiler.addToDebugLog(\"JS property assignments:\");\n    computeAffinityScores();\n    Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n    propsByFreq.addAll(propertyMap.values());\n    generateNames(propsByFreq, reservedNames);\n    boolean changed \u003d false;\n    for (Node n : stringNodesToRename) {\n        String oldName \u003d n.getString();\n        Property p \u003d propertyMap.get(oldName);\n        if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n            Preconditions.checkState(oldName.equals(p.oldName));\n            n.setString(p.newName);\n            changed \u003d changed || !p.newName.equals(oldName);\n        }\n    }\n    for (Node n : callNodeToParentMap.keySet()) {\n        Node parent \u003d callNodeToParentMap.get(n);\n        Node firstArg \u003d n.getFirstChild().getNext();\n        StringBuilder sb \u003d new StringBuilder();\n        for (String oldName : firstArg.getString().split(\"[.]\")) {\n            Property p \u003d propertyMap.get(oldName);\n            String replacement;\n            if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                Preconditions.checkState(oldName.equals(p.oldName));\n                replacement \u003d p.newName;\n            } else {\n                replacement \u003d oldName;\n            }\n            if (sb.length() \u003e 0) {\n                sb.append(\u0027.\u0027);\n            }\n            sb.append(replacement);\n        }\n        parent.replaceChild(n, Node.newString(sb.toString()));\n        changed \u003d true;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 196,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,51 +1,52 @@\n @Override\n public void process(Node externs, Node root) {\n     Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n     NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n     NodeTraversal.traverse(compiler, root, new ProcessProperties());\n     Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n     reservedNames.addAll(externedNames);\n     reservedNames.addAll(quotedNames);\n     if (prevUsedPropertyMap !\u003d null) {\n         reusePropertyNames(reservedNames, propertyMap.values());\n     }\n     compiler.addToDebugLog(\"JS property assignments:\");\n+    computeAffinityScores();\n     Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n     propsByFreq.addAll(propertyMap.values());\n     generateNames(propsByFreq, reservedNames);\n     boolean changed \u003d false;\n     for (Node n : stringNodesToRename) {\n         String oldName \u003d n.getString();\n         Property p \u003d propertyMap.get(oldName);\n         if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n             Preconditions.checkState(oldName.equals(p.oldName));\n             n.setString(p.newName);\n             changed \u003d changed || !p.newName.equals(oldName);\n         }\n     }\n     for (Node n : callNodeToParentMap.keySet()) {\n         Node parent \u003d callNodeToParentMap.get(n);\n         Node firstArg \u003d n.getFirstChild().getNext();\n         StringBuilder sb \u003d new StringBuilder();\n         for (String oldName : firstArg.getString().split(\"[.]\")) {\n             Property p \u003d propertyMap.get(oldName);\n             String replacement;\n             if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                 Preconditions.checkState(oldName.equals(p.oldName));\n                 replacement \u003d p.newName;\n             } else {\n                 replacement \u003d oldName;\n             }\n             if (sb.length() \u003e 0) {\n                 sb.append(\u0027.\u0027);\n             }\n             sb.append(replacement);\n         }\n         parent.replaceChild(n, Node.newString(sb.toString()));\n         changed \u003d true;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "26d86562dbca7b21739296826935b74e2cd75dbf": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nRuns too slow.\n\n*** Original change description ***\n\nRenameProperties with affinity informations. \n\nR\u003dnicksantos\nDELTA\u003d159  (6 added, 139 deleted, 14 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d974\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@922 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/21/11, 3:46 PM",
      "commitName": "26d86562dbca7b21739296826935b74e2cd75dbf",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "3/4/11, 6:28 PM",
      "commitNameOld": "19ecde4b224e78d3cf3ebad293a76a0d7b7bf376",
      "commitAuthorOld": "acleung@google.com",
      "daysBetweenCommits": 16.85,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n    Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n    reservedNames.addAll(externedNames);\n    reservedNames.addAll(quotedNames);\n    if (prevUsedPropertyMap !\u003d null) {\n        reusePropertyNames(reservedNames, propertyMap.values());\n    }\n    compiler.addToDebugLog(\"JS property assignments:\");\n    Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n    propsByFreq.addAll(propertyMap.values());\n    generateNames(propsByFreq, reservedNames);\n    boolean changed \u003d false;\n    for (Node n : stringNodesToRename) {\n        String oldName \u003d n.getString();\n        Property p \u003d propertyMap.get(oldName);\n        if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n            Preconditions.checkState(oldName.equals(p.oldName));\n            n.setString(p.newName);\n            changed \u003d changed || !p.newName.equals(oldName);\n        }\n    }\n    for (Node n : callNodeToParentMap.keySet()) {\n        Node parent \u003d callNodeToParentMap.get(n);\n        Node firstArg \u003d n.getFirstChild().getNext();\n        StringBuilder sb \u003d new StringBuilder();\n        for (String oldName : firstArg.getString().split(\"[.]\")) {\n            Property p \u003d propertyMap.get(oldName);\n            String replacement;\n            if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                Preconditions.checkState(oldName.equals(p.oldName));\n                replacement \u003d p.newName;\n            } else {\n                replacement \u003d oldName;\n            }\n            if (sb.length() \u003e 0) {\n                sb.append(\u0027.\u0027);\n            }\n            sb.append(replacement);\n        }\n        parent.replaceChild(n, Node.newString(sb.toString()));\n        changed \u003d true;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 156,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,52 +1,51 @@\n @Override\n public void process(Node externs, Node root) {\n     Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n     NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n     NodeTraversal.traverse(compiler, root, new ProcessProperties());\n     Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n     reservedNames.addAll(externedNames);\n     reservedNames.addAll(quotedNames);\n     if (prevUsedPropertyMap !\u003d null) {\n         reusePropertyNames(reservedNames, propertyMap.values());\n     }\n     compiler.addToDebugLog(\"JS property assignments:\");\n-    computeAffinityScores();\n     Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n     propsByFreq.addAll(propertyMap.values());\n     generateNames(propsByFreq, reservedNames);\n     boolean changed \u003d false;\n     for (Node n : stringNodesToRename) {\n         String oldName \u003d n.getString();\n         Property p \u003d propertyMap.get(oldName);\n         if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n             Preconditions.checkState(oldName.equals(p.oldName));\n             n.setString(p.newName);\n             changed \u003d changed || !p.newName.equals(oldName);\n         }\n     }\n     for (Node n : callNodeToParentMap.keySet()) {\n         Node parent \u003d callNodeToParentMap.get(n);\n         Node firstArg \u003d n.getFirstChild().getNext();\n         StringBuilder sb \u003d new StringBuilder();\n         for (String oldName : firstArg.getString().split(\"[.]\")) {\n             Property p \u003d propertyMap.get(oldName);\n             String replacement;\n             if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                 Preconditions.checkState(oldName.equals(p.oldName));\n                 replacement \u003d p.newName;\n             } else {\n                 replacement \u003d oldName;\n             }\n             if (sb.length() \u003e 0) {\n                 sb.append(\u0027.\u0027);\n             }\n             sb.append(replacement);\n         }\n         parent.replaceChild(n, Node.newString(sb.toString()));\n         changed \u003d true;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "19ecde4b224e78d3cf3ebad293a76a0d7b7bf376": {
      "type": "Ybodychange",
      "commitMessage": "\nRenameProperties with affinity informations.\n\nR\u003dnicksantos\nDELTA\u003d159  (139 added, 6 deleted, 14 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d766\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@853 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/4/11, 6:28 PM",
      "commitName": "19ecde4b224e78d3cf3ebad293a76a0d7b7bf376",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "12/17/10, 7:55 AM",
      "commitNameOld": "5cd9c1efe90dc7c1be33cd7f8c1dcbaa9225909e",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 77.44,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n    Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n    reservedNames.addAll(externedNames);\n    reservedNames.addAll(quotedNames);\n    if (prevUsedPropertyMap !\u003d null) {\n        reusePropertyNames(reservedNames, propertyMap.values());\n    }\n    compiler.addToDebugLog(\"JS property assignments:\");\n    computeAffinityScores();\n    Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n    propsByFreq.addAll(propertyMap.values());\n    generateNames(propsByFreq, reservedNames);\n    boolean changed \u003d false;\n    for (Node n : stringNodesToRename) {\n        String oldName \u003d n.getString();\n        Property p \u003d propertyMap.get(oldName);\n        if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n            Preconditions.checkState(oldName.equals(p.oldName));\n            n.setString(p.newName);\n            changed \u003d changed || !p.newName.equals(oldName);\n        }\n    }\n    for (Node n : callNodeToParentMap.keySet()) {\n        Node parent \u003d callNodeToParentMap.get(n);\n        Node firstArg \u003d n.getFirstChild().getNext();\n        StringBuilder sb \u003d new StringBuilder();\n        for (String oldName : firstArg.getString().split(\"[.]\")) {\n            Property p \u003d propertyMap.get(oldName);\n            String replacement;\n            if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                Preconditions.checkState(oldName.equals(p.oldName));\n                replacement \u003d p.newName;\n            } else {\n                replacement \u003d oldName;\n            }\n            if (sb.length() \u003e 0) {\n                sb.append(\u0027.\u0027);\n            }\n            sb.append(replacement);\n        }\n        parent.replaceChild(n, Node.newString(sb.toString()));\n        changed \u003d true;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 193,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,51 +1,52 @@\n @Override\n public void process(Node externs, Node root) {\n     Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n     NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n     NodeTraversal.traverse(compiler, root, new ProcessProperties());\n     Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n     reservedNames.addAll(externedNames);\n     reservedNames.addAll(quotedNames);\n     if (prevUsedPropertyMap !\u003d null) {\n         reusePropertyNames(reservedNames, propertyMap.values());\n     }\n     compiler.addToDebugLog(\"JS property assignments:\");\n+    computeAffinityScores();\n     Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n     propsByFreq.addAll(propertyMap.values());\n     generateNames(propsByFreq, reservedNames);\n     boolean changed \u003d false;\n     for (Node n : stringNodesToRename) {\n         String oldName \u003d n.getString();\n         Property p \u003d propertyMap.get(oldName);\n         if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n             Preconditions.checkState(oldName.equals(p.oldName));\n             n.setString(p.newName);\n             changed \u003d changed || !p.newName.equals(oldName);\n         }\n     }\n     for (Node n : callNodeToParentMap.keySet()) {\n         Node parent \u003d callNodeToParentMap.get(n);\n         Node firstArg \u003d n.getFirstChild().getNext();\n         StringBuilder sb \u003d new StringBuilder();\n         for (String oldName : firstArg.getString().split(\"[.]\")) {\n             Property p \u003d propertyMap.get(oldName);\n             String replacement;\n             if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                 Preconditions.checkState(oldName.equals(p.oldName));\n                 replacement \u003d p.newName;\n             } else {\n                 replacement \u003d oldName;\n             }\n             if (sb.length() \u003e 0) {\n                 sb.append(\u0027.\u0027);\n             }\n             sb.append(replacement);\n         }\n         parent.replaceChild(n, Node.newString(sb.toString()));\n         changed \u003d true;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n     compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5cd9c1efe90dc7c1be33cd7f8c1dcbaa9225909e": {
      "type": "Ybodychange",
      "commitMessage": "\nIntroduce a new life cycle stage, NORMALIZED_OBFUSCATED\n\nR\u003djohnlenz\nDELTA\u003d52  (37 added, 5 deleted, 10 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d160\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@646 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/17/10, 7:55 AM",
      "commitName": "5cd9c1efe90dc7c1be33cd7f8c1dcbaa9225909e",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "12/13/10, 10:46 AM",
      "commitNameOld": "bbff7b87746d7ded975d0d122fc0e0c3485e5c5f",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 3.88,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n    Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n    reservedNames.addAll(externedNames);\n    reservedNames.addAll(quotedNames);\n    if (prevUsedPropertyMap !\u003d null) {\n        reusePropertyNames(reservedNames, propertyMap.values());\n    }\n    compiler.addToDebugLog(\"JS property assignments:\");\n    Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n    propsByFreq.addAll(propertyMap.values());\n    generateNames(propsByFreq, reservedNames);\n    boolean changed \u003d false;\n    for (Node n : stringNodesToRename) {\n        String oldName \u003d n.getString();\n        Property p \u003d propertyMap.get(oldName);\n        if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n            Preconditions.checkState(oldName.equals(p.oldName));\n            n.setString(p.newName);\n            changed \u003d changed || !p.newName.equals(oldName);\n        }\n    }\n    for (Node n : callNodeToParentMap.keySet()) {\n        Node parent \u003d callNodeToParentMap.get(n);\n        Node firstArg \u003d n.getFirstChild().getNext();\n        StringBuilder sb \u003d new StringBuilder();\n        for (String oldName : firstArg.getString().split(\"[.]\")) {\n            Property p \u003d propertyMap.get(oldName);\n            String replacement;\n            if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                Preconditions.checkState(oldName.equals(p.oldName));\n                replacement \u003d p.newName;\n            } else {\n                replacement \u003d oldName;\n            }\n            if (sb.length() \u003e 0) {\n                sb.append(\u0027.\u0027);\n            }\n            sb.append(replacement);\n        }\n        parent.replaceChild(n, Node.newString(sb.toString()));\n        changed \u003d true;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 156,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,49 +1,51 @@\n @Override\n public void process(Node externs, Node root) {\n+    Preconditions.checkState(compiler.getLifeCycleStage().isNormalized());\n     NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n     NodeTraversal.traverse(compiler, root, new ProcessProperties());\n     Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n     reservedNames.addAll(externedNames);\n     reservedNames.addAll(quotedNames);\n     if (prevUsedPropertyMap !\u003d null) {\n         reusePropertyNames(reservedNames, propertyMap.values());\n     }\n     compiler.addToDebugLog(\"JS property assignments:\");\n     Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n     propsByFreq.addAll(propertyMap.values());\n     generateNames(propsByFreq, reservedNames);\n     boolean changed \u003d false;\n     for (Node n : stringNodesToRename) {\n         String oldName \u003d n.getString();\n         Property p \u003d propertyMap.get(oldName);\n         if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n             Preconditions.checkState(oldName.equals(p.oldName));\n             n.setString(p.newName);\n             changed \u003d changed || !p.newName.equals(oldName);\n         }\n     }\n     for (Node n : callNodeToParentMap.keySet()) {\n         Node parent \u003d callNodeToParentMap.get(n);\n         Node firstArg \u003d n.getFirstChild().getNext();\n         StringBuilder sb \u003d new StringBuilder();\n         for (String oldName : firstArg.getString().split(\"[.]\")) {\n             Property p \u003d propertyMap.get(oldName);\n             String replacement;\n             if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                 Preconditions.checkState(oldName.equals(p.oldName));\n                 replacement \u003d p.newName;\n             } else {\n                 replacement \u003d oldName;\n             }\n             if (sb.length() \u003e 0) {\n                 sb.append(\u0027.\u0027);\n             }\n             sb.append(replacement);\n         }\n         parent.replaceChild(n, Node.newString(sb.toString()));\n         changed \u003d true;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n+    compiler.setLifeCycleStage(LifeCycleStage.NORMALIZED_OBFUSCATED);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5da32cba7b68d69acfc535f57f21d652475d256f": {
      "type": "Ymultichange(Yannotationchange,Ydocchange)",
      "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/19/10, 4:28 PM",
      "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yannotationchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 166.98,
          "commitsBetweenForRepo": 161,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n    Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n    reservedNames.addAll(externedNames);\n    reservedNames.addAll(quotedNames);\n    if (prevUsedPropertyMap !\u003d null) {\n        reusePropertyNames(reservedNames, propertyMap.values());\n    }\n    compiler.addToDebugLog(\"JS property assignments:\");\n    Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n    propsByFreq.addAll(propertyMap.values());\n    generateNames(propsByFreq, reservedNames);\n    boolean changed \u003d false;\n    for (Node n : stringNodesToRename) {\n        String oldName \u003d n.getString();\n        Property p \u003d propertyMap.get(oldName);\n        if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n            Preconditions.checkState(oldName.equals(p.oldName));\n            n.setString(p.newName);\n            changed \u003d changed || !p.newName.equals(oldName);\n        }\n    }\n    for (Node n : callNodeToParentMap.keySet()) {\n        Node parent \u003d callNodeToParentMap.get(n);\n        Node firstArg \u003d n.getFirstChild().getNext();\n        StringBuilder sb \u003d new StringBuilder();\n        for (String oldName : firstArg.getString().split(\"[.]\")) {\n            Property p \u003d propertyMap.get(oldName);\n            String replacement;\n            if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                Preconditions.checkState(oldName.equals(p.oldName));\n                replacement \u003d p.newName;\n            } else {\n                replacement \u003d oldName;\n            }\n            if (sb.length() \u003e 0) {\n                sb.append(\u0027.\u0027);\n            }\n            sb.append(replacement);\n        }\n        parent.replaceChild(n, Node.newString(sb.toString()));\n        changed \u003d true;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n}",
          "path": "src/com/google/javascript/jscomp/RenameProperties.java",
          "functionStartLine": 157,
          "functionName": "process",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,48 +1,49 @@\n+@Override\n public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n     NodeTraversal.traverse(compiler, root, new ProcessProperties());\n     Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n     reservedNames.addAll(externedNames);\n     reservedNames.addAll(quotedNames);\n     if (prevUsedPropertyMap !\u003d null) {\n         reusePropertyNames(reservedNames, propertyMap.values());\n     }\n     compiler.addToDebugLog(\"JS property assignments:\");\n     Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n     propsByFreq.addAll(propertyMap.values());\n     generateNames(propsByFreq, reservedNames);\n     boolean changed \u003d false;\n     for (Node n : stringNodesToRename) {\n         String oldName \u003d n.getString();\n         Property p \u003d propertyMap.get(oldName);\n         if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n             Preconditions.checkState(oldName.equals(p.oldName));\n             n.setString(p.newName);\n             changed \u003d changed || !p.newName.equals(oldName);\n         }\n     }\n     for (Node n : callNodeToParentMap.keySet()) {\n         Node parent \u003d callNodeToParentMap.get(n);\n         Node firstArg \u003d n.getFirstChild().getNext();\n         StringBuilder sb \u003d new StringBuilder();\n         for (String oldName : firstArg.getString().split(\"[.]\")) {\n             Property p \u003d propertyMap.get(oldName);\n             String replacement;\n             if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                 Preconditions.checkState(oldName.equals(p.oldName));\n                 replacement \u003d p.newName;\n             } else {\n                 replacement \u003d oldName;\n             }\n             if (sb.length() \u003e 0) {\n                 sb.append(\u0027.\u0027);\n             }\n             sb.append(replacement);\n         }\n         parent.replaceChild(n, Node.newString(sb.toString()));\n         changed \u003d true;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "",
            "newValue": "@Override"
          }
        },
        {
          "type": "Ydocchange",
          "commitMessage": "\nChange on 2010/04/19 by anatol\n\n        Replace {@inheritDoc} javadoc annotation with @Override.\n        @Override is better as it implies documentation inheritance plus checks\n        that the parent method exists at the compile-time.\n\n        R\u003dnick\n        DELTA\u003d137  (0 added, 70 deleted, 67 changed)\n\nChange on 2010/04/19 by nick\n\n        Change how we resolve types.\n        Instead of leaving shell proxy types around, unbox the proxy types.\n\n        R\u003dandrew,john\n        DELTA\u003d103  (84 added, 5 deleted, 14 changed)\n\nChange on 2010/04/19 by acleung\n\n        Enable Flow Sensitive Inlining by default.\n\n        R\u003djohn\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dpqvliw\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@191 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "4/19/10, 4:28 PM",
          "commitName": "5da32cba7b68d69acfc535f57f21d652475d256f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 166.98,
          "commitsBetweenForRepo": 161,
          "commitsBetweenForFile": 1,
          "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n    Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n    reservedNames.addAll(externedNames);\n    reservedNames.addAll(quotedNames);\n    if (prevUsedPropertyMap !\u003d null) {\n        reusePropertyNames(reservedNames, propertyMap.values());\n    }\n    compiler.addToDebugLog(\"JS property assignments:\");\n    Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n    propsByFreq.addAll(propertyMap.values());\n    generateNames(propsByFreq, reservedNames);\n    boolean changed \u003d false;\n    for (Node n : stringNodesToRename) {\n        String oldName \u003d n.getString();\n        Property p \u003d propertyMap.get(oldName);\n        if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n            Preconditions.checkState(oldName.equals(p.oldName));\n            n.setString(p.newName);\n            changed \u003d changed || !p.newName.equals(oldName);\n        }\n    }\n    for (Node n : callNodeToParentMap.keySet()) {\n        Node parent \u003d callNodeToParentMap.get(n);\n        Node firstArg \u003d n.getFirstChild().getNext();\n        StringBuilder sb \u003d new StringBuilder();\n        for (String oldName : firstArg.getString().split(\"[.]\")) {\n            Property p \u003d propertyMap.get(oldName);\n            String replacement;\n            if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                Preconditions.checkState(oldName.equals(p.oldName));\n                replacement \u003d p.newName;\n            } else {\n                replacement \u003d oldName;\n            }\n            if (sb.length() \u003e 0) {\n                sb.append(\u0027.\u0027);\n            }\n            sb.append(replacement);\n        }\n        parent.replaceChild(n, Node.newString(sb.toString()));\n        changed \u003d true;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n}",
          "path": "src/com/google/javascript/jscomp/RenameProperties.java",
          "functionStartLine": 157,
          "functionName": "process",
          "functionAnnotation": "@Override",
          "functionDoc": "",
          "diff": "@@ -1,48 +1,49 @@\n+@Override\n public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n     NodeTraversal.traverse(compiler, root, new ProcessProperties());\n     Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n     reservedNames.addAll(externedNames);\n     reservedNames.addAll(quotedNames);\n     if (prevUsedPropertyMap !\u003d null) {\n         reusePropertyNames(reservedNames, propertyMap.values());\n     }\n     compiler.addToDebugLog(\"JS property assignments:\");\n     Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n     propsByFreq.addAll(propertyMap.values());\n     generateNames(propsByFreq, reservedNames);\n     boolean changed \u003d false;\n     for (Node n : stringNodesToRename) {\n         String oldName \u003d n.getString();\n         Property p \u003d propertyMap.get(oldName);\n         if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n             Preconditions.checkState(oldName.equals(p.oldName));\n             n.setString(p.newName);\n             changed \u003d changed || !p.newName.equals(oldName);\n         }\n     }\n     for (Node n : callNodeToParentMap.keySet()) {\n         Node parent \u003d callNodeToParentMap.get(n);\n         Node firstArg \u003d n.getFirstChild().getNext();\n         StringBuilder sb \u003d new StringBuilder();\n         for (String oldName : firstArg.getString().split(\"[.]\")) {\n             Property p \u003d propertyMap.get(oldName);\n             String replacement;\n             if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                 Preconditions.checkState(oldName.equals(p.oldName));\n                 replacement \u003d p.newName;\n             } else {\n                 replacement \u003d oldName;\n             }\n             if (sb.length() \u003e 0) {\n                 sb.append(\u0027.\u0027);\n             }\n             sb.append(replacement);\n         }\n         parent.replaceChild(n, Node.newString(sb.toString()));\n         changed \u003d true;\n     }\n     if (changed) {\n         compiler.reportCodeChange();\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "@inheritDoc}\n",
            "newValue": ""
          }
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,48 @@\n+public void process(Node externs, Node root) {\n+    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n+    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n+    Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n+    reservedNames.addAll(externedNames);\n+    reservedNames.addAll(quotedNames);\n+    if (prevUsedPropertyMap !\u003d null) {\n+        reusePropertyNames(reservedNames, propertyMap.values());\n+    }\n+    compiler.addToDebugLog(\"JS property assignments:\");\n+    Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n+    propsByFreq.addAll(propertyMap.values());\n+    generateNames(propsByFreq, reservedNames);\n+    boolean changed \u003d false;\n+    for (Node n : stringNodesToRename) {\n+        String oldName \u003d n.getString();\n+        Property p \u003d propertyMap.get(oldName);\n+        if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n+            Preconditions.checkState(oldName.equals(p.oldName));\n+            n.setString(p.newName);\n+            changed \u003d changed || !p.newName.equals(oldName);\n+        }\n+    }\n+    for (Node n : callNodeToParentMap.keySet()) {\n+        Node parent \u003d callNodeToParentMap.get(n);\n+        Node firstArg \u003d n.getFirstChild().getNext();\n+        StringBuilder sb \u003d new StringBuilder();\n+        for (String oldName : firstArg.getString().split(\"[.]\")) {\n+            Property p \u003d propertyMap.get(oldName);\n+            String replacement;\n+            if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n+                Preconditions.checkState(oldName.equals(p.oldName));\n+                replacement \u003d p.newName;\n+            } else {\n+                replacement \u003d oldName;\n+            }\n+            if (sb.length() \u003e 0) {\n+                sb.append(\u0027.\u0027);\n+            }\n+            sb.append(replacement);\n+        }\n+        parent.replaceChild(n, Node.newString(sb.toString()));\n+        changed \u003d true;\n+    }\n+    if (changed) {\n+        compiler.reportCodeChange();\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "public void process(Node externs, Node root) {\n    NodeTraversal.traverse(compiler, externs, new ProcessExterns());\n    NodeTraversal.traverse(compiler, root, new ProcessProperties());\n    Set\u003cString\u003e reservedNames \u003d new HashSet\u003cString\u003e(externedNames.size() + quotedNames.size());\n    reservedNames.addAll(externedNames);\n    reservedNames.addAll(quotedNames);\n    if (prevUsedPropertyMap !\u003d null) {\n        reusePropertyNames(reservedNames, propertyMap.values());\n    }\n    compiler.addToDebugLog(\"JS property assignments:\");\n    Set\u003cProperty\u003e propsByFreq \u003d new TreeSet\u003cProperty\u003e(FREQUENCY_COMPARATOR);\n    propsByFreq.addAll(propertyMap.values());\n    generateNames(propsByFreq, reservedNames);\n    boolean changed \u003d false;\n    for (Node n : stringNodesToRename) {\n        String oldName \u003d n.getString();\n        Property p \u003d propertyMap.get(oldName);\n        if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n            Preconditions.checkState(oldName.equals(p.oldName));\n            n.setString(p.newName);\n            changed \u003d changed || !p.newName.equals(oldName);\n        }\n    }\n    for (Node n : callNodeToParentMap.keySet()) {\n        Node parent \u003d callNodeToParentMap.get(n);\n        Node firstArg \u003d n.getFirstChild().getNext();\n        StringBuilder sb \u003d new StringBuilder();\n        for (String oldName : firstArg.getString().split(\"[.]\")) {\n            Property p \u003d propertyMap.get(oldName);\n            String replacement;\n            if (p !\u003d null \u0026\u0026 p.newName !\u003d null) {\n                Preconditions.checkState(oldName.equals(p.oldName));\n                replacement \u003d p.newName;\n            } else {\n                replacement \u003d oldName;\n            }\n            if (sb.length() \u003e 0) {\n                sb.append(\u0027.\u0027);\n            }\n            sb.append(replacement);\n        }\n        parent.replaceChild(n, Node.newString(sb.toString()));\n        changed \u003d true;\n    }\n    if (changed) {\n        compiler.reportCodeChange();\n    }\n}",
      "path": "src/com/google/javascript/jscomp/RenameProperties.java",
      "functionStartLine": 159,
      "functionName": "process",
      "functionAnnotation": "",
      "functionDoc": "@inheritDoc}\n"
    }
  }
}