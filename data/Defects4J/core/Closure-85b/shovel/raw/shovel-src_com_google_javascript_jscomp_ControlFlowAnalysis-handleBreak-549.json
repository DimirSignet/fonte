{
  "origin": "codeshovel",
  "repositoryName": "Closure-85b",
  "repositoryPath": "/tmp/Closure-85b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ControlFlowAnalysis.java",
  "functionName": "handleBreak",
  "functionId": "handleBreak___node-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 549,
  "functionEndLine": 586,
  "numCommitsSeen": 13,
  "timeTaken": 1059,
  "changeHistory": [
    "68e00612bc6a04357b638958f380ea6d4072ccf1",
    "0a39688562637465944df3c29ae0c1259cc0a4dc",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "68e00612bc6a04357b638958f380ea6d4072ccf1": "Ybodychange",
    "0a39688562637465944df3c29ae0c1259cc0a4dc": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "68e00612bc6a04357b638958f380ea6d4072ccf1": {
      "type": "Ybodychange",
      "commitMessage": "\nReplace returns with breaks when possible.\n\nR\u003djohnlenz\nDELTA\u003d188  (183 added, 0 deleted, 5 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d208289\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@406 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/5/10, 10:57 PM",
      "commitName": "68e00612bc6a04357b638958f380ea6d4072ccf1",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "8/24/10, 12:29 PM",
      "commitNameOld": "ec8f3c1ea3de563d6ed6ce7af198701f46aea338",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 12.44,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleBreak(Node node) {\n    String label \u003d null;\n    if (node.hasChildren()) {\n        label \u003d node.getFirstChild().getString();\n    }\n    Node cur;\n    Node lastJump;\n    Node parent \u003d node.getParent();\n    for (cur \u003d node, lastJump \u003d node; !isBreakTarget(cur, label); cur \u003d parent, parent \u003d parent.getParent()) {\n        if (cur.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.hasFinally(cur)) {\n            if (lastJump \u003d\u003d node) {\n                createEdge(lastJump, Branch.UNCOND, computeFallThrough(cur.getLastChild()));\n            } else {\n                finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n            }\n            lastJump \u003d cur;\n        }\n        Preconditions.checkState(parent !\u003d null, \"Cannot find break target.\");\n    }\n    if (lastJump \u003d\u003d node) {\n        createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur, this));\n    } else {\n        finallyMap.put(lastJump, computeFollowNode(cur, this));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 545,
      "functionName": "handleBreak",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n private void handleBreak(Node node) {\n     String label \u003d null;\n     if (node.hasChildren()) {\n         label \u003d node.getFirstChild().getString();\n     }\n     Node cur;\n     Node lastJump;\n     Node parent \u003d node.getParent();\n-    for (cur \u003d node, lastJump \u003d node; !isBreakTarget(cur, parent, label); cur \u003d parent, parent \u003d parent.getParent()) {\n+    for (cur \u003d node, lastJump \u003d node; !isBreakTarget(cur, label); cur \u003d parent, parent \u003d parent.getParent()) {\n         if (cur.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.hasFinally(cur)) {\n             if (lastJump \u003d\u003d node) {\n                 createEdge(lastJump, Branch.UNCOND, computeFallThrough(cur.getLastChild()));\n             } else {\n                 finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n             }\n             lastJump \u003d cur;\n         }\n         Preconditions.checkState(parent !\u003d null, \"Cannot find break target.\");\n     }\n     if (lastJump \u003d\u003d node) {\n         createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur, this));\n     } else {\n         finallyMap.put(lastJump, computeFollowNode(cur, this));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0a39688562637465944df3c29ae0c1259cc0a4dc": {
      "type": "Ybodychange",
      "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 5:53 PM",
      "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/22/10, 5:07 PM",
      "commitNameOld": "2f5cb1622371de540fe20dcbe0411651ec89f952",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 162.99,
      "commitsBetweenForRepo": 207,
      "commitsBetweenForFile": 1,
      "actualSource": "private void handleBreak(Node node) {\n    String label \u003d null;\n    if (node.hasChildren()) {\n        label \u003d node.getFirstChild().getString();\n    }\n    Node cur;\n    Node lastJump;\n    Node parent \u003d node.getParent();\n    for (cur \u003d node, lastJump \u003d node; !isBreakTarget(cur, parent, label); cur \u003d parent, parent \u003d parent.getParent()) {\n        if (cur.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.hasFinally(cur)) {\n            if (lastJump \u003d\u003d node) {\n                createEdge(lastJump, Branch.UNCOND, computeFallThrough(cur.getLastChild()));\n            } else {\n                finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n            }\n            lastJump \u003d cur;\n        }\n        Preconditions.checkState(parent !\u003d null, \"Cannot find break target.\");\n    }\n    if (lastJump \u003d\u003d node) {\n        createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur, this));\n    } else {\n        finallyMap.put(lastJump, computeFollowNode(cur, this));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 548,
      "functionName": "handleBreak",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,25 +1,25 @@\n private void handleBreak(Node node) {\n     String label \u003d null;\n     if (node.hasChildren()) {\n         label \u003d node.getFirstChild().getString();\n     }\n     Node cur;\n     Node lastJump;\n     Node parent \u003d node.getParent();\n     for (cur \u003d node, lastJump \u003d node; !isBreakTarget(cur, parent, label); cur \u003d parent, parent \u003d parent.getParent()) {\n         if (cur.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.hasFinally(cur)) {\n             if (lastJump \u003d\u003d node) {\n                 createEdge(lastJump, Branch.UNCOND, computeFallThrough(cur.getLastChild()));\n             } else {\n                 finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n             }\n             lastJump \u003d cur;\n         }\n         Preconditions.checkState(parent !\u003d null, \"Cannot find break target.\");\n     }\n     if (lastJump \u003d\u003d node) {\n-        createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur));\n+        createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur, this));\n     } else {\n-        finallyMap.put(lastJump, computeFollowNode(cur));\n+        finallyMap.put(lastJump, computeFollowNode(cur, this));\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,25 @@\n+private void handleBreak(Node node) {\n+    String label \u003d null;\n+    if (node.hasChildren()) {\n+        label \u003d node.getFirstChild().getString();\n+    }\n+    Node cur;\n+    Node lastJump;\n+    Node parent \u003d node.getParent();\n+    for (cur \u003d node, lastJump \u003d node; !isBreakTarget(cur, parent, label); cur \u003d parent, parent \u003d parent.getParent()) {\n+        if (cur.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.hasFinally(cur)) {\n+            if (lastJump \u003d\u003d node) {\n+                createEdge(lastJump, Branch.UNCOND, computeFallThrough(cur.getLastChild()));\n+            } else {\n+                finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n+            }\n+            lastJump \u003d cur;\n+        }\n+        Preconditions.checkState(parent !\u003d null, \"Cannot find break target.\");\n+    }\n+    if (lastJump \u003d\u003d node) {\n+        createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur));\n+    } else {\n+        finallyMap.put(lastJump, computeFollowNode(cur));\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void handleBreak(Node node) {\n    String label \u003d null;\n    if (node.hasChildren()) {\n        label \u003d node.getFirstChild().getString();\n    }\n    Node cur;\n    Node lastJump;\n    Node parent \u003d node.getParent();\n    for (cur \u003d node, lastJump \u003d node; !isBreakTarget(cur, parent, label); cur \u003d parent, parent \u003d parent.getParent()) {\n        if (cur.getType() \u003d\u003d Token.TRY \u0026\u0026 NodeUtil.hasFinally(cur)) {\n            if (lastJump \u003d\u003d node) {\n                createEdge(lastJump, Branch.UNCOND, computeFallThrough(cur.getLastChild()));\n            } else {\n                finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));\n            }\n            lastJump \u003d cur;\n        }\n        Preconditions.checkState(parent !\u003d null, \"Cannot find break target.\");\n    }\n    if (lastJump \u003d\u003d node) {\n        createEdge(lastJump, Branch.UNCOND, computeFollowNode(cur));\n    } else {\n        finallyMap.put(lastJump, computeFollowNode(cur));\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 549,
      "functionName": "handleBreak",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}