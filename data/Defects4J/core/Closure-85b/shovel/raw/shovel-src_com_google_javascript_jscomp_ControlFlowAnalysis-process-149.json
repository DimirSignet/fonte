{
  "origin": "codeshovel",
  "repositoryName": "Closure-85b",
  "repositoryPath": "/tmp/Closure-85b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ControlFlowAnalysis.java",
  "functionName": "process",
  "functionId": "process___externs-Node__root-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
  "functionAnnotation": "@Override",
  "functionDoc": "",
  "functionStartLine": 149,
  "functionEndLine": 190,
  "numCommitsSeen": 13,
  "timeTaken": 960,
  "changeHistory": [
    "3c5a6f6a1b87c655c5eb3ed0ebcfce886ab6a614",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "3c5a6f6a1b87c655c5eb3ed0ebcfce886ab6a614": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3c5a6f6a1b87c655c5eb3ed0ebcfce886ab6a614": {
      "type": "Ybodychange",
      "commitMessage": "\nAllow graphs without annotations.\n\nR\u003dacleung\nDELTA\u003d405  (249 added, 83 deleted, 73 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d58\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@592 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/3/10, 2:10 PM",
      "commitName": "3c5a6f6a1b87c655c5eb3ed0ebcfce886ab6a614",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "11/11/10, 9:42 PM",
      "commitNameOld": "df223efd38c514d584f00d076488ab9a02011492",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 21.69,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    this.root \u003d root;\n    astPositionCounter \u003d 0;\n    astPosition \u003d Maps.newHashMap();\n    nodePriorities \u003d Maps.newHashMap();\n    cfg \u003d new AstControlFlowGraph(computeFallThrough(root), nodePriorities, edgeAnnotations);\n    NodeTraversal.traverse(compiler, root, this);\n    astPosition.put(null, ++astPositionCounter);\n    priorityCounter \u003d 0;\n    DiGraphNode\u003cNode, Branch\u003e entry \u003d cfg.getEntry();\n    prioritizeFromEntryNode(entry);\n    if (shouldTraverseFunctions) {\n        for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n            Node value \u003d candidate.getValue();\n            if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n                Preconditions.checkState(!nodePriorities.containsKey(candidate) || candidate \u003d\u003d entry);\n                prioritizeFromEntryNode(candidate);\n            }\n        }\n    }\n    for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n        if (!nodePriorities.containsKey(candidate)) {\n            nodePriorities.put(candidate, ++priorityCounter);\n        }\n    }\n    nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 149,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": "",
      "diff": "@@ -1,28 +1,28 @@\n @Override\n public void process(Node externs, Node root) {\n     this.root \u003d root;\n     astPositionCounter \u003d 0;\n     astPosition \u003d Maps.newHashMap();\n     nodePriorities \u003d Maps.newHashMap();\n-    cfg \u003d new AstControlFlowGraph(computeFallThrough(root), nodePriorities);\n+    cfg \u003d new AstControlFlowGraph(computeFallThrough(root), nodePriorities, edgeAnnotations);\n     NodeTraversal.traverse(compiler, root, this);\n     astPosition.put(null, ++astPositionCounter);\n     priorityCounter \u003d 0;\n     DiGraphNode\u003cNode, Branch\u003e entry \u003d cfg.getEntry();\n     prioritizeFromEntryNode(entry);\n     if (shouldTraverseFunctions) {\n         for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n             Node value \u003d candidate.getValue();\n             if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n                 Preconditions.checkState(!nodePriorities.containsKey(candidate) || candidate \u003d\u003d entry);\n                 prioritizeFromEntryNode(candidate);\n             }\n         }\n     }\n     for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n         if (!nodePriorities.containsKey(candidate)) {\n             nodePriorities.put(candidate, ++priorityCounter);\n         }\n     }\n     nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,28 @@\n+@Override\n+public void process(Node externs, Node root) {\n+    this.root \u003d root;\n+    astPositionCounter \u003d 0;\n+    astPosition \u003d Maps.newHashMap();\n+    nodePriorities \u003d Maps.newHashMap();\n+    cfg \u003d new AstControlFlowGraph(computeFallThrough(root), nodePriorities);\n+    NodeTraversal.traverse(compiler, root, this);\n+    astPosition.put(null, ++astPositionCounter);\n+    priorityCounter \u003d 0;\n+    DiGraphNode\u003cNode, Branch\u003e entry \u003d cfg.getEntry();\n+    prioritizeFromEntryNode(entry);\n+    if (shouldTraverseFunctions) {\n+        for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n+            Node value \u003d candidate.getValue();\n+            if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n+                Preconditions.checkState(!nodePriorities.containsKey(candidate) || candidate \u003d\u003d entry);\n+                prioritizeFromEntryNode(candidate);\n+            }\n+        }\n+    }\n+    for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n+        if (!nodePriorities.containsKey(candidate)) {\n+            nodePriorities.put(candidate, ++priorityCounter);\n+        }\n+    }\n+    nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);\n+}\n\\ No newline at end of file\n",
      "actualSource": "@Override\npublic void process(Node externs, Node root) {\n    this.root \u003d root;\n    astPositionCounter \u003d 0;\n    astPosition \u003d Maps.newHashMap();\n    nodePriorities \u003d Maps.newHashMap();\n    cfg \u003d new AstControlFlowGraph(computeFallThrough(root), nodePriorities);\n    NodeTraversal.traverse(compiler, root, this);\n    astPosition.put(null, ++astPositionCounter);\n    priorityCounter \u003d 0;\n    DiGraphNode\u003cNode, Branch\u003e entry \u003d cfg.getEntry();\n    prioritizeFromEntryNode(entry);\n    if (shouldTraverseFunctions) {\n        for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n            Node value \u003d candidate.getValue();\n            if (value !\u003d null \u0026\u0026 value.getType() \u003d\u003d Token.FUNCTION) {\n                Preconditions.checkState(!nodePriorities.containsKey(candidate) || candidate \u003d\u003d entry);\n                prioritizeFromEntryNode(candidate);\n            }\n        }\n    }\n    for (DiGraphNode\u003cNode, Branch\u003e candidate : cfg.getDirectedGraphNodes()) {\n        if (!nodePriorities.containsKey(candidate)) {\n            nodePriorities.put(candidate, ++priorityCounter);\n        }\n    }\n    nodePriorities.put(cfg.getImplicitReturn(), ++priorityCounter);\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 147,
      "functionName": "process",
      "functionAnnotation": "@Override",
      "functionDoc": ""
    }
  }
}