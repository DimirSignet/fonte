{
  "origin": "codeshovel",
  "repositoryName": "Closure-85b",
  "repositoryPath": "/tmp/Closure-85b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ControlFlowAnalysis.java",
  "functionName": "computeFallThrough",
  "functionId": "computeFallThrough___n-Node",
  "sourceFilePath": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
  "functionAnnotation": "",
  "functionDoc": "Computes the destination node of n when we want to fallthough into the\nsubtree of n. We don\u0027t always create a CFG edge into n itself because of\nDOs and FORs.\n",
  "functionStartLine": 779,
  "functionEndLine": 793,
  "numCommitsSeen": 13,
  "timeTaken": 963,
  "changeHistory": [
    "0a39688562637465944df3c29ae0c1259cc0a4dc",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "0a39688562637465944df3c29ae0c1259cc0a4dc": "Ymodifierchange",
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": "Ybodychange",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0a39688562637465944df3c29ae0c1259cc0a4dc": {
      "type": "Ymodifierchange",
      "commitMessage": "\nRemoves useless unconditional jumps\n\nR\u003djohnlenz\nDELTA\u003d179  (96 added, 33 deleted, 50 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d88010\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@337 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/4/10, 5:53 PM",
      "commitName": "0a39688562637465944df3c29ae0c1259cc0a4dc",
      "commitAuthor": "acleung@google.com",
      "commitDateOld": "2/22/10, 5:07 PM",
      "commitNameOld": "2f5cb1622371de540fe20dcbe0411651ec89f952",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 162.99,
      "commitsBetweenForRepo": 207,
      "commitsBetweenForFile": 1,
      "actualSource": "static Node computeFallThrough(Node n) {\n    switch(n.getType()) {\n        case Token.DO:\n            return computeFallThrough(n.getFirstChild());\n        case Token.FOR:\n            if (NodeUtil.isForIn(n)) {\n                return n;\n            }\n            return computeFallThrough(n.getFirstChild());\n        case Token.LABEL:\n            return computeFallThrough(n.getLastChild());\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 778,
      "functionName": "computeFallThrough",
      "functionAnnotation": "",
      "functionDoc": "Computes the destination node of n when we want to fallthough into the\nsubtree of n. We don\u0027t always create a CFG edge into n itself because of\nDOs and FORs.\n",
      "diff": "@@ -1,15 +1,15 @@\n-private static Node computeFallThrough(Node n) {\n+static Node computeFallThrough(Node n) {\n     switch(n.getType()) {\n         case Token.DO:\n             return computeFallThrough(n.getFirstChild());\n         case Token.FOR:\n             if (NodeUtil.isForIn(n)) {\n                 return n;\n             }\n             return computeFallThrough(n.getFirstChild());\n         case Token.LABEL:\n             return computeFallThrough(n.getLastChild());\n         default:\n             return n;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[private, static]",
        "newValue": "[static]"
      }
    },
    "3bee5d740c96572faea4b9fb8b632e0e07b13cbb": {
      "type": "Ybodychange",
      "commitMessage": "Add a mechanism for inlining local vars, and turn it on by default.\nWarnings for \"ambiguous\" function definitions.\nRefactoring and renaming of some method names.\nUse \"\u003d\" optionality annotation in externs.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@15 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/25/09, 6:53 AM",
      "commitName": "3bee5d740c96572faea4b9fb8b632e0e07b13cbb",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "11/3/09, 3:51 PM",
      "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 21.63,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "private static Node computeFallThrough(Node n) {\n    switch(n.getType()) {\n        case Token.DO:\n            return computeFallThrough(n.getFirstChild());\n        case Token.FOR:\n            if (NodeUtil.isForIn(n)) {\n                return n;\n            }\n            return computeFallThrough(n.getFirstChild());\n        case Token.LABEL:\n            return computeFallThrough(n.getLastChild());\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 771,
      "functionName": "computeFallThrough",
      "functionAnnotation": "",
      "functionDoc": "Computes the destination node of n when we want to fallthough into the\nsubtree of n. We don\u0027t always create a CFG edge into n itself because of\nDOs and FORs.\n",
      "diff": "@@ -1,15 +1,15 @@\n private static Node computeFallThrough(Node n) {\n     switch(n.getType()) {\n         case Token.DO:\n             return computeFallThrough(n.getFirstChild());\n         case Token.FOR:\n-            if (n.getChildCount() \u003d\u003d 4) {\n-                return computeFallThrough(n.getFirstChild());\n+            if (NodeUtil.isForIn(n)) {\n+                return n;\n             }\n-            return n;\n+            return computeFallThrough(n.getFirstChild());\n         case Token.LABEL:\n             return computeFallThrough(n.getLastChild());\n         default:\n             return n;\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,15 @@\n+private static Node computeFallThrough(Node n) {\n+    switch(n.getType()) {\n+        case Token.DO:\n+            return computeFallThrough(n.getFirstChild());\n+        case Token.FOR:\n+            if (n.getChildCount() \u003d\u003d 4) {\n+                return computeFallThrough(n.getFirstChild());\n+            }\n+            return n;\n+        case Token.LABEL:\n+            return computeFallThrough(n.getLastChild());\n+        default:\n+            return n;\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private static Node computeFallThrough(Node n) {\n    switch(n.getType()) {\n        case Token.DO:\n            return computeFallThrough(n.getFirstChild());\n        case Token.FOR:\n            if (n.getChildCount() \u003d\u003d 4) {\n                return computeFallThrough(n.getFirstChild());\n            }\n            return n;\n        case Token.LABEL:\n            return computeFallThrough(n.getLastChild());\n        default:\n            return n;\n    }\n}",
      "path": "src/com/google/javascript/jscomp/ControlFlowAnalysis.java",
      "functionStartLine": 771,
      "functionName": "computeFallThrough",
      "functionAnnotation": "",
      "functionDoc": "Computes the destination node of n when we want to fallthough into the\nsubtree of n. We don\u0027t always create a CFG edge into n itself because of\nDOs and FORs.\n"
    }
  }
}