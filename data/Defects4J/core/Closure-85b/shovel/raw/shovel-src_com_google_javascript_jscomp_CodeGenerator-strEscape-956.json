{
  "origin": "codeshovel",
  "repositoryName": "Closure-85b",
  "repositoryPath": "/tmp/Closure-85b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CodeGenerator.java",
  "functionName": "strEscape",
  "functionId": "strEscape___s-String__quote-char__doublequoteEscape-String__singlequoteEscape-String__backslashEscape-String__outputCharsetEncoder-CharsetEncoder",
  "sourceFilePath": "src/com/google/javascript/jscomp/CodeGenerator.java",
  "functionAnnotation": "",
  "functionDoc": "Helper to escape javascript string as well as regular expression\n",
  "functionStartLine": 956,
  "functionEndLine": 1017,
  "numCommitsSeen": 40,
  "timeTaken": 2885,
  "changeHistory": [
    "4d09ce45270187fa65a891e56081960a0ae449e5",
    "6fcb0080b198186d44552a5996ed81c3aa4a04f8",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "4d09ce45270187fa65a891e56081960a0ae449e5": "Ybodychange",
    "6fcb0080b198186d44552a5996ed81c3aa4a04f8": "Ybodychange",
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4d09ce45270187fa65a891e56081960a0ae449e5": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/07/14 14:52:38 by nicksantos\n\n        Automated g4 rollback.\n\n        *** Reason for rollback ***\n\n        breaks contentads\n\n        *** Original change description ***\n\n        Replace direct references to stripped types with \u0027void 0\u0027.\n\n        R\u003ddcc\n        DELTA\u003d107  (0 added, 100 deleted, 7 changed)\n\nChange on 2010/07/14 17:36:48 by acleung\n\n        Fix GraphColoringTest for future JDK changes.\n\n        R\u003dnicksantos\n        DELTA\u003d7  (0 added, 6 deleted, 1 changed)\n\nChange on 2010/07/14 18:11:13 by johnlenz\n\n        Minor cleanup of the CodeConsumer interface.\n\n        R\u003dacleung\n        DELTA\u003d180  (14 added, 128 deleted, 38 changed)\n\nChange on 2010/07/14 18:13:53 by johnlenz\n\n        Minor performance improvement for quoted strings that may need to be\n        escaped.\n\n        R\u003dnicksantos\n        DELTA\u003d1  (0 added, 0 deleted, 1 changed)\n\nChange on 2010/07/14 18:34:27 by pkeslin\n\n        Move the Image constructor from deprecated.js to html5 since it seems that\n        it has been formalized as a part of that spec and is the constructor for\n        the HTMLImageElement.\n\n        R\u003dacleung\n        DELTA\u003d27  (7 added, 18 deleted, 2 changed)\n\nChange on 2010/07/14 19:11:18 by pkeslin\n\n        Automated g4 rollback of changelist 16438831.\n\n        *** Reason for rollback ***\n\n          Original change breaks the closure build.\n\n        *** Original change description ***\n\n        Move the Image constructor from deprecated.js to html5 since it seems that\n        it has been formalized as a part of that spec and is the constructor for\n        the HTMLImageElement.\n\n        R\u003dacleung\n        DELTA\u003d27  (18 added, 7 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d52001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@278 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/15/10, 1:03 PM",
      "commitName": "4d09ce45270187fa65a891e56081960a0ae449e5",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "7/14/10, 10:45 AM",
      "commitNameOld": "3c4504a78a84e4715439cddb4028c25be2ce308f",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb \u003d new StringBuilder(s.length() + 2);\n    sb.append(quote);\n    for (int i \u003d 0; i \u003c s.length(); i++) {\n        char c \u003d s.charAt(i);\n        switch(c) {\n            case \u0027\\n\u0027:\n                sb.append(\"\\\\n\");\n                break;\n            case \u0027\\r\u0027:\n                sb.append(\"\\\\r\");\n                break;\n            case \u0027\\t\u0027:\n                sb.append(\"\\\\t\");\n                break;\n            case \u0027\\\\\u0027:\n                sb.append(backslashEscape);\n                break;\n            case \u0027\\\"\u0027:\n                sb.append(doublequoteEscape);\n                break;\n            case \u0027\\\u0027\u0027:\n                sb.append(singlequoteEscape);\n                break;\n            case \u0027\u003e\u0027:\n                if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n                    sb.append(\"\\\\\u003e\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case \u0027\u003c\u0027:\n                final String END_SCRIPT \u003d \"/script\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"\u003c\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder !\u003d null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c \u003e 0x1f \u0026\u0026 c \u003c\u003d 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}",
      "path": "src/com/google/javascript/jscomp/CodeGenerator.java",
      "functionStartLine": 874,
      "functionName": "strEscape",
      "functionAnnotation": "",
      "functionDoc": "Helper to escape javascript string as well as regular expression\n",
      "diff": "@@ -1,58 +1,58 @@\n static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n-    StringBuilder sb \u003d new StringBuilder();\n+    StringBuilder sb \u003d new StringBuilder(s.length() + 2);\n     sb.append(quote);\n     for (int i \u003d 0; i \u003c s.length(); i++) {\n         char c \u003d s.charAt(i);\n         switch(c) {\n             case \u0027\\n\u0027:\n                 sb.append(\"\\\\n\");\n                 break;\n             case \u0027\\r\u0027:\n                 sb.append(\"\\\\r\");\n                 break;\n             case \u0027\\t\u0027:\n                 sb.append(\"\\\\t\");\n                 break;\n             case \u0027\\\\\u0027:\n                 sb.append(backslashEscape);\n                 break;\n             case \u0027\\\"\u0027:\n                 sb.append(doublequoteEscape);\n                 break;\n             case \u0027\\\u0027\u0027:\n                 sb.append(singlequoteEscape);\n                 break;\n             case \u0027\u003e\u0027:\n                 if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n                     sb.append(\"\\\\\u003e\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case \u0027\u003c\u0027:\n                 final String END_SCRIPT \u003d \"/script\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"\u003c\\\\\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n                 if (outputCharsetEncoder !\u003d null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n                     if (c \u003e 0x1f \u0026\u0026 c \u003c\u003d 0x7f) {\n                         sb.append(c);\n                     } else {\n                         appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n         }\n     }\n     sb.append(quote);\n     return sb.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6fcb0080b198186d44552a5996ed81c3aa4a04f8": {
      "type": "Ybodychange",
      "commitMessage": "inline a method from common libraries.\n\nAdd some debugging tools for AmbiguateProperties.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@57 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/5/10, 7:44 PM",
      "commitName": "6fcb0080b198186d44552a5996ed81c3aa4a04f8",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "commitDateOld": "12/11/09, 3:29 PM",
      "commitNameOld": "168bc14ff5e9e664863c3b1146f2a5b7a30ffb42",
      "commitAuthorOld": "nicholas.j.santos@gmail.com",
      "daysBetweenCommits": 25.18,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb \u003d new StringBuilder();\n    sb.append(quote);\n    for (int i \u003d 0; i \u003c s.length(); i++) {\n        char c \u003d s.charAt(i);\n        switch(c) {\n            case \u0027\\n\u0027:\n                sb.append(\"\\\\n\");\n                break;\n            case \u0027\\r\u0027:\n                sb.append(\"\\\\r\");\n                break;\n            case \u0027\\t\u0027:\n                sb.append(\"\\\\t\");\n                break;\n            case \u0027\\\\\u0027:\n                sb.append(backslashEscape);\n                break;\n            case \u0027\\\"\u0027:\n                sb.append(doublequoteEscape);\n                break;\n            case \u0027\\\u0027\u0027:\n                sb.append(singlequoteEscape);\n                break;\n            case \u0027\u003e\u0027:\n                if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n                    sb.append(\"\\\\\u003e\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case \u0027\u003c\u0027:\n                final String END_SCRIPT \u003d \"/script\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"\u003c\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder !\u003d null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c \u003e 0x1f \u0026\u0026 c \u003c\u003d 0x7f) {\n                        sb.append(c);\n                    } else {\n                        appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}",
      "path": "src/com/google/javascript/jscomp/CodeGenerator.java",
      "functionStartLine": 809,
      "functionName": "strEscape",
      "functionAnnotation": "",
      "functionDoc": "Helper to escape javascript string as well as regular expression\n",
      "diff": "@@ -1,58 +1,58 @@\n static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n     StringBuilder sb \u003d new StringBuilder();\n     sb.append(quote);\n     for (int i \u003d 0; i \u003c s.length(); i++) {\n         char c \u003d s.charAt(i);\n         switch(c) {\n             case \u0027\\n\u0027:\n                 sb.append(\"\\\\n\");\n                 break;\n             case \u0027\\r\u0027:\n                 sb.append(\"\\\\r\");\n                 break;\n             case \u0027\\t\u0027:\n                 sb.append(\"\\\\t\");\n                 break;\n             case \u0027\\\\\u0027:\n                 sb.append(backslashEscape);\n                 break;\n             case \u0027\\\"\u0027:\n                 sb.append(doublequoteEscape);\n                 break;\n             case \u0027\\\u0027\u0027:\n                 sb.append(singlequoteEscape);\n                 break;\n             case \u0027\u003e\u0027:\n                 if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n                     sb.append(\"\\\\\u003e\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case \u0027\u003c\u0027:\n                 final String END_SCRIPT \u003d \"/script\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"\u003c\\\\\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n                 if (outputCharsetEncoder !\u003d null) {\n                     if (outputCharsetEncoder.canEncode(c)) {\n                         sb.append(c);\n                     } else {\n-                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+                        appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 } else {\n                     if (c \u003e 0x1f \u0026\u0026 c \u003c\u003d 0x7f) {\n                         sb.append(c);\n                     } else {\n-                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+                        appendHexJavaScriptRepresentation(sb, c);\n                     }\n                 }\n         }\n     }\n     sb.append(quote);\n     return sb.toString();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "847b296c23a63aa0a0b38cc3e63883e1688288e3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/8/09, 3:50 PM",
      "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/8/09, 3:50 PM",
          "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 35.0,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb \u003d new StringBuilder();\n    sb.append(quote);\n    for (int i \u003d 0; i \u003c s.length(); i++) {\n        char c \u003d s.charAt(i);\n        switch(c) {\n            case \u0027\\n\u0027:\n                sb.append(\"\\\\n\");\n                break;\n            case \u0027\\r\u0027:\n                sb.append(\"\\\\r\");\n                break;\n            case \u0027\\t\u0027:\n                sb.append(\"\\\\t\");\n                break;\n            case \u0027\\\\\u0027:\n                sb.append(backslashEscape);\n                break;\n            case \u0027\\\"\u0027:\n                sb.append(doublequoteEscape);\n                break;\n            case \u0027\\\u0027\u0027:\n                sb.append(singlequoteEscape);\n                break;\n            case \u0027\u003e\u0027:\n                if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n                    sb.append(\"\\\\\u003e\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case \u0027\u003c\u0027:\n                final String END_SCRIPT \u003d \"/script\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"\u003c\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder !\u003d null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c \u003e 0x1f \u0026\u0026 c \u003c\u003d 0x7f) {\n                        sb.append(c);\n                    } else {\n                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}",
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java",
          "functionStartLine": 793,
          "functionName": "strEscape",
          "functionAnnotation": "",
          "functionDoc": "Helper to escape javascript string as well as regular expression\n",
          "diff": "@@ -1,50 +1,58 @@\n-static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape) {\n+static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n     StringBuilder sb \u003d new StringBuilder();\n     sb.append(quote);\n     for (int i \u003d 0; i \u003c s.length(); i++) {\n         char c \u003d s.charAt(i);\n         switch(c) {\n             case \u0027\\n\u0027:\n                 sb.append(\"\\\\n\");\n                 break;\n             case \u0027\\r\u0027:\n                 sb.append(\"\\\\r\");\n                 break;\n             case \u0027\\t\u0027:\n                 sb.append(\"\\\\t\");\n                 break;\n             case \u0027\\\\\u0027:\n                 sb.append(backslashEscape);\n                 break;\n             case \u0027\\\"\u0027:\n                 sb.append(doublequoteEscape);\n                 break;\n             case \u0027\\\u0027\u0027:\n                 sb.append(singlequoteEscape);\n                 break;\n             case \u0027\u003e\u0027:\n                 if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n                     sb.append(\"\\\\\u003e\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case \u0027\u003c\u0027:\n                 final String END_SCRIPT \u003d \"/script\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"\u003c\\\\\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                if (c \u003e 0x1F \u0026\u0026 c \u003c 0x7F) {\n-                    sb.append(c);\n+                if (outputCharsetEncoder !\u003d null) {\n+                    if (outputCharsetEncoder.canEncode(c)) {\n+                        sb.append(c);\n+                    } else {\n+                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+                    }\n                 } else {\n-                    StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+                    if (c \u003e 0x1f \u0026\u0026 c \u003c\u003d 0x7f) {\n+                        sb.append(c);\n+                    } else {\n+                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+                    }\n                 }\n         }\n     }\n     sb.append(quote);\n     return sb.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[s-String, quote-char, doublequoteEscape-String, singlequoteEscape-String, backslashEscape-String]",
            "newValue": "[s-String, quote-char, doublequoteEscape-String, singlequoteEscape-String, backslashEscape-String, outputCharsetEncoder-CharsetEncoder]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add support for other charset types.\n\nAdd support for ES5 directives.\n\nFork unit tests, so that they run more hermetically.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@21 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "12/8/09, 3:50 PM",
          "commitName": "847b296c23a63aa0a0b38cc3e63883e1688288e3",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 35.0,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "actualSource": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n    StringBuilder sb \u003d new StringBuilder();\n    sb.append(quote);\n    for (int i \u003d 0; i \u003c s.length(); i++) {\n        char c \u003d s.charAt(i);\n        switch(c) {\n            case \u0027\\n\u0027:\n                sb.append(\"\\\\n\");\n                break;\n            case \u0027\\r\u0027:\n                sb.append(\"\\\\r\");\n                break;\n            case \u0027\\t\u0027:\n                sb.append(\"\\\\t\");\n                break;\n            case \u0027\\\\\u0027:\n                sb.append(backslashEscape);\n                break;\n            case \u0027\\\"\u0027:\n                sb.append(doublequoteEscape);\n                break;\n            case \u0027\\\u0027\u0027:\n                sb.append(singlequoteEscape);\n                break;\n            case \u0027\u003e\u0027:\n                if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n                    sb.append(\"\\\\\u003e\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case \u0027\u003c\u0027:\n                final String END_SCRIPT \u003d \"/script\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"\u003c\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (outputCharsetEncoder !\u003d null) {\n                    if (outputCharsetEncoder.canEncode(c)) {\n                        sb.append(c);\n                    } else {\n                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n                    }\n                } else {\n                    if (c \u003e 0x1f \u0026\u0026 c \u003c\u003d 0x7f) {\n                        sb.append(c);\n                    } else {\n                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n                    }\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}",
          "path": "src/com/google/javascript/jscomp/CodeGenerator.java",
          "functionStartLine": 793,
          "functionName": "strEscape",
          "functionAnnotation": "",
          "functionDoc": "Helper to escape javascript string as well as regular expression\n",
          "diff": "@@ -1,50 +1,58 @@\n-static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape) {\n+static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape, CharsetEncoder outputCharsetEncoder) {\n     StringBuilder sb \u003d new StringBuilder();\n     sb.append(quote);\n     for (int i \u003d 0; i \u003c s.length(); i++) {\n         char c \u003d s.charAt(i);\n         switch(c) {\n             case \u0027\\n\u0027:\n                 sb.append(\"\\\\n\");\n                 break;\n             case \u0027\\r\u0027:\n                 sb.append(\"\\\\r\");\n                 break;\n             case \u0027\\t\u0027:\n                 sb.append(\"\\\\t\");\n                 break;\n             case \u0027\\\\\u0027:\n                 sb.append(backslashEscape);\n                 break;\n             case \u0027\\\"\u0027:\n                 sb.append(doublequoteEscape);\n                 break;\n             case \u0027\\\u0027\u0027:\n                 sb.append(singlequoteEscape);\n                 break;\n             case \u0027\u003e\u0027:\n                 if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n                     sb.append(\"\\\\\u003e\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             case \u0027\u003c\u0027:\n                 final String END_SCRIPT \u003d \"/script\";\n                 if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                     sb.append(\"\u003c\\\\\");\n                 } else {\n                     sb.append(c);\n                 }\n                 break;\n             default:\n-                if (c \u003e 0x1F \u0026\u0026 c \u003c 0x7F) {\n-                    sb.append(c);\n+                if (outputCharsetEncoder !\u003d null) {\n+                    if (outputCharsetEncoder.canEncode(c)) {\n+                        sb.append(c);\n+                    } else {\n+                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+                    }\n                 } else {\n-                    StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+                    if (c \u003e 0x1f \u0026\u0026 c \u003c\u003d 0x7f) {\n+                        sb.append(c);\n+                    } else {\n+                        StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+                    }\n                 }\n         }\n     }\n     sb.append(quote);\n     return sb.toString();\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,50 @@\n+static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape) {\n+    StringBuilder sb \u003d new StringBuilder();\n+    sb.append(quote);\n+    for (int i \u003d 0; i \u003c s.length(); i++) {\n+        char c \u003d s.charAt(i);\n+        switch(c) {\n+            case \u0027\\n\u0027:\n+                sb.append(\"\\\\n\");\n+                break;\n+            case \u0027\\r\u0027:\n+                sb.append(\"\\\\r\");\n+                break;\n+            case \u0027\\t\u0027:\n+                sb.append(\"\\\\t\");\n+                break;\n+            case \u0027\\\\\u0027:\n+                sb.append(backslashEscape);\n+                break;\n+            case \u0027\\\"\u0027:\n+                sb.append(doublequoteEscape);\n+                break;\n+            case \u0027\\\u0027\u0027:\n+                sb.append(singlequoteEscape);\n+                break;\n+            case \u0027\u003e\u0027:\n+                if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n+                    sb.append(\"\\\\\u003e\");\n+                } else {\n+                    sb.append(c);\n+                }\n+                break;\n+            case \u0027\u003c\u0027:\n+                final String END_SCRIPT \u003d \"/script\";\n+                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n+                    sb.append(\"\u003c\\\\\");\n+                } else {\n+                    sb.append(c);\n+                }\n+                break;\n+            default:\n+                if (c \u003e 0x1F \u0026\u0026 c \u003c 0x7F) {\n+                    sb.append(c);\n+                } else {\n+                    StringUtil.appendHexJavaScriptRepresentation(sb, c);\n+                }\n+        }\n+    }\n+    sb.append(quote);\n+    return sb.toString();\n+}\n\\ No newline at end of file\n",
      "actualSource": "static String strEscape(String s, char quote, String doublequoteEscape, String singlequoteEscape, String backslashEscape) {\n    StringBuilder sb \u003d new StringBuilder();\n    sb.append(quote);\n    for (int i \u003d 0; i \u003c s.length(); i++) {\n        char c \u003d s.charAt(i);\n        switch(c) {\n            case \u0027\\n\u0027:\n                sb.append(\"\\\\n\");\n                break;\n            case \u0027\\r\u0027:\n                sb.append(\"\\\\r\");\n                break;\n            case \u0027\\t\u0027:\n                sb.append(\"\\\\t\");\n                break;\n            case \u0027\\\\\u0027:\n                sb.append(backslashEscape);\n                break;\n            case \u0027\\\"\u0027:\n                sb.append(doublequoteEscape);\n                break;\n            case \u0027\\\u0027\u0027:\n                sb.append(singlequoteEscape);\n                break;\n            case \u0027\u003e\u0027:\n                if (i \u003e\u003d 2 \u0026\u0026 ((s.charAt(i - 1) \u003d\u003d \u0027-\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027-\u0027) || (s.charAt(i - 1) \u003d\u003d \u0027]\u0027 \u0026\u0026 s.charAt(i - 2) \u003d\u003d \u0027]\u0027))) {\n                    sb.append(\"\\\\\u003e\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            case \u0027\u003c\u0027:\n                final String END_SCRIPT \u003d \"/script\";\n                if (s.regionMatches(true, i + 1, END_SCRIPT, 0, END_SCRIPT.length())) {\n                    sb.append(\"\u003c\\\\\");\n                } else {\n                    sb.append(c);\n                }\n                break;\n            default:\n                if (c \u003e 0x1F \u0026\u0026 c \u003c 0x7F) {\n                    sb.append(c);\n                } else {\n                    StringUtil.appendHexJavaScriptRepresentation(sb, c);\n                }\n        }\n    }\n    sb.append(quote);\n    return sb.toString();\n}",
      "path": "src/com/google/javascript/jscomp/CodeGenerator.java",
      "functionStartLine": 767,
      "functionName": "strEscape",
      "functionAnnotation": "",
      "functionDoc": "Helper to escape javascript string as well as regular expression\n"
    }
  }
}