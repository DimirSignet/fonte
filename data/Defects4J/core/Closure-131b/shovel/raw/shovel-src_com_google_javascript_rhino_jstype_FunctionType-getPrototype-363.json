{
  "origin": "codeshovel",
  "repositoryName": "Closure-131b",
  "repositoryPath": "/tmp/Closure-131b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FunctionType.java",
  "functionName": "getPrototype",
  "functionId": "getPrototype",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/FunctionType.java",
  "functionAnnotation": "",
  "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
  "functionStartLine": 363,
  "functionEndLine": 385,
  "numCommitsSeen": 97,
  "timeTaken": 4432,
  "changeHistory": [
    "2065172121162371081ca134f05d0da599ca0ba4",
    "d71162d4337d5d12efe41d2debf7e565c2e8b871",
    "177d001a30c568037141e555d84f9bd28d3d2d86",
    "4a77f08d4f57f1dab960c3464baa9bcb3326c6a4",
    "f1be9f1d6bad1a138a4db2ca50036737a370095d",
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
    "5fa514bee8f76534232e4653eaf16cd416e08012",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "2065172121162371081ca134f05d0da599ca0ba4": "Ybodychange",
    "d71162d4337d5d12efe41d2debf7e565c2e8b871": "Ybodychange",
    "177d001a30c568037141e555d84f9bd28d3d2d86": "Ybodychange",
    "4a77f08d4f57f1dab960c3464baa9bcb3326c6a4": "Ybodychange",
    "f1be9f1d6bad1a138a4db2ca50036737a370095d": "Ybodychange",
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": "Ybodychange",
    "5fa514bee8f76534232e4653eaf16cd416e08012": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2065172121162371081ca134f05d0da599ca0ba4": {
      "type": "Ybodychange",
      "commitMessage": "\nAdds a TemplateTypeMap, which encapsulates a mapping between template keys (String) and their values (JSType). Hooks into all relevant JSTypes except TemplatizedType.\n\nR\u003ddimvar,nicksantos,johnlenz\nDELTA\u003d487 (242 added, 197 deleted, 48 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d6208\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2493 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/29/13, 11:03 AM",
      "commitName": "2065172121162371081ca134f05d0da599ca0ba4",
      "commitAuthor": "izaakr@google.com",
      "commitDateOld": "12/11/12, 7:37 AM",
      "commitNameOld": "375e35882d3533f5af9a900d78682089900822ba",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 49.14,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "public ObjectType getPrototype() {\n    if (prototypeSlot \u003d\u003d null) {\n        String refName \u003d getReferenceName();\n        if (refName \u003d\u003d null) {\n            setPrototypeNoCheck(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n        } else {\n            setPrototype(new PrototypeObjectType(registry, getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType(), null), null);\n        }\n    }\n    return (ObjectType) prototypeSlot.getType();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 363,
      "functionName": "getPrototype",
      "functionAnnotation": "",
      "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
      "diff": "@@ -1,11 +1,11 @@\n public ObjectType getPrototype() {\n     if (prototypeSlot \u003d\u003d null) {\n         String refName \u003d getReferenceName();\n         if (refName \u003d\u003d null) {\n             setPrototypeNoCheck(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n         } else {\n-            setPrototype(new PrototypeObjectType(registry, getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType(), null, null), null);\n+            setPrototype(new PrototypeObjectType(registry, getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType(), null), null);\n         }\n     }\n     return (ObjectType) prototypeSlot.getType();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d71162d4337d5d12efe41d2debf7e565c2e8b871": {
      "type": "Ybodychange",
      "commitMessage": "\nDetect when the prototype property of a @struct constructor is assigned to an unannotated object literal.\n\nR\u003dnicksantos\nDELTA\u003d30  (17 added, 2 deleted, 11 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5718\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2282 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/26/12, 10:29 AM",
      "commitName": "d71162d4337d5d12efe41d2debf7e565c2e8b871",
      "commitAuthor": "dimvar@google.com",
      "commitDateOld": "10/24/12, 2:07 PM",
      "commitNameOld": "177d001a30c568037141e555d84f9bd28d3d2d86",
      "commitAuthorOld": "izaakr@google.com",
      "daysBetweenCommits": 1.85,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "public ObjectType getPrototype() {\n    if (prototypeSlot \u003d\u003d null) {\n        String refName \u003d getReferenceName();\n        if (refName \u003d\u003d null) {\n            setPrototypeNoCheck(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n        } else {\n            setPrototype(new PrototypeObjectType(registry, getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType(), null, null), null);\n        }\n    }\n    return (ObjectType) prototypeSlot.getType();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 362,
      "functionName": "getPrototype",
      "functionAnnotation": "",
      "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
      "diff": "@@ -1,11 +1,11 @@\n public ObjectType getPrototype() {\n     if (prototypeSlot \u003d\u003d null) {\n         String refName \u003d getReferenceName();\n         if (refName \u003d\u003d null) {\n             setPrototypeNoCheck(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n         } else {\n-            setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType(), null, null), null);\n+            setPrototype(new PrototypeObjectType(registry, getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType(), null, null), null);\n         }\n     }\n     return (ObjectType) prototypeSlot.getType();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "177d001a30c568037141e555d84f9bd28d3d2d86": {
      "type": "Ybodychange",
      "commitMessage": "\nAdds basic support for template keys and templatized types to the base JSType. Array and Object will be converted to this templatized type system.\n\nR\u003ddimvar,nicksantos\nDELTA\u003d324  (225 added, 17 deleted, 82 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d5698\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2278 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "10/24/12, 2:07 PM",
      "commitName": "177d001a30c568037141e555d84f9bd28d3d2d86",
      "commitAuthor": "izaakr@google.com",
      "commitDateOld": "10/19/12, 9:41 AM",
      "commitNameOld": "ac239c7c53aa4d6c3105f600dec8af69da530883",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 5.18,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "public ObjectType getPrototype() {\n    if (prototypeSlot \u003d\u003d null) {\n        String refName \u003d getReferenceName();\n        if (refName \u003d\u003d null) {\n            setPrototypeNoCheck(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n        } else {\n            setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType(), null, null), null);\n        }\n    }\n    return (ObjectType) prototypeSlot.getType();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 362,
      "functionName": "getPrototype",
      "functionAnnotation": "",
      "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
      "diff": "@@ -1,11 +1,11 @@\n public ObjectType getPrototype() {\n     if (prototypeSlot \u003d\u003d null) {\n         String refName \u003d getReferenceName();\n         if (refName \u003d\u003d null) {\n             setPrototypeNoCheck(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n         } else {\n-            setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n+            setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType(), null, null), null);\n         }\n     }\n     return (ObjectType) prototypeSlot.getType();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4a77f08d4f57f1dab960c3464baa9bcb3326c6a4": {
      "type": "Ybodychange",
      "commitMessage": "\nProper handling of structural constructors\n\nR\u003djohnlenz\nDELTA\u003d161  (138 added, 20 deleted, 3 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4936\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2017 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/4/12, 9:43 AM",
      "commitName": "4a77f08d4f57f1dab960c3464baa9bcb3326c6a4",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "6/2/12, 3:48 PM",
      "commitNameOld": "4606edd925f6057709e2fe35cd02155fdd457339",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 1.75,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "public ObjectType getPrototype() {\n    if (prototypeSlot \u003d\u003d null) {\n        String refName \u003d getReferenceName();\n        if (refName \u003d\u003d null) {\n            setPrototypeNoCheck(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n        } else {\n            setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n        }\n    }\n    return (ObjectType) prototypeSlot.getType();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 312,
      "functionName": "getPrototype",
      "functionAnnotation": "",
      "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
      "diff": "@@ -1,11 +1,11 @@\n public ObjectType getPrototype() {\n     if (prototypeSlot \u003d\u003d null) {\n         String refName \u003d getReferenceName();\n         if (refName \u003d\u003d null) {\n-            setPrototype(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n+            setPrototypeNoCheck(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n         } else {\n             setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n         }\n     }\n     return (ObjectType) prototypeSlot.getType();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f1be9f1d6bad1a138a4db2ca50036737a370095d": {
      "type": "Ybodychange",
      "commitMessage": "\nFix a nasty bug where properties on one prototype were leaking onto\nunrelated prototypes\n\nR\u003dacleung\nDELTA\u003d84  (65 added, 1 deleted, 18 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d4450\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1855 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/29/12, 7:42 PM",
      "commitName": "f1be9f1d6bad1a138a4db2ca50036737a370095d",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "3/12/12, 1:45 PM",
      "commitNameOld": "b742849cc99956b4b2d89eda4d9bf2eac5429e95",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 17.25,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "public ObjectType getPrototype() {\n    if (prototypeSlot \u003d\u003d null) {\n        String refName \u003d getReferenceName();\n        if (refName \u003d\u003d null) {\n            setPrototype(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n        } else {\n            setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n        }\n    }\n    return (ObjectType) prototypeSlot.getType();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 308,
      "functionName": "getPrototype",
      "functionAnnotation": "",
      "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
      "diff": "@@ -1,6 +1,11 @@\n public ObjectType getPrototype() {\n     if (prototypeSlot \u003d\u003d null) {\n-        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n+        String refName \u003d getReferenceName();\n+        if (refName \u003d\u003d null) {\n+            setPrototype(registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE), null);\n+        } else {\n+            setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n+        }\n     }\n     return (ObjectType) prototypeSlot.getType();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5c695ce6ca5095ba764d34e634c20f65d8a558e2": {
      "type": "Ybodychange",
      "commitMessage": "\nProper source information for function prototypes\n\nR\u003dacleung\nDELTA\u003d343  (190 added, 106 deleted, 47 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3216\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1424 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "9/8/11, 7:15 AM",
      "commitName": "5c695ce6ca5095ba764d34e634c20f65d8a558e2",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "8/31/11, 7:30 PM",
      "commitNameOld": "7e9b8336568ea7f05c33e1b58eb67fa6d4eee756",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 7.49,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "actualSource": "public ObjectType getPrototype() {\n    if (prototypeSlot \u003d\u003d null) {\n        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n    }\n    return (ObjectType) prototypeSlot.getType();\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 305,
      "functionName": "getPrototype",
      "functionAnnotation": "",
      "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
      "diff": "@@ -1,6 +1,6 @@\n public ObjectType getPrototype() {\n-    if (prototype \u003d\u003d null) {\n-        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n+    if (prototypeSlot \u003d\u003d null) {\n+        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()), null);\n     }\n-    return prototype;\n+    return (ObjectType) prototypeSlot.getType();\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5fa514bee8f76534232e4653eaf16cd416e08012": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "8/25/11, 8:10 AM",
      "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
      "commitAuthor": "nicksantos@google.com",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/25/11, 8:10 AM",
          "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/22/11, 11:38 AM",
          "commitNameOld": "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 2.86,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectType getPrototype() {\n    if (prototype \u003d\u003d null) {\n        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n    }\n    return prototype;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 304,
          "functionName": "getPrototype",
          "functionAnnotation": "",
          "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
          "diff": "@@ -1,6 +1,6 @@\n-public FunctionPrototypeType getPrototype() {\n+public ObjectType getPrototype() {\n     if (prototype \u003d\u003d null) {\n-        setPrototype(new FunctionPrototypeType(registry, this, null));\n+        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n     }\n     return prototype;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "FunctionPrototypeType",
            "newValue": "ObjectType"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "\nChange how Function prototypes are represented in the type\nsystem.  This fixes lots of bugs when an anonymous object is\nthe prototype, and will make life a lot easier for IDEs.\n\nR\u003djohnlenz\nDELTA\u003d370  (129 added, 177 deleted, 64 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3135\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1389 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "8/25/11, 8:10 AM",
          "commitName": "5fa514bee8f76534232e4653eaf16cd416e08012",
          "commitAuthor": "nicksantos@google.com",
          "commitDateOld": "8/22/11, 11:38 AM",
          "commitNameOld": "1aaaaa9fe982beb4cd34edb0f7452a3c6da199d9",
          "commitAuthorOld": "nicksantos@google.com",
          "daysBetweenCommits": 2.86,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "actualSource": "public ObjectType getPrototype() {\n    if (prototype \u003d\u003d null) {\n        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n    }\n    return prototype;\n}",
          "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
          "functionStartLine": 304,
          "functionName": "getPrototype",
          "functionAnnotation": "",
          "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n",
          "diff": "@@ -1,6 +1,6 @@\n-public FunctionPrototypeType getPrototype() {\n+public ObjectType getPrototype() {\n     if (prototype \u003d\u003d null) {\n-        setPrototype(new FunctionPrototypeType(registry, this, null));\n+        setPrototype(new PrototypeObjectType(registry, this.getReferenceName() + \".prototype\", registry.getNativeObjectType(OBJECT_TYPE), isNativeObjectType()));\n     }\n     return prototype;\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,6 @@\n+public FunctionPrototypeType getPrototype() {\n+    if (prototype \u003d\u003d null) {\n+        setPrototype(new FunctionPrototypeType(registry, this, null));\n+    }\n+    return prototype;\n+}\n\\ No newline at end of file\n",
      "actualSource": "public FunctionPrototypeType getPrototype() {\n    if (prototype \u003d\u003d null) {\n        setPrototype(new FunctionPrototypeType(registry, this, null));\n    }\n    return prototype;\n}",
      "path": "src/com/google/javascript/rhino/jstype/FunctionType.java",
      "functionStartLine": 307,
      "functionName": "getPrototype",
      "functionAnnotation": "",
      "functionDoc": "Gets the {@code prototype} property of this function type. This is\nequivalent to {@code (ObjectType) getPropertyType(\"prototype\")}.\n"
    }
  }
}