{
  "origin": "codeshovel",
  "repositoryName": "Closure-131b",
  "repositoryPath": "/tmp/Closure-131b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnionTypeBuilder.java",
  "functionName": "reduceAlternatesWithoutUnion",
  "functionId": "reduceAlternatesWithoutUnion",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
  "functionAnnotation": "",
  "functionDoc": "Reduce the alternates into a non-union type.\nIf the alternates can\u0027t be accurately represented with a non-union\ntype, return null.\n",
  "functionStartLine": 288,
  "functionEndLine": 309,
  "numCommitsSeen": 28,
  "timeTaken": 3339,
  "changeHistory": [
    "79c373c265c0444e0e1edb014ec4e763689879dc",
    "5bebea634889ca79649889eaa21205880eb3ad33",
    "2bc4e294e28b2cd78e92feafa497261d524bae23",
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45"
  ],
  "changeHistoryShort": {
    "79c373c265c0444e0e1edb014ec4e763689879dc": "Ybodychange",
    "5bebea634889ca79649889eaa21205880eb3ad33": "Ybodychange",
    "2bc4e294e28b2cd78e92feafa497261d524bae23": "Ybodychange",
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": "Yintroduced"
  },
  "changeHistoryDetails": {
    "79c373c265c0444e0e1edb014ec4e763689879dc": {
      "type": "Ybodychange",
      "commitMessage": "\nAs per email/IM conversations, this CL raises the maximum number of alternate types tracked by the UnionTypeBuilder during property checking. This prevents methods that appear on more than 20 types from always being reported as being a property of ?\n\nR\u003dmoedinger,nicksantos\nDELTA\u003d63  (58 added, 1 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2760\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1293 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "7/27/11, 4:17 AM",
      "commitName": "79c373c265c0444e0e1edb014ec4e763689879dc",
      "commitAuthor": "henrywong@google.com",
      "commitDateOld": "7/26/11, 3:36 PM",
      "commitNameOld": "c9855bee34deaee86909d3786db294a1341e496a",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.53,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n        return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n        if (areAllUnknownsChecked) {\n            return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n        } else {\n            return registry.getNativeType(UNKNOWN_TYPE);\n        }\n    } else {\n        int size \u003d alternates.size();\n        if (size \u003e maxUnionSize) {\n            return registry.getNativeType(UNKNOWN_TYPE);\n        } else if (size \u003e 1) {\n            return null;\n        } else if (size \u003d\u003d 1) {\n            return alternates.iterator().next();\n        } else {\n            return registry.getNativeType(NO_TYPE);\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 167,
      "functionName": "reduceAlternatesWithoutUnion",
      "functionAnnotation": "",
      "functionDoc": "Reduce the alternates into a non-union type.\nIf the alternates can\u0027t be accurately represented with a non-union\ntype, return null.\n",
      "diff": "@@ -1,22 +1,22 @@\n private JSType reduceAlternatesWithoutUnion() {\n     if (isAllType) {\n         return registry.getNativeType(ALL_TYPE);\n     } else if (isNativeUnknownType) {\n         if (areAllUnknownsChecked) {\n             return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n         } else {\n             return registry.getNativeType(UNKNOWN_TYPE);\n         }\n     } else {\n         int size \u003d alternates.size();\n-        if (size \u003e MAX_UNION_SIZE) {\n+        if (size \u003e maxUnionSize) {\n             return registry.getNativeType(UNKNOWN_TYPE);\n         } else if (size \u003e 1) {\n             return null;\n         } else if (size \u003d\u003d 1) {\n             return alternates.iterator().next();\n         } else {\n             return registry.getNativeType(NO_TYPE);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5bebea634889ca79649889eaa21205880eb3ad33": {
      "type": "Ybodychange",
      "commitMessage": "\nwhat was i thinking? i was right the first time.\nunion(?, *) \u003d\u003d *\n\nR\u003djohnlenz\nDELTA\u003d6  (2 added, 2 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d337\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@727 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/21/11, 1:01 PM",
      "commitName": "5bebea634889ca79649889eaa21205880eb3ad33",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/20/11, 7:44 PM",
      "commitNameOld": "2bc4e294e28b2cd78e92feafa497261d524bae23",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 0.72,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n        return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n        if (areAllUnknownsChecked) {\n            return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n        } else {\n            return registry.getNativeType(UNKNOWN_TYPE);\n        }\n    } else {\n        int size \u003d alternates.size();\n        if (size \u003e MAX_UNION_SIZE) {\n            return registry.getNativeType(UNKNOWN_TYPE);\n        } else if (size \u003e 1) {\n            return null;\n        } else if (size \u003d\u003d 1) {\n            return alternates.iterator().next();\n        } else {\n            return registry.getNativeType(NO_TYPE);\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 157,
      "functionName": "reduceAlternatesWithoutUnion",
      "functionAnnotation": "",
      "functionDoc": "Reduce the alternates into a non-union type.\nIf the alternates can\u0027t be accurately represented with a non-union\ntype, return null.\n",
      "diff": "@@ -1,22 +1,22 @@\n private JSType reduceAlternatesWithoutUnion() {\n-    if (isNativeUnknownType) {\n+    if (isAllType) {\n+        return registry.getNativeType(ALL_TYPE);\n+    } else if (isNativeUnknownType) {\n         if (areAllUnknownsChecked) {\n             return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n         } else {\n             return registry.getNativeType(UNKNOWN_TYPE);\n         }\n-    } else if (isAllType) {\n-        return registry.getNativeType(ALL_TYPE);\n     } else {\n         int size \u003d alternates.size();\n         if (size \u003e MAX_UNION_SIZE) {\n             return registry.getNativeType(UNKNOWN_TYPE);\n         } else if (size \u003e 1) {\n             return null;\n         } else if (size \u003d\u003d 1) {\n             return alternates.iterator().next();\n         } else {\n             return registry.getNativeType(NO_TYPE);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2bc4e294e28b2cd78e92feafa497261d524bae23": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nFixes regression\n\n*** Original change description ***\n\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\n\u003center reason for rollback\u003e\n\n*** Original change description ***\n\nSimplify the lattice operations a lot by collapsing\nthem into the base JSType implementation.\nThese were becoming really hard to reason about because of\nall the virtual method dispatch.\n\nR\u003djohnlenz\nDELTA\u003d208  (5 added, 201 deleted, 2 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d327\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@721 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "1/20/11, 7:44 PM",
      "commitName": "2bc4e294e28b2cd78e92feafa497261d524bae23",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "1/18/11, 5:02 PM",
      "commitNameOld": "11bd742011d67590031dba6e9d1f7186393b38a0",
      "commitAuthorOld": "nicksantos@google.com",
      "daysBetweenCommits": 2.11,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "actualSource": "private JSType reduceAlternatesWithoutUnion() {\n    if (isNativeUnknownType) {\n        if (areAllUnknownsChecked) {\n            return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n        } else {\n            return registry.getNativeType(UNKNOWN_TYPE);\n        }\n    } else if (isAllType) {\n        return registry.getNativeType(ALL_TYPE);\n    } else {\n        int size \u003d alternates.size();\n        if (size \u003e MAX_UNION_SIZE) {\n            return registry.getNativeType(UNKNOWN_TYPE);\n        } else if (size \u003e 1) {\n            return null;\n        } else if (size \u003d\u003d 1) {\n            return alternates.iterator().next();\n        } else {\n            return registry.getNativeType(NO_TYPE);\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 157,
      "functionName": "reduceAlternatesWithoutUnion",
      "functionAnnotation": "",
      "functionDoc": "Reduce the alternates into a non-union type.\nIf the alternates can\u0027t be accurately represented with a non-union\ntype, return null.\n",
      "diff": "@@ -1,22 +1,22 @@\n private JSType reduceAlternatesWithoutUnion() {\n-    if (isAllType) {\n-        return registry.getNativeType(ALL_TYPE);\n-    } else if (isNativeUnknownType) {\n+    if (isNativeUnknownType) {\n         if (areAllUnknownsChecked) {\n             return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n         } else {\n             return registry.getNativeType(UNKNOWN_TYPE);\n         }\n+    } else if (isAllType) {\n+        return registry.getNativeType(ALL_TYPE);\n     } else {\n         int size \u003d alternates.size();\n         if (size \u003e MAX_UNION_SIZE) {\n             return registry.getNativeType(UNKNOWN_TYPE);\n         } else if (size \u003e 1) {\n             return null;\n         } else if (size \u003d\u003d 1) {\n             return alternates.iterator().next();\n         } else {\n             return registry.getNativeType(NO_TYPE);\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1c75a5484b515bd593295fbf0c8491e2dd1f1c45": {
      "type": "Yintroduced",
      "commitMessage": "\nremove all uses of Sets of types.\nequality can change over time, so this is not safe.\nThis means we need to be much more explicit in how\nwe collapse type duplicates in unions and in type tightening\n\nR\u003djohnlenz\nDELTA\u003d319  (210 added, 52 deleted, 57 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d121\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@623 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "12/13/10, 8:10 AM",
      "commitName": "1c75a5484b515bd593295fbf0c8491e2dd1f1c45",
      "commitAuthor": "nicksantos@google.com",
      "diff": "@@ -0,0 +1,22 @@\n+private JSType reduceAlternatesWithoutUnion() {\n+    if (isAllType) {\n+        return registry.getNativeType(ALL_TYPE);\n+    } else if (isNativeUnknownType) {\n+        if (areAllUnknownsChecked) {\n+            return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n+        } else {\n+            return registry.getNativeType(UNKNOWN_TYPE);\n+        }\n+    } else {\n+        int size \u003d alternates.size();\n+        if (size \u003e MAX_UNION_SIZE) {\n+            return registry.getNativeType(UNKNOWN_TYPE);\n+        } else if (size \u003e 1) {\n+            return null;\n+        } else if (size \u003d\u003d 1) {\n+            return alternates.iterator().next();\n+        } else {\n+            return registry.getNativeType(NO_TYPE);\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private JSType reduceAlternatesWithoutUnion() {\n    if (isAllType) {\n        return registry.getNativeType(ALL_TYPE);\n    } else if (isNativeUnknownType) {\n        if (areAllUnknownsChecked) {\n            return registry.getNativeType(CHECKED_UNKNOWN_TYPE);\n        } else {\n            return registry.getNativeType(UNKNOWN_TYPE);\n        }\n    } else {\n        int size \u003d alternates.size();\n        if (size \u003e MAX_UNION_SIZE) {\n            return registry.getNativeType(UNKNOWN_TYPE);\n        } else if (size \u003e 1) {\n            return null;\n        } else if (size \u003d\u003d 1) {\n            return alternates.iterator().next();\n        } else {\n            return registry.getNativeType(NO_TYPE);\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java",
      "functionStartLine": 157,
      "functionName": "reduceAlternatesWithoutUnion",
      "functionAnnotation": "",
      "functionDoc": "Reduce the alternates into a non-union type.\nIf the alternates can\u0027t be accurately represented with a non-union\ntype, return null.\n"
    }
  }
}