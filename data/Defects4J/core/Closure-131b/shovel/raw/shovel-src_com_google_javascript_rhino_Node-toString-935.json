{
  "origin": "codeshovel",
  "repositoryName": "Closure-131b",
  "repositoryPath": "/tmp/Closure-131b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Node.java",
  "functionName": "toString",
  "functionId": "toString___sb-StringBuilder__printSource-boolean__printAnnotations-boolean__printType-boolean",
  "sourceFilePath": "src/com/google/javascript/rhino/Node.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 935,
  "functionEndLine": 994,
  "numCommitsSeen": 88,
  "timeTaken": 7650,
  "changeHistory": [
    "03d0d81dbe0cb16bd147e5b61d1f32276090d5d2",
    "c8c81c6615908f82ae5e7b294643caa177688513",
    "b29c8c0910f9c82add9df5bb70fc25b4fedb9bb5",
    "e42c68a66f01e27f89518741ae1842e91d01510e",
    "aa365d3e2d35439107337c856a3b27b8dc3e1bcd",
    "0ace02f4d582988b228fcc313ba03c6861e77693",
    "7d80ca979b09eed590c85c00fb7957f90e1706d4",
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe",
    "43859717972907dd1ecebd8dca6e05036386e28b",
    "7efb21a25bb44dcfc513d584c6b191aeacfba367",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "03d0d81dbe0cb16bd147e5b61d1f32276090d5d2": "Ybodychange",
    "c8c81c6615908f82ae5e7b294643caa177688513": "Ybodychange",
    "b29c8c0910f9c82add9df5bb70fc25b4fedb9bb5": "Ybodychange",
    "e42c68a66f01e27f89518741ae1842e91d01510e": "Ybodychange",
    "aa365d3e2d35439107337c856a3b27b8dc3e1bcd": "Ybodychange",
    "0ace02f4d582988b228fcc313ba03c6861e77693": "Ybodychange",
    "7d80ca979b09eed590c85c00fb7957f90e1706d4": "Ybodychange",
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe": "Ybodychange",
    "43859717972907dd1ecebd8dca6e05036386e28b": "Yformatchange",
    "7efb21a25bb44dcfc513d584c6b191aeacfba367": "Ymultichange(Yparameterchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "03d0d81dbe0cb16bd147e5b61d1f32276090d5d2": {
      "type": "Ybodychange",
      "commitMessage": "\nMore rhino_ast dead code stripping.\n\nR\u003dnicksantos\nDELTA\u003d1695  (48 added, 1552 deleted, 95 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3652\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1567 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/8/11, 9:51 AM",
      "commitName": "03d0d81dbe0cb16bd147e5b61d1f32276090d5d2",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/7/11, 3:28 PM",
      "commitNameOld": "c8c81c6615908f82ae5e7b294643caa177688513",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    sb.append(Token.name(type));\n    if (this instanceof StringNode) {\n        sb.append(\u0027 \u0027);\n        sb.append(getString());\n    } else if (type \u003d\u003d Token.FUNCTION) {\n        sb.append(\u0027 \u0027);\n        if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n            sb.append(\"\u003cinvalid\u003e\");\n        } else {\n            sb.append(first.getString());\n        }\n    } else if (type \u003d\u003d Token.NUMBER) {\n        sb.append(\u0027 \u0027);\n        sb.append(getDouble());\n    }\n    if (printSource) {\n        int lineno \u003d getLineno();\n        if (lineno !\u003d -1) {\n            sb.append(\u0027 \u0027);\n            sb.append(lineno);\n        }\n    }\n    if (printAnnotations) {\n        int[] keys \u003d getSortedPropTypes();\n        for (int i \u003d 0; i \u003c keys.length; i++) {\n            int type \u003d keys[i];\n            PropListItem x \u003d lookupProperty(type);\n            sb.append(\" [\");\n            sb.append(propToString(type));\n            sb.append(\": \");\n            String value;\n            switch(type) {\n                default:\n                    value \u003d x.toString();\n                    break;\n            }\n            sb.append(value);\n            sb.append(\u0027]\u0027);\n        }\n    }\n    if (printType) {\n        if (jsType !\u003d null) {\n            String jsTypeString \u003d jsType.toString();\n            if (jsTypeString !\u003d null) {\n                sb.append(\" : \");\n                sb.append(jsTypeString);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 925,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,53 +1,51 @@\n private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n-    if (Token.printTrees) {\n-        sb.append(Token.name(type));\n-        if (this instanceof StringNode) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getString());\n-        } else if (type \u003d\u003d Token.FUNCTION) {\n-            sb.append(\u0027 \u0027);\n-            if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n-                sb.append(\"\u003cinvalid\u003e\");\n-            } else {\n-                sb.append(first.getString());\n-            }\n-        } else if (type \u003d\u003d Token.NUMBER) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(getDouble());\n+    sb.append(Token.name(type));\n+    if (this instanceof StringNode) {\n+        sb.append(\u0027 \u0027);\n+        sb.append(getString());\n+    } else if (type \u003d\u003d Token.FUNCTION) {\n+        sb.append(\u0027 \u0027);\n+        if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n+            sb.append(\"\u003cinvalid\u003e\");\n+        } else {\n+            sb.append(first.getString());\n         }\n-        if (printSource) {\n-            int lineno \u003d getLineno();\n-            if (lineno !\u003d -1) {\n-                sb.append(\u0027 \u0027);\n-                sb.append(lineno);\n-            }\n+    } else if (type \u003d\u003d Token.NUMBER) {\n+        sb.append(\u0027 \u0027);\n+        sb.append(getDouble());\n+    }\n+    if (printSource) {\n+        int lineno \u003d getLineno();\n+        if (lineno !\u003d -1) {\n+            sb.append(\u0027 \u0027);\n+            sb.append(lineno);\n         }\n-        if (printAnnotations) {\n-            int[] keys \u003d getSortedPropTypes();\n-            for (int i \u003d 0; i \u003c keys.length; i++) {\n-                int type \u003d keys[i];\n-                PropListItem x \u003d lookupProperty(type);\n-                sb.append(\" [\");\n-                sb.append(propToString(type));\n-                sb.append(\": \");\n-                String value;\n-                switch(type) {\n-                    default:\n-                        value \u003d x.toString();\n-                        break;\n-                }\n-                sb.append(value);\n-                sb.append(\u0027]\u0027);\n+    }\n+    if (printAnnotations) {\n+        int[] keys \u003d getSortedPropTypes();\n+        for (int i \u003d 0; i \u003c keys.length; i++) {\n+            int type \u003d keys[i];\n+            PropListItem x \u003d lookupProperty(type);\n+            sb.append(\" [\");\n+            sb.append(propToString(type));\n+            sb.append(\": \");\n+            String value;\n+            switch(type) {\n+                default:\n+                    value \u003d x.toString();\n+                    break;\n             }\n+            sb.append(value);\n+            sb.append(\u0027]\u0027);\n         }\n-        if (printType) {\n-            if (jsType !\u003d null) {\n-                String jsTypeString \u003d jsType.toString();\n-                if (jsTypeString !\u003d null) {\n-                    sb.append(\" : \");\n-                    sb.append(jsTypeString);\n-                }\n+    }\n+    if (printType) {\n+        if (jsType !\u003d null) {\n+            String jsTypeString \u003d jsType.toString();\n+            if (jsTypeString !\u003d null) {\n+                sb.append(\" : \");\n+                sb.append(jsTypeString);\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c8c81c6615908f82ae5e7b294643caa177688513": {
      "type": "Ybodychange",
      "commitMessage": "\nBasic Node class cleaning: Remove unused annotation types and remove obsolete side-effect detection function\n\nR\u003dnicksantos\nDELTA\u003d227  (0 added, 226 deleted, 1 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3649\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1564 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/7/11, 3:28 PM",
      "commitName": "c8c81c6615908f82ae5e7b294643caa177688513",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/7/11, 3:17 PM",
      "commitNameOld": "b29c8c0910f9c82add9df5bb70fc25b4fedb9bb5",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n                sb.append(\"\u003cinvalid\u003e\");\n            } else {\n                sb.append(first.getString());\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    default:\n                        value \u003d x.toString();\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 928,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,86 +1,53 @@\n private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n         sb.append(Token.name(type));\n         if (this instanceof StringNode) {\n             sb.append(\u0027 \u0027);\n             sb.append(getString());\n         } else if (type \u003d\u003d Token.FUNCTION) {\n             sb.append(\u0027 \u0027);\n             if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n                 sb.append(\"\u003cinvalid\u003e\");\n             } else {\n                 sb.append(first.getString());\n             }\n         } else if (type \u003d\u003d Token.NUMBER) {\n             sb.append(\u0027 \u0027);\n             sb.append(getDouble());\n         }\n         if (printSource) {\n             int lineno \u003d getLineno();\n             if (lineno !\u003d -1) {\n                 sb.append(\u0027 \u0027);\n                 sb.append(lineno);\n             }\n         }\n         if (printAnnotations) {\n             int[] keys \u003d getSortedPropTypes();\n             for (int i \u003d 0; i \u003c keys.length; i++) {\n                 int type \u003d keys[i];\n                 PropListItem x \u003d lookupProperty(type);\n                 sb.append(\" [\");\n                 sb.append(propToString(type));\n                 sb.append(\": \");\n                 String value;\n                 switch(type) {\n-                    case TARGETBLOCK_PROP:\n-                        value \u003d \"target block property\";\n-                        break;\n-                    case LOCAL_BLOCK_PROP:\n-                        value \u003d \"last local block\";\n-                        break;\n-                    case ISNUMBER_PROP:\n-                        switch(x.getIntValue()) {\n-                            case BOTH:\n-                                value \u003d \"both\";\n-                                break;\n-                            case RIGHT:\n-                                value \u003d \"right\";\n-                                break;\n-                            case LEFT:\n-                                value \u003d \"left\";\n-                                break;\n-                            default:\n-                                throw Kit.codeBug();\n-                        }\n-                        break;\n-                    case SPECIALCALL_PROP:\n-                        switch(x.getIntValue()) {\n-                            case SPECIALCALL_EVAL:\n-                                value \u003d \"eval\";\n-                                break;\n-                            case SPECIALCALL_WITH:\n-                                value \u003d \"with\";\n-                                break;\n-                            default:\n-                                throw Kit.codeBug();\n-                        }\n-                        break;\n                     default:\n                         value \u003d x.toString();\n                         break;\n                 }\n                 sb.append(value);\n                 sb.append(\u0027]\u0027);\n             }\n         }\n         if (printType) {\n             if (jsType !\u003d null) {\n                 String jsTypeString \u003d jsType.toString();\n                 if (jsTypeString !\u003d null) {\n                     sb.append(\" : \");\n                     sb.append(jsTypeString);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b29c8c0910f9c82add9df5bb70fc25b4fedb9bb5": {
      "type": "Ybodychange",
      "commitMessage": "\nRemove unneeded parts of rhino_ast\n\nR\u003dnicksantos\nDELTA\u003d5085  (0 added, 5081 deleted, 4 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d3648\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1563 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/7/11, 3:17 PM",
      "commitName": "b29c8c0910f9c82add9df5bb70fc25b4fedb9bb5",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "11/7/11, 2:21 PM",
      "commitNameOld": "6641663fa9970c4d7bcdd96a6f31b83b18c3ee3d",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n                sb.append(\"\u003cinvalid\u003e\");\n            } else {\n                sb.append(first.getString());\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    case TARGETBLOCK_PROP:\n                        value \u003d \"target block property\";\n                        break;\n                    case LOCAL_BLOCK_PROP:\n                        value \u003d \"last local block\";\n                        break;\n                    case ISNUMBER_PROP:\n                        switch(x.getIntValue()) {\n                            case BOTH:\n                                value \u003d \"both\";\n                                break;\n                            case RIGHT:\n                                value \u003d \"right\";\n                                break;\n                            case LEFT:\n                                value \u003d \"left\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    case SPECIALCALL_PROP:\n                        switch(x.getIntValue()) {\n                            case SPECIALCALL_EVAL:\n                                value \u003d \"eval\";\n                                break;\n                            case SPECIALCALL_WITH:\n                                value \u003d \"with\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    default:\n                        value \u003d x.toString();\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 1034,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,104 +1,86 @@\n private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n         sb.append(Token.name(type));\n         if (this instanceof StringNode) {\n             sb.append(\u0027 \u0027);\n             sb.append(getString());\n         } else if (type \u003d\u003d Token.FUNCTION) {\n             sb.append(\u0027 \u0027);\n             if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n                 sb.append(\"\u003cinvalid\u003e\");\n             } else {\n                 sb.append(first.getString());\n             }\n-        } else if (this instanceof ScriptOrFnNode) {\n-            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n-            if (this instanceof FunctionNode) {\n-                FunctionNode fn \u003d (FunctionNode) this;\n-                sb.append(\u0027 \u0027);\n-                sb.append(fn.getFunctionName());\n-            }\n-            if (printSource) {\n-                sb.append(\" [source name: \");\n-                sb.append(sof.getSourceName());\n-                sb.append(\"] [encoded source length: \");\n-                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n-                sb.append(\"] [base line: \");\n-                sb.append(sof.getBaseLineno());\n-                sb.append(\"] [end line: \");\n-                sb.append(sof.getEndLineno());\n-                sb.append(\u0027]\u0027);\n-            }\n         } else if (type \u003d\u003d Token.NUMBER) {\n             sb.append(\u0027 \u0027);\n             sb.append(getDouble());\n         }\n         if (printSource) {\n             int lineno \u003d getLineno();\n             if (lineno !\u003d -1) {\n                 sb.append(\u0027 \u0027);\n                 sb.append(lineno);\n             }\n         }\n         if (printAnnotations) {\n             int[] keys \u003d getSortedPropTypes();\n             for (int i \u003d 0; i \u003c keys.length; i++) {\n                 int type \u003d keys[i];\n                 PropListItem x \u003d lookupProperty(type);\n                 sb.append(\" [\");\n                 sb.append(propToString(type));\n                 sb.append(\": \");\n                 String value;\n                 switch(type) {\n                     case TARGETBLOCK_PROP:\n                         value \u003d \"target block property\";\n                         break;\n                     case LOCAL_BLOCK_PROP:\n                         value \u003d \"last local block\";\n                         break;\n                     case ISNUMBER_PROP:\n                         switch(x.getIntValue()) {\n                             case BOTH:\n                                 value \u003d \"both\";\n                                 break;\n                             case RIGHT:\n                                 value \u003d \"right\";\n                                 break;\n                             case LEFT:\n                                 value \u003d \"left\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     case SPECIALCALL_PROP:\n                         switch(x.getIntValue()) {\n                             case SPECIALCALL_EVAL:\n                                 value \u003d \"eval\";\n                                 break;\n                             case SPECIALCALL_WITH:\n                                 value \u003d \"with\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     default:\n                         value \u003d x.toString();\n                         break;\n                 }\n                 sb.append(value);\n                 sb.append(\u0027]\u0027);\n             }\n         }\n         if (printType) {\n             if (jsType !\u003d null) {\n                 String jsTypeString \u003d jsType.toString();\n                 if (jsTypeString !\u003d null) {\n                     sb.append(\" : \");\n                     sb.append(jsTypeString);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e42c68a66f01e27f89518741ae1842e91d01510e": {
      "type": "Ybodychange",
      "commitMessage": "\nSlim down ast node annotation objects.\nThis is much less ambitious than the original CL proposed by\nJohn. In this CL, the props are mutable and there are only\ntwo concrete base classes.\n\nR\u003djohnlenz\nDELTA\u003d127  (80 added, 15 deleted, 32 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d2368\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@1197 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "6/21/11, 12:21 PM",
      "commitName": "e42c68a66f01e27f89518741ae1842e91d01510e",
      "commitAuthor": "nicksantos@google.com",
      "commitDateOld": "5/16/11, 10:47 AM",
      "commitNameOld": "7078f435a2b4b53660b5bc5339820390fb177e67",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 36.07,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n                sb.append(\"\u003cinvalid\u003e\");\n            } else {\n                sb.append(first.getString());\n            }\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            if (printSource) {\n                sb.append(\" [source name: \");\n                sb.append(sof.getSourceName());\n                sb.append(\"] [encoded source length: \");\n                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                sb.append(\"] [base line: \");\n                sb.append(sof.getBaseLineno());\n                sb.append(\"] [end line: \");\n                sb.append(sof.getEndLineno());\n                sb.append(\u0027]\u0027);\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    case TARGETBLOCK_PROP:\n                        value \u003d \"target block property\";\n                        break;\n                    case LOCAL_BLOCK_PROP:\n                        value \u003d \"last local block\";\n                        break;\n                    case ISNUMBER_PROP:\n                        switch(x.getIntValue()) {\n                            case BOTH:\n                                value \u003d \"both\";\n                                break;\n                            case RIGHT:\n                                value \u003d \"right\";\n                                break;\n                            case LEFT:\n                                value \u003d \"left\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    case SPECIALCALL_PROP:\n                        switch(x.getIntValue()) {\n                            case SPECIALCALL_EVAL:\n                                value \u003d \"eval\";\n                                break;\n                            case SPECIALCALL_WITH:\n                                value \u003d \"with\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    default:\n                        value \u003d x.toString();\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 998,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,109 +1,104 @@\n private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n         sb.append(Token.name(type));\n         if (this instanceof StringNode) {\n             sb.append(\u0027 \u0027);\n             sb.append(getString());\n         } else if (type \u003d\u003d Token.FUNCTION) {\n             sb.append(\u0027 \u0027);\n             if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n                 sb.append(\"\u003cinvalid\u003e\");\n             } else {\n                 sb.append(first.getString());\n             }\n         } else if (this instanceof ScriptOrFnNode) {\n             ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n             if (this instanceof FunctionNode) {\n                 FunctionNode fn \u003d (FunctionNode) this;\n                 sb.append(\u0027 \u0027);\n                 sb.append(fn.getFunctionName());\n             }\n             if (printSource) {\n                 sb.append(\" [source name: \");\n                 sb.append(sof.getSourceName());\n                 sb.append(\"] [encoded source length: \");\n                 sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                 sb.append(\"] [base line: \");\n                 sb.append(sof.getBaseLineno());\n                 sb.append(\"] [end line: \");\n                 sb.append(sof.getEndLineno());\n                 sb.append(\u0027]\u0027);\n             }\n         } else if (type \u003d\u003d Token.NUMBER) {\n             sb.append(\u0027 \u0027);\n             sb.append(getDouble());\n         }\n         if (printSource) {\n             int lineno \u003d getLineno();\n             if (lineno !\u003d -1) {\n                 sb.append(\u0027 \u0027);\n                 sb.append(lineno);\n             }\n         }\n         if (printAnnotations) {\n             int[] keys \u003d getSortedPropTypes();\n             for (int i \u003d 0; i \u003c keys.length; i++) {\n                 int type \u003d keys[i];\n                 PropListItem x \u003d lookupProperty(type);\n                 sb.append(\" [\");\n                 sb.append(propToString(type));\n                 sb.append(\": \");\n                 String value;\n                 switch(type) {\n                     case TARGETBLOCK_PROP:\n                         value \u003d \"target block property\";\n                         break;\n                     case LOCAL_BLOCK_PROP:\n                         value \u003d \"last local block\";\n                         break;\n                     case ISNUMBER_PROP:\n-                        switch(x.intValue) {\n+                        switch(x.getIntValue()) {\n                             case BOTH:\n                                 value \u003d \"both\";\n                                 break;\n                             case RIGHT:\n                                 value \u003d \"right\";\n                                 break;\n                             case LEFT:\n                                 value \u003d \"left\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     case SPECIALCALL_PROP:\n-                        switch(x.intValue) {\n+                        switch(x.getIntValue()) {\n                             case SPECIALCALL_EVAL:\n                                 value \u003d \"eval\";\n                                 break;\n                             case SPECIALCALL_WITH:\n                                 value \u003d \"with\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     default:\n-                        Object obj \u003d x.objectValue;\n-                        if (obj !\u003d null) {\n-                            value \u003d obj.toString();\n-                        } else {\n-                            value \u003d String.valueOf(x.intValue);\n-                        }\n+                        value \u003d x.toString();\n                         break;\n                 }\n                 sb.append(value);\n                 sb.append(\u0027]\u0027);\n             }\n         }\n         if (printType) {\n             if (jsType !\u003d null) {\n                 String jsTypeString \u003d jsType.toString();\n                 if (jsTypeString !\u003d null) {\n                     sb.append(\" : \");\n                     sb.append(jsTypeString);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "aa365d3e2d35439107337c856a3b27b8dc3e1bcd": {
      "type": "Ybodychange",
      "commitMessage": "\nPeephole collapsing property assignments into objects/array definitions.\n\nRoll-forward\n\nThis fixes out-of-order array setting.\n\nR\u003djohnlenz\nDELTA\u003d402  (370 added, 3 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1007\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@931 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/11, 5:02 PM",
      "commitName": "aa365d3e2d35439107337c856a3b27b8dc3e1bcd",
      "commitAuthor": "msamuel@google.com",
      "commitDateOld": "3/22/11, 1:59 PM",
      "commitNameOld": "0ace02f4d582988b228fcc313ba03c6861e77693",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n                sb.append(\"\u003cinvalid\u003e\");\n            } else {\n                sb.append(first.getString());\n            }\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            if (printSource) {\n                sb.append(\" [source name: \");\n                sb.append(sof.getSourceName());\n                sb.append(\"] [encoded source length: \");\n                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                sb.append(\"] [base line: \");\n                sb.append(sof.getBaseLineno());\n                sb.append(\"] [end line: \");\n                sb.append(sof.getEndLineno());\n                sb.append(\u0027]\u0027);\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    case TARGETBLOCK_PROP:\n                        value \u003d \"target block property\";\n                        break;\n                    case LOCAL_BLOCK_PROP:\n                        value \u003d \"last local block\";\n                        break;\n                    case ISNUMBER_PROP:\n                        switch(x.intValue) {\n                            case BOTH:\n                                value \u003d \"both\";\n                                break;\n                            case RIGHT:\n                                value \u003d \"right\";\n                                break;\n                            case LEFT:\n                                value \u003d \"left\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    case SPECIALCALL_PROP:\n                        switch(x.intValue) {\n                            case SPECIALCALL_EVAL:\n                                value \u003d \"eval\";\n                                break;\n                            case SPECIALCALL_WITH:\n                                value \u003d \"with\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    default:\n                        Object obj \u003d x.objectValue;\n                        if (obj !\u003d null) {\n                            value \u003d obj.toString();\n                        } else {\n                            value \u003d String.valueOf(x.intValue);\n                        }\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 923,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,107 +1,109 @@\n private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n         sb.append(Token.name(type));\n         if (this instanceof StringNode) {\n             sb.append(\u0027 \u0027);\n             sb.append(getString());\n         } else if (type \u003d\u003d Token.FUNCTION) {\n             sb.append(\u0027 \u0027);\n-            if (first.getType() \u003d\u003d Token.STRING) {\n+            if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n+                sb.append(\"\u003cinvalid\u003e\");\n+            } else {\n                 sb.append(first.getString());\n             }\n         } else if (this instanceof ScriptOrFnNode) {\n             ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n             if (this instanceof FunctionNode) {\n                 FunctionNode fn \u003d (FunctionNode) this;\n                 sb.append(\u0027 \u0027);\n                 sb.append(fn.getFunctionName());\n             }\n             if (printSource) {\n                 sb.append(\" [source name: \");\n                 sb.append(sof.getSourceName());\n                 sb.append(\"] [encoded source length: \");\n                 sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                 sb.append(\"] [base line: \");\n                 sb.append(sof.getBaseLineno());\n                 sb.append(\"] [end line: \");\n                 sb.append(sof.getEndLineno());\n                 sb.append(\u0027]\u0027);\n             }\n         } else if (type \u003d\u003d Token.NUMBER) {\n             sb.append(\u0027 \u0027);\n             sb.append(getDouble());\n         }\n         if (printSource) {\n             int lineno \u003d getLineno();\n             if (lineno !\u003d -1) {\n                 sb.append(\u0027 \u0027);\n                 sb.append(lineno);\n             }\n         }\n         if (printAnnotations) {\n             int[] keys \u003d getSortedPropTypes();\n             for (int i \u003d 0; i \u003c keys.length; i++) {\n                 int type \u003d keys[i];\n                 PropListItem x \u003d lookupProperty(type);\n                 sb.append(\" [\");\n                 sb.append(propToString(type));\n                 sb.append(\": \");\n                 String value;\n                 switch(type) {\n                     case TARGETBLOCK_PROP:\n                         value \u003d \"target block property\";\n                         break;\n                     case LOCAL_BLOCK_PROP:\n                         value \u003d \"last local block\";\n                         break;\n                     case ISNUMBER_PROP:\n                         switch(x.intValue) {\n                             case BOTH:\n                                 value \u003d \"both\";\n                                 break;\n                             case RIGHT:\n                                 value \u003d \"right\";\n                                 break;\n                             case LEFT:\n                                 value \u003d \"left\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     case SPECIALCALL_PROP:\n                         switch(x.intValue) {\n                             case SPECIALCALL_EVAL:\n                                 value \u003d \"eval\";\n                                 break;\n                             case SPECIALCALL_WITH:\n                                 value \u003d \"with\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     default:\n                         Object obj \u003d x.objectValue;\n                         if (obj !\u003d null) {\n                             value \u003d obj.toString();\n                         } else {\n                             value \u003d String.valueOf(x.intValue);\n                         }\n                         break;\n                 }\n                 sb.append(value);\n                 sb.append(\u0027]\u0027);\n             }\n         }\n         if (printType) {\n             if (jsType !\u003d null) {\n                 String jsTypeString \u003d jsType.toString();\n                 if (jsTypeString !\u003d null) {\n                     sb.append(\" : \");\n                     sb.append(jsTypeString);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0ace02f4d582988b228fcc313ba03c6861e77693": {
      "type": "Ybodychange",
      "commitMessage": "\nAutomated g4 rollback.\n\n*** Reason for rollback ***\n\nbreaks everything\n\n*** Original change description ***\n\nPeephole collapsing property assignments into objects/array definitions.\n\nR\u003dmgoodman\nDELTA\u003d380  (3 added, 348 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1005\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@929 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/11, 1:59 PM",
      "commitName": "0ace02f4d582988b228fcc313ba03c6861e77693",
      "commitAuthor": "johnlenz@google.com",
      "commitDateOld": "3/22/11, 12:10 PM",
      "commitNameOld": "7d80ca979b09eed590c85c00fb7957f90e1706d4",
      "commitAuthorOld": "msamuel@google.com",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            if (first.getType() \u003d\u003d Token.STRING) {\n                sb.append(first.getString());\n            }\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            if (printSource) {\n                sb.append(\" [source name: \");\n                sb.append(sof.getSourceName());\n                sb.append(\"] [encoded source length: \");\n                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                sb.append(\"] [base line: \");\n                sb.append(sof.getBaseLineno());\n                sb.append(\"] [end line: \");\n                sb.append(sof.getEndLineno());\n                sb.append(\u0027]\u0027);\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    case TARGETBLOCK_PROP:\n                        value \u003d \"target block property\";\n                        break;\n                    case LOCAL_BLOCK_PROP:\n                        value \u003d \"last local block\";\n                        break;\n                    case ISNUMBER_PROP:\n                        switch(x.intValue) {\n                            case BOTH:\n                                value \u003d \"both\";\n                                break;\n                            case RIGHT:\n                                value \u003d \"right\";\n                                break;\n                            case LEFT:\n                                value \u003d \"left\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    case SPECIALCALL_PROP:\n                        switch(x.intValue) {\n                            case SPECIALCALL_EVAL:\n                                value \u003d \"eval\";\n                                break;\n                            case SPECIALCALL_WITH:\n                                value \u003d \"with\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    default:\n                        Object obj \u003d x.objectValue;\n                        if (obj !\u003d null) {\n                            value \u003d obj.toString();\n                        } else {\n                            value \u003d String.valueOf(x.intValue);\n                        }\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 923,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,109 +1,107 @@\n private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n         sb.append(Token.name(type));\n         if (this instanceof StringNode) {\n             sb.append(\u0027 \u0027);\n             sb.append(getString());\n         } else if (type \u003d\u003d Token.FUNCTION) {\n             sb.append(\u0027 \u0027);\n-            if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n-                sb.append(\"\u003cinvalid\u003e\");\n-            } else {\n+            if (first.getType() \u003d\u003d Token.STRING) {\n                 sb.append(first.getString());\n             }\n         } else if (this instanceof ScriptOrFnNode) {\n             ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n             if (this instanceof FunctionNode) {\n                 FunctionNode fn \u003d (FunctionNode) this;\n                 sb.append(\u0027 \u0027);\n                 sb.append(fn.getFunctionName());\n             }\n             if (printSource) {\n                 sb.append(\" [source name: \");\n                 sb.append(sof.getSourceName());\n                 sb.append(\"] [encoded source length: \");\n                 sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                 sb.append(\"] [base line: \");\n                 sb.append(sof.getBaseLineno());\n                 sb.append(\"] [end line: \");\n                 sb.append(sof.getEndLineno());\n                 sb.append(\u0027]\u0027);\n             }\n         } else if (type \u003d\u003d Token.NUMBER) {\n             sb.append(\u0027 \u0027);\n             sb.append(getDouble());\n         }\n         if (printSource) {\n             int lineno \u003d getLineno();\n             if (lineno !\u003d -1) {\n                 sb.append(\u0027 \u0027);\n                 sb.append(lineno);\n             }\n         }\n         if (printAnnotations) {\n             int[] keys \u003d getSortedPropTypes();\n             for (int i \u003d 0; i \u003c keys.length; i++) {\n                 int type \u003d keys[i];\n                 PropListItem x \u003d lookupProperty(type);\n                 sb.append(\" [\");\n                 sb.append(propToString(type));\n                 sb.append(\": \");\n                 String value;\n                 switch(type) {\n                     case TARGETBLOCK_PROP:\n                         value \u003d \"target block property\";\n                         break;\n                     case LOCAL_BLOCK_PROP:\n                         value \u003d \"last local block\";\n                         break;\n                     case ISNUMBER_PROP:\n                         switch(x.intValue) {\n                             case BOTH:\n                                 value \u003d \"both\";\n                                 break;\n                             case RIGHT:\n                                 value \u003d \"right\";\n                                 break;\n                             case LEFT:\n                                 value \u003d \"left\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     case SPECIALCALL_PROP:\n                         switch(x.intValue) {\n                             case SPECIALCALL_EVAL:\n                                 value \u003d \"eval\";\n                                 break;\n                             case SPECIALCALL_WITH:\n                                 value \u003d \"with\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     default:\n                         Object obj \u003d x.objectValue;\n                         if (obj !\u003d null) {\n                             value \u003d obj.toString();\n                         } else {\n                             value \u003d String.valueOf(x.intValue);\n                         }\n                         break;\n                 }\n                 sb.append(value);\n                 sb.append(\u0027]\u0027);\n             }\n         }\n         if (printType) {\n             if (jsType !\u003d null) {\n                 String jsTypeString \u003d jsType.toString();\n                 if (jsTypeString !\u003d null) {\n                     sb.append(\" : \");\n                     sb.append(jsTypeString);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "7d80ca979b09eed590c85c00fb7957f90e1706d4": {
      "type": "Ybodychange",
      "commitMessage": "\nPeephole collapsing property assignments into objects/array definitions.\n\nR\u003djohnlenz\nDELTA\u003d380  (348 added, 3 deleted, 29 changed)\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003d1001\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@925 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "3/22/11, 12:10 PM",
      "commitName": "7d80ca979b09eed590c85c00fb7957f90e1706d4",
      "commitAuthor": "msamuel@google.com",
      "commitDateOld": "3/3/11, 5:04 PM",
      "commitNameOld": "e4cf805a6a27301672660756202e8dedee1e012b",
      "commitAuthorOld": "johnlenz@google.com",
      "daysBetweenCommits": 18.75,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n                sb.append(\"\u003cinvalid\u003e\");\n            } else {\n                sb.append(first.getString());\n            }\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            if (printSource) {\n                sb.append(\" [source name: \");\n                sb.append(sof.getSourceName());\n                sb.append(\"] [encoded source length: \");\n                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                sb.append(\"] [base line: \");\n                sb.append(sof.getBaseLineno());\n                sb.append(\"] [end line: \");\n                sb.append(sof.getEndLineno());\n                sb.append(\u0027]\u0027);\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    case TARGETBLOCK_PROP:\n                        value \u003d \"target block property\";\n                        break;\n                    case LOCAL_BLOCK_PROP:\n                        value \u003d \"last local block\";\n                        break;\n                    case ISNUMBER_PROP:\n                        switch(x.intValue) {\n                            case BOTH:\n                                value \u003d \"both\";\n                                break;\n                            case RIGHT:\n                                value \u003d \"right\";\n                                break;\n                            case LEFT:\n                                value \u003d \"left\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    case SPECIALCALL_PROP:\n                        switch(x.intValue) {\n                            case SPECIALCALL_EVAL:\n                                value \u003d \"eval\";\n                                break;\n                            case SPECIALCALL_WITH:\n                                value \u003d \"with\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    default:\n                        Object obj \u003d x.objectValue;\n                        if (obj !\u003d null) {\n                            value \u003d obj.toString();\n                        } else {\n                            value \u003d String.valueOf(x.intValue);\n                        }\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 923,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,107 +1,109 @@\n private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n         sb.append(Token.name(type));\n         if (this instanceof StringNode) {\n             sb.append(\u0027 \u0027);\n             sb.append(getString());\n         } else if (type \u003d\u003d Token.FUNCTION) {\n             sb.append(\u0027 \u0027);\n-            if (first.getType() \u003d\u003d Token.STRING) {\n+            if (first \u003d\u003d null || first.getType() !\u003d Token.NAME) {\n+                sb.append(\"\u003cinvalid\u003e\");\n+            } else {\n                 sb.append(first.getString());\n             }\n         } else if (this instanceof ScriptOrFnNode) {\n             ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n             if (this instanceof FunctionNode) {\n                 FunctionNode fn \u003d (FunctionNode) this;\n                 sb.append(\u0027 \u0027);\n                 sb.append(fn.getFunctionName());\n             }\n             if (printSource) {\n                 sb.append(\" [source name: \");\n                 sb.append(sof.getSourceName());\n                 sb.append(\"] [encoded source length: \");\n                 sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                 sb.append(\"] [base line: \");\n                 sb.append(sof.getBaseLineno());\n                 sb.append(\"] [end line: \");\n                 sb.append(sof.getEndLineno());\n                 sb.append(\u0027]\u0027);\n             }\n         } else if (type \u003d\u003d Token.NUMBER) {\n             sb.append(\u0027 \u0027);\n             sb.append(getDouble());\n         }\n         if (printSource) {\n             int lineno \u003d getLineno();\n             if (lineno !\u003d -1) {\n                 sb.append(\u0027 \u0027);\n                 sb.append(lineno);\n             }\n         }\n         if (printAnnotations) {\n             int[] keys \u003d getSortedPropTypes();\n             for (int i \u003d 0; i \u003c keys.length; i++) {\n                 int type \u003d keys[i];\n                 PropListItem x \u003d lookupProperty(type);\n                 sb.append(\" [\");\n                 sb.append(propToString(type));\n                 sb.append(\": \");\n                 String value;\n                 switch(type) {\n                     case TARGETBLOCK_PROP:\n                         value \u003d \"target block property\";\n                         break;\n                     case LOCAL_BLOCK_PROP:\n                         value \u003d \"last local block\";\n                         break;\n                     case ISNUMBER_PROP:\n                         switch(x.intValue) {\n                             case BOTH:\n                                 value \u003d \"both\";\n                                 break;\n                             case RIGHT:\n                                 value \u003d \"right\";\n                                 break;\n                             case LEFT:\n                                 value \u003d \"left\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     case SPECIALCALL_PROP:\n                         switch(x.intValue) {\n                             case SPECIALCALL_EVAL:\n                                 value \u003d \"eval\";\n                                 break;\n                             case SPECIALCALL_WITH:\n                                 value \u003d \"with\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     default:\n                         Object obj \u003d x.objectValue;\n                         if (obj !\u003d null) {\n                             value \u003d obj.toString();\n                         } else {\n                             value \u003d String.valueOf(x.intValue);\n                         }\n                         break;\n                 }\n                 sb.append(value);\n                 sb.append(\u0027]\u0027);\n             }\n         }\n         if (printType) {\n             if (jsType !\u003d null) {\n                 String jsTypeString \u003d jsType.toString();\n                 if (jsTypeString !\u003d null) {\n                     sb.append(\" : \");\n                     sb.append(jsTypeString);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "301ed5b03eb52debdc9b87929a45880eb2faf1fe": {
      "type": "Ybodychange",
      "commitMessage": "\nChange on 2010/05/11 by robby\n\n        Support aliases in JsDoc + some additional tests.\n\n        R\u003dnick\n        DELTA\u003d311  (294 added, 2 deleted, 15 changed)\n\nChange on 2010/05/11 by nick\n\n        forward-declare type names that are dropped from the input.\n\n        R\u003dalan\n        DELTA\u003d31  (31 added, 0 deleted, 0 changed)\n\nChange on 2010/05/11 by nick\n\n        Verify that closure-compiler issue 157 is invalid.\n\n        R\u003drobert\n        DELTA\u003d4  (4 added, 0 deleted, 0 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dvflmak\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@208 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "5/11/10, 6:45 PM",
      "commitName": "301ed5b03eb52debdc9b87929a45880eb2faf1fe",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "5/7/10, 2:59 PM",
      "commitNameOld": "475548341c38755063c8475379745ba31caffe41",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 4.16,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            if (first.getType() \u003d\u003d Token.STRING) {\n                sb.append(first.getString());\n            }\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            if (printSource) {\n                sb.append(\" [source name: \");\n                sb.append(sof.getSourceName());\n                sb.append(\"] [encoded source length: \");\n                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                sb.append(\"] [base line: \");\n                sb.append(sof.getBaseLineno());\n                sb.append(\"] [end line: \");\n                sb.append(sof.getEndLineno());\n                sb.append(\u0027]\u0027);\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    case TARGETBLOCK_PROP:\n                        value \u003d \"target block property\";\n                        break;\n                    case LOCAL_BLOCK_PROP:\n                        value \u003d \"last local block\";\n                        break;\n                    case ISNUMBER_PROP:\n                        switch(x.intValue) {\n                            case BOTH:\n                                value \u003d \"both\";\n                                break;\n                            case RIGHT:\n                                value \u003d \"right\";\n                                break;\n                            case LEFT:\n                                value \u003d \"left\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    case SPECIALCALL_PROP:\n                        switch(x.intValue) {\n                            case SPECIALCALL_EVAL:\n                                value \u003d \"eval\";\n                                break;\n                            case SPECIALCALL_WITH:\n                                value \u003d \"with\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    default:\n                        Object obj \u003d x.objectValue;\n                        if (obj !\u003d null) {\n                            value \u003d obj.toString();\n                        } else {\n                            value \u003d String.valueOf(x.intValue);\n                        }\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 892,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "@@ -1,105 +1,107 @@\n private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n         sb.append(Token.name(type));\n         if (this instanceof StringNode) {\n             sb.append(\u0027 \u0027);\n             sb.append(getString());\n         } else if (type \u003d\u003d Token.FUNCTION) {\n             sb.append(\u0027 \u0027);\n-            sb.append(first.getString());\n+            if (first.getType() \u003d\u003d Token.STRING) {\n+                sb.append(first.getString());\n+            }\n         } else if (this instanceof ScriptOrFnNode) {\n             ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n             if (this instanceof FunctionNode) {\n                 FunctionNode fn \u003d (FunctionNode) this;\n                 sb.append(\u0027 \u0027);\n                 sb.append(fn.getFunctionName());\n             }\n             if (printSource) {\n                 sb.append(\" [source name: \");\n                 sb.append(sof.getSourceName());\n                 sb.append(\"] [encoded source length: \");\n                 sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                 sb.append(\"] [base line: \");\n                 sb.append(sof.getBaseLineno());\n                 sb.append(\"] [end line: \");\n                 sb.append(sof.getEndLineno());\n                 sb.append(\u0027]\u0027);\n             }\n         } else if (type \u003d\u003d Token.NUMBER) {\n             sb.append(\u0027 \u0027);\n             sb.append(getDouble());\n         }\n         if (printSource) {\n             int lineno \u003d getLineno();\n             if (lineno !\u003d -1) {\n                 sb.append(\u0027 \u0027);\n                 sb.append(lineno);\n             }\n         }\n         if (printAnnotations) {\n             int[] keys \u003d getSortedPropTypes();\n             for (int i \u003d 0; i \u003c keys.length; i++) {\n                 int type \u003d keys[i];\n                 PropListItem x \u003d lookupProperty(type);\n                 sb.append(\" [\");\n                 sb.append(propToString(type));\n                 sb.append(\": \");\n                 String value;\n                 switch(type) {\n                     case TARGETBLOCK_PROP:\n                         value \u003d \"target block property\";\n                         break;\n                     case LOCAL_BLOCK_PROP:\n                         value \u003d \"last local block\";\n                         break;\n                     case ISNUMBER_PROP:\n                         switch(x.intValue) {\n                             case BOTH:\n                                 value \u003d \"both\";\n                                 break;\n                             case RIGHT:\n                                 value \u003d \"right\";\n                                 break;\n                             case LEFT:\n                                 value \u003d \"left\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     case SPECIALCALL_PROP:\n                         switch(x.intValue) {\n                             case SPECIALCALL_EVAL:\n                                 value \u003d \"eval\";\n                                 break;\n                             case SPECIALCALL_WITH:\n                                 value \u003d \"with\";\n                                 break;\n                             default:\n                                 throw Kit.codeBug();\n                         }\n                         break;\n                     default:\n                         Object obj \u003d x.objectValue;\n                         if (obj !\u003d null) {\n                             value \u003d obj.toString();\n                         } else {\n                             value \u003d String.valueOf(x.intValue);\n                         }\n                         break;\n                 }\n                 sb.append(value);\n                 sb.append(\u0027]\u0027);\n             }\n         }\n         if (printType) {\n             if (jsType !\u003d null) {\n                 String jsTypeString \u003d jsType.toString();\n                 if (jsTypeString !\u003d null) {\n                     sb.append(\" : \");\n                     sb.append(jsTypeString);\n                 }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "43859717972907dd1ecebd8dca6e05036386e28b": {
      "type": "Yformatchange",
      "commitMessage": "\nChange on 2010/04/14 by john\n\n        Stop creating specialized Node types for FUNCTION and SCRIPT as the added functionality isn\u0027t used anywhere.\n\n        Also correct some formatting issue with Node (as it won\u0027t need to be merged with anything else anymore).\n\n        R\u003dsteve,robert\n        DELTA\u003d3969  (1913 added, 1925 deleted, 131 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source information in MinimizeExitPoints.\n\n        R\u003drobert\n        DELTA\u003d10  (5 added, 2 deleted, 3 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information.\n\n        R\u003dantonio\n        DELTA\u003d17  (11 added, 0 deleted, 6 changed)\n\nChange on 2010/04/14 by john\n\n        Maintain source information through FoldConstants.\n\n        R\u003drobert\n        DELTA\u003d42  (22 added, 0 deleted, 20 changed)\n\nChange on 2010/04/14 by nick\n\n        lock down function type construction\n\n        R\u003djohn\n        DELTA\u003d111  (83 added, 9 deleted, 19 changed)\n\nChange on 2010/04/14 by john\n\n        Fix source info in CollapseProperties.\n\n        R\u003dnick\n        DELTA\u003d17  (8 added, 3 deleted, 6 changed)\n\n\n\nRevision created by MOE tool push_codebase.\nMOE_MIGRATION\u003dmbevwz\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@184 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "4/14/10, 4:53 PM",
      "commitName": "43859717972907dd1ecebd8dca6e05036386e28b",
      "commitAuthor": "Nicholas.J.Santos",
      "commitDateOld": "4/13/10, 2:39 PM",
      "commitNameOld": "de13c3313c05f4449c50c560324389d6905a214d",
      "commitAuthorOld": "Nicholas.J.Santos",
      "daysBetweenCommits": 1.09,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            sb.append(first.getString());\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            if (printSource) {\n                sb.append(\" [source name: \");\n                sb.append(sof.getSourceName());\n                sb.append(\"] [encoded source length: \");\n                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                sb.append(\"] [base line: \");\n                sb.append(sof.getBaseLineno());\n                sb.append(\"] [end line: \");\n                sb.append(sof.getEndLineno());\n                sb.append(\u0027]\u0027);\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    case TARGETBLOCK_PROP:\n                        value \u003d \"target block property\";\n                        break;\n                    case LOCAL_BLOCK_PROP:\n                        value \u003d \"last local block\";\n                        break;\n                    case ISNUMBER_PROP:\n                        switch(x.intValue) {\n                            case BOTH:\n                                value \u003d \"both\";\n                                break;\n                            case RIGHT:\n                                value \u003d \"right\";\n                                break;\n                            case LEFT:\n                                value \u003d \"left\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    case SPECIALCALL_PROP:\n                        switch(x.intValue) {\n                            case SPECIALCALL_EVAL:\n                                value \u003d \"eval\";\n                                break;\n                            case SPECIALCALL_WITH:\n                                value \u003d \"with\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    default:\n                        Object obj \u003d x.objectValue;\n                        if (obj !\u003d null) {\n                            value \u003d obj.toString();\n                        } else {\n                            value \u003d String.valueOf(x.intValue);\n                        }\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 889,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": "",
      "diff": "",
      "extendedDetails": {}
    },
    "7efb21a25bb44dcfc513d584c6b191aeacfba367": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Remove timestamps from the javadoc, because they screw up the diffs.\nAlso, better error messages.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@5 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/9/09, 12:46 PM",
      "commitName": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Remove timestamps from the javadoc, because they screw up the diffs.\nAlso, better error messages.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@5 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/9/09, 12:46 PM",
          "commitName": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 5.87,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            sb.append(first.getString());\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            if (printSource) {\n                sb.append(\" [source name: \");\n                sb.append(sof.getSourceName());\n                sb.append(\"] [encoded source length: \");\n                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                sb.append(\"] [base line: \");\n                sb.append(sof.getBaseLineno());\n                sb.append(\"] [end line: \");\n                sb.append(sof.getEndLineno());\n                sb.append(\u0027]\u0027);\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    case TARGETBLOCK_PROP:\n                        value \u003d \"target block property\";\n                        break;\n                    case LOCAL_BLOCK_PROP:\n                        value \u003d \"last local block\";\n                        break;\n                    case ISNUMBER_PROP:\n                        switch(x.intValue) {\n                            case BOTH:\n                                value \u003d \"both\";\n                                break;\n                            case RIGHT:\n                                value \u003d \"right\";\n                                break;\n                            case LEFT:\n                                value \u003d \"left\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    case SPECIALCALL_PROP:\n                        switch(x.intValue) {\n                            case SPECIALCALL_EVAL:\n                                value \u003d \"eval\";\n                                break;\n                            case SPECIALCALL_WITH:\n                                value \u003d \"with\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    default:\n                        Object obj \u003d x.objectValue;\n                        if (obj !\u003d null) {\n                            value \u003d obj.toString();\n                        } else {\n                            value \u003d String.valueOf(x.intValue);\n                        }\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 881,
          "functionName": "toString",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,97 +1,105 @@\n-private void toString(StringBuilder sb) {\n+private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n         sb.append(Token.name(type));\n         if (this instanceof StringNode) {\n             sb.append(\u0027 \u0027);\n             sb.append(getString());\n         } else if (type \u003d\u003d Token.FUNCTION) {\n             sb.append(\u0027 \u0027);\n             sb.append(first.getString());\n         } else if (this instanceof ScriptOrFnNode) {\n             ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n             if (this instanceof FunctionNode) {\n                 FunctionNode fn \u003d (FunctionNode) this;\n                 sb.append(\u0027 \u0027);\n                 sb.append(fn.getFunctionName());\n             }\n-            sb.append(\" [source name: \");\n-            sb.append(sof.getSourceName());\n-            sb.append(\"] [encoded source length: \");\n-            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n-            sb.append(\"] [base line: \");\n-            sb.append(sof.getBaseLineno());\n-            sb.append(\"] [end line: \");\n-            sb.append(sof.getEndLineno());\n-            sb.append(\u0027]\u0027);\n+            if (printSource) {\n+                sb.append(\" [source name: \");\n+                sb.append(sof.getSourceName());\n+                sb.append(\"] [encoded source length: \");\n+                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n+                sb.append(\"] [base line: \");\n+                sb.append(sof.getBaseLineno());\n+                sb.append(\"] [end line: \");\n+                sb.append(sof.getEndLineno());\n+                sb.append(\u0027]\u0027);\n+            }\n         } else if (type \u003d\u003d Token.NUMBER) {\n             sb.append(\u0027 \u0027);\n             sb.append(getDouble());\n         }\n-        int lineno \u003d getLineno();\n-        if (lineno !\u003d -1) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(lineno);\n-        }\n-        int[] keys \u003d getSortedPropTypes();\n-        for (int i \u003d 0; i \u003c keys.length; i++) {\n-            int type \u003d keys[i];\n-            PropListItem x \u003d lookupProperty(type);\n-            sb.append(\" [\");\n-            sb.append(propToString(type));\n-            sb.append(\": \");\n-            String value;\n-            switch(type) {\n-                case TARGETBLOCK_PROP:\n-                    value \u003d \"target block property\";\n-                    break;\n-                case LOCAL_BLOCK_PROP:\n-                    value \u003d \"last local block\";\n-                    break;\n-                case ISNUMBER_PROP:\n-                    switch(x.intValue) {\n-                        case BOTH:\n-                            value \u003d \"both\";\n-                            break;\n-                        case RIGHT:\n-                            value \u003d \"right\";\n-                            break;\n-                        case LEFT:\n-                            value \u003d \"left\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                case SPECIALCALL_PROP:\n-                    switch(x.intValue) {\n-                        case SPECIALCALL_EVAL:\n-                            value \u003d \"eval\";\n-                            break;\n-                        case SPECIALCALL_WITH:\n-                            value \u003d \"with\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                default:\n-                    Object obj \u003d x.objectValue;\n-                    if (obj !\u003d null) {\n-                        value \u003d obj.toString();\n-                    } else {\n-                        value \u003d String.valueOf(x.intValue);\n-                    }\n-                    break;\n+        if (printSource) {\n+            int lineno \u003d getLineno();\n+            if (lineno !\u003d -1) {\n+                sb.append(\u0027 \u0027);\n+                sb.append(lineno);\n             }\n-            sb.append(value);\n-            sb.append(\u0027]\u0027);\n         }\n-        if (jsType !\u003d null) {\n-            String jsTypeString \u003d jsType.toString();\n-            if (jsTypeString !\u003d null) {\n-                sb.append(\" : \");\n-                sb.append(jsTypeString);\n+        if (printAnnotations) {\n+            int[] keys \u003d getSortedPropTypes();\n+            for (int i \u003d 0; i \u003c keys.length; i++) {\n+                int type \u003d keys[i];\n+                PropListItem x \u003d lookupProperty(type);\n+                sb.append(\" [\");\n+                sb.append(propToString(type));\n+                sb.append(\": \");\n+                String value;\n+                switch(type) {\n+                    case TARGETBLOCK_PROP:\n+                        value \u003d \"target block property\";\n+                        break;\n+                    case LOCAL_BLOCK_PROP:\n+                        value \u003d \"last local block\";\n+                        break;\n+                    case ISNUMBER_PROP:\n+                        switch(x.intValue) {\n+                            case BOTH:\n+                                value \u003d \"both\";\n+                                break;\n+                            case RIGHT:\n+                                value \u003d \"right\";\n+                                break;\n+                            case LEFT:\n+                                value \u003d \"left\";\n+                                break;\n+                            default:\n+                                throw Kit.codeBug();\n+                        }\n+                        break;\n+                    case SPECIALCALL_PROP:\n+                        switch(x.intValue) {\n+                            case SPECIALCALL_EVAL:\n+                                value \u003d \"eval\";\n+                                break;\n+                            case SPECIALCALL_WITH:\n+                                value \u003d \"with\";\n+                                break;\n+                            default:\n+                                throw Kit.codeBug();\n+                        }\n+                        break;\n+                    default:\n+                        Object obj \u003d x.objectValue;\n+                        if (obj !\u003d null) {\n+                            value \u003d obj.toString();\n+                        } else {\n+                            value \u003d String.valueOf(x.intValue);\n+                        }\n+                        break;\n+                }\n+                sb.append(value);\n+                sb.append(\u0027]\u0027);\n+            }\n+        }\n+        if (printType) {\n+            if (jsType !\u003d null) {\n+                String jsTypeString \u003d jsType.toString();\n+                if (jsTypeString !\u003d null) {\n+                    sb.append(\" : \");\n+                    sb.append(jsTypeString);\n+                }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[sb-StringBuilder]",
            "newValue": "[sb-StringBuilder, printSource-boolean, printAnnotations-boolean, printType-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Remove timestamps from the javadoc, because they screw up the diffs.\nAlso, better error messages.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@5 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "11/9/09, 12:46 PM",
          "commitName": "7efb21a25bb44dcfc513d584c6b191aeacfba367",
          "commitAuthor": "nicholas.j.santos@gmail.com",
          "commitDateOld": "11/3/09, 3:51 PM",
          "commitNameOld": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
          "commitAuthorOld": "nicholas.j.santos@gmail.com",
          "daysBetweenCommits": 5.87,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "actualSource": "private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            sb.append(first.getString());\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            if (printSource) {\n                sb.append(\" [source name: \");\n                sb.append(sof.getSourceName());\n                sb.append(\"] [encoded source length: \");\n                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n                sb.append(\"] [base line: \");\n                sb.append(sof.getBaseLineno());\n                sb.append(\"] [end line: \");\n                sb.append(sof.getEndLineno());\n                sb.append(\u0027]\u0027);\n            }\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        if (printSource) {\n            int lineno \u003d getLineno();\n            if (lineno !\u003d -1) {\n                sb.append(\u0027 \u0027);\n                sb.append(lineno);\n            }\n        }\n        if (printAnnotations) {\n            int[] keys \u003d getSortedPropTypes();\n            for (int i \u003d 0; i \u003c keys.length; i++) {\n                int type \u003d keys[i];\n                PropListItem x \u003d lookupProperty(type);\n                sb.append(\" [\");\n                sb.append(propToString(type));\n                sb.append(\": \");\n                String value;\n                switch(type) {\n                    case TARGETBLOCK_PROP:\n                        value \u003d \"target block property\";\n                        break;\n                    case LOCAL_BLOCK_PROP:\n                        value \u003d \"last local block\";\n                        break;\n                    case ISNUMBER_PROP:\n                        switch(x.intValue) {\n                            case BOTH:\n                                value \u003d \"both\";\n                                break;\n                            case RIGHT:\n                                value \u003d \"right\";\n                                break;\n                            case LEFT:\n                                value \u003d \"left\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    case SPECIALCALL_PROP:\n                        switch(x.intValue) {\n                            case SPECIALCALL_EVAL:\n                                value \u003d \"eval\";\n                                break;\n                            case SPECIALCALL_WITH:\n                                value \u003d \"with\";\n                                break;\n                            default:\n                                throw Kit.codeBug();\n                        }\n                        break;\n                    default:\n                        Object obj \u003d x.objectValue;\n                        if (obj !\u003d null) {\n                            value \u003d obj.toString();\n                        } else {\n                            value \u003d String.valueOf(x.intValue);\n                        }\n                        break;\n                }\n                sb.append(value);\n                sb.append(\u0027]\u0027);\n            }\n        }\n        if (printType) {\n            if (jsType !\u003d null) {\n                String jsTypeString \u003d jsType.toString();\n                if (jsTypeString !\u003d null) {\n                    sb.append(\" : \");\n                    sb.append(jsTypeString);\n                }\n            }\n        }\n    }\n}",
          "path": "src/com/google/javascript/rhino/Node.java",
          "functionStartLine": 881,
          "functionName": "toString",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,97 +1,105 @@\n-private void toString(StringBuilder sb) {\n+private void toString(StringBuilder sb, boolean printSource, boolean printAnnotations, boolean printType) {\n     if (Token.printTrees) {\n         sb.append(Token.name(type));\n         if (this instanceof StringNode) {\n             sb.append(\u0027 \u0027);\n             sb.append(getString());\n         } else if (type \u003d\u003d Token.FUNCTION) {\n             sb.append(\u0027 \u0027);\n             sb.append(first.getString());\n         } else if (this instanceof ScriptOrFnNode) {\n             ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n             if (this instanceof FunctionNode) {\n                 FunctionNode fn \u003d (FunctionNode) this;\n                 sb.append(\u0027 \u0027);\n                 sb.append(fn.getFunctionName());\n             }\n-            sb.append(\" [source name: \");\n-            sb.append(sof.getSourceName());\n-            sb.append(\"] [encoded source length: \");\n-            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n-            sb.append(\"] [base line: \");\n-            sb.append(sof.getBaseLineno());\n-            sb.append(\"] [end line: \");\n-            sb.append(sof.getEndLineno());\n-            sb.append(\u0027]\u0027);\n+            if (printSource) {\n+                sb.append(\" [source name: \");\n+                sb.append(sof.getSourceName());\n+                sb.append(\"] [encoded source length: \");\n+                sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n+                sb.append(\"] [base line: \");\n+                sb.append(sof.getBaseLineno());\n+                sb.append(\"] [end line: \");\n+                sb.append(sof.getEndLineno());\n+                sb.append(\u0027]\u0027);\n+            }\n         } else if (type \u003d\u003d Token.NUMBER) {\n             sb.append(\u0027 \u0027);\n             sb.append(getDouble());\n         }\n-        int lineno \u003d getLineno();\n-        if (lineno !\u003d -1) {\n-            sb.append(\u0027 \u0027);\n-            sb.append(lineno);\n-        }\n-        int[] keys \u003d getSortedPropTypes();\n-        for (int i \u003d 0; i \u003c keys.length; i++) {\n-            int type \u003d keys[i];\n-            PropListItem x \u003d lookupProperty(type);\n-            sb.append(\" [\");\n-            sb.append(propToString(type));\n-            sb.append(\": \");\n-            String value;\n-            switch(type) {\n-                case TARGETBLOCK_PROP:\n-                    value \u003d \"target block property\";\n-                    break;\n-                case LOCAL_BLOCK_PROP:\n-                    value \u003d \"last local block\";\n-                    break;\n-                case ISNUMBER_PROP:\n-                    switch(x.intValue) {\n-                        case BOTH:\n-                            value \u003d \"both\";\n-                            break;\n-                        case RIGHT:\n-                            value \u003d \"right\";\n-                            break;\n-                        case LEFT:\n-                            value \u003d \"left\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                case SPECIALCALL_PROP:\n-                    switch(x.intValue) {\n-                        case SPECIALCALL_EVAL:\n-                            value \u003d \"eval\";\n-                            break;\n-                        case SPECIALCALL_WITH:\n-                            value \u003d \"with\";\n-                            break;\n-                        default:\n-                            throw Kit.codeBug();\n-                    }\n-                    break;\n-                default:\n-                    Object obj \u003d x.objectValue;\n-                    if (obj !\u003d null) {\n-                        value \u003d obj.toString();\n-                    } else {\n-                        value \u003d String.valueOf(x.intValue);\n-                    }\n-                    break;\n+        if (printSource) {\n+            int lineno \u003d getLineno();\n+            if (lineno !\u003d -1) {\n+                sb.append(\u0027 \u0027);\n+                sb.append(lineno);\n             }\n-            sb.append(value);\n-            sb.append(\u0027]\u0027);\n         }\n-        if (jsType !\u003d null) {\n-            String jsTypeString \u003d jsType.toString();\n-            if (jsTypeString !\u003d null) {\n-                sb.append(\" : \");\n-                sb.append(jsTypeString);\n+        if (printAnnotations) {\n+            int[] keys \u003d getSortedPropTypes();\n+            for (int i \u003d 0; i \u003c keys.length; i++) {\n+                int type \u003d keys[i];\n+                PropListItem x \u003d lookupProperty(type);\n+                sb.append(\" [\");\n+                sb.append(propToString(type));\n+                sb.append(\": \");\n+                String value;\n+                switch(type) {\n+                    case TARGETBLOCK_PROP:\n+                        value \u003d \"target block property\";\n+                        break;\n+                    case LOCAL_BLOCK_PROP:\n+                        value \u003d \"last local block\";\n+                        break;\n+                    case ISNUMBER_PROP:\n+                        switch(x.intValue) {\n+                            case BOTH:\n+                                value \u003d \"both\";\n+                                break;\n+                            case RIGHT:\n+                                value \u003d \"right\";\n+                                break;\n+                            case LEFT:\n+                                value \u003d \"left\";\n+                                break;\n+                            default:\n+                                throw Kit.codeBug();\n+                        }\n+                        break;\n+                    case SPECIALCALL_PROP:\n+                        switch(x.intValue) {\n+                            case SPECIALCALL_EVAL:\n+                                value \u003d \"eval\";\n+                                break;\n+                            case SPECIALCALL_WITH:\n+                                value \u003d \"with\";\n+                                break;\n+                            default:\n+                                throw Kit.codeBug();\n+                        }\n+                        break;\n+                    default:\n+                        Object obj \u003d x.objectValue;\n+                        if (obj !\u003d null) {\n+                            value \u003d obj.toString();\n+                        } else {\n+                            value \u003d String.valueOf(x.intValue);\n+                        }\n+                        break;\n+                }\n+                sb.append(value);\n+                sb.append(\u0027]\u0027);\n+            }\n+        }\n+        if (printType) {\n+            if (jsType !\u003d null) {\n+                String jsTypeString \u003d jsType.toString();\n+                if (jsTypeString !\u003d null) {\n+                    sb.append(\" : \");\n+                    sb.append(jsTypeString);\n+                }\n             }\n         }\n     }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,97 @@\n+private void toString(StringBuilder sb) {\n+    if (Token.printTrees) {\n+        sb.append(Token.name(type));\n+        if (this instanceof StringNode) {\n+            sb.append(\u0027 \u0027);\n+            sb.append(getString());\n+        } else if (type \u003d\u003d Token.FUNCTION) {\n+            sb.append(\u0027 \u0027);\n+            sb.append(first.getString());\n+        } else if (this instanceof ScriptOrFnNode) {\n+            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n+            if (this instanceof FunctionNode) {\n+                FunctionNode fn \u003d (FunctionNode) this;\n+                sb.append(\u0027 \u0027);\n+                sb.append(fn.getFunctionName());\n+            }\n+            sb.append(\" [source name: \");\n+            sb.append(sof.getSourceName());\n+            sb.append(\"] [encoded source length: \");\n+            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n+            sb.append(\"] [base line: \");\n+            sb.append(sof.getBaseLineno());\n+            sb.append(\"] [end line: \");\n+            sb.append(sof.getEndLineno());\n+            sb.append(\u0027]\u0027);\n+        } else if (type \u003d\u003d Token.NUMBER) {\n+            sb.append(\u0027 \u0027);\n+            sb.append(getDouble());\n+        }\n+        int lineno \u003d getLineno();\n+        if (lineno !\u003d -1) {\n+            sb.append(\u0027 \u0027);\n+            sb.append(lineno);\n+        }\n+        int[] keys \u003d getSortedPropTypes();\n+        for (int i \u003d 0; i \u003c keys.length; i++) {\n+            int type \u003d keys[i];\n+            PropListItem x \u003d lookupProperty(type);\n+            sb.append(\" [\");\n+            sb.append(propToString(type));\n+            sb.append(\": \");\n+            String value;\n+            switch(type) {\n+                case TARGETBLOCK_PROP:\n+                    value \u003d \"target block property\";\n+                    break;\n+                case LOCAL_BLOCK_PROP:\n+                    value \u003d \"last local block\";\n+                    break;\n+                case ISNUMBER_PROP:\n+                    switch(x.intValue) {\n+                        case BOTH:\n+                            value \u003d \"both\";\n+                            break;\n+                        case RIGHT:\n+                            value \u003d \"right\";\n+                            break;\n+                        case LEFT:\n+                            value \u003d \"left\";\n+                            break;\n+                        default:\n+                            throw Kit.codeBug();\n+                    }\n+                    break;\n+                case SPECIALCALL_PROP:\n+                    switch(x.intValue) {\n+                        case SPECIALCALL_EVAL:\n+                            value \u003d \"eval\";\n+                            break;\n+                        case SPECIALCALL_WITH:\n+                            value \u003d \"with\";\n+                            break;\n+                        default:\n+                            throw Kit.codeBug();\n+                    }\n+                    break;\n+                default:\n+                    Object obj \u003d x.objectValue;\n+                    if (obj !\u003d null) {\n+                        value \u003d obj.toString();\n+                    } else {\n+                        value \u003d String.valueOf(x.intValue);\n+                    }\n+                    break;\n+            }\n+            sb.append(value);\n+            sb.append(\u0027]\u0027);\n+        }\n+        if (jsType !\u003d null) {\n+            String jsTypeString \u003d jsType.toString();\n+            if (jsTypeString !\u003d null) {\n+                sb.append(\" : \");\n+                sb.append(jsTypeString);\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void toString(StringBuilder sb) {\n    if (Token.printTrees) {\n        sb.append(Token.name(type));\n        if (this instanceof StringNode) {\n            sb.append(\u0027 \u0027);\n            sb.append(getString());\n        } else if (type \u003d\u003d Token.FUNCTION) {\n            sb.append(\u0027 \u0027);\n            sb.append(first.getString());\n        } else if (this instanceof ScriptOrFnNode) {\n            ScriptOrFnNode sof \u003d (ScriptOrFnNode) this;\n            if (this instanceof FunctionNode) {\n                FunctionNode fn \u003d (FunctionNode) this;\n                sb.append(\u0027 \u0027);\n                sb.append(fn.getFunctionName());\n            }\n            sb.append(\" [source name: \");\n            sb.append(sof.getSourceName());\n            sb.append(\"] [encoded source length: \");\n            sb.append(sof.getEncodedSourceEnd() - sof.getEncodedSourceStart());\n            sb.append(\"] [base line: \");\n            sb.append(sof.getBaseLineno());\n            sb.append(\"] [end line: \");\n            sb.append(sof.getEndLineno());\n            sb.append(\u0027]\u0027);\n        } else if (type \u003d\u003d Token.NUMBER) {\n            sb.append(\u0027 \u0027);\n            sb.append(getDouble());\n        }\n        int lineno \u003d getLineno();\n        if (lineno !\u003d -1) {\n            sb.append(\u0027 \u0027);\n            sb.append(lineno);\n        }\n        int[] keys \u003d getSortedPropTypes();\n        for (int i \u003d 0; i \u003c keys.length; i++) {\n            int type \u003d keys[i];\n            PropListItem x \u003d lookupProperty(type);\n            sb.append(\" [\");\n            sb.append(propToString(type));\n            sb.append(\": \");\n            String value;\n            switch(type) {\n                case TARGETBLOCK_PROP:\n                    value \u003d \"target block property\";\n                    break;\n                case LOCAL_BLOCK_PROP:\n                    value \u003d \"last local block\";\n                    break;\n                case ISNUMBER_PROP:\n                    switch(x.intValue) {\n                        case BOTH:\n                            value \u003d \"both\";\n                            break;\n                        case RIGHT:\n                            value \u003d \"right\";\n                            break;\n                        case LEFT:\n                            value \u003d \"left\";\n                            break;\n                        default:\n                            throw Kit.codeBug();\n                    }\n                    break;\n                case SPECIALCALL_PROP:\n                    switch(x.intValue) {\n                        case SPECIALCALL_EVAL:\n                            value \u003d \"eval\";\n                            break;\n                        case SPECIALCALL_WITH:\n                            value \u003d \"with\";\n                            break;\n                        default:\n                            throw Kit.codeBug();\n                    }\n                    break;\n                default:\n                    Object obj \u003d x.objectValue;\n                    if (obj !\u003d null) {\n                        value \u003d obj.toString();\n                    } else {\n                        value \u003d String.valueOf(x.intValue);\n                    }\n                    break;\n            }\n            sb.append(value);\n            sb.append(\u0027]\u0027);\n        }\n        if (jsType !\u003d null) {\n            String jsTypeString \u003d jsType.toString();\n            if (jsTypeString !\u003d null) {\n                sb.append(\" : \");\n                sb.append(jsTypeString);\n            }\n        }\n    }\n}",
      "path": "src/com/google/javascript/rhino/Node.java",
      "functionStartLine": 873,
      "functionName": "toString",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}