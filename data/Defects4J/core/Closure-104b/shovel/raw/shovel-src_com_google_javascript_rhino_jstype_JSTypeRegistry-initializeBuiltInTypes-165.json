{
  "origin": "codeshovel",
  "repositoryName": "Closure-104b",
  "repositoryPath": "/tmp/Closure-104b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JSTypeRegistry.java",
  "functionName": "initializeBuiltInTypes",
  "functionId": "initializeBuiltInTypes",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 165,
  "functionEndLine": 466,
  "numCommitsSeen": 5,
  "timeTaken": 567,
  "changeHistory": [
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,148 @@\n+private void initializeBuiltInTypes() {\n+    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n+    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n+    NullType NULL_TYPE \u003d new NullType(this);\n+    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n+    NumberType NUMBER_TYPE \u003d new NumberType(this);\n+    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n+    StringType STRING_TYPE \u003d new StringType(this);\n+    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n+    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n+    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n+    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n+    VoidType VOID_TYPE \u003d new VoidType(this);\n+    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n+    AllType ALL_TYPE \u003d new AllType(this);\n+    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n+    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n+    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n+    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n+    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true);\n+    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n+    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n+    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n+    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n+    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n+    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n+    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n+    NoType NO_TYPE \u003d new NoType(this);\n+    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n+    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n+    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n+    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createParametersWithVarArgs(ALL_TYPE), null, null, null, true, true) {\n+\n+        private static final long serialVersionUID \u003d 1L;\n+\n+        @Override\n+        public JSType getReturnType() {\n+            return getInstanceType();\n+        }\n+    };\n+    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n+    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n+    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createParameters(false, ALL_TYPE), BOOLEAN_TYPE, null, null, true, true);\n+    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n+    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n+    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE, null, null, true, true);\n+    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n+    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n+    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n+    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n+    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n+    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n+    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n+    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n+    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n+    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n+    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n+    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n+    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n+    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n+    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n+    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n+    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n+    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n+    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n+    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n+    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n+    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n+    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n+    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n+    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createParameters(false, ALL_TYPE), NUMBER_TYPE, null, null, true, true);\n+    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n+    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n+    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createOptionalParameters(ALL_TYPE, ALL_TYPE), null, null, null, true, true) {\n+\n+        private static final long serialVersionUID \u003d 1L;\n+\n+        @Override\n+        public JSType getReturnType() {\n+            return getInstanceType();\n+        }\n+    };\n+    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n+    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n+    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createParameters(false, ALL_TYPE), STRING_TYPE, null, null, true, true);\n+    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n+    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n+    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n+    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n+    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n+    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n+    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n+    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n+    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n+    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n+    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n+    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n+    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n+    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n+    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n+    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n+    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n+    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n+    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE, NO_OBJECT_TYPE, null, true, true) {\n+\n+        private static final long serialVersionUID \u003d 1L;\n+\n+        @Override\n+        public FunctionType getConstructor() {\n+            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n+        }\n+    };\n+    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n+    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n+    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n+    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n+    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n+    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n+    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n+    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n+    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n+    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n+}\n\\ No newline at end of file\n",
      "actualSource": "private void initializeBuiltInTypes() {\n    BooleanType BOOLEAN_TYPE \u003d new BooleanType(this);\n    registerNativeType(JSTypeNative.BOOLEAN_TYPE, BOOLEAN_TYPE);\n    NullType NULL_TYPE \u003d new NullType(this);\n    registerNativeType(JSTypeNative.NULL_TYPE, NULL_TYPE);\n    NumberType NUMBER_TYPE \u003d new NumberType(this);\n    registerNativeType(JSTypeNative.NUMBER_TYPE, NUMBER_TYPE);\n    StringType STRING_TYPE \u003d new StringType(this);\n    registerNativeType(JSTypeNative.STRING_TYPE, STRING_TYPE);\n    UnknownType UNKNOWN_TYPE \u003d new UnknownType(this, false);\n    registerNativeType(JSTypeNative.UNKNOWN_TYPE, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE, new UnknownType(this, true));\n    VoidType VOID_TYPE \u003d new VoidType(this);\n    registerNativeType(JSTypeNative.VOID_TYPE, VOID_TYPE);\n    AllType ALL_TYPE \u003d new AllType(this);\n    registerNativeType(JSTypeNative.ALL_TYPE, ALL_TYPE);\n    ObjectType TOP_LEVEL_PROTOTYPE \u003d new FunctionPrototypeType(this, null, null, true);\n    registerNativeType(JSTypeNative.TOP_LEVEL_PROTOTYPE, TOP_LEVEL_PROTOTYPE);\n    FunctionType OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Object\", null, createOptionalParameters(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n    OBJECT_FUNCTION_TYPE.defineDeclaredProperty(\"prototype\", TOP_LEVEL_PROTOTYPE, true);\n    registerNativeType(JSTypeNative.OBJECT_FUNCTION_TYPE, OBJECT_FUNCTION_TYPE);\n    ObjectType OBJECT_PROTOTYPE \u003d OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.OBJECT_PROTOTYPE, OBJECT_PROTOTYPE);\n    ObjectType OBJECT_TYPE \u003d OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.OBJECT_TYPE, OBJECT_TYPE);\n    FunctionType FUNCTION_FUNCTION_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(ALL_TYPE), UNKNOWN_TYPE, null, null, true, true);\n    FUNCTION_FUNCTION_TYPE.setPrototypeBasedOn(OBJECT_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_FUNCTION_TYPE, FUNCTION_FUNCTION_TYPE);\n    ObjectType FUNCTION_PROTOTYPE \u003d FUNCTION_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.FUNCTION_PROTOTYPE, FUNCTION_PROTOTYPE);\n    NoType NO_TYPE \u003d new NoType(this);\n    registerNativeType(JSTypeNative.NO_TYPE, NO_TYPE);\n    NoObjectType NO_OBJECT_TYPE \u003d new NoObjectType(this);\n    registerNativeType(JSTypeNative.NO_OBJECT_TYPE, NO_OBJECT_TYPE);\n    FunctionType ARRAY_FUNCTION_TYPE \u003d new FunctionType(this, \"Array\", null, createParametersWithVarArgs(ALL_TYPE), null, null, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public JSType getReturnType() {\n            return getInstanceType();\n        }\n    };\n    ObjectType arrayPrototype \u003d ARRAY_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.ARRAY_FUNCTION_TYPE, ARRAY_FUNCTION_TYPE);\n    ObjectType ARRAY_TYPE \u003d ARRAY_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ARRAY_TYPE, ARRAY_TYPE);\n    FunctionType BOOLEAN_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Boolean\", null, createParameters(false, ALL_TYPE), BOOLEAN_TYPE, null, null, true, true);\n    ObjectType booleanPrototype \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE, BOOLEAN_OBJECT_FUNCTION_TYPE);\n    ObjectType BOOLEAN_OBJECT_TYPE \u003d BOOLEAN_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.BOOLEAN_OBJECT_TYPE, BOOLEAN_OBJECT_TYPE);\n    FunctionType DATE_FUNCTION_TYPE \u003d new FunctionType(this, \"Date\", null, createOptionalParameters(UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE, UNKNOWN_TYPE), STRING_TYPE, null, null, true, true);\n    ObjectType datePrototype \u003d DATE_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.DATE_FUNCTION_TYPE, DATE_FUNCTION_TYPE);\n    ObjectType DATE_TYPE \u003d DATE_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.DATE_TYPE, DATE_TYPE);\n    FunctionType ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"Error\");\n    registerNativeType(JSTypeNative.ERROR_FUNCTION_TYPE, ERROR_FUNCTION_TYPE);\n    ObjectType ERROR_TYPE \u003d ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.ERROR_TYPE, ERROR_TYPE);\n    FunctionType EVAL_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"EvalError\");\n    EVAL_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.EVAL_ERROR_FUNCTION_TYPE, EVAL_ERROR_FUNCTION_TYPE);\n    ObjectType EVAL_ERROR_TYPE \u003d EVAL_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.EVAL_ERROR_TYPE, EVAL_ERROR_TYPE);\n    FunctionType RANGE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"RangeError\");\n    RANGE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.RANGE_ERROR_FUNCTION_TYPE, RANGE_ERROR_FUNCTION_TYPE);\n    ObjectType RANGE_ERROR_TYPE \u003d RANGE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.RANGE_ERROR_TYPE, RANGE_ERROR_TYPE);\n    FunctionType REFERENCE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"ReferenceError\");\n    REFERENCE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE, REFERENCE_ERROR_FUNCTION_TYPE);\n    ObjectType REFERENCE_ERROR_TYPE \u003d REFERENCE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REFERENCE_ERROR_TYPE, REFERENCE_ERROR_TYPE);\n    FunctionType SYNTAX_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"SyntaxError\");\n    SYNTAX_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE, SYNTAX_ERROR_FUNCTION_TYPE);\n    ObjectType SYNTAX_ERROR_TYPE \u003d SYNTAX_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.SYNTAX_ERROR_TYPE, SYNTAX_ERROR_TYPE);\n    FunctionType TYPE_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"TypeError\");\n    TYPE_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.TYPE_ERROR_FUNCTION_TYPE, TYPE_ERROR_FUNCTION_TYPE);\n    ObjectType TYPE_ERROR_TYPE \u003d TYPE_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.TYPE_ERROR_TYPE, TYPE_ERROR_TYPE);\n    FunctionType URI_ERROR_FUNCTION_TYPE \u003d new ErrorFunctionType(this, \"URIError\");\n    URI_ERROR_FUNCTION_TYPE.setPrototypeBasedOn(ERROR_TYPE);\n    registerNativeType(JSTypeNative.URI_ERROR_FUNCTION_TYPE, URI_ERROR_FUNCTION_TYPE);\n    ObjectType URI_ERROR_TYPE \u003d URI_ERROR_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.URI_ERROR_TYPE, URI_ERROR_TYPE);\n    FunctionType NUMBER_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"Number\", null, createParameters(false, ALL_TYPE), NUMBER_TYPE, null, null, true, true);\n    ObjectType numberPrototype \u003d NUMBER_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_FUNCTION_TYPE, NUMBER_OBJECT_FUNCTION_TYPE);\n    ObjectType NUMBER_OBJECT_TYPE \u003d NUMBER_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.NUMBER_OBJECT_TYPE, NUMBER_OBJECT_TYPE);\n    FunctionType REGEXP_FUNCTION_TYPE \u003d new FunctionType(this, \"RegExp\", null, createOptionalParameters(ALL_TYPE, ALL_TYPE), null, null, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public JSType getReturnType() {\n            return getInstanceType();\n        }\n    };\n    ObjectType regexpPrototype \u003d REGEXP_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.REGEXP_FUNCTION_TYPE, REGEXP_FUNCTION_TYPE);\n    ObjectType REGEXP_TYPE \u003d REGEXP_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.REGEXP_TYPE, REGEXP_TYPE);\n    FunctionType STRING_OBJECT_FUNCTION_TYPE \u003d new FunctionType(this, \"String\", null, createParameters(false, ALL_TYPE), STRING_TYPE, null, null, true, true);\n    ObjectType stringPrototype \u003d STRING_OBJECT_FUNCTION_TYPE.getPrototype();\n    registerNativeType(JSTypeNative.STRING_OBJECT_FUNCTION_TYPE, STRING_OBJECT_FUNCTION_TYPE);\n    ObjectType STRING_OBJECT_TYPE \u003d STRING_OBJECT_FUNCTION_TYPE.getInstanceType();\n    registerNativeType(JSTypeNative.STRING_OBJECT_TYPE, STRING_OBJECT_TYPE);\n    JSType OBJECT_NUMBER_STRING \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING, OBJECT_NUMBER_STRING);\n    JSType OBJECT_NUMBER_STRING_BOOLEAN \u003d createUnionType(OBJECT_TYPE, NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN, OBJECT_NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING_BOOLEAN \u003d createUnionType(NUMBER_TYPE, STRING_TYPE, BOOLEAN_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING_BOOLEAN, NUMBER_STRING_BOOLEAN);\n    JSType NUMBER_STRING \u003d createUnionType(NUMBER_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_STRING, NUMBER_STRING);\n    JSType STRING_VALUE_OR_OBJECT_TYPE \u003d createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n    registerNativeType(JSTypeNative.STRING_VALUE_OR_OBJECT_TYPE, STRING_VALUE_OR_OBJECT_TYPE);\n    JSType NUMBER_VALUE_OR_OBJECT_TYPE \u003d createUnionType(NUMBER_OBJECT_TYPE, NUMBER_TYPE);\n    registerNativeType(JSTypeNative.NUMBER_VALUE_OR_OBJECT_TYPE, NUMBER_VALUE_OR_OBJECT_TYPE);\n    FunctionType U2U_FUNCTION_TYPE \u003d createFunctionType(UNKNOWN_TYPE, true, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.U2U_FUNCTION_TYPE, U2U_FUNCTION_TYPE);\n    FunctionType U2U_CONSTRUCTOR_TYPE \u003d new FunctionType(this, \"Function\", null, createParametersWithVarArgs(UNKNOWN_TYPE), UNKNOWN_TYPE, NO_OBJECT_TYPE, null, true, true) {\n\n        private static final long serialVersionUID \u003d 1L;\n\n        @Override\n        public FunctionType getConstructor() {\n            return registry.getNativeFunctionType(JSTypeNative.FUNCTION_FUNCTION_TYPE);\n        }\n    };\n    registerNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE, U2U_CONSTRUCTOR_TYPE);\n    registerNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE, U2U_CONSTRUCTOR_TYPE);\n    FUNCTION_FUNCTION_TYPE.setInstanceType(U2U_CONSTRUCTOR_TYPE);\n    U2U_CONSTRUCTOR_TYPE.setImplicitPrototype(FUNCTION_PROTOTYPE);\n    FunctionType LEAST_FUNCTION_TYPE \u003d createFunctionType(NO_TYPE, true, ALL_TYPE);\n    registerNativeType(JSTypeNative.LEAST_FUNCTION_TYPE, LEAST_FUNCTION_TYPE);\n    ObjectType GLOBAL_THIS \u003d createObjectType(\"global this\", null, UNKNOWN_TYPE);\n    registerNativeType(JSTypeNative.GLOBAL_THIS, GLOBAL_THIS);\n    FunctionType GREATEST_FUNCTION_TYPE \u003d createFunctionType(ALL_TYPE, true, NO_TYPE);\n    registerNativeType(JSTypeNative.GREATEST_FUNCTION_TYPE, GREATEST_FUNCTION_TYPE);\n}",
      "path": "src/com/google/javascript/rhino/jstype/JSTypeRegistry.java",
      "functionStartLine": 166,
      "functionName": "initializeBuiltInTypes",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}