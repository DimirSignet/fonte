{
  "origin": "codeshovel",
  "repositoryName": "Closure-104b",
  "repositoryPath": "/tmp/Closure-104b//.git",
  "startCommitName": "HEAD",
  "sourceFileName": "UnionType.java",
  "functionName": "meet",
  "functionId": "meet___that-JSType",
  "sourceFilePath": "src/com/google/javascript/rhino/jstype/UnionType.java",
  "functionAnnotation": "",
  "functionDoc": "",
  "functionStartLine": 274,
  "functionEndLine": 299,
  "numCommitsSeen": 7,
  "timeTaken": 469,
  "changeHistory": [
    "1be1c2636ef14071afa7da5cb8988972bd90149f",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3"
  ],
  "changeHistoryShort": {
    "1be1c2636ef14071afa7da5cb8988972bd90149f": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1be1c2636ef14071afa7da5cb8988972bd90149f": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Fix getGreatestSubtype for UnionTypes by always returning the meet of\nthe two types. (Andrew)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@112 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "2/22/10, 11:05 AM",
      "commitName": "1be1c2636ef14071afa7da5cb8988972bd90149f",
      "commitAuthor": "Nicholas.J.Santos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix getGreatestSubtype for UnionTypes by always returning the meet of\nthe two types. (Andrew)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@112 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/22/10, 11:05 AM",
          "commitName": "1be1c2636ef14071afa7da5cb8988972bd90149f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/26/10, 1:59 PM",
          "commitNameOld": "bca9abb0e3062d373fe52c0e8340337588c05708",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 26.88,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "actualSource": "JSType meet(JSType that) {\n    UnionTypeBuilder builder \u003d new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n        if (alternate.isSubtype(that)) {\n            builder.addAlternate(alternate);\n        }\n    }\n    if (that instanceof UnionType) {\n        for (JSType otherAlternate : ((UnionType) that).alternates) {\n            if (otherAlternate.isSubtype(this)) {\n                builder.addAlternate(otherAlternate);\n            }\n        }\n    } else if (that.isSubtype(this)) {\n        builder.addAlternate(that);\n    }\n    JSType result \u003d builder.build();\n    if (result !\u003d null) {\n        return result;\n    } else if (this.isObject() \u0026\u0026 that.isObject()) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n        return getNativeType(JSTypeNative.NO_TYPE);\n    }\n}",
          "path": "src/com/google/javascript/rhino/jstype/UnionType.java",
          "functionStartLine": 274,
          "functionName": "meet",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,25 @@\n-private JSType meet(UnionType that) {\n+JSType meet(JSType that) {\n     UnionTypeBuilder builder \u003d new UnionTypeBuilder(registry);\n     for (JSType alternate : alternates) {\n         if (alternate.isSubtype(that)) {\n             builder.addAlternate(alternate);\n         }\n     }\n-    for (JSType otherAlternate : that.alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-            builder.addAlternate(otherAlternate);\n+    if (that instanceof UnionType) {\n+        for (JSType otherAlternate : ((UnionType) that).alternates) {\n+            if (otherAlternate.isSubtype(this)) {\n+                builder.addAlternate(otherAlternate);\n+            }\n         }\n+    } else if (that.isSubtype(this)) {\n+        builder.addAlternate(that);\n     }\n     JSType result \u003d builder.build();\n-    return result \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : result;\n+    if (result !\u003d null) {\n+        return result;\n+    } else if (this.isObject() \u0026\u0026 that.isObject()) {\n+        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+        return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[that-UnionType]",
            "newValue": "[that-JSType]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Fix getGreatestSubtype for UnionTypes by always returning the meet of\nthe two types. (Andrew)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@112 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/22/10, 11:05 AM",
          "commitName": "1be1c2636ef14071afa7da5cb8988972bd90149f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/26/10, 1:59 PM",
          "commitNameOld": "bca9abb0e3062d373fe52c0e8340337588c05708",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 26.88,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "actualSource": "JSType meet(JSType that) {\n    UnionTypeBuilder builder \u003d new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n        if (alternate.isSubtype(that)) {\n            builder.addAlternate(alternate);\n        }\n    }\n    if (that instanceof UnionType) {\n        for (JSType otherAlternate : ((UnionType) that).alternates) {\n            if (otherAlternate.isSubtype(this)) {\n                builder.addAlternate(otherAlternate);\n            }\n        }\n    } else if (that.isSubtype(this)) {\n        builder.addAlternate(that);\n    }\n    JSType result \u003d builder.build();\n    if (result !\u003d null) {\n        return result;\n    } else if (this.isObject() \u0026\u0026 that.isObject()) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n        return getNativeType(JSTypeNative.NO_TYPE);\n    }\n}",
          "path": "src/com/google/javascript/rhino/jstype/UnionType.java",
          "functionStartLine": 274,
          "functionName": "meet",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,25 @@\n-private JSType meet(UnionType that) {\n+JSType meet(JSType that) {\n     UnionTypeBuilder builder \u003d new UnionTypeBuilder(registry);\n     for (JSType alternate : alternates) {\n         if (alternate.isSubtype(that)) {\n             builder.addAlternate(alternate);\n         }\n     }\n-    for (JSType otherAlternate : that.alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-            builder.addAlternate(otherAlternate);\n+    if (that instanceof UnionType) {\n+        for (JSType otherAlternate : ((UnionType) that).alternates) {\n+            if (otherAlternate.isSubtype(this)) {\n+                builder.addAlternate(otherAlternate);\n+            }\n         }\n+    } else if (that.isSubtype(this)) {\n+        builder.addAlternate(that);\n     }\n     JSType result \u003d builder.build();\n-    return result \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : result;\n+    if (result !\u003d null) {\n+        return result;\n+    } else if (this.isObject() \u0026\u0026 that.isObject()) {\n+        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+        return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix getGreatestSubtype for UnionTypes by always returning the meet of\nthe two types. (Andrew)\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@112 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
          "commitDate": "2/22/10, 11:05 AM",
          "commitName": "1be1c2636ef14071afa7da5cb8988972bd90149f",
          "commitAuthor": "Nicholas.J.Santos",
          "commitDateOld": "1/26/10, 1:59 PM",
          "commitNameOld": "bca9abb0e3062d373fe52c0e8340337588c05708",
          "commitAuthorOld": "Nicholas.J.Santos",
          "daysBetweenCommits": 26.88,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "actualSource": "JSType meet(JSType that) {\n    UnionTypeBuilder builder \u003d new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n        if (alternate.isSubtype(that)) {\n            builder.addAlternate(alternate);\n        }\n    }\n    if (that instanceof UnionType) {\n        for (JSType otherAlternate : ((UnionType) that).alternates) {\n            if (otherAlternate.isSubtype(this)) {\n                builder.addAlternate(otherAlternate);\n            }\n        }\n    } else if (that.isSubtype(this)) {\n        builder.addAlternate(that);\n    }\n    JSType result \u003d builder.build();\n    if (result !\u003d null) {\n        return result;\n    } else if (this.isObject() \u0026\u0026 that.isObject()) {\n        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n    } else {\n        return getNativeType(JSTypeNative.NO_TYPE);\n    }\n}",
          "path": "src/com/google/javascript/rhino/jstype/UnionType.java",
          "functionStartLine": 274,
          "functionName": "meet",
          "functionAnnotation": "",
          "functionDoc": "",
          "diff": "@@ -1,15 +1,25 @@\n-private JSType meet(UnionType that) {\n+JSType meet(JSType that) {\n     UnionTypeBuilder builder \u003d new UnionTypeBuilder(registry);\n     for (JSType alternate : alternates) {\n         if (alternate.isSubtype(that)) {\n             builder.addAlternate(alternate);\n         }\n     }\n-    for (JSType otherAlternate : that.alternates) {\n-        if (otherAlternate.isSubtype(this)) {\n-            builder.addAlternate(otherAlternate);\n+    if (that instanceof UnionType) {\n+        for (JSType otherAlternate : ((UnionType) that).alternates) {\n+            if (otherAlternate.isSubtype(this)) {\n+                builder.addAlternate(otherAlternate);\n+            }\n         }\n+    } else if (that.isSubtype(this)) {\n+        builder.addAlternate(that);\n     }\n     JSType result \u003d builder.build();\n-    return result \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : result;\n+    if (result !\u003d null) {\n+        return result;\n+    } else if (this.isObject() \u0026\u0026 that.isObject()) {\n+        return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+        return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3": {
      "type": "Yintroduced",
      "commitMessage": "Initial commit.\n\n\n\ngit-svn-id: https://closure-compiler.googlecode.com/svn/trunk@2 b0f006be-c8cd-11de-a2e8-8d36a3108c74\n",
      "commitDate": "11/3/09, 3:51 PM",
      "commitName": "6b49cfd9022fe111bdad745c78ea877fbc2f7ba3",
      "commitAuthor": "nicholas.j.santos@gmail.com",
      "diff": "@@ -0,0 +1,15 @@\n+private JSType meet(UnionType that) {\n+    UnionTypeBuilder builder \u003d new UnionTypeBuilder(registry);\n+    for (JSType alternate : alternates) {\n+        if (alternate.isSubtype(that)) {\n+            builder.addAlternate(alternate);\n+        }\n+    }\n+    for (JSType otherAlternate : that.alternates) {\n+        if (otherAlternate.isSubtype(this)) {\n+            builder.addAlternate(otherAlternate);\n+        }\n+    }\n+    JSType result \u003d builder.build();\n+    return result \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : result;\n+}\n\\ No newline at end of file\n",
      "actualSource": "private JSType meet(UnionType that) {\n    UnionTypeBuilder builder \u003d new UnionTypeBuilder(registry);\n    for (JSType alternate : alternates) {\n        if (alternate.isSubtype(that)) {\n            builder.addAlternate(alternate);\n        }\n    }\n    for (JSType otherAlternate : that.alternates) {\n        if (otherAlternate.isSubtype(this)) {\n            builder.addAlternate(otherAlternate);\n        }\n    }\n    JSType result \u003d builder.build();\n    return result \u003d\u003d null ? getNativeType(JSTypeNative.NO_TYPE) : result;\n}",
      "path": "src/com/google/javascript/rhino/jstype/UnionType.java",
      "functionStartLine": 281,
      "functionName": "meet",
      "functionAnnotation": "",
      "functionDoc": ""
    }
  }
}