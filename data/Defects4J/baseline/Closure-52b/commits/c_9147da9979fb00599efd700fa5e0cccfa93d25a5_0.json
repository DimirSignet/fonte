{"sha": "9147da9979fb00599efd700fa5e0cccfa93d25a5", "log": "Change on 2010/04/29 by alan          Don't inline a variable that has dependence on outer scoped variables.          R=nick         DELTA=44  (41 added, 0 deleted, 3 changed)  Change on 2010/04/29 by nick          Remove some dead code.          R=alan         DELTA=113  (0 added, 113 deleted, 0 changed)  Change on 2010/04/30 by andrew          -Fix up a copy/paste error in a comment.          R=john         DELTA=1  (0 added, 0 deleted, 1 changed)  Change on 2010/04/30 by nick          Prune sources that are not required when --manage_closure_dependencies         is on.          R=alan         DELTA=45  (22 added, 0 deleted, 23 changed)    Revision created by MOE tool push_codebase. MOE_MIGRATION=lwqqkv   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n \n     createDefineReplacements(config.define, options);\n \n-    options.sortClosureDependencies = config.sortClosureDependencies;\n+    options.manageClosureDependencies = config.manageClosureDependencies;\n   }\n \n   final protected A getCompiler() {\n       return this;\n     }\n \n-    private boolean sortClosureDependencies = false;\n-\n-    /**\n-     * Sets whether to sort files by their goog.provide/require deps.\n-     */\n-    CommandLineConfig setSortClosureDependencies(boolean newVal) {\n-      this.sortClosureDependencies = newVal;\n+    private boolean manageClosureDependencies = false;\n+\n+    /**\n+     * Sets whether to sort files by their goog.provide/require deps,\n+     * and prune inputs that are not required.\n+     */\n+    CommandLineConfig setManageClosureDependencies(boolean newVal) {\n+      this.manageClosureDependencies = newVal;\n       return this;\n     }\n   }\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         + \"goog.require(), goog.provide(), and goog.exportSymbol()\")\n     private boolean process_closure_primitives = true;\n \n-    @Option(name = \"--sort_closure_dependencies\",\n+    @Option(name = \"--manage_closure_dependencies\",\n         handler = BooleanOptionHandler.class,\n         usage = \"Automatically sort dependencies so that a file that \"\n         + \"goog.provides symbol X will always come before a file that \"\n-        + \"goog.requires symbol X.\")\n-    private boolean sort_closure_dependencies = false;\n+        + \"goog.requires symbol X. If an input provides symbols, and \"\n+        + \"those symbols are never required, then that input will not \"\n+        + \"be included in the compilation.\")\n+    private boolean manage_closure_dependencies = false;\n \n     // Our own option parser to be backwards-compatible.\n     // It needs to be public because of the crazy reflection that args4j does.\n           .setJscompOff(flags.jscomp_off)\n           .setDefine(flags.define)\n           .setCharset(flags.charset)\n-          .setSortClosureDependencies(flags.sort_closure_dependencies);\n+          .setManageClosureDependencies(flags.manage_closure_dependencies);\n     }\n   }\n \n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n         externsRoot.addChildToBack(n);\n       }\n \n-      if (options.sortClosureDependencies) {\n+      if (options.manageClosureDependencies) {\n         for (CompilerInput input : inputs) {\n           input.setCompiler(this);\n         }\n \n         SortedDependencies<CompilerInput> sorter =\n             new SortedDependencies<CompilerInput>(inputs);\n-        inputs = Lists.newArrayList(sorter.getSortedList());\n+        inputs = Lists.newArrayList(\n+            sorter.getSortedDependenciesOf(\n+                sorter.getInputsWithoutProvides()));\n       }\n \n       List<CompilerInput> annotatedExterns = Lists.newArrayList();\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   // Input Options\n   //--------------------------------\n \n-  boolean sortClosureDependencies = false;\n+  boolean manageClosureDependencies = false;\n \n   //--------------------------------\n   // Checks\n   }\n \n   /**\n-   * Sets the id generators to replace.\n+   * Sets the functions whose debug strings to replace.\n    */\n   public void setReplaceStringsConfiguration(\n       String placeholderToken, List<String> functionDescriptors) {\n   }\n \n   /**\n-   * Sort inputs by their goog.provide/goog.require calls.\n-   */\n-  public void setSortClosureDependencies(boolean newVal) {\n-    sortClosureDependencies = newVal;\n+   * Sort inputs by their goog.provide/goog.require calls, and prune inputs\n+   * whose symbols are not required.\n+   */\n+  public void setManageClosureDependencies(boolean newVal) {\n+    manageClosureDependencies = newVal;\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n             }\n \n             Node defNode = reachingDef.getDef(name, cfgNode);\n-            if (defNode != null) {\n+            if (defNode != null &&\n+                !reachingDef.dependsOnOuterScopeVars(name, cfgNode)) {\n               candidates.add(new Candidate(name, defNode, n, cfgNode));\n             }\n           }\n--- a/src/com/google/javascript/jscomp/GoogleCodeRemoval.java\n+++ b/src/com/google/javascript/jscomp/GoogleCodeRemoval.java\n  *        removing these methods altogether for production builds.</li>\n  * </ul>\n  *\n-*\n+ * @author robbyw@google.com (Robby Walker)\n  */\n final class GoogleCodeRemoval implements CompilerPass {\n \n--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n         new AbstractCfgNodeTraversalCallback() {\n       @Override\n       public void visit(NodeTraversal t, Node n, Node parent) {\n-        if (NodeUtil.isName(n) && jsScope.isDeclared(n.getString(), false)) {\n+        if (NodeUtil.isName(n) && jsScope.isDeclared(n.getString(), true)) {\n           def.depends.add(jsScope.getVar(n.getString()));\n         }\n       }\n       return def.node;\n     }\n   }\n+\n+  boolean dependsOnOuterScopeVars(String name, Node useNode) {\n+    Preconditions.checkArgument(getCfg().hasNode(useNode));\n+    GraphNode<Node, Branch> n = getCfg().getNode(useNode);\n+    FlowState<MustDef> state = n.getAnnotation();\n+    Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));\n+    for (Var s : def.depends) {\n+      if (s.scope != jsScope) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n }\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n \n   private ScopeCreator scopeCreator;\n \n-  private final PotentialCheckManager potentialChecks =\n-      new PotentialCheckManager();\n-\n   private final CheckLevel reportMissingOverride;\n   private final CheckLevel reportUnknownTypes;\n \n       check(externsRoot, true);\n     }\n     check(jsRoot, false);\n-\n-    potentialChecks.flush();\n   }\n \n   /** Main entry point of this phase for testing code. */\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n   }\n \n   public void testSourceSortingOn() {\n-    args.add(\"--sort_closure_dependencies=true\");\n+    args.add(\"--manage_closure_dependencies=true\");\n     test(new String[] {\n           \"goog.require('beer');\",\n           \"goog.provide('beer');\"\n+         },\n+         new String[] {\n+           \"var beer = {};\",\n+           \"\"\n+         });\n+  }\n+\n+  public void testSourcePruningOn() {\n+    args.add(\"--manage_closure_dependencies=true\");\n+    test(new String[] {\n+          \"goog.require('beer');\",\n+          \"goog.provide('beer');\",\n+          \"goog.provide('scotch'); var x = 3;\"\n          },\n          new String[] {\n            \"var beer = {};\",\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n     noInline(\"var x = a[i]; a[j] = 2; print(x); \");\n   }\n \n+  // TODO(user): These should be inlinable.\n   public void testNoInlineConstructors() {\n     noInline(\"var x = new Iterator(); x.next();\");\n   }\n     noInline(\"var x = []; print(x)\");\n   }\n \n+  // TODO(user): These should be inlinable.\n   public void testNoInlineObjectLits() {\n     noInline(\"var x = {}; print(x)\");\n   }\n \n+  // TODO(user): These should be inlinable after the REGEX checks.\n   public void testNoInlineRegExpLits() {\n     noInline(\"var x = /y/; print(x)\");\n   }\n \n   public void testInlineConstructorCallsIntoLoop() {\n-    // Is a bad idea, a similar case was found in closure string.js\n+    // Don't inline construction into loops.\n     noInline(\"var x = new Iterator();\" +\n              \"for(i = 0; i < 10; i++) {j = x.next()}\");\n   }\n            \"var y; var x, z = noSFX(); noSFX(); noSFX(), print(noSFX(Y))\");\n   }\n \n+  public void testDependOnOuterScopeVariables() {\n+    noInline(\"var x; function foo() { var y = x; x = 0; print(y) }\");\n+    noInline(\"var x; function foo() { var y = x; x++; print(y) }\");\n+\n+    // Sadly, we don't understand the data flow of outer scoped variables as\n+    // it can be modified by code outside of this scope. We can't inline\n+    // at all if the definition has dependence on such variable.\n+    noInline(\"var x; function foo() { var y = x; print(y) }\");\n+  }\n+\n   public void testInlineArguments() {\n     testSame(\"function _func(x) { print(x) }\");\n     testSame(\"function _func(x,y) { if(y) { x = 1 }; print(x) }\");\n--- a/test/com/google/javascript/jscomp/GoogleCodeRemovalTest.java\n+++ b/test/com/google/javascript/jscomp/GoogleCodeRemovalTest.java\n /**\n  * Tests for {@link GoogleCodeRemoval}\n  *\n-*\n+ * @author robbyw@google.com (Robby Walker)\n  */\n public class GoogleCodeRemovalTest extends CompilerTestCase {\n ", "timestamp": 1272895393, "metainfo": ""}