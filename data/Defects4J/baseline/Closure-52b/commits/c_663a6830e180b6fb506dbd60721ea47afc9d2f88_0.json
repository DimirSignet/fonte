{"sha": "663a6830e180b6fb506dbd60721ea47afc9d2f88", "log": "Some simple performance cleanups, use Map.Entry/Arrays.asList/etc  R=johnlenz,nicksantos DELTA=23  (1 added, 2 deleted, 20 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2699   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AliasStrings.java\n+++ b/src/com/google/javascript/jscomp/AliasStrings.java\n    */\n   private void outputStringUsage() {\n     StringBuilder sb = new StringBuilder(\"Strings used more than once:\\n\");\n-    for (String str : stringInfoMap.keySet()) {\n-      StringInfo info = stringInfoMap.get(str);\n+    for (Entry<String, StringInfo> stringInfoEntry : stringInfoMap.entrySet()) {\n+      StringInfo info = stringInfoEntry.getValue();\n       if (info.numOccurrences > 1) {\n         sb.append(info.numOccurrences);\n         sb.append(\": \");\n-        sb.append(str);\n+        sb.append(stringInfoEntry.getKey());\n         sb.append('\\n');\n       }\n     }\n--- a/src/com/google/javascript/jscomp/CheckProvides.java\n+++ b/src/com/google/javascript/jscomp/CheckProvides.java\n     }\n \n     private void visitScriptNode(NodeTraversal t, Node n) {\n-      for (String ctorName : ctors.keySet()) {\n-        if (!provides.containsKey(ctorName)) {\n+      for (Map.Entry<String, Node> ctorEntry : ctors.entrySet()) {\n+        if (!provides.containsKey(ctorEntry.getKey())) {\n           compiler.report(\n-              t.makeError(ctors.get(ctorName), checkLevel,\n-                  MISSING_PROVIDE_WARNING, ctorName));\n+              t.makeError(ctorEntry.getValue(), checkLevel,\n+                  MISSING_PROVIDE_WARNING, ctorEntry.getKey()));\n         }\n       }\n       provides.clear();\n--- a/src/com/google/javascript/jscomp/LinkedFlowScope.java\n+++ b/src/com/google/javascript/jscomp/LinkedFlowScope.java\n       }\n     }\n \n-    for (String key : cache.symbols.keySet()) {\n-      if (!slots.containsKey(key)) {\n-        slots.put(key, cache.symbols.get(key));\n+    for (Map.Entry<String, StaticSlot<JSType>> symbolEntry : cache.symbols.entrySet()) {\n+      if (!slots.containsKey(symbolEntry.getKey())) {\n+        slots.put(symbolEntry.getKey(), symbolEntry.getValue());\n       }\n     }\n \n--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n       Map<Var, Definition> resultMap = result.reachingDef;\n \n       // Take the join of all variables that are not TOP in this.\n-      for (Var var : a.reachingDef.keySet()) {\n-\n-        Definition aDef = a.reachingDef.get(var);\n+      for (Map.Entry<Var, Definition> varEntry : a.reachingDef.entrySet()) {\n+        Var var = varEntry.getKey();\n+        Definition aDef = varEntry.getValue();\n \n         if (aDef == null) {\n           // \"a\" is BOTTOM implies that the variable has more than one possible\n \n       // Take the join of all variables that are not TOP in other but it is TOP\n       // in this.\n-      for (Var var : b.reachingDef.keySet()) {\n+      for (Map.Entry<Var, Definition> entry : b.reachingDef.entrySet()) {\n+        Var var = entry.getKey();\n         if (!a.reachingDef.containsKey(var)) {\n-          resultMap.put(var, b.reachingDef.get(var));\n+          resultMap.put(var, entry.getValue());\n         }\n       }\n       return result;\n--- a/src/com/google/javascript/jscomp/RenameProperties.java\n+++ b/src/com/google/javascript/jscomp/RenameProperties.java\n     }\n \n     // Update the call nodes.\n-    for (Node n : callNodeToParentMap.keySet()) {\n-      Node parent = callNodeToParentMap.get(n);\n-      Node firstArg = n.getFirstChild().getNext();\n+    for (Map.Entry<Node, Node> nodeEntry : callNodeToParentMap.entrySet()) {\n+      Node parent = nodeEntry.getValue();\n+      Node firstArg = nodeEntry.getKey().getFirstChild().getNext();\n       StringBuilder sb = new StringBuilder();\n       for (String oldName : firstArg.getString().split(\"[.]\")) {\n         Property p = propertyMap.get(oldName);\n         }\n         sb.append(replacement);\n       }\n-      parent.replaceChild(n, Node.newString(sb.toString()));\n+      parent.replaceChild(nodeEntry.getKey(), Node.newString(sb.toString()));\n       changed = true;\n     }\n \n--- a/src/com/google/javascript/jscomp/jsonml/JsonML.java\n+++ b/src/com/google/javascript/jscomp/jsonml/JsonML.java\n    */\n   public void setChildren(JsonML... children) {\n     this.children.clear();\n-    for (JsonML child : children) {\n-      this.children.add(child);\n-    }\n+      this.children.addAll(Arrays.asList(children));\n   }\n \n   /**", "timestamp": 1311281384, "metainfo": ""}