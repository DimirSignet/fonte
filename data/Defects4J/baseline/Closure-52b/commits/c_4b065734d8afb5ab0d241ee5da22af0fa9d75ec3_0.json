{"sha": "4b065734d8afb5ab0d241ee5da22af0fa9d75ec3", "log": "Turn off collapsing for non-constructor function properties. Fixes issue 289.  R=acleung DELTA=72  (60 added, 1 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=30   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n     Node gramps = parent.getParent();\n     Node greatGramps = gramps.getParent();\n     Node greatGreatGramps = greatGramps.getParent();\n+\n+    if (rvalue != null && rvalue.getType() == Token.FUNCTION) {\n+      checkForHosedThisReferences(rvalue, refName.docInfo, refName);\n+    }\n \n     // Create the new alias node.\n     Node nameNode = NodeUtil.newName(\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n      *     declaration\n      */\n     private boolean isConstructorOrEnumDeclaration(Node n, Node parent) {\n+      // NOTE(nicksantos): This does not handle named constructors\n+      // function a() {}\n+      // For legacy reasons, we should not fix this, because we do not\n+      // know who's depending on the current behavior.\n+\n       JSDocInfo info;\n       int valueNodeType;\n       switch (parent.getType()) {\n         return false;\n       }\n \n-      // If this is aliased, and its not a function, then its properties\n-      // can't be collapsed either.\n-      if (type != Type.FUNCTION && aliasingGets > 0) {\n+      // If this is aliased, then its properties can't be collapsed either.\n+      if (aliasingGets > 0) {\n         return false;\n       }\n \n--- a/test/com/google/javascript/jscomp/CollapsePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/CollapsePropertiesTest.java\n   }\n \n   public void testAliasCreatedForFunctionDepth1_1() {\n-    // A function's properties *are* collapsed even if the function is\n+    testSame(\"var a = function(){}; a.b = 1; var c = a; c.b = 2; a.b != c.b;\");\n+  }\n+\n+  public void testAliasCreatedForCtorDepth1_1() {\n+    // A constructor's properties *are* collapsed even if the function is\n     // referenced in a such a way that an alias is created for it,\n     // since a function with custom properties is considered a class and its\n     // non-prototype properties are considered static methods and variables.\n     // People don't typically iterate through static members of a class or\n     // refer to them using an alias for the class name.\n-    test(\"var a = function(){}; a.b = 1; var c = a; c.b = 2; a.b != c.b;\",\n+    test(\"/** @constructor */ var a = function(){}; a.b = 1; \" +\n+         \"var c = a; c.b = 2; a.b != c.b;\",\n          \"var a = function(){}; var a$b = 1; var c = a; c.b = 2; a$b != c.b;\");\n   }\n \n   public void testAliasCreatedForFunctionDepth1_2() {\n-    test(\"var a = function(){}; a.b = 1; f(a); a.b;\",\n+    testSame(\"var a = function(){}; a.b = 1; f(a); a.b;\");\n+  }\n+\n+  public void testAliasCreatedForCtorDepth1_2() {\n+    test(\"/** @constructor */ var a = function(){}; a.b = 1; f(a); a.b;\",\n          \"var a = function(){}; var a$b = 1; f(a); a$b;\");\n   }\n \n   public void testAliasCreatedForFunctionDepth1_3() {\n-    test(\"var a = function(){}; a.b = 1; new f(a); a.b;\",\n+    testSame(\"var a = function(){}; a.b = 1; new f(a); a.b;\");\n+  }\n+\n+  public void testAliasCreatedForCtorDepth1_3() {\n+    test(\"/** @constructor */ var a = function(){}; a.b = 1; new f(a); a.b;\",\n          \"var a = function(){}; var a$b = 1; new f(a); a$b;\");\n   }\n \n   public void testAliasCreatedForFunctionDepth2() {\n-    test(\"var a = {}; a.b = function() {}; a.b.c = 1; var d = a.b;\" +\n+    test(\n+        \"var a = {}; a.b = function() {}; a.b.c = 1; var d = a.b;\" +\n+        \"a.b.c != d.c;\",\n+        \"var a$b = function() {}; a$b.c = 1; var d = a$b;\" +\n+        \"a$b.c != d.c;\");\n+  }\n+\n+  public void testAliasCreatedForCtorDepth2() {\n+    test(\"var a = {}; /** @constructor */ a.b = function() {}; \" +\n+         \"a.b.c = 1; var d = a.b;\" +\n          \"a.b.c != d.c;\",\n          \"var a$b = function() {}; var a$b$c = 1; var d = a$b;\" +\n          \"a$b$c != d.c;\");\n   }\n \n   public void testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1() {\n-    test(\"function a() {} var c = a; (function() {a.b = 0;})(); a.b;\",\n-         \"function a() {} var a$b; var c = a; (function() {a$b = 0;})(); a$b;\");\n+    testSame(\"function a() {} var c = a; (function() {a.b = 0;})(); a.b;\");\n+  }\n+\n+  public void testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1() {\n+    // This technically should be collapsed, according to the rules.\n+    // We don't collapse named constructors for legacy reasons\n+    // (this pass has been around too long, and we don't know who's\n+    // depending on this behavior).\n+    testSame(\n+          \"/** @constructor */ function a() {} var c = a; \" +\n+          \"(function() {a.b = 0;})(); a.b;\");\n+  }\n+\n+  public void testAddPropertyToUncollapsibleCtorInLocalScopeDepth1() {\n+    test(\"/** @constructor */ var a = function() {}; var c = a; \" +\n+         \"(function() {a.b = 0;})(); a.b;\",\n+         \"var a = function() {}; var a$b; \" +\n+         \"var c = a; (function() {a$b = 0;})(); a$b;\");\n   }\n \n   public void testAddPropertyToUncollapsibleObjectInLocalScopeDepth2() {\n \n   public void testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2() {\n     test(\"var a = {}; a.b = function (){}; var d = a.b;\" +\n+         \"(function() {a.b.c = 0;})(); a.b.c;\",\n+         \"var a$b = function (){}; var d = a$b;\" +\n+         \"(function() {a$b.c = 0;})(); a$b.c;\");\n+  }\n+\n+  public void testAddPropertyToUncollapsibleCtorInLocalScopeDepth2() {\n+    test(\"var a = {}; /** @constructor */ a.b = function (){}; var d = a.b;\" +\n          \"(function() {a.b.c = 0;})(); a.b.c;\",\n          \"var a$b = function (){}; var a$b$c; var d = a$b;\" +\n          \"(function() {a$b$c = 0;})(); a$b$c;\");\n   }\n \n   public void testAddPropertyToChildOfUncollapsibleFunctionInLocalScope() {\n-    test(\"function a() {} a.b = {x: 0}; var c = a;\" +\n+    testSame(\n+        \"function a() {} a.b = {x: 0}; var c = a;\" +\n+        \"(function() {a.b.y = 0;})(); a.b.y;\");\n+  }\n+\n+  public void testAddPropertyToChildOfUncollapsibleCtorInLocalScope() {\n+    test(\"/** @constructor */ var a = function() {}; a.b = {x: 0}; var c = a;\" +\n          \"(function() {a.b.y = 0;})(); a.b.y;\",\n-         \"function a() {} var a$b$x = 0; var a$b$y; var c = a;\" +\n+         \"var a = function() {}; var a$b$x = 0; var a$b$y; var c = a;\" +\n          \"(function() {a$b$y = 0;})(); a$b$y;\");\n   }\n ", "timestamp": 1291167406, "metainfo": ""}