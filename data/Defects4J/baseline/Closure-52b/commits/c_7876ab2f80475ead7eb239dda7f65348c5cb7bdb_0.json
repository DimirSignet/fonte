{"sha": "7876ab2f80475ead7eb239dda7f65348c5cb7bdb", "log": "Copy list to avoid ConcurrentModificationExceptions resulting from changing membership of the list during for-each loop (since JSTypeRegistry does not copy the list it returns).  R=acleung DELTA=3  (1 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2964   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FieldCleanupPass.java\n+++ b/src/com/google/javascript/jscomp/FieldCleanupPass.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.collect.ImmutableList;\n import com.google.javascript.jscomp.NodeTraversal.AbstractShallowCallback;\n import com.google.javascript.jscomp.NodeTraversal.Callback;\n import com.google.javascript.rhino.Node;\n       // We are a root GetProp\n       if (NodeUtil.isGetProp(n) && !NodeUtil.isGetProp(p)) {\n         String propName = getFieldName(n);\n-        Iterable<ObjectType> types =\n-            typeRegistry.getEachReferenceTypeWithProperty(propName);\n+        Iterable<ObjectType> types = ImmutableList.copyOf(\n+            typeRegistry.getEachReferenceTypeWithProperty(propName));\n         for (ObjectType type : types) {\n           Node pNode = type.getPropertyNode(propName);\n           if (srcName.equals(pNode.getSourceFileName())) {", "timestamp": 1312907127, "metainfo": ""}