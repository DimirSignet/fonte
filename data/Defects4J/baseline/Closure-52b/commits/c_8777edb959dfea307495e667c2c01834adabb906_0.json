{"sha": "8777edb959dfea307495e667c2c01834adabb906", "log": "making inferJsDocInfo hot-swappable plus minor cleanup of tests  R=acleung,davidplass DELTA=43  (31 added, 4 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2194   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n         }\n         @Override\n         public void hotSwapScript(Node scriptRoot) {\n-          // TODO(bashir): Extra warnings about undefined types are reported\n-          // when doing inferTypes from scriptRoot. One solution is to do\n-          // inferTypes from the AST root instead of scriptRoot but that\n-          // approach is very slow!\n           makeTypeInference(compiler).inferTypes(scriptRoot);\n         }\n       };\n     }\n   };\n \n-  final PassFactory inferJsDocInfo =\n-    new PassFactory(\"inferJsDocInfo\", false) {\n+  final HotSwapPassFactory inferJsDocInfo =\n+    new HotSwapPassFactory(\"inferJsDocInfo\", false) {\n   @Override\n-  protected CompilerPass createInternal(final AbstractCompiler compiler) {\n-    return new CompilerPass() {\n+  protected HotSwapCompilerPass createInternal(final AbstractCompiler compiler) {\n+    return new HotSwapCompilerPass() {\n       @Override\n       public void process(Node externs, Node root) {\n         Preconditions.checkNotNull(topScope);\n         Preconditions.checkNotNull(getTypedScopeCreator());\n \n         makeInferJsDocInfo(compiler).process(externs, root);\n+      }\n+      @Override\n+      public void hotSwapScript(Node scriptRoot) {\n+        makeInferJsDocInfo(compiler).hotSwapScript(scriptRoot);\n       }\n     };\n   }\n--- a/src/com/google/javascript/jscomp/InferJSDocInfo.java\n+++ b/src/com/google/javascript/jscomp/InferJSDocInfo.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Preconditions;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n  * @author nicksantos@google.com (Nick Santos)\n  */\n class InferJSDocInfo extends AbstractPostOrderCallback\n-    implements CompilerPass {\n+    implements HotSwapCompilerPass {\n \n   private final AbstractCompiler compiler;\n   private boolean inExterns;\n     this.compiler = compiler;\n   }\n \n+  @Override\n   public void process(Node externs, Node root) {\n     if (externs != null) {\n       inExterns = true;\n       inExterns = false;\n       NodeTraversal.traverse(compiler, root, this);\n     }\n+  }\n+\n+  @Override\n+  public void hotSwapScript(Node root) {\n+    Preconditions.checkNotNull(root);\n+    Preconditions.checkState(root.getType() == Token.SCRIPT);\n+    inExterns = false;\n+    NodeTraversal.traverse(compiler, root, this);\n   }\n \n   public void visit(NodeTraversal t, Node n, Node parent) {", "timestamp": 1307372746, "metainfo": ""}