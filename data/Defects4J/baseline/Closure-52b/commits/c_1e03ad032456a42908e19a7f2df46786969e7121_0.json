{"sha": "1e03ad032456a42908e19a7f2df46786969e7121", "log": "Automated g4 rollback.  *** Reason for rollback ***  causing problems. not sure why yet.  *** Original change description ***  Allow the \"global this\" warning to be suppressed on a per-file basis  DELTA=82  (22 added, 50 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=948   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckGlobalThis.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalThis.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.NodeTraversal.Callback;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n       \"dangerous use of the global 'this' object\");\n \n   private final AbstractCompiler compiler;\n+  private final CheckLevel level;\n \n   /**\n    * If {@code assignLhsChild != null}, then the node being traversed is\n    */\n   private Node assignLhsChild = null;\n \n-  CheckGlobalThis(AbstractCompiler compiler) {\n+  CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) {\n     this.compiler = compiler;\n+    this.level = level;\n   }\n \n   /**\n \n   public void visit(NodeTraversal t, Node n, Node parent) {\n     if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {\n-      compiler.report(t.makeError(n, GLOBAL_THIS));\n+      compiler.report(t.makeError(n, level, GLOBAL_THIS));\n     }\n     if (n == assignLhsChild) {\n       assignLhsChild = null;\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n       }\n     }\n \n-    // DiagnosticGroups override the plain checkTypes option.\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes = false;\n-    } else if (!options.checkTypes) {\n-      // If DiagnosticGroups did not override the plain checkTypes\n-      // option, and checkTypes is enabled, then turn off the\n-      // parser type warnings.\n-      options.setWarningLevel(\n-          DiagnosticGroup.forType(\n-              RhinoErrorReporter.TYPE_PARSE_ERROR),\n-          CheckLevel.OFF);\n-    }\n-\n-    if (options.checkGlobalThisLevel.isOn()) {\n-      options.setWarningLevel(\n-          DiagnosticGroups.GLOBAL_THIS,\n-          options.checkGlobalThisLevel);\n-    }\n-\n     // Initialize the warnings guard.\n     List<WarningsGuard> guards = Lists.newArrayList();\n     guards.add(\n           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n \n+    // DiagnosticGroups override the plain checkTypes option.\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+      options.checkTypes = true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+      options.checkTypes = false;\n+    } else if (!options.checkTypes) {\n+      // If DiagnosticGroups did not override the plain checkTypes\n+      // option, and checkTypes is enabled, then turn off the\n+      // parser type warnings.\n+      guards.add(\n+          new DiagnosticGroupWarningsGuard(\n+              DiagnosticGroup.forType(\n+                  RhinoErrorReporter.TYPE_PARSE_ERROR),\n+              CheckLevel.OFF));\n+    }\n     this.warningsGuard = new ComposeWarningsGuard(guards);\n   }\n \n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n     }\n \n     if (options.checkSuspiciousCode ||\n-        options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n+        options.checkGlobalThisLevel.isOn()) {\n       checks.add(suspiciousCode);\n     }\n \n         sharedCallbacks.add(new CheckSideEffects(CheckLevel.WARNING));\n       }\n \n-      if (options.enables(DiagnosticGroups.GLOBAL_THIS)) {\n-        sharedCallbacks.add(new CheckGlobalThis(compiler));\n+      CheckLevel checkGlobalThisLevel = options.checkGlobalThisLevel;\n+      if (checkGlobalThisLevel.isOn()) {\n+        sharedCallbacks.add(\n+            new CheckGlobalThis(compiler, checkGlobalThisLevel));\n       }\n       return combineChecks(compiler, sharedCallbacks);\n     }\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n   // A bit of a hack to display the available groups on the command-line.\n   // New groups should be added to this list if they are public and should\n   // be listed on the command-line as an available option.\n-  //\n-  // If a group is suppressable on a per-file basis, it should be added\n-  // to parser/ParserConfig.properties\n   static final String DIAGNOSTIC_GROUP_NAMES =\n       \"accessControls, ambiguousFunctionDecl, checkRegExp,\" +\n       \"checkTypes, checkVars, constantProperty, deprecated, \" +\n-      \"externsValidation, fileoverviewTags, globalThis, \" +\n-      \"internetExplorerChecks, nvalidCasts, missingProperties, \" +\n-      \"nonStandardJsDocs, strictModuleDepCheck, typeInvalidation, \" +\n+      \"externsValidation, fileoverviewTags, internetExplorerChecks, \" +\n+      \"invalidCasts, missingProperties, nonStandardJsDocs, \" +\n+      \"strictModuleDepCheck, typeInvalidation, \" +\n       \"undefinedVars, unknownDefines, uselessCode, \" +\n       \"visibility\";\n-\n-  public static DiagnosticGroup GLOBAL_THIS = DiagnosticGroups\n-      .registerGroup(\"globalThis\",\n-          new DiagnosticGroup(\n-              CheckGlobalThis.GLOBAL_THIS));\n \n   public static DiagnosticGroup DEPRECATED = DiagnosticGroups\n       .registerGroup(\"deprecated\",\n--- a/test/com/google/javascript/jscomp/CheckGlobalThisTest.java\n+++ b/test/com/google/javascript/jscomp/CheckGlobalThisTest.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.javascript.jscomp.CheckLevel;\n+\n /**\n  * Tests {@link CheckGlobalThis}.\n  */\n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n     return new CombinedCompilerPass(\n-        compiler, new CheckGlobalThis(compiler));\n+        compiler, new CheckGlobalThis(compiler, CheckLevel.ERROR));\n   }\n \n   private void testFailure(String js) {\n-    testSame(js, CheckGlobalThis.GLOBAL_THIS);\n+    test(js, null, CheckGlobalThis.GLOBAL_THIS);\n   }\n \n   public void testGlobalThis1() throws Exception {\n         \"dojo.declare(F, /** @lends {F.prototype} */ (\" +\n         \"    {foo: function() { return this.foo; }}));\");\n   }\n-\n-  public void testSuppressWarning() {\n-    testFailure(\"var x = function() { this.complex = 5; };\");\n-    testSame(\"/** @suppress {globalThis} */\" +\n-        \"var x = function() { this.complex = 5; };\");\n-  }\n }\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n     super.tearDown();\n   }\n \n-  public void testCheckGlobalThisOffByDefault() {\n-    testSame(\"function f() { this.a = 3; }\");\n-  }\n-\n-  public void testCheckGlobalThisOnWithAdvancedMode() {\n-    args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n-    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n-  }\n-\n-  public void testCheckGlobalThisOnWithErrorFlag() {\n-    args.add(\"--jscomp_error=globalThis\");\n-    test(\"function f() { this.a = 3; }\", CheckGlobalThis.GLOBAL_THIS);\n-  }\n-\n   public void testTypeCheckingOffByDefault() {\n     test(\"function f(x) { return x; } f();\",\n          \"function f(a) { return a; } f();\");", "timestamp": 1300481564, "metainfo": ""}