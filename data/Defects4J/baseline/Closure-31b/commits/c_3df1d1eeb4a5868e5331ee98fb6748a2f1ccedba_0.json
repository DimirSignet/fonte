{"sha": "3df1d1eeb4a5868e5331ee98fb6748a2f1ccedba", "log": "Cache expensive hashcode calculations. (John)          Try again to simplify variable names in inlined function to simplify diffs. (John)  Add an alias for the --define flag to ensure the api is backwards compatible. (Nick)  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n     private List<String> jscomp_off = Lists.newArrayList();\n \n     @Option(name = \"--define\",\n-        aliases = {\"--D\"},\n+        aliases = {\"--D\", \"-D\"},\n         usage = \"Override the value of a variable annotated @define. \" +\n         \"The format is <name>[=<val>], where <name> is the name of a @define \" +\n         \"variable and <val> is a boolean, number, or a single-quoted string \" +\n--- a/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\n+++ b/src/com/google/javascript/jscomp/FunctionToBlockMutator.java\n         compiler, fnNode, new MakeDeclaredNamesUnique(\n             new InlineRenamer(\n                 compiler.getUniqueNameIdSupplier(),\n-                \"JSCompiler_inline_\",\n+                \"inline_\",\n                 isCallInLoop)));\n   }\n \n--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n     public void visit(NodeTraversal t, Node node, Node parent) {\n       if (node.getType() == Token.NAME) {\n         String oldName = node.getString();\n-        if (oldName.indexOf(\"$$\") != -1) {\n+        if (oldName.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1) {\n           Scope scope = t.getScope();\n           Var var = t.getScope().getVar(oldName);\n           if (var == null || var.isGlobal()) {\n           if (nameMap.containsKey(var)) {\n             node.setString(nameMap.get(var));\n           } else {\n-            String newName = oldName.substring(0, oldName.lastIndexOf(\"$$\"));\n-\n+            String newName = oldName.substring(\n+                0, oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));\n+            String suffix = oldName.substring(\n+                oldName.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR)\n+                    + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),\n+                oldName.length());\n+            \n+            // The convention we are using here is that names of the form:\n+            //    a$$1  ($$ followed by a digit are allowed to mask a global)\n+            //    a$$inline_1 ($$ followed by anything that isn't a digit isn't \n+            //       allowed to mask a global.\n+            // This preserves existing behavior while allowing simpler diffs\n+            // when inlining is enabled.\n+            // TODO(johnlenz): Remove this distiction when scoping is properly\n+            // checked.\n+            boolean recurseScopes = false;\n+            if (!suffix.matches(\"\\\\d+\")) {\n+              // Non-contextual renamed value.\n+              recurseScopes = true;\n+            }\n+            \n             // Before we change the name of this variable, double-check to\n             // make sure we're not declaring a duplicate name in the\n             // same scope as the var declaration.\n-            if (var.scope.isDeclared(newName, false) ||\n+            // TODO(johnlenz): This test isn't sufficient; specifically,\n+            // a reference to a global may have been introduced. Shortening \n+            // the name without checking for such a reference may mask the\n+            // global causing the wrong value to be referenced.\n+            if (var.scope.isDeclared(newName, recurseScopes) ||\n                 !TokenStream.isJSIdentifier(newName)) {\n               newName = oldName;\n             } else {\n     private final Multiset<String> nameUsage;\n     private final Map<String, String> declarations = Maps.newHashMap();\n     private final boolean global;\n+\n+    final static String UNIQUE_ID_SEPARATOR = \"$$\";\n \n     ContextualRenamer() {\n       this.global = true;\n      * Given a name and the associated id, create a new unique name.\n      */\n     private String getUniqueName(String name, int id) {\n-      return name + \"$$\" + id;\n+      return name + UNIQUE_ID_SEPARATOR + id;\n     }\n \n     private void reserveName(String name) {\n   static class InlineRenamer implements Renamer {\n     private final Map<String, String> declarations = Maps.newHashMap();\n     private final Supplier<String> uniqueIdSupplier;\n-    private final String namePrefix;\n+    private final String idPrefix;\n     private final boolean removeConstness;\n \n     InlineRenamer(\n         Supplier<String> uniqueIdSupplier,\n-        String namePrefix,\n+        String idPrefix,\n         boolean removeConstness) {\n       this.uniqueIdSupplier = uniqueIdSupplier;\n-      this.namePrefix = namePrefix;\n+      // To ensure that the id does not conflict with the id from the \n+      // ContextualRenamer some prefix is needed.\n+      Preconditions.checkArgument(!idPrefix.isEmpty());\n+      this.idPrefix = idPrefix;\n       this.removeConstness = removeConstness;\n     }\n \n       if (name.isEmpty()) {\n         return name;\n       }\n-      return namePrefix + name + \"_\" + uniqueIdSupplier.get();\n+\n+      if (name.indexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR) != -1) {\n+          name = name.substring(\n+              0, name.lastIndexOf(ContextualRenamer.UNIQUE_ID_SEPARATOR));\n+      }\n+\n+      // By using the same separator the id will be stripped if it isn't \n+      // needed when variable renaming is turned off.\n+      return name + ContextualRenamer.UNIQUE_ID_SEPARATOR\n+          + idPrefix + uniqueIdSupplier.get();\n     }\n \n     @Override\n \n     @Override\n     public Renamer forChildScope() {\n-      return new InlineRenamer(uniqueIdSupplier, namePrefix, removeConstness);\n+      return new InlineRenamer(uniqueIdSupplier, idPrefix, removeConstness);\n     }\n \n     @Override\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n   public void testDefineFlag() {\n     args.add(\"--define=FOO\");\n     args.add(\"--define=\\\"BAR=5\\\"\");\n+    args.add(\"--D\"); args.add(\"CCC\");\n+    args.add(\"-D\"); args.add(\"DDD\");\n     test(\"/** @define {boolean} */ var FOO = false;\" +\n-         \"/** @define {number} */ var BAR = 3;\",\n-         \"var FOO = true, BAR = 5;\");\n+         \"/** @define {number} */ var BAR = 3;\" +\n+         \"/** @define {boolean} */ var CCC = false;\" +\n+         \"/** @define {boolean} */ var DDD = false;\",\n+         \"var FOO = true, BAR = 5, CCC = true, DDD = true;\");\n   }\n \n   public void testScriptStrictModeNoWarning() {\n--- a/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n         \"function foo(a){return a;}; \" +\n         \"function x() { foo(x++); }\",\n         \"function foo(a){return a;}; \" +\n-        \"function x() {{var JSCompiler_inline_a_1=x++;\" +\n-            \"JSCompiler_inline_a_1}}\",\n+        \"function x() {{var a$$inline_1=x++;\" +\n+            \"a$$inline_1}}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){return a+a;}; foo(x++);\",\n         \"function foo(a){return a+a;}; \" +\n-            \"{var JSCompiler_inline_a_1=x++;\" +\n-            \" JSCompiler_inline_a_1+\" +\n-            \"JSCompiler_inline_a_1;}\",\n+            \"{var a$$inline_1=x++;\" +\n+            \" a$$inline_1+\" +\n+            \"a$$inline_1;}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){return a+a;}; foo(new Date());\",\n         \"function foo(a){return a+a;}; \" +\n-            \"{var JSCompiler_inline_a_1=new Date();\" +\n-            \" JSCompiler_inline_a_1+\" +\n-            \"JSCompiler_inline_a_1;}\",\n+            \"{var a$$inline_1=new Date();\" +\n+            \" a$$inline_1+\" +\n+            \"a$$inline_1;}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){return a+a;}; foo(function(){});\",\n         \"function foo(a){return a+a;}; \" +\n-            \"{var JSCompiler_inline_a_1=function(){};\" +\n-            \" JSCompiler_inline_a_1+\" +\n-            \"JSCompiler_inline_a_1;}\",\n+            \"{var a$$inline_1=function(){};\" +\n+            \" a$$inline_1+\" +\n+            \"a$$inline_1;}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){return true;}; foo(goo());\",\n         \"function foo(a){return true;};\" +\n-            \"{var JSCompiler_inline_a_1=goo();true}\",\n+            \"{var a$$inline_1=goo();true}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n         \"function foo(a){var b;return a;}; \" +\n             \"function x() { foo(goo()); }\",\n             \"function foo(a){var b;return a;}; \" +\n-            \"function x() {{var JSCompiler_inline_a_2=goo();\" +\n-                \"var JSCompiler_inline_b_3;JSCompiler_inline_a_2}}\",\n+            \"function x() {{var a$$inline_2=goo();\" +\n+                \"var b$$inline_3;a$$inline_2}}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n         \"var x = 1; var y = 2;\" +\n         \"function foo(a,b){x = b; y = a;}; \" +\n         \"function bar() {\" +\n-           \"{var JSCompiler_inline_a_2=x;\" +\n+           \"{var a$$inline_2=x;\" +\n             \"x = y;\" +\n-            \"y = JSCompiler_inline_a_2;}\" +\n+            \"y = a$$inline_2;}\" +\n         \"}\",\n         \"foo\", INLINE_BLOCK);\n   }\n         \"var x = 1; var y = 2;\" +\n         \"function foo(a,b){y = a; x = b;}; \" +\n         \"function bar() {\" +\n-           \"{var JSCompiler_inline_b_3=y;\" +\n+           \"{var b$$inline_3=y;\" +\n             \"y = x;\" +\n-            \"x = JSCompiler_inline_b_3;}\" +\n+            \"x = b$$inline_3;}\" +\n         \"}\",\n         \"foo\", INLINE_BLOCK);\n   }\n         \"for(;1;){ foo(1); }\",\n         \"function foo(a){var b;return a;}; \" +\n         \"for(;1;){ {\" +\n-            \"var JSCompiler_inline_b_3=void 0;1}}\",\n+            \"var b$$inline_3=void 0;1}}\",\n         \"foo\", INLINE_BLOCK);\n \n     helperInlineReferenceToFunction(\n         \"do{ foo(1); } while(1)\",\n         \"function foo(a){var b;return a;}; \" +\n         \"do{ {\" +\n-            \"var JSCompiler_inline_b_3=void 0;1}}while(1)\",\n+            \"var b$$inline_3=void 0;1}}while(1)\",\n         \"foo\", INLINE_BLOCK);\n \n     helperInlineReferenceToFunction(\n         \"for(;1;){ foo(1); }\",\n         \"function foo(a){for(var b in c)return a;}; \" +\n         \"for(;1;){ {JSCompiler_inline_label_foo_4:{\" +\n-            \"for(var JSCompiler_inline_b_3 in c){\" +\n+            \"for(var b$$inline_3 in c){\" +\n               \"1;break JSCompiler_inline_label_foo_4\" +\n             \"}}}}\",\n         \"foo\", INLINE_BLOCK);\n   public void testBug1897706() {\n     helperInlineReferenceToFunction(\n         \"function foo(a){}; foo(x())\",\n-        \"function foo(a){}; {var JSCompiler_inline_a_1=x()}\",\n+        \"function foo(a){}; {var a$$inline_1=x()}\",\n         \"foo\", INLINE_BLOCK);\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){bar()}; foo(x())\",\n-        \"function foo(a){bar()}; {var JSCompiler_inline_a_1=x();bar()}\",\n+        \"function foo(a){bar()}; {var a$$inline_1=x();bar()}\",\n         \"foo\", INLINE_BLOCK);\n \n     helperInlineReferenceToFunction(\n         \"function foo(a,b){bar()}; foo(x(),y())\",\n         \"function foo(a,b){bar()};\" +\n-        \"{var JSCompiler_inline_a_2=x();var JSCompiler_inline_b_3=y();bar()}\",\n+        \"{var a$$inline_2=x();var b$$inline_3=y();bar()}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n--- a/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java\n     helperMutate(\n         \"function foo(a){return a;}; \" +\n         \"function x() { foo(x++); }\",\n-        \"{var JSCompiler_inline_a_1 = x++; JSCompiler_inline_a_1}\",\n+        \"{var a$$inline_1 = x++; a$$inline_1}\",\n         \"foo\", null);\n   }\n \n     // Parameter has side-effects.\n     helperMutate(\n         \"function foo(a){return a+a;}; foo(x++);\",\n-        \"{var JSCompiler_inline_a_1 = x++;\" +\n-            \"JSCompiler_inline_a_1 + JSCompiler_inline_a_1;}\",\n+        \"{var a$$inline_1 = x++;\" +\n+            \"a$$inline_1 + a$$inline_1;}\",\n         \"foo\", null);\n   }\n \n   public void testMutateInitializeUninitializedVars1() {\n     helperMutate(\n         \"function foo(a){var b;return a;}; foo(1);\",\n-        \"{var JSCompiler_inline_b_3=void 0;1}\",\n+        \"{var b$$inline_3=void 0;1}\",\n         \"foo\", null, false, true);\n   }\n \n         \"function foo(a){for(var b in c)return a;}; foo(1);\",\n         \"{JSCompiler_inline_label_foo_4:\" +\n           \"{\" +\n-            \"for(var JSCompiler_inline_b_3 in c){\" +\n+            \"for(var b$$inline_3 in c){\" +\n                 \"1;break JSCompiler_inline_label_foo_4\" +\n              \"}\" +\n           \"}\" +\n     boolean callInLoop = false;\n     helperMutate(\n         \"function foo(a){var B = bar(); a;}; foo(1);\",\n-        \"{var JSCompiler_inline_B_3=bar(); 1;}\",\n+        \"{var B$$inline_3=bar(); 1;}\",\n         \"foo\", null, false, callInLoop);\n     // ... in a loop, the constant-ness is removed.\n     // TODO(johnlenz): update this test to look for the const annotation.\n     callInLoop = true;\n     helperMutate(\n         \"function foo(a){var B = bar(); a;}; foo(1);\",\n-        \"{var JSCompiler_inline_B_3 = bar(); 1;}\",\n+        \"{var B$$inline_3 = bar(); 1;}\",\n         \"foo\", null, false, callInLoop);\n   }  \n \n--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n   protected CompilerPass getProcessor(Compiler compiler) {\n     compiler.resetUniqueNameId();\n     return new InlineFunctions(\n-        compiler, \n+        compiler,\n         compiler.getUniqueNameIdSupplier(),\n         allowGlobalFunctionInlining,\n         allowLocalFunctionInlining,\n     // don't inline if the input parameter is modified.\n     test(\"function INC(x){return x++}\" +\n          \"var y=INC(i)\",\n-         \"var y;{var JSCompiler_inline_x_1=i;\" +\n-         \"y=JSCompiler_inline_x_1++}\");\n+         \"var y;{var x$$inline_1=i;\" +\n+         \"y=x$$inline_1++}\");\n   }\n \n   public void testInlineFunctions10() {\n     test(\"function INC(x){return x++}\" +\n          \"var y=INC(i);y=INC(i)\",\n          \"var y;\" +\n-         \"{var JSCompiler_inline_x_1=i;\" +\n-         \"y=JSCompiler_inline_x_1++}\" +\n-         \"{var JSCompiler_inline_x_4=i;\" +\n-         \"y=JSCompiler_inline_x_4++}\");\n+         \"{var x$$inline_1=i;\" +\n+         \"y=x$$inline_1++}\" +\n+         \"{var x$$inline_4=i;\" +\n+         \"y=x$$inline_4++}\");\n   }\n \n   public void testInlineFunctions11() {\n     // inline as block if the input parameter has side-effects.\n     test(\"function f(x){return x}\" +\n          \"var y=f(i++)\",\n-         \"var y;{var JSCompiler_inline_x_1=i++;y=JSCompiler_inline_x_1}\");\n+         \"var y;{var x$$inline_1=i++;y=x$$inline_1}\");\n   }\n \n   public void testInlineFunctions14() {\n   public void testNoInlineIfParametersModified1() {\n     // Assignment\n     test(\"function f(x){return x=1}f(undefined)\",\n-         \"{var JSCompiler_inline_x_1=undefined;\" +\n-         \"JSCompiler_inline_x_1=1}\");\n+         \"{var x$$inline_1=undefined;\" +\n+         \"x$$inline_1=1}\");\n   }\n \n   public void testNoInlineIfParametersModified2() {\n     test(\"function f(x){return (x)=1;}f(2)\",\n-         \"{var JSCompiler_inline_x_1=2;\" +\n-         \"JSCompiler_inline_x_1=1}\");\n+         \"{var x$$inline_1=2;\" +\n+         \"x$$inline_1=1}\");\n   }\n \n   public void testNoInlineIfParametersModified3() {\n     // Assignment variant.\n     test(\"function f(x){return x*=2}f(2)\",\n-         \"{var JSCompiler_inline_x_1=2;\" +\n-         \"JSCompiler_inline_x_1*=2}\");\n+         \"{var x$$inline_1=2;\" +\n+         \"x$$inline_1*=2}\");\n   }\n \n   public void testNoInlineIfParametersModified4() {\n     // Assignment in if.\n     test(\"function f(x){return x?(x=2):0}f(2)\",\n-         \"{var JSCompiler_inline_x_1=2;\" +\n-         \"JSCompiler_inline_x_1?(\" +\n-         \"JSCompiler_inline_x_1=2):0}\");\n+         \"{var x$$inline_1=2;\" +\n+         \"x$$inline_1?(\" +\n+         \"x$$inline_1=2):0}\");\n   }\n \n   public void testNoInlineIfParametersModified5() {\n     // Assignment in if, multiple params\n     test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",\n-         \"{var JSCompiler_inline_y_3=undefined;2?(\" +\n-         \"JSCompiler_inline_y_3=2):0}\");\n+         \"{var y$$inline_3=undefined;2?(\" +\n+         \"y$$inline_3=2):0}\");\n   }\n \n   public void testNoInlineIfParametersModified6() {\n     test(\"function f(x,y){return x?(y=2):0}f(2)\",\n-         \"{var JSCompiler_inline_y_3=void 0;2?(\" +\n-         \"JSCompiler_inline_y_3=2):0}\");\n+         \"{var y$$inline_3=void 0;2?(\" +\n+         \"y$$inline_3=2):0}\");\n   }\n \n   public void testNoInlineIfParametersModified7() {\n     // Increment\n     test(\"function f(a){return++a<++a}f(1)\",\n-         \"{var JSCompiler_inline_a_1=1;\" +\n-         \"++JSCompiler_inline_a_1<\" +\n-         \"++JSCompiler_inline_a_1}\");\n+         \"{var a$$inline_1=1;\" +\n+         \"++a$$inline_1<\" +\n+         \"++a$$inline_1}\");\n   }\n \n   public void testNoInlineIfParametersModified8() {\n \n   public void testInlineNeverMutateConstants() {\n     test(\"function f(x){return x=1}f(undefined)\",\n-         \"{var JSCompiler_inline_x_1=undefined;\" +\n-         \"JSCompiler_inline_x_1=1}\");\n+         \"{var x$$inline_1=undefined;\" +\n+         \"x$$inline_1=1}\");\n   }\n \n   public void testInlineNeverOverrideNewValues() {\n     test(\"function f(a){return++a<++a}f(1)\",\n-        \"{var JSCompiler_inline_a_1=1;\" +\n-        \"++JSCompiler_inline_a_1<++JSCompiler_inline_a_1}\");\n+        \"{var a$$inline_1=1;\" +\n+        \"++a$$inline_1<++a$$inline_1}\");\n   }\n \n   public void testInlineMutableArgsReferencedOnce() {\n \n   public void testInlineBlockMutableArgs1() {\n     test(\"function foo(x){x+x}foo([])\",\n-         \"{var JSCompiler_inline_x_1=[];\" +\n-         \"JSCompiler_inline_x_1+JSCompiler_inline_x_1}\");\n+         \"{var x$$inline_1=[];\" +\n+         \"x$$inline_1+x$$inline_1}\");\n   }\n \n   public void testInlineBlockMutableArgs2() {\n     test(\"function foo(x){x+x}foo(new Date)\",\n-         \"{var JSCompiler_inline_x_1=new Date;\" +\n-         \"JSCompiler_inline_x_1+JSCompiler_inline_x_1}\");\n+         \"{var x$$inline_1=new Date;\" +\n+         \"x$$inline_1+x$$inline_1}\");\n   }\n \n   public void testInlineBlockMutableArgs3() {\n     test(\"function foo(x){x+x}foo(true&&new Date)\",\n-         \"{var JSCompiler_inline_x_1=true&&new Date;\" +\n-         \"JSCompiler_inline_x_1+JSCompiler_inline_x_1}\");\n+         \"{var x$$inline_1=true&&new Date;\" +\n+         \"x$$inline_1+x$$inline_1}\");\n   }\n \n   public void testInlineBlockMutableArgs4() {\n     test(\"function foo(x){x+x}foo({})\",\n-         \"{var JSCompiler_inline_x_1={};\" +\n-         \"JSCompiler_inline_x_1+JSCompiler_inline_x_1}\");\n+         \"{var x$$inline_1={};\" +\n+         \"x$$inline_1+x$$inline_1}\");\n   }\n \n   public void testShadowVariables1() {\n          \"bar();\",\n \n          \"var a=0;\" +\n-         \"{var JSCompiler_inline_a$$2_1=3+4}\");\n+         \"{var a$$inline_1=3+4}\");\n   }\n \n   public void testShadowVariables2() {\n         \"function _bar(){a=foo()}\",\n \n         \"var a=0;\" +\n-        \"function _bar(){{var JSCompiler_inline_a$$1_1=2;\" +\n-        \"a=3+JSCompiler_inline_a$$1_1}}\");\n+        \"function _bar(){{var a$$inline_1=2;\" +\n+        \"a=3+a$$inline_1}}\");\n   }\n \n   public void testShadowVariables4() {\n         \"function _bar(a){a=foo(4)}\",\n \n         \"var a=0;function _bar(a$$2){{\" +\n-        \"var JSCompiler_inline_a$$1_1=4;\" +\n-        \"a$$2=3+JSCompiler_inline_a$$1_1}}\");\n+        \"var a$$inline_1=4;\" +\n+        \"a$$2=3+a$$inline_1}}\");\n   }\n \n   public void testShadowVariables7() {\n          \"function foo(){return a}\" +\n          \"(function(){var a=5;(function(){foo()})()})()\",\n          \"var a=3;\" +\n-         \"{var JSCompiler_inline_a$$1_1=5;{a}}\"\n+         \"{var a$$inline_1=5;{a}}\"\n          );\n   }\n \n          \"function foo(){return a}\" +\n          \"(function(){var a=5;(function(){foo()})()})()\",\n          \"var a=3;\" +\n-         \"{var JSCompiler_inline_a$$1_1=5;{a}}\"\n+         \"{var a$$inline_1=5;{a}}\"\n          );\n   }\n \n \n         \"var a=0;\" +\n         \"function _goo(){var a$$2=2;var x;\" +\n-        \"{var JSCompiler_inline_a$$1_1=3;x=a+a}}\");\n+        \"{var a$$inline_1=3;x=a+a}}\");\n   }\n \n   public void testCostBasedInlining1() {\n     test(\"function f(a){return 1 + a + a;}\" +\n          \"var a = f(f(1));\",\n          \"var a;\" +\n-         \"{var JSCompiler_inline_a$$1_1=1+1+1;\" +\n-         \"a=1+JSCompiler_inline_a$$1_1+JSCompiler_inline_a$$1_1}\");\n+         \"{var a$$inline_1=1+1+1;\" +\n+         \"a=1+a$$inline_1+a$$inline_1}\");\n   }\n \n   public void testCostBasedInlining10() {\n     test(\"function f(a){return a + a;}\" +\n          \"var a = f(f(1))\",\n          \"var a;\" +\n-         \"{var JSCompiler_inline_a$$1_1=1+1;\" +\n-         \"a=JSCompiler_inline_a$$1_1+JSCompiler_inline_a$$1_1}\");\n+         \"{var a$$inline_1=1+1;\" +\n+         \"a=a$$inline_1+a$$inline_1}\");\n   }\n \n   public void testCostBasedInlining12() {\n \n     // But do inline into functions\n     test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",\n-         \"function _foo(){{a();b();var JSCompiler_inline_z_1=1+1}}\");\n+         \"function _foo(){{a();b();var z$$inline_1=1+1}}\");\n \n   }\n \n   public void testComplexSample() {\n     String result = \"\" +\n       \"{{\" +\n-      \"var JSCompiler_inline_styleSheet_9=null;\" +\n+      \"var styleSheet$$inline_9=null;\" +\n       \"if(goog$userAgent$IE)\" +\n-        \"JSCompiler_inline_styleSheet_9=0;\" +\n+        \"styleSheet$$inline_9=0;\" +\n       \"else \" +\n-        \"var JSCompiler_inline_head_10=0;\" +\n+        \"var head$$inline_10=0;\" +\n       \"{\" +\n-        \"var JSCompiler_inline_JSCompiler_inline_element_3_11=\" +\n-            \"JSCompiler_inline_styleSheet_9;\" +\n-        \"var JSCompiler_inline_JSCompiler_inline_stylesString$$1_4_12=a;\" +\n+        \"var element$$inline_11=\" +\n+            \"styleSheet$$inline_9;\" +\n+        \"var stylesString$$inline_12=a;\" +\n         \"if(goog$userAgent$IE)\" +\n-          \"JSCompiler_inline_JSCompiler_inline_element_3_11.cssText=\" +\n-              \"JSCompiler_inline_JSCompiler_inline_stylesString$$1_4_12;\" +\n+          \"element$$inline_11.cssText=\" +\n+              \"stylesString$$inline_12;\" +\n         \"else \" +\n         \"{\" +\n-          \"var JSCompiler_inline_JSCompiler_inline_propToSet_5_13=\" +\n+          \"var propToSet$$inline_13=\" +\n               \"\\\"innerText\\\";\" +\n-          \"JSCompiler_inline_JSCompiler_inline_element_3_11[\" +\n-              \"JSCompiler_inline_JSCompiler_inline_propToSet_5_13]=\" +\n-                  \"JSCompiler_inline_JSCompiler_inline_stylesString$$1_4_12\" +\n+          \"element$$inline_11[\" +\n+              \"propToSet$$inline_13]=\" +\n+                  \"stylesString$$inline_12\" +\n         \"}\" +\n       \"}\" +\n-      \"JSCompiler_inline_styleSheet_9\" +\n+      \"styleSheet$$inline_9\" +\n       \"}}\";\n \n     test(\"var foo = function(stylesString, opt_element) { \" +\n         \"JSCompiler_temp_const_0 += JSCompiler_inline_result_1;\" +\n         \"x = JSCompiler_temp_const_0\");\n   }\n-  \n+\n   public void testInlineConstructor1() {\n     test(\"function f() {} function _g() {f.call(this)}\",\n          \"function _g() {void 0}\");\n   public void testAnonymousFunctionOmega() {\n     // ... with unused recursive name.\n     test(\"(function (f){f(f)})(function(f){f(f)})\",\n-         \"{var JSCompiler_inline_f_1=function(f$$1){f$$1(f$$1)};\" +\n-          \"{{JSCompiler_inline_f_1(JSCompiler_inline_f_1)}}}\");\n+         \"{var f$$inline_1=function(f$$1){f$$1(f$$1)};\" +\n+          \"{{f$$inline_1(f$$inline_1)}}}\");\n   }\n \n   public void testLocalFunctionInlining1() {\n         \"\\n\" +\n         \"factorial(5)\\n\");\n   }\n-  \n+\n   public void testRenamePropertyFunction() {\n     testSame(\"function JSCompiler_renameProperty(x) {return x} \" +\n              \"JSCompiler_renameProperty('foo')\");\n--- a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n+++ b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n     testSameWithInversion(\"\", original);\n   }\n \n+  public void testMakeLocalNamesUniqueWithContext0() {\n+    // Set the test type\n+    this.useDefaultRenamer = true;\n+\n+    // Local names are made unique.\n+    invert = true;\n+    test(\n+        \"var a;function foo(){var a$$inline_1; a = 1}\",\n+        \"var a;function foo(){var a$$inline_1; a = 1}\");\n+  }\n+\n   public void testMakeLocalNamesUniqueWithContext() {\n     // Set the test type\n     this.useDefaultRenamer = true;\n     this.useDefaultRenamer = false;\n \n     test(\"var a;\",\n-         \"var unique_a_0\");\n+         \"var a$$unique_0\");\n \n     // Verify undeclared names are untouched.\n     testSame(\"a;\");\n     // Local names are made unique.\n     test(\"var a;\" +\n          \"function foo(a){var b;a}\",\n-         \"var unique_a_0;\" +\n-         \"function unique_foo_1(unique_a_2){var unique_b_3;unique_a_2}\");\n+         \"var a$$unique_0;\" +\n+         \"function foo$$unique_1(a$$unique_2){var b$$unique_3;a$$unique_2}\");\n     test(\"var a;\" +\n          \"function foo(){var b;a}\" +\n          \"function boo(){var b;a}\",\n-         \"var unique_a_0;\" +\n-         \"function unique_foo_1(){var unique_b_3;unique_a_0}\" +\n-         \"function unique_boo_2(){var unique_b_4;unique_a_0}\");\n+         \"var a$$unique_0;\" +\n+         \"function foo$$unique_1(){var b$$unique_3;a$$unique_0}\" +\n+         \"function boo$$unique_2(){var b$$unique_4;a$$unique_0}\");\n \n     // Verify anonymous functions are renamed.\n     test(\"var a = function foo(){foo()};\",\n-         \"var unique_a_0 = function unique_foo_1(){unique_foo_1()};\");\n+         \"var a$$unique_0 = function foo$$unique_1(){foo$$unique_1()};\");\n \n     // Verify catch exceptions names are made unique\n     test(\"try { } catch(e) {e;}\",\n-         \"try { } catch(unique_e_0) {unique_e_0;}\");\n+         \"try { } catch(e$$unique_0) {e$$unique_0;}\");\n     test(\"try { } catch(e) {e;};\" +\n          \"try { } catch(e) {e;}\",\n-         \"try { } catch(unique_e_0) {unique_e_0;};\" +\n-         \"try { } catch(unique_e_1) {unique_e_1;}\");\n+         \"try { } catch(e$$unique_0) {e$$unique_0;};\" +\n+         \"try { } catch(e$$unique_1) {e$$unique_1;}\");\n     test(\"try { } catch(e) {e; \" +\n          \"try { } catch(e) {e;}};\",\n-         \"try { } catch(unique_e_0) {unique_e_0; \" +\n-            \"try { } catch(unique_e_1) {unique_e_1;} }; \");\n+         \"try { } catch(e$$unique_0) {e$$unique_0; \" +\n+            \"try { } catch(e$$unique_1) {e$$unique_1;} }; \");\n   }\n \n   public void testOnlyInversion() {\n   public void testConstRemovingRename1() {\n     removeConst = true;\n     test(\"function() {var CONST = 3; var ACONST$$1 = 2;}\",\n-         \"function() {var unique_CONST_0 = 3; var unique_ACONST$$1_1 = 2;}\");\n+         \"function() {var CONST$$unique_0 = 3; var ACONST$$unique_1 = 2;}\");\n   }\n \n   public void testConstRemovingRename2() {\n     removeConst = true;\n     test(\"var CONST = 3; var b = CONST;\",\n-         \"var unique_CONST_0 = 3; var unique_b_1 = unique_CONST_0;\");\n+         \"var CONST$$unique_0 = 3; var b$$unique_1 = CONST$$unique_0;\");\n   }\n }", "timestamp": 1268693168, "metainfo": ""}