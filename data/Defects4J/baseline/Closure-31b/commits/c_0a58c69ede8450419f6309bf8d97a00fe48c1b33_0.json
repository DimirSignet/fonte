{"sha": "0a58c69ede8450419f6309bf8d97a00fe48c1b33", "log": "Avoid creating an unnecesary temporary object.  R=nicksantos DELTA=5  (1 added, 1 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3412   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n import com.google.common.base.Charsets;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n-import com.google.javascript.jscomp.NodeUtil.MatchNotFunction;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.TokenStream;\n         // If the first child contains a CALL, then claim higher precedence\n         // to force parentheses. Otherwise, when parsed, NEW will bind to the\n         // first viable parentheses (don't traverse into functions).\n-        if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction())) {\n+        if (NodeUtil.containsType(\n+            first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {\n           precedence = NodeUtil.precedence(first.getType()) + 1;\n         }\n         addExpr(first, precedence);\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n   /**\n    * A predicate for matching anything except function nodes.\n    */\n-  static class MatchNotFunction implements Predicate<Node>{\n+  private static class MatchNotFunction implements Predicate<Node>{\n     @Override\n     public boolean apply(Node n) {\n       return !isFunction(n);\n--- a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n+++ b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n         Predicates.<Node>or(\n             new NodeUtil.MatchNodeType(Token.BREAK),\n             new NodeUtil.MatchNodeType(Token.CONTINUE)),\n-        new NodeUtil.MatchNotFunction());\n+        NodeUtil.MATCH_NOT_FUNCTION);\n   }\n \n   /**", "timestamp": 1317835966, "metainfo": ""}