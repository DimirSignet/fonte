{"sha": "1003a7e9d8a975d5e25c7af85aa3419319995c37", "log": "Revise the --mf_map flag  R=nicksantos,laszlocsomor DELTA=49  (2 added, 25 deleted, 22 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2896   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n import com.google.javascript.rhino.TokenStream;\n import com.google.protobuf.CodedOutputStream;\n \n-import java.io.BufferedReader;\n import java.io.BufferedWriter;\n import java.io.Closeable;\n import java.io.File;\n    * Construct and return the input root path map. The key is the exec path of\n    * each input file, and the value is the corresponding root relative path.\n    */\n-  private Map<String, String> constructRootRelativePathsMap()\n-      throws IOException {\n+  private Map<String, String> constructRootRelativePathsMap() {\n     Map<String, String> rootRelativePathsMap = Maps.newLinkedHashMap();\n-    if (!config.manifestMapFile.equals(\"\")) {\n-      File mapFile = new File(config.manifestMapFile);\n-      BufferedReader br = Files.newReader(mapFile, Charsets.UTF_8);\n-      String line;\n-      while ((line = br.readLine()) != null) {\n-        int colonIndex = line.indexOf(':');\n-        Preconditions.checkState(colonIndex > 0);\n-        String execPath = line.substring(0, colonIndex);\n-        String rootRelativePath = line.substring(colonIndex + 1);\n-        Preconditions.checkState(rootRelativePath.indexOf(':') == -1);\n-        rootRelativePathsMap.put(execPath, rootRelativePath);\n-      }\n+    for (String mapString : config.manifestMaps) {\n+      int colonIndex = mapString.indexOf(':');\n+      Preconditions.checkState(colonIndex > 0);\n+      String execPath = mapString.substring(0, colonIndex);\n+      String rootRelativePath = mapString.substring(colonIndex + 1);\n+      Preconditions.checkState(rootRelativePath.indexOf(':') == -1);\n+      rootRelativePathsMap.put(execPath, rootRelativePath);\n     }\n     return rootRelativePathsMap;\n   }\n       return this;\n     }\n \n+    private boolean skipNormalOutputs = false;\n+\n     /**\n      * Sets whether the normal outputs of compilation should be skipped.\n      */\n-    private boolean skipNormalOutputs = false;\n-\n     CommandLineConfig setSkipNormalOutputs(boolean skipNormalOutputs) {\n       this.skipNormalOutputs = skipNormalOutputs;\n       return this;\n     }\n \n-    /**\n-     * Sets the map file that contains the root paths for input files,\n-     * used to generate human-readable file names in the bundle files.\n-     */\n-    private String manifestMapFile = \"\";\n-\n-    CommandLineConfig setManifestMapFile(String manifestMapFile) {\n-      this.manifestMapFile = manifestMapFile;\n+    private List<String> manifestMaps = ImmutableList.of();\n+\n+    /**\n+     * Sets the execPath:rootRelativePath mappings\n+     */\n+    CommandLineConfig setManifestMaps(List<String> manifestMaps) {\n+      this.manifestMaps = manifestMaps;\n       return this;\n     }\n ", "timestamp": 1312467122, "metainfo": ""}