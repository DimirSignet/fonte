{"sha": "4d05d82cb3f7f4f0a06852927798c6039fb4f50d", "log": "Properly inline functions with implicit returns when the call site is within a loop and embedded it is within an \"complex\" expression.  R=acleung DELTA=43  (39 added, 2 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3046   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n     CallSiteType callSiteType = classifyCallSite(callNode);\n     Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);\n \n+    boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);\n+\n     // Store the name for the result. This will be used to\n     // replace \"return expr\" statements with \"resultName = expr\"\n     // to replace\n \n       case EXPRESSION:\n         resultName = getUniqueResultName();\n-        needsDefaultReturnResult = false; // The intermediary result already\n-                                          // has the default value.\n+        // The intermediary result has a default value of \"undefined\", so\n+        // we only need to set the implicit return value if we are in a loop\n+        // and the variable maybe reused.\n+        needsDefaultReturnResult = isCallInLoop;\n         break;\n \n       case DECOMPOSABLE_EXPRESSION:\n       default:\n         throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n-\n-    boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);\n \n     FunctionToBlockMutator mutator = new FunctionToBlockMutator(\n         compiler, this.safeNameIdSupplier);\n--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n   public void testInlineWithClosureContainingThis() {\n     test(\"(function (){return f(function(){return this})})();\",\n          \"f(function(){return this})\");\n+  }\n+\n+  public void testIssue5159924a() {\n+    test(\"function f() { if (x()) return y() }\\n\" +\n+         \"while(1){ var m = f() || z() }\",\n+         \"for(;1;) {\" +\n+         \"  {\" +\n+         \"    var JSCompiler_inline_result$$0;\" +\n+         \"    JSCompiler_inline_label_f_1: {\" +\n+         \"      if(x()) {\" +\n+         \"        JSCompiler_inline_result$$0 = y();\" +\n+         \"        break JSCompiler_inline_label_f_1\" +\n+         \"      }\" +\n+         \"      JSCompiler_inline_result$$0 = void 0;\" +\n+         \"    }\" +\n+         \"  }\" +\n+         \"  var m=JSCompiler_inline_result$$0 || z()\" +\n+         \"}\");\n+  }\n+\n+  public void testIssue5159924b() {\n+    test(\"function f() { if (x()) return y() }\\n\" +\n+         \"while(1){ var m = f() }\",\n+         \"for(;1;){\" +\n+         \"  var m;\" +\n+         \"  {\" +\n+         \"    JSCompiler_inline_label_f_0: { \" +\n+         \"      if(x()) {\" +\n+         \"        m = y();\" +\n+         \"        break JSCompiler_inline_label_f_0\" +\n+         \"      }\" +\n+         \"      m = void 0\" +\n+         \"    }\" +\n+         \"  }\" +\n+         \"}\");\n   }\n \n   public void testInlineObject() {", "timestamp": 1313603206, "metainfo": ""}