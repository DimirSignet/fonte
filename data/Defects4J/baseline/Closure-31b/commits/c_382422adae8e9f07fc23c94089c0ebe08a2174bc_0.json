{"sha": "382422adae8e9f07fc23c94089c0ebe08a2174bc", "log": "fix a bug in constraint-matching fixes issue 700  R=johnlenz DELTA=50  (47 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4462   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n \n   @Override\n   public void matchConstraint(ObjectType constraintObj) {\n+    // We only want to match contraints on anonymous types.\n+    if (hasReferenceName()) {\n+      return;\n+    }\n+\n     // Handle the case where the constraint object is a record type.\n     //\n     // param constraintObj {{prop: (number|undefined)}}\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n          \"  }\" +\n          \"  return results;\" +\n          \"}\");\n+  }\n+\n+  public void testIssue700() throws Exception {\n+    testTypes(\n+        \"/**\\n\" +\n+        \" * @param {{text: string}} opt_data\\n\" +\n+        \" * @return {string}\\n\" +\n+        \" */\\n\" +\n+        \"function temp1(opt_data) {\\n\" +\n+        \"  return opt_data.text;\\n\" +\n+        \"}\\n\" +\n+        \"\\n\" +\n+        \"/**\\n\" +\n+        \" * @param {{activity: (boolean|number|string|null|Object)}} opt_data\\n\" +\n+        \" * @return {string}\\n\" +\n+        \" */\\n\" +\n+        \"function temp2(opt_data) {\\n\" +\n+        \"  /** @notypecheck */\\n\" +\n+        \"  function __inner() {\\n\" +\n+        \"    return temp1(opt_data.activity);\\n\" +\n+        \"  }\\n\" +\n+        \"  return __inner();\\n\" +\n+        \"}\\n\" +\n+        \"\\n\" +\n+        \"/**\\n\" +\n+        \" * @param {{n: number, text: string, b: boolean}} opt_data\\n\" +\n+        \" * @return {string}\\n\" +\n+        \" */\\n\" +\n+        \"function temp3(opt_data) {\\n\" +\n+        \"  return 'n: ' + opt_data.n + ', t: ' + opt_data.text + '.';\\n\" +\n+        \"}\\n\" +\n+        \"\\n\" +\n+        \"function callee() {\\n\" +\n+        \"  var output = temp3({\\n\" +\n+        \"    n: 0,\\n\" +\n+        \"    text: 'a string',\\n\" +\n+        \"    b: true\\n\" +\n+        \"  })\\n\" +\n+        \"  alert(output);\\n\" +\n+        \"}\\n\" +\n+        \"\\n\" +\n+        \"callee();\");\n   }\n \n   /**\n \n   public void testBug1942972() throws Exception {\n     testTypes(\n-        \"var google = {\\n\"+\n+        \"var google = {\\n\" +\n         \"  gears: {\\n\" +\n         \"    factory: {},\\n\" +\n         \"    workerPool: {}\\n\" +\n         \"    f(this.bar.baz);\" +\n         \"  }\" +\n         \"};\",\n-        \"actual parameter 1 of f does not match formal parameter\\n\"+\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n         \"found   : (null|{baz: number})\\n\" +\n         \"required: number\");\n   }\n         \"    g(this.bar);\" +\n         \"  }\" +\n         \"};\",\n-        \"actual parameter 1 of f does not match formal parameter\\n\"+\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n         \"found   : (null|{baz: number})\\n\" +\n         \"required: number\");\n   }", "timestamp": 1333401420, "metainfo": ""}