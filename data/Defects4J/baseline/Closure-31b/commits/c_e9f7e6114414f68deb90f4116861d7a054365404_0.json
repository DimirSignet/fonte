{"sha": "e9f7e6114414f68deb90f4116861d7a054365404", "log": "Add a syntax for constructors {function(new:Type)} fixes issue 281  R=jschorr DELTA=199  (73 added, 4 deleted, 122 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=133   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n                 superClassCtor.getInstanceType().equals(\n                     getNativeType(OBJECT_TYPE)));\n \n-            // Make sure the variable is initialized to something.\n-            if (newVar.getInitialValue() == null && !isExtern) {\n+            // Make sure the variable is initialized to something if\n+            // it constructs itself.\n+            if (newVar.getInitialValue() == null &&\n+                !isExtern &&\n+                // We want to make sure that when we declare a new instance\n+                // type (with @constructor) that there's actually a ctor for it.\n+                // This doesn't apply to structural constructors\n+                // (like function(new:Array). Checking the constructed\n+                // type against the variable name is a sufficient check for\n+                // this.\n+                variableName.equals(\n+                    fnType.getInstanceType().getReferenceName())) {\n               compiler.report(\n                   JSError.make(sourceName, n,\n                       fnType.isConstructor() ?\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n       token = next();\n \n       boolean hasParams = true;\n-      if (token == JsDocToken.STRING && \"this\".equals(stream.getString())) {\n-        if (match(JsDocToken.COLON)) {\n-          next();\n-          skipEOLs();\n-          Node thisType = wrapNode(Token.THIS, parseTypeName(next()));\n-          if (thisType == null) {\n-            return null;\n+      if (token == JsDocToken.STRING) {\n+        String tokenStr = stream.getString();\n+        boolean isThis = \"this\".equals(tokenStr);\n+        boolean isNew = \"new\".equals(tokenStr);\n+        if (isThis || isNew) {\n+          if (match(JsDocToken.COLON)) {\n+            next();\n+            skipEOLs();\n+            Node contextType = wrapNode(\n+                isThis ? Token.THIS : Token.NEW,\n+                parseTypeName(next()));\n+            if (contextType == null) {\n+              return null;\n+            }\n+\n+            functionType.addChildToFront(contextType);\n+          } else {\n+            return reportTypeSyntaxWarning(\"msg.jsdoc.missing.colon\");\n           }\n \n-          functionType.addChildToFront(thisType);\n-        } else {\n-          return reportTypeSyntaxWarning(\"msg.jsdoc.missing.colon\");\n-        }\n-\n-        if (match(JsDocToken.COMMA)) {\n-          next();\n-          skipEOLs();\n-          token = next();\n-        } else {\n-          hasParams = false;\n+          if (match(JsDocToken.COMMA)) {\n+            next();\n+            skipEOLs();\n+            token = next();\n+          } else {\n+            hasParams = false;\n+          }\n         }\n       }\n \n--- a/src/com/google/javascript/rhino/jstype/FunctionBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionBuilder.java\n     return this;\n   }\n \n+  /** Set whether this is a constructor. */\n+  public FunctionBuilder setIsConstructor(boolean isConstructor) {\n+    this.isConstructor = isConstructor;\n+    return this;\n+  }\n+\n   /** Make this a native type. */\n   FunctionBuilder forNativeType() {\n     this.isNativeType = true;\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n     this.source = source;\n     this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;\n     if (isConstructor) {\n-      this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?\n+      this.typeOfThis = typeOfThis != null ?\n           typeOfThis : new InstanceObjectType(registry, this, nativeType);\n     } else {\n       this.typeOfThis = typeOfThis != null ?\n     int paramNum = call.parameters.getChildCount();\n     boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();\n     if (hasKnownTypeOfThis) {\n-      b.append(\"this:\");\n+      if (isConstructor()) {\n+        b.append(\"new:\");\n+      } else {\n+        b.append(\"this:\");\n+      }\n       b.append(typeOfThis.toString());\n     }\n     if (paramNum > 0) {\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n \n       case Token.FUNCTION:\n         ObjectType thisType = null;\n+        boolean isConstructor = false;\n         Node current = n.getFirstChild();\n-        if (current.getType() == Token.THIS) {\n-          Node thisNode = current.getFirstChild();\n+        if (current.getType() == Token.THIS ||\n+            current.getType() == Token.NEW) {\n+          Node contextNode = current.getFirstChild();\n           thisType =\n               ObjectType.cast(\n                   createFromTypeNodesInternal(\n-                      thisNode, sourceName, scope, false)\n+                      contextNode, sourceName, scope, false)\n                   .restrictByNotNullOrUndefined());\n           if (thisType == null) {\n             reporter.warning(\n-                ScriptRuntime.getMessage0(\"msg.jsdoc.function.thisnotobject\"),\n-                sourceName, thisNode.getLineno(), \"\", thisNode.getCharno());\n+                ScriptRuntime.getMessage0(\n+                    current.getType() == Token.THIS ?\n+                    \"msg.jsdoc.function.thisnotobject\" :\n+                    \"msg.jsdoc.function.newnotobject\"),\n+                sourceName,\n+                contextNode.getLineno(), \"\", contextNode.getCharno());\n           }\n \n+          isConstructor = current.getType() == Token.NEW;\n           current = current.getNext();\n         }\n \n             .withParams(paramBuilder)\n             .withReturnType(returnType)\n             .withTypeOfThis(thisType)\n+            .setIsConstructor(isConstructor)\n             .build();\n     }\n \n--- a/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n+++ b/test/com/google/javascript/jscomp/DevirtualizePrototypeMethodsTest.java\n         \"CALL JSCompiler_StaticMethods_baz = null\");\n \n     static final List<String> EXPECTED_TYPE_CHECKING_ON = ImmutableList.of(\n-        \"FUNCTION a = function (this:a): undefined\",\n+        \"FUNCTION a = function (new:a): undefined\",\n         \"NAME JSCompiler_StaticMethods_foo$self = a\",\n         \"FUNCTION JSCompiler_StaticMethods_foo = function (a): number\",\n         \"NAME JSCompiler_StaticMethods_bar$self = a\",\n--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n     String output = \"\"\n         + \"function Foo(){}\"\n         + \"function Bar(){}\"\n-        + \"Foo.function__this_Foo___undefined$a = 0;\"\n-        + \"Bar.function__this_Bar___undefined$a = 0;\";\n+        + \"Foo.function__new_Foo___undefined$a = 0;\"\n+        + \"Bar.function__new_Bar___undefined$a = 0;\";\n \n     testSets(false, js, output,\n-        \"{a=[[function (this:Bar): undefined],\" +\n-        \" [function (this:Foo): undefined]]}\");\n+        \"{a=[[function (new:Bar): undefined],\" +\n+        \" [function (new:Foo): undefined]]}\");\n   }\n \n   public void testSupertypeWithSameField() {\n--- a/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n         + \"function String(opt_str) {}\\n\",\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n-        + \"found   : function (this:String, *): number\\n\"\n-        + \"expected: function (this:String, *): string\");\n+        + \"found   : function (new:String, *): number\\n\"\n+        + \"expected: function (new:String, *): string\");\n   }\n \n   public void testBuiltInTypeDifferentNumParams() throws Exception {\n         + \"function String() {}\\n\",\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n-        + \"found   : function (this:String): string\\n\"\n-        + \"expected: function (this:String, *): string\");\n+        + \"found   : function (new:String): string\\n\"\n+        + \"expected: function (new:String, *): string\");\n   }\n \n   public void testBuiltInTypeDifferentNumParams2() throws Exception {\n         + \"function String(opt_str, opt_nothing) {}\\n\",\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n-        + \"found   : function (this:String, ?, ?): string\\n\"\n-        + \"expected: function (this:String, *): string\");\n+        + \"found   : function (new:String, ?, ?): string\\n\"\n+        + \"expected: function (new:String, *): string\");\n   }\n \n   public void testBuiltInTypeDifferentParamType() throws Exception {\n         + \"function String(opt_str) {}\\n\",\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n-        + \"found   : function (this:String, ?): string\\n\"\n-        + \"expected: function (this:String, *): string\");\n+        + \"found   : function (new:String, ?): string\\n\"\n+        + \"expected: function (new:String, *): string\");\n   }\n \n   public void testBadFunctionTypeDefinition() throws Exception {\n         \"/** @constructor */function Function(opt_str) {}\\n\",\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type Function\\n\"\n-        + \"found   : function (this:Function, ?): ?\\n\"\n-        + \"expected: function (this:Function, ...[*]): ?\");\n+        + \"found   : function (new:Function, ?): ?\\n\"\n+        + \"expected: function (new:Function, ...[*]): ?\");\n   }\n \n   public void testExternSubTypes() throws Exception {\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \"/** @constructor */ function f() {};\" +\n         \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n         \"f.subclass\",\n-        \"function (this:f.subclass): ?\");\n+        \"function (new:f.subclass): ?\");\n   }\n \n   public void testStubFunctionDeclaration3() throws Exception {\n   public void testTypeRedefinition() throws Exception {\n     testTypes(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n         + \"/** @constructor */ a.A = function() {}\",\n-        \"variable a.A redefined with type function (this:a.A): undefined, \" +\n+        \"variable a.A redefined with type function (new:a.A): undefined, \" +\n         \"original definition at [testcode]:1 with type enum{a.A}\");\n   }\n \n   public void testIn4() throws Exception {\n     testTypes(\"Date in Object\",\n         \"left side of 'in'\\n\" +\n-        \"found   : function (this:Date, ?, ?, ?, ?, ?, ?, ?): string\\n\" +\n+        \"found   : function (new:Date, ?, ?, ?, ?, ?, ?, ?): string\\n\" +\n         \"required: string\");\n   }\n \n         \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n         \"derived.inherits(base);\",\n         \"(new derived).constructor\",\n-        \"function (this:derived): undefined\");\n+        \"function (new:derived): undefined\");\n   }\n \n   public void testGoodExtends8() throws Exception {\n     testTypes(\n         \"/** @constructor */ function Foo() {}\" +\n         \"Foo();\",\n-        \"Constructor function (this:Foo): undefined should be called \" +\n+        \"Constructor function (new:Foo): undefined should be called \" +\n         \"with the \\\"new\\\" keyword\");\n   }\n \n         \"/** @type {number} */ goog.Bar = goog.typedef\",\n         \"variable goog.Bar redefined with type number, \" +\n         \"original definition at [testcode]:1 \" +\n-        \"with type function (this:goog.Bar): undefined\");\n+        \"with type function (new:goog.Bar): undefined\");\n   }\n \n   public void testOldTypeDef1() throws Exception {\n         \"/** @typedef {number} */ goog.Bar;\",\n         \"variable goog.Bar redefined with type None, \" +\n         \"original definition at [testcode]:1 \" +\n-        \"with type function (this:goog.Bar): undefined\");\n+        \"with type function (new:goog.Bar): undefined\");\n   }\n \n   public void testTypeDef1() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"/** @constructor */ function f() {};\" +\n         \"/** @constructor \\n * @extends {f} */ f.subclass;\",\n         \"f.subclass\",\n-        \"function (this:f.subclass): ?\");\n+        \"function (new:f.subclass): ?\");\n   }\n \n   public void testStubFunctionDeclaration3() throws Exception {\n   public void testTypeRedefinition() throws Exception {\n     testTypes(\"a={};/**@enum {string}*/ a.A = {ZOR:'b'};\"\n         + \"/** @constructor */ a.A = function() {}\",\n-        \"variable a.A redefined with type function (this:a.A): undefined, \" +\n+        \"variable a.A redefined with type function (new:a.A): undefined, \" +\n         \"original definition at [testcode]:1 with type enum{a.A}\");\n   }\n \n   public void testIn4() throws Exception {\n     testTypes(\"Date in Object\",\n         \"left side of 'in'\\n\" +\n-        \"found   : function (this:Date, ?, ?, ?, ?, ?, ?, ?): string\\n\" +\n+        \"found   : function (new:Date, ?, ?, ?, ?, ?, ?, ?): string\\n\" +\n         \"required: string\");\n   }\n \n         \"/** @extends {base}\\n * @constructor */function derived() {}\\n\" +\n         \"derived.inherits(base);\",\n         \"(new derived).constructor\",\n-        \"function (this:derived): undefined\");\n+        \"function (new:derived): undefined\");\n   }\n \n   public void testGoodExtends8() throws Exception {\n     testTypes(\n         \"/** @type {function(this:Error,...[number]):Date} */var f; new f\",\n         \"cannot instantiate non-constructor\");\n+  }\n+\n+  public void testHigherOrderFunctions5() throws Exception {\n+    testTypes(\n+        \"/** @param {number} x */ function g(x) {}\" +\n+        \"/** @type {function(new:Error,...[number]):Date} */ var f;\" +\n+        \"g(new f());\",\n+        \"actual parameter 1 of g does not match formal parameter\\n\" +\n+        \"found   : Error\\n\" +\n+        \"required: number\");\n   }\n \n   public void testConstructorAlias1() throws Exception {\n     testTypes(\n         \"/** @constructor */ function Foo() {}\" +\n         \"Foo();\",\n-        \"Constructor function (this:Foo): undefined should be called \" +\n+        \"Constructor function (new:Foo): undefined should be called \" +\n         \"with the \\\"new\\\" keyword\");\n   }\n \n         \"/** @type {number} */ goog.Bar = goog.typedef\",\n         \"variable goog.Bar redefined with type number, \" +\n         \"original definition at [testcode]:1 \" +\n-        \"with type function (this:goog.Bar): undefined\");\n+        \"with type function (new:goog.Bar): undefined\");\n   }\n \n   public void testOldTypeDef1() throws Exception {\n         \"/** @typedef {number} */ goog.Bar;\",\n         \"variable goog.Bar redefined with type None, \" +\n         \"original definition at [testcode]:1 \" +\n-        \"with type function (this:goog.Bar): undefined\");\n+        \"with type function (new:goog.Bar): undefined\");\n   }\n \n   public void testTypeDef1() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     assertFalse(foo.isPropertyTypeInferred(\"Bar\"));\n \n     JSType fooBar = foo.getPropertyType(\"Bar\");\n-    assertEquals(\"function (this:foo.Bar): undefined\", fooBar.toString());\n+    assertEquals(\"function (new:foo.Bar): undefined\", fooBar.toString());\n     assertEquals(Lists.newArrayList(foo), registry.getTypesWithProperty(\"Bar\"));\n   }\n \n         \"\", null);\n \n     JSType e = globalScope.getVar(\"Extern\").getType();\n-    assertEquals(\"function (this:Extern): ?\", e.toString());\n+    assertEquals(\"function (new:Extern): ?\", e.toString());\n \n     ObjectType externProto = ((FunctionType) e).getPrototype();\n     assertTrue(globalScope.getRootNode().toStringTree(),\n     ObjectType ctor = (ObjectType) (findNameType(\"goog.Foo\", globalScope));\n     assertNotNull(ctor);\n     assertTrue(ctor.isConstructor());\n-    assertEquals(\"function (this:goog.Foo): undefined\", ctor.toString());\n+    assertEquals(\"function (new:goog.Foo): undefined\", ctor.toString());\n   }\n \n   public void testForLoopIntegration() {\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n     testParseType(\"function (?): (?|number)\", \"function (?): ?\");\n   }\n \n+  public void testParseFunctionalType19() throws Exception {\n+    testParseType(\"function (new:Object)\", \"function (new:Object): ?\");\n+  }\n+\n   public void testBug1419535() throws Exception {\n     parse(\"@type {function(Object, string, *)?} */\");\n     parse(\"@type {function(Object, string, *)|null} */\");\n \n   public void testParseFunctionalTypeError8() throws Exception {\n     parse(\"@type {function(...number])}*/\", \"missing opening [\");\n+  }\n+\n+  public void testParseFunctionalTypeError9() throws Exception {\n+    parse(\"@type {function (new:Array, this:Object)} */\", \"missing closing )\");\n+  }\n+\n+  public void testParseFunctionalTypeError10() throws Exception {\n+    parse(\"@type {function (this:Array, new:Object)} */\", \"missing closing )\");\n+  }\n+\n+  public void testParseFunctionalTypeError11() throws Exception {\n+    parse(\"@type {function (Array, new:Object)} */\", \"missing closing )\");\n+  }\n+\n+  public void testParseFunctionalTypeError12() throws Exception {\n+    resolve(parse(\"@type {function (new:number)}*/\").getType(),\n+        \"constructed type must be an object type\");\n   }\n \n   public void testParseArrayType1() throws Exception {\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n         registry.createFunctionType(BOOLEAN_TYPE, false, NUMBER_TYPE,\n             STRING_TYPE).toString());\n \n-    assertEquals(\"function (this:Array, ...[*]): Array\",\n+    assertEquals(\"function (new:Array, ...[*]): Array\",\n         ARRAY_FUNCTION_TYPE.toString());\n \n-    assertEquals(\"function (this:Boolean, *): boolean\",\n+    assertEquals(\"function (new:Boolean, *): boolean\",\n         BOOLEAN_OBJECT_FUNCTION_TYPE.toString());\n \n-    assertEquals(\"function (this:Number, *): number\",\n+    assertEquals(\"function (new:Number, *): number\",\n         NUMBER_OBJECT_FUNCTION_TYPE.toString());\n \n-    assertEquals(\"function (this:String, *): string\",\n+    assertEquals(\"function (new:String, *): string\",\n         STRING_OBJECT_FUNCTION_TYPE.toString());\n \n     assertEquals(\"function (...[number]): boolean\",", "timestamp": 1292363346, "metainfo": ""}