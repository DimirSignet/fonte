{"sha": "4e976ac213f448bab78f5c1432340c489b533d7b", "log": "Remove redundant Token to string function.  R=nicksantos DELTA=148  (16 added, 89 deleted, 43 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3765   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AstValidator.java\n+++ b/src/com/google/javascript/jscomp/AstValidator.java\n         return;\n       default:\n         violation(\"Expected statement but was \"\n-            + Node.tokenToName(n.getType()) + \".\", n);\n+            + Token.name(n.getType()) + \".\", n);\n     }\n   }\n \n \n       default:\n         violation(\"Expected expression but was \"\n-            + Node.tokenToName(n.getType()), n);\n+            + Token.name(n.getType()), n);\n     }\n   }\n \n         return;\n       default:\n         violation(\"Expected switch member but was \"\n-            + Node.tokenToName(n.getType()), n);\n+            + Token.name(n.getType()), n);\n     }\n   }\n \n         return;\n       default:\n         violation(\"Expected assignment target expression but was \"\n-            + Node.tokenToName(n.getType()), n);\n+            + Token.name(n.getType()), n);\n     }\n   }\n \n         return;\n       default:\n         violation(\"Expected object literal key expression but was \"\n-              + Node.tokenToName(n.getType()), n);\n+              + Token.name(n.getType()), n);\n     }\n   }\n \n         // Validate that getString doesn't throw\n         n.getString();\n       } catch (UnsupportedOperationException e) {\n-        violation(\"getString failed for\" + Node.tokenToName(n.getType()), n);\n+        violation(\"getString failed for\" + Token.name(n.getType()), n);\n       }\n     } else {\n       validateNonEmptyString(n);\n   private void validateNodeType(int type, Node n) {\n     if (n.getType() != type) {\n       violation(\n-          \"Expected \" + Node.tokenToName(type) + \" but was \"\n-              + Node.tokenToName(n.getType()), n);\n+          \"Expected \" + Token.name(type) + \" but was \"\n+              + Token.name(n.getType()), n);\n     }\n   }\n \n--- a/src/com/google/javascript/jscomp/CheckSideEffects.java\n+++ b/src/com/google/javascript/jscomp/CheckSideEffects.java\n       if (n.isString()) {\n         msg = \"Is there a missing '+' on the previous line?\";\n       } else if (isSimpleOp) {\n-        msg = \"The result of the '\" + Node.tokenToName(n.getType()) +\n+        msg = \"The result of the '\" + Token.name(n.getType()).toLowerCase() +\n             \"' operator is not being used.\";\n       }\n \n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n         break;\n \n       case Token.NULL:\n+        Preconditions.checkState(childCount == 0);\n+        add(\"null\");\n+        break;\n+\n       case Token.THIS:\n+        Preconditions.checkState(childCount == 0);\n+        add(\"this\");\n+        break;\n+\n       case Token.FALSE:\n+        Preconditions.checkState(childCount == 0);\n+        add(\"false\");\n+        break;\n+\n       case Token.TRUE:\n         Preconditions.checkState(childCount == 0);\n-        add(Node.tokenToName(type));\n+        add(\"true\");\n         break;\n \n       case Token.CONTINUE:\n--- a/src/com/google/javascript/jscomp/JsMessageVisitor.java\n+++ b/src/com/google/javascript/jscomp/JsMessageVisitor.java\n    * Returns human-readable name of the given node's type.\n    */\n   private static String getReadableTokenName(Node node) {\n-    return Node.tokenToName(node.getType()).toUpperCase();\n+    return Token.name(node.getType());\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n         return getStringValue(n.getDouble());\n \n       case Token.FALSE:\n+        return \"false\";\n+\n       case Token.TRUE:\n+        return \"true\";\n+\n       case Token.NULL:\n-        return Node.tokenToName(n.getType());\n+        return \"null\";\n \n       case Token.VOID:\n         return \"undefined\";\n         return 15;\n \n       default: throw new Error(\"Unknown precedence for \" +\n-                               Node.tokenToName(type) +\n+                               Token.name(type) +\n                                \" (type \" + type + \")\");\n     }\n   }\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n           break;\n         default:\n           throw new AssertionError(\"Unknown shift operator: \" +\n-              Node.tokenToName(n.getType()));\n+              Token.name(n.getType()));\n       }\n \n       Node newNumber = Node.newNumber(result);\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n         break;\n \n       default:\n-        report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n+        report(t, n, UNEXPECTED_TOKEN, Token.name(op));\n     }\n     ensureTyped(t, n);\n   }\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n     return res;\n   }\n \n-  public static String tokenToName(int token) {\n-    switch (token) {\n-      case Token.ERROR:           return \"error\";\n-      case Token.RETURN:          return \"return\";\n-      case Token.BITOR:           return \"bitor\";\n-      case Token.BITXOR:          return \"bitxor\";\n-      case Token.BITAND:          return \"bitand\";\n-      case Token.EQ:              return \"eq\";\n-      case Token.NE:              return \"ne\";\n-      case Token.LT:              return \"lt\";\n-      case Token.LE:              return \"le\";\n-      case Token.GT:              return \"gt\";\n-      case Token.GE:              return \"ge\";\n-      case Token.LSH:             return \"lsh\";\n-      case Token.RSH:             return \"rsh\";\n-      case Token.URSH:            return \"ursh\";\n-      case Token.ADD:             return \"add\";\n-      case Token.SUB:             return \"sub\";\n-      case Token.MUL:             return \"mul\";\n-      case Token.DIV:             return \"div\";\n-      case Token.MOD:             return \"mod\";\n-      case Token.BITNOT:          return \"bitnot\";\n-      case Token.NEG:             return \"neg\";\n-      case Token.NEW:             return \"new\";\n-      case Token.DELPROP:         return \"delprop\";\n-      case Token.TYPEOF:          return \"typeof\";\n-      case Token.GETPROP:         return \"getprop\";\n-      case Token.GETELEM:         return \"getelem\";\n-      case Token.CALL:            return \"call\";\n-      case Token.NAME:            return \"name\";\n-      case Token.NUMBER:          return \"number\";\n-      case Token.STRING:          return \"string\";\n-      case Token.NULL:            return \"null\";\n-      case Token.THIS:            return \"this\";\n-      case Token.FALSE:           return \"false\";\n-      case Token.TRUE:            return \"true\";\n-      case Token.SHEQ:            return \"sheq\";\n-      case Token.SHNE:            return \"shne\";\n-      case Token.REGEXP:          return \"regexp\";\n-      case Token.POS:             return \"pos\";\n-      case Token.THROW:           return \"throw\";\n-      case Token.IN:              return \"in\";\n-      case Token.INSTANCEOF:      return \"instanceof\";\n-      case Token.TRY:             return \"try\";\n-      case Token.PARAM_LIST:      return \"lp\";\n-      case Token.COMMA:           return \"comma\";\n-      case Token.ASSIGN:          return \"assign\";\n-      case Token.ASSIGN_BITOR:    return \"assign_bitor\";\n-      case Token.ASSIGN_BITXOR:   return \"assign_bitxor\";\n-      case Token.ASSIGN_BITAND:   return \"assign_bitand\";\n-      case Token.ASSIGN_LSH:      return \"assign_lsh\";\n-      case Token.ASSIGN_RSH:      return \"assign_rsh\";\n-      case Token.ASSIGN_URSH:     return \"assign_ursh\";\n-      case Token.ASSIGN_ADD:      return \"assign_add\";\n-      case Token.ASSIGN_SUB:      return \"assign_sub\";\n-      case Token.ASSIGN_MUL:      return \"assign_mul\";\n-      case Token.ASSIGN_DIV:      return \"assign_div\";\n-      case Token.ASSIGN_MOD:      return \"assign_mod\";\n-      case Token.HOOK:            return \"hook\";\n-      case Token.OR:              return \"or\";\n-      case Token.AND:             return \"and\";\n-      case Token.INC:             return \"inc\";\n-      case Token.DEC:             return \"dec\";\n-      case Token.FUNCTION:        return \"function\";\n-      case Token.IF:              return \"if\";\n-      case Token.SWITCH:          return \"switch\";\n-      case Token.CASE:            return \"case\";\n-      case Token.DEFAULT_CASE:    return \"default\";\n-      case Token.WHILE:           return \"while\";\n-      case Token.DO:              return \"do\";\n-      case Token.FOR:             return \"for\";\n-      case Token.BREAK:           return \"break\";\n-      case Token.CONTINUE:        return \"continue\";\n-      case Token.VAR:             return \"var\";\n-      case Token.WITH:            return \"with\";\n-      case Token.CATCH:           return \"catch\";\n-      case Token.NOT:             return \"not\";\n-      case Token.VOID:            return \"void\";\n-      case Token.BLOCK:           return \"block\";\n-      case Token.ARRAYLIT:        return \"arraylit\";\n-      case Token.OBJECTLIT:       return \"objectlit\";\n-      case Token.LABEL:           return \"label\";\n-      case Token.EXPR_RESULT:     return \"expr_result\";\n-      case Token.SCRIPT:          return \"script\";\n-      case Token.EMPTY:           return \"empty\";\n-    }\n-    return \"<unknown=\"+token+\">\";\n-  }\n-\n   /** Returns true if this node is equivalent semantically to another */\n   public boolean isEquivalentTo(Node node) {\n     return isEquivalentTo(node, false, true);\n--- a/test/com/google/javascript/jscomp/SanityCheckTest.java\n+++ b/test/com/google/javascript/jscomp/SanityCheckTest.java\n     try {\n       test(\"var x = 3;\", \"var x=3;0;0\");\n     } catch (IllegalStateException e) {\n-      assertEquals(\"Expected block but was empty Reference node EMPTY\",\n+      assertEquals(\"Expected BLOCK but was EMPTY Reference node EMPTY\",\n           e.getMessage());\n       exceptionCaught = true;\n     }", "timestamp": 1321553334, "metainfo": ""}