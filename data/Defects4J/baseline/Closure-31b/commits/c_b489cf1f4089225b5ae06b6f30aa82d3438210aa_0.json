{"sha": "b489cf1f4089225b5ae06b6f30aa82d3438210aa", "log": "Fix some bugs by removing redundant code.  R=johnlenz DELTA=61  (4 added, 34 deleted, 23 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=667   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n         Node value = keyNode.getFirstChild();\n         String memberName = NodeUtil.getObjectLitKeyName(keyNode);\n         JSDocInfo info = keyNode.getJSDocInfo();\n-        JSType valueType = getDeclaredPropType(\n-            t, info, keyNode, value);\n+        JSType valueType = getDeclaredType(\n+            t.getSourceName(), info, keyNode, value);\n         JSType keyType = NodeUtil.getObjectLitKeyTypeFromValueType(\n             keyNode, valueType);\n         if (keyType != null) {\n      * Extracts type information from either the {@code @type} tag or from\n      * the {@code @return} and {@code @param} tags.\n      */\n-    private JSType getDeclaredTypeInAnnotation(\n-        NodeTraversal t, Node node, JSDocInfo info) {\n-      return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);\n-    }\n-\n     private JSType getDeclaredTypeInAnnotation(String sourceName,\n         Node node, JSDocInfo info) {\n       JSType jsType = null;\n       Node value = name.getFirstChild();\n \n       // variable's type\n-      JSType type = null;\n-\n-      if (value != null && value.getType() == Token.FUNCTION &&\n-          shouldUseFunctionLiteralType(\n-              (FunctionType) value.getJSType(), info, name)) {\n-        type = value.getJSType();\n-      }\n-\n+      JSType type = getDeclaredType(sourceName, info, name, value);\n       if (type == null) {\n-        if (info == null) {\n-          // the variable's type will be inferred\n-          CompilerInput input = compiler.getInput(sourceName);\n-          Preconditions.checkNotNull(input, sourceName);\n-          type = input.isExtern() ?\n-              getNativeType(UNKNOWN_TYPE) : null;\n-        } else if (info.hasEnumParameterType()) {\n-          if (value != null && value.getType() == Token.OBJECTLIT) {\n-            // If this is an object literal, than an enum type\n-            // has already been created for it.\n-            type = value.getJSType();\n-          } else {\n-            type = createEnumTypeFromNodes(\n-                value, name.getString(), info, name);\n-          }\n-        } else if (info.isConstructor()) {\n-          type = createFunctionTypeFromNodes(\n-              value, name.getString(), info, name);\n-        } else {\n-          type = getDeclaredTypeInAnnotation(sourceName, name, info);\n-        }\n-      }\n-\n+        // The variable's type will be inferred.\n+        CompilerInput input = compiler.getInput(sourceName);\n+        Preconditions.checkNotNull(input, sourceName);\n+        type = input.isExtern() ?\n+            getNativeType(UNKNOWN_TYPE) : null;\n+      }\n       defineSlot(name, var, type);\n     }\n \n      * @param rValue The node that {@code n} is being initialized to,\n      *     or {@code null} if this is a stub declaration.\n      */\n-    private JSType getDeclaredPropType(NodeTraversal t, JSDocInfo info,\n+    private JSType getDeclaredType(String sourceName, JSDocInfo info,\n         Node lValue, @Nullable Node rValue) {\n       if (info != null && info.hasType()) {\n-        return getDeclaredTypeInAnnotation(t, lValue, info);\n+        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n       } else if (rValue != null && rValue.getType() == Token.FUNCTION &&\n           shouldUseFunctionLiteralType(\n               (FunctionType) rValue.getJSType(), info, lValue)) {\n         return createFunctionTypeFromNodes(\n             rValue, lValue.getQualifiedName(), info, lValue);\n       } else {\n-        return getDeclaredTypeInAnnotation(t, lValue, info);\n+        return getDeclaredTypeInAnnotation(sourceName, lValue, info);\n       }\n     }\n \n       // about getting as much type information as possible for them.\n \n       // Determining type for #1 + #2 + #3\n-      JSType valueType = getDeclaredPropType(t, info, n, rhsValue);\n+      JSType valueType = getDeclaredType(t.getSourceName(), info, n, rhsValue);\n       if (valueType == null && rhsValue != null) {\n         // Determining type for #4\n         valueType = rhsValue.getJSType();\n         }\n \n         member.getFirstChild().setJSType(thisType);\n-        JSType jsType = getDeclaredPropType(t, info, member, value);\n+        JSType jsType = getDeclaredType(t.getSourceName(), info, member, value);\n         Node name = member.getLastChild();\n         if (jsType != null &&\n             (name.getType() == Token.NAME || name.getType() == Token.STRING)) {\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n \n   public void testAbstractMethodHandling5() throws Exception {\n     testTypes(\n-        \"/** @type {Function} */ var abstractFn = function() {};\" +\n+        \"/** @type {!Function} */ var abstractFn = function() {};\" +\n         \"/** @param {number} x */ var f = abstractFn;\" +\n         \"f('x');\",\n         \"actual parameter 1 of f does not match formal parameter\\n\" +\n   }\n \n   public void testStubFunctionDeclaration8() throws Exception {\n-    /** TODO(user): This is not exactly correct yet. The var\n-            itself is nullable. */\n     testFunctionType(\n         \"/** @type {Function} */ var f = function() {}; \",\n         \"f\",\n-        createNullableType(U2U_CONSTRUCTOR_TYPE).\n-          restrictByNotNullOrUndefined().toString());\n+        createOptionalType(createNullableType(U2U_CONSTRUCTOR_TYPE))\n+            .toString());\n   }\n \n   public void testStubFunctionDeclaration9() throws Exception {\n   public void testConstructorAlias8() throws Exception {\n     testTypes(\n         \"var goog = {};\" +\n-        \"/**\\n * @param {number} x \\n * @constructor */ goog.Foo = function(x) {};\" +\n-        \"/**\\n * @param {number} x \\n * @constructor */ goog.FooAlias = goog.Foo;\" +\n+        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n+        \"goog.Foo = function(x) {};\" +\n+        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n+        \"goog.FooAlias = goog.Foo;\" +\n         \"/** @return {number} */ function foo() { \" +\n         \"  return new goog.FooAlias(1); }\",\n         \"inconsistent return type\\n\" +\n   public void testConstructorAlias9() throws Exception {\n     testTypes(\n         \"var goog = {};\" +\n-        \"/**\\n * @param {number} x \\n * @constructor */ goog.Foo = function(x) {};\" +\n+        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n+        \"goog.Foo = function(x) {};\" +\n         \"/** @constructor */ goog.FooAlias = goog.Foo;\" +\n         \"/** @return {number} */ function foo() { \" +\n         \"  return new goog.FooAlias(1); }\",\n \n   public void testConstructorAlias10() throws Exception {\n     testTypes(\n-        \"/**\\n * @param {number} x \\n * @constructor */ var Foo = function(x) {};\" +\n+        \"/**\\n * @param {number} x \\n * @constructor */ \" +\n+        \"var Foo = function(x) {};\" +\n         \"/** @constructor */ var FooAlias = Foo;\" +\n         \"/** @return {number} */ function foo() { \" +\n         \"  return new FooAlias(1); }\",\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n \n   public void testAbstractMethodHandling5() throws Exception {\n     testTypes(\n-        \"/** @type {Function} */ var abstractFn = function() {};\" +\n+        \"/** @type {!Function} */ var abstractFn = function() {};\" +\n         \"/** @param {number} x */ var f = abstractFn;\" +\n         \"f('x');\",\n         \"actual parameter 1 of f does not match formal parameter\\n\" +\n   }\n \n   public void testStubFunctionDeclaration8() throws Exception {\n-    /** TODO(user): This is not exactly correct yet. The var\n-            itself is nullable. */\n     testFunctionType(\n         \"/** @type {Function} */ var f = function() {}; \",\n         \"f\",\n-        createNullableType(U2U_CONSTRUCTOR_TYPE).\n-          restrictByNotNullOrUndefined().toString());\n+        createNullableType(U2U_CONSTRUCTOR_TYPE).toString());\n   }\n \n   public void testStubFunctionDeclaration9() throws Exception {", "timestamp": 1298582540, "metainfo": ""}