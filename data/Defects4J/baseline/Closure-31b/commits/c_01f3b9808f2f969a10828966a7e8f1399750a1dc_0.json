{"sha": "01f3b9808f2f969a10828966a7e8f1399750a1dc", "log": "Initial API CL for introducing Code Changes data object and passing it into the ScopedAliases compiler pass where it will be used. Used Role Specific Interface approach to the API.  We can widen the interfaces if we would prefer it (to minimize potential user code duplication).  R=cgruber,nicksantos,johnlenz DELTA=110  (106 added, 1 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1096   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n    * Whether the named objects types included 'undefined' by default.\n    */\n   boolean looseTypes;\n+\n+  /**\n+   * Data holder Alias Transformation information accumulated during a compile.\n+   */\n+  private transient AliasTransformationHandler aliasHandler;\n \n   /**\n    * Initializes compiler options. All options are disabled by default.\n     externExports = false;\n     nameReferenceReportPath = null;\n     nameReferenceGraphPath = null;\n+\n+    // Debugging\n+    aliasHandler = NULL_ALIAS_TRANSFORMATION_HANDLER;\n   }\n \n   /**\n     return clone;\n   }\n \n+  public void setAliasTransformationHandler(\n+      AliasTransformationHandler changes) {\n+    this.aliasHandler = changes;\n+  }\n+\n+  public AliasTransformationHandler getAliasTransformationHandler() {\n+    return this.aliasHandler;\n+  }\n+\n   //////////////////////////////////////////////////////////////////////////////\n   // Enums\n \n       return this == STRIP;\n     }\n   }\n+\n+  /**\n+   * A Role Specific Interface for JsCompiler that represents a data holder\n+   * object which is used to store goog.scope alias code changes to code made\n+   * during a compile. There is no guarantee that individual alias changes are\n+   * invoked in the order they occur during compilation, so implementations\n+   * should not assume any relevance to the order changes arrive.\n+   * <p>\n+   * Calls to the mutators are expected to resolve very quickly, so\n+   * implementations should not perform expensive operations in the mutator\n+   * methods.\n+   *\n+   */\n+  public interface AliasTransformationHandler {\n+\n+    /**\n+     * Builds an AliasCodeChange implementation and returns it to the caller.\n+     * <p>\n+     * Callers are allowed to request multiple AliasTransformation instances for\n+     * the same file, though it is expected that the first and last char values\n+     * for multiple instances will not overlap.\n+     * <p>\n+     * This method is expected to have a side-effect of storing off the created\n+     * AliasTransformation, which guarantees that invokers of this interface\n+     * cannot leak AliasTransformation to this implementation that the\n+     * implementor did not create\n+     *\n+     * @param sourceFile the source file the aliases re contained in.\n+     * @param firstChar the first character in the file to which the aliases are\n+     *        mapped.\n+     * @param lastChar the last character in the file to which the aliases are\n+     *        mapped.\n+     */\n+    public AliasTransformation logAliasChangeSet(\n+        String sourceFile, int firstChar, int lastChar);\n+  }\n+\n+  /**\n+   * A Role Specific Interface for the JsCompiler to report aliases used to\n+   * change the code during a compile.\n+   * <p>\n+   * While aliases defined by goog.scope are expected to by only 1 per file, and\n+   * the only top level structure in the file, this is not enforced.\n+   */\n+  public interface AliasTransformation {\n+\n+    /**\n+     * Adds an alias definition to the AliasTransformation instance.\n+     * <p>\n+     * Last definition for a given alias is kept if an alias is inserted\n+     * multiple times (since this is generally the behavior in JavaScript code).\n+     *\n+     * @param alias the name of the alias.\n+     * @param definition the definition of the alias.\n+     */\n+    void addAlias(String alias, String definition);\n+  }\n+\n+  /**\n+   * A Null implementation of the CodeChanges interface which performs all\n+   * operations as a No-Op\n+   */\n+  static final AliasTransformationHandler NULL_ALIAS_TRANSFORMATION_HANDLER =\n+      new NullAliasTransformationHandler();\n+\n+  private static class NullAliasTransformationHandler\n+      implements AliasTransformationHandler, Serializable {\n+\n+    private static final AliasTransformation NULL_ALIAS_TRANSFORMATION =\n+        new NullAliasTransformation();\n+\n+    @Override\n+    public AliasTransformation logAliasChangeSet(\n+        String sourceFile, int firstChar, int lastChar) {\n+      return NULL_ALIAS_TRANSFORMATION;\n+    }\n+\n+    private static class NullAliasTransformation\n+        implements AliasTransformation, Serializable {\n+      @Override\n+      public void addAlias(String alias, String definition) {\n+      }\n+    }\n+  }\n }\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       new PassFactory(\"processGoogScopeAliases\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n-      return new ScopedAliases(compiler);\n+      return new ScopedAliases(\n+              compiler, options.getAliasTransformationHandler());\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n \n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n+import com.google.javascript.jscomp.CompilerOptions.AliasTransformationHandler;\n import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n       \"JSC_GOOG_SCOPE_NON_ALIAS_LOCAL\",\n       \"The local variable {0} is in a goog.scope and is not an alias.\");\n \n-  ScopedAliases(AbstractCompiler compiler) {\n+  ScopedAliases(\n+      AbstractCompiler compiler, AliasTransformationHandler codeChanges) {\n     this.compiler = compiler;\n   }\n \n--- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java\n+++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java\n import com.google.common.collect.Lists;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n-\n import java.util.Collection;\n import java.util.List;\n \n \n   @Override\n   protected ScopedAliases getProcessor(Compiler compiler) {\n-    return new ScopedAliases(compiler);\n+    return new ScopedAliases(\n+        compiler, CompilerOptions.NULL_ALIAS_TRANSFORMATION_HANDLER);\n   }\n \n   private static class TypeVerifyingPass", "timestamp": 1301344114, "metainfo": ""}