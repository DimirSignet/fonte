{"sha": "22f6cda30ea24cd6c0ce8935e3148c1b0c6b1551", "log": "Collect object and array values for simple assignments in addition to var declarations.  R=agrieve DELTA=146  (103 added, 5 deleted, 38 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1306   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java\n+++ b/src/com/google/javascript/jscomp/PeepholeCollectPropertyAssignments.java\n \n     boolean codeChanged = false;\n \n-    // Look for variable declarations and start processing there.\n+    // Look for variable declarations or simple assignments\n+    // and start processing there.\n     for (Node child = subtree.getFirstChild();\n          child != null; child = child.getNext()) {\n-      if (child.getType() != Token.VAR) {\n-        continue;\n-      }\n-      if (!isPropertyAssignmentToVar(child.getNext())) {\n+      if (child.getType() != Token.VAR && !NodeUtil.isExprAssign(child)) {\n+        continue;\n+      }\n+      if (!isPropertyAssignmentToName(child.getNext())) {\n         // Quick check to see if there's anything to collapse.\n         continue;\n       }\n \n       Preconditions.checkState(child.hasOneChild());\n-      Node var = child.getFirstChild();\n-      Node varValue = var.getFirstChild();\n-      if (varValue == null) {  // No initializer.\n+      Node name = getName(child);\n+      if (name.getType() != Token.NAME) {\n+        // The assignment target is not a simple name.\n+        continue;\n+      }\n+      Node value = getValue(child);\n+      if (value == null || !isInterestingValue(value)) {\n+        // No initializer or not an Object or Array literal.\n         continue;\n       }\n \n       while ((propertyCandidate = child.getNext()) != null) {\n         // This does not infinitely loop because collectProperty always\n         // removes propertyCandidate from its parent when it returns true.\n-        if (!collectProperty(propertyCandidate, var)) {\n+        if (!collectProperty(propertyCandidate, name.getString(), value)) {\n           break;\n         }\n         codeChanged = true;\n     return subtree;\n   }\n \n-  private boolean isPropertyAssignmentToVar(Node propertyCandidate) {\n+  private Node getName(Node n) {\n+    if (n.getType() == Token.VAR) {\n+      return n.getFirstChild();\n+    } else if (NodeUtil.isExprAssign(n)) {\n+      return n.getFirstChild().getFirstChild();\n+    }\n+    throw new IllegalStateException();\n+  }\n+\n+  private Node getValue(Node n) {\n+    if (n.getType() == Token.VAR) {\n+      return n.getFirstChild().getFirstChild();\n+    } else if (NodeUtil.isExprAssign(n)) {\n+      return n.getFirstChild().getLastChild();\n+    }\n+    throw new IllegalStateException();\n+  }\n+\n+  boolean isInterestingValue(Node n) {\n+    return n.getType() == Token.OBJECTLIT || n.getType() == Token.ARRAYLIT;\n+  }\n+\n+  private boolean isPropertyAssignmentToName(Node propertyCandidate) {\n     if (propertyCandidate == null) { return false; }\n     // Must be an assignment...\n     if (!NodeUtil.isExprAssign(propertyCandidate)) {\n     return true;\n   }\n \n-  private boolean collectProperty(Node propertyCandidate, Node var) {\n-    if (!isPropertyAssignmentToVar(propertyCandidate)) {\n-      return false;\n-    }\n-\n-    String varName = var.getString();\n+  private boolean collectProperty(\n+      Node propertyCandidate, String name, Node value) {\n+    if (!isPropertyAssignmentToName(propertyCandidate)) {\n+      return false;\n+    }\n \n     Node lhs = propertyCandidate.getFirstChild().getFirstChild();\n     // Must be an assignment to the recent variable...\n-    if (!varName.equals(lhs.getFirstChild().getString())) {\n+    if (!name.equals(lhs.getFirstChild().getString())) {\n       return false;\n     }\n \n       return false;\n     }\n     // and does not have a reference to a variable initialized after it.\n-    if (mightContainForwardReference(rhs, varName)) {\n-      return false;\n-    }\n-\n-    // Either collect it as an array property or an object property based on\n-    // the type of the variable initializer.\n-    Node varValue = var.getFirstChild();\n-    switch (varValue.getType()) {\n+    if (mightContainForwardReference(rhs, name)) {\n+      return false;\n+    }\n+\n+    switch (value.getType()) {\n       case Token.ARRAYLIT:\n-        if (!collectArrayProperty(varValue, propertyCandidate)) {\n+        if (!collectArrayProperty(value, propertyCandidate)) {\n           return false;\n         }\n         break;\n       case Token.OBJECTLIT:\n-        if (!collectObjectProperty(varValue, propertyCandidate)) {\n+        if (!collectObjectProperty(value, propertyCandidate)) {\n           return false;\n         }\n         break;\n-      default: return false;\n+      default:\n+        throw new IllegalStateException();\n     }\n     return true;\n   }\n--- a/test/com/google/javascript/jscomp/PeepholeCollectPropertyAssignmentsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeCollectPropertyAssignmentsTest.java\n         compiler, new PeepholeCollectPropertyAssignments());\n   }\n \n-  public final void testArrayOptimization() {\n+  public final void testArrayOptimization1() {\n     test(\"var a = []; a[0] = 1; a[1] = 2; a[2] = 3;\",\n          \"var a = [1, 2, 3];\");\n   }\n \n-  public final void testNegativeArrayIndex() {\n+  public final void testArrayOptimization2() {\n+    test(\"var a; a = []; a[0] = 1; a[1] = 2; a[2] = 3;\",\n+         \"var a; a = [1, 2, 3];\");\n+  }\n+\n+  public final void testArrayOptimization3() {\n+    testSame(\"var a; a.b = []; a.b[0] = 1; a.b[1] = 2; a.b[2] = 3;\");\n+  }\n+\n+  public final void testNegativeArrayIndex1() {\n     testSame(\"var a = []; a[-1] = 1;\");\n   }\n \n-  public final void testFractionalArrayIndex() {\n+  public final void testNegativeArrayIndex2() {\n+    testSame(\"var a; a = []; a[-1] = 1;\");\n+  }\n+\n+  public final void testFractionalArrayIndex1() {\n     testSame(\"var a = []; a[0.5] = 1;\");\n   }\n \n-  public final void testArrayOptimizationOfPartiallyBuiltArray() {\n+  public final void testFractionalArrayIndex2() {\n+    testSame(\"var a; a = []; a[0.5] = 1;\");\n+  }\n+\n+  public final void testArrayOptimizationOfPartiallyBuiltArray1() {\n     test(\"var a = [1, 2]; a[2] = 3;\",\n          \"var a = [1, 2, 3];\");\n   }\n \n-  public final void testArrayOptimizationWithAHole() {\n+  public final void testArrayOptimizationOfPartiallyBuiltArray2() {\n+    test(\"var a; a = [1, 2]; a[2] = 3;\",\n+         \"var a; a = [1, 2, 3];\");\n+  }\n+\n+  public final void testArrayOptimizationWithAHole1() {\n     test(\"var a = []; a[0] = 1; a[1] = 2; a[3] = 4;\",\n          \"var a = [1, 2, , 4];\");\n   }\n \n-  public final void testEarlyUsage() {\n+  public final void testArrayOptimizationWithAHole2() {\n+    test(\"var a; a = []; a[0] = 1; a[1] = 2; a[3] = 4;\",\n+         \"var a; a = [1, 2, , 4];\");\n+  }\n+\n+  public final void testEarlyUsage1() {\n     testSame(\n         \"function c() {return sum(a)};\"\n         + \"var a = [1,2,3];\"\n         + \"a[4] = c();\");\n   }\n \n-  public final void testArrayTooSparseOptimization() {\n+  public final void testEarlyUsage2() {\n+    testSame(\n+        \"function c() {return sum(a)};\"\n+        + \"var a; a = [1,2,3];\"\n+        + \"a[4] = c();\");\n+  }\n+\n+  public final void testArrayTooSparseOptimization1() {\n     test(\"var a = []; a[0] = 1; a[1] = 2; a[100] = 4;\",\n          \"var a = [1, 2]; a[100] = 4;\");\n+  }\n+\n+  public final void testArrayTooSparseOptimization2() {\n+    test(\"var a; a = []; a[0] = 1; a[1] = 2; a[100] = 4;\",\n+         \"var a; a = [1, 2]; a[100] = 4;\");\n   }\n \n   public final void testArrayOutOfOrder() {\n     test(\"var a = []; a[1] = 1; a[0] = 0;\",\n          \"var a = [0, 1];\");\n+    test(\"var a; a = []; a[1] = 1; a[0] = 0;\",\n+         \"var a; a = [0, 1];\");\n     // We cannot change the order of side-effects.\n     // The below should not be\n     //   var x = 0; var a = [x++, x++]\n     // instead of\n     //   var a = [1, 0], x = 2;\n     testSame(\"var x = 0; var a = []; a[1] = x++; a[0] = x++;\");\n+    testSame(\"var x; x = 0; var a = []; a[1] = x++; a[0] = x++;\");\n   }\n \n-  public final void testMultipleNames() {\n+  public final void testMultipleNames1() {\n     test(\"var b = []; b[0] = 2; var a = []; a[0] = 1;\",\n          \"var b = [2]; var a = [1];\");\n   }\n \n-  public final void testArrayReassignedInValue() {\n+  public final void testMultipleNames2() {\n+    test(\"var b; b = []; b[0] = 2; var a = []; a[0] = 1;\",\n+         \"var b; b = [2]; var a = [1];\");\n+  }\n+\n+\n+  public final void testArrayReassignedInValue1() {\n     test(\"var a = []; a[0] = 1; a[1] = (a = []); a[3] = 4;\",\n          \"var a = [1]; a[1] = (a = []); a[3] = 4;\");\n   }\n \n-  public final void testArrayReassignedInSubsequentVar() {\n+  public final void testArrayReassignedInValue2() {\n+    test(\"var a; a = []; a[0] = 1; a[1] = (a = []); a[3] = 4;\",\n+         \"var a; a = [1]; a[1] = (a = []); a[3] = 4;\");\n+  }\n+\n+  public final void testArrayReassignedInSubsequentVar1() {\n     testSame(\"var a = []; a[0] = a = []; a[1] = 2;\");\n   }\n \n-  public final void testForwardReference() {\n-    test(\"var a = []; a[0] = 1; a[1] = a;\",\n-         \"var a = [1]; a[1] = a;\");\n+  public final void testArrayReassignedInSubsequentVar2() {\n+    testSame(\"var a; a = []; a[0] = a = []; a[1] = 2;\");\n   }\n \n-  public final void testObjectOptimization() {\n+  public final void testForwardReference1() {\n+    test(\"var a; a = []; a[0] = 1; a[1] = a;\",\n+         \"var a; a = [1]; a[1] = a;\");\n+  }\n+\n+  public final void testForwardReference2() {\n+    test(\"var a; a = []; a[0] = 1; a[1] = a;\",\n+         \"var a; a = [1]; a[1] = a;\");\n+  }\n+\n+  public final void testObjectOptimization1() {\n     test(\"var o = {}; o.x = 0; o['y'] = 1; o[2] = 2;\",\n          \"var o = { x: 0, \\\"y\\\": 1, \\\"2\\\": 2 };\");\n   }\n \n-  public final void testObjectReassignedInValue() {\n+  public final void testObjectOptimization2() {\n+    test(\"var o; o = {}; o.x = 0; o['y'] = 1; o[2] = 2;\",\n+         \"var o; o = { x: 0, \\\"y\\\": 1, \\\"2\\\": 2 };\");\n+  }\n+\n+  public final void testObjectReassignedInValue1() {\n     test(\"var o = {}; o.x = 1; o.y = (o = {}); o.z = 4;\",\n          \"var o = {x:1}; o.y = (o = {}); o.z = 4;\");\n   }\n \n+\n+  public final void testObjectReassignedInValue2() {\n+    test(\"var o; o = {}; o.x = 1; o.y = (o = {}); o.z = 4;\",\n+         \"var o; o = {x:1}; o.y = (o = {}); o.z = 4;\");\n+  }\n+\n }", "timestamp": 1302283761, "metainfo": ""}