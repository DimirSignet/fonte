{"sha": "cbe5eb502e8c0560bc31ddbac037806b65236e1d", "log": "Add \"map\" support to index maps.  R=cromwellian DELTA=119  (105 added, 0 deleted, 14 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3009   ", "commit": "\n--- a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n       JSONArray sections = sourceMapRoot.getJSONArray(\"sections\");\n       for (int i = 0, count = sections.length(); i < count; i++) {\n         JSONObject section = sections.getJSONObject(i);\n-        String url = section.getString(\"url\");\n+        if (section.has(\"map\") && section.has(\"url\")) {\n+          throw new SourceMapParseException(\n+              \"Invalid map format: section may not have both 'map' and 'url'\");\n+        }\n         JSONObject offset = section.getJSONObject(\"offset\");\n         int line = offset.getInt(\"line\");\n         int column = offset.getInt(\"column\");\n-\n-        String mapSectionContents = sectionSupplier.getSourceMap(url);\n-        if (mapSectionContents == null) {\n-          throw new SourceMapParseException(\"Unable to retrieve: \" + url);\n+        String mapSectionContents;\n+        if (section.has(\"url\")) {\n+          String url = section.getString(\"url\");\n+          mapSectionContents = sectionSupplier.getSourceMap(url);\n+          if (mapSectionContents == null) {\n+            throw new SourceMapParseException(\"Unable to retrieve: \" + url);\n+          }\n+        } else if (section.has(\"map\")) {\n+          mapSectionContents = section.getString(\"map\");\n+        } else {\n+          throw new SourceMapParseException(\n+              \"Invalid map format: section must have either 'map' or 'url'\");\n         }\n         generator.mergeMapSection(line, column, mapSectionContents);\n       }\n--- a/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapGeneratorV3.java\n       out.append(\"{\\n\");\n       appendFirstField(out, \"offset\",\n           offsetValue(section.getLine(), section.getColumn()));\n-      appendField(out, \"url\", escapeString(section.getSectionUrl()));\n+      if (section.getSectionType() == SourceMapSection.SectionType.URL) {\n+        appendField(out, \"url\", escapeString(section.getSectionValue()));\n+      } else if (section.getSectionType() == SourceMapSection.SectionType.MAP) {\n+        appendField(out, \"map\", section.getSectionValue());\n+      } else {\n+        throw new IOException(\"Unexpected section type\");\n+      }\n       out.append(\"\\n}\");\n     }\n \n--- a/src/com/google/debugging/sourcemap/SourceMapSection.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapSection.java\n    * A url for a valid source map file that represents a section of a generate\n    * source file such as when multiple files are concatenated together.\n    */\n-  private final String sectionUrl;\n+  private final String value;\n   private final int line;\n   private final int column;\n+  private final SectionType type;\n+\n+  public static enum SectionType {\n+    URL,\n+    MAP\n+  }\n \n   /**\n    * @param sectionUrl The url for the partial sourcemap\n    *    starts.\n    * @param column The number of characters into the line where the represented\n    *    section starts.\n+   * @deprecated\n    */\n+  @Deprecated\n   public SourceMapSection(String sectionUrl, int line, int column) {\n-    this.sectionUrl = sectionUrl;\n+    this.type = SectionType.URL;\n+    this.value = sectionUrl;\n     this.line = line;\n     this.column = column;\n   }\n \n+  private SourceMapSection(\n+      SectionType type, String value, int line, int column) {\n+    this.type = type;\n+    this.value = value;\n+    this.line = line;\n+    this.column = column;\n+  }\n+\n+  static SourceMapSection forMap(String value, int line, int column) {\n+    return new SourceMapSection(SectionType.MAP, value, line, column);\n+  }\n+\n+  static SourceMapSection forURL(String value, int line, int column) {\n+    return new SourceMapSection(SectionType.URL, value, line, column);\n+  }\n+\n+  public SectionType getSectionType() {\n+    return this.type;\n+  }\n+\n   /**\n    * @return the name of the map\n+   * @deprecated\n    */\n   public String getSectionUrl() {\n-    return sectionUrl;\n+    assert(type.equals(SectionType.URL));\n+    return value;\n+  }\n+\n+  /**\n+   * @return the value that represents the map for this section.\n+   */\n+  public String getSectionValue() {\n+    return value;\n   }\n \n   /**\n--- a/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java\n+++ b/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java\n     StringWriter out = new StringWriter();\n     String name = \"./app.js\";\n     List<SourceMapSection> appSections = Lists.newArrayList(\n-        new SourceMapSection(\"src1\", 0, 0),\n-        new SourceMapSection(\"src2\", 100, 10),\n-        new SourceMapSection(\"src3\", 150, 5));\n+        SourceMapSection.forURL(\"src1\", 0, 0),\n+        SourceMapSection.forURL(\"src2\", 100, 10),\n+        SourceMapSection.forURL(\"src3\", 150, 5));\n \n     SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n     generator.appendIndexMapTo(out, name, appSections);\n             \"\\\"column\\\":5\\n\" +\n             \"},\\n\" +\n             \"\\\"url\\\":\\\"src3\\\"\\n\" +\n+            \"}\\n\" +\n+            \"]\\n\" +\n+            \"}\\n\",\n+            out.toString());\n+  }\n+\n+  private String getEmptyMapFor(String name) throws IOException {\n+    StringWriter out = new StringWriter();\n+    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n+    generator.appendTo(out, name);\n+    return out.toString();\n+  }\n+\n+  public void testWriteMetaMap2() throws IOException {\n+    StringWriter out = new StringWriter();\n+    String name = \"./app.js\";\n+    List<SourceMapSection> appSections = Lists.newArrayList(\n+        // Map and URLs can be mixed.\n+        SourceMapSection.forMap(getEmptyMapFor(\"./part.js\"), 0, 0),\n+        SourceMapSection.forURL(\"src2\", 100, 10));\n+\n+    SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n+    generator.appendIndexMapTo(out, name, appSections);\n+\n+    assertEquals(\n+            \"{\\n\" +\n+            \"\\\"version\\\":3,\\n\" +\n+            \"\\\"file\\\":\\\"./app.js\\\",\\n\" +\n+            \"\\\"sections\\\":[\\n\" +\n+            \"{\\n\" +\n+            \"\\\"offset\\\":{\\n\" +\n+            \"\\\"line\\\":0,\\n\" +\n+            \"\\\"column\\\":0\\n\" +\n+            \"},\\n\" +\n+            \"\\\"map\\\":{\\n\" +\n+              \"\\\"version\\\":3,\\n\" +\n+              \"\\\"file\\\":\\\"./part.js\\\",\\n\" +\n+              \"\\\"lineCount\\\":1,\\n\" +\n+              \"\\\"mappings\\\":\\\";\\\",\\n\" +\n+              \"\\\"sources\\\":[],\\n\" +\n+              \"\\\"names\\\":[]\\n\" +\n+            \"}\\n\" +\n+            \"\\n\" +\n+            \"},\\n\" +\n+            \"{\\n\" +\n+            \"\\\"offset\\\":{\\n\" +\n+            \"\\\"line\\\":100,\\n\" +\n+            \"\\\"column\\\":10\\n\" +\n+            \"},\\n\" +\n+            \"\\\"url\\\":\\\"src2\\\"\\n\" +\n             \"}\\n\" +\n             \"]\\n\" +\n             \"}\\n\",\n \n     StringBuilder output = new StringBuilder();\n     FilePosition offset = appendAndCount(output, result1.generatedSource);\n-    sections.add(new SourceMapSection(MAP1, 0, 0));\n+    sections.add(SourceMapSection.forURL(MAP1, 0, 0));\n     output.append(result2.generatedSource);\n     sections.add(\n-         new SourceMapSection(MAP2, offset.getLine(), offset.getColumn()));\n+        SourceMapSection.forURL(MAP2, offset.getLine(), offset.getColumn()));\n \n     SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();\n     StringBuilder mapContents = new StringBuilder();", "timestamp": 1313219952, "metainfo": ""}