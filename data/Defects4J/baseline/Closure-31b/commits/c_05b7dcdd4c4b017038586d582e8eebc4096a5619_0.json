{"sha": "05b7dcdd4c4b017038586d582e8eebc4096a5619", "log": "certain tools need a larger stack when generating code.  R=nicksantos DELTA=25  (20 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=86   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     useThreads = false;\n   }\n \n+  private <T> T runInCompilerThread(final Callable<T> callable) {\n+    return runCallable(callable, useThreads, options.tracer.isOn());\n+  }\n+\n+  static <T> T runCallableWithLargeStack(final Callable<T> callable) {\n+    return runCallable(callable, true, false);\n+  }\n+\n   @SuppressWarnings(\"unchecked\")\n-  private <T> T runInCompilerThread(final Callable<T> callable) {\n+  static <T> T runCallable(\n+      final Callable<T> callable, boolean useLargeStackThread, boolean trace) {\n \n     // Under JRE 1.6, the jscompiler overflows the stack when running on some\n     // large or complex js code. Here we start a new thread with a larger\n     // increase the stack size for *every* thread (which is what -Xss does).\n     // Might want to add thread pool support for clients that compile a lot.\n \n-    final boolean dumpTraceReport = options.tracer.isOn();\n+    final boolean dumpTraceReport = trace;\n     final Object[] result = new Object[1];\n     final Throwable[] exception = new Throwable[1];\n     Runnable runnable = new Runnable() {\n       }\n     };\n \n-    if (useThreads) {\n+    if (useLargeStackThread) {\n       Thread th = new Thread(null, runnable, \"jscompiler\", COMPILER_STACK_SIZE);\n       th.start();\n       while (true) {", "timestamp": 1291748627, "metainfo": ""}