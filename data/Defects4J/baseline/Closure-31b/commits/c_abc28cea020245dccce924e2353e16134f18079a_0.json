{"sha": "abc28cea020245dccce924e2353e16134f18079a", "log": "On second thought, I don't think we want to re-use the implicit prototype on enums. It seems like we're overloading implicit prototypes for things it's not designed to handle. Instead, DisambiguateProperties should unpack the Enum manually, just like it does with UnionType objects  R=johnlenz DELTA=92  (82 added, 0 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2681   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n package com.google.javascript.jscomp;\n \n import static com.google.common.base.Preconditions.checkState;\n+\n import com.google.common.collect.HashMultimap;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n import com.google.javascript.jscomp.graph.UnionFind;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.EnumElementType;\n import com.google.javascript.rhino.jstype.FunctionPrototypeType;\n import com.google.javascript.rhino.jstype.FunctionType;\n import com.google.javascript.rhino.jstype.JSType;\n       for (JSType alt : ((UnionType) type).getAlternates()) {\n         addInvalidatingType(alt);\n       }\n-      return;\n-    }\n-\n-    typeSystem.addInvalidatingType(type);\n-    ObjectType objType = ObjectType.cast(type);\n-    if (objType != null && objType.getImplicitPrototype() != null) {\n-      typeSystem.addInvalidatingType(objType.getImplicitPrototype());\n+    } else if (type instanceof EnumElementType) {\n+      addInvalidatingType(((EnumElementType) type).getPrimitiveType());\n+    } else {\n+      typeSystem.addInvalidatingType(type);\n+      ObjectType objType = ObjectType.cast(type);\n+      if (objType != null && objType.getImplicitPrototype() != null) {\n+        typeSystem.addInvalidatingType(objType.getImplicitPrototype());\n+      }\n     }\n   }\n \n           types.addAll(getTypesToSkipForTypeNonUnion(type));\n         }\n         return ImmutableSet.copyOf(types);\n+      } else if (type instanceof EnumElementType) {\n+        return getTypesToSkipForType(\n+            ((EnumElementType) type).getPrimitiveType());\n       }\n       return ImmutableSet.copyOf(getTypesToSkipForTypeNonUnion(type));\n     }\n     }\n \n     @Override public ObjectType getTypeWithProperty(String field, JSType type) {\n+      if (type instanceof EnumElementType) {\n+        return getTypeWithProperty(\n+            field, ((EnumElementType) type).getPrimitiveType());\n+      }\n+\n       if (!(type instanceof ObjectType)) {\n         if (type.autoboxesTo() != null) {\n           type = type.autoboxesTo();\n       jsType = jsType.restrictByNotNullOrUndefined();\n       if (jsType instanceof UnionType) {\n         for (JSType alt : ((UnionType) jsType).getAlternates()) {\n-          return maybeAddAutoboxes(cType, alt, prop);\n-        }\n+          cType = maybeAddAutoboxes(cType, alt, prop);\n+        }\n+        return cType;\n+      } else if (jsType instanceof EnumElementType) {\n+        return maybeAddAutoboxes(\n+            cType, ((EnumElementType) jsType).getPrimitiveType(), prop);\n       }\n \n       if (jsType.autoboxesTo() != null) {\n--- a/src/com/google/javascript/rhino/jstype/EnumElementType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumElementType.java\n \n   @Override\n   public ObjectType getImplicitPrototype() {\n-    return primitiveObjectType == null ? null : primitiveObjectType;\n+    return null;\n   }\n \n   @Override\n--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n \n     // TODO(nicksantos): Fix the type tightener to handle this case.\n     // It currently doesn't work, because getSubTypes is broken for enums.\n+  }\n+\n+  public void testEnumOfObjects2() {\n+    String js = \"\"\n+        + \"/** @constructor */ function Formatter() {}\"\n+        + \"Formatter.prototype.format = function() {};\"\n+        + \"/** @constructor */ function Unrelated() {}\"\n+        + \"Unrelated.prototype.format = function() {};\"\n+        + \"/** @enum {?Formatter} */ var Enum = {\\n\"\n+        + \"  A: new Formatter(),\\n\"\n+        + \"  B: new Formatter()\\n\"\n+        + \"};\\n\"\n+        + \"function f() {\\n\"\n+        + \"  var formatter = window.toString() ? Enum.A : Enum.B;\\n\"\n+        + \"  formatter.format();\\n\"\n+        + \"}\";\n+    String output = \"\"\n+        + \"/** @constructor */ function Formatter() {}\"\n+        + \"Formatter.prototype.format = function() {};\"\n+        + \"/** @constructor */ function Unrelated() {}\"\n+        + \"Unrelated.prototype.format = function() {};\"\n+        + \"/** @enum {?Formatter} */ var Enum = {\\n\"\n+        + \"  A: new Formatter(),\\n\"\n+        + \"  B: new Formatter()\\n\"\n+        + \"};\\n\"\n+        + \"function f() {\\n\"\n+        + \"  var formatter = window.toString() ? Enum.A : Enum.B;\\n\"\n+        + \"  formatter.format();\\n\"\n+        + \"}\";\n+    testSets(false, js, output, \"{}\");\n+  }\n+\n+  public void testEnumOfObjects3() {\n+    String js = \"\"\n+        + \"/** @constructor */ function Formatter() {}\"\n+        + \"Formatter.prototype.format = function() {};\"\n+        + \"/** @constructor */ function Unrelated() {}\"\n+        + \"Unrelated.prototype.format = function() {};\"\n+        + \"/** @enum {!Formatter} */ var Enum = {\\n\"\n+        + \"  A: new Formatter(),\\n\"\n+        + \"  B: new Formatter()\\n\"\n+        + \"};\\n\"\n+        + \"/** @enum {!Enum} */ var SubEnum = {\\n\"\n+        + \"  C: Enum.A\\n\"\n+        + \"};\\n\"\n+        + \"function f() {\\n\"\n+        + \"  var formatter = SubEnum.C\\n\"\n+        + \"  formatter.format();\\n\"\n+        + \"}\";\n+    String output = \"\"\n+        + \"/** @constructor */ function Formatter() {}\"\n+        + \"Formatter.prototype.Formatter_prototype$format = function() {};\"\n+        + \"/** @constructor */ function Unrelated() {}\"\n+        + \"Unrelated.prototype.Unrelated_prototype$format = function() {};\"\n+        + \"/** @enum {!Formatter} */ var Enum = {\\n\"\n+        + \"  A: new Formatter(),\\n\"\n+        + \"  B: new Formatter()\\n\"\n+        + \"};\\n\"\n+        + \"/** @enum {!Enum} */ var SubEnum = {\\n\"\n+        + \"  C: Enum.A\\n\"\n+        + \"};\\n\"\n+        + \"function f() {\\n\"\n+        + \"  var formatter = SubEnum.C\\n\"\n+        + \"  formatter.Formatter_prototype$format();\\n\"\n+        + \"}\";\n+    testSets(false, js, output,\n+        \"{format=[[Formatter.prototype], [Unrelated.prototype]]}\");\n   }\n \n   public void testUntypedExterns() {", "timestamp": 1311171873, "metainfo": ""}