{"sha": "c8c81c6615908f82ae5e7b294643caa177688513", "log": "Basic Node class cleaning: Remove unused annotation types and remove obsolete side-effect detection function  R=nicksantos DELTA=227  (0 added, 226 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3649   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n    * Covert EXPR_VOID to EXPR_RESULT to simplify the rest of the code.\n    */\n   private void normalizeNodeTypes(Node n) {\n-    // Remove unused properties to minimize differences between ASTs\n-    // produced by the two parsers.\n-    if (n.getType() == Token.FUNCTION) {\n-      Preconditions.checkState(n.getProp(Node.FUNCTION_PROP) == null);\n-    }\n-\n     normalizeBlocks(n);\n \n     for (Node child = n.getFirstChild();\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n   private static final long serialVersionUID = 1L;\n \n   public static final int\n-      // Rhino's AST captures data flow. These are the annotations\n-      // it used. We've mostly torn them out.\n-      LOCAL_BLOCK_PROP  = -3,\n-      OBJECT_IDS_PROP   = -2,\n-      CATCH_SCOPE_PROP  = -1,\n-      LABEL_ID_PROP     =  0,\n-\n-      TARGET_PROP       =  1,\n-      BREAK_PROP        =  2,\n-      CONTINUE_PROP     =  3,\n-      ENUM_PROP         =  4,\n-      FUNCTION_PROP     =  5,\n-      TEMP_PROP         =  6,\n-      LOCAL_PROP        =  7,\n-      CODEOFFSET_PROP   =  8,\n-      FIXUPS_PROP       =  9,\n-      VARS_PROP         = 10,\n-      USES_PROP         = 11,\n-      REGEXP_PROP       = 12,\n-      CASES_PROP        = 13,\n-      DEFAULT_PROP      = 14,\n-      CASEARRAY_PROP    = 15,\n-\n       // TODO(nicksantos): Remove this prop.\n       SOURCENAME_PROP   = 16,\n \n-      TYPE_PROP         = 17,\n-      SPECIAL_PROP_PROP = 18,\n-      LABEL_PROP        = 19,\n-      FINALLY_PROP      = 20,\n-      LOCALCOUNT_PROP   = 21,\n-  /*\n-      the following properties are defined and manipulated by the\n-      optimizer -\n-      TARGETBLOCK_PROP - the block referenced by a branch node\n-      VARIABLE_PROP - the variable referenced by a BIND or NAME node\n-      LASTUSE_PROP - that variable node is the last reference before\n-                      a new def or the end of the block\n-      ISNUMBER_PROP - this node generates code on Number children and\n-                      delivers a Number result (as opposed to Objects)\n-      DIRECTCALL_PROP - this call node should emit code to test the function\n-                        object against the known class and call diret if it\n-                        matches.\n-  */\n-\n-      TARGETBLOCK_PROP  = 22,\n-      VARIABLE_PROP     = 23,\n-      LASTUSE_PROP      = 24,\n-      ISNUMBER_PROP     = 25,\n-      DIRECTCALL_PROP   = 26,\n-\n-      SPECIALCALL_PROP  = 27,\n-      DEBUGSOURCE_PROP  = 28,\n       JSDOC_INFO_PROP   = 29,     // contains a TokenStream.JSDocInfo object\n       VAR_ARGS_NAME     = 30,     // the name node is a variable length\n                                   // argument placeholder.\n-      SKIP_INDEXES_PROP  = 31,    // array of skipped indexes of array literal\n       INCRDECR_PROP      = 32,    // pre or post type of increment/decrement\n-      MEMBER_TYPE_PROP   = 33,    // type of element access operation\n-      NAME_PROP          = 34,    // property name\n       PARENTHESIZED_PROP = 35,    // expression is parenthesized\n       QUOTED_PROP        = 36,    // set to indicate a quoted object lit key\n       OPT_ARG_NAME       = 37,    // The name node is an optional argument.\n                                   // node.\n       LAST_PROP          = 53;\n \n-  // values of ISNUMBER_PROP to specify\n-  // which of the children are Number types\n-  public static final int\n-      BOTH = 0,\n-      LEFT = 1,\n-      RIGHT = 2;\n-\n-  public static final int    // values for SPECIALCALL_PROP\n-      NON_SPECIALCALL  = 0,\n-      SPECIALCALL_EVAL = 1,\n-      SPECIALCALL_WITH = 2;\n-\n   public static final int   // flags for INCRDECR_PROP\n       DECR_FLAG = 0x1,\n       POST_FLAG = 0x2;\n \n-  public static final int   // flags for MEMBER_TYPE_PROP\n-      PROPERTY_FLAG    = 0x1, // property access: element is valid name\n-      ATTRIBUTE_FLAG   = 0x2, // x.@y or x..@y\n-      DESCENDANTS_FLAG = 0x4; // x..y or x..@i\n-\n   private static final String propToString(int propType) {\n       switch (propType) {\n-        case LOCAL_BLOCK_PROP:   return \"local_block\";\n-        case OBJECT_IDS_PROP:    return \"object_ids_prop\";\n-        case CATCH_SCOPE_PROP:   return \"catch_scope_prop\";\n-        case LABEL_ID_PROP:      return \"label_id_prop\";\n-        case TARGET_PROP:        return \"target\";\n         case BRACELESS_TYPE:     return \"braceless_type\";\n-        case BREAK_PROP:         return \"break\";\n-        case CONTINUE_PROP:      return \"continue\";\n-        case ENUM_PROP:          return \"enum\";\n-        case FUNCTION_PROP:      return \"function\";\n-        case TEMP_PROP:          return \"temp\";\n-        case LOCAL_PROP:         return \"local\";\n-        case CODEOFFSET_PROP:    return \"codeoffset\";\n-        case FIXUPS_PROP:        return \"fixups\";\n-        case VARS_PROP:          return \"vars\";\n         case VAR_ARGS_NAME:      return \"var_args_name\";\n-        case USES_PROP:          return \"uses\";\n-        case REGEXP_PROP:        return \"regexp\";\n-        case CASES_PROP:         return \"cases\";\n-        case DEFAULT_PROP:       return \"default\";\n-        case CASEARRAY_PROP:     return \"casearray\";\n         case SOURCENAME_PROP:    return \"sourcename\";\n-        case TYPE_PROP:          return \"type\";\n-        case SPECIAL_PROP_PROP:  return \"special_prop\";\n-        case LABEL_PROP:         return \"label\";\n-        case FINALLY_PROP:       return \"finally\";\n-        case LOCALCOUNT_PROP:    return \"localcount\";\n-\n-        case TARGETBLOCK_PROP:   return \"targetblock\";\n-        case VARIABLE_PROP:      return \"variable\";\n-        case LASTUSE_PROP:       return \"lastuse\";\n-        case ISNUMBER_PROP:      return \"isnumber\";\n-        case DIRECTCALL_PROP:    return \"directcall\";\n-\n-        case SPECIALCALL_PROP:   return \"specialcall\";\n-        case DEBUGSOURCE_PROP:   return \"debugsource\";\n \n         case JSDOC_INFO_PROP:    return \"jsdoc_info\";\n \n-        case SKIP_INDEXES_PROP:  return \"skip_indexes\";\n         case INCRDECR_PROP:      return \"incrdecr\";\n-        case MEMBER_TYPE_PROP:   return \"member_type\";\n-        case NAME_PROP:          return \"name\";\n         case PARENTHESIZED_PROP: return \"parenthesized\";\n         case QUOTED_PROP:        return \"quoted\";\n         case OPT_ARG_NAME:       return \"opt_arg\";\n           sb.append(\": \");\n           String value;\n           switch (type) {\n-            case TARGETBLOCK_PROP: // can't add this as it recurses\n-              value = \"target block property\";\n-              break;\n-            case LOCAL_BLOCK_PROP: // can't add this as it is dull\n-              value = \"last local block\";\n-              break;\n-            case ISNUMBER_PROP:\n-              switch (x.getIntValue()) {\n-                case BOTH:\n-                  value = \"both\";\n-                  break;\n-                case RIGHT:\n-                  value = \"right\";\n-                  break;\n-                case LEFT:\n-                  value = \"left\";\n-                  break;\n-                default:\n-                  throw Kit.codeBug();\n-              }\n-              break;\n-            case SPECIALCALL_PROP:\n-              switch (x.getIntValue()) {\n-                case SPECIALCALL_EVAL:\n-                  value = \"eval\";\n-                  break;\n-                case SPECIALCALL_WITH:\n-                  value = \"with\";\n-                  break;\n-                default:\n-                  // NON_SPECIALCALL should not be stored\n-                  throw Kit.codeBug();\n-              }\n-              break;\n             default:\n               value = x.toString();\n               break;\n       return false;\n     }\n \n-    if (type == Token.ARRAYLIT) {\n-      try {\n-        int[] indices1 = (int[]) getProp(Node.SKIP_INDEXES_PROP);\n-        int[] indices2 = (int[]) node.getProp(Node.SKIP_INDEXES_PROP);\n-        if (indices1 == null) {\n-          if (indices2 != null) {\n-            return false;\n-          }\n-        } else if (indices2 == null) {\n-          return false;\n-        } else if (indices1.length != indices2.length) {\n-          return false;\n-        } else {\n-          for (int i = 0; i < indices1.length; i++) {\n-            if (indices1[i] != indices2[i]) {\n-              return false;\n-            }\n-          }\n-        }\n-      } catch (Exception e) {\n-        return false;\n-      }\n-    } else if (type == Token.INC || type == Token.DEC) {\n+    if (type == Token.INC || type == Token.DEC) {\n       int post1 = this.getIntProp(INCRDECR_PROP);\n       int post2 = node.getIntProp(INCRDECR_PROP);\n       if (post1 != post2) {\n     }\n \n     return true;\n-  }\n-\n-  public boolean hasSideEffects() {\n-    switch (type) {\n-      case Token.COMMA:\n-        if (last != null)\n-          return last.hasSideEffects();\n-        else\n-          return true;\n-\n-      case Token.HOOK:\n-        if (first == null || first.next == null || first.next.next == null) {\n-          Kit.codeBug();\n-        }\n-        return first.next.hasSideEffects() && first.next.next.hasSideEffects();\n-\n-      case Token.ERROR: // Avoid cascaded error messages\n-      case Token.EXPR_RESULT:\n-      case Token.ASSIGN:\n-      case Token.ASSIGN_ADD:\n-      case Token.ASSIGN_SUB:\n-      case Token.ASSIGN_MUL:\n-      case Token.ASSIGN_DIV:\n-      case Token.ASSIGN_MOD:\n-      case Token.ASSIGN_BITOR:\n-      case Token.ASSIGN_BITXOR:\n-      case Token.ASSIGN_BITAND:\n-      case Token.ASSIGN_LSH:\n-      case Token.ASSIGN_RSH:\n-      case Token.ASSIGN_URSH:\n-      case Token.RETURN:\n-      case Token.NEW:\n-      case Token.DELPROP:\n-      case Token.CALL:\n-      case Token.THROW:\n-      case Token.TRY:\n-      case Token.INC:\n-      case Token.DEC:\n-      case Token.IF:\n-      case Token.ELSE:\n-      case Token.SWITCH:\n-      case Token.WHILE:\n-      case Token.DO:\n-      case Token.FOR:\n-      case Token.BREAK:\n-      case Token.CONTINUE:\n-      case Token.VAR:\n-      case Token.CONST:\n-      case Token.WITH:\n-      case Token.CATCH:\n-      case Token.FINALLY:\n-      case Token.BLOCK:\n-      case Token.LABEL:\n-        return true;\n-\n-      default:\n-        return false;\n-    }\n   }\n \n   /**", "timestamp": 1320708532, "metainfo": ""}