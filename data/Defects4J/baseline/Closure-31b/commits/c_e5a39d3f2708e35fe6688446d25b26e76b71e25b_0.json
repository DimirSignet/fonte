{"sha": "e5a39d3f2708e35fe6688446d25b26e76b71e25b", "log": "fix a minor regression in how local variables are flowed  R=acleung DELTA=41  (39 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3464   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n     scope.inferSlotType(varName, varType);\n   }\n \n-  private static boolean isUnflowable(Var v) {\n-    return v != null && v.isLocal() && v.isMarkedEscaped();\n+  private boolean isUnflowable(Var v) {\n+    return v != null && v.isLocal() && v.isMarkedEscaped() &&\n+        // It's OK to flow a variable in the scope where it's escaped.\n+        v.getScope() == syntacticScope;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \" function g() { x = null; };\\n\" +\n         \" function h() { return x == null; }\" +\n         \" return h();\" +\n+        \"}\");\n+  }\n+\n+  public void testInnerFunction10() throws Exception {\n+    testTypes(\n+        \"function f() {\" +\n+        \"  /** @type {?number} */ var x = null;\" +\n+        \"  /** @return {string} */\" +\n+        \"  function g() {\" +\n+        \"    if (!x) {\" +\n+        \"      x = 1;\" +\n+        \"    }\" +\n+        \"    return x;\" +\n+        \"  }\" +\n+        \"}\",\n+        \"inconsistent return type\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: string\");\n+  }\n+\n+  public void testInnerFunction11() throws Exception {\n+    // TODO(nicksantos): This is actually bad inference, because\n+    // h sets x to null. We should fix this, but for now we do it\n+    // this way so that we don't break existing binaries. We will\n+    // need to change TypeInference#isUnflowable to fix this.\n+    testTypes(\n+        \"function f() {\" +\n+        \"  /** @type {?number} */ var x = null;\" +\n+        \"  /** @return {number} */\" +\n+        \"  function g() {\" +\n+        \"    x = 1;\" +\n+        \"    h();\" +\n+        \"    return x;\" +\n+        \"  }\" +\n+        \"  function h() {\" +\n+        \"    x = null;\" +\n+        \"  }\" +\n         \"}\");\n   }\n ", "timestamp": 1318538284, "metainfo": ""}