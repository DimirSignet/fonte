{"sha": "f9d8ba4dffcd00329d5197aba72d1b7403e1d4c4", "log": "Remove the removeConstantExpression option as it is now redundant.  R=acleung DELTA=48  (1 added, 44 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=237411   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n     options.inlineLocalFunctions = true;\n     options.checkGlobalThisLevel = CheckLevel.OFF;\n     options.foldConstants = true;\n-    options.removeConstantExpressions = true;\n     options.coalesceVariableNames = true;\n     options.deadAssignmentElimination = true;\n     options.collapseVariableDeclarations = true;\n     // All the safe optimizations.\n     options.closurePass = true;\n     options.foldConstants = true;\n-    options.removeConstantExpressions = true;\n     options.coalesceVariableNames = true;\n     options.deadAssignmentElimination = true;\n     options.extractPrototypeMemberDeclarations = true;\n     options.inlineLocalFunctions = true;\n     options.inlineGetters = true;\n     options.inlineVariables = true;\n-    options.removeConstantExpressions = true;\n     options.computeFunctionSideEffects = true;\n     \n     // Remove unused vars also removes unused functions.\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /** Folds constants (e.g. (2 + 3) to 5) */\n   public boolean foldConstants;\n-\n-  public boolean removeConstantExpressions;\n \n   public boolean deadAssignmentElimination;\n \n \n     // Optimizations\n     foldConstants = false;\n-    removeConstantExpressions = false;\n     coalesceVariableNames = false;\n     deadAssignmentElimination = false;\n     inlineConstantVars = false;\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       passes.add(inlineConstants);\n     }\n \n-    if (options.removeConstantExpressions) {\n-      passes.add(removeConstantExpressions);\n-    }\n-\n     if (options.foldConstants) {\n       // These used to be one pass.\n       passes.add(minimizeExitPoints);\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new InlineVariables(\n           compiler, InlineVariables.Mode.CONSTANTS_ONLY, true);\n-    }\n-  };\n-\n-  /**\n-   * Simplify expressions by removing the parts that have no side effects.\n-   */\n-  private final PassFactory removeConstantExpressions =\n-      new PassFactory(\"removeConstantExpressions\", false) {\n-    @Override\n-    protected CompilerPass createInternal(AbstractCompiler compiler) {\n-      return new RemoveConstantExpressions(compiler);\n     }\n   };\n ", "timestamp": 1285002894, "metainfo": ""}