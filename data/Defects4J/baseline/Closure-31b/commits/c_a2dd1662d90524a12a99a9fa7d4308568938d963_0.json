{"sha": "a2dd1662d90524a12a99a9fa7d4308568938d963", "log": "Do much better at \"this\" inference.   Tested: yes  R=acleung DELTA=119  (64 added, 37 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3171   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n \n   /**\n    * Infers the type of {@code this}.\n-   * @param type The type of this.\n+   * @param type The type of this if the info is missing.\n    */\n   FunctionTypeBuilder inferThisType(JSDocInfo info, JSType type) {\n     // Look at the @this annotation first.\n-    inferThisType(info, (Node) null);\n+    inferThisType(info);\n \n     if (thisType == null) {\n       ObjectType objType = ObjectType.cast(type);\n   /**\n    * Infers the type of {@code this}.\n    * @param info The JSDocInfo for this function.\n-   * @param owner The node for the object whose prototype \"owns\" this function.\n-   *     For example, {@code A} in the expression {@code A.prototype.foo}. May\n-   *     be null to indicate that this is not a prototype property.\n-   */\n-  FunctionTypeBuilder inferThisType(JSDocInfo info,\n-      @Nullable Node owner) {\n+   */\n+  FunctionTypeBuilder inferThisType(JSDocInfo info) {\n     ObjectType maybeThisType = null;\n     if (info != null && info.hasThisType()) {\n       maybeThisType = ObjectType.cast(\n     if (maybeThisType != null) {\n       thisType = maybeThisType;\n       thisType.setValidator(new ThisTypeValidator());\n-    } else if (owner != null &&\n-               (info == null || !info.hasType())) {\n-      // If the function is of the form:\n-      // x.prototype.y = function() {}\n-      // then we can assume \"x\" is the @this type. On the other hand,\n-      // if it's of the form:\n-      // /** @type {Function} */ x.prototype.y;\n-      // then we should not give it a @this type.\n-      String ownerTypeName = owner.getQualifiedName();\n-      Var ownerVar = scope.getVar(ownerTypeName);\n-      JSType ownerType = ownerVar == null ? null : ownerVar.getType();\n-      FunctionType ownerFnType = JSType.toMaybeFunctionType(ownerType);\n-      ObjectType instType =\n-          ownerFnType == null || ownerFnType.isOrdinaryFunction() ?\n-          null : ownerFnType.getInstanceType();\n-      if (instType != null) {\n-        thisType = instType;\n-      }\n     }\n \n     return this;\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n     return null;\n   }\n \n+  /** Get the owner of the given l-value node. */\n+  static Node getBestLValueOwner(@Nullable Node lValue) {\n+    if (lValue == null || lValue.getParent() == null) {\n+      return null;\n+    }\n+    if (isObjectLitKey(lValue, lValue.getParent())) {\n+      return getBestLValue(lValue.getParent());\n+    } else if (isGet(lValue)) {\n+      return lValue.getFirstChild();\n+    }\n+\n+    return null;\n+  }\n+\n   /** Get the name of the given l-value node. */\n   static String getBestLValueName(@Nullable Node lValue) {\n     if (lValue == null || lValue.getParent() == null) {\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n \n         if (functionType == null) {\n           // Find the type of any overridden function.\n+          Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);\n+          String ownerName = NodeUtil.getBestLValueName(ownerNode);\n+          Var ownerVar = null;\n+          String propName = null;\n+          ObjectType ownerType = null;\n+          if (ownerName != null) {\n+            ownerVar = scope.getVar(ownerName);\n+            if (ownerVar != null) {\n+              ownerType = ObjectType.cast(ownerVar.getType());\n+            }\n+            if (name != null) {\n+              propName = name.substring(ownerName.length() + 1);\n+            }\n+          }\n+\n           FunctionType overriddenPropType = null;\n-          if (lvalueNode != null &&\n-              lvalueNode.getType() == Token.GETPROP &&\n-              lvalueNode.isQualifiedName()) {\n-            Var var = scope.getVar(\n-                lvalueNode.getFirstChild().getQualifiedName());\n-            if (var != null) {\n-              ObjectType ownerType = ObjectType.cast(var.getType());\n-              if (ownerType != null) {\n-                String propName = lvalueNode.getLastChild().getString();\n-                overriddenPropType =\n-                    findOverriddenFunction(ownerType, propName);\n-              }\n-            }\n+          if (ownerType != null && propName != null) {\n+            overriddenPropType =\n+                findOverriddenFunction(ownerType, propName);\n           }\n \n           FunctionTypeBuilder builder =\n               .inferReturnType(info)\n               .inferInheritance(info);\n \n+\n           // Infer the context type.\n           boolean searchedForThisType = false;\n-          if (lvalueNode != null &&\n-              lvalueNode.getType() == Token.GETPROP) {\n-            Node objNode = lvalueNode.getFirstChild();\n-            if (objNode.getType() == Token.GETPROP &&\n-                objNode.getLastChild().getString().equals(\"prototype\")) {\n-              builder.inferThisType(info, objNode.getFirstChild());\n-              searchedForThisType = true;\n-            } else if (objNode.getType() == Token.THIS) {\n-              builder.inferThisType(info, objNode.getJSType());\n-              searchedForThisType = true;\n-            }\n+          if (ownerType != null && ownerType.isFunctionPrototypeType()) {\n+            builder.inferThisType(\n+                info, ownerType.getOwnerFunction().getInstanceType());\n+            searchedForThisType = true;\n+          } else if (ownerNode != null && ownerNode.getType() == Token.THIS) {\n+            builder.inferThisType(info, ownerNode.getJSType());\n+            searchedForThisType = true;\n           }\n \n           if (!searchedForThisType) {\n-            builder.inferThisType(info, (Node) null);\n+            builder.inferThisType(info);\n           }\n \n           functionType = builder\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"}\",\n         \"actual parameter 1 of f does not match formal parameter\\n\" +\n         \"found   : Date\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testThis12() throws Exception {\n+    testTypes(\n+        \"/** @param {number} x */ function f(x) {}\" +\n+        \"/** @constructor */ function Ctor() {}\" +\n+        \"Ctor.prototype['method'] = function() {\" +\n+        \"  f(this);\" +\n+        \"}\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : Ctor\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testThis13() throws Exception {\n+    testTypes(\n+        \"/** @param {number} x */ function f(x) {}\" +\n+        \"/** @constructor */ function Ctor() {}\" +\n+        \"Ctor.prototype = {\" +\n+        \"  method: function() {\" +\n+        \"    f(this);\" +\n+        \"  }\" +\n+        \"};\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : Ctor\\n\" +\n         \"required: number\");\n   }\n \n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n     assertEquals(\"Window\", x.toString());\n     assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));\n-    assertEquals(\"function (?): undefined\",\n+    assertEquals(\"function (this:Window, ?): undefined\",\n         x.getPropertyType(\"alert\").toString());\n     assertFalse(x.isPropertyTypeDeclared(\"alert\"));\n \n \n     assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());\n \n-    // should be: \"function (this:I): undefined\"\n-    assertEquals(\"function (): undefined\",\n+    assertEquals(\"function (this:I): undefined\",\n         iPrototype.getPropertyType(\"baz\").toString());\n \n     // should not be null\n \n     assertEquals(\n         // should be: \"function (this:Foo, number): ?\"\n-        \"function (number): ?\",\n+        \"function (this:Foo, number): ?\",\n         proto.getPropertyType(\"bar\").toString());\n   }\n ", "timestamp": 1314803481, "metainfo": ""}