{"sha": "639482a81e6b8fb8981ef9596c04df494dc4cc54", "log": "Allow a symbol to be provided and required in the same file a lot of teams cat files together, and we've allowed this for a long time.  R=acleung DELTA=41  (27 added, 4 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4345   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DependencyOptions.java\n+++ b/src/com/google/javascript/jscomp/DependencyOptions.java\n    * If true, we will sort the input files based on dependency information\n    * in them. Otherwise, we will use the order of files specified\n    * on the command-line.\n+   * @return this for easy building.\n    */\n-  public void setDependencySorting(boolean enabled) {\n+  public DependencyOptions setDependencySorting(boolean enabled) {\n     this.sortDependencies = enabled;\n+    return this;\n   }\n \n   /**\n    *\n    * This does not affect how we handle files that do not provide symbols.\n    * See setMoocherDropping for information on how these are handled.\n+   *\n+   * @return this for easy chaining.\n    */\n-  public void setDependencyPruning(boolean enabled) {\n+  public DependencyOptions setDependencyPruning(boolean enabled) {\n     this.pruneDependencies = enabled;\n+    return this;\n   }\n \n   /**\n    *\n    * Notice that this option only makes sense if dependency pruning is on,\n    * and a set of entry points is specified.\n+   *\n+   * @return this for easy chaining.\n    */\n-  public void setMoocherDropping(boolean enabled) {\n+  public DependencyOptions setMoocherDropping(boolean enabled) {\n     this.dropMoochers = enabled;\n+    return this;\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n+++ b/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n     for (INPUT input : inputs) {\n       for (String req : input.getRequires()) {\n         INPUT dep = provideMap.get(req);\n-        if (dep != null) {\n+        if (dep != null && dep != input) {\n           deps.put(input, dep);\n         }\n       }\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     );\n   }\n \n+  public void testProvideRequireSameFile() throws Exception {\n+    CompilerOptions options = createCompilerOptions();\n+    options.setDependencyOptions(\n+        new DependencyOptions()\n+        .setDependencySorting(true));\n+    options.closurePass = true;\n+    test(\n+        options,\n+        \"goog.provide('x');\\ngoog.require('x');\",\n+        \"var x = {};\");\n+  }\n+\n   private void testSame(CompilerOptions options, String original) {\n     testSame(options, new String[] { original });\n   }\n--- a/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n     test(\"goog.provide('x.y.z'); /** @typedef {number} */ x.y.z;\",\n          \"var x = {}; x.y = {}; x.y.z;\");\n   }\n+\n+  public void testProvideRequireSameFile() {\n+    test(\"goog.provide('x');\\ngoog.require('x');\", \"var x = {};\");\n+  }\n }\n--- a/test/com/google/javascript/jscomp/deps/SortedDependenciesTest.java\n+++ b/test/com/google/javascript/jscomp/deps/SortedDependenciesTest.java\n       new SortedDependencies<SimpleDependencyInfo>(\n           Lists.newArrayList(a, b, c));\n       fail(\"expected exception\");\n-    } catch (CircularDependencyException e) {}\n+    } catch (CircularDependencyException e) {\n+      assertEquals(\"a -> a\", e.getMessage());\n+    }\n   }\n \n-  public void testSort4() {\n+  public void testSort4() throws Exception {\n+    // Check the degenerate case.\n     SimpleDependencyInfo a = new SimpleDependencyInfo(\n         \"a\", \"a\", provides(\"a\"), requires(\"a\"));\n-\n-    try {\n-      new SortedDependencies<SimpleDependencyInfo>(\n-          Lists.newArrayList(a));\n-      fail(\"expected exception\");\n-    } catch (CircularDependencyException e){\n-      assertEquals(\"a -> a\", e.getMessage());\n-    }\n+    assertSortedDeps(\n+        ImmutableList.of(a),\n+        ImmutableList.of(a),\n+        ImmutableList.of(a));\n   }\n \n   public void testSort5() throws Exception {", "timestamp": 1331324308, "metainfo": ""}