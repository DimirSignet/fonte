{"sha": "01ca21405950e0fcc2a724cb34885f930c86c5e2", "log": "Bugzilla Bug 27781 \t  \tBase64 chunked encoding not compliant with RFC 2045 section 2.1 CRLF   ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n  * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n  * @author Apache Software Foundation\n  * @since 1.0-dev\n- * @version $Id: Base64.java,v 1.18 2004/03/18 17:34:56 ggregory Exp $\n+ * @version $Id: Base64.java,v 1.19 2004/03/24 18:37:25 ggregory Exp $\n  */\n public class Base64 implements BinaryEncoder, BinaryDecoder {\n \n     /**\n-     * Chunk size according to RFC 2045.\n+     * Chunk size per RFC 2045 section 6.8.\n      * \n      * <p>The {@value} character limit does not count the trailing CRLF, but counts \n      * all other characters, including any equal signs.</p>\n      * \n+     * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 6.8</a>\n+     */\n+    static final int CHUNK_SIZE = 76;\n+\n+    /**\n+     * Chunk separator per RFC 2045 section 2.1.\n+     * \n      * @see <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045 section 2.1</a>\n      */\n-    static final int CHUNK_SIZE = 76;\n-\n-    /**\n-     * Chunk separator, we use a newline to separate chunks\n-     * of encoded data (if you ask for it to be chunked).\n-     */\n-    static final byte[] CHUNK_SEPARATOR = \"\\n\".getBytes();\n+    static final byte[] CHUNK_SEPARATOR = \"\\r\\n\".getBytes();\n \n     /**\n      * The base length.\n     }\n \n     /**\n-     * Encodes binary data using the base64 algorithm (this\n-     * does not \"chunk\" the output).\n+     * Encodes binary data using the base64 algorithm but\n+     * does not chunk the output.\n      *\n      * @param binaryData binary data to encode\n      * @return Base64 characters\n     }\n \n     /**\n-     * Encodes hex octects into Base64.\n+     * Encodes binary data using the base64 algorithm, optionally\n+     * chunking the output into 76 character blocks.\n      *\n      * @param binaryData Array containing binary data to encode.\n      * @param isChunked if isChunked is true this encoder will chunk\n--- a/src/test/org/apache/commons/codec/binary/Base64Test.java\n+++ b/src/test/org/apache/commons/codec/binary/Base64Test.java\n import junit.framework.TestCase;\n \n /**\n- * @version $Revision: 1.13 $ $Date: 2004/03/17 19:28:37 $\n+ * @version $Revision: 1.14 $ $Date: 2004/03/24 18:37:25 $\n  * @author Apache Software Foundation\n  */\n public class Base64Test extends TestCase {\n     public void testDecodePadOnly() {\n         assertTrue(Base64.decodeBase64(\"====\".getBytes()).length == 0);\n         assertEquals(\"\", new String(Base64.decodeBase64(\"====\".getBytes())));\n+    }\n+    \n+    public void testDecodePadOnlyChunked() {\n+        assertTrue(Base64.decodeBase64(\"====\\n\".getBytes()).length == 0);\n+        assertEquals(\"\", new String(Base64.decodeBase64(\"====\\n\".getBytes())));\n     }\n     \n     // encode/decode random arrays from size 0 to size 11\n             byte[] data2 = Base64.decodeBase64(enc);\n             assertTrue(Arrays.equals(data,data2));\n         }\n+    }\n+\n+    /**\n+     * Tests RFC 2045 section 2.1 CRLF definition.\n+     */\n+    public void testRfc2045Section2Dot1CrLfDefinition() {\n+        assertTrue(Arrays.equals(new byte[] {13, 10}, Base64.CHUNK_SEPARATOR));\n+    }\n+\n+    /**\n+     * Tests RFC 2045 section 6.8 chuck size definition.\n+     */\n+    public void testRfc2045Section6Dot8ChunkSizeDefinition() {\n+        assertEquals(76, Base64.CHUNK_SIZE);\n     }\n \n     public void testSingletons() {\n         assertEquals(\"aA==\",new String(Base64.encodeBase64(new byte[] { (byte)104 })));\n     }\n \n+    public void testSingletonsChunked() {\n+        assertEquals(\"AA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0 })));\n+        assertEquals(\"AQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)1 })));\n+        assertEquals(\"Ag==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)2 })));\n+        assertEquals(\"Aw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)3 })));\n+        assertEquals(\"BA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)4 })));\n+        assertEquals(\"BQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)5 })));\n+        assertEquals(\"Bg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)6 })));\n+        assertEquals(\"Bw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)7 })));\n+        assertEquals(\"CA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)8 })));\n+        assertEquals(\"CQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)9 })));\n+        assertEquals(\"Cg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)10 })));\n+        assertEquals(\"Cw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)11 })));\n+        assertEquals(\"DA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)12 })));\n+        assertEquals(\"DQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)13 })));\n+        assertEquals(\"Dg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)14 })));\n+        assertEquals(\"Dw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)15 })));\n+        assertEquals(\"EA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)16 })));\n+        assertEquals(\"EQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)17 })));\n+        assertEquals(\"Eg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)18 })));\n+        assertEquals(\"Ew==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)19 })));\n+        assertEquals(\"FA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)20 })));\n+        assertEquals(\"FQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)21 })));\n+        assertEquals(\"Fg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)22 })));\n+        assertEquals(\"Fw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)23 })));\n+        assertEquals(\"GA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)24 })));\n+        assertEquals(\"GQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)25 })));\n+        assertEquals(\"Gg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)26 })));\n+        assertEquals(\"Gw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)27 })));\n+        assertEquals(\"HA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)28 })));\n+        assertEquals(\"HQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)29 })));\n+        assertEquals(\"Hg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)30 })));\n+        assertEquals(\"Hw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)31 })));\n+        assertEquals(\"IA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)32 })));\n+        assertEquals(\"IQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)33 })));\n+        assertEquals(\"Ig==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)34 })));\n+        assertEquals(\"Iw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)35 })));\n+        assertEquals(\"JA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)36 })));\n+        assertEquals(\"JQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)37 })));\n+        assertEquals(\"Jg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)38 })));\n+        assertEquals(\"Jw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)39 })));\n+        assertEquals(\"KA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)40 })));\n+        assertEquals(\"KQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)41 })));\n+        assertEquals(\"Kg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)42 })));\n+        assertEquals(\"Kw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)43 })));\n+        assertEquals(\"LA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)44 })));\n+        assertEquals(\"LQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)45 })));\n+        assertEquals(\"Lg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)46 })));\n+        assertEquals(\"Lw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)47 })));\n+        assertEquals(\"MA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)48 })));\n+        assertEquals(\"MQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)49 })));\n+        assertEquals(\"Mg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)50 })));\n+        assertEquals(\"Mw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)51 })));\n+        assertEquals(\"NA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)52 })));\n+        assertEquals(\"NQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)53 })));\n+        assertEquals(\"Ng==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)54 })));\n+        assertEquals(\"Nw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)55 })));\n+        assertEquals(\"OA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)56 })));\n+        assertEquals(\"OQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)57 })));\n+        assertEquals(\"Og==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)58 })));\n+        assertEquals(\"Ow==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)59 })));\n+        assertEquals(\"PA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)60 })));\n+        assertEquals(\"PQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)61 })));\n+        assertEquals(\"Pg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)62 })));\n+        assertEquals(\"Pw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)63 })));\n+        assertEquals(\"QA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)64 })));\n+        assertEquals(\"QQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)65 })));\n+        assertEquals(\"Qg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)66 })));\n+        assertEquals(\"Qw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)67 })));\n+        assertEquals(\"RA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)68 })));\n+        assertEquals(\"RQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)69 })));\n+        assertEquals(\"Rg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)70 })));\n+        assertEquals(\"Rw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)71 })));\n+        assertEquals(\"SA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)72 })));\n+        assertEquals(\"SQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)73 })));\n+        assertEquals(\"Sg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)74 })));\n+        assertEquals(\"Sw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)75 })));\n+        assertEquals(\"TA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)76 })));\n+        assertEquals(\"TQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)77 })));\n+        assertEquals(\"Tg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)78 })));\n+        assertEquals(\"Tw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)79 })));\n+        assertEquals(\"UA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)80 })));\n+        assertEquals(\"UQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)81 })));\n+        assertEquals(\"Ug==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)82 })));\n+        assertEquals(\"Uw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)83 })));\n+        assertEquals(\"VA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)84 })));\n+        assertEquals(\"VQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)85 })));\n+        assertEquals(\"Vg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)86 })));\n+        assertEquals(\"Vw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)87 })));\n+        assertEquals(\"WA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)88 })));\n+        assertEquals(\"WQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)89 })));\n+        assertEquals(\"Wg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)90 })));\n+        assertEquals(\"Ww==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)91 })));\n+        assertEquals(\"XA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)92 })));\n+        assertEquals(\"XQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)93 })));\n+        assertEquals(\"Xg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)94 })));\n+        assertEquals(\"Xw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)95 })));\n+        assertEquals(\"YA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)96 })));\n+        assertEquals(\"YQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)97 })));\n+        assertEquals(\"Yg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)98 })));\n+        assertEquals(\"Yw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)99 })));\n+        assertEquals(\"ZA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)100 })));\n+        assertEquals(\"ZQ==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)101 })));\n+        assertEquals(\"Zg==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)102 })));\n+        assertEquals(\"Zw==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)103 })));\n+        assertEquals(\"aA==\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)104 })));\n+    }\n+\n     public void testTriplets() {\n         assertEquals(\"AAAA\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)0 })));\n         assertEquals(\"AAAB\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)1 })));\n         assertEquals(\"AAA/\",new String(Base64.encodeBase64(new byte[] { (byte)0, (byte)0, (byte)63 })));\n     }\n \n+    public void testTripletsChunked() {\n+        assertEquals(\"AAAA\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)0 })));\n+        assertEquals(\"AAAB\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)1 })));\n+        assertEquals(\"AAAC\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)2 })));\n+        assertEquals(\"AAAD\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)3 })));\n+        assertEquals(\"AAAE\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)4 })));\n+        assertEquals(\"AAAF\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)5 })));\n+        assertEquals(\"AAAG\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)6 })));\n+        assertEquals(\"AAAH\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)7 })));\n+        assertEquals(\"AAAI\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)8 })));\n+        assertEquals(\"AAAJ\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)9 })));\n+        assertEquals(\"AAAK\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)10 })));\n+        assertEquals(\"AAAL\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)11 })));\n+        assertEquals(\"AAAM\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)12 })));\n+        assertEquals(\"AAAN\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)13 })));\n+        assertEquals(\"AAAO\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)14 })));\n+        assertEquals(\"AAAP\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)15 })));\n+        assertEquals(\"AAAQ\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)16 })));\n+        assertEquals(\"AAAR\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)17 })));\n+        assertEquals(\"AAAS\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)18 })));\n+        assertEquals(\"AAAT\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)19 })));\n+        assertEquals(\"AAAU\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)20 })));\n+        assertEquals(\"AAAV\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)21 })));\n+        assertEquals(\"AAAW\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)22 })));\n+        assertEquals(\"AAAX\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)23 })));\n+        assertEquals(\"AAAY\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)24 })));\n+        assertEquals(\"AAAZ\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)25 })));\n+        assertEquals(\"AAAa\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)26 })));\n+        assertEquals(\"AAAb\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)27 })));\n+        assertEquals(\"AAAc\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)28 })));\n+        assertEquals(\"AAAd\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)29 })));\n+        assertEquals(\"AAAe\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)30 })));\n+        assertEquals(\"AAAf\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)31 })));\n+        assertEquals(\"AAAg\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)32 })));\n+        assertEquals(\"AAAh\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)33 })));\n+        assertEquals(\"AAAi\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)34 })));\n+        assertEquals(\"AAAj\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)35 })));\n+        assertEquals(\"AAAk\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)36 })));\n+        assertEquals(\"AAAl\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)37 })));\n+        assertEquals(\"AAAm\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)38 })));\n+        assertEquals(\"AAAn\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)39 })));\n+        assertEquals(\"AAAo\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)40 })));\n+        assertEquals(\"AAAp\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)41 })));\n+        assertEquals(\"AAAq\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)42 })));\n+        assertEquals(\"AAAr\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)43 })));\n+        assertEquals(\"AAAs\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)44 })));\n+        assertEquals(\"AAAt\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)45 })));\n+        assertEquals(\"AAAu\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)46 })));\n+        assertEquals(\"AAAv\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)47 })));\n+        assertEquals(\"AAAw\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)48 })));\n+        assertEquals(\"AAAx\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)49 })));\n+        assertEquals(\"AAAy\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)50 })));\n+        assertEquals(\"AAAz\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)51 })));\n+        assertEquals(\"AAA0\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)52 })));\n+        assertEquals(\"AAA1\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)53 })));\n+        assertEquals(\"AAA2\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)54 })));\n+        assertEquals(\"AAA3\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)55 })));\n+        assertEquals(\"AAA4\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)56 })));\n+        assertEquals(\"AAA5\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)57 })));\n+        assertEquals(\"AAA6\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)58 })));\n+        assertEquals(\"AAA7\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)59 })));\n+        assertEquals(\"AAA8\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)60 })));\n+        assertEquals(\"AAA9\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)61 })));\n+        assertEquals(\"AAA+\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)62 })));\n+        assertEquals(\"AAA/\\r\\n\",new String(Base64.encodeBase64Chunked(new byte[] { (byte)0, (byte)0, (byte)63 })));\n+    }\n+\n     public void testKnownEncodings() {\n         assertEquals(\"VGhlIHF1aWNrIGJyb3duIGZveCBqdW1wZWQgb3ZlciB0aGUgbGF6eSBkb2dzLg==\",new String(Base64.encodeBase64(\"The quick brown fox jumped over the lazy dogs.\".getBytes())));\n-\tassertEquals(\"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\nbGFoIGJsYWg=\\n\",new String(Base64.encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\".getBytes())));\n+\tassertEquals(\"YmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJs\\r\\nYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFo\\r\\nIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBibGFoIGJsYWggYmxhaCBi\\r\\nbGFoIGJsYWg=\\r\\n\",new String(Base64.encodeBase64Chunked(\"blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah blah\".getBytes())));\n         assertEquals(\"SXQgd2FzIHRoZSBiZXN0IG9mIHRpbWVzLCBpdCB3YXMgdGhlIHdvcnN0IG9mIHRpbWVzLg==\",new String(Base64.encodeBase64(\"It was the best of times, it was the worst of times.\".getBytes())));\n         assertEquals(\"aHR0cDovL2pha2FydGEuYXBhY2hlLm9yZy9jb21tbW9ucw==\",new String(Base64.encodeBase64(\"http://jakarta.apache.org/commmons\".getBytes())));\n         assertEquals(\"QWFCYkNjRGRFZUZmR2dIaElpSmpLa0xsTW1Obk9vUHBRcVJyU3NUdFV1VnZXd1h4WXlaeg==\",new String(Base64.encodeBase64(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\".getBytes())));\n \n         String dest = new String( decodedWithWS );\n \n-        assertTrue( \"Dest string doesn't eausl original\", \n+        assertTrue( \"Dest string doesn't equals the original\", \n                     dest.equals( orig ) );\n     }\n ", "timestamp": 1080153565, "metainfo": ""}