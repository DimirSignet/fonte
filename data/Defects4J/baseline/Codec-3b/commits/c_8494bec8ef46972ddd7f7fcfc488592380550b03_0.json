{"sha": "8494bec8ef46972ddd7f7fcfc488592380550b03", "log": "Update the Javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64InputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64InputStream.java\n      * @param doEncode      true if we should encode all data read from us,\n      *                      false if we should decode.\n      * @param lineLength    If doEncode is true, each line of encoded\n-     *                      data will contain lineLength characters.  If\n-     *                      doEncode is false, lineLength is ignored.\n+     *                      data will contain lineLength characters.\n+     *                      If lineLength <=0, the encoded data is not divided into lines.\n+     *                      If doEncode is false, lineLength is ignored.\n      * @param lineSeparator If doEncode is true, each line of encoded\n-     *                      data will be terminated with this byte sequence\n-     *                      (e.g. \\r\\n).  If doEncode is false lineSeparator\n-     *                      is ignored.\n+     *                      data will be terminated with this byte sequence (e.g. \\r\\n).\n+     *                      If lineLength <= 0, the lineSeparator is not used.  \n+     *                      If doEncode is false lineSeparator is ignored.\n      */\n     public Base64InputStream(InputStream in, boolean doEncode, int lineLength, byte[] lineSeparator) {\n         super(in);\n \n     /**\n      * Reads one <code>byte</code> from this input stream.\n+     * \n+     * @return the byte as an integer in the range 0 to 255\n      * Returns -1 if EOF has been reached.\n      */\n     public int read() throws IOException {\n      * Attempts to read <code>len</code> bytes into the specified\n      * <code>b</code> array starting at <code>offset</code> from\n      * this InputStream.\n-     *\n+     * \n+     * @param b destination byte array\n+     * @param offset where to start writing the bytes\n+     * @param len maximum number of bytes to read\n+     * \n+     * @return number of bytes read\n      * @throws IOException if an I/O error occurs.\n+     * @throws NullPointerException if the byte array parameter is null\n+     * @throws IndexOutOfBoundsException if offset, len or buffer size are invalid\n      */\n     public int read(byte b[], int offset, int len) throws IOException {\n         if (b == null) {\n--- a/src/java/org/apache/commons/codec/binary/Base64OutputStream.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64OutputStream.java\n      * @param doEncode      true if we should encode all data written to us,\n      *                      false if we should decode.\n      * @param lineLength    If doEncode is true, each line of encoded\n-     *                      data will contain lineLength characters.  If\n-     *                      doEncode is false, lineLength is ignored.\n+     *                      data will contain lineLength characters.  \n+     *                      If lineLength <=0, the encoded data is not divided into lines.\n+     *                      If doEncode is false, lineLength is ignored.\n      * @param lineSeparator If doEncode is true, each line of encoded\n-     *                      data will be terminated with this byte sequence\n-     *                      (e.g. \\r\\n).  If doEncode is false lineSeparator\n-     *                      is ignored.\n+     *                      data will be terminated with this byte sequence (e.g. \\r\\n).  \n+     *                      If lineLength <= 0, the lineSeparator is not used.\n+     *                      If doEncode is false lineSeparator is ignored.\n      */\n     public Base64OutputStream(OutputStream out, boolean doEncode, int lineLength, byte[] lineSeparator) {\n         super(out);\n      * <code>b</code> array starting at <code>offset</code> to\n      * this output stream.\n      *\n+     * @param b source byte array\n+     * @param offset where to start reading the bytes\n+     * @param len maximum number of bytes to write\n+     * \n      * @throws IOException if an I/O error occurs.\n+     * @throws NullPointerException if the byte array parameter is null\n+     * @throws IndexOutOfBoundsException if offset, len or buffer size are invalid\n      */\n     public void write(byte b[], int offset, int len) throws IOException {\n         if (b == null) {\n      *\n      * @throws IOException if an I/O error occurs.\n      */\n-    public void flush() throws IOException { flush(true); }\n+    public void flush() throws IOException {\n+        flush(true); \n+    }\n \n     /**\n      * Closes this output stream and releases any system resources", "timestamp": 1214011430, "metainfo": ""}