{"sha": "124b73fed7492b3118c4ea43c28dc0b1bceda032", "log": "Removed all checkstyle violations from Base64, and the language encoders.  Most of the checkstyle violations fixed were violations dealing with the placement of operators on a newline instead of on the end of the previous line.  In addition to the checkstyle fixes, DoubleMetaphone now handles two cases C with a Cedilla and N with a tilde (ene).   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n  * </ul>\n  * \n  * @author <a href=\"mailto:ben@walstrum.com\">Benjamin Walstrum</a>\n- * @version $Id: DoubleMetaphone.java,v 1.11 2003/10/05 21:45:48 tobrien Exp $\n+ * @version $Id: DoubleMetaphone.java,v 1.12 2003/10/12 19:56:13 tobrien Exp $\n  */\n public class DoubleMetaphone implements StringEncoder {\n \n                 break;\n             case 'B':\n                 result.append('P');\n-                index = charAt(value, index + 1) == 'B' \n-                    ? index + 2 \n-                    : index + 1;\n-                break;\n-                // FIXME: Removed support for this character until \n-                // Unicode code is found.\n-                /*            case '\u00c7':\n+                index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\n+                break;\n+            case '\\u00C7':\n+                // A C with a Cedilla\n                 result.append('S');\n                 index++;\n-                break; */\n+                break; \n             case 'C':\n                 index = handleC(value, result, index);\n                 break;\n                 break;\n             case 'F':\n                 result.append('F');\n-                index = charAt(value, index + 1) == 'F' \n-                    ? index + 2 \n-                    : index + 1;\n+                index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\n                 break;\n             case 'G':\n                 index = handleG(value, result, index, slavoGermanic);\n                 break;\n             case 'K':\n                 result.append('K');\n-                index = charAt(value, index + 1) == 'K' \n-                    ? index + 2 \n-                    : index + 1;\n+                index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\n                 break;\n             case 'L':\n                 index = handleL(value, result, index);\n                 break;\n             case 'N':\n                 result.append('N');\n-                index = charAt(value, index + 1) == 'N' \n-                    ? index + 2 \n-                    : index + 1;\n-                break;\n-                // FIXME: Removed support for this character until we\n-                // find the Unicode code\n-                /*\n-            case '\u00d1':\n+                index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\n+                break;\n+            case '\\u00D1':\n+                // N with a tilde (spanish ene)\n                 result.append('N');\n                 index++;\n-                break; */\n+                break;\n             case 'P':\n                 index = handleP(value, result, index);\n                 break;\n             case 'Q':\n                 result.append('K');\n-                index = charAt(value, index + 1) == 'Q' \n-                    ? index + 2 \n-                    : index + 1;\n+                index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\n                 break;\n             case 'R':\n                 index = handleR(value, result, index, slavoGermanic);\n                 break;\n             case 'V':\n                 result.append('F');\n-                index = charAt(value, index + 1) == 'V' \n-                    ? index + 2 \n-                    : index + 1;\n+                index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\n                 break;\n             case 'W':\n                 index = handleW(value, result, index);\n     public Object encode(Object obj) throws EncoderException {\n \n         if (!(obj instanceof String)) {\n-            throw new EncoderException(\"Parameter supplied to Metaphone \" \n-                                       + \"encode is not of type \" \n-                                       + \"java.lang.String\"); \n+            throw new EncoderException(\"Parameter supplied to Metaphone encode is not of type java.lang.String\"); \n         } else {\n             return doubleMetaphone((String) obj);\n         }\n         } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n             result.append(\"KL\", \"L\");\n             index += 2;\n-        } else if (index == 0 \n-                   && (charAt(value, index + 1) == 'Y' \n-                       || contains(value, \n-                                   index + 1, \n-                                   2, \n-                                   ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n+        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n             //-- -ges-, -gep-, -gel-, -gie- at beginning --//\n             result.append('K', 'J');\n             index += 2;\n-        } else if ((contains(value, index + 1, 2, \"ER\") \n-                    || charAt(value, index + 1) == 'Y') &&\n+        } else if ((contains(value, index + 1, 2, \"ER\") || \n+                    charAt(value, index + 1) == 'Y') &&\n                    !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n                    !contains(value, index - 1, 1, \"E\", \"I\") && \n                    !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n         } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n                    contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n             //-- Italian \"biaggi\" --//\n-            if ((contains(value, 0 ,4, \"VAN \", \"VON \") \n-                 || contains(value, 0, 3, \"SCH\")) ||\n-                contains(value, index + 1, 2, \"ET\")) {\n+            if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) || contains(value, index + 1, 2, \"ET\")) {\n                 //-- obvious germanic --//\n                 result.append('K');\n             } else if (contains(value, index + 1, 4, \"IER\")) {\n                 result.append('K');\n             }\n             index += 2;\n-        } else if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) \n-                   ||\n-                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) \n-                   ||\n+        } else if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n+                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                    (index > 3 && contains(value, index - 4, 1, \"B\", \"H\"))) {\n             //-- Parker's rule (with some further refinements) - \"hugh\"\n             index += 2;\n      */\n     private int handleJ(String value, DoubleMetaphoneResult result, int index, \n                         boolean slavoGermanic) {\n-        if (contains(value, index, 4, \"JOSE\") \n-            || contains(value, 0, 4, \"SAN \")) {\n+        if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) {\n                 //-- obvious Spanish, \"Jose\", \"San Jacinto\" --//\n                 if ((index == 0 && (charAt(value, index + 4) == ' ') || \n                      value.length() == 4) || contains(value, 0, 4, \"SAN \")) {\n             } else {\n                 if (index == 0 && !contains(value, index, 4, \"JOSE\")) {\n                     result.append('J', 'A');\n-                } else if (isVowel(charAt(value, index - 1)) \n-                           && !slavoGermanic \n-                           &&(charAt(value, index + 1) == 'A' || \n-                              charAt(value, index + 1) == 'O')) {\n+                } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && \n+                              (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O')) {\n                     result.append('J', 'H');\n                 } else if (index == value.length() - 1) {\n                     result.append('J', ' ');\n-                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) \n-                           && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n+                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n                     result.append('J');\n                 }\n \n             index += 2;\n         } else {\n             result.append('P');\n-            index = contains(value, index + 1, 1, \"P\", \"B\") \n-                ? index + 2 \n-                : index + 1;\n+            index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;\n         }\n         return index;\n     }\n                 result.append('X');\n             }\n             index += 2;\n-        } else if (contains(value, index, 3, \"SIO\", \"SIA\") \n-                   || contains(value, index, 4, \"SIAN\")) {\n+        } else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\")) {\n             //-- Italian and Armenian --//\n             if (slavoGermanic) {\n                 result.append('S');\n                 result.append('S', 'X');\n             }\n             index += 3;\n-        } else if ((index == 0 \n-                    && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) \n-                   || contains(value, index + 1, 1, \"Z\")) {\n+        } else if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) {\n             //-- german & anglicisations, e.g. \"smith\" match \"schmidt\" //\n             // \"snider\" match \"schneider\" --//\n             //-- also, -sz- in slavic language altho in hungarian it //\n             } else {\n                 result.append('S');\n             }\n-            index = contains(value, index + 1, 1, \"S\", \"Z\") \n-                ? index + 2 \n-                : index + 1;\n+            index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;\n         }\n         return index;\n     }\n                     result.append(\"SK\");\n                 }\n             } else {\n-                if (index == 0 && !isVowel(charAt(value, 3)) \n-                    && charAt(value, 3) != 'W') {\n+                if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W') {\n                     result.append('X', 'S');\n                 } else {\n                     result.append('X');\n             index += 2;\n         } else {\n             result.append('T');\n-            index = contains(value, index + 1, 1, \"T\", \"D\") \n-                ? index + 2 \n-                : index + 1;\n+            index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;\n         }\n         return index;\n     }\n                     result.append('A');\n                 }\n                 index++;\n-            } else if ((index == value.length() - 1 \n-                        && isVowel(charAt(value, index - 1))) ||\n+            } else if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n                        contains(value, index - 1, \n                                 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                        contains(value, 0, 3, \"SCH\")) {\n                 //-- French e.g. breaux --//\n                 result.append(\"KS\");\n             }\n-            index = contains(value, index + 1, 1, \"C\", \"X\") \n-                ? index + 2 \n-                : index + 1;\n+            index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1;\n         }\n         return index;\n     }\n             result.append('J');\n             index += 2;\n         } else {\n-            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") \n-                || (slavoGermanic \n-                    && (index > 0 && charAt(value, index - 1) != 'T'))) {\n+            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) {\n                 result.append(\"S\", \"TS\");\n             } else {\n                 result.append('S');\n                                                                    3, \"SCH\")) ||\n                 contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                 contains(value, index + 2, 1, \"T\", \"S\") ||\n-                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == \n-                  0) &&\n-                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index \n-                  + 1 == value.length() - 1)));\n+                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n+                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));\n     }\n     \n     /**", "timestamp": 1065988573, "metainfo": ""}