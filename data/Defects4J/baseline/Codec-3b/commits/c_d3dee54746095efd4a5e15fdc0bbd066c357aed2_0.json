{"sha": "d3dee54746095efd4a5e15fdc0bbd066c357aed2", "log": "Fix lineSeparator check Octect => Octet  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n             this.encodeSize = 4;\n         }\n         this.decodeSize = encodeSize - 1;\n-        byte[] separator = discardWhitespace(lineSeparator);\n-        if (separator.length > 0 && isArrayByteBase64(separator)) {\n+        if (containsBase64Byte(lineSeparator)) {\n             String sep;\n             try {\n                 sep = new String(lineSeparator, \"UTF-8\");\n     }\n \n     /**\n-     * Returns whether or not the <code>octect</code> is in the base 64 alphabet.\n-     * \n-     * @param octect\n+     * Returns whether or not the <code>octet</code> is in the base 64 alphabet.\n+     * \n+     * @param octet\n      *            The value to test\n      * @return <code>true</code> if the value is defined in the the base 64 alphabet, <code>false</code> otherwise.\n      */\n-    private static boolean isBase64(byte octect) {\n-        return octect == PAD || (octect >= 0 && octect < base64ToInt.length && base64ToInt[octect] != -1);\n+    private static boolean isBase64(byte octet) {\n+        return octet == PAD || (octet >= 0 && octet < base64ToInt.length && base64ToInt[octet] != -1);\n     }\n \n     /**\n      * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet.\n-     * \n-     * @param arrayOctect\n+     * Currently the method treats whitespace as valid.\n+     * \n+     * @param arrayOctet\n      *            byte array to test\n      * @return <code>true</code> if all bytes are valid characters in the Base64 alphabet or if the byte array is\n      *         empty; false, otherwise\n      */\n-    public static boolean isArrayByteBase64(byte[] arrayOctect) {\n-\n-        arrayOctect = discardWhitespace(arrayOctect);\n-\n-        int length = arrayOctect.length;\n+    public static boolean isArrayByteBase64(byte[] arrayOctet) {\n+\n+        arrayOctet = discardWhitespace(arrayOctet);\n+\n+        int length = arrayOctet.length;\n         if (length == 0) {\n-            // shouldn't a 0 length array be valid base64 data?\n-            // return false;\n-            return true;\n+             return true;\n         }\n         for (int i = 0; i < length; i++) {\n-            if (!isBase64(arrayOctect[i])) {\n+            if (!isBase64(arrayOctet[i])) {\n                 return false;\n             }\n         }\n         return true;\n+    }\n+\n+    /*\n+     * Tests a given byte array to see if it contains only valid characters within the Base64 alphabet.\n+     * \n+     * @param arrayOctet\n+     *            byte array to test\n+     * @return <code>true</code> if any byte is a valid character in the Base64 alphabet; false herwise\n+     */\n+    private static boolean containsBase64Byte(byte[] arrayOctet) {\n+        for (int i = 0; i < arrayOctet.length; i++) {\n+            if (isBase64(arrayOctet[i])) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n \n     /**\n     }\n \n     /**\n-     * Decodes Base64 data into octects\n+     * Decodes Base64 data into octets\n      *\n      * @param base64Data Byte array containing Base64 data\n      * @return Array containing decoded data.", "timestamp": 1213922940, "metainfo": ""}