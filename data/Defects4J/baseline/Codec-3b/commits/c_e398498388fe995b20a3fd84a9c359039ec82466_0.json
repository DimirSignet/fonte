{"sha": "e398498388fe995b20a3fd84a9c359039ec82466", "log": "http://nagoya.apache.org/bugzilla/show_bug.cgi?id=29080 Throw an exception with a clear message.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n  * with similar phonemes.\n  * \n  * @author Apache Software Foundation\n- * @version $Id: Soundex.java,v 1.21 2004/03/17 18:30:59 ggregory Exp $\n+ * @version $Id: Soundex.java,v 1.22 2004/06/02 00:55:29 ggregory Exp $\n  */\n public class Soundex implements StringEncoder {\n \n \t *                  if the parameter supplied is not of type java.lang.String\n \t */\n     public Object encode(Object pObject) throws EncoderException {\n-\n-        Object result;\n-\n-        if (!(pObject instanceof java.lang.String)) {\n+        if (!(pObject instanceof String)) {\n             throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\");\n-        } else {\n-            result = soundex((String) pObject);\n-        }\n-\n-        return result;\n-\n+        } \n+        return soundex((String) pObject);\n     }\n \n     /**\n \t * @return A Soundex code.\n \t */\n     private char map(char c) {\n-        return this.getSoundexMapping()[c - 'A'];\n+    \tint index = c - 'A';\n+    \tif (index < 0 || index >= this.getSoundexMapping().length) {\n+    \t\tthrow new IllegalArgumentException(\"The character is not mapped: \" + c);\n+    \t}\n+        return this.getSoundexMapping()[index];\n     }\n \n     /**\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n /**\n  * Tests {@link Soundex}\n  * \n- * @version $Id: SoundexTest.java,v 1.17 2004/04/19 01:14:29 ggregory Exp $\n+ * @version $Id: SoundexTest.java,v 1.18 2004/06/02 00:55:38 ggregory Exp $\n  * @author Apache Software Foundation\n  */\n public class SoundexTest extends StringEncoderAbstractTest {\n \n     /**\n \t * Test data from http://www.myatt.demon.co.uk/sxalg.htm\n-\t * \n-\t * @throws EncoderException\n \t */\n     public void testEncodeIgnoreHyphens() {\n         this.encodeAll(\n         assertEquals(\"A500\", this.getEncoder().encode(\"Anne\"));\n     }\n \n+    /**\n+     * Fancy characters are not mapped by the default US mapping.\n+     * \n+     * http://nagoya.apache.org/bugzilla/show_bug.cgi?id=29080\n+     */\n+    public void testUsMappingOWithDiaeresis() {\n+        assertEquals(\"O000\", this.getEncoder().encode(\"o\"));\n+        try {\n+            assertEquals(\"000\", this.getEncoder().encode(\"\"));\n+            fail(\"Expected IllegalArgumentException not thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Fancy characters are not mapped by the default US mapping.\n+     * \n+     * http://nagoya.apache.org/bugzilla/show_bug.cgi?id=29080\n+     */\n+    public void testUsMappingEWithAcute() {\n+        assertEquals(\"E000\", this.getEncoder().encode(\"e\"));\n+        try {\n+            assertEquals(\"000\", this.getEncoder().encode(\"\"));\n+            fail(\"Expected IllegalArgumentException not thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n }", "timestamp": 1086137738, "metainfo": ""}