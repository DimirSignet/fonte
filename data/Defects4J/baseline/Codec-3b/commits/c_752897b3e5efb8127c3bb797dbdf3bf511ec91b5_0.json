{"sha": "752897b3e5efb8127c3bb797dbdf3bf511ec91b5", "log": "Added the DigestUtils class which provides static utility methods for creating MD5 and SHA digests.  This is a contribution from both Dave Dribin and David Graham.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/digest/DigestUtils.java\n+/* \n+ * ====================================================================\n+ * \n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec.digest;\n+\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+\n+import org.apache.commons.codec.binary.Hex;\n+\n+/**\n+ * Operations to simplifiy common <code>MessageDigest</code> tasks.  This\n+ * class is thread safe.\n+ *\n+ * @author Dave Dribin\n+ * @author David Graham\n+ */\n+public class DigestUtils {\n+\n+\t/**\n+\t * Returns an MD5 MessageDigest.\n+\t *\n+\t * @return An MD5 digest instance.\n+\t */\n+\tprivate static MessageDigest getMd5Digest() {\n+\t\ttry {\n+\t\t\treturn MessageDigest.getInstance(\"MD5\");\n+\n+\t\t} catch (NoSuchAlgorithmException e) {\n+\t\t\tthrow new InternalError(e.getMessage());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Returns an SHA digest.\n+\t *\n+\t * @return An SHA digest instance.\n+\t */\n+\tprivate static MessageDigest getShaDigest() {\n+\t\ttry {\n+\t\t\treturn MessageDigest.getInstance(\"SHA\");\n+\n+\t\t} catch (NoSuchAlgorithmException e) {\n+\t\t\tthrow new InternalError(e.getMessage());\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Calculates the MD5 digest and returns the value as a 16 element \n+\t * <code>byte[]</code>.\n+\t *\n+\t * @param data Data to digest\n+\t * @return MD5 digest\n+\t */\n+\tpublic static byte[] md5(byte[] data) {\n+\t\treturn getMd5Digest().digest(data);\n+\t}\n+\n+\t/**\n+\t * Calculates the MD5 digest and returns the value as a 16 element \n+\t * <code>byte[]</code>.\n+\t *\n+\t * @param data Data to digest\n+\t * @return MD5 digest\n+\t */\n+\tpublic static byte[] md5(String data) {\n+\t\treturn md5(data.getBytes());\n+\t}\n+\n+\t/**\n+\t * Calculates the MD5 digest and returns the value as a 32 character \n+\t * hex string.\n+\t *\n+\t * @param data Data to digest\n+\t * @return MD5 digest as a hex string\n+\t */\n+\tpublic static String md5Hex(byte[] data) {\n+\t\treturn new String(Hex.encodeHex(md5(data)));\n+\t}\n+\n+\t/**\n+\t * Calculates the MD5 digest and returns the value as a 32 character \n+\t * hex string.\n+\t *\n+\t * @param data Data to digest\n+\t * @return MD5 digest as a hex string\n+\t */\n+\tpublic static String md5Hex(String data) {\n+\t\treturn new String(Hex.encodeHex(md5(data)));\n+\t}\n+\n+\t/**\n+\t * Calculates the SHA digest and returns the value as a \n+\t * <code>byte[]</code>.\n+\t *\n+\t * @param data Data to digest\n+\t * @return SHA digest\n+\t */\n+\tpublic static byte[] sha(byte[] data) {\n+\t\treturn getShaDigest().digest(data);\n+\t}\n+\n+\t/**\n+\t * Calculates the SHA digest and returns the value as a \n+\t * <code>byte[]</code>.\n+\t *\n+\t * @param data Data to digest\n+\t * @return SHA digest\n+\t */\n+\tpublic static byte[] sha(String data) {\n+\t\treturn sha(data.getBytes());\n+\t}\n+\n+\t/**\n+     * Calculates the SHA digest and returns the value as a hex string.\n+     *\n+     * @param data Data to digest\n+     * @return SHA digest as a hex string\n+     */\n+\tpublic static String shaHex(byte[] data) {\n+\t\treturn new String(Hex.encodeHex(sha(data)));\n+\t}\n+\n+\t/**\n+\t * Calculates the SHA digest and returns the value as a hex string.\n+\t *\n+\t * @param data Data to digest\n+\t * @return SHA digest as a hex string\n+\t */\n+\tpublic static String shaHex(String data) {\n+\t\treturn new String(Hex.encodeHex(sha(data)));\n+\t}\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/digest/DigestUtilsTest.java\n+/* \n+ * ====================================================================\n+ * \n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.codec.digest;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests Digest methods.\n+ *\n+ * @author Dave Dribin\n+ * @author David Graham\n+ */\n+public class DigestUtilsTest extends TestCase {\n+\n+\tpublic void testMd5Hex() {\n+\t\t// Examples from RFC 1321\n+\t\tassertEquals(\"d41d8cd98f00b204e9800998ecf8427e\", DigestUtils.md5Hex(\"\"));\n+\n+\t\tassertEquals(\"0cc175b9c0f1b6a831c399e269772661\", DigestUtils.md5Hex(\"a\"));\n+\n+\t\tassertEquals(\"900150983cd24fb0d6963f7d28e17f72\", DigestUtils.md5Hex(\"abc\"));\n+\n+\t\tassertEquals(\n+\t\t\t\"f96b697d7cb7938d525a2f31aaf161d0\",\n+\t\t\tDigestUtils.md5Hex(\"message digest\"));\n+\n+\t\tassertEquals(\n+\t\t\t\"c3fcd3d76192e4007dfb496cca67e13b\",\n+\t\t\tDigestUtils.md5Hex(\"abcdefghijklmnopqrstuvwxyz\"));\n+\n+\t\tassertEquals(\n+\t\t\t\"d174ab98d277d9f5a5611c2c9f419d9f\",\n+\t\t\tDigestUtils.md5Hex(\n+\t\t\t\t\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n+\t\t\t\t\t+ \"abcdefghijklmnopqrstuvwxyz\"\n+\t\t\t\t\t+ \"0123456789\"));\n+\n+\t\tassertEquals(\n+\t\t\t\"57edf4a22be3c955ac49da2e2107b67a\",\n+\t\t\tDigestUtils.md5Hex(\n+\t\t\t\t\"1234567890123456789012345678901234567890\"\n+\t\t\t\t\t+ \"1234567890123456789012345678901234567890\"));\n+\t}\n+\n+\t/**\n+\t * An MD5 hash converted to hex should always be 32 characters.\n+\t */\n+\tpublic void testMD5HexLength() {\n+\t\tString hashMe = \"this is some string that is longer than 32 characters\";\n+\t\tString hash = DigestUtils.md5Hex(hashMe.getBytes());\n+\t\tassertEquals(32, hash.length());\n+\n+\t\thashMe = \"length < 32\";\n+\t\thash = DigestUtils.md5Hex(hashMe.getBytes());\n+\t\tassertEquals(32, hash.length());\n+\t}\n+\n+\t/**\n+\t * An MD5 hash should always be a 16 element byte[].\n+\t */\n+\tpublic void testMD5Length() {\n+\t\tString hashMe = \"this is some string that is longer than 16 characters\";\n+\t\tbyte[] hash = DigestUtils.md5(hashMe.getBytes());\n+\t\tassertEquals(16, hash.length);\n+\n+\t\thashMe = \"length < 16\";\n+\t\thash = DigestUtils.md5(hashMe.getBytes());\n+\t\tassertEquals(16, hash.length);\n+\t}\n+\n+\tpublic void testShaHex() {\n+\t\t// Examples from FIPS 180-1\n+\t\tassertEquals(\n+\t\t\t\"a9993e364706816aba3e25717850c26c9cd0d89d\",\n+\t\t\tDigestUtils.shaHex(\"abc\"));\n+\n+\t\tassertEquals(\n+\t\t\t\"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",\n+\t\t\tDigestUtils.shaHex(\n+\t\t\t\t\"abcdbcdecdefdefgefghfghighij\"\n+\t\t\t\t\t+ \"hijkijkljklmklmnlmnomnopnopq\"));\n+\t}\n+\n+}", "timestamp": 1065284932, "metainfo": ""}