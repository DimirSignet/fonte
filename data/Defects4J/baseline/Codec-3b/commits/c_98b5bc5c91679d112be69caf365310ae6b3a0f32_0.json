{"sha": "98b5bc5c91679d112be69caf365310ae6b3a0f32", "log": "Get 100% code coverage (as reported by Clover).   ", "commit": "\n--- a/src/test/org/apache/commons/codec/binary/BinaryTest.java\n+++ b/src/test/org/apache/commons/codec/binary/BinaryTest.java\n package org.apache.commons.codec.binary ;\n \n import junit.framework.TestCase;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.EncoderException;\n \n /**\n  * TestCase for Binary class.\n  *\n  * @author Apache Software Foundation\n- * @version $Id: BinaryTest.java,v 1.5 2004/03/17 19:30:19 ggregory Exp $\n+ * @version $Id: BinaryTest.java,v 1.6 2004/03/17 19:54:27 ggregory Exp $\n  */\n public class BinaryTest extends TestCase\n {\n     protected void setUp() throws Exception\n     {\n         super.setUp();\n-        instance = new Binary() ;\n+        this.instance = new Binary() ;\n     }\n \n     /*\n     protected void tearDown() throws Exception\n     {\n         super.tearDown();\n-        instance = null ;\n+        this.instance = null ;\n     }\n \n     /**\n     //\n     // ------------------------------------------------------------------------\n \n+    /**\n+     * Tests for Object decode(Object)\n+     */\n+    public void testDecodeObjectException()\n+    {\n+        try {\n+            this.instance.decode(new Object());\n+        } catch (DecoderException e) {\n+            // all is well.\n+            return;\n+        }\n+        fail(\"Expected DecoderException\");\n+    }\n     \n-    /*\n+    /**\n      * Tests for Object decode(Object)\n      */\n     public void testDecodeObject() throws Exception\n-    {\n+    {        \n+        byte [] bits;\n+        \n         // With a single raw binary\n-        \n-        byte [] bits = new byte[1] ;\n-        byte [] decoded = ( byte[] ) instance.decode( ( Object ) \"00000000\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+\n+        bits = new byte[1] ;\n+        assertDecodeObject(bits, \"00000000\");\n \n         bits = new byte[1] ;\n         bits[0] = Binary.BIT_0 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00000001\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        assertDecodeObject(bits, \"00000001\");\n \n         bits = new byte[1] ;\n         bits[0] = Binary.BIT_0 | Binary.BIT_1 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00000011\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        assertDecodeObject(bits, \"00000011\");\n \n         bits = new byte[1] ;\n         bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00000111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00001111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00011111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"00111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"01111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[1] ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"11111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        assertDecodeObject(bits, \"00000111\");\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        assertDecodeObject(bits, \"00001111\");\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        assertDecodeObject(bits, \"00011111\");\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        assertDecodeObject(bits, \"00111111\");\n+\n+        bits = new byte[1] ;\n+        bits[0] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        assertDecodeObject(bits, \"01111111\");\n+\n+        bits = new byte[1] ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        assertDecodeObject(bits, \"11111111\");\n \n         // With a two raw binaries\n         \n         bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n             | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n             | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000000011111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        assertDecodeObject(bits, \"0000000011111111\");\n \n         bits = new byte[2] ;\n         bits[1] = Binary.BIT_0 ;\n         bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n             | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n             | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000000111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        assertDecodeObject(bits, \"0000000111111111\");\n \n         bits = new byte[2] ;\n         bits[1] = Binary.BIT_0 | Binary.BIT_1 ;\n         bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n             | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n             | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000001111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        assertDecodeObject(bits, \"0000001111111111\");\n \n         bits = new byte[2] ;\n         bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 ;\n         bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n             | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n             | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000011111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0000111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0001111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0011111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n-\n-        bits = new byte[2] ;\n-        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n-        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n-            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n-            | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"0111111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        assertDecodeObject(bits, \"0000011111111111\");\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        assertDecodeObject(bits, \"0000111111111111\");\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        assertDecodeObject(bits, \"0001111111111111\");\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        assertDecodeObject(bits, \"0011111111111111\");\n+\n+        bits = new byte[2] ;\n+        bits[1] = Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 ;\n+        bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n+            | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n+            | Binary.BIT_7 ) ;\n+        assertDecodeObject(bits, \"0111111111111111\");\n \n         bits = new byte[2] ;\n         bits[1] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n         bits[0] = ( byte ) ( Binary.BIT_0 | Binary.BIT_1 | Binary.BIT_2 \n             | Binary.BIT_3 | Binary.BIT_4 | Binary.BIT_5 | Binary.BIT_6 \n             | Binary.BIT_7 ) ;\n-        decoded = ( byte[] ) instance.decode( ( Object ) \"1111111111111111\" ) ;\n-        assertEquals( new String( bits ), new String( decoded ) ) ;\n+        assertDecodeObject(bits, \"1111111111111111\");\n     }\n \n \n     // ------------------------------------------------------------------------\n \n     \n+    void assertDecodeObject(byte[] bits, String encodeMe) throws DecoderException {\n+        byte[] decoded;\n+        decoded = (byte[]) instance.decode((Object) encodeMe);\n+        assertEquals(new String(bits), new String(decoded));\n+        decoded = (byte[]) instance.decode((Object) encodeMe.getBytes());\n+        assertEquals(new String(bits), new String(decoded));\n+        decoded = (byte[]) instance.decode((Object) encodeMe.toCharArray());\n+        assertEquals(new String(bits), new String(decoded));\n+    }\n+\n     /*\n      * Tests for byte[] decode(byte[])\n      */\n     //\n     // ------------------------------------------------------------------------\n \n+    /*\n+     * Tests for Object encode(Object)\n+     */\n+    public void testEncodeObjectException()\n+    {\n+        try {\n+            instance.encode(\"\");\n+        } catch (EncoderException e) {\n+            // all is well.\n+            return;\n+        }\n+        fail(\"Expected EncoderException\");\n+    }\n     \n     /*\n      * Tests for Object encode(Object)", "timestamp": 1079553267, "metainfo": ""}