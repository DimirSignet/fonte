{"sha": "9da7d2a69e0c19bb33a6e3ca18ab1c6a2298d61d", "log": "More Soundex test data and code clean up.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n  * \n  * @author bayard@generationjava.com\n  * @author Tim O'Brien\n- * @author ggregory@seagullsw.com\n- * @version $Id: Soundex.java,v 1.9 2003/10/12 19:48:15 tobrien Exp $\n+ * @author Gary Gregory\n+ * @version $Id: Soundex.java,v 1.10 2003/11/04 02:43:09 ggregory Exp $\n  */\n public class Soundex implements StringEncoder {\n \n     /**\n+     * This static variable contains an instance of the\n+     * Soundex using the US_ENGLISH mapping.\n+     */\n+    public static final Soundex US_ENGLISH = new Soundex();\n+\n+    /**\n      * This is a default mapping of the 26 letters used\n      * in US english.\n      */\n         \"01230120022455012623010202\".toCharArray();\n \n     /**\n-     * This static variable contains an instance of the\n-     * Soundex using the US_ENGLISH mapping.\n-     */\n-    public static final Soundex US_ENGLISH = new Soundex();\n+     * The maximum length of a Soundex code - Soundex codes are\n+     * only four characters by definition.\n+     */\n+    private int maxLength = 4;\n     \n     /**\n      * Every letter of the alphabet is \"mapped\" to a numerical \n     private char[] soundexMapping;\n \n     /**\n-     * The maximum length of a Soundex code - Soundex codes are\n-     * only four characters by definition.\n-     */\n-    private int maxLength = 4;\n-\n-    /**\n      * Creates an instance of the Soundex object using the default\n      * US_ENGLISH mapping.\n      */\n      *                code for a given character\n      */\n     public Soundex(char[] mapping) {\n-        this.soundexMapping = mapping;\n+        this.setSoundexMapping(mapping);\n+    }\n+\n+    /**\n+     * Encodes an Object using the soundex algorithm.  This method\n+     * is provided in order to satisfy the requirements of the\n+     * Encoder interface, and will throw an EncoderException if the\n+     * supplied object is not of type java.lang.String.\n+     *\n+     * @param pObject Object to encode\n+     * @return An object (or type java.lang.String) containing the \n+     *         soundex code which corresponds to the String supplied.\n+     * @throws EncoderException if the parameter supplied is not\n+     *                          of type java.lang.String\n+     */\n+    public Object encode(Object pObject) throws EncoderException {\n+\n+        Object result;\n+\n+        if (!(pObject instanceof java.lang.String)) {\n+            throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\"); \n+        } else {\n+            result = soundex((String) pObject);\n+        }\n+\n+        return result;\n+\n+    }\n+\n+    /**\n+     * Encodes a String using the soundex algorithm. \n+     *\n+     * @param pString A String object to encode\n+     * @return A Soundex code corresponding to the String supplied\n+     */\n+    public String encode(String pString) {\n+        return (soundex(pString));   \n+    }\n+\n+    /**\n+     * Used internally by the SoundEx algorithm.\n+     *\n+     * @param c character to use to retrieve mapping code\n+     * @return Mapping code for a particular character\n+     */\n+    private char getMappingCode(char c) {\n+        if (!Character.isLetter(c)) {\n+            return 0;\n+        } else {\n+            return this.getSoundexMapping()[Character.toUpperCase(c) - 'A'];\n+        }\n+    }\n+\n+    /**\n+     * Returns the maxLength.  Standard Soundex\n+     * @return int\n+     */\n+    public int getMaxLength() {\n+        return this.maxLength;\n+    }\n+\n+    /**\n+     * @return Returns the soundexMapping.\n+     */\n+    private char[] getSoundexMapping() {\n+        return this.soundexMapping;\n+    }\n+\n+    /**\n+     * Sets the maxLength.\n+     * @param maxLength The maxLength to set\n+     */\n+    public void setMaxLength(int maxLength) {\n+        this.maxLength = maxLength;\n+    }\n+\n+    /**\n+     * @param soundexMapping The soundexMapping to set.\n+     */\n+    private void setSoundexMapping(char[] soundexMapping) {\n+        this.soundexMapping = soundexMapping;\n     }\n \n     /**\n         int incount = 1, count = 1;\n         out[0] = Character.toUpperCase(str.charAt(0));\n         last = getMappingCode(str.charAt(0));\n-        while ((incount < str.length()) && (mapped = getMappingCode(str.charAt(incount++))) != 0 && (count < maxLength)) {\n+        while ((incount < str.length()) && (mapped = getMappingCode(str.charAt(incount++))) != 0 && (count < this.getMaxLength())) {\n                 if ((mapped != '0') && (mapped != last)) {\n                     out[count++] = mapped;\n                 }\n         return new String(out);\n     }\n \n-    /**\n-     * Encodes an Object using the soundex algorithm.  This method\n-     * is provided in order to satisfy the requirements of the\n-     * Encoder interface, and will throw an EncoderException if the\n-     * supplied object is not of type java.lang.String.\n-     *\n-     * @param pObject Object to encode\n-     * @return An object (or type java.lang.String) containing the \n-     *         soundex code which corresponds to the String supplied.\n-     * @throws EncoderException if the parameter supplied is not\n-     *                          of type java.lang.String\n-     */\n-    public Object encode(Object pObject) throws EncoderException {\n-\n-        Object result;\n-\n-        if (!(pObject instanceof java.lang.String)) {\n-            throw new EncoderException(\"Parameter supplied to Soundex encode is not of type java.lang.String\"); \n-        } else {\n-            result = soundex((String) pObject);\n-        }\n-\n-        return result;\n-\n-    }\n-\n-    /**\n-     * Encodes a String using the soundex algorithm. \n-     *\n-     * @param pString A String object to encode\n-     * @return A Soundex code corresponding to the String supplied\n-     * @throws EncoderException throws exception if there is an\n-     *                          encoding-specific problem\n-     */\n-    public String encode(String pString) throws EncoderException {\n-        return (soundex(pString));   \n-    }\n-\n-    /**\n-     * Used internally by the SoundEx algorithm.\n-     *\n-     * @param c character to use to retrieve mapping code\n-     * @return Mapping code for a particular character\n-     */\n-    private char getMappingCode(char c) {\n-        if (!Character.isLetter(c)) {\n-            return 0;\n-        } else {\n-            return soundexMapping[Character.toUpperCase(c) - 'A'];\n-        }\n-    }\n-\n-    /**\n-     * Returns the maxLength.  Standard Soundex\n-     * @return int\n-     */\n-    public int getMaxLength() {\n-        return maxLength;\n-    }\n-\n-    /**\n-     * Sets the maxLength.\n-     * @param maxLength The maxLength to set\n-     */\n-    public void setMaxLength(int maxLength) {\n-        this.maxLength = maxLength;\n-    }\n-\n }\n--- a/src/test/org/apache/commons/codec/language/SoundexTest.java\n+++ b/src/test/org/apache/commons/codec/language/SoundexTest.java\n import org.apache.commons.codec.StringEncoderAbstractTest;\n \n /**\n- * @version $Revision: 1.4 $ $Date: 2003/10/05 21:45:49 $\n+ * @version $Revision: 1.5 $ $Date: 2003/11/04 02:43:09 $\n  * @author Rodney Waldhoff\n+ * @author Gary Gregory\n  */\n public class SoundexTest extends StringEncoderAbstractTest {\n-\n-    public SoundexTest(String name) {\n-        super(name);\n-    }\n \n     public static Test suite() {\n         return (new TestSuite(SoundexTest.class));\n     }\n \n-    public void setUp() throws Exception {        \n-        super.setUp();\n-        _encoder = new Soundex();\n+    private Soundex _encoder = null;\n+\n+    public SoundexTest(String name) {\n+        super(name);\n     }\n-\n-    public void tearDown() throws Exception {\n-        super.tearDown();\n-        _encoder = null;\n+    /**\n+     * @return Returns the _encoder.\n+     */\n+    public Soundex getEncoder() {\n+        return this._encoder;\n     }\n \n     protected StringEncoder makeEncoder() {\n         return new Soundex();\n     }\n \n+    /**\n+     * @param _encoder The _encoder to set.\n+     */\n+    public void setEncoder(Soundex encoder) {\n+        this._encoder = encoder;\n+    }\n+\n+    public void setUp() throws Exception {        \n+        super.setUp();\n+        this.setEncoder(new Soundex());\n+    }\n+\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+        this.setEncoder(null);\n+    }\n+\n     // ------------------------------------------------------------------------\n \n     public void testEncode() throws Exception {\n-        assertEquals(\"T235\",_encoder.encode(\"testing\"));\n-        assertEquals(\"T000\",_encoder.encode(\"The\"));\n-        assertEquals(\"Q200\",_encoder.encode(\"quick\"));\n-        assertEquals(\"B650\",_encoder.encode(\"brown\"));\n-        assertEquals(\"F200\",_encoder.encode(\"fox\"));\n-        assertEquals(\"J513\",_encoder.encode(\"jumped\"));\n-        assertEquals(\"O160\",_encoder.encode(\"over\"));\n-        assertEquals(\"T000\",_encoder.encode(\"the\"));\n-        assertEquals(\"L200\",_encoder.encode(\"lazy\"));\n-        assertEquals(\"D200\",_encoder.encode(\"dogs\"));\n+        assertEquals(\"T235\",this.getEncoder().encode(\"testing\"));\n+        assertEquals(\"T000\",this.getEncoder().encode(\"The\"));\n+        assertEquals(\"Q200\",this.getEncoder().encode(\"quick\"));\n+        assertEquals(\"B650\",this.getEncoder().encode(\"brown\"));\n+        assertEquals(\"F200\",this.getEncoder().encode(\"fox\"));\n+        assertEquals(\"J513\",this.getEncoder().encode(\"jumped\"));\n+        assertEquals(\"O160\",this.getEncoder().encode(\"over\"));\n+        assertEquals(\"T000\",this.getEncoder().encode(\"the\"));\n+        assertEquals(\"L200\",this.getEncoder().encode(\"lazy\"));\n+        assertEquals(\"D200\",this.getEncoder().encode(\"dogs\"));\n     }\n \n+    /**\n+     * Examples from\n+     * http://www.bradandkathy.com/genealogy/overviewofsoundex.html\n+     */\n+    public void testEncode2() throws Exception {\n+        assertEquals(\"A462\",this.getEncoder().encode(\"Allricht\"));\n+        assertEquals(\"E166\",this.getEncoder().encode(\"Eberhard\"));\n+        assertEquals(\"E521\",this.getEncoder().encode(\"Engebrethson\"));\n+        assertEquals(\"H512\",this.getEncoder().encode(\"Heimbach\"));\n+        assertEquals(\"H524\",this.getEncoder().encode(\"Hanselmann\"));\n+        assertEquals(\"H431\",this.getEncoder().encode(\"Hildebrand\"));\n+        assertEquals(\"K152\",this.getEncoder().encode(\"Kavanagh\"));\n+        assertEquals(\"L530\",this.getEncoder().encode(\"Lind, Van\"));\n+        assertEquals(\"L222\",this.getEncoder().encode(\"Lukaschowsky\"));\n+        assertEquals(\"M235\",this.getEncoder().encode(\"McDonnell\"));\n+        assertEquals(\"M200\",this.getEncoder().encode(\"McGee\"));\n+        // Fix me?\n+        //assertEquals(\"O165\",this.getEncoder().encode(\"O'Brien\"));\n+        assertEquals(\"O155\",this.getEncoder().encode(\"Opnian\"));\n+        assertEquals(\"O155\",this.getEncoder().encode(\"Oppenheimer\"));\n+        // Fix me?\n+        //assertEquals(\"S460\",this.getEncoder().encode(\"Swhgler\"));\n+        assertEquals(\"R355\",this.getEncoder().encode(\"Riedemanas\"));\n+        assertEquals(\"Z300\",this.getEncoder().encode(\"Zita\"));\n+        assertEquals(\"Z325\",this.getEncoder().encode(\"Zitzmeinn\"));    \n+    }\n+    \n     public void testMaxLength() throws Exception {\n         Soundex soundex = new Soundex();\n         soundex.setMaxLength( soundex.getMaxLength() );\n     }\n \n-    private Soundex _encoder = null;\n }", "timestamp": 1067913789, "metainfo": ""}