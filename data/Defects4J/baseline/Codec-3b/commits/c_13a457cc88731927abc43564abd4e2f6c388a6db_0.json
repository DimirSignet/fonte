{"sha": "13a457cc88731927abc43564abd4e2f6c388a6db", "log": "[codec] Add methods for SHA-256, SHA-384, and SHA-512 to DigestUtils. http://issues.apache.org/bugzilla/show_bug.cgi?id=34157.  ", "commit": "\n--- a/src/java/org/apache/commons/codec/digest/DigestUtils.java\n+++ b/src/java/org/apache/commons/codec/digest/DigestUtils.java\n /*\n- * Copyright 2001-2004 The Apache Software Foundation.\n+ * Copyright 2001-2005 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- */ \n+ */\n \n package org.apache.commons.codec.digest;\n \n import org.apache.commons.codec.binary.Hex;\n \n /**\n- * Operations to simplifiy common {@link java.security.MessageDigest} tasks.  This\n- * class is thread safe.\n- *\n+ * Operations to simplifiy common {@link java.security.MessageDigest} tasks. This class is thread safe.\n+ * \n  * @author Apache Software Foundation\n+ * @version $Id$\n  */\n public class DigestUtils {\n \n     /**\n-     * Returns a MessageDigest for the given <code>algorithm</code>.\n-     *\n-     * @param algorithm The MessageDigest algorithm name.\n+     * Returns a <code>MessageDigest</code> for the given <code>algorithm</code>.\n+     * \n+     * @param algorithm\n+     *            the name of the algorithm requested. See <a\n+     *            href=\"http://java.sun.com/j2se/1.3/docs/guide/security/CryptoSpec.html#AppA\">Appendix A in the Java\n+     *            Cryptography Architecture API Specification & Reference</a> for information about standard algorithm\n+     *            names.\n      * @return An MD5 digest instance.\n-     * @throws RuntimeException when a {@link java.security.NoSuchAlgorithmException} is caught,\n+     * @see MessageDigest#getInstance(String)\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     static MessageDigest getDigest(String algorithm) {\n         try {\n \n     /**\n      * Returns an MD5 MessageDigest.\n-     *\n+     * \n      * @return An MD5 digest instance.\n-     * @throws RuntimeException when a {@link java.security.NoSuchAlgorithmException} is caught,\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     private static MessageDigest getMd5Digest() {\n         return getDigest(\"MD5\");\n     }\n \n     /**\n-     * Returns an SHA digest.\n-     *\n-     * @return An SHA digest instance.\n-     * @throws RuntimeException when a {@link java.security.NoSuchAlgorithmException} is caught,\n+     * Returns an SHA-256 digest.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @return An SHA-256 digest instance.\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    private static MessageDigest getSha256Digest() {\n+        return getDigest(\"SHA-256\");\n+    }\n+\n+    /**\n+     * Returns an SHA-384 digest.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @return An SHA-384 digest instance.\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    private static MessageDigest getSha384Digest() {\n+        return getDigest(\"SHA-384\");\n+    }\n+\n+    /**\n+     * Returns an SHA-512 digest.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @return An SHA-512 digest instance.\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n+     */\n+    private static MessageDigest getSha512Digest() {\n+        return getDigest(\"SHA-512\");\n+    }\n+\n+    /**\n+     * Returns an SHA-1 digest.\n+     * \n+     * @return An SHA-1 digest instance.\n+     * @throws RuntimeException\n+     *             when a {@link java.security.NoSuchAlgorithmException} is caught.\n      */\n     private static MessageDigest getShaDigest() {\n         return getDigest(\"SHA\");\n     }\n \n     /**\n-     * Calculates the MD5 digest and returns the value as a 16 element \n-     * <code>byte[]</code>.\n-     *\n-     * @param data Data to digest\n+     * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n+     * \n+     * @param data\n+     *            Data to digest\n      * @return MD5 digest\n      */\n     public static byte[] md5(byte[] data) {\n     }\n \n     /**\n-     * Calculates the MD5 digest and returns the value as a 16 element \n-     * <code>byte[]</code>.\n-     *\n-     * @param data Data to digest\n+     * Calculates the MD5 digest and returns the value as a 16 element <code>byte[]</code>.\n+     * \n+     * @param data\n+     *            Data to digest\n      * @return MD5 digest\n      */\n     public static byte[] md5(String data) {\n     }\n \n     /**\n-     * Calculates the MD5 digest and returns the value as a 32 character \n-     * hex string.\n-     *\n-     * @param data Data to digest\n+     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n+     * \n+     * @param data\n+     *            Data to digest\n      * @return MD5 digest as a hex string\n      */\n     public static String md5Hex(byte[] data) {\n     }\n \n     /**\n-     * Calculates the MD5 digest and returns the value as a 32 character \n-     * hex string.\n-     *\n-     * @param data Data to digest\n+     * Calculates the MD5 digest and returns the value as a 32 character hex string.\n+     * \n+     * @param data\n+     *            Data to digest\n      * @return MD5 digest as a hex string\n      */\n     public static String md5Hex(String data) {\n     }\n \n     /**\n-     * Calculates the SHA digest and returns the value as a \n-     * <code>byte[]</code>.\n-     *\n-     * @param data Data to digest\n-     * @return SHA digest\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n      */\n     public static byte[] sha(byte[] data) {\n         return getShaDigest().digest(data);\n     }\n \n     /**\n-     * Calculates the SHA digest and returns the value as a \n-     * <code>byte[]</code>.\n-     *\n-     * @param data Data to digest\n-     * @return SHA digest\n+     * Calculates the SHA-1 digest and returns the value as a <code>byte[]</code>.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest\n      */\n     public static byte[] sha(String data) {\n         return sha(data.getBytes());\n     }\n \n     /**\n-     * Calculates the SHA digest and returns the value as a hex string.\n-     *\n-     * @param data Data to digest\n-     * @return SHA digest as a hex string\n+     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest\n+     */\n+    public static byte[] sha256(byte[] data) {\n+        return getSha256Digest().digest(data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest\n+     */\n+    public static byte[] sha256(String data) {\n+        return sha256(data.getBytes());\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest as a hex string\n+     */\n+    public static String sha256Hex(byte[] data) {\n+        return new String(Hex.encodeHex(sha256(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-256 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-256 digest as a hex string\n+     */\n+    public static String sha256Hex(String data) {\n+        return new String(Hex.encodeHex(sha256(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest\n+     */\n+    public static byte[] sha384(byte[] data) {\n+        // FIXME: check Sun docs for how to get a sha 384 digest\n+        return getSha384Digest().digest(data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest\n+     */\n+    public static byte[] sha384(String data) {\n+        return sha384(data.getBytes());\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest as a hex string\n+     */\n+    public static String sha384Hex(byte[] data) {\n+        return new String(Hex.encodeHex(sha384(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-384 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-384 digest as a hex string\n+     */\n+    public static String sha384Hex(String data) {\n+        return new String(Hex.encodeHex(sha384(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest\n+     */\n+    public static byte[] sha512(byte[] data) {\n+        return getSha512Digest().digest(data);\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a <code>byte[]</code>.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest\n+     */\n+    public static byte[] sha512(String data) {\n+        return sha512(data.getBytes());\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest as a hex string\n+     */\n+    public static String sha512Hex(byte[] data) {\n+        return new String(Hex.encodeHex(sha512(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-512 digest and returns the value as a hex string.\n+     * <p>\n+     * Throws a <code>RuntimeException</code> on JRE versions prior to 1.4.0.\n+     * </p>\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-512 digest as a hex string\n+     */\n+    public static String sha512Hex(String data) {\n+        return new String(Hex.encodeHex(sha512(data)));\n+    }\n+\n+    /**\n+     * Calculates the SHA-1 digest and returns the value as a hex string.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest as a hex string\n      */\n     public static String shaHex(byte[] data) {\n         return new String(Hex.encodeHex(sha(data)));\n     }\n \n     /**\n-     * Calculates the SHA digest and returns the value as a hex string.\n-     *\n-     * @param data Data to digest\n-     * @return SHA digest as a hex string\n+     * Calculates the SHA-1 digest and returns the value as a hex string.\n+     * \n+     * @param data\n+     *            Data to digest\n+     * @return SHA-1 digest as a hex string\n      */\n     public static String shaHex(String data) {\n         return new String(Hex.encodeHex(sha(data)));\n     }\n-\n }\n--- a/src/test/org/apache/commons/codec/digest/DigestUtilsTest.java\n+++ b/src/test/org/apache/commons/codec/digest/DigestUtilsTest.java\n import junit.framework.TestCase;\n \n /**\n- * Tests Digest methods.\n+ * Tests DigestUtils methods.\n  * \n  * @author Apache Software Foundation\n+ * @version $Id$\n  */\n public class DigestUtilsTest extends TestCase {\n \n         assertEquals(16, hash.length);\n     }\n \n+    public void testSha256() {\n+\t// Examples from FIPS 180-2\n+\tassertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n+\t\t     DigestUtils.sha256Hex(\"abc\"));\n+\tassertEquals(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\",\n+\t\t     DigestUtils.sha256Hex(\"abc\".getBytes()));\n+\tassertEquals(\"248d6a61d20638b8e5c026930c3e6039a33ce45964ff2167f6ecedd419db06c1\",\n+\t\t     DigestUtils.sha256Hex(\"abcdbcdecdefdefgefghfghighijhijkijkljklmklmnlmnomnopnopq\"));\n+    }\n+\n+    public void testSha384() {\n+\t// Examples from FIPS 180-2\n+\tassertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" + \n+\t\t     \"8086072ba1e7cc2358baeca134c825a7\",\n+\t\t     DigestUtils.sha384Hex(\"abc\"));\n+\tassertEquals(\"cb00753f45a35e8bb5a03d699ac65007272c32ab0eded1631a8b605a43ff5bed\" + \n+\t\t     \"8086072ba1e7cc2358baeca134c825a7\",\n+\t\t     DigestUtils.sha384Hex(\"abc\".getBytes()));\n+\tassertEquals(\"09330c33f71147e83d192fc782cd1b4753111b173b3b05d22fa08086e3b0f712\" +\n+\t        \"fcc7c71a557e2db966c3e9fa91746039\",\n+\t\t     DigestUtils.sha384Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" +\n+\t\t\t\t\t   \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n+    }    \n+\n+    public void testSha512() {\n+\t// Examples from FIPS 180-2\n+\tassertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n+\t        \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\",\n+\t\t     DigestUtils.sha512Hex(\"abc\"));\n+\tassertEquals(\"ddaf35a193617abacc417349ae20413112e6fa4e89a97ea20a9eeee64b55d39a\" +\n+\t\t     \"2192992a274fc1a836ba3c23a3feebbd454d4423643ce80e2a9ac94fa54ca49f\",\n+\t\t     DigestUtils.sha512Hex(\"abc\".getBytes()));\n+\tassertEquals(\"8e959b75dae313da8cf4f72814fc143f8f7779c6eb9f7fa17299aeadb6889018\" + \n+\t\t     \"501d289e4900f7e4331b99dec4b5433ac7d329eeb6dd26545e96e55b874be909\",\n+\t\t     DigestUtils.sha512Hex(\"abcdefghbcdefghicdefghijdefghijkefghijklfghijklmghijklmn\" + \n+\t\t\t\t\t   \"hijklmnoijklmnopjklmnopqklmnopqrlmnopqrsmnopqrstnopqrstu\"));\n+    }\n+\n     public void testShaHex() {\n         // Examples from FIPS 180-1\n         assertEquals(\"a9993e364706816aba3e25717850c26c9cd0d89d\", DigestUtils.shaHex(\"abc\"));\n         assertEquals(\n             \"84983e441c3bd26ebaae4aa1f95129e5e54670f1\",\n             DigestUtils.shaHex(\"abcdbcdecdefdefgefghfghighij\" + \"hijkijkljklmklmnlmnomnopnopq\"));\n-    }\n-\n+    }    \n }", "timestamp": 1113503947, "metainfo": ""}