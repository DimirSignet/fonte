{"sha": "52d82d1dfff8c2b2ded9d843e0b03017af6d747c", "log": "Applying Benjamin Bentmann's patch from CODEC-65, which changes the various encoders to use a locale when lowercasing. The encoders all assume the English locale, so when running in non English locales the default toLowerCase sometimes does not work as the encoder expects.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/Caverphone.java\n+++ b/src/java/org/apache/commons/codec/language/Caverphone.java\n         }\n \n         // 1. Convert to lowercase\n-        txt = txt.toLowerCase();\n+        txt = txt.toLowerCase(java.util.Locale.ENGLISH);\n \n         // 2. Remove anything not A-Z\n         txt = txt.replaceAll(\"[^a-z]\", \"\");\n--- a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n \t\tif (input.length() == 0) {\n \t\t\treturn null;\n \t\t}\n-\t\treturn input.toUpperCase();\n+\t\treturn input.toUpperCase(java.util.Locale.ENGLISH);\n \t}\n \n     /**\n--- a/src/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/java/org/apache/commons/codec/language/Metaphone.java\n         }\n         // single character is itself\n         if (txt.length() == 1) {\n-            return txt.toUpperCase() ;\n+            return txt.toUpperCase(java.util.Locale.ENGLISH) ;\n         }\n       \n-        char[] inwd = txt.toUpperCase().toCharArray() ;\n+        char[] inwd = txt.toUpperCase(java.util.Locale.ENGLISH).toCharArray() ;\n       \n         StringBuffer local = new StringBuffer(40); // manipulate\n         StringBuffer code = new StringBuffer(10) ; //   output\n--- a/src/java/org/apache/commons/codec/language/SoundexUtils.java\n+++ b/src/java/org/apache/commons/codec/language/SoundexUtils.java\n             }\n         }\n         if (count == len) {\n-            return str.toUpperCase();\n+            return str.toUpperCase(java.util.Locale.ENGLISH);\n         }\n-        return new String(chars, 0, count).toUpperCase();\n+        return new String(chars, 0, count).toUpperCase(java.util.Locale.ENGLISH);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java\n+++ b/src/test/org/apache/commons/codec/StringEncoderAbstractTest.java\n  */\n \n package org.apache.commons.codec;\n+\n+import java.util.Locale;\n \n import junit.framework.TestCase;\n \n         assertTrue( \"An exception was not thrown when we tried to encode \" +\n                     \"a Float object\", exceptionThrown );\n     }\n+\n+    public void testLocaleIndependence() throws Exception {\n+        StringEncoder encoder = makeEncoder();\n+\n+        String[] data = { \"I\", \"i\", };\n+\n+        Locale orig = Locale.getDefault();\n+        Locale[] locales = { Locale.ENGLISH, new Locale(\"tr\"), Locale.getDefault() };\n+\n+        try {\n+            for (int i = 0; i < data.length; i++) {\n+                String ref = null;\n+                for (int j = 0; j < locales.length; j++) {\n+                    Locale.setDefault(locales[j]);\n+                    if (j <= 0) {\n+                        ref = encoder.encode(data[i]);\n+                    } else {\n+                        String cur = null;\n+                        try {\n+                            cur = encoder.encode(data[i]);\n+                        } catch (Exception e) {\n+                            fail(Locale.getDefault().toString() + \": \" + e.getMessage());\n+                        }\n+                        assertEquals(Locale.getDefault().toString() + \": \", ref, cur);\n+                    }\n+                }\n+            }\n+        } finally {\n+            Locale.setDefault(orig);\n+        }\n+    }\n+\n }", "timestamp": 1209256556, "metainfo": ""}