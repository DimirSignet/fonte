{"sha": "66555de56715ccb185dee4dd2b25b1e93cc5c73e", "log": "Applying my second patch from CODEC-60; adding the Caverphone 2.0 algorithm  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/language/Caverphone.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */ \n+\n+package org.apache.commons.codec.language;\n+\n+import org.apache.commons.codec.EncoderException;\n+import org.apache.commons.codec.StringEncoder;\n+\n+/**\n+ * Encodes a string into a caverphone value. \n+ *\n+ * This is an algorithm created the Caversham Project at the University of Otago. \n+ * It implements the Caverphone 2.0 algorithm:\n+ *\n+ *\n+ * @author Apache Software Foundation\n+ * @version $Id: Caverphone.java 582447 2007-10-06 04:14:43Z bayard $\n+ * @see <a href=\"http://en.wikipedia.org/wiki/Caverphone\">Wikipedia - Caverphone</a>\n+ * @see <a href=\"http://caversham.otago.ac.nz/files/working/ctp150804.pdf\">Caverphone 2.0 specification</a>\n+ */\n+public class Caverphone implements StringEncoder {\n+\n+    /**\n+     * Creates an instance of the Caverphone encoder\n+     */\n+    public Caverphone() {\n+        super();\n+    }\n+\n+    /**\n+     * Find the caverphone value of a String. \n+     *\n+     * @param txt String to find the caverphone code for\n+     * @return A caverphone code corresponding to the String supplied\n+     */\n+    public String caverphone(String txt) {\n+        // NOTE: Version 1.0 of Caverphone is easily derivable from this code \n+        // by commenting out the 2.0 lines and adding in the 1.0 lines\n+\n+        if( txt == null || txt.length() == 0 ) {\n+            return \"1111111111\";\n+        }\n+\n+        // 1. Convert to lowercase\n+        txt = txt.toLowerCase();\n+\n+        // 2. Remove anything not A-Z\n+        txt = txt.replaceAll(\"[^a-z]\", \"\");\n+\n+        // 2.5. Remove final e\n+        txt = txt.replace(\"e$\", \"\");             // 2.0 only\n+\n+        // 3. Handle various start options\n+        txt = txt.replace(\"^cough\", \"cou2f\");\n+        txt = txt.replace(\"^rough\", \"rou2f\");\n+        txt = txt.replace(\"^tough\", \"tou2f\");\n+        txt = txt.replace(\"^enough\", \"enou2f\");  // 2.0 only\n+        txt = txt.replace(\"^trough\", \"trou2f\");  // 2.0 only - note the spec says ^enough here again, c+p error I assume\n+        txt = txt.replace(\"^gn\", \"2n\");\n+        txt = txt.replace(\"^mb\", \"m2\");\n+\n+        // 4. Handle replacements\n+        txt = txt.replaceAll(\"cq\", \"2q\");\n+        txt = txt.replaceAll(\"ci\", \"si\");\n+        txt = txt.replaceAll(\"ce\", \"se\");\n+        txt = txt.replaceAll(\"cy\", \"sy\");\n+        txt = txt.replaceAll(\"tch\", \"2ch\");\n+        txt = txt.replaceAll(\"c\", \"k\");\n+        txt = txt.replaceAll(\"q\", \"k\");\n+        txt = txt.replaceAll(\"x\", \"k\");\n+        txt = txt.replaceAll(\"v\", \"f\");\n+        txt = txt.replaceAll(\"dg\", \"2g\");\n+        txt = txt.replaceAll(\"tio\", \"sio\");\n+        txt = txt.replaceAll(\"tia\", \"sia\");\n+        txt = txt.replaceAll(\"d\", \"t\");\n+        txt = txt.replaceAll(\"ph\", \"fh\");\n+        txt = txt.replaceAll(\"b\", \"p\");\n+        txt = txt.replaceAll(\"sh\", \"s2\");\n+        txt = txt.replaceAll(\"z\", \"s\");\n+        txt = txt.replace(\"^[aeiou]\", \"A\");\n+        txt = txt.replaceAll(\"[aeiou]\", \"3\");\n+        txt = txt.replaceAll(\"j\", \"y\");        // 2.0 only\n+        txt = txt.replaceAll(\"^y3\", \"Y3\");     // 2.0 only\n+        txt = txt.replaceAll(\"^y\", \"A\");       // 2.0 only\n+        txt = txt.replaceAll(\"y\", \"3\");        // 2.0 only\n+        txt = txt.replaceAll(\"3gh3\", \"3kh3\");\n+        txt = txt.replaceAll(\"gh\", \"22\");\n+        txt = txt.replaceAll(\"g\", \"k\");\n+        txt = txt.replaceAll(\"s+\", \"S\");\n+        txt = txt.replaceAll(\"t+\", \"T\");\n+        txt = txt.replaceAll(\"p+\", \"P\");\n+        txt = txt.replaceAll(\"k+\", \"K\");\n+        txt = txt.replaceAll(\"f+\", \"F\");\n+        txt = txt.replaceAll(\"m+\", \"M\");\n+        txt = txt.replaceAll(\"n+\", \"N\");\n+        txt = txt.replaceAll(\"w3\", \"W3\");\n+        //txt = txt.replaceAll(\"wy\", \"Wy\");    // 1.0 only\n+        txt = txt.replaceAll(\"wh3\", \"Wh3\");\n+        txt = txt.replaceAll(\"w$\", \"3\");       // 2.0 only\n+        //txt = txt.replaceAll(\"why\", \"Why\");  // 1.0 only\n+        txt = txt.replaceAll(\"w\", \"2\");\n+        txt = txt.replace(\"^h\", \"A\");\n+        txt = txt.replaceAll(\"h\", \"2\");\n+        txt = txt.replaceAll(\"r3\", \"R3\");\n+        txt = txt.replaceAll(\"r$\", \"3\");       // 2.0 only\n+        //txt = txt.replaceAll(\"ry\", \"Ry\");    // 1.0 only\n+        txt = txt.replaceAll(\"r\", \"2\");\n+        txt = txt.replaceAll(\"l3\", \"L3\");\n+        txt = txt.replaceAll(\"l$\", \"3\");       // 2.0 only\n+        //txt = txt.replaceAll(\"ly\", \"Ly\");    // 1.0 only\n+        txt = txt.replaceAll(\"l\", \"2\");\n+        //txt = txt.replaceAll(\"j\", \"y\");      // 1.0 only\n+        //txt = txt.replaceAll(\"y3\", \"Y3\");    // 1.0 only\n+        //txt = txt.replaceAll(\"y\", \"2\");      // 1.0 only\n+\n+        // 5. Handle removals\n+        txt = txt.replaceAll(\"2\", \"\");\n+        txt = txt.replaceAll(\"3$\", \"A\");       // 2.0 only\n+        txt = txt.replaceAll(\"3\", \"\");\n+\n+        // 6. put ten 1s on the end\n+        txt = txt + \"111111\" + \"1111\";        // 1.0 only has 6 1s\n+\n+        // 7. take the first six characters as the code\n+        return txt.substring(0, 10);          // 1.0 truncates to 6\n+    }\n+\n+    /**\n+     * Encodes an Object using the caverphone algorithm.  This method\n+     * is provided in order to satisfy the requirements of the\n+     * Encoder interface, and will throw an EncoderException if the\n+     * supplied object is not of type java.lang.String.\n+     *\n+     * @param pObject Object to encode\n+     * @return An object (or type java.lang.String) containing the \n+     *         caverphone code which corresponds to the String supplied.\n+     * @throws EncoderException if the parameter supplied is not\n+     *                          of type java.lang.String\n+     */\n+    public Object encode(Object pObject) throws EncoderException {\n+        if (!(pObject instanceof java.lang.String)) {\n+            throw new EncoderException(\"Parameter supplied to Caverphone encode is not of type java.lang.String\"); \n+        }\n+        return caverphone((String) pObject);\n+    }\n+\n+    /**\n+     * Encodes a String using the Caverphone algorithm. \n+     *\n+     * @param pString String object to encode\n+     * @return The caverphone code corresponding to the String supplied\n+     */\n+    public String encode(String pString) {\n+        return caverphone(pString);   \n+    }\n+\n+    /**\n+     * Tests if the caverphones of two strings are identical.\n+     *\n+     * @param str1 First of two strings to compare\n+     * @param str2 Second of two strings to compare\n+     * @return <code>true</code> if the caverphones of these strings are identical, \n+     *        <code>false</code> otherwise.\n+     */\n+    public boolean isCaverphoneEqual(String str1, String str2) {\n+        return caverphone(str1).equals(caverphone(str2));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/language/CaverphoneTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */ \n+\n+package org.apache.commons.codec.language;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.codec.StringEncoder;\n+import org.apache.commons.codec.StringEncoderAbstractTest;\n+\n+/**\n+ * @author Apache Software Foundation\n+ * @version $Id: CaverphoneTest.java 588074 2007-10-24 23:04:56Z ggregory $\n+ */\n+public class CaverphoneTest extends StringEncoderAbstractTest {\n+\n+    public static Test suite() {\n+        return new TestSuite(CaverphoneTest.class);\n+    }\n+\n+    public CaverphoneTest(String name) {\n+        super(name);\n+    }\n+\n+    protected StringEncoder makeEncoder() {\n+        return new Caverphone();\n+    }\n+\n+    public void testWikipediaExamples() {\n+        Caverphone caverphone = new Caverphone();\n+        String[][] data = {\n+            {\"Stevenson\", \"STFNSN1111\"},\n+            {\"Peter\",     \"PTA1111111\"},\n+            {\"ready\",     \"RTA1111111\"},\n+            {\"social\",    \"SSA1111111\"},\n+            {\"able\",      \"APA1111111\"},\n+            {\"Tedder\",    \"TTA1111111\"},\n+            {\"Karleen\",   \"KLN1111111\"},\n+            {\"Dyun\",      \"TN11111111\"},\n+        };\n+\n+        for(int i=0; i<data.length; i++) {\n+            assertEquals( data[i][1], caverphone.caverphone(data[i][0]) );\n+        }\n+    }\n+\n+}", "timestamp": 1204966824, "metainfo": ""}