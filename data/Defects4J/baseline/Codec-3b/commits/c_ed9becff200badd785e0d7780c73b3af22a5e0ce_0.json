{"sha": "ed9becff200badd785e0d7780c73b3af22a5e0ce", "log": "Javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n \n /**\n  * Encodes a string into a double metaphone value.\n- * This Implementation is based on the algorithm by Lawrence Philips.\n+ * This Implementation is based on the algorithm by <CITE>Lawrence Philips</CITE>.\n  * <ul>\n  * <li>Original Article: <a \n  * href=\"http://www.cuj.com/documents/s=8038/cuj0006philips/\">\n  * </ul>\n  * \n  * @author Apache Software Foundation\n- * @version $Id: DoubleMetaphone.java,v 1.23 2004/05/24 04:55:33 ggregory Exp $\n+ * @version $Id: DoubleMetaphone.java,v 1.24 2004/06/05 18:32:04 ggregory Exp $\n  */\n public class DoubleMetaphone implements StringEncoder {\n \n--- a/src/java/org/apache/commons/codec/language/Metaphone.java\n+++ b/src/java/org/apache/commons/codec/language/Metaphone.java\n import org.apache.commons.codec.StringEncoder;\n \n /**\n- * Encodes a string into a metaphone value.\n- * The initial Java implementation, William B. Brogden.  December, 1997\n- * Permission given by wbrogden for code to be used anywhere.\n- * \n- *  \"Hanging on the Metaphone\" by Lawrence Philips\n- *      <i>Computer Language</i> of Dec. 1990, p 39   \n+ * Encodes a string into a metaphone value. \n+ * <p>\n+ * Initial Java implementation by <CITE>William B. Brogden. December, 1997</CITE>. \n+ * Permission given by <CITE>wbrogden</CITE> for code to be used anywhere.\n+ * </p>\n+ * <p>\n+ * <CITE>Hanging on the Metaphone</CITE> by <CITE>Lawrence Philips</CITE> in <CITE>Computer Language of Dec. 1990, p\n+ * 39.</CITE>\n+ * </p>\n  * \n  * @author Apache Software Foundation\n- * @version $Id: Metaphone.java,v 1.19 2004/05/24 04:56:29 ggregory Exp $\n+ * @version $Id: Metaphone.java,v 1.20 2004/06/05 18:32:04 ggregory Exp $\n  */\n public class Metaphone implements StringEncoder {\n \n--- a/src/java/org/apache/commons/codec/language/RefinedSoundex.java\n+++ b/src/java/org/apache/commons/codec/language/RefinedSoundex.java\n import org.apache.commons.codec.StringEncoder;\n \n /**\n- * Encodes a string into a refined soundex value. A refined soundex code is\n- * optimized for spell checking word. \"Soundex\" method originally developed by\n- * Margaret Odell and Robert Russell\n+ * Encodes a string into a Refined Soundex value. A refined soundex code is\n+ * optimized for spell checking words. Soundex method originally developed by\n+ * <CITE>Margaret Odell</CITE> and <CITE>Robert Russell</CITE>.\n  * \n  * @author Apache Software Foundation\n- * @version $Id: RefinedSoundex.java,v 1.20 2004/05/24 04:57:24 ggregory Exp $\n+ * @version $Id: RefinedSoundex.java,v 1.21 2004/06/05 18:32:04 ggregory Exp $\n  */\n public class RefinedSoundex implements StringEncoder {\n \n--- a/src/java/org/apache/commons/codec/language/Soundex.java\n+++ b/src/java/org/apache/commons/codec/language/Soundex.java\n import org.apache.commons.codec.StringEncoder;\n \n /**\n- * Encodes a string into a soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n+ * Encodes a string into a Soundex value. Soundex is an encoding used to relate similar names, but can also be used as a\n  * general purpose scheme to find word with similar phonemes.\n  * \n  * @author Apache Software Foundation\n- * @version $Id: Soundex.java,v 1.23 2004/06/05 00:43:32 ggregory Exp $\n+ * @version $Id: Soundex.java,v 1.24 2004/06/05 18:32:04 ggregory Exp $\n  */\n public class Soundex implements StringEncoder {\n \n     /**\n      * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n      * means do not encode.\n+     * <p>\n+     * (This constant is provided as both an implementation convenience and to allow Javadoc to pick\n+     * up the value for the constant values page.)\n+     * </p>\n+     * \n+     * @see #US_ENGLISH_MAPPING\n+     */\n+    public static final String US_ENGLISH_MAPPING_STRING = \"01230120022455012623010202\";\n+\n+    /**\n+     * This is a default mapping of the 26 letters used in US English. A value of <code>0</code> for a letter position\n+     * means do not encode.\n      * \n      * @see Soundex#Soundex(char[])\n      */\n-    public static final char[] US_ENGLISH_MAPPING = \"01230120022455012623010202\".toCharArray();\n+    public static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();\n \n     /**\n      * Encodes the Strings and returns the number of characters in the two encoded Strings that are the same. This\n     }\n \n     /**\n-     * Creates a soundex instance using the given mapping. This constructor can be used to customize the mapping, and/or\n-     * possibly provide an internationalized mapping for a non-Western character set.\n+     * Creates a soundex instance using the given mapping. This constructor can be used to provide an internationalized\n+     * mapping for a non-Western character set.\n      * \n      * Every letter of the alphabet is \"mapped\" to a numerical value. This char array holds the values to which each\n      * letter is mapped. This implementation contains a default map for US_ENGLISH", "timestamp": 1086460324, "metainfo": ""}