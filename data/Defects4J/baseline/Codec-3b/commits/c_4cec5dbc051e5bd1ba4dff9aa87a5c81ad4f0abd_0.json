{"sha": "4cec5dbc051e5bd1ba4dff9aa87a5c81ad4f0abd", "log": "Rename the instance variable from \"ENCODING\" to \"encoding\". Add getEncoding() accessor and replace instance variable references with accessor method call. Remove throws EncoderException from methods that in fact NEVER throw such an Exception.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n  * \n  * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: URLCodec.java,v 1.8 2003/10/12 02:17:11 tobrien Exp $\n+ * @version $Id: URLCodec.java,v 1.9 2003/10/13 16:49:24 ggregory Exp $\n  */\n \n public class URLCodec \n     /**\n      * The <code>String</code> encoding used for decoding and encoding.\n      */\n-    protected String ENCODING = \"US-ASCII\";\n+    protected String encoding = \"US-ASCII\";\n     \n     /**\n      * BitSet of www-form-url safe characters.\n      */\n     public URLCodec(String encoding) {\n         super();\n-        ENCODING = encoding;\n+        this.encoding = encoding;\n     }\n \n     /**\n      * @param urlsafe bitset of characters deemed URL safe\n      * @param pArray array of bytes to convert to URL safe characters\n      * @return array of bytes containing URL safe characters\n-     * @throws EncoderException Thrown if URL encoding is unsuccessful\n      */\n     public static final byte[] encodeUrl(BitSet urlsafe, byte[] pArray) \n-        throws EncoderException\n     {\n         if (pArray == null) {\n             return null;\n      *\n      * @param pArray array of bytes to convert to URL safe characters\n      * @return array of bytes containing URL safe characters\n-     * @throws EncoderException Thrown if URL encoding is unsuccessful\n-     */\n-    public byte[] encode(byte[] pArray) throws EncoderException {\n+     */\n+    public byte[] encode(byte[] pArray) {\n         return encodeUrl(WWW_FORM_URL, pArray);\n     }\n \n      *\n      * @param pString string to convert to a URL safe form\n      * @return URL safe string\n-     * @throws EncoderException Thrown if URL encoding is unsuccessful\n      * @throws UnsupportedEncodingException Thrown if charset is not\n      *                                      supported \n      */\n     public String encode(String pString, String charset) \n-        throws EncoderException, UnsupportedEncodingException  \n+        throws UnsupportedEncodingException  \n     {\n         if (pString == null) {\n             return null;\n         }\n-        return new String(encode(pString.getBytes(charset)), ENCODING);\n+        return new String(encode(pString.getBytes(charset)), this.getEncoding());\n     }\n \n \n             return null;\n         }\n         try {\n-            return new String(encode(pString.getBytes()), ENCODING);\n+            return new String(encode(pString.getBytes()), this.getEncoding());\n         } catch(UnsupportedEncodingException e) {\n             throw new EncoderException(e.getMessage());\n         }\n         if (pString == null) {\n             return null;\n         }\n-        return new String(decode(pString.getBytes(ENCODING)), charset);\n+        return new String(decode(pString.getBytes(this.getEncoding())), charset);\n     }\n \n \n             return null;\n         }\n         try {\n-            return new String(decode(pString.getBytes(ENCODING)));\n+            return new String(decode(pString.getBytes(this.getEncoding())));\n         } catch(UnsupportedEncodingException e) {\n             throw new DecoderException(e.getMessage());\n         }\n               \n         }\n     }\n+\n+    /**\n+     * The <code>String</code> encoding used for decoding and encoding.\n+     *\n+     * @return Returns the encoding.\n+     */\n+    public String getEncoding() {\n+        return this.encoding;\n+    }\n+\n }", "timestamp": 1066063764, "metainfo": ""}