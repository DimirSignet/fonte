{"sha": "de10106801ea43d169a5b58285a9235ff382981c", "log": "Checkstyle fixes  ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n         bitlen = ((bitlen + 7) >> 3) << 3;\n         byte[] bigBytes = bigInt.toByteArray();\n \n-        if(((bigInt.bitLength() % 8) != 0)\n-            && (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n+        if(((bigInt.bitLength() % 8) != 0) &&\n+            (((bigInt.bitLength() / 8) + 1) == (bitlen / 8))) {\n             return bigBytes;\n         }\n \n--- a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n \t\t\treturn false;\n \t\t} else {\n \t\t\tchar c = charAt(value, index + 2);\n-\t\t\treturn (c != 'I' && c != 'E')\n-\t\t\t\t\t|| contains(value, index - 2, 6, \"BACHER\", \"MACHER\");\n+\t\t\treturn (c != 'I' && c != 'E') ||\n+\t\t\t\t\tcontains(value, index - 2, 6, \"BACHER\", \"MACHER\");\n \t\t}\n \t}\n     \n \t\tif (charAt(value, index + 1) == 'M') {\n \t\t\treturn true;\n \t\t}\n-\t\treturn contains(value, index - 1, 3, \"UMB\")\n-\t\t\t\t&& ((index + 1) == value.length() - 1 || contains(value,\n+\t\treturn contains(value, index - 1, 3, \"UMB\") &&\n+\t\t\t\t((index + 1) == value.length() - 1 || contains(value,\n \t\t\t\t\t\tindex + 2, 2, \"ER\"));\n \t}\n     \n--- a/src/java/org/apache/commons/codec/net/BCodec.java\n+++ b/src/java/org/apache/commons/codec/net/BCodec.java\n         } else if (value instanceof String) {\n             return encode((String) value);\n         } else {\n-            throw new EncoderException(\"Objects of type \"\n-                + value.getClass().getName()\n-                + \" cannot be encoded using BCodec\");\n+            throw new EncoderException(\"Objects of type \" +\n+                  value.getClass().getName() +\n+                  \" cannot be encoded using BCodec\");\n         }\n     }\n \n         } else if (value instanceof String) {\n             return decode((String) value);\n         } else {\n-            throw new DecoderException(\"Objects of type \"\n-                + value.getClass().getName()\n-                + \" cannot be decoded using BCodec\");\n+            throw new DecoderException(\"Objects of type \" +\n+                  value.getClass().getName() +\n+                  \" cannot be decoded using BCodec\");\n         }\n     }\n \n--- a/src/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QCodec.java\n         } else if (pObject instanceof String) {\n             return encode((String) pObject);\n         } else {\n-            throw new EncoderException(\"Objects of type \"\n-                + pObject.getClass().getName()\n-                + \" cannot be encoded using Q codec\");\n+            throw new EncoderException(\"Objects of type \" + \n+                  pObject.getClass().getName() + \n+                  \" cannot be encoded using Q codec\");\n         }\n     }\n \n         } else if (pObject instanceof String) {\n             return decode((String) pObject);\n         } else {\n-            throw new DecoderException(\"Objects of type \"\n-                + pObject.getClass().getName()\n-                + \" cannot be decoded using Q codec\");\n+            throw new DecoderException(\"Objects of type \" + \n+                  pObject.getClass().getName() + \n+                  \" cannot be decoded using Q codec\");\n         }\n     }\n \n--- a/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n         } else if (pObject instanceof String) {\n             return encode((String) pObject);\n         } else {\n-            throw new EncoderException(\"Objects of type \"\n-                + pObject.getClass().getName()\n-                + \" cannot be quoted-printable encoded\");\n+            throw new EncoderException(\"Objects of type \" + \n+                  pObject.getClass().getName() + \n+                  \" cannot be quoted-printable encoded\");\n         }\n     }\n \n         } else if (pObject instanceof String) {\n             return decode((String) pObject);\n         } else {\n-            throw new DecoderException(\"Objects of type \"\n-                + pObject.getClass().getName()\n-                + \" cannot be quoted-printable decoded\");\n+            throw new DecoderException(\"Objects of type \" + \n+                  pObject.getClass().getName() + \n+                  \" cannot be quoted-printable decoded\");\n         }\n     }\n ", "timestamp": 1204968771, "metainfo": ""}