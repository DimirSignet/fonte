{"sha": "e5afc85e67e21f11f7c5240f3b762ed661910b3d", "log": "Checkstyle improvements   ", "commit": "\n--- a/src/java/org/apache/commons/codec/base64/Base64.java\n+++ b/src/java/org/apache/commons/codec/base64/Base64.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/java/org/apache/commons/codec/base64/Attic/Base64.java,v 1.2 2003/05/29 23:03:28 tobrien Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/05/29 23:03:28 $\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  * 1996. Available at: http://www.ietf.org/rfc/rfc2045.txt\n  * </p>\n  * @author Jeffrey Rodriguez\n- * @version $Revision: 1.2 $ $Date: 2003/05/29 23:03:28 $\n+ * @version $Revision: 1.3 $ $Date: 2003/06/18 18:43:56 $\n  *\n  * @deprecated This class has been replaced by \n  *             {@link org.apache.commons.codec.binary.Base64}\n  */\n public final class Base64 {\n \n+    /**\n+     * The default character encoding\n+     */\n     protected static final String DEFAULT_CHAR_ENCODING = \"ISO-8859-1\";\n \n     /**\n      */\n     static final byte PAD = (byte) '=';\n \n-    // Create arrays to hold the base64 characters and a \n-    // lookup for base64 chars\n+    /**\n+     * Create arrays to hold the base64 characters and a \n+     * lookup for base64 chars\n+     */\n     private static byte[] base64Alphabet = new byte[BASELENGTH];\n \n+    /**\n+     * An empty array of type byte\n+     */\n     private static final byte[] EMPTY_BYTE_ARRAY = new byte[0];\n     \n     /**\n      * @param charEncoding the character encoding to use when converting\n      *                     a String to a byte[]\n      * @return Base64-encoded String\n+     * @throws UnsupportedEncodingException\n      */\n     public static String encode(String data, String charEncoding)\n         throws UnsupportedEncodingException {\n--- a/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n+++ b/src/java/org/apache/commons/codec/language/DoubleMetaphone.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/java/org/apache/commons/codec/language/DoubleMetaphone.java,v 1.2 2003/06/18 17:46:38 tobrien Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/06/18 17:46:38 $\n- *\n  * ====================================================================\n  *\n  * The Apache Software License, Version 1.1\n  */\n public class DoubleMetaphone implements StringEncoder {\n \n+    /**\n+     * \"Vowels\" to test for\n+     */\n     private static final String VOWELS = \"AEIOUY\";\n+\n+    /**\n+     * Prefixes when present which are not pronounced\n+     */\n     private static final String[] SILENT_START = \n     { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };\n     private static final String[] L_R_N_M_B_H_F_V_W_SPACE = \n     private static final String[] L_T_K_S_N_M_B_Z = \n     { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };\n \n+    /**\n+     * Maximum length of an encoding, default is 4\n+     */\n     private int maxCodeLen = 4;\n \n+    /**\n+     * Creates an instance of this DoubleMetaphone encoder\n+     */\n     public DoubleMetaphone() {\n         super();\n     }\n     \n     /**\n      * Encode a value with Double Metaphone\n+     *\n+     * @param value String to encode\n+     * @return an encoded string\n      */\n     public String doubleMetaphone(String value) {\n         return doubleMetaphone(value, false);\n     /**\n      * Encode a value with Double Metaphone, optionally using the alternate\n      * encoding.\n+     *\n+     * @param value String to encode\n+     * @param alternate use alternate encode\n+     * @return an encoded string\n      */\n     public String doubleMetaphone(String value, boolean alternate) {\n         value = cleanInput(value);\n                 break;\n             case 'B':\n                 result.append('P');\n-                index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\n+                index = charAt(value, index + 1) == 'B' \n+                    ? index + 2 \n+                    : index + 1;\n                 break;\n                 // FIXME: Removed support for this character until \n                 // Unicode code is found.\n                 break;\n             case 'F':\n                 result.append('F');\n-                index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\n+                index = charAt(value, index + 1) == 'F' \n+                    ? index + 2 \n+                    : index + 1;\n                 break;\n             case 'G':\n                 index = handleG(value, result, index, slavoGermanic);\n                 break;\n             case 'K':\n                 result.append('K');\n-                index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\n+                index = charAt(value, index + 1) == 'K' \n+                    ? index + 2 \n+                    : index + 1;\n                 break;\n             case 'L':\n                 index = handleL(value, result, index);\n                 break;\n             case 'N':\n                 result.append('N');\n-                index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\n+                index = charAt(value, index + 1) == 'N' \n+                    ? index + 2 \n+                    : index + 1;\n                 break;\n                 // FIXME: Removed support for this character until we\n                 // find the Unicode code\n                 break;\n             case 'Q':\n                 result.append('K');\n-                index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\n+                index = charAt(value, index + 1) == 'Q' \n+                    ? index + 2 \n+                    : index + 1;\n                 break;\n             case 'R':\n                 index = handleR(value, result, index, slavoGermanic);\n                 break;\n             case 'V':\n                 result.append('F');\n-                index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\n+                index = charAt(value, index + 1) == 'V' \n+                    ? index + 2 \n+                    : index + 1;\n                 break;\n             case 'W':\n                 index = handleW(value, result, index);\n     /**\n      * Encode the value using DoubleMetaphone.  It will only work if \n      * <code>obj</code> is a <code>String</code> (like <code>Metaphone</code>).\n+     *\n+     * @param obj Object to encode (should be of type String)\n+     * @return An encoded Object (will be of type String)\n      */\n     public Object encode(Object obj) throws EncoderException {\n         Object result;\n     }\n \n     /**\n-     * Encode the value using DoubleMetaphone\n+     * Encode the value using DoubleMetaphone.\n+     *\n+     * @param value String to encode\n+     * @return An encoded String\n+     * @throws EncoderException thrown if there is an exception during\n+     *         the encoding process.\n      */\n     public String encode(String value) throws EncoderException {\n         return (doubleMetaphone(value));   \n      * Check if the Double Metaphone values of two <code>String</code> values\n      * are equal, optionally using the alternate value\n      */\n-    public boolean isDoubleMetaphoneEqual(String value1, String value2, boolean \n-                                          alternate) {\n+    public boolean isDoubleMetaphoneEqual(String value1, \n+                                          String value2, \n+                                          boolean alternate) {\n         return doubleMetaphone(value1, alternate).equals(doubleMetaphone\n                                                          (value2, alternate));\n     }\n     /**\n      * Handles 'C' cases\n      */\n-    private int handleC(String value, DoubleMetaphoneResult result, int index) {\n+    private int handleC(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index) {\n         if (conditionC0(value, index)) {  // very confusing, moved out\n             result.append('K');\n             index += 2;\n     /**\n      * Handles 'CC' cases\n      */\n-    private int handleCC(String value, DoubleMetaphoneResult result, int index) \n-    {\n+    private int handleCC(String value, \n+                         DoubleMetaphoneResult result, \n+                         int index) {\n         if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") && \n             !contains(value, index + 2, 2, \"HU\")) {\n             //-- \"bellocchio\" but not \"bacchus\" --//\n     /**\n      * Handles 'CH' cases\n      */\n-    private int handleCH(String value, DoubleMetaphoneResult result, int index) \n-    {\n+    private int handleCH(String value, \n+                         DoubleMetaphoneResult result, \n+                         int index) {\n         if (index > 0 && contains(value, index, 4, \"CHAE\")) {   // Michael\n             result.append('K', 'X');\n             return index + 2;\n     /**\n      * Handles 'D' cases\n      */\n-    private int handleD(String value, DoubleMetaphoneResult result, int index) {\n+    private int handleD(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index) {\n         if (contains(value, index, 2, \"DG\")) {\n             //-- \"Edge\" --//\n             if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\")) {\n     /**\n      * Handles 'G' cases\n      */\n-    private int handleG(String value, DoubleMetaphoneResult result, int index, \n+    private int handleG(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index, \n                         boolean slavoGermanic) {\n         if (charAt(value, index + 1) == 'H') {\n             index = handleGH(value, result, index);\n         } else if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic) {\n             result.append(\"KL\", \"L\");\n             index += 2;\n-        } else if (index == 0 && (charAt(value, index + 1) == 'Y' || contains\n-                                  (value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n+        } else if (index == 0 \n+                   && (charAt(value, index + 1) == 'Y' \n+                       || contains(value, \n+                                   index + 1, \n+                                   2, \n+                                   ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER))) {\n             //-- -ges-, -gep-, -gel-, -gie- at beginning --//\n             result.append('K', 'J');\n             index += 2;\n-        } else if ((contains(value, index + 1, 2, \"ER\") || charAt(value, index \n-                                                                  + 1) == 'Y') &&\n+        } else if ((contains(value, index + 1, 2, \"ER\") \n+                    || charAt(value, index + 1) == 'Y') &&\n                    !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n                    !contains(value, index - 1, 1, \"E\", \"I\") && \n                    !contains(value, index - 1, 3, \"RGY\", \"OGY\")) {\n         } else if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") || \n                    contains(value, index - 1, 4, \"AGGI\", \"OGGI\")) {\n             //-- Italian \"biaggi\" --//\n-            if ((contains(value, 0 ,4, \"VAN \", \"VON \") || contains(value, 0, \n-                                                                   3, \"SCH\")) ||\n+            if ((contains(value, 0 ,4, \"VAN \", \"VON \") \n+                 || contains(value, 0, 3, \"SCH\")) ||\n                 contains(value, index + 1, 2, \"ET\")) {\n                 //-- obvious germanic --//\n                 result.append('K');\n     /**\n      * Handles 'GH' cases\n      */\n-    private int handleGH(String value, DoubleMetaphoneResult result, int index) \n-    {\n+    private int handleGH(String value, \n+                         DoubleMetaphoneResult result, \n+                         int index) {\n         if (index > 0 && !isVowel(charAt(value, index - 1))) {\n             result.append('K');\n             index += 2;\n     /**\n      * Handles 'H' cases\n      */\n-    private int handleH(String value, DoubleMetaphoneResult result, int index) {\n+    private int handleH(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index) {\n         //-- only keep if first & before vowel or between 2 vowels --//\n         if ((index == 0 || isVowel(charAt(value, index - 1))) && \n             isVowel(charAt(value, index + 1))) {\n      */\n     private int handleJ(String value, DoubleMetaphoneResult result, int index, \n                         boolean slavoGermanic) {\n-        if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \")) \n-            {\n+        if (contains(value, index, 4, \"JOSE\") \n+            || contains(value, 0, 4, \"SAN \")) {\n                 //-- obvious Spanish, \"Jose\", \"San Jacinto\" --//\n                 if ((index == 0 && (charAt(value, index + 4) == ' ') || \n                      value.length() == 4) || contains(value, 0, 4, \"SAN \")) {\n             } else {\n                 if (index == 0 && !contains(value, index, 4, \"JOSE\")) {\n                     result.append('J', 'A');\n-                } else if (isVowel(charAt(value, index - 1)) && !slavoGermanic && \n-                           (charAt(value, index + 1) == 'A' || \n-                            charAt(value, index + 1) == 'O')) {\n+                } else if (isVowel(charAt(value, index - 1)) \n+                           && !slavoGermanic \n+                           &&(charAt(value, index + 1) == 'A' || \n+                              charAt(value, index + 1) == 'O')) {\n                     result.append('J', 'H');\n                 } else if (index == value.length() - 1) {\n                     result.append('J', ' ');\n-                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) && !\n-                           contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n+                } else if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) \n+                           && !contains(value, index - 1, 1, \"S\", \"K\", \"L\")) {\n                     result.append('J');\n                 }\n \n     /**\n      * Handles 'L' cases\n      */\n-    private int handleL(String value, DoubleMetaphoneResult result, int index) {\n+    private int handleL(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index) {\n         result.append('L');\n         if (charAt(value, index + 1) == 'L') {\n             if (conditionL0(value, index)) {\n     /**\n      * Handles 'P' cases\n      */\n-    private int handleP(String value, DoubleMetaphoneResult result, int index) {\n+    private int handleP(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index) {\n         if (charAt(value, index + 1) == 'H') {\n             result.append('F');\n             index += 2;\n         } else {\n             result.append('P');\n-            index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index \n-                + 1;\n+            index = contains(value, index + 1, 1, \"P\", \"B\") \n+                ? index + 2 \n+                : index + 1;\n         }\n         return index;\n     }\n     /**\n      * Handles 'R' cases\n      */\n-    private int handleR(String value, DoubleMetaphoneResult result, int index, \n+    private int handleR(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index, \n                         boolean slavoGermanic) {\n         if (index == value.length() - 1 && !slavoGermanic && \n             contains(value, index - 2, 2, \"IE\") && \n     /**\n      * Handles 'S' cases\n      */\n-    private int handleS(String value, DoubleMetaphoneResult result, int index, \n+    private int handleS(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index, \n                         boolean slavoGermanic) {\n         if (contains(value, index - 1, 3, \"ISL\", \"YSL\")) {\n             //-- special cases \"island\", \"isle\", \"carlisle\", \"carlysle\" --//\n             result.append('X', 'S');\n             index++;\n         } else if (contains(value, index, 2, \"SH\")) {\n-            if (contains(value, index + 1, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n+            if (contains(value, index + 1, 4, \n+                         \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\")) {\n                 //-- germanic --//\n                 result.append('S');\n             } else {\n                 result.append('X');\n             }\n             index += 2;\n-        } else if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, \n-                                                                       index, 4, \"SIAN\")) {\n+        } else if (contains(value, index, 3, \"SIO\", \"SIA\") \n+                   || contains(value, index, 4, \"SIAN\")) {\n             //-- Italian and Armenian --//\n             if (slavoGermanic) {\n                 result.append('S');\n                 result.append('S', 'X');\n             }\n             index += 3;\n-        } else if ((index == 0 && contains(value, index + 1, \n-                                           1, \"M\", \"N\", \"L\", \"W\")) || contains(value, index + 1, 1, \"Z\")) {\n-            //-- german & anglicisations, e.g. \"smith\" match \"schmidt\", \"snider\" match \"schneider\" --//\n-                //-- also, -sz- in slavic language altho in hungarian it is pronounced \"s\" --//\n-                result.append('S', 'X');\n+        } else if ((index == 0 \n+                    && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) \n+                   || contains(value, index + 1, 1, \"Z\")) {\n+            //-- german & anglicisations, e.g. \"smith\" match \"schmidt\" //\n+            // \"snider\" match \"schneider\" --//\n+            //-- also, -sz- in slavic language altho in hungarian it //\n+            //   is pronounced \"s\" --//\n+            result.append('S', 'X');\n             index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1;\n         } else if (contains(value, index, 2, \"SC\")) {\n             index = handleSC(value, result, index);\n             } else {\n                 result.append('S');\n             }\n-            index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index \n-                + 1;\n+            index = contains(value, index + 1, 1, \"S\", \"Z\") \n+                ? index + 2 \n+                : index + 1;\n         }\n         return index;\n     }\n     /**\n      * Handles 'SC' cases\n      */\n-    private int handleSC(String value, DoubleMetaphoneResult result, int index) \n-    {\n+    private int handleSC(String value, \n+                         DoubleMetaphoneResult result, \n+                         int index) {\n         if (charAt(value, index + 2) == 'H') {\n             //-- Schlesinger's rule --//\n             if (contains(value, index + 3, \n                     result.append(\"SK\");\n                 }\n             } else {\n-                if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, \n-                                                                       3) != 'W') {\n+                if (index == 0 && !isVowel(charAt(value, 3)) \n+                    && charAt(value, 3) != 'W') {\n                     result.append('X', 'S');\n                 } else {\n                     result.append('X');\n     /**\n      * Handles 'T' cases\n      */\n-    private int handleT(String value, DoubleMetaphoneResult result, int index) {\n+    private int handleT(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index) {\n         if (contains(value, index, 4, \"TION\")) {\n             result.append('X');\n             index += 3;\n             index += 2;\n         } else {\n             result.append('T');\n-            index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index \n-                + 1;\n+            index = contains(value, index + 1, 1, \"T\", \"D\") \n+                ? index + 2 \n+                : index + 1;\n         }\n         return index;\n     }\n     /**\n      * Handles 'W' cases\n      */\n-    private int handleW(String value, DoubleMetaphoneResult result, int index) {\n+    private int handleW(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index) {\n         if (contains(value, index, 2, \"WR\")) {\n             //-- can also be in middle of word --//\n             result.append('R');\n                     result.append('A');\n                 }\n                 index++;\n-            } else if ((index == value.length() - 1 && isVowel(charAt(value, \n-                                                                      index - 1))) ||\n+            } else if ((index == value.length() - 1 \n+                        && isVowel(charAt(value, index - 1))) ||\n                        contains(value, index - 1, \n                                 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                        contains(value, 0, 3, \"SCH\")) {\n     /**\n      * Handles 'X' cases\n      */\n-    private int handleX(String value, DoubleMetaphoneResult result, int index) {\n+    private int handleX(String value, \n+                        DoubleMetaphoneResult result, \n+                        int index) {\n         if (index == 0) {\n             result.append('S');\n             index++;\n                 //-- French e.g. breaux --//\n                 result.append(\"KS\");\n             }\n-            index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index \n-                + 1;\n+            index = contains(value, index + 1, 1, \"C\", \"X\") \n+                ? index + 2 \n+                : index + 1;\n         }\n         return index;\n     }\n             result.append('J');\n             index += 2;\n         } else {\n-            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") || \n-                (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T'))) {\n+            if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") \n+                || (slavoGermanic \n+                    && (index > 0 && charAt(value, index - 1) != 'T'))) {\n                 result.append(\"S\", \"TS\");\n             } else {\n                 result.append('S');", "timestamp": 1055961836, "metainfo": ""}