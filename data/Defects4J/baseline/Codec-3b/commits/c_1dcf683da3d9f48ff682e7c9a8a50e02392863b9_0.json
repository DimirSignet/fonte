{"sha": "1dcf683da3d9f48ff682e7c9a8a50e02392863b9", "log": "Bugzilla #21633: Commit'd patch from Michael Becke to URL   ", "commit": "\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/java/org/apache/commons/codec/net/URLCodec.java,v 1.2 2003/07/25 22:42:46 ggregory Exp $\n- * $Revision: 1.2 $\n- * $Date: 2003/07/25 22:42:46 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/java/org/apache/commons/codec/net/URLCodec.java,v 1.3 2003/07/31 20:09:21 tobrien Exp $\n+ * $Revision: 1.3 $\n+ * $Date: 2003/07/31 20:09:21 $\n  *\n  * ====================================================================\n  *\n  * </p>\n  * \n  * @author <a href=\"mailto:oleg@ural.ru\">Oleg Kalnichevski</a>\n- * @version $Id: URLCodec.java,v 1.2 2003/07/25 22:42:46 ggregory Exp $\n+ * @version $Id: URLCodec.java,v 1.3 2003/07/31 20:09:21 tobrien Exp $\n  */\n \n public class URLCodec \n         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); \n         for (int i = 0; i < pArray.length; i++) {\n             int b = pArray[i];\n-            if (urlsafe.get(b)) {\n+            if (b >= 0 && urlsafe.get(b)) {\n                 if (b == ' ') {\n                     b = '+';\n                 }\n--- a/src/test/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/URLCodecTest.java\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/net/URLCodecTest.java,v 1.1 2003/07/11 20:14:37 tobrien Exp $\n- * $Revision: 1.1 $\n- * $Date: 2003/07/11 20:14:37 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//codec/src/test/org/apache/commons/codec/net/URLCodecTest.java,v 1.2 2003/07/31 20:09:21 tobrien Exp $\n+ * $Revision: 1.2 $\n+ * $Date: 2003/07/31 20:09:21 $\n  *\n  * ====================================================================\n  *\n  */\n \n public class URLCodecTest extends TestCase {\n+    \n+    static final int SWISS_GERMAN_STUFF_UNICODE [] = {\n+        0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n+    };\n+    \n+    static final int RUSSIAN_STUFF_UNICODE [] = {\n+        0x412, 0x441, 0x435, 0x43C, 0x5F, 0x43F, 0x440, 0x438, \n+        0x432, 0x435, 0x442 \n+    }; \n \n     public URLCodecTest(String name) {\n         super(name);\n     }\n \n+    private String constructString(int [] unicodeChars) {\n+        StringBuffer buffer = new StringBuffer();\n+        if (unicodeChars != null) {\n+            for (int i = 0; i < unicodeChars.length; i++) {\n+                buffer.append((char)unicodeChars[i]); \n+            }\n+        }\n+        return buffer.toString();\n+    }\n+    \n+    public void testUTF8RoundTrip() throws Exception {\n+\n+        String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n+        String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n+        \n+        URLCodec codec = new URLCodec();\n+        \n+        assertEquals(\n+            \"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\", \n+            codec.encode(ru_msg, \"UTF-8\")\n+        );\n+        assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", codec.encode(ch_msg, \"UTF-8\"));\n+        \n+        assertEquals(ru_msg, codec.decode(codec.encode(ru_msg, \"UTF-8\"), \"UTF-8\"));\n+        assertEquals(ch_msg, codec.decode(codec.encode(ch_msg, \"UTF-8\"), \"UTF-8\"));\n+    }\n \n     public void testBasicEncodeDecode() throws Exception {\n         URLCodec urlcodec = new URLCodec();", "timestamp": 1059682161, "metainfo": ""}