{"sha": "79ba87de2c46978b3066b97b62e23d53b14aefac", "log": "Make this class package private for now.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/net/RFC1522Codec.java\n+++ b/src/java/org/apache/commons/codec/net/RFC1522Codec.java\n  * \n  * @author Apache Software Foundation\n  * @since 1.3\n- * @version $Id: RFC1522Codec.java,v 1.1 2004/03/29 07:59:57 ggregory Exp $\n+ * @version $Id: RFC1522Codec.java,v 1.2 2004/04/09 22:21:43 ggregory Exp $\n  */\n abstract class RFC1522Codec {\n     \n             return null;\n         }\n         if ((!text.startsWith(\"=?\")) || (!text.endsWith(\"?=\"))) {\n-            throw new DecoderException(\"RFC 1521 violation: malformed encoded content\");\n+            throw new DecoderException(\"RFC 1522 violation: malformed encoded content\");\n         }\n         int termnator = text.length() - 2;\n         int from = 2;\n         int to = text.indexOf(\"?\", from);\n         if ((to == -1) || (to == termnator)) {\n-            throw new DecoderException(\"RFC 1521 violation: charset token not found\");\n+            throw new DecoderException(\"RFC 1522 violation: charset token not found\");\n         }\n         String charset = text.substring(from, to);\n+        if (charset.equals(\"\")) {\n+            throw new DecoderException(\"RFC 1522 violation: charset not specified\");\n+        }\n         from = to + 1;\n         to = text.indexOf(\"?\", from);\n         if ((to == -1) || (to == termnator)) {\n-            throw new DecoderException(\"RFC 1521 violation: encoding token not found\");\n+            throw new DecoderException(\"RFC 1522 violation: encoding token not found\");\n         }\n         String encoding = text.substring(from, to);\n         if (!getEncoding().equalsIgnoreCase(encoding)) {\n         }\n         from = to + 1;\n         to = text.indexOf(\"?\", from);\n-        if ((to == -1) || (to != termnator)) {\n-            throw new DecoderException(\"RFC 1521 violation: encoded content not found\");\n-        }\n         byte[] data = text.substring(from, to).getBytes(StringEncodings.US_ASCII);\n         data = doDecoding(data); \n         return new String(data, charset);", "timestamp": 1081549303, "metainfo": ""}