{"sha": "a952f092987217322ceb6ab1d559d0612d02a778", "log": "Renamed RequiredCharsetNames to CharEncoding to match [lang]. Constant name and values are the same.  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/CharEncoding.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec;\n+\n+/**\n+ * Character encoding names required of every implementation of the Java platform.\n+ * \n+ * From the Java documentation <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard\n+ * charsets</a>:\n+ * <p>\n+ * <cite>Every implementation of the Java platform is required to support the following character encodings. Consult the\n+ * release documentation for your implementation to see if any other encodings are supported. Consult the release\n+ * documentation for your implementation to see if any other encodings are supported. </cite>\n+ * </p>\n+ * \n+ * <ul>\n+ * <li><code>US-ASCII</code><br/>\n+ * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</li>\n+ * <li><code>ISO-8859-1</code><br/>\n+ * ISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1.</li>\n+ * <li><code>UTF-8</code><br/>\n+ * Eight-bit Unicode Transformation Format.</li>\n+ * <li><code>UTF-16BE</code><br/>\n+ * Sixteen-bit Unicode Transformation Format, big-endian byte order.</li>\n+ * <li><code>UTF-16LE</code><br/>\n+ * Sixteen-bit Unicode Transformation Format, little-endian byte order.</li>\n+ * <li><code>UTF-16</code><br/>\n+ * Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order\n+ * accepted on input, big-endian used on output.)</li>\n+ * </ul>\n+ * \n+ * This perhaps would best belong in the [lang] project. Even if a similar interface is defined in [lang], it is not\n+ * forseen that [codec] would be made to depend on [lang].\n+ * \n+ * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+ * @author Apache Software Foundation\n+ * @since 1.4\n+ * @version $Id$\n+ */\n+public class CharEncoding {\n+    /**\n+     * CharEncodingISO Latin Alphabet No. 1, a.k.a. ISO-LATIN-1. </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final String ISO_8859_1 = \"ISO-8859-1\";\n+\n+    /**\n+     * <p>\n+     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final String US_ASCII = \"US-ASCII\";\n+\n+    /**\n+     * <p>\n+     * Sixteen-bit Unicode Transformation Format, The byte order specified by a mandatory initial byte-order mark\n+     * (either order accepted on input, big-endian used on output)\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final String UTF_16 = \"UTF-16\";\n+\n+    /**\n+     * <p>\n+     * Sixteen-bit Unicode Transformation Format, big-endian byte order.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final String UTF_16BE = \"UTF-16BE\";\n+\n+    /**\n+     * <p>\n+     * Sixteen-bit Unicode Transformation Format, little-endian byte order.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final String UTF_16LE = \"UTF-16LE\";\n+\n+    /**\n+     * <p>\n+     * Eight-bit Unicode Transformation Format.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n+     */\n+    public static final String UTF_8 = \"UTF-8\";\n+}\n--- a/src/java/org/apache/commons/codec/binary/StringBytesUtils.java\n+++ b/src/java/org/apache/commons/codec/binary/StringBytesUtils.java\n \n import java.io.UnsupportedEncodingException;\n \n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n \n /**\n  * Converts String to bytes using the encodings required by the Java specification. These encodings are specified in <a\n  * href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n  * \n- * @see RequiredCharsetNames\n+ * @see CharEncoding\n  * @see <a href=\"http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @version $Id: $\n      * @see #getSupportedBytes(String, String)\n      */\n     public static byte[] getBytesIso8859_1(String string) {\n-        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.ISO_8859_1);\n+        return StringBytesUtils.getSupportedBytes(string, CharEncoding.ISO_8859_1);\n     }\n \n     /**\n      * @see #getSupportedBytes(String, String)\n      */\n     public static byte[] getBytesUsAscii(String string) {\n-        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.US_ASCII);\n+        return StringBytesUtils.getSupportedBytes(string, CharEncoding.US_ASCII);\n     }\n \n     /**\n      * @see #getSupportedBytes(String, String)\n      */\n     public static byte[] getBytesUtf16(String string) {\n-        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_16);\n+        return StringBytesUtils.getSupportedBytes(string, CharEncoding.UTF_16);\n     }\n \n     /**\n      * @see #getSupportedBytes(String, String)\n      */\n     public static byte[] getBytesUtf16Be(String string) {\n-        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_16BE);\n+        return StringBytesUtils.getSupportedBytes(string, CharEncoding.UTF_16BE);\n     }\n \n     /**\n      * @see #getSupportedBytes(String, String)\n      */\n     public static byte[] getBytesUtf16Le(String string) {\n-        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_16LE);\n+        return StringBytesUtils.getSupportedBytes(string, CharEncoding.UTF_16LE);\n     }\n \n     /**\n      * @see #getSupportedBytes(String, String)\n      */\n     public static byte[] getBytesUtf8(String string) {\n-        return StringBytesUtils.getSupportedBytes(string, RequiredCharsetNames.UTF_8);\n+        return StringBytesUtils.getSupportedBytes(string, CharEncoding.UTF_8);\n     }\n \n     /**\n      * @throws IllegalStateException\n      *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n      *             required charset name.\n-     * @see RequiredCharsetNames\n+     * @see CharEncoding\n      * @see String#getBytes(String)\n      */\n     public static byte[] getSupportedBytes(String string, String charsetName) {\n      * @throws IllegalStateException\n      *             Thrown when a {@link UnsupportedEncodingException} is caught, which should never happen for a\n      *             required charset name.\n-     * @see RequiredCharsetNames\n+     * @see CharEncoding\n      * @see String#String(byte[], String)\n      */\n     public static String newString(byte[] bytes, String charsetName) {\n      *             charset is required.\n      */\n     public static String newStringIso8859_1(byte[] bytes) {\n-        return StringBytesUtils.newString(bytes, RequiredCharsetNames.ISO_8859_1);\n+        return StringBytesUtils.newString(bytes, CharEncoding.ISO_8859_1);\n     }\n \n     /**\n      *             charset is required.\n      */\n     public static String newStringUsAscii(byte[] bytes) {\n-        return StringBytesUtils.newString(bytes, RequiredCharsetNames.US_ASCII);\n+        return StringBytesUtils.newString(bytes, CharEncoding.US_ASCII);\n     }\n \n     /**\n      *             charset is required.\n      */\n     public static String newStringUtf16(byte[] bytes) {\n-        return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_16);\n+        return StringBytesUtils.newString(bytes, CharEncoding.UTF_16);\n     }\n \n     /**\n      *             charset is required.\n      */\n     public static String newStringUtf16Be(byte[] bytes) {\n-        return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_16BE);\n+        return StringBytesUtils.newString(bytes, CharEncoding.UTF_16BE);\n     }\n \n     /**\n      *             charset is required.\n      */\n     public static String newStringUtf16Le(byte[] bytes) {\n-        return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_16LE);\n+        return StringBytesUtils.newString(bytes, CharEncoding.UTF_16LE);\n     }\n \n     /**\n      *             charset is required.\n      */\n     public static String newStringUtf8(byte[] bytes) {\n-        return StringBytesUtils.newString(bytes, RequiredCharsetNames.UTF_8);\n+        return StringBytesUtils.newString(bytes, CharEncoding.UTF_8);\n     }\n \n     private StringBytesUtils() {\n--- a/src/java/org/apache/commons/codec/net/BCodec.java\n+++ b/src/java/org/apache/commons/codec/net/BCodec.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.StringDecoder;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.binary.Base64;\n      * Default constructor.\n      */\n     public BCodec() {\n-        this(RequiredCharsetNames.UTF_8);\n+        this(CharEncoding.UTF_8);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/codec/net/QCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QCodec.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.StringDecoder;\n import org.apache.commons.codec.StringEncoder;\n \n      * Default constructor.\n      */\n     public QCodec() {\n-        this(RequiredCharsetNames.UTF_8);\n+        this(CharEncoding.UTF_8);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n import org.apache.commons.codec.BinaryEncoder;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.StringDecoder;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.binary.StringBytesUtils;\n      * Default constructor.\n      */\n     public QuotedPrintableCodec() {\n-        this(RequiredCharsetNames.UTF_8);\n+        this(CharEncoding.UTF_8);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n import org.apache.commons.codec.BinaryEncoder;\n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n import org.apache.commons.codec.StringDecoder;\n import org.apache.commons.codec.StringEncoder;\n import org.apache.commons.codec.binary.StringBytesUtils;\n      * Default constructor.\n      */\n     public URLCodec() {\n-        this(RequiredCharsetNames.UTF_8);\n+        this(CharEncoding.UTF_8);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/test/org/apache/commons/codec/CharEncodingTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.codec;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+/**\n+ * Sanity checks.\n+ * \n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @version $Id: $\n+ */\n+public class CharEncodingTest extends TestCase {\n+\n+    /**\n+     * We could make the constructor private in the future, it's a matter a style.\n+     */\n+    public void testConstructor() {\n+        new CharEncoding();\n+    }\n+\n+    public void testIso8859_1() {\n+        Assert.assertEquals(\"ISO-8859-1\", CharEncoding.ISO_8859_1);\n+    }\n+\n+    public void testUsAscii() {\n+        Assert.assertEquals(\"US-ASCII\", CharEncoding.US_ASCII);\n+    }\n+\n+    public void testUtf16() {\n+        Assert.assertEquals(\"UTF-16\", CharEncoding.UTF_16);\n+    }\n+\n+    public void testUtf16Be() {\n+        Assert.assertEquals(\"UTF-16BE\", CharEncoding.UTF_16BE);\n+    }\n+\n+    public void testUtf16Le() {\n+        Assert.assertEquals(\"UTF-16LE\", CharEncoding.UTF_16LE);\n+    }\n+\n+    public void testUtf8() {\n+        Assert.assertEquals(\"UTF-8\", CharEncoding.UTF_8);\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/codec/net/BCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/BCodecTest.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n \n /**\n  * Quoted-printable codec test cases\n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE);\n         String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE);\n \n-        BCodec bcodec = new BCodec(RequiredCharsetNames.UTF_8);\n+        BCodec bcodec = new BCodec(CharEncoding.UTF_8);\n \n         assertEquals(\"=?UTF-8?B?0JLRgdC10Lxf0L/RgNC40LLQtdGC?=\", bcodec.encode(ru_msg));\n         assertEquals(\"=?UTF-8?B?R3LDvGV6aV96w6Rtw6Q=?=\", bcodec.encode(ch_msg));\n--- a/src/test/org/apache/commons/codec/net/QCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/QCodecTest.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n \n /**\n  * Quoted-printable codec test cases\n         String ru_msg = constructString(RUSSIAN_STUFF_UNICODE); \n         String ch_msg = constructString(SWISS_GERMAN_STUFF_UNICODE); \n         \n-        QCodec qcodec = new QCodec(RequiredCharsetNames.UTF_8);\n+        QCodec qcodec = new QCodec(CharEncoding.UTF_8);\n         \n         assertEquals(\n             \"=?UTF-8?Q?=D0=92=D1=81=D0=B5=D0=BC=5F=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82?=\", \n--- a/src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/QuotedPrintableCodecTest.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n \n /**\n  * Quoted-printable codec test cases\n         \n         assertEquals(\n             \"=D0=92=D1=81=D0=B5=D0=BC_=D0=BF=D1=80=D0=B8=D0=B2=D0=B5=D1=82\", \n-        qpcodec.encode(ru_msg, RequiredCharsetNames.UTF_8)\n+        qpcodec.encode(ru_msg, CharEncoding.UTF_8)\n         );\n-        assertEquals(\"Gr=C3=BCezi_z=C3=A4m=C3=A4\", qpcodec.encode(ch_msg, RequiredCharsetNames.UTF_8));\n-        \n-        assertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));\n-        assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));\n+        assertEquals(\"Gr=C3=BCezi_z=C3=A4m=C3=A4\", qpcodec.encode(ch_msg, CharEncoding.UTF_8));\n+        \n+        assertEquals(ru_msg, qpcodec.decode(qpcodec.encode(ru_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n+        assertEquals(ch_msg, qpcodec.decode(qpcodec.encode(ch_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n     }\n \n     public void testBasicEncodeDecode() throws Exception {\n--- a/src/test/org/apache/commons/codec/net/RFC1522CodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/RFC1522CodecTest.java\n import junit.framework.TestCase;\n \n import org.apache.commons.codec.DecoderException;\n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n \n /**\n  * RFC 1522 compliant codec test cases\n     public void testNullInput() throws Exception {\n         RFC1522TestCodec testcodec = new RFC1522TestCodec();\n         assertNull(testcodec.decodeText(null));\n-        assertNull(testcodec.encodeText(null, RequiredCharsetNames.UTF_8));\n+        assertNull(testcodec.encodeText(null, CharEncoding.UTF_8));\n     }\n \n     public void testDecodeInvalid() throws Exception {\n--- a/src/test/org/apache/commons/codec/net/URLCodecTest.java\n+++ b/src/test/org/apache/commons/codec/net/URLCodecTest.java\n \n import org.apache.commons.codec.DecoderException;\n import org.apache.commons.codec.EncoderException;\n-import org.apache.commons.codec.RequiredCharsetNames;\n+import org.apache.commons.codec.CharEncoding;\n \n /**\n  * URL codec test cases\n         \n         assertEquals(\n             \"%D0%92%D1%81%D0%B5%D0%BC_%D0%BF%D1%80%D0%B8%D0%B2%D0%B5%D1%82\", \n-            urlCodec.encode(ru_msg, RequiredCharsetNames.UTF_8)\n+            urlCodec.encode(ru_msg, CharEncoding.UTF_8)\n         );\n-        assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", urlCodec.encode(ch_msg, RequiredCharsetNames.UTF_8));\n-        \n-        assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));\n-        assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, RequiredCharsetNames.UTF_8), RequiredCharsetNames.UTF_8));\n+        assertEquals(\"Gr%C3%BCezi_z%C3%A4m%C3%A4\", urlCodec.encode(ch_msg, CharEncoding.UTF_8));\n+        \n+        assertEquals(ru_msg, urlCodec.decode(urlCodec.encode(ru_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n+        assertEquals(ch_msg, urlCodec.decode(urlCodec.encode(ch_msg, CharEncoding.UTF_8), CharEncoding.UTF_8));\n         this.validateState(urlCodec);\n     }\n ", "timestamp": 1248565413, "metainfo": ""}