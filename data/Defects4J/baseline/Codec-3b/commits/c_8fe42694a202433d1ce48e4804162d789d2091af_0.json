{"sha": "8fe42694a202433d1ce48e4804162d789d2091af", "log": "- Refactor String encoding names for reuse.  - Javadoc - Format.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n+++ b/src/java/org/apache/commons/codec/net/QuotedPrintableCodec.java\n /*\n- * Copyright 2004 The Apache Software Foundation.\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */ \n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n \n package org.apache.commons.codec.net;\n \n import java.io.ByteArrayOutputStream;\n import java.io.UnsupportedEncodingException;\n import java.util.BitSet;\n-\n import org.apache.commons.codec.BinaryDecoder;\n import org.apache.commons.codec.BinaryEncoder;\n import org.apache.commons.codec.DecoderException;\n \n /**\n  * <p>\n- * Codec for the Quoted-Printable section of RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One \n- * Mechanisms for Specifying and Describing the Format of Internet Message Bodies.\n+ * Codec for the Quoted-Printable section of <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">RFC 1521 </a>.\n  * </p>\n  * <p>\n- * The Quoted-Printable encoding is intended to represent data that\n- * largely consists of octets that correspond to printable characters in\n- * the ASCII character set.  It encodes the data in such a way that the\n- * resulting octets are unlikely to be modified by mail transport.  If\n- * the data being encoded are mostly ASCII text, the encoded form of the\n- * data remains largely recognizable by humans.  A body which is\n- * entirely ASCII may also be encoded in Quoted-Printable to ensure the\n- * integrity of the data should the message pass through a character-\n- * translating, and/or line-wrapping gateway.\n+ * The Quoted-Printable encoding is intended to represent data that largely consists of octets that correspond to\n+ * printable characters in the ASCII character set. It encodes the data in such a way that the resulting octets are\n+ * unlikely to be modified by mail transport. If the data being encoded are mostly ASCII text, the encoded form of the\n+ * data remains largely recognizable by humans. A body which is entirely ASCII may also be encoded in Quoted-Printable\n+ * to ensure the integrity of the data should the message pass through a character- translating, and/or line-wrapping\n+ * gateway.\n  * </p>\n- *  \n+ * \n  * <p>\n  * Note:\n  * </p>\n  * <p>\n- * Rules #3, #4, and #5 of the quoted-printable spec are not implemented yet \n- * because the complete quoted-printable spec does not lend itself well\n- * into the byte[] oriented codec framework. Complete the codec once the\n- * steamable codec framework is ready. The motivation behind providing the codec in\n- * a partial form is that it can already come in handy for those applications that\n- * do not require quoted-printable line formatting (rules #3, #4, #5), for instance\n- * Q codec.\n+ * Rules #3, #4, and #5 of the quoted-printable spec are not implemented yet because the complete quoted-printable spec\n+ * does not lend itself well into the byte[] oriented codec framework. Complete the codec once the steamable codec\n+ * framework is ready. The motivation behind providing the codec in a partial form is that it can already come in handy\n+ * for those applications that do not require quoted-printable line formatting (rules #3, #4, #5), for instance Q codec.\n  * </p>\n  * \n- * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\">\n- * RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying \n- * and Describing the Format of Internet Message Bodies</a>\n+ * @see <a href=\"http://www.ietf.org/rfc/rfc1521.txt\"> RFC 1521 MIME (Multipurpose Internet Mail Extensions) Part One:\n+ *          Mechanisms for Specifying and Describing the Format of Internet Message Bodies </a>\n  * \n  * @author Apache Software Foundation\n  * @since 1.3\n- * @version $Id: QuotedPrintableCodec.java,v 1.5 2004/03/29 01:32:07 ggregory Exp $\n+ * @version $Id: QuotedPrintableCodec.java,v 1.6 2004/03/29 07:59:00 ggregory Exp $\n  */\n-public class QuotedPrintableCodec \n-        implements BinaryEncoder, BinaryDecoder, \n-                   StringEncoder, StringDecoder \n-{\n-    \n-    private final static String US_ASCII = \"US-ASCII\";\n-    \n+public class QuotedPrintableCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {\n     /**\n      * The default charset used for string decoding and encoding.\n      */\n-    protected String charset = \"UTF-8\";\n-    \n+    private String charset = StringEncodings.UTF8;\n+\n     /**\n      * BitSet of printable characters as defined in RFC 1521.\n      */\n-    protected static final BitSet PRINTABLE_CHARS = new BitSet(256);\n-    \n-    protected static byte ESCAPE_CHAR = '=';\n-    protected static byte TAB = 9;\n-    protected static byte CR = 13;\n-    protected static byte LF = 10;\n-    protected static byte SPACE = 32;\n-    \n+    private static final BitSet PRINTABLE_CHARS = new BitSet(256);\n+\n+    private static byte ESCAPE_CHAR = '=';\n+\n+    private static byte TAB = 9;\n+\n+    private static byte SPACE = 32;\n     // Static initializer for printable chars collection\n     static {\n         // alpha characters\n         PRINTABLE_CHARS.set(SPACE);\n     }\n \n-\n     /**\n      * Default constructor.\n      */\n     /**\n      * Constructor which allows for the selection of a default charset\n      * \n-     * @param charset the default string charset to use.\n+     * @param charset\n+     *                  the default string charset to use.\n      */\n     public QuotedPrintableCodec(String charset) {\n         super();\n     /**\n      * Encodes byte into its quoted-printable representation.\n      * \n-     * @param b byte to encode\n-     * @param buffer the buffer to write to \n-     */\n-    private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer)\n-    {\n+     * @param b\n+     *                  byte to encode\n+     * @param buffer\n+     *                  the buffer to write to\n+     */\n+    private static final void encodeQuotedPrintable(int b, ByteArrayOutputStream buffer) {\n         buffer.write(ESCAPE_CHAR);\n-        char hex1 = Character.toUpperCase(\n-          Character.forDigit((b >> 4) & 0xF, 16));\n-        char hex2 = Character.toUpperCase(\n-          Character.forDigit(b & 0xF, 16));\n+        char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));\n+        char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));\n         buffer.write(hex1);\n         buffer.write(hex2);\n     }\n \n     /**\n-     * Encodes an array of bytes into an array of quoted-printable 7-bit \n-     * characters. Unsafe characters are escaped.\n-     * \n-     * <p>This function implements a subset of quoted-printable encoding \n-     * specification (rule #1 and rule #2) as defined in RFC 1521 and is \n-     * suitable for encoding binary data and unformatted text.\n-     * </p>\n-     *\n-     * @param printable bitset of characters deemed quoted-printable\n-     * @param pArray array of bytes to be encoded\n+     * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n+     * \n+     * <p>\n+     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n+     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n+     * </p>\n+     * \n+     * @param printable\n+     *                  bitset of characters deemed quoted-printable\n+     * @param bytes\n+     *                  array of bytes to be encoded\n      * @return array of bytes containing quoted-printable data\n      */\n-    public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] pArray) {\n-        if (pArray == null) {\n+    public static final byte[] encodeQuotedPrintable(BitSet printable, byte[] bytes) {\n+        if (bytes == null) {\n             return null;\n         }\n         if (printable == null) {\n             printable = PRINTABLE_CHARS;\n         }\n         ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n-        for (int i = 0; i < pArray.length; i++) {\n-            int b = pArray[i];\n+        for (int i = 0; i < bytes.length; i++) {\n+            int b = bytes[i];\n             if (b < 0) {\n                 b = 256 + b;\n             }\n         return buffer.toByteArray();\n     }\n \n-\n-    /**\n-     * Decodes an array quoted-printable characters into an array of \n-     * original bytes. Escaped characters are converted back to their \n-     * original representation.\n-     *\n-     * <p>This function implements a subset of quoted-printable encoding \n-     * specification (rule #1 and rule #2) as defined in RFC 1521.\n-     * </p>\n-     * \n-     * @param pArray array of quoted-printable characters\n-     * @return array of original bytes \n-     * @throws DecoderException Thrown if quoted-printable decoding is unsuccessful\n-     */\n-    public static final byte[] decodeQuotedPrintable(byte[] pArray) \n-         throws DecoderException\n-    {\n-        if (pArray == null) {\n-            return null;\n-        }\n-        ByteArrayOutputStream buffer = new ByteArrayOutputStream(); \n-        for (int i = 0; i < pArray.length; i++) {\n-            int b = pArray[i];\n+    /**\n+     * Decodes an array quoted-printable characters into an array of original bytes. Escaped characters are converted\n+     * back to their original representation.\n+     * \n+     * <p>\n+     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n+     * RFC 1521.\n+     * </p>\n+     * \n+     * @param bytes\n+     *                  array of quoted-printable characters\n+     * @return array of original bytes\n+     * @throws DecoderException\n+     *                  Thrown if quoted-printable decoding is unsuccessful\n+     */\n+    public static final byte[] decodeQuotedPrintable(byte[] bytes) throws DecoderException {\n+        if (bytes == null) {\n+            return null;\n+        }\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        for (int i = 0; i < bytes.length; i++) {\n+            int b = bytes[i];\n             if (b == ESCAPE_CHAR) {\n                 try {\n-                    int u = Character.digit((char)pArray[++i], 16);\n-                    int l = Character.digit((char)pArray[++i], 16);\n+                    int u = Character.digit((char) bytes[++i], 16);\n+                    int l = Character.digit((char) bytes[++i], 16);\n                     if (u == -1 || l == -1) {\n                         throw new DecoderException(\"Invalid quoted-printable encoding\");\n                     }\n-                    buffer.write((char)((u << 4) + l));\n-                } catch(ArrayIndexOutOfBoundsException e) {\n+                    buffer.write((char) ((u << 4) + l));\n+                } catch (ArrayIndexOutOfBoundsException e) {\n                     throw new DecoderException(\"Invalid quoted-printable encoding\");\n                 }\n             } else {\n                 buffer.write(b);\n             }\n         }\n-        return buffer.toByteArray(); \n-    }\n-\n-\n-    /**\n-     * Encodes an array of bytes into an array of quoted-printable 7-bit \n-     * characters. Unsafe characters are escaped.\n-     * \n-     * <p>This function implements a subset of quoted-printable encoding \n-     * specification (rule #1 and rule #2) as defined in RFC 1521 and is \n-     * suitable for encoding binary data and unformatted text.\n-     * </p>\n-     *\n-     * @param pArray array of bytes to be encoded\n+        return buffer.toByteArray();\n+    }\n+\n+    /**\n+     * Encodes an array of bytes into an array of quoted-printable 7-bit characters. Unsafe characters are escaped.\n+     * \n+     * <p>\n+     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n+     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n+     * </p>\n+     * \n+     * @param bytes\n+     *                  array of bytes to be encoded\n      * @return array of bytes containing quoted-printable data\n      */\n-    public byte[] encode(byte[] pArray) {\n-        return encodeQuotedPrintable(PRINTABLE_CHARS, pArray);\n-    }\n-\n-\n-    /**\n-     * Decodes an array of quoted-printable characters into an array of \n-     * original bytes. Escaped characters are converted back to their \n-     * original representation.\n-     *\n-     * <p>This function implements a subset of quoted-printable encoding \n-     * specification (rule #1 and rule #2) as defined in RFC 1521.\n-     * </p>\n-     * \n-     * @param pArray array of quoted-printable characters\n-     * @return array of original bytes \n-     * @throws DecoderException Thrown if quoted-printable decoding is unsuccessful\n-     */\n-    public byte[] decode(byte[] pArray) throws DecoderException {\n-        return decodeQuotedPrintable(pArray);\n-    }\n-\n-    /**\n-     * Encodes a string into its quoted-printable form using the default\n-     * string charset. Unsafe characters are escaped.\n-     * \n-     * <p>This function implements a subset of quoted-printable encoding \n-     * specification (rule #1 and rule #2) as defined in RFC 1521 and is \n-     * suitable for encoding binary data.\n-     * </p>\n-     *\n-     * @param pString string to convert to quoted-printable form\n+    public byte[] encode(byte[] bytes) {\n+        return encodeQuotedPrintable(PRINTABLE_CHARS, bytes);\n+    }\n+\n+    /**\n+     * Decodes an array of quoted-printable characters into an array of original bytes. Escaped characters are converted\n+     * back to their original representation.\n+     * \n+     * <p>\n+     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n+     * RFC 1521.\n+     * </p>\n+     * \n+     * @param bytes\n+     *                  array of quoted-printable characters\n+     * @return array of original bytes\n+     * @throws DecoderException\n+     *                  Thrown if quoted-printable decoding is unsuccessful\n+     */\n+    public byte[] decode(byte[] bytes) throws DecoderException {\n+        return decodeQuotedPrintable(bytes);\n+    }\n+\n+    /**\n+     * Encodes a string into its quoted-printable form using the default string charset. Unsafe characters are escaped.\n+     * \n+     * <p>\n+     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n+     * RFC 1521 and is suitable for encoding binary data.\n+     * </p>\n+     * \n+     * @param pString\n+     *                  string to convert to quoted-printable form\n      * @return quoted-printable string\n      * \n-     * @throws EncoderException Thrown if quoted-printable encoding is unsuccessful\n+     * @throws EncoderException\n+     *                  Thrown if quoted-printable encoding is unsuccessful\n      * \n      * @see #getDefaultCharset()\n      */\n         }\n         try {\n             return encode(pString, getDefaultCharset());\n-        } catch(UnsupportedEncodingException e) {\n+        } catch (UnsupportedEncodingException e) {\n             throw new EncoderException(e.getMessage());\n         }\n     }\n \n     /**\n-     * Decodes a quoted-printable string into its original form using the \n-     * specified string charset. Escaped characters are converted back \n-     * to their original representation.\n-     *\n-     * @param pString quoted-printable string to convert into its original form\n-     * @param charset the original string charset\n-     * @return original string \n-     * @throws DecoderException Thrown if quoted-printable decoding is \n-     *                          unsuccessful\n-     * @throws UnsupportedEncodingException Thrown if charset is not\n-     *                                      supported \n-     */\n-    public String decode(String pString, String charset) \n-        throws DecoderException, UnsupportedEncodingException \n-    {\n+     * Decodes a quoted-printable string into its original form using the specified string charset. Escaped characters\n+     * are converted back to their original representation.\n+     * \n+     * @param pString\n+     *                  quoted-printable string to convert into its original form\n+     * @param charset\n+     *                  the original string charset\n+     * @return original string\n+     * @throws DecoderException\n+     *                  Thrown if quoted-printable decoding is unsuccessful\n+     * @throws UnsupportedEncodingException\n+     *                  Thrown if charset is not supported\n+     */\n+    public String decode(String pString, String charset) throws DecoderException, UnsupportedEncodingException {\n         if (pString == null) {\n             return null;\n         }\n-        return new String(decode(pString.getBytes(US_ASCII)), charset);\n-    }\n-\n-    /**\n-     * Decodes a quoted-printable string into its original form using the \n-     * default string charset. Escaped characters are converted back \n-     * to their original representation.\n-     *\n-     * @param pString quoted-printable string to convert into its original form\n-     * @return original string \n-     * @throws DecoderException Thrown if quoted-printable decoding is \n-     *                          unsuccessful\n-     * @throws UnsupportedEncodingException Thrown if charset is not\n-     *                                      supported\n+        return new String(decode(pString.getBytes(StringEncodings.US_ASCII)), charset);\n+    }\n+\n+    /**\n+     * Decodes a quoted-printable string into its original form using the default string charset. Escaped characters are\n+     * converted back to their original representation.\n+     * \n+     * @param pString\n+     *                  quoted-printable string to convert into its original form\n+     * @return original string\n+     * @throws DecoderException\n+     *                  Thrown if quoted-printable decoding is unsuccessful\n+     * @throws UnsupportedEncodingException\n+     *                  Thrown if charset is not supported\n      * @see #getDefaultCharset()\n      */\n     public String decode(String pString) throws DecoderException {\n         }\n         try {\n             return decode(pString, getDefaultCharset());\n-        } catch(UnsupportedEncodingException e) {\n+        } catch (UnsupportedEncodingException e) {\n             throw new DecoderException(e.getMessage());\n         }\n     }\n \n     /**\n-     * Encodes an object into its quoted-printable safe form. Unsafe \n-     * characters are escaped.\n-     *\n-     * @param pObject string to convert to a quoted-printable form\n+     * Encodes an object into its quoted-printable safe form. Unsafe characters are escaped.\n+     * \n+     * @param pObject\n+     *                  string to convert to a quoted-printable form\n      * @return quoted-printable object\n-     * @throws EncoderException Thrown if quoted-printable encoding is not \n-     *                          applicable to objects of this type or\n-     *                          if encoding is unsuccessful\n+     * @throws EncoderException\n+     *                  Thrown if quoted-printable encoding is not applicable to objects of this type or if encoding is\n+     *                  unsuccessful\n      */\n     public Object encode(Object pObject) throws EncoderException {\n         if (pObject == null) {\n             return null;\n         } else if (pObject instanceof byte[]) {\n-            return encode((byte[])pObject);\n+            return encode((byte[]) pObject);\n         } else if (pObject instanceof String) {\n-            return encode((String)pObject);\n+            return encode((String) pObject);\n         } else {\n-            throw new EncoderException(\"Objects of type \" +\n-                pObject.getClass().getName() + \" cannot be quoted-printable encoded\"); \n-              \n-        }\n-    }\n-\n-    /**\n-     * Decodes a quoted-printable object into its original form. Escaped \n-     * characters are converted back to their original representation.\n-     *\n-     * @param pObject quoted-printable object to convert into its original form\n-     * @return original object \n-     * @throws DecoderException Thrown if quoted-printable decoding is not \n-     *                          applicable to objects of this type\n-     *                          if decoding is unsuccessful\n+            throw new EncoderException(\"Objects of type \"\n+                + pObject.getClass().getName()\n+                + \" cannot be quoted-printable encoded\");\n+        }\n+    }\n+\n+    /**\n+     * Decodes a quoted-printable object into its original form. Escaped characters are converted back to their original\n+     * representation.\n+     * \n+     * @param pObject\n+     *                  quoted-printable object to convert into its original form\n+     * @return original object\n+     * @throws DecoderException\n+     *                  Thrown if quoted-printable decoding is not applicable to objects of this type if decoding is\n+     *                  unsuccessful\n      */\n     public Object decode(Object pObject) throws DecoderException {\n         if (pObject == null) {\n             return null;\n         } else if (pObject instanceof byte[]) {\n-            return decode((byte[])pObject);\n+            return decode((byte[]) pObject);\n         } else if (pObject instanceof String) {\n-            return decode((String)pObject);\n+            return decode((String) pObject);\n         } else {\n-            throw new DecoderException(\"Objects of type \" +\n-                pObject.getClass().getName() + \" cannot be quoted-printable decoded\"); \n-              \n+            throw new DecoderException(\"Objects of type \"\n+                + pObject.getClass().getName()\n+                + \" cannot be quoted-printable decoded\");\n         }\n     }\n \n     /**\n      * Returns the default charset used for string decoding and encoding.\n-     *\n+     * \n      * @return the default string charset.\n      */\n     public String getDefaultCharset() {\n     }\n \n     /**\n-     * Encodes a string into its quoted-printable form using the specified\n-     * charset. Unsafe characters are escaped.\n-     * \n-     * <p>This function implements a subset of quoted-printable encoding \n-     * specification (rule #1 and rule #2) as defined in RFC 1521 and is \n-     * suitable for encoding binary data and unformatted text.\n-     * </p>\n-     *\n-     * @param pString string to convert to quoted-printable form\n-     * @param charset the charset for pString\n+     * Encodes a string into its quoted-printable form using the specified charset. Unsafe characters are escaped.\n+     * \n+     * <p>\n+     * This function implements a subset of quoted-printable encoding specification (rule #1 and rule #2) as defined in\n+     * RFC 1521 and is suitable for encoding binary data and unformatted text.\n+     * </p>\n+     * \n+     * @param pString\n+     *                  string to convert to quoted-printable form\n+     * @param charset\n+     *                  the charset for pString\n      * @return quoted-printable string\n      * \n-     * @throws UnsupportedEncodingException Thrown if the charset is not\n-     *                                      supported \n-     */\n-    public String encode(String pString, String charset) \n-        throws UnsupportedEncodingException  \n-    {\n+     * @throws UnsupportedEncodingException\n+     *                  Thrown if the charset is not supported\n+     */\n+    public String encode(String pString, String charset) throws UnsupportedEncodingException {\n         if (pString == null) {\n             return null;\n         }\n-        return new String(encode(pString.getBytes(charset)), US_ASCII);\n-    }\n-\n-}\n+        return new String(encode(pString.getBytes(charset)), StringEncodings.US_ASCII);\n+    }\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/codec/net/StringEncodings.java\n+/*\n+ * Copyright 2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on\n+ * an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package org.apache.commons.codec.net;\n+\n+/**\n+ * String encodings used in this package.\n+ * \n+ * @author Apache Software Foundation\n+ * @since 1.3\n+ * @version $Id: StringEncodings.java,v 1.1 2004/03/29 07:59:00 ggregory Exp $\n+ */\n+interface StringEncodings {\n+    /**\n+     * <p>\n+     * Seven-bit ASCII, also known as ISO646-US, also known as the Basic Latin block of the Unicode character set.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *          encoding names</a>\n+     */\n+    String US_ASCII = \"US-ASCII\";\n+\n+    /**\n+     * <p>\n+     * Eight-bit Unicode Transformation Format.\n+     * </p>\n+     * <p>\n+     * Every implementation of the Java platform is required to support this character encoding.\n+     * </p>\n+     * \n+     * @see <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+     *          encoding names</a>\n+     */\n+    String UTF8 = \"UTF-8\";\n+}\n--- a/src/java/org/apache/commons/codec/net/URLCodec.java\n+++ b/src/java/org/apache/commons/codec/net/URLCodec.java\n  * \n  * @author Apache Software Foundation\n  * @since 1.2\n- * @version $Id: URLCodec.java,v 1.18 2004/03/21 01:58:40 ggregory Exp $\n+ * @version $Id: URLCodec.java,v 1.19 2004/03/29 07:59:00 ggregory Exp $\n  */\n-public class URLCodec \n-        implements BinaryEncoder, BinaryDecoder, \n-                   StringEncoder, StringDecoder \n-{\n+public class URLCodec implements BinaryEncoder, BinaryDecoder, StringEncoder, StringDecoder {\n     \n-    private final static String US_ASCII = \"US-ASCII\";\n-    \n     /**\n      * The default charset used for string decoding and encoding.\n      */\n-    protected String charset = \"UTF-8\";\n+    protected String charset = StringEncodings.UTF8;\n     \n     protected static byte ESCAPE_CHAR = '%';\n     /**\n      * characters. Unsafe characters are escaped.\n      *\n      * @param urlsafe bitset of characters deemed URL safe\n-     * @param pArray array of bytes to convert to URL safe characters\n+     * @param bytes array of bytes to convert to URL safe characters\n      * @return array of bytes containing URL safe characters\n      */\n-    public static final byte[] encodeUrl(BitSet urlsafe, byte[] pArray) \n+    public static final byte[] encodeUrl(BitSet urlsafe, byte[] bytes) \n     {\n-        if (pArray == null) {\n+        if (bytes == null) {\n             return null;\n         }\n         if (urlsafe == null) {\n         }\n         \n         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); \n-        for (int i = 0; i < pArray.length; i++) {\n-            int b = pArray[i];\n+        for (int i = 0; i < bytes.length; i++) {\n+            int b = bytes[i];\n             if (b < 0) {\n                 b = 256 + b;\n             }\n      * original bytes. Escaped characters are converted back to their \n      * original representation.\n      *\n-     * @param pArray array of URL safe characters\n+     * @param bytes array of URL safe characters\n      * @return array of original bytes \n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n      */\n-    public static final byte[] decodeUrl(byte[] pArray) \n+    public static final byte[] decodeUrl(byte[] bytes) \n          throws DecoderException\n     {\n-        if (pArray == null) {\n+        if (bytes == null) {\n             return null;\n         }\n         ByteArrayOutputStream buffer = new ByteArrayOutputStream(); \n-        for (int i = 0; i < pArray.length; i++) {\n-            int b = pArray[i];\n+        for (int i = 0; i < bytes.length; i++) {\n+            int b = bytes[i];\n             if (b == '+') {\n                 buffer.write(' ');\n             } else if (b == '%') {\n                 try {\n-                    int u = Character.digit((char)pArray[++i], 16);\n-                    int l = Character.digit((char)pArray[++i], 16);\n+                    int u = Character.digit((char)bytes[++i], 16);\n+                    int l = Character.digit((char)bytes[++i], 16);\n                     if (u == -1 || l == -1) {\n                         throw new DecoderException(\"Invalid URL encoding\");\n                     }\n      * Encodes an array of bytes into an array of URL safe 7-bit \n      * characters. Unsafe characters are escaped.\n      *\n-     * @param pArray array of bytes to convert to URL safe characters\n+     * @param bytes array of bytes to convert to URL safe characters\n      * @return array of bytes containing URL safe characters\n      */\n-    public byte[] encode(byte[] pArray) {\n-        return encodeUrl(WWW_FORM_URL, pArray);\n+    public byte[] encode(byte[] bytes) {\n+        return encodeUrl(WWW_FORM_URL, bytes);\n     }\n \n \n      * original bytes. Escaped characters are converted back to their \n      * original representation.\n      *\n-     * @param pArray array of URL safe characters\n+     * @param bytes array of URL safe characters\n      * @return array of original bytes \n      * @throws DecoderException Thrown if URL decoding is unsuccessful\n      */\n-    public byte[] decode(byte[] pArray) throws DecoderException {\n-        return decodeUrl(pArray);\n+    public byte[] decode(byte[] bytes) throws DecoderException {\n+        return decodeUrl(bytes);\n     }\n \n \n         if (pString == null) {\n             return null;\n         }\n-        return new String(encode(pString.getBytes(charset)), US_ASCII);\n+        return new String(encode(pString.getBytes(charset)), StringEncodings.US_ASCII);\n     }\n \n \n         if (pString == null) {\n             return null;\n         }\n-        return new String(decode(pString.getBytes(US_ASCII)), charset);\n+        return new String(decode(pString.getBytes(StringEncodings.US_ASCII)), charset);\n     }\n \n ", "timestamp": 1080547140, "metainfo": ""}