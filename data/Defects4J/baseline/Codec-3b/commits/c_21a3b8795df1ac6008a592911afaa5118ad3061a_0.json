{"sha": "21a3b8795df1ac6008a592911afaa5118ad3061a", "log": "Added @since 1.4 tags.   ", "commit": "\n--- a/src/java/org/apache/commons/codec/binary/Base64.java\n+++ b/src/java/org/apache/commons/codec/binary/Base64.java\n      * \n      * @param urlSafe\n      *            true if URL-SAFE encoding should be performed. In most situations this should be set to false.\n+     * @since 1.4\n      */\n     public Base64(boolean urlSafe) {\n         this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);\n      * @param lineLength\n      *            each line of encoded data will be at most this long (rounded up to nearest multiple of 4). If\n      *            lineLength <= 0, then the output will not be divided into lines (chunks). Ignored when decoding.\n+     * @since 1.4\n      */\n     public Base64(int lineLength) {\n         this(lineLength, CHUNK_SEPARATOR);\n      *            Each line of encoded data will end with this sequence of bytes.\n      * @throws IllegalArgumentException\n      *             The provided lineSeparator included some base64 characters. That's not going to work!\n+     * @since 1.4\n      */\n     public Base64(int lineLength, byte[] lineSeparator) {\n         this(lineLength, lineSeparator, false);\n      *\n      * @throws IllegalArgumentException The provided lineSeparator included\n      *                                  some base64 characters.  That's not going to work!\n+     * @since 1.4\n      */\n     public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {\n         this.lineLength = lineLength;\n      * Returns our current encode mode. True if we're URL-SAFE, false otherwise.\n      * \n      * @return true if we're in URL-SAFE mode, false otherwise.\n+     * @since 1.4\n      */\n     public boolean isUrlSafe() {\n         return this.encodeTable == URL_SAFE_ENCODE_TABLE;\n      * @param octet\n      *            The value to test\n      * @return <code>true</code> if the value is defined in the the base 64 alphabet, <code>false</code> otherwise.\n+     * @since 1.4\n      */\n     public static boolean isBase64(byte octet) {\n         return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);\n      * @param binaryData\n      *            binary data to encode\n      * @return Base64 characters\n+     * @since 1.4\n      */\n     public static byte[] encodeBase64URLSafe(byte[] binaryData) {\n         return encodeBase64(binaryData, false, true);\n      * @return Base64-encoded data.\n      * @throws IllegalArgumentException\n      *             Thrown when the input array needs an output array bigger than {@link Integer#MAX_VALUE}\n+     * @since 1.4\n      */\n     public static byte[] encodeBase64(byte[] binaryData, boolean isChunked, boolean urlSafe) {\n         if (binaryData == null || binaryData.length == 0) {\n      * \n      * @param pArray a byte array containing base64 character data\n      * @return A BigInteger\n+     * @since 1.4\n      */\n     public static BigInteger decodeInteger(byte[] pArray) {\n         return new BigInteger(1, decodeBase64(pArray));\n      * @param bigInt a BigInteger\n      * @return A byte array containing base64 character data\n      * @throws NullPointerException if null is passed in\n+     * @since 1.4\n      */\n     public static byte[] encodeInteger(BigInteger bigInt) {\n         if(bigInt == null)  {", "timestamp": 1247526587, "metainfo": ""}