{"sha": "2f0c32605f1c9ecc73ee9786b4f4c1b8f574ceb0", "log": "Update AmbiguateProperties for GET/SET.  R=nicksantos DELTA=38  (29 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=478   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n           for (Node child = n.getFirstChild();\n                child != null;\n                child = child.getNext()) {\n-            if (child.getType() == Token.STRING) {\n+            if (child.getType() != Token.NUMBER) {\n+              // Everything else are names: STRING, GET, SET\n               externedNames.add(child.getString());\n             }\n           }\n           break;\n         }\n         case Token.OBJECTLIT:\n-          // The children of an OBJECTLIT node are alternating key/value pairs.\n-          // We skip the values.\n+          // The children of an OBJECTLIT node are keys, where the values\n+          // are the children of the keys.\n           for (Node key = n.getFirstChild(); key != null;\n                key = key.getNext()) {\n             // We only want keys that are strings (not numbers), and only keys\n             // that were unquoted.\n-            if (key.getType() == Token.STRING) {\n+            if (key.getType() != Token.NUMBER) {\n+              // Everything else are names: STRING, GET, SET\n               if (!key.isQuotedString()) {\n                 JSType jstype = getJSType(n.getFirstChild());\n                 maybeMarkCandidate(key, jstype, t);\n--- a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n \n import com.google.common.collect.Maps;\n \n+import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n import com.google.javascript.rhino.Node;\n \n import java.util.Map;\n \n   @Override\n   protected CompilerOptions getOptions() {\n-    return new CompilerOptions(); // no missing properties check\n-  }\n-\n-  public void testOneVar() {\n+    // no missing properties check\n+    CompilerOptions options = new CompilerOptions();\n+    options.languageIn = LanguageMode.ECMASCRIPT5;\n+    return options;\n+  }\n+\n+  public void testOneVar1() {\n     test(\"/** @constructor */ var Foo = function(){};Foo.prototype.b = 0;\",\n          \"var Foo = function(){};Foo.prototype.a = 0;\");\n   }\n \n-  public void testTwoVar() {\n+  public void testOneVar2() {\n+    testSame(\"/** @constructor */ var Foo = function(){};\" +\n+             \"Foo.prototype = {b: 0};\");\n+  }\n+\n+  public void testOneVar3() {\n+    testSame(\"/** @constructor */ var Foo = function(){};\" +\n+             \"Foo.prototype = {get b() {return 0}};\");\n+  }\n+\n+  public void testOneVar4() {\n+    testSame(\"/** @constructor */ var Foo = function(){};\" +\n+             \"Foo.prototype = {set b(a) {}};\");\n+  }\n+\n+  public void testTwoVar1() {\n     String js = \"\"\n         + \"/** @constructor */ var Foo = function(){};\\n\"\n         + \"Foo.prototype.z=0;\\n\"\n         + \"Foo.prototype.a=0;\\n\"\n         + \"Foo.prototype.b=0;\";\n     test(js, output);\n+  }\n+\n+  public void testTwoVar2() {\n+    String js = \"\"\n+        + \"/** @constructor */ var Foo = function(){};\\n\"\n+        + \"Foo.prototype={z:0, z:1, x:0};\\n\";\n+    // TODO(johnlenz): It would be nice to handle this type of declaration.\n+    testSame(js);\n   }\n \n   public void testTwoIndependentVar() {", "timestamp": 1297211828, "metainfo": ""}