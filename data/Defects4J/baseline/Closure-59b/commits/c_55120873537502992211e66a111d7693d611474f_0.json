{"sha": "55120873537502992211e66a111d7693d611474f", "log": "fix a nasty type inference edge case  R=nadaa DELTA=27  (22 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=219634   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n   }\n \n   private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n-    ObjectType objectType = (ObjectType) n.getJSType();\n-    Preconditions.checkNotNull(objectType);\n-\n-    // Object literals can be reflected on other types.\n+    JSType type = n.getJSType();\n+    Preconditions.checkNotNull(type);\n+\n+    // Object literals can be reflected on other types, or changed with\n+    // type casts.\n     // See CodingConvention#getObjectLiteralCase and goog.object.reflect.\n     // Ignore these types of literals.\n-    if (objectType.hasReferenceName()) {\n+    // TODO(nicksantos): There should be an \"anonymous object\" type that\n+    // we can check for here.\n+    ObjectType objectType = ObjectType.cast(type);\n+    if (objectType == null || objectType.hasReferenceName()) {\n       return scope;\n     }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"goog.addDependency('zzz.js', ['goog.bar'], []);\" +\n         \"function f() { return /** @type {goog.bar} */ (new Object()); }\",\n         null);\n+  }\n+\n+  public void testCast15() throws Exception {\n+    // This fixes a bug where a type cast on an object literal\n+    // would cause a runtime cast exception if the node was visited\n+    // more than once.\n+    //\n+    // Some code assumes that an object literal must have a object type,\n+    // while because of the cast, it could have any type (including\n+    // a union).\n+    testTypes(\n+        \"for (var i = 0; i < 10; i++) {\" +\n+          \"var x = /** @type {Object|number} */ ({foo: 3});\" +\n+          \"/** @param {boolean} x */ function f(x) {}\" +\n+          \"f(x.foo);\" +\n+          \"f([].foo);\" +\n+        \"}\",\n+        \"Property foo never defined on Array\");\n   }\n \n   public void testNestedCasts() throws Exception {", "timestamp": 1284650742, "metainfo": ""}