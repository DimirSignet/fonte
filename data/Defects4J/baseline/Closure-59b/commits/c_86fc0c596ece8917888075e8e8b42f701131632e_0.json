{"sha": "86fc0c596ece8917888075e8e8b42f701131632e", "log": "Fix fold breakage with mixed constant types.  R=acleung DELTA=20  (7 added, 4 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1044274   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n       case Token.SUB:\n       case Token.DIV:\n       case Token.MOD:\n-        if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n-          return tryFoldOp(subtree, left, right);\n-        } else {\n-          return subtree;\n-        }\n+        return tryFoldArithmeticOp(subtree, left, right);\n \n       case Token.MUL:\n       case Token.BITAND:\n       case Token.BITOR:\n         if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n-          return tryFoldOp(subtree, left, right);\n+          return tryFoldArithmeticOp(subtree, left, right);\n         } else {\n           return tryFoldLeftChildOp(subtree, left, right);\n         }\n       }\n     } else {\n       // Try arithmetic add\n-      return tryFoldOp(n, left, right);\n+      return tryFoldArithmeticOp(n, left, right);\n     }\n \n     return n;\n   /**\n    * Try to fold arithmetic binary operators\n    */\n-  private Node tryFoldOp(Node n, Node left, Node right) {\n-    Node result = performArithmeticOp(n.getType(), left, right);\n-    if (result != null) {\n-      n.getParent().replaceChild(n, result);\n-      reportCodeChange();\n-      return result;\n+  private Node tryFoldArithmeticOp(Node n, Node left, Node right) {\n+    if (left.getType() == Token.NUMBER && right.getType() == Token.NUMBER) {\n+      Node result = performArithmeticOp(n.getType(), left, right);\n+      if (result != null) {\n+        n.getParent().replaceChild(n, result);\n+        reportCodeChange();\n+        return result;\n+      }\n     }\n     return n;\n   }\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n     fold(\"x.y=x.y+z\", \"x.y+=z\");\n     foldSame(\"next().x = next().x + 1\");\n   }\n+\n+  public void testFoldAdd1() {\n+    foldSame(\"x=false+1\");\n+  }\n+\n }", "timestamp": 1288663293, "metainfo": ""}