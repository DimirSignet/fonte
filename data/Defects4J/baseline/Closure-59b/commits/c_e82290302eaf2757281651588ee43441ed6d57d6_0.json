{"sha": "e82290302eaf2757281651588ee43441ed6d57d6", "log": "Add type check that an interface cannot implement any interfaces  R=johnlenz,nicksantos DELTA=60  (42 added, 7 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1507   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n           \"{0} cannot extend this type; \" +\n           \"a constructor can only extend objects \" +\n           \"and an interface can only extend interfaces\");\n+\n+  static final DiagnosticType CONFLICTING_IMPLEMENTED_TYPE =\n+    DiagnosticType.warning(\n+        \"JSC_CONFLICTING_IMPLEMENTED_TYPE\",\n+        \"{0} cannot implement this type; \" +\n+        \"an interface can only extend, but not implement interfaces\");\n \n   static final DiagnosticType BAD_IMPLEMENTED_TYPE =\n       DiagnosticType.warning(\n       INVALID_INTERFACE_MEMBER_DECLARATION,\n       INTERFACE_FUNCTION_NOT_EMPTY,\n       CONFLICTING_EXTENDED_TYPE,\n+      CONFLICTING_IMPLEMENTED_TYPE,\n       BAD_IMPLEMENTED_TYPE,\n       HIDDEN_SUPERCLASS_PROPERTY,\n       HIDDEN_INTERFACE_PROPERTY,\n             t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));\n       }\n \n-      for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n-        boolean badImplementedType = false;\n-        ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);\n-        if (baseInterfaceObj != null) {\n-          FunctionType interfaceConstructor =\n+      if (functionType.isInterface()) {\n+        if (functionType.hasImplementedInterfaces()) {\n+          compiler.report(t.makeError(n,\n+              CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));\n+        }\n+      } else {\n+        for (JSType baseInterface : functionType.getImplementedInterfaces()) {\n+          boolean badImplementedType = false;\n+          ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);\n+          if (baseInterfaceObj != null) {\n+            FunctionType interfaceConstructor =\n               baseInterfaceObj.getConstructor();\n-          if (interfaceConstructor != null &&\n-              !interfaceConstructor.isInterface()) {\n+            if (interfaceConstructor != null &&\n+                !interfaceConstructor.isInterface()) {\n+              badImplementedType = true;\n+            }\n+          } else {\n             badImplementedType = true;\n           }\n-        } else {\n-          badImplementedType = true;\n-        }\n-        if (badImplementedType) {\n-          report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n+          if (badImplementedType) {\n+            report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);\n+          }\n         }\n       }\n       if (functionType.isConstructor()) {\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n     return true;\n   }\n \n+  public boolean hasImplementedInterfaces() {\n+    if (!implementedInterfaces.isEmpty()){\n+      return true;\n+    }\n+    FunctionType superCtor = isConstructor() ?\n+        getSuperClassConstructor() : null;\n+    if (superCtor != null) {\n+      return superCtor.hasImplementedInterfaces();\n+    }\n+    return false;\n+  }\n+\n   public Iterable<Node> getParameters() {\n     Node n = getParametersNode();\n     if (n != null) {\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \" */ function derived() {}\");\n   }\n \n-  public void testGoodImplements3() throws Exception {\n-    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n-        \"/** @implements {Disposable}\\n * @interface */function f() {}\");\n-  }\n-\n   public void testBadImplements1() throws Exception {\n     testTypes(\"/** @interface */function Base1() {}\\n\" +\n         \"/** @interface */function Base2() {}\\n\" +\n     testTypes(\"/** @interface */function Disposable() {}\\n\" +\n         \"/** @implements {Disposable}\\n */function f() {}\",\n         \"@implements used without @constructor or @interface for f\");\n+  }\n+\n+  public void testBadImplements3() throws Exception {\n+    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n+        \"/** @implements {Disposable}\\n * @interface */function f() {}\",\n+        \"f cannot implement this type; an interface can only extend, \" +\n+        \"but not implement interfaces\");\n   }\n \n   public void testInterfaceExtends() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n \n   public void testGoodImplements3() throws Exception {\n     testTypes(\"/** @interface */function Disposable() {}\\n\" +\n-        \"/** @implements {Disposable}\\n * @interface */function f() {}\");\n+        \"/** @constructor \\n @implements {Disposable} */function f() {}\");\n   }\n \n   public void testGoodImplements4() throws Exception {\n         \"Disposable.prototype.method = goog.abstractMethod;\" +\n         \"/** @implements {Disposable}\\n * @constructor */function f() {}\",\n         \"property method on interface Disposable is not implemented by type f\");\n+  }\n+\n+  public void testBadImplements4() throws Exception {\n+    testTypes(\"/** @interface */function Disposable() {}\\n\" +\n+        \"/** @implements {Disposable}\\n * @interface */function f() {}\",\n+        \"f cannot implement this type; an interface can only extend, \" +\n+        \"but not implement interfaces\");\n   }\n \n   public void testInterfaceExtends() throws Exception {", "timestamp": 1303257979, "metainfo": ""}