{"sha": "37682577ccc4c31bd976b84ba05b919b71e12c82", "log": "Switch from octal to hex for string literal null escaping. Hex is also fixed length, so it prevents the problem that octal was solving (accidentally merging with a following digit) but is allowed in es5 strict mode, unlike octal.  R=johnlenz DELTA=5  (0 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2321   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n     for (int i = 0; i < s.length(); i++) {\n       char c = s.charAt(i);\n       switch (c) {\n-        case '\\0': sb.append(\"\\\\000\"); break;\n+        case '\\0': sb.append(\"\\\\x00\"); break;\n         case '\\n': sb.append(\"\\\\n\"); break;\n         case '\\r': sb.append(\"\\\\r\"); break;\n         case '\\t': sb.append(\"\\\\t\"); break;\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n   }\n \n   public void testZero() {\n-    assertPrint(\"var x ='\\\\0';\", \"var x=\\\"\\\\000\\\"\");\n-    assertPrint(\"var x ='\\\\x00';\", \"var x=\\\"\\\\000\\\"\");\n-    assertPrint(\"var x ='\\\\u0000';\", \"var x=\\\"\\\\000\\\"\");\n-    assertPrint(\"var x ='\\\\u00003';\", \"var x=\\\"\\\\0003\\\"\");\n+    assertPrint(\"var x ='\\\\0';\", \"var x=\\\"\\\\x00\\\"\");\n+    assertPrint(\"var x ='\\\\x00';\", \"var x=\\\"\\\\x00\\\"\");\n+    assertPrint(\"var x ='\\\\u0000';\", \"var x=\\\"\\\\x00\\\"\");\n+    assertPrint(\"var x ='\\\\u00003';\", \"var x=\\\"\\\\x003\\\"\");\n   }\n \n   public void testUnicode() {", "timestamp": 1308271837, "metainfo": ""}