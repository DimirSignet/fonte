{"sha": "ff625e7cf8c8f31e5428620c34cac38b503e9cd6", "log": "Fold array of string into splits (for re-rolling back JQuery loops)  R=zhuyi DELTA=71  (71 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2283   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.common.base.Joiner;\n import com.google.common.base.Preconditions;\n import com.google.common.base.Predicate;\n import com.google.common.collect.ImmutableSet;\n \n   private final boolean doCommaSpliting;\n \n+  private final int STRING_SPLIT_OVERHEAD = \".split('.')\".length();\n+\n   static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =\n     DiagnosticType.error(\n         \"JSC_INVALID_REGULAR_EXPRESSION_FLAGS\",\n \n       case Token.BLOCK:\n         return tryReplaceIf(node);\n+\n+      case Token.ARRAYLIT:\n+        return tryMinimizeArrayLiteral(node);\n \n       default:\n         return node; //Nothing changed\n     return not;\n   }\n \n+  private Node tryMinimizeArrayLiteral(Node n) {\n+    boolean allStrings = true;\n+    for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext()) {\n+      if (cur.getType() != Token.STRING) {\n+        allStrings = false;\n+      }\n+    }\n+\n+    if (allStrings) {\n+      return tryMinimizeStringArrayLiteral(n);\n+    } else {\n+      return n;\n+    }\n+  }\n+\n+  private Node tryMinimizeStringArrayLiteral(Node n) {\n+    int numElements = n.getChildCount();\n+    // We save two bytes per element.\n+    int saving = numElements * 2 - STRING_SPLIT_OVERHEAD;\n+    if (saving <= 0) {\n+      return n;\n+    }\n+\n+    String[] strings = new String[n.getChildCount()];\n+    int idx = 0;\n+    for (Node cur = n.getFirstChild(); cur != null; cur = cur.getNext()) {\n+      strings[idx++] = cur.getString();\n+    }\n+\n+    // These delimiters are chars that appears a lot in the program therefore\n+    // probably have a small Huffman encoding.\n+    NEXT_DELIMITER: for (char delimiter : new char[]{',', ' ', ';', '{', '}'}) {\n+      for (String cur : strings) {\n+        if (cur.indexOf(delimiter) != -1) {\n+          continue NEXT_DELIMITER;\n+        }\n+      }\n+      String template = Joiner.on(delimiter).join(strings);\n+      Node call = new Node(Token.CALL,\n+        new Node(Token.GETPROP, Node.newString(Token.STRING,template),\n+            Node.newString(Token.STRING, \"split\")),\n+        Node.newString(Token.STRING, \"\" + delimiter));\n+      call.copyInformationFromForTree(n);\n+      n.getParent().replaceChild(n, call);\n+      reportCodeChange();\n+      return call;\n+    }\n+    return n;\n+  }\n+\n   private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");\n \n   /**\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n     test(\"([a])\", \"1\");\n     testSame(\"([foo()])\");\n   }\n+\n+  public void testStringArraySplitting() {\n+    testSame(\"var x=['1','2','3','4']\");\n+    testSame(\"var x=['1','2','3','4','5']\");\n+    test(\"var x=['1','2','3','4','5','6']\",\n+         \"var x='1,2,3,4,5,6'.split(',')\");\n+    test(\"var x=['1','2','3','4','5','6','7']\",\n+         \"var x='1,2,3,4,5,6,7'.split(',')\");\n+    test(\"var x=[',',',',',',',',',',',']\",\n+         \"var x=', , , , , ,'.split(' ')\");\n+    test(\"var x=[',',' ',',',',',',',',']\",\n+         \"var x=',; ;,;,;,;,'.split(';')\");\n+    test(\"var x=[',',' ',',',',',',',',']\",\n+         \"var x=',; ;,;,;,;,'.split(';')\");\n+  }\n }", "timestamp": 1308176031, "metainfo": ""}