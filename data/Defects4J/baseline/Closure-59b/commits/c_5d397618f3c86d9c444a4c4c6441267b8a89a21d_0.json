{"sha": "5d397618f3c86d9c444a4c4c6441267b8a89a21d", "log": "Normalize extern VAR declarations Fixes issue 367.  R=acleung DELTA=44  (39 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=750   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Normalize.java\n+++ b/src/com/google/javascript/jscomp/Normalize.java\n \n   @Override\n   public void process(Node externs, Node root) {\n-    NodeTraversal.traverse(compiler, root,\n-        new NormalizeStatements(compiler, assertOnChange));\n+    new NodeTraversal(\n+        compiler, new NormalizeStatements(compiler, assertOnChange))\n+        .traverseRoots(externs, root);\n     if (MAKE_LOCAL_NAMES_UNIQUE) {\n       MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();\n       NodeTraversal t = new NodeTraversal(compiler, renamer);\n      */\n     private void annotateConstantsByConvention(Node n, Node parent) {\n       Preconditions.checkState(\n-          n.getType() == Token.NAME \n+          n.getType() == Token.NAME\n           || n.getType() == Token.STRING\n           || n.getType() == Token.GET\n           || n.getType() == Token.SET);\n--- a/src/com/google/javascript/jscomp/VarCheck.java\n+++ b/src/com/google/javascript/jscomp/VarCheck.java\n     getSynthesizedExternsRoot().addChildToBack(\n         new Node(Token.VAR, nameNode));\n     varsToDeclareInExterns.remove(varName);\n+    compiler.reportCodeChange();\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n   private boolean acceptES5 = true;\n \n   /**\n+   * Whether externs changes should be allowed for this pass.\n+   */\n+  private boolean allowExternsChanges = false;\n+\n+  /**\n    * Constructs a test.\n    *\n    * @param externs Externs JS as a string\n   }\n \n   /**\n+   * Whether to allow externs changes.\n+   */\n+  protected void allowExternsChanges(boolean allowExternsChanges) {\n+    this.allowExternsChanges = allowExternsChanges;\n+  }\n+\n+  /**\n    * Perform type checking before running the test pass. This will check\n    * for type errors and annotate nodes with type information.\n    *\n    * @param error Expected error, or null if no error is expected\n    * @param warning Expected warning, or null if no warning is expected\n    */\n-  public void testSame(String[] js, DiagnosticType error, DiagnosticType warning) {\n+  public void testSame(\n+      String[] js, DiagnosticType error, DiagnosticType warning) {\n     test(js, js, error, warning);\n   }\n \n         normalizeActualCode(compiler, externsRootClone, mainRootClone);\n       }\n \n-      if (mainRootClone.checkTreeEqualsSilent(mainRoot)) {\n+      boolean codeChange = !mainRootClone.checkTreeEqualsSilent(mainRoot);\n+      boolean externsChange = !externsRootClone\n+          .checkTreeEqualsSilent(externsRoot);\n+\n+      // Generally, externs should not be change by the compiler passes.\n+      if (externsChange && !allowExternsChanges) {\n+        String explanation = externsRootClone.checkTreeEquals(externsRoot);\n+        fail(\"Unexpected changes to externs\" +\n+            \"\\nExpected: \" + compiler.toSource(externsRootClone) +\n+            \"\\nResult: \" + compiler.toSource(externsRoot) +\n+            \"\\n\" + explanation);\n+      }\n+\n+      if (!codeChange && !externsChange) {\n         assertFalse(\n             \"compiler.reportCodeChange() was called \" +\n             \"even though nothing changed\",\n--- a/test/com/google/javascript/jscomp/NormalizeTest.java\n+++ b/test/com/google/javascript/jscomp/NormalizeTest.java\n          \"}\");\n   }\n \n+  public void testIssue() {\n+    super.allowExternsChanges(true);\n+    test(\"var a,b,c; var a,b\", \"a(), b()\", \"a(), b()\", null, null);\n+  }\n+\n   public void testNormalizeSyntheticCode() {\n     Compiler compiler = new Compiler();\n     compiler.init(\n \n   public void testGetterPropertyIsConstant() throws Exception {\n     testSame(\"var a = { get CONST() {return 3} }; \" +\n-    \t\t \"var b = a.CONST;\");\n+             \"var b = a.CONST;\");\n     Node n = getLastCompiler().getRoot();\n \n     Set<Node> constantNodes = findNodesWithProperty(n, Node.IS_CONSTANT_NAME);\n--- a/test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java\n+++ b/test/com/google/javascript/jscomp/ObjectPropertyStringPreprocessTest.java\n   @Override\n   protected int getNumRepetitions() {\n     return 1;\n+  }\n+\n+  @Override\n+  protected void setUp() {\n+    super.allowExternsChanges(true);\n   }\n \n   public void testDeclaration() {\n--- a/test/com/google/javascript/jscomp/VarCheckTest.java\n+++ b/test/com/google/javascript/jscomp/VarCheckTest.java\n   @Override\n   protected void setUp() throws Exception {\n     super.setUp();\n+    super.allowExternsChanges(true);\n     strictModuleDepErrorLevel = CheckLevel.OFF;\n     externValidationErrorLevel = null;\n     sanityCheck = false;", "timestamp": 1299108642, "metainfo": ""}