{"sha": "896000fe1f4c44218cbb071d44b4178f5bb54824", "log": "Streamline decorator handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n         // true, since we create InputStream from File\n         IOContext ctxt = _createContext(f, true);\n         InputStream in = new FileInputStream(f);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            in = _inputDecorator.decorate(ctxt, in);\n-        }\n-        return _createParser(in, ctxt);\n+        return _createParser(_decorate(in, ctxt), ctxt);\n     }\n \n     /**\n         // true, since we create InputStream from URL\n         IOContext ctxt = _createContext(url, true);\n         InputStream in = _optimizedStreamFromURL(url);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            in = _inputDecorator.decorate(ctxt, in);\n-        }\n-        return _createParser(in, ctxt);\n+        return _createParser(_decorate(in, ctxt), ctxt);\n     }\n \n     /**\n      */\n     public JsonParser createParser(InputStream in) throws IOException, JsonParseException {\n         IOContext ctxt = _createContext(in, false);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            in = _inputDecorator.decorate(ctxt, in);\n-        }\n-        return _createParser(in, ctxt);\n-    }\n-\n+        return _createParser(_decorate(in, ctxt), ctxt);\n+    }\n+    \n     /**\n      * Method for constructing parser for parsing\n      * the contents accessed via specified Reader.\n     public JsonParser createParser(Reader r) throws IOException, JsonParseException {\n         // false -> we do NOT own Reader (did not create it)\n         IOContext ctxt = _createContext(r, false);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            r = _inputDecorator.decorate(ctxt, r);\n-        }\n-        return _createParser(r, ctxt);\n+        return _createParser(_decorate(r, ctxt), ctxt);\n     }\n \n     /**\n      */\n     public JsonParser createParser(byte[] data) throws IOException, JsonParseException {\n         IOContext ctxt = _createContext(data, true);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n         if (_inputDecorator != null) {\n             InputStream in = _inputDecorator.decorate(ctxt, data, 0, data.length);\n             if (in != null) {\n     }\n     \n     /**\n-     * Method for constructing parser for parsing\n-     * contents of given char array.\n+     * Method for constructing parser for parsing contents of given char array.\n      * \n      * @since 2.4\n      */\n         if (_inputDecorator != null) { // easier to just wrap in a Reader than extend InputDecorator\n             return createParser(new CharArrayReader(content, offset, len));\n         }\n-        return _createParser(content, offset, len, _createContext(content, true), false);\n+        return _createParser(content, offset, len, _createContext(content, true),\n+                // important: buffer is NOT recyclable, as it's from caller\n+                false);\n     }\n \n     /*\n         IOContext ctxt = _createContext(out, false);\n         ctxt.setEncoding(enc);\n         if (enc == JsonEncoding.UTF8) {\n-            // [JACKSON-512]: allow wrapping with _outputDecorator\n-            if (_outputDecorator != null) {\n-                out = _outputDecorator.decorate(ctxt, out);\n-            }\n-            return _createUTF8Generator(out, ctxt);\n+            return _createUTF8Generator(_decorate(out, ctxt), ctxt);\n         }\n         Writer w = _createWriter(out, enc, ctxt);\n-        // [JACKSON-512]: allow wrapping with _outputDecorator\n-        if (_outputDecorator != null) {\n-            w = _outputDecorator.decorate(ctxt, w);\n-        }\n-        return _createGenerator(w, ctxt);\n+        return _createGenerator(_decorate(w, ctxt), ctxt);\n     }\n \n     /**\n      * \n      * @since 2.1\n      *\n-     * @param out Writer to use for writing JSON content \n-     */\n-    public JsonGenerator createGenerator(Writer out) throws IOException {\n-        IOContext ctxt = _createContext(out, false);\n-        // [JACKSON-512]: allow wrapping with _outputDecorator\n-        if (_outputDecorator != null) {\n-            out = _outputDecorator.decorate(ctxt, out);\n-        }\n-        return _createGenerator(out, ctxt);\n+     * @param w Writer to use for writing JSON content \n+     */\n+    public JsonGenerator createGenerator(Writer w) throws IOException {\n+        IOContext ctxt = _createContext(w, false);\n+        return _createGenerator(_decorate(w, ctxt), ctxt);\n     }\n     \n     /**\n         IOContext ctxt = _createContext(out, true);\n         ctxt.setEncoding(enc);\n         if (enc == JsonEncoding.UTF8) {\n-            // [JACKSON-512]: allow wrapping with _outputDecorator\n-            if (_outputDecorator != null) {\n-                out = _outputDecorator.decorate(ctxt, out);\n-            }\n-            return _createUTF8Generator(out, ctxt);\n+            return _createUTF8Generator(_decorate(out, ctxt), ctxt);\n         }\n         Writer w = _createWriter(out, enc, ctxt);\n-        // [JACKSON-512]: allow wrapping with _outputDecorator\n-        if (_outputDecorator != null) {\n-            w = _outputDecorator.decorate(ctxt, w);\n-        }\n-        return _createGenerator(w, ctxt);\n+        return _createGenerator(_decorate(w, ctxt), ctxt);\n     }    \n \n     /*\n         // not optimal, but should do unless we really care about UTF-16/32 encoding speed\n         return new OutputStreamWriter(out, enc.getJavaName());\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Internal factory methods, decorator handling\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @since 2.4\n+     */\n+    protected final InputStream _decorate(InputStream in, IOContext ctxt) throws IOException {\n+        if (_inputDecorator != null) {\n+            InputStream in2 = _inputDecorator.decorate(ctxt, in);\n+            if (in2 != null) {\n+                return in2;\n+            }\n+        }\n+        return in;\n+    }\n+    \n+    /**\n+     * @since 2.4\n+     */\n+    protected final Reader _decorate(Reader in, IOContext ctxt) throws IOException {\n+        if (_inputDecorator != null) {\n+            Reader in2 = _inputDecorator.decorate(ctxt, in);\n+            if (in2 != null) {\n+                return in2;\n+            }\n+        }\n+        return in;\n+    }\n+\n+    /**\n+     * @since 2.4\n+     */\n+    protected final OutputStream _decorate(OutputStream out, IOContext ctxt) throws IOException {\n+        if (_outputDecorator != null) {\n+            OutputStream out2 = _outputDecorator.decorate(ctxt, out);\n+            if (out2 != null) {\n+                return out2;\n+            }\n+        }\n+        return out;\n+    }\n+\n+    /**\n+     * @since 2.4\n+     */\n+    protected final Writer _decorate(Writer out, IOContext ctxt) throws IOException {\n+        if (_outputDecorator != null) {\n+            Writer out2 = _outputDecorator.decorate(ctxt, out);\n+            if (out2 != null) {\n+                return out2;\n+            }\n+        }\n+        return out;\n+    }\n     \n     /*\n     /**********************************************************\n     /* Internal factory methods, other\n     /**********************************************************\n      */\n-\n-    /**\n-     * Overridable factory method that actually instantiates desired\n-     * context object.\n-     */\n-    protected IOContext _createContext(Object srcRef, boolean resourceManaged) {\n-        return new IOContext(_getBufferRecycler(), srcRef, resourceManaged);\n-    }\n \n     /**\n      * Method used by factory to create buffer recycler instances\n             _recyclerRef.set(new SoftReference<BufferRecycler>(br));\n         }\n         return br;\n+    }\n+    \n+    /**\n+     * Overridable factory method that actually instantiates desired\n+     * context object.\n+     */\n+    protected IOContext _createContext(Object srcRef, boolean resourceManaged) {\n+        return new IOContext(_getBufferRecycler(), srcRef, resourceManaged);\n     }\n     \n     /**", "timestamp": 1397937220, "metainfo": ""}