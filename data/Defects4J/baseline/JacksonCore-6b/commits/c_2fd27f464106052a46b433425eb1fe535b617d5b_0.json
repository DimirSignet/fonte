{"sha": "2fd27f464106052a46b433425eb1fe535b617d5b", "log": "and bit more tweaking with nextFieldName", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n                 final int end = _inputPtr+len;\n                 if (_inputBuffer[end] == INT_QUOTE) {\n                     int offset = 0;\n-                    final int ptr = _inputPtr;\n+                    int ptr = _inputPtr;\n                     while (true) {\n-                        if (offset == len) { // yes, match!\n-                            _inputPtr = end+1; // skip current value first\n+                        if (ptr == end) { // yes, match!\n                             _parsingContext.setCurrentName(str.getValue());\n-                            _isNextTokenNameYes(_skipColonFast());\n+                            _isNextTokenNameYes(_skipColonFast(ptr+1));\n                             return true;\n                         }\n-                        if (nameBytes[offset] != _inputBuffer[ptr+offset]) {\n+                        if (nameBytes[offset] != _inputBuffer[ptr]) {\n                             break;\n                         }\n                         ++offset;\n+                        ++ptr;\n                     }\n                 }\n             }\n         return _isNextTokenNameMaybe(i, str);\n     }\n \n+    // Variant called when we know there's at least 4 more bytes available\n+    private final int _skipColonFast(int ptr) throws IOException\n+    {\n+        int i = _inputBuffer[ptr++];\n+        if (i == INT_COLON) { // common case, no leading space\n+            i = _inputBuffer[ptr++];\n+            if (i > INT_SPACE) { // nor trailing\n+                if (i != INT_SLASH && i != INT_HASH) {\n+                    _inputPtr = ptr;\n+                    return i;\n+                }\n+            } else if (i == INT_SPACE || i == INT_TAB) {\n+                i = (int) _inputBuffer[ptr++];\n+                if (i > INT_SPACE) {\n+                    if (i != INT_SLASH && i != INT_HASH) {\n+                        _inputPtr = ptr;\n+                        return i;\n+                    }\n+                }\n+            }\n+            _inputPtr = ptr-1;\n+            return _skipColon2(true); // true -> skipped colon\n+        }\n+        if (i == INT_SPACE || i == INT_TAB) {\n+            i = _inputBuffer[ptr++];\n+        }\n+        if (i == INT_COLON) {\n+            i = _inputBuffer[ptr++];\n+            if (i > INT_SPACE) {\n+                if (i != INT_SLASH && i != INT_HASH) {\n+                    _inputPtr = ptr;\n+                    return i;\n+                }\n+            } else if (i == INT_SPACE || i == INT_TAB) {\n+                i = (int) _inputBuffer[ptr++];\n+                if (i > INT_SPACE) {\n+                    if (i != INT_SLASH && i != INT_HASH) {\n+                        _inputPtr = ptr;\n+                        return i;\n+                    }\n+                }\n+            }\n+        }\n+        _inputPtr = ptr-1;\n+        return _skipColon2(false);\n+    }\n+    \n     private final void _isNextTokenNameYes(int i) throws IOException\n     {\n         _currToken = JsonToken.FIELD_NAME;\n         }\n         _nextToken = _handleUnexpectedValue(i);\n     }\n-\n-    // Variant called when we know there's at least 4 more bytes available\n-    private final int _skipColonFast() throws IOException\n-    {\n-        int i = _inputBuffer[_inputPtr++];\n-        if (i == INT_COLON) { // common case, no leading space\n-            i = _inputBuffer[_inputPtr++];\n-            if (i > INT_SPACE) { // nor trailing\n-                if (i != INT_SLASH && i != INT_HASH) {\n-                    return i;\n-                }\n-            } else if (i == INT_SPACE || i == INT_TAB) {\n-                i = (int) _inputBuffer[_inputPtr++];\n-                if (i > INT_SPACE) {\n-                    if (i != INT_SLASH && i != INT_HASH) {\n-                        return i;\n-                    }\n-                }\n-            }\n-            --_inputPtr;\n-            return _skipColon2(true); // true -> skipped colon\n-        }\n-        if (i == INT_SPACE || i == INT_TAB) {\n-            i = _inputBuffer[_inputPtr++];\n-        }\n-        if (i == INT_COLON) {\n-            i = _inputBuffer[_inputPtr++];\n-            if (i > INT_SPACE) {\n-                if (i != INT_SLASH && i != INT_HASH) {\n-                    return i;\n-                }\n-            } else if (i == INT_SPACE || i == INT_TAB) {\n-                i = (int) _inputBuffer[_inputPtr++];\n-                if (i > INT_SPACE) {\n-                    if (i != INT_SLASH && i != INT_HASH) {\n-                        return i;\n-                    }\n-                }\n-            }\n-        }\n-        --_inputPtr;\n-        return _skipColon2(false);\n-    }\n     \n     \n     private final boolean _isNextTokenNameMaybe(int i, SerializableString str) throws IOException", "timestamp": 1400813939, "metainfo": ""}