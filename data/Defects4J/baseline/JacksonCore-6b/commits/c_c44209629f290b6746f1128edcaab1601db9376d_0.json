{"sha": "c44209629f290b6746f1128edcaab1601db9376d", "log": "Start working on [Issue-17] (streaming binary read)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n      * that defaults to using\n      * {@link Base64Variants#getDefaultVariant} as the default encoding.\n      */\n-    public byte[] getBinaryValue() throws IOException, JsonParseException\n-    {\n+    public byte[] getBinaryValue() throws IOException, JsonParseException {\n         return getBinaryValue(Base64Variants.getDefaultVariant());\n     }\n \n+    /**\n+     * Method that can be used as an alternative to {@link #getBigIntegerValue()},\n+     * especially when value can be large. The main difference (beyond method\n+     * of returning content using {@link OutputStream} instead of as byte array)\n+     * is that content will NOT remain accessible after method returns: any content\n+     * processed will be consumed and is not buffered in any way. If caller needs\n+     * buffering, it has to implement it.\n+     * \n+     * @param out Output stream to use for passing decoded binary data\n+     * \n+     * @return Number of bytes that were decoded and written via {@link OutputStream}\n+     * \n+     * @since 2.1\n+     */\n+    public int readBinaryValue(OutputStream out) throws IOException, JsonParseException {\n+        return readBinaryValue(Base64Variants.getDefaultVariant(), out);\n+    }\n+\n+    /**\n+     * Similar to {@link #readBinaryValue(OutputStream)} but allows explicitly\n+     * specifying base64 variant to use.\n+     * \n+     * @param b64variant base64 variant to use\n+     * @param out Output stream to use for passing decoded binary data\n+     * \n+     * @return Number of bytes that were decoded and written via {@link OutputStream}\n+     * \n+     * @since 2.1\n+     */\n+    public abstract int readBinaryValue(Base64Variant b64variant, OutputStream out)\n+            throws IOException, JsonParseException;\n+    \n     /*\n     /**********************************************************\n     /* Public API, access to token information, coercion/conversion\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n package com.fasterxml.jackson.core.util;\n \n import java.io.IOException;\n+import java.io.OutputStream;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n     }\n \n     @Override\n+    public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n+            throws IOException, JsonParseException {\n+        return delegate.readBinaryValue(b64variant, out);\n+    }\n+    \n+    @Override\n     public JsonLocation getTokenLocation() {\n         return delegate.getTokenLocation();\n     }", "timestamp": 1339472835, "metainfo": ""}