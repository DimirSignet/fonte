{"sha": "d0fd3dc308c670a38957e334c0e757183e914486", "log": "Add a failing unit test to help figure out a good way to deal with potential hash collisions (only for Reader-backed sources; byte-sources fixed earlier)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n     private final static int MAX_COLL_CHAIN_LENGTH = 255;\n \n     /**\n-     * And to support reduce likelihood of accidental collisions causing\n+     * And to reduce likelihood of accidental collisions causing\n      * exceptions, let's prevent reuse of tables with long collision\n      * overflow lists as well.\n      * \n     final static int MIN_HASH_SIZE = 16;\n \n     /**\n-     * We will also need to defin\n+     * We will also need to define initial size for collision list,\n+     * when copying it.\n      */\n     final static int INITIAL_COLLISION_LEN = 32;\n \n--- a/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n     final static int MAX_COLL_CHAIN_LENGTH = 255;\n \n     /**\n-     * And to support reduce likelihood of accidental collisons causing\n+     * And to reduce likelihood of accidental collisions causing\n      * exceptions, let's prevent reuse of tables with long collision\n      * overflow lists as well.\n      * \n--- a/src/test/java/com/fasterxml/jackson/core/json/TestWithTonsaSymbols.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestWithTonsaSymbols.java\n package com.fasterxml.jackson.core.json;\n \n+import java.io.*;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.test.BaseTest;\n-\n-import java.io.*;\n \n /**\n  * Some unit tests to try to exercise part of parser code that\n      */\n     final static int FIELD_COUNT = 5000;\n \n-    public void testStreamReaderParser() throws Exception\n-    {\n+    public void testStreamReaderParser() throws Exception {\n         _testWith(true);\n     }\n \n-    public void testReaderParser() throws Exception\n-    {\n+    public void testReaderParser() throws Exception {\n         _testWith(false);\n     }\n \n--- /dev/null\n+++ b/src/test/java/failing/TestHashCollision.java\n+package failing;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+/**\n+ * Some unit tests to try to exercise part of parser code that\n+ * deals with symbol (table) management.\n+ */\n+public class TestHashCollision\n+    extends BaseTest\n+{\n+    // // // And then a nastier variant; collisions generated using\n+    // // // CollisionGenerator\n+\n+    final static String[] MULT_33_COLLISION_FRAGMENTS = new String[] {\n+        // Ones generated for 65536...\n+        \"9fa\", \"9g@\", \":Ea\", \":F@\", \";$a\", \";%@\"\n+    };\n+\n+    public void testReaderCollisions() throws Exception\n+    {\n+        StringBuilder sb = new StringBuilder();\n+        for (String field : collisions()) {\n+            if (sb.length() == 0) {\n+                sb.append(\"{\");\n+            } else {\n+                sb.append(\",\\n\");\n+            }\n+            sb.append('\"');\n+            sb.append(field);\n+            sb.append(\"\\\":3\");\n+        }\n+        sb.append(\"}\");\n+\n+        JsonFactory jf = new JsonFactory();\n+        JsonParser jp = jf.createParser(sb.toString());\n+        while (jp.nextToken() != null) {\n+            ;\n+        }\n+        // and if we got here, fine\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+\n+    static List<String> collisions() {\n+        // we'll get 6^4, which is bit over 1k\n+        ArrayList<String> result = new ArrayList<String>(36 * 36);\n+        for (String str1 : MULT_33_COLLISION_FRAGMENTS) {\n+            for (String str2 : MULT_33_COLLISION_FRAGMENTS) {\n+                for (String str3 : MULT_33_COLLISION_FRAGMENTS) {\n+                    for (String str4 : MULT_33_COLLISION_FRAGMENTS) {\n+                        result.add(str1+str2+str3+str4);\n+                    }\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper class(es)\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Helper class to use for generating substrings to use for substring\n+     * substitution collisions.\n+     */\n+    public static class CollisionGenerator\n+    {\n+        /* JDK uses 31, but Jackson `CharsToNameCanonicalizer.HASH_MULT`,\n+         * which for 2.3 is 33.\n+         */\n+        \n+        final static int MULT = CharsToNameCanonicalizer.HASH_MULT;\n+\n+        public void generate3(int h0) {\n+          int p1 = MULT;\n+          int p0 = MULT * MULT;\n+\n+          // Generate chars in printable ASCII range\n+          \n+          final char minChar = (char) 32;\n+//        final char maxChar = (char) 127;\n+        final char maxChar = (char) 127;\n+\n+        for (char c0 = minChar; c0 <= maxChar && c0 <= h0 / p0; c0++) {\n+          int h1 = h0 - c0 * p0;\n+          for (char c1 = minChar; c1 <= maxChar && c1 <= h1 / p1; c1++) {\n+            int h2 = h1 - c1 * p1;\n+            \n+            if (h2 < minChar || h2 > maxChar) {\n+                continue;\n+            }\n+            char c2 = (char) h2;\n+            if (h2 != c2) {\n+                continue;\n+            }\n+            printString(new String(new char[] { c0, c1, c2 } ));\n+          }\n+        }\n+      }\n+\n+      void printString(String s) {\n+          //System.out.println(s.length() + \" \" + s.hashCode() + \" \" + asIntArray(s));\n+          System.out.println(s.length() + \" \" + s.hashCode() + \" \\\"\" + s + \"\\\"\");\n+      }\n+\n+      String asIntArray(String s) {\n+        StringBuilder result = new StringBuilder().append(\"[\");\n+        for (int c = 0; c < s.length(); c++) {\n+          if (c > 0) {\n+            result.append(\", \");\n+          }\n+          result.append((int) s.charAt(c));\n+        }\n+        result.append(\"]\");\n+        return result.toString();\n+      }\n+\n+      public static void main(String[] args) {\n+          System.out.println(\"<stuff>\");\n+//          new CollisionGenerator().generate3(1 << 20);\n+          new CollisionGenerator().generate3(1 << 16);\n+\n+          System.out.println();\n+          System.out.println(\"</stuff>\");\n+      }\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/java/perf/CollisionGenerator.java\n+package perf;\n+\n+import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;\n+\n+public class CollisionGenerator\n+{\n+    /* JDK uses 31, but Jackson `CharsToNameCanonicalizer.HASH_MULT`,\n+     * which for 2.3 is 33.\n+     */\n+    \n+    final static int MULT = CharsToNameCanonicalizer.HASH_MULT;\n+\n+    public void generate3(int h0) {\n+      int p1 = MULT;\n+      int p0 = MULT * MULT;\n+\n+      // Generate chars in printable ASCII range\n+      \n+      final char minChar = (char) 32;\n+//    final char maxChar = (char) 127;\n+    final char maxChar = (char) 127;\n+\n+    for (char c0 = minChar; c0 <= maxChar && c0 <= h0 / p0; c0++) {\n+      int h1 = h0 - c0 * p0;\n+      for (char c1 = minChar; c1 <= maxChar && c1 <= h1 / p1; c1++) {\n+        int h2 = h1 - c1 * p1;\n+        \n+        if (h2 < minChar || h2 > maxChar) {\n+            continue;\n+        }\n+        char c2 = (char) h2;\n+        if (h2 != c2) {\n+            continue;\n+        }\n+        printString(new String(new char[] { c0, c1, c2 } ));\n+      }\n+    }\n+  }\n+\n+  void printString(String s) {\n+      //System.out.println(s.length() + \" \" + s.hashCode() + \" \" + asIntArray(s));\n+      System.out.println(s.length() + \" \" + s.hashCode() + \" \\\"\" + s + \"\\\"\");\n+  }\n+\n+  String asIntArray(String s) {\n+    StringBuilder result = new StringBuilder().append(\"[\");\n+    for (int c = 0; c < s.length(); c++) {\n+      if (c > 0) {\n+        result.append(\", \");\n+      }\n+      result.append((int) s.charAt(c));\n+    }\n+    result.append(\"]\");\n+    return result.toString();\n+  }\n+\n+  public static void main(String[] args) {\n+      System.out.println(\"<stuff>\");\n+//      new CollisionGenerator().generate3(1 << 20);\n+      new CollisionGenerator().generate3(1 << 16);\n+\n+      System.out.println();\n+      System.out.println(\"</stuff>\");\n+  }\n+}\n+", "timestamp": 1400470915, "metainfo": ""}