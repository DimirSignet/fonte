{"sha": "6c842ae82802ad5e5cc9065d3b8d93f99b84f8fc", "log": "Private methods don't need a \"final\" modifier  Found by IDEA.  Tested.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n         _reportError(\"Current token (\"+_currToken+\") not numeric, can not use numeric value accessors\");\n     }\n     \n-    private final void _parseSlowFloatValue(int expType)\n+    private void _parseSlowFloatValue(int expType)\n         throws IOException, JsonParseException\n     {\n         /* Nope: floating point. Here we need to be careful to get\n         }\n     }\n     \n-    private final void _parseSlowIntValue(int expType, char[] buf, int offset, int len)\n+    private void _parseSlowIntValue(int expType, char[] buf, int offset, int len)\n         throws IOException, JsonParseException\n     {\n         String numStr = _textBuffer.contentsAsString();\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n         return new JsonWriteContext(TYPE_ROOT, null);\n     }\n \n-    private final JsonWriteContext reset(int type) {\n+    private JsonWriteContext reset(int type) {\n         _type = type;\n         _index = -1;\n         _currentName = null;\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n         _outputBuffer[_outputTail++] = BYTE_QUOTE;\n     }\n     \n-    private final void _writeLongString(String text)\n+    private void _writeLongString(String text)\n         throws IOException, JsonGenerationException\n     {\n         if (_outputTail >= _outputEnd) {\n         _outputBuffer[_outputTail++] = BYTE_QUOTE;\n     }\n \n-    private final void _writeLongString(char[] text, int offset, int len)\n+    private void _writeLongString(char[] text, int offset, int len)\n         throws IOException, JsonGenerationException\n     {\n         if (_outputTail >= _outputEnd) {\n      * Helper method called when it is possible that output of raw section\n      * to output may cross buffer boundary\n      */\n-    private final void _writeSegmentedRaw(char[] cbuf, int offset, int len)\n+    private void _writeSegmentedRaw(char[] cbuf, int offset, int len)\n         throws IOException, JsonGenerationException\n     {\n         final int end = _outputEnd;\n         _outputTail = NumberOutput.outputInt(i, _outputBuffer, _outputTail);\n     }\n \n-    private final void _writeQuotedInt(int i) throws IOException {\n+    private void _writeQuotedInt(int i) throws IOException {\n         if ((_outputTail + 13) >= _outputEnd) {\n             _flushBuffer();\n         }\n         _outputTail = NumberOutput.outputLong(l, _outputBuffer, _outputTail);\n     }\n \n-    private final void _writeQuotedLong(long l) throws IOException {\n+    private void _writeQuotedLong(long l) throws IOException {\n         if ((_outputTail + 23) >= _outputEnd) {\n             _flushBuffer();\n         }\n         }\n     }\n \n-    private final void _writeQuotedRaw(Object value) throws IOException\n+    private void _writeQuotedRaw(Object value) throws IOException\n     {\n         if (_outputTail >= _outputEnd) {\n             _flushBuffer();\n     /**********************************************************\n      */\n \n-    private final void _writeBytes(byte[] bytes) throws IOException\n+    private void _writeBytes(byte[] bytes) throws IOException\n     {\n         final int len = bytes.length;\n         if ((_outputTail + len) > _outputEnd) {\n         _outputTail += len;\n     }\n \n-    private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException\n+    private void _writeBytes(byte[] bytes, int offset, int len) throws IOException\n     {\n         if ((_outputTail + len) > _outputEnd) {\n             _flushBuffer();\n      * to single-segment writes (instead of maximum slices that\n      * would fit in copy buffer)\n      */\n-    private final void _writeStringSegments(String text)\n+    private void _writeStringSegments(String text)\n         throws IOException, JsonGenerationException\n     {\n         int left = text.length();\n      * the output buffer. If so, we will need to choose smaller output\n      * chunks to write at a time.\n      */\n-    private final void _writeStringSegments(char[] cbuf, int offset, int totalLen)\n+    private void _writeStringSegments(char[] cbuf, int offset, int totalLen)\n         throws IOException, JsonGenerationException\n     {\n         do {\n      * assuming case of all non-escaped ASCII characters, as well as\n      * potentially enough space for other cases (but not necessarily flushed)\n      */\n-    private final void _writeStringSegment(char[] cbuf, int offset, int len)\n+    private void _writeStringSegment(char[] cbuf, int offset, int len)\n         throws IOException, JsonGenerationException\n     {\n         // note: caller MUST ensure (via flushing) there's room for ASCII only\n      * Secondary method called when content contains characters to escape,\n      * and/or multi-byte UTF-8 characters.\n      */\n-    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n+    private void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n         throws IOException, JsonGenerationException\n     {\n         // Ok: caller guarantees buffer can have room; but that may require flushing:\n      * Same as <code>_writeStringSegment2(char[], ...)</code., but with\n      * additional escaping for high-range code points\n      */\n-    private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end)\n+    private void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end)\n         throws IOException, JsonGenerationException\n     {\n         // Ok: caller guarantees buffer can have room; but that may require flushing:\n      * Same as <code>_writeStringSegmentASCII2(char[], ...)</code., but with\n      * additional checking for completely custom escapes\n      */\n-    private final void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end)\n+    private void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end)\n         throws IOException, JsonGenerationException\n     {\n         // Ok: caller guarantees buffer can have room; but that may require flushing:\n      * to fit in the output buffer after escaping; as such, we just need to\n      * chunk writes.\n      */\n-    private final void _writeUTF8Segments(byte[] utf8, int offset, int totalLen)\n+    private void _writeUTF8Segments(byte[] utf8, int offset, int totalLen)\n         throws IOException, JsonGenerationException\n     {\n         do {\n         } while (totalLen > 0);\n     }\n     \n-    private final void _writeUTF8Segment(byte[] utf8, final int offset, final int len)\n+    private void _writeUTF8Segment(byte[] utf8, final int offset, final int len)\n         throws IOException, JsonGenerationException\n     {\n         // fast loop to see if escaping is needed; don't copy, just look\n         _outputTail += len;\n     }\n \n-    private final void _writeUTF8Segment2(final byte[] utf8, int offset, int len)\n+    private void _writeUTF8Segment2(final byte[] utf8, int offset, int len)\n         throws IOException, JsonGenerationException\n     {\n         int outputPtr = _outputTail;\n      * 1- and 2-byte UTF-8 encodings, when outputting \"raw\" \n      * text (meaning it is not to be escaped or quoted)\n      */\n-    private final int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen)\n+    private int _outputRawMultiByteChar(int ch, char[] cbuf, int inputOffset, int inputLen)\n         throws IOException\n     {\n         // Let's handle surrogates gracefully (as 4 byte output):\n      * \n      * @throws IOException\n      */\n-    private final int _outputMultiByteChar(int ch, int outputPtr)\n+    private int _outputMultiByteChar(int ch, int outputPtr)\n         throws IOException\n     {\n         byte[] bbuf = _outputBuffer;\n         return c;\n     }\n     \n-    private final void _writeNull() throws IOException\n+    private void _writeNull() throws IOException\n     {\n         if ((_outputTail + 4) >= _outputEnd) {\n             _flushBuffer();\n--- a/src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java\n     /**********************************************************\n      */\n \n-    private final byte[] balloc(int size)\n+    private byte[] balloc(int size)\n     {\n         return new byte[size];\n     }\n \n-    private final char[] calloc(int size)\n+    private char[] calloc(int size)\n     {\n         return new char[size];\n     }", "timestamp": 1348910657, "metainfo": ""}