{"sha": "e60ad1117d401e5028b7060630fe64731141e855", "log": "Tiny tweaking for reader-based name parsing", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n      */\n     protected void _throwUnquotedSpace(int i, String ctxtDesc) throws JsonParseException {\n         // JACKSON-208; possible to allow unquoted control chars:\n-        if (!isEnabled(Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i >= INT_SPACE) {\n+        if (!isEnabled(Feature.ALLOW_UNQUOTED_CONTROL_CHARS) || i > INT_SPACE) {\n             char c = (char) i;\n             String msg = \"Illegal unquoted character (\"+_getCharDesc(c)+\"): has to be escaped using backslash to be included in \"+ctxtDesc;\n             _reportError(msg);\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n         boolean inObject = _parsingContext.inObject();\n         if (inObject) {\n            // First, field name itself:\n-            String name = _parseName(i);\n+            String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n             _parsingContext.setCurrentName(name);\n             _currToken = JsonToken.FIELD_NAME;\n             i = _skipColon();\n     /**********************************************************\n      */\n \n-    protected final String _parseName(int i) throws IOException\n-    {\n-        if (i != INT_QUOTE) { return _handleOddName(i); }\n-\n+    protected final String _parseName() throws IOException\n+    {\n         // First: let's try to see if we have a simple name: one that does\n         // not cross input buffer boundary, and does not contain escape sequences.\n         int ptr = _inputPtr;", "timestamp": 1399436958, "metainfo": ""}