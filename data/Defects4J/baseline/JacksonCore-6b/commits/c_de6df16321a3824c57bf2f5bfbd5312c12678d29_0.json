{"sha": "de6df16321a3824c57bf2f5bfbd5312c12678d29", "log": "add more comment-handling tests", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n \n         // Nope: do we then expect a comma?\n         if (_parsingContext.expectComma()) {\n+            if (i != INT_COMMA) {\n+                _reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n+            }\n             i = _skipComma(i);\n         }\n \n     \n     private final int _skipComma(int i) throws IOException\n     {\n-        if (i != INT_COMMA) {\n-            _reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n-        }\n         final int[] codes = _icWS;\n-        \n         main_loop:\n         while (_inputPtr < _inputEnd) {\n             i = (int) _inputBuffer[_inputPtr++];\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestComments.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestComments.java\n         JsonFactory f = new JsonFactory();\n         f.configure(JsonParser.Feature.ALLOW_YAML_COMMENTS, true);\n         _testYAMLComments(f, true);\n-        _testCommentsGenerated(f, true, \"# foo\\n\");\n+        _testCommentsBeforePropValue(f, true, \"# foo\\n\");\n     }\n \n     public void testYAMLCommentsChars() throws Exception {\n         JsonFactory f = new JsonFactory();\n         f.configure(JsonParser.Feature.ALLOW_YAML_COMMENTS, true);\n         _testYAMLComments(f, false);\n-        _testCommentsGenerated(f, false, \"# foo\\n\");\n+        final String COMMENT = \"# foo\\n\";\n+        _testCommentsBeforePropValue(f, false, COMMENT);\n+        _testCommentsBetweenArrayValues(f, false, COMMENT);\n     }\n \n     public void testCCommentsBytes() throws Exception {\n         JsonFactory f = new JsonFactory();\n         f.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n-        _testCommentsGenerated(f, true, \"/* foo */\\n\");\n+        final String COMMENT = \"/* foo */\\n\";\n+        _testCommentsBeforePropValue(f, true, COMMENT);\n     }\n \n     public void testCCommentsChars() throws Exception {\n         JsonFactory f = new JsonFactory();\n         f.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n-        _testCommentsGenerated(f, false, \"/* foo */\\n\");\n+        final String COMMENT = \"/* foo */\\n\";\n+        _testCommentsBeforePropValue(f, false, COMMENT);\n     }\n \n     public void testCppCommentsBytes() throws Exception {\n         JsonFactory f = new JsonFactory();\n         f.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n-        _testCommentsGenerated(f, true, \"// foo\\n\");\n+        final String COMMENT = \"// foo\\n\";\n+        _testCommentsBeforePropValue(f, true, COMMENT);\n     }\n \n     public void testCppCommentsChars() throws Exception {\n         JsonFactory f = new JsonFactory();\n         f.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n-        _testCommentsGenerated(f, false, \"// foo \\n\");\n-    }\n-    \n+        final String COMMENT = \"// foo \\n\";\n+        _testCommentsBeforePropValue(f, false, COMMENT);\n+    }\n+\n     @SuppressWarnings(\"resource\")\n-    private void _testCommentsGenerated(JsonFactory f, boolean useStream, String comment) throws Exception\n+    private void _testCommentsBeforePropValue(JsonFactory f, boolean useStream, String comment) throws Exception\n     {\n         for (String arg : new String[] {\n                 \":%s123\",\n             assertEquals(JsonToken.VALUE_NUMBER_INT, t);\n             assertEquals(123, jp.getIntValue());\n             assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n+            jp.close();\n+        }\n+        \n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    private void _testCommentsBetweenArrayValues(JsonFactory f, boolean useStream, String comment) throws Exception\n+    {\n+        for (String tmpl : new String[] {\n+                \"%s,\",\n+                \" %s,\",\n+                \"\\t%s,\",\n+                \"%s ,\",\n+                \"%s\\t,\",\n+                \" %s ,\",\n+                \"\\t%s\\t,\",\n+                \"\\n%s,\",\n+                \"%s\\n,\",\n+        }) {\n+            String commented = String.format(tmpl, comment);\n+            \n+            final String DOC = \"[1\"+commented+\"2]\";\n+            JsonParser jp = useStream ?\n+                    f.createParser(DOC.getBytes(\"UTF-8\"))\n+                    : f.createParser(DOC);\n+            assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n+            JsonToken t = null;\n+            try {\n+                t = jp.nextToken();\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed on '\"+DOC+\"' due to \"+e, e);\n+            }\n+            assertEquals(JsonToken.VALUE_NUMBER_INT, t);\n+            assertEquals(1, jp.getIntValue());\n+\n+            try {\n+                t = jp.nextToken();\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed on '\"+DOC+\"' due to \"+e, e);\n+            }\n+            assertEquals(JsonToken.VALUE_NUMBER_INT, t);\n+            assertEquals(2, jp.getIntValue());\n+            assertEquals(JsonToken.END_ARRAY, jp.nextToken());\n             jp.close();\n         }\n         ", "timestamp": 1398966106, "metainfo": ""}