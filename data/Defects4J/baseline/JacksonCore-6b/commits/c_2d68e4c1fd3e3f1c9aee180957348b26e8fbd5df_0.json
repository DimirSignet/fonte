{"sha": "2d68e4c1fd3e3f1c9aee180957348b26e8fbd5df", "log": "simplifying default pretty printer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n  * method {@link JsonGenerator#useDefaultPrettyPrinter} is\n  * used, which will use an instance of this class for operation.\n  */\n+@SuppressWarnings(\"serial\")\n public class DefaultPrettyPrinter\n     implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>,\n         java.io.Serializable\n     public static class NopIndenter\n         implements Indenter, java.io.Serializable\n     {\n-        private static final long serialVersionUID = 1L;\n-\n         public static final NopIndenter instance = new NopIndenter();\n-        \n-        public NopIndenter() { }\n-        @Override\n-        public void writeIndentation(JsonGenerator jg, int level) { }\n+\n+        @Override\n+        public void writeIndentation(JsonGenerator jg, int level)\n+            throws IOException, JsonGenerationException\n+        { }\n+\n         @Override\n         public boolean isInline() { return true; }\n     }\n      * indenter for array values.\n      */\n     public static class FixedSpaceIndenter\n-        implements Indenter, java.io.Serializable\n-    {\n-        private static final long serialVersionUID = 1L;\n-\n+        extends NopIndenter\n+    {\n         public static final FixedSpaceIndenter instance = new FixedSpaceIndenter();\n-\n-        public FixedSpaceIndenter() { }\n \n         @Override\n         public void writeIndentation(JsonGenerator jg, int level)\n      * 2 spaces for indentation per level.\n      */\n     public static class Lf2SpacesIndenter\n-        implements Indenter, java.io.Serializable\n-    {\n-        private static final long serialVersionUID = 1L;\n-\n+        extends NopIndenter\n+    {\n         public static final Lf2SpacesIndenter instance = new Lf2SpacesIndenter();\n \n-        final static String SYSTEM_LINE_SEPARATOR;\n+        private final static String SYS_LF;\n         static {\n             String lf = null;\n             try {\n                 lf = System.getProperty(\"line.separator\");\n             } catch (Throwable t) { } // access exception?\n-            SYSTEM_LINE_SEPARATOR = (lf == null) ? \"\\n\" : lf;\n+            SYS_LF = (lf == null) ? \"\\n\" : lf;\n         }\n \n         final static int SPACE_COUNT = 64;\n             Arrays.fill(SPACES, ' ');\n         }\n \n-        public Lf2SpacesIndenter() { }\n-\n         @Override\n         public boolean isInline() { return false; }\n \n         public void writeIndentation(JsonGenerator jg, int level)\n             throws IOException, JsonGenerationException\n         {\n-            jg.writeRaw(SYSTEM_LINE_SEPARATOR);\n+            jg.writeRaw(SYS_LF);\n             if (level > 0) { // should we err on negative values (as there's some flaw?)\n                 level += level; // 2 spaces per level\n                 while (level > SPACE_COUNT) { // should never happen but...", "timestamp": 1365354895, "metainfo": ""}