{"sha": "f8120bbc3caf5088d4888bd7f518573eaf0044b2", "log": "Work on fix for #108 in mainline", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n     public JsonLocation getTokenLocation()\n     {\n         return new JsonLocation(_ioContext.getSourceReference(),\n-                getTokenCharacterOffset(),\n+                -1L, getTokenCharacterOffset(), // bytes, chars\n                 getTokenLineNr(),\n                 getTokenColumnNr());\n     }\n     {\n         int col = _inputPtr - _currInputRowStart + 1; // 1-based\n         return new JsonLocation(_ioContext.getSourceReference(),\n-                _currInputProcessed + _inputPtr - 1,\n+                -1L, _currInputProcessed + _inputPtr, // bytes, chars\n                 _currInputRow, col);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     \n     /*\n     /**********************************************************\n-    /* Overrides\n+    /* Overrides for life-cycle\n     /**********************************************************\n      */\n \n     \n     /*\n     /**********************************************************\n-    /* Low-level reading, other\n+    /* Overrides, low-level reading\n     /**********************************************************\n      */\n \n         return outputCount;\n     }\n \n+    // As per [Issue#108], must ensure we call the right method\n+    @Override\n+    public JsonLocation getTokenLocation()\n+    {\n+        return new JsonLocation(_ioContext.getSourceReference(),\n+                getTokenCharacterOffset(), -1L, // bytes, chars\n+                getTokenLineNr(),\n+                getTokenColumnNr());\n+    }\n+\n+    // As per [Issue#108], must ensure we call the right method\n+    @Override\n+    public JsonLocation getCurrentLocation()\n+    {\n+        int col = _inputPtr - _currInputRowStart + 1; // 1-based\n+        return new JsonLocation(_ioContext.getSourceReference(),\n+                _currInputProcessed + _inputPtr, -1L, // bytes, chars\n+                _currInputRow, col);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Public API, traversal, basic\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n         JsonParser jp = jf.createParser(bytes.toByteArray());\n         assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n         // should also have skipped first 3 bytes of BOM; but do we have offset available?\n-        /*\n         JsonLocation loc = jp.getTokenLocation();\n         assertEquals(3, loc.getByteOffset());\n         assertEquals(-1, loc.getCharOffset());\n-        */\n-        jp.close();\n-    }\n-\n+        jp.close();\n+    }\n \n     // [Issue#48]\n     public void testSpacesInURL() throws Exception\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java\n+package com.fasterxml.jackson.core.json;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+// NOTE: just a stub so for, fill me!\n+public class TestLocation extends com.fasterxml.jackson.test.BaseTest\n+{\n+    // Trivially simple unit test for basics wrt offsets\n+    public void testSimpleInitialOffsets() throws Exception\n+    {\n+        final JsonFactory f = new JsonFactory();\n+        JsonLocation loc;\n+        JsonParser p;\n+        final String DOC = \"{ }\";\n+\n+        // first, char based:\n+        p = f.createParser(DOC);\n+        assertToken(JsonToken.START_OBJECT, p.nextToken());\n+\n+        loc = p.getTokenLocation();\n+        assertEquals(-1L, loc.getByteOffset());\n+        assertEquals(0L, loc.getCharOffset());\n+        assertEquals(1, loc.getLineNr());\n+        assertEquals(1, loc.getColumnNr());\n+        \n+        loc = p.getCurrentLocation();\n+        assertEquals(-1L, loc.getByteOffset());\n+        assertEquals(1L, loc.getCharOffset());\n+        assertEquals(1, loc.getLineNr());\n+        assertEquals(2, loc.getColumnNr());\n+\n+        p.close();\n+\n+        // then byte-based\n+        \n+        p = f.createParser(DOC.getBytes(\"UTF-8\"));\n+        assertToken(JsonToken.START_OBJECT, p.nextToken());\n+\n+        loc = p.getTokenLocation();\n+        assertEquals(0L, loc.getByteOffset());\n+        assertEquals(-1L, loc.getCharOffset());\n+        assertEquals(1, loc.getLineNr());\n+        assertEquals(1, loc.getColumnNr());\n+        \n+        loc = p.getCurrentLocation();\n+        assertEquals(1L, loc.getByteOffset());\n+        assertEquals(-1L, loc.getCharOffset());\n+        assertEquals(1, loc.getLineNr());\n+        assertEquals(2, loc.getColumnNr());\n+\n+        p.close();\n+    }\n+}", "timestamp": 1380750672, "metainfo": ""}