{"sha": "d533f29cf497343d7aa4c6b5f94d33cd3f4be1f9", "log": "Fix #152 in 2.4", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n     public char[] expandCurrentSegment()\n     {\n         final char[] curr = _currentSegment;\n-        // Let's grow by 50%\n+        // Let's grow by 50% by default\n         final int len = curr.length;\n-        // Must grow by at least 1 char, no matter what\n-        int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));\n+        int newLen = len + (len >> 1);\n+        // but above intended maximum, slow to increase by 25%\n+        if (newLen > MAX_SEGMENT_LEN) {\n+            newLen = len + (len >> 2);\n+        }\n         return (_currentSegment = Arrays.copyOf(curr, newLen));\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java\n          assertEquals(len+2, tb.size());\n          assertEquals(EXP, tb.contentsAsString());\n       }\n+\n+      // [Core#152]\n+      public void testExpand()\n+      {\n+          TextBuffer tb = new TextBuffer(new BufferRecycler());\n+          char[] buf = tb.getCurrentSegment();\n+\n+          while (buf.length < 500 * 1000) {\n+              char[] old = buf;\n+              buf = tb.expandCurrentSegment();\n+              if (old.length >= buf.length) {\n+                  fail(\"Expected buffer of \"+old.length+\" to expand, did not, length now \"+buf.length);\n+              }\n+          }\n+      }\n }", "timestamp": 1411614879, "metainfo": ""}