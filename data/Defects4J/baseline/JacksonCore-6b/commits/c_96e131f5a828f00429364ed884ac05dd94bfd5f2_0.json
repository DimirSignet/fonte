{"sha": "96e131f5a828f00429364ed884ac05dd94bfd5f2", "log": "Improve version detection; add optional group, artifact ids in Version (and thereby Versioned)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/Version.java\n+++ b/src/main/java/com/fasterxml/jackson/core/Version.java\n package com.fasterxml.jackson.core;\n \n /**\n- * Object that encapsulates version information of a component,\n- * and is return by {@link Versioned#version}.\n- * \n- * @since 1.6\n+ * Object that encapsulates versioning information of a component.\n+ * Version information includes not just version number but also\n+ * optionally group and artifact ids of the component being versioned.\n+ *<p>\n+ * Note that optional group and artifact id properties are new with Jackson 2.0:\n+ * if provided, they should align with Maven artifact information.\n  */\n public class Version\n     implements Comparable<Version>\n {\n-    private final static Version UNKNOWN_VERSION = new Version(0, 0, 0, null);\n-\n+    private final static Version UNKNOWN_VERSION = new Version(0, 0, 0, null, null, null);\n+    \n     protected final int _majorVersion;\n \n     protected final int _minorVersion;\n \n     protected final int _patchLevel;\n \n+    protected final String _groupId;\n+    \n+    protected final String _artifactId;\n+    \n     /**\n      * Additional information for snapshot versions; null for non-snapshot\n      * (release) versions.\n      */\n     protected final String _snapshotInfo;\n+\n+    /**\n+     * @deprecated Use variant that takes group and artifact ids\n+     */\n+    @Deprecated\n+    public Version(int major, int minor, int patchLevel, String snapshotInfo)\n+    {\n+        this(major, minor, patchLevel, snapshotInfo, null, null);\n+    }\n     \n-    public Version(int major, int minor, int patchLevel,\n-            String snapshotInfo)\n+    public Version(int major, int minor, int patchLevel, String snapshotInfo,\n+            String groupId, String artifactId)\n     {\n         _majorVersion = major;\n         _minorVersion = minor;\n         _patchLevel = patchLevel;\n         _snapshotInfo = snapshotInfo;\n+        _groupId = (groupId == null) ? \"\" : groupId;\n+        _artifactId = (artifactId == null) ? \"\" : artifactId;\n     }\n \n     /**\n     public int getMinorVersion() { return _minorVersion; }\n     public int getPatchLevel() { return _patchLevel; }\n \n+    public String getGroupId() { return _groupId; }\n+    public String getArtifactId() { return _artifactId; }\n+    \n     @Override\n     public String toString()\n     {\n \n     @Override\n     public int hashCode() {\n-        return _majorVersion + _minorVersion + _patchLevel;\n+        return _artifactId.hashCode() ^ _groupId.hashCode() + _majorVersion - _minorVersion + _patchLevel;\n     }\n \n     @Override\n         Version other = (Version) o;\n         return (other._majorVersion == _majorVersion)\n             && (other._minorVersion == _minorVersion)\n-            && (other._patchLevel == _patchLevel);\n+            && (other._patchLevel == _patchLevel)\n+            && other._artifactId.equals(_artifactId)\n+            && other._groupId.equals(_groupId)\n+            ;\n     }\n \n     @Override\n     public int compareTo(Version other)\n     {\n-        int diff = _majorVersion - other._majorVersion;\n+        if (other == this) return 0;\n+        \n+        int diff = _groupId.compareTo(other._groupId);\n         if (diff == 0) {\n-            diff = _minorVersion - other._minorVersion;\n+            diff = _artifactId.compareTo(other._artifactId);\n             if (diff == 0) {\n-                diff = _patchLevel - other._patchLevel;\n+                diff = _majorVersion - other._majorVersion;\n+                if (diff == 0) {\n+                    diff = _minorVersion - other._minorVersion;\n+                    if (diff == 0) {\n+                        diff = _patchLevel - other._patchLevel;\n+                    }\n+                }\n             }\n         }\n         return diff;\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n             if (in != null) {\n                 try {\n                     BufferedReader br = new BufferedReader(new InputStreamReader(in, \"UTF-8\"));\n-                    version = parseVersion(br.readLine());\n+                    String groupStr = null, artifactStr = null;\n+                    String versionStr = br.readLine();\n+                    if (versionStr != null) {\n+                        groupStr = br.readLine();\n+                        if (groupStr != null) {\n+                            groupStr = groupStr.trim();\n+                            artifactStr = br.readLine();\n+                            if (artifactStr != null) {\n+                                artifactStr = artifactStr.trim();\n+                            }\n+                        }\n+                    }\n+                    version = parseVersion(versionStr, groupStr, artifactStr);\n                 } finally {\n                     try {\n                         in.close();\n         return (version == null) ? Version.unknownVersion() : version;\n     }\n \n-    public static Version parseVersion(String versionStr)\n+    /**\n+     * Use variant that takes three arguments instead\n+     * \n+     * @deprecated\n+     */\n+    @Deprecated\n+    public static Version parseVersion(String versionStr) {\n+        return parseVersion(versionStr, null, null);\n+    }\n+\n+    public static Version parseVersion(String versionStr, String groupId, String artifactId)\n     {\n-        if (versionStr == null) return null;\n-        versionStr = versionStr.trim();\n-        if (versionStr.length() == 0) return null;\n-        String[] parts = VERSION_SEPARATOR.split(versionStr);\n-        // Let's not bother if there's no separate parts; otherwise use whatever we got\n-        if (parts.length < 2) {\n+        if (versionStr == null) {\n             return null;\n         }\n+        versionStr = versionStr.trim();\n+        if (versionStr.length() == 0) {\n+            return null;\n+        }\n+        String[] parts = VERSION_SEPARATOR.split(versionStr);\n         int major = parseVersionPart(parts[0]);\n-        int minor = parseVersionPart(parts[1]);\n+        int minor = (parts.length > 1) ? parseVersionPart(parts[1]) : 0;\n         int patch = (parts.length > 2) ? parseVersionPart(parts[2]) : 0;\n         String snapshot = (parts.length > 3) ? parts[3] : null;\n-        return new Version(major, minor, patch, snapshot);\n+\n+        return new Version(major, minor, patch, snapshot,\n+                groupId, artifactId);\n     }\n \n     protected static int parseVersionPart(String partStr)\n--- a/src/test/java/com/fasterxml/jackson/core/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/core/TestVersions.java\n     private final static int MAJOR_VERSION = 2;\n     private final static int MINOR_VERSION = 0;\n     \n+    private final static String GROUP_ID = \"com.fasterxml.jackson.core\";\n+    private final static String ARTIFACT_ID = \"jackson-core\";\n+    \n     public void testCoreVersions()\n     {\n-        /* 01-Sep-2010, tatu: Somewhat of a dirty hack; let's only run when specific system\n-         *    property is set; and set that flag from Ant unit test. Why? To prevent running\n-         *    from Eclipse, where this would just fail\n-         */\n-        if (runsFromMaven()) {\n-            System.out.println(\"Note: running version tests (FROM_ANT=true)\");\n-            assertVersion(new JsonFactory().version(), MAJOR_VERSION, MINOR_VERSION);\n-            assertVersion(new ReaderBasedJsonParser(getIOContext(), 0, null, null, null).version(),\n-                    MAJOR_VERSION, MINOR_VERSION);\n-            assertVersion(new WriterBasedJsonGenerator(getIOContext(), 0, null, null).version(),\n-                    MAJOR_VERSION, MINOR_VERSION);\n-        } else {\n-            System.out.println(\"Skipping version test (test not running from Maven)\");\n-        }\n+        assertVersion(new JsonFactory().version());\n+        assertVersion(new ReaderBasedJsonParser(getIOContext(), 0, null, null, null).version());\n+        assertVersion(new WriterBasedJsonGenerator(getIOContext(), 0, null, null).version());\n     }\n \n     /*\n     /**********************************************************\n      */\n     \n-    private void assertVersion(Version v, int major, int minor)\n+    private void assertVersion(Version v)\n     {\n         assertFalse(\"Should find version information (got \"+v+\")\", v.isUknownVersion());\n-        assertEquals(major, v.getMajorVersion());\n-        assertEquals(minor, v.getMinorVersion());\n-        // 07-Jan-2011, tatus: Check patch level initially, comment out for maint versions\n+        assertEquals(MAJOR_VERSION, v.getMajorVersion());\n+        assertEquals(MINOR_VERSION, v.getMinorVersion());\n+        // Check patch level initially, comment out for maint versions\n+        assertEquals(0, v.getPatchLevel());\n \n-        //assertEquals(0, v.getPatchLevel());\n+        // also, group & artifact ids should match:\n+        assertEquals(GROUP_ID, v.getGroupId());\n+        assertEquals(ARTIFACT_ID, v.getArtifactId());\n     }\n \n     private IOContext getIOContext() {\n--- a/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n         // First, via textual\n         assertEquals(String.valueOf(expValue), jp.getText());\n     }\n-\n-    /**\n-     * Method that checks whether Unit tests appear to run from Ant build\n-     * scripts.\n-     */\n-    protected static boolean runsFromMaven() {\n-        return true;\n-    }\n     \n     /*\n     /**********************************************************", "timestamp": 1325141423, "metainfo": ""}