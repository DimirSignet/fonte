{"sha": "681949253a3713480abf2af3de8355413f006d11", "log": "Start deprecated 'createJsonXxx' methods in JsonFactory, in favor of 'createXxx'", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n      * \n      * @since 2.1\n      */\n+    @SuppressWarnings(\"resource\")\n     public JsonParser createParser(File f)\n         throws IOException, JsonParseException\n     {\n-        // Must delegate to old version, until 2.2\n-        // TODO: change direction in 2.2; after ensuring impls support new method\n-        return createJsonParser(f);\n+        // true, since we create InputStream from File\n+        IOContext ctxt = _createContext(f, true);\n+        InputStream in = new FileInputStream(f);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            in = _inputDecorator.decorate(ctxt, in);\n+        }\n+        return _createParser(in, ctxt);\n     }\n \n     /**\n     public JsonParser createParser(URL url)\n         throws IOException, JsonParseException\n     {\n-        // Must delegate to old version, until 2.2\n-        // TODO: change direction in 2.2; after ensuring impls support new method\n-        return createJsonParser(url);\n+        // true, since we create InputStream from URL\n+        IOContext ctxt = _createContext(url, true);\n+        InputStream in = _optimizedStreamFromURL(url);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            in = _inputDecorator.decorate(ctxt, in);\n+        }\n+        return _createParser(in, ctxt);\n     }\n \n     /**\n     public JsonParser createParser(InputStream in)\n         throws IOException, JsonParseException\n     {\n-        // Must delegate to old version, until 2.2\n-        // TODO: change direction in 2.2; after ensuring impls support new method\n-        return createJsonParser(in);\n+        IOContext ctxt = _createContext(in, false);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            in = _inputDecorator.decorate(ctxt, in);\n+        }\n+        return _createParser(in, ctxt);\n     }\n \n     /**\n     public JsonParser createParser(Reader r)\n         throws IOException, JsonParseException\n     {\n-        // Must delegate to old version, until 2.2\n-        // TODO: change direction in 2.2; after ensuring impls support new method\n-        return createJsonParser(r);\n+        // false -> we do NOT own Reader (did not create it)\n+        IOContext ctxt = _createContext(r, false);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            r = _inputDecorator.decorate(ctxt, r);\n+        }\n+        return _createParser(r, ctxt);\n     }\n \n     /**\n     public JsonParser createParser(byte[] data)\n         throws IOException, JsonParseException\n     {\n-        // Must delegate to old version, until 2.2\n-        // TODO: change direction in 2.2; after ensuring impls support new method\n-        return createJsonParser(data);\n+        IOContext ctxt = _createContext(data, true);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            InputStream in = _inputDecorator.decorate(ctxt, data, 0, data.length);\n+            if (in != null) {\n+                return _createParser(in, ctxt);\n+            }\n+        }\n+        return _createParser(data, 0, data.length, ctxt);\n     }\n \n     /**\n     public JsonParser createParser(byte[] data, int offset, int len)\n         throws IOException, JsonParseException\n     {\n-        // Must delegate to old version, until 2.2\n-        // TODO: change direction in 2.2; after ensuring impls support new method\n-        return createJsonParser(data, offset, len);\n+        IOContext ctxt = _createContext(data, true);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            InputStream in = _inputDecorator.decorate(ctxt, data, offset, len);\n+            if (in != null) {\n+                return _createParser(in, ctxt);\n+            }\n+        }\n+        return _createParser(data, offset, len, ctxt);\n     }\n \n     /**\n     public JsonParser createParser(String content)\n         throws IOException, JsonParseException\n     {\n-        // Must delegate to old version, until 2.2\n-        // TODO: change direction in 2.2; after ensuring impls support new method\n-        return createJsonParser(content);\n+        Reader r = new StringReader(content);\n+        // true -> we own the Reader (and must close); not a big deal\n+        IOContext ctxt = _createContext(r, true);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            r = _inputDecorator.decorate(ctxt, r);\n+        }\n+        return _createParser(r, ctxt);\n     }\n \n     /*\n      * instead, should call <code>createParser</code>.\n      *\n      * @param f File that contains JSON content to parse\n-     */\n+     * \n+     * @deprecated Since 2.2, use {@link #createParser(File)} instead.\n+     */\n+    @Deprecated\n     public JsonParser createJsonParser(File f)\n         throws IOException, JsonParseException\n     {\n-        // true, since we create InputStream from File\n-        IOContext ctxt = _createContext(f, true);\n-        InputStream in = new FileInputStream(f);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            in = _inputDecorator.decorate(ctxt, in);\n-        }\n-        return _createParser(in, ctxt);\n+        return createParser(f);\n     }\n \n     /**\n      * instead, should call <code>createParser</code>.\n      *\n      * @param url URL pointing to resource that contains JSON content to parse\n-     */\n+     * \n+     * @deprecated Since 2.2, use {@link #createParser(URL)} instead.\n+     */\n+    @Deprecated\n     public JsonParser createJsonParser(URL url)\n         throws IOException, JsonParseException\n     {\n-        // true, since we create InputStream from URL\n-        IOContext ctxt = _createContext(url, true);\n-        InputStream in = _optimizedStreamFromURL(url);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            in = _inputDecorator.decorate(ctxt, in);\n-        }\n-        return _createParser(in, ctxt);\n+        return createParser(url);\n     }\n \n     /**\n      * instead, should call <code>createParser</code>.\n      *\n      * @param in InputStream to use for reading JSON content to parse\n-     */\n+     * \n+     * @deprecated Since 2.2, use {@link #createParser(InputStream)} instead.\n+     */\n+    @Deprecated\n     public JsonParser createJsonParser(InputStream in)\n         throws IOException, JsonParseException\n     {\n-        IOContext ctxt = _createContext(in, false);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            in = _inputDecorator.decorate(ctxt, in);\n-        }\n-        return _createParser(in, ctxt);\n+        return createParser(in);\n     }\n \n     /**\n      * instead, should call <code>createParser</code>.\n      *\n      * @param r Reader to use for reading JSON content to parse\n-     */\n+     * \n+     * @deprecated Since 2.2, use {@link #createParser(Reader)} instead.\n+     */\n+    @Deprecated\n     public JsonParser createJsonParser(Reader r)\n         throws IOException, JsonParseException\n     {\n-        // false -> we do NOT own Reader (did not create it)\n-        IOContext ctxt = _createContext(r, false);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            r = _inputDecorator.decorate(ctxt, r);\n-        }\n-        return _createParser(r, ctxt);\n+        return createParser(r);\n     }\n \n     /**\n      *<p>\n      * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n      * instead, should call <code>createParser</code>.\n-     */\n+     * \n+     * @deprecated Since 2.2, use {@link #createParser(byte[])} instead.\n+     */\n+    @Deprecated\n     public JsonParser createJsonParser(byte[] data)\n         throws IOException, JsonParseException\n     {\n-        IOContext ctxt = _createContext(data, true);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            InputStream in = _inputDecorator.decorate(ctxt, data, 0, data.length);\n-            if (in != null) {\n-                return _createParser(in, ctxt);\n-            }\n-        }\n-        return _createParser(data, 0, data.length, ctxt);\n+        return createParser(data);\n     }\n \n     /**\n      * @param data Buffer that contains data to parse\n      * @param offset Offset of the first data byte within buffer\n      * @param len Length of contents to parse within buffer\n-     */\n+     * \n+     * @deprecated Since 2.2, use {@link #createParser(byte[],int,int)} instead.\n+     */\n+    @Deprecated\n     public JsonParser createJsonParser(byte[] data, int offset, int len)\n         throws IOException, JsonParseException\n     {\n-        IOContext ctxt = _createContext(data, true);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            InputStream in = _inputDecorator.decorate(ctxt, data, offset, len);\n-            if (in != null) {\n-                return _createParser(in, ctxt);\n-            }\n-        }\n-\treturn _createParser(data, offset, len, ctxt);\n+        return createParser(data, offset, len);\n     }\n \n     /**\n      * Method for constructing parser for parsing\n      * contents of given String.\n-     *<p>\n-     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createParser</code>.\n-     */\n+     * \n+     * @deprecated Since 2.2, use {@link #createParser(String)} instead.\n+     */\n+    @Deprecated\n     public JsonParser createJsonParser(String content)\n         throws IOException, JsonParseException\n     {\n-        Reader r = new StringReader(content);\n-        // true -> we own the Reader (and must close); not a big deal\n-        IOContext ctxt = _createContext(r, true);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            r = _inputDecorator.decorate(ctxt, r);\n-        }\n-        return _createParser(r, ctxt);\n+        return createParser(content);\n     }\n \n     /*\n         if (_outputDecorator != null) {\n             out = _outputDecorator.decorate(ctxt, out);\n         }\n-\treturn _createGenerator(out, ctxt);\n+        return _createGenerator(out, ctxt);\n     }\n \n     /**\n     public JsonGenerator createJsonGenerator(File f, JsonEncoding enc)\n         throws IOException\n     {\n-\tOutputStream out = new FileOutputStream(f);\n-\t// true -> yes, we have to manage the stream since we created it\n+        OutputStream out = new FileOutputStream(f);\n+        // true -> yes, we have to manage the stream since we created it\n         IOContext ctxt = _createContext(out, true);\n         ctxt.setEncoding(enc);\n         if (enc == JsonEncoding.UTF8) {\n         if (_outputDecorator != null) {\n             w = _outputDecorator.decorate(ctxt, w);\n         }\n-\treturn _createGenerator(w, ctxt);\n+        return _createGenerator(w, ctxt);\n     }\n \n     /*\n     protected JsonParser _createParser(InputStream in, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n-        /* NOTE: MUST call the deprecated method until it is deleted, just so\n-         * that override still works as expected, for now.\n-         */\n-        return _createJsonParser(in, ctxt);\n-    }\n-\n-    /**\n-     * @deprecated since 2.1 -- use {@link #_createParser(InputStream, IOContext)} instead\n-     */\n-    @Deprecated\n-    protected JsonParser _createJsonParser(InputStream in, IOContext ctxt) throws IOException, JsonParseException {\n         // As per [JACKSON-259], may want to fully disable canonicalization:\n         return new ByteSourceJsonBootstrapper(ctxt, in).constructParser(_parserFeatures,\n                 _objectCodec, _rootByteSymbols, _rootCharSymbols,\n                 isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),\n                 isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));\n     }\n+\n+    /**\n+     * @deprecated since 2.1 -- use {@link #_createParser(InputStream, IOContext)} instead\n+     */\n+    @Deprecated\n+    protected JsonParser _createJsonParser(InputStream in, IOContext ctxt) throws IOException, JsonParseException {\n+        return _createParser(in, ctxt);\n+    }\n     \n     /**\n      * Overridable factory method that actually instantiates parser\n     protected JsonParser _createParser(Reader r, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n-        /* NOTE: MUST call the deprecated method until it is deleted, just so\n-         * that override still works as expected, for now.\n-         */\n-        return _createJsonParser(r, ctxt);\n+        return new ReaderBasedJsonParser(ctxt, _parserFeatures, r, _objectCodec,\n+                _rootCharSymbols.makeChild(isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),\n+                        isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES)));\n     }\n \n     /**\n      */\n     @Deprecated\n     protected JsonParser _createJsonParser(Reader r, IOContext ctxt) throws IOException, JsonParseException {\n-        return new ReaderBasedJsonParser(ctxt, _parserFeatures, r, _objectCodec,\n-                _rootCharSymbols.makeChild(isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),\n-                    isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES)));\n+        return _createParser(r, ctxt);\n     }\n \n     /**\n     protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n-        /* NOTE: MUST call the deprecated method until it is deleted, just so\n-         * that override still works as expected, for now.\n-         */\n-        return _createJsonParser(data, offset, len, ctxt);\n-    }\n-\n-    /**\n-     * @deprecated since 2.1 -- use {@link #_createParser(byte[], int, int, IOContext)} instead\n-     */\n-    @Deprecated\n-    protected JsonParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException, JsonParseException {\n         return new ByteSourceJsonBootstrapper(ctxt, data, offset, len).constructParser(_parserFeatures,\n                 _objectCodec, _rootByteSymbols, _rootCharSymbols,\n                 isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),\n                 isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));\n+    }\n+\n+    /**\n+     * @deprecated since 2.1 -- use {@link #_createParser(byte[], int, int, IOContext)} instead\n+     */\n+    @Deprecated\n+    protected JsonParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException, JsonParseException {\n+        return _createParser(data, offset, len, ctxt);\n     }\n     \n     /*\n     protected JsonGenerator _createGenerator(Writer out, IOContext ctxt)\n         throws IOException\n     {\n-        /* NOTE: MUST call the deprecated method until it is deleted, just so\n-         * that override still works as expected, for now.\n-         */\n-        return _createJsonGenerator(out, ctxt);\n-    }\n-\n-    /**\n-     * @deprecated since 2.1 -- use {@link #_createGenerator(Writer, IOContext)} instead\n-     */\n-    @Deprecated\n-    protected JsonGenerator _createJsonGenerator(Writer out, IOContext ctxt)\n-        throws IOException\n-    {\n         WriterBasedJsonGenerator gen = new WriterBasedJsonGenerator(ctxt,\n                 _generatorFeatures, _objectCodec, out);\n         if (_characterEscapes != null) {\n             gen.setRootValueSeparator(rootSep);\n         }\n         return gen;\n+    }\n+\n+    /**\n+     * @deprecated since 2.1 -- use {@link #_createGenerator(Writer, IOContext)} instead\n+     */\n+    @Deprecated\n+    protected JsonGenerator _createJsonGenerator(Writer out, IOContext ctxt)\n+        throws IOException\n+    {\n+        /* NOTE: MUST call the deprecated method until it is deleted, just so\n+         * that override still works as expected, for now.\n+         */\n+        return _createGenerator(out, ctxt);\n     }\n \n     /**\n      * method available to users of factory implementations.\n      */\n     protected JsonGenerator _createUTF8Generator(OutputStream out, IOContext ctxt) throws IOException {\n-        return _createUTF8JsonGenerator(out, ctxt);\n-    }\n-\n-    /**\n-     * @deprecated since 2.1\n-     */\n-    @Deprecated\n-    protected JsonGenerator _createUTF8JsonGenerator(OutputStream out, IOContext ctxt)\n-        throws IOException\n-    {\n         UTF8JsonGenerator gen = new UTF8JsonGenerator(ctxt,\n                 _generatorFeatures, _objectCodec, out);\n         if (_characterEscapes != null) {\n             gen.setRootValueSeparator(rootSep);\n         }\n         return gen;\n+    }\n+\n+    /**\n+     * @deprecated since 2.1\n+     */\n+    @Deprecated\n+    protected JsonGenerator _createUTF8JsonGenerator(OutputStream out, IOContext ctxt)\n+        throws IOException\n+    {\n+        return _createUTF8Generator(out, ctxt);\n     }\n \n     protected Writer _createWriter(OutputStream out, JsonEncoding enc, IOContext ctxt) throws IOException", "timestamp": 1353040469, "metainfo": ""}