{"sha": "487fe10a616cae4c60ebbc51bf12963e1f610212", "log": "Implement [JACKSON-782], JsonParser.overrideFieldName()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     public abstract boolean hasCurrentToken();\n \n     /**\n-     * Method called to \"consume\" the current token by effectively\n-     * removing it so that {@link #hasCurrentToken} returns false, and\n-     * {@link #getCurrentToken} null).\n-     * Cleared token value can still be accessed by calling\n-     * {@link #getLastClearedToken} (if absolutely needed), but\n-     * usually isn't.\n-     *<p>\n-     * Method was added to be used by the optional data binder, since\n-     * it has to be able to consume last token used for binding (so that\n-     * it will not be used again).\n-     */\n-    public abstract void clearCurrentToken();\n-\n-    /**\n      * Method that can be called to get the name associated with\n      * the current token: for {@link JsonToken#FIELD_NAME}s it will\n      * be the same as what {@link #getText} returns;\n      * usually for error reporting purposes.\n      */\n     public abstract JsonLocation getCurrentLocation();\n-\n-    /**\n-     * Method that can be called to get the last token that was\n-     * cleared using {@link #clearCurrentToken}. This is not necessarily\n-     * the latest token read.\n-     * Will return null if no tokens have been cleared,\n-     * or if parser has been closed.\n-     */\n-    public abstract JsonToken getLastClearedToken();\n \n     /**\n      * Specialized accessor that can be used to verify that the current\n     public boolean isExpectedStartArrayToken() {\n         return getCurrentToken() == JsonToken.START_ARRAY;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, token state overrides\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method called to \"consume\" the current token by effectively\n+     * removing it so that {@link #hasCurrentToken} returns false, and\n+     * {@link #getCurrentToken} null).\n+     * Cleared token value can still be accessed by calling\n+     * {@link #getLastClearedToken} (if absolutely needed), but\n+     * usually isn't.\n+     *<p>\n+     * Method was added to be used by the optional data binder, since\n+     * it has to be able to consume last token used for binding (so that\n+     * it will not be used again).\n+     */\n+    public abstract void clearCurrentToken();\n+\n+    /**\n+     * Method that can be called to get the last token that was\n+     * cleared using {@link #clearCurrentToken}. This is not necessarily\n+     * the latest token read.\n+     * Will return null if no tokens have been cleared,\n+     * or if parser has been closed.\n+     */\n+    public abstract JsonToken getLastClearedToken();\n+    \n+    /**\n+     * Method that can be used to change what is considered to be\n+     * the current (field) name.\n+     * May be needed to support non-JSON data formats or unusual binding\n+     * conventions; not needed for typical processing.\n+     *<p>\n+     * Note that use of this method should only be done as sort of last\n+     * resort, as it is a work-around for regular operation.\n+     * \n+     * @param name Name to use as the current name; may be null.\n+     * \n+     * @since 2.0\n+     */\n+    public abstract void overrideCurrentName(String name);\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n         return _parsingContext.getCurrentName();\n     }\n \n+    @Override\n+    public void overrideCurrentName(String name)\n+    {\n+        // Simple, but need to look for START_OBJECT/ARRAY's \"off-by-one\" thing:\n+        JsonReadContext ctxt = _parsingContext;\n+        if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n+            ctxt = ctxt.getParent();\n+        }\n+        ctxt.setCurrentName(name);\n+    }\n+    \n     @Override\n     public void close() throws IOException\n     {\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n     }\n     \n     @Override\n-    public void clearCurrentToken() {\n-        if (_currToken != null) {\n-            _lastClearedToken = _currToken;\n-            _currToken = null;\n-        }\n-    }\n-\n-    @Override\n-    public JsonToken getLastClearedToken() {\n-        return _lastClearedToken;\n-    }\n-    \n-    @Override\n     public JsonToken nextValue()\n         throws IOException, JsonParseException\n     {\n //    public abstract JsonLocation getTokenLocation();\n \n //   public abstract JsonLocation getCurrentLocation();\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, token state overrides\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void clearCurrentToken() {\n+        if (_currToken != null) {\n+            _lastClearedToken = _currToken;\n+            _currToken = null;\n+        }\n+    }\n+\n+    @Override\n+    public JsonToken getLastClearedToken() {\n+        return _lastClearedToken;\n+    }\n+\n+    @Override\n+    public abstract void overrideCurrentName(String name);\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n     public void setCodec(ObjectCodec c) {\n         _objectCodec = c;\n     }\n-\n+    \n     @Override\n     public int releaseBuffered(Writer w) throws IOException\n     {\n         return false;\n     }\n \n-    protected char getNextChar(String eofMsg)\n+    protected final char getNextChar(String eofMsg)\n         throws IOException, JsonParseException\n     {\n         if (_inputPtr >= _inputEnd) {\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     \n     /*\n     /**********************************************************\n-    /* Former StreamBasedParserBase methods\n+    /* Overrides\n     /**********************************************************\n      */\n \n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n     }\n \n     @Override\n+    public String getCurrentName() throws IOException, JsonParseException {\n+        return delegate.getCurrentName();\n+    }\n+\n+    @Override\n+    public JsonLocation getCurrentLocation() {\n+        return delegate.getCurrentLocation();\n+    }\n+\n+    @Override\n+    public JsonStreamContext getParsingContext() {\n+        return delegate.getParsingContext();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, token state overrides\n+    /**********************************************************\n+     */\n+    \n+    @Override\n     public void clearCurrentToken() {\n         delegate.clearCurrentToken();        \n     }\n \n     @Override\n-    public String getCurrentName() throws IOException, JsonParseException {\n-        return delegate.getCurrentName();\n-    }\n-\n-    @Override\n-    public JsonLocation getCurrentLocation() {\n-        return delegate.getCurrentLocation();\n-    }\n-\n-    @Override\n     public JsonToken getLastClearedToken() {\n         return delegate.getLastClearedToken();\n     }\n-\n-    @Override\n-    public JsonStreamContext getParsingContext() {\n-        return delegate.getParsingContext();\n+    \n+    @Override\n+    public void overrideCurrentName(String name) {\n+        delegate.overrideCurrentName(name);\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n         } else {\n             assertNotSame(expName, actName);\n         }\n-        jp.close();\n-    }\n-\n-    public void testTokenAccess() throws Exception\n-    {\n-        JsonParser jp = createParserUsingReader(\"[ ]\");\n-        assertNull(jp.getCurrentToken());\n-        jp.clearCurrentToken();\n-        assertNull(jp.getCurrentToken());\n-        assertNull(jp.getEmbeddedObject());\n-        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n-        assertToken(JsonToken.START_ARRAY, jp.getCurrentToken());\n-        jp.clearCurrentToken();\n-        assertNull(jp.getCurrentToken());\n-\n-\n-        // Also: no codec defined by default\n-        try {\n-            jp.readValueAsTree();\n-            fail(\"Should get exception without codec\");\n-        } catch (IllegalStateException e) {\n-            verifyException(e, \"No ObjectCodec defined\");\n-        }\n-\n         jp.close();\n     }\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserOverrides.java\n+package com.fasterxml.jackson.core.json;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.StringReader;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonToken;\n+\n+public class TestParserOverrides extends com.fasterxml.jackson.test.BaseTest\n+{\n+    /*\n+    /**********************************************************\n+    /* Wrappers, to test stream and reader-based parsers\n+    /**********************************************************\n+     */\n+\n+    public void testTokenAccess() throws Exception\n+    {\n+        JsonFactory jf = new JsonFactory();\n+        _testTokenAccess(jf, false);\n+        _testTokenAccess(jf, true);\n+    }\n+    \n+    public void testCurrentName() throws Exception\n+    {\n+        JsonFactory jf = new JsonFactory();\n+\n+        \n+        _testCurrentName(jf, false);\n+\n+        \n+        _testCurrentName(jf, true);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Actual test methods\n+    /**********************************************************\n+     */\n+    \n+    public void _testTokenAccess(JsonFactory jf, boolean useStream) throws Exception\n+    {\n+        final String DOC = \"[ ]\";\n+        JsonParser jp = useStream ?\n+                jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+                : jf.createJsonParser(DOC);\n+        assertNull(jp.getCurrentToken());\n+        jp.clearCurrentToken();\n+        assertNull(jp.getCurrentToken());\n+        assertNull(jp.getEmbeddedObject());\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+        assertToken(JsonToken.START_ARRAY, jp.getCurrentToken());\n+        jp.clearCurrentToken();\n+        assertNull(jp.getCurrentToken());\n+        // Also: no codec defined by default\n+        try {\n+            jp.readValueAsTree();\n+            fail(\"Should get exception without codec\");\n+        } catch (IllegalStateException e) {\n+            verifyException(e, \"No ObjectCodec defined\");\n+        }\n+        jp.close();\n+    }\n+    \n+    private void _testCurrentName(JsonFactory jf, boolean useStream) throws Exception\n+    {\n+        final String DOC = \"{\\\"first\\\":{\\\"second\\\":3, \\\"third\\\":false}}\";\n+        JsonParser jp = useStream ?\n+                jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+                : jf.createJsonParser(new StringReader(DOC));\n+        assertNull(jp.getCurrentToken());\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(\"first\", jp.getCurrentName());\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        assertEquals(\"first\", jp.getCurrentName()); // still the same...\n+        jp.overrideCurrentName(\"foobar\");\n+        assertEquals(\"foobar\", jp.getCurrentName()); // but not any more!\n+\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(\"second\", jp.getCurrentName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(\"second\", jp.getCurrentName());\n+\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertEquals(\"third\", jp.getCurrentName());\n+        assertToken(JsonToken.VALUE_FALSE, jp.nextToken());\n+        assertEquals(\"third\", jp.getCurrentName());\n+\n+        assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+        // should retain overrides, too\n+        assertEquals(\"foobar\", jp.getCurrentName());\n+\n+        assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+        jp.clearCurrentToken();\n+        assertNull(jp.getCurrentToken());\n+    }\n+    \n+\n+}", "timestamp": 1329789206, "metainfo": ""}