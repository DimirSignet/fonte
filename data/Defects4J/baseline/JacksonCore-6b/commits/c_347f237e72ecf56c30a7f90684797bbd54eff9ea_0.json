{"sha": "347f237e72ecf56c30a7f90684797bbd54eff9ea", "log": "Eliminated one more anonymous inner class", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonEncoding.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonEncoding.java\n  * {@link java.io.Writer} instances as input\n  */\n public enum JsonEncoding {\n-    UTF8(\"UTF-8\", false), // N/A for big-endian, really\n-        UTF16_BE(\"UTF-16BE\", true),\n-        UTF16_LE(\"UTF-16LE\", false),\n-        UTF32_BE(\"UTF-32BE\", true),\n-        UTF32_LE(\"UTF-32LE\", false)\n+    UTF8(\"UTF-8\", false, 8), // N/A for big-endian, really\n+        UTF16_BE(\"UTF-16BE\", true, 16),\n+        UTF16_LE(\"UTF-16LE\", false, 16),\n+        UTF32_BE(\"UTF-32BE\", true, 32),\n+        UTF32_LE(\"UTF-32LE\", false, 32)\n         ;\n     \n     protected final String _javaName;\n \n     protected final boolean _bigEndian;\n+\n+    protected final int _bits;\n     \n-    JsonEncoding(String javaName, boolean bigEndian)\n+    JsonEncoding(String javaName, boolean bigEndian, int bits)\n     {\n         _javaName = javaName;\n         _bigEndian = bigEndian;\n+        _bits = bits;\n     }\n \n     /**\n      *   (or if not applicable)\n      */\n     public boolean isBigEndian() { return _bigEndian; }\n+\n+    public int bits() { return _bits; }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n     @Override\n     public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException\n     {\n-        if (_currToken != null) {\n-            switch (_currToken) {\n+        JsonToken t = _currToken;\n+        if (t != null) {\n+            switch (t) {\n             case VALUE_NUMBER_INT:\n                 return getIntValue() != 0;\n             case VALUE_TRUE:\n     @Override\n     public int getValueAsInt(int defaultValue) throws IOException, JsonParseException\n     {\n-        if (_currToken != null) {\n-            switch (_currToken) {\n+        JsonToken t = _currToken;\n+        if (t != null) {\n+            switch (t) {\n             case VALUE_NUMBER_INT:\n             case VALUE_NUMBER_FLOAT:\n                 return getIntValue();\n     @Override\n     public long getValueAsLong(long defaultValue) throws IOException, JsonParseException\n     {\n-        if (_currToken != null) {\n-            switch (_currToken) {\n+        JsonToken t = _currToken;\n+        if (t != null) {\n+            switch (t) {\n             case VALUE_NUMBER_INT:\n             case VALUE_NUMBER_FLOAT:\n                 return getLongValue();\n     @Override\n     public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException\n     {\n-        if (_currToken != null) {\n-            switch (_currToken) {\n+        JsonToken t = _currToken;\n+        if (t != null) {\n+            switch (t) {\n             case VALUE_NUMBER_INT:\n             case VALUE_NUMBER_FLOAT:\n                 return getDoubleValue();\n--- a/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java\n         throws IOException\n     {\n         JsonEncoding enc = _context.getEncoding();\n-        switch (enc) { \n-        case UTF32_BE:\n-        case UTF32_LE:\n-            return new UTF32Reader(_context, _in, _inputBuffer, _inputPtr, _inputEnd,\n-                                   _context.getEncoding().isBigEndian());\n-\n-        case UTF16_BE:\n-        case UTF16_LE:\n-        case UTF8: // only in non-common case where we don't want to do direct mapping\n+        switch (enc.bits()) {\n+        case 8: // only in non-common case where we don't want to do direct mapping\n+        case 16:\n             {\n                 // First: do we have a Stream? If not, need to create one:\n                 InputStream in = _in;\n                 }\n                 return new InputStreamReader(in, enc.getJavaName());\n             }\n+        case 32:\n+            return new UTF32Reader(_context, _in, _inputBuffer, _inputPtr, _inputEnd,\n+                    _context.getEncoding().isBigEndian());\n         }\n         throw new RuntimeException(\"Internal error\"); // should never get here\n     }\n     public JsonParser constructParser(int parserFeatures, ObjectCodec codec,\n             BytesToNameCanonicalizer rootByteSymbols, CharsToNameCanonicalizer rootCharSymbols,\n             boolean canonicalize, boolean intern)\n-        throws IOException, JsonParseException\n+        throws IOException\n     {\n         JsonEncoding enc = detectEncoding();\n ", "timestamp": 1379799623, "metainfo": ""}