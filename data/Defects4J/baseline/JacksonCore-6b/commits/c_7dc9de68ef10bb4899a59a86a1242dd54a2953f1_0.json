{"sha": "7dc9de68ef10bb4899a59a86a1242dd54a2953f1", "log": "Fixed #97", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n     public final static int STATUS_EXPECT_VALUE = 4;\n     public final static int STATUS_EXPECT_NAME = 5;\n \n+    /**\n+     * Parent context for this context; null for root context.\n+     */\n     protected final JsonWriteContext _parent;\n \n-    /**\n-     * Name of the field of which value is to be parsed; only\n-     * used for OBJECT contexts\n-     */\n-    protected String _currentName;\n-    \n     /*\n     /**********************************************************\n     /* Simple instance reuse slots; speed up things\n \n     protected JsonWriteContext _child = null;\n \n+    /**\n+     * Name of the field of which value is to be parsed; only\n+     * used for OBJECT contexts\n+     */\n+    protected String _currentName;\n+\n+    /**\n+     * Marker used to indicate that we just received a name, and\n+     * now expect a value\n+     */\n+    protected boolean _gotName;\n+    \n     /*\n     /**********************************************************\n     /* Life-cycle\n         return new JsonWriteContext(TYPE_ROOT, null);\n     }\n \n-    private JsonWriteContext reset(int type) {\n+    protected JsonWriteContext reset(int type) {\n         _type = type;\n         _index = -1;\n         _currentName = null;\n+        _gotName = false;\n         return this;\n     }\n     \n-    public final JsonWriteContext createChildArrayContext()\n+    public JsonWriteContext createChildArrayContext()\n     {\n         JsonWriteContext ctxt = _child;\n         if (ctxt == null) {\n         return ctxt.reset(TYPE_ARRAY);\n     }\n \n-    public final JsonWriteContext createChildObjectContext()\n+    public JsonWriteContext createChildObjectContext()\n     {\n         JsonWriteContext ctxt = _child;\n         if (ctxt == null) {\n      */\n     public final int writeFieldName(String name)\n     {\n-        if (_type == TYPE_OBJECT) {\n-            if (_currentName != null) { // just wrote a name...\n-                return STATUS_EXPECT_VALUE;\n-            }\n-            _currentName = name;\n-            return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n-        }\n-        return STATUS_EXPECT_VALUE;\n+        _gotName = true;            \n+        _currentName = name;\n+        return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;\n     }\n     \n     public final int writeValue()\n     {\n         // Most likely, object:\n         if (_type == TYPE_OBJECT) {\n-            if (_currentName == null) {\n-                return STATUS_EXPECT_NAME;\n-            }\n-            _currentName = null;\n+            _gotName = false;\n             ++_index;\n             return STATUS_OK_AFTER_COLON;\n         }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java\n             /*BigDecimal dec =*/ jp.getDecimalValue();\n             fail(\"Should fail when trying to access NaN as BigDecimal\");\n         } catch (NumberFormatException e) {\n-            e.printStackTrace();\n             verifyException(e, \"can not be represented as BigDecimal\");\n         }\n        ", "timestamp": 1377914480, "metainfo": ""}