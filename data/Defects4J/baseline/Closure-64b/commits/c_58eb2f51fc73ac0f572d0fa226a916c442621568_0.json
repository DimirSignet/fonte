{"sha": "58eb2f51fc73ac0f572d0fa226a916c442621568", "log": "Enable AST validation during sanity checks.  R=acleung DELTA=13  (11 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1460   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SanityCheck.java\n+++ b/src/com/google/javascript/jscomp/SanityCheck.java\n \n   private final AbstractCompiler compiler;\n \n+  private final AstValidator astValidator = new AstValidator();\n+\n   SanityCheck(AbstractCompiler compiler) {\n     this.compiler = compiler;\n   }\n \n   public void process(Node externs, Node root) {\n+    sanityCheckAst(externs, root);\n     sanityCheckNormalization(externs, root);\n     sanityCheckCodeGeneration(root);\n     sanityCheckVars(externs, root);\n+  }\n+\n+  /**\n+   * Sanity check the AST is structurally accurate.\n+   */\n+  private void sanityCheckAst(Node externs, Node root) {\n+    astValidator.validateCodeRoot(externs);\n+    astValidator.validateCodeRoot(root);\n   }\n \n   private void sanityCheckVars(Node externs, Node root) {\n--- a/test/com/google/javascript/jscomp/SanityCheckTest.java\n+++ b/test/com/google/javascript/jscomp/SanityCheckTest.java\n     try {\n       test(\"var x = 3;\", \"var x=3;0;0\");\n     } catch (IllegalStateException e) {\n-      assertEquals(\"normalizeNodeType constraints violated\",\n+      assertEquals(\"Expected script but was expr_void Reference node EXPR_VOID\",\n           e.getMessage());\n       exceptionCaught = true;\n     }\n         getLastCompiler().reportCodeChange();\n         Node name = Node.newString(Token.NAME, \"x\");\n         name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n-        root.addChildToBack(new Node(Token.EXPR_RESULT, name));\n+        root.getFirstChild().addChildToBack(new Node(Token.EXPR_RESULT, name));\n         getLastCompiler().setLifeCycleStage(LifeCycleStage.NORMALIZED);\n       }\n     };", "timestamp": 1302740356, "metainfo": ""}