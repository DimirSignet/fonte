{"sha": "620fc21fa289cf0fda52c3d310a41d9fc2103be9", "log": "Enable local collapsing of object literals.  R=acleung DELTA=81  (69 added, 9 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2323   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   /** Folds constants (e.g. (2 + 3) to 5) */\n   public boolean foldConstants;\n \n+  /** Remove assignments to values that can not be referenced */\n   public boolean deadAssignmentElimination;\n \n   /** Inlines constants (symbols that are all CAPS) */\n \n   /** Flattens multi-level property names (e.g. a$b = x) */\n   public boolean collapseProperties;\n+\n+  /** Split object literals into individual variables when possible. */\n+  public boolean collapseObjectLiterals;\n \n   /** Flattens multi-level property names on extern types (e.g. String$f = x) */\n   boolean collapsePropertiesOnExternTypes;\n     aliasKeywords = false;\n     collapseProperties = false;\n     collapsePropertiesOnExternTypes = false;\n+    collapseObjectLiterals = false;\n     devirtualizePrototypeMethods = false;\n     disambiguateProperties = false;\n     ambiguateProperties = false;\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n   /** Creates several passes aimed at removing code. */\n   private List<PassFactory> getCodeRemovingPasses() {\n     List<PassFactory> passes = Lists.newArrayList();\n+    if (options.collapseObjectLiterals && !isInliningForbidden()) {\n+      passes.add(collapseObjectLiterals);\n+    }\n+\n     if (options.inlineVariables || options.inlineLocalVariables) {\n       passes.add(inlineVariables);\n     } else if (options.inlineConstantVars) {\n       return new CollapseProperties(\n           compiler, options.collapsePropertiesOnExternTypes,\n           !isInliningForbidden());\n+    }\n+  };\n+\n+  /** Rewrite properties as variables. */\n+  private final PassFactory collapseObjectLiterals =\n+      new PassFactory(\"collapseObjectLiterals\", false) {\n+    @Override\n+    protected CompilerPass createInternal(AbstractCompiler compiler) {\n+      return new InlineObjectLiterals(\n+          compiler, compiler.getUniqueNameIdSupplier());\n     }\n   };\n ", "timestamp": 1308344935, "metainfo": ""}