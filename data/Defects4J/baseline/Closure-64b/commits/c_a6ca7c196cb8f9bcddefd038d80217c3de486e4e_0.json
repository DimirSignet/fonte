{"sha": "a6ca7c196cb8f9bcddefd038d80217c3de486e4e", "log": "Fix a long-standing warnings guard bug that just got triggered recently. Comparators are hard! :)  R=johnlenz DELTA=63  (42 added, 2 deleted, 19 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=950   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n package com.google.javascript.jscomp;\n \n import com.google.common.collect.Lists;\n+import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.CheckLevel;\n \n import java.util.*;\n+import java.util.Map;\n+import java.util.TreeSet;\n \n /**\n  * WarningsGuard that represents just a chain of other guards. For example we\n  */\n public class ComposeWarningsGuard extends WarningsGuard {\n \n-  private final List<WarningsGuard> guards;\n-  private static final Comparator<WarningsGuard> guardComparator =\n+  // The order that the guards were added in.\n+  private final Map<WarningsGuard, Integer> orderOfAddition = Maps.newHashMap();\n+  private int numberOfAdds = 0;\n+\n+  private final Comparator<WarningsGuard> guardComparator =\n       new Comparator<WarningsGuard>() {\n     @Override\n     public int compare(WarningsGuard a, WarningsGuard b) {\n-      return a.getPriority() - b.getPriority();\n+      int priorityDiff = a.getPriority() - b.getPriority();\n+      if (priorityDiff != 0) {\n+        return priorityDiff;\n+      }\n+\n+      // If the warnings guards have the same priority, the one that\n+      // was added last wins.\n+      return orderOfAddition.get(b).intValue() -\n+          orderOfAddition.get(a).intValue();\n     }\n   };\n \n+  // The order that the guards are applied in.\n+  private final TreeSet<WarningsGuard> guards =\n+      new TreeSet<WarningsGuard>(guardComparator);\n+\n   public ComposeWarningsGuard(List<WarningsGuard> guards) {\n-    this.guards = Lists.newArrayList();\n     addGuards(guards);\n   }\n \n   void addGuard(WarningsGuard guard) {\n     if (guard instanceof ComposeWarningsGuard) {\n       // Reverse the guards, so that they have the same order in the result.\n-      addGuards(Lists.reverse(((ComposeWarningsGuard) guard).guards));\n+      addGuards(((ComposeWarningsGuard) guard).guards.descendingSet());\n     } else {\n-      int index = Collections.binarySearch(this.guards, guard, guardComparator);\n-      if (index < 0) {\n-        index = -index - 1;\n-      }\n-      this.guards.add(index, guard);\n+      numberOfAdds++;\n+      orderOfAddition.put(guard, numberOfAdds);\n+      guards.remove(guard);\n+      guards.add(guard);\n     }\n   }\n \n   }\n \n   List<WarningsGuard> getGuards() {\n-    return Collections.unmodifiableList(guards);\n+    return Collections.unmodifiableList(Lists.newArrayList(guards));\n   }\n }", "timestamp": 1300485184, "metainfo": ""}