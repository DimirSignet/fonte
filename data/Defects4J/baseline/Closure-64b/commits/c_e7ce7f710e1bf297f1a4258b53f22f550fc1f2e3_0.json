{"sha": "e7ce7f710e1bf297f1a4258b53f22f550fc1f2e3", "log": "Use !0 and !1 for true and false.  R=johnlenz DELTA=97  (81 added, 0 deleted, 16 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=500   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n       case Token.NUMBER:\n         return TernaryValue.forBoolean(n.getDouble() != 0);\n \n+      case Token.NOT:\n+        return getBooleanValue(n.getLastChild()).not();\n+\n       case Token.NULL:\n       case Token.FALSE:\n       case Token.VOID:\n \n       case Token.VOID:\n         return \"undefined\";\n+\n+      case Token.NOT:\n+        TernaryValue child = getBooleanValue(n.getFirstChild());\n+        if (child != TernaryValue.UNKNOWN) {\n+          return child.toBoolean(true) ? \"false\" : \"true\"; // reversed.\n+        }\n+        break;\n     }\n     return null;\n   }\n           return Double.NEGATIVE_INFINITY;\n         }\n         return null;\n+\n+      case Token.NOT:\n+        TernaryValue child = getBooleanValue(n.getFirstChild());\n+        if (child != TernaryValue.UNKNOWN) {\n+          return child.toBoolean(true) ? 0.0 : 1.0; // reversed.\n+        }\n+        break;\n \n       case Token.STRING:\n         String s = trimJsWhiteSpace(n.getString());\n       case Token.TRUE:\n       case Token.FALSE:\n         return true;\n+      case Token.NOT:\n+        return isImmutableValue(n.getFirstChild());\n       case Token.VOID:\n       case Token.NEG:\n         return isImmutableValue(n.getFirstChild());\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n \n     switch (n.getType()) {\n       case Token.NOT:\n+        // Don't fold !0 and !1 back to false.\n+        if (left.getType() == Token.NUMBER) {\n+          double numValue = left.getDouble();\n+          if (numValue == 0 || numValue == 1) {\n+            return n;\n+          }\n+        }\n         int result = leftVal.toBoolean(true) ? Token.FALSE : Token.TRUE;\n         Node replacementNode = new Node(result);\n         parent.replaceChild(n, replacementNode);\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n           tryMinimizeCondition(NodeUtil.getConditionExpression(node));\n         }\n         return node;\n+\n+\n+      case Token.TRUE:\n+      case Token.FALSE:\n+        return reduceTrueFalse(node);\n \n       case Token.NEW:\n         node = tryFoldStandardConstructors(node);\n               }\n             }\n             break;\n+\n+           default:\n+             TernaryValue nVal = NodeUtil.getBooleanValue(first);\n+             if (nVal != TernaryValue.UNKNOWN) {\n+               boolean result = nVal.not().toBoolean(true);\n+               int equivalentResult = result ? 1 : 0;\n+               return maybeReplaceChildWithNumber(n, parent, equivalentResult);\n+             }\n         }\n         // No need to traverse, tryMinimizeCondition is called on the NOT\n         // children in the general case in the main post-order traversal.\n     return n;\n   }\n \n+  private Node reduceTrueFalse(Node n) {\n+    Node not = new Node(Token.NOT,\n+        Node.newNumber(n.getType() == Token.TRUE ? 0 : 1));\n+    not.copyInformationFromForTree(n);\n+    n.getParent().replaceChild(n, not);\n+    reportCodeChange();\n+    return not;\n+  }\n+\n   private static final Pattern REGEXP_FLAGS_RE = Pattern.compile(\"^[gmi]*$\");\n \n   /**\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n          \"/** @define {number} */ var BAR = 3;\" +\n          \"/** @define {boolean} */ var CCC = false;\" +\n          \"/** @define {boolean} */ var DDD = false;\",\n-         \"var FOO = true, BAR = 5, CCC = true, DDD = true;\");\n+         \"var FOO = !0, BAR = 5, CCC = !0, DDD = !0;\");\n   }\n \n   public void testDefineFlag2() {\n     test(\"goog.asserts.assert(false)\",\n          \"\");\n     args.add(\"--debug\");\n-    test(\"goog.asserts.assert(false)\", \"goog.$asserts$.$assert$(false)\");\n+    test(\"goog.asserts.assert(false)\", \"goog.$asserts$.$assert$(!1)\");\n   }\n \n   public void testMissingReturnCheckOnWithVerbose() {\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n import java.util.Set;\n \n /**\n- * Tests for PeepholeFoldConstants in isolation. Tests for the interaction of\n- * multiple peephole passes are in PeepholeIntegrationTest.\n+ * Tests for {@link PeepholeFoldConstants} in isolation. Tests for\n+ * the interaction of multiple peephole passes are in\n+ * {@link PeepholeIntegrationTest}.\n  */\n public class PeepholeFoldConstantsTest extends CompilerTestCase {\n \n     fold(\"'' instanceof String\", \"false\");\n     fold(\"true instanceof Object\", \"false\");\n     fold(\"true instanceof Boolean\", \"false\");\n+    fold(\"!0 instanceof Object\", \"false\");\n+    fold(\"!0 instanceof Boolean\", \"false\");\n     fold(\"false instanceof Object\", \"false\");\n     fold(\"null instanceof Object\", \"false\");\n     fold(\"undefined instanceof Object\", \"false\");\n     fold(\"x/('12'+'6')\", \"x/126\");\n     fold(\"true*x\", \"1*x\");\n     fold(\"x/false\", \"x/0\");  // should we add an error check? :)\n+  }\n+\n+  public void testNotFoldBackToTrueFalse() {\n+    foldSame(\"!0\");\n+    foldSame(\"!1\");\n+    fold(\"!3\", \"false\");\n+  }\n+\n+  public void testFoldBangConstants() {\n+    fold(\"1 + !0\", \"2\");\n+    fold(\"1 + !1\", \"1\");\n+    fold(\"'a ' + !1\", \"'a false'\");\n+    fold(\"'a ' + !0\", \"'a true'\");\n   }\n \n   private static final List<String> LITERAL_OPERANDS =\n--- a/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeIntegrationTest.java\n     fold(\"function z() {if (a) { return true }\" +\n          \"else if (b) { return true }\" +\n          \"else { return true }}\",\n-         \"function z() {return true;}\");\n+         \"function z() {return !0;}\");\n \n     fold(\"function z() {if (a()) { return true }\" +\n          \"else if (b()) { return true }\" +\n          \"else { return true }}\",\n-         \"function z() {a()||b();return true;}\");\n+         \"function z() {a()||b();return !0;}\");\n   }\n \n   public void testFoldLogicalOpIntegration() {\n     fold(\"a = x || false ? b : c\", \"a=x?b:c\");\n     fold(\"do {x()} while((x && false) && y())\", \"x()\");\n   }\n+\n+  public void testTrueFalseFolding() {\n+    fold(\"x = true\", \"x = !0\");\n+    fold(\"x = false\", \"x = !1\");\n+    fold(\"x = !3\", \"x = !1\");\n+    fold(\"x = true && !0\", \"x = !0\");\n+    fold(\"x = !!!!!!!!!!!!3\", \"x = !0\");\n+    fold(\"if(!3){x()}\", \"\");\n+    fold(\"if(!!3){x()}\", \"x()\");\n+  }\n }\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n package com.google.javascript.jscomp;\n \n /**\n- * Tests for PeepholeSubstituteAlternateSyntaxTest in isolation.\n+ * Tests for {@link PeepholeSubstituteAlternateSyntax} in isolation.\n  * Tests for the interaction of multiple peephole passes are in\n  * PeepholeIntegrationTest.\n  */\n          \" else  { x = 2; x++; y += 1; z = pi; }\",\n          \"x=(a) ? 1 : 2; x++; y += 1; z = pi;\");\n     fold(\"function z() {\" +\n-         \"if (a) { foo(); return true } else { goo(); return true }\" +\n+         \"if (a) { foo(); return !0 } else { goo(); return !0 }\" +\n          \"}\",\n-         \"function z() {(a) ? foo() : goo(); return true}\");\n+         \"function z() {(a) ? foo() : goo(); return !0}\");\n     fold(\"function z() {if (a) { foo(); x = true; return true \" +\n          \"} else { goo(); x = true; return true }}\",\n-         \"function z() {(a) ? foo() : goo(); x = true; return true}\");\n+         \"function z() {(a) ? foo() : goo(); x = !0; return !0}\");\n \n     fold(\"function z() {\" +\n          \"  if (a) { bar(); foo(); return true }\" +\n          \"function z() {\" +\n          \"  if (a) { bar(); foo(); }\" +\n          \"    else { bar(); goo(); }\" +\n-         \"  return true;\" +\n+         \"  return !0;\" +\n          \"}\");\n   }\n \n     fold(\"while(!(!x&&!y)) foo()\", \"while(x||y) foo()\");\n     fold(\"while(x||!!y) foo()\", \"while(x||y) foo()\");\n     fold(\"while(!(!!x&&y)) foo()\", \"while(!(x&&y)) foo()\");\n+    fold(\"while(x&&!0) foo()\", \"while(x) foo()\");\n+    fold(\"while(x||!1) foo()\", \"while(x) foo()\");\n   }\n \n   public void testMinimizeForCondition() {\n     // These could be simplified to \"for(;;) ...\"\n     fold(\"for(;!!true;) foo()\", \"for(;1;) foo()\");\n     // Don't bother with FOR inits as there are normalized out.\n-    fold(\"for(!!true;;) foo()\", \"for(!!1;;) foo()\");\n+    fold(\"for(!!true;;) foo()\", \"for(!0;;) foo()\");\n \n     // These test tryMinimizeCondition\n     fold(\"for(;!!x;) foo()\", \"for(;x;) foo()\");\n     foldSame(\"for(a in b) foo()\");\n     foldSame(\"for(a in {}) foo()\");\n     foldSame(\"for(a in []) foo()\");\n-    fold(\"for(a in !!true) foo()\", \"for(a in !!1) foo()\");\n+    fold(\"for(a in !!true) foo()\", \"for(a in !0) foo()\");\n   }\n \n   public void testMinimizeCondition_example1() {\n   }\n \n   public void testFoldReturnResult() {\n-    foldSame(\"function f(){return false;}\");\n+    fold(\"function f(){return false;}\", \"function f(){return !1}\");\n     foldSame(\"function f(){return null;}\");\n     fold(\"function f(){return void 0;}\",\n          \"function f(){}\");\n     fold(\"if(x)if(y){if(z){while(1){}}}\", \"if(x&&y&&z){while(1){}}\");\n   }\n \n+  public void testFoldTrueFalse() {\n+    fold(\"x = true\", \"x = !0\");\n+    fold(\"x = false\", \"x = !1\");\n+  }\n+\n   public void testIssue291() {\n     fold(\"if (true) { f.onchange(); }\", \"if (1) f.onchange();\");\n     foldSame(\"if (f) { f.onchange(); }\");", "timestamp": 1297384335, "metainfo": ""}