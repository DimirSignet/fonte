{"sha": "6938aaabd0c2424ad36a4e13e7ce072b944ce33f", "log": "Don't inline parameters if arguments object has been modified.  R=johnlenz DELTA=46  (29 added, 0 deleted, 17 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=913   ", "commit": "\n--- a/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n+++ b/src/com/google/javascript/jscomp/MustBeReachingVariableDef.java\n         return;\n \n       default:\n-        if (NodeUtil.isAssignmentOp(n) && NodeUtil.isName(n.getFirstChild())) {\n-          Node name = n.getFirstChild();\n-          computeMustDef(name.getNext(), cfgNode, output, conditional);\n-          addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n+        if (NodeUtil.isAssignmentOp(n)) {\n+          if (NodeUtil.isName(n.getFirstChild())) {\n+            Node name = n.getFirstChild();\n+            computeMustDef(name.getNext(), cfgNode, output, conditional);\n+            addToDefIfLocal(name.getString(), conditional ? null : cfgNode,\n               n.getLastChild(), output);\n-        } else {\n-\n-          // DEC and INC actually defines the variable.\n-          if (n.getType() == Token.DEC || n.getType() == Token.INC) {\n-            Node target = n.getFirstChild();\n-            if (NodeUtil.isName(target)) {\n-              addToDefIfLocal(target.getString(),\n-                  conditional ? null : cfgNode, null, output);\n-              return;\n+            return;\n+          } else if (NodeUtil.isGet(n.getFirstChild())) {\n+\n+            // Treat all assignments to arguments as redefining the\n+            // parameters itself.\n+            Node obj = n.getFirstChild().getFirstChild();\n+            // TODO(user): More accuracy can be introduced\n+            // ie: We know exactly what arguments[x] is if x is a constant\n+            // number.\n+            if (NodeUtil.isName(obj) && \"arguments\".equals(obj.getString())) {\n+              for (Iterator<Var> i = jsScope.getVars(); i.hasNext();) {\n+                Var v = i.next();\n+                if (v.getParentNode().getType() == Token.LP) {\n+                  // Assume we no longer know where the parameter comes from\n+                  // anymore.\n+                  output.reachingDef.put(v, null);\n+                }\n+              }\n             }\n           }\n-\n-          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n-            computeMustDef(c, cfgNode, output, conditional);\n-          }\n+        }\n+\n+        // DEC and INC actually defines the variable.\n+        if (n.getType() == Token.DEC || n.getType() == Token.INC) {\n+          Node target = n.getFirstChild();\n+          if (NodeUtil.isName(target)) {\n+            addToDefIfLocal(target.getString(),\n+                conditional ? null : cfgNode, null, output);\n+            return;\n+          }\n+        }\n+\n+        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+          computeMustDef(c, cfgNode, output, conditional);\n         }\n     }\n   }\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n          \"function f(x, y) { if (y) { print(1) }}\");\n   }\n \n+  public void testInvalidInlineArguments() {\n+    testSame(\"function f(x, y) { x = 1; arguments[0] = 2; print(x) }\");\n+  }\n+\n   private void noInline(String input) {\n     inline(input, input);\n   }\n--- a/test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java\n+++ b/test/com/google/javascript/jscomp/MustBeReachingVariableDefTest.java\n     assertNotSame(def, defUse.getDef(\"param1\", use));\n   }\n \n+  public void testArgumentsObjectModifications() {\n+    computeDefUse(\"D: param1 = 1; arguments[0] = 2; U: param1\");\n+    assertNotSame(def, defUse.getDef(\"param1\", use));\n+  }\n+\n   /**\n    * The use of x at U: is the definition of x at D:.\n    */", "timestamp": 1300344324, "metainfo": ""}