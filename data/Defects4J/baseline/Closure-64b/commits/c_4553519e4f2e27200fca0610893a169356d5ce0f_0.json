{"sha": "4553519e4f2e27200fca0610893a169356d5ce0f", "log": "Sort some of the checks by computation complexity so it bails out earlier. (30s -> 27.5s in bullet.js)  R=johnlenz DELTA=46  (22 added, 20 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1921   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n         return false;\n       }\n \n-      // We can skip the side effect check along the paths of two nodes if\n-      // they are just next to each other.\n-      if (NodeUtil.isStatementBlock(defCfgNode.getParent()) &&\n-          defCfgNode.getNext() != useCfgNode) {\n-        // Similar side effect check as above but this time the side effect is\n-        // else where along the path.\n-        // x = readProp(b); while(modifyProp(b)) {}; print(x);\n-        CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>\n-          pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(\n-                 cfg,\n-                 cfg.getDirectedGraphNode(defCfgNode),\n-                 cfg.getDirectedGraphNode(useCfgNode),\n-                 SIDE_EFFECT_PREDICATE,\n-                 Predicates.\n-                     <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n-                 false);\n-        if (pathCheck.somePathsSatisfyPredicate()) {\n-          return false;\n-        }\n-      }\n \n       // TODO(user): Side-effect is ok sometimes. As long as there are no\n       // side-effect function down all paths to the use. Once we have all the\n \n       // Make sure that the name is not within a loop\n       if (NodeUtil.isWithinLoop(use)) {\n+        return false;\n+      }\n+\n+\n+      Collection<Node> uses = reachingUses.getUses(varName, defCfgNode);\n+\n+      if (uses.size() != 1) {\n         return false;\n       }\n \n         return false;\n       }\n \n-      Collection<Node> uses = reachingUses.getUses(varName, defCfgNode);\n-\n-      if (uses.size() != 1) {\n-        return false;\n+      // We can skip the side effect check along the paths of two nodes if\n+      // they are just next to each other.\n+      if (NodeUtil.isStatementBlock(defCfgNode.getParent()) &&\n+          defCfgNode.getNext() != useCfgNode) {\n+        // Similar side effect check as above but this time the side effect is\n+        // else where along the path.\n+        // x = readProp(b); while(modifyProp(b)) {}; print(x);\n+        CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>\n+          pathCheck = new CheckPathsBetweenNodes<Node, ControlFlowGraph.Branch>(\n+                 cfg,\n+                 cfg.getDirectedGraphNode(defCfgNode),\n+                 cfg.getDirectedGraphNode(useCfgNode),\n+                 SIDE_EFFECT_PREDICATE,\n+                 Predicates.\n+                     <DiGraphEdge<Node, ControlFlowGraph.Branch>>alwaysTrue(),\n+                 false);\n+        if (pathCheck.somePathsSatisfyPredicate()) {\n+          return false;\n+        }\n       }\n \n       return true;", "timestamp": 1305583381, "metainfo": ""}