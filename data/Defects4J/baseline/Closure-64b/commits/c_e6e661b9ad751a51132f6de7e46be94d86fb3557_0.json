{"sha": "e6e661b9ad751a51132f6de7e46be94d86fb3557", "log": "Tighten up the public API a bit.  R=johnlenz DELTA=9  (0 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=279   ", "commit": "\n--- a/src/com/google/javascript/jscomp/OptimizeReturns.java\n+++ b/src/com/google/javascript/jscomp/OptimizeReturns.java\n  *   - \"return !!x\" --> \"return x\"\n  * @author johnlenz@google.com (John Lenz)\n  */\n-public class OptimizeReturns\n+class OptimizeReturns\n     implements OptimizeCalls.CallGraphCompilerPass, CompilerPass {\n \n   private AbstractCompiler compiler;\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n  * Peephole optimization to fold constants (e.g. x + 1 + 7 --> x + 8).\n  *\n  */\n-public class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n+class PeepholeFoldConstants extends AbstractPeepholeOptimization {\n \n   static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(\n       \"JSC_DIVIDE_BY_0_ERROR\",\n--- a/src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldWithTypes.java\n  * \n  * @author dcc@google.com (Devin Coughlin)\n  */\n-public class PeepholeFoldWithTypes extends AbstractPeepholeOptimization {\n+class PeepholeFoldWithTypes extends AbstractPeepholeOptimization {\n \n   @Override\n   Node optimizeSubtree(Node subtree) {\n--- a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n+++ b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n  * guard conditions, comma operator left hand sides with no side effects, etc.\n  *\n  */\n-public class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {\n+class PeepholeRemoveDeadCode extends AbstractPeepholeOptimization {\n \n   // TODO(dcc): Some (all) of these can probably be better achieved\n   // using the control flow graph (like CheckUnreachableCode).\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n  * with literals, and simplifying returns.\n  *\n  */\n-public class PeepholeSubstituteAlternateSyntax\n+class PeepholeSubstituteAlternateSyntax\n   extends AbstractPeepholeOptimization {\n \n   private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);\n--- a/src/com/google/javascript/jscomp/ReplaceStrings.java\n+++ b/src/com/google/javascript/jscomp/ReplaceStrings.java\n  *\n  * Based in concept on the work by Jared Jacobs.\n  */\n-public class ReplaceStrings extends AbstractPostOrderCallback\n+class ReplaceStrings extends AbstractPostOrderCallback\n     implements CompilerPass {\n   static final DiagnosticType BAD_REPLACEMENT_CONFIGURATION =\n       DiagnosticType.warning(\n--- a/src/com/google/javascript/jscomp/SpecializeModule.java\n+++ b/src/com/google/javascript/jscomp/SpecializeModule.java\n  *\n  * @author dcc@google.com (Devin Coughlin)\n  */\n-public class SpecializeModule implements CompilerPass {\n+class SpecializeModule implements CompilerPass {\n   private AbstractCompiler compiler;\n \n   private Map<Node, Node> specializedInputRootsByOriginal;\n--- a/src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java\n+++ b/src/com/google/javascript/jscomp/VariableVisibilityAnalysis.java\n  * \n  * @author dcc@google.com (Devin Coughlin)\n  */\n-public class VariableVisibilityAnalysis implements CompilerPass {\n+class VariableVisibilityAnalysis implements CompilerPass {\n \n   enum VariableVisibility {\n     ", "timestamp": 1294954384, "metainfo": ""}