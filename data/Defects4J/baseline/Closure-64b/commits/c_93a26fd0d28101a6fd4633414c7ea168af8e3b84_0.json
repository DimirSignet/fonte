{"sha": "93a26fd0d28101a6fd4633414c7ea168af8e3b84", "log": "Break the dependency on the \"generation\" rule for consumers of the source maps.  R=jschorr DELTA=132  (94 added, 23 deleted, 15 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1087   ", "commit": "\n--- a/src/com/google/debugging/sourcemap/SourceMapConsumerFactory.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerFactory.java\n   public static SourceMapping parse(String contents)\n       throws SourceMapParseException {\n     SourceMapConsumer consumer = null;\n-    SourceMapGenerator.Format format = detectVersion(contents);\n+    SourceMapFormat format = detectVersion(contents);\n     consumer = createForVerion(detectVersion(contents));\n     consumer.parse(contents);\n     return consumer;\n    * @return The best guess of the source map version.\n    * @throws SourceMapParseException\n    */\n-  private static SourceMapGenerator.Format detectVersion(String contents)\n+  private static SourceMapFormat detectVersion(String contents)\n       throws SourceMapParseException {\n     if (contents.startsWith(\"/** Begin line maps. **/\")) {\n-      return SourceMapGenerator.Format.LEGACY;\n+      return SourceMapFormat.V1;\n     } else if (contents.startsWith(\"{\")){\n-      return SourceMapGenerator.Format.EXPERIMENTIAL;\n+      return SourceMapFormat.V2;\n     } else {\n       throw new SourceMapParseException(\"unable to detect source map format\");\n     }\n    * @throws SourceMapParseException\n    */\n   private static SourceMapConsumer createForVerion(\n-      SourceMapGenerator.Format format)\n+      SourceMapFormat format)\n       throws SourceMapParseException {\n     switch (format) {\n-      case LEGACY:\n+      case V1:\n         return new SourceMapConsumerV1();\n-      case EXPERIMENTIAL:\n+      case V2:\n         return new SourceMapConsumerV2();\n       default:\n         throw new SourceMapParseException(\"unsupported source map format\");\n--- /dev/null\n+++ b/src/com/google/debugging/sourcemap/SourceMapFormat.java\n+/*\n+ * Copyright 2011 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.debugging.sourcemap;\n+\n+/**\n+ * A list of currently support SourceMap format revisions.\n+ * @author johnlenz@google.com (John Lenz)\n+ */\n+public enum SourceMapFormat {\n+   /** The latest \"stable\" format */\n+   DEFAULT,\n+\n+   /** V1: The original Closure Inspector format */\n+   V1,\n+\n+   /** V2: A more compact format */\n+   V2;\n+}\n--- a/src/com/google/debugging/sourcemap/SourceMapGenerator.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapGenerator.java\n  * @author johnlenz@google.com (John Lenz)\n  */\n public interface SourceMapGenerator {\n-\n-  public enum Format {\n-     LEGACY {\n-       @Override\n-       public SourceMapGenerator getInstance() {\n-         return new SourceMapGeneratorV1();\n-       }\n-     },\n-     EXPERIMENTIAL {\n-       @Override\n-       public SourceMapGenerator getInstance() {\n-         return new SourceMapGeneratorV2();\n-       }\n-     };\n-     public abstract SourceMapGenerator getInstance();\n-  }\n \n   /**\n    * Appends the source map to the given buffer.\n--- /dev/null\n+++ b/src/com/google/debugging/sourcemap/SourceMapGeneratorFactory.java\n+/*\n+ * Copyright 2009 The Closure Compiler Authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.google.debugging.sourcemap;\n+\n+/**\n+ * @author johnlenz@google.com (John Lenz)\n+ */\n+public class SourceMapGeneratorFactory {\n+\n+  /**\n+   * @return The appropriate source map object for the given source map format.\n+   */\n+  public static SourceMapGenerator getInstance() {\n+    return getInstance(SourceMapFormat.DEFAULT);\n+  }\n+\n+  /**\n+   * @return The appropriate source map object for the given source map format.\n+   */\n+  public static SourceMapGenerator getInstance(SourceMapFormat format) {\n+    switch (format) {\n+      case V1:\n+        return new SourceMapGeneratorV1();\n+      case DEFAULT:\n+      case V2:\n+        return new SourceMapGeneratorV2();\n+      default:\n+        throw new IllegalStateException(\"unsupported source map format\");\n+    }\n+  }\n+}\n--- a/src/com/google/javascript/jscomp/SourceMap.java\n+++ b/src/com/google/javascript/jscomp/SourceMap.java\n \n import com.google.common.base.Predicate;\n import com.google.debugging.sourcemap.FilePosition;\n+import com.google.debugging.sourcemap.SourceMapFormat;\n import com.google.debugging.sourcemap.SourceMapGenerator;\n-import com.google.debugging.sourcemap.SourceMapGeneratorV1;\n-import com.google.debugging.sourcemap.SourceMapGeneratorV2;\n+import com.google.debugging.sourcemap.SourceMapGeneratorFactory;\n import com.google.javascript.rhino.Node;\n \n import java.io.IOException;\n   public static enum Format {\n      LEGACY {\n        @Override SourceMap getInstance() {\n-         return new SourceMap(new SourceMapGeneratorV1());\n+         return new SourceMap(\n+           SourceMapGeneratorFactory.getInstance(SourceMapFormat.V1));\n        }\n      },\n      DEFAULT {\n        @Override SourceMap getInstance() {\n-         return new SourceMap(new SourceMapGeneratorV2());\n+         return new SourceMap(\n+           SourceMapGeneratorFactory.getInstance(SourceMapFormat.DEFAULT));\n        }\n      },\n      EXPERIMENTIAL {\n        @Override SourceMap getInstance() {\n-         return new SourceMap(new SourceMapGeneratorV2());\n+         return new SourceMap(\n+           SourceMapGeneratorFactory.getInstance(SourceMapFormat.V2));\n        }\n      };\n      abstract SourceMap getInstance();", "timestamp": 1301094269, "metainfo": ""}