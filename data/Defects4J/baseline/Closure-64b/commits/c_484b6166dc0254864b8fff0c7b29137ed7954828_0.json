{"sha": "484b6166dc0254864b8fff0c7b29137ed7954828", "log": "Node.isEquivalentTo doesn't do what you expect, make it package private. Fix up the caller to use a working method.  R=acleung DELTA=92  (36 added, 12 deleted, 44 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=752   ", "commit": "\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n     }\n \n     @Override\n-    public boolean isEquivalentTo(Node node) {\n-      return (node instanceof NumberNode\n+    boolean isEquivalentTo(Node node, boolean recurse) {\n+      return (super.isEquivalentTo(node, recurse)\n           && getDouble() == ((NumberNode) node).getDouble());\n     }\n \n     }\n \n     @Override\n-    public boolean isEquivalentTo(Node node) {\n-      return (node instanceof StringNode &&\n-         this.str.equals(((StringNode) node).str));\n+    boolean isEquivalentTo(Node node, boolean recurse) {\n+      return (super.isEquivalentTo(node, recurse)\n+          && this.str.equals(((StringNode) node).str));\n     }\n \n     /**\n    * testing. Returns null if the nodes are equivalent.\n    */\n   NodeMismatch checkTreeEqualsImpl(Node node2) {\n-    boolean eq = false;\n-\n-    if (type == node2.getType() && getChildCount() == node2.getChildCount()\n-        && getNodeClass(this) == getNodeClass(node2)) {\n-      eq = this.isEquivalentTo(node2);\n-    }\n-\n-    if (!eq) {\n+    if (!isEquivalentTo(node2, false)) {\n       return new NodeMismatch(this, node2);\n     }\n \n     for (n = first, n2 = node2.first;\n          res == null && n != null;\n          n = n.next, n2 = n2.next) {\n+      if (node2 == null) {\n+        throw new IllegalStateException();\n+      }\n       res = n.checkTreeEqualsImpl(n2);\n       if (res != null) {\n         return res;\n    * testing. Returns null if the nodes are equivalent.\n    */\n   NodeMismatch checkTreeTypeAwareEqualsImpl(Node node2) {\n-    boolean eq = false;\n-\n-    if (type == node2.getType()\n-        && getChildCount() == node2.getChildCount()\n-        && getClass() == node2.getClass()\n-        && JSType.isEquivalent(jsType, node2.getJSType())) {\n-\n-      eq = this.isEquivalentTo(node2);\n-    }\n+    // Do a non-recursive equivalents check.\n+    boolean eq = this.isEquivalentTo(node2, false);\n+\n+    eq = eq && JSType.isEquivalent(jsType, node2.getJSType());\n \n     if (!eq) {\n       return new NodeMismatch(this, node2);\n \n   /** Returns true if this node is equivalent semantically to another */\n   public boolean isEquivalentTo(Node node) {\n+    return isEquivalentTo(node, true);\n+  }\n+\n+  /** Returns true if this node is equivalent semantically to another */\n+  boolean isEquivalentTo(Node node, boolean recurse) {\n+    if (type != node.getType()\n+        || getChildCount() != node.getChildCount()\n+        || getNodeClass(this) != getNodeClass(node)) {\n+      return false;\n+    }\n+\n     if (type == Token.ARRAYLIT) {\n       try {\n         int[] indices1 = (int[]) getProp(Node.SKIP_INDEXES_PROP);\n         return false;\n       }\n     }\n+\n+    if (recurse) {\n+      Node n, n2;\n+      for (n = first, n2 = node.first;\n+           n != null;\n+           n = n.next, n2 = n2.next) {\n+        if (!n.isEquivalentTo(n2, true)) {\n+          return false;\n+        }\n+      }\n+    }\n+\n     return true;\n   }\n \n--- a/test/com/google/javascript/jscomp/AliasStringsTest.java\n+++ b/test/com/google/javascript/jscomp/AliasStringsTest.java\n     test(\"var foo={px:435}\", \"var foo={px:435}\");\n \n     // string as key\n-    test(\"var foo={'px':435}\", \"var foo={px:435}\");\n+    test(\"var foo={'px':435}\", \"var foo={'px':435}\");\n     test(\"bar=function f(){return {'px':435}}\",\n-         \"bar=function f(){return {px:435}}\");\n+         \"bar=function f(){return {'px':435}}\");\n \n     test(\"function f() {var foo={bar:'!@#$%^&*()'}}\",\n          \"var $$S_$21$40$23$24$25$5e$26$2a$28$29='!@#$%^&*()';\" +\n--- a/test/com/google/javascript/jscomp/ProcessTweaksTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessTweaksTest.java\n \n   Map<String, Node> defaultValueOverrides;\n   boolean stripTweaks;\n-  \n+\n   public ProcessTweaksTest() {\n     super(\"function alert(arg) {}\");\n   }\n-  \n+\n   @Override\n   public void setUp() throws Exception {\n     super.setUp();\n \n   @Override\n   protected CompilerPass getProcessor(final Compiler compiler) {\n-    return new CompilerPass() {     \n+    return new CompilerPass() {\n       @Override\n       public void process(Node externs, Node root) {\n         ProcessTweaks processTweak =\n             new ProcessTweaks(compiler, stripTweaks, defaultValueOverrides);\n         processTweak.process(externs, root);\n-        \n+\n         if (stripTweaks) {\n           Set<String> emptySet = Collections.emptySet();\n           final StripCode stripCode = new StripCode(compiler, emptySet,\n     test(\"goog.tweak.getBoolean('a' + 'b')\", null,\n          ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR);\n   }\n-  \n+\n   public void testNonLiteralId3() {\n     test(\"var CONST = 'foo'; goog.tweak.overrideDefaultValue(CONST, 3)\", null,\n         ProcessTweaks.NON_LITERAL_TWEAK_ID_ERROR);\n     test(\"goog.tweak.registerBoolean('Some ID', 'a')\", null,\n         ProcessTweaks.INVALID_TWEAK_ID_ERROR);\n   }\n-  \n+\n   public void testInvalidDefaultValue1() {\n     testSame(\"var val = true; goog.tweak.registerBoolean('Foo', 'desc', val)\",\n          ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING);\n   }\n-  \n+\n   public void testInvalidDefaultValue2() {\n     testSame(\"goog.tweak.overrideDefaultValue('Foo', 3 + 1);\" +\n         \"goog.tweak.registerNumber('Foo', 'desc')\",\n     testSame(\"goog.tweak.getString('huh')\",\n         ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n   }\n-  \n+\n   public void testUnknownGetNumber() {\n     testSame(\"goog.tweak.getNumber('huh')\",\n         ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n   }\n-  \n+\n   public void testUnknownGetBoolean() {\n     testSame(\"goog.tweak.getBoolean('huh')\",\n         ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n         \"goog.tweak.getString('TweakA')\",\n         ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING);\n   }\n-  \n+\n   public void testWrongGetter2() {\n     testSame(\"goog.tweak.registerString('TweakA', 'desc');\" +\n         \"goog.tweak.getNumber('TweakA')\",\n         ProcessTweaks.TWEAK_WRONG_GETTER_TYPE_WARNING);\n   }\n-  \n+\n   public void testWrongGetter3() {\n     testSame(\"goog.tweak.registerNumber('TweakA', 'desc');\" +\n         \"goog.tweak.getBoolean('TweakA')\",\n   public void testWithNoTweaks() {\n     testSame(\"var DEF=true;var x={};x.foo={}\");\n   }\n-  \n+\n   public void testStrippingWithImplicitDefaultValues() {\n     stripTweaks = true;\n     test(\"goog.tweak.registerNumber('TweakA', 'desc');\" +\n         \"alert(goog.tweak.getString('TweakC'));\",\n         \"void 0; void 0; void 0; alert(0); alert(false); alert('')\");\n   }\n-  \n+\n   public void testStrippingWithExplicitDefaultValues() {\n     stripTweaks = true;\n     test(\"goog.tweak.registerNumber('TweakA', 'desc', 5);\" +\n     test(\"alert(goog.tweak.getNumber('TweakA'));\",\n         \"alert(0)\", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n   }\n-  \n+\n   public void testStrippingWithUnregisteredTweak2() {\n     stripTweaks = true;\n     test(\"alert(goog.tweak.getBoolean('TweakB'))\",\n         \"alert(false)\", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n   }\n-  \n+\n   public void testStrippingWithUnregisteredTweak3() {\n     stripTweaks = true;\n     test(\"alert(goog.tweak.getString('TweakC'))\",\n         \"alert('')\", null, ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n   }\n-  \n+\n   public void testStrippingOfManuallyRegistered1() {\n     stripTweaks = true;\n     test(\"var reg = goog.tweak.getRegistry();\" +\n         \"goog.tweak.registerNumber('TweakA', 'desc');\" +\n         \"goog.tweak.registerBoolean('TweakB', 'desc', true);\" +\n         \"goog.tweak.registerString('TweakC', 'desc', 'foo');\" +\n-        \"var a = { 'TweakA': 1, 'TweakB': false, 'TweakC': '!' };\");\n-  }\n-  \n+        \"var a = { TweakA: 1, TweakB: false, TweakC: '!' };\");\n+  }\n+\n   public void testCompilerOverridesNoStripping2() {\n     defaultValueOverrides.put(\"TweakA\", Node.newNumber(1));\n     defaultValueOverrides.put(\"TweakB\", new Node(Token.FALSE));\n         \"goog.tweak.registerNumber('TweakA', 'desc');\" +\n         \"goog.tweak.registerBoolean('TweakB', 'desc', true);\" +\n         \"goog.tweak.registerString('TweakC', 'desc', 'foo');\" +\n-        \"var a = { 'TweakA': 1, 'TweakB': false, 'TweakC': '!' };\" +\n-        \"var b = { 'TweakA': 1, 'TweakB': false, 'TweakC': '!' };\");\n-  }\n-  \n+        \"var a = { TweakA: 1, TweakB: false, TweakC: '!' };\" +\n+        \"var b = { TweakA: 1, TweakB: false, TweakC: '!' };\");\n+  }\n+\n   public void testUnknownCompilerOverride() {\n     allowSourcelessWarnings();\n     defaultValueOverrides.put(\"TweakA\", Node.newString(\"!\"));\n-    testSame(\"var a\", ProcessTweaks.UNKNOWN_TWEAK_WARNING); \n+    testSame(\"var a\", ProcessTweaks.UNKNOWN_TWEAK_WARNING);\n   }\n \n   public void testCompilerOverrideWithWrongType() {\n     allowSourcelessWarnings();\n     defaultValueOverrides.put(\"TweakA\", Node.newString(\"!\"));\n     testSame(\"goog.tweak.registerBoolean('TweakA', 'desc')\",\n-        ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING); \n+        ProcessTweaks.INVALID_TWEAK_DEFAULT_VALUE_WARNING);\n   }\n }\n--- a/test/com/google/javascript/jscomp/RenamePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/RenamePropertiesTest.java\n   public void testIncorrectAttemptToAccessQuotedProperty() {\n     // The correct way to call the quoted 'getFoo' method is: bar['getFoo']().\n     test(\"Bar.prototype = {'B': 0, 'getFoo': function(){}}; bar.getFoo();\",\n-         \"Bar.prototype = {B: 0, getFoo: function(){}}; bar.a();\");\n+         \"Bar.prototype = {'B': 0, 'getFoo': function(){}}; bar.a();\");\n   }\n \n   public void testSetQuotedPropertyOfThis() {\n--- a/test/com/google/javascript/jscomp/RenamePrototypesTest.java\n+++ b/test/com/google/javascript/jscomp/RenamePrototypesTest.java\n          \"Bar.prototype['a']=function(){};Bar.a(b);\" +\n          \"Bar.prototype['b']=function(){}\");\n     test(\"Bar.prototype={'getFoo':function(){},2:function(){}}\",\n-         \"Bar.prototype={a:function(){},2:function(){}}\");\n+         \"Bar.prototype={'a':function(){},2:function(){}}\");\n     test(\"Bar.prototype={'getFoo':function(){},\" +\n          \"'getBar':function(){}};b.getFoo()\",\n-         \"Bar.prototype={a:function(){},\" +\n-         \"b:function(){}};b.a()\");\n+         \"Bar.prototype={'a':function(){},\" +\n+         \"'b':function(){}};b.a()\");\n \n     test(\"Bar.prototype={'B':function(){},\" +\n          \"'getBar':function(){}};b.getBar()\",\n-         \"Bar.prototype={b:function(){},\" +\n-         \"a:function(){}};b.a()\");\n+         \"Bar.prototype={'b':function(){},\" +\n+         \"'a':function(){}};b.a()\");\n \n     // overlap\n     test(\"Bar.prototype={'a':function(){},\" +\n          \"'b':function(){}};b.b()\",\n-         \"Bar.prototype={b:function(){},\" +\n-         \"a:function(){}};b.a()\");\n+         \"Bar.prototype={'b':function(){},\" +\n+         \"'a':function(){}};b.a()\");\n \n     // don't rename anything with a leading underscore\n     test(\"Bar.prototype={'_getFoo':function(){},\" +\n          \"'getBar':function(){}};b._getFoo()\",\n-         \"Bar.prototype={_getFoo:function(){},\" +\n-         \"a:function(){}};b._getFoo()\");\n+         \"Bar.prototype={'_getFoo':function(){},\" +\n+         \"'a':function(){}};b._getFoo()\");\n \n     // Externed methods\n     test(\"Bar.prototype={'toString':function(){},\" +\n          \"'getBar':function(){}};b.toString()\",\n-         \"Bar.prototype={toString:function(){},\" +\n-         \"a:function(){}};b.toString()\");\n+         \"Bar.prototype={'toString':function(){},\" +\n+         \"'a':function(){}};b.toString()\");\n \n     // don't rename a method to an existing (unrenamed) property\n     test(\"Bar.prototype.foo=function(){}\" +\n          \"Bar.prototype={set a(x){}}\");\n     test(\"Bar.prototype={set getFoo(x){}}; a.getFoo;\",\n          \"Bar.prototype={set a(x){}}; a.a;\");\n-    \n+\n     // overlap\n     test(\"Bar.prototype={get a(){},\" +\n          \"get b(){}};b.b()\",\n     testStable(\n         \"Bar.prototype={'getFoo':function(){},\" +\n         \"'getBar':function(){}};b.getFoo()\",\n-        \"Bar.prototype={a:function(){}, b:function(){}};b.a()\",\n+        \"Bar.prototype={'a':function(){}, 'b':function(){}};b.a()\",\n         \"Bar.prototype={'getFoo':function(){},\" +\n         \"'getBaz':function(){},'getBar':function(){}};b.getFoo()\",\n-        \"Bar.prototype={a:function(){}, c:function(){}, b:function(){}};b.a()\");\n+        \"Bar.prototype={'a':function(){}, \" +\n+        \"'c':function(){}, 'b':function(){}};b.a()\");\n   }\n \n   public void testStableOverlap() {\n     testStable(\n         \"Bar.prototype={'a':function(){},'b':function(){}};b.b()\",\n-        \"Bar.prototype={b:function(){},a:function(){}};b.a()\",\n+        \"Bar.prototype={'b':function(){},'a':function(){}};b.a()\",\n         \"Bar.prototype={'a':function(){},'b':function(){}};b.b()\",\n-        \"Bar.prototype={b:function(){},a:function(){}};b.a()\");\n+        \"Bar.prototype={'b':function(){},'a':function(){}};b.a()\");\n   }\n \n   public void testStableTrickyExternedMethods() {\n     test(\"Bar.prototype={'toString':function(){},\" +\n          \"'getBar':function(){}};b.toString()\",\n-         \"Bar.prototype={toString:function(){},\" +\n-         \"a:function(){}};b.toString()\");\n+         \"Bar.prototype={'toString':function(){},\" +\n+         \"'a':function(){}};b.toString()\");\n     prevUsedRenameMap = renamePrototypes.getPropertyMap();\n     String externs = EXTERNS + \"prop.a;\";\n     test(externs,\n          \"Bar.prototype={'toString':function(){},\" +\n          \"'getBar':function(){}};b.toString()\",\n-         \"Bar.prototype={toString:function(){},\" +\n-         \"b:function(){}};b.toString()\", null, null);\n+         \"Bar.prototype={'toString':function(){},\" +\n+         \"'b':function(){}};b.toString()\", null, null);\n   }\n \n   public void testStable(String input1, String expected1,\n--- a/test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java\n+++ b/test/com/google/javascript/jscomp/jsonml/JsonMLConversionTest.java\n     testConversion(\"var x = new A(1), y = new B()\");\n   }\n \n+  public void testObject0() throws Exception {\n+    // TODO(johnlenz): quoted object literal properties are not noted.\n+    // testConversion(\"({'a':0})\");\n+    // TODO(johnlenz): numbers are represented as strings\n+    // testConversion(\"({1:0})\");\n+  }\n+\n   public void testObject() throws Exception {\n     testConversion(\"x = {}\");\n     testConversion(\"var x = {}\");\n     testConversion(\"x = {x: 1, y: 2}\");\n-    testConversion(\"var x = {'2': 1, 'a': 2}\");\n+    // testConversion(\"var x = {'2': 1, 'a': 2}\");\n+    // testConversion(\"var x = {2: 1, a: 2}\");\n     testConversion(\"x = {x: null}\");\n-    testConversion(\"x = {'a': function f() {}}\");\n-    testConversion(\"x = {'1': function f() {}}\");\n-    testConversion(\"x = {'a': f()}\");\n-    testConversion(\"x = {'1': f()}\");\n-    testConversion(\"x = {'a': function f() {2 + 3; q = 2 + 3; var v = y * z; \"\n+    testConversion(\"x = {a: function f() {}}\");\n+    // testConversion(\"x = {1: function f() {}}\");\n+    testConversion(\"x = {a: f()}\");\n+    // testConversion(\"x = {1: f()}\");\n+    testConversion(\"x = {a: function f() {2 + 3; q = 2 + 3; var v = y * z; \"\n         + \"g = function(a) {true; var b = a + 1; return a * a}}}\");\n-    testConversion(\"x = {'1': function f() {2 + 3; q = 2 + 3; var v = y * z; \"\n-        + \"g = function(a) {true; var b = a + 1; return a * a}}}\");\n+    // testConversion(\"x = {1: function f() {2 + 3; q = 2 + 3; var v = y * z; \"\n+    //    + \"g = function(a) {true; var b = a + 1; return a * a}}}\");\n     testConversion(\"x = {get a() {return 1}}\");\n     testConversion(\"x = {set a(b) {}}\");\n   }\n      testConversion(\"with ({}) {;}\");\n      testConversion(\"with (x) {}\");\n      testConversion(\"with (x) {f(x)}\");\n-     testConversion(\"with ({'1': function f() {2 + 3; q = 2 + 3; var v = y * z;\"\n+     testConversion(\"with ({a: function f() {}}) {f(1)}\");\n+     testConversion(\"with ({z: function f() {2 + 3; q = 2 + 3; var v = y * z;\"\n          + \"g = function(a) {true; var b = a + 1; return a * a}}}) {f(1)}\");\n      testConversion(\"with (x in X) {x++}\");\n    }", "timestamp": 1299180940, "metainfo": ""}