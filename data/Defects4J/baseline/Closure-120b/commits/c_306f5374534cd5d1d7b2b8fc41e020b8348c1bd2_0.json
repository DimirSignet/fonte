{"sha": "306f5374534cd5d1d7b2b8fc41e020b8348c1bd2", "log": "Fix CheckRequiresForConstructors to recognize fields that are constructor references as constructors so that it doesn't complain that it isn't goog.require'd. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43780560", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java\n+++ b/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java\n \n package com.google.javascript.jscomp;\n \n-import com.google.common.base.Preconditions;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n-import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.NodeTraversal.Callback;\n import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.JSTypeExpression;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.JSType;\n \n import java.util.List;\n import java.util.Set;\n \n     @Override\n     public void visit(NodeTraversal t, Node n, Node parent) {\n-      JSDocInfo info;\n       switch (n.getType()) {\n         case Token.ASSIGN:\n-          info = (JSDocInfo) n.getProp(Node.JSDOC_INFO_PROP);\n-          if (info != null && info.isConstructor()) {\n-            String qualifiedName = n.getFirstChild().getQualifiedName();\n-            constructors.add(qualifiedName);\n-          }\n+        case Token.VAR:\n+          maybeAddConstructor(t, n);\n           break;\n         case Token.FUNCTION:\n-          if (NodeUtil.isFunctionExpression(n)) {\n-            if (parent.isName()) {\n-              String functionName = parent.getString();\n-              info = (JSDocInfo) parent.getProp(Node.JSDOC_INFO_PROP);\n-              if (info != null && info.isConstructor()) {\n-                constructors.add(functionName);\n-              } else {\n-                Node gramps = parent.getParent();\n-                Preconditions.checkState(\n-                    gramps != null && gramps.isVar());\n-                info = (JSDocInfo) gramps.getProp(Node.JSDOC_INFO_PROP);\n-                if (info != null && info.isConstructor()) {\n-                  constructors.add(functionName);\n-                }\n-              }\n-            }\n-          } else {\n-            info = (JSDocInfo) n.getProp(Node.JSDOC_INFO_PROP);\n-            if (info != null && info.isConstructor()) {\n-              String functionName = n.getFirstChild().getString();\n-              constructors.add(functionName);\n-            }\n+          // Exclude function expressions.\n+          if (NodeUtil.isStatement(n)) {\n+            maybeAddConstructor(t, n);\n           }\n           break;\n         case Token.CALL:\n       }\n       newNodes.add(n);\n     }\n+\n+    private void maybeAddConstructor(NodeTraversal t, Node n) {\n+      JSDocInfo info = (JSDocInfo) n.getProp(Node.JSDOC_INFO_PROP);\n+      if (info != null) {\n+        String ctorName = n.getFirstChild().getQualifiedName();\n+        if (info.isConstructor()) {\n+          constructors.add(ctorName);\n+        } else {\n+          JSTypeExpression typeExpr = info.getType();\n+          if (typeExpr != null) {\n+            JSType type = typeExpr.evaluate(t.getScope(), compiler.getTypeRegistry());\n+            if (type.isConstructor()) {\n+              constructors.add(ctorName);\n+            }\n+          }\n+        }\n+      }\n+    }\n   }\n }\n--- a/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckRequiresForConstructorsTest.java\n import static com.google.javascript.jscomp.CheckRequiresForConstructors.MISSING_REQUIRE_WARNING;\n \n import com.google.common.collect.ImmutableList;\n-import com.google.javascript.jscomp.CheckLevel;\n-import com.google.javascript.jscomp.Result;\n \n /**\n  * Tests for {@link CheckRequiresForConstructors}.\n     String warning = \"'goog.Forgot' used but not goog.require'd\";\n     test(js, js, null, MISSING_REQUIRE_WARNING, warning);\n   }\n+\n+  public void testVarConstructorName() {\n+    String js = \"/** @type {function(new:Date)} */var bar = Date;\" +\n+        \"new bar();\";\n+    testSame(js);\n+  }\n+\n+  public void testVarConstructorFunction() {\n+    String js = \"/** @type {function(new:Date)} */var bar = function() {};\" +\n+        \"new bar();\";\n+    testSame(js);\n+  }\n+\n+  public void testAssignConstructorName() {\n+    String js = \"var foo = {};\" +\n+        \"/** @type {function(new:Date)} */foo.bar = Date;\" +\n+        \"new foo.bar();\";\n+    testSame(js);\n+  }\n+\n+  public void testAssignConstructorFunction() {\n+    String js = \"var foo = {};\" +\n+        \"/** @type {function(new:Date)} */foo.bar = function() {};\" +\n+        \"new foo.bar();\";\n+    testSame(js);\n+  }\n+\n+  public void testConstructorFunctionReference() {\n+    String js = \"/** @type {function(new:Date)} */function bar() {}\" +\n+        \"new bar();\";\n+    testSame(js);\n+  }\n }", "timestamp": 1363030491, "metainfo": ""}