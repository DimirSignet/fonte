{"sha": "6c492949f3cf6e489fc7ca0bae4a8b4aa5834467", "log": "interpret the @meaning annotation for translations  R=johnlenz DELTA=96  (85 added, 0 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=239513   ", "commit": "\n--- a/src/com/google/javascript/jscomp/JsMessage.java\n+++ b/src/com/google/javascript/jscomp/JsMessage.java\n   private final Set<String> placeholders;\n   private final String desc;\n   private final boolean hidden;\n+  private final String meaning;\n \n   private final String sourceName;\n   private final boolean isAnonymous;\n    * @param id an id that *uniquely* identifies the message in the bundle.\n    *     It could be either the message name or id generated from the message\n    *     content.\n+   * @param meaning The user-specified meaning of the message. May be null if\n+   *     the user did not specify an explicit meaning.\n    */\n   private JsMessage(String sourceName, String key,\n       boolean isAnonymous, boolean isExternal,\n       String id, List<CharSequence> parts, Set<String> placeholders,\n-      String desc, boolean hidden) {\n+      String desc, boolean hidden, String meaning) {\n \n     Preconditions.checkState(key != null);\n     Preconditions.checkState(id != null);\n     this.placeholders = Collections.unmodifiableSet(placeholders);\n     this.desc = desc;\n     this.hidden = hidden;\n+    this.meaning = meaning;\n \n     this.sourceName = sourceName;\n     this.isAnonymous = isAnonymous;\n    */\n   public String getDesc() {\n     return desc;\n+  }\n+\n+  /**\n+   * Gets the meaning annotated to the message, intended to force different\n+   * translations.\n+   */\n+  String getMeaning() {\n+    return meaning;\n   }\n \n   /**\n            key.equals(m.key) &&\n            isAnonymous == m.isAnonymous &&\n            parts.equals(m.parts) &&\n+           (meaning == null ? m.meaning == null : meaning.equals(m.meaning)) &&\n            placeholders.equals(m.placeholders) &&\n            (desc == null ? m.desc == null : desc.equals(m.desc)) &&\n            (sourceName == null\n     }\n \n     private String key;\n+\n+    private String meaning;\n+\n     private String desc;\n     private boolean hidden;\n \n       return this;\n     }\n \n+    /**\n+     * Sets the programmer-specified meaning of this message, which\n+     * forces this message to translate differently.\n+     */\n+    public Builder setMeaning(String meaning) {\n+      this.meaning = meaning;\n+      return this;\n+    }\n+\n     /** Sets whether the message should be hidden from volunteer translators. */\n     public Builder setIsHidden(boolean hidden) {\n       this.hidden = hidden;\n       }\n \n       if (!isExternal) {\n-        id = idGenerator == null ? key : idGenerator.generateId(key, parts);\n+        String defactoMeaning = meaning != null ? meaning : key;\n+        id = idGenerator == null ? defactoMeaning :\n+            idGenerator.generateId(defactoMeaning, parts);\n       }\n \n       return new JsMessage(sourceName, key, isAnonymous, isExternal, id, parts,\n-          placeholders, desc, hidden);\n+          placeholders, desc, hidden, meaning);\n     }\n \n     /**\n   }\n \n   public interface IdGenerator {\n-\n-    String generateId(String key, List<CharSequence> messageParts);\n+    /**\n+     * Generate the ID for the message. Messages with the same messageParts\n+     * and meaning will get the same id. Messages with the same id\n+     * will get the same translation.\n+     *\n+     * @param meaning The programmer-specified meaning. If no {@code @meaning}\n+     *     annotation appears, we will use the name of the variable it's\n+     *     assigned to. If the variable is unnamed, then we will just\n+     *     use a fingerprint of the message.\n+     * @param messageParts The parts of the message, including the main\n+     *     message text.\n+     */\n+    String generateId(String meaning, List<CharSequence> messageParts);\n   }\n }\n--- a/src/com/google/javascript/jscomp/JsMessageVisitor.java\n+++ b/src/com/google/javascript/jscomp/JsMessageVisitor.java\n       }\n       if (info.isHidden()) {\n         builder.setIsHidden(true);\n+      }\n+      if (info.getMeaning() != null) {\n+        builder.setMeaning(info.getMeaning());\n       }\n     }\n \n--- a/test/com/google/javascript/jscomp/JsMessageExtractorTest.java\n+++ b/test/com/google/javascript/jscomp/JsMessageExtractorTest.java\n import static com.google.javascript.jscomp.JsMessage.Style.RELAX;\n \n import com.google.common.base.Joiner;\n+import com.google.common.collect.Lists;\n \n import junit.framework.TestCase;\n \n import java.io.IOException;\n import java.util.Collection;\n import java.util.Iterator;\n+import java.util.List;\n \n /**\n  * Unit test for {@link JsMessageExtractor}.\n     assertEquals(\"bar\", iter.next().toString());\n   }\n \n+  public void testMeaningAnnotation() {\n+    List<JsMessage> msgs = Lists.newArrayList(\n+        extractMessages(\n+            \"var MSG_UNNAMED_1 = goog.getMsg('foo');\",\n+            \"var MSG_UNNAMED_2 = goog.getMsg('foo');\"));\n+    assertEquals(2, msgs.size());\n+    assertTrue(msgs.get(0).getId().equals(msgs.get(1).getId()));\n+    assertEquals(msgs.get(0), msgs.get(1));\n+\n+    msgs = Lists.newArrayList(\n+        extractMessages(\n+            \"var MSG_UNNAMED_1 = goog.getMsg('foo');\",\n+            \"/** @meaning bar */ var MSG_UNNAMED_2 = goog.getMsg('foo');\"));\n+    assertEquals(2, msgs.size());\n+    assertFalse(msgs.get(0).getId().equals(msgs.get(1).getId()));\n+  }\n+\n   private void assertEquals(JsMessage expected, JsMessage actual) {\n+    assertEquals(expected.getId(), actual.getId());\n     assertEquals(expected.getKey(), actual.getKey());\n     assertEquals(expected.parts(), actual.parts());\n     assertEquals(expected.placeholders(), actual.placeholders());\n     assertEquals(expected.getDesc(), actual.getDesc());\n     assertEquals(expected.isHidden(), actual.isHidden());\n+    assertEquals(expected.getMeaning(), actual.getMeaning());\n   }\n }\n--- a/test/com/google/javascript/jscomp/JsMessageTest.java\n+++ b/test/com/google/javascript/jscomp/JsMessageTest.java\n         .build().isEmpty());\n   }\n \n+  public void testMeaningChangesId() {\n+    String id1 = new JsMessage.Builder()\n+        .appendStringPart(\"foo\").build().getId();\n+    String id2 = new JsMessage.Builder()\n+        .appendStringPart(\"foo\").setMeaning(\"bar\").build().getId();\n+    assertFalse(id1.equals(id2));\n+  }\n+\n   public void testHashValues() {\n     final String EMPTY = \"\";\n     final String VAL = \"Hello, world\";", "timestamp": 1285118634, "metainfo": ""}