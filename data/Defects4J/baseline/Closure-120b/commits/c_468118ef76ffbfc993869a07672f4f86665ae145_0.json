{"sha": "468118ef76ffbfc993869a07672f4f86665ae145", "log": "Make it easier to add exit logging to AbstractCommandLineRunner subclasses  R=acleung   Revision created by MOE tool push_codebase. MOE_MIGRATION=1141101   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n   }\n \n   /**\n-   * Runs the Compiler and calls System.exit() with the exit status of the\n-   * compiler.\n+   * Runs the Compiler and calls exit() with the exit status of the\n+   * compiler. By default, exit() is just System.exit().\n    */\n   final public void run() {\n-    int result = 0;\n+    int exitCode = 0;\n     int runs = 1;\n+    Throwable error = null;\n     if (config.computePhaseOrdering) {\n       runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;\n       PhaseOptimizer.randomizeLoops();\n     }\n     try {\n-      for (int i = 0; i < runs && result == 0; i++) {\n+      for (int i = 0; i < runs && exitCode == 0; i++) {\n         runTimeStats.recordStartRun();\n-        result = doRun();\n+        exitCode = doRun();\n         runTimeStats.recordEndRun();\n       }\n-    } catch (AbstractCommandLineRunner.FlagUsageException e) {\n-      System.err.println(e.getMessage());\n-      result = -1;\n     } catch (Throwable t) {\n-      t.printStackTrace();\n-      result = -2;\n+      error = t;\n+    }\n+    exit(runTimeStats, error, exitCode);\n+  }\n+\n+  /**\n+   * Exits the current process. Prints out any \"process\" statistics\n+   * that the user might need to know about.\n+   */\n+  void exit(RunTimeStats runTimeStats, Throwable error, int exitCode) {\n+    if (error instanceof AbstractCommandLineRunner.FlagUsageException) {\n+      System.err.println(error.getMessage());\n+      exitCode = 2;\n+    } else if (error != null) {\n+      error.printStackTrace();\n+      exitCode = 37;\n     }\n \n     if (config.computePhaseOrdering) {\n     }\n \n     if (testMode) {\n-      exitCodeReceiverForTesting.apply(result);\n+      exitCodeReceiverForTesting.apply(exitCode);\n     } else {\n-      System.exit(result);\n+      System.exit(exitCode);\n     }\n   }\n \n     out.append(\"\\n\");\n   }\n \n-  private class RunTimeStats {\n+  class RunTimeStats {\n     private long bestRunTime = Long.MAX_VALUE;\n     private long worstRunTime = Long.MIN_VALUE;\n-    private long lastStartTime = 0;\n+    long lastStartTime = 0;\n     private List<List<String>> loopedPassesInBestRun = null;\n \n     /**", "timestamp": 1288989172, "metainfo": ""}