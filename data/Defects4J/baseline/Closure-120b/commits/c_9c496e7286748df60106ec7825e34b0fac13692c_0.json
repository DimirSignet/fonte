{"sha": "9c496e7286748df60106ec7825e34b0fac13692c", "log": "Don't consider an empty function name to be a qualified name.  R=nicksantos DELTA=26  (21 added, 1 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4854   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n    * @return the function's name, or {@code null} if it has no name\n    */\n   static String getFunctionName(Node n) {\n+    Preconditions.checkState(n.isFunction());\n     Node parent = n.getParent();\n-    String name = n.getFirstChild().getString();\n     switch (parent.getType()) {\n       case Token.NAME:\n         // var name = function() ...\n         // var name2 = function name1() ...\n-        return parent.getString();\n+        return parent.getQualifiedName();\n \n       case Token.ASSIGN:\n         // qualified.name = function() ...\n \n       default:\n         // function name() ...\n-        return name != null && name.length() != 0 ? name : null;\n+        String name = n.getFirstChild().getQualifiedName();\n+        return name;\n     }\n   }\n \n    * @return the function's name, or {@code null} if it has no name\n    */\n   public static String getNearestFunctionName(Node n) {\n+    if (!n.isFunction()) {\n+      return null;\n+    }\n+\n     String name = getFunctionName(n);\n     if (name != null) {\n       return name;\n    * looking for references to the \"arguments\" var_args object.\n    */\n   static boolean isVarArgsFunction(Node function) {\n+    // TODO(johnlenz): rename this function\n     Preconditions.checkArgument(function.isFunction());\n     return isNameReferenced(\n         function.getLastChild(),\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n    */\n   public String getQualifiedName() {\n     if (type == Token.NAME) {\n-      return getString();\n+      String name = getString();\n+      return name.isEmpty() ? null : name;\n     } else if (type == Token.GETPROP) {\n       String left = getFirstChild().getQualifiedName();\n       if (left == null) {\n   public boolean isQualifiedName() {\n     switch (getType()) {\n       case Token.NAME:\n+        return getString().isEmpty() ? false : true;\n       case Token.THIS:\n         return true;\n       case Token.GETPROP:\n   public boolean isUnscopedQualifiedName() {\n     switch (getType()) {\n       case Token.NAME:\n-        return true;\n+        return getString().isEmpty() ? false : true;\n       case Token.GETPROP:\n         return getFirstChild().isUnscopedQualifiedName();\n       default:\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n   }\n \n   public void testGetNearestFunctionName() {\n+    testFunctionName(\"(function() {})()\", null);\n     testFunctionName(\"function a() {}\", \"a\");\n     testFunctionName(\"(function a() {})\", \"a\");\n     testFunctionName(\"({a:function () {}})\", \"a\");\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n     assertTrue(string.getSourceOffset() < 0);\n   }\n \n+  public void testQualifiedName() {\n+    assertNull(IR.name(\"\").getQualifiedName());\n+    assertEquals(\"a\", IR.name(\"a\").getQualifiedName());\n+    assertEquals(\n+        \"a.b\", IR.getprop(IR.name(\"a\"), IR.string(\"b\")).getQualifiedName());\n+    assertEquals(\n+        \"this.b\", IR.getprop(IR.thisNode(), IR.string(\"b\")).getQualifiedName());\n+    assertNull(\n+        IR.getprop(IR.call(IR.name(\"a\")), IR.string(\"b\")).getQualifiedName());\n+  }\n+\n   private static Node getVarRef(String name) {\n     return Node.newString(Token.NAME, name);\n   }", "timestamp": 1337876857, "metainfo": ""}