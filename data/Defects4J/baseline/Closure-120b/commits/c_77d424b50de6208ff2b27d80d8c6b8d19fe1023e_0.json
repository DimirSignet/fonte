{"sha": "77d424b50de6208ff2b27d80d8c6b8d19fe1023e", "log": "Proper arity checking requires JSDoc annotations, to determine optional and var_args properties, trying to guess in the default coding convention only cause unsolvable problems.  R=nicksantos DELTA=10 (1 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6079   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodingConventions.java\n+++ b/src/com/google/javascript/jscomp/CodingConventions.java\n     public boolean isOptionalParameter(Node parameter) {\n       // be as lax as possible, but this must be mutually exclusive from\n       // var_args parameters.\n-      return !isVarArgsParameter(parameter);\n+      return false;\n     }\n \n     @Override\n     public boolean isVarArgsParameter(Node parameter) {\n       // be as lax as possible\n-      return parameter.getParent().getLastChild() == parameter;\n+      return false;\n     }\n \n     @Override\n--- a/test/com/google/javascript/jscomp/DefaultCodingConventionTest.java\n+++ b/test/com/google/javascript/jscomp/DefaultCodingConventionTest.java\n         Node.newString(Token.NAME, \"opt_b\"));\n \n     assertFalse(conv.isVarArgsParameter(args.getFirstChild()));\n-    assertTrue(conv.isVarArgsParameter(args.getLastChild()));\n+    assertFalse(conv.isVarArgsParameter(args.getLastChild()));\n     assertFalse(conv.isVarArgsParameter(optArgs.getFirstChild()));\n-    assertTrue(conv.isVarArgsParameter(optArgs.getLastChild()));\n+    assertFalse(conv.isVarArgsParameter(optArgs.getLastChild()));\n \n-    assertTrue(conv.isOptionalParameter(args.getFirstChild()));\n+    assertFalse(conv.isOptionalParameter(args.getFirstChild()));\n     assertFalse(conv.isOptionalParameter(args.getLastChild()));\n-    assertTrue(conv.isOptionalParameter(optArgs.getFirstChild()));\n+    assertFalse(conv.isOptionalParameter(optArgs.getFirstChild()));\n     assertFalse(conv.isOptionalParameter(optArgs.getLastChild()));\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java\n \n   public void testFunctionWithDefaultCodingConvention() {\n     convention = CodingConventions.getDefault();\n-    testSame(\"var foo = function(x) {}; foo(1, 2);\");\n-    testSame(\"var foo = function(opt_x) {}; foo(1, 2);\");\n-    testSame(\"var foo = function(var_args) {}; foo(1, 2);\");\n+    testSame(\"var foo = function(x) {}; foo(1, 2);\", WRONG_ARGUMENT_COUNT);\n+    testSame(\"var foo = function(opt_x) {}; foo(1, 2);\", WRONG_ARGUMENT_COUNT);\n+    testSame(\"var foo = function(var_args) {}; foo(1, 2);\",\n+        WRONG_ARGUMENT_COUNT);\n   }\n \n   public void testMethodCalls() {", "timestamp": 1357588153, "metainfo": ""}