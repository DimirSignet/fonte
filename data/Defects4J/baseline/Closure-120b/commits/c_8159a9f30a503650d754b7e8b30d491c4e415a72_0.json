{"sha": "8159a9f30a503650d754b7e8b30d491c4e415a72", "log": "Warn about undefined this argument when the function literal argument references this.  R=nicksantos DELTA=82  (43 added, 5 deleted, 34 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=219268   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n       \"JSC_TEMPLATE_TYPE_OF_THIS_EXPECTED\",\n       \"A function type with the template type as the type of this must be a \" +\n       \"parameter type\");\n+\n+  static final DiagnosticType FUNCTION_LITERAL_UNDEFINED_THIS =\n+    DiagnosticType.warning(\n+        \"JSC_FUNCTION_LITERAL_UNDEFINED_THIS\",\n+        \"Function literal argument refers to undefined this argument\");\n \n   private final AbstractCompiler compiler;\n   private final JSTypeRegistry registry;\n       iParameterType = iParameterType.restrictByNotNullOrUndefined();\n       if (iParameterType.isTemplateType()) {\n         // Find the actual type of this argument.\n-        if (i + 1 >= childCount) {\n-          // TypeCheck#visitParameterList will warn so we bail.\n-          return;\n-        }\n-        Node iArgument = n.getChildAtIndex(i + 1);\n-        JSType iArgumentType = getJSType(iArgument);\n-        if (iArgumentType != null) {\n-          iArgumentType = iArgumentType.restrictByNotNullOrUndefined();\n+        JSType iArgumentType = null;\n+        boolean foundTemplateTypeArgument = false;\n+        if (i + 1 < childCount) {\n+          foundTemplateTypeArgument = true;\n+          Node iArgument = n.getChildAtIndex(i + 1);\n+          iArgumentType = getJSType(iArgument).restrictByNotNullOrUndefined();\n           if (!(iArgumentType instanceof ObjectType)) {\n             compiler.report(\n                 JSError.make(NodeUtil.getSourceName(iArgument), iArgument,\n-                             TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n+                    TEMPLATE_TYPE_NOT_OBJECT_TYPE));\n             return;\n           }\n-\n-          // Find the parameter whose type is function(this: T, ...)\n-          boolean foundTemplateTypeOfThisParameter = false;\n-          int j = 0;\n-          for (Node jParameter : fnType.getParameters()) {\n-            JSType jParameterType = getJSType(jParameter);\n-            if (jParameterType instanceof FunctionType) {\n-              FunctionType jParameterFnType = (FunctionType) jParameterType;\n-              if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n-                foundTemplateTypeOfThisParameter = true;\n-                // Find the actual type of this argument.\n-                if (j + 1 >= childCount) {\n-                  // TypeCheck#visitParameterList will warn so we bail.\n-                  return;\n-                }\n-                Node jArgument = n.getChildAtIndex(j + 1);\n-                JSType jArgumentType = getJSType(jArgument);\n-                if (jArgument.getType() == Token.FUNCTION &&\n-                    jArgumentType instanceof FunctionType) {\n+        }\n+\n+        // Find the parameter whose type is function(this: T, ...)\n+        boolean foundTemplateTypeOfThisParameter = false;\n+        int j = 0;\n+        for (Node jParameter : fnType.getParameters()) {\n+          JSType jParameterType = getJSType(jParameter);\n+          if (jParameterType instanceof FunctionType) {\n+            FunctionType jParameterFnType = (FunctionType) jParameterType;\n+            if (jParameterFnType.getTypeOfThis().equals(iParameterType)) {\n+              foundTemplateTypeOfThisParameter = true;\n+              // Find the actual type of the this argument.\n+              if (j + 1 >= childCount) {\n+                // TypeCheck#visitParameterList will warn so we bail.\n+                return;\n+              }\n+              Node jArgument = n.getChildAtIndex(j + 1);\n+              JSType jArgumentType = getJSType(jArgument);\n+              if (jArgument.getType() == Token.FUNCTION &&\n+                  jArgumentType instanceof FunctionType) {\n+                if (foundTemplateTypeArgument) {\n                   // If it's an function expression, update the type of this\n                   // using the actual type of T.\n-                  FunctionType jArgumentFnType =(FunctionType) jArgumentType;\n+                  FunctionType jArgumentFnType = (FunctionType) jArgumentType;\n                   if (jArgumentFnType.getTypeOfThis().isUnknownType()) {\n                     // The new type will be picked up when we traverse the inner\n                     // function.\n                         registry.createFunctionTypeWithNewThisType(\n                             jArgumentFnType, (ObjectType) iArgumentType));\n                   }\n+                } else {\n+                  // Warn if the anonymous function literal references this.\n+                  if (NodeUtil.referencesThis(\n+                          NodeUtil.getFunctionBody(jArgument))) {\n+                    compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n+                        FUNCTION_LITERAL_UNDEFINED_THIS));\n+                  }\n                 }\n-                // TODO(user): Add code to TypeCheck to check that the\n-                // types of the arguments match.\n               }\n+              // TODO(user): Add code to TypeCheck to check that the\n+              // types of the arguments match.\n             }\n-            j++;\n           }\n-\n-          if (!foundTemplateTypeOfThisParameter) {\n-            Node source = fnType.getSource();\n-            compiler.report(JSError.make(NodeUtil.getSourceName(source), source,\n-                                         TEMPLATE_TYPE_OF_THIS_EXPECTED));\n-            return;\n-          }\n+          j++;\n+        }\n+\n+        if (!foundTemplateTypeOfThisParameter) {\n+          Node source = fnType.getSource();\n+          compiler.report(JSError.make(NodeUtil.getSourceName(source), source,\n+              TEMPLATE_TYPE_OF_THIS_EXPECTED));\n+          return;\n         }\n       }\n       i++;\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         FunctionTypeBuilder.TEMPLATE_TYPE_EXPECTED.format(), true);\n   }\n \n+  public void testFunctionLiteralUndefinedThisArgument() throws Exception {\n+    testTypes(\"\"\n+        + \"/**\\n\"\n+        + \" * @param {function(this:T, ...)} fn\\n\"\n+        + \" * @param {T} opt_obj\\n\"\n+        + \" * @template T\\n\"\n+        + \" */\\n\"\n+        + \"function baz(fn, opt_obj) {}\\n\"\n+        + \"baz(function() { this; });\",\n+        \"Function literal argument refers to undefined this argument\");\n+  }\n+\n+  public void testFunctionLiteralDefinedThisArgument() throws Exception {\n+    testTypes(\"\"\n+        + \"/**\\n\"\n+        + \" * @param {function(this:T, ...)} fn\\n\"\n+        + \" * @param {T} opt_obj\\n\"\n+        + \" * @template T\\n\"\n+        + \" */\\n\"\n+        + \"function baz(fn, opt_obj) {}\\n\"\n+        + \"baz(function() { this; }, {});\");\n+  }\n+\n   public void testActiveXObject() throws Exception {\n     testTypes(\n         \"/** @type {Object} */ var x = new ActiveXObject();\" +", "timestamp": 1284496008, "metainfo": ""}