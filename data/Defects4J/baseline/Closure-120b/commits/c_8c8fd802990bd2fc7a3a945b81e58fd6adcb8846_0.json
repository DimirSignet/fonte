{"sha": "8c8fd802990bd2fc7a3a945b81e58fd6adcb8846", "log": "Disable conditional code warning for consistentIdGenerator functions  R=johnlenz,kai DELTA=13  (8 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2836   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n+++ b/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n         return;\n       }\n \n-      for (Node ancestor : n.getAncestors()) {\n-        if (NodeUtil.isControlStructure(ancestor)) {\n-          // Warn about conditional calls.\n-          compiler.report(t.makeError(n, CONDITIONAL_ID_GENERATOR_CALL));\n-          return;\n+      if (!consistent) {\n+        for (Node ancestor : n.getAncestors()) {\n+          if (NodeUtil.isControlStructure(ancestor)) {\n+            // Warn about conditional calls.\n+            compiler.report(t.makeError(n, CONDITIONAL_ID_GENERATOR_CALL));\n+            return;\n+          }\n         }\n       }\n \n--- a/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n     testSame(new String[] {\"/** @idGenerator \\n @consistentIdGenerator \\n*/\" +\n                            \"var id = function() {}; \"},\n         ReplaceIdGenerators.CONFLICTING_GENERATOR_TYPE);\n+\n+    test(\"/** @consistentIdGenerator */ var id = function() {};\" +\n+        \"if (x) {foo.bar = id('foo_bar')}\",\n+\n+        \"var id = function() {};\" +\n+        \"if (x) {foo.bar = 'a'}\");\n   }\n }", "timestamp": 1311983444, "metainfo": ""}