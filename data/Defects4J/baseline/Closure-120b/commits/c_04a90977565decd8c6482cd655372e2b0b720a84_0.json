{"sha": "04a90977565decd8c6482cd655372e2b0b720a84", "log": "fix a subtle bug i introduced in the last proplist cl  R=johnlenz DELTA=60  (53 added, 3 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2404   ", "commit": "\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n   private interface PropListItem {\n     int getType();\n     PropListItem getNext();\n-    void setNext(PropListItem next);\n+    PropListItem chain(PropListItem next);\n     Object getObjectValue();\n     int getIntValue();\n   }\n       implements PropListItem, Serializable {\n     private static final long serialVersionUID = 1L;\n \n-    private PropListItem next;\n+    private final PropListItem next;\n     private final int propType;\n \n     AbstractPropListItem(int propType, PropListItem next) {\n       return next;\n     }\n \n-    public void setNext(PropListItem next) {\n-      this.next = next;\n-    }\n+    public abstract PropListItem chain(PropListItem next);\n   }\n \n   // A base class for Object storing props\n     public String toString() {\n       return objectValue == null ? \"null\" : objectValue.toString();\n     }\n+\n+    @Override\n+    public PropListItem chain(PropListItem next) {\n+      return new ObjectPropListItem(getType(), objectValue, next);\n+    }\n   }\n \n   // A base class for int storing props\n     @Override\n     public String toString() {\n       return String.valueOf(intValue);\n+    }\n+\n+    @Override\n+    public PropListItem chain(PropListItem next) {\n+      return new IntPropListItem(getType(), intValue, next);\n     }\n   }\n \n     } else {\n       PropListItem result = removeProp(item.getNext(), propType);\n       if (result != item.getNext()) {\n-        item.setNext(result);\n-        return item;\n+        return item.chain(result);\n       } else {\n         return item;\n       }\n \n   // ==========================================================================\n   // Accessors\n+\n+  PropListItem getPropListHeadForTesting() {\n+    return propListHead;\n+  }\n \n   public Node getParent() {\n     return parent;\n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n     assertTrue(nodeClone.getBooleanProp(Node.IS_CONSTANT_NAME));\n   }\n \n+  public void testSharedProps1() {\n+    Node n = getNode(\"A\");\n+    n.putIntProp(Node.SIDE_EFFECT_FLAGS, 5);\n+    Node m = new Node(Token.TRUE);\n+    m.clonePropsFrom(n);\n+    assertEquals(m.getPropListHeadForTesting(), n.getPropListHeadForTesting());\n+    assertEquals(5, n.getIntProp(Node.SIDE_EFFECT_FLAGS));\n+    assertEquals(5, m.getIntProp(Node.SIDE_EFFECT_FLAGS));\n+  }\n+\n+  public void testSharedProps2() {\n+    Node n = getNode(\"A\");\n+    n.putIntProp(Node.SIDE_EFFECT_FLAGS, 5);\n+    Node m = new Node(Token.TRUE);\n+    m.clonePropsFrom(n);\n+\n+    n.putIntProp(Node.SIDE_EFFECT_FLAGS, 6);\n+    assertEquals(6, n.getIntProp(Node.SIDE_EFFECT_FLAGS));\n+    assertEquals(5, m.getIntProp(Node.SIDE_EFFECT_FLAGS));\n+    assertFalse(\n+        m.getPropListHeadForTesting() == n.getPropListHeadForTesting());\n+\n+    m.putIntProp(Node.SIDE_EFFECT_FLAGS, 7);\n+    assertEquals(6, n.getIntProp(Node.SIDE_EFFECT_FLAGS));\n+    assertEquals(7, m.getIntProp(Node.SIDE_EFFECT_FLAGS));\n+  }\n+\n+  public void testSharedProps3() {\n+    Node n = getNode(\"A\");\n+    n.putIntProp(Node.SIDE_EFFECT_FLAGS, 2);\n+    n.putIntProp(Node.INCRDECR_PROP, 3);\n+    Node m = new Node(Token.TRUE);\n+    m.clonePropsFrom(n);\n+\n+    n.putIntProp(Node.SIDE_EFFECT_FLAGS, 4);\n+    assertEquals(4, n.getIntProp(Node.SIDE_EFFECT_FLAGS));\n+    assertEquals(2, m.getIntProp(Node.SIDE_EFFECT_FLAGS));\n+  }\n+\n   public void testBooleanProp() {\n     Node n = getNode(\"a\");\n ", "timestamp": 1308874620, "metainfo": ""}