{"sha": "c6fadd880c6ec05975e13e22c3a3ecad2cb76a26", "log": "sort deps for real  R=johnlenz DELTA=55  (47 added, 1 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3965   ", "commit": "\n--- a/src/com/google/javascript/jscomp/JSModuleGraph.java\n+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n-import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.LinkedHashMultimap;\n import com.google.common.collect.LinkedListMultimap;\n \n     SortedDependencies<CompilerInput> sorter =\n         new SortedDependencies<CompilerInput>(inputs);\n-    Set<CompilerInput> entryPointInputs =\n-        Sets.newLinkedHashSet(\n-            depOptions.shouldDropMoochers() ?\n-            ImmutableList.<CompilerInput>of() :\n-            sorter.getInputsWithoutProvides());\n-    for (String entryPoint : depOptions.getEntryPoints()) {\n-      entryPointInputs.add(sorter.getInputProviding(entryPoint));\n+    Set<CompilerInput> entryPointInputs = Sets.newLinkedHashSet();\n+    if (depOptions.shouldPruneDependencies()) {\n+      if (!depOptions.shouldDropMoochers()) {\n+        entryPointInputs.addAll(sorter.getInputsWithoutProvides());\n+      }\n+\n+      for (String entryPoint : depOptions.getEntryPoints()) {\n+        entryPointInputs.add(sorter.getInputProviding(entryPoint));\n+      }\n+    } else {\n+      entryPointInputs.addAll(inputs);\n     }\n \n     // The order of inputs, sorted independently of modules.\n--- a/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n+++ b/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n \n   private static <T> List<T> topologicalStableSort(\n       List<T> items, Multimap<T, T> deps) {\n+    if (items.size() == 0) {\n+      // Priority queue blows up if we give it a size of 0. Since we need\n+      // to special case this either way, just bail out.\n+      return Lists.newArrayList();\n+    }\n+\n     final Map<T, Integer> originalIndex = Maps.newHashMap();\n     for (int i = 0; i < items.size(); i++) {\n       originalIndex.put(items.get(i), i);\n--- a/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n+++ b/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n         sourceNames(results));\n   }\n \n+  public void testManageDependencies4() throws Exception {\n+    setUpManageDependenciesTest();\n+    DependencyOptions depOptions = new DependencyOptions();\n+    depOptions.setDependencySorting(true);\n+\n+    List<CompilerInput> inputs = Lists.newArrayList();\n+\n+    // Add the inputs in a random order.\n+    inputs.addAll(E.getInputs());\n+    inputs.addAll(B.getInputs());\n+    inputs.addAll(A.getInputs());\n+    inputs.addAll(C.getInputs());\n+\n+    List<CompilerInput> results = graph.manageDependencies(\n+        depOptions, inputs);\n+\n+    assertInputs(A, \"a1\", \"a2\", \"a3\");\n+    assertInputs(B, \"b1\", \"b2\");\n+    assertInputs(C, \"c1\", \"c2\");\n+    assertInputs(E, \"e1\", \"e2\");\n+\n+    assertEquals(\n+        Lists.newArrayList(\n+            \"a1\", \"a2\", \"a3\", \"b1\", \"b2\", \"c1\", \"c2\", \"e1\", \"e2\"),\n+        sourceNames(results));\n+  }\n+\n+  public void testNoFiles() throws Exception {\n+    DependencyOptions depOptions = new DependencyOptions();\n+    depOptions.setDependencySorting(true);\n+\n+    List<CompilerInput> inputs = Lists.newArrayList();\n+    List<CompilerInput> results = graph.manageDependencies(\n+        depOptions, inputs);\n+    assertTrue(results.isEmpty());\n+  }\n+\n   private List<CompilerInput> setUpManageDependenciesTest() {\n     List<CompilerInput> inputs = Lists.newArrayList();\n ", "timestamp": 1323820768, "metainfo": ""}