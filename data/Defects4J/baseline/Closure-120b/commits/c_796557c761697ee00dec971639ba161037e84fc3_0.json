{"sha": "796557c761697ee00dec971639ba161037e84fc3", "log": "Introduce a type relationship visitor, and a \"can cast\" relationship.  R=nicksantos DELTA=387  (387 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5879   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/AllType.java\n+++ b/src/com/google/javascript/rhino/jstype/AllType.java\n     return visitor.caseAllType();\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseAllType(that);\n+  }\n+\n   @Override\n   public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n     return BooleanLiteralSet.BOTH;\n--- a/src/com/google/javascript/rhino/jstype/ArrowType.java\n+++ b/src/com/google/javascript/rhino/jstype/ArrowType.java\n     throw new UnsupportedOperationException();\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n   @Override\n   public BooleanLiteralSet getPossibleToBooleanOutcomes() {\n     return BooleanLiteralSet.TRUE;\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/CanCastToVisitor.java\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   John Lenz\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+/**\n+ * A \"can cast to\" relationship visitor.\n+ */\n+class CanCastToVisitor implements RelationshipVisitor<Boolean>{\n+\n+  @Override\n+  public Boolean caseUnknownType(JSType thisType, JSType thatType) {\n+    return true;\n+  }\n+\n+  @Override\n+  public Boolean caseNoType(JSType thatType) {\n+    return true;\n+  }\n+\n+  @Override\n+  public Boolean caseNoObjectType(JSType thatType) {\n+    return true; // TODO(johnlenz): restrict to objects\n+  }\n+\n+  @Override\n+  public Boolean caseAllType(JSType thatType) {\n+    return true;\n+  }\n+\n+  boolean canCastToUnion(JSType thisType, UnionType unionType) {\n+    for (JSType type : unionType.getAlternates()) {\n+      if (type.isVoidType() || type.isNullType()) {\n+        // allow cast from null or undefined to nullable/voidable types.\n+        return thisType.isEquivalentTo(type);\n+      } else {\n+        if (thisType.visit(this, type)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  boolean canCastToFunction(JSType thisType, FunctionType functionType) {\n+    if (thisType.isFunctionType()) {\n+      // TODO(johnlenz): visit function parts\n+      return true;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  private boolean isInterface(JSType type) {\n+    ObjectType objType = type.toObjectType();\n+    if (objType != null) {\n+      JSType constructor = objType.getConstructor();\n+      return constructor != null && constructor.isInterface();\n+    }\n+    return false;\n+  }\n+\n+  Boolean castCastToHelper(JSType thisType, JSType thatType) {\n+    if (thatType.isUnknownType()\n+        || thatType.isAllType()\n+        || thatType.isNoObjectType() // TODO(johnlenz): restrict to objects\n+        || thatType.isNoType()) {\n+      return true;\n+    } else if (thisType.isRecordType() || thatType.isRecordType()) {\n+      return true;  // TODO(johnlenz): are there any misuses we can catch?\n+    } else if (isInterface(thisType) || isInterface(thatType)) {\n+      return true;  // TODO(johnlenz): are there any misuses we can catch?\n+    } else if (thatType.isEnumElementType()) {\n+      return thisType.visit(this,\n+          thatType.toMaybeEnumElementType().getPrimitiveType());\n+    } else if (thatType.isUnionType()) {\n+      return canCastToUnion(thisType, thatType.toMaybeUnionType());\n+    } else if (thatType.isFunctionType()) {\n+      return canCastToFunction(thisType, thatType.toMaybeFunctionType());\n+    } else if (thatType.isParameterizedType()) {\n+      // TODO(johnlenz): once the templated type work is finished,\n+      // restrict the type parameters.\n+      return thisType.visit(this,\n+          thatType.toMaybeParameterizedType().getReferencedTypeInternal());\n+    }\n+\n+    return thisType.isSubtype(thatType) || thatType.isSubtype(thisType);\n+  }\n+\n+  @Override\n+  public Boolean caseValueType(ValueType thisType, JSType thatType) {\n+    return castCastToHelper(thisType, thatType);\n+  }\n+\n+  @Override\n+  public Boolean caseObjectType(ObjectType thisType, JSType thatType) {\n+    return castCastToHelper(thisType, thatType);\n+  }\n+\n+  @Override\n+  public Boolean caseFunctionType(FunctionType thisType, JSType thatType) {\n+    return castCastToHelper(thisType, thatType);\n+  }\n+\n+  @Override\n+  public Boolean caseUnionType(UnionType thisType, JSType thatType) {\n+    for (JSType type : thisType.getAlternates()) {\n+      if (type.isVoidType() || type.isNullType()) {\n+        // Don't allow if the only match between the types is null or void,\n+        // otherwise any nullable type would be castable to any other nullable\n+        // type and we don't want that.\n+      } else {\n+        if (type.visit(this, thatType)) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public Boolean caseParameterizedType(\n+      ParameterizedType thisType, JSType thatType) {\n+    // TODO(johnlenz): once the templated type work is finished,\n+    // restrict the type parameters.\n+    return thisType.getReferencedTypeInternal().visit(this, thatType);\n+  }\n+\n+  @Override\n+  public Boolean caseTemplateType(TemplateType thisType, JSType thatType) {\n+    return true;\n+  }\n+\n+  @Override\n+  public Boolean caseEnumElementType(\n+      EnumElementType typeType, JSType thatType) {\n+    return typeType.getPrimitiveType().visit(this, thatType);\n+  }\n+}\n--- a/src/com/google/javascript/rhino/jstype/EnumElementType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumElementType.java\n     return visitor.caseEnumElementType(this);\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseEnumElementType(this, that);\n+  }\n+\n   @Override\n   boolean defineProperty(String propertyName, JSType type,\n       boolean inferred, Node propertyNode) {\n--- a/src/com/google/javascript/rhino/jstype/EnumType.java\n+++ b/src/com/google/javascript/rhino/jstype/EnumType.java\n     return visitor.caseObjectType(this);\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseObjectType(this, that);\n+  }\n+\n   @Override\n   public FunctionType getConstructor() {\n     return null;\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n     return visitor.caseFunctionType(this);\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseFunctionType(this, that);\n+  }\n+\n   /**\n    * Gets the type of instance of this function.\n    * @throws IllegalStateException if this function is not a constructor\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n   private final ImmutableList<JSType> templatizedTypes;\n \n   private boolean inTemplatedCheckVisit = false;\n+  private static final CanCastToVisitor CAN_CAST_TO_VISITOR =\n+      new CanCastToVisitor();\n \n   public static final String UNKNOWN_NAME =\n       \"Unknown class name\";\n    */\n   public boolean canBeCalled() {\n     return false;\n+  }\n+\n+  /**\n+   * Tests whether values of {@code this} type can be safely assigned\n+   * to values of {@code that} type.<p>\n+   *\n+   * The default implementation verifies that {@code this} is a subtype\n+   * of {@code that}.<p>\n+   */\n+  public boolean canCastTo(JSType that) {\n+    return this.visit(CAN_CAST_TO_VISITOR, that);\n   }\n \n   /**\n   public abstract <T> T visit(Visitor<T> visitor);\n \n   /**\n+   * Visit the types with the given visitor.\n+   * @see com.google.javascript.rhino.jstype.RelationshipVisitor\n+   * @return the value returned by the visitor\n+   */\n+  abstract <T> T visit(RelationshipVisitor<T> visitor, JSType that);\n+\n+  /**\n    * Force this type to resolve, even if the registry is in a lazy\n    * resolving mode.\n    * @see #resolve\n--- a/src/com/google/javascript/rhino/jstype/NoObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/NoObjectType.java\n     return visitor.caseNoObjectType();\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseNoObjectType(that);\n+  }\n+\n   @Override\n   String toStringHelper(boolean forAnnotations) {\n     return forAnnotations ? \"?\" : \"NoObject\";\n--- a/src/com/google/javascript/rhino/jstype/NoType.java\n+++ b/src/com/google/javascript/rhino/jstype/NoType.java\n     return visitor.caseNoType();\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseNoType(that);\n+  }\n+\n   @Override\n   String toStringHelper(boolean forAnnotations) {\n     return forAnnotations ? \"?\" : \"None\";\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n   @Override\n   public <T> T visit(Visitor<T> visitor) {\n     return visitor.caseObjectType(this);\n+  }\n+\n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseObjectType(this, that);\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n+++ b/src/com/google/javascript/rhino/jstype/ParameterizedType.java\n     return visitor.caseParameterizedType(this);\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseParameterizedType(this, that);\n+  }\n+\n   @Override\n   public ParameterizedType toMaybeParameterizedType() {\n     return this;\n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n     return referencedType.visit(visitor);\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return referencedType.visit(visitor, that);\n+  }\n+\n   @Override\n   JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope) {\n     setReferencedType(referencedType.resolve(t, scope));\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/RelationshipVisitor.java\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   John Lenz\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+\n+\n+/**\n+ * A type relationship visitor.<p>\n+ *\n+ * This code will calculate a specific value of type {@code T} from\n+ * two types based on its structure.\n+ *\n+ * @author johnlenz@google.com (John Lenz)\n+ */\n+interface RelationshipVisitor<T> {\n+\n+  /**\n+   * Unknown type's case.\n+   */\n+  T caseUnknownType(JSType thisType, JSType thatType);\n+\n+  /**\n+   * Bottom type's case.\n+   */\n+  T caseNoType(JSType thatType);\n+\n+  /**\n+   * Bottom Object type's case.\n+   */\n+  T caseNoObjectType(JSType thatType);\n+\n+  /**\n+   * All type's case.\n+   */\n+  T caseAllType(JSType thatType);\n+\n+  /**\n+   * Value type's case.\n+   */\n+  T caseValueType(ValueType thisType, JSType thatType);\n+\n+  /**\n+   * Object type's case.\n+   */\n+  T caseObjectType(ObjectType thisType, JSType thatType);\n+\n+  /**\n+   * Function type's case.\n+   */\n+  T caseFunctionType(FunctionType thisType, JSType thatType);\n+\n+  /**\n+   * Union type's case.\n+   */\n+  T caseUnionType(UnionType thisType, JSType thatType);\n+\n+  /**\n+   * Parameterized type's case.\n+   */\n+  T caseParameterizedType(ParameterizedType thisType, JSType thatType);\n+\n+  /**\n+   * Template type's case.\n+   */\n+  T caseTemplateType(TemplateType thisType, JSType thatType);\n+\n+  /**\n+   * Enum element type's case.\n+   */\n+  T caseEnumElementType(EnumElementType typeType, JSType thatType);\n+\n+}\n--- a/src/com/google/javascript/rhino/jstype/TemplateType.java\n+++ b/src/com/google/javascript/rhino/jstype/TemplateType.java\n   public <T> T visit(Visitor<T> visitor) {\n     return visitor.caseTemplateType(this);\n   }\n+\n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseTemplateType(this, that);\n+  }\n }\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n   @Override\n   public <T> T visit(Visitor<T> visitor) {\n     return visitor.caseUnionType(this);\n+  }\n+\n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseUnionType(this, that);\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/UnknownType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnknownType.java\n     return visitor.caseUnknownType();\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseUnknownType(this, that);\n+  }\n+\n   @Override\n   String toStringHelper(boolean forAnnotations) {\n     return getReferenceName();\n--- a/src/com/google/javascript/rhino/jstype/ValueType.java\n+++ b/src/com/google/javascript/rhino/jstype/ValueType.java\n     return true;\n   }\n \n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseValueType(this, that);\n+  }\n }", "timestamp": 1354051992, "metainfo": ""}