{"sha": "0eb41cabc9ba5463e3a34ea2fd900a8dd54f2136", "log": "Replace @classTemplate with @template for declaring templated types and remove support for @classTemplate ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44570631", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n   private boolean isInterface = false;\n   private Node parametersNode = null;\n   private ImmutableList<TemplateType> templateTypeNames = ImmutableList.of();\n+  // TODO(johnlenz): verify we want both template and class template lists instead of a unified\n+  // list.\n   private ImmutableList<TemplateType> classTemplateTypeNames = ImmutableList.of();\n \n   static final DiagnosticType EXTENDS_WITHOUT_TYPEDEF = DiagnosticType.warning(\n   static final DiagnosticType CONSTRUCTOR_REQUIRED =\n       DiagnosticType.warning(\"JSC_CONSTRUCTOR_REQUIRED\",\n                              \"{0} used without @constructor for {1}\");\n-\n-  static final DiagnosticType CLASS_TEMPLATE_WITHOUT_CONSTRUCTOR =\n-      DiagnosticType.warning(\n-          \"JSC_CLASS_TEMPLATE_WITHOUT_CONSTRUCTOR\",\n-          \"@classTemplate used without @constructor or @interface for {0}\");\n \n   static final DiagnosticType VAR_ARGS_MUST_BE_LAST = DiagnosticType.warning(\n       \"JSC_VAR_ARGS_MUST_BE_LAST\",\n \n       // Class template types, which can be used in the scope of a constructor\n       // definition.\n-      ImmutableList<String> typeParameters = info.getClassTemplateTypeNames();\n+      ImmutableList<String> typeParameters = info.getTemplateTypeNames();\n       if (!typeParameters.isEmpty()) {\n         if (isConstructor || isInterface) {\n           ImmutableList.Builder<TemplateType> builder = ImmutableList.builder();\n           }\n           classTemplateTypeNames = builder.build();\n           typeRegistry.setTemplateTypeNames(classTemplateTypeNames);\n-        } else {\n-          reportWarning(CLASS_TEMPLATE_WITHOUT_CONSTRUCTOR,\n-              formatFnName());\n         }\n       }\n \n--- a/src/com/google/javascript/jscomp/parsing/Annotation.java\n+++ b/src/com/google/javascript/jscomp/parsing/Annotation.java\n   STRUCT,\n   SUPPRESS,\n   TEMPLATE,\n-  CLASS_TEMPLATE,\n   THIS,\n   THROWS,\n   TYPE,\n       put(\"struct\", Annotation.STRUCT).\n       put(\"suppress\", Annotation.SUPPRESS).\n       put(\"template\", Annotation.TEMPLATE).\n-      put(\"classTemplate\", Annotation.CLASS_TEMPLATE).\n       put(\"this\", Annotation.THIS).\n       put(\"throws\", Annotation.THROWS).\n       put(\"type\", Annotation.TYPE).\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n           }\n \n           token = templateInfo.token;\n-          return token;\n-        }\n-\n-        case CLASS_TEMPLATE: {\n-          ExtractionInfo classTemplateInfo = extractSingleLineBlock();\n-          List<String> names = Lists.newArrayList(\n-              Splitter.on(',')\n-                  .trimResults()\n-                  .split(classTemplateInfo.string));\n-\n-          if (names.size() == 0 || names.get(0).length() == 0) {\n-            parser.addTypeWarning(\n-                \"msg.jsdoc.classtemplate.missing.type.name\",\n-                stream.getLineno(), stream.getCharno());\n-          } else if (!jsdocBuilder.recordClassTemplateTypeNames(names)) {\n-            parser.addTypeWarning(\n-                \"msg.jsdoc.classtemplate.at.most.once\",\n-                stream.getLineno(), stream.getCharno());\n-          }\n-\n-          token = classTemplateInfo.token;\n           return token;\n         }\n \n--- a/src/com/google/javascript/rhino/JSDocInfo.java\n+++ b/src/com/google/javascript/rhino/JSDocInfo.java\n     Map<String, JSTypeExpression> parameters = null;\n     List<JSTypeExpression> thrownTypes = null;\n     ImmutableList<String> templateTypeNames = null;\n-    ImmutableList<String> classTemplateTypeNames = null;\n \n     // Other information\n     String description = null;\n   }\n \n   /**\n-   * Declares a template type name. Template type names are described using the\n-   * {@code @template} annotation.\n-   *\n-   * @param templateTypeNames the template type name.\n-   */\n-  boolean declareClassTemplateTypeNames(List<String> templateTypeNames) {\n-    lazyInitInfo();\n-\n-    if (info.classTemplateTypeNames != null) {\n-      return false;\n-    }\n-\n-    info.classTemplateTypeNames = ImmutableList.copyOf(templateTypeNames);\n-    return true;\n-  }\n-\n-  /**\n    * Declares that the method throws a given type.\n    *\n    * @param jsType The type that can be thrown by the method.\n       return ImmutableList.of();\n     }\n     return info.templateTypeNames;\n-  }\n-\n-  public ImmutableList<String> getClassTemplateTypeNames() {\n-    if (info == null || info.classTemplateTypeNames == null) {\n-      return ImmutableList.of();\n-    }\n-    return info.classTemplateTypeNames;\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n   }\n \n   /**\n-   * Records a template type name.\n-   *\n-   * @return {@code true} if the template type name was recorded and\n-   *     {@code false} if a template type name was already defined.\n-   */\n-  public boolean recordClassTemplateTypeNames(List<String> names) {\n-    if (currentInfo.declareClassTemplateTypeNames(names)) {\n-      populated = true;\n-      return true;\n-    } else {\n-      return false;\n-    }\n-  }\n-\n-\n-  /**\n    * Records a thrown type.\n    */\n   public boolean recordThrowType(JSTypeExpression type) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   }\n \n   public void testConstructorClassTemplate() throws Exception {\n-    testTypes(\"/** @constructor \\n @classTemplate S,T */ function A() {}\\n\");\n-  }\n-\n-  // TODO(johnlenz): Check for bad usage\n-  public void disable_testBadClassTemplate() throws Exception {\n-    testTypes(\"/** @classTemplate T */function A() {}\",\n-        \"Bad type annotation. Unknown type nonExistent\");\n+    testTypes(\"/** @constructor \\n @template S,T */ function A() {}\\n\");\n   }\n \n   public void testInterfaceExtends() throws Exception {\n    */\n   public void testInterfaceInheritanceCheck14() throws Exception {\n     testTypes(\n-        \"/** @interface\\n @classTemplate T */function A() {};\" +\n+        \"/** @interface\\n @template T */function A() {};\" +\n         \"/** @desc description\\n @return {T} */A.prototype.foo = function() {};\" +\n-        \"/** @interface\\n @classTemplate U\\n @extends {A.<U>} */function B() {};\" +\n+        \"/** @interface\\n @template U\\n @extends {A.<U>} */function B() {};\" +\n         \"/** @desc description\\n @return {U} */B.prototype.bar = function() {};\" +\n         \"/** @constructor\\n @implements {B.<string>} */function C() {};\" +\n         \"/** @return {string}\\n @override */C.prototype.foo = function() {};\" +\n    */\n   public void testInterfaceInheritanceCheck15() throws Exception {\n     testTypes(\n-        \"/** @interface\\n @classTemplate T */function A() {};\" +\n+        \"/** @interface\\n @template T */function A() {};\" +\n         \"/** @desc description\\n @return {T} */A.prototype.foo = function() {};\" +\n-        \"/** @interface\\n @classTemplate U\\n @extends {A.<U>} */function B() {};\" +\n+        \"/** @interface\\n @template U\\n @extends {A.<U>} */function B() {};\" +\n         \"/** @desc description\\n @return {U} */B.prototype.bar = function() {};\" +\n-        \"/** @constructor\\n @classTemplate V\\n @implements {B.<V>}\\n */function C() {};\" +\n+        \"/** @constructor\\n @template V\\n @implements {B.<V>}\\n */function C() {};\" +\n         \"/** @return {V}\\n @override */C.prototype.foo = function() {};\" +\n         \"/** @return {V}\\n @override */C.prototype.bar = function() {};\");\n   }\n    */\n   public void testInterfacePropertyNotImplemented3() throws Exception {\n     testTypes(\n-        \"/** @interface\\n @classTemplate T */function Int() {};\" +\n+        \"/** @interface\\n @template T */function Int() {};\" +\n         \"/** @desc description\\n @return {T} */Int.prototype.foo = function() {};\" +\n         \"/** @constructor\\n @implements {Int.<string>} */function Foo() {};\" +\n         \"/** @return {number}\\n @override */Foo.prototype.foo = function() {};\",\n   public void testTemplateType8() throws Exception {\n     testTypes(\n         \"/** @constructor \\n\" +\n-        \" * @classTemplate S,T\\n\" +\n+        \" * @template S,T\\n\" +\n         \" */\\n\" +\n         \"function Bar() {}\\n\" +\n         \"/**\" +\n     // verify interface type parameters are recognized.\n     testTypes(\n         \"/** @interface \\n\" +\n-        \" * @classTemplate S,T\\n\" +\n+        \" * @template S,T\\n\" +\n         \" */\\n\" +\n         \"function Bar() {}\\n\" +\n         \"/**\" +\n     // the same type with any other type parameter.\n     testTypes(\n         \"/** @constructor \\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function Bar() {}\\n\" +\n         \"\\n\" +\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {};\\n\" +\n         \"\" +\n         \"/** @const */ var ns = {};\" +\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"ns.C = function() {};\\n\" +\n         \"\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {\\n\" +\n         \"  /** @type {T} */\\n\" +\n         \"/** @const */ var ns = {};\" +\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"ns.C = function() {\\n\" +\n         \"  /** @type {T} */\\n\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {\\n\" +\n         \"};\\n\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {\\n\" +\n         \"};\\n\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {};\\n\" +\n         \"\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {};\\n\" +\n         \"\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {};\\n\" +\n         \"\" +\n         \"\" +\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T, U\\n\" +\n+        \" * @template T, U\\n\" +\n         \" * @extends {C.<U>}\" +\n         \" */\\n\" +\n         \"function D() {};\\n\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {};\\n\" +\n         \"\" +\n         \"\" +\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T, U\\n\" +\n+        \" * @template T, U\\n\" +\n         \" * @extends {C.<U>}\" +\n         \" */\\n\" +\n         \"function D() {};\\n\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {\\n\" +\n         \"  /** @type {T} */\\n\" +\n         \"\" +\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" * @extends {C}\" +\n         \" */\\n\" +\n         \"function D() {\\n\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {};\\n\" +\n         \"\" +\n         \"\" +\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T, U\\n\" +\n+        \" * @template T, U\\n\" +\n         \" * @extends {C.<U>}\" +\n         \" */\\n\" +\n         \"function D() {};\\n\" +\n     testSame(\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T\\n\" +\n+        \" * @template T\\n\" +\n         \" */\\n\" +\n         \"function C() {};\\n\" +\n         \"\" +\n         \"\" +\n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n-        \" * @classTemplate T, U\\n\" +\n+        \" * @template T, U\\n\" +\n         \" * @extends {C.<U>}\" +\n         \" */\\n\" +\n         \"function D() {};\\n\" +\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n \n   public void testParserWithTwoTemplates() {\n     parse(\"@template T,V */\");\n-  }\n-\n-  public void testParserWithClassTemplateTypeNameMissing() {\n-    parse(\"@classTemplate */\",\n-        \"Bad type annotation. @classTemplate tag missing type name\");\n-  }\n-\n-  public void testParserWithClassTemplateDuplicated() {\n-    parse(\"@classTemplate T\\n@classTemplate V */\",\n-        \"Bad type annotation. @classTemplate tag at most once\");\n-  }\n-\n-  public void testParserWithTwoClassTemplates() {\n-    parse(\"@classTemplate T,V */\");\n-  }\n-\n-  public void testParserWithClassTemplatesAndTemplate() {\n-    parse(\"@template T\\n@classTemplate T,V */\");\n   }\n \n   public void testWhitelistedNewAnnotations() {", "timestamp": 1364512789, "metainfo": ""}