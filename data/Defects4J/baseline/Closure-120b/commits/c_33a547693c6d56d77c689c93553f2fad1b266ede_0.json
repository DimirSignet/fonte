{"sha": "33a547693c6d56d77c689c93553f2fad1b266ede", "log": "format anonymous function names better. fixes issue 889  R=dimvar   Revision created by MOE tool push_codebase. MOE_MIGRATION=6127   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n     public boolean apply(JSType type) {\n       ObjectType objectType = ObjectType.cast(type);\n       if (objectType == null) {\n-        reportWarning(EXTENDS_NON_OBJECT, fnName, type.toString());\n+        reportWarning(EXTENDS_NON_OBJECT, formatFnName(), type.toString());\n         return false;\n       } else if (objectType.isEmptyType()) {\n-        reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", fnName);\n+        reportWarning(RESOLVED_TAG_EMPTY, \"@extends\", formatFnName());\n         return false;\n       } else if (objectType.isUnknownType()) {\n         if (hasMoreTagsToResolve(objectType)) {\n     this.scope = scope;\n   }\n \n+  /** Format the function name for use in warnings. */\n+  String formatFnName() {\n+    return fnName.isEmpty() ? \"<anonymous>\" : fnName;\n+  }\n+\n   /**\n    * Sets the contents of this function.\n    */\n       isInterface = info.isInterface();\n \n       if (makesStructs && !isConstructor) {\n-        reportWarning(CONSTRUCTOR_REQUIRED, \"@struct\", fnName);\n+        reportWarning(CONSTRUCTOR_REQUIRED, \"@struct\", formatFnName());\n       } else if (makesDicts && !isConstructor) {\n-        reportWarning(CONSTRUCTOR_REQUIRED, \"@dict\", fnName);\n+        reportWarning(CONSTRUCTOR_REQUIRED, \"@dict\", formatFnName());\n       }\n \n       // base type\n             baseType = (ObjectType) maybeBaseType;\n           }\n         } else {\n-          reportWarning(EXTENDS_WITHOUT_TYPEDEF, fnName);\n+          reportWarning(EXTENDS_WITHOUT_TYPEDEF, formatFnName());\n         }\n       }\n \n           }\n         } else if (isInterface) {\n           reportWarning(\n-              TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, fnName);\n+              TypeCheck.CONFLICTING_IMPLEMENTED_TYPE, formatFnName());\n         } else {\n-          reportWarning(CONSTRUCTOR_REQUIRED, \"@implements\", fnName);\n+          reportWarning(CONSTRUCTOR_REQUIRED, \"@implements\", formatFnName());\n         }\n       }\n \n     }\n \n     for (String inexistentName : allJsDocParams) {\n-      reportWarning(INEXISTANT_PARAM, inexistentName, fnName);\n+      reportWarning(INEXISTANT_PARAM, inexistentName, formatFnName());\n     }\n \n     parametersNode = builder.build();\n         }\n \n         if (!existingFn.hasEqualCallType(fnType)) {\n-          reportWarning(TYPE_REDEFINITION, fnName,\n+          reportWarning(TYPE_REDEFINITION, formatFnName(),\n               fnType.toString(), existingFn.toString());\n         }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n             \"actual parameter 1 of g does not match formal parameter\\n\" +\n             \"found   : (booool|null|string)\\n\" +\n             \"required: number\"));\n+  }\n+\n+  public void testFunctionArguments18() throws Exception {\n+    testTypes(\n+        \"function f(x) {}\" +\n+        \"f(/** @param {number} y */ (function() {}));\",\n+        \"parameter y does not appear in <anonymous>'s parameter list\");\n   }\n \n   public void testPrintFunctionName1() throws Exception {", "timestamp": 1358183929, "metainfo": ""}