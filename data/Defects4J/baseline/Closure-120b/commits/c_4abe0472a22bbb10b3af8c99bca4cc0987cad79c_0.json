{"sha": "4abe0472a22bbb10b3af8c99bca4cc0987cad79c", "log": "Add @stableIdGenerator support to jscompiler.  A couple design notes: - Behavior of existing @idGenerator and @consistentIdGenerator annotations should be the same. - Basic algorithm for the stable generator is WebSafeBase64(id.hashCode()).  That provides 2^32 id space and encodes to 6 characters.  R=johnlenz DELTA=210  (140 added, 35 deleted, 35 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5957   ", "commit": "\n--- a/src/com/google/debugging/sourcemap/Base64.java\n+++ b/src/com/google/debugging/sourcemap/Base64.java\n  * A utility class for working with Base64 values.\n  * @author johnlenz@google.com (John Lenz)\n  */\n-final class Base64 {\n+public final class Base64 {\n \n   // This is a utility class\n   private Base64() {}\n   private static final int[] BASE64_DECODE_MAP = new int[256];\n   static {\n       Arrays.fill(BASE64_DECODE_MAP, -1);\n-      for (int i = 0; i < BASE64_MAP.length(); i++)\n+      for (int i = 0; i < BASE64_MAP.length(); i++) {\n         BASE64_DECODE_MAP[BASE64_MAP.charAt(i)] = i;\n+      }\n   }\n \n   /**\n     assert (result != -1) : \"invalid char\";\n     return BASE64_DECODE_MAP[c];\n   }\n-}\n+\n+  /**\n+   * @param value an integer to base64 encode.\n+   * @return the six digit long base64 encoded value of the integer.\n+   */\n+  public static String base64EncodeInt(int value) {\n+    char[] c = new char[6];\n+    for (int i = 0; i < 5; i++) {\n+      c[i] = Base64.toBase64((value >> (26 - i * 6)) & 0x3f);\n+    }\n+    c[5] = Base64.toBase64((value << 4) & 0x3f);\n+    return new String(c);\n+  }\n+}\n--- a/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n+++ b/src/com/google/javascript/jscomp/ReplaceIdGenerators.java\n import com.google.common.collect.HashBiMap;\n import com.google.common.collect.ImmutableBiMap;\n import com.google.common.collect.Maps;\n+import com.google.debugging.sourcemap.Base64;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n import com.google.javascript.rhino.IR;\n import com.google.javascript.rhino.JSDocInfo;\n   static final DiagnosticType CONFLICTING_GENERATOR_TYPE =\n       DiagnosticType.error(\n           \"JSC_CONFLICTING_ID_GENERATOR_TYPE\",\n-          \"Id generator can only be consistent or inconsistent\");\n+          \"Id generator can only be one of consistent, inconsistent, or stable.\");\n \n   static final DiagnosticType INVALID_GENERATOR_ID_MAPPING =\n       DiagnosticType.error(\n \n   private final AbstractCompiler compiler;\n   private final Map<String, NameSupplier> nameGenerators;\n-  private final Map<String, NameSupplier> consistNameGenerators;\n   private final Map<String, Map<String, String>> consistNameMap;\n \n   private final Map<String, Map<String, String>> idGeneratorMaps;\n     this.compiler = compiler;\n     this.generatePseudoNames = generatePseudoNames;\n     nameGenerators = Maps.newLinkedHashMap();\n-    consistNameGenerators = Maps.newLinkedHashMap();\n     idGeneratorMaps = Maps.newLinkedHashMap();\n     consistNameMap = Maps.newLinkedHashMap();\n \n \n     if (idGens != null) {\n       for (String gen : idGens) {\n-        nameGenerators.put(gen, createNameSupplier(previousMap.get(gen)));\n+        nameGenerators.put(\n+            gen, createNameSupplier(RenameStrategy.INCONSISTENT, previousMap.get(gen)));\n         idGeneratorMaps.put(gen, Maps.<String, String>newLinkedHashMap());\n       }\n     }\n+  }\n+\n+  private enum RenameStrategy {\n+    CONSISTENT,\n+    INCONSISTENT,\n+    STABLE\n   }\n \n   private static interface NameSupplier {\n     String getName(String id, String name);\n+    RenameStrategy getRenameStrategy();\n   }\n \n   private static class ObfuscatedNameSuppier implements NameSupplier {\n     private final NameGenerator generator;\n     private final Map<String, String> previousMappings;\n-    public ObfuscatedNameSuppier(BiMap<String, String> previousMappings) {\n+    private RenameStrategy renameStrategy;\n+\n+    public ObfuscatedNameSuppier(\n+        RenameStrategy renameStrategy, BiMap<String, String> previousMappings) {\n       this.previousMappings = previousMappings.inverse();\n       this.generator =\n           new NameGenerator(previousMappings.keySet(), \"\", null);\n+      this.renameStrategy = renameStrategy;\n     }\n \n     @Override\n       }\n       return newName;\n     }\n+\n+    @Override\n+    public RenameStrategy getRenameStrategy() {\n+      return renameStrategy;\n+    }\n   }\n \n   private static class PseudoNameSuppier implements NameSupplier {\n     private int counter = 0;\n+    private RenameStrategy renameStrategy;\n+\n+    public PseudoNameSuppier(RenameStrategy renameStrategy) {\n+      this.renameStrategy = renameStrategy;\n+    }\n+\n     @Override\n     public String getName(String id, String name) {\n-      return name + \"$\" + counter++;\n+      if (renameStrategy == RenameStrategy.INCONSISTENT) {\n+        return name + \"$\" + counter++;\n+      }\n+      return name + \"$0\";\n+    }\n+\n+    @Override\n+    public RenameStrategy getRenameStrategy() {\n+      return renameStrategy;\n+    }\n+  }\n+\n+  private static class StableNameSupplier implements NameSupplier {\n+    @Override\n+    public String getName(String id, String name) {\n+      return Base64.base64EncodeInt(name.hashCode());\n+    }\n+    @Override\n+    public RenameStrategy getRenameStrategy() {\n+      return RenameStrategy.STABLE;\n     }\n   }\n \n   private NameSupplier createNameSupplier(\n-      BiMap<String, String> previousMappings) {\n+      RenameStrategy renameStrategy, BiMap<String, String> previousMappings) {\n     previousMappings = previousMappings != null ?\n         previousMappings :\n         ImmutableBiMap.<String, String>of();\n-    if (generatePseudoNames) {\n-      return new PseudoNameSuppier();\n+    if (renameStrategy == RenameStrategy.STABLE) {\n+      return new StableNameSupplier();\n+    } else if (generatePseudoNames) {\n+      return new PseudoNameSuppier(renameStrategy);\n     } else {\n-      return new ObfuscatedNameSuppier(previousMappings);\n+      return new ObfuscatedNameSuppier(renameStrategy, previousMappings);\n     }\n   }\n \n         return;\n       }\n \n-      if (!doc.isConsistentIdGenerator() &&\n-          !doc.isIdGenerator()) {\n-        return;\n-      }\n-\n-      if (doc.isConsistentIdGenerator() && doc.isIdGenerator()) {\n+      int numGeneratorAnnotations =\n+          (doc.isConsistentIdGenerator() ? 1 : 0) +\n+          (doc.isIdGenerator() ? 1 : 0) +\n+          (doc.isStableIdGenerator() ? 1 : 0);\n+      if (numGeneratorAnnotations == 0) {\n+        return;\n+      } else if (numGeneratorAnnotations > 1) {\n         compiler.report(t.makeError(n, CONFLICTING_GENERATOR_TYPE));\n       }\n \n         }\n       }\n \n-      // TODO(user): Error on function that has both. Or redeclartion\n-      // on the same function.\n-\n       if (doc.isConsistentIdGenerator()) {\n-        consistNameGenerators.put(\n-            name, createNameSupplier(previousMap.get(name)));\n         consistNameMap.put(name, Maps.<String, String>newLinkedHashMap());\n+        nameGenerators.put(\n+            name, createNameSupplier(RenameStrategy.CONSISTENT, previousMap.get(name)));\n+      } else if (doc.isStableIdGenerator()) {\n+        nameGenerators.put(\n+            name, createNameSupplier(RenameStrategy.STABLE, previousMap.get(name)));\n       } else {\n-        nameGenerators.put(name, createNameSupplier(previousMap.get(name)));\n+        nameGenerators.put(\n+            name, createNameSupplier(RenameStrategy.INCONSISTENT, previousMap.get(name)));\n       }\n       idGeneratorMaps.put(name, Maps.<String, String>newLinkedHashMap());\n     }\n   @Override\n   public void process(Node externs, Node root) {\n     NodeTraversal.traverse(compiler, root, new GatherGenerators());\n-    if (!nameGenerators.isEmpty() || !this.consistNameGenerators.isEmpty()) {\n+    if (!nameGenerators.isEmpty()) {\n       NodeTraversal.traverse(compiler, root, new ReplaceGenerators());\n     }\n   }\n       }\n \n       String callName = n.getFirstChild().getQualifiedName();\n-      boolean consistent = false;\n       NameSupplier nameGenerator = nameGenerators.get(callName);\n       if (nameGenerator == null) {\n-        nameGenerator = consistNameGenerators.get(callName);\n-        consistent = true;\n-      }\n-      if (nameGenerator == null) {\n-        return;\n-      }\n-\n-      if (!t.inGlobalScope() && !consistent) {\n+        return;\n+      }\n+\n+      if (!t.inGlobalScope() &&\n+          nameGenerator.getRenameStrategy() == RenameStrategy.INCONSISTENT) {\n         // Warn about calls not in the global scope.\n         compiler.report(t.makeError(n, NON_GLOBAL_ID_GENERATOR_CALL));\n         return;\n       }\n \n-      if (!consistent) {\n+      if (nameGenerator.getRenameStrategy() == RenameStrategy.INCONSISTENT) {\n         for (Node ancestor : n.getAncestors()) {\n           if (NodeUtil.isControlStructure(ancestor)) {\n             // Warn about conditional calls.\n       String rename = null;\n \n       String name = id.getString();\n-      String instanceId = getIdForGeneratorNode(consistent, id);\n-      if (consistent) {\n+      String instanceId = getIdForGeneratorNode(\n+          nameGenerator.getRenameStrategy() == RenameStrategy.CONSISTENT, id);\n+      if (nameGenerator.getRenameStrategy() == RenameStrategy.CONSISTENT) {\n         Map<String, String> entry = consistNameMap.get(callName);\n         rename = entry.get(instanceId);\n         if (rename == null) {\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n    *     {@code false} if it was already recorded\n    */\n   public boolean recordConsistentIdGenerator() {\n-    if (!currentInfo.isConsistentIdGenerator() &&\n-        !currentInfo.isStableIdGenerator()) {\n+    if (!currentInfo.isConsistentIdGenerator()) {\n       currentInfo.setConsistentIdGenerator(true);\n       populated = true;\n       return true;\n    * JSDocInfo#isStableIdGenerator()} flag set to {@code true}.\n    *\n    * @return {@code true} if the stableIdGenerator flag was recorded and {@code false} if it was\n-   *     already recorded or there is a confliciting ID generation annotation.\n+   *     already recorded.\n    */\n   public boolean recordStableIdGenerator() {\n-    if (currentInfo.isStableIdGenerator() ||\n-        currentInfo.isIdGenerator() ||\n-        currentInfo.isConsistentIdGenerator()) {\n-      return false;\n-    } else {\n+    if (!currentInfo.isStableIdGenerator()) {\n       currentInfo.setStableIdGenerator(true);\n       populated = true;\n       return true;\n+    } else {\n+      return false;\n     }\n   }\n \n    *     if it was already recorded\n    */\n   public boolean recordIdGenerator() {\n-    if (!currentInfo.isIdGenerator() &&\n-        !currentInfo.isStableIdGenerator()) {\n+    if (!currentInfo.isIdGenerator()) {\n       currentInfo.setIdGenerator(true);\n       populated = true;\n       return true;\n--- a/test/com/google/debugging/sourcemap/Base64Test.java\n+++ b/test/com/google/debugging/sourcemap/Base64Test.java\n     }\n   }\n \n+  public void testBase64EncodeInt() {\n+    assertEquals(\"AAAAAA\", Base64.base64EncodeInt(0));\n+    assertEquals(\"AAAAAQ\", Base64.base64EncodeInt(1));\n+    assertEquals(\"AAAAKg\", Base64.base64EncodeInt(42));\n+    assertEquals(\"////nA\", Base64.base64EncodeInt(-100));\n+    assertEquals(\"/////w\", Base64.base64EncodeInt(0xffffffff));\n+  }\n+\n   private void testValue(int value) {\n     assertEquals(value, Base64.fromBase64(Base64.toBase64(value)));\n   }\n--- a/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceIdGeneratorsTest.java\n         \"f1 = 'f1$0'\");\n   }\n \n+  public void testSimpleStable() {\n+    testNonPseudoSupportingGenerator(\n+        \"/** @stableIdGenerator */ id = function() {};\" +\n+        \"foo.bar = id('foo_bar')\",\n+\n+        \"id = function() {};\" +\n+        \"foo.bar = '125lGg'\");\n+\n+    testNonPseudoSupportingGenerator(\n+        \"/** @stableIdGenerator */ id = function() {};\" +\n+        \"f1 = id('f1');\" +\n+        \"f1 = id('f1')\",\n+\n+        \"id = function() {};\" +\n+        \"f1 = 'AAAMiw';\" +\n+        \"f1 = 'AAAMiw'\");\n+  }\n+\n   public void testVar() {\n     test(\"/** @consistentIdGenerator */ var id = function() {};\" +\n          \"foo.bar = id('foo_bar')\",\n \n          \"var id = function() {};\" +\n          \"foo.bar = 'foo_bar$0'\");\n+\n+    testNonPseudoSupportingGenerator(\n+        \"/** @stableIdGenerator */ var id = function() {};\" +\n+        \"foo.bar = id('foo_bar')\",\n+\n+        \"var id = function() {};\" +\n+        \"foo.bar = '125lGg'\");\n   }\n \n   public void testObjLit() {\n \n          \"get.id = function() {};\" +\n          \"foo.bar = {a: 'foo_bar$0'}\");\n+\n+    testNonPseudoSupportingGenerator(\n+        \"/** @stableIdGenerator */ get.id = function() {};\" +\n+        \"foo.bar = {a: get.id('foo_bar')}\",\n+\n+        \"get.id = function() {};\" +\n+        \"foo.bar = {a: '125lGg'}\");\n   }\n \n   public void testTwoGenerators() {\n          \"f4 = '1$1';\");\n   }\n \n-  public void testTwoMixedGenerators() {\n+  public void testMixedGenerators() {\n     test(\"/** @idGenerator */ var id1 = function() {};\" +\n          \"/** @consistentIdGenerator */ var id2 = function() {};\" +\n+         \"/** @stableIdGenerator */ var id3 = function() {};\" +\n          \"f1 = id1('1');\" +\n          \"f2 = id1('1');\" +\n          \"f3 = id2('1');\" +\n-         \"f4 = id2('1');\",\n+         \"f4 = id2('1');\" +\n+         \"f5 = id3('1');\" +\n+         \"f6 = id3('1');\",\n \n          \"var id1 = function() {};\" +\n          \"var id2 = function() {};\" +\n+         \"var id3 = function() {};\" +\n          \"f1 = 'a';\" +\n          \"f2 = 'b';\" +\n          \"f3 = 'a';\" +\n-         \"f4 = 'a';\",\n+         \"f4 = 'a';\" +\n+         \"f5 = 'AAAAMQ';\" +\n+         \"f6 = 'AAAAMQ';\",\n \n          \"var id1 = function() {};\" +\n          \"var id2 = function() {};\" +\n+         \"var id3 = function() {};\" +\n          \"f1 = '1$0';\" +\n          \"f2 = '1$1';\" +\n          \"f3 = '1$0';\" +\n-         \"f4 = '1$0';\");\n+         \"f4 = '1$0';\" +\n+         \"f5 = 'AAAAMQ';\" +\n+         \"f6 = 'AAAAMQ';\");\n   }\n \n   public void testLocalCall() {\n \n         \"var id = function() {};\" +\n         \"function fb() {foo.bar = 'foo_bar$0'}\");\n+\n+    testNonPseudoSupportingGenerator(\n+        \"/** @stableIdGenerator */ var id = function() {};\" +\n+        \"function fb() {foo.bar = id('foo_bar')}\",\n+\n+        \"var id = function() {};\" +\n+        \"function fb() {foo.bar = '125lGg'}\");\n   }\n \n   public void testConflictingIdGenerator() {\n     testSame(new String[] {\"/** @idGenerator \\n @consistentIdGenerator \\n*/\" +\n+                           \"var id = function() {}; \"},\n+        ReplaceIdGenerators.CONFLICTING_GENERATOR_TYPE);\n+\n+    testSame(new String[] {\"/** @stableIdGenerator \\n @idGenerator \\n*/\" +\n+                           \"var id = function() {}; \"},\n+        ReplaceIdGenerators.CONFLICTING_GENERATOR_TYPE);\n+\n+    testSame(new String[] {\"/** @stableIdGenerator \\n @consistentIdGenerator \\n*/\" +\n                            \"var id = function() {}; \"},\n         ReplaceIdGenerators.CONFLICTING_GENERATOR_TYPE);\n \n     generatePseudoNames = true;\n     test(code, expectedPseudo);\n   }\n-}\n+\n+  private void testNonPseudoSupportingGenerator(String code, String expected) {\n+    generatePseudoNames = false;\n+    test(code, expected);\n+    generatePseudoNames = true;\n+    test(code, expected);\n+  }\n+}\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n           \"type annotation incompatible with other annotations\");\n   }\n \n-  public void testStableIdGeneratorConflict1() throws Exception {\n-    parse(\"/**\\n\" +\n-          \" * @stableIdGenerator\\n\" +\n-          \" * @consistentIdGenerator\\n\" +\n-          \" */\\n\" +\n-          \"function getId() {}\",\n-          \"extra @consistentIdGenerator tag\");\n-  }\n-\n-  public void testStableIdGeneratorConflict2() throws Exception {\n-    parse(\"/**\\n\" +\n-          \" * @stableIdGenerator\\n\" +\n-          \" * @idGenerator\\n\" +\n-          \" */\\n\" +\n-          \"function getId() {}\",\n-          \"extra @idGenerator tag\");\n-  }\n-\n-  public void testStableIdGeneratorConflict3() throws Exception {\n+  public void testStableIdGeneratorConflict() throws Exception {\n     parse(\"/**\\n\" +\n           \" * @stableIdGenerator\\n\" +\n           \" * @stableIdGenerator\\n\" +", "timestamp": 1355189913, "metainfo": ""}