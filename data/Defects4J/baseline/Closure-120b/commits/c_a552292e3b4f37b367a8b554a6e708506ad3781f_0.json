{"sha": "a552292e3b4f37b367a8b554a6e708506ad3781f", "log": "Fill in references to namespaces  R=acleung DELTA=43  (36 added, 2 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2856   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     NodeTraversal.traverse(this, getRoot(), refCollector);\n     symbolTable.addSymbolsFrom(refCollector);\n \n+    symbolTable.fillNamespaceReferences();\n+\n     return symbolTable;\n   }\n \n--- a/src/com/google/javascript/jscomp/SymbolTable.java\n+++ b/src/com/google/javascript/jscomp/SymbolTable.java\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.JSType;\n import com.google.javascript.rhino.jstype.SimpleSlot;\n import com.google.javascript.rhino.jstype.StaticReference;\n       }\n \n       for (R otherRef : otherSymbolTable.getReferences(otherSymbol)) {\n-        Node otherRefNode = otherRef.getNode();\n-        if (!mySymbol.references.containsKey(otherRefNode)) {\n-          mySymbol.references.put(\n-              otherRefNode, new Reference(mySymbol, otherRefNode));\n+        mySymbol.defineReferenceAt(otherRef.getNode());\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Not all symbol tables record references to \"namespace\" objects.\n+   * For example, if you have:\n+   * goog.dom.DomHelper = function() {};\n+   * The symbol table may not record that as a reference to \"goog.dom\",\n+   * because that would be redundant.\n+   */\n+  void fillNamespaceReferences() {\n+    for (Symbol symbol : getAllSymbols()) {\n+      for (Reference ref : getReferences(symbol)) {\n+        Node currentNode = ref.getNode();\n+        while (currentNode.getType() == Token.GETPROP) {\n+          currentNode = currentNode.getFirstChild();\n+\n+          String name = currentNode.getQualifiedName();\n+          if (name != null) {\n+            Symbol namespace = symbol.scope.getSlot(name);\n+\n+            // Never create new symbols, because we don't want to guess at\n+            // declarations if we're not sure. If this symbol doesn't exist,\n+            // then we probably want to add a better symbol table that does\n+            // have it.\n+            if (namespace != null) {\n+              namespace.defineReferenceAt(currentNode);\n+            }\n+          }\n         }\n       }\n     }\n     @Override\n     public Reference getDeclaration() {\n       return declaration;\n+    }\n+\n+    void defineReferenceAt(Node n) {\n+      if (!references.containsKey(n)) {\n+        references.put(n, new Reference(this, n));\n+      }\n     }\n \n     /** Sets the declaration node. May only be called once. */\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n \n     Symbol googDom = getGlobalVar(table, \"goog.dom\");\n     assertNotNull(googDom);\n-\n-    // TODO(nicksantos): Fill in the missing reference.\n-    assertEquals(1, Iterables.size(table.getReferences(googDom)));\n+    assertEquals(2, Iterables.size(table.getReferences(googDom)));\n \n     Symbol googDomHelper = getGlobalVar(table, \"goog.dom.DomHelper\");\n     assertNotNull(googDomHelper);", "timestamp": 1312295899, "metainfo": ""}