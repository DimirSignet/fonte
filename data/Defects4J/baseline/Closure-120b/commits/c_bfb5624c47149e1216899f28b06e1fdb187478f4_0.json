{"sha": "bfb5624c47149e1216899f28b06e1fdb187478f4", "log": "Allow assignment of Foo.<?> to Foo.<x> and vise versa. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44152340", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n       return false;\n     }\n \n-    // templatized types.\n+    if (thisType.isTemplatizedType() && thatType.isTemplatizedType()) {\n+      JSType rawThisType = thisType.toMaybeTemplatizedType().getReferencedType();\n+      JSType rawThatType = thatType.toMaybeTemplatizedType().getReferencedType();\n+      if (!rawThisType.isSubtype(rawThatType)) {\n+        return false;\n+      }\n+\n+      TemplateTypeMap thisTypeParams = thisType.getTemplateTypeMap();\n+      TemplateTypeMap thatTypeParams = thatType.getTemplateTypeMap();\n+\n+      if (thisTypeParams.checkEquivalenceHelper(\n+          thatTypeParams, EquivalenceMethod.INVARIANT)) {\n+        return true;\n+      } else if (isExemptFromTemplateTypeInvariance(thatType)) {\n+        // Only array and object qualify and they are compatible if their\n+        // elmenet types are related.\n+        TemplateType key = thisType.registry.getObjectElementKey();\n+        JSType thisElement = thisTypeParams.getTemplateType(key);\n+        JSType thatElement = thatTypeParams.getTemplateType(key);\n+\n+        return thisElement.isSubtype(thatElement)\n+            || thatElement.isSubtype(thisElement);\n+      } else {\n+        return false;\n+      }\n+    }\n+\n     if (thisType.isTemplatizedType()) {\n-      return !areIncompatibleArrays(thisType, thatType) &&\n-          thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(\n+      return thisType.toMaybeTemplatizedType().getReferencedType().isSubtype(\n               thatType);\n-    }\n-    if (thatType.isTemplatizedType()) {\n-      if (!isExemptFromTemplateTypeInvariance(thatType) &&\n-          !thisType.getTemplateTypeMap().checkEquivalenceHelper(\n-              thatType.getTemplateTypeMap(), EquivalenceMethod.IDENTITY)) {\n-        return false;\n-      }\n     }\n \n     // proxy types\n           ((ProxyObjectType) thatType).getReferencedTypeInternal());\n     }\n     return false;\n-  }\n-\n-  /**\n-   * Determines if two types are incompatible Arrays, meaning that their element\n-   * template types are not subtypes of one another.\n-   */\n-  private static boolean areIncompatibleArrays(JSType type1, JSType type2) {\n-    ObjectType type1Obj = type1.toObjectType();\n-    ObjectType type2Obj = type2.toObjectType();\n-    if (type1Obj == null || type2Obj == null) {\n-      return false;\n-    }\n-\n-    if (!\"Array\".equals(type1Obj.getReferenceName()) ||\n-        !\"Array\".equals(type2Obj.getReferenceName())) {\n-      return false;\n-    }\n-\n-    TemplateType templateKey = type1.registry.getObjectElementKey();\n-    JSType elemType1 = type1.getTemplateTypeMap().getTemplateType(templateKey);\n-    JSType elemType2 = type2.getTemplateTypeMap().getTemplateType(templateKey);\n-    return !elemType1.isSubtype(elemType2) && !elemType2.isSubtype(elemType1);\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n   }\n \n   public void testTemplateType9() throws Exception {\n-    // verify interface type parameters are recognised.\n+    // verify interface type parameters are recognized.\n     testTypes(\n         \"/** @interface \\n\" +\n         \" * @classTemplate S,T\\n\" +\n         \"initializing variable\\n\" +\n         \"found   : number\\n\" +\n         \"required: Object\");\n+  }\n+\n+  public void testTemplateType10() throws Exception {\n+    // verify a type parameterized with unknown can be assigned to\n+    // the same type with any other type parameter.\n+    testTypes(\n+        \"/** @constructor \\n\" +\n+        \" * @classTemplate T\\n\" +\n+        \" */\\n\" +\n+        \"function Bar() {}\\n\" +\n+        \"\\n\" +\n+        \"\" +\n+        \"/** @type {!Bar.<?>} */ var x;\" +\n+        \"/** @type {!Bar.<number>} */ var y;\" +\n+        \"y = x;\");\n   }\n \n   public void disable_testBadTemplateType4() throws Exception {\n--- a/test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java\n     assertFalse(templatizedType3.isEquivalentTo(baseType));\n     assertTrue(templatizedType4.isEquivalentTo(baseType));\n \n-    assertFalse(baseType.isSubtype(templatizedType1));\n-    assertFalse(baseType.isSubtype(templatizedType2));\n-    assertFalse(baseType.isSubtype(templatizedType3));\n+    assertTrue(baseType.isSubtype(templatizedType1));\n+    assertTrue(baseType.isSubtype(templatizedType2));\n+    assertTrue(baseType.isSubtype(templatizedType3));\n     assertTrue(baseType.isSubtype(templatizedType4));\n \n     assertFalse(templatizedType1.isSubtype(templatizedType2));\n     assertFalse(templatizedType2.isSubtype(templatizedType1));\n \n-    assertFalse(templatizedType2.isSubtype(templatizedType3));\n-    assertFalse(templatizedType3.isSubtype(templatizedType2));\n+    assertTrue(templatizedType2.isSubtype(templatizedType3));\n+    assertTrue(templatizedType3.isSubtype(templatizedType2));\n   }\n }", "timestamp": 1363798111, "metainfo": ""}