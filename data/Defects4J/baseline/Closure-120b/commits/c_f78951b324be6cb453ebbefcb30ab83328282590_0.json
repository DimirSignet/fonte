{"sha": "f78951b324be6cb453ebbefcb30ab83328282590", "log": "speed up code generation by about 10%  R=johnlenz DELTA=29  (26 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1914   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n \n import com.google.common.base.Charsets;\n import com.google.common.base.Preconditions;\n+import com.google.common.collect.Maps;\n import com.google.javascript.jscomp.NodeUtil.MatchNotFunction;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import java.io.IOException;\n import java.nio.charset.Charset;\n import java.nio.charset.CharsetEncoder;\n+import java.util.Map;\n \n /**\n  * CodeGenerator generates codes from a parse tree, sending it to the specified\n  *\n  */\n class CodeGenerator {\n+  // A memoizer for formatting strings as JS strings.\n+  private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();\n \n   private static final char[] HEX_CHARS\n       = { '0', '1', '2', '3', '4', '5', '6', '7',\n           if (!Double.isNaN(d)) {\n             cc.addNumber(d);\n           } else {\n-            add(jsString(n.getString(), outputCharsetEncoder));\n+            addJsString(n.getString());\n           }\n         }\n \n           throw new IllegalStateException(\n               \"Unexpected String children: \" + n.getParent().toStringTree());\n         }\n-        add(jsString(n.getString(), outputCharsetEncoder));\n+        addJsString(n.getString());\n         break;\n \n       case Token.DELPROP:\n   }\n \n   /** Outputs a js string, using the optimal (single/double) quote character */\n-  static String jsString(String s, CharsetEncoder outputCharsetEncoder) {\n+  void addJsString(String s) {\n+    String cached = ESCAPED_JS_STRINGS.get(s);\n+    if (cached == null) {\n+      cached = jsString(s);\n+      ESCAPED_JS_STRINGS.put(s, cached);\n+    }\n+    add(cached);\n+  }\n+\n+  String jsString(String s) {\n     int singleq = 0, doubleq = 0;\n \n     // could count the quotes and pick the optimal quote character", "timestamp": 1305560431, "metainfo": ""}