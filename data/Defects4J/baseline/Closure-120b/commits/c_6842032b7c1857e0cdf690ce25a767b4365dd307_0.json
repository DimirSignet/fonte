{"sha": "6842032b7c1857e0cdf690ce25a767b4365dd307", "log": "Add a few more cases to StatementFusion. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45657415", "commit": "\n--- a/src/com/google/javascript/jscomp/StatementFusion.java\n+++ b/src/com/google/javascript/jscomp/StatementFusion.java\n   }\n \n   private boolean isFusableControlStatement(Node n) {\n-    // TODO(user): Support more control statement for fusion.\n-    // FOR\n     switch(n.getType()) {\n       case Token.IF:\n       case Token.THROW:\n         // We don't want to add a new return value.\n         return n.hasChildren();\n       case Token.FOR:\n-        return NodeUtil.isForIn(n) &&\n-            // Avoid cases where we have for(var x = foo() in a) { ....\n-            !mayHaveSideEffects(n.getFirstChild());\n+        if (NodeUtil.isForIn(n)) {\n+          // Avoid cases where we have for(var x = foo() in a) { ....\n+          return !mayHaveSideEffects(n.getFirstChild());\n+        } else {\n+          // Avoid cases where we have for(var x;_;_) { ....\n+          return !n.getFirstChild().isVar();\n+        }\n+      case Token.LABEL:\n+        return isFusableControlStatement(n.getLastChild());\n     }\n     return false;\n   }\n         before.getParent().removeChild(before);\n         if (NodeUtil.isForIn(control)) {\n           fuseExpresssonIntoSecondChild(before.removeFirstChild(), control);\n+        } else {\n+          fuseExpresssonIntoFirstChild(before.removeFirstChild(), control);\n         }\n+        return;\n+      case Token.LABEL:\n+        fuseExpressionIntoControlFlowStatement(before, control.getLastChild());\n         return;\n       default:\n         throw new IllegalStateException(\"Statement fusion missing.\");\n \n   // exp1, exp1\n   protected static Node fuseExpressionIntoExpression(Node exp1, Node exp2) {\n+    if (exp2.isEmpty()) {\n+      return exp1;\n+    }\n     Node comma = new Node(Token.COMMA, exp1);\n     comma.copyInformationFrom(exp2);\n \n--- a/test/com/google/javascript/jscomp/StatementFusionTest.java\n+++ b/test/com/google/javascript/jscomp/StatementFusionTest.java\n     fuseSame(\"a();for(var x = b() in y){}\");\n   }\n \n+  public void testFuseIntoVanillaFor() {\n+    fuse(\"a;b;c;for(;g;){}\", \"for(a,b,c;g;){}\");\n+    fuse(\"a;b;c;for(d;g;){}\", \"for(a,b,c,d;g;){}\");\n+    fuse(\"a;b;c;for(d,e;g;){}\", \"for(a,b,c,d,e;g;){}\");\n+    fuseSame(\"a();for(var x;g;){}\");\n+  }\n+\n+  public void testFuseIntoLabel() {\n+    fuse(\"a;b;c;label:for(x in y){}\", \"label:for(x in a,b,c,y){}\");\n+    fuse(\"a;b;c;label:for(;g;){}\", \"label:for(a,b,c;g;){}\");\n+    fuse(\"a;b;c;l1:l2:l3:for(;g;){}\", \"l1:l2:l3:for(a,b,c;g;){}\");\n+    fuseSame(\"a;b;c;label:while(true){}\");\n+  }\n+\n   public void testNoFuseIntoWhile() {\n     fuseSame(\"a;b;c;while(x){}\");\n   }", "timestamp": 1366761775, "metainfo": ""}