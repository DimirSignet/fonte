{"sha": "ab9150f51865434432e38ddb79c01944542bdde1", "log": "special-handling for resolving bottom types (like ActiveXObject)  R=acleung DELTA=17  (16 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3317   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n                                     StaticScope<JSType> enclosing) {\n     JSType value = lookupViaProperties(t, enclosing);\n     // last component of the chain\n-    if (value != null && (value.isConstructor() || value.isInterface())) {\n+    if (value != null && value.isFunctionType() &&\n+        (value.isConstructor() || value.isInterface())) {\n       FunctionType functionType = value.toMaybeFunctionType();\n       setReferencedAndResolvedType(\n           functionType.getInstanceType(), t, enclosing);\n+    } else if (value != null && value.isNoObjectType()) {\n+      setReferencedAndResolvedType(\n+          registry.getNativeFunctionType(\n+              JSTypeNative.NO_OBJECT_TYPE).getInstanceType(), t, enclosing);\n     } else if (value instanceof EnumType) {\n       setReferencedAndResolvedType(\n           ((EnumType) value).getElementsType(), t, enclosing);\n--- a/test/com/google/javascript/rhino/jstype/NamedTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/NamedTypeTest.java\n             ImmutableMap.of(\"TypeA\", ctorA)));\n     assertTypeEquals(NUMBER_TYPE, typeA.getPropertyType(\"foo\"));\n   }\n+\n+  public void testActiveXObjectResolve() {\n+    NamedType activeXObject =\n+        new NamedType(registry, \"ActiveXObject\", \"source\", 1, 0);\n+    activeXObject.resolve(\n+        null,\n+        new MapBasedScope(\n+            ImmutableMap.of(\"ActiveXObject\", NO_OBJECT_TYPE)));\n+    assertEquals(\"ActiveXObject\", activeXObject.toString());\n+    assertTypeEquals(NO_OBJECT_TYPE, activeXObject.getReferencedType());\n+  }\n }", "timestamp": 1316631794, "metainfo": ""}