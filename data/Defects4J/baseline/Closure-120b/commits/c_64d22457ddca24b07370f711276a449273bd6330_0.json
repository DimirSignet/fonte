{"sha": "64d22457ddca24b07370f711276a449273bd6330", "log": "More effective function call stripping. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45128904", "commit": "\n--- a/src/com/google/javascript/jscomp/StripCode.java\n+++ b/src/com/google/javascript/jscomp/StripCode.java\n           replaceWithEmpty(ancestor, ancParent);\n           break;\n         }\n-        int type = ancestor.getType();\n-        if (type != Token.GETPROP &&\n-            type != Token.GETELEM &&\n-            type != Token.CALL) {\n+        if (ancestor.isAssign()) {\n+          Node ancParent = ancestor.getParent();\n+          ancParent.replaceChild(\n+              ancestor, ancestor.getLastChild().detachFromParent());\n+          break;\n+        }\n+        if (!NodeUtil.isGet(ancestor)\n+            && !ancestor.isCall()) {\n           replaceWithNull(ancestorChild, ancestor);\n           break;\n         }\n       // EXPR_RESULT\n       //   expression\n       Node expression = n.getFirstChild();\n-      if (nameEndsWithFieldNameToStrip(expression) ||\n+      if (nameIncludesFieldNameToStrip(expression) ||\n           qualifiedNameBeginsWithStripType(expression)) {\n         if (parent.isExprResult()) {\n           Node gramps = parent.getParent();\n            n.isNew()) &&\n           n.hasChildren() &&\n           (qualifiedNameBeginsWithStripType(n.getFirstChild()) ||\n-              nameEndsWithFieldNameToStrip(n.getFirstChild()));\n+              nameIncludesFieldNameToStrip(n.getFirstChild()));\n     }\n \n     /**\n     /**\n      * Gets whether a CALL node triggers statement removal, based on the name\n      * of the object whose method is being called, or the name of the method.\n-     * Checks whether the name begins with a strip type, ends with a field name\n+     * Checks whether the name begins with a strip type, includes a field name\n      * that's a strip name, or belongs to the set of global class-defining\n      * functions (e.g. goog.inherits).\n      *\n       }\n \n       Node callee = function.getFirstChild();\n-      return nameEndsWithFieldNameToStrip(callee) ||\n-          nameEndsWithFieldNameToStrip(function) ||\n+      return nameIncludesFieldNameToStrip(callee) ||\n+          nameIncludesFieldNameToStrip(function) ||\n           qualifiedNameBeginsWithStripType(function) ||\n           actsOnStripType(t, n);\n-    }\n-\n-    /**\n-     * Gets whether a name ends with a field name that should be stripped. For\n-     * example, this function would return true when passed \"this.logger\" or\n-     * \"a.b.c.myLogger\" if \"logger\" is a strip name.\n-     *\n-     * @param n A node (typically a GETPROP node)\n-     * @return Whether the name ends with a field name that should be stripped\n-     */\n-    boolean nameEndsWithFieldNameToStrip(@Nullable Node n) {\n-      if (n != null && n.isGetProp()) {\n-        Node propNode = n.getLastChild();\n-        return propNode != null && propNode.isString() &&\n-               isStripName(propNode.getString());\n-      }\n-      return false;\n     }\n \n     /**\n--- a/test/com/google/javascript/jscomp/StripCodeTest.java\n+++ b/test/com/google/javascript/jscomp/StripCodeTest.java\n \n   public void testStripCallsToStrippedNames2() {\n     test(\"a = function() {};\" +\n-        \"a.prototype.logger_ = function(msg) {};\" +\n-        \"a.prototype.b = function() { this.logger_('hi'); }\",\n-        \"a=function(){};a.prototype.b=function(){}\");\n-  }\n-\n-  public void testStripVarsInitializedFromStrippedNames() {\n+         \"a.prototype.logger_ = function(msg) {};\" +\n+         \"a.prototype.b = function() { this.logger_('hi'); }\",\n+         \"a=function(){};a.prototype.b=function(){}\");\n+  }\n+\n+  public void testStripCallsToStrippedNames3() {\n+    test(\"a = function() { this.logger_ = function(msg){}; };\" +\n+         \"a.prototype.b = function() { this.logger_('hi').foo = 2; }\",\n+         \"a=function(){};a.prototype.b=function(){2;}\");\n+  }\n+\n+  public void testStripCallsToStrippedNames4() {\n+    test(\"a = this.logger_().foo;\",\n+         \"a = null;\");\n+  }\n+\n+  public void testStripVarsInitializedFromStrippedNames1() {\n     test(\"a = function() { this.logger_ = function() { return 1; }; };\" +\n          \"a.prototype.b = function() { \" +\n          \"  var one = this.logger_(); if (one) foo() }\",\n           \"a=function(){};a.prototype.b=function(){if(null)foo()}\");\n+  }\n+\n+  public void testStripVarsInitializedFromStrippedNames2() {\n+    test(\"a = function() { this.logger_ = function() { return 1; }; };\" +\n+         \"a.prototype.b = function() { \" +\n+         \"  var one = this.logger_.foo.bar(); if (one) foo() }\",\n+         \"a=function(){};a.prototype.b=function(){if(null)foo()}\");\n   }\n \n   public void testReportErrorOnStripInNestedAssignment() {\n          \"function foo() {} foo.bar = null;\");\n   }\n \n+  public void testNewOperatior3() {\n+    test(\"(new goog.debug.Logger()).foo().bar = 2;\",\n+         \"2;\");\n+  }\n+\n   public void testCrazyNesting1() {\n     test(\"var x = {}; x[new goog.debug.Logger()] = 3;\",\n          \"var x = {}; x[null] = 3;\");\n         \"var x = {};\");\n   }\n \n+\n+  public void testMethodCallTriggersRemoval() {\n+    test(\"this.logger_.foo.bar();\",\n+        \"\");\n+  }\n+\n+  public void testRemoveExpressionByName() {\n+    test(\"this.logger_.foo.bar;\",\n+        \"\");\n+  }\n+\n }", "timestamp": 1365704480, "metainfo": ""}