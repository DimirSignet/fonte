{"sha": "21cf8fd6e2ba57eccaaf18b3053bd68d0c174c3b", "log": "Adds a method to export module dependencies as JSON.  Enables output of individual module compilation units for modules derived from CommonJS based input files.  R=johnlenz,nicksantos DELTA=133  (133 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5498   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n import com.google.common.io.Files;\n import com.google.javascript.jscomp.CompilerOptions.TweakProcessing;\n import com.google.javascript.jscomp.PerformanceTracker.Stats;\n+import com.google.javascript.jscomp.deps.SortedDependencies;\n+import com.google.javascript.jscomp.deps.SortedDependencies.CircularDependencyException;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.TokenStream;\n import com.google.protobuf.CodedOutputStream;\n       } else {\n         result = compiler.compile(externs, inputs, options);\n       }\n+      if (options.processCommonJSModules) {\n+        // For CommonJS modules constructs modules from actual inputs.\n+        modules = Lists.newArrayList(compiler.getDegenerateModuleGraph()\n+            .getAllModules());\n+        // The module graph constructor expects modules to be already sorted.\n+        try {\n+          SortedDependencies<JSModule> sorter =\n+              new SortedDependencies<JSModule>(modules);\n+          modules = sorter.getDependenciesOf(modules, true);\n+        } catch (CircularDependencyException e) {\n+          throw Throwables.propagate(e);\n+        }\n+      }\n     }\n \n     int errCode = processResults(result, modules, options);\n       // Output the manifest and bundle files if requested.\n       outputManifest();\n       outputBundle();\n+      outputModuleGraphJson();\n       return 0;\n     } else if (result.success) {\n+      outputModuleGraphJson();\n       if (modules == null) {\n         writeOutput(\n             jsOutput, compiler, compiler.toSource(), config.outputWrapper,\n   }\n \n   /**\n+   * Creates a file containing the current module graph in JSON serialization.\n+   */\n+  private void outputModuleGraphJson() throws IOException {\n+    if (config.outputModuleDependencies != null &&\n+        config.outputModuleDependencies != \"\") {\n+      Writer out = fileNameToOutputWriter2(config.outputModuleDependencies);\n+      printModuleGraphJsonTo(compiler.getDegenerateModuleGraph(), out);\n+      out.close();\n+    }\n+  }\n+\n+  /**\n+   * Prints the current module graph as JSON.\n+   */\n+  @VisibleForTesting\n+  void printModuleGraphJsonTo(JSModuleGraph graph,\n+      Appendable out) throws IOException {\n+    out.append(compiler.getDegenerateModuleGraph().toJson().toString());\n+  }\n+\n+  /**\n    * Prints a set of modules to the manifest or bundle file.\n    */\n   @VisibleForTesting\n       return this;\n     }\n \n+    private String outputModuleDependencies = null;\n+\n+    /**\n+     * Sets whether a JSON file representing the dependencies between modules\n+     * should be created.\n+     */\n+    CommandLineConfig setOutputModuleDependencies(String\n+        outputModuleDependencies) {\n+      this.outputModuleDependencies = outputModuleDependencies;\n+      return this;\n+    }\n+\n     private List<String> outputBundles = ImmutableList.of();\n \n     /**\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         + \"a manifest for each module.\")\n     private String output_manifest = \"\";\n \n+    @Option(name = \"--output_module_dependencies\",\n+        usage = \"Prints out a JSON file of dependencies between modules.\")\n+    private String output_module_dependencies = \"\";\n+\n     @Option(name = \"--accept_const_keyword\",\n         usage = \"Allows usage of const keyword.\")\n     private boolean accept_const_keyword = false;\n           .setOnlyClosureDependencies(flags.only_closure_dependencies)\n           .setClosureEntryPoints(flags.closure_entry_point)\n           .setOutputManifest(ImmutableList.of(flags.output_manifest))\n+          .setOutputModuleDependencies(flags.output_module_dependencies)\n           .setAcceptConstKeyword(flags.accept_const_keyword)\n           .setLanguageIn(flags.language_in)\n           .setProcessCommonJSModules(flags.process_common_js_modules)\n--- a/src/com/google/javascript/jscomp/JSModuleGraph.java\n+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.LinkedHashMultimap;\n import java.util.Set;\n import java.util.TreeSet;\n \n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n /**\n  * A {@link JSModule} dependency graph that assigns a depth to each module and\n  * can answer depth-related queries about them. For the purposes of this class,\n    */\n   JSModule getRootModule() {\n     return Iterables.getOnlyElement(modulesByDepth.get(0));\n+  }\n+\n+  /**\n+   * Returns a JSON representation of the JSModuleGraph. Specifically a\n+   * JSONArray of \"Modules\" where each module has a\n+   * - \"name\"\n+   * - \"dependencies\" (list of module names)\n+   * - \"transitive-dependencies\" (list of module names, deepest first)\n+   * - \"inputs\" (list of file names)\n+   * @return List of module JSONObjects.\n+   */\n+  JSONArray toJson() {\n+    JSONArray modules = new JSONArray();\n+    for (JSModule module : getAllModules()) {\n+      JSONObject node = new JSONObject();\n+      try {\n+        node.put(\"name\", module.getName());\n+        JSONArray deps = new JSONArray();\n+        node.put(\"dependencies\", deps);\n+        for (JSModule m : module.getDependencies()) {\n+          deps.put(m.getName());\n+        }\n+        JSONArray transitiveDeps = new JSONArray();\n+        node.put(\"transitive-dependencies\", transitiveDeps);\n+        for (JSModule m : getTransitiveDepsDeepestFirst(module)) {\n+          transitiveDeps.put(m.getName());\n+        }\n+        JSONArray inputs = new JSONArray();\n+        node.put(\"inputs\", inputs);\n+        for (CompilerInput input : module.getInputs()) {\n+          inputs.put(input.getSourceFile().getOriginalPath());\n+        }\n+        modules.put(node);\n+      } catch(JSONException e) {\n+        Throwables.propagate(e);\n+      }\n+    }\n+    return modules;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n         builder.toString());\n   }\n \n+  public void testOutputModuleGraphJson() throws Exception {\n+    useModules = ModulePattern.STAR;\n+    testSame(new String[] {\n+        \"var x = 3;\", \"var y = 5;\", \"var z = 7;\", \"var a = 9;\"});\n+\n+    StringBuilder builder = new StringBuilder();\n+    lastCommandLineRunner.printModuleGraphJsonTo(\n+        lastCompiler.getModuleGraph(), builder);\n+    assertTrue(builder.toString().indexOf(\"transitive-dependencies\") != -1);\n+  }\n+\n   public void testVersionFlag() {\n     args.add(\"--version\");\n     testSame(\"\");\n--- a/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n+++ b/test/com/google/javascript/jscomp/JSModuleGraphTest.java\n import junit.framework.*;\n \n import java.util.*;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n \n /**\n  * Tests for {@link JSModuleGraph}\n     assertTrue(results.isEmpty());\n   }\n \n+  public void testToJson() throws JSONException {\n+    JSONArray modules = graph.toJson();\n+    assertEquals(6, modules.length());\n+    for (int i = 0; i < modules.length(); i++) {\n+      JSONObject m = modules.getJSONObject(i);\n+      assertNotNull(m.getString(\"name\"));\n+      assertNotNull(m.getJSONArray(\"dependencies\"));\n+      assertNotNull(m.getJSONArray(\"transitive-dependencies\"));\n+      assertNotNull(m.getJSONArray(\"inputs\"));\n+    }\n+    JSONObject m = modules.getJSONObject(3);\n+    assertEquals(\"D\", m.getString(\"name\"));\n+    assertEquals(\"[\\\"B\\\"]\", m.getJSONArray(\"dependencies\").toString());\n+    assertEquals(2,\n+        m.getJSONArray(\"transitive-dependencies\").length());\n+    assertEquals(\"[]\", m.getJSONArray(\"inputs\").toString());\n+  }\n+\n   private List<CompilerInput> setUpManageDependenciesTest() {\n     List<CompilerInput> inputs = Lists.newArrayList();\n ", "timestamp": 1347647670, "metainfo": ""}