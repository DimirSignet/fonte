{"sha": "1f940f99858ca71177ce220bf04d8bd66e12c2d0", "log": "Automated g4 rollback.  *** Reason for rollback ***  broke tests  *** Original change description ***  Add an API to allow incrementally added files to the Compile State.  DELTA=120  (1 added, 118 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4056   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     return true;\n   }\n \n-  /**\n-   * Add a new source input dynamically. Intended for incremental compilation.\n-   * <p>\n-   * If the new source input doesn't parse, it will not be added, and a false\n-   * will be returned.\n-   *\n-   * @param ast the JS Source to add.\n-   * @return true if the source was added successfully, false otherwise.\n-   * @throws IllegalStateException if an input for this ast already exists.\n-   */\n-  boolean addNewSourceAst(JsAst ast) {\n-    CompilerInput oldInput = getInput(ast.getInputId());\n-    if (oldInput != null) {\n-      throw new IllegalStateException(\n-          \"Input already exists: \" + ast.getInputId().getIdName());\n-    }\n-    Node newRoot = ast.getAstRoot(this);\n-    if (newRoot == null) {\n-      return false;\n-    }\n-\n-    getRoot().getLastChild().addChildToBack(newRoot);\n-\n-    CompilerInput newInput = new CompilerInput(ast);\n-    inputsById.put(ast.getInputId(), newInput);\n-\n-    return true;\n-  }\n-\n   @Override\n   JSModuleGraph getModuleGraph() {\n     return moduleGraph;", "timestamp": 1326220538, "metainfo": ""}