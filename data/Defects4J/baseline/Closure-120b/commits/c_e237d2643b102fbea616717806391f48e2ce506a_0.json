{"sha": "e237d2643b102fbea616717806391f48e2ce506a", "log": "Warn when structs are used with IN or FOR/IN  R=nicksantos DELTA=44  (41 added, 3 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5569   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n       DiagnosticType.warning(\n           \"JSC_EXPECTED_THIS_TYPE\",\n           \"\\\"{0}\\\" must be called with a \\\"this\\\" type\");\n+\n+  static final DiagnosticType IN_USED_WITH_STRUCT =\n+      DiagnosticType.warning(\"JSC_IN_USED_WITH_STRUCT\",\n+                             \"Cannot use the IN operator with structs\");\n \n   static final DiagnosticGroup ALL_DIAGNOSTICS = new DiagnosticGroup(\n       DETERMINISTIC_TEST,\n       ILLEGAL_IMPLICIT_CAST,\n       INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n       EXPECTED_THIS_TYPE,\n+      IN_USED_WITH_STRUCT,\n       RhinoErrorReporter.TYPE_PARSE_ERROR,\n       TypedScopeCreator.UNKNOWN_LENDS,\n       TypedScopeCreator.LENDS_ON_NON_OBJECT,\n         break;\n \n       case Token.IN:\n-        validator.expectObject(t, n, getJSType(n.getLastChild()),\n-                               \"'in' requires an object\");\n         left = n.getFirstChild();\n+        right = n.getLastChild();\n+        rightType = getJSType(right);\n         validator.expectString(t, left, getJSType(left), \"left side of 'in'\");\n+        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n+        if (rightType.isStruct()) {\n+          report(t, right, IN_USED_WITH_STRUCT);\n+        }\n         ensureTyped(t, n, BOOLEAN_TYPE);\n         break;\n \n \n       // These nodes require data flow analysis.\n       case Token.DO:\n-      case Token.FOR:\n       case Token.IF:\n       case Token.WHILE:\n+        typeable = false;\n+        break;\n+\n+      case Token.FOR:\n+        if (NodeUtil.isForIn(n)) {\n+          Node obj = n.getChildAtIndex(1);\n+          if (getJSType(obj).isStruct()) {\n+            report(t, obj, IN_USED_WITH_STRUCT);\n+          }\n+        }\n         typeable = false;\n         break;\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n               \" */\" +\n               \"function Bar(){ this.x = 123; }\\n\" +\n               \"var z = /** @type {Foo} */(new Bar)['x'];\");\n+  }\n+\n+  public void testInOnStruct() throws Exception {\n+    testTypes(\"/**\\n\" +\n+              \" * @constructor\\n\" +\n+              \" * @struct\\n\" +\n+              \" */\" +\n+              \"function Foo() {}\\n\" +\n+              \"if ('prop' in (new Foo())) {}\",\n+              \"Cannot use the IN operator with structs\");\n+  }\n+\n+  public void testForinOnStruct() throws Exception {\n+    testTypes(\"/**\\n\" +\n+              \" * @constructor\\n\" +\n+              \" * @struct\\n\" +\n+              \" */\" +\n+              \"function Foo() {}\\n\" +\n+              \"for (var prop in (new Foo())) {}\",\n+              \"Cannot use the IN operator with structs\");\n   }\n \n   public void testArrayAccess1() throws Exception {", "timestamp": 1348853518, "metainfo": ""}