{"sha": "dee8df30b843032884ae846162c789d06b144fe8", "log": "Performs type inference using generic type constructor parameters, templatizing the constructed type accordingly. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45416308", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n           ct = (FunctionType) constructorType;\n         }\n         if (ct != null && ct.isConstructor()) {\n-          type = ct.getInstanceType();\n           backwardsInferenceFromCallSite(n, ct);\n+\n+          // If necessary, create a TemplatizedType wrapper around the instance\n+          // type, based on the types of the constructor parameters.\n+          ObjectType instanceType = ct.getInstanceType();\n+          Map<TemplateType, JSType> inferredTypes =\n+              inferTemplateTypesFromParameters(ct, n);\n+          if (inferredTypes.isEmpty()) {\n+            type = instanceType;\n+          } else {\n+            type = registry.createTemplatizedType(instanceType, inferredTypes);\n+          }\n         }\n       }\n     }\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n    * can currently be templatized; extend the logic in this function when\n    * more types can be templatized.\n    * @param baseType the type to be templatized.\n+   * @param templatizedTypes a map from TemplateType to corresponding JSType\n+   *     value. Any unfilled TemplateTypes on the baseType that are *not*\n+   *     contained in this map will have UNKNOWN_TYPE used as their value.\n+   */\n+  public TemplatizedType createTemplatizedType(\n+      ObjectType baseType, Map<TemplateType, JSType> templatizedTypes) {\n+    ImmutableList.Builder<JSType> builder = ImmutableList.builder();\n+    TemplateTypeMap baseTemplateTypeMap = baseType.getTemplateTypeMap();\n+    for (TemplateType key : baseTemplateTypeMap.getUnfilledTemplateKeys()) {\n+      JSType templatizedType = templatizedTypes.containsKey(key) ?\n+          templatizedTypes.get(key) : getNativeType(UNKNOWN_TYPE);\n+      builder.add(templatizedType);\n+    }\n+    return createTemplatizedType(baseType, builder.build());\n+  }\n+\n+  /**\n+   * Creates a templatized instance of the specified type.  Only ObjectTypes\n+   * can currently be templatized; extend the logic in this function when\n+   * more types can be templatized.\n+   * @param baseType the type to be templatized.\n    * @param templatizedTypes a list of the template JSTypes. Will be matched by\n    *     list order to the template keys on the base type.\n    */\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n     verify(\"y\", UNKNOWN_TYPE);\n   }\n \n+  public void testNew2() {\n+    inFunction(\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @param {T} x\\n\" +\n+        \" * @template T\\n\" +\n+        \" */\" +\n+        \"function F(x) {}\\n\" +\n+        \"var x = /** @type {!Array.<number>} */ ([]);\\n\" +\n+        \"var result = new F(x);\");\n+\n+    assertEquals(\"F.<Array.<number>>\", getType(\"result\").toString());\n+  }\n+\n+  public void testNew3() {\n+    inFunction(\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @param {Array.<T>} x\\n\" +\n+        \" * @param {T} y\\n\" +\n+        \" * @param {S} z\\n\" +\n+        \" * @template T,S\\n\" +\n+        \" */\" +\n+        \"function F(x,y,z) {}\\n\" +\n+        \"var x = /** @type {!Array.<number>} */ ([]);\\n\" +\n+        \"var y = /** @type {string} */ ('foo');\\n\" +\n+        \"var z = /** @type {boolean} */ (true);\\n\" +\n+        \"var result = new F(x,y,z);\");\n+\n+    assertEquals(\"F.<(number|string),boolean>\", getType(\"result\").toString());\n+  }\n+\n   public void testInnerFunction1() {\n     inFunction(\"var x = 1; function f() { x = null; };\");\n     verify(\"x\", NUMBER_TYPE);", "timestamp": 1366235074, "metainfo": ""}