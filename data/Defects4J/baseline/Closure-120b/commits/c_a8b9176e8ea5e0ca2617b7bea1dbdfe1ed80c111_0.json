{"sha": "a8b9176e8ea5e0ca2617b7bea1dbdfe1ed80c111", "log": "Readd RemoveUnusedClassProperties to advanced mode. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=49718178", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n     options.shadowVariables = true;\n     options.removeUnusedPrototypeProperties = true;\n     options.removeUnusedPrototypePropertiesInExterns = true;\n+    options.removeUnusedClassProperties = true;\n     options.collapseAnonymousFunctions = true;\n     options.collapseProperties = true;\n     options.checkGlobalThisLevel = CheckLevel.WARNING;\n         options.disambiguateProperties = true;\n         options.ambiguateProperties = true;\n         options.inlineProperties = true;\n-        // TODO(johnlenz) :removeUnusedClassProperties isn't strictly a\n-        // type based pass, but add it here for now because I may have to\n-        // make it into one.\n-        options.removeUnusedClassProperties = true;\n         break;\n       case SIMPLE_OPTIMIZATIONS:\n         // TODO(johnlenz): enable peephole type based optimization.\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n \n   public void testInlineVariables() {\n     args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n+    // Verify local var \"val\" in method \"bar\" is not inlined over the \"inc\"\n+    // method call (which has side-effects) but \"c\" is inlined (which can't be\n+    // modified by the call).\n     test(\n         \"/** @constructor */ function F() { this.a = 0; }\" +\n         \"F.prototype.inc = function() { this.a++; return 10; };\" +\n         \"F.prototype.bar = function() { \" +\n-        \"  var c = 3; var val = inc(); this.a += val + c;\" +\n+        \"  var c = 3; var val = this.inc(); this.a += val + c;\" +\n         \"};\" +\n         \"window['f'] = new F();\" +\n-        \"window['f']['bar'] = window['f'].bar;\",\n+        \"window['f']['inc'] = window['f'].inc;\" +\n+        \"window['f']['bar'] = window['f'].bar;\" +\n+        \"use(window['f'].a)\",\n         \"function a(){ this.a = 0; }\" +\n-        \"a.prototype.b = function(){ var b=inc(); this.a += b + 3; };\" +\n+        \"a.prototype.b = function(){ this.a++; return 10; };\" +\n+        \"a.prototype.c = function(){ var b=this.b(); this.a += b + 3; };\" +\n         \"window.f = new a;\" +\n-        \"window.f.bar = window.f.b\");\n+        \"window.f.inc = window.f.b;\" +\n+        \"window.f.bar = window.f.c;\" +\n+        \"use(window.f.a);\");\n   }\n \n   public void testTypedAdvanced() {\n--- a/test/com/google/javascript/jscomp/InlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/InlineVariablesTest.java\n     testSame(\n         \"function F() { this.a = 0; }\" +\n         \"F.prototype.inc = function() { this.a++; return 10; };\" +\n-        \"F.prototype.bar = function() { var val = inc(); this.a += val; };\");\n+        \"F.prototype.bar = function() { var x = this.inc(); this.a += x; };\");\n   }\n }", "timestamp": 1374523707, "metainfo": ""}