{"sha": "db506a36af5df9338b1141a9e163e7a39197fc18", "log": "Correctly process inline jsdocs for variable initializers. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=50122173", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n   }\n \n   /**\n-   * Parameter NAMEs are special, because they can have inline type docs\n-   * attached.\n+   * NAMEs in parameters or variable declarations are special, because they can\n+   * have inline type docs attached.\n    *\n    * function f(/** string &#42;/ x) {}\n    * annotates 'x' as a string.\n    * @see <a href=\"http://code.google.com/p/jsdoc-toolkit/wiki/InlineDocs\">\n    *   Using Inline Doc Comments</a>\n    */\n-  private Node transformParameter(AstNode node) {\n+  private Node transformNodeWithInlineJsDoc(AstNode node) {\n     Node irNode = justTransform(node);\n     Comment comment = node.getJsDocNode();\n     if (comment != null) {\n \n       lp.setCharno(position2charno(lparenCharno));\n       for (AstNode param : functionNode.getParams()) {\n-        Node paramNode = transformParameter(param);\n+        Node paramNode = transformNodeWithInlineJsDoc(param);\n         // When in ideMode Rhino can generate a param list with only a single\n         // ErrorNode. This is transformed into an EMPTY node. Drop this node in\n         // ideMode to keep the AST in a valid state.\n \n     @Override\n     Node processVariableInitializer(VariableInitializer initializerNode) {\n-      Node node = transform(initializerNode.getTarget());\n+      Node node;\n+      Comment comment = initializerNode.getTarget().getJsDocNode();\n+      // TODO(user): At some point, consider allowing only inline jsdocs for\n+      // variable initializers\n+      if (comment != null && !comment.getValue().contains(\"@\")) {\n+        node = transformNodeWithInlineJsDoc(initializerNode.getTarget());\n+      } else {\n+        node = transform(initializerNode.getTarget());\n+      }\n       if (initializerNode.getInitializer() != null) {\n         Node initalizer = transform(initializerNode.getInitializer());\n         node.addChildToBack(initalizer);\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n         \" * @type {string}\\n\" +\n         \" */ x) {}\",\n         \"Bad type annotation. type not recognized due to syntax error\");\n+  }\n+\n+  public void testInlineJSDocAttachment5() {\n+    Node vardecl = parse(\"var /** string */ x = 'asdf';\").getFirstChild();\n+    JSDocInfo info = vardecl.getFirstChild().getJSDocInfo();\n+    assertNotNull(info);\n+    assertTypeEquals(STRING_TYPE, info.getType());\n   }\n \n   public void testIncorrectJSDocDoesNotAlterJSParsing1() throws Exception {", "timestamp": 1375753476, "metainfo": ""}