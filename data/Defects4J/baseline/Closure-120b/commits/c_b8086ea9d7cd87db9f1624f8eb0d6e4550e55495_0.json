{"sha": "b8086ea9d7cd87db9f1624f8eb0d6e4550e55495", "log": "Record the source file in params, so that they get proper source info  R=jschorr DELTA=35  (24 added, 0 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3361   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.ScriptRuntime;\n import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.StaticSourceFile;\n+\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n \n   private final JsDocTokenStream stream;\n   private final JSDocInfoBuilder jsdocBuilder;\n-  private final String sourceName;\n+  private final StaticSourceFile sourceFile;\n   private final Node associatedNode;\n   private final ErrorReporter errorReporter;\n   private final ErrorReporterParser parser = new ErrorReporterParser();\n     void addParserWarning(String messageId, String messageArg, int lineno,\n         int charno) {\n       errorReporter.warning(ScriptRuntime.getMessage1(messageId, messageArg),\n-          sourceName, lineno, null, charno);\n+          getSourceName(), lineno, null, charno);\n     }\n \n     void addParserWarning(String messageId, int lineno, int charno) {\n       errorReporter.warning(ScriptRuntime.getMessage0(messageId),\n-          sourceName, lineno, null, charno);\n+          getSourceName(), lineno, null, charno);\n     }\n \n     void addTypeWarning(String messageId, String messageArg, int lineno,\n       errorReporter.warning(\n           \"Bad type annotation. \" +\n           ScriptRuntime.getMessage1(messageId, messageArg),\n-          sourceName, lineno, null, charno);\n+          getSourceName(), lineno, null, charno);\n     }\n \n     void addTypeWarning(String messageId, int lineno, int charno) {\n       errorReporter.warning(\n           \"Bad type annotation. \" +\n           ScriptRuntime.getMessage0(messageId),\n-          sourceName, lineno, null, charno);\n+          getSourceName(), lineno, null, charno);\n     }\n   }\n \n     this.associatedNode = associatedNode;\n \n     // Sometimes this will be null in tests.\n-    this.sourceName = associatedNode == null ? \"\" : associatedNode.getSourceFileName();\n+    this.sourceFile = associatedNode == null\n+        ? null : associatedNode.getStaticSourceFile();\n \n     this.jsdocBuilder = new JSDocInfoBuilder(config.parseJsDocDocumentation);\n     if (commentNode != null) {\n \n     this.errorReporter = errorReporter;\n     this.templateNode = this.createTemplateNode();\n+  }\n+\n+  private String getSourceName() {\n+    return sourceFile == null ? null : sourceFile.getName();\n   }\n \n   /**\n                     continue retry;\n                   }\n \n-                  jsdocBuilder.markName(name, lineno, charno);\n+                  jsdocBuilder.markName(name, sourceFile, lineno, charno);\n \n                   // Find the parameter's description (if applicable).\n                   if (jsdocBuilder.shouldParseDocumentation()) {\n    */\n   private JSTypeExpression createJSTypeExpression(Node n) {\n     return n == null ? null :\n-        new JSTypeExpression(n, sourceName);\n+        new JSTypeExpression(n, getSourceName());\n   }\n \n   /**\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n \n import com.google.javascript.rhino.JSDocInfo.Visibility;\n import com.google.javascript.rhino.Token;\n+import com.google.javascript.rhino.jstype.StaticSourceFile;\n \n import java.util.Set;\n \n \n   /**\n    * Adds a name declaration to the current marker.\n-   */\n-  public void markName(String name, int lineno, int charno) {\n+   * @deprecated Use #markName(String, StaticSourceFile, int, int)\n+   */\n+  @Deprecated\n+  public void markName(String name,  int lineno, int charno) {\n+    markName(name, null, lineno, charno);\n+  }\n+\n+  /**\n+   * Adds a name declaration to the current marker.\n+   */\n+  public void markName(String name, StaticSourceFile file,\n+      int lineno, int charno) {\n     if (currentMarker != null) {\n       // Record the name as both a SourcePosition<String> and a\n       // SourcePosition<Node>. The <String> form is deprecated,\n           new JSDocInfo.NamePosition();\n       Node node = Node.newString(Token.NAME, name, lineno, charno);\n       node.setLength(name.length());\n+      node.setStaticSourceFile(file);\n       nodePos.setItem(node);\n       nodePos.setPositionInformation(lineno, charno,\n           lineno, charno + name.length());\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n     for (int i = 0; i < refs.size(); i++) {\n       Reference ref = refs.get(i);\n       assertEquals(i != last, ref.getNode().isFromExterns());\n+      if (!ref.getNode().isFromExterns()) {\n+        assertEquals(\"in1\", ref.getNode().getSourceFileName());\n+      }\n     }\n   }\n \n \n     assertEquals(code.indexOf(\"x) {\"), refs.get(0).getNode().getCharno());\n     assertEquals(code.indexOf(\"x */\"), refs.get(1).getNode().getCharno());\n+    assertEquals(\"in1\",\n+        refs.get(0).getNode().getSourceFileName());\n   }\n \n   public void testGlobalQualifiedNamesInLocalScopes() {", "timestamp": 1317252309, "metainfo": ""}