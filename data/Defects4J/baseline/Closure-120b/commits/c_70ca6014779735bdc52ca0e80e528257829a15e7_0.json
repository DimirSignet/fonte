{"sha": "70ca6014779735bdc52ca0e80e528257829a15e7", "log": "Emit an error if there are dangling functions in the goog.scope fixes issue 737  R=johnlenz DELTA=26  (7 added, 0 deleted, 19 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4853   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ScopedAliases.java\n+++ b/src/com/google/javascript/jscomp/ScopedAliases.java\n         Node n = v.getNode();\n         int type = n.getType();\n         Node parent = n.getParent();\n-        if (parent.isVar()) {\n-          if (n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n-            String name = n.getString();\n-            Var aliasVar = scope.getVar(name);\n-            aliases.put(name, aliasVar);\n-\n-            String qualifiedName =\n-                aliasVar.getInitialValue().getQualifiedName();\n-            transformation.addAlias(name, qualifiedName);\n-          } else {\n-            // TODO(robbyw): Support using locals for private variables.\n-            report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n-          }\n+        if (parent.isVar() &&\n+            n.hasChildren() && n.getFirstChild().isQualifiedName()) {\n+          String name = n.getString();\n+          Var aliasVar = scope.getVar(name);\n+          aliases.put(name, aliasVar);\n+\n+          String qualifiedName =\n+              aliasVar.getInitialValue().getQualifiedName();\n+          transformation.addAlias(name, qualifiedName);\n+        } else if (v.isBleedingFunction()) {\n+          // Bleeding functions already get a BAD_PARAMETERS error, so just\n+          // do nothing.\n+        } else if (parent.getType() == Token.LP) {\n+          // Parameters of the scope function also get a BAD_PARAMETERS\n+          // error.\n+        } else {\n+          // TODO(robbyw): Support using locals for private variables.\n+          report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());\n         }\n       }\n     }\n--- a/test/com/google/javascript/jscomp/ScopedAliasesTest.java\n+++ b/test/com/google/javascript/jscomp/ScopedAliasesTest.java\n         \" * @constructor\\n\" +\n         \" */\\n\" +\n         \"foo.Foo = function() {};\" +\n-        \"/** @param {Foo.Bar} x */ function actual(x) {3}\" +\n+        \"/** @param {Foo.Bar} x */ foo.Foo.actual = function(x) {3};\" +\n         \"var Foo = foo.Foo;\" +\n         \"/** @constructor */ Foo.Bar = function() {};\" +\n-        \"/** @param {foo.Foo.Bar} x */ function expected(x) {}\",\n+        \"/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};\",\n \n         \"/**\\n\" +\n         \" * @constructor\\n\" +\n         \" */\\n\" +\n         \"foo.Foo = function() {};\" +\n-        \"/** @param {foo.Foo.Bar} x */ function actual(x) {3}\" +\n+        \"/** @param {foo.Foo.Bar} x */ foo.Foo.actual = function(x) {3};\" +\n         \"/** @constructor */ foo.Foo.Bar = function() {};\" +\n-        \"/** @param {foo.Foo.Bar} x */ function expected(x) {}\");\n+        \"/** @param {foo.Foo.Bar} x */ foo.Foo.expected = function(x) {};\");\n     verifyTypes();\n   }\n \n     testScopedFailure(\"var x = goog['dom']\",\n         ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);\n     testScopedFailure(\"var x = goog.dom, y = 10\",\n+        ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);\n+    testScopedFailure(\"function f() {}\",\n         ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);\n   }\n ", "timestamp": 1337874863, "metainfo": ""}