{"sha": "3a8f393fbeede6a2916995b22081f10608056a2b", "log": "Allow constructors which specify an explicit return type to be called without the \"new\" keyword  R=johnlenz", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckMissingReturn.java\n+++ b/src/com/google/javascript/jscomp/CheckMissingReturn.java\n   /**\n    * Determines if the given scope should explicitly return. All functions\n    * with non-void or non-unknown return types must have explicit returns.\n+   * \n+   * Exception: Constructors which specifically specify a return type are\n+   * used to allow invocation without requiring the \"new\" keyword. They\n+   * have an implicit return type. See unit tests.\n+   * \n    * @return If a return type is expected, returns it. Otherwise, returns null.\n    */\n   private JSType explicitReturnExpected(Node scope) {\n       return null;\n     }\n \n+    if (scopeType.isConstructor()) {\n+      return null;\n+    }\n+\n     JSType returnType = scopeType.getReturnType();\n \n     if (returnType == null) {\n \n     return null;\n   }\n-\n \n   /**\n    * @return {@code true} if function represents a JavaScript function\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n       if (functionType.isConstructor() &&\n           !functionType.isNativeObjectType() &&\n           (functionType.getReturnType().isUnknownType() ||\n-           functionType.getReturnType().isVoidType() ||\n-           !isExtern)) {\n+           functionType.getReturnType().isVoidType())) {\n         report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());\n       }\n \n--- a/test/com/google/javascript/jscomp/CheckMissingReturnTest.java\n+++ b/test/com/google/javascript/jscomp/CheckMissingReturnTest.java\n         \"finally { a = 5; } return 2;\");\n   }\n \n+  public void testConstructors() {\n+    testSame(\"/** @constructor */ function foo() {} \");\n+\n+    final String ConstructorWithReturn = \"/** @constructor \\n\" +\n+        \" * @return {!foo} */ function foo() {\" +\n+        \" if (!(this instanceof foo)) { return new foo; } }\";\n+    testSame(ConstructorWithReturn);\n+  }\n+\n   private static String createFunction(String returnType, String body) {\n     return \"/** @return {\" + returnType + \"} */ function foo() {\" + body + \"}\";\n   }\n--- a/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckFunctionCheckTest.java\n         \"Foo.staticMethod(1);\",\n         TypeCheck.WRONG_ARGUMENT_COUNT);\n \n-    // Constructor calls require new keyword\n-    testSame(METHOD_DEFS + \"Bar();\", TypeCheck.CONSTRUCTOR_NOT_CALLABLE);\n-\n-    // Extern constructor calls require new keyword\n+    // Constructor calls require \"new\" keyword\n+    testSame(METHOD_DEFS + \"Foo();\", TypeCheck.CONSTRUCTOR_NOT_CALLABLE);\n+\n+    // Constructors with explicit return type can be called without\n+    // the \"new\" keyword\n+    testSame(METHOD_DEFS + \"Bar();\", null);\n+\n+    // Extern constructor calls require \"new\" keyword\n     testSame(METHOD_DEFS, \"Foo();\", TypeCheck.CONSTRUCTOR_NOT_CALLABLE);\n \n-    // Extern constructor call without new keyword\n+    // Extern constructor with explicit return type can be called without\n+    // the \"new\" keyword\n     testSame(METHOD_DEFS, \"Bar();\", null);\n   }\n ", "timestamp": 1371585972, "metainfo": ""}