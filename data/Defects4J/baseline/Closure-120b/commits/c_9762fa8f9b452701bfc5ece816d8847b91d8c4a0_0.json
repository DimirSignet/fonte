{"sha": "9762fa8f9b452701bfc5ece816d8847b91d8c4a0", "log": "Automated g4 rollback.  *** Reason for rollback ***  causes NPEs  *** Original change description ***  -Make RemoveUnusedVars's parameter removal understand goog.inherits and calling functions with .call().  DELTA=53  (4 added, 39 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=803   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n       // Check all the call sites.\n       for (UseSite site : defFinder.getUseSites(definition)) {\n         if (isModifableCallSite(site)) {\n-          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n+          Node arg = NodeUtil.getArgumentForCallOrNew(\n+              site.node.getParent(), argIndex);\n           // TODO(johnlenz): try to remove parameters with side-effects by\n           // decomposing the call expression.\n           if (arg != null && NodeUtil.mayHaveSideEffects(arg, compiler)) {\n \n       for (UseSite site : defFinder.getUseSites(definition)) {\n         if (isModifableCallSite(site)) {\n-          Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n+          Node arg = NodeUtil.getArgumentForCallOrNew(\n+              site.node.getParent(), argIndex);\n           if (arg != null) {\n             Node argParent = arg.getParent();\n             // Even if we can't change the signature in general we can always\n         if (!isModifableCallSite(site)) {\n           continue;\n         }\n-        Node arg = getArgumentForCallOrNewOrDotCall(site, argIndex);\n+\n+        Node arg = NodeUtil.getArgumentForCallOrNew(\n+            site.node.getParent(), argIndex);\n         while (arg != null) {\n           Node next = arg.getNext();\n           if (next != null && !NodeUtil.mayHaveSideEffects(next)) {\n           }\n         }\n       }\n-    }\n-\n-    /**\n-     * Returns the nth argument node given a usage site for a direct function\n-     * call or for a func.call() node.\n-     */\n-    private static Node getArgumentForCallOrNewOrDotCall(UseSite site,\n-        final int argIndex) {\n-      int adjustedArgIndex = argIndex;\n-      Node parent = site.node.getParent();\n-      if (NodeUtil.isFunctionObjectCall(parent)) {\n-        adjustedArgIndex++;\n-      }\n-      return NodeUtil.getArgumentForCallOrNew(parent, adjustedArgIndex);\n     }\n \n     /**\n      */\n     private static boolean isModifableCallSite(UseSite site) {\n       return SimpleDefinitionFinder.isCallOrNewSite(site)\n-          && !NodeUtil.isFunctionObjectApply(site.node.getParent());\n+          && !NodeUtil.isFunctionObjectCallOrApply(site.node.getParent());\n     }\n \n     /**\n      */\n     private boolean canChangeSignature(Node function) {\n       Definition definition = getFunctionDefinition(function);\n-      CodingConvention convention = compiler.getCodingConvention();\n \n       Preconditions.checkState(!definition.isExtern());\n \n       Collection<UseSite> useSites = defFinder.getUseSites(definition);\n       for (UseSite site : useSites) {\n-        Node parent = site.node.getParent();\n-\n-        // Ignore references within goog.inherits calls.\n-        if (NodeUtil.isCall(parent) &&\n-            convention.getClassesDefinedByCall(parent) != null) {\n-          continue;\n-        }\n-\n         // Accessing the property directly prevents rewrite.\n         if (!SimpleDefinitionFinder.isCallOrNewSite(site)) {\n-          if (!(NodeUtil.isGetProp(parent) &&\n-              NodeUtil.isFunctionObjectCall(parent.getParent()))) {\n-            return false;\n-          }\n-        }\n-\n-        if (NodeUtil.isFunctionObjectApply(parent)) {\n+          return false;\n+        }\n+\n+        // TODO(johnlenz): support .call signature changes.\n+        if (NodeUtil.isFunctionObjectCallOrApply(site.node.getParent())) {\n           return false;\n         }\n \n--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n     testSame(\"var b=function(){return};b()\");\n     testSame(\"var b=function(c){return c};b(1)\");\n     test(\"var b=function(c){};b.call(null, x)\",\n-         \"var b=function(){};b.call(null)\");\n+         \"var b=function(){};b.call(null, x)\");\n     test(\"var b=function(c){};b.apply(null, x)\",\n          \"var b=function(){};b.apply(null, x)\");\n \n          \"var b=function(){};var b=function(){};b(1,2)\");\n   }\n \n-  public void testCallSiteInteraction_contructors() {\n-    this.modifyCallSites = true;\n-    // The third level tests that the functions which have already been looked\n-    // at get re-visited if they are changed by a call site removal.\n-    test(\"var Ctor1=function(a,b){return a};\" +\n-        \"var Ctor2=function(a,b){Ctor1.call(this,a,b)};\" +\n-        \"goog$inherits(Ctor2, Ctor1);\" +\n-        \"new Ctor2(1,2)\",\n-        \"var Ctor1=function(a){return a};\" +\n-        \"var Ctor2=function(a){Ctor1.call(this,a)};\" +\n-        \"goog$inherits(Ctor2, Ctor1);\" +\n-        \"new Ctor2(1)\");\n-  }\n-\n   public void testDoNotOptimizeJSCompiler_renameProperty() {\n     this.modifyCallSites = true;\n \n     // this.modifyCallSites = false;\n     testSame(\"({set s(a) {}})\");\n   }\n-\n+  \n   public void testRemoveInheritedClass1() {\n     test(\"function goog$inherits(){}\" +\n         \"/**@constructor*/function a(){}\" +\n         \"goog$inherits(b,a); new a\",\n         \"function a(){} new a\");\n   }\n-\n+  \n   public void testRemoveInheritedClass2() {\n     test(\"function goog$inherits(){}\" +\n         \"function goog$mixin(){}\" +\n         \"function c(){}\" +\n         \"goog$mixin(c.prototype,a.prototype); new c\");\n   }\n-\n+  \n   public void testRemoveInheritedClass7() {\n     test(\"function goog$mixin(){}\" +\n         \"/**@constructor*/function a(){alert(goog$mixin(a, a))}\" +\n         \"function goog$mixin(){}\" +\n         \"function a(){alert(goog$mixin(a, a))} new a\");\n   }\n-\n+  \n   public void testRemoveInheritedClass8() {\n     test(\"/**@constructor*/function a(){}\" +\n         \"/**@constructor*/function b(){}\" +\n         \"/**@constructor*/function c(){}\" +\n         \"b.inherits(a);c.mixin(b.prototype);new c\");\n   }\n-\n+  \n   public void testRemoveInheritedClass10() {\n     test(\"function goog$inherits(){}\" +\n         \"/**@constructor*/function a(){}\" +\n         \"function goog$inherits(){}\" +\n         \"function a(){} function b(){} goog$inherits(b,a); new a; new b\");\n   }\n-\n+  \n   public void testRemoveInheritedClass11() {\n     testSame(\"function goog$inherits(){}\" +\n         \"function goog$mixin(a,b){goog$inherits(a,b)}\" +", "timestamp": 1299647968, "metainfo": ""}