{"sha": "fe5f03ca2181173fab182a6b048d46cf5c821a2a", "log": "Automated g4 rollback  *** Reason for rollback ***  i'm going to make this an option instead  *** Original change description ***  Use single quotes by default for command-line runners. Fixes issue 836.  R=johnlenz DELTA=265  (0 added, 20 deleted, 245 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5695   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n     this.config = new CommandLineConfig();\n     this.jsOutput = Preconditions.checkNotNull(out);\n     this.err = Preconditions.checkNotNull(err);\n-    CodeGenerator.setPreferDoubleQuotesCompatFlag(false);\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n \n   CodeGenerator(CodeConsumer consumer) {\n     this(consumer, null);\n-  }\n-\n-  private static boolean preferDoubleQuotesCompatFlag = true;\n-\n-  /**\n-   * We want to prefer single quotes for strings.\n-   * This ensures that if the code has to be bundled in a JSON blob, we do\n-   * less escaping (see issue 836 for more info)\n-   * However, many tests we're written when we prefered double-quotes,\n-   * so we add a compat flag to make sure these tests still pass.\n-   */\n-  public static void setPreferDoubleQuotesCompatFlag(boolean newVal) {\n-    preferDoubleQuotesCompatFlag = newVal;\n   }\n \n   /**\n \n     String doublequote, singlequote;\n     char quote;\n-    if (preferDoubleQuotesCompatFlag ?\n-        (singleq < doubleq) : (singleq <= doubleq)) {\n-      // more double quotes so enclose in single quotes.\n-      // If there's a tie, and the compat flag is off, we use single quotes.\n+    if (singleq < doubleq) {\n+      // more double quotes so escape the single quotes\n       quote = '\\'';\n       doublequote = \"\\\"\";\n       singlequote = \"\\\\\\'\";\n     } else {\n-      // more single quotes so enclose in doubles\n+      // more single quotes so escape the doubles\n       quote = '\\\"';\n       doublequote = \"\\\\\\\"\";\n       singlequote = \"\\'\";\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n import java.util.List;\n \n public class CodePrinterTest extends TestCase {\n-  public CodePrinterTest() {\n-    CodeGenerator.setPreferDoubleQuotesCompatFlag(false);\n-  }\n-\n   static Node parse(String js) {\n     return parse(js, false);\n   }\n     assertPrint(\"a instanceof b\", \"a instanceof b\");\n     assertPrint(\"typeof(a)\", \"typeof a\");\n     assertPrint(\n-        \"var foo = x ? { a : 1 } : {a: 3, b:4, 'default': 5, 'foo-bar': 6}\",\n-        \"var foo=x?{a:1}:{a:3,b:4,'default':5,'foo-bar':6}\");\n+        \"var foo = x ? { a : 1 } : {a: 3, b:4, \\\"default\\\": 5, \\\"foo-bar\\\": 6}\",\n+        \"var foo=x?{a:1}:{a:3,b:4,\\\"default\\\":5,\\\"foo-bar\\\":6}\");\n \n     // Safari: needs ';' at the end of a throw statement\n     assertPrint(\"function foo(){throw 'error';}\",\n-        \"function foo(){throw'error';}\");\n+        \"function foo(){throw\\\"error\\\";}\");\n     // Safari 3 needs a \"{\" around a single function\n     assertPrint(\"if (true) function foo(){return}\",\n         \"if(true){function foo(){return}}\");\n         \"var a,b,c;a*=b-=c\");\n \n     // Break scripts\n-    assertPrint(\"'<script>'\", \"'<script>'\");\n-    assertPrint(\"'</script>'\", \"'<\\\\/script>'\");\n-    assertPrint(\"\\\"</script> </SCRIPT>\\\"\", \"'<\\\\/script> <\\\\/SCRIPT>'\");\n-\n-    assertPrint(\"'-->'\", \"'--\\\\>'\");\n-    assertPrint(\"']]>'\", \"']]\\\\>'\");\n-    assertPrint(\"' --></script>'\", \"' --\\\\><\\\\/script>'\");\n+    assertPrint(\"'<script>'\", \"\\\"<script>\\\"\");\n+    assertPrint(\"'</script>'\", \"\\\"<\\\\/script>\\\"\");\n+    assertPrint(\"\\\"</script> </SCRIPT>\\\"\", \"\\\"<\\\\/script> <\\\\/SCRIPT>\\\"\");\n+\n+    assertPrint(\"'-->'\", \"\\\"--\\\\>\\\"\");\n+    assertPrint(\"']]>'\", \"\\\"]]\\\\>\\\"\");\n+    assertPrint(\"' --></script>'\", \"\\\" --\\\\><\\\\/script>\\\"\");\n \n     assertPrint(\"/--> <\\\\/script>/g\", \"/--\\\\> <\\\\/script>/g\");\n \n     // Break HTML start comments. Certain versions of WebKit\n     // begin an HTML comment when they see this.\n-    assertPrint(\"'<!-- I am a string -->'\", \"'<\\\\!-- I am a string --\\\\>'\");\n+    assertPrint(\"'<!-- I am a string -->'\", \"\\\"<\\\\!-- I am a string --\\\\>\\\"\");\n \n     // Precedence\n     assertPrint(\"a ? delete b[0] : 3\", \"a?delete b[0]:3\");\n     // simple new\n     assertPrint(\"new A\", \"new A\");\n     assertPrint(\"new A()\", \"new A\");\n-    assertPrint(\"new A('x')\", \"new A('x')\");\n+    assertPrint(\"new A('x')\", \"new A(\\\"x\\\")\");\n \n     // calling instance method directly after new\n     assertPrint(\"new A().a()\", \"(new A).a()\");\n     assertPrint(\"(new A).a()\", \"(new A).a()\");\n \n     // this case should be fixed\n-    assertPrint(\"new A('y').a()\", \"(new A('y')).a()\");\n+    assertPrint(\"new A('y').a()\", \"(new A(\\\"y\\\")).a()\");\n \n     // internal class\n     assertPrint(\"new A.B\", \"new A.B\");\n     assertPrint(\"new A.B()\", \"new A.B\");\n-    assertPrint(\"new A.B('z')\", \"new A.B('z')\");\n+    assertPrint(\"new A.B('z')\", \"new A.B(\\\"z\\\")\");\n \n     // calling instance method directly after new internal class\n     assertPrint(\"(new A.B).a()\", \"(new A.B).a()\");\n     assertPrint(\"new A.B().a()\", \"(new A.B).a()\");\n     // this case should be fixed\n-    assertPrint(\"new A.B('w').a()\", \"(new A.B('w')).a()\");\n+    assertPrint(\"new A.B('w').a()\", \"(new A.B(\\\"w\\\")).a()\");\n \n     // Operators: make sure we don't convert binary + and unary + into ++\n     assertPrint(\"x + +y\", \"x+ +y\");\n     assertPrint(\"({})\", \"({})\");\n     assertPrint(\"var x = {};\", \"var x={}\");\n     assertPrint(\"({}).x\", \"({}).x\");\n-    assertPrint(\"({})['x']\", \"({})['x']\");\n+    assertPrint(\"({})['x']\", \"({})[\\\"x\\\"]\");\n     assertPrint(\"({}) instanceof Object\", \"({})instanceof Object\");\n     assertPrint(\"({}) || 1\", \"({})||1\");\n     assertPrint(\"1 || ({})\", \"1||{}\");\n     assertPrint(\"function f(){}\", \"function f(){}\");\n \n     // Make sure we don't treat non-Latin character escapes as raw strings.\n-    assertPrint(\"({ 'a': 4, '\\\\u0100': 4 })\", \"({'a':4,'\\\\u0100':4})\");\n-    assertPrint(\"({ a: 4, '\\\\u0100': 4 })\", \"({a:4,'\\\\u0100':4})\");\n+    assertPrint(\"({ 'a': 4, '\\\\u0100': 4 })\", \"({\\\"a\\\":4,\\\"\\\\u0100\\\":4})\");\n+    assertPrint(\"({ a: 4, '\\\\u0100': 4 })\", \"({a:4,\\\"\\\\u0100\\\":4})\");\n \n     // Test if statement and for statements with single statements in body.\n     assertPrint(\"if (true) { alert();}\", \"if(true)alert()\");\n-    assertPrint(\"if (false) {} else {alert('a');}\",\n-        \"if(false);else alert('a')\");\n+    assertPrint(\"if (false) {} else {alert(\\\"a\\\");}\",\n+        \"if(false);else alert(\\\"a\\\")\");\n     assertPrint(\"for(;;) { alert();};\", \"for(;;)alert()\");\n \n     assertPrint(\"do { alert(); } while(true);\",\n     // Check for in expression in for's init expression.\n     // Check alone, with + (higher precedence), with ?: (lower precedence),\n     // and with conditional.\n-    assertPrint(\"var a={}; for (var i = ('length' in a); i;) {}\",\n-        \"var a={};for(var i=('length'in a);i;);\");\n-    assertPrint(\"var a={}; for (var i = ('length' in a) ? 0 : 1; i;) {}\",\n-        \"var a={};for(var i=('length'in a)?0:1;i;);\");\n-    assertPrint(\"var a={}; for (var i = ('length' in a) + 1; i;) {}\",\n-        \"var a={};for(var i=('length'in a)+1;i;);\");\n-    assertPrint(\"var a={};for (var i = ('length' in a|| 'size' in a);;);\",\n-        \"var a={};for(var i=('length'in a)||('size'in a);;);\");\n-    assertPrint(\"var a={};for (var i = a || a || ('size' in a);;);\",\n-        \"var a={};for(var i=a||a||('size'in a);;);\");\n+    assertPrint(\"var a={}; for (var i = (\\\"length\\\" in a); i;) {}\",\n+        \"var a={};for(var i=(\\\"length\\\"in a);i;);\");\n+    assertPrint(\"var a={}; for (var i = (\\\"length\\\" in a) ? 0 : 1; i;) {}\",\n+        \"var a={};for(var i=(\\\"length\\\"in a)?0:1;i;);\");\n+    assertPrint(\"var a={}; for (var i = (\\\"length\\\" in a) + 1; i;) {}\",\n+        \"var a={};for(var i=(\\\"length\\\"in a)+1;i;);\");\n+    assertPrint(\"var a={};for (var i = (\\\"length\\\" in a|| \\\"size\\\" in a);;);\",\n+        \"var a={};for(var i=(\\\"length\\\"in a)||(\\\"size\\\"in a);;);\");\n+    assertPrint(\"var a={};for (var i = a || a || (\\\"size\\\" in a);;);\",\n+        \"var a={};for(var i=a||a||(\\\"size\\\"in a);;);\");\n \n     // Test works with unary operators and calls.\n-    assertPrint(\"var a={}; for (var i = -('length' in a); i;) {}\",\n-        \"var a={};for(var i=-('length'in a);i;);\");\n+    assertPrint(\"var a={}; for (var i = -(\\\"length\\\" in a); i;) {}\",\n+        \"var a={};for(var i=-(\\\"length\\\"in a);i;);\");\n     assertPrint(\"var a={};function b_(p){ return p;};\" +\n-        \"for(var i=1,j=b_('length' in a);;) {}\",\n+        \"for(var i=1,j=b_(\\\"length\\\" in a);;) {}\",\n         \"var a={};function b_(p){return p}\" +\n-            \"for(var i=1,j=b_('length'in a);;);\");\n+            \"for(var i=1,j=b_(\\\"length\\\"in a);;);\");\n \n     // Test we correctly handle an in operator in the test clause.\n-    assertPrint(\"var a={}; for (;('length' in a);) {}\",\n-        \"var a={};for(;'length'in a;);\");\n+    assertPrint(\"var a={}; for (;(\\\"length\\\" in a);) {}\",\n+        \"var a={};for(;\\\"length\\\"in a;);\");\n   }\n \n   public void testLiteralProperty() {\n   public void testPreferLineBreakAtEndOfFile() {\n     // short final line, no previous break, do nothing\n     assertLineBreakAtEndOfFile(\n-        \"'1234567890';\",\n-        \"'1234567890'\",\n-        \"'1234567890'\");\n+        \"\\\"1234567890\\\";\",\n+        \"\\\"1234567890\\\"\",\n+        \"\\\"1234567890\\\"\");\n \n     // short final line, shift previous break to end\n     assertLineBreakAtEndOfFile(\n-        \"'123456789012345678901234567890';'1234567890'\",\n-        \"'123456789012345678901234567890';\\n'1234567890'\",\n-        \"'123456789012345678901234567890'; '1234567890';\\n\");\n+        \"\\\"123456789012345678901234567890\\\";\\\"1234567890\\\"\",\n+        \"\\\"123456789012345678901234567890\\\";\\n\\\"1234567890\\\"\",\n+        \"\\\"123456789012345678901234567890\\\"; \\\"1234567890\\\";\\n\");\n     assertLineBreakAtEndOfFile(\n         \"var12345678901234567890123456 instanceof Object;\",\n         \"var12345678901234567890123456 instanceof\\nObject\",\n \n     // long final line, no previous break, add a break at end\n     assertLineBreakAtEndOfFile(\n-        \"'1234567890';'12345678901234567890';\",\n-        \"'1234567890';'12345678901234567890'\",\n-        \"'1234567890';'12345678901234567890';\\n\");\n+        \"\\\"1234567890\\\";\\\"12345678901234567890\\\";\",\n+        \"\\\"1234567890\\\";\\\"12345678901234567890\\\"\",\n+        \"\\\"1234567890\\\";\\\"12345678901234567890\\\";\\n\");\n \n     // long final line, previous break, add a break at end\n     assertLineBreakAtEndOfFile(\n-        \"'123456789012345678901234567890';'12345678901234567890';\",\n-        \"'123456789012345678901234567890';\\n'12345678901234567890'\",\n-        \"'123456789012345678901234567890';\\n'12345678901234567890';\\n\");\n+        \"\\\"123456789012345678901234567890\\\";\\\"12345678901234567890\\\";\",\n+        \"\\\"123456789012345678901234567890\\\";\\n\\\"12345678901234567890\\\"\",\n+        \"\\\"123456789012345678901234567890\\\";\\n\\\"12345678901234567890\\\";\\n\");\n   }\n \n   private void assertLineBreakAtEndOfFile(String js,\n     assertPrettyPrint(\"if (1) {}\",\n         \"if(1) {\\n\" +\n         \"}\\n\");\n-    assertPrettyPrint(\"if (1) {alert('');}\",\n+    assertPrettyPrint(\"if (1) {alert(\\\"\\\");}\",\n         \"if(1) {\\n\" +\n-        \"  alert('')\\n\" +\n-        \"}\\n\");\n-    assertPrettyPrint(\"if (1)alert('');\",\n+        \"  alert(\\\"\\\")\\n\" +\n+        \"}\\n\");\n+    assertPrettyPrint(\"if (1)alert(\\\"\\\");\",\n         \"if(1) {\\n\" +\n-        \"  alert('')\\n\" +\n+        \"  alert(\\\"\\\")\\n\" +\n         \"}\\n\");\n     assertPrettyPrint(\"if (1) {alert();alert();}\",\n         \"if(1) {\\n\" +\n         + \" */\\n\"\n         + \"a.Foo.prototype.foo = function(foo) {\\n  return 3\\n};\\n\"\n         + \"/** @type {string} */\\n\"\n-        + \"a.Foo.prototype.bar = '';\\n\");\n+        + \"a.Foo.prototype.bar = \\\"\\\";\\n\");\n   }\n \n   public void testTypeAnnotationsImplements() {\n   public void testEnumAnnotation1() {\n     assertTypeAnnotations(\n         \"/** @enum {string} */ var Enum = {FOO: 'x', BAR: 'y'};\",\n-        \"/** @enum {string} */\\nvar Enum = {FOO:'x', BAR:'y'};\\n\");\n+        \"/** @enum {string} */\\nvar Enum = {FOO:\\\"x\\\", BAR:\\\"y\\\"};\\n\");\n   }\n \n   public void testEnumAnnotation2() {\n         \"/** @enum {string} */ goog.Enum = {FOO: 'x', BAR: 'y'};\" +\n         \"/** @const */ goog.Enum2 = goog.x ? {} : goog.Enum;\",\n         \"var goog = goog || {};\\n\" +\n-        \"/** @enum {string} */\\ngoog.Enum = {FOO:'x', BAR:'y'};\\n\" +\n+        \"/** @enum {string} */\\ngoog.Enum = {FOO:\\\"x\\\", BAR:\\\"y\\\"};\\n\" +\n         \"/** @type {(Object|{})} */\\ngoog.Enum2 = goog.x ? {} : goog.Enum;\\n\");\n   }\n \n   public void testFunctionWithCall() {\n     assertPrint(\n         \"var user = new function() {\"\n-        + \"alert('foo')}\",\n+        + \"alert(\\\"foo\\\")}\",\n         \"var user=new function(){\"\n-        + \"alert('foo')}\");\n+        + \"alert(\\\"foo\\\")}\");\n     assertPrint(\n         \"var user = new function() {\"\n-        + \"this.name = 'foo';\"\n+        + \"this.name = \\\"foo\\\";\"\n         + \"this.local = function(){alert(this.name)};}\",\n         \"var user=new function(){\"\n-        + \"this.name='foo';\"\n+        + \"this.name=\\\"foo\\\";\"\n         + \"this.local=function(){alert(this.name)}}\");\n   }\n \n \n     // operators, and two breaks\n     assertLineLength(\n-        \"'foo'+'bar,baz,bomb'+'whee'+';long-string'\\n+'aaa'\",\n-        \"'foo'+'bar,baz,bomb'+\" +\n-        \"\\n'whee'+';long-string'+\" +\n-        \"\\n'aaa'\");\n+        \"\\\"foo\\\"+\\\"bar,baz,bomb\\\"+\\\"whee\\\"+\\\";long-string\\\"\\n+\\\"aaa\\\"\",\n+        \"\\\"foo\\\"+\\\"bar,baz,bomb\\\"+\" +\n+        \"\\n\\\"whee\\\"+\\\";long-string\\\"+\" +\n+        \"\\n\\\"aaa\\\"\");\n \n     // assignment\n     assertLineLength(\"var abazaba=1234\",\n         \"\\nvar b=a\");\n \n     // don't break strings\n-    assertLineLength(\"var a='foo,{bar};baz';var b=a\",\n-        \"var a='foo,{bar};baz';\" +\n+    assertLineLength(\"var a=\\\"foo,{bar};baz\\\";var b=a\",\n+        \"var a=\\\"foo,{bar};baz\\\";\" +\n         \"\\nvar b=a\");\n \n     // don't break before post inc/dec\n-    assertLineLength(\"var a='a';a++;var b='bbb';\",\n-        \"var a='a';a++;\\n\" +\n-        \"var b='bbb'\");\n+    assertLineLength(\"var a=\\\"a\\\";a++;var b=\\\"bbb\\\";\",\n+        \"var a=\\\"a\\\";a++;\\n\" +\n+        \"var b=\\\"bbb\\\"\");\n   }\n \n   private void assertLineLength(String js, String expected) {\n     testReparse(\"function foo(a) { return a + 4; }\");\n     testReparse(\"function foo() { return; }\");\n     testReparse(\"var a = function(a, b) { foo(); return a + b; }\");\n-    testReparse(\"b = [3, 4, 'paul', 'Buchhe it',,5];\");\n+    testReparse(\"b = [3, 4, 'paul', \\\"Buchhe it\\\",,5];\");\n     testReparse(\"v = (5, 6, 7, 8)\");\n     testReparse(\"d = 34.0; x = 0; y = .3; z = -22\");\n     testReparse(\"d = -x; t = !x + ~y;\");\n   }\n \n   public void testDirectEval() {\n-    assertPrint(\"eval('1');\", \"eval('1')\");\n+    assertPrint(\"eval('1');\", \"eval(\\\"1\\\")\");\n   }\n \n   public void testIndirectEval() {\n     Node n = parse(\"eval('1');\");\n-    assertPrintNode(\"eval('1')\", n);\n+    assertPrintNode(\"eval(\\\"1\\\")\", n);\n     n.getFirstChild().getFirstChild().getFirstChild().putBooleanProp(\n         Node.DIRECT_EVAL, false);\n-    assertPrintNode(\"(0,eval)('1')\", n);\n+    assertPrintNode(\"(0,eval)(\\\"1\\\")\", n);\n   }\n \n   public void testFreeCall1() {\n         new Node(Token.EXPR_RESULT, Node.newString(\"f\")),\n         new Node(Token.EXPR_RESULT, Node.newString(\"g\")));\n     String result = new CodePrinter.Builder(ast).setPrettyPrint(true).build();\n-    assertEquals(\"'f';\\n'g';\\n\", result);\n+    assertEquals(\"\\\"f\\\";\\n\\\"g\\\";\\n\", result);\n   }\n \n   public void testObjectLit() {\n     assertPrint(\"({x:1})\", \"({x:1})\");\n     assertPrint(\"var x=({x:1})\", \"var x={x:1}\");\n-    assertPrint(\"var x={'x':1}\", \"var x={'x':1}\");\n+    assertPrint(\"var x={'x':1}\", \"var x={\\\"x\\\":1}\");\n     assertPrint(\"var x={1:1}\", \"var x={1:1}\");\n     assertPrint(\"({},42)+0\", \"({},42)+0\");\n   }\n   public void testObjectLit2() {\n     assertPrint(\"var x={1:1}\", \"var x={1:1}\");\n     assertPrint(\"var x={'1':1}\", \"var x={1:1}\");\n-    assertPrint(\"var x={'1.0':1}\", \"var x={'1.0':1}\");\n-    assertPrint(\"var x={1.5:1}\", \"var x={'1.5':1}\");\n+    assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");\n+    assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");\n \n   }\n \n                 \"var x={3000000001:1}\");\n     assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                 \"var x={6000000001:1}\");\n-    assertPrint(\"var x={'12345678901234567':1}\",  // More than 53 bits\n-                \"var x={'12345678901234567':1}\");\n+    assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n+                \"var x={\\\"12345678901234567\\\":1}\");\n   }\n \n   public void testObjectLit4() {\n     // More than 128 bits.\n     assertPrint(\n-        \"var x={'123456789012345671234567890123456712345678901234567':1}\",\n-        \"var x={'123456789012345671234567890123456712345678901234567':1}\");\n+        \"var x={\\\"123456789012345671234567890123456712345678901234567\\\":1}\",\n+        \"var x={\\\"123456789012345671234567890123456712345678901234567\\\":1}\");\n   }\n \n   public void testGetter() {\n \n     assertPrint(\n       \"var x = {get 'a'() {return 1}}\",\n-      \"var x={get 'a'(){return 1}}\");\n+      \"var x={get \\\"a\\\"(){return 1}}\");\n \n     assertPrint(\n       \"var x = {get 1() {return 1}}\",\n       \"var x={get 1(){return 1}}\");\n \n     assertPrint(\n-      \"var x = {get '()'() {return 1}}\",\n-      \"var x={get '()'(){return 1}}\");\n+      \"var x = {get \\\"()\\\"() {return 1}}\",\n+      \"var x={get \\\"()\\\"(){return 1}}\");\n   }\n \n   public void testSetter() {\n \n     assertPrint(\n       \"var x = {get 'a'() {return 1}}\",\n-      \"var x={get 'a'(){return 1}}\");\n+      \"var x={get \\\"a\\\"(){return 1}}\");\n \n     assertPrint(\n       \"var x = {set 1(y) {return 1}}\",\n       \"var x={set 1(y){return 1}}\");\n \n     assertPrint(\n-      \"var x = {set '(x)'(y) {return 1}}\",\n-      \"var x={set '(x)'(y){return 1}}\");\n+      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n+      \"var x={set \\\"(x)\\\"(y){return 1}}\");\n   }\n \n   public void testNegCollapse() {\n   }\n \n   public void testZero() {\n-    assertPrint(\"var x ='\\\\0';\", \"var x='\\\\x00'\");\n-    assertPrint(\"var x ='\\\\x00';\", \"var x='\\\\x00'\");\n-    assertPrint(\"var x ='\\\\u0000';\", \"var x='\\\\x00'\");\n-    assertPrint(\"var x ='\\\\u00003';\", \"var x='\\\\x003'\");\n+    assertPrint(\"var x ='\\\\0';\", \"var x=\\\"\\\\x00\\\"\");\n+    assertPrint(\"var x ='\\\\x00';\", \"var x=\\\"\\\\x00\\\"\");\n+    assertPrint(\"var x ='\\\\u0000';\", \"var x=\\\"\\\\x00\\\"\");\n+    assertPrint(\"var x ='\\\\u00003';\", \"var x=\\\"\\\\x003\\\"\");\n   }\n \n   public void testUnicode() {\n-    assertPrint(\"var x ='\\\\x0f';\", \"var x='\\\\u000f'\");\n-    assertPrint(\"var x ='\\\\x68';\", \"var x='h'\");\n-    assertPrint(\"var x ='\\\\x7f';\", \"var x='\\\\u007f'\");\n+    assertPrint(\"var x ='\\\\x0f';\", \"var x=\\\"\\\\u000f\\\"\");\n+    assertPrint(\"var x ='\\\\x68';\", \"var x=\\\"h\\\"\");\n+    assertPrint(\"var x ='\\\\x7f';\", \"var x=\\\"\\\\u007f\\\"\");\n   }\n \n   public void testUnicodeKeyword() {\n \n   public void testNumericKeys() {\n     assertPrint(\"var x = {010: 1};\", \"var x={8:1}\");\n-    assertPrint(\"var x = {'010': 1};\", \"var x={'010':1}\");\n+    assertPrint(\"var x = {'010': 1};\", \"var x={\\\"010\\\":1}\");\n \n     assertPrint(\"var x = {0x10: 1};\", \"var x={16:1}\");\n-    assertPrint(\"var x = {'0x10': 1};\", \"var x={'0x10':1}\");\n+    assertPrint(\"var x = {'0x10': 1};\", \"var x={\\\"0x10\\\":1}\");\n \n     // I was surprised at this result too.\n-    assertPrint(\"var x = {.2: 1};\", \"var x={'0.2':1}\");\n-    assertPrint(\"var x = {'.2': 1};\", \"var x={'.2':1}\");\n-\n-    assertPrint(\"var x = {0.2: 1};\", \"var x={'0.2':1}\");\n-    assertPrint(\"var x = {'0.2': 1};\", \"var x={'0.2':1}\");\n+    assertPrint(\"var x = {.2: 1};\", \"var x={\\\"0.2\\\":1}\");\n+    assertPrint(\"var x = {'.2': 1};\", \"var x={\\\".2\\\":1}\");\n+\n+    assertPrint(\"var x = {0.2: 1};\", \"var x={\\\"0.2\\\":1}\");\n+    assertPrint(\"var x = {'0.2': 1};\", \"var x={\\\"0.2\\\":1}\");\n   }\n \n   public void testIssue582() {\n   }\n \n   public void testIssue601() {\n-    assertPrint(\"'\\\\v' == 'v'\", \"'\\\\v'=='v'\");\n-    assertPrint(\"'\\\\u000B' == '\\\\v'\", \"'\\\\x0B'=='\\\\v'\");\n-    assertPrint(\"'\\\\x0B' == '\\\\v'\", \"'\\\\x0B'=='\\\\v'\");\n+    assertPrint(\"'\\\\v' == 'v'\", \"\\\"\\\\v\\\"==\\\"v\\\"\");\n+    assertPrint(\"'\\\\u000B' == '\\\\v'\", \"\\\"\\\\x0B\\\"==\\\"\\\\v\\\"\");\n+    assertPrint(\"'\\\\x0B' == '\\\\v'\", \"\\\"\\\\x0B\\\"==\\\"\\\\v\\\"\");\n   }\n \n   public void testIssue620() {\n   }\n \n   public void testIssue5746867() {\n-    assertPrint(\"var a = { '$\\\\\\\\' : 5 };\", \"var a={'$\\\\\\\\':5}\");\n+    assertPrint(\"var a = { '$\\\\\\\\' : 5 };\", \"var a={\\\"$\\\\\\\\\\\":5}\");\n   }\n \n   public void testCommaSpacing() {\n \n   public void testStringEscapeSequences() {\n     // From the SingleEscapeCharacter grammar production.\n-    assertPrintSame(\"var x='\\\\b'\");\n-    assertPrintSame(\"var x='\\\\f'\");\n-    assertPrintSame(\"var x='\\\\n'\");\n-    assertPrintSame(\"var x='\\\\r'\");\n-    assertPrintSame(\"var x='\\\\t'\");\n-    assertPrintSame(\"var x='\\\\v'\");\n+    assertPrintSame(\"var x=\\\"\\\\b\\\"\");\n+    assertPrintSame(\"var x=\\\"\\\\f\\\"\");\n+    assertPrintSame(\"var x=\\\"\\\\n\\\"\");\n+    assertPrintSame(\"var x=\\\"\\\\r\\\"\");\n+    assertPrintSame(\"var x=\\\"\\\\t\\\"\");\n+    assertPrintSame(\"var x=\\\"\\\\v\\\"\");\n     assertPrint(\"var x=\\\"\\\\\\\"\\\"\", \"var x='\\\"'\");\n     assertPrint(\"var x=\\\"\\\\\\'\\\"\", \"var x=\\\"'\\\"\");\n \n     // From the LineTerminator grammar\n-    assertPrint(\"var x='\\\\u000A'\", \"var x='\\\\n'\");\n-    assertPrint(\"var x='\\\\u000D'\", \"var x='\\\\r'\");\n-    assertPrintSame(\"var x='\\\\u2028'\");\n-    assertPrintSame(\"var x='\\\\u2029'\");\n+    assertPrint(\"var x=\\\"\\\\u000A\\\"\", \"var x=\\\"\\\\n\\\"\");\n+    assertPrint(\"var x=\\\"\\\\u000D\\\"\", \"var x=\\\"\\\\r\\\"\");\n+    assertPrintSame(\"var x=\\\"\\\\u2028\\\"\");\n+    assertPrintSame(\"var x=\\\"\\\\u2029\\\"\");\n \n     // Now with regular expressions.\n     assertPrintSame(\"var x=/\\\\b/\");\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n     args.add(\"--compilation_level=ADVANCED_OPTIMIZATIONS\");\n     useStringComparison = true;\n     test(\"eval('1'); var x = eval; x('2');\",\n-         \"eval('1');(0,eval)('2');\");\n+         \"eval(\\\"1\\\");(0,eval)(\\\"2\\\");\");\n   }\n \n   public void testIssue115() {\n--- a/test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java\n+++ b/test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java\n   }\n \n   public void testFoldWithMarkers2() {\n-    testSame(\"function f(){startMarker('FOO');startMarker('BAR');\" +\n-             \"if(x)return;endMarker('BAR');y();if(a)return;\" +\n-             \"endMarker('FOO');b()}\");\n+    testSame(\"function f(){startMarker(\\\"FOO\\\");startMarker(\\\"BAR\\\");\" +\n+             \"if(x)return;endMarker(\\\"BAR\\\");y();if(a)return;\" +\n+             \"endMarker(\\\"FOO\\\");b()}\");\n   }\n \n   public void testUnmatchedStartMarker() {\n--- a/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java\n+++ b/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java\n     checkCost(\"a ? 1 : 0\", \"xx?1:0\");\n     checkCost(\"a.b\", \"xx.xx\");\n     checkCost(\"new Obj()\", \"new xx\");\n-    checkCost(\"function a() {return 'monkey'}\",\n-              \"function xx(){return'monkey'}\");\n+    checkCost(\"function a() {return \\\"monkey\\\"}\",\n+              \"function xx(){return\\\"monkey\\\"}\");\n   }\n \n   private void checkCost(String source, String example) {\n--- a/test/com/google/javascript/jscomp/InlineSimpleMethodsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineSimpleMethodsTest.java\n public class InlineSimpleMethodsTest extends CompilerTestCase {\n \n   public InlineSimpleMethodsTest() {\n-    super();\n+    super(\"\", false);\n   }\n \n   @Override\n     testWithPrefix(\"function Foo(){}\" +\n         \"Foo.prototype.bar=function(a){};\",\n         \"var x=new Foo; x.bar();\",\n-        \"var x=new Foo;        ;\");\n+        \"var x=new Foo\");\n   }\n \n   public void testEmptyMethodInlineWithSideEffects() {\n \n   public void testIssue2508576_3() {\n     // Anonymous object definition without side-effect should be removed.\n-    test(\"({a:function(){},b:alert}).a(\\\"a\\\");\", \";\");\n+    test(\"({a:function(){},b:alert}).a(\\\"a\\\")\", \"\");\n   }\n \n   public void testAnonymousGet() {\n--- a/test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java\n+++ b/test/com/google/javascript/jscomp/NameAnonymousFunctionsMappedTest.java\n     test(\"function a() {} a.prototype['XXX'] = function() { return 1; };\",\n          \"function a() {} \" +\n          \"a.prototype['XXX'] = function $() { return 1; };\");\n-    assertMapping(\"$\", \"a.prototype['XXX']\");\n+    assertMapping(\"$\", \"a.prototype[\\\"XXX\\\"]\");\n     test(\"function a() {} a.prototype['\\\\n'] = function() { return 1; };\",\n          \"function a() {} \" +\n          \"a.prototype['\\\\n'] = function $() { return 1; };\");\n-    assertMapping(\"$\", \"a.prototype['\\\\n']\");\n+    assertMapping(\"$\", \"a.prototype[\\\"\\\\n\\\"]\");\n   }\n \n   public void testAssignmentToPrototype4() {\n     test(\"function a() {} a['prototype'].b = function() { return 1; };\",\n          \"function a() {} \" +\n          \"a['prototype'].b = function $() { return 1; };\");\n-    assertMapping(\"$\", \"a['prototype'].b\");\n+    assertMapping(\"$\", \"a[\\\"prototype\\\"].b\");\n   }\n \n \n     test(\"document.getElementById('x').onClick = function() {};\",\n          \"document.getElementById('x').onClick = \" +\n          \"function $() {};\");\n-    assertMapping(\"$\", \"document.getElementById('x').onClick\");\n+    assertMapping(\"$\", \"document.getElementById(\\\"x\\\").onClick\");\n   }\n \n   public void testAssignmentToPropertyOfArrayElement() {\n     assertMapping(\"$\", \"a.b[0].c\");\n     test(\"var a = {b: {'c': {}}}; a.b['c'].d = function() {};\",\n          \"var a = {b: {'c': {}}}; a.b['c'].d = function $() {};\");\n-    assertMapping(\"$\", \"a.b['c'].d\");\n+    assertMapping(\"$\", \"a.b[\\\"c\\\"].d\");\n     test(\"var a = {b: {'c': {}}}; a.b[x()].d = function() {};\",\n          \"var a = {b: {'c': {}}}; a.b[x()].d = function $() {};\");\n     assertMapping(\"$\", \"a.b[x()].d\");\n          \"function f() { win['x' + this.id] = function $(a){}; }\");\n \n     // TODO - could probably do a better job encoding these\n-    assertMapping(\"$\", \"win['x'+this.id]\");\n+    assertMapping(\"$\", \"win[\\\"x\\\"+this.id]\");\n   }\n \n   public void testGetElemWithDashes() {\n     test(\"var foo = {}; foo['-'] = function() {};\",\n          \"var foo = {}; foo['-'] = function $() {};\");\n-    assertMapping(\"$\", \"foo['-']\");\n+    assertMapping(\"$\", \"foo[\\\"-\\\"]\");\n   }\n \n   public void testDuplicateNames() {\n--- a/test/com/google/javascript/jscomp/ParallelCompilerPassTest.java\n+++ b/test/com/google/javascript/jscomp/ParallelCompilerPassTest.java\n public class ParallelCompilerPassTest extends TestCase {\n \n   public void testNoFunction() {\n-    replace(\"'foo'\");\n+    replace(\"\\\"foo\\\"\");\n     replace(\"var foo\");\n   }\n \n   public void testOneFunction() {\n-    replace(\"'foo';function foo(){'foo'}\");\n+    replace(\"\\\"foo\\\";function foo(){\\\"foo\\\"}\");\n   }\n \n   public void testTwoFunctions() {\n-    replace(\"'foo';function f1(){'foo'}function f2(){'foo'}\");\n+    replace(\"\\\"foo\\\";function f1(){\\\"foo\\\"}function f2(){\\\"foo\\\"}\");\n   }\n \n   public void testInnerFunctions() {\n-    replace(\"'foo';function f1(){'foo';function f2(){'foo'}}\");\n+    replace(\"\\\"foo\\\";function f1(){\\\"foo\\\";function f2(){\\\"foo\\\"}}\");\n   }\n \n   public void testManyFunctions() {\n-    StringBuilder sb = new StringBuilder(\"'foo';\");\n+    StringBuilder sb = new StringBuilder(\"\\\"foo\\\";\");\n     for (int i = 0; i < 20; i++) {\n       sb.append(\"function f\");\n       sb.append(i);\n-      sb.append(\"(){'foo'}\");\n+      sb.append(\"(){\\\"foo\\\"}\");\n     }\n     replace(sb.toString());\n   }\n--- a/test/com/google/javascript/jscomp/ReplaceCssNamesTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceCssNamesTest.java\n     useReplacementMap = false;\n     ReplaceCssNames replacer = new ReplaceCssNames(compiler, null);\n     replacer.process(null, root);\n-    assertEquals(\"['test',base+'-active']\", compiler.toSource(root));\n+    assertEquals(\"[\\\"test\\\",base+\\\"-active\\\"]\", compiler.toSource(root));\n     assertEquals(\"There should be no errors\", 0, errorMan.getErrorCount());\n     assertEquals(\"There should be no warnings\", 0, errorMan.getWarningCount());\n   }", "timestamp": 1350953226, "metainfo": ""}