{"sha": "9e921fa973c603473f745fff76c44620fd7719e3", "log": "When getting a line from the source code according to the line number, if it happens to be the last line, and '\\n' character is missing in the end of the file, we should still return the last line.  Fixes Issue 511.  R=nicksantos DELTA=30  (23 added, 0 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3084   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n     lastOffset = pos;\n     lastLine = lineNumber;\n \n-    return (js.indexOf('\\n', pos) == -1) ? null :\n-        js.substring(pos, js.indexOf('\\n', pos));\n+    if (js.indexOf('\\n', pos) == -1) {\n+      // If next new line cannot be found, there are two cases\n+      // 1. pos already reaches the end of file, then null should be returned\n+      // 2. otherwise, return the contents between pos and the end of file.\n+      if (pos >= js.length()) {\n+        return null;\n+      } else {\n+        return js.substring(pos, js.length());\n+      }\n+    } else {\n+      return js.substring(pos, js.indexOf('\\n', pos));\n+    }\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java\n+++ b/test/com/google/javascript/jscomp/JSCompilerSourceExcerptProviderTest.java\n         \"foo:first line\\nfoo:second line\\nfoo:third line\\n\");\n     JSSourceFile bar = JSSourceFile.fromCode(\"bar\",\n         \"bar:first line\\nbar:second line\\nbar:third line\\nbar:fourth line\\n\");\n+    JSSourceFile foo2 = JSSourceFile.fromCode(\"foo2\",\n+        \"foo2:first line\\nfoo2:second line\\nfoo2:third line\");\n     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n     compiler.init(\n-        new JSSourceFile[] {}, new JSSourceFile[] {foo, bar}, options);\n+        new JSSourceFile[] {}, new JSSourceFile[] {foo, bar, foo2}, options);\n     this.provider = compiler;\n   }\n \n     assertEquals(null, provider.getSourceLine(\"foo\", 4));\n     assertEquals(null, provider.getSourceLine(\"bar\", 0));\n     assertEquals(null, provider.getSourceLine(\"bar\", 5));\n+  }\n+\n+  public void testExceptNoNewLine() throws Exception {\n+    assertEquals(\"foo2:first line\", provider.getSourceLine(\"foo2\", 1));\n+    assertEquals(\"foo2:second line\", provider.getSourceLine(\"foo2\", 2));\n+    assertEquals(\"foo2:third line\", provider.getSourceLine(\"foo2\", 3));\n+    assertEquals(null, provider.getSourceLine(\"foo2\", 4));\n   }\n \n   public void testExcerptRegion() throws Exception {\n--- a/test/com/google/javascript/jscomp/JsMessageExtractorTest.java\n+++ b/test/com/google/javascript/jscomp/JsMessageExtractorTest.java\n       extractMessage(\"if (true) {}}\");\n       fail(\"Expected exception\");\n     } catch (RuntimeException e) {\n-      assertEquals(\"JSCompiler errors\\n\" +\n-          \"testcode:1: ERROR - Parse error. syntax error\\n\", e.getMessage());\n+      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));\n+      assertTrue(e.getMessage().contains(\n+          \"testcode:1: ERROR - Parse error. syntax error\\n\"));\n+      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));\n     }\n   }\n \n       extractMessage(\"\", \"if (true) {}}\");\n       fail(\"Expected exception\");\n     } catch (RuntimeException e) {\n-      assertEquals(\"JSCompiler errors\\n\" +\n-          \"testcode:2: ERROR - Parse error. syntax error\\n\", e.getMessage());\n+      assertTrue(e.getMessage().contains(\"JSCompiler errors\\n\"));\n+      assertTrue(e.getMessage().contains(\n+          \"testcode:2: ERROR - Parse error. syntax error\\n\"));\n+      assertTrue(e.getMessage().contains(\"if (true) {}}\\n\"));\n     }\n   }\n ", "timestamp": 1314051535, "metainfo": ""}