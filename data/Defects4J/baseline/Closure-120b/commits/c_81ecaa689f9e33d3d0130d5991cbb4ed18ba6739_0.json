{"sha": "81ecaa689f9e33d3d0130d5991cbb4ed18ba6739", "log": "Make single quotes a formatting option I also took this opportunity to clean up the code printer options, because they were getting to be unmaintainable.  R=johnlenz DELTA=174  (69 added, 71 deleted, 34 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5697   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n \n   private final CharsetEncoder outputCharsetEncoder;\n \n+  private final boolean preferSingleQuotes;\n+\n   CodeGenerator(\n-      CodeConsumer consumer, Charset outputCharset) {\n+      CodeConsumer consumer, Charset outputCharset,\n+      boolean preferSingleQuotes) {\n     cc = consumer;\n     if (outputCharset == null || outputCharset == Charsets.US_ASCII) {\n       // If we want our default (pretending to be UTF-8, but escaping anything\n     } else {\n       this.outputCharsetEncoder = outputCharset.newEncoder();\n     }\n-  }\n-\n-  CodeGenerator(CodeConsumer consumer) {\n-    this(consumer, null);\n+    this.preferSingleQuotes = preferSingleQuotes;\n   }\n \n   /**\n \n     String doublequote, singlequote;\n     char quote;\n-    if (singleq < doubleq) {\n-      // more double quotes so escape the single quotes\n+    if (preferSingleQuotes ?\n+        (singleq <= doubleq) : (singleq < doubleq)) {\n+      // more double quotes so enclose in single quotes.\n       quote = '\\'';\n       doublequote = \"\\\"\";\n       singlequote = \"\\\\\\'\";\n--- a/src/com/google/javascript/jscomp/CodePrinter.java\n+++ b/src/com/google/javascript/jscomp/CodePrinter.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Throwables;\n import com.google.debugging.sourcemap.FilePosition;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n   static class Builder {\n     private final Node root;\n-    private boolean prettyPrint = false;\n-    private boolean lineBreak = false;\n-    private boolean preferLineBreakAtEndOfFile = false;\n+    private CompilerOptions options = new CompilerOptions();\n     private boolean outputTypes = false;\n-    private int lineLengthThreshold = DEFAULT_LINE_LENGTH_THRESHOLD;\n     private SourceMap sourceMap = null;\n-    private SourceMap.DetailLevel sourceMapDetailLevel =\n-        SourceMap.DetailLevel.ALL;\n-    // Specify a charset to use when outputting source code.  If null,\n-    // then just output ASCII.\n-    private Charset outputCharset = null;\n     private boolean tagAsStrict;\n \n     /**\n     }\n \n     /**\n+     * Sets the output options from compiler options.\n+     */\n+    Builder setCompilerOptions(CompilerOptions options) {\n+      try {\n+        this.options = (CompilerOptions) options.clone();\n+      } catch (CloneNotSupportedException e) {\n+        throw Throwables.propagate(e);\n+      }\n+      return this;\n+    }\n+\n+    /**\n      * Sets whether pretty printing should be used.\n      * @param prettyPrint If true, pretty printing will be used.\n      */\n     Builder setPrettyPrint(boolean prettyPrint) {\n-      this.prettyPrint = prettyPrint;\n+      options.prettyPrint = prettyPrint;\n       return this;\n     }\n \n      * @param lineBreak If true, line breaking is done automatically.\n      */\n     Builder setLineBreak(boolean lineBreak) {\n-      this.lineBreak = lineBreak;\n-      return this;\n-    }\n-\n-    /**\n-     * Sets whether line breaking is preferred at end of file. This is useful\n-     * if JS serving code needs a place to insert code, such as script tags,\n-     * without interfering with source maps.\n-     * @param lineBreakAtEnd If true, prefer line breaking at end of file.\n-     */\n-    Builder setPreferLineBreakAtEndOfFile(boolean lineBreakAtEnd) {\n-      this.preferLineBreakAtEndOfFile = lineBreakAtEnd;\n+      options.lineBreak = lineBreak;\n       return this;\n     }\n \n      */\n     Builder setOutputTypes(boolean outputTypes) {\n       this.outputTypes = outputTypes;\n-      return this;\n-    }\n-\n-    /**\n-     * Sets the line length threshold that will be used to determine\n-     * when to break lines, if line breaking is on.\n-     *\n-     * @param threshold The line length threshold.\n-     */\n-    Builder setLineLengthThreshold(int threshold) {\n-      this.lineLengthThreshold = threshold;\n       return this;\n     }\n \n     }\n \n     /**\n-     * @param level The detail level to use.\n-     */\n-    Builder setSourceMapDetailLevel(SourceMap.DetailLevel level) {\n-      Preconditions.checkState(level != null);\n-      this.sourceMapDetailLevel = level;\n-      return this;\n-    }\n-\n-    /**\n-     * Set the charset to use when determining what characters need to be\n-     * escaped in the output.\n-     */\n-    Builder setOutputCharset(Charset outCharset) {\n-      this.outputCharset = outCharset;\n-      return this;\n-    }\n-\n-    /**\n      * Set whether the output should be tags as ECMASCRIPT 5 Strict.\n      */\n     Builder setTagAsStrict(boolean tagAsStrict) {\n \n       Format outputFormat = outputTypes\n           ? Format.TYPED\n-          : prettyPrint\n+          : options.prettyPrint\n               ? Format.PRETTY\n               : Format.COMPACT;\n \n-      return toSource(root, outputFormat, lineBreak, preferLineBreakAtEndOfFile,\n-          lineLengthThreshold, sourceMap, sourceMapDetailLevel, outputCharset,\n-          tagAsStrict);\n+      return toSource(root, outputFormat, options, sourceMap, tagAsStrict);\n     }\n   }\n \n    * Converts a tree to JS code\n    */\n   private static String toSource(Node root, Format outputFormat,\n-                                 boolean lineBreak,  boolean preferEndOfFileBreak,\n-                                 int lineLengthThreshold,\n-                                 SourceMap sourceMap,\n-                                 SourceMap.DetailLevel sourceMapDetailLevel,\n-                                 Charset outputCharset,\n-                                 boolean tagAsStrict) {\n-    Preconditions.checkState(sourceMapDetailLevel != null);\n+      CompilerOptions options, SourceMap sourceMap,  boolean tagAsStrict) {\n+    Preconditions.checkState(options.sourceMapDetailLevel != null);\n \n     boolean createSourceMap = (sourceMap != null);\n+    Charset outputCharset = options.outputCharset == null ? null :\n+        Charset.forName(options.outputCharset);\n     MappedCodePrinter mcp =\n         outputFormat == Format.COMPACT\n         ? new CompactCodePrinter(\n-            lineBreak, preferEndOfFileBreak, lineLengthThreshold,\n-            createSourceMap, sourceMapDetailLevel)\n+            options.lineBreak,\n+            options.preferLineBreakAtEndOfFile,\n+            options.lineLengthThreshold,\n+            createSourceMap,\n+            options.sourceMapDetailLevel)\n         : new PrettyCodePrinter(\n-            lineLengthThreshold, createSourceMap, sourceMapDetailLevel);\n+            options.lineLengthThreshold,\n+            createSourceMap,\n+            options.sourceMapDetailLevel);\n     CodeGenerator cg =\n         outputFormat == Format.TYPED\n         ? new TypedCodeGenerator(mcp, outputCharset)\n-        : new CodeGenerator(mcp, outputCharset);\n+        : new CodeGenerator(mcp, outputCharset, options.preferSingleQuotes);\n \n     if (tagAsStrict) {\n       cg.tagAsStrict();\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n     @Option(name = \"--formatting\",\n         usage = \"Specifies which formatting options, if any, should be \"\n         + \"applied to the output JS. Options: \"\n-        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER\")\n+        + \"PRETTY_PRINT, PRINT_INPUT_DELIMITER, SINGLE_QUOTES\")\n     private List<FormattingOption> formatting = Lists.newArrayList();\n \n     @Option(name = \"--process_common_js_modules\",\n   private static enum FormattingOption {\n     PRETTY_PRINT,\n     PRINT_INPUT_DELIMITER,\n+    SINGLE_QUOTES\n     ;\n \n     private void applyToOptions(CompilerOptions options) {\n           break;\n         case PRINT_INPUT_DELIMITER:\n           options.printInputDelimiter = true;\n+          break;\n+        case SINGLE_QUOTES:\n+          options.setPreferSingleQuotes(true);\n           break;\n         default:\n           throw new RuntimeException(\"Unknown formatting option: \" + this);\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n import java.io.InputStreamReader;\n import java.io.PrintStream;\n import java.io.Serializable;\n-import java.nio.charset.Charset;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n    */\n   private String toSource(Node n, SourceMap sourceMap, boolean firstOutput) {\n     CodePrinter.Builder builder = new CodePrinter.Builder(n);\n-    builder.setPrettyPrint(options.prettyPrint);\n-    builder.setLineBreak(options.lineBreak);\n-    builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);\n+    builder.setCompilerOptions(options);\n     builder.setSourceMap(sourceMap);\n-    builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);\n     builder.setTagAsStrict(firstOutput &&\n         options.getLanguageOut() == LanguageMode.ECMASCRIPT5_STRICT);\n-    builder.setLineLengthThreshold(options.lineLengthThreshold);\n-\n-    Charset charset = options.outputCharset != null ?\n-        Charset.forName(options.outputCharset) : null;\n-    builder.setOutputCharset(charset);\n-\n     return builder.build();\n   }\n \n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /** The string to use as the separator for printInputDelimiter */\n   public String inputDelimiter = \"// Input %num%\";\n+\n+  boolean preferSingleQuotes;\n+\n+  /**\n+   * Normally, when there are an equal number of single and double quotes\n+   * in a string, the compiler will use double quotes. Set this to true\n+   * to prefer single quotes.\n+   */\n+  public void setPreferSingleQuotes(boolean enabled) {\n+    this.preferSingleQuotes = enabled;\n+  }\n \n   String reportPath;\n \n--- a/src/com/google/javascript/jscomp/InlineCostEstimator.java\n+++ b/src/com/google/javascript/jscomp/InlineCostEstimator.java\n     }\n \n     void add(Node root) {\n-      CodeGenerator cg = new CodeGenerator(this);\n+      CodeGenerator cg = new CodeGenerator(this, null, false);\n       cg.add(root);\n     }\n \n--- a/src/com/google/javascript/jscomp/PerformanceTracker.java\n+++ b/src/com/google/javascript/jscomp/PerformanceTracker.java\n \n   private final CodeSizeEstimatePrinter estimateCodeSize(Node root) {\n     CodeSizeEstimatePrinter cp = new CodeSizeEstimatePrinter(trackGzippedSize);\n-    CodeGenerator cg = new CodeGenerator(cp);\n+    CodeGenerator cg = new CodeGenerator(cp, null, false);\n     cg.add(root);\n     return cp;\n   }\n--- a/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n  */\n class TypedCodeGenerator extends CodeGenerator {\n   TypedCodeGenerator(CodeConsumer consumer, Charset outputCharset) {\n-    super(consumer, outputCharset);\n+    super(consumer, outputCharset, false);\n   }\n \n   @Override\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n   }\n \n   String parsePrint(String js, boolean prettyprint, int lineThreshold) {\n-    return new CodePrinter.Builder(parse(js)).setPrettyPrint(prettyprint)\n-        .setLineLengthThreshold(lineThreshold).build();\n+    CompilerOptions options = new CompilerOptions();\n+    options.setPrettyPrint(prettyprint);\n+    options.setLineLengthThreshold(lineThreshold);\n+    return new CodePrinter.Builder(parse(js)).setCompilerOptions(options)\n+        .build();\n   }\n \n   String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n       int lineThreshold) {\n-    return new CodePrinter.Builder(parse(js)).setPrettyPrint(prettyprint)\n-        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak).build();\n+    CompilerOptions options = new CompilerOptions();\n+    options.setPrettyPrint(prettyprint);\n+    options.setLineLengthThreshold(lineThreshold);\n+    options.setLineBreak(lineBreak);\n+    return new CodePrinter.Builder(parse(js)).setCompilerOptions(options)\n+        .build();\n   }\n \n   String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n       boolean preferLineBreakAtEof, int lineThreshold) {\n-    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n-        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n-        .setPreferLineBreakAtEndOfFile(preferLineBreakAtEof)\n+    CompilerOptions options = new CompilerOptions();\n+    options.setPrettyPrint(prettyprint);\n+    options.setLineLengthThreshold(lineThreshold);\n+    options.setPreferLineBreakAtEndOfFile(preferLineBreakAtEof);\n+    options.setLineBreak(lineBreak);\n+    return new CodePrinter.Builder(parse(js)).setCompilerOptions(options)\n         .build();\n   }\n \n   String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n       int lineThreshold, boolean outputTypes) {\n-    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n+    CompilerOptions options = new CompilerOptions();\n+    options.setPrettyPrint(prettyprint);\n+    options.setLineLengthThreshold(lineThreshold);\n+    options.setLineBreak(lineBreak);\n+    return new CodePrinter.Builder(parse(js, true)).setCompilerOptions(options)\n         .setOutputTypes(outputTypes)\n-        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n         .build();\n   }\n \n   String parsePrint(String js, boolean prettyprint, boolean lineBreak,\n                     int lineThreshold, boolean outputTypes,\n                     boolean tagAsStrict) {\n-    return new CodePrinter.Builder(parse(js, true)).setPrettyPrint(prettyprint)\n+    CompilerOptions options = new CompilerOptions();\n+    options.setPrettyPrint(prettyprint);\n+    options.setLineLengthThreshold(lineThreshold);\n+    options.setLineBreak(lineBreak);\n+    return new CodePrinter.Builder(parse(js, true)).setCompilerOptions(options)\n         .setOutputTypes(outputTypes)\n-        .setLineLengthThreshold(lineThreshold).setLineBreak(lineBreak)\n         .setTagAsStrict(tagAsStrict)\n         .build();\n   }\n \n \n   String printNode(Node n) {\n-    return new CodePrinter.Builder(n).setLineLengthThreshold(\n-        CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD).build();\n+    CompilerOptions options = new CompilerOptions();\n+    options.setLineLengthThreshold(CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD);\n+    return new CodePrinter.Builder(n).setCompilerOptions(options).build();\n   }\n \n   void assertPrintNode(String expectedJs, Node ast) {\n \n     assertEquals(\n         \"x- -4\",\n-        new CodePrinter.Builder(n).setLineLengthThreshold(\n-            CodePrinter.DEFAULT_LINE_LENGTH_THRESHOLD).build());\n+        printNode(n));\n   }\n \n   public void testFunctionWithCall() {\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n     assertEquals(\"\", outReader.toString());\n   }\n \n+  public void testFormattingSingleQuote() {\n+    testSame(\"var x = '';\");\n+    assertEquals(\"var x=\\\"\\\";\", lastCompiler.toSource());\n+\n+    args.add(\"--formatting=SINGLE_QUOTES\");\n+    testSame(\"var x = '';\");\n+    assertEquals(\"var x='';\", lastCompiler.toSource());\n+  }\n+\n   public void testTransformAMDAndProcessCJS() {\n     useStringComparison = true;\n     args.add(\"--transform_amd_modules\");\n \n   private Compiler compile(String[] original) {\n     CommandLineRunner runner = createCommandLineRunner(original);\n-    assertTrue(runner.shouldRunCompiler());\n+    assertTrue(new String(errReader.toByteArray()), runner.shouldRunCompiler());\n     Supplier<List<SourceFile>> inputsSupplier = null;\n     Supplier<List<JSModule>> modulesSupplier = null;\n \n--- a/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java\n+++ b/test/com/google/javascript/jscomp/InlineCostEstimatorTest.java\n   }\n \n   static String minimize(String js) {\n+    CompilerOptions options = new CompilerOptions();\n+    options.setLineLengthThreshold(Integer.MAX_VALUE);\n     return new CodePrinter.Builder(parse(js)).\n-        setLineLengthThreshold(Integer.MAX_VALUE).\n+        setCompilerOptions(options).\n         build();\n   }\n ", "timestamp": 1351111478, "metainfo": ""}