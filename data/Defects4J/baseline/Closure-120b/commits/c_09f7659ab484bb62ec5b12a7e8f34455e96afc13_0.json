{"sha": "09f7659ab484bb62ec5b12a7e8f34455e96afc13", "log": "Fix RemoveUsedVarsTest so that it does a tree comparison (instead of a string comparison), and so that it acts on a normalized AST.  R=acleung DELTA=12  (3 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=81004   ", "commit": "\n--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n   private boolean preserveFunctionExpressionNames = false;\n \n   public RemoveUnusedVarsTest() {\n-    super(\"\", false);\n+    super(\"\");\n+    enableNormalize();\n   }\n \n   @Override\n   public void testRemoveUnusedVars() {\n     // Test lots of stuff\n     test(\"var a;var b=3;var c=function(){};var x=A();var y; var z;\" +\n-         \"function A(){B()}; function B(){C(b)}; function C(){};\" +\n-         \"function X(){Y()}; function Y(z){Z(x)}; function Z(){y};\" +\n-         \"P=function(){A()};\" +\n+         \"function A(){B()} function B(){C(b)} function C(){} \" +\n+         \"function X(){Y()} function Y(z){Z(x)} function Z(){y} \" +\n+         \"P=function(){A()}; \" +\n          \"try{0}catch(e){a}\",\n \n          \"var a;var b=3;A();function A(){B()}\" +\n \n     // Test unused vars with side effects\n     test(\"var a,b=foo(),c=i++,d;var e=boo();var f;print(d);\",\n-         \"var b=foo(),c=i++,d;boo();print(d)\");\n+         \"foo(); i++; var d; boo(); print(d)\");\n \n     test(\"var a,b=foo()\", \"foo()\");\n     test(\"var b=foo(),a\", \"foo()\");\n-    test(\"var a,b=foo(a)\", \"var a,b=foo(a)\");\n+    test(\"var a,b=foo(a)\", \"var a; foo(a);\");\n   }\n \n   public void testFunctionArgRemoval() {\n     test(\"for (;;) var b = 3;\", \"for(;;);\");\n     test(\"do var b = 3; while(true)\", \"do;while(true)\");\n     test(\"with (true) var b = 3;\", \"with(true);\");\n-    test(\"f: var b = 3;\",\"\");\n+    test(\"f: var b = 3;\",\"f:{}\");\n   }\n \n   public void testRValueHoisting() {\n \n   public void testRecursiveFunction2() {\n     test(\"var x = 3; (function x() { return x(); })();\",\n-         \"(function x(){return x()})()\");\n+         \"(function x$$1(){return x$$1()})()\");\n   }\n \n   public void testFunctionWithName1() {\n \n   public void testUnusedPropAssign3() {\n     test(\"var x = {}; x['foo'] = {}; x['foo'].baz['bar'] = 3\",\n-        \"\\\"foo\\\",{};\\\"foo\\\",\\\"bar\\\",3\");\n+        \"\\\"foo\\\",{};\\\"foo\\\",(\\\"bar\\\",3)\");\n   }\n \n   public void testUnusedPropAssign4() {\n--- a/test/com/google/javascript/jscomp/SourceMapTest.java\n+++ b/test/com/google/javascript/jscomp/SourceMapTest.java\n   }\n \n   public static class SourceMapParseException extends IOException {\n+    private static final long serialVersionUID = 1L;\n+\n     public SourceMapParseException(String message) {\n       super(message);\n     }", "timestamp": 1280511114, "metainfo": ""}