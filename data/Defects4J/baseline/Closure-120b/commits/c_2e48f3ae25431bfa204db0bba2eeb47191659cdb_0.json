{"sha": "2e48f3ae25431bfa204db0bba2eeb47191659cdb", "log": "added proper null-check to isEquivalentTo for union and function types  R=nicksantos DELTA=15  (14 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3141   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n   @Override\n   public boolean isEquivalentTo(JSType otherType) {\n     FunctionType that =\n-        JSType.toMaybeFunctionType(otherType.toMaybeFunctionType());\n+        JSType.toMaybeFunctionType(otherType);\n     if (that == null) {\n       return false;\n     }\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n    */\n   @Override\n   public boolean isEquivalentTo(JSType object) {\n+    if (object == null) {\n+      return false;\n+    }\n     if (object.isUnionType()) {\n       UnionType that = object.toMaybeUnionType();\n       if (alternates.size() != that.alternates.size()) {\n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n     assertEquals(s, t1.getGreatestSubtype(t2).toString());\n     assertEquals(s, t2.getGreatestSubtype(t1).toString());\n   }\n+\n+  public void testIsEquivalentTo() {\n+    FunctionType type = new FunctionBuilder(registry).build();\n+    assertFalse(type.isEquivalentTo(null));\n+    assertTrue(type.isEquivalentTo(type));\n+  }\n }\n--- a/test/com/google/javascript/rhino/jstype/UnionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/UnionTypeTest.java\n     assertEquals(NULL_TYPE, numStr.getRestrictedUnion(ERROR_TYPE));\n   }\n \n+  public void testIsEquivalentTo() {\n+    UnionType type = (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE);\n+    assertFalse(type.isEquivalentTo(null));\n+    assertTrue(type.isEquivalentTo(type));\n+  }\n }", "timestamp": 1314309608, "metainfo": ""}