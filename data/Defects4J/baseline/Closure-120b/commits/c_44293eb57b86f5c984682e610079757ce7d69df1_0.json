{"sha": "44293eb57b86f5c984682e610079757ce7d69df1", "log": "Changed to Node necessary to prepare for the split in input ids.  R=nicksantos DELTA=95  (94 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2881   ", "commit": "\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/InputId.java\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   John Lenz\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * An id used uniquely identify a CompilerInput\n+ * @author johnlenz@google.com (John Lenz)\n+ */\n+public class InputId implements Serializable {\n+  public static final long serialVersionUID = 1L;\n+  private final String id;\n+\n+  public InputId(String id) {\n+    this.id = id;\n+  }\n+\n+  public String getIdName() {\n+    return id;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return id.hashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) return true;\n+    if (obj == null) return false;\n+    if (getClass() != obj.getClass()) return false;\n+    return id.equals(((InputId) obj).id);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"InputId: \" + getIdName();\n+  }\n+}\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n                                   // where this node lives.\n       LENGTH             = 52,    // The length of the code represented by\n                                   // this node.\n-      LAST_PROP          = 52;\n+      INPUT_ID           = 53,    // The id of the input associated with this\n+                                  // node.\n+      LAST_PROP          = 53;\n \n   // values of ISNUMBER_PROP to specify\n   // which of the children are Number types\n         case DIRECT_EVAL:        return \"direct_eval\";\n         case FREE_CALL:          return \"free_call\";\n         case STATIC_SOURCE_FILE:    return \"source_file\";\n+        case INPUT_ID:  return \"input_id\";\n         case LENGTH:    return \"length\";\n         default:\n           Kit.codeBug();\n   /** Returns the source file associated with this input. May be null */\n   public StaticSourceFile getStaticSourceFile() {\n     return ((StaticSourceFile) this.getProp(STATIC_SOURCE_FILE));\n+  }\n+\n+  /**\n+   * @param inputId\n+   */\n+  public void setInputId(InputId inputId) {\n+    this.putProp(INPUT_ID, inputId);\n+  }\n+\n+  /**\n+   * @return The Id of the CompilerInput associated with this Node.\n+   */\n+  public InputId getInputId() {\n+    return ((InputId) this.getProp(INPUT_ID));\n   }\n \n   public boolean isFromExterns() {\n       return Objects.hashCode(nodeA, nodeB);\n     }\n   }\n+\n }", "timestamp": 1312395760, "metainfo": ""}