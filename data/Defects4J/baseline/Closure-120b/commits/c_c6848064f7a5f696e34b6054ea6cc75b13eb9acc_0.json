{"sha": "c6848064f7a5f696e34b6054ea6cc75b13eb9acc", "log": "Allow @typedefs to never be assigned. (Nick Santos)  Simple solution to goog.inherit calls not getting stripped when the subclass constructor is inlined into the call. (John Lenz)  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckGlobalNames.java\n+++ b/src/com/google/javascript/jscomp/CheckGlobalNames.java\n \n package com.google.javascript.jscomp;\n \n+import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.GlobalNamespace.Name;\n import com.google.javascript.jscomp.GlobalNamespace.Ref;\n-import com.google.javascript.jscomp.CheckLevel;\n+import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n+import com.google.javascript.rhino.Token;\n \n /**\n  * Checks references to undefined properties of global variables.\n       name = name.parent;\n     }\n \n+    // If this is an annotated EXPR-GET, don't do anything.\n+    Node parent = ref.node.getParent();\n+    if (parent.getType() == Token.EXPR_RESULT) {\n+      JSDocInfo info = ref.node.getJSDocInfo();\n+      if (info != null && info.hasTypedefType()) {\n+        return;\n+      }\n+    }\n+\n     compiler.report(\n         JSError.make(ref.sourceName, ref.node, level, UNDEFINED_NAME_WARNING,\n-                     name.fullName()));\n+            name.fullName()));\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n import com.google.common.base.Predicates;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n+import com.google.javascript.jscomp.CodingConvention.SubclassRelationship;\n import com.google.javascript.jscomp.ReferenceCollectingCallback.Behavior;\n import com.google.javascript.jscomp.ReferenceCollectingCallback.Reference;\n import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;\n         return false;\n       }\n \n+      // Bug 2388531: Don't inline subclass definitions into class defining\n+      // calls as this confused class removing logic.\n+      if (value.getType() == Token.FUNCTION) {\n+        Node callNode = reference.getParent();\n+        if (reference.getParent().getType() == Token.CALL) {\n+          SubclassRelationship relationship =\n+              compiler.getCodingConvention().getClassesDefinedByCall(callNode);\n+          if (relationship != null) {\n+            return false;\n+          }\n+        }\n+      }\n+\n       return canMoveAggressively(value) ||\n           canMoveModerately(initialization, reference);\n     }\n--- a/test/com/google/javascript/jscomp/CheckGlobalNamesTest.java\n+++ b/test/com/google/javascript/jscomp/CheckGlobalNamesTest.java\n     testSame(\"var a = {}; var b = a.b = 3;\");\n   }\n \n+  public void testTypedefGivesNoWarning() {\n+    testSame(\"var a = {}; /** @typedef {number} */ a.b;\");\n+  }\n+\n   public void testRefToDescendantOfUndefinedPropertyGivesCorrectWarning() {\n     testSame(\"\", NAMES + \"a.x.b = 3;\", UNDEFINED_NAME_WARNING,\n              UNDEFINED_NAME_WARNING.format(\"a.x\"));\n--- a/test/com/google/javascript/jscomp/InlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/InlineVariablesTest.java\n     testSame(\"var f = function () {}; function g() {h(f);}\");\n   }\n \n+  public void test2388531() {\n+    testSame(\"var f = function () {};\" +\n+             \"var g = function () {};\" +\n+             \"goog.inherits(f, g);\");\n+    testSame(\"var f = function () {};\" +\n+             \"var g = function () {};\" +\n+             \"goog$inherits(f, g);\");\n+  }\n+\n   public void testRecursiveFunction1() {\n     testSame(\"var x = 0; (function x() { return x ? x() : 3; })();\");\n   }\n   public void testInlineUndefined5() {\n     test(\"var x; for(x in a) {}\",\n          \"var x; for(x in a) {}\");\n-  }  \n-  \n+  }\n+\n   public void testIssue90() {\n     test(\"var x; x && alert(1)\",\n          \"void 0 && alert(1)\");\n   }\n-  \n+\n   public void testRenamePropertyFunction() {\n     testSame(\"var JSCompiler_renameProperty; \" +\n              \"JSCompiler_renameProperty('foo')\");", "timestamp": 1266442440, "metainfo": ""}