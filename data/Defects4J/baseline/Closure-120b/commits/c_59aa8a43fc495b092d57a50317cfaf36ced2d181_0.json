{"sha": "59aa8a43fc495b092d57a50317cfaf36ced2d181", "log": "Adds whitelist support to ReplceCssNames. This version applies the whitelist before splitting dashed names, not after.  R=nicksantos DELTA=60  (52 added, 1 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5800   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n \n   /** Map used in the renaming of CSS class names. */\n   public CssRenamingMap cssRenamingMap;\n+\n+  /** Whitelist used in the renaming of CSS class names. */\n+  Set<String> cssRenamingWhitelist;\n \n   /** Process instances of goog.testing.ObjectPropertyString. */\n   boolean processObjectPropertyString;\n     recordFunctionInformation = false;\n     generateExports = false;\n     cssRenamingMap = null;\n+    cssRenamingWhitelist = null;\n     processObjectPropertyString = false;\n     idGenerators = Collections.emptySet();\n     replaceStringsFunctionDescriptions = Collections.emptyList();\n \n   public void setCssRenamingMap(CssRenamingMap cssRenamingMap) {\n     this.cssRenamingMap = cssRenamingMap;\n+  }\n+\n+  public void setCssRenamingWhitelist(Set<String> whitelist) {\n+    this.cssRenamingWhitelist = whitelist;\n   }\n \n   public void setReplaceStringsFunctionDescriptions(List<String> replaceStringsFunctionDescriptions) {\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n           if (options.gatherCssNames) {\n             newCssNames = Maps.newHashMap();\n           }\n-          (new ReplaceCssNames(compiler, newCssNames)).process(\n-              externs, jsRoot);\n+          ReplaceCssNames pass = new ReplaceCssNames(\n+              compiler,\n+              newCssNames,\n+              options.cssRenamingWhitelist);\n+          pass.process(externs, jsRoot);\n           cssNames = newCssNames;\n         }\n       };\n--- a/src/com/google/javascript/jscomp/ReplaceCssNames.java\n+++ b/src/com/google/javascript/jscomp/ReplaceCssNames.java\n import com.google.javascript.rhino.jstype.JSType;\n \n import java.util.Map;\n+import java.util.Set;\n \n import javax.annotation.Nullable;\n \n \n   private CssRenamingMap symbolMap;\n \n+  private final Set<String> whitelist;\n+\n   private final JSType nativeStringType;\n \n   ReplaceCssNames(AbstractCompiler compiler,\n-      @Nullable Map<String, Integer> cssNames) {\n+      @Nullable Map<String, Integer> cssNames,\n+      @Nullable Set<String> whitelist) {\n     this.compiler = compiler;\n     this.cssNames = cssNames;\n+    this.whitelist = whitelist;\n     this.nativeStringType =  compiler.getTypeRegistry()\n         .getNativeType(STRING_TYPE);\n   }\n      */\n     private void processStringNode(NodeTraversal t, Node n) {\n       String name = n.getString();\n+      if (whitelist != null && whitelist.contains(name)) {\n+        // We apply the whitelist before splitting on dashes, and not after.\n+        // External substitution maps should do the same.\n+        return;\n+      }\n       String[] parts = name.split(\"-\");\n       if (symbolMap != null) {\n         String replacement = null;\n--- a/test/com/google/javascript/jscomp/ReplaceCssNamesTest.java\n+++ b/test/com/google/javascript/jscomp/ReplaceCssNamesTest.java\n import static com.google.javascript.jscomp.ReplaceCssNames.UNKNOWN_SYMBOL_WARNING;\n \n import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Maps;\n-import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.rhino.Node;\n \n import java.util.Map;\n+import java.util.Set;\n \n \n /**\n       .build();\n \n   CssRenamingMap renamingMap;\n+  Set<String> whitelist;\n \n   Map<String, Integer> cssNames;\n \n   }\n \n   @Override protected CompilerPass getProcessor(Compiler compiler) {\n-    return new ReplaceCssNames(compiler, cssNames) {\n+    return new ReplaceCssNames(compiler, cssNames, whitelist) {\n       @Override\n       protected CssRenamingMap getCssRenamingMap() {\n         return useReplacementMap ? renamingMap : null;\n          \"el.className = 'goog-colorswatch-focussed'\",\n          null, UNKNOWN_SYMBOL_WARNING);\n     test(\"setClass(goog.getCssName('inactive-buttonbar'))\",\n-         \"setClass('inactive-buttonbar')\", null, UNKNOWN_SYMBOL_WARNING);\n+        \"setClass('inactive-buttonbar')\", null, UNKNOWN_SYMBOL_WARNING);\n   }\n \n   public void testTwoArgsWithStringLiterals() {\n     test(\"setClass(goog.getCssName('buttonbar', 'disabled'))\",\n          null, UNEXPECTED_STRING_LITERAL_ERROR);\n     test(\"setClass(goog.getCssName(goog.getCssName('buttonbar'), 'active'))\",\n-         null, UNEXPECTED_STRING_LITERAL_ERROR);\n+        null, UNEXPECTED_STRING_LITERAL_ERROR);\n   }\n \n   public void testTwoArsWithVariableFirstArg() {\n     compiler.setErrorManager(errorMan);\n     Node root = compiler.parseTestCode(input);\n     useReplacementMap = false;\n-    ReplaceCssNames replacer = new ReplaceCssNames(compiler, null);\n+    ReplaceCssNames replacer = new ReplaceCssNames(compiler, null, null);\n     replacer.process(null, root);\n     assertEquals(\"[\\\"test\\\",base+\\\"-active\\\"]\", compiler.toSource(root));\n     assertEquals(\"There should be no errors\", 0, errorMan.getErrorCount());\n     assertEquals(\"There should be no warnings\", 0, errorMan.getWarningCount());\n   }\n \n+  public void testWhitelistByPart() {\n+    whitelist = ImmutableSet.<String>of(\"goog\", \"elephant\");\n+    test(\"var x = goog.getCssName('goog')\",\n+         \"var x = 'goog'\");\n+    test(\"var x = goog.getCssName('elephant')\",\n+         \"var x = 'elephant'\");\n+    // Whitelisting happens before splitting, not after.\n+    test(\"var x = goog.getCssName('goog-elephant')\",\n+         \"var x = 'g-e'\");\n+  }\n+\n+  public void testWhitelistByWhole() {\n+    whitelist = ImmutableSet.<String>of(\"long-prefix\");\n+    renamingMap = getFullMap();\n+    test(\"var x = goog.getCssName('long-prefix')\",\n+         \"var x = 'long-prefix'\");\n+  }\n+\n+  public void testWhitelistWithDashes() {\n+    whitelist = ImmutableSet.<String>of(\"goog-elephant\");\n+    test(\"var x = goog.getCssName('goog')\",\n+        \"var x = 'g'\");\n+    test(\"var x = goog.getCssName('elephant')\",\n+        \"var x = 'e'\");\n+    test(\"var x = goog.getCssName('goog-elephant')\",\n+        \"var x = 'goog-elephant'\");\n+  }\n+\n }", "timestamp": 1352500641, "metainfo": ""}