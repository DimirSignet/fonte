{"sha": "14a3fc38f91b54ba0d82e02b8e2a1e08b8605ca7", "log": "fix a cryptic warning due to an equally cryptic cast.  R=johnlenz DELTA=11 (11 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6240   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n \n     private boolean validAssignmentTarget(Node target) {\n       switch (target.getType()) {\n+        case Token.CAST: // CAST is a bit weird, but syntactically valid.\n         case Token.NAME:\n         case Token.GETPROP:\n         case Token.GETELEM:\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n         \"/** @const */ var g = {};\" +\n         \"/** @suppress {invalidCasts} */\" +\n         \"g.a = g.b = function() { var xyz = /** @type {string} */ (0); }\");\n+  }\n+\n+  public void testLhsCast() {\n+    CompilerOptions options = createCompilerOptions();\n+    test(\n+        options,\n+        \"/** @const */ var g = {};\" +\n+        \"/** @type {number} */ (g.foo) = 3;\",\n+        \"/** @const */ var g = {};\" +\n+        \"g.foo = 3;\");\n   }\n \n   public void testRenamePrefix() {", "timestamp": 1359753664, "metainfo": ""}