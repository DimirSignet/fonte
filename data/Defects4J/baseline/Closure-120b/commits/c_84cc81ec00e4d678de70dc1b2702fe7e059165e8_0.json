{"sha": "84cc81ec00e4d678de70dc1b2702fe7e059165e8", "log": "Move Extern and Js/Extern root node creation to before parsing.  This will prevent the tree structure from being invalid at later phases.  R=nicksantos DELTA=30  (25 added, 5 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1097   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     jsRoot = new Node(Token.BLOCK);\n     jsRoot.setIsSyntheticBlock(true);\n \n+    externsRoot = new Node(Token.BLOCK);\n+    externsRoot.setIsSyntheticBlock(true);\n+\n+    externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);\n+    externAndJsRoot.setIsSyntheticBlock(true);\n+\n     if (options.tracer.isOn()) {\n       tracker = new PerformanceTracker(jsRoot,\n           options.tracer == TracerMode.ALL);\n \n     try {\n       // Parse externs sources.\n-      externsRoot = new Node(Token.BLOCK);\n-      externsRoot.setIsSyntheticBlock(true);\n       for (CompilerInput input : externs) {\n         Node n = input.getAstRoot(this);\n         if (hasErrors()) {\n \n         jsRoot.addChildToBack(n);\n       }\n-\n-      externAndJsRoot = new Node(Token.BLOCK, externsRoot, jsRoot);\n-      externAndJsRoot.setIsSyntheticBlock(true);\n \n       return externAndJsRoot;\n     } finally {\n--- a/test/com/google/javascript/jscomp/CompilerTest.java\n+++ b/test/com/google/javascript/jscomp/CompilerTest.java\n     assertEquals(1, cb.getLineIndex());\n     assertEquals(6, cb.getColumnIndex());\n   }\n+\n+  public void testCyclicalDependencyInInputs() {\n+    JSSourceFile[] inputs = {\n+        JSSourceFile.fromCode(\n+            \"gin\", \"goog.provide('gin'); goog.require('tonic'); var gin = {};\"),\n+        JSSourceFile.fromCode(\"tonic\",\n+            \"goog.provide('tonic'); goog.require('gin'); var tonic = {};\"),\n+        JSSourceFile.fromCode(\n+            \"mix\", \"goog.require('gin'); goog.require('tonic');\")};\n+    CompilerOptions options = new CompilerOptions();\n+    options.ideMode = true;\n+    options.manageClosureDependencies = true;\n+    Compiler compiler = new Compiler();\n+    compiler.init(new JSSourceFile[0], inputs, options);\n+    compiler.parseInputs();\n+    assertEquals(compiler.externAndJsRoot, compiler.jsRoot.getParent());\n+    assertEquals(compiler.externAndJsRoot, compiler.externsRoot.getParent());\n+    assertNotNull(compiler.externAndJsRoot);\n+  }\n }", "timestamp": 1301347912, "metainfo": ""}