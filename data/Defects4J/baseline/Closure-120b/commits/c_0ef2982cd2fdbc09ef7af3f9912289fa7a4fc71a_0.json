{"sha": "0ef2982cd2fdbc09ef7af3f9912289fa7a4fc71a", "log": "Clean up some more warnings.  R=avd DELTA=9  (2 added, 3 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=69   ", "commit": "\n--- a/test/com/google/javascript/jscomp/SourceMapTest.java\n+++ b/test/com/google/javascript/jscomp/SourceMapTest.java\n \n   /**\n    * Class for parsing and representing a SourceMap\n-   * TODO(johnlenz): This would be best as a seperate open-source component.\n+   * TODO(johnlenz): This would be best as a separate open-source component.\n    *     Remove this when it is.\n    */\n   public class SourceMapReader {\n        * has been entirely consumed. Returns the string consumed (without the\n        * newline).\n        */\n-      public String consumeUntilEOL() throws SourceMapParseException {\n+      public String consumeUntilEOL() {\n         StringBuilder sb = new StringBuilder();\n \n         int ch = -1;\n--- a/test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocTokenStreamTest.java\n import junit.framework.TestCase;\n \n import java.util.List;\n-import java.io.IOException;\n \n /**\n  * Tests for {@link JsDocTokenStream}.\n   }\n \n   private void testJSDocTokenStream(String comment, List<JsDocToken> tokens,\n-      List<String> strings) throws IOException {\n+      List<String> strings) {\n     JsDocTokenStream stream = new JsDocTokenStream(comment, 0);\n     int stringsIndex = 0;\n     for (JsDocToken token : tokens) {", "timestamp": 1291669633, "metainfo": ""}