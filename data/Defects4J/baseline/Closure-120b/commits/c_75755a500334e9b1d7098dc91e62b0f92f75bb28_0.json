{"sha": "75755a500334e9b1d7098dc91e62b0f92f75bb28", "log": "Use Char Bias in variable renaming. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=45329892", "commit": "\n--- a/src/com/google/javascript/jscomp/RenameVars.java\n+++ b/src/com/google/javascript/jscomp/RenameVars.java\n \n   // Logic for bleeding functions, where the name leaks into the outer\n   // scope on IE but not on other browsers.\n-  private Set<Var> localBleedingFunctions = Sets.newHashSet();\n-  private ArrayListMultimap<Scope, Var> localBleedingFunctionsPerScope =\n+  private final Set<Var> localBleedingFunctions = Sets.newHashSet();\n+  private final ArrayListMultimap<Scope, Var> localBleedingFunctionsPerScope =\n       ArrayListMultimap.create();\n \n   class Assignment {\n    *\n    * @see NameAnonymousFunctions\n    */\n-  private boolean preserveFunctionExpressionNames;\n+  private final boolean preserveFunctionExpressionNames;\n \n   private final boolean shouldShadow;\n \n   // TODO(user): No longer needs to be public when shadowing doesn't use it.\n   public static final String LOCAL_VAR_PREFIX = \"L \";\n \n+  // TODO(user): Temporary. To make checking in / merging DefaultPassConfig\n+  // easier.\n+  private final NameGenerator nameGeneratorGiven;\n   RenameVars(AbstractCompiler compiler, String prefix,\n       boolean localRenamingOnly, boolean preserveFunctionExpressionNames,\n       boolean generatePseudoNames, boolean shouldShadow,\n       VariableMap prevUsedRenameMap,\n       @Nullable char[] reservedCharacters,\n       @Nullable Set<String> reservedNames) {\n+    this(compiler, prefix, localRenamingOnly, preserveFunctionExpressionNames,\n+        generatePseudoNames, shouldShadow, prevUsedRenameMap,\n+        reservedCharacters, reservedNames, null);\n+\n+  }\n+  RenameVars(AbstractCompiler compiler, String prefix,\n+      boolean localRenamingOnly, boolean preserveFunctionExpressionNames,\n+      boolean generatePseudoNames, boolean shouldShadow,\n+      VariableMap prevUsedRenameMap,\n+      @Nullable char[] reservedCharacters,\n+      @Nullable Set<String> reservedNames,\n+      @Nullable NameGenerator nameGenerator) {\n     this.compiler = compiler;\n     this.prefix = prefix == null ? \"\" : prefix;\n     this.localRenamingOnly = localRenamingOnly;\n     } else {\n       this.reservedNames = Sets.newHashSet(reservedNames);\n     }\n+    this.nameGeneratorGiven = nameGenerator;\n   }\n \n   /**\n    * Determines which new names to substitute for the original names.\n    */\n   private void assignNames(SortedSet<Assignment> varsToRename) {\n-    NameGenerator globalNameGenerator =\n-        new NameGenerator(reservedNames, prefix, reservedCharacters);\n-\n-    // Local variables never need a prefix.\n-    NameGenerator localNameGenerator =\n-        prefix.isEmpty() ? globalNameGenerator : new NameGenerator(\n-            reservedNames, \"\", reservedCharacters);\n+    NameGenerator globalNameGenerator = null;\n+    NameGenerator localNameGenerator = null;\n+\n+    if (nameGeneratorGiven != null) {\n+      globalNameGenerator = localNameGenerator = nameGeneratorGiven;\n+      nameGeneratorGiven.restartNaming();\n+    } else {\n+      globalNameGenerator =\n+          new NameGenerator(reservedNames, prefix, reservedCharacters);\n+\n+      // Local variables never need a prefix.\n+      localNameGenerator =\n+          prefix.isEmpty() ? globalNameGenerator : new NameGenerator(\n+              reservedNames, \"\", reservedCharacters);\n+    }\n \n     // Generated names and the assignments for non-local vars.\n     List<Assignment> pendingAssignments = new ArrayList<Assignment>();\n--- a/test/com/google/javascript/jscomp/RenameLocalVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RenameLocalVarsTest.java\n \n package com.google.javascript.jscomp;\n \n+import java.util.HashSet;\n+\n /**\n  * Tests for {@link RenameVars}.\n  * @see RenameVarsTest\n \n   private String prefix = DEFAULT_PREFIX;\n \n+  private NameGenerator nameGenerator = null;\n+\n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n     return new RenameVars(\n-        compiler, prefix, true, false, false, false, null, null, null);\n+        compiler, prefix, true, false, false, false,\n+        null, null, null, nameGenerator);\n+  }\n+\n+  @Override\n+  protected void setUp() {\n+    nameGenerator = null;\n   }\n \n   public void testRenameSimple() {\n          \"} Bar();\");\n     prefix = DEFAULT_PREFIX;\n   }\n+\n+  public void testBias() {\n+    nameGenerator = new NameGenerator(new HashSet<String>(0), \"\", null);\n+    nameGenerator.favors(\"AAAAAAAAHH\");\n+    test(\"function foo(x,y){}\", \"function foo(A,H){}\");\n+  }\n+\n+  public void testBias2() {\n+    nameGenerator = new NameGenerator(new HashSet<String>(0), \"\", null);\n+    nameGenerator.favors(\"AAAAAAAAHH\");\n+    test(\"function foo(x,y){ var z = z + z + z}\",\n+         \"function foo(H,a){ var A = A + A + A}\");\n+  }\n }\n--- a/test/com/google/javascript/jscomp/RenameVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RenameVarsTest.java\n import com.google.common.collect.ImmutableMap;\n import com.google.javascript.rhino.Node;\n \n-import java.util.*;\n+import java.util.HashSet;\n+import java.util.Map;\n \n \n /**\n   private boolean generatePseudoNames = false;\n   private boolean shouldShadow = false;\n   private boolean withNormalize = false;\n+  private NameGenerator nameGenerator = null;\n \n   @Override\n   protected CodingConvention getCodingConvention() {\n       pass =  renameVars = new RenameVars(compiler, prefix,\n           localRenamingOnly, preserveFunctionExpressionNames,\n           generatePseudoNames, shouldShadow,\n-          previouslyUsedMap, null, null);\n+          previouslyUsedMap, null, null, nameGenerator);\n     }\n \n     if (withNormalize) {\n     preserveFunctionExpressionNames = false;\n     generatePseudoNames = false;\n     shouldShadow = false;\n+    nameGenerator = null;\n \n     // TODO(johnlenz): Enable Normalize during these tests.\n   }\n             \"var d = function($super,a){};\");\n   }\n \n+  public void testBias() {\n+    nameGenerator = new NameGenerator(new HashSet<String>(0), \"\", null);\n+    nameGenerator.favors(\"AAAAAAAAHH\");\n+    test(\"var x, y\", \"var A, H\");\n+  }\n+\n   public void testPseudoNames() {\n     generatePseudoNames = false;\n     // See http://code.google.com/p/closure-compiler/issues/detail?id=32\n       closurePass.process(externs, root);\n       renameVars = new RenameVars(compiler, prefix,\n           false, false, false, false, previouslyUsedMap, null,\n-          closurePass.getExportedVariableNames());\n+          closurePass.getExportedVariableNames(), null);\n       renameVars.process(externs, root);\n     }\n   }\n \n   private class NormalizePassWrapper implements CompilerPass {\n     private final Compiler compiler;\n-    private CompilerPass wrappedPass;\n+    private final CompilerPass wrappedPass;\n \n     private NormalizePassWrapper(Compiler compiler,\n         CompilerPass wrappedPass) {\n--- a/test/com/google/javascript/jscomp/ShadowVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/ShadowVariablesTest.java\n   protected CompilerPass getProcessor(Compiler compiler) {\n       pass = new RenameVars(\n           compiler, \"\", false, false,\n-          generatePseudoNames, true, null, null, null);\n+          generatePseudoNames, true, null, null, null, null);\n       return  pass;\n   }\n ", "timestamp": 1366235058, "metainfo": ""}