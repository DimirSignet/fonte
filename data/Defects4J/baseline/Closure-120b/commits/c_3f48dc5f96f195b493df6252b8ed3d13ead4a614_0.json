{"sha": "3f48dc5f96f195b493df6252b8ed3d13ead4a614", "log": "Strip compound assignments, eg, \"foo.stripMe.bar = bam\". ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=44414453", "commit": "\n--- a/src/com/google/javascript/jscomp/StripCode.java\n+++ b/src/com/google/javascript/jscomp/StripCode.java\n       //   l-value\n       //   r-value\n       Node lvalue = n.getFirstChild();\n-      if (nameEndsWithFieldNameToStrip(lvalue) ||\n+      if (nameIncludesFieldNameToStrip(lvalue) ||\n           qualifiedNameBeginsWithStripType(lvalue)) {\n \n         // Limit to EXPR_RESULT because it is not\n     }\n \n     /**\n+     * @return Whether a name includes a field name that should be stripped.\n+     * E.g., \"foo.stripMe.bar\", \"(foo.bar).stripMe\", etc.\n+     */\n+    boolean nameIncludesFieldNameToStrip(@Nullable Node n) {\n+      if (n != null && n.isGetProp()) {\n+        Node propNode = n.getLastChild();\n+        return isStripName(propNode.getString())\n+            || nameIncludesFieldNameToStrip(n.getFirstChild());\n+      }\n+      return false;\n+    }\n+\n+    /**\n      * Determines whether the given node helps to define a\n      * strip type. For example, goog.inherits(stripType, Object)\n      * would be such a call.\n--- a/test/com/google/javascript/jscomp/StripCodeTest.java\n+++ b/test/com/google/javascript/jscomp/StripCodeTest.java\n   }\n \n   public void testPublicPropertyAssignment() {\n-    // We don't eliminate property assignments on vars/properties that we\n-    // remove, since the debugging classes should have setter methods instead\n-    // of public properties.\n-    testSame(\"rootLogger.someProperty=3\");\n-    testSame(\"this.blcLogger_.level=x\");\n-    testSame(\"goog.ui.Component.logger.prop=y\");\n+    // Eliminate property assignments on vars/properties that we\n+    // remove as otherwise we create invalid code.\n+    test(\"goog.debug.Logger = 1; goog.debug.Logger.prop=2; \", \"\");\n+    test(\"this.blcLogger_.level=x\", \"\");\n+    test(\"goog.ui.Component.logger.prop=y\", \"\");\n+    test(\"goog.ui.Component.logger.prop.foo.bar=baz\", \"\");\n   }\n \n   public void testGlobalCallWithStrippedType() {\n          \"e.f.TraceXXX.prototype.yyy = 2;\", \"\");\n   }\n \n-  public void testStripCallsToStrippedNames() {\n+  public void testStripCallsToStrippedNames1() {\n     test(\"a = function() { this.logger_ = function(msg){}; };\" +\n          \"a.prototype.b = function() { this.logger_('hi'); }\",\n          \"a=function(){};a.prototype.b=function(){}\");\n          \"a=function(){};a.prototype.b=function(){}\");\n   }\n \n+  public void testStripCallsToStrippedNames2() {\n+    test(\"a = function() {};\" +\n+        \"a.prototype.logger_ = function(msg) {};\" +\n+        \"a.prototype.b = function() { this.logger_('hi'); }\",\n+        \"a=function(){};a.prototype.b=function(){}\");\n+  }\n+\n   public void testStripVarsInitializedFromStrippedNames() {\n     test(\"a = function() { this.logger_ = function() { return 1; }; };\" +\n          \"a.prototype.b = function() { \" +\n          \"var z = goog.debug.Logger.getLogger(); x(y[z['foo']]);\",\n          \"var x = function() {}; var y = {}; x(y[null]);\");\n   }\n+\n+  public void testNamespace1() {\n+    test(\n+        \"var x = {};x.traceutil = {};x.traceutil.FOO = 1;\",\n+        \"var x = {};\");\n+  }\n+\n }", "timestamp": 1364253490, "metainfo": ""}