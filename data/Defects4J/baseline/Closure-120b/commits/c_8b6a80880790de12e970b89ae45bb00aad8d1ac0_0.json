{"sha": "8b6a80880790de12e970b89ae45bb00aad8d1ac0", "log": "Change the compiler API so that a serialized VariableMap is not required.  R=nicksantos DELTA=72  (12 added, 43 deleted, 17 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5692   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n     options.sourceMapFormat = config.sourceMapFormat;\n \n     if (!config.variableMapInputFile.equals(\"\")) {\n-      options.inputVariableMapSerialized =\n-          VariableMap.load(config.variableMapInputFile).toBytes();\n+      options.inputVariableMap =\n+          VariableMap.load(config.variableMapInputFile);\n     }\n \n     if (!config.propertyMapInputFile.equals(\"\")) {\n-      options.inputPropertyMapSerialized =\n-          VariableMap.load(config.propertyMapInputFile).toBytes();\n+      options.inputPropertyMap =\n+          VariableMap.load(config.propertyMapInputFile);\n     }\n \n     if (config.languageIn.length() > 0) {\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n   public AnonymousFunctionNamingPolicy anonymousFunctionNaming;\n \n   /** Serialized input variable renaming map. */\n-  public byte[] inputVariableMapSerialized;\n+  VariableMap inputVariableMap;\n \n   /** Serialized input property renaming map. */\n-  public byte[] inputPropertyMapSerialized;\n+  VariableMap inputPropertyMap;\n \n   /** Whether to export test functions. */\n   public boolean exportTestFunctions;\n     this.anonymousFunctionNaming = anonymousFunctionNaming;\n   }\n \n-  public void setInputVariableMapSerialized(byte[] inputVariableMapSerialized) {\n-    this.inputVariableMapSerialized = inputVariableMapSerialized;\n-  }\n-\n-  public void setInputPropertyMapSerialized(byte[] inputPropertyMapSerialized) {\n-    this.inputPropertyMapSerialized = inputPropertyMapSerialized;\n+  @Deprecated\n+  public void setInputVariableMapSerialized(byte[] inputVariableMapSerialized)\n+      throws ParseException {\n+    this.inputVariableMap = VariableMap.fromBytes(inputVariableMapSerialized);\n+  }\n+\n+  public void setInputVariableMap(VariableMap inputVariableMap) {\n+    this.inputVariableMap = inputVariableMap;\n+  }\n+\n+  @Deprecated\n+  public void setInputPropertyMapSerialized(byte[] inputPropertyMapSerialized)\n+      throws ParseException {\n+    this.inputPropertyMap = VariableMap.fromBytes(inputPropertyMapSerialized);\n+  }\n+\n+  public void setInputPropertyMap(VariableMap inputPropertyMap) {\n+    this.inputPropertyMap = inputPropertyMap;\n   }\n \n   public void setExportTestFunctions(boolean exportTestFunctions) {\n     this.replaceStringsReservedStrings = replaceStringsReservedStrings;\n   }\n \n-  public void setReplaceStringsInputMapSerialized(byte[] serializedMap)\n-      throws ParseException {\n-    this.replaceStringsInputMap = VariableMap.fromBytes(serializedMap);\n+  public void setReplaceStringsInputMap(VariableMap serializedMap) {\n+    this.replaceStringsInputMap = serializedMap;\n   }\n \n   public void setPrettyPrint(boolean prettyPrint) {\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n import java.io.File;\n import java.io.FileReader;\n import java.io.IOException;\n-import java.text.ParseException;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n   static final DiagnosticType REPORT_PATH_IO_ERROR =\n       DiagnosticType.error(\"JSC_REPORT_PATH_IO_ERROR\",\n           \"Error writing compiler report to {0}\");\n-\n-  private static final DiagnosticType INPUT_MAP_PROP_PARSE =\n-      DiagnosticType.error(\"JSC_INPUT_MAP_PROP_PARSE\",\n-          \"Input property map parse error: {0}\");\n-\n-  private static final DiagnosticType INPUT_MAP_VAR_PARSE =\n-      DiagnosticType.error(\"JSC_INPUT_MAP_VAR_PARSE\",\n-          \"Input variable map parse error: {0}\");\n \n   private static final DiagnosticType NAME_REF_GRAPH_FILE_ERROR =\n       DiagnosticType.error(\"JSC_NAME_REF_GRAPH_FILE_ERROR\",\n       new PassFactory(\"renameProperties\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n-      VariableMap map = null;\n-      if (options.inputPropertyMapSerialized != null) {\n-        try {\n-          map = VariableMap.fromBytes(options.inputPropertyMapSerialized);\n-        } catch (ParseException e) {\n-          return new ErrorPass(compiler,\n-              JSError.make(INPUT_MAP_PROP_PARSE, e.getMessage()));\n-        }\n-      }\n-\n-      final VariableMap prevPropertyMap = map;\n+      final VariableMap prevPropertyMap = options.inputPropertyMap;\n       return new CompilerPass() {\n         @Override public void process(Node externs, Node root) {\n           propertyMap = runPropertyRenaming(\n       new PassFactory(\"renameVars\", true) {\n     @Override\n     protected CompilerPass createInternal(final AbstractCompiler compiler) {\n-      VariableMap map = null;\n-      if (options.inputVariableMapSerialized != null) {\n-        try {\n-          map = VariableMap.fromBytes(options.inputVariableMapSerialized);\n-        } catch (ParseException e) {\n-          return new ErrorPass(compiler,\n-              JSError.make(INPUT_MAP_VAR_PARSE, e.getMessage()));\n-        }\n-      }\n-\n-      final VariableMap prevVariableMap = map;\n+      final VariableMap prevVariableMap = options.inputVariableMap;\n       return new CompilerPass() {\n         @Override public void process(Node externs, Node root) {\n           variableMap = runVariableRenaming(", "timestamp": 1350931479, "metainfo": ""}