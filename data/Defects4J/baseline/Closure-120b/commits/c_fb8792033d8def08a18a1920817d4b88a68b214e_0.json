{"sha": "fb8792033d8def08a18a1920817d4b88a68b214e", "log": "Make some NodeUtility function visible for use outside of JsCompiler (so clients can avoid re-implementing the same behaviors).  R=nicksantos DELTA=4  (0 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1865   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n   /**\n    * Gets the root node of a qualified name. Must be either NAME or THIS.\n    */\n-  static Node getRootOfQualifiedName(Node qName) {\n+  public static Node getRootOfQualifiedName(Node qName) {\n     for (Node current = qName; true;\n          current = current.getFirstChild()) {\n       int type = current.getType();\n     * @param fnNode The function.\n     * @return The Node containing the Function parameters.\n     */\n-  static Node getFnParameters(Node fnNode) {\n+  public static Node getFnParameters(Node fnNode) {\n     // Function NODE: [ FUNCTION -> NAME, LP -> ARG1, ARG2, ... ]\n     Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);\n     return fnNode.getFirstChild().getNext();\n   /**\n    * Get the JSDocInfo for a function.\n    */\n-  static JSDocInfo getFunctionInfo(Node n) {\n+  public static JSDocInfo getFunctionInfo(Node n) {\n     Preconditions.checkState(n.getType() == Token.FUNCTION);\n     JSDocInfo fnInfo = n.getJSDocInfo();\n     if (fnInfo == null && NodeUtil.isFunctionExpression(n)) {\n    * @param n The node.\n    * @return The source name property on the node or its ancestors.\n    */\n-  static String getSourceName(Node n) {\n+  public static String getSourceName(Node n) {\n     String sourceName = null;\n     while (sourceName == null && n != null) {\n       sourceName = (String) n.getProp(Node.SOURCENAME_PROP);", "timestamp": 1305300266, "metainfo": ""}