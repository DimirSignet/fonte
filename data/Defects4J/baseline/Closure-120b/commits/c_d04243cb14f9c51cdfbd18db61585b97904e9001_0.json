{"sha": "d04243cb14f9c51cdfbd18db61585b97904e9001", "log": "Fold a switch whose condition is a constant. Fixes issue 271.  R=nicksantos,johnlenz DELTA=167  (157 added, 1 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5832   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n+++ b/src/com/google/javascript/jscomp/PeepholeRemoveDeadCode.java\n \n     // Removing cases when there exists a default case is not safe.\n     if (defaultCase == null) {\n-      Node next = null;\n-      Node prev = null;\n-      // The first child is the switch conditions skip it.\n-      for (Node c = n.getFirstChild().getNext(); c != null; c = next) {\n-        next = c.getNext();\n-        if (!mayHaveSideEffects(c.getFirstChild()) && isUselessCase(c, prev)) {\n-          removeCase(n, c);\n+      Node cond = n.getFirstChild(), prev = null, next = null, cur;\n+\n+      for (cur = cond.getNext(); cur != null; cur = next) {\n+        next = cur.getNext();\n+        if (!mayHaveSideEffects(cur.getFirstChild()) &&\n+            isUselessCase(cur, prev)) {\n+          removeCase(n, cur);\n         } else {\n-          prev = c;\n+          prev = cur;\n+        }\n+      }\n+\n+      // Optimize switches with constant condition\n+      if (NodeUtil.isLiteralValue(cond, false)) {\n+        Node caseLabel;\n+        TernaryValue caseMatches = TernaryValue.TRUE;\n+        // Remove cases until you find one that may match\n+        for (cur = cond.getNext(); cur != null; cur = next) {\n+          next = cur.getNext();\n+          caseLabel = cur.getFirstChild();\n+          caseMatches = PeepholeFoldConstants.evaluateComparison(\n+              Token.SHEQ, cond, caseLabel);\n+          if (caseMatches == TernaryValue.TRUE) {\n+            break;\n+          } else if (caseMatches == TernaryValue.UNKNOWN) {\n+            break;\n+          } else {\n+            n.removeChild(cur);\n+            reportCodeChange();\n+          }\n+        }\n+        if (caseMatches != TernaryValue.UNKNOWN) {\n+          Node block, lastStm;\n+          // Skip cases until you find one whose last stm is a break\n+          while (cur != null) {\n+            block = cur.getLastChild();\n+            lastStm = block.getLastChild();\n+            cur = cur.getNext();\n+            if (lastStm.isBreak()) {\n+              block.removeChild(lastStm);\n+              reportCodeChange();\n+              break;\n+            }\n+          }\n+          // Remove any remaining cases\n+          for (; cur != null; cur = next) {\n+            next = cur.getNext();\n+            n.removeChild(cur);\n+            reportCodeChange();\n+          }\n+          // If there is one case left, we may be able to fold it\n+          cur = cond.getNext();\n+          if (cur != null && cur.getNext() == null) {\n+            block = cur.getLastChild();\n+            if (!(NodeUtil.containsType(block, Token.BREAK,\n+                NodeUtil.MATCH_NOT_FUNCTION))) {\n+              cur.removeChild(block);\n+              n.getParent().replaceChild(n, block);\n+              reportCodeChange();\n+              return block;\n+            }\n+          }\n         }\n       }\n     }\n     // Remove the switch if there are no remaining cases.\n     if (n.hasOneChild()) {\n       Node condition = n.removeFirstChild();\n-      Node parent = n.getParent();\n       Node replacement = IR.exprResult(condition).srcref(n);\n-      parent.replaceChild(n, replacement);\n+      n.getParent().replaceChild(n, replacement);\n       reportCodeChange();\n       return replacement;\n     }\n--- a/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeRemoveDeadCodeTest.java\n     foldSame(\"switch(a){case 1: var c =2; break;}\");\n     foldSame(\"function f() {switch(a){case 1: return;}}\");\n     foldSame(\"x:switch(a){case 1: break x;}\");\n+\n+    fold(\"switch ('foo') {\\n\" +\n+        \"case 'foo':\\n\" +\n+        \"  foo();\\n\" +\n+        \"  break;\\n\" +\n+        \"case 'bar':\\n\" +\n+        \"  bar();\\n\" +\n+        \"  break;\\n\" +\n+        \"}\",\n+        \"{foo();}\");\n+    fold(\"switch ('noMatch') {\\n\" +\n+        \"case 'foo':\\n\" +\n+        \"  foo();\\n\" +\n+        \"  break;\\n\" +\n+        \"case 'bar':\\n\" +\n+        \"  bar();\\n\" +\n+        \"  break;\\n\" +\n+        \"}\",\n+        \"\");\n+    foldSame(\"switch ('fallThru') {\\n\" +\n+        \"case 'fallThru':\\n\" +\n+        \"  if (foo(123) > 0) {\\n\" +\n+        \"    foobar(1);\\n\" +\n+        \"    break;\\n\" +\n+        \"  }\\n\" +\n+        \"  foobar(2);\\n\" +\n+        \"case 'bar':\\n\" +\n+        \"  bar();\\n\" +\n+        \"}\");\n+    foldSame(\"switch ('fallThru') {\\n\" +\n+        \"case 'fallThru':\\n\" +\n+        \"  foo();\\n\" +\n+        \"case 'bar':\\n\" +\n+        \"  bar();\\n\" +\n+        \"}\");\n+    foldSame(\"switch ('hasDefaultCase') {\\n\" +\n+        \"case 'foo':\\n\" +\n+        \"  foo();\\n\" +\n+        \"  break;\\n\" +\n+        \"default:\\n\" +\n+        \"  bar();\\n\" +\n+        \"  break;\\n\" +\n+        \"}\");\n+    fold(\"switch ('repeated') {\\n\" +\n+        \"case 'repeated':\\n\" +\n+        \"  foo();\\n\" +\n+        \"  break;\\n\" +\n+        \"case 'repeated':\\n\" +\n+        \"  bar();\\n\" +\n+        \"  break;\\n\" +\n+        \"}\",\n+        \"{foo();}\");\n+    fold(\"switch ('foo') {\\n\" +\n+        \"case 'bar':\\n\" +\n+        \"  bar();\\n\" +\n+        \"  break;\\n\" +\n+        \"case notConstant:\\n\" +\n+        \"  foobar();\\n\" +\n+        \"  break;\\n\" +\n+        \"case 'foo':\\n\" +\n+        \"  foo();\\n\" +\n+        \"  break;\\n\" +\n+        \"}\",\n+        \"switch ('foo') {\\n\" +\n+        \"case notConstant:\\n\" +\n+        \"  foobar();\\n\" +\n+        \"  break;\\n\" +\n+        \"case 'foo':\\n\" +\n+        \"  foo();\\n\" +\n+        \"  break;\\n\" +\n+        \"}\");\n+    fold(\"switch (1) {\\n\" +\n+        \"case 1:\\n\" +\n+        \"  foo();\\n\" +\n+        \"  break;\\n\" +\n+        \"case 2:\\n\" +\n+        \"  bar();\\n\" +\n+        \"  break;\\n\" +\n+        \"}\",\n+        \"{foo();}\");\n+    fold(\"switch (1) {\\n\" +\n+        \"case 1.1:\\n\" +\n+        \"  foo();\\n\" +\n+        \"  break;\\n\" +\n+        \"case 2:\\n\" +\n+        \"  bar();\\n\" +\n+        \"  break;\\n\" +\n+        \"}\",\n+        \"\");\n+    foldSame(\"switch (0) {\\n\" +\n+        \"case NaN:\\n\" +\n+        \"  foobar();\\n\" +\n+        \"  break;\\n\" +\n+        \"case -0.0:\\n\" +\n+        \"  foo();\\n\" +\n+        \"  break;\\n\" +\n+        \"case 2:\\n\" +\n+        \"  bar();\\n\" +\n+        \"  break;\\n\" +\n+        \"}\");\n+    foldSame(\"switch ('\\\\v') {\\n\" +\n+        \"case '\\\\u000B':\\n\" +\n+        \"  foo();\\n\" +\n+        \"}\");\n   }\n \n   public void testRemoveNumber() {", "timestamp": 1353023102, "metainfo": ""}