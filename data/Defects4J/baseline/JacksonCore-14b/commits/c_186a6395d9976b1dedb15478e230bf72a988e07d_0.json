{"sha": "186a6395d9976b1dedb15478e230bf72a988e07d", "log": "Fix #220", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n                     while (true) {\n                         if (ptr == end) { // yes, match!\n                             _parsingContext.setCurrentName(str.getValue());\n-                            _isNextTokenNameYes(_skipColonFast(ptr+1));\n+                            i = _skipColonFast(ptr+1);\n+                            _isNextTokenNameYes(i);\n                             return true;\n                         }\n                         if (nameBytes[offset] != _inputBuffer[ptr]) {\n                     }\n                 }\n             }\n+            _inputPtr = ptr-1;\n+            return _skipColon2(true);\n         }\n         _inputPtr = ptr-1;\n         return _skipColon2(false);\n         }\n         return _skipColon2(false);\n     }\n-    \n+\n     private final int _skipColon2(boolean gotColon) throws IOException\n     {\n         while (_inputPtr < _inputEnd || loadMore()) {\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n \n     private final JsonFactory JSON_F = new JsonFactory();\n \n-    // [JACKSON-653]\n     public void testIsNextTokenName() throws Exception\n     {\n         _testIsNextTokenName1(false);\n         _testIsNextTokenName3(true);\n     }\n \n-    // [Issue#34]\n+    // [jackson-core#34]\n     public void testIssue34() throws Exception\n     {\n         _testIssue34(false);\n         _testIssue34(true);\n     }\n \n-    // [Issue#38] with nextFieldName\n+    // [jackson-core#38] with nextFieldName\n     public void testIssue38() throws Exception\n     {\n         _testIssue38(false);\n         _testNextNameWithLong(true);\n     }\n \n+    // for [core#220]: problem with `nextFieldName(str)`, indented content\n+    public void testNextNameWithIndentation() throws Exception\n+    {\n+        _testNextFieldNameIndent(false);\n+        _testNextFieldNameIndent(true);\n+    }\n+    \n     public void testNextTextValue() throws Exception\n     {\n         _textNextText(false);\n     private void _testIsNextTokenName3(boolean useStream) throws Exception\n     {\n         final String DOC = \"{\\\"name\\\":123,\\\"name2\\\":14,\\\"x\\\":\\\"name\\\"}\";\n-        JsonParser jp = useStream ?\n+        JsonParser p = useStream ?\n                 JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n             : JSON_F.createParser(new StringReader(DOC));\n-        assertNull(jp.nextFieldName());\n-        assertToken(JsonToken.START_OBJECT, jp.getCurrentToken());\n-        assertEquals(\"name\", jp.nextFieldName());\n-        assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n-        assertEquals(\"name\", jp.getCurrentName());\n-        assertEquals(\"name\", jp.getText());\n-        assertNull(jp.nextFieldName());\n-        assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken());\n-        assertEquals(123, jp.getIntValue());\n-\n-        assertEquals(\"name2\", jp.nextFieldName());\n-        assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n-        assertEquals(\"name2\", jp.getCurrentName());\n-        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n-\n-        assertEquals(\"x\", jp.nextFieldName());\n-        assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n-        assertEquals(\"x\", jp.getCurrentName());\n-\n-        assertNull(jp.nextFieldName());\n-        assertToken(JsonToken.VALUE_STRING, jp.getCurrentToken());\n-\n-        assertNull(jp.nextFieldName());\n-        assertToken(JsonToken.END_OBJECT, jp.getCurrentToken());\n-\n-        assertNull(jp.nextFieldName());\n-        assertNull(jp.getCurrentToken());\n-\n-        jp.close();\n-    }\n-\n+        assertNull(p.nextFieldName());\n+        assertToken(JsonToken.START_OBJECT, p.getCurrentToken());\n+        assertEquals(\"name\", p.nextFieldName());\n+        assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());\n+        assertEquals(\"name\", p.getCurrentName());\n+        assertEquals(\"name\", p.getText());\n+        assertNull(p.nextFieldName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());\n+        assertEquals(123, p.getIntValue());\n+\n+        assertEquals(\"name2\", p.nextFieldName());\n+        assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());\n+        assertEquals(\"name2\", p.getCurrentName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+\n+        assertEquals(\"x\", p.nextFieldName());\n+        assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());\n+        assertEquals(\"x\", p.getCurrentName());\n+\n+        assertNull(p.nextFieldName());\n+        assertToken(JsonToken.VALUE_STRING, p.getCurrentToken());\n+\n+        assertNull(p.nextFieldName());\n+        assertToken(JsonToken.END_OBJECT, p.getCurrentToken());\n+\n+        assertNull(p.nextFieldName());\n+        assertNull(p.getCurrentToken());\n+\n+        p.close();\n+    }\n+\n+    private void _testNextFieldNameIndent(boolean useStream) throws Exception\n+    {\n+        final String DOC = \"{\\n  \\\"name\\\" : \\n  [\\n  ]\\n   }\";\n+        JsonParser p = useStream ?\n+                JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : JSON_F.createParser(new StringReader(DOC));\n+        assertToken(JsonToken.START_OBJECT, p.nextToken());\n+        assertTrue(p.nextFieldName(new SerializedString(\"name\")));\n+\n+        assertToken(JsonToken.START_ARRAY, p.nextToken());\n+        assertToken(JsonToken.END_ARRAY, p.nextToken());\n+        assertToken(JsonToken.END_OBJECT, p.nextToken());\n+\n+        assertNull(p.nextToken());\n+\n+        p.close();\n+    }\n+    \n     private void _textNextText(boolean useStream) throws Exception\n     {\n         final String DOC = aposToQuotes(\"{'a':'123','b':5,'c':[false,'foo']}\");\n--- a/src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java\n package com.fasterxml.jackson.core.sym;\n \n-import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.util.HashSet;\n ", "timestamp": 1443649404, "metainfo": ""}