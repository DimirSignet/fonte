{"sha": "d9db35ef7ccffecb2f73841a3904d2e08b6b86fc", "log": "complete change for string-based reader (lookup->dumb comparisons)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n \n     private final int _skipColon2(boolean gotColon) throws IOException\n     {\n-        final int[] codes = _icWS;\n         while (true) {\n             if (_inputPtr >= _inputEnd) {\n                 loadMoreGuaranteed();\n             }\n             int i = (int) _inputBuffer[_inputPtr++];\n-            if (i >= 64) {\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH) {\n+                    _skipComment();\n+                    continue;\n+                }\n+                if (i == INT_HASH) {\n+                    if (_skipYAMLComment()) {\n+                        continue;\n+                    }\n+                }\n                 if (gotColon) {\n                     return i;\n                 }\n-                _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n-            }\n-            switch (codes[i]) {\n-            case -1:\n-                _throwInvalidSpace(i);\n-            case '#':\n-                if (_skipYAMLComment()) {\n-                    continue;\n-                }\n-                // fall through\n-            case 0:\n-                if (gotColon) {\n-                    return i;\n+                if (i != INT_COLON) {\n+                    if (i < INT_SPACE) {\n+                        _throwInvalidSpace(i);\n+                    }\n+                    _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n                 }\n                 gotColon = true;\n-                if (i != INT_COLON) {\n-                    _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n-                }\n-                break;\n-            case 1:\n                 continue;\n-            case '\\n':\n-                ++_currInputRow;\n-                _currInputRowStart = _inputPtr;\n-                break;\n-            case '\\r':\n-                _skipCR();\n-                break;\n-            case '/':\n-                _skipComment();\n-                break;\n-            }\n-        }\n-    }\n-    \n-    private final int _skipComma(int i) throws IOException\n-    {\n-        if (i != INT_COMMA) {\n-            _reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n-        }\n-        while (_inputPtr < _inputEnd) {\n-            i = (int) _inputBuffer[_inputPtr++];\n-            if (i > INT_SPACE) {\n-                if (i == INT_SLASH || i == INT_HASH) {\n-                    --_inputPtr;\n-                    return _skipAfterComma2();\n-                }\n-                return i;\n             }\n             if (i < INT_SPACE) {\n                 if (i == INT_LF) {\n                 }\n             }\n         }\n-        return _skipAfterComma2();\n-    }\n-\n-    private final int _skipAfterComma2() throws IOException\n-    {\n-        while (_inputPtr < _inputEnd || loadMore()) {\n-            int i = (int) _inputBuffer[_inputPtr++];\n+    }\n+    \n+    private final int _skipComma(int i) throws IOException\n+    {\n+        if (i != INT_COMMA) {\n+            _reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n+        }\n+        while (_inputPtr < _inputEnd) {\n+            i = (int) _inputBuffer[_inputPtr++];\n             if (i > INT_SPACE) {\n-                if (i == INT_SLASH) {\n-                    _skipComment();\n-                    continue;\n-                }\n-                if (i == INT_HASH) {\n-                    if (_skipYAMLComment()) {\n-                        continue;\n-                    }\n+                if (i == INT_SLASH || i == INT_HASH) {\n+                    --_inputPtr;\n+                    return _skipAfterComma2();\n                 }\n                 return i;\n             }\n                 }\n             }\n         }\n+        return _skipAfterComma2();\n+    }\n+\n+    private final int _skipAfterComma2() throws IOException\n+    {\n+        while (_inputPtr < _inputEnd || loadMore()) {\n+            int i = (int) _inputBuffer[_inputPtr++];\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH) {\n+                    _skipComment();\n+                    continue;\n+                }\n+                if (i == INT_HASH) {\n+                    if (_skipYAMLComment()) {\n+                        continue;\n+                    }\n+                }\n+                return i;\n+            }\n+            if (i < INT_SPACE) {\n+                if (i == INT_LF) {\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n+                } else if (i == INT_CR) {\n+                    _skipCR();\n+                } else if (i != INT_TAB) {\n+                    _throwInvalidSpace(i);\n+                }\n+            }\n+        }\n         throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");\n     }\n     \n     private final int _skipWSOrEnd() throws IOException\n     {\n-        final int[] codes = _icWS;\n         while (_inputPtr < _inputEnd) {\n             int i = (int) _inputBuffer[_inputPtr++];\n-            if (i >= 64) {\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH) {\n+                    _skipComment();\n+                    continue;\n+                }\n+                if (i == INT_HASH) {\n+                    if (_skipYAMLComment()) {\n+                        continue;\n+                    }\n+                }\n                 return i;\n-            }\n-            switch (codes[i]) {\n-            case -1:\n-                _throwInvalidSpace(i);\n-            case 0:\n-                return i;\n-            case 1:\n-                continue;\n-            case '\\n':\n-                ++_currInputRow;\n-                _currInputRowStart = _inputPtr;\n-                break;\n-            case '\\r':\n-                _skipCR();\n-                break;\n-            case '/':\n-                _skipComment();\n-                break;\n-            case '#':\n-                if (!_skipYAMLComment()) {\n-                    return i;\n-                }\n-                break;\n+            } else if (i != INT_SPACE) {\n+                if (i == INT_LF) {\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n+                } else if (i == INT_CR) {\n+                    _skipCR();\n+                } else if (i != INT_TAB) {\n+                    _throwInvalidSpace(i);\n+                }\n             }\n         }\n         return _skipWSOrEnd2();\n \n     private int _skipWSOrEnd2() throws IOException\n     {\n-        final int[] codes = _icWS;\n         while (true) {\n             if (_inputPtr >= _inputEnd) {\n-                if (!loadMore()) {\n-                    // We ran out of input...\n+                if (!loadMore()) { // We ran out of input...\n                     _handleEOF();\n                     return -1;\n                 }\n             }\n             int i = (int) _inputBuffer[_inputPtr++];\n-            if (i >= 64) {\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH) {\n+                    _skipComment();\n+                    continue;\n+                }\n+                if (i == INT_HASH) {\n+                    if (_skipYAMLComment()) {\n+                        continue;\n+                    }\n+                }\n                 return i;\n-            }\n-            switch (codes[i]) {\n-            case -1:\n-                _throwInvalidSpace(i);\n-            case 0:\n-                return i;\n-            case 1:\n-                continue;\n-            case '\\n':\n-                ++_currInputRow;\n-                _currInputRowStart = _inputPtr;\n-                break;\n-            case '\\r':\n-                _skipCR();\n-                break;\n-            case '/':\n-                _skipComment();\n-                break;\n-            case '#':\n-                if (!_skipYAMLComment()) {\n-                    return i;\n-                }\n-                break;\n+            } else if (i != INT_SPACE) {\n+                if (i == INT_LF) {\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n+                } else if (i == INT_CR) {\n+                    _skipCR();\n+                } else if (i != INT_TAB) {\n+                    _throwInvalidSpace(i);\n+                }\n             }\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     \n     private final int _skipWS() throws IOException\n     {\n-        /*\n-        final int[] codes = _icWS;\n-        while (_inputPtr < _inputEnd || loadMore()) {\n-            final int i = _inputBuffer[_inputPtr++] & 0xFF;\n-            switch (codes[i]) {\n-            case 0: // done!\n-                return i;\n-            case 1: // white space, skip\n-                continue;\n-            case 2: // 2/3/4-byte UTF: done\n-            case 3:\n-            case 4:\n-                return i;\n-            case INT_LF:\n-                ++_currInputRow;\n-                _currInputRowStart = _inputPtr;\n-                break;\n-            case INT_CR:\n-                _skipCR();\n-                break;\n-            case '/':\n-                _skipComment();\n-                break;\n-            case '#':\n-                if (!_skipYAMLComment()) {\n-                    return i;\n-                }\n-                break;\n-            default: // e.g. -1\n-                // Is this good enough error message?\n-                if (i < 32) {\n-                    _throwInvalidSpace(i);\n-                }\n-                _reportInvalidChar(i);\n-            }\n-        }\n-        */\n         while (_inputPtr < _inputEnd || loadMore()) {\n             int i = _inputBuffer[_inputPtr++] & 0xFF;\n             if (i > INT_SPACE) {\n         // We ran out of input...\n         _handleEOF();\n         return -1;\n-        \n-        /*\n-        final int[] codes = _icWS;\n-        while ((_inputPtr < _inputEnd) || loadMore()) {\n-            final int i = _inputBuffer[_inputPtr++] & 0xFF;\n-            switch (codes[i]) {\n-            case 0: // done!\n-                return i;\n-            case 1: // skip\n-                continue;\n-            case INT_LF:\n-                ++_currInputRow;\n-                _currInputRowStart = _inputPtr;\n-                break;\n-            case INT_CR:\n-                _skipCR();\n-                break;\n-            case INT_SLASH:\n-                _skipComment();\n-                break;\n-            case '#':\n-                if (!_skipYAMLComment()) {\n-                    return i;\n-                }\n-                break;\n-//            case 2: // 2-byte UTF\n-//            case 3: // 3-byte UTF\n-//            case 4: // 4-byte UTF\n-            default: // e.g. -1\n-                _reportInvalidChar(i);\n-            }\n-        }\n-        // We ran out of input...\n-        _handleEOF();\n-        return -1;\n-        */\n     }\n     \n     private final int _skipColon() throws IOException", "timestamp": 1398968741, "metainfo": ""}