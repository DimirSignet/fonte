{"sha": "46b4f022f2170d7c7d4ee8c6b0e98f9a860603b8", "log": "Implement #195: Add `JsonGenerator.getOuputBuffered()`", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n     @Override\n     public abstract Version version();\n \n+    /*\n+    /**********************************************************\n+    /* Public API, Feature configuration\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for enabling specified parser features:\n+     * check {@link Feature} for list of available features.\n+     *\n+     * @return Generator itself (this), to allow chaining\n+     */\n+    public abstract JsonGenerator enable(Feature f);\n+\n+    /**\n+     * Method for disabling specified  features\n+     * (check {@link Feature} for list of features)\n+     *\n+     * @return Generator itself (this), to allow chaining\n+     */\n+    public abstract JsonGenerator disable(Feature f);\n+\n+    /**\n+     * Method for enabling or disabling specified feature:\n+     * check {@link Feature} for list of available features.\n+     *\n+     * @return Generator itself (this), to allow chaining\n+     */\n+    public final JsonGenerator configure(Feature f, boolean state) {\n+        if (state) enable(f); else disable(f);\n+        return this;\n+    }\n+\n+    /**\n+     * Method for checking whether given feature is enabled.\n+     * Check {@link Feature} for list of available features.\n+     */\n+    public abstract boolean isEnabled(Feature f);\n+\n+\n+    /**\n+     * Bulk access method for getting state of all standard {@link Feature}s.\n+     * \n+     * @return Bit mask that defines current states of all standard {@link Feature}s.\n+     * \n+     * @since 2.3\n+     */\n+    public abstract int getFeatureMask();\n+\n+    /**\n+     * Bulk set method for (re)setting states of all standard {@link Feature}s\n+     * \n+     * @since 2.3\n+     * \n+     * @param values Bitmask that defines which {@link Feature}s are enabled\n+     *    and which disabled\n+     *\n+     * @return This parser object, to allow chaining of calls\n+     */\n+    public abstract JsonGenerator setFeatureMask(int values);\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, Schema configuration\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method to call to make this generator use specified schema.\n+     * Method must be called before generating any content, right after instance\n+     * has been created.\n+     * Note that not all generators support schemas; and those that do usually only\n+     * accept specific types of schemas: ones defined for data format this generator\n+     * produces.\n+     *<p>\n+     * If generator does not support specified schema, {@link UnsupportedOperationException}\n+     * is thrown.\n+     * \n+     * @param schema Schema to use\n+     * \n+     * @throws UnsupportedOperationException if generator does not support schema\n+     */\n+    public void setSchema(FormatSchema schema) {\n+        throw new UnsupportedOperationException(\"Generator of type \"+getClass().getName()+\" does not support schema of type '\"\n+                +schema.getSchemaType()+\"'\");\n+    }\n+\n+    /**\n+     * Method for accessing Schema that this parser uses, if any.\n+     * Default implementation returns null.\n+     *\n+     * @since 2.1\n+     */\n+    public FormatSchema getSchema() { return null; }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, other configuration\n+    /**********************************************************\n+      */\n+\n+    /**\n+     * Method for setting a custom pretty printer, which is usually\n+     * used to add indentation for improved human readability.\n+     * By default, generator does not do pretty printing.\n+     *<p>\n+     * To use the default pretty printer that comes with core\n+     * Jackson distribution, call {@link #useDefaultPrettyPrinter}\n+     * instead.\n+     *\n+     * @return Generator itself (this), to allow chaining\n+     */\n+    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {\n+        _cfgPrettyPrinter = pp;\n+        return this;\n+    }\n+\n+    /**\n+     * Accessor for checking whether this generator has a configured\n+     * {@link PrettyPrinter}; returns it if so, null if none configured.\n+     * \n+     * @since 2.1\n+     */\n+    public PrettyPrinter getPrettyPrinter() {\n+        return _cfgPrettyPrinter;\n+    }\n+    \n+    /**\n+     * Convenience method for enabling pretty-printing using\n+     * the default pretty printer\n+     * ({@link com.fasterxml.jackson.core.util.DefaultPrettyPrinter}).\n+     *\n+     * @return Generator itself (this), to allow chaining\n+     */\n+    public abstract JsonGenerator useDefaultPrettyPrinter();\n+\n+    /**\n+     * Method that can be called to request that generator escapes\n+     * all character codes above specified code point (if positive value);\n+     * or, to not escape any characters except for ones that must be\n+     * escaped for the data format (if -1).\n+     * To force escaping of all non-ASCII characters, for example,\n+     * this method would be called with value of 127.\n+     *<p>\n+     * Note that generators are NOT required to support setting of value\n+     * higher than 127, because there are other ways to affect quoting\n+     * (or lack thereof) of character codes between 0 and 127.\n+     * Not all generators support concept of escaping, either; if so,\n+     * calling this method will have no effect.\n+     *<p>\n+     * Default implementation does nothing; sub-classes need to redefine\n+     * it according to rules of supported data format.\n+     * \n+     * @param charCode Either -1 to indicate that no additional escaping\n+     *   is to be done; or highest code point not to escape (meaning higher\n+     *   ones will be), if positive value.\n+     */\n+    public JsonGenerator setHighestNonEscapedChar(int charCode) { return this; }\n+\n+    /**\n+     * Accessor method for testing what is the highest unescaped character\n+     * configured for this generator. This may be either positive value\n+     * (when escaping configuration has been set and is in effect), or\n+     * 0 to indicate that no additional escaping is in effect.\n+     * Some generators may not support additional escaping: for example,\n+     * generators for binary formats that do not use escaping should\n+     * simply return 0.\n+     * \n+     * @return Currently active limitation for highest non-escaped character,\n+     *   if defined; or -1 to indicate no additional escaping is performed.\n+     */\n+    public int getHighestEscapedChar() { return 0; }\n+\n+    /**\n+     * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n+     * it creates.\n+     */\n+    public CharacterEscapes getCharacterEscapes() { return null; }\n+\n+    /**\n+     * Method for defining custom escapes factory uses for {@link JsonGenerator}s\n+     * it creates.\n+     *<p>\n+     * Default implementation does nothing and simply returns this instance.\n+     */\n+    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) { return this; }\n+\n+    /**\n+     * Method that allows overriding String used for separating root-level\n+     * JSON values (default is single space character)\n+     *<p>\n+     * Default implementation throws {@link UnsupportedOperationException}.\n+     * \n+     * @param sep Separator to use, if any; null means that no separator is\n+     *   automatically added\n+     * \n+     * @since 2.1\n+     */\n+    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, output state access\n+    /**********************************************************\n+     */\n+    \n     /**\n      * Method that can be used to get access to object that is used\n      * as target for generated output; this is usually either\n     }\n \n     /**\n+     * Method for verifying amount of content that is buffered by generator\n+     * but not yet flushed to the underlying target (stream, writer),\n+     * in units (byte, char) that the generator implementation uses for buffering;\n+     * or -1 if this information is not available.\n+     * Unit used is often the same as the unit of underlying target (that is,\n+     * `byte` for {@link java.io.OutputStream}, `char` for {@link java.io.Writer}),\n+     * but may differ if buffering is done before encoding.\n+     * Default JSON-backed implementations do use matching units.\n+     *<p>\n+     * Note: non-JSON implementations will be retrofitted for 2.6 and beyond;\n+     * please report if you see -1 (missing override)\n+     *\n+     * @return Amount of content buffered in internal units, if amount known and\n+     *    accessible; -1 if not accessible.\n+     *\n+     * @since 2.6\n+     */\n+    public int getOutputBuffered() {\n+        return -1;\n+    }\n+\n+    /**\n      * Helper method, usually equivalent to:\n      *<code>\n      *   getOutputContext().getCurrentValue();\n             ctxt.setCurrentValue(v);\n         }\n     }\n-\n-    /*\n-    /**********************************************************\n-    /* Public API, Feature configuration\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method for enabling specified parser features:\n-     * check {@link Feature} for list of available features.\n-     *\n-     * @return Generator itself (this), to allow chaining\n-     */\n-    public abstract JsonGenerator enable(Feature f);\n-\n-    /**\n-     * Method for disabling specified  features\n-     * (check {@link Feature} for list of features)\n-     *\n-     * @return Generator itself (this), to allow chaining\n-     */\n-    public abstract JsonGenerator disable(Feature f);\n-\n-    /**\n-     * Method for enabling or disabling specified feature:\n-     * check {@link Feature} for list of available features.\n-     *\n-     * @return Generator itself (this), to allow chaining\n-     */\n-    public final JsonGenerator configure(Feature f, boolean state) {\n-        if (state) enable(f); else disable(f);\n-        return this;\n-    }\n-\n-    /**\n-     * Method for checking whether given feature is enabled.\n-     * Check {@link Feature} for list of available features.\n-     */\n-    public abstract boolean isEnabled(Feature f);\n-\n-\n-    /**\n-     * Bulk access method for getting state of all standard {@link Feature}s.\n-     * \n-     * @return Bit mask that defines current states of all standard {@link Feature}s.\n-     * \n-     * @since 2.3\n-     */\n-    public abstract int getFeatureMask();\n-\n-    /**\n-     * Bulk set method for (re)setting states of all standard {@link Feature}s\n-     * \n-     * @since 2.3\n-     * \n-     * @param values Bitmask that defines which {@link Feature}s are enabled\n-     *    and which disabled\n-     *\n-     * @return This parser object, to allow chaining of calls\n-     */\n-    public abstract JsonGenerator setFeatureMask(int values);\n-\n-    /*\n-    /**********************************************************\n-    /* Public API, Schema configuration\n-    /**********************************************************\n-     */\n-\n-    /**\n-     * Method to call to make this generator use specified schema.\n-     * Method must be called before generating any content, right after instance\n-     * has been created.\n-     * Note that not all generators support schemas; and those that do usually only\n-     * accept specific types of schemas: ones defined for data format this generator\n-     * produces.\n-     *<p>\n-     * If generator does not support specified schema, {@link UnsupportedOperationException}\n-     * is thrown.\n-     * \n-     * @param schema Schema to use\n-     * \n-     * @throws UnsupportedOperationException if generator does not support schema\n-     */\n-    public void setSchema(FormatSchema schema) {\n-        throw new UnsupportedOperationException(\"Generator of type \"+getClass().getName()+\" does not support schema of type '\"\n-                +schema.getSchemaType()+\"'\");\n-    }\n-\n-    /**\n-     * Method for accessing Schema that this parser uses, if any.\n-     * Default implementation returns null.\n-     *\n-     * @since 2.1\n-     */\n-    public FormatSchema getSchema() { return null; }\n-\n-    /*\n-    /**********************************************************\n-    /* Public API, other configuration\n-    /**********************************************************\n-      */\n-\n-    /**\n-     * Method for setting a custom pretty printer, which is usually\n-     * used to add indentation for improved human readability.\n-     * By default, generator does not do pretty printing.\n-     *<p>\n-     * To use the default pretty printer that comes with core\n-     * Jackson distribution, call {@link #useDefaultPrettyPrinter}\n-     * instead.\n-     *\n-     * @return Generator itself (this), to allow chaining\n-     */\n-    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {\n-        _cfgPrettyPrinter = pp;\n-        return this;\n-    }\n-\n-    /**\n-     * Accessor for checking whether this generator has a configured\n-     * {@link PrettyPrinter}; returns it if so, null if none configured.\n-     * \n-     * @since 2.1\n-     */\n-    public PrettyPrinter getPrettyPrinter() {\n-        return _cfgPrettyPrinter;\n-    }\n     \n-    /**\n-     * Convenience method for enabling pretty-printing using\n-     * the default pretty printer\n-     * ({@link com.fasterxml.jackson.core.util.DefaultPrettyPrinter}).\n-     *\n-     * @return Generator itself (this), to allow chaining\n-     */\n-    public abstract JsonGenerator useDefaultPrettyPrinter();\n-\n-    /**\n-     * Method that can be called to request that generator escapes\n-     * all character codes above specified code point (if positive value);\n-     * or, to not escape any characters except for ones that must be\n-     * escaped for the data format (if -1).\n-     * To force escaping of all non-ASCII characters, for example,\n-     * this method would be called with value of 127.\n-     *<p>\n-     * Note that generators are NOT required to support setting of value\n-     * higher than 127, because there are other ways to affect quoting\n-     * (or lack thereof) of character codes between 0 and 127.\n-     * Not all generators support concept of escaping, either; if so,\n-     * calling this method will have no effect.\n-     *<p>\n-     * Default implementation does nothing; sub-classes need to redefine\n-     * it according to rules of supported data format.\n-     * \n-     * @param charCode Either -1 to indicate that no additional escaping\n-     *   is to be done; or highest code point not to escape (meaning higher\n-     *   ones will be), if positive value.\n-     */\n-    public JsonGenerator setHighestNonEscapedChar(int charCode) { return this; }\n-\n-    /**\n-     * Accessor method for testing what is the highest unescaped character\n-     * configured for this generator. This may be either positive value\n-     * (when escaping configuration has been set and is in effect), or\n-     * 0 to indicate that no additional escaping is in effect.\n-     * Some generators may not support additional escaping: for example,\n-     * generators for binary formats that do not use escaping should\n-     * simply return 0.\n-     * \n-     * @return Currently active limitation for highest non-escaped character,\n-     *   if defined; or -1 to indicate no additional escaping is performed.\n-     */\n-    public int getHighestEscapedChar() { return 0; }\n-\n-    /**\n-     * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n-     * it creates.\n-     */\n-    public CharacterEscapes getCharacterEscapes() { return null; }\n-\n-    /**\n-     * Method for defining custom escapes factory uses for {@link JsonGenerator}s\n-     * it creates.\n-     *<p>\n-     * Default implementation does nothing and simply returns this instance.\n-     */\n-    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) { return this; }\n-\n-    /**\n-     * Method that allows overriding String used for separating root-level\n-     * JSON values (default is single space character)\n-     *<p>\n-     * Default implementation throws {@link UnsupportedOperationException}.\n-     * \n-     * @param sep Separator to use, if any; null means that no separator is\n-     *   automatically added\n-     * \n-     * @since 2.1\n-     */\n-    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n-        throw new UnsupportedOperationException();\n-    }\n-\n     /*\n     /**********************************************************\n     /* Public API, capability introspection methods\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n         _outputBuffer = outputBuffer;\n         _outputEnd = _outputBuffer.length;\n         // up to 6 bytes per char (see above), rounded up to 1/8\n-        _outputMaxContiguous = _outputEnd >> 3;\n+        _outputMaxContiguous = (_outputEnd >> 3);\n         _charBuffer = ctxt.allocConcatBuffer();\n         _charBufferLength = _charBuffer.length;\n         _cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(features);\n     @Override\n     public Object getOutputTarget() {\n         return _outputStream;\n+    }\n+\n+    @Override\n+    public int getOutputBuffered() {\n+        // Assuming tail is always valid, set to 0 on close\n+        return _outputTail;\n     }\n \n     /*\n          *   scopes.\n          */\n         // First: let's see that we still have buffers...\n-        if (_outputBuffer != null\n+        if ((_outputBuffer != null)\n             && isEnabled(Feature.AUTO_CLOSE_JSON_CONTENT)) {\n             while (true) {\n                 JsonStreamContext ctxt = getOutputContext();\n             }\n         }\n         _flushBuffer();\n+        _outputTail = 0; // just to ensure we don't think there's anything buffered\n \n         /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n          *   on the underlying Reader, unless we \"own\" it, or auto-closing\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n      * Symbol table that contains field names encountered so far\n      */\n     final protected ByteQuadsCanonicalizer _symbols;\n-    \n+\n     /*\n     /**********************************************************\n     /* Parsing state\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Temporary buffer used for name parsing.\n      */\n      * Temporary storage for partially parsed name bytes.\n      */\n     private int _quad1;\n-    \n+\n     /*\n     /**********************************************************\n     /* Input buffering (from former 'StreamBasedParserBase')\n     /**********************************************************\n      */\n-    \n+\n     protected InputStream _inputStream;\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n     public Object getOutputTarget() {\n         return _writer;\n     }\n-    \n+\n+    @Override\n+    public int getOutputBuffered() {\n+        // Assuming tail and head are kept but... trust and verify:\n+        int len = _outputTail - _outputHead;\n+        return Math.max(0, len);\n+    }\n+\n     /*\n     /**********************************************************\n     /* Overridden methods\n     }\n \n     @Override\n-    public void close()\n-        throws IOException\n+    public void close() throws IOException\n     {\n         super.close();\n \n             }\n         }\n         _flushBuffer();\n+        _outputHead = 0;\n+        _outputTail = 0;\n \n         /* 25-Nov-2008, tatus: As per [JACKSON-16] we are not to call close()\n          *   on the underlying Reader, unless we \"own\" it, or auto-closing\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n     @Override public FormatSchema getSchema() { return delegate.getSchema(); }\n     @Override public Version version() { return delegate.version(); }\n     @Override public Object getOutputTarget() { return delegate.getOutputTarget(); }\n+    @Override public int getOutputBuffered() { return delegate.getOutputBuffered(); }\n \n     /*\n     /**********************************************************", "timestamp": 1432688351, "metainfo": ""}