{"sha": "10ac263416e8c00a0987f58057e2ece6487e80f5", "log": "More tests, fixes, for inclusion of array elements.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n     public void writeFieldName(String name) throws IOException\n     {\n         TokenFilter state = _filterContext.setFieldName(name);\n-\n-System.err.println(\"writeField '\"+name+\"', state = \"+state);\n-\n         if (state == null) {\n             _itemFilter = null;\n             return;\n             delegate.writeFieldName(name);\n             return;\n         }\n-\n-System.err.println(\"  ... call 'includeProperty(\"+name+\")' on: \"+_itemFilter);\n-        \n         state = state.includeProperty(name);\n-\n-System.err.println(\" -> include '\"+name+\"' (via \"+_itemFilter+\")? \"+state);\n-        \n         _itemFilter = state;\n         if (state == TokenFilter.INCLUDE_ALL) {\n             _checkPropertyParentPath();\n             return;\n         }\n         if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeNumber(v)) { // close enough?\n-                return;\n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeNumber(v)) {\n+                    return;\n+                }\n             }\n             _checkParentPath();\n         } \n     @Override\n     public void writeNumber(int v) throws IOException\n     {\n-System.err.println(\"WriteNumber(\"+v+\"), state == \"+_itemFilter);        \n-        if (_itemFilter == null) {\n-            return;\n-        }\n-        if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeNumber(v)) { // close enough?\n-                return;\n+        if (_itemFilter == null) {\n+            return;\n+        }\n+        if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeNumber(v)) {\n+                    return;\n+                }\n             }\n             _checkParentPath();\n         } \n             return;\n         }\n         if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeNumber(v)) { // close enough?\n-                return;\n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeNumber(v)) {\n+                    return;\n+                }\n             }\n             _checkParentPath();\n         } \n             return;\n         }\n         if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeNumber(v)) { // close enough?\n-                return;\n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeNumber(v)) {\n+                    return;\n+                }\n             }\n             _checkParentPath();\n         } \n             return;\n         }\n         if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeNumber(v)) { // close enough?\n-                return;\n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeNumber(v)) {\n+                    return;\n+                }\n             }\n             _checkParentPath();\n         } \n             return;\n         }\n         if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeNumber(v)) { // close enough?\n-                return;\n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeNumber(v)) {\n+                    return;\n+                }\n             }\n             _checkParentPath();\n         } \n             return;\n         }\n         if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeNumber(v)) { // close enough?\n-                return;\n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeNumber(v)) {\n+                    return;\n+                }\n             }\n             _checkParentPath();\n         } \n             return;\n         }\n         if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeRawValue()) { // close enough?\n-                return;\n-            }\n-            _checkParentPath();\n-        } \n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeRawValue()) { // close enough?\n+                    return;\n+                }\n+            }\n+            _checkParentPath();\n+        }\n         delegate.writeNumber(encodedValue);\n     }\n \n             return;\n         }\n         if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeBoolean(v)) { // close enough?\n-                return;\n-            }\n-            _checkParentPath();\n-            /*\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n-            */\n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeBoolean(v)) {\n+                    return;\n+                }\n+            }\n+            _checkParentPath();\n         } \n         delegate.writeBoolean(v);\n     }\n             return;\n         }\n         if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n-            if (!_itemFilter.includeNull()) { // close enough?\n-                return;\n+            TokenFilter state = _filterContext.checkValue(_itemFilter);\n+            if (state == null) {\n+                return;\n+            }\n+            if (state != TokenFilter.INCLUDE_ALL) {\n+                if (!state.includeNull()) {\n+                    return;\n+                }\n             }\n             _checkParentPath();\n         } \n     public void writeOmittedField(String fieldName) throws IOException {\n         // Hmmh. Not sure how this would work but...\n         if (_itemFilter != null) {\n-            return;\n-        }\n-        delegate.writeOmittedField(fieldName);\n+            delegate.writeOmittedField(fieldName);\n+        }\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n         if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {\n             return;\n         }\n-System.err.println(\"writePath(\"+_type+\"), startWritten? \"+_startWritten+\", writeName? \"+_needToWriteName+\" at \"+toString());\n+//System.err.println(\"writePath(\"+_type+\"), startWritten? \"+_startWritten+\", writeName? \"+_needToWriteName+\" at \"+toString());\n         if (_parent != null) {\n             _parent._writePath(gen);\n         }\n         if (_startWritten) {\n             // even if Object started, need to start leaf-level name\n             if (_needToWriteName) {\n-System.err.println(\" write field name '\"+_currentName+\"'\");                \n+//System.err.println(\" write field name '\"+_currentName+\"'\");                \n                 gen.writeFieldName(_currentName);\n             }\n         } else {\n             _startWritten = true;\n             if (_type == TYPE_OBJECT) {\n-System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n+//System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n                 gen.writeStartObject();\n                 gen.writeFieldName(_currentName); // we know name must be written\n             } else if (_type == TYPE_ARRAY) {\n-System.err.println(\" write array start\");\n+//System.err.println(\" write array start\");\n                 gen.writeStartArray();\n             }\n         }\n \n     private void _writePath(JsonGenerator gen) throws IOException\n     {\n-System.err.println(\"_writePath(\"+_type+\"), startWritten? \"+_startWritten+\", writeName? \"+_needToWriteName+\" at \"+toString());\n+//System.err.println(\"_writePath(\"+_type+\"), startWritten? \"+_startWritten+\", writeName? \"+_needToWriteName+\" at \"+toString());\n         if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {\n             return;\n         }\n         } else {\n             _startWritten = true;\n             if (_type == TYPE_OBJECT) {\n-System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n+//System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n                 gen.writeStartObject();\n                 if (_needToWriteName) {\n                     _needToWriteName = false; // at parent must explicitly clear\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n         @Override\n         public TokenFilter includeProperty(String name) {\n             if (_names.contains(name)) {\n-System.err.println(\"Filter:Include? \"+name+\" -> true\");\n                 return TokenFilter.INCLUDE_ALL;\n             }\n-System.err.println(\"Filter:Include? \"+name+\" -> false\");\n             return this;\n         }\n     }\n \n+    static class IndexMatchFilter extends TokenFilter\n+    {\n+        private final BitSet _indices;\n+        \n+        public IndexMatchFilter(int... ixs) {\n+            _indices = new BitSet();\n+            for (int ix : ixs) {\n+                _indices.set(ix);\n+            }\n+        }\n+        \n+        @Override\n+        public TokenFilter includeElement(int index) {\n+            if (_indices.get(index)) {\n+                return TokenFilter.INCLUDE_ALL;\n+            }\n+            return null;\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Test methods\n         gen.close();\n         assertEquals(aposToQuotes(\"{'ob':{'value0':2,'value2':4}}\"), w.toString());\n     }\n-    \n+\n     public void testMultipleMatchFilteringWithPath2() throws Exception\n     {\n         StringWriter w = new StringWriter();\n         JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new NameMatchFilter(\"array\", \"b\", \"value\"),\n                 true, true);\n-        try {\n         _writeSimpleDoc(gen);\n         gen.close();\n-        } finally {\n-            gen.flush();\n-            System.out.println(\"JSON -> <\"+w+\">\");\n-        }\n         assertEquals(aposToQuotes(\"{'array':[1,2],'ob':{'value':3},'b':true}\"), w.toString());\n+    }\n+\n+    public void testIndexMatchWithPath1() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new IndexMatchFilter(1),\n+                true, true);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'array':[2]}\"), w.toString());\n+\n+        w = new StringWriter();\n+        gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new IndexMatchFilter(0),\n+                true, true);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'array':[1]}\"), w.toString());\n+    }\n+\n+    public void testIndexMatchWithPath2() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new IndexMatchFilter(0,1),\n+                true, true);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'array':[1,2]}\"), w.toString());\n     }\n     \n     protected void _writeSimpleDoc(JsonGenerator gen) throws IOException", "timestamp": 1428539927, "metainfo": ""}