{"sha": "467daeafb8e1dfb9ee8a6693444819500dd4d552", "log": "Incremental work, getting closer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n      * checks are made; if `true` then filtering will be applied as necessary\n      * until end of content.\n      */\n-    protected boolean _filterAll;\n+    protected boolean _allowMultipleMatches;\n \n     /**\n      * Flag that determines whether path leading up to included content should\n     /**********************************************************\n      */\n \n-    public FilteringGeneratorDelegate(JsonGenerator d, TokenFilter f)\n+    public FilteringGeneratorDelegate(JsonGenerator d, TokenFilter f,\n+            boolean includePath, boolean allowMultipleMatches)\n     {\n         // By default, do NOT delegate copy methods\n         super(d, false);\n         // Doesn't matter if it's include or exclude current, but shouldn't be including/excluding sub-tree\n         _itemState = TokenFilter.FILTER_CHECK;\n         _filterContext = TokenFilterContext.createRootContext(_itemState);\n+        _includePath = includePath;\n+        _allowMultipleMatches = allowMultipleMatches;\n     }\n \n     /*\n     public void writeEndObject() throws IOException\n     {\n         if (_filterContext.needsCloseToken()) {\n-            delegate.writeEndArray();\n+            delegate.writeEndObject();\n         }\n         if (_filterContext.needsCloseCheck()) {\n             filter.filterFinishObject();\n     @Override\n     public void writeFieldName(String name) throws IOException\n     {\n-        // Bit different here: we will actually need state of parent container\n         int state = _filterContext.setFieldName(name);\n \n-        // used as-is for basic include/skip, but not if checking is needed\n-        if (state == TokenFilter.FILTER_CHECK) {\n-            state = filter.includeProperty(name);\n-            if (state == TokenFilter.FILTER_INCLUDE) {\n-                _checkParentPath();\n-            }\n-        }\n+//System.err.println(\"writeField '\"+name+\"', state = \"+state);\n+\n+        if (state == TokenFilter.FILTER_SKIP) {\n+            _itemState = state;\n+            return;\n+        }\n+        if (state == TokenFilter.FILTER_INCLUDE) {\n+            _itemState = state;\n+            delegate.writeFieldName(name);\n+            return;\n+        }\n+\n+        state = filter.includeProperty(name);\n+\n+//System.err.println(\" -> include '\"+name+\"'? \"+state);\n+        \n         _itemState = state;\n         if (state == TokenFilter.FILTER_INCLUDE) {\n+            _checkParentPath();\n+        }\n+    }\n+\n+    @Override\n+    public void writeFieldName(SerializableString name) throws IOException\n+    {\n+        int state = _filterContext.setFieldName(name.getValue());\n+        if (state == TokenFilter.FILTER_SKIP) {\n+            _itemState = state;\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_INCLUDE) {\n+            _itemState = state;\n             delegate.writeFieldName(name);\n-        }\n-    }\n-\n-    @Override\n-    public void writeFieldName(SerializableString name) throws IOException\n-    {\n-        int state = _filterContext.setFieldName(name.getValue());\n-\n-        if (state == TokenFilter.FILTER_CHECK) {\n-            state = filter.includeProperty(name.getValue());\n-            if (state == TokenFilter.FILTER_INCLUDE) {\n-                _checkParentPath();\n-            }\n-        }\n+            return;\n+        }\n+        state = filter.includeProperty(name.getValue());\n         _itemState = state;\n         if (state == TokenFilter.FILTER_INCLUDE) {\n-            delegate.writeFieldName(name);\n+            _checkParentPath();\n         }\n     }\n \n             }\n             _checkParentPath();\n             // one important thing: may need to write element name now\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeString(value);\n     }\n                 }\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeString(text, offset, len);\n     }\n                 }\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeString(value);\n     }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeNumber(v);\n     }\n     @Override\n     public void writeNumber(int v) throws IOException\n     {\n+//System.err.println(\"WriteNumber(\"+v+\"), state == \"+_itemState);        \n         if (_itemState == TokenFilter.FILTER_SKIP) {\n             return;\n         }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeNumber(v);\n     }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeNumber(v);\n     }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeNumber(v);\n     }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeNumber(v);\n     }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeNumber(v);\n     }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeNumber(v);\n     }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeNumber(encodedValue);\n     }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeBoolean(v);\n     }\n                 return;\n             }\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n         } \n         delegate.writeNull();\n     }\n     /* Helper methods\n     /**********************************************************\n      */\n-    \n+\n     protected void _checkParentPath() throws IOException\n     {\n         ++_matchCount;\n             _filterContext.writePath(delegate);\n         }\n         // also: if no multiple matches desired, short-cut checks\n-        if (!_filterAll) {\n+        if (!_allowMultipleMatches) {\n             // Mark parents as \"skip\" so that further check calls are not made\n             _filterContext.skipParentChecks();\n         }\n         }\n         if (filter.includeBinary()) { // close enough?\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n             return true;\n         }\n         return false;\n         }\n         if (filter.includeRawValue()) { // close enough?\n             _checkParentPath();\n-            if (_filterContext.inObject()) {\n-                delegate.writeFieldName(_filterContext.getCurrentName());\n-            }\n+            /*\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+            */\n             return true;\n         }\n         return false;\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n      */\n     public void writePath(JsonGenerator gen) throws IOException\n     {\n-        if (_filterState == TokenFilter.FILTER_CHECK) {\n-            if (_parent != null) {\n-                _parent.writePath(gen);\n-            }\n-            if (!_startWritten) {\n-                _startWritten = true;\n-                if (_type == TYPE_OBJECT) {\n-                    gen.writeStartObject();\n-                    gen.writeFieldName(_currentName);\n-                } else if (_type == TYPE_ARRAY) {\n-                    gen.writeStartArray();\n-                }\n-            }\n-        }\n-    }\n-\n+        if (_filterState != TokenFilter.FILTER_CHECK) {\n+            return;\n+        }\n+//System.err.println(\"writePath(), startWritten? \"+_startWritten+\" at \"+toString());\n+        if (_parent != null) {\n+            _parent._writePath(gen);\n+        }\n+        if (_startWritten) {\n+            // even if Object started, need to start leaf-level name\n+            if (_type == TYPE_OBJECT) {\n+//System.err.println(\" write field name '\"+_currentName+\"'\");                \n+                gen.writeFieldName(_currentName);\n+            }\n+        } else {\n+            _startWritten = true;\n+            if (_type == TYPE_OBJECT) {\n+//System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n+                gen.writeStartObject();\n+                gen.writeFieldName(_currentName);\n+            } else if (_type == TYPE_ARRAY) {\n+                gen.writeStartArray();\n+            }\n+        }\n+    }\n+\n+    private void _writePath(JsonGenerator gen) throws IOException\n+    {\n+//System.err.println(\"_writePath(), startWritten? \"+_startWritten+\" at \"+toString());\n+        if (_filterState != TokenFilter.FILTER_CHECK) {\n+            return;\n+        }\n+        if (_parent != null) {\n+            _parent._writePath(gen);\n+        }\n+        if (!_startWritten) {\n+            _startWritten = true;\n+            if (_type == TYPE_OBJECT) {\n+System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n+                gen.writeStartObject();\n+                gen.writeFieldName(_currentName);\n+            } else if (_type == TYPE_ARRAY) {\n+                gen.writeStartArray();\n+            }\n+        }\n+    }\n+    \n     public void skipParentChecks() {\n         _filterState = TokenFilter.FILTER_SKIP;\n         for (TokenFilterContext ctxt = _parent; ctxt != null; ctxt = ctxt._parent) {\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n         \n         @Override\n         public int includeProperty(String name) {\n-//System.err.println(\"Include? \"+name);\n             if (name.equals(_name)) {\n-//System.err.println(\" -> true\");\n+//System.err.println(\"Include? \"+name+\" -> true\");\n                 return TokenFilter.FILTER_INCLUDE;\n             }\n-//System.err.println(\" -> false\");\n+//System.err.println(\"Include? \"+name+\" -> false\");\n             return TokenFilter.FILTER_CHECK;\n         }\n     }\n         JsonGenerator gen = JSON_F.createGenerator(w);\n         _writeSimpleDoc(gen);\n         gen.close();\n-        assertEquals(aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value':3},'b':true}\"),\n+        assertEquals(aposToQuotes(\n+                \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\"),\n                 w.toString());\n     }\n \n-    @SuppressWarnings(\"resource\")\n-    public void testSingleMatchFiltering() throws Exception\n+    public void testSingleMatchFilteringWithPath() throws Exception\n     {\n         // First, verify non-filtering\n         StringWriter w = new StringWriter();\n-        JsonGenerator gen0 = JSON_F.createGenerator(w);\n-        JsonGenerator gen = new FilteringGeneratorDelegate(gen0, new NameMatchFilter(\"value\"));\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"value\"),\n+                true, // includePath\n+                false // multipleMatches\n+                );\n         \n         _writeSimpleDoc(gen);\n         gen.close();\n-\n-//System.out.println(\"JSON -> \"+w.toString());\n-        \n-        assertEquals(aposToQuotes(\"{'value':3}\"),\n-                w.toString());\n+        assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), w.toString());\n     }\n \n+    public void testSingleMatchFilteringWithoutPath() throws Exception\n+    {\n+        // First, verify non-filtering\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"value\"),\n+                false, // includePath\n+                false // multipleMatches\n+                );\n+        \n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), w.toString());\n+    }\n+    \n     protected void _writeSimpleDoc(JsonGenerator gen) throws IOException\n     {\n         // { \"a\" : 123,\n \n         gen.writeFieldName(\"ob\");\n         gen.writeStartObject();\n+        gen.writeFieldName(\"value0\");\n+        gen.writeNumber(2);\n         gen.writeFieldName(\"value\");\n         gen.writeNumber(3);\n+        gen.writeFieldName(\"value2\");\n+        gen.writeNumber(4);\n         gen.writeEndObject();\n \n         gen.writeFieldName(\"b\");", "timestamp": 1428211180, "metainfo": ""}