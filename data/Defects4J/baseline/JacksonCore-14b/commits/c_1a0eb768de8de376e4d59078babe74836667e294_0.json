{"sha": "1a0eb768de8de376e4d59078babe74836667e294", "log": "Add more tests for `PrettyPrinter`, to ensure root value separator is properly covered", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n \n         _rootSeparator = rootSeparator;\n     }\n-    \n+\n     public DefaultPrettyPrinter withRootSeparator(SerializableString rootSeparator)\n     {\n         if (_rootSeparator == rootSeparator ||\n             return this;\n         }\n         return new DefaultPrettyPrinter(this, rootSeparator);\n+    }\n+\n+    /**\n+     * @since 2.6.0\n+     */\n+    public DefaultPrettyPrinter withRootSeparator(String rootSeparator) {\n+        return withRootSeparator(new SerializedString(rootSeparator));\n     }\n     \n     public void indentArraysWith(Indenter i) {\n--- a/src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java\n package com.fasterxml.jackson.core.util;\n \n-import static org.junit.Assert.*;\n-\n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.StringWriter;\n \n-import org.junit.Test;\n+import com.fasterxml.jackson.core.*;\n \n-import com.fasterxml.jackson.core.JsonFactory;\n-import com.fasterxml.jackson.core.JsonGenerator;\n-import com.fasterxml.jackson.core.PrettyPrinter;\n-\n-public class TestDefaultPrettyPrinter\n+public class TestDefaultPrettyPrinter extends BaseTest\n {\n-    @Test\n+    private final JsonFactory JSON_F = new JsonFactory();\n+    \n     public void testSystemLinefeed() throws IOException\n     {\n         PrettyPrinter pp = new DefaultPrettyPrinter();\n         String LF = System.getProperty(\"line.separator\");\n-        assertEquals(\n-            \"{\" + LF +\n+        String EXP = \"{\" + LF +\n             \"  \\\"name\\\" : \\\"John Doe\\\",\" + LF +\n             \"  \\\"age\\\" : 3.14\" + LF +\n-            \"}\", _printTestData(pp));\n+            \"}\";\n+        assertEquals(EXP, _printTestData(pp, false));\n+        assertEquals(EXP, _printTestData(pp, true));\n     }\n \n-    @Test\n     public void testWithLineFeed() throws IOException\n     {\n         PrettyPrinter pp = new DefaultPrettyPrinter()\n         .withObjectIndenter(new DefaultIndenter().withLinefeed(\"\\n\"));\n-        assertEquals(\n-            \"{\\n\" +\n+        String EXP = \"{\\n\" +\n             \"  \\\"name\\\" : \\\"John Doe\\\",\\n\" +\n             \"  \\\"age\\\" : 3.14\\n\" +\n-            \"}\", _printTestData(pp));\n+            \"}\";\n+        assertEquals(EXP, _printTestData(pp, false));\n+        assertEquals(EXP, _printTestData(pp, true));\n     }\n-    \n-    @Test\n+\n     public void testWithIndent() throws IOException\n     {\n         PrettyPrinter pp = new DefaultPrettyPrinter()\n         .withObjectIndenter(new DefaultIndenter().withIndent(\" \"));\n-        assertEquals(\n-            \"{\\n\" +\n+        String EXP = \"{\\n\" +\n             \" \\\"name\\\" : \\\"John Doe\\\",\\n\" +\n             \" \\\"age\\\" : 3.14\\n\" +\n-            \"}\", _printTestData(pp));\n+            \"}\";\n+        assertEquals(EXP, _printTestData(pp, false));\n+        assertEquals(EXP, _printTestData(pp, true));\n     }\n-    \n-    @Test\n+\n     public void testUnixLinefeed() throws IOException\n     {\n         PrettyPrinter pp = new DefaultPrettyPrinter()\n                 .withObjectIndenter(new DefaultIndenter(\"  \", \"\\n\"));\n-        assertEquals(\n-            \"{\\n\" +\n+        String EXP = \"{\\n\" +\n             \"  \\\"name\\\" : \\\"John Doe\\\",\\n\" +\n             \"  \\\"age\\\" : 3.14\\n\" +\n-            \"}\", _printTestData(pp));\n+            \"}\";\n+        assertEquals(EXP, _printTestData(pp, false));\n+        assertEquals(EXP, _printTestData(pp, true));\n     }\n-    \n-    @Test\n+\n     public void testWindowsLinefeed() throws IOException\n     {\n         PrettyPrinter pp = new DefaultPrettyPrinter()\n         .withObjectIndenter(new DefaultIndenter(\"  \", \"\\r\\n\"));\n-        assertEquals(\n-            \"{\\r\\n\" +\n+        String EXP = \"{\\r\\n\" +\n             \"  \\\"name\\\" : \\\"John Doe\\\",\\r\\n\" +\n             \"  \\\"age\\\" : 3.14\\r\\n\" +\n-            \"}\", _printTestData(pp));\n+            \"}\";\n+        assertEquals(EXP, _printTestData(pp, false));\n+        assertEquals(EXP, _printTestData(pp, true));\n     }\n-    \n-    @Test\n+\n     public void testTabIndent() throws IOException\n     {\n         PrettyPrinter pp = new DefaultPrettyPrinter()\n         .withObjectIndenter(new DefaultIndenter(\"\\t\", \"\\n\"));\n-        assertEquals(\n-            \"{\\n\" +\n+        String EXP = \"{\\n\" +\n             \"\\t\\\"name\\\" : \\\"John Doe\\\",\\n\" +\n             \"\\t\\\"age\\\" : 3.14\\n\" +\n-            \"}\", _printTestData(pp));\n+            \"}\";\n+        assertEquals(EXP, _printTestData(pp, false));\n+        assertEquals(EXP, _printTestData(pp, true));\n     }\n \n-    private String _printTestData(PrettyPrinter pp) throws IOException\n+    public void testRootSeparator() throws IOException\n     {\n+        PrettyPrinter pp = new DefaultPrettyPrinter()\n+            .withRootSeparator(\"|\");\n+        final String EXP = \"1|2|3\";\n+\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n+        JsonGenerator gen = JSON_F.createGenerator(sw);\n+        gen.setPrettyPrinter(pp);\n+\n+        gen.writeNumber(1);\n+        gen.writeNumber(2);\n+        gen.writeNumber(3);\n+        gen.close();\n+        assertEquals(EXP, sw.toString());\n+\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        gen = JSON_F.createGenerator(bytes);\n+        gen.setPrettyPrinter(pp);\n+\n+        gen.writeNumber(1);\n+        gen.writeNumber(2);\n+        gen.writeNumber(3);\n+        gen.close();\n+        assertEquals(EXP, bytes.toString(\"UTF-8\"));\n+    }\n+    \n+    private String _printTestData(PrettyPrinter pp, boolean useBytes) throws IOException\n+    {\n+        JsonGenerator gen;\n+        StringWriter sw;\n+        ByteArrayOutputStream bytes;\n+\n+        if (useBytes) {\n+            sw = null;\n+            bytes = new ByteArrayOutputStream();\n+            gen = JSON_F.createGenerator(bytes);\n+        } else {\n+            sw = new StringWriter();\n+            bytes = null;\n+            gen = JSON_F.createGenerator(sw);\n+        }\n         gen.setPrettyPrinter(pp);\n         gen.writeStartObject();\n         gen.writeFieldName(\"name\");\n         gen.writeNumber(3.14);\n         gen.writeEndObject();\n         gen.close();\n+\n+        if (useBytes) {\n+            return bytes.toString(\"UTF-8\");\n+        }\n         return sw.toString();\n     }\n }", "timestamp": 1427259986, "metainfo": ""}