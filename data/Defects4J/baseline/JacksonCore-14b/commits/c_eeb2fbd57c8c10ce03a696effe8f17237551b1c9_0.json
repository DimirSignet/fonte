{"sha": "eeb2fbd57c8c10ce03a696effe8f17237551b1c9", "log": "Refactoring for Issue-7 (addition of 'createParser' and 'createGenerator' on 'JsonFactory')", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n         if (_inputDecorator != null) {\n             in = _inputDecorator.decorate(ctxt, in);\n         }\n-        return _createJsonParser(in, ctxt);\n+        return _createParser(in, ctxt);\n     }\n \n     /**\n         if (_inputDecorator != null) {\n             in = _inputDecorator.decorate(ctxt, in);\n         }\n-        return _createJsonParser(in, ctxt);\n+        return _createParser(in, ctxt);\n     }\n \n     /**\n         if (_inputDecorator != null) {\n             in = _inputDecorator.decorate(ctxt, in);\n         }\n-        return _createJsonParser(in, ctxt);\n+        return _createParser(in, ctxt);\n     }\n \n     /**\n         if (_inputDecorator != null) {\n             r = _inputDecorator.decorate(ctxt, r);\n         }\n-\treturn _createJsonParser(r, ctxt);\n+\treturn _createParser(r, ctxt);\n     }\n \n     /**\n         if (_inputDecorator != null) {\n             InputStream in = _inputDecorator.decorate(ctxt, data, 0, data.length);\n             if (in != null) {\n-                return _createJsonParser(in, ctxt);\n+                return _createParser(in, ctxt);\n             }\n         }\n-        return _createJsonParser(data, 0, data.length, ctxt);\n+        return _createParser(data, 0, data.length, ctxt);\n     }\n \n     /**\n         if (_inputDecorator != null) {\n             InputStream in = _inputDecorator.decorate(ctxt, data, offset, len);\n             if (in != null) {\n-                return _createJsonParser(in, ctxt);\n+                return _createParser(in, ctxt);\n             }\n         }\n-\treturn _createJsonParser(data, offset, len, ctxt);\n+\treturn _createParser(data, offset, len, ctxt);\n     }\n \n     /**\n         if (_inputDecorator != null) {\n             r = _inputDecorator.decorate(ctxt, r);\n         }\n-\treturn _createJsonParser(r, ctxt);\n+\treturn _createParser(r, ctxt);\n     }\n \n     /*\n         if (_outputDecorator != null) {\n             w = _outputDecorator.decorate(ctxt, w);\n         }\n-\treturn _createJsonGenerator(w, ctxt);\n+\treturn _createGenerator(w, ctxt);\n     }\n \n     /**\n         if (_outputDecorator != null) {\n             out = _outputDecorator.decorate(ctxt, out);\n         }\n-\treturn _createJsonGenerator(out, ctxt);\n+\treturn _createGenerator(out, ctxt);\n     }\n \n     /**\n         if (_outputDecorator != null) {\n             w = _outputDecorator.decorate(ctxt, w);\n         }\n-\treturn _createJsonGenerator(w, ctxt);\n+\treturn _createGenerator(w, ctxt);\n     }\n \n     /*\n      * on it being called as expected. That is, it is part of official\n      * interface from sub-class perspective, although not a public\n      * method available to users of factory implementations.\n-     */\n-    protected JsonParser _createJsonParser(InputStream in, IOContext ctxt)\n+     * \n+     * @since 2.1\n+     */\n+    protected JsonParser _createParser(InputStream in, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n+        /* NOTE: MUST call the deprecated method until it is deleted, just so\n+         * that override still works as expected, for now.\n+         */\n+        return _createJsonParser(in, ctxt);\n+    }\n+\n+    /**\n+     * @deprecated since 2.1 -- use {@link #_createParser(InputStream, IOContext)} instead\n+     */\n+    @Deprecated\n+    protected JsonParser _createJsonParser(InputStream in, IOContext ctxt) throws IOException, JsonParseException {\n         // As per [JACKSON-259], may want to fully disable canonicalization:\n         return new ByteSourceJsonBootstrapper(ctxt, in).constructParser(_parserFeatures,\n                 _objectCodec, _rootByteSymbols, _rootCharSymbols,\n                 isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),\n                 isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));\n     }\n-\n+    \n     /**\n      * Overridable factory method that actually instantiates parser\n      * using given {@link Reader} object for reading content.\n      * on it being called as expected. That is, it is part of official\n      * interface from sub-class perspective, although not a public\n      * method available to users of factory implementations.\n-     */\n-    protected JsonParser _createJsonParser(Reader r, IOContext ctxt)\n-\tthrows IOException, JsonParseException\n-    {\n+     * \n+     * @since 2.1\n+     */\n+    protected JsonParser _createParser(Reader r, IOContext ctxt)\n+        throws IOException, JsonParseException\n+    {\n+        /* NOTE: MUST call the deprecated method until it is deleted, just so\n+         * that override still works as expected, for now.\n+         */\n+        return _createJsonParser(r, ctxt);\n+    }\n+\n+    /**\n+     * @deprecated since 2.1 -- use {@link #_createParser(Reader, IOContext)} instead\n+     */\n+    @Deprecated\n+    protected JsonParser _createJsonParser(Reader r, IOContext ctxt) throws IOException, JsonParseException {\n         return new ReaderBasedJsonParser(ctxt, _parserFeatures, r, _objectCodec,\n                 _rootCharSymbols.makeChild(isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),\n                     isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES)));\n      * interface from sub-class perspective, although not a public\n      * method available to users of factory implementations.\n      */\n-    protected JsonParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt)\n+    protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt)\n         throws IOException, JsonParseException\n     {\n+        /* NOTE: MUST call the deprecated method until it is deleted, just so\n+         * that override still works as expected, for now.\n+         */\n+        return _createJsonParser(data, offset, len, ctxt);\n+    }\n+\n+    /**\n+     * @deprecated since 2.1 -- use {@link #_createParser(byte[], int, int, IOContext)} instead\n+     */\n+    @Deprecated\n+    protected JsonParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException, JsonParseException {\n         return new ByteSourceJsonBootstrapper(ctxt, data, offset, len).constructParser(_parserFeatures,\n                 _objectCodec, _rootByteSymbols, _rootCharSymbols,\n                 isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),\n                 isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Factory methods used by factory for creating generator instances,\n      * interface from sub-class perspective, although not a public\n      * method available to users of factory implementations.\n      */\n+    protected JsonGenerator _createGenerator(Writer out, IOContext ctxt)\n+        throws IOException\n+    {\n+        /* NOTE: MUST call the deprecated method until it is deleted, just so\n+         * that override still works as expected, for now.\n+         */\n+        return _createJsonGenerator(out, ctxt);\n+    }\n+\n+    /**\n+     * @deprecated since 2.1 -- use {@link #_createGenerator(Writer, ctxt)} instead\n+     */\n+    @Deprecated\n     protected JsonGenerator _createJsonGenerator(Writer out, IOContext ctxt)\n         throws IOException\n     {\n      * interface from sub-class perspective, although not a public\n      * method available to users of factory implementations.\n      */\n+    protected JsonGenerator _createUTF8Generator(OutputStream out, IOContext ctxt) throws IOException {\n+        return _createUTF8JsonGenerator(out, ctxt);\n+    }\n+\n+    /**\n+     * @deprecated since 2.1 -- use {@link #_createGenerator(OutputStream, ctxt)} instead\n+     */\n+    @Deprecated\n     protected JsonGenerator _createUTF8JsonGenerator(OutputStream out, IOContext ctxt)\n         throws IOException\n     {\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n      * for objects object node (with child nodes), and for other types\n      * matching leaf node type\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends TreeNode> T readValueAsTree()\n         throws IOException, JsonProcessingException\n     {\n--- a/src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java\n         ,WRITE_CONCAT_BUFFER(2000)\n         ;\n             \n-        private final int size;\n+        protected final int size;\n \n         ByteBufferType(int size) { this.size = size; }\n     }\n             ,NAME_COPY_BUFFER(200) // Temporary buffer for getting name characters\n             ;\n         \n-        private final int size;\n+        protected final int size;\n \n         CharBufferType(int size) { this.size = size; }\n     }", "timestamp": 1338267608, "metainfo": ""}