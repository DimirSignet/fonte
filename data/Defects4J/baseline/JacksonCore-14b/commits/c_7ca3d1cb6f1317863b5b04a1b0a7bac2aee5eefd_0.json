{"sha": "7ca3d1cb6f1317863b5b04a1b0a7bac2aee5eefd", "log": "Add a failing test for #216 (and #207)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java\n package com.fasterxml.jackson.core.sym;\n \n+import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.util.HashSet;\n \n     extends com.fasterxml.jackson.core.BaseTest\n {\n     // for [jackson-core#213]\n-    public void test17CharSymbols() throws Exception\n-    {\n+    public void test17CharSymbols() throws Exception {\n         _test17Chars(false);\n     }\n \n     // for [jackson-core#213]\n-    public void test17ByteSymbols() throws Exception\n-    {\n+    public void test17ByteSymbols() throws Exception {\n         _test17Chars(true);\n     }\n \n+    // for [jackson-core#216]\n+    public void testSymbolTableExpansionChars() throws Exception {\n+        _testSymbolTableExpansion(false);\n+    }\n+\n+    // for [jackson-core#216]\n+    public void testSymbolTableExpansionBytes() throws Exception {\n+        _testSymbolTableExpansion(true);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Secondary test methods\n+    /**********************************************************\n+     */\n+\n     private void _test17Chars(boolean useBytes) throws IOException\n     {\n-        String doc = _createDoc();\n+        String doc = _createDoc17();\n         JsonFactory f = new JsonFactory();\n         \n-        JsonParser p;\n-        if (useBytes) {\n-            p = f.createParser(doc.getBytes(\"UTF-8\"));\n-        } else {\n-            p = f.createParser(doc);\n-        }\n+        JsonParser p = useBytes\n+                ? f.createParser(doc.getBytes(\"UTF-8\"))\n+                : f.createParser(doc);\n         HashSet<String> syms = new HashSet<String>();\n         assertToken(JsonToken.START_OBJECT, p.nextToken());\n         for (int i = 0; i < 50; ++i) {\n         p.close();\n     }\n \n-    private String _createDoc() {\n+    private String _createDoc17() {\n         StringBuilder sb = new StringBuilder(1000);\n         sb.append(\"{\\n\");\n         for (int i = 1; i <= 50; ++i) {\n         sb.append(\"\\n}\");\n         return sb.toString();\n     }\n+\n+    public void _testSymbolTableExpansion(boolean useBytes) throws Exception\n+    {\n+        JsonFactory jsonFactory = new JsonFactory();\n+        // Important: must create separate documents to gradually build up symbol table\n+        for (int i = 0; i < 200; i++) {\n+            String field = Integer.toString(i);\n+            final String doc = \"{ \\\"\" + field + \"\\\" : \\\"test\\\" }\";\n+            JsonParser parser = useBytes\n+                    ? jsonFactory.createParser(doc.getBytes(\"UTF-8\"))\n+                    : jsonFactory.createParser(doc);\n+            assertToken(JsonToken.START_OBJECT, parser.nextToken());\n+            assertToken(JsonToken.FIELD_NAME, parser.nextToken());\n+            assertEquals(field, parser.getCurrentName());\n+            assertToken(JsonToken.VALUE_STRING, parser.nextToken());\n+            assertToken(JsonToken.END_OBJECT, parser.nextToken());\n+            assertNull(parser.nextToken());\n+            parser.close();\n+        }\n+    }\n }", "timestamp": 1441820585, "metainfo": ""}