{"sha": "e92d04f31ec07a40b697f43d48f356235dc2c6fb", "log": "Eclipse warning removal", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n  *\n  * @author Tatu Saloranta\n  */\n+@SuppressWarnings(\"resource\")\n public class JsonFactory\n     implements Versioned,\n         java.io.Serializable // since 2.1 (for Android, mostly)\n {\n     /**\n-     * Computed for Jackson 2.2.0 release\n-     */\n-    private static final long serialVersionUID = 8726401676402117450L;\n+     * Computed for Jackson 2.3.0 release\n+     */\n+    private static final long serialVersionUID = 3194418244231611666L;\n \n     /*\n     /**********************************************************\n     /* Helper types\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Enumeration that defines all on/off features that can only be\n      * changed for {@link JsonFactory}.\n      * \n      * @since 2.1\n      */\n-    @SuppressWarnings(\"resource\")\n     public JsonParser createParser(File f)\n         throws IOException, JsonParseException\n     {\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n         } else if ((_numTypesValid & NR_LONG) != 0) {\n             _numberBigDecimal = BigDecimal.valueOf(_numberLong);\n         } else if ((_numTypesValid & NR_INT) != 0) {\n-            _numberBigDecimal = BigDecimal.valueOf((long) _numberInt);\n+            _numberBigDecimal = BigDecimal.valueOf(_numberInt);\n         } else {\n             _throwInternal();\n         }\n--- a/src/test/java/com/fasterxml/jackson/core/io/TestCharTypes.java\n+++ b/src/test/java/com/fasterxml/jackson/core/io/TestCharTypes.java\n package com.fasterxml.jackson.core.io;\n-\n-import static junit.framework.Assert.assertEquals;\n \n public class TestCharTypes\n     extends com.fasterxml.jackson.test.BaseTest\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestCharEscaping.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestCharEscaping.java\n         } catch (JsonParseException jex) {\n             verifyException(jex, \"has to be escaped\");\n         }\n+        jp.close();\n     }\n \n     public void testSimpleEscaping()\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertEquals(\"NULL:\\0!\", jp.getText());\n+        jp.close();\n \n         // Then just a single char escaping\n         jp = createParserUsingReader(\"[\\\"\\\\u0123\\\"]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertEquals(\"\\u0123\", jp.getText());\n+        jp.close();\n \n         // And then double sequence\n         jp = createParserUsingReader(\"[\\\"\\\\u0041\\\\u0043\\\"]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertEquals(\"AC\", jp.getText());\n+        jp.close();\n     }\n \n     public void testInvalid()\n         } catch (JsonParseException jpe) {\n             verifyException(jpe, \"for character escape\");\n         }\n+        jp.close();\n     }\n \n     /**\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertEquals(\"A1234\", jp.getText());\n+        jp.close();\n     }\n \n     // for [JACKSON-627]\n         JsonGenerator jgen = jf.createGenerator(writer);\n         jgen.setHighestNonEscapedChar(127); // must set to trigger bug\n         jgen.writeString(longString.toString());\n-      }      \n-\n+        jgen.close();\n+    }\n }\n \n--- a/src/test/java/com/fasterxml/jackson/core/json/TestComments.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestComments.java\n         assertFalse(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));\n         JsonParser jp = jf.createParser(new StringReader(\"[ 1 ]\"));\n         assertFalse(jp.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));\n+        jp.close();\n     }\n \n     public void testCommentsDisabled()\n             // Should have something denoting that user may want to enable 'ALLOW_COMMENTS'\n             verifyException(je, \"ALLOW_COMMENTS\");\n         }\n+        jp.close();\n     }\n \n     private void _testEnabled(String doc, boolean useStream)\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         assertEquals(1, jp.getIntValue());\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+        jp.close();\n     }\n \n     private JsonParser _createParser(String doc, boolean useStream, boolean enabled)\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n         assertEquals(\"{\"+quote(\"fun:\\\\u0088:\\\\u3456\")+\":true}\", json);\n     }\n \n+    @SuppressWarnings(\"resource\")\n     private void _testEscapeCustom(boolean useStream) throws Exception\n     {\n         JsonFactory f = new JsonFactory().setCharacterEscapes(new MyEscapes());\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java\n         JsonGenerator jg = jf.createGenerator(new StringWriter());\n         assertFalse(jg.isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));\n         assertFalse(jg.isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));\n+        jg.close();\n     }\n \n     public void testFieldNameQuoting() throws IOException\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n         assertTrue(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));\n         jp.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, false);\n         assertFalse(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));\n+        jp.close();\n     }\n \n     public void testInterningWithStreams() throws Exception\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n \n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+\n+        jp.close();\n     }\n \n     public void testSkipping()\n      * correctly; mostly to stress-test underlying segment-based\n      * text buffer(s).\n      */\n+    @SuppressWarnings(\"resource\")\n     public void testLongText() throws Exception\n     {\n         final int LEN = 96000;\n         assertEquals(3, loc.getByteOffset());\n         assertEquals(-1, loc.getCharOffset());\n         */\n+        jp.close();\n     }\n \n \n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n             assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n             assertEquals(JsonParser.NumberType.INT, jp.getNumberType());\n             assertEquals(Integer.MIN_VALUE, jp.getIntValue());\n+            jp.close();\n         }\n     }\n \n         }\n         assertEquals((double) EXP_L, jp.getDoubleValue());\n         assertEquals(BigDecimal.valueOf((long) EXP_L), jp.getDecimalValue());\n+        jp.close();\n     }\n \n     public void testLongRange()\n             assertEquals(-2L, jp.getLongValue());\n             assertEquals(-2.033, jp.getDoubleValue());\n             assertEquals(\"-2.033\", jp.getText());\n-            \n+\n             assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+\n+            jp.close();\n         }\n     }\n \n                 }\n             }\n             assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+            jp.close();\n         }\n     }\n \n         } catch (JsonParseException e) {\n             verifyException(e, \"not of boolean type\");\n         }\n+        jp.close();\n     }\n \n     public void testInvalidIntAccess() throws Exception\n         } catch (JsonParseException e) {\n             verifyException(e, \"can not use numeric value accessors\");\n         }\n+        jp.close();\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java\n         } catch (JsonGenerationException e) {\n             verifyException(e, \"Current context not an object\");\n         }\n+        gen.close();\n     }\n \n     public void testSimpleArrayWrite()\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java\n             }\n             }\n             assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+            jp.close();\n         }\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java\n         assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n         assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n         assertEquals(null, jp.nextToken());\n+        jp.close();\n     }\n \n     public void testInvalidObjectWrite()\n         } catch (JsonGenerationException e) {\n             verifyException(e, \"Current context not an array\");\n         }\n+        gen.close();\n     }\n \n     public void testSimpleObjectWrite()\n         assertEquals(JsonToken.VALUE_NULL, jp.nextToken());\n \n         assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n+        jp.close();\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java\n         // then change\n         f.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\n         assertFalse(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));\n+        @SuppressWarnings(\"resource\")\n         MyReader input = new MyReader(DOC);\n         JsonParser jp = f.createParser(input);\n \n         // regular close won't close it either:\n         jp.close();\n         assertFalse(input.isClosed());\n-\n     }\n \n+    @SuppressWarnings(\"resource\")\n     public void testAutoCloseReader() throws Exception\n     {\n         final String DOC = \"[ 1 ]\";\n         assertTrue(input.isClosed());\n     }\n \n-    public void testNoAutoCloseInputStream()\n-        throws Exception\n+    @SuppressWarnings(\"resource\")\n+    public void testNoAutoCloseInputStream() throws Exception\n     {\n         final String DOC = \"[ 1 ]\";\n         JsonFactory f = new JsonFactory();\n         // theoretically could have only read subset; but current impl is more greedy\n         assertEquals(6, jp.releaseBuffered(out));\n         assertArrayEquals(\"foobar\".getBytes(\"UTF-8\"), out.toByteArray());\n+        jp.close();\n     }\n \n     public void testReleaseContentChars() throws Exception\n         // theoretically could have only read subset; but current impl is more greedy\n         assertEquals(3, jp.releaseBuffered(sw));\n         assertEquals(\"xyz\", sw.toString());\n+        jp.close();\n     }\n     \n     /*\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java\n         JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         gen.useDefaultPrettyPrinter();\n         _verifyPrettyPrinter(gen, sw);\n-    }\n-\n+        gen.close();\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n     public void testSimpleDocWithMinimal() throws Exception\n     {\n         StringWriter sw = new StringWriter();\n         docStr = _verifyPrettyPrinter(gen, sw);\n         assertEquals(-1, docStr.indexOf('\\n'));\n         assertTrue(docStr.indexOf('\\t') >= 0);\n+        gen.close();\n     }\n \n     // [Issue#26]\n--- a/src/test/java/com/fasterxml/jackson/core/misc/TestJDKSerializability.java\n+++ b/src/test/java/com/fasterxml/jackson/core/misc/TestJDKSerializability.java\n         }\n     }\n     \n+    @SuppressWarnings(\"resource\")\n     protected String _copyJson(JsonFactory f, String json, boolean useBytes) throws IOException\n     {\n         if (useBytes) {\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java\n             jp1.close();\n             jp2.close();\n         }\n+        jp0.close();\n     }\n \n     public void testAuxMethods()", "timestamp": 1374731888, "metainfo": ""}