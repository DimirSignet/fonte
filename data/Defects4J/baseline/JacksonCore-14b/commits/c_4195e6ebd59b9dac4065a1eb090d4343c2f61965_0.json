{"sha": "4195e6ebd59b9dac4065a1eb090d4343c2f61965", "log": "Fix #229", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n             close();\n             return (_currToken = null);\n         }\n-\n-        /* First, need to ensure we know the starting location of token\n-         * after skipping leading white space\n-         */\n-        _tokenInputTotal = _currInputProcessed + _inputPtr - 1;\n-        _tokenInputRow = _currInputRow;\n-        _tokenInputCol = _inputPtr - _currInputRowStart - 1;\n-\n-        // finally: clear any data retained so far\n+        // clear any data retained so far\n         _binaryValue = null;\n \n         // Closing scope?\n         if (i == INT_RBRACKET) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n             return (_currToken = JsonToken.END_ARRAY);\n         }\n         if (i == INT_RCURLY) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n         if (_parsingContext.expectComma()) {\n             i = _skipComma(i);\n         }\n+        _updateLocationFromInputPtr();\n \n         /* And should we now have a name? Always true for\n          * Object contexts, since the intermediate 'expect-value'\n         _nameCopied = false; // need to invalidate if it was copied\n         JsonToken t = _nextToken;\n         _nextToken = null;\n+\n+// !!! 16-Nov-2015, tatu: TODO: fix [databind#37], copy next location to current here\n+        \n         // Also: may need to start new context?\n         if (t == JsonToken.START_ARRAY) {\n             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n             _currToken = null;\n             return false;\n         }\n-        _tokenInputTotal = _currInputProcessed + _inputPtr - 1;\n-        _tokenInputRow = _currInputRow;\n-        _tokenInputCol = _inputPtr - _currInputRowStart - 1;\n         _binaryValue = null;\n+\n         if (i == INT_RBRACKET) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n             return false;\n         }\n         if (i == INT_RCURLY) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n         if (_parsingContext.expectComma()) {\n             i = _skipComma(i);\n         }\n+        _updateLocationFromInputPtr();\n \n         if (!_parsingContext.inObject()) {\n             _nextTokenNotInObject(i);\n             _currToken = null;\n             return null;\n         }\n-        _tokenInputTotal = _currInputProcessed + _inputPtr - 1;\n-        _tokenInputRow = _currInputRow;\n-        _tokenInputCol = _inputPtr - _currInputRowStart - 1;\n         _binaryValue = null;\n         if (i == INT_RBRACKET) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n             return null;\n         }\n         if (i == INT_RCURLY) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n             i = _skipComma(i);\n         }\n \n+        _updateLocationFromInputPtr();\n         if (!_parsingContext.inObject()) {\n             _nextTokenNotInObject(i);\n             return null;\n \n     /*\n     /**********************************************************\n+    /* Internal methods, location updating (refactored in 2.7)\n+    /**********************************************************\n+     */\n+\n+    // @since 2.7\n+    private final void _updateLocationFromInputPtr()\n+    {\n+        _tokenInputTotal = _currInputProcessed + _inputPtr - 1;\n+        _tokenInputRow = _currInputRow;\n+        _tokenInputCol = _inputPtr - _currInputRowStart - 1;\n+    }\n+\n+    /*\n+    /**********************************************************\n     /* Error reporting\n     /**********************************************************\n      */\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n             close();\n             return (_currToken = null);\n         }\n-\n-        // First, need to ensure we know the starting location of token\n-        // after skipping leading white space\n-        _tokenInputTotal = _currInputProcessed + _inputPtr - 1;\n-        _tokenInputRow = _currInputRow;\n-        _tokenInputCol = _inputPtr - _currInputRowStart - 1;\n-\n-        // finally: clear any data retained so far\n+        // clear any data retained so far\n         _binaryValue = null;\n \n         // Closing scope?\n         if (i == INT_RBRACKET) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n             return (_currToken = JsonToken.END_ARRAY);\n         }\n         if (i == INT_RCURLY) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n             }\n             i = _skipWS();\n         }\n+        _updateLocationFromInputPtr();\n \n         /* And should we now have a name? Always true for\n          * Object contexts, since the intermediate 'expect-value'\n         _nameCopied = false; // need to invalidate if it was copied\n         JsonToken t = _nextToken;\n         _nextToken = null;\n+\n+ // !!! 16-Nov-2015, tatu: TODO: fix [databind#37], copy next location to current here\n+        \n         // Also: may need to start new context?\n         if (t == JsonToken.START_ARRAY) {\n             _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n     public boolean nextFieldName(SerializableString str) throws IOException\n     {\n         // // // Note: most of code below is copied from nextToken()\n-        \n         _numTypesValid = NR_UNKNOWN;\n         if (_currToken == JsonToken.FIELD_NAME) { // can't have name right after name\n             _nextAfterName();\n             _currToken = null;\n             return false;\n         }\n-        _tokenInputTotal = _currInputProcessed + _inputPtr - 1;\n-        _tokenInputRow = _currInputRow;\n-        _tokenInputCol = _inputPtr - _currInputRowStart - 1;\n-\n-        // finally: clear any data retained so far\n         _binaryValue = null;\n \n         // Closing scope?\n         if (i == INT_RBRACKET) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n             return false;\n         }\n         if (i == INT_RCURLY) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n             i = _skipWS();\n         }\n \n+        _updateLocationFromInputPtr();\n         if (!_parsingContext.inObject()) {\n             _nextTokenNotInObject(i);\n             return false;\n             _currToken = null;\n             return null;\n         }\n-        _tokenInputTotal = _currInputProcessed + _inputPtr - 1;\n-        _tokenInputRow = _currInputRow;\n-        _tokenInputCol = _inputPtr - _currInputRowStart - 1;\n-\n         _binaryValue = null;\n \n         if (i == INT_RBRACKET) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n             return null;\n         }\n         if (i == INT_RCURLY) {\n+            _updateLocationFromInputPtr();\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n             }\n             i = _skipWS();\n         }\n-\n+        _updateLocationFromInputPtr();\n         if (!_parsingContext.inObject()) {\n             _nextTokenNotInObject(i);\n             return null;\n \n     /*\n     /**********************************************************\n+    /* Internal methods, location updating (refactored in 2.7)\n+    /**********************************************************\n+     */\n+\n+    // @since 2.7\n+    private final void _updateLocationFromInputPtr()\n+    {\n+        _tokenInputTotal = _currInputProcessed + _inputPtr - 1;\n+        _tokenInputRow = _currInputRow;\n+        _tokenInputCol = _inputPtr - _currInputRowStart - 1;\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Internal methods, other\n     /**********************************************************\n      */\n--- a/src/test/java/com/fasterxml/jackson/failing/LocationInArrayTest.java\n+++ b/src/test/java/com/fasterxml/jackson/failing/LocationInArrayTest.java\n         _assertLocation(useBytes, p.getTokenLocation(), 7L, 1, 8);\n         assertEquals(251, p.getIntValue()); // just to ensure read proceeds to end\n         _assertLocation(useBytes, p.getCurrentLocation(), 10L, 1, 11);\n+\n+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+        _assertLocation(useBytes, p.getTokenLocation(), 15L, 2, 4);\n+        assertEquals(3, p.getIntValue());\n+        _assertLocation(useBytes, p.getCurrentLocation(), 16L, 2, 5);\n+\n+        assertToken(JsonToken.END_ARRAY, p.nextToken());\n+        _assertLocation(useBytes, p.getTokenLocation(), 18L, 2, 7);\n+        _assertLocation(useBytes, p.getCurrentLocation(), 19L, 2, 8);\n         \n         p.close();\n     }", "timestamp": 1447743519, "metainfo": ""}