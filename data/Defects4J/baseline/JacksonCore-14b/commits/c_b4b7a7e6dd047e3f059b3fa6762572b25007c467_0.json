{"sha": "b4b7a7e6dd047e3f059b3fa6762572b25007c467", "log": "add impl, tests for JsonPointer-based generator filter", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n     }\n     \n     public JsonPointer matchProperty(String name) {\n-        if (_nextSegment == null || !_matchingPropertyName.equals(name)) {\n-            return null;\n-        }\n-        return _nextSegment;\n+        if ((_nextSegment != null) && _matchingPropertyName.equals(name)) {\n+            return _nextSegment;\n+        }\n+        return null;\n     }\n \n     /**\n      */\n     public boolean matchesElement(int index) {\n         return (index == _matchingElementIndex) && (index >= 0);\n+    }\n+\n+    /**\n+     * @since 2.6\n+     */\n+    public JsonPointer matchElement(int index) {\n+        if ((index != _matchingElementIndex) || (index < 0)) {\n+            return null;\n+        }\n+        return _nextSegment;\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n \n     /*\n     /**********************************************************\n+    /* Helper read/write methods\n+    /**********************************************************\n+     */\n+    \n+    protected void writeJsonDoc(JsonFactory f, String doc, Writer w) throws IOException\n+    {\n+        writeJsonDoc(f, doc, f.createGenerator(w));\n+    }\n+\n+    protected void writeJsonDoc(JsonFactory f, String doc, JsonGenerator g) throws IOException\n+    {\n+        JsonParser p = f.createParser(doc);\n+        \n+        while (p.nextToken() != null) {\n+            g.copyCurrentStructure(p);\n+        }\n+        p.close();\n+        g.close();\n+    }\n+\n+    /*\n+    /**********************************************************\n     /* Additional assertion methods\n     /**********************************************************\n      */\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java\n+package com.fasterxml.jackson.core.filter;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+/**\n+ * Low-level tests for explicit, hand-written tests for generator-side\n+ * filtering.\n+ */\n+public class BasicGeneratorFilteringTest extends com.fasterxml.jackson.core.BaseTest\n+{\n+    static class NameMatchFilter extends TokenFilter\n+    {\n+        private final Set<String> _names;\n+        \n+        public NameMatchFilter(String... names) {\n+            _names = new HashSet<String>(Arrays.asList(names));\n+        }\n+        \n+        @Override\n+        public TokenFilter includeProperty(String name) {\n+            if (_names.contains(name)) {\n+                return TokenFilter.INCLUDE_ALL;\n+            }\n+            return this;\n+        }\n+    }\n+\n+    static class IndexMatchFilter extends TokenFilter\n+    {\n+        private final BitSet _indices;\n+        \n+        public IndexMatchFilter(int... ixs) {\n+            _indices = new BitSet();\n+            for (int ix : ixs) {\n+                _indices.set(ix);\n+            }\n+        }\n+        \n+        @Override\n+        public TokenFilter includeElement(int index) {\n+            if (_indices.get(index)) {\n+                return TokenFilter.INCLUDE_ALL;\n+            }\n+            return null;\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final JsonFactory JSON_F = new JsonFactory();\n+\n+    public void testNonFiltering() throws Exception\n+    {\n+        // First, verify non-filtering\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = JSON_F.createGenerator(w);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\n+                \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\"),\n+                w.toString());\n+    }\n+\n+    public void testSingleMatchFilteringWithoutPath() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"value\"),\n+                false, // includePath\n+                false // multipleMatches\n+                );\n+        \n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        // Since properties MUST be contained within an Object, inclusion needs\n+         // to materialize surrounding Object too!\n+        assertEquals(aposToQuotes(\"{'value':3}\"), w.toString());\n+    }\n+\n+    public void testSingleMatchFilteringWithPath() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"value\"),\n+                true, // includePath\n+                false // multipleMatches\n+                );\n+        \n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), w.toString());\n+    }\n+\n+    public void testMultipleMatchFilteringWithPath1() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"value0\", \"value2\"),\n+                true, /* includePath */ true /* multipleMatches */ );\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'ob':{'value0':2,'value2':4}}\"), w.toString());\n+    }\n+\n+    public void testMultipleMatchFilteringWithPath2() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        \n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"array\", \"b\", \"value\"),\n+                true, true);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'array':[1,2],'ob':{'value':3},'b':true}\"), w.toString());\n+    }\n+\n+    public void testIndexMatchWithPath1() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new IndexMatchFilter(1),\n+                true, true);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'array':[2]}\"), w.toString());\n+\n+        w = new StringWriter();\n+        gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new IndexMatchFilter(0),\n+                true, true);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'array':[1]}\"), w.toString());\n+    }\n+\n+    public void testIndexMatchWithPath2() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new IndexMatchFilter(0,1),\n+                true, true);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'array':[1,2]}\"), w.toString());\n+    }\n+\n+    protected void _writeSimpleDoc(JsonGenerator gen) throws IOException\n+    {\n+        // { \"a\" : 123,\n+        //   \"array\" : [ 1, 2 ],\n+        //   \"ob\" : { \"value\" : 3 },\n+        //   \"b\" : true\n+        // }\n+\n+        gen.writeStartObject();\n+\n+        gen.writeFieldName(\"a\");\n+        gen.writeNumber(123);\n+        \n+        gen.writeFieldName(\"array\");\n+        gen.writeStartArray();\n+        gen.writeNumber(1);\n+        gen.writeNumber(2);\n+        gen.writeEndArray();\n+\n+        gen.writeFieldName(\"ob\");\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"value0\");\n+        gen.writeNumber(2);\n+        gen.writeFieldName(\"value\");\n+        gen.writeNumber(3);\n+        gen.writeFieldName(\"value2\");\n+        gen.writeNumber(4);\n+        gen.writeEndObject();\n+\n+        gen.writeFieldName(\"b\");\n+        gen.writeBoolean(true);\n+\n+        gen.writeEndObject();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java\n+package com.fasterxml.jackson.core.filter;\n+\n+import com.fasterxml.jackson.core.JsonPointer;\n+\n+/**\n+ * Helper class that implements simple single-match filter based\n+ * on a {@link JsonPointer} instance.\n+ */\n+class JsonPointerBasedFilter extends TokenFilter\n+{\n+    protected final JsonPointer _pathToMatch;\n+\n+    protected final boolean _includeParent;\n+\n+    public JsonPointerBasedFilter(String ptrExpr, boolean inclParent) {\n+        this(JsonPointer.compile(ptrExpr), inclParent);\n+    }\n+\n+    public JsonPointerBasedFilter(JsonPointer match, boolean inclParent) {\n+        _pathToMatch = match;\n+        _includeParent = inclParent;\n+    }\n+\n+    @Override\n+    public TokenFilter includeElement(int index) {\n+        JsonPointer next = _pathToMatch.matchElement(index);\n+        if (next == null) {\n+            return null;\n+        }\n+        if (next.matches()) {\n+            return TokenFilter.INCLUDE_ALL;\n+        }\n+        return new JsonPointerBasedFilter(next, _includeParent);\n+    }\n+\n+    @Override\n+    public TokenFilter includeProperty(String name) {\n+        JsonPointer next = _pathToMatch.matchProperty(name);\n+        if (next == null) {\n+            return null;\n+        }\n+        if (next.matches()) {\n+            if (_includeParent) {\n+                return TokenFilter.INCLUDE_ALL;\n+            }\n+            // Minor complication, for non-path-including case\n+            return IncludeAny.instance;\n+        }\n+        return new JsonPointerBasedFilter(next, _includeParent);\n+    }\n+\n+    @Override\n+    public TokenFilter filterStartArray() {\n+        return this;\n+    }\n+    \n+    @Override\n+    public TokenFilter filterStartObject() {\n+        return this;\n+    }\n+    \n+    @Override\n+    protected boolean _includeScalar() {\n+        // should only occur for root-level scalars, path \"/\"\n+        return _pathToMatch.matches();\n+    }\n+\n+    /**\n+     * Helper class needed to include value of an Object property, without\n+     * including surrounding Object. Used when path is not to be included.\n+     */\n+    static class IncludeAny extends TokenFilter {\n+        public final static IncludeAny instance = new IncludeAny();\n+\n+        @Override\n+        public TokenFilter filterStartArray() {\n+            return TokenFilter.INCLUDE_ALL;\n+        }\n+        \n+        @Override\n+        public TokenFilter filterStartObject() {\n+            return TokenFilter.INCLUDE_ALL;\n+        }\n+        \n+        @Override\n+        protected boolean _includeScalar() {\n+            return true;\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java\n+package com.fasterxml.jackson.core.filter;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+@SuppressWarnings(\"resource\")\n+public class JsonPointerGeneratorFilteringTest extends com.fasterxml.jackson.core.BaseTest\n+{\n+    private final JsonFactory JSON_F = new JsonFactory();\n+\n+    final String SIMPLE_INPUT = aposToQuotes(\"{'a':1,'b':[1,2,3],'c':{'d':{'a':true}},'d':null}\");\n+\n+    public void testSimplePropertyWithPath() throws Exception\n+    {\n+        _assert(SIMPLE_INPUT, \"/c\", true, \"{'c':{'d':{'a':true}}}\");\n+        _assert(SIMPLE_INPUT, \"/c/d\", true, \"{'c':{'d':{'a':true}}}\");\n+        _assert(SIMPLE_INPUT, \"/c/d/a\", true, \"{'c':{'d':{'a':true}}}\");\n+\n+        _assert(SIMPLE_INPUT, \"/c/d/a\", true, \"{'c':{'d':{'a':true}}}\");\n+        \n+        _assert(SIMPLE_INPUT, \"/a\", true, \"{'a':1}\");\n+        _assert(SIMPLE_INPUT, \"/d\", true, \"{'d':null}\");\n+\n+        // and then non-match\n+        _assert(SIMPLE_INPUT, \"/x\", true, \"\");\n+    }\n+    \n+    public void testSimplePropertyWithoutPath() throws Exception\n+    {\n+        _assert(SIMPLE_INPUT, \"/c\", false, \"{'d':{'a':true}}\");\n+        _assert(SIMPLE_INPUT, \"/c/d\", false, \"{'a':true}\");\n+        _assert(SIMPLE_INPUT, \"/c/d/a\", false, \"true\");\n+        \n+        _assert(SIMPLE_INPUT, \"/a\", false, \"1\");\n+        _assert(SIMPLE_INPUT, \"/d\", false, \"null\");\n+\n+        // and then non-match\n+        _assert(SIMPLE_INPUT, \"/x\", false, \"\");\n+    }\n+\n+    public void testArrayElementWithPath() throws Exception\n+    {\n+        _assert(SIMPLE_INPUT, \"/b\", true, \"{'b':[1,2,3]}\");\n+        _assert(SIMPLE_INPUT, \"/b/1\", true, \"{'b':[2]}\");\n+        _assert(SIMPLE_INPUT, \"/b/2\", true, \"{'b':[3]}\");\n+\n+        // and then non-match\n+        _assert(SIMPLE_INPUT, \"/b/8\", true, \"\");\n+    }\n+    \n+    public void testArrayElementWithoutPath() throws Exception\n+    {\n+        _assert(SIMPLE_INPUT, \"/b\", false, \"[1,2,3]\");\n+        _assert(SIMPLE_INPUT, \"/b/1\", false, \"2\");\n+        _assert(SIMPLE_INPUT, \"/b/2\", false, \"3\");\n+\n+        _assert(SIMPLE_INPUT, \"/b/8\", false, \"\");\n+\n+        // and then non-match\n+        _assert(SIMPLE_INPUT, \"/x\", false, \"\");\n+    }\n+    \n+    private void _assert(String input, String pathExpr, boolean includeParent, String exp)\n+        throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator g0 = JSON_F.createGenerator(w);\n+        FilteringGeneratorDelegate g = new FilteringGeneratorDelegate(g0,\n+                new JsonPointerBasedFilter(pathExpr, includeParent),\n+                includeParent, false);\n+        writeJsonDoc(JSON_F, input, g);\n+\n+        assertEquals(aposToQuotes(exp), w.toString());\n+    }\n+}", "timestamp": 1428626586, "metainfo": ""}