{"sha": "f440fa0a38f69ca378f8e428cff016fa7028e1a9", "log": "VersionUtil: Improve Android memory usage  The Android runtime implements Class.getResourceAsStream() with a very memory-intensive cache, which holds the entire contents of the class's .jar in memory.  A large Android app that uses Jackson will consume double the memory today. Since memory is very tight on most Android devices, this diff adds an alternative method to get version info for a package.  In specific, we now generate a class com.fasterxml.jackson.core.json.PackageVersion at compile time.  At run time, VersionUtil now checks the class's package to see if there's a class named 'PackageVersion', and if so, reads its 'VERSION' static field for the Version data for the package.  (If not, we still use the existing VERSION.txt resource code as a fallback.)  I have separate patches for jackson-databind and jackson-datatype-guava; it's easy to apply to other packages as well.  This is a nice performance improvement as well; we no longer incur all the overhead of causing the runtime to open and cache the .jar (unzipping it, etc.) just to read the VERSION.txt resource.  If the PackageVersion class doesn't exist, we'll of course fall back to the existing test to get version info.  I confirmed using the Eclipse Memory Analyzer[1] that memory usage for a large app I work on was reduced by about 5 MB with this fix (as well as the jackson-databind and jackson-datatype-guava fixes).  Unit tests included.  [1] http://www.eclipse.org/mat/", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/core/json/PackageVersion.java.in\n+package @package@;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+public final class PackageVersion {\n+    public final static Version VERSION = VersionUtil.parseVersion(\n+        \"@projectversion@\", \"@projectgroupid@\", \"@projectartifactid@\");\n+}\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n public class VersionUtil\n {\n     public final static String VERSION_FILE = \"VERSION.txt\";\n+    public final static String PACKAGE_VERSION_CLASS_NAME = \"PackageVersion\";\n+    public final static String PACKAGE_VERSION_FIELD = \"VERSION\";\n \n     private final static Pattern VERSION_SEPARATOR = Pattern.compile(\"[-_./;:]\");\n \n     \n     /**\n      * Helper method that will try to load version information for specified\n-     * class. Implementation is simple: class loader that loaded specified\n-     * class is asked to load resource with name \"VERSION\" from same\n-     * location (package) as class itself had.\n-     * If no version information is found, {@link Version#unknownVersion()} is\n-     * returned.\n+     * class. Implementation is as follows:\n+     *\n+     * First, tries to load version info from a class named\n+     * \"PackageVersion\" in the same package as the class.\n+     *\n+     * Next, if that fails, class loader that loaded specified class is\n+     * asked to load resource with name \"VERSION\" from same location\n+     * (package) as class itself had.\n+     *\n+     * If no version information is found, {@link Version#unknownVersion()} is returned.\n      */\n     public static Version versionFor(Class<?> cls)\n     {\n+        Version packageVersion = packageVersionFor(cls);\n+        if (packageVersion != null) {\n+            return packageVersion;\n+        }\n+\n         final InputStream in = cls.getResourceAsStream(VERSION_FILE);\n \n         if (in == null)\n             } catch (IOException e) {\n                 throw new RuntimeException(e);\n             }\n+        }\n+    }\n+\n+    /**\n+     * Loads version information by introspecting a class named\n+     * \"PackageVersion\" in the same package as the given class.\n+     *\n+     * If the class could not be found or does not have a public\n+     * static Version field named \"VERSION\", returns null.\n+     */\n+    public static Version packageVersionFor(Class<?> cls)\n+    {\n+        try {\n+            Package p = cls.getPackage();\n+            String versionInfoClassName =\n+                new StringBuilder(p.getName())\n+                    .append(\".\")\n+                    .append(PACKAGE_VERSION_CLASS_NAME)\n+                    .toString();\n+            Class<?> versionInfoClass = Class.forName(\n+                versionInfoClassName, true, cls.getClassLoader());\n+            return (Version)versionInfoClass.getField(PACKAGE_VERSION_FIELD).get(null);\n+        } catch (Exception e) {\n+            return null;\n         }\n     }\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/test/PackageVersion.java\n+package com.fasterxml.jackson.core.test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+public final class PackageVersion {\n+    public final static Version VERSION = VersionUtil.parseVersion(\n+        \"23.42.64738-foobar\", \"foobar-group\", \"foobar-artifact\");\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/test/TestPackageVersion.java\n+package com.fasterxml.jackson.core.test;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+public class TestPackageVersion extends com.fasterxml.jackson.test.BaseTest\n+{\n+    public void testPackageVersion()\n+    {\n+        Version expected = new Version(23, 42, 64738, \"foobar\", \"foobar-group\", \"foobar-artifact\");\n+        assertEquals(expected, VersionUtil.packageVersionFor(this.getClass()));\n+        assertEquals(expected, VersionUtil.versionFor(this.getClass()));\n+    }\n+}", "timestamp": 1357261020, "metainfo": ""}