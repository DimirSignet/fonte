{"sha": "d3f0320f2635dd8cfceb49c173037a94dfab7e43", "log": "Improve support for std/format feature setting", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      */\n     public abstract boolean isEnabled(Feature f);\n \n-\n     /**\n      * Bulk access method for getting state of all standard (non-dataformat-specific)\n      * {@link JsonGenerator.Feature}s.\n      *    and which disabled\n      *\n      * @return This parser object, to allow chaining of calls\n-     */\n+     *\n+     * @deprecated Since 2.7, use {@link #overrideStdFeatures(int, int)} instead\n+     */\n+    @Deprecated\n     public abstract JsonGenerator setFeatureMask(int values);\n \n     /**\n      *    int newState = (oldState &amp; ~mask) | (values &amp; mask);\n      *    setFeatureMask(newState);\n      *</code>\n+     * but preferred as this lets caller more efficiently specify actual changes made.\n      * \n      * @param values Bit mask of set/clear state for features to change\n      * @param mask Bit mask of features to change\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n      * @return This parser object, to allow chaining of calls\n      * \n      * @since 2.3\n-     */\n+     * \n+     * @deprecated Since 2.7, use {@link #overrideStdFeatures(int, int)} instead\n+     */\n+    @Deprecated\n     public JsonParser setFeatureMask(int mask) {\n         _features = mask;\n         return this;\n      *    int newState = (oldState &amp; ~mask) | (values &amp; mask);\n      *    setFeatureMask(newState);\n      *</code>\n+     * but preferred as this lets caller more efficiently specify actual changes made.\n      * \n      * @param values Bit mask of set/clear state for features to change\n      * @param mask Bit mask of features to change\n      * @since 2.6\n      */\n     public JsonParser overrideStdFeatures(int values, int mask) {\n-        _features = (_features & ~mask) | (values & mask);\n-        return this;\n+        int newState = (_features & ~mask) | (values & mask);\n+        return setFeatureMask(newState);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n     @Override public JsonGenerator setFeatureMask(int newMask) {\n         int changed = newMask ^ _features;\n         _features = newMask;\n-        if ((changed & DERIVED_FEATURES_MASK) != 0) {\n-            _cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(newMask);\n-            if (Feature.ESCAPE_NON_ASCII.enabledIn(changed)) {\n-                if (Feature.ESCAPE_NON_ASCII.enabledIn(newMask)) {\n-                    setHighestNonEscapedChar(127);\n-                } else {\n-                    setHighestNonEscapedChar(0);\n+        if (changed != 0) {\n+            _checkStdFeatureChanges(newMask, changed);\n+        }\n+        return this;\n+    }\n+\n+    @Override // since 2.7\n+    public JsonGenerator overrideStdFeatures(int values, int mask) {\n+        int oldState = _features;\n+        int newState = (oldState & ~mask) | (values & mask);\n+        int changed = oldState ^ newState;\n+        if (changed != 0) {\n+            _features = newState;\n+            _checkStdFeatureChanges(newState, changed);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Helper method called to verify changes to standard features.\n+     *\n+     * @param newFeatureFlags Bitflag of standard features after they were changed\n+     * @param changedFeatures Bitflag of standard features for which setting\n+     *    did change\n+     *\n+     * @since 2.7\n+     */\n+    protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures)\n+    {\n+        if ((changedFeatures & DERIVED_FEATURES_MASK) == 0) {\n+            return;\n+        }\n+        _cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(newFeatureFlags);\n+        if (Feature.ESCAPE_NON_ASCII.enabledIn(changedFeatures)) {\n+            if (Feature.ESCAPE_NON_ASCII.enabledIn(newFeatureFlags)) {\n+                setHighestNonEscapedChar(127);\n+            } else {\n+                setHighestNonEscapedChar(0);\n+            }\n+        }\n+        if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(changedFeatures)) {\n+            if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newFeatureFlags)) { // enabling\n+                if (_writeContext.getDupDetector() == null) { // but only if disabled currently\n+                    _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));\n                 }\n-            }\n-            if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(changed)) {\n-                if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newMask)) { // enabling\n-                    if (_writeContext.getDupDetector() == null) { // but only if disabled currently\n-                        _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));\n-                    }\n-                } else { // disabling\n-                    _writeContext = _writeContext.withDupDetector(null);\n-                }\n-            }\n-        }\n-        return this;\n+            } else { // disabling\n+                _writeContext = _writeContext.withDupDetector(null);\n+            }\n+        }\n     }\n     \n     @Override public JsonGenerator useDefaultPrettyPrinter() {\n-        /* 28-Sep-2012, tatu: As per [Issue#84], should not override a\n-         *  pretty printer if one already assigned.\n-         */\n+        // Should not override a pretty printer if one already assigned.\n         if (getPrettyPrinter() != null) {\n             return this;\n         }\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n         int changes = (_features ^ newMask);\n         if (changes != 0) {\n             _features = newMask;\n-            if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newMask)) { // enabling\n-                if (_parsingContext.getDupDetector() == null) { // but only if disabled currently\n+            _checkStdFeatureChanges(newMask, changes);\n+        }\n+        return this;\n+    }\n+\n+    @Override // since 2.7\n+    public JsonParser overrideStdFeatures(int values, int mask) {\n+        int oldState = _features;\n+        int newState = (oldState & ~mask) | (values & mask);\n+        int changed = oldState ^ newState;\n+        if (changed != 0) {\n+            _features = newState;\n+            _checkStdFeatureChanges(newState, changed);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Helper method called to verify changes to standard features.\n+     *\n+     * @param newFeatureFlags Bitflag of standard features after they were changed\n+     * @param changedFeatures Bitflag of standard features for which setting\n+     *    did change\n+     *\n+     * @since 2.7\n+     */\n+    protected void _checkStdFeatureChanges(int newFeatureFlags, int changedFeatures)\n+    {\n+        int f = Feature.STRICT_DUPLICATE_DETECTION.getMask();\n+        \n+        if ((changedFeatures & f) != 0) {\n+            if ((newFeatureFlags & f) != 0) {\n+                if (_parsingContext.getDupDetector() == null) {\n                     _parsingContext = _parsingContext.withDupDetector(DupDetector.rootDetector(this));\n+                } else { // disabling\n+                    _parsingContext = _parsingContext.withDupDetector(null);\n                 }\n-            } else { // disabling\n-                _parsingContext = _parsingContext.withDupDetector(null);\n-            }\n-        }\n-        return this;\n-    }\n-    \n+            }\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* JsonParser impl\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n     public int getFeatureMask() { return delegate.getFeatureMask(); }\n \n     @Override\n+    @Deprecated\n     public JsonGenerator setFeatureMask(int mask) {\n         delegate.setFeatureMask(mask);\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonGenerator overrideStdFeatures(int values, int mask) {\n+        delegate.overrideStdFeatures(values, mask);\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonGenerator overrideFormatFeatures(int values, int mask) {\n+        delegate.overrideFormatFeatures(values, mask);\n         return this;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n     @Override public int getFeatureMask() { return delegate.getFeatureMask(); }\n \n     @Override\n+    @Deprecated // since 2.7\n     public JsonParser setFeatureMask(int mask) {\n         delegate.setFeatureMask(mask);\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonParser overrideStdFeatures(int values, int mask) {\n+        delegate.overrideStdFeatures(values, mask);\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonParser overrideFormatFeatures(int values, int mask) {\n+        delegate.overrideFormatFeatures(values, mask);\n         return this;\n     }\n ", "timestamp": 1443066250, "metainfo": ""}