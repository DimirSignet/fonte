{"sha": "6d9cb6429f8465fccb4bf34ff74682ae4d246c6f", "log": "Minor tweaking, javadoc fixes, add version numbers", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.JsonParser.Feature;\n import com.fasterxml.jackson.core.io.IOContext;\n import com.fasterxml.jackson.core.io.NumberInput;\n import com.fasterxml.jackson.core.json.DupDetector;\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java\n \n import java.io.IOException;\n \n-import com.fasterxml.jackson.core.JsonGenerationException;\n import com.fasterxml.jackson.core.JsonGenerator;\n \n /**\n- * Default linefeed-based indenter uses system-specific linefeeds and\n- * 2 spaces for indentation per level.\n+ * Default linefeed-based indenter, used by {@link DefaultPrettyPrinter} (unless\n+ * overridden). Uses system-specific linefeeds and 2 spaces for indentation per level.\n+ * \n+ * @since 2.5\n  */\n public class DefaultIndenter\n     extends DefaultPrettyPrinter.NopIndenter\n {\n+    private static final long serialVersionUID = 1L;\n+\n     public final static String SYS_LF;\n     static {\n         String lf;\n \n     public static final DefaultIndenter SYSTEM_LINEFEED_INSTANCE = new DefaultIndenter(\"  \", SYS_LF);\n \n-    private final static int INDENT_LEVELS = 64;\n+    /**\n+     * We expect to rarely get indentation deeper than this number of levels,\n+     * and try not to pre-generate more indentations than needed.\n+     */\n+    private final static int INDENT_LEVELS = 16;\n     private final char[] indents;\n     private final int charsPerLevel;\n     private final String eol;\n     }\n     \n     /** Create an indenter which uses the <code>indent</code> string to indent one level\n-     *  and the <code>eol</code> string to separate lines. */\n+     *  and the <code>eol</code> string to separate lines.\n+     */\n     public DefaultIndenter(String indent, String eol)\n     {\n         charsPerLevel = indent.length();\n \n-        this.indents = new char[indent.length() * INDENT_LEVELS];\n+        indents = new char[indent.length() * INDENT_LEVELS];\n         int offset = 0;\n         for (int i=0; i<INDENT_LEVELS; i++) {\n-            indent.getChars(0, indent.length(), this.indents, offset);\n+            indent.getChars(0, indent.length(), indents, offset);\n             offset += indent.length();\n         }\n \n     public boolean isInline() { return false; }\n \n     @Override\n-    public void writeIndentation(JsonGenerator jg, int level)\n-        throws IOException, JsonGenerationException\n+    public void writeIndentation(JsonGenerator jg, int level) throws IOException\n     {\n         jg.writeRaw(eol);\n         if (level > 0) { // should we err on negative values (as there's some flaw?)\n             level *= charsPerLevel;\n-            while (level > indents.length) { // should never happen but...\n+            while (level > indents.length) { // unlike to happen but just in case\n                 jg.writeRaw(indents, 0, indents.length); \n                 level -= indents.length;\n             }\n         }\n     }\n     \n-    public String getEol()\n-    {\n+    public String getEol() {\n         return eol;\n     }\n     \n-    public String getIndent()\n-    {\n+    public String getIndent() {\n         return new String(indents, 0, charsPerLevel);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n package com.fasterxml.jackson.core.util;\n \n import java.io.*;\n-import java.util.Arrays;\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.io.SerializedString;\n     implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>,\n         java.io.Serializable\n {\n-    private static final long serialVersionUID = -5512586643324525213L;\n+    private static final long serialVersionUID = 1;\n \n     /**\n      * Constant that specifies default \"root-level\" separator to use between\n      */\n     public interface Indenter\n     {\n-        void writeIndentation(JsonGenerator jg, int level)\n-            throws IOException, JsonGenerationException;\n+        void writeIndentation(JsonGenerator jg, int level) throws IOException;\n \n         /**\n          * @return True if indenter is considered inline (does not add linefeeds),\n         public static final NopIndenter instance = new NopIndenter();\n \n         @Override\n-        public void writeIndentation(JsonGenerator jg, int level)\n-            throws IOException, JsonGenerationException\n-        { }\n+        public void writeIndentation(JsonGenerator jg, int level) throws IOException { }\n \n         @Override\n         public boolean isInline() { return true; }\n         public boolean isInline() { return true; }\n     }\n     \n-    /** @deprecated Use {@link DefaultIndenter} instead */\n+    /**\n+     * @deprecated Since 2.5 use {@link DefaultIndenter} instead\n+     */\n     @Deprecated\n     public static class Lf2SpacesIndenter extends DefaultIndenter\n     {\n-        /** @deprecated Use {@link DefaultIndenter.SYSTEM_LINEFEED_INSTANCE} instead */\n+        /** @deprecated Use {@link DefaultIndenter#SYSTEM_LINEFEED_INSTANCE} instead */\n+        @SuppressWarnings(\"hiding\")\n+        @Deprecated\n         public static final Lf2SpacesIndenter instance = new Lf2SpacesIndenter();\n \n         /** @deprecated Use {@code new DefaultIndenter(\"  \", DefaultIndenter.SYS_LF)} instead */\n-        public Lf2SpacesIndenter()\n-        {\n+        @Deprecated\n+        public Lf2SpacesIndenter() {\n             super(\"  \", DefaultIndenter.SYS_LF);\n         }\n         \n         /** @deprecated Use {@code new DefaultIndenter(\"  \", lf)} instead */\n+        @Deprecated\n         public Lf2SpacesIndenter(String lf) {\n             super(\"  \", lf);\n         }", "timestamp": 1417236763, "metainfo": ""}