{"sha": "0844691620772764af51e7f2d0c0af9d4d3ac999", "log": "add a test for #177", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java\n         _testDupFieldNameWrites(f, true);        \n     }\n \n+    // [core#177]\n+    // Also: should not try writing JSON String if field name expected\n+    // (in future maybe take one as alias... but not yet)\n+    /*\n+    public void testFailOnWritingStringNotFieldName() throws Exception\n+    {\n+        JsonFactory f = new JsonFactory();\n+        _testFailOnWritingStringNotFieldName(f, false);\n+        _testFailOnWritingStringNotFieldName(f, true);        \n+    }\n+    */\n+    \n+    /*\n+    /**********************************************************\n+    /* Internal methods\n+    /**********************************************************\n+     */\n+\n     private void _testDupFieldNameWrites(JsonFactory f, boolean useReader) throws Exception\n     {\n         JsonGenerator gen;\n             gen.writeFieldName(\"b\");\n             gen.flush();\n             String json = bout.toString(\"UTF-8\");\n-            fail(\"Should not have let two consequtive field name writes succeed: output = \"+json);\n+            fail(\"Should not have let two consecutive field name writes succeed: output = \"+json);\n         } catch (JsonProcessingException e) {\n             verifyException(e, \"can not write a field name, expecting a value\");\n         }\n         gen.close();\n     }\n \n-    /*\n-    /**********************************************************\n-    /* Internal methods\n-    /**********************************************************\n-     */\n-    \n-    private void doTestIntWrite(boolean pad)\n-        throws Exception\n+    private void _testFailOnWritingStringNotFieldName(JsonFactory f, boolean useReader) throws Exception\n+    {\n+        JsonGenerator gen;\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        if (useReader) {\n+            gen = f.createGenerator(new OutputStreamWriter(bout, \"UTF-8\"));\n+        } else {\n+            gen = f.createGenerator(bout, JsonEncoding.UTF8);\n+        }\n+        gen.writeStartObject();\n+        \n+        try {\n+            gen.writeString(\"a\");\n+            gen.flush();\n+            String json = bout.toString(\"UTF-8\");\n+            fail(\"Should not have let 'writeString()' be used in place of 'writeFieldName()': output = \"+json);\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"can not write a field name, expecting a value\");\n+        }\n+        gen.close();\n+    }\n+\n+    private void doTestIntWrite(boolean pad) throws Exception\n     {\n         int[] VALUES = new int[] {\n             0, 1, -9, 32, -32, 57, 189, 2017, -9999, 13240, 123456,", "timestamp": 1420163081, "metainfo": ""}