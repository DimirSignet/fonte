{"sha": "d04bea92fd3deeb977dc088c7fe5646668c37280", "log": "improving filering tests", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n             return;\n         }\n \n+System.err.println(\"  ... call 'includeProperty(\"+name+\")' on: \"+_itemFilter);\n+        \n         state = _itemFilter.includeProperty(name);\n \n-System.err.println(\" -> include '\"+name+\"'? \"+state);\n+System.err.println(\" -> include '\"+name+\"' (via \"+_itemFilter+\")? \"+state);\n         \n         _itemFilter = state;\n         if (state == TokenFilter.INCLUDE_ALL) {\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n package com.fasterxml.jackson.core.filter;\n \n import java.io.*;\n+import java.util.*;\n \n import com.fasterxml.jackson.core.*;\n \n {\n     static class NameMatchFilter extends TokenFilter\n     {\n-        private final String _name;\n+        private final Set<String> _names;\n         \n-        public NameMatchFilter(String n) { _name = n; }\n+        public NameMatchFilter(String... names) {\n+            _names = new HashSet<String>(Arrays.asList(names));\n+        }\n         \n         @Override\n         public TokenFilter includeProperty(String name) {\n-            if (name.equals(_name)) {\n-//System.err.println(\"Include? \"+name+\" -> true\");\n+            if (_names.contains(name)) {\n+System.err.println(\"Filter:Include? \"+name+\" -> true\");\n                 return TokenFilter.INCLUDE_ALL;\n             }\n-//System.err.println(\"Include? \"+name+\" -> false\");\n+System.err.println(\"Filter:Include? \"+name+\" -> false\");\n             return this;\n         }\n     }\n         assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), w.toString());\n     }\n \n+    public void testMultipleMatchFilteringWithPath1() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"value0\", \"value2\"),\n+                true, /* includePath */ true /* multipleMatches */ );\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'ob':{'value0':2,'value2':4}}\"), w.toString());\n+    }\n+    \n+    public void testMultipleMatchFilteringWithPath2() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"array\", \"b\", \"value\"),\n+                true, true);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'array':[1,2],'ob':{'value':3},'b':true}\"), w.toString());\n+    \n+    }\n+    \n     public void testSingleMatchFilteringWithoutPath() throws Exception\n     {\n         StringWriter w = new StringWriter();", "timestamp": 1428474081, "metainfo": ""}