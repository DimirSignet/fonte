{"sha": "32224282e4a0862778e9ed139c0900ffb2d06c6a", "log": "Further fixes to parser filtering", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n             }\n \n         default: // scalar value\n-            if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n+            f = _itemFilter;\n+            if (f == TokenFilter.INCLUDE_ALL) {\n                 return (_currToken = t);\n+            }\n+            if (f != null) {\n+                f = _headContext.checkValue(f);\n+                if ((f == TokenFilter.INCLUDE_ALL)\n+                        || ((f != null) && f.includeValue(delegate))) {\n+                    return (_currToken = t);\n+                }\n             }\n             // Otherwise not included (leaves must be explicitly included)\n             break;\n \n             default: // scalar value\n                 f = _itemFilter;\n-                if ((f == TokenFilter.INCLUDE_ALL)\n-                        || ((f != null) && f.includeValue(delegate))) {\n-                    return (_currToken = t);\n+                if (f == TokenFilter.INCLUDE_ALL) {\n+                    return (_currToken = t);\n+                }\n+                if (f != null) {\n+                    f = _headContext.checkValue(f);\n+                    if ((f == TokenFilter.INCLUDE_ALL)\n+                            || ((f != null) && f.includeValue(delegate))) {\n+                        return (_currToken = t);\n+                    }\n                 }\n                 // Otherwise not included (leaves must be explicitly included)\n-                continue main_loop;\n+                break;\n             }\n         }\n     }\n                 continue main_loop;\n \n             default: // scalar value\n-                if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n+                f = _itemFilter;\n+                if (f == TokenFilter.INCLUDE_ALL) {\n                     return _nextBuffered();\n                 }\n+                if (f != null) {\n+                    f = _headContext.checkValue(f);\n+                    if ((f == TokenFilter.INCLUDE_ALL)\n+                            || ((f != null) && f.includeValue(delegate))) {\n+                        return _nextBuffered();\n+                    }\n+                }\n                 // Otherwise not included (leaves must be explicitly included)\n+                continue main_loop;\n             }\n         }\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n         if (_type == TYPE_OBJECT) {\n             return filter;\n         }\n-        // We increaase it first because at the beginning of array, value is -1\n+        // We increase it first because at the beginning of array, value is -1\n         int ix = ++_index;\n         if (_type == TYPE_ARRAY) {\n             return filter.includeElement(ix);\n--- a/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java\n         _assert(SIMPLE_INPUT, \"/c/d\", true, \"{'c':{'d':{'a':true}}}\");\n         _assert(SIMPLE_INPUT, \"/a\", true, \"{'a':1}\");\n         _assert(SIMPLE_INPUT, \"/b\", true, \"{'b':[1,2,3]}\");\n+\n+        // !!! TODO: failing\n+        \n //        _assert(SIMPLE_INPUT, \"/b/1\", true, \"{'b':[2]}\");\n     }\n \n     public void testSimpleNoPath() throws Exception\n     {\n+        _assert(SIMPLE_INPUT, \"/c\", false, \"{'d':{'a':true}}\");\n         _assert(SIMPLE_INPUT, \"/c/d\", false, \"{'a':true}\");\n+        _assert(SIMPLE_INPUT, \"/a\", false, \"1\");\n+        _assert(SIMPLE_INPUT, \"/b\", false, \"[1,2,3]\");\n+        _assert(SIMPLE_INPUT, \"/b/0\", false, \"1\");\n+        _assert(SIMPLE_INPUT, \"/b/1\", false, \"2\");\n+        _assert(SIMPLE_INPUT, \"/b/2\", false, \"3\");\n+        _assert(SIMPLE_INPUT, \"/b/3\", false, \"\");\n     }\n-    \n+\n     @SuppressWarnings(\"resource\")\n     void _assert(String input, String pathExpr, boolean includeParent, String exp)\n         throws Exception", "timestamp": 1429227562, "metainfo": ""}