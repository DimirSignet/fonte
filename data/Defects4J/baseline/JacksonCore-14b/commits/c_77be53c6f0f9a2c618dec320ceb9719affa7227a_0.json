{"sha": "77be53c6f0f9a2c618dec320ceb9719affa7227a", "log": "Implement #198: Add back-reference to `JsonParser` (from `JsonParseException`), `JsonGenerator` (from `JsonGenerationException`)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java\n     extends JsonProcessingException\n {\n     private final static long serialVersionUID = 123; // Stupid eclipse...\n-    \n-    public JsonGenerationException(Throwable rootCause)\n-    {\n+\n+    protected JsonGenerator _processor;\n+\n+    // TODO: mark deprecated in 2.7\n+    public JsonGenerationException(Throwable rootCause) {\n         super(rootCause);\n     }\n \n-    public JsonGenerationException(String msg)\n-    {\n+    // TODO: mark deprecated in 2.7\n+    public JsonGenerationException(String msg) {\n         super(msg, (JsonLocation)null);\n     }\n \n-    public JsonGenerationException(String msg, Throwable rootCause)\n-    {\n+    // TODO: mark deprecated in 2.7\n+    public JsonGenerationException(String msg, Throwable rootCause) {\n         super(msg, null, rootCause);\n     }\n+\n+    /**\n+     * @since 2.7\n+     */\n+    public JsonGenerationException(Throwable rootCause, JsonGenerator g) {\n+        super(rootCause);\n+        _processor = g;\n+    }\n+\n+    /**\n+     * @since 2.7\n+     */\n+    public JsonGenerationException(String msg, JsonGenerator g) {\n+        super(msg, (JsonLocation) null);\n+        _processor = g;\n+    }\n+    \n+    /**\n+     * @since 2.7\n+     */\n+    public JsonGenerationException(String msg, Throwable rootCause, JsonGenerator g) {\n+        super(msg, null, rootCause);\n+        _processor = g;\n+    }\n+\n+    /**\n+     * Fluent method that may be used to assign originating {@link JsonGenerator},\n+     * to be accessed using {@link #getProcessor()}.\n+     *\n+     * @since 2.7\n+     */\n+    public JsonGenerationException withGenerator(JsonGenerator g) {\n+        _processor = g;\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonGenerator getProcessor() { return _processor; }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      * @since 2.3\n      */\n     public void writeObjectId(Object id) throws IOException {\n-        throw new JsonGenerationException(\"No native support for writing Object Ids\");\n+        throw new JsonGenerationException(\"No native support for writing Object Ids\", this);\n     }\n \n     /**\n      * a {@link JsonGenerationException} will be thrown.\n      */\n     public void writeObjectRef(Object id) throws IOException {\n-        throw new JsonGenerationException(\"No native support for writing Object Ids\");\n+        throw new JsonGenerationException(\"No native support for writing Object Ids\", this);\n     }\n     \n     /**\n      * @since 2.3\n      */\n     public void writeTypeId(Object id) throws IOException {\n-        throw new JsonGenerationException(\"No native support for writing Type Ids\");\n+        throw new JsonGenerationException(\"No native support for writing Type Ids\", this);\n     }\n     \n     /*\n      * or use a {@link JsonGenerationException} sub-class.\n      */\n     protected void _reportError(String msg) throws JsonGenerationException {\n-        throw new JsonGenerationException(msg);\n+        throw new JsonGenerationException(msg, this);\n     }\n \n     protected final void _throwInternal() { VersionUtil.throwInternal(); }\n     protected void _reportUnsupportedOperation() {\n         throw new UnsupportedOperationException(\"Operation not supported by generator of type \"+getClass().getName());\n     }\n-    \n+\n     /**\n      * Helper method to try to call appropriate write method for given\n      * untyped Object. At this point, no structural conversions should be done,\n             } else if (n instanceof BigDecimal) {\n                 writeNumber((BigDecimal) n);\n                 return;\n-                \n+\n             // then Atomic types\n-                \n             } else if (n instanceof AtomicInteger) {\n                 writeNumber(((AtomicInteger) n).get());\n                 return;\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParseException.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParseException.java\n  * is encountered.\n  */\n public class JsonParseException extends JsonProcessingException {\n-    private static final long serialVersionUID = 1L;\n-    \n+    private static final long serialVersionUID = 2L; // 2.7\n+\n+    protected JsonParser _processor;\n+\n+    // TODO: mark deprecated in 2.7\n     public JsonParseException(String msg, JsonLocation loc) {\n         super(msg, loc);\n     }\n \n+    // TODO: mark deprecated in 2.7\n     public JsonParseException(String msg, JsonLocation loc, Throwable root) {\n         super(msg, loc, root);\n     }\n+\n+    /**\n+     * Constructor that uses current parsing location as location, and\n+     * sets processor (accessible via {@link #getProcessor()}) to\n+     * specified parser.\n+     *\n+     * @since 2.7\n+     */\n+    public JsonParseException(JsonParser p, String msg) {\n+        super(msg, (p == null) ? null : p.getCurrentLocation());\n+        _processor = p;\n+    }\n+\n+    /**\n+     * @since 2.7\n+     */\n+    public JsonParseException(JsonParser p, String msg, Throwable root) {\n+        super(msg, (p == null) ? null : p.getCurrentLocation(), root);\n+        _processor = p;\n+    }\n+    \n+    /**\n+     * @since 2.7\n+     */\n+    public JsonParseException(JsonParser p, String msg, JsonLocation loc) {\n+        super(msg, loc);\n+        _processor = p;\n+    }\n+\n+    /**\n+     * @since 2.7\n+     */\n+    public JsonParseException(JsonParser p, String msg, JsonLocation loc, Throwable root) {\n+        super(msg, loc, root);\n+        _processor = p;\n+    }\n+\n+    /**\n+     * Fluent method that may be used to assign originating {@link JsonParser},\n+     * to be accessed using {@link #getProcessor()}.\n+     *\n+     * @since 2.7\n+     */\n+    public JsonParseException withParser(JsonParser p) {\n+        _processor = p;\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonParser getProcessor() {\n+        return _processor;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n         JsonToken t = getCurrentToken();\n         if (t == JsonToken.VALUE_TRUE) return true;\n         if (t == JsonToken.VALUE_FALSE) return false;\n-        throw new JsonParseException(\"Current token (\"+t+\") not of boolean type\", getCurrentLocation());\n+        throw new JsonParseException(this,\n+                String.format(\"Current token (%s) not of boolean type\", t));\n     }\n \n     /**\n      * based on current state of the parser\n      */\n     protected JsonParseException _constructError(String msg) {\n-        return new JsonParseException(msg, getCurrentLocation());\n+        return new JsonParseException(this, msg);\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonProcessingException.java\n         this(null, null, rootCause);\n     }\n \n-    public JsonLocation getLocation() { return _location; }\n-\n     /*\n     /**********************************************************\n     /* Extended API\n     /**********************************************************\n      */\n \n+    public JsonLocation getLocation() { return _location; }\n+    \n     /**\n      * Method that allows accessing the original \"message\" argument,\n      * without additional decorations (like location information)\n      * @since 2.1\n      */\n     public String getOriginalMessage() { return super.getMessage(); }\n+\n+    /**\n+     * Method that allows accessing underlying processor that triggered\n+     * this exception; typically either {@link JsonParser} or {@link JsonGenerator}\n+     * for exceptions that originate from streaming API.\n+     * Note that it is possible that `null` may be returned if code throwing\n+     * exception either has no access to processor; or has not been retrofitted\n+     * to set it; this means that caller needs to take care to check for nulls.\n+     * Subtypes override this method with co-variant return type, for more\n+     * type-safe access.\n+     * \n+     * @return Originating processor, if available; null if not.\n+     *\n+     * @since 2.7\n+     */\n+    public Object getProcessor() { return null; }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n     }\n \n     protected final JsonParseException _constructError(String msg, Throwable t) {\n-        return new JsonParseException(msg, getCurrentLocation(), t);\n+        return new JsonParseException(this, msg, t);\n     }\n \n     protected static byte[] _asciiBytes(String str) {\n         }\n         return b;\n     }\n-    \n+\n     protected static String _ascii(byte[] b) {\n         try {\n             return new String(b, \"US-ASCII\");\n--- a/src/main/java/com/fasterxml/jackson/core/json/DupDetector.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/DupDetector.java\n public class DupDetector\n {\n     /**\n-     * We need to store a back-reference here to parser/generator, unfortunately.\n+     * We need to store a back-reference here to parser/generator.\n      */\n     protected final Object _source;\n \n         // do generators have a way to provide Location? Apparently not...\n         return null;\n     }\n-    \n+\n+    /**\n+     * @since 2.7\n+     */\n+    public Object getSource() {\n+        return _source;\n+    }\n+\n     public boolean isDup(String name) throws JsonParseException\n     {\n         if (_firstName == null) {\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n \n     private void _checkDup(DupDetector dd, String name) throws JsonProcessingException {\n         if (dd.isDup(name)) {\n-            throw new JsonParseException(\"Duplicate field '\"+name+\"'\", dd.findLocation());\n-        }\n-    }\n-    \n+            Object src = dd.getSource();\n+            throw new JsonParseException(((src instanceof JsonGenerator) ? ((JsonParser) src) : null),\n+                    \"Duplicate field '\"+name+\"'\");\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Overridden standard methods\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n     }\n \n     private final void _checkDup(DupDetector dd, String name) throws JsonProcessingException {\n-        if (dd.isDup(name)) { throw new JsonGenerationException(\"Duplicate field '\"+name+\"'\"); }\n+        if (dd.isDup(name)) {\n+            Object src = dd.getSource();\n+            throw new JsonGenerationException(\"Duplicate field '\"+name+\"'\",\n+                    ((src instanceof JsonGenerator) ? ((JsonGenerator) src) : null));\n+        }\n     }\n     \n     public int writeValue() {\n--- a/src/test/java/com/fasterxml/jackson/core/TestExceptions.java\n+++ b/src/test/java/com/fasterxml/jackson/core/TestExceptions.java\n package com.fasterxml.jackson.core;\n \n+import java.io.StringWriter;\n \n public class TestExceptions extends BaseTest\n {\n-    // For [Issue#10]\n+    private final JsonFactory JSON_F = new JsonFactory();\n+    \n+    // For [core#10]\n     public void testOriginalMesssage()\n     {\n-        JsonProcessingException exc = new JsonParseException(\"Foobar\", JsonLocation.NA);\n+        JsonProcessingException exc = new JsonParseException(null, \"Foobar\", JsonLocation.NA);\n         String msg = exc.getMessage();\n         String orig = exc.getOriginalMessage();\n         assertEquals(\"Foobar\", orig);\n         assertTrue(msg.length() > orig.length());\n     }\n+\n+    // [core#198]\n+    public void testAccessToParser() throws Exception\n+    {\n+        JsonParser p = JSON_F.createParser(\"{}\");\n+        assertToken(JsonToken.START_OBJECT, p.nextToken());\n+        JsonParseException e = new JsonParseException(p, \"Test!\");\n+        assertSame(p, e.getProcessor());\n+        assertEquals(\"Test!\", e.getOriginalMessage());\n+        JsonLocation loc = e.getLocation();\n+        assertNotNull(loc);\n+        assertEquals(2, loc.getColumnNr());\n+        assertEquals(1, loc.getLineNr());\n+        p.close();\n+    }\n+\n+    // [core#198]\n+    public void testAccessToGenerator() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator g = JSON_F.createGenerator(w);\n+        g.writeStartObject();\n+        JsonGenerationException e = new JsonGenerationException(\"Test!\", g);\n+        assertSame(g, e.getProcessor());\n+        assertEquals(\"Test!\", e.getOriginalMessage());\n+        g.close();\n+    }\n }", "timestamp": 1439877176, "metainfo": ""}