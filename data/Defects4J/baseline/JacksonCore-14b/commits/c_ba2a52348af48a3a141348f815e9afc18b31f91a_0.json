{"sha": "ba2a52348af48a3a141348f815e9afc18b31f91a", "log": "Improve low-level testing a bit, to guard against regression (like one that exists now)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n package com.fasterxml.jackson.core.json;\n \n+import java.io.StringReader;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n public class TestNumericValues\n     extends com.fasterxml.jackson.test.BaseTest\n {\n+    private final JsonFactory FACTORY = new JsonFactory();\n+    \n     public void testSimpleBoolean() throws Exception\n     {\n-        JsonParser jp = createParserUsingReader(\"[ true ]\");\n+        JsonParser jp = FACTORY.createParser(\"[ true ]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_TRUE, jp.nextToken());\n         assertEquals(true, jp.getBooleanValue());\n         jp.close();\n     }\n \n+    public void testSimpleShort() throws Exception\n+    {\n+        final String NUM = \"-12.9\";\n+        JsonParser jp = FACTORY.createParser(NUM);\n+        assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n+        assertEquals(JsonParser.NumberType.DOUBLE, jp.getNumberType());\n+        assertEquals(NUM, jp.getText());\n+        assertEquals(NUM, String.valueOf(jp.getDoubleValue()));\n+        jp.close();\n+    }\n+    \n     public void testSimpleInt() throws Exception\n     {\n         int EXP_I = 1234;\n \n-        JsonParser jp = createParserUsingReader(\"[ \"+EXP_I+\" ]\");\n+        JsonParser jp = FACTORY.createParser(\"[ \"+EXP_I+\" ]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         assertEquals(JsonParser.NumberType.INT, jp.getNumberType());\n             String input = \"[ \"+Integer.MAX_VALUE+\",\"+Integer.MIN_VALUE+\" ]\";\n             JsonParser jp;\n             if (i == 0) {\n-                jp = createParserUsingReader(input);                \n-            } else {\n-                jp = this.createParserUsingStream(input, \"UTF-8\");\n+                jp = FACTORY.createParser(input);                \n+            } else {\n+                jp = createParserUsingStream(input, \"UTF-8\");\n             }\n             assertToken(JsonToken.START_ARRAY, jp.nextToken());\n             assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n     {\n         long EXP_L = 12345678907L;\n \n-        JsonParser jp = createParserUsingReader(\"[ \"+EXP_L+\" ]\");\n+        JsonParser jp = FACTORY.createParser(\"[ \"+EXP_L+\" ]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         // beyond int, should be long\n             String input = \"[ \"+Long.MAX_VALUE+\",\"+Long.MIN_VALUE+\",\"+aboveMaxInt+\", \"+belowMinInt+\" ]\";\n             JsonParser jp;\n             if (i == 0) {\n-                jp = createParserUsingReader(input);                \n+                jp = FACTORY.createParser(input);                \n             } else {\n                 jp = this.createParserUsingStream(input, \"UTF-8\");\n             }\n             String input = \"[ \"+small+\"  ,  \"+big+\"]\";\n             JsonParser jp;\n             if (i == 0) {\n-                jp = createParserUsingReader(input);                \n+                jp = FACTORY.createParser(input);                \n             } else {\n                 jp = this.createParserUsingStream(input, \"UTF-8\");\n             }\n         for (int i = 0; i < 2; ++i) {\n             JsonParser jp;\n             if (i == 0) {\n-                jp = createParserUsingReader(NUMBER_STR);                \n+                jp = FACTORY.createParser(NUMBER_STR);                \n             } else {\n                 jp = this.createParserUsingStream(NUMBER_STR, \"UTF-8\");\n             }\n         }\n     }\n     \n-    public void testSimpleDouble()\n-        throws Exception\n+    public void testSimpleDouble() throws Exception\n     {\n         final String[] INPUTS = new String[] {\n-            \"1234.00\", \"2.1101567E-16\", \"1.0e5\", \"2.5e+5\", \"9e4\", \"-12e-3\", \"0.25\"\n+            \"1234.00\", \"2.1101567E-16\", \"1.0e5\", \"2.5e+5\", \"9e4\", \"-12e-3\", \"0.25\",\n+            \"-0.5\", \"-999.0\"\n         };\n         for (int input = 0; input < 2; ++input) {\n             for (int i = 0; i < INPUTS.length; ++i) {\n \n-                /* Testing double is more difficult, given the rounding\n-                 * errors and such. But let's try anyways.\n-                 */\n+                // First in array\n+                \n                 String STR = INPUTS[i];\n                 double EXP_D = Double.parseDouble(STR);\n                 String DOC = \"[\"+STR+\"]\";\n                 if (input == 0) {\n                     jp = createParserUsingStream(DOC, \"UTF-8\");\n                 } else {\n-                    jp = createParserUsingReader(DOC);\n+                    jp = FACTORY.createParser(DOC);\n                 }\n                 assertToken(JsonToken.START_ARRAY, jp.nextToken());\n                 assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n                 assertEquals(STR, jp.getText());\n                 assertEquals(EXP_D, jp.getDoubleValue());\n                 assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+                assertNull(jp.nextToken());\n+                jp.close();\n+\n+                // then outside\n+                if (input == 0) {\n+                    jp = createParserUsingStream(STR, \"UTF-8\");\n+                } else {\n+                    jp = FACTORY.createParser(STR);\n+                }\n+                assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n+                assertEquals(STR, jp.getText());\n+                assertNull(jp.nextToken());\n                 jp.close();\n             }\n         }\n             if (input == 0) {\n                 jp = createParserUsingStream(DOC, \"UTF-8\");\n             } else {\n-                jp = createParserUsingReader(DOC);\n+                jp = FACTORY.createParser(DOC);\n             }\n \n             assertToken(JsonToken.START_ARRAY, jp.nextToken());\n             if (input == 0) {\n                 jp = createParserUsingStream(DOC_BELOW, \"UTF-8\");\n             } else {\n-                jp = createParserUsingReader(DOC_BELOW);\n+                jp = FACTORY.createParser(DOC_BELOW);\n             }\n             jp.nextToken();\n             try {\n             if (input == 0) {\n                 jp = createParserUsingStream(DOC, \"UTF-8\");\n             } else {\n-                jp = createParserUsingReader(DOC);\n+                jp = FACTORY.createParser(DOC);\n             }\n \n             assertToken(JsonToken.START_ARRAY, jp.nextToken());\n     public void testInvalidBooleanAccess()\n         throws Exception\n     {\n-        JsonParser jp = createParserUsingReader(\"[ \\\"abc\\\" ]\");\n+        JsonParser jp = FACTORY.createParser(\"[ \\\"abc\\\" ]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         try {\n \n     public void testInvalidIntAccess() throws Exception\n     {\n-        JsonParser jp = createParserUsingReader(\"[ \\\"abc\\\" ]\");\n+        JsonParser jp = FACTORY.createParser(\"[ \\\"abc\\\" ]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         try {", "timestamp": 1399520845, "metainfo": ""}