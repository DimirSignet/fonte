{"sha": "d44510182ca3542bcf7bfd2312db13125b51d729", "log": "undo previous minor change; no perf benefit, and suggestion it might lead to slight degradation (1-2%)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n             return _nextTokenNotInObject(i);\n         }\n         // So first parse the field name itself:\n-        String n = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n-\n+        String n = _parseName(i);\n         _parsingContext.setCurrentName(n);\n         _currToken = JsonToken.FIELD_NAME;\n \n                 }\n             }\n         }\n-        return _isNextTokenNameMaybe(i, str.getValue());\n+        return _isNextTokenNameMaybe(i, str);\n     }\n \n     @Override\n             return null;\n         }\n \n-        final String nameStr = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n+        final String nameStr = _parseName(i);\n         _parsingContext.setCurrentName(nameStr);\n         _currToken = JsonToken.FIELD_NAME;\n \n         _inputPtr = ptr-1;\n         return _skipColon2(false);\n     }\n-\n+    \n     private final void _isNextTokenNameYes(int i) throws IOException\n     {\n         _currToken = JsonToken.FIELD_NAME;\n         }\n         _nextToken = _handleUnexpectedValue(i);\n     }\n-\n-    private final boolean _isNextTokenNameMaybe(int i, String str) throws IOException\n+    \n+    \n+    private final boolean _isNextTokenNameMaybe(int i, SerializableString str) throws IOException\n     {\n         // // // and this is back to standard nextToken()\n \n-        String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n-        _parsingContext.setCurrentName(name);\n+        String n = _parseName(i);\n+        _parsingContext.setCurrentName(n);\n+        final boolean match = n.equals(str.getValue());\n         _currToken = JsonToken.FIELD_NAME;\n         i = _skipColon();\n \n         if (i == INT_QUOTE) {\n             _tokenIncomplete = true;\n             _nextToken = JsonToken.VALUE_STRING;\n-            return name.equals(str);\n+            return match;\n         }\n         JsonToken t;\n \n             t = _handleUnexpectedValue(i);\n         }\n         _nextToken = t;\n-        return name.equals(str);\n+        return match;\n     }\n \n     @Override\n     /**********************************************************\n      */\n     \n-    protected final String _parseName() throws IOException\n-    {\n+    protected final String _parseName(int i) throws IOException\n+    {\n+        if (i != INT_QUOTE) {\n+            return _handleOddName(i);\n+        }\n         // First: can we optimize out bounds checks?\n         if ((_inputPtr + 13) > _inputEnd) { // Need up to 12 chars, plus one trailing (quote)\n             return slowParseName();\n         int q = input[_inputPtr++] & 0xFF;\n \n         if (codes[q] == 0) {\n-            int i = input[_inputPtr++] & 0xFF;\n+            i = input[_inputPtr++] & 0xFF;\n             if (codes[i] == 0) {\n                 q = (q << 8) | i;\n                 i = input[_inputPtr++] & 0xFF;", "timestamp": 1439523828, "metainfo": ""}