{"sha": "2e262b903c99f2884fc706ee797aaf35205dbf96", "log": "Baseline work for #196, generic support for format-specific features", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/core/FormatFeature.java\n+package com.fasterxml.jackson.core;\n+\n+/**\n+ * Marker interface that is to be implemented by data format - specific features.\n+ * Interface used since Java Enums can not extend classes or other Enums, but\n+ * they can implement interfaces; and as such we may be able to use limited\n+ * amount of generic functionality.\n+ *<p>\n+ * Note that this type is only implemented by non-JSON formats:\n+ * types {@link JsonParser.Feature} and {@link JsonGenerator.Feature} do NOT\n+ * implement it. This is to make it easier to avoid ambiguity with method\n+ * calls.\n+ * \n+ * @since 2.6 (to be fully used in 2.7 and beyond)\n+ */\n+public interface FormatFeature\n+{\n+    /**\n+     * Accessor for checking whether this feature is enabled by default.\n+     */\n+    public boolean enabledByDefault();\n+    \n+    /**\n+     * Returns bit mask for this feature instance; must be a single bit,\n+     * that is of form <code>(1 << N)</code>\n+     */\n+    public int getMask();\n+\n+    /**\n+     * Convenience method for checking whether feature is enabled in given bitmask\n+     */\n+    public boolean enabledIn(int flags);\n+}\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n      * @since 2.4\n      */\n     public boolean canUseCharArrays() { return true; }\n-    \n-    /*\n-    /**********************************************************\n-    /* Format detection functionality (since 1.8)\n+\n+    /**\n+     * Method for accessing kind of {@link FormatFeature} that a parser\n+     * {@link JsonParser} produced by this factory would accept, if any;\n+     * <code>null</code> returned if none.\n+     *\n+     * @since 2.6\n+     */\n+    public Class<? extends FormatFeature> getFormatReadFeatureType() {\n+        return null;\n+    }\n+\n+    /**\n+     * Method for accessing kind of {@link FormatFeature} that a parser\n+     * {@link JsonGenerator} produced by this factory would accept, if any;\n+     * <code>null</code> returned if none.\n+     *\n+     * @since 2.6\n+     */\n+    public Class<? extends FormatFeature> getFormatWriteFeatureType() {\n+        return null;\n+    }\n+    /*\n+    /**********************************************************\n+    /* Format detection functionality\n     /**********************************************************\n      */\n \n         return null;\n     }\n \n+    /**\n+     * Convenience method for trying to determine whether input via given accessor\n+     * is of format type supported by this factory.\n+     */\n     public MatchStrength hasFormat(InputAccessor acc) throws IOException\n     {\n         // since we can't keep this abstract, only implement for \"vanilla\" instance\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n \n \n     /**\n-     * Bulk access method for getting state of all standard {@link Feature}s.\n-     * \n-     * @return Bit mask that defines current states of all standard {@link Feature}s.\n+     * Bulk access method for getting state of all standard (non-dataformat-specific)\n+     * {@link JsonGenerator.Feature}s.\n+     * \n+     * @return Bit mask that defines current states of all standard {@link JsonGenerator.Feature}s.\n      * \n      * @since 2.3\n      */\n      */\n     public abstract JsonGenerator setFeatureMask(int values);\n \n+    /**\n+     * Bulk set method for (re)setting states of features specified by <code>mask</code>.\n+     * Functionally equivalent to\n+     *<code>\n+     *    int oldState = getFeatureMask();\n+     *    int newState = (oldState & ~mask) | (values & mask);\n+     *    setFeatureMask(newState);\n+     *</code>\n+     * \n+     * @param values Bit mask of set/clear state for features to change\n+     * @param mask Bit mask of features to change\n+     * \n+     * @since 2.6\n+     */\n+    public JsonGenerator overrideStdFeatures(int values, int mask) {\n+        int oldState = getFeatureMask();\n+        int newState = (oldState & ~mask) | (values & mask);\n+        return setFeatureMask(newState);\n+    }\n+\n+    /**\n+     * Bulk access method for getting state of all {@link FormatFeature}s, format-specific\n+     * on/off configuration settings.\n+     * \n+     * @return Bit mask that defines current states of all standard {@link FormatFeature}s.\n+     * \n+     * @since 2.6\n+     */\n+    public int getFormatFeatures() {\n+        return 0;\n+    }\n+    \n+    /**\n+     * Bulk set method for (re)setting states of {@link FormatFeature}s,\n+     * by specifying values (set / clear) along with a mask, to determine\n+     * which features to change, if any.\n+     *<p>\n+     * Default implementation will simply throw an exception to indicate that\n+     * the generator implementation does not support any {@link FormatFeature}s.\n+     * \n+     * @param values Bit mask of set/clear state for features to change\n+     * @param mask Bit mask of features to change\n+     * \n+     * @since 2.6\n+     */\n+    public JsonGenerator overrideFormatFeatures(int values, int mask) {\n+        throw new IllegalArgumentException(\"No FormatFeatures defined for generator of type \"+getClass().getName());\n+        /*\n+        int oldState = getFeatureMask();\n+        int newState = (oldState & ~mask) | (values & mask);\n+        return setFeatureMask(newState);\n+        */\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Public API, Schema configuration\n      *\n      * @since 2.6\n      */\n+    public abstract int getOutputBuffered();\n+    /*\n     public int getOutputBuffered() {\n         return -1;\n     }\n+    */\n \n     /**\n      * Helper method, usually equivalent to:\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n         _features = mask;\n         return this;\n     }\n-    \n+\n+    /**\n+     * Bulk set method for (re)setting states of features specified by <code>mask</code>.\n+     * Functionally equivalent to\n+     *<code>\n+     *    int oldState = getFeatureMask();\n+     *    int newState = (oldState & ~mask) | (values & mask);\n+     *    setFeatureMask(newState);\n+     *</code>\n+     * \n+     * @param values Bit mask of set/clear state for features to change\n+     * @param mask Bit mask of features to change\n+     * \n+     * @since 2.6\n+     */\n+    public JsonParser overrideStdFeatures(int values, int mask) {\n+        _features = (_features & ~mask) | (values & mask);\n+        return this;\n+    }\n+\n+    /**\n+     * Bulk access method for getting state of all {@link FormatFeature}s, format-specific\n+     * on/off configuration settings.\n+     * \n+     * @return Bit mask that defines current states of all standard {@link FormatFeature}s.\n+     * \n+     * @since 2.6\n+     */\n+    public int getFormatFeatures() {\n+        return 0;\n+    }\n+    \n+    /**\n+     * Bulk set method for (re)setting states of {@link FormatFeature}s,\n+     * by specifying values (set / clear) along with a mask, to determine\n+     * which features to change, if any.\n+     *<p>\n+     * Default implementation will simply throw an exception to indicate that\n+     * the generator implementation does not support any {@link FormatFeature}s.\n+     * \n+     * @param values Bit mask of set/clear state for features to change\n+     * @param mask Bit mask of features to change\n+     * \n+     * @since 2.6\n+     */\n+    public JsonParser overrideFormatFeatures(int values, int mask) {\n+        throw new IllegalArgumentException(\"No FormatFeatures defined for parser of type \"+getClass().getName());\n+        /*\n+        _formatFeatures = (_formatFeatures & ~mask) | (values & mask);\n+        */\n+    }\n+\n     /*\n     /**********************************************************\n     /* Public API, traversal\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n     }\n \n     /**\n-     * Method used by {@link PackageVersion} to decode version injected by Maven build.\n+     * Method used by <code>PackageVersion</code> classes to decode version injected by Maven build.\n      */\n     public static Version parseVersion(String s, String groupId, String artifactId)\n     {", "timestamp": 1432773137, "metainfo": ""}