{"sha": "455face52397dcc6da6de894418fceb80ade6982", "log": "Allow to configure line endings and indentation used in the DefaultPrettyPrinter.", "commit": "\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java\n+package com.fasterxml.jackson.core.util;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonGenerationException;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+\n+/**\n+ * Default linefeed-based indenter uses system-specific linefeeds and\n+ * 2 spaces for indentation per level.\n+ */\n+public class DefaultIndenter\n+    extends DefaultPrettyPrinter.NopIndenter\n+{\n+    public final static String SYS_LF;\n+    static {\n+        String lf;\n+        try {\n+            lf = System.getProperty(\"line.separator\");\n+        } catch (Throwable t) {\n+            lf = \"\\n\"; // fallback when security manager denies access\n+        }\n+        SYS_LF = lf;\n+    }\n+\n+    public static final DefaultIndenter SYSTEM_LINEFEED_INSTANCE = new DefaultIndenter(\"  \", SYS_LF);\n+\n+    private final static int INDENT_LEVELS = 64;\n+    private final char[] indents;\n+    private final int charsPerLevel;\n+    private final String eol;\n+\n+    /** Create an indenter which uses the <code>indent</code> string to indent one level\n+     *  and the <code>eol</code> string to separate lines. */\n+    public DefaultIndenter(String indent, String eol)\n+    {\n+        charsPerLevel = indent.length();\n+\n+        this.indents = new char[indent.length() * INDENT_LEVELS];\n+        int offset = 0;\n+        for (int i=0; i<INDENT_LEVELS; i++) {\n+            indent.getChars(0, indent.length(), this.indents, offset);\n+            offset += indent.length();\n+        }\n+\n+        this.eol = eol;\n+    }\n+\n+    @Override\n+    public boolean isInline() { return false; }\n+\n+    @Override\n+    public void writeIndentation(JsonGenerator jg, int level)\n+        throws IOException, JsonGenerationException\n+    {\n+        jg.writeRaw(eol);\n+        if (level > 0) { // should we err on negative values (as there's some flaw?)\n+            level *= charsPerLevel;\n+            while (level > indents.length) { // should never happen but...\n+                jg.writeRaw(indents, 0, indents.length); \n+                level -= indents.length;\n+            }\n+            jg.writeRaw(indents, 0, level);\n+        }\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n      * system-specific linefeeds, and 2 spaces per level (as opposed to,\n      * say, single tabs)\n      */\n-    protected Indenter _objectIndenter = Lf2SpacesIndenter.instance;\n+    protected Indenter _objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;\n \n     /**\n      * String printed between root-level values, if any.\n         @Override\n         public boolean isInline() { return true; }\n     }\n-\n-    /**\n-     * Default linefeed-based indenter uses system-specific linefeeds and\n-     * 2 spaces for indentation per level.\n-     */\n-    public static class Lf2SpacesIndenter extends NopIndenter\n-    {\n-        private final static String SYS_LF;\n-        static {\n-            String lf = null;\n-            try {\n-                lf = System.getProperty(\"line.separator\");\n-            } catch (Throwable t) { } // access exception?\n-            SYS_LF = (lf == null) ? \"\\n\" : lf;\n-        }\n-\n-        final static int SPACE_COUNT = 64;\n-        final static char[] SPACES = new char[SPACE_COUNT];\n-        static {\n-            Arrays.fill(SPACES, ' ');\n-        }\n-\n-        @SuppressWarnings(\"hiding\")\n-        public static final Lf2SpacesIndenter instance = new Lf2SpacesIndenter();\n-\n-        /**\n-         * Linefeed used; default value is the platform-specific linefeed.\n-         */\n-        protected final String _lf;\n-\n-        public Lf2SpacesIndenter() { this(SYS_LF); }\n-        \n-        /**\n-         * @since 2.3\n-         */\n-        public Lf2SpacesIndenter(String lf) {\n-            _lf = lf;\n-        }\n-\n-        /**\n-         * \"Mutant factory\" method that will return an instance that uses\n-         * specified String as linefeed.\n-         * \n-         * @since 2.3\n-         */\n-        public Lf2SpacesIndenter withLinefeed(String lf)\n-        {\n-            if (lf.equals(_lf)) {\n-                return this;\n-            }\n-            return new Lf2SpacesIndenter(lf);\n-        }\n-        \n-        @Override\n-        public boolean isInline() { return false; }\n-\n-        @Override\n-        public void writeIndentation(JsonGenerator jg, int level)\n-            throws IOException, JsonGenerationException\n-        {\n-            jg.writeRaw(_lf);\n-            if (level > 0) { // should we err on negative values (as there's some flaw?)\n-                level += level; // 2 spaces per level\n-                while (level > SPACE_COUNT) { // should never happen but...\n-                    jg.writeRaw(SPACES, 0, SPACE_COUNT); \n-                    level -= SPACES.length;\n-                }\n-                jg.writeRaw(SPACES, 0, level);\n-            }\n-        }\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestDefaultPrettyPrinter.java\n+package com.fasterxml.jackson.core.util;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+import org.junit.Test;\n+\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.PrettyPrinter;\n+\n+public class TestDefaultPrettyPrinter\n+{\n+    @Test\n+    public void testSystemLinefeed() throws IOException\n+    {\n+        PrettyPrinter pp = new DefaultPrettyPrinter();\n+        String LF = System.getProperty(\"line.separator\");\n+        assertEquals(\n+            \"{\" + LF +\n+            \"  \\\"name\\\" : \\\"John Doe\\\",\" + LF +\n+            \"  \\\"age\\\" : 3.14\" + LF +\n+            \"}\", _printTestData(pp));\n+    }\n+\n+    @Test\n+    public void testUnixLinefeed() throws IOException\n+    {\n+        PrettyPrinter pp = new DefaultPrettyPrinter()\n+                .withObjectIndenter(new DefaultIndenter(\"  \", \"\\n\"));\n+        assertEquals(\n+            \"{\\n\" +\n+            \"  \\\"name\\\" : \\\"John Doe\\\",\\n\" +\n+            \"  \\\"age\\\" : 3.14\\n\" +\n+            \"}\", _printTestData(pp));\n+    }\n+    \n+    @Test\n+    public void testWindowsLinefeed() throws IOException\n+    {\n+        PrettyPrinter pp = new DefaultPrettyPrinter()\n+        .withObjectIndenter(new DefaultIndenter(\"  \", \"\\r\\n\"));\n+        assertEquals(\n+            \"{\\r\\n\" +\n+            \"  \\\"name\\\" : \\\"John Doe\\\",\\r\\n\" +\n+            \"  \\\"age\\\" : 3.14\\r\\n\" +\n+            \"}\", _printTestData(pp));\n+    }\n+    \n+    @Test\n+    public void testTabIndent() throws IOException\n+    {\n+        PrettyPrinter pp = new DefaultPrettyPrinter()\n+        .withObjectIndenter(new DefaultIndenter(\"\\t\", \"\\n\"));\n+        assertEquals(\n+            \"{\\n\" +\n+            \"\\t\\\"name\\\" : \\\"John Doe\\\",\\n\" +\n+            \"\\t\\\"age\\\" : 3.14\\n\" +\n+            \"}\", _printTestData(pp));\n+    }\n+\n+    private String _printTestData(PrettyPrinter pp) throws IOException\n+    {\n+        StringWriter sw = new StringWriter();\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n+        gen.setPrettyPrinter(pp);\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"name\");\n+        gen.writeString(\"John Doe\");\n+        gen.writeFieldName(\"age\");\n+        gen.writeNumber(3.14);\n+        gen.writeEndObject();\n+        gen.close();\n+        return sw.toString();\n+    }\n+}", "timestamp": 1415914436, "metainfo": ""}