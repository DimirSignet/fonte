{"sha": "3357e8f6802578f842d3f4d554ad4af2a2041a3c", "log": "Complete minor tweaks for char-backed symbol table, more even distribution across tests", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n     public int _hashToIndex(int rawHash) {\n         // doing these seems to help a bit\n         rawHash += (rawHash >>> 15);\n-//        rawHash ^= (rawHash >> 5);\n-        rawHash += (rawHash << 3);\n+        rawHash ^= (rawHash << 7);\n+        rawHash += (rawHash >>> 3);\n         return (rawHash & _indexMask);\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n         // holy guacamoley... there are way too many. 31 gives 3567 (!), 33 gives 2747\n         // ... at least before shuffling. Shuffling helps quite a lot, so:\n         \n-        assertEquals(2691, symbols.collisionCount());\n-\n-        assertEquals(4, symbols.maxCollisionLength());\n+        assertEquals(3431, symbols.collisionCount());\n+\n+        assertEquals(6, symbols.maxCollisionLength());\n     }\n \n     // Test for verifying stability of hashCode, wrt collisions, using\n         assertEquals(65536, symbols.bucketCount());\n \n         // collision count rather high, but has to do\n-        assertEquals(14408, symbols.collisionCount());\n+        assertEquals(7127, symbols.collisionCount());\n         // as well as collision counts\n-        assertEquals(5, symbols.maxCollisionLength());\n+        assertEquals(4, symbols.maxCollisionLength());\n     }\n \n     // [core#187]: unexpectedly high number of collisions for straight numbers\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java\n         assertEquals(13, symbols.size());\n         assertEquals(64, symbols.bucketCount());\n \n-        /* 30-Mar-2015, tatu: It is possible to tweak things to eliminate the\n-         *    last collision, but difficult to make it overall beneficial\n-         *    with other collision rate tests.\n-         */\n-        \n-        // collision count rather high, but has to do\n-        assertEquals(1, symbols.collisionCount());\n-        // as well as collision counts\n-        assertEquals(1, symbols.maxCollisionLength());\n+        // usually get 1 collision, but sometimes get lucky with 0; other times less so with 2\n+        // (with differing shifting for hash etc)\n+        assertEquals(0, symbols.collisionCount());\n+        assertEquals(0, symbols.maxCollisionLength());\n     }\n }", "timestamp": 1427737267, "metainfo": ""}