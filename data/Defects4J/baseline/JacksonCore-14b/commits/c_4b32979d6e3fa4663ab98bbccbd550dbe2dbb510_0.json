{"sha": "4b32979d6e3fa4663ab98bbccbd550dbe2dbb510", "log": "Merge pull request #249 from sammyhk/master  #248 - fix VerisonUti.versionFor() unintended to return null instead \u2026", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n      */\n     public static Version versionFor(Class<?> cls)\n     {\n-        return packageVersionFor(cls);\n+        Version version = packageVersionFor(cls);\n+        return version == null ? Version.unknownVersion() : version;\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java\n     public void testPackageVersionMatches() {\n         assertEquals(PackageVersion.VERSION, VersionUtil.versionFor(UTF8JsonGenerator.class));\n     }\n+\n+    public void testVersionForUnknownVersion() {\n+        // expecting return version.unknownVersion() instead of null\n+        assertEquals(Version.unknownVersion(), VersionUtil.versionFor(TestVersionUtil.class));\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n \n     // No embedded objects with base impl...\n     @Override public Object getEmbeddedObject() throws IOException { return null; }\n-    \n+\n+    @SuppressWarnings(\"resource\")\n+    @Override // since 2.7\n+    public byte[] getBinaryValue(Base64Variant variant) throws IOException\n+    {\n+        if (_binaryValue == null) {\n+            if (_currToken != JsonToken.VALUE_STRING) {\n+                _reportError(\"Current token (\"+_currToken+\") not VALUE_STRING, can not access as binary\");\n+            }\n+            ByteArrayBuilder builder = _getByteArrayBuilder();\n+            _decodeBase64(getText(), builder, variant);\n+            _binaryValue = builder.toByteArray();\n+        }\n+        return _binaryValue;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Public low-level accessors\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n     /**\n      * Loads version information by introspecting a class named\n      * \"PackageVersion\" in the same package as the given class.\n-     *\n+     *<p>\n      * If the class could not be found or does not have a public\n      * static Version field named \"VERSION\", returns null.\n      */\n     public static Version packageVersionFor(Class<?> cls)\n     {\n+        Version v = null;\n         try {\n             String versionInfoClassName = cls.getPackage().getName() + \".PackageVersion\";\n             Class<?> vClass = Class.forName(versionInfoClassName, true, cls.getClassLoader());\n             // However, if class exists, it better work correctly, no swallowing exceptions\n             try {\n-                return ((Versioned) vClass.newInstance()).version();\n+                v = ((Versioned) vClass.newInstance()).version();\n             } catch (Exception e) {\n                 throw new IllegalArgumentException(\"Failed to get Versioned out of \"+vClass);\n             }\n         } catch (Exception e) { // ok to be missing (not good but acceptable)\n-            return null;\n+            ;\n         }\n+        return (v == null) ? Version.unknownVersion() : v;\n     }\n \n     /**\n                     (parts.length > 3) ? parts[3] : null,\n                     groupId, artifactId);\n         }\n-        return null;\n+        return Version.unknownVersion();\n     }\n \n     protected static int parseVersionPart(String s) {", "timestamp": 1453780979, "metainfo": ""}