{"sha": "29e8dc34bd00b381d53d2c9e2281573a7b181964", "log": "Incremental work for filtering generation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n         \n         _itemFilter = state;\n         if (state == TokenFilter.INCLUDE_ALL) {\n-            _checkParentPath();\n+            _checkPropertyParentPath();\n         }\n     }\n \n         state = _itemFilter.includeProperty(name.getValue());\n         _itemFilter = state;\n         if (state == TokenFilter.INCLUDE_ALL) {\n-            _checkParentPath();\n+            _checkPropertyParentPath();\n         }\n     }\n \n         }\n     }\n \n+    /**\n+     * Specialized variant of {@link #_checkParentPath} used when checking\n+     * parent for a property name to be included with value: rules are slightly\n+     * different.\n+     */\n+    protected void _checkPropertyParentPath() throws IOException\n+    {\n+        ++_matchCount;\n+        if (_includePath) {\n+            _filterContext.writePath(delegate);\n+        } else {\n+            _filterContext.writeImmediatePath(delegate);\n+        }\n+\n+        // also: if no multiple matches desired, short-cut checks\n+        if (!_allowMultipleMatches) {\n+            // Mark parents as \"skip\" so that further check calls are not made\n+            _filterContext.skipParentChecks();\n+        }\n+    }\n+    \n     protected boolean _checkBinaryWrite() throws IOException\n     {\n         if (_itemFilter == null) {\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java\n  */\n public class TokenFilter\n {\n-    // Constants\n-\n-    /**\n-     * Value that indicates that the current token (and its children, if any)\n-     * should be (or is being) skipped and NOT to be passed on delegate.\n-     */\n-    public final static int FILTER_SKIP = 1;\n-\n-    /**\n-     * Value that indicates that it is not yet certain whether the current token\n-     * should or should not be included. If returned for leaf node it will\n-     * usually be taken to mean same as {@link #FILTER_SKIP}; for container nodes\n-     * and property names it means that traversal needs to check contents,\n-     * and inclusion will be based on those.\n-     */\n-    public final static int FILTER_CHECK = 2;\n-\n-    /**\n-     * Value that indicates that the current token (and its children, if any)\n-     * should be (or is being) included and to be passed on delegate.\n-     * As state for container states this means that the start token has been\n-     * passed, and matching end token must also be passed.\n-     */\n-    public final static int FILTER_INCLUDE = 3;\n \n     // // Marker values\n \n \n     /*\n     /**********************************************************\n+    /* Overrides\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public String toString() {\n+        if (this == INCLUDE_ALL) {\n+            return \"TokenFilter.INCLUDE_ALL\";\n+        }\n+        return super.toString();\n+    }\n+\n+    /*\n+    /**********************************************************\n     /* Other methods\n     /**********************************************************\n      */\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n             _startWritten = true;\n             if (_type == TYPE_OBJECT) {\n //System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n+                gen.writeStartObject();\n+                gen.writeFieldName(_currentName);\n+            } else if (_type == TYPE_ARRAY) {\n+                gen.writeStartArray();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Variant of {@link #writePath(JsonGenerator)} called when all we\n+     * need is immediately surrounding Object. Method typically called\n+     * when including a single property but not including full path\n+     * to root.\n+     */\n+    public void writeImmediatePath(JsonGenerator gen) throws IOException\n+    {\n+        if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {\n+            return;\n+        }\n+        if (_startWritten) {\n+            // even if Object started, need to start leaf-level name\n+            if (_type == TYPE_OBJECT) {\n+                gen.writeFieldName(_currentName);\n+            }\n+        } else {\n+            _startWritten = true;\n+            if (_type == TYPE_OBJECT) {\n                 gen.writeStartObject();\n                 gen.writeFieldName(_currentName);\n             } else if (_type == TYPE_ARRAY) {\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n \n     public void testSingleMatchFilteringWithPath() throws Exception\n     {\n-        // First, verify non-filtering\n         StringWriter w = new StringWriter();\n         JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new NameMatchFilter(\"value\"),\n \n     public void testSingleMatchFilteringWithoutPath() throws Exception\n     {\n-        // First, verify non-filtering\n         StringWriter w = new StringWriter();\n         JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new NameMatchFilter(\"value\"),\n         \n         _writeSimpleDoc(gen);\n         gen.close();\n-        assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), w.toString());\n+        /* Since properties MUST be contained within an Object, inclusion needs\n+         * to materialize surrounding Object too!\n+         */\n+        assertEquals(aposToQuotes(\"{'value':3}\"), w.toString());\n     }\n     \n     protected void _writeSimpleDoc(JsonGenerator gen) throws IOException", "timestamp": 1428470648, "metainfo": ""}