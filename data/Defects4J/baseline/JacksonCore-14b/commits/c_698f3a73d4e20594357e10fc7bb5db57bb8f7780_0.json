{"sha": "698f3a73d4e20594357e10fc7bb5db57bb8f7780", "log": "Fix #188", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n         if (_currToken == JsonToken.VALUE_STRING) {\n             return getText();\n         }\n+        if (_currToken == JsonToken.FIELD_NAME) {\n+            return getCurrentName();\n+        }\n         return getValueAsString(null);\n     }\n     \n     @Override\n     public String getValueAsString(String defaultValue) throws IOException {\n-        if (_currToken != JsonToken.VALUE_STRING) {\n-            if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n-                return defaultValue;\n-            }\n+        if (_currToken == JsonToken.VALUE_STRING) {\n+            return getText();\n+        }\n+        if (_currToken == JsonToken.FIELD_NAME) {\n+            return getCurrentName();\n+        }\n+        if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+            return defaultValue;\n         }\n         return getText();\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n             }\n             return _textBuffer.contentsAsString();\n         }\n+        if (_currToken == JsonToken.FIELD_NAME) {\n+            return getCurrentName();\n+        }\n         return super.getValueAsString(null);\n     }\n     \n                 _finishString(); // only strings can be incomplete\n             }\n             return _textBuffer.contentsAsString();\n+        }\n+        if (_currToken == JsonToken.FIELD_NAME) {\n+            return getCurrentName();\n         }\n         return super.getValueAsString(defValue);\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n             }\n             return _textBuffer.contentsAsString();\n         }\n+        if (_currToken == JsonToken.FIELD_NAME) {\n+            return getCurrentName();\n+        }\n         return super.getValueAsString(null);\n     }\n     \n                 return _finishAndReturnString(); // only strings can be incomplete\n             }\n             return _textBuffer.contentsAsString();\n+        }\n+        if (_currToken == JsonToken.FIELD_NAME) {\n+            return getCurrentName();\n         }\n         return super.getValueAsString(defValue);\n     }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n package com.fasterxml.jackson.core.json;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.util.JsonParserDelegate;\n \n import java.io.*;\n import java.net.URL;\n         }\n         jp.close();\n     }\n+\n+    public void testGetValueAsTextBytes() throws Exception\n+    {\n+        JsonFactory f = new JsonFactory();\n+        _testGetValueAsText(f, true, false);\n+        _testGetValueAsText(f, true, true);\n+    }\n+\n+    public void testGetValueAsTextChars() throws Exception\n+    {\n+        JsonFactory f = new JsonFactory();\n+        _testGetValueAsText(f, false, false);\n+        _testGetValueAsText(f, false, true);\n+    }\n     \n+    @SuppressWarnings(\"resource\")\n+    private void _testGetValueAsText(JsonFactory f,\n+            boolean useBytes, boolean delegate) throws Exception\n+    {\n+        String JSON = \"{\\\"a\\\":1,\\\"b\\\":true,\\\"c\\\":null,\\\"d\\\":\\\"foo\\\"}\";\n+        JsonParser p = useBytes ? f.createParser(JSON.getBytes(\"UTF-8\"))\n+                : f.createParser(JSON);\n+\n+        if (delegate) {\n+            p = new JsonParserDelegate(p);\n+        }\n+        \n+        assertToken(JsonToken.START_OBJECT, p.nextToken());\n+        assertNull(p.getValueAsString());\n+\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(\"a\", p.getText());\n+        assertEquals(\"a\", p.getValueAsString());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+        assertEquals(\"1\", p.getValueAsString());\n+\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(\"b\", p.getValueAsString());\n+        assertToken(JsonToken.VALUE_TRUE, p.nextToken());\n+        assertEquals(\"true\", p.getValueAsString());\n+\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(\"c\", p.getValueAsString());\n+        assertToken(JsonToken.VALUE_NULL, p.nextToken());\n+        // null token returned as Java null, as per javadoc\n+        assertNull(p.getValueAsString());\n+\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(\"d\", p.getValueAsString());\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(\"foo\", p.getValueAsString());\n+\n+        assertToken(JsonToken.END_OBJECT, p.nextToken());\n+        assertNull(p.getValueAsString());\n+\n+        assertNull(p.nextToken());\n+        p.close();\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods", "timestamp": 1427761568, "metainfo": ""}