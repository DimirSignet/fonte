{"sha": "864e30a973560ecf51584096d0a4a81e54912f8a", "log": "demote '_decodeSurrogate()' as well", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n      *   if value output is NOT legal in current generator output state.\n      */\n     protected abstract void _verifyValueWrite(String typeMsg) throws IOException;\n+\n+    /*\n+    /**********************************************************\n+    /* UTF-8 related helper method(s)\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @since 2.5\n+     */\n+    protected final int _decodeSurrogate(int surr1, int surr2) throws IOException\n+    {\n+        // First is known to be valid, but how about the other?\n+        if (surr2 < SURR2_FIRST || surr2 > SURR2_LAST) {\n+            String msg = \"Incomplete surrogate pair: first char 0x\"+Integer.toHexString(surr1)+\", second 0x\"+Integer.toHexString(surr2);\n+            _reportError(msg);\n+        }\n+        int c = 0x10000 + ((surr1 - SURR1_FIRST) << 10) + (surr2 - SURR2_FIRST);\n+        return c;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n      * \n      * @throws IOException\n      */\n-    private final int _outputMultiByteChar(int ch, int outputPtr)\n-        throws IOException\n+    private final int _outputMultiByteChar(int ch, int outputPtr) throws IOException\n     {\n         byte[] bbuf = _outputBuffer;\n         if (ch >= SURR1_FIRST && ch <= SURR2_LAST) { // yes, outside of BMP; add an escape\n         }\n         return outputPtr;\n     }\n-\n-    protected final int _decodeSurrogate(int surr1, int surr2) throws IOException\n-    {\n-        // First is known to be valid, but how about the other?\n-        if (surr2 < SURR2_FIRST || surr2 > SURR2_LAST) {\n-            String msg = \"Incomplete surrogate pair: first char 0x\"+Integer.toHexString(surr1)+\", second 0x\"+Integer.toHexString(surr2);\n-            _reportError(msg);\n-        }\n-        int c = 0x10000 + ((surr1 - SURR1_FIRST) << 10) + (surr2 - SURR2_FIRST);\n-        return c;\n-    }\n     \n     private final void _writeNull() throws IOException\n     {", "timestamp": 1415740280, "metainfo": ""}