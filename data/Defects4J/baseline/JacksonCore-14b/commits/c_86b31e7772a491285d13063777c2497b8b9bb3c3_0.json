{"sha": "86b31e7772a491285d13063777c2497b8b9bb3c3", "log": "Improve error message for hash collisions, tune tertiary slot sizes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java\n     { // use same algorithm as multi-byte, tested to work well\n         int hash = q1 ^ _seed;\n         hash += (hash >>> 9);\n+        hash *= MULT3;\n+        hash += q2;\n         hash *= MULT;\n-        hash += q2;\n-        hash *= MULT2;\n         hash += (hash >>> 15);\n         hash ^= q3;\n         // 26-Mar-2015, tatu: As per two-quad case, a short shift seems to help more here\n \n     protected void reportTooManyCollisions()\n     {\n-        // First: do not fuzz about small symbol tables\n-        if (_hashSize <= 512) { // would have spill-over area of 64 entries\n+        // First: do not fuzz about small symbol tables; may get balanced by doubling up\n+        if (_hashSize <= 1024) { // would have spill-over area of 128 entries\n             return;\n         }\n         throw new IllegalStateException(\"Spill-over slots in symbol table with \"+_count\n                 +\" entries, hash area of \"+_hashSize+\" slots is now full (all \"\n-                +(_hashSize >> 3)+\" slots -- suspect a DoS attack based on hash collisions\");\n+                +(_hashSize >> 3)+\" slots -- suspect a DoS attack based on hash collisions.\"\n+                +\" You can disable the check via `JsonFactory.Feature.FAIL_ON_SYMBOL_HASH_OVERFLOW`\");\n     }\n \n     static int _calcTertiaryShift(int primarySlots)\n         if (tertSlots <= 256) { // buckets of 8 slots (up to 256 == 32 x 8)\n             return 5;\n         }\n-        if (tertSlots <= 2048) { // buckets of 16 slots (up to 1024 == 64 x 16)\n+        if (tertSlots <= 1024) { // buckets of 16 slots (up to 1024 == 64 x 16)\n             return 6;\n         }\n         // and biggest buckets have 32 slots\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n         \n         // fragile, but essential to verify low collision counts;\n         // anywhere between 70-80% primary matches\n-        assertEquals(8515, symbols.primaryCount());\n+        assertEquals(8524, symbols.primaryCount());\n         // secondary between 10-20%\n-        assertEquals(2525, symbols.secondaryCount());\n+        assertEquals(2534, symbols.secondaryCount());\n         // and most of remaining in tertiary\n-        assertEquals(960, symbols.tertiaryCount());\n+        assertEquals(942, symbols.tertiaryCount());\n         // so that spill-over is empty or close to\n         assertEquals(0, symbols.spilloverCount());\n     }\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java\n package com.fasterxml.jackson.core.sym;\n \n import java.io.IOException;\n-import java.nio.charset.Charset;\n \n import com.fasterxml.jackson.core.*;\n ", "timestamp": 1427739003, "metainfo": ""}