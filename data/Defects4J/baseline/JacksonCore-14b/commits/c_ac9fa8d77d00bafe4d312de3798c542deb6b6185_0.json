{"sha": "ac9fa8d77d00bafe4d312de3798c542deb6b6185", "log": "Fixes to array filtering with generator", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n \n     public TokenFilter getFilter() { return rootFilter; }\n \n+    public JsonStreamContext getFilterContext() {\n+        return _filterContext;\n+    }\n+    \n     /**\n      * Accessor for finding number of matches, where specific token and sub-tree\n      * starting (if structured type) are passed.\n \n     /*\n     /**********************************************************\n+    /* Public API, accessors\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public JsonStreamContext getOutputContext() {\n+        /* 11-Apr-2015, tatu: Choice is between pre- and post-filter context;\n+         *   let's expose post-filter context that correlates with the view\n+         *   of caller.\n+         */\n+        return _filterContext;\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Public API, write methods, structural\n     /**********************************************************\n      */\n             return;\n         }\n         // Ok; regular checking state then\n-        _itemFilter = _itemFilter.filterStartArray();\n+        _itemFilter = _filterContext.checkValue(_itemFilter);\n+        if (_itemFilter == null) {\n+            _filterContext = _filterContext.createChildArrayContext(null, false);\n+            return;\n+        }\n+        if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n+            _itemFilter = _itemFilter.filterStartArray();\n+        }\n         if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n-            // First: may need to re-create path\n             _checkParentPath();\n             _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);\n             delegate.writeStartArray();\n-        } else { // either skip (null), or check (non-null)\n+        } else {\n             _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);\n-        }\n-        if (_itemFilter != null) {\n-            _filterContext.markNeedsCloseCheck();\n+            if (_itemFilter != null) {\n+                _filterContext.markNeedsCloseCheck();\n+            }\n         }\n     }\n         \n             delegate.writeStartArray(size);\n             return;\n         }\n-\n-        TokenFilter state = _filterContext.checkValue(_itemFilter);\n-        if (state == null) {\n-            return;\n-        }\n-        if (state != TokenFilter.INCLUDE_ALL) {\n-            state = state.filterStartArray();\n-        }\n-        if (state == TokenFilter.INCLUDE_ALL) {\n-            _checkParentPath();\n-            _filterContext = _filterContext.createChildArrayContext(state, true);\n+        _itemFilter = _filterContext.checkValue(_itemFilter);\n+        if (_itemFilter == null) {\n+            _filterContext = _filterContext.createChildArrayContext(null, false);\n+            return;\n+        }\n+        if (_itemFilter != TokenFilter.INCLUDE_ALL) {\n+            _itemFilter = _itemFilter.filterStartArray();\n+        }\n+        if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n+            _checkParentPath();\n+            _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);\n             delegate.writeStartArray(size);\n         } else {\n-            _filterContext = _filterContext.createChildArrayContext(state, false);\n-        }\n-        if (state != null) {\n-            _filterContext.markNeedsCloseCheck();\n+            _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);\n+            if (_itemFilter != null) {\n+                _filterContext.markNeedsCloseCheck();\n+            }\n         }\n     }\n     \n     public void writeEndArray() throws IOException\n     {\n         _filterContext = _filterContext.closeArray(delegate);\n+\n         if (_filterContext != null) {\n             _itemFilter = _filterContext.getFilterState();\n         }\n             delegate.writeStartObject();\n         } else { // filter out\n             _filterContext = _filterContext.createChildObjectContext(state, false);\n-        }\n-        if (state != null) {\n-            _filterContext.markNeedsCloseCheck();\n+            if (state != null) {\n+                _filterContext.markNeedsCloseCheck();\n+            }\n         }\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n         _index = -1;\n         _startWritten = startWritten;\n         _needToWriteName = false;\n+        _needCloseCheck = false;\n     }\n \n     protected TokenFilterContext reset(int type,\n         _currentName = null;\n         _startWritten = startWritten;\n         _needToWriteName = false;\n+        _needCloseCheck = false;\n         return this;\n     }\n \n         if (_type == TYPE_OBJECT) {\n             return filter;\n         }\n+        // We increaase it first because at the beginning of array, value is -1\n         int ix = ++_index;\n         if (_type == TYPE_ARRAY) {\n             return filter.includeElement(ix);\n         if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {\n             return;\n         }\n-//System.err.println(\"writePath(\"+_type+\"), startWritten? \"+_startWritten+\", writeName? \"+_needToWriteName+\" at \"+toString());\n         if (_parent != null) {\n             _parent._writePath(gen);\n         }\n         if (_startWritten) {\n             // even if Object started, need to start leaf-level name\n             if (_needToWriteName) {\n-//System.err.println(\" write field name '\"+_currentName+\"'\");                \n                 gen.writeFieldName(_currentName);\n             }\n         } else {\n             _startWritten = true;\n             if (_type == TYPE_OBJECT) {\n-//System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n                 gen.writeStartObject();\n                 gen.writeFieldName(_currentName); // we know name must be written\n             } else if (_type == TYPE_ARRAY) {\n-//System.err.println(\" write array start\");\n                 gen.writeStartArray();\n             }\n         }\n     // // // Internally used abstract methods\n \n     protected void appendDesc(StringBuilder sb) {\n+        if (_parent != null) {\n+            _parent.appendDesc(sb);\n+        }\n         if (_type == TYPE_OBJECT) {\n             sb.append('{');\n             if (_currentName != null) {\n--- a/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java\n     public void testArrayNestedWithPath() throws Exception\n     {\n         _assert(\"{'a':[true,{'b':3,'d':2},false]}\", \"/a/1/b\", true, \"{'a':[{'b':3}]}\");\n+        _assert(\"[true,[1]]\", \"/0\", true, \"[true]\");\n+        _assert(\"[true,[1]]\", \"/1\", true, \"[[1]]\");\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/0\", true, \"[true]\");\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/1\", true, \"[[1,2,[true],3]]\");\n+\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/1/2\", true, \"[[[true]]]\");\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/1/2/0\", true, \"[[[true]]]\");\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/1/3/0\", true, \"\");\n     }\n+\n+    public void testArrayNestedWithoutPath() throws Exception\n+    {\n+        _assert(\"{'a':[true,{'b':3,'d':2},false]}\", \"/a/1/b\", false, \"3\");\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/0\", false, \"[true]\");\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/1\", false,\n+                \"[1,2,[true],3]\");\n+\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/1/2\", false, \"[true]\");\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/1/2/0\", false, \"true\");\n+        _assert(\"[true,[1,2,[true],3],0]\", \"/1/3/0\", false, \"\");\n+    }\n+    \n+//    final String SIMPLE_INPUT = aposToQuotes(\"{'a':1,'b':[1,2,3],'c':{'d':{'a':true}},'d':null}\");\n     \n     public void testArrayElementWithoutPath() throws Exception\n     {\n         throws Exception\n     {\n         StringWriter w = new StringWriter();\n+\n         JsonGenerator g0 = JSON_F.createGenerator(w);\n         FilteringGeneratorDelegate g = new FilteringGeneratorDelegate(g0,\n                 new JsonPointerBasedFilter(pathExpr, includeParent),\n                 includeParent, false);\n-        writeJsonDoc(JSON_F, input, g);\n+\n+        try {\n+            writeJsonDoc(JSON_F, input, g);\n+        } catch (Exception e) {\n+            g0.flush();\n+            System.err.println(\"With input '\"+input+\"', output at point of failure: <\"+w+\">\");\n+            throw e;\n+        }\n \n         assertEquals(aposToQuotes(exp), w.toString());\n     }", "timestamp": 1428881004, "metainfo": ""}