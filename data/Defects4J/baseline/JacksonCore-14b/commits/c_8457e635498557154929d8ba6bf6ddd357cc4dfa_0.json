{"sha": "8457e635498557154929d8ba6bf6ddd357cc4dfa", "log": "Add 'path()' methods in TreeNode", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n+++ b/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n      * @since 2.2\n      */\n     TreeNode get(int index);\n+\n+    /**\n+     * Method for accessing value of the specified field of\n+     * an object node.\n+     * For other nodes, a \"missing node\" (virtual node\n+     * for which {@link #isMissingNode} returns true) is returned.\n+     * \n+     * @return Node that represent value of the specified field,\n+     *   if this node is an object and has value for the specified field;\n+     *   otherwise \"missing node\" is returned.\n+     * \n+     * @since 2.2\n+     */\n+    TreeNode path(String fieldName);\n+\n+    /**\n+     * Method for accessing value of the specified element of\n+     * an array node.\n+     * For other nodes, a \"missing node\" (virtual node\n+     * for which {@link #isMissingNode} returns true) is returned.\n+     *<p>\n+     * For array nodes, index specifies\n+     * exact location within array and allows for efficient iteration\n+     * over child elements (underlying storage is guaranteed to\n+     * be efficiently indexable, i.e. has random-access to elements).\n+     * If index is less than 0, or equal-or-greater than\n+     * <code>node.size()</code>, \"missing node\" is returned; no exception is\n+     * thrown for any index.\n+     *\n+     * @return Node that represent value of the specified element,\n+     *   if this node is an array and has specified element;\n+     *   otherwise \"missing node\" is returned.\n+     * \n+     * @since 2.2\n+     */\n+    TreeNode path(int index);\n     \n     /**\n      * Method for accessing names of all fields for this node, iff", "timestamp": 1364340976, "metainfo": ""}