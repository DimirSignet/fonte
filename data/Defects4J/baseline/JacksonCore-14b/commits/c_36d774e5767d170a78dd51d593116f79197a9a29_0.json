{"sha": "36d774e5767d170a78dd51d593116f79197a9a29", "log": "Minor streamlining of int parsing", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n     {\n         if ((_numTypesValid & NR_INT) == 0) {\n             if (_numTypesValid == NR_UNKNOWN) { // not parsed at all\n-                _parseNumericValue(NR_INT); // will also check event type\n+                return _parseIntValue();\n             }\n             if ((_numTypesValid & NR_INT) == 0) { // wasn't an int natively?\n                 convertNumberToInt(); // let's make it so, if possible\n         }\n         _reportError(\"Current token (\"+_currToken+\") not numeric, can not use numeric value accessors\");\n     }\n-    \n+\n+    /**\n+     * @since 2.6\n+     */\n+    protected int _parseIntValue() throws IOException\n+    {\n+        // Inlined variant of: _parseNumericValue(NR_INT)\n+\n+        if (_currToken == JsonToken.VALUE_NUMBER_INT) {\n+            char[] buf = _textBuffer.getTextBuffer();\n+            int offset = _textBuffer.getTextOffset();\n+            int len = _intLength;\n+            if (_numberNegative) {\n+                ++offset;\n+            }\n+            if (len <= 9) {\n+                int i = NumberInput.parseInt(buf, offset, len);\n+                if (_numberNegative) {\n+                    i = -i;\n+                }\n+                _numberInt = i;\n+                _numTypesValid = NR_INT;\n+                return i;\n+            }\n+        }\n+        _parseNumericValue(NR_INT);\n+        if ((_numTypesValid & NR_INT) == 0) {\n+            convertNumberToInt();\n+        }\n+        return _numberInt;\n+    }\n+\n     private void _parseSlowFloat(int expType) throws IOException\n     {\n         /* Nope: floating point. Here we need to be careful to get\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n      */\n \n     @Override\n-    public String getText()\n-        throws IOException, JsonParseException\n+    public String getText() throws IOException\n     {\n         if (_currToken == JsonToken.VALUE_STRING) {\n             if (_tokenIncomplete) {\n     \n     // @since 2.1\n     @Override\n-    public String getValueAsString() throws IOException, JsonParseException\n+    public String getValueAsString() throws IOException\n     {\n         if (_currToken == JsonToken.VALUE_STRING) {\n             if (_tokenIncomplete) {\n     \n     // @since 2.1\n     @Override\n-    public String getValueAsString(String defValue) throws IOException, JsonParseException\n+    public String getValueAsString(String defValue) throws IOException\n     {\n         if (_currToken == JsonToken.VALUE_STRING) {\n             if (_tokenIncomplete) {\n     }\n \n     @Override\n-    public char[] getTextCharacters()\n-        throws IOException, JsonParseException\n+    public char[] getTextCharacters() throws IOException\n     {\n         if (_currToken != null) { // null only before/after document\n             switch (_currToken.id()) {\n     }\n \n     @Override\n-    public int getTextLength()\n-        throws IOException, JsonParseException\n+    public int getTextLength() throws IOException\n     {\n         if (_currToken != null) { // null only before/after document\n             switch (_currToken.id()) {\n     }\n \n     @Override\n-    public int getTextOffset() throws IOException, JsonParseException\n+    public int getTextOffset() throws IOException\n     {\n         // Most have offset of 0, only some may have other values:\n         if (_currToken != null) {\n     }\n     \n     @Override\n-    public byte[] getBinaryValue(Base64Variant b64variant)\n-        throws IOException, JsonParseException\n+    public byte[] getBinaryValue(Base64Variant b64variant) throws IOException\n     {\n         if (_currToken != JsonToken.VALUE_STRING &&\n                 (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null)) {\n     }\n \n     @Override\n-    public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n-        throws IOException, JsonParseException\n+    public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException\n     {\n         // if we have already read the token, just use whatever we may have\n         if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING) {\n     }\n \n     protected int _readBinary(Base64Variant b64variant, OutputStream out,\n-                              byte[] buffer)\n-        throws IOException, JsonParseException\n+                              byte[] buffer) throws IOException\n     {\n         int outputPtr = 0;\n         final int outputEnd = buffer.length - 3;", "timestamp": 1422073802, "metainfo": ""}