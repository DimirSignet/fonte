{"sha": "89d5f32df7f91b5e3a4e8dec9111f55b88207882", "log": "Bit more cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n         boolean inObject = _parsingContext.inObject();\n         if (inObject) {\n            // First, field name itself:\n-            String name = _parseFieldName(i);\n+            String name = _parseName(i);\n             _parsingContext.setCurrentName(name);\n             _currToken = JsonToken.FIELD_NAME;\n             i = _skipWS();\n         case '7':\n         case '8':\n         case '9':\n-\n             t = parseNumberText(i);\n             break;\n         default:\n     /**********************************************************\n      */\n \n-    protected String _parseFieldName(int i) throws IOException\n+    protected String _parseName(int i) throws IOException\n     {\n         if (i != INT_QUOTE) {\n-            return _handleUnusualFieldName(i);\n+            return _handleOddName(i);\n         }\n         /* First: let's try to see if we have a simple name: one that does\n          * not cross input buffer boundary, and does not contain escape\n      * In standard mode will just throw an expection; but\n      * in non-standard modes may be able to parse name.\n      */\n-    protected String _handleUnusualFieldName(int i) throws IOException\n+    protected String _handleOddName(int i) throws IOException\n     {\n         // [JACKSON-173]: allow single quotes\n         if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n-            return _parseApostropheFieldName();\n+            return _parseAposName();\n         }\n         // [JACKSON-69]: allow unquoted names if feature enabled:\n         if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {\n         }\n         int start = _inputPtr-1;\n         _inputPtr = ptr;\n-        return _parseUnusualFieldName2(start, hash, codes);\n-    }\n-\n-    protected String _parseApostropheFieldName() throws IOException\n+        return _handleOddName2(start, hash, codes);\n+    }\n+\n+    protected String _parseAposName() throws IOException\n     {\n         // Note: mostly copy of_parseFieldName\n         int ptr = _inputPtr;\n         return JsonToken.VALUE_STRING;\n     }\n     \n-    private String _parseUnusualFieldName2(int startPtr, int hash, int[] codes)\n-        throws IOException\n+    private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException\n     {\n         _textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));\n         char[] outBuf = _textBuffer.getCurrentSegment();\n         _currInputRowStart = _inputPtr;\n     }\n \n-    protected void _skipLF() throws IOException\n-    {\n-        ++_currInputRow;\n-        _currInputRowStart = _inputPtr;\n-    }\n-\n     private int _skipWS() throws IOException\n     {\n         while (_inputPtr < _inputEnd || loadMore()) {\n                 _skipComment();\n             } else if (i != INT_SPACE) {\n                 if (i == INT_LF) {\n-                    _skipLF();\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n                 } else if (i == INT_CR) {\n                     _skipCR();\n                 } else if (i != INT_TAB) {\n             }\n             if (i != INT_SPACE) {\n                 if (i == INT_LF) {\n-                    _skipLF();\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n                 } else if (i == INT_CR) {\n                     _skipCR();\n                 } else if (i != INT_TAB) {\n                 }\n                 if (i < INT_SPACE) {\n                     if (i == INT_LF) {\n-                        _skipLF();\n+                        ++_currInputRow;\n+                        _currInputRowStart = _inputPtr;\n                     } else if (i == INT_CR) {\n                         _skipCR();\n                     } else if (i != INT_TAB) {\n             int i = (int) _inputBuffer[_inputPtr++];\n             if (i < INT_SPACE) {\n                 if (i == INT_LF) {\n-                    _skipLF();\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n                     break;\n                 } else if (i == INT_CR) {\n                     _skipCR();\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n                 _skipUtf8_4(i);\n                 break;\n             case INT_LF:\n-                _skipLF();\n+                ++_currInputRow;\n+                _currInputRowStart = _inputPtr;\n                 break;\n             case INT_CR:\n                 _skipCR();\n                 _skipUtf8_4(i);\n                 break;\n             case INT_LF:\n-                _skipLF();\n+                ++_currInputRow;\n+                _currInputRowStart = _inputPtr;\n                 break;\n             case INT_CR:\n                 _skipCR();\n                     _skipCR();\n                     break;\n                 case INT_LF:\n-                    _skipLF();\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n                     break;\n                 case '/':\n                     _skipComment();\n                 _skipComment();\n             } else if (i != INT_SPACE) {\n                 if (i == INT_LF) {\n-                    _skipLF();\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n                 } else if (i == INT_CR) {\n                     _skipCR();\n                 } else if (i != INT_TAB) {\n                     }\n                     break;\n                 case INT_LF:\n-                    _skipLF();\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n                     break;\n                 case INT_CR:\n                     _skipCR();\n             if (code != 0) {\n                 switch (code) {\n                 case INT_LF:\n-                    _skipLF();\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n                     return;\n                 case INT_CR:\n                     _skipCR();\n             if (code != 0) {\n                 switch (code) {\n                 case '\\n':\n-                    _skipLF();\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n                     return true;\n                 case '\\r':\n                     _skipCR();\n         _currInputRowStart = _inputPtr;\n     }\n \n-    protected void _skipLF() throws IOException\n-    {\n-        ++_currInputRow;\n-        _currInputRowStart = _inputPtr;\n-    }\n-\n-    private int nextByte() throws IOException\n+        private int nextByte() throws IOException\n     {\n         if (_inputPtr >= _inputEnd) {\n             loadMoreGuaranteed();", "timestamp": 1379615852, "metainfo": ""}