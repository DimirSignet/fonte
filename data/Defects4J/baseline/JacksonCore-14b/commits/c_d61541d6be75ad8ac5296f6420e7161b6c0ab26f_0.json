{"sha": "d61541d6be75ad8ac5296f6420e7161b6c0ab26f", "log": "Working bit more on JsonPointer.head()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n  * Instances are fully immutable and can be shared, cached.\n  * \n  * @author Tatu Saloranta\n- * \n+ *\n  * @since 2.3\n  */\n public class JsonPointer\n {\n-    protected final static int NO_SLASH = -1;\n-\n     /**\n      * Marker instance used to represent segment that matches current\n      * node or position (that is, returns true for\n     /**\n      * Reference from currently matching segment (if any) to node\n      * before leaf.\n+     * \n+     * @since 2.5\n      */\n     protected final JsonPointer _headSegment;\n \n     public boolean mayMatchElement() { return _matchingElementIndex >= 0; }\n \n     /**\n-     * Returns the leaf of current json pointer expression.\n-     * Leaf is the last non-null segment of current json pointer.\n+     * Returns the leaf of current JSON Pointer expression.\n+     * Leaf is the last non-null segment of current JSON Pointer.\n+     * \n+     * @since 2.5\n      */\n     public JsonPointer last() {\n         JsonPointer current = this;\n-        while(!JsonPointer.EMPTY.equals(current._nextSegment)) {\n-            current = current._nextSegment;\n+        while (true) {\n+            JsonPointer next = current._nextSegment;\n+            if (next == JsonPointer.EMPTY) {\n+                break;\n+            }\n+            current = next;\n         }\n         return current;\n     }\n     }\n \n     /**\n-     * Accessor for getting a \"pointer\", instance from current segment to\n-     * segment before segment leaf. For root pointer, will return null.\n+     * Accessor for getting a pointer instance that is identical to this\n+     * instance except that the last segment has been dropped.\n+     * For example, for JSON Point \"/root/branch/leaf\", this method would\n+     * return pointer \"/root/branch\" (compared to {@link #tail()} that\n+     * would return \"/branch/leaf\").\n+     * For leaf \n      *\n      * @since 2.5\n      */\n             char c = input.charAt(i);\n             if (c == '/') { // common case, got a segment\n                 int lastSlash = input.lastIndexOf('/');\n-                if (lastSlash == NO_SLASH) {\n+                if (lastSlash < 0) {\n                     return new JsonPointer(input, input.substring(1, i),\n                             _parseTailAndHead(input.substring(i)), EMPTY);\n                 }\n             char c = input.charAt(i);\n             if (c == '/') { // end is nigh!\n                 int lastSlash = input.lastIndexOf('/');\n-                if (lastSlash == NO_SLASH) {\n+                if (lastSlash < 0) {\n                     return new JsonPointer(input, sb.toString(),\n                             _parseTailAndHead(input.substring(i)), EMPTY);\n                 }\n--- a/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java\n+++ b/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java\n         assertFalse(ptr.matches());\n         assertEquals(15, ptr.getMatchingIndex());\n         assertEquals(\"15\", ptr.getMatchingProperty());\n+        assertEquals(\"/15/name\", ptr.toString());\n         assertEquals(\"/15\", ptr.head().toString());\n-        assertEquals(\"/15/name\", ptr.toString());\n \n         assertEquals(\"\", ptr.head().head().toString());\n         assertNull(ptr.head().head().head());\n         assertEquals(\"name\", ptr.getMatchingProperty());\n         assertEquals(\"/name\", ptr.toString());\n         assertEquals(\"\", ptr.head().toString());\n+        assertSame(JsonPointer.EMPTY, ptr.head());\n \n         // done!\n         ptr = ptr.tail();\n         assertTrue(ptr.matches());\n         assertNull(ptr.tail());\n+        assertNull(ptr.head());\n         assertEquals(\"\", ptr.getMatchingProperty());\n         assertEquals(-1, ptr.getMatchingIndex());\n     }", "timestamp": 1418163371, "metainfo": ""}