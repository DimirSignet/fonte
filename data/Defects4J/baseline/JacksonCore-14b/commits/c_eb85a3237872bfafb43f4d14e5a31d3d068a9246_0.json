{"sha": "eb85a3237872bfafb43f4d14e5a31d3d068a9246", "log": "minor additions to tests", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n         _testIsNextTokenName2(true);\n         _testIsNextTokenName3(false);\n         _testIsNextTokenName3(true);\n+        _testIsNextTokenName4(false);\n+        _testIsNextTokenName4(true);\n     }\n \n     // [Issue#34]\n         assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n         assertEquals(\"name2\", jp.getCurrentName());\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        // do NOT check number value, to enforce skipping\n \n         assertFalse(jp.nextFieldName(NAME));\n         assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n \n         assertNull(jp.nextFieldName());\n         assertNull(jp.getCurrentToken());\n+\n+        jp.close();\n+    }\n+\n+    private void _testIsNextTokenName4(boolean useStream) throws Exception\n+    {\n+        final String DOC = \"{\\\"name\\\":-123,\\\"name2\\\":99}\";\n+        JsonParser jp = useStream ?\n+                JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : JSON_F.createParser(new StringReader(DOC));\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+\n+        assertTrue(jp.nextFieldName(new SerializedString(\"name\")));\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(-123, jp.getIntValue());\n+\n+        assertTrue(jp.nextFieldName(new SerializedString(\"name2\")));\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(99, jp.getIntValue());\n+        assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+        assertNull(jp.nextToken());\n \n         jp.close();\n     }", "timestamp": 1439504580, "metainfo": ""}