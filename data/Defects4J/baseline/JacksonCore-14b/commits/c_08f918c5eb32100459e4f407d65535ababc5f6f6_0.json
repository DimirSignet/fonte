{"sha": "08f918c5eb32100459e4f407d65535ababc5f6f6", "log": "Implement #91", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      * (using method {@link #writeObject}).\n      */\n     public abstract ObjectCodec getCodec();\n-    \n-    /**\n-     * Method to call to make this generator use specified schema.\n-     * Method must be called before generating any content, right after instance\n-     * has been created.\n-     * Note that not all generators support schemas; and those that do usually only\n-     * accept specific types of schemas: ones defined for data format this generator\n-     * produces.\n-     *<p>\n-     * If generator does not support specified schema, {@link UnsupportedOperationException}\n-     * is thrown.\n-     * \n-     * @param schema Schema to use\n-     * \n-     * @throws UnsupportedOperationException if generator does not support schema\n-     */\n-    public void setSchema(FormatSchema schema)\n-    {\n-        throw new UnsupportedOperationException(\"Generator of type \"+getClass().getName()+\" does not support schema of type '\"\n-                +schema.getSchemaType()+\"'\");\n-    }\n-\n-    /**\n-     * Method for accessing Schema that this parser uses, if any.\n-     * Default implementation returns null.\n-     *\n-     * @since 2.1\n-     */\n-    public FormatSchema getSchema() {\n-        return null;\n-    }\n-    \n-    /**\n-     * Method that can be used to verify that given schema can be used with\n-     * this generator (using {@link #setSchema}).\n-     * \n-     * @param schema Schema to check\n-     * \n-     * @return True if this generator can use given schema; false if not\n-     */\n-    public boolean canUseSchema(FormatSchema schema) {\n-        return false;\n-    }\n-    \n+\n     /**\n      * Accessor for finding out version of the bundle that provided this generator instance.\n      */\n         return null;\n     }\n \n-    /**\n-     * Method that allows overriding String used for separating root-level\n-     * JSON values (default is single space character)\n-     * \n-     * @param sep Separator to use, if any; null means that no separator is\n-     *   automatically added\n-     * \n-     * @since 2.1\n-     */\n-    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n-        throw new UnsupportedOperationException();\n-    }\n-    \n-    /*\n-    /**********************************************************\n-    /* Public API, configuration\n+    /*\n+    /**********************************************************\n+    /* Public API, Feature configuration\n     /**********************************************************\n      */\n \n \n     /*\n     /**********************************************************\n-    /* Configuring generator\n+    /* Public API, Schema configuration\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method to call to make this generator use specified schema.\n+     * Method must be called before generating any content, right after instance\n+     * has been created.\n+     * Note that not all generators support schemas; and those that do usually only\n+     * accept specific types of schemas: ones defined for data format this generator\n+     * produces.\n+     *<p>\n+     * If generator does not support specified schema, {@link UnsupportedOperationException}\n+     * is thrown.\n+     * \n+     * @param schema Schema to use\n+     * \n+     * @throws UnsupportedOperationException if generator does not support schema\n+     */\n+    public void setSchema(FormatSchema schema)\n+    {\n+        throw new UnsupportedOperationException(\"Generator of type \"+getClass().getName()+\" does not support schema of type '\"\n+                +schema.getSchemaType()+\"'\");\n+    }\n+\n+    /**\n+     * Method for accessing Schema that this parser uses, if any.\n+     * Default implementation returns null.\n+     *\n+     * @since 2.1\n+     */\n+    public FormatSchema getSchema() {\n+        return null;\n+    }\n+    \n+    /**\n+     * Method that can be used to verify that given schema can be used with\n+     * this generator (using {@link #setSchema}).\n+     * \n+     * @param schema Schema to check\n+     * \n+     * @return True if this generator can use given schema; false if not\n+     */\n+    public boolean canUseSchema(FormatSchema schema) {\n+        return false;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, other configuration\n     /**********************************************************\n       */\n \n      */\n     public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {\n         return this;\n+    }\n+\n+    /**\n+     * Method that allows overriding String used for separating root-level\n+     * JSON values (default is single space character)\n+     * \n+     * @param sep Separator to use, if any; null means that no separator is\n+     *   automatically added\n+     * \n+     * @since 2.1\n+     */\n+    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    /**\n+     * Introspection method that may be called to see if the underlying\n+     * data format would allow writing a type id at this point in\n+     * output stream: this requires both that data format supports\n+     * some kind of Type Ids natively (many do not; for example, JSON\n+     * doesn't); and that id is legal in this point in output.\n+     *<p>\n+     * This method <b>must</b> be called prior to calling\n+     * {@link #writeTypeId}.\n+     *<p>\n+     * Default implementation returns true; overridden by data formats\n+     * that do support native Type Ids. Caller is expected to either\n+     * use a non-native notation (explicit property or such), or fail,\n+     * in case it can not use native type ids.\n+     * \n+     * @since 2.3\n+     */\n+    public boolean canWriteTypeId() {\n+        return false;\n     }\n \n     /*\n     public abstract void writeNull()\n         throws IOException, JsonGenerationException;\n \n+    /*\n+    /**********************************************************\n+    /* Public API, write methods, Native Ids\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Method that can be called to output so-called native Type Id.\n+     * Note that it may only be called after ensuring this is legal\n+     * (with {@link #canWriteTypeId()}), as not all data formats\n+     * have native type id support; and some may only allow them in\n+     * certain positions or locations.\n+     * If output is not allowed by the data format in this position,\n+     * a {@link JsonGenerationException} will be thrown.\n+     * \n+     * @since 2.3\n+     */\n+    public void writeTypeId(String typeId)\n+        throws IOException, JsonGenerationException {\n+        throw new JsonGenerationException(\"No native support for writing Type Ids\");\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Public API, write methods, serializing Java objects\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n     public Object getOutputTarget() {\n         return delegate.getOutputTarget();\n     }\n+    \n+    /*\n+    /**********************************************************\n+    /* Public API, configuration\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonGenerator enable(Feature f) {\n+        delegate.enable(f);\n+        return this;\n+    }\n+    \n+    @Override\n+    public JsonGenerator disable(Feature f) {\n+        delegate.disable(f);\n+        return this;\n+    }\n+\n+    @Override\n+    public boolean isEnabled(Feature f) {\n+        return delegate.isEnabled(f);\n+    }\n+\n+    // final, can't override (and no need to)\n+    //public final JsonGenerator configure(Feature f, boolean state)\n+\n+    /*\n+    /**********************************************************\n+    /* Configuring generator\n+    /**********************************************************\n+      */\n+\n+    @Override\n+    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {\n+        delegate.setPrettyPrinter(pp);\n+        return this;\n+    }\n+\n+    @Override\n+    public PrettyPrinter getPrettyPrinter() {\n+        return delegate.getPrettyPrinter();\n+    }\n+    \n+    @Override\n+    public JsonGenerator useDefaultPrettyPrinter() {\n+        delegate.useDefaultPrettyPrinter();\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonGenerator setHighestNonEscapedChar(int charCode) {\n+        delegate.setHighestNonEscapedChar(charCode);\n+        return this;\n+    }\n+\n+    @Override\n+    public int getHighestEscapedChar() {\n+        return delegate.getHighestEscapedChar();\n+    }\n+\n+    @Override\n+    public CharacterEscapes getCharacterEscapes() {\n+        return delegate.getCharacterEscapes();\n+    }\n+\n+    @Override\n+    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {\n+        delegate.setCharacterEscapes(esc);\n+        return this;\n+    }\n \n     @Override\n     public JsonGenerator setRootValueSeparator(SerializableString sep) {\n         delegate.setRootValueSeparator(sep);\n         return this;\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* Public API, configuration\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    public JsonGenerator enable(Feature f) {\n-        delegate.enable(f);\n-        return this;\n-    }\n-    \n-    @Override\n-    public JsonGenerator disable(Feature f) {\n-        delegate.disable(f);\n-        return this;\n-    }\n-\n-    @Override\n-    public boolean isEnabled(Feature f) {\n-        return delegate.isEnabled(f);\n-    }\n-\n-    // final, can't override (and no need to)\n-    //public final JsonGenerator configure(Feature f, boolean state)\n-\n-    /*\n-    /**********************************************************\n-    /* Configuring generator\n-    /**********************************************************\n-      */\n-\n-    @Override\n-    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {\n-        delegate.setPrettyPrinter(pp);\n-        return this;\n-    }\n-\n-    @Override\n-    public PrettyPrinter getPrettyPrinter() {\n-        return delegate.getPrettyPrinter();\n-    }\n-    \n-    @Override\n-    public JsonGenerator useDefaultPrettyPrinter() {\n-        delegate.useDefaultPrettyPrinter();\n-        return this;\n-    }\n-\n-    @Override\n-    public JsonGenerator setHighestNonEscapedChar(int charCode) {\n-        delegate.setHighestNonEscapedChar(charCode);\n-        return this;\n-    }\n-\n-    @Override\n-    public int getHighestEscapedChar() {\n-        return delegate.getHighestEscapedChar();\n-    }\n-\n-    @Override\n-    public CharacterEscapes getCharacterEscapes() {\n-        return delegate.getCharacterEscapes();\n-    }\n-\n-    @Override\n-    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {\n-        delegate.setCharacterEscapes(esc);\n-        return this;\n+\n+    @Override\n+    public boolean canWriteTypeId() {\n+        return delegate.canWriteTypeId();\n     }\n \n     /*\n \n     /*\n     /**********************************************************\n+    /* Public API, write methods, Native Ids\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void writeTypeId(String typeId)\n+        throws IOException, JsonGenerationException {\n+        \n+    }\n+\n+    /*\n+    /**********************************************************\n     /* Public API, write methods, serializing Java objects\n     /**********************************************************\n      */", "timestamp": 1374978411, "metainfo": ""}