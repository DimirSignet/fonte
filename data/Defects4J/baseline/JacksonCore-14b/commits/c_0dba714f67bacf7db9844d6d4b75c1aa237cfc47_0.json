{"sha": "0dba714f67bacf7db9844d6d4b75c1aa237cfc47", "log": "Implement #85", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n          */\n         WRITE_NUMBERS_AS_STRINGS(false),\n \n+        /**\n+         * Feature that determines whether {@link java.math.BigDecimal} entries are\n+         * serialized using {@link java.math.BigDecimal#toPlainString()} to prevent\n+         * values to be written using scientific notation.\n+         *<p>\n+         * Feature is disabled by default, so default output mode is used; this generally\n+         * depends on how {@link BigDecimal} has been created.\n+         * \n+         * @since 2.3\n+         */\n+        WRITE_BIGDECIMAL_AS_PLAIN(false),\n+        \n         /**\n          * Feature that specifies that calls to {@link #flush} will cause\n          * matching <code>flush()</code> to underlying {@link OutputStream}\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.JsonGenerator.Feature;\n import com.fasterxml.jackson.core.io.*;\n \n public class UTF8JsonGenerator\n             _writeNull();\n         } else if (_cfgNumbersAsStrings) {\n             _writeQuotedRaw(value);\n+        } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            writeRaw(value.toPlainString());\n         } else {\n             writeRaw(value.toString());\n         }\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n             _writeNull();\n         } else if (_cfgNumbersAsStrings) {\n             _writeQuotedRaw(value);\n+        } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n+            writeRaw(value.toPlainString());\n         } else {\n             writeRaw(value.toString());\n         }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java\n         JsonFactory jf = new JsonFactory();\n         JsonGenerator jg = jf.createGenerator(new StringWriter());\n         assertFalse(jg.isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));\n+        assertFalse(jg.isEnabled(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN));\n     }\n \n     public void testFieldNameQuoting() throws IOException\n                      _writeNumbers(jf));\n     }\n \n+    // [Issue#85]\n+    public void testBigDecimalAsPlain() throws IOException\n+    {\n+        JsonFactory jf = new JsonFactory();\n+        BigDecimal ENG = new BigDecimal(\"1E+2\");\n+\n+        StringWriter sw = new StringWriter();\n+        JsonGenerator jg = jf.createGenerator(sw);\n+        jg.writeNumber(ENG);\n+        jg.close();\n+        assertEquals(\"1E+2\", sw.toString());\n+\n+        jf.configure(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN, true);\n+        sw = new StringWriter();\n+        jg = jf.createGenerator(sw);\n+        jg.writeNumber(ENG);\n+        jg.close();\n+        assertEquals(\"100\", sw.toString());\n+    }\n+    \n     private String _writeNumbers(JsonFactory jf) throws IOException\n     {\n         StringWriter sw = new StringWriter();", "timestamp": 1372997851, "metainfo": ""}