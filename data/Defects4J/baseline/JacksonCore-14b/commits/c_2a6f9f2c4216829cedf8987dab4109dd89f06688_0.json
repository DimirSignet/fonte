{"sha": "2a6f9f2c4216829cedf8987dab4109dd89f06688", "log": "Tests for verifying dynamic enabling/disabling of dup-detection", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     public int getFeatureMask() { return _features; }\n \n     /**\n-     * Bulk set method for (re)settting states of all standard {@link Feature}s\n-     * \n+     * Bulk set method for (re)setting states of all standard {@link Feature}s\n+     *\n      * @since 2.3\n      * \n      * @return This parser object, to allow chaining of calls\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n      */\n     protected final static int DERIVED_FEATURES_MASK = Feature.WRITE_NUMBERS_AS_STRINGS.getMask()\n             | Feature.ESCAPE_NON_ASCII.getMask()\n-//            | Feature.STRICT_DUPLICATE_DETECTION.getMask()\n+            | Feature.STRICT_DUPLICATE_DETECTION.getMask()\n             ;\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorDupHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorDupHandling.java\n public class TestGeneratorDupHandling\n     extends com.fasterxml.jackson.core.BaseTest\n {\n-    public void testSimpleDups() throws Exception\n-    {\n-        _testSimpleDups(false);\n-        _testSimpleDups(true);\n+    public void testSimpleDupsEagerlyBytes() throws Exception {\n+        _testSimpleDups(true, false, new JsonFactory());\n+    }\n+    public void testSimpleDupsEagerlyChars() throws Exception {\n+        _testSimpleDups(false, false, new JsonFactory());\n+    }\n+\n+    // Testing ability to enable checking after construction of\n+    // generator, not just via JsonFactory\n+    public void testSimpleDupsLazilyBytes() throws Exception {\n+        final JsonFactory f = new JsonFactory();\n+        assertFalse(f.isEnabled(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION));\n+        _testSimpleDups(true, true, f);\n+    }\n+\n+    public void testSimpleDupsLazilyChars() throws Exception {\n+        final JsonFactory f = new JsonFactory();\n+        _testSimpleDups(false, true, f);\n     }\n     \n-    protected void _testSimpleDups(boolean useStream) throws Exception\n+    @SuppressWarnings(\"resource\")\n+    protected void _testSimpleDups(boolean useStream, boolean lazySetting, JsonFactory f)\n+            throws Exception\n     {\n-        JsonFactory f = new JsonFactory();\n-        assertFalse(f.isEnabled(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION));\n-\n         // First: fine, when not checking\n-        _writeSimple0(_generator(f, useStream), \"a\");\n-        _writeSimple1(_generator(f, useStream), \"b\");\n+        if (!lazySetting) {\n+            _writeSimple0(_generator(f, useStream), \"a\");\n+            _writeSimple1(_generator(f, useStream), \"b\");\n+        }\n \n         // but not when checking\n-        f.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+        JsonGenerator g;\n+\n+        if (lazySetting) {\n+            g = _generator(f, useStream);            \n+            g.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+        } else {\n+            f.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+            g = _generator(f, useStream);            \n+        }\n         try {\n-            _writeSimple0( _generator(f, useStream), \"a\");\n+            _writeSimple0(g, \"a\");\n             fail(\"Should have gotten exception\");\n         } catch (JsonGenerationException e) {\n             verifyException(e, \"duplicate field 'a'\");\n         }\n \n+        if (lazySetting) {\n+            g = _generator(f, useStream);            \n+            g.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+        } else {\n+            g = _generator(f, useStream);            \n+        }\n         try {\n             _writeSimple1( _generator(f, useStream), \"x\");\n             fail(\"Should have gotten exception\");\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestParserDupHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserDupHandling.java\n public class TestParserDupHandling\n     extends com.fasterxml.jackson.core.BaseTest\n {\n-    public void testSimpleDups() throws Exception\n-    {\n-        for (String doc : new String[] {\n+    private final String[] DUP_DOCS = new String[] {\n             \"{ 'a':1, 'a':2 }\",\n             \"[{ 'a':1, 'a':2 }]\",\n             \"{ 'a':1, 'b':2, 'c':3,'a':true,'e':false }\",\n             \"{ 'foo': { 'bar': [ [ { 'x':3, 'a':1 } ]], 'x':0, 'a':'y', 'b':3,'a':13 } }\",\n             \"[{'b':1},{'b\\\":3},[{'a':3}], {'a':1,'a':2}]\",\n             \"{'b':1,'array':[{'b':3}],'ob':{'b':4,'x':0,'y':3,'a':true,'a':false }}\",\n-        }) {\n-            doc = doc.replace(\"'\", \"\\\"\");\n-            JsonFactory f = new JsonFactory();\n-            assertFalse(f.isEnabled(JsonParser.Feature.STRICT_DUPLICATE_DETECTION));\n+    };\n+    {\n+        for (int i = 0; i < DUP_DOCS.length; ++i) {\n+            DUP_DOCS[i] = DUP_DOCS[i].replace(\"'\", \"\\\"\");\n+        }\n+    }\n+    \n+    public void testSimpleDupsDisabled() throws Exception\n+    {\n+        // first: verify no problems if detection NOT enabled\n+        final JsonFactory f = new JsonFactory();\n+        assertFalse(f.isEnabled(JsonParser.Feature.STRICT_DUPLICATE_DETECTION));\n+        for (String doc : DUP_DOCS) {\n             _testSimpleDupsOk(doc, f, false);\n             _testSimpleDupsOk(doc, f, true);\n-    \n-            f.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n-            _testSimpleDupsFail(doc, f, false, \"a\");\n-            _testSimpleDupsFail(doc, f, true, \"a\");\n         }\n     }\n \n-    private void _testSimpleDupsOk(final String doc, JsonFactory f, boolean useStream) throws Exception\n+    public void testSimpleDupsBytes() throws Exception\n+    {\n+        JsonFactory nonDupF = new JsonFactory();\n+        JsonFactory dupF = new JsonFactory();\n+        dupF.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n+        for (String doc : DUP_DOCS) {\n+            // First, with static setting\n+            _testSimpleDupsFail(doc, dupF, true, \"a\", false);\n+\n+            // and then dynamic\n+            _testSimpleDupsFail(doc, nonDupF, true, \"a\", true);\n+        }\n+    }\n+\n+    public void testSimpleDupsChars() throws Exception\n+    {\n+        JsonFactory nonDupF = new JsonFactory();\n+        JsonFactory dupF = new JsonFactory();\n+        dupF.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n+        for (String doc : DUP_DOCS) {\n+            _testSimpleDupsFail(doc, dupF, false, \"a\", false);\n+            _testSimpleDupsFail(doc, nonDupF, false, \"a\", true);\n+        }\n+    }\n+    \n+    private void _testSimpleDupsOk(final String doc, JsonFactory f,\n+            boolean useStream) throws Exception\n     {\n         JsonParser jp = useStream ?\n                 createParserUsingStream(f, doc, \"UTF-8\") : createParserUsingReader(f, doc);\n     }\n \n     private void _testSimpleDupsFail(final String doc, JsonFactory f,\n-            boolean useStream, String name) throws Exception\n+            boolean useStream, String name, boolean lazily) throws Exception\n     {\n         JsonParser jp = useStream ?\n                 createParserUsingStream(f, doc, \"UTF-8\") : createParserUsingReader(f, doc);\n+        if (lazily) {\n+            jp.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n+        }\n         JsonToken t = jp.nextToken();\n         assertNotNull(t);\n         assertTrue(t.isStructStart());", "timestamp": 1415582180, "metainfo": ""}