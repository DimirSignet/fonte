{"sha": "83322137000f2fd8e7132bd195ac863ae90eaf8d", "log": "Add more testing, fix a problem with array checks", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n             delegate.writeStartArray(size);\n             return;\n         }\n-        _itemFilter = _itemFilter.filterStartArray();\n-        if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n-            _checkParentPath();\n-            _filterContext = _filterContext.createChildArrayContext(_itemFilter, true);\n+\n+        TokenFilter state = _filterContext.checkValue(_itemFilter);\n+        if (state == null) {\n+            return;\n+        }\n+        if (state != TokenFilter.INCLUDE_ALL) {\n+            state = state.filterStartArray();\n+        }\n+        if (state == TokenFilter.INCLUDE_ALL) {\n+            _checkParentPath();\n+            _filterContext = _filterContext.createChildArrayContext(state, true);\n             delegate.writeStartArray(size);\n         } else {\n-            _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);\n-        }\n-        if (_itemFilter != null) {\n+            _filterContext = _filterContext.createChildArrayContext(state, false);\n+        }\n+        if (state != null) {\n             _filterContext.markNeedsCloseCheck();\n         }\n     }\n             delegate.writeStartObject();\n             return;\n         }\n-        _itemFilter = _itemFilter.filterStartObject();\n-        if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n-            _checkParentPath();\n-            _filterContext = _filterContext.createChildObjectContext(_itemFilter, true);\n+\n+        TokenFilter state = _filterContext.checkValue(_itemFilter);\n+        if (state == null) {\n+            return;\n+        }\n+        \n+        if (state != TokenFilter.INCLUDE_ALL) {\n+            state = state.filterStartObject();\n+        }\n+        if (state == TokenFilter.INCLUDE_ALL) {\n+            _checkParentPath();\n+            _filterContext = _filterContext.createChildObjectContext(state, true);\n             delegate.writeStartObject();\n         } else { // filter out\n-            _filterContext = _filterContext.createChildObjectContext(_itemFilter, false);\n-        }\n-        if (_itemFilter != null) {\n+            _filterContext = _filterContext.createChildObjectContext(state, false);\n+        }\n+        if (state != null) {\n             _filterContext.markNeedsCloseCheck();\n         }\n     }\n--- a/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerBasedFilter.java\n         return _pathToMatch.matches();\n     }\n \n+    @Override\n+    public String toString() {\n+        return \"[JsonPointerFilter at: \"+_pathToMatch+\"]\";\n+    }\n+    \n     /**\n      * Helper class needed to include value of an Object property, without\n      * including surrounding Object. Used when path is not to be included.\n--- a/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerGeneratorFilteringTest.java\n         _assert(SIMPLE_INPUT, \"/b\", true, \"{'b':[1,2,3]}\");\n         _assert(SIMPLE_INPUT, \"/b/1\", true, \"{'b':[2]}\");\n         _assert(SIMPLE_INPUT, \"/b/2\", true, \"{'b':[3]}\");\n-\n+        \n         // and then non-match\n         _assert(SIMPLE_INPUT, \"/b/8\", true, \"\");\n+    }\n+\n+    public void testArrayNestedWithPath() throws Exception\n+    {\n+        _assert(\"{'a':[true,{'b':3,'d':2},false]}\", \"/a/1/b\", true, \"{'a':[{'b':3}]}\");\n     }\n     \n     public void testArrayElementWithoutPath() throws Exception", "timestamp": 1428727564, "metainfo": ""}