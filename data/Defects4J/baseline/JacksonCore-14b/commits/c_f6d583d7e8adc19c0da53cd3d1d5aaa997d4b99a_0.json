{"sha": "f6d583d7e8adc19c0da53cd3d1d5aaa997d4b99a", "log": "Bit more work on filtering parser, getting close to working for the simplest use case", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n \n         if (ctxt != null) {\n             while (true) {\n-                JsonToken t = _exposedContext.nextTokenToRead();\n+                JsonToken t = ctxt.nextTokenToRead();\n                 if (t != null) {\n                     _currToken = t;\n                     return t;\n                 // all done with buffered stuff?\n                 if (ctxt == _headContext) {\n                     _exposedContext = null;\n+                    // Almost! Most likely still have the current token;\n+                    // with the sole exception of \n+                    t = delegate.getCurrentToken();\n+                    if (t != JsonToken.FIELD_NAME) {\n+                        _currToken = t;\n+                        return t;\n+                    }\n                     break;\n                 }\n                 // If not, traverse down the context chain\n-                ctxt = _exposedContext.findChildOf(_exposedContext);\n+                ctxt = _exposedContext.findChildOf(ctxt);\n                 _exposedContext = ctxt;\n                 if (ctxt == null) { // should never occur\n                     throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n         case ID_FIELD_NAME:\n             {\n                 final String name = delegate.getCurrentName();\n+                // note: this will also set 'needToHandleName'\n                 f = _headContext.setFieldName(name);\n                 if (f == TokenFilter.INCLUDE_ALL) {\n                     _itemFilter = f;\n                     delegate.skipChildren();\n                     break;\n                 }\n-                if (f == TokenFilter.INCLUDE_ALL) {\n-                    _itemFilter = f;\n-                    return (_currToken = t);\n-                }\n-                // !!! TODO: still not decided if to include, so...\n-                \n                 _itemFilter = f;\n-            }\n-            break;\n+                if (f == TokenFilter.INCLUDE_ALL) {\n+                    return (_currToken = t);\n+                }\n+                return _nextTokenWithBuffering(_headContext);\n+            }\n \n         default: // scalar value\n             if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n                     if (f == null) { // filter out the value\n                         delegate.nextToken();\n                         delegate.skipChildren();\n-                        break;\n+                        continue main_loop;\n                     }\n                     f = f.includeProperty(name);\n                     if (f == null) { // filter out the value\n                         delegate.nextToken();\n                         delegate.skipChildren();\n-                        break;\n-                    }\n+                        continue main_loop;\n+                    }\n+                    _itemFilter = f;\n                     if (f == TokenFilter.INCLUDE_ALL) {\n-                        _itemFilter = f;\n                         return (_currToken = t);\n                     }\n-                    // !!! TODO: still not decided if to include, so...\n-                    \n-                    _itemFilter = f;\n-                }\n-                continue main_loop;\n+                }\n+                return _nextTokenWithBuffering(_headContext);\n \n             default: // scalar value\n                 if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n     /**\n      * Method called when a new potentially included context is found.\n      */\n-    protected final JsonToken _nextTokenWithBuffering(TokenFilterContext buffRoot) throws IOException\n+    protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n+        throws IOException\n     {\n         _exposedContext = _headContext;\n \n+        main_loop:\n         while (true) {\n             JsonToken t = delegate.nextToken();\n \n             }\n             TokenFilter f;\n \n+            // One simplification here: we know for a fact that the item filter is\n+            // neither null nor 'include all', for most cases; the only exception\n+            // being FIELD_NAME handling\n+\n             switch (t.id()) {\n             case ID_START_ARRAY:\n+                f = _headContext.checkValue(_itemFilter);\n+                if (f == null) {\n+                    delegate.skipChildren();\n+                    continue main_loop;\n+                }\n+                if (f != TokenFilter.INCLUDE_ALL) {\n+                    f = f.filterStartArray();\n+                }\n+                _itemFilter = f;\n+                _headContext = _headContext.createChildArrayContext(f, true);\n+                if (f == TokenFilter.INCLUDE_ALL) {\n+                    return _nextBuffered();\n+                }\n+                continue main_loop;\n+\n+            case ID_START_OBJECT:\n                 f = _itemFilter;\n                 if (f == TokenFilter.INCLUDE_ALL) {\n-                    _headContext = _headContext.createChildArrayContext(f, true);\n+                    _headContext = _headContext.createChildObjectContext(f, true);\n                     return (_currToken = t);\n                 }\n                 if (f == null) { // does this occur?\n                     delegate.skipChildren();\n-                    break;\n+                    continue main_loop;\n                 }\n                 // Otherwise still iffy, need to check\n                 f = _headContext.checkValue(f);\n                 if (f == null) {\n                     delegate.skipChildren();\n-                    break;\n-                }\n-                if (f != TokenFilter.INCLUDE_ALL) {\n-                    f = f.filterStartArray();\n-                }\n-                _itemFilter = f;\n-                _headContext = _headContext.createChildArrayContext(f, true);\n-                if (f == TokenFilter.INCLUDE_ALL) {\n-                    return (_currToken = t);\n-                }\n-                break;\n-\n-            case ID_START_OBJECT:\n-                f = _itemFilter;\n-                if (f == TokenFilter.INCLUDE_ALL) {\n-                    _headContext = _headContext.createChildObjectContext(f, true);\n-                    return (_currToken = t);\n-                }\n-                if (f == null) { // does this occur?\n-                    delegate.skipChildren();\n-                    break;\n-                }\n-                // Otherwise still iffy, need to check\n-                f = _headContext.checkValue(f);\n-                if (f == null) {\n-                    delegate.skipChildren();\n-                    break;\n+                    continue main_loop;\n                 }\n                 if (f != TokenFilter.INCLUDE_ALL) {\n                     f = f.filterStartObject();\n                 _itemFilter = f;\n                 _headContext = _headContext.createChildObjectContext(f, true);\n                 if (f == TokenFilter.INCLUDE_ALL) {\n-                    return (_currToken = t);\n-                }\n-                break;\n+                    return _nextBuffered();\n+                }\n+                continue main_loop;\n \n             case ID_END_ARRAY:\n             case ID_END_OBJECT:\n                 {\n-                    boolean returnEnd = _headContext.isStartHandled();\n+                    // Unlike with other loops, here we know that content was NOT\n+                    // included (won't get this far otherwise)\n                     f = _headContext.getFilter();\n                     if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                         f.filterFinishArray();\n                     }\n                     _headContext = _headContext.getParent();\n                     _itemFilter = _headContext.getFilter();\n-                    if (returnEnd) {\n-                        return (_currToken = t);\n-                    }\n-                }\n-                break;\n+                    \n+                    if (_headContext == buffRoot) {\n+                        // !!! TBI\n+                        throw _constructError(\"Internal error: end of possible inclusion -- TBI\");\n+                    }\n+                }\n+                continue main_loop;\n \n             case ID_FIELD_NAME:\n                 {\n                     f = _headContext.setFieldName(name);\n                     if (f == TokenFilter.INCLUDE_ALL) {\n                         _itemFilter = f;\n-                        return (_currToken = t);\n+                        return _nextBuffered();\n                     }\n                     if (f == null) { // filter out the value\n                         delegate.nextToken();\n                         delegate.skipChildren();\n-                        break;\n+                        continue main_loop;\n                     }\n                     f = f.includeProperty(name);\n                     if (f == null) { // filter out the value\n                         delegate.nextToken();\n                         delegate.skipChildren();\n-                        break;\n-                    }\n+                        continue main_loop;\n+                    }\n+                    _itemFilter = f;\n                     if (f == TokenFilter.INCLUDE_ALL) {\n-                        _itemFilter = f;\n-                        return (_currToken = t);\n-                    }\n-                    // !!! TODO: still not decided if to include, so...\n-                    \n-                    _itemFilter = f;\n-                }\n-                break;\n+                        return _nextBuffered();\n+                    }\n+                }\n+                continue main_loop;\n \n             default: // scalar value\n                 if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n-                    return (_currToken = t);\n+                    return _nextBuffered();\n                 }\n                 // Otherwise not included (leaves must be explicitly included)\n+            }\n+        }\n+    }\n+\n+    private JsonToken _nextBuffered() throws IOException\n+    {\n+        TokenFilterContext ctxt = _exposedContext;\n+        JsonToken t = ctxt.nextTokenToRead();\n+        if (t != null) {\n+            _currToken = t;\n+            return t;\n+        }\n+        while (true) {\n+            // all done with buffered stuff?\n+            if (ctxt == _headContext) {\n+                throw _constructError(\"Internal error: failed to locate expected buffered tokens\");\n+                /*\n+                _exposedContext = null;\n                 break;\n-            }\n-        }\n-   }\n+                */\n+            }\n+            // If not, traverse down the context chain\n+            ctxt = _exposedContext.findChildOf(ctxt);\n+            _exposedContext = ctxt;\n+            if (ctxt == null) { // should never occur\n+                throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n+            }\n+            t = _exposedContext.nextTokenToRead();\n+            if (t != null) {\n+                _currToken = t;\n+                return t;\n+            }\n+        }\n+    }\n     \n     @Override\n     public JsonToken nextValue() throws IOException {\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n \n     private void _writePath(JsonGenerator gen) throws IOException\n     {\n-//System.err.println(\"_writePath(\"+_type+\"), startWritten? \"+_startWritten+\", writeName? \"+_needToWriteName+\" at \"+toString());\n         if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {\n             return;\n         }\n \n     public JsonToken nextTokenToRead() {\n         if (!_startHandled) {\n+            _startHandled = true;\n             if (_type == TYPE_OBJECT) {\n                 return JsonToken.START_OBJECT;\n             }\n--- a/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java\n         JsonGenerator g = JSON_F.createGenerator(w);\n \n         try {\n-System.err.println(\"Start\");            \n             while (p.nextToken() != null) {\n-System.err.println(\"Token -> \"+p.getCurrentToken());                \n                 g.copyCurrentEvent(p);\n             }\n-System.err.println(\"Finish\");            \n             p.close();\n             g.close();\n         } catch (Exception e) {", "timestamp": 1429164383, "metainfo": ""}