{"sha": "7df7c5762a6236ba628d284723fd6bada467af86", "log": "Add `JsonGenerator.writeRawValue(SerializableString)`, matching tests; planned to help with #165", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      */\n     public abstract void writeUTF8String(byte[] text, int offset, int length)\n         throws IOException;\n-    \n+\n     /*\n     /**********************************************************\n     /* Public API, write methods, binary/raw content\n     /**********************************************************\n      */\n-    \n+\n     /**\n      * Method that will force generator to copy\n      * input text verbatim with <b>no</b> modifications (including\n     public void writeRaw(SerializableString raw) throws IOException {\n         writeRaw(raw.getValue());\n     }\n-    \n+\n     /**\n      * Method that will force generator to copy\n      * input text verbatim without any modifications, but assuming\n     public abstract void writeRawValue(String text, int offset, int len) throws IOException;\n \n     public abstract void writeRawValue(char[] text, int offset, int len) throws IOException;\n+\n+    /**\n+     * Method similar to {@link #writeRawValue(String)}, but potentially more\n+     * efficient as it may be able to use pre-encoded content (similar to\n+     * {@link #writeRaw(SerializableString)}.\n+     * \n+     * @since 2.5\n+     */\n+    public void writeRawValue(SerializableString raw) throws IOException {\n+        writeRawValue(raw.getValue());\n+    }\n \n     /**\n      * Method that will output given chunk of binary data as base64\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n     public void writeString(SerializableString text) throws IOException {\n         writeString(text.getValue());\n     }\n-    \n+\n     @Override public void writeRawValue(String text) throws IOException {\n         _verifyValueWrite(\"write raw value\");\n         writeRaw(text);\n     @Override public void writeRawValue(char[] text, int offset, int len) throws IOException {\n         _verifyValueWrite(\"write raw value\");\n         writeRaw(text, offset, len);\n+    }\n+\n+    @Override public void writeRawValue(SerializableString text) throws IOException {\n+        _verifyValueWrite(\"write raw value\");\n+        writeRaw(text);\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n         }\n         _outputBuffer[_outputTail++] = BYTE_QUOTE;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Output method implementations, unprocessed (\"raw\")\n             _writeBytes(raw);\n         }\n     }\n-    \n+\n+    // since 2.5\n+    @Override\n+    public void writeRawValue(SerializableString text) throws IOException {\n+        _verifyValueWrite(\"write raw value\");\n+        byte[] raw = text.asUnquotedUTF8();\n+        if (raw.length > 0) {\n+            _writeBytes(raw);\n+        }\n+    }\n+\n     // @TODO: rewrite for speed...\n     @Override\n     public final void writeRaw(char[] cbuf, int offset, int len)\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java\n import static org.junit.Assert.*;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.io.SerializedString;\n \n-/**\n- * @since 1.7\n- */\n public class TestRawStringWriting extends com.fasterxml.jackson.core.BaseTest\n {\n     /**\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n         jp.close();\n     }\n+\n+    public void testWriteRawWithSerializable() throws Exception\n+    {\n+        JsonFactory jf = new JsonFactory();\n+        \n+        _testWithRaw(jf, true);\n+        _testWithRaw(jf, false);\n+    }\n+    \n+    private void _testWithRaw(JsonFactory f, boolean useBytes) throws Exception\n+    {\n+        JsonGenerator jgen;\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        StringWriter sw = new StringWriter();\n+\n+        if (useBytes) {\n+            jgen = f.createGenerator(bytes, JsonEncoding.UTF8);\n+        } else {\n+            jgen = f.createGenerator(sw);\n+        }\n+\n+        jgen.writeStartArray();\n+        jgen.writeRawValue(new SerializedString(\"\\\"foo\\\"\"));\n+        jgen.writeRawValue(new SerializedString(\"12\"));\n+        jgen.writeRaw(new SerializedString(\", false\"));\n+        jgen.writeEndArray();\n+        jgen.close();\n+\n+        JsonParser p = useBytes\n+                ? f.createParser(bytes.toByteArray())\n+                : f.createParser(sw.toString());\n+\n+        assertToken(JsonToken.START_ARRAY, p.nextToken());\n+        assertToken(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(\"foo\", p.getText());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+        assertEquals(12, p.getIntValue());\n+        assertToken(JsonToken.VALUE_FALSE, p.nextToken());\n+        assertToken(JsonToken.END_ARRAY, p.nextToken());\n+        p.close();\n+    }\n     \n     /*\n     /**********************************************************", "timestamp": 1415408789, "metainfo": ""}