{"sha": "c2d74597ff9a3d675f30bdafde45f0b80d2cc51f", "log": "Added support for plain 'Infinity' when feature ALLOW_NON_NUMERIC_NUMBERS is on.  This fixes a bug wherein converting a Node to string and then back fails, because .toString() writes Double.POSITIVE_INFINITY as Infinity, but the current functionality only supports +Infinity.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n             }\n             _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n             break;\n+        case 'I':\n+            _matchToken(\"Infinity\", 1);\n+            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n+                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n+            }\n+            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n+            break;\n         case '+': // note: '-' is taken as number\n             if (_inputPtr >= _inputEnd) {\n                 if (!loadMore()) {\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n             }\n             _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n             break;\n+        case 'I':\n+            _matchToken(\"Infinity\", 1);\n+            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n+                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n+            }\n+            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n+            break;\n         case '+': // note: '-' is taken as number\n             if (_inputPtr >= _inputEnd) {\n                 if (!loadMore()) {\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java\n \n     private void _testAllowInf(boolean useStream) throws Exception\n     {\n-        final String JSON = \"[ -INF, +INF, +Infinity,-Infinity ]\";\n+        final String JSON = \"[ -INF, +INF, +Infinity, Infinity, -Infinity ]\";\n         JsonFactory f = new JsonFactory();\n         assertFalse(f.isEnabled(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS));\n \n         f.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);\n         jp = useStream ? createParserUsingStream(f, JSON, \"UTF-8\")\n                 : createParserUsingReader(f, JSON);\n-        \n+\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n \n         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n         assertEquals(\"+Infinity\", jp.getText());\n         assertTrue(Double.isInfinite(d));\n         assertTrue(d == Double.POSITIVE_INFINITY);\n-        \n+\n+        assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n+        d = jp.getDoubleValue();\n+        assertEquals(\"Infinity\", jp.getText());\n+        assertTrue(Double.isInfinite(d));\n+        assertTrue(d == Double.POSITIVE_INFINITY);\n+\n         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n         d = jp.getDoubleValue();\n         assertEquals(\"-Infinity\", jp.getText());\n         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n+        assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n         \n         jp.close();", "timestamp": 1372125042, "metainfo": ""}