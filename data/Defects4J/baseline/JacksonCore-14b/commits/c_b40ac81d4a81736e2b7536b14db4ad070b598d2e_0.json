{"sha": "b40ac81d4a81736e2b7536b14db4ad070b598d2e", "log": "Fix #98", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n              * to avoid rounding errors that non-decimal floating operations\n              * would incur\n              */\n-            _numberBigDecimal = new BigDecimal(getText());\n+            _numberBigDecimal = NumberInput.parseBigDecimal(getText());\n         } else if ((_numTypesValid & NR_BIGINT) != 0) {\n             _numberBigDecimal = new BigDecimal(_numberBigInt);\n         } else if ((_numTypesValid & NR_LONG) != 0) {\n--- a/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java\n package com.fasterxml.jackson.core.io;\n+\n+import java.math.BigDecimal;\n \n public final class NumberInput\n {\n         } catch (NumberFormatException e) { }\n         return defaultValue;\n     }\n-    \n+\n     public static double parseDouble(String numStr) throws NumberFormatException\n     {\n         // [JACKSON-486]: avoid some nasty float representations... but should it be MIN_NORMAL or MIN_VALUE?\n         }\n         return Double.parseDouble(numStr);\n     }\n+\n+    public static BigDecimal parseBigDecimal(String numStr) throws NumberFormatException\n+    {\n+        try {\n+            return new BigDecimal(numStr);\n+        } catch (NumberFormatException e) {\n+            throw _badBigDecimal(numStr);\n+        }\n+    }\n+\n+    public static BigDecimal parseBigDecimal(char[] buffer) throws NumberFormatException {\n+        return parseBigDecimal(buffer, 0, buffer.length);\n+    }\n+    \n+    public static BigDecimal parseBigDecimal(char[] buffer, int offset, int len)\n+            throws NumberFormatException\n+    {\n+        try {\n+            return new BigDecimal(buffer, offset, len);\n+        } catch (NumberFormatException e) {\n+            throw _badBigDecimal(new String(buffer, offset, len));\n+        }\n+    }\n+\n+    private static NumberFormatException _badBigDecimal(String str) {\n+        return new NumberFormatException(\"Value \\\"\"+str+\"\\\" can not be represented as BigDecimal\");\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n     {\n         // Already got a pre-cut array?\n         if (_resultArray != null) {\n-            return new BigDecimal(_resultArray);\n+            return NumberInput.parseBigDecimal(_resultArray);\n         }\n         // Or a shared buffer?\n-        if (_inputStart >= 0) {\n-            return new BigDecimal(_inputBuffer, _inputStart, _inputLen);\n+        if ((_inputStart >= 0) && (_inputBuffer != null)) {\n+            return NumberInput.parseBigDecimal(_inputBuffer, _inputStart, _inputLen);\n         }\n         // Or if not, just a single buffer (the usual case)\n-        if (_segmentSize == 0) {\n-            return new BigDecimal(_currentSegment, 0, _currentSize);\n+        if ((_segmentSize == 0) && (_currentSegment != null)) {\n+            return NumberInput.parseBigDecimal(_currentSegment, 0, _currentSize);\n         }\n         // If not, let's just get it aggregated...\n-        return new BigDecimal(contentsAsArray());\n+        return NumberInput.parseBigDecimal(contentsAsArray());\n     }\n \n     /**\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java\n         \n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n+        \n         double d = jp.getDoubleValue();\n         assertTrue(Double.isNaN(d));\n         assertEquals(\"NaN\", jp.getText());\n+\n+        // [Issue#98]\n+        try {\n+            /*BigDecimal dec =*/ jp.getDecimalValue();\n+            fail(\"Should fail when trying to access NaN as BigDecimal\");\n+        } catch (NumberFormatException e) {\n+            e.printStackTrace();\n+            verifyException(e, \"can not be represented as BigDecimal\");\n+        }\n+       \n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n         jp.close();\n ", "timestamp": 1377749072, "metainfo": ""}