{"sha": "8fbde688c8502bedaeee121b75598b1882d43d9e", "log": "Add tests to try to reproduce #191 (no luck yet)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n import java.io.IOException;\n import java.nio.charset.Charset;\n \n-import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.*;\n \n public class TestSymbolTables extends com.fasterxml.jackson.core.BaseTest\n {\n         // as well as collision counts\n         assertEquals(10, symbols.maxCollisionLength());\n     }\n+\n+    // [core#191]: similarly, but for \"short\" symbols:\n+    public void testShortNameCollisionsViaParser() throws Exception\n+    {\n+        JsonFactory f = new JsonFactory();\n+        String json = _shortDoc191();\n+        JsonParser p;\n+\n+        // First: ensure that char-based is fine\n+        p = f.createParser(json);\n+        while (p.nextToken() != null) { }\n+        p.close();\n+\n+        // and then that byte-based\n+        p = f.createParser(json.getBytes(\"UTF-8\"));\n+        while (p.nextToken() != null) { }\n+        p.close();\n+    }\n+\n+    // [core#191]\n+    public void testShortNameCollisionsDirect() throws IOException\n+    {\n+        final int COUNT = 400;\n+\n+        // First, char-based\n+        {\n+            CharsToNameCanonicalizer symbols = CharsToNameCanonicalizer.createRoot(1);\n+            for (int i = 0; i < COUNT; ++i) {\n+                String id = String.valueOf((char) i);\n+                char[] ch = id.toCharArray();\n+                symbols.findSymbol(ch, 0, ch.length, symbols.calcHash(id));\n+            }\n+            assertEquals(COUNT, symbols.size());\n+            assertEquals(1024, symbols.bucketCount());\n+    \n+            assertEquals(0, symbols.collisionCount());\n+            assertEquals(0, symbols.maxCollisionLength());\n+        }\n+\n+        // then byte-based\n+        {\n+            BytesToNameCanonicalizer symbols =\n+                    BytesToNameCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());\n+            for (int i = 0; i < COUNT; ++i) {\n+                String id = String.valueOf((char) i);\n+                int[] quads = BytesToNameCanonicalizer.calcQuads(id.getBytes(\"UTF-8\"));\n+                symbols.addName(id, quads, quads.length);\n+            }\n+            assertEquals(COUNT, symbols.size());\n+            assertEquals(1024, symbols.bucketCount());\n+    \n+            assertEquals(15, symbols.collisionCount());\n+            assertEquals(1, symbols.maxCollisionLength());\n+        }\n+    }\n+    \n+    private String _shortDoc191() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\\n\");\n+        for (int i = 0; i < 400; ++i) {\n+            if (i > 0) {\n+                sb.append(\",\\n\");\n+            }\n+            sb.append('\"');\n+            char c = (char) i;\n+            if (Character.isLetterOrDigit(c)) {\n+                sb.append((char) i);\n+            } else {\n+                sb.append(String.format(\"\\\\u%04x\", i));\n+            }\n+            sb.append(\"\\\" : \"+i);\n+        }\n+        sb.append(\"}\\n\");\n+        return sb.toString();\n+    }\n }", "timestamp": 1429747132, "metainfo": ""}