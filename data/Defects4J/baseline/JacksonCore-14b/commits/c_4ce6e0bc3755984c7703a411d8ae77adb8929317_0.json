{"sha": "4ce6e0bc3755984c7703a411d8ae77adb8929317", "log": "and matchign changes to byte-based decoder too", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n     protected final static int INT_PERIOD = '.';\n     protected final static int INT_e = 'e';\n     protected final static int INT_E = 'E';\n+\n+    // other\n+    protected final static int INT_a = 'a';\n+    protected final static int INT_f = 'f';\n+    protected final static int INT_l = 'l';\n+    protected final static int INT_r = 'r';\n+    protected final static int INT_s = 's';\n+    protected final static int INT_t = 't';\n+    protected final static int INT_u = 'u';\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n         JsonToken t;\n \n         switch (i) {\n-        case '[':\n-            t = JsonToken.START_ARRAY;\n-            break;\n-        case '{':\n-            t = JsonToken.START_OBJECT;\n-            break;\n-        case 't':\n-            _matchToken(\"true\", 1);\n-            t = JsonToken.VALUE_TRUE;\n-            break;\n-        case 'f':\n-            _matchToken(\"false\", 1);\n-             t = JsonToken.VALUE_FALSE;\n-            break;\n-        case 'n':\n-            _matchToken(\"null\", 1);\n-            t = JsonToken.VALUE_NULL;\n-            break;\n-\n         case '-':\n             /* Should we have separate handling for plus? Although\n              * it is not allowed per se, it may be erroneously used,\n         case '9':\n             t = _parseNumber(i);\n             break;\n+        case 'f':\n+            _matchFalse();\n+             t = JsonToken.VALUE_FALSE;\n+            break;\n+        case 'n':\n+            _matchNull();\n+            t = JsonToken.VALUE_NULL;\n+            break;\n+        case 't':\n+            _matchTrue();\n+            t = JsonToken.VALUE_TRUE;\n+            break;\n+        case '[':\n+            t = JsonToken.START_ARRAY;\n+            break;\n+        case '{':\n+            t = JsonToken.START_OBJECT;\n+            break;\n+\n         default:\n             t = _handleUnexpectedValue(i);\n         }\n         return null;\n     }\n \n-    protected void _matchToken(String matchStr, int i)\n-        throws IOException\n+    private final  void _matchFalse() throws IOException {\n+        int ptr = _inputPtr;\n+        if ((ptr + 4) < _inputEnd) {\n+            final byte[] b = _inputBuffer;\n+            if (b[ptr] == INT_a && b[++ptr] == INT_l && b[++ptr] == INT_s && b[++ptr] == INT_e) {\n+                int c = b[++ptr] & 0xFF;\n+                if (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n+                    _inputPtr = ptr;\n+                    return;\n+                }\n+            }\n+        }\n+        // buffer boundary, or problem, offline\n+        _matchToken(\"false\", 1);\n+    }\n+    \n+    private final void _matchNull() throws IOException {\n+        int ptr = _inputPtr;\n+        if ((ptr + 3) < _inputEnd) {\n+            final byte[] b = _inputBuffer;\n+            if (b[ptr] == INT_u && b[++ptr] == INT_l && b[++ptr] == INT_l) {\n+                int c = b[++ptr] & 0xFF;\n+                if (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n+                    _inputPtr = ptr;\n+                    return;\n+                }\n+            }\n+        }\n+        // buffer boundary, or problem, offline\n+        _matchToken(\"null\", 1);\n+    }\n+\n+    private final void _matchTrue() throws IOException {\n+        int ptr = _inputPtr;\n+        if ((ptr + 3) < _inputEnd) {\n+            final byte[] b = _inputBuffer;\n+            if (b[ptr] == INT_r && b[++ptr] == INT_u && b[++ptr] == INT_e) {\n+                int c = b[++ptr] & 0xFF;\n+                if (c < '0' || c == ']' || c == '}') { // expected/allowed chars\n+                    _inputPtr = ptr;\n+                    return;\n+                }\n+            }\n+        }\n+        // buffer boundary, or problem, offline\n+        _matchToken(\"true\", 1);\n+    }\n+\n+    protected void _matchToken(String matchStr, int i) throws IOException\n     {\n         final int len = matchStr.length();\n-    \n         do {\n             if (((_inputPtr >= _inputEnd) && !loadMore())\n                 ||  (_inputBuffer[_inputPtr] != matchStr.charAt(i))) {", "timestamp": 1398741159, "metainfo": ""}