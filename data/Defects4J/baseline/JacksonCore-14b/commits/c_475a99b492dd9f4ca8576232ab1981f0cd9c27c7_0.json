{"sha": "475a99b492dd9f4ca8576232ab1981f0cd9c27c7", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n      * \n      * @since 2.3\n      */\n-    public boolean requiresPropertyOrdering() {\n-        return false;\n-    }\n+    public boolean requiresPropertyOrdering() { return false; }\n \n     /**\n      * Introspection method that higher-level functionality may call\n      * \n      * @since 2.3\n      */\n-    public boolean canHandleBinaryNatively() {\n-        return false;\n-    }\n-\n+    public boolean canHandleBinaryNatively() { return false; }\n+\n+    /**\n+     * Introspection method that can be used by base factory to check\n+     * whether access using <code>char[]</code> is something that actual\n+     * parser implementations can take advantage of, over having to\n+     * use {@link java.io.Reader}. Sub-types are expected to override\n+     * definition; default implementation (suitable for JSON) alleges\n+     * that optimization are possible; and thereby is likely to try\n+     * to access {@link java.lang.String} content by first copying it into\n+     * recyclable intermediate buffer.\n+     * \n+     * @since 2.4\n+     */\n+    public boolean canUseCharArrays() { return true; }\n+    \n     /*\n     /**********************************************************\n     /* Format detection functionality (since 1.8)\n     public JsonParser createParser(String content) throws IOException, JsonParseException {\n         final int strLen = content.length();\n         // Actually, let's use this for medium-sized content, up to 64kB chunk (32kb char)\n-        if (_inputDecorator != null || strLen > 0x8000) {\n+        if (_inputDecorator != null || strLen > 0x8000 || !canUseCharArrays()) {\n             // easier to just wrap in a Reader than extend InputDecorator; or, if content\n             // is too long for us to copy it over\n             return createParser(new StringReader(content));\n      * @param f File to write contents to\n      * @param enc Character encoding to use\n      * \n-     * \n      * @deprecated Since 2.2, use {@link #createGenerator(File,JsonEncoding)} instead.\n      */\n     @Deprecated\n                 _rootCharSymbols.makeChild(isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),\n                         isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES)),\n                         data, offset, offset+len,\n-                        // false -> caller-provided, not handled by BufferRecycler\n                         recyclable);\n     }\n ", "timestamp": 1398202370, "metainfo": ""}