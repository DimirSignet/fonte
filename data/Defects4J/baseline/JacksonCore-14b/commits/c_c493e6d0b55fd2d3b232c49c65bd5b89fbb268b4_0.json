{"sha": "c493e6d0b55fd2d3b232c49c65bd5b89fbb268b4", "log": "eclipse warning cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n     /**********************************************************\n      */\n     \n-    // @Override\n+    @Override\n     public DefaultPrettyPrinter createInstance() {\n         return new DefaultPrettyPrinter(this);\n     }\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public void writeRootValueSeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n         }\n     }\n \n-//  @Override\n+    @Override\n     public void writeStartObject(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n         }\n     }\n \n-//  @Override\n+    @Override\n     public void beforeObjectEntries(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n      * to output a colon as well, but can surround that with other\n      * (white-space) decoration.\n      */\n-//  @Override\n+    @Override\n     public void writeObjectFieldValueSeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n      * to output a comma as well, but can surround that with other\n      * (white-space) decoration.\n      */\n-//  @Override\n+    @Override\n     public void writeObjectEntrySeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n         _objectIndenter.writeIndentation(jg, _nesting);\n     }\n \n-//  @Override\n+    @Override\n     public void writeEndObject(JsonGenerator jg, int nrOfEntries)\n         throws IOException, JsonGenerationException\n     {\n         jg.writeRaw('}');\n     }\n \n-//  @Override\n+    @Override\n     public void writeStartArray(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n         jg.writeRaw('[');\n     }\n \n-//  @Override\n+    @Override\n     public void beforeArrayValues(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n      * to output a comma as well, but can surround that with other\n      * (white-space) decoration.\n      */\n-//  @Override\n+    @Override\n     public void writeArrayValueSeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n         _arrayIndenter.writeIndentation(jg, _nesting);\n     }\n \n-//  @Override\n+    @Override\n     public void writeEndArray(JsonGenerator jg, int nrOfValues)\n         throws IOException, JsonGenerationException\n     {\n         public static final NopIndenter instance = new NopIndenter();\n         \n         public NopIndenter() { }\n-//      @Override\n+        @Override\n         public void writeIndentation(JsonGenerator jg, int level) { }\n-//      @Override\n+        @Override\n         public boolean isInline() { return true; }\n     }\n \n \n         public FixedSpaceIndenter() { }\n \n-//      @Override\n+        @Override\n         public void writeIndentation(JsonGenerator jg, int level)\n             throws IOException, JsonGenerationException\n         {\n             jg.writeRaw(' ');\n         }\n \n-//      @Override\n+        @Override\n         public boolean isInline() { return true; }\n     }\n \n \n         public Lf2SpacesIndenter() { }\n \n-//      @Override\n+        @Override\n         public boolean isInline() { return false; }\n \n-//      @Override\n+        @Override\n         public void writeIndentation(JsonGenerator jg, int level)\n             throws IOException, JsonGenerationException\n         {\n--- a/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public void writeRootValueSeparator(JsonGenerator jg) throws IOException, JsonGenerationException\n     {\n         if (_rootValueSeparator != null) {\n         }\n     }\n     \n-//  @Override\n+    @Override\n     public void writeStartObject(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n         jg.writeRaw('{');\n     }\n     \n-//  @Override\n+    @Override\n     public void beforeObjectEntries(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n      * Default handling will just output a single\n      * colon to separate the two, without additional spaces.\n      */\n-//  @Override\n+    @Override\n     public void writeObjectFieldValueSeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n      * Default handling (without pretty-printing) will output a single\n      * comma to separate the two.\n      */\n-//  @Override\n+    @Override\n     public void writeObjectEntrySeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n         jg.writeRaw(',');\n     }\n \n-//  @Override\n+    @Override\n     public void writeEndObject(JsonGenerator jg, int nrOfEntries)\n         throws IOException, JsonGenerationException\n     {\n         jg.writeRaw('}');\n     }\n     \n-//  @Override\n+    @Override\n     public void writeStartArray(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n         jg.writeRaw('[');\n     }\n     \n-//  @Override\n+    @Override\n     public void beforeArrayValues(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n      * Default handling (without pretty-printing) will output a single\n      * comma to separate values.\n      */\n-//  @Override\n+    @Override\n     public void writeArrayValueSeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException\n     {\n         jg.writeRaw(',');\n     }\n     \n-//  @Override\n+    @Override\n     public void writeEndArray(JsonGenerator jg, int nrOfValues)\n         throws IOException, JsonGenerationException\n     {", "timestamp": 1361851384, "metainfo": ""}