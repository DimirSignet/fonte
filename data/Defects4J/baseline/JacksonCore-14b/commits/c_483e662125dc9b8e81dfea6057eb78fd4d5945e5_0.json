{"sha": "483e662125dc9b8e81dfea6057eb78fd4d5945e5", "log": "Fix handling of JsonGenerator.setFeatureMask()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n             ;\n \n         private final boolean _defaultState;\n-\n         private final int _mask;\n         \n         /**\n         }\n         \n         private Feature(boolean defaultState) {\n+            _defaultState = defaultState;\n             _mask = (1 << ordinal());\n-            _defaultState = defaultState;\n         }\n \n         public boolean enabledByDefault() { return _defaultState; }\n     public abstract int getFeatureMask();\n \n     /**\n-     * Bulk set method for (re)settting states of all standard {@link Feature}s\n+     * Bulk set method for (re)setting states of all standard {@link Feature}s\n      * \n      * @since 2.3\n      * \n+     * @param values Bitmask that defines which {@link Feature}s are enabled\n+     *    and which disabled\n+     *\n      * @return This parser object, to allow chaining of calls\n      */\n-    public abstract JsonGenerator setFeatureMask(int mask);\n-    \n+    public abstract JsonGenerator setFeatureMask(int values);\n+\n     /*\n     /**********************************************************\n     /* Public API, Schema configuration\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n  */\n public abstract class GeneratorBase extends JsonGenerator\n {\n+    /**\n+     * Set of feature masks related to features that need updates of other\n+     * local configuration or state.\n+     * \n+     * @since 2.5\n+     */\n+    protected final static int DERIVED_FEATURES_MASK = Feature.WRITE_NUMBERS_AS_STRINGS.getMask()\n+            | Feature.ESCAPE_NON_ASCII.getMask()\n+//            | Feature.STRICT_DUPLICATE_DETECTION.getMask()\n+            ;\n+\n     /*\n     /**********************************************************\n     /* Configuration\n \n     @Override\n     public JsonGenerator enable(Feature f) {\n-        _features |= f.getMask();\n-        if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n-            _cfgNumbersAsStrings = true;\n-        } else if (f == Feature.ESCAPE_NON_ASCII) {\n-            setHighestNonEscapedChar(127);\n+        final int mask = f.getMask();\n+        _features |= mask;\n+        if ((mask & DERIVED_FEATURES_MASK) != 0) {\n+            if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n+                _cfgNumbersAsStrings = true;\n+            } else if (f == Feature.ESCAPE_NON_ASCII) {\n+                setHighestNonEscapedChar(127);\n+                /*\n+            } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {\n+            */\n+                // !!! TODO\n+            }\n         }\n         return this;\n     }\n \n     @Override\n     public JsonGenerator disable(Feature f) {\n-        _features &= ~f.getMask();\n-        if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n-            _cfgNumbersAsStrings = false;\n-        } else if (f == Feature.ESCAPE_NON_ASCII) {\n-            setHighestNonEscapedChar(0);\n+        final int mask = f.getMask();\n+        _features &= ~mask;\n+        if ((mask & DERIVED_FEATURES_MASK) != 0) {\n+            if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n+                _cfgNumbersAsStrings = false;\n+            } else if (f == Feature.ESCAPE_NON_ASCII) {\n+                setHighestNonEscapedChar(0);\n+                /*\n+            } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {\n+                // !!! TODO\n+                 */\n+            }\n         }\n         return this;\n     }\n     @Override public final boolean isEnabled(Feature f) { return (_features & f.getMask()) != 0; }\n     @Override public int getFeatureMask() { return _features; }\n \n-    @Override public JsonGenerator setFeatureMask(int mask) {\n-        _features = mask;\n+    @Override public JsonGenerator setFeatureMask(int newMask) {\n+        int changed = newMask ^ _features;\n+        _features = newMask;\n+        if ((changed & DERIVED_FEATURES_MASK) != 0) {\n+            _cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(newMask);\n+            if (Feature.ESCAPE_NON_ASCII.enabledIn(changed)) {\n+                if (Feature.ESCAPE_NON_ASCII.enabledIn(newMask)) {\n+                    setHighestNonEscapedChar(127);\n+                } else {\n+                    setHighestNonEscapedChar(0);\n+                }\n+            }\n+            /*\n+            if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(changed)) {\n+                // !!! TODO\n+            }\n+            */\n+        }\n         return this;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n     @Deprecated\n     public static JsonWriteContext createRootContext() { return createRootContext(null); }\n \n-    public static JsonWriteContext createRootContext(DupDetector dd) { return new JsonWriteContext(TYPE_ROOT, null, dd); }\n+    public static JsonWriteContext createRootContext(DupDetector dd) {\n+        return new JsonWriteContext(TYPE_ROOT, null, dd);\n+    }\n \n     public JsonWriteContext createChildArrayContext() {\n         JsonWriteContext ctxt = _child;", "timestamp": 1415566039, "metainfo": ""}