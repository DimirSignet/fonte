{"sha": "fede6c9df74d370f2e728b5c46e14bd570abb83c", "log": "Fix #37", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n         if (_parsingContext.expectComma()) {\n             i = _skipComma(i);\n         }\n-        _updateLocation();\n-\n-        /* And should we now have a name? Always true for\n-         * Object contexts, since the intermediate 'expect-value'\n-         * state is never retained.\n+\n+        /* And should we now have a name? Always true for Object contexts, since\n+         * the intermediate 'expect-value' state is never retained.\n          */\n         boolean inObject = _parsingContext.inObject();\n         if (inObject) {\n-           // First, field name itself:\n+            // First, field name itself:\n+            _updateNameLocation();\n             String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n             _parsingContext.setCurrentName(name);\n             _currToken = JsonToken.FIELD_NAME;\n             i = _skipColon();\n         }\n+        _updateLocation();\n \n         // Ok: we must have a value... what is it?\n \n         if (_parsingContext.expectComma()) {\n             i = _skipComma(i);\n         }\n-        _updateLocation();\n \n         if (!_parsingContext.inObject()) {\n+            _updateLocation();\n             _nextTokenNotInObject(i);\n             return false;\n         }\n \n+        _updateNameLocation();\n         if (i == INT_QUOTE) {\n             // when doing literal match, must consider escaping:\n             char[] nameChars = sstr.asQuotedChars();\n         if (_parsingContext.expectComma()) {\n             i = _skipComma(i);\n         }\n-\n-        _updateLocation();\n         if (!_parsingContext.inObject()) {\n+            _updateLocation();\n             _nextTokenNotInObject(i);\n             return null;\n         }\n \n+        _updateNameLocation();\n         String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n         _parsingContext.setCurrentName(name);\n         _currToken = JsonToken.FIELD_NAME;\n         i = _skipColon();\n \n+        _updateLocation();\n         if (i == INT_QUOTE) {\n             _tokenIncomplete = true;\n             _nextToken = JsonToken.VALUE_STRING;\n     private final void _isNextTokenNameYes(int i) throws IOException\n     {\n         _currToken = JsonToken.FIELD_NAME;\n+        _updateLocation();\n \n         switch (i) {\n         case '\"':\n         _parsingContext.setCurrentName(name);\n         _currToken = JsonToken.FIELD_NAME;\n         i = _skipColon();\n+        _updateLocation();\n         if (i == INT_QUOTE) {\n             _tokenIncomplete = true;\n             _nextToken = JsonToken.VALUE_STRING;\n     public JsonLocation getTokenLocation()\n     {\n         final Object src = _ioContext.getSourceReference();\n+        if (_currToken == JsonToken.FIELD_NAME) {\n+            return new JsonLocation(src,\n+                    -1L, _nameInputTotal, _nameInputRow, _tokenInputCol);\n+        }\n         return new JsonLocation(src,\n-                -1L, getTokenCharacterOffset(),\n-                getTokenLineNr(),\n+                -1L, _tokenInputTotal, _tokenInputRow,\n                 getTokenColumnNr());\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n                     _nameInputTotal, -1L, _nameInputRow, _tokenInputCol);\n         }\n         return new JsonLocation(src,\n-                getTokenCharacterOffset(), -1L,\n-                getTokenLineNr(),\n+                _tokenInputTotal, -1L, _tokenInputRow,\n                 getTokenColumnNr());\n     }\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/json/LocationInObjectTest.java\n+package com.fasterxml.jackson.core.json;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+// tests for [core#37]\n+public class LocationInObjectTest extends BaseTest\n+{\n+    public void testOffsetWithObjectFieldsUsingUTF8() throws Exception\n+    {\n+        final JsonFactory f = new JsonFactory();\n+        byte[] b = \"{\\\"f1\\\":\\\"v1\\\",\\\"f2\\\":{\\\"f3\\\":\\\"v3\\\"},\\\"f4\\\":[true,false],\\\"f5\\\":5}\".getBytes(\"UTF-8\");\n+        //            1      6      11    16 17    22      28    33 34 39      46    51\n+        JsonParser p = f.createParser(b);\n+\n+        assertEquals(JsonToken.START_OBJECT, p.nextToken());\n+\n+        assertEquals(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(1L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(6L, p.getTokenLocation().getByteOffset());\n+\n+        assertEquals(\"f2\", p.nextFieldName());\n+        assertEquals(11L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.START_OBJECT, p.nextValue());\n+        assertEquals(16L, p.getTokenLocation().getByteOffset());\n+\n+        assertEquals(\"f3\", p.nextFieldName());\n+        assertEquals(17L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.VALUE_STRING, p.nextValue());\n+        assertEquals(22L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.END_OBJECT, p.nextToken());\n+\n+        assertEquals(\"f4\", p.nextFieldName());\n+        assertEquals(28L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.START_ARRAY, p.nextValue());\n+        assertEquals(33L, p.getTokenLocation().getByteOffset());\n+\n+        assertEquals(JsonToken.VALUE_TRUE, p.nextValue());\n+        assertEquals(34L, p.getTokenLocation().getByteOffset());\n+\n+        assertEquals(JsonToken.VALUE_FALSE, p.nextValue());\n+        assertEquals(39L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.END_ARRAY, p.nextToken());\n+\n+        assertEquals(\"f5\", p.nextFieldName());\n+        assertEquals(46L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+        assertEquals(51L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.END_OBJECT, p.nextToken());\n+\n+        p.close();\n+    }\n+\n+    public void testOffsetWithObjectFieldsUsingReader() throws Exception\n+    {\n+        final JsonFactory f = new JsonFactory();\n+        char[] c = \"{\\\"f1\\\":\\\"v1\\\",\\\"f2\\\":{\\\"f3\\\":\\\"v3\\\"},\\\"f4\\\":[true,false],\\\"f5\\\":5}\".toCharArray();\n+        //            1      6      11    16 17    22      28    33 34 39      46    51\n+        JsonParser p = f.createParser(c);\n+\n+        assertEquals(JsonToken.START_OBJECT, p.nextToken());\n+\n+        assertEquals(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(1L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(6L, p.getTokenLocation().getCharOffset());\n+\n+        assertEquals(\"f2\", p.nextFieldName());\n+        assertEquals(11L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.START_OBJECT, p.nextValue());\n+        assertEquals(16L, p.getTokenLocation().getCharOffset());\n+\n+        assertEquals(\"f3\", p.nextFieldName());\n+        assertEquals(17L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.VALUE_STRING, p.nextValue());\n+        assertEquals(22L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.END_OBJECT, p.nextToken());\n+\n+        assertEquals(\"f4\", p.nextFieldName());\n+        assertEquals(28L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.START_ARRAY, p.nextValue());\n+        assertEquals(33L, p.getTokenLocation().getCharOffset());\n+\n+        assertEquals(JsonToken.VALUE_TRUE, p.nextValue());\n+        assertEquals(34L, p.getTokenLocation().getCharOffset());\n+\n+        assertEquals(JsonToken.VALUE_FALSE, p.nextValue());\n+        assertEquals(39L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.END_ARRAY, p.nextToken());\n+\n+        assertEquals(\"f5\", p.nextFieldName());\n+        assertEquals(46L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+        assertEquals(51L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.END_OBJECT, p.nextToken());\n+\n+        p.close();\n+    }\n+}", "timestamp": 1448514151, "metainfo": ""}