{"sha": "2bb14b83d9ff7ff392973a0fa0ce860100cfc305", "log": "Add failing tests for #37, #229", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java\n // NOTE: just a stub so for, fill me!\n public class TestLocation extends com.fasterxml.jackson.core.BaseTest\n {\n+    final JsonFactory JSON_F = new JsonFactory();\n+\n     // Trivially simple unit test for basics wrt offsets\n     public void testSimpleInitialOffsets() throws Exception\n     {\n-        final JsonFactory f = new JsonFactory();\n         JsonLocation loc;\n         JsonParser p;\n         final String DOC = \"{ }\";\n \n         // first, char based:\n-        p = f.createParser(DOC);\n+        p = JSON_F.createParser(DOC);\n         assertToken(JsonToken.START_OBJECT, p.nextToken());\n \n         loc = p.getTokenLocation();\n \n         // then byte-based\n         \n-        p = f.createParser(DOC.getBytes(\"UTF-8\"));\n+        p = JSON_F.createParser(DOC.getBytes(\"UTF-8\"));\n         assertToken(JsonToken.START_OBJECT, p.nextToken());\n \n         loc = p.getTokenLocation();\n         p.close();\n     }\n \n-    // for [Issue#111]\n+    // for [core#111]\n     public void testOffsetWithInputOffset() throws Exception\n     {\n-        final JsonFactory f = new JsonFactory();\n         JsonLocation loc;\n         JsonParser p;\n         // 3 spaces before, 2 after, just for padding\n         byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n \n         // and then peel them off\n-        p = f.createParser(b, 3, b.length-5);\n+        p = JSON_F.createParser(b, 3, b.length-5);\n         assertToken(JsonToken.START_OBJECT, p.nextToken());\n \n         loc = p.getTokenLocation();\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/LocationInArrayTest.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+// Tests mostly for [core#229]\n+public class LocationInArrayTest extends com.fasterxml.jackson.core.BaseTest\n+{\n+    final JsonFactory JSON_F = new JsonFactory();\n+\n+    // for [core#229]\n+    public void testOffsetInArraysBytes() throws Exception {\n+        _testOffsetInArrays(true);\n+    }\n+    \n+    // for [core#229]\n+    public void testOffsetInArraysChars() throws Exception {\n+        _testOffsetInArrays(false);\n+    }        \n+\n+    private void _testOffsetInArrays(boolean useBytes) throws Exception\n+    {\n+        JsonParser p;\n+        final String DOC = \"  [10, 251,\\n   3  ]\";\n+\n+        // first, char based:\n+        p = useBytes ? JSON_F.createParser(DOC.getBytes(\"UTF-8\"))\n+                : JSON_F.createParser(DOC.toCharArray());\n+        assertToken(JsonToken.START_ARRAY, p.nextToken());\n+        _assertLocation(useBytes, p.getTokenLocation(), 2L, 1, 3);\n+        _assertLocation(useBytes, p.getCurrentLocation(), 3L, 1, 4);\n+\n+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+        _assertLocation(useBytes, p.getTokenLocation(), 3L, 1, 4);\n+        assertEquals(10, p.getIntValue()); // just to ensure read proceeds to end\n+        // 2-digits so\n+        _assertLocation(useBytes, p.getCurrentLocation(), 5L, 1, 6);\n+\n+        assertToken(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+        _assertLocation(useBytes, p.getTokenLocation(), 7L, 1, 8);\n+        assertEquals(251, p.getIntValue()); // just to ensure read proceeds to end\n+        _assertLocation(useBytes, p.getCurrentLocation(), 10L, 1, 11);\n+        \n+        p.close();\n+    }\n+\n+    private void _assertLocation(boolean useBytes, JsonLocation loc, long offset, int row, int col)\n+    {\n+        assertEquals(row, loc.getLineNr());\n+        assertEquals(col, loc.getColumnNr());\n+\n+        if (useBytes) {\n+            assertEquals(offset, loc.getByteOffset());\n+        } else {\n+            assertEquals(offset, loc.getCharOffset());\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/failing/LocationInObjectTest.java\n+package com.fasterxml.jackson.failing;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+// tests for [core#37]\n+public class LocationInObjectTest extends BaseTest\n+{\n+    public void testOffsetWithObjectFieldsUsingUTF8() throws Exception\n+    {\n+        final JsonFactory f = new JsonFactory();\n+        byte[] b = \"{\\\"f1\\\":\\\"v1\\\",\\\"f2\\\":{\\\"f3\\\":\\\"v3\\\"},\\\"f4\\\":[true,false],\\\"f5\\\":5}\".getBytes(\"UTF-8\");\n+        //            1      6      11    16 17    22      28    33 34 39      46    51\n+        JsonParser p = f.createParser(b);\n+\n+        assertEquals(JsonToken.START_OBJECT, p.nextToken());\n+\n+        assertEquals(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(1L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(6L, p.getTokenLocation().getByteOffset());\n+\n+        assertEquals(\"f2\", p.nextFieldName());\n+        assertEquals(11L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.START_OBJECT, p.nextValue());\n+        assertEquals(16L, p.getTokenLocation().getByteOffset());\n+\n+        assertEquals(\"f3\", p.nextFieldName());\n+        assertEquals(17L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.VALUE_STRING, p.nextValue());\n+        assertEquals(22L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.END_OBJECT, p.nextToken());\n+\n+        assertEquals(\"f4\", p.nextFieldName());\n+        assertEquals(28L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.START_ARRAY, p.nextValue());\n+        assertEquals(33L, p.getTokenLocation().getByteOffset());\n+\n+        assertEquals(JsonToken.VALUE_TRUE, p.nextValue());\n+        assertEquals(34L, p.getTokenLocation().getByteOffset());\n+\n+        assertEquals(JsonToken.VALUE_FALSE, p.nextValue());\n+        assertEquals(39L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.END_ARRAY, p.nextToken());\n+\n+        assertEquals(\"f5\", p.nextFieldName());\n+        assertEquals(46L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+        assertEquals(51L, p.getTokenLocation().getByteOffset());\n+        assertEquals(JsonToken.END_OBJECT, p.nextToken());\n+\n+        p.close();\n+    }\n+\n+    public void testOffsetWithObjectFieldsUsingReader() throws Exception\n+    {\n+        final JsonFactory f = new JsonFactory();\n+        char[] c = \"{\\\"f1\\\":\\\"v1\\\",\\\"f2\\\":{\\\"f3\\\":\\\"v3\\\"},\\\"f4\\\":[true,false],\\\"f5\\\":5}\".toCharArray();\n+        //            1      6      11    16 17    22      28    33 34 39      46    51\n+        JsonParser p = f.createParser(c);\n+\n+        assertEquals(JsonToken.START_OBJECT, p.nextToken());\n+\n+        assertEquals(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(1L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.VALUE_STRING, p.nextToken());\n+        assertEquals(6L, p.getTokenLocation().getCharOffset());\n+\n+        assertEquals(\"f2\", p.nextFieldName());\n+        assertEquals(11L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.START_OBJECT, p.nextValue());\n+        assertEquals(16L, p.getTokenLocation().getCharOffset());\n+\n+        assertEquals(\"f3\", p.nextFieldName());\n+        assertEquals(17L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.VALUE_STRING, p.nextValue());\n+        assertEquals(22L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.END_OBJECT, p.nextToken());\n+\n+        assertEquals(\"f4\", p.nextFieldName());\n+        assertEquals(28L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.START_ARRAY, p.nextValue());\n+        assertEquals(33L, p.getTokenLocation().getCharOffset());\n+\n+        assertEquals(JsonToken.VALUE_TRUE, p.nextValue());\n+        assertEquals(34L, p.getTokenLocation().getCharOffset());\n+\n+        assertEquals(JsonToken.VALUE_FALSE, p.nextValue());\n+        assertEquals(39L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.END_ARRAY, p.nextToken());\n+\n+        assertEquals(\"f5\", p.nextFieldName());\n+        assertEquals(46L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.VALUE_NUMBER_INT, p.nextToken());\n+        assertEquals(51L, p.getTokenLocation().getCharOffset());\n+        assertEquals(JsonToken.END_OBJECT, p.nextToken());\n+\n+        p.close();\n+    }\n+}", "timestamp": 1447656408, "metainfo": ""}