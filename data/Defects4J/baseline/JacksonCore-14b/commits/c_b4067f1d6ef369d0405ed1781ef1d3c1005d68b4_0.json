{"sha": "b4067f1d6ef369d0405ed1781ef1d3c1005d68b4", "log": "minor reordering of code", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n         }\n         _writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));\n     }\n+\n+    protected void _writeFieldName(String name, boolean commaBefore) throws IOException\n+    {\n+        if (_cfgPrettyPrinter != null) {\n+            _writePPFieldName(name, commaBefore);\n+            return;\n+        }\n+        // for fast+std case, need to output up to 2 chars, comma, dquote\n+        if ((_outputTail + 1) >= _outputEnd) {\n+            _flushBuffer();\n+        }\n+        if (commaBefore) {\n+            _outputBuffer[_outputTail++] = ',';\n+        }\n+        // Alternate mode, in which quoting of field names disabled?\n+        if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {\n+            _writeString(name);\n+            return;\n+        }\n+        // we know there's room for at least one more char\n+        _outputBuffer[_outputTail++] = '\"';\n+        // The beef:\n+        _writeString(name);\n+        // and closing quotes; need room for one more char:\n+        if (_outputTail >= _outputEnd) {\n+            _flushBuffer();\n+        }\n+        _outputBuffer[_outputTail++] = '\"';\n+    }\n+    \n+    protected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException\n+    {\n+        if (_cfgPrettyPrinter != null) {\n+            _writePPFieldName(name, commaBefore);\n+            return;\n+        }\n+        // for fast+std case, need to output up to 2 chars, comma, dquote\n+        if ((_outputTail + 1) >= _outputEnd) {\n+            _flushBuffer();\n+        }\n+        if (commaBefore) {\n+            _outputBuffer[_outputTail++] = ',';\n+        }\n+        // Alternate mode, in which quoting of field names disabled?\n+        final char[] quoted = name.asQuotedChars();\n+        if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {\n+            writeRaw(quoted, 0, quoted.length);\n+            return;\n+        }\n+        // we know there's room for at least one more char\n+        _outputBuffer[_outputTail++] = '\"';\n+        // The beef:\n+        final int qlen = quoted.length;\n+        if ((_outputTail + qlen + 1) >= _outputEnd) {\n+            writeRaw(quoted, 0, qlen);\n+            // and closing quotes; need room for one more char:\n+            if (_outputTail >= _outputEnd) {\n+                _flushBuffer();\n+            }\n+            _outputBuffer[_outputTail++] = '\"';\n+        } else {\n+            System.arraycopy(quoted, 0, _outputBuffer, _outputTail, qlen);\n+            _outputTail += qlen;\n+            _outputBuffer[_outputTail++] = '\"';\n+        }\n+    }\n     \n     /*\n     /**********************************************************\n         _writeContext = _writeContext.clearAndGetParent();\n     }\n \n-    protected void _writeFieldName(String name, boolean commaBefore) throws IOException\n-    {\n-        if (_cfgPrettyPrinter != null) {\n-            _writePPFieldName(name, commaBefore);\n-            return;\n-        }\n-        // for fast+std case, need to output up to 2 chars, comma, dquote\n-        if ((_outputTail + 1) >= _outputEnd) {\n-            _flushBuffer();\n-        }\n-        if (commaBefore) {\n-            _outputBuffer[_outputTail++] = ',';\n-        }\n-\n-        /* To support [JACKSON-46], we'll do this:\n-         * (Question: should quoting of spaces (etc) still be enabled?)\n-         */\n-        if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {\n-            _writeString(name);\n-            return;\n-        }\n-\n-        // we know there's room for at least one more char\n-        _outputBuffer[_outputTail++] = '\"';\n-        // The beef:\n-        _writeString(name);\n-        // and closing quotes; need room for one more char:\n-        if (_outputTail >= _outputEnd) {\n-            _flushBuffer();\n-        }\n-        _outputBuffer[_outputTail++] = '\"';\n-    }\n-\n-    protected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException\n-    {\n-        if (_cfgPrettyPrinter != null) {\n-            _writePPFieldName(name, commaBefore);\n-            return;\n-        }\n-        // for fast+std case, need to output up to 2 chars, comma, dquote\n-        if ((_outputTail + 1) >= _outputEnd) {\n-            _flushBuffer();\n-        }\n-        if (commaBefore) {\n-            _outputBuffer[_outputTail++] = ',';\n-        }\n-        /* To support [JACKSON-46], we'll do this:\n-         * (Question: should quoting of spaces (etc) still be enabled?)\n-         */\n-        final char[] quoted = name.asQuotedChars();\n-        if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {\n-            writeRaw(quoted, 0, quoted.length);\n-            return;\n-        }\n-        // we know there's room for at least one more char\n-        _outputBuffer[_outputTail++] = '\"';\n-        // The beef:\n-        final int qlen = quoted.length;\n-        if ((_outputTail + qlen + 1) >= _outputEnd) {\n-            writeRaw(quoted, 0, qlen);\n-            // and closing quotes; need room for one more char:\n-            if (_outputTail >= _outputEnd) {\n-                _flushBuffer();\n-            }\n-            _outputBuffer[_outputTail++] = '\"';\n-        } else {\n-            System.arraycopy(quoted, 0, _outputBuffer, _outputTail, qlen);\n-            _outputTail += qlen;\n-            _outputBuffer[_outputTail++] = '\"';\n-        }\n-    }\n-    \n     /**\n      * Specialized version of <code>_writeFieldName</code>, off-lined\n      * to keep the \"fast path\" as simple (and hopefully fast) as possible.\n      */\n-    protected void _writePPFieldName(String name, boolean commaBefore)\n-        throws IOException, JsonGenerationException\n+    protected void _writePPFieldName(String name, boolean commaBefore) throws IOException\n     {\n         if (commaBefore) {\n             _cfgPrettyPrinter.writeObjectEntrySeparator(this);\n         }\n     }\n \n-    protected void _writePPFieldName(SerializableString name, boolean commaBefore)\n-        throws IOException, JsonGenerationException\n+    protected void _writePPFieldName(SerializableString name, boolean commaBefore) throws IOException\n     {\n         if (commaBefore) {\n             _cfgPrettyPrinter.writeObjectEntrySeparator(this);", "timestamp": 1450765600, "metainfo": ""}