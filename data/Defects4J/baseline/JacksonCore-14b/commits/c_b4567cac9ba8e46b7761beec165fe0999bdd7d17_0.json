{"sha": "b4567cac9ba8e46b7761beec165fe0999bdd7d17", "log": "Add a new method in read/write contexts, to allow cleaning up of current value", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n     @Override public String getCurrentName() throws IOException {\n         // [JACKSON-395]: start markers require information from parent\n         if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n-            JsonReadContext parent = _parsingContext.getParent();\n+            JsonReadContext parent = _parsingContext.clearAndGetParent();\n             return parent.getCurrentName();\n         }\n         return _parsingContext.getCurrentName();\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n \n     @Override public String getCurrentName() { return _currentName; }\n     @Override public JsonReadContext getParent() { return _parent; }\n+\n+    /**\n+     * Method that can be used to both clear the accumulated references\n+     * (specifically value set with {@link #setCurrentValue(Object)})\n+     * that should not be retained, and returns parent (as would\n+     * {@link #getParent()} do). Typically called when closing the active\n+     * context when encountering {@link JsonToken#END_ARRAY} or\n+     * {@link JsonToken#END_OBJECT}.\n+     *\n+     * @since 2.7\n+     */\n+    public JsonReadContext clearAndGetParent() {\n+        _currentValue = null;\n+        // could also clear the current name, but seems cheap enough to leave?\n+        return _parent;\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n     @Override public final JsonWriteContext getParent() { return _parent; }\n     @Override public final String getCurrentName() { return _currentName; }\n \n+    /**\n+     * Method that can be used to both clear the accumulated references\n+     * (specifically value set with {@link #setCurrentValue(Object)})\n+     * that should not be retained, and returns parent (as would\n+     * {@link #getParent()} do). Typically called when closing the active\n+     * context when encountering {@link JsonToken#END_ARRAY} or\n+     * {@link JsonToken#END_OBJECT}.\n+     *\n+     * @since 2.7\n+     */\n+    public JsonWriteContext clearAndGetParent() {\n+        _currentValue = null;\n+        // could also clear the current name, but seems cheap enough to leave?\n+        return _parent;\n+    }\n+    \n     public DupDetector getDupDetector() {\n         return _dups;\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             return (_currToken = JsonToken.END_ARRAY);\n         }\n         if (i == INT_RCURLY) {\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             return (_currToken = JsonToken.END_OBJECT);\n         }\n \n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             _currToken = JsonToken.END_ARRAY;\n             return false;\n         }\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             _currToken = JsonToken.END_OBJECT;\n             return false;\n         }\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             _currToken = JsonToken.END_ARRAY;\n             return null;\n         }\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             _currToken = JsonToken.END_OBJECT;\n             return null;\n         }\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n             }\n             _outputBuffer[_outputTail++] = BYTE_RBRACKET;\n         }\n-        _writeContext = _writeContext.getParent();\n+        _writeContext = _writeContext.clearAndGetParent();\n     }\n \n     @Override\n             }\n             _outputBuffer[_outputTail++] = BYTE_RCURLY;\n         }\n-        _writeContext = _writeContext.getParent();\n+        _writeContext = _writeContext.clearAndGetParent();\n     }\n \n     /**\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             return (_currToken = JsonToken.END_ARRAY);\n         }\n         if (i == INT_RCURLY) {\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             return (_currToken = JsonToken.END_OBJECT);\n         }\n \n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             _currToken = JsonToken.END_ARRAY;\n             return false;\n         }\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             _currToken = JsonToken.END_OBJECT;\n             return false;\n         }\n             if (!_parsingContext.inArray()) {\n                 _reportMismatchedEndMarker(i, '}');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             _currToken = JsonToken.END_ARRAY;\n             return null;\n         }\n             if (!_parsingContext.inObject()) {\n                 _reportMismatchedEndMarker(i, ']');\n             }\n-            _parsingContext = _parsingContext.getParent();\n+            _parsingContext = _parsingContext.clearAndGetParent();\n             _currToken = JsonToken.END_OBJECT;\n             return null;\n         }\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n     final protected static int SHORT_WRITE = 32;\n \n     final protected static char[] HEX_CHARS = CharTypes.copyHexChars();\n-    \n+\n     /*\n     /**********************************************************\n     /* Output buffering\n      */\n \n     final protected Writer _writer;\n-    \n+\n     /**\n      * Intermediate buffer in which contents are buffered before\n      * being written using {@link #_writer}.\n             }\n             _outputBuffer[_outputTail++] = ']';\n         }\n-        _writeContext = _writeContext.getParent();\n+        _writeContext = _writeContext.clearAndGetParent();\n     }\n \n     @Override\n             }\n             _outputBuffer[_outputTail++] = '}';\n         }\n-        _writeContext = _writeContext.getParent();\n+        _writeContext = _writeContext.clearAndGetParent();\n     }\n \n     protected void _writeFieldName(String name, boolean commaBefore) throws IOException\n--- a/src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java\n+++ b/src/main/java/com/fasterxml/jackson/core/type/ResolvedType.java\n      * subtypes they may be different parameters or possibly none at all).\n      * \n      * @since 2.5\n+     *\n+     * @deprecated Since 2.7: does not have meaning as parameters depend on type\n+     *    resolved.\n      */\n+    @Deprecated // since 2.7\n     public Class<?> getParameterSource() {\n         return null;\n     }", "timestamp": 1450759628, "metainfo": ""}