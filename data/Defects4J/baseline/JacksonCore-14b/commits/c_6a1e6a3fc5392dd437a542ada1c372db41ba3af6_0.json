{"sha": "6a1e6a3fc5392dd437a542ada1c372db41ba3af6", "log": "Minor stylistic cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java\n      * to output a curly bracket as well, but can surround that\n      * with other (white-space) decoration.\n      */\n-    void writeStartObject(JsonGenerator jg)\n+    void writeStartObject(JsonGenerator gen)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * @param nrOfEntries Number of direct members of the array that\n      *   have been output\n      */\n-    void writeEndObject(JsonGenerator jg, int nrOfEntries)\n+    void writeEndObject(JsonGenerator gen, int nrOfEntries)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * to output a comma as well, but can surround that with other\n      * (white-space) decoration.\n      */\n-    void writeObjectEntrySeparator(JsonGenerator jg)\n+    void writeObjectEntrySeparator(JsonGenerator gen)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * to output a colon as well, but can surround that with other\n      * (white-space) decoration.\n      */\n-    void writeObjectFieldValueSeparator(JsonGenerator jg)\n+    void writeObjectFieldValueSeparator(JsonGenerator gen)\n         throws IOException, JsonGenerationException;\n \n     // // // Array handling\n      * to output a bracket as well, but can surround that\n      * with other (white-space) decoration.\n      */\n-    void writeStartArray(JsonGenerator jg)\n+    void writeStartArray(JsonGenerator gen)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * @param nrOfValues Number of direct members of the array that\n      *   have been output\n      */\n-    void writeEndArray(JsonGenerator jg, int nrOfValues)\n+    void writeEndArray(JsonGenerator gen, int nrOfValues)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * to output a comma as well, but can surround that with other\n      * (white-space) decoration.\n      */\n-    void writeArrayValueSeparator(JsonGenerator jg)\n+    void writeArrayValueSeparator(JsonGenerator gen)\n         throws IOException, JsonGenerationException;\n \n     /*\n      * Default handling does not output anything, but pretty-printer\n      * is free to add any white space decoration.\n      */\n-    void beforeArrayValues(JsonGenerator jg)\n+    void beforeArrayValues(JsonGenerator gen)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * Default handling does not output anything, but pretty-printer\n      * is free to add any white space decoration.\n      */\n-    void beforeObjectEntries(JsonGenerator jg)\n+    void beforeObjectEntries(JsonGenerator gen)\n         throws IOException, JsonGenerationException;\n }\n \n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultIndenter.java\n     private final int charsPerLevel;\n     private final String eol;\n \n-    /** Indent with two spaces and the system's default line feed */\n+    /**\n+     * Indent with two spaces and the system's default line feed\n+     */\n     public DefaultIndenter() {\n         this(\"  \", SYS_LF);\n     }\n     \n-    /** Create an indenter which uses the <code>indent</code> string to indent one level\n+    /**\n+     * Create an indenter which uses the <code>indent</code> string to indent one level\n      *  and the <code>eol</code> string to separate lines.\n      */\n     public DefaultIndenter(String indent, String eol)\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n      * @since 2.6.0\n      */\n     public DefaultPrettyPrinter withRootSeparator(String rootSeparator) {\n-        return withRootSeparator(new SerializedString(rootSeparator));\n+        return withRootSeparator((rootSeparator == null) ? null : new SerializedString(rootSeparator));\n     }\n     \n     public void indentArraysWith(Indenter i) {\n      * (white-space) decoration.\n      */\n     @Override\n-    public void writeArrayValueSeparator(JsonGenerator jg)\n-        throws IOException, JsonGenerationException\n-    {\n-        jg.writeRaw(',');\n-        _arrayIndenter.writeIndentation(jg, _nesting);\n-    }\n-\n-    @Override\n-    public void writeEndArray(JsonGenerator jg, int nrOfValues)\n-        throws IOException, JsonGenerationException\n+    public void writeArrayValueSeparator(JsonGenerator gen) throws IOException\n+    {\n+        gen.writeRaw(',');\n+        _arrayIndenter.writeIndentation(gen, _nesting);\n+    }\n+\n+    @Override\n+    public void writeEndArray(JsonGenerator gen, int nrOfValues) throws IOException\n     {\n         if (!_arrayIndenter.isInline()) {\n             --_nesting;\n         }\n         if (nrOfValues > 0) {\n-            _arrayIndenter.writeIndentation(jg, _nesting);\n+            _arrayIndenter.writeIndentation(gen, _nesting);\n         } else {\n-            jg.writeRaw(' ');\n-        }\n-        jg.writeRaw(']');\n+            gen.writeRaw(' ');\n+        }\n+        gen.writeRaw(']');\n     }\n \n     /*\n     }\n \n     /**\n-     * This is a very simple indenter that only every adds a\n+     * This is a very simple indenter that only adds a\n      * single space for indentation. It is used as the default\n      * indenter for array values.\n      */\n         public static final FixedSpaceIndenter instance = new FixedSpaceIndenter();\n \n         @Override\n-        public void writeIndentation(JsonGenerator jg, int level)\n-            throws IOException, JsonGenerationException\n+        public void writeIndentation(JsonGenerator jg, int level) throws IOException\n         {\n             jg.writeRaw(' ');\n         }", "timestamp": 1427261117, "metainfo": ""}