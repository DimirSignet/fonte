{"sha": "6f496e7a104700250ad0fa567c7338618f797438", "log": "Add test for #213", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/SymbolTableMergingTest.java\n+package com.fasterxml.jackson.core.sym;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;\n+import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;\n+\n+/**\n+ * Unit tests for verifying that {@link JsonParser} instances properly\n+ * merge back symbols to the root symbol table\n+ */\n+@SuppressWarnings(\"serial\")\n+public class SymbolTableMergingTest\n+    extends com.fasterxml.jackson.core.BaseTest\n+{\n+    /**\n+     * To peek into state of \"root\" symbol tables (parent of all symbol\n+     * tables for parsers constructed by this factory) we need to\n+     * add some methods.\n+     */\n+    final static class MyJsonFactory extends JsonFactory\n+    {\n+        public int byteSymbolCount() { return _byteSymbolCanonicalizer.size(); }\n+        public int charSymbolCount() { return _rootCharSymbols.size(); }\n+    }\n+\n+    final static String JSON = \"{ \\\"a\\\" : 3, \\\"aaa\\\" : 4, \\\"_a\\\" : 0 }\";\n+\n+    public void testByteSymbolsWithClose() throws Exception\n+    {\n+        _testWithClose(true);\n+    }\n+\n+    public void testByteSymbolsWithEOF() throws Exception\n+    {\n+        MyJsonFactory f = new MyJsonFactory();\n+        JsonParser jp = _getParser(f, JSON, true);\n+        while (jp.nextToken() != null) {\n+            // shouldn't update before hitting end\n+            assertEquals(0, f.byteSymbolCount());\n+        }\n+        // but now should have it after hitting EOF\n+        assertEquals(3, f.byteSymbolCount());\n+        jp.close();\n+        assertEquals(3, f.byteSymbolCount());\n+    }\n+\n+    public void testHashCalc() throws Exception\n+    {\n+        CharsToNameCanonicalizer sym = CharsToNameCanonicalizer.createRoot(123);\n+        char[] str1 = \"foo\".toCharArray();\n+        char[] str2 = \" foo \".toCharArray();\n+\n+        assertEquals(sym.calcHash(str1, 0, 3), sym.calcHash(str2, 1, 3));\n+    }\n+    \n+    public void testCharSymbolsWithClose() throws Exception\n+    {\n+        _testWithClose(false);\n+    }\n+\n+    public void testCharSymbolsWithEOF() throws Exception\n+    {\n+        MyJsonFactory f = new MyJsonFactory();\n+        JsonParser jp = _getParser(f, JSON, false);\n+        while (jp.nextToken() != null) {\n+            // shouldn't update before hitting end\n+            assertEquals(0, f.charSymbolCount());\n+        }\n+        // but now should have it\n+        assertEquals(3, f.charSymbolCount());\n+        jp.close();\n+        assertEquals(3, f.charSymbolCount());\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+\n+    private void _testWithClose(boolean useBytes) throws IOException\n+    {\n+        MyJsonFactory f = new MyJsonFactory();\n+        JsonParser jp = _getParser(f, JSON, useBytes);\n+        // Let's check 2 names\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+\n+        // shouldn't update before close or EOF:\n+        assertEquals(0, useBytes ? f.byteSymbolCount() : f.charSymbolCount());\n+        jp.close();\n+        // but should after close\n+        assertEquals(2, useBytes ? f.byteSymbolCount() : f.charSymbolCount());\n+    }\n+\n+    private JsonParser _getParser(MyJsonFactory f, String doc, boolean useBytes) throws IOException\n+    {\n+        JsonParser jp;\n+        if (useBytes) {\n+            jp = f.createParser(doc.getBytes(\"UTF-8\"));\n+            assertEquals(UTF8StreamJsonParser.class, jp.getClass());\n+            assertEquals(0, f.byteSymbolCount());\n+        } else {\n+            jp = f.createParser(doc);\n+            assertEquals(ReaderBasedJsonParser.class, jp.getClass());\n+            assertEquals(0, f.charSymbolCount());\n+        }\n+        return jp;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/SymbolsViaParserTest.java\n+package com.fasterxml.jackson.core.sym;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+/**\n+ * Tests that use symbol table functionality through parser.\n+ */\n+public class SymbolsViaParserTest\n+    extends com.fasterxml.jackson.core.BaseTest\n+{\n+    // for [jackson-core#213]\n+    public void test17CharSymbols() throws Exception\n+    {\n+        _test17Chars(false);\n+    }\n+\n+    // for [jackson-core#213]\n+    public void test17ByteSymbols() throws Exception\n+    {\n+        _test17Chars(true);\n+    }\n+\n+    private void _test17Chars(boolean useBytes) throws IOException\n+    {\n+        String doc = _createDoc();\n+        JsonFactory f = new JsonFactory();\n+        \n+        JsonParser p;\n+        if (useBytes) {\n+            p = f.createParser(doc.getBytes(\"UTF-8\"));\n+        } else {\n+            p = f.createParser(doc);\n+        }\n+        HashSet<String> syms = new HashSet<String>();\n+        assertToken(JsonToken.START_OBJECT, p.nextToken());\n+        for (int i = 0; i < 50; ++i) {\n+            assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+            syms.add(p.getCurrentName());\n+            assertToken(JsonToken.VALUE_TRUE, p.nextToken());\n+        }\n+        assertToken(JsonToken.END_OBJECT, p.nextToken());\n+        assertEquals(50, syms.size());\n+        p.close();\n+    }\n+\n+    private String _createDoc() {\n+        StringBuilder sb = new StringBuilder(1000);\n+        sb.append(\"{\\n\");\n+        for (int i = 1; i <= 50; ++i) {\n+            if (i > 1) {\n+                sb.append(\",\\n\");\n+            }\n+            sb.append(\"\\\"lengthmatters\")\n+                .append(1000 + i)\n+                .append(\"\\\": true\");\n+        }\n+        sb.append(\"\\n}\");\n+        return sb.toString();\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestHashCollisionChars.java\n /**\n  * Some unit tests to try to exercise part of parser code that\n  * deals with symbol (table) management.\n+ *<p>\n+ * Note that the problem does not necessarily affect code at or\n+ * after Jackson 2.6, since hash calculation algorithm has been\n+ * completely changed. It may still be relevant for character-backed\n+ * sources, however.\n  */\n public class TestHashCollisionChars\n     extends BaseTest\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n \n import com.fasterxml.jackson.core.*;\n \n+/**\n+ * Tests that directly modify/access underlying low-level symbol tables\n+ * (instead of indirectly using them via JsonParser).\n+ */\n public class TestSymbolTables extends com.fasterxml.jackson.core.BaseTest\n {\n     // Test for verifying stability of hashCode, wrt collisions, using\n                     symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());\n         }\n     }\n+\n+    // to verify [jackson-core#213] -- did not fail, but ruled out low-level bug\n+\n+    public void testLongSymbols17Bytes() throws Exception\n+    {\n+        ByteQuadsCanonicalizer symbolsB =\n+                ByteQuadsCanonicalizer.createRoot(3).makeChild(JsonFactory.Feature.collectDefaults());\n+        CharsToNameCanonicalizer symbolsC = CharsToNameCanonicalizer.createRoot(3);\n+\n+        for (int i = 1001; i <= 1050; ++i) {\n+            String id = \"lengthmatters\"+i;\n+            int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n+            symbolsB.addName(id, quads, quads.length);\n+            char[] idChars = id.toCharArray();\n+            symbolsC.findSymbol(idChars, 0, idChars.length, symbolsC.calcHash(id));\n+        }\n+        assertEquals(50, symbolsB.size());\n+        assertEquals(50, symbolsC.size());\n+    }\n }", "timestamp": 1441752052, "metainfo": ""}