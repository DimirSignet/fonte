{"sha": "333cde5e2017fefc0a4e20fb0a7d2046fb680a92", "log": "Merge branch 'master' of github.com:FasterXML/jackson-core", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n+++ b/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n package com.fasterxml.jackson.core;\n+\n+import java.util.Iterator;\n \n /**\n  * Marker interface used to denote JSON Tree nodes, as far as\n  * the core package knows them (which is very little): mostly\n  * needed to allow {@link ObjectCodec} to have some level\n  * of interoperability.\n- * All real functionality is within <code>JsonNode</code>\n+ * Most functionality is within <code>JsonNode</code>\n  * base class in <code>mapper</code> package.\n  *<p>\n  * Note that in Jackson 1.x <code>JsonNode</code> itself\n  * since conceptually Tree Model is part of mapper package,\n  * and so part visible to <code>core</code> package should\n  * be minimized.\n+ *<p>\n+ * NOTE: starting with Jackson 2.2, there is more functionality\n+ * available via this class, and the intent is that this should\n+ * form actual base for multiple alternative tree representations;\n+ * for example, immutable trees could use different implementation\n+ * than mutable trees. It should also be possible to move actual\n+ * Tree Model implementation out of databind package eventually\n+ * (Jackson 3?).\n  */\n public interface TreeNode\n {\n      */\n     JsonParser.NumberType numberType();\n \n+    /**\n+     * Method that returns number of child nodes this node contains:\n+     * for Array nodes, number of child elements, for Object nodes,\n+     * number of fields, and for all other nodes 0.\n+     *\n+     * @return For non-container nodes returns 0; for arrays number of\n+     *   contained elements, and for objects number of fields.\n+     * \n+     * @since 2.2\n+     */\n+    int size();\n+\n+    /**\n+     * Method that returns true for all value nodes: ones that \n+     * are not containers, and that do not represent \"missing\" nodes\n+     * in the path. Such value nodes represent String, Number, Boolean\n+     * and null values from JSON.\n+     *<p>\n+     * Note: one and only one of methods {@link #isValueNode},\n+     * {@link #isContainerNode} and {@link #isMissingNode} ever\n+     * returns true for any given node.\n+     * \n+     * @since 2.2\n+     */\n+    boolean isValueNode();\n+\n+    /**\n+     * Method that returns true for container nodes: Arrays and Objects.\n+     *<p>\n+     * Note: one and only one of methods {@link #isValueNode},\n+     * {@link #isContainerNode} and {@link #isMissingNode} ever\n+     * returns true for any given node.\n+     * \n+     * @since 2.2\n+     */\n+    boolean isContainerNode();\n+    \n+    /**\n+     * Method that returns true for \"virtual\" nodes which represent\n+     * missing entries constructed by path accessor methods when\n+     * there is no actual node matching given criteria.\n+     *<p>\n+     * Note: one and only one of methods {@link #isValueNode},\n+     * {@link #isContainerNode} and {@link #isMissingNode} ever\n+     * returns true for any given node.\n+     * \n+     * @since 2.2\n+     */\n+    boolean isMissingNode();\n+    \n+    /**\n+     * Method that returns true if this node is an Array node, false\n+     * otherwise.\n+     * Note that if true is returned, {@link #isContainerNode}\n+     * must also return true.\n+     * \n+     * @since 2.2\n+     */\n+    boolean isArray();\n+\n+    /**\n+     * Method that returns true if this node is an Object node, false\n+     * otherwise.\n+     * Note that if true is returned, {@link #isContainerNode}\n+     * must also return true.\n+     * \n+     * @since 2.2\n+     */\n+    boolean isObject();\n+    \n     /*\n     /**********************************************************\n-    /* Public API: converting to/from Streaming API\n+    /* Basic traversal through structured entries (Arrays, Objects)\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for accessing value of the specified field of\n+     * an object node. If this node is not an object (or it\n+     * does not have a value for specified field name), or\n+     * if there is no field with such name, null is returned.\n+     *<p>\n+     * NOTE: handling of explicit null values may vary between\n+     * implementations; some trees may retain explicit nulls, others\n+     * not.\n+     * \n+     * @return Node that represent value of the specified field,\n+     *   if this node is an object and has value for the specified\n+     *   field. Null otherwise.\n+     * \n+     * @since 2.2\n+     */\n+    TreeNode get(String fieldName);\n+\n+    /**\n+     * Method for accessing value of the specified element of\n+     * an array node. For other nodes, null is returned.\n+     *<p>\n+     * For array nodes, index specifies\n+     * exact location within array and allows for efficient iteration\n+     * over child elements (underlying storage is guaranteed to\n+     * be efficiently indexable, i.e. has random-access to elements).\n+     * If index is less than 0, or equal-or-greater than\n+     * <code>node.size()</code>, null is returned; no exception is\n+     * thrown for any index.\n+     *\n+     * @return Node that represent value of the specified element,\n+     *   if this node is an array and has specified element.\n+     *   Null otherwise.\n+     * \n+     * @since 2.2\n+     */\n+    TreeNode get(int index);\n+    \n+    /**\n+     * Method for accessing names of all fields for this node, iff\n+     * this node is an Object node. Number of field names accessible\n+     * will be {@link #size}.\n+     * \n+     * @since 2.2\n+     */\n+    Iterator<String> fieldNames();\n+    \n+    /*\n+    /**********************************************************\n+    /* Converting to/from Streaming API\n     /**********************************************************\n      */\n \n--- a/src/main/java/com/fasterxml/jackson/core/io/SerializedString.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/SerializedString.java\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public final String getValue() { return _value; }\n     \n     /**\n      * Returns length of the String as characters\n      */\n-//  @Override\n+    @Override\n     public final int charLength() { return _value.length(); }\n     \n-//  @Override\n+    @Override\n     public final char[] asQuotedChars()\n     {\n         char[] result = _quotedChars;\n      * Accessor for accessing value that has been quoted using JSON\n      * quoting rules, and encoded using UTF-8 encoding.\n      */\n-//  @Override\n+    @Override\n     public final byte[] asUnquotedUTF8()\n     {\n         byte[] result = _unquotedUTF8Ref;\n      * Accessor for accessing value as is (without JSON quoting)\n      * encoded using UTF-8 encoding.\n      */\n-//  @Override\n+    @Override\n     public final byte[] asQuotedUTF8()\n     {\n         byte[] result = _quotedUTF8Ref;\n     /**********************************************************\n      */\n \n-//  @Override\n+    @Override\n     public int appendQuotedUTF8(byte[] buffer, int offset)\n     {\n         byte[] result = _quotedUTF8Ref;\n         return length;\n     }\n \n-//  @Override\n+    @Override\n     public int appendQuoted(char[] buffer, int offset)\n     {\n         char[] result = _quotedChars;\n         return length;\n     }\n \n-//  @Override\n+    @Override\n     public int appendUnquotedUTF8(byte[] buffer, int offset)\n     {\n         byte[] result = _unquotedUTF8Ref;\n         return length;\n     }\n \n-//  @Override\n+    @Override\n     public int appendUnquoted(char[] buffer, int offset)\n     {\n         String str = _value;\n         return length;\n     }\n \n-//  @Override\n+    @Override\n     public int writeQuotedUTF8(OutputStream out) throws IOException\n     {\n         byte[] result = _quotedUTF8Ref;\n         return length;\n     }\n \n-//  @Override\n+    @Override\n     public int writeUnquotedUTF8(OutputStream out) throws IOException\n     {\n         byte[] result = _unquotedUTF8Ref;\n         return length;\n     }\n \n-//  @Override\n+    @Override\n     public int putQuotedUTF8(ByteBuffer buffer)\n     {\n         byte[] result = _quotedUTF8Ref;\n         return length;\n     }\n \n-//  @Override\n+    @Override\n     public int putUnquotedUTF8(ByteBuffer buffer)\n     {\n         byte[] result = _unquotedUTF8Ref;", "timestamp": 1360738646, "metainfo": ""}