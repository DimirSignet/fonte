{"sha": "9fc55aab41f7eb2f5992f948aac9d3c087b9652a", "log": "Implemented [JACKSON-730] for core package (need similar for databinding)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n {\n     /**\n      * Enumeration that defines all togglable features for generators.\n+     * \n+     * Note that some features can only be set for\n+     * {@link JsonFactory} (as defaults for generators), while others\n+     * can also be changed for generator instances:\n+     * ones that can be used with instances return <code>true</code>\n+     * from {@link #canUseForInstance}.\n+     * Trying enable/disable factory-only feature will result in\n+     * an {@link IllegalArgumentException}.\n      */\n     public enum Feature {\n         /**\n          * this happens when end-of-input is encountered, or generator\n          * is closed by a call to {@link JsonGenerator#close}.\n          *<p>\n-         * Feature is enabled by default.\n+         * Feature is enabled by default,\n+         * and it can be changed for generator instances.\n          */\n-        AUTO_CLOSE_TARGET(true),\n+        AUTO_CLOSE_TARGET(true, true),\n \n         /**\n          * Feature that determines what happens when the generator is\n          * Object(s) are automatically closed; if disabled, nothing\n          * specific is done.\n          *<p>\n-         * Feature is enabled by default.\n+         * Feature is enabled by default,\n+         * and it can be changed for generator instances.\n          */\n-        AUTO_CLOSE_JSON_CONTENT(true),\n+        AUTO_CLOSE_JSON_CONTENT(true, true),\n \n         /**\n          * Feature that determines whether JSON Object field names are\n          * or not. Ability to disable quoting was added to support use\n          * cases where they are not usually expected, which most commonly\n          * occurs when used straight from Javascript.\n+         *<p>\n+         * Feature is enabled by default (since it is required by JSON specification),\n+         * and it can be changed for generator instances.\n          */\n-        QUOTE_FIELD_NAMES(true),\n+        QUOTE_FIELD_NAMES(true, true),\n \n         /**\n          * Feature that determines whether \"exceptional\" (not real number)\n          * associated literal values, resulting in non-conformant\n          * output.\n          *<p>\n-         * Feature is enabled by default.\n+         * Feature is enabled by default,\n+         * and it can be changed for generator instances.\n          */\n-        QUOTE_NON_NUMERIC_NUMBERS(true),\n+        QUOTE_NON_NUMERIC_NUMBERS(true, true),\n \n         /**\n          * Feature that forces all Java numbers to be written as JSON strings.\n          * result being that some 64-bit integer values can not be\n          * accurately represent (as mantissa is only 51 bit wide).\n          *<p>\n-         * Feature is disabled by default.\n+         * Feature is disabled by default,\n+         * and it can be changed for generator instances.\n          */\n-        WRITE_NUMBERS_AS_STRINGS(false),\n+        WRITE_NUMBERS_AS_STRINGS(false, true),\n \n         /**\n          * Feature that specifies that calls to {@link #flush} will cause\n          * called by other code (like <code>ObjectMapper</code> or third\n          * party libraries).\n          *<p>\n-         * Feature is enabled by default.\n+         * Feature is enabled by default,\n+         * and it can be changed for generator instances.\n          */\n-        FLUSH_PASSED_TO_STREAM(true),\n+        FLUSH_PASSED_TO_STREAM(true, true),\n         \n         /**\n          * Feature that specifies that all characters beyond 7-bit ASCII\n          * using format-specific escapes (for JSON, backslash escapes),\n          * if format uses escaping mechanisms (which is generally true\n          * for textual formats but not for binary formats).\n+         *<p>\n+         * Feature is disabled by default,\n+         * and it can be changed for generator instances.\n          */\n-        ESCAPE_NON_ASCII(false)\n+        ESCAPE_NON_ASCII(false, true),\n         \n             ;\n \n-        final boolean _defaultState;\n-\n-        final int _mask;\n+        private final boolean _defaultState;\n+\n+        /**\n+         * Whether feature can be used for instances (true), or\n+         * just for factory (false).\n+         */\n+        private final boolean _canUseForInstance;\n+        \n+        private final int _mask;\n         \n         /**\n          * Method that calculates bit set (flags) of all features that\n             return flags;\n         }\n         \n-        private Feature(boolean defaultState) {\n+        private Feature(boolean defaultState, boolean canUseForInstance)\n+        {\n+            _mask = (1 << ordinal());\n             _defaultState = defaultState;\n-            _mask = (1 << ordinal());\n+            _canUseForInstance = canUseForInstance;\n         }\n         \n         public boolean enabledByDefault() { return _defaultState; }\n-    \n+        public boolean canUseForInstance() { return _canUseForInstance; }\n+\n         public int getMask() { return _mask; }\n     }\n \n      *<p>\n      * In general use of this accessor should be considered as\n      * \"last effort\", i.e. only used if no other mechanism is applicable.\n-     * \n-     * @since 1.8\n      */\n     public Object getOutputTarget() {\n         return null;\n      * check {@link Feature} for list of available features.\n      *\n      * @return Generator itself (this), to allow chaining\n-     *\n-     * @since 1.2\n      */\n     public abstract JsonGenerator enable(Feature f);\n \n      * (check {@link Feature} for list of features)\n      *\n      * @return Generator itself (this), to allow chaining\n-     *\n-     * @since 1.2\n      */\n     public abstract JsonGenerator disable(Feature f);\n \n      * check {@link Feature} for list of available features.\n      *\n      * @return Generator itself (this), to allow chaining\n-     *\n-     * @since 1.2\n-     */\n-    public JsonGenerator configure(Feature f, boolean state)\n+     */\n+    public final JsonGenerator configure(Feature f, boolean state)\n     {\n         if (state) {\n             enable(f);\n     /**\n      * Method for checking whether given feature is enabled.\n      * Check {@link Feature} for list of available features.\n-     *\n-     * @since 1.2\n      */\n     public abstract boolean isEnabled(Feature f);\n \n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     };\n \n     /**\n-     * Enumeration that defines all togglable features for parsers.\n+     * Enumeration that defines all on/off features for parsers.\n+     * \n+     * Note that some features can only be set for\n+     * {@link JsonFactory} (as defaults for parsers), while others\n+     * can also be changed directly for parser instances:\n+     * ones that can be used with instances return <code>true</code>\n+     * from {@link #canUseForInstance}.\n+     * Trying enable/disable factory-only feature will result in\n+     * an {@link IllegalArgumentException}.\n      */\n     public enum Feature {\n         \n          * this happens when end-of-input is encountered, or parser\n          * is closed by a call to {@link JsonParser#close}.\n          *<p>\n-         * Feature is enabled by default.\n+         * Feature is enabled by default;\n+         * and it can be changed for parser instances.\n          */\n-        AUTO_CLOSE_SOURCE(true),\n+        AUTO_CLOSE_SOURCE(true, true),\n             \n         // // // Support for non-standard data format constructs\n \n          * this is a non-standard feature; however, in the wild\n          * this is extensively used. As such, feature is\n          * <b>disabled by default</b> for parsers and must be\n-         * explicitly enabled (via factory or parser instance).\n-         *<p>\n-         * This feature can be changed for parser instances.\n+         * explicitly enabled.\n+         * Feature can be changed for parser instances.\n          */\n-        ALLOW_COMMENTS(false),\n+        ALLOW_COMMENTS(false, true),\n \n         /**\n          * Feature that determines whether parser will allow use\n          *<p>\n          * Since JSON specification requires use of double quotes for\n          * field names,\n-         * this is a non-standard feature, and as such disabled by\n-         * default.\n-         *<p>\n-         * This feature can be changed for parser instances.\n+         * this is a non-standard feature, and as such disabled by default.\n+         * Feature can be changed for parser instances.\n          */\n-        ALLOW_UNQUOTED_FIELD_NAMES(false),\n+        ALLOW_UNQUOTED_FIELD_NAMES(false, true),\n \n         /**\n          * Feature that determines whether parser will allow use\n          *<p>\n          * Since JSON specification requires use of double quotes for\n          * field names,\n-         * this is a non-standard feature, and as such disabled by\n-         * default.\n-         *<p>\n-         * This feature can be changed for parser instances.\n+         * this is a non-standard feature, and as such disabled by default.\n+         * Feature can be changed for parser instances.\n          */\n-        ALLOW_SINGLE_QUOTES(false),\n+        ALLOW_SINGLE_QUOTES(false, true),\n \n         /**\n          * Feature that determines whether parser will allow\n          *<p>\n          * Since JSON specification requires quoting for all control characters,\n          * this is a non-standard feature, and as such disabled by default.\n-         *<p>\n-         * This feature can be changed for parser instances.\n+         * Feature can be changed for parser instances.\n          */\n-        ALLOW_UNQUOTED_CONTROL_CHARS(false),\n+        ALLOW_UNQUOTED_CONTROL_CHARS(false, true),\n \n         /**\n          * Feature that can be enabled to accept quoting of all character\n          *<p>\n          * Since JSON specification requires quoting for all control characters,\n          * this is a non-standard feature, and as such disabled by default.\n-         *<p>\n-         * This feature can be changed for parser instances.\n+         * Feature can be changed for parser instances.\n          */\n-        ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(false),\n+        ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER(false, true),\n \n         /**\n          * Feature that determines whether parser will allow\n          *<p>\n          * Since JSON specification does not allow leading zeroes,\n          * this is a non-standard feature, and as such disabled by default.\n-         *<p>\n-         * This feature can be changed for parser instances.\n+         * Feature can be changed for parser instances.\n          */\n-        ALLOW_NUMERIC_LEADING_ZEROS(false),\n+        ALLOW_NUMERIC_LEADING_ZEROS(false, true),\n         \n         /**\n          * Feature that allows parser to recognize set of\n          *  <li>\"-INF\" (for negative infinity), alias \"-Infinity\"\n          *  <li>\"NaN\" (for other not-a-numbers, like result of division by zero)\n          *</ul>\n+         *<p>\n+         * Since JSON specification does not allow use of such values,\n+         * this is a non-standard feature, and as such disabled by default.\n+         * Feature can be changed for parser instances.\n          */\n-\n-         ALLOW_NON_NUMERIC_NUMBERS(false),\n+         ALLOW_NON_NUMERIC_NUMBERS(false, true),\n         \n         // // // Controlling canonicalization (interning etc)\n         \n          * Note: this setting only has effect if\n          * {@link #CANONICALIZE_FIELD_NAMES} is true -- otherwise no\n          * canonicalization of any sort is done.\n+         *<p>\n+         * This feature <b>can not</b> be changed for parser instances;\n+         * it <b>must</b> be defined for {@link JsonFactory} before\n+         * constructing parser.\n          */\n-        INTERN_FIELD_NAMES(true),\n+        INTERN_FIELD_NAMES(true, false),\n \n         /**\n          * Feature that determines whether JSON object field names are\n          * to be canonicalized (details of how canonicalization is done\n          * then further specified by\n          * {@link #INTERN_FIELD_NAMES}).\n+         *<p>\n+         * This feature <b>can not</b> be changed for parser instances;\n+         * it <b>must</b> be defined for {@link JsonFactory} before\n+         * constructing parser.\n          */\n-        CANONICALIZE_FIELD_NAMES(true),\n-\n-\n+        CANONICALIZE_FIELD_NAMES(true, false),\n             ;\n \n-        final boolean _defaultState;\n-\n+        /**\n+         * Whether feature is enabled or disabled by default.\n+         */\n+        private final boolean _defaultState;\n+\n+        /**\n+         * Whether feature can be used for instances (true), or\n+         * just for factory (false).\n+         */\n+        private final boolean _canUseForInstance;\n+        \n         /**\n          * Method that calculates bit set (flags) of all features that\n          * are enabled by default.\n             return flags;\n         }\n         \n-        private Feature(boolean defaultState) {\n+        private Feature(boolean defaultState, boolean canUseForInstance)\n+        {\n             _defaultState = defaultState;\n+            _canUseForInstance = canUseForInstance;\n         }\n         \n         public boolean enabledByDefault() { return _defaultState; }\n+        public boolean canUseForInstance() { return _canUseForInstance; }\n \n         public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n         \n      */\n     public JsonParser enable(Feature f)\n     {\n+        _checkFeature(f, true);\n         _features |= f.getMask();\n         return this;\n     }\n      */\n     public JsonParser disable(Feature f)\n     {\n+        _checkFeature(f, false);\n         _features &= ~f.getMask();\n         return this;\n     }\n      */\n     public JsonParser configure(Feature f, boolean state)\n     {\n+        _checkFeature(f, state);\n         if (state) {\n             enable(f);\n         } else {\n         }\n         return this;\n     }\n-\n+    \n     /**\n      * Method for checking whether specified {@link Feature} is enabled.\n      */\n         return (_features & f.getMask()) != 0;\n     }\n \n+    /**\n+     * Helper method called to verify that given feature can be\n+     * modified for parser instances.\n+     * \n+     * @since 2.0\n+     */\n+    protected void _checkFeature(Feature f, boolean state) {\n+        if (!f.canUseForInstance()) {\n+            throw new IllegalArgumentException(\"Can not change Feature \"+f.name()+\" for JsonParser instance\");\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Public API, traversal\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n \n     @Override\n     public JsonGenerator enable(Feature f) {\n+        _checkFeature(f, true);\n         _features |= f.getMask();\n         if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n             _cfgNumbersAsStrings = true;\n \n     @Override\n     public JsonGenerator disable(Feature f) {\n+        _checkFeature(f, false);\n         _features &= ~f.getMask();\n         if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n             _cfgNumbersAsStrings = false;\n         return (_features & f.getMask()) != 0;\n     }\n \n+    /**\n+     * Helper method called to verify that given feature can be\n+     * modified for parser instances.\n+     * \n+     * @since 2.0\n+     */\n+    protected void _checkFeature(Feature f, boolean state) {\n+        if (!f.canUseForInstance()) {\n+            throw new IllegalArgumentException(\"Can not change Feature \"+f.name()+\" for JsonParser instance\");\n+        }\n+    }\n+    \n     @Override\n     public JsonGenerator useDefaultPrettyPrinter() {\n         return setPrettyPrinter(new DefaultPrettyPrinter());\n         throw new RuntimeException(\"Internal error: this code path should never get executed\");\n     }\n \n-    /**\n-     * @since 1.7\n-     */\n     protected void _reportUnsupportedOperation() {\n         throw new UnsupportedOperationException(\"Operation not supported by generator of type \"+getClass().getName());\n     }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n         jp.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, false);\n         assertFalse(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));\n \n+        // note: can NOT change interning on parser instance, only factory\n+        // but it defaults to true anyway\n         assertTrue(jp.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));\n-        jp.configure(JsonParser.Feature.INTERN_FIELD_NAMES, false);\n-        assertFalse(jp.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));\n-        jp.configure(JsonParser.Feature.INTERN_FIELD_NAMES, true);\n-        assertTrue(jp.isEnabled(JsonParser.Feature.INTERN_FIELD_NAMES));\n-    }\n-\n-    public void testConfigDeprecated() throws Exception\n-    {\n-        JsonParser jp = createParserUsingReader(\"[ ]\");\n-        // and then deprecated methods\n-        jp.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\n-        assertTrue(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));\n-        jp.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\n-        assertFalse(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));\n-        jp.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, true);\n-        assertTrue(jp.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));\n     }\n \n     public void testInterningWithStreams() throws Exception\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java\n         _testTabsEnabled(true);\n     }\n \n+    // [JACKSON-730]\n+    public void testFactoryOnlyFeatures() throws Exception\n+    {\n+        JsonFactory f = new JsonFactory();\n+        JsonParser jp = f.createJsonParser(\"{ }\");\n+\n+        // should be ok to enable/disable most settings:\n+        jp.enable(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS);\n+\n+        // but not ones dealing with interning, canonicalization\n+        try {\n+            jp.enable(JsonParser.Feature.CANONICALIZE_FIELD_NAMES);\n+            fail(\"Should have failed with exception\");\n+        } catch (IllegalArgumentException e) {\n+            verifyException(e, \"Can not change Feature\");\n+        }\n+    }\n+    \n     /*\n     /****************************************************************\n     /* Secondary test methods", "timestamp": 1326936388, "metainfo": ""}