{"sha": "d962de910a0ab9241347e8dd4a636bc8fb506719", "log": "... and now really adding `JsonParser.nextFieldName()`", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n \n     /**\n      * Method that fetches next token (as if calling {@link #nextToken}) and\n+     * verifies whether it is {@link JsonToken#FIELD_NAME}; if it is,\n+     * returns same as {@link #getCurrentName()}, otherwise null.\n+     * \n+     * @since 2.5\n+     */\n+    public String nextFieldName() throws IOException, JsonParseException {\n+        return (nextToken() == JsonToken.FIELD_NAME)\n+                ? getCurrentName() : null;\n+    }\n+\n+    /**\n+     * Method that fetches next token (as if calling {@link #nextToken}) and\n      * if it is {@link JsonToken#VALUE_STRING} returns contained String value;\n      * otherwise returns null.\n      * It is functionally equivalent to:\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n         _testIsNextTokenName1(true);\n         _testIsNextTokenName2(false);\n         _testIsNextTokenName2(true);\n+        _testIsNextTokenName3(false);\n+        _testIsNextTokenName3(true);\n     }\n \n     // [Issue#34]\n         jp.close();\n     }\n \n+    private void _testIsNextTokenName3(boolean useStream) throws Exception\n+    {\n+        final String DOC = \"{\\\"name\\\":123,\\\"name2\\\":14,\\\"x\\\":\\\"name\\\"}\";\n+        JsonFactory jf = new JsonFactory();\n+        JsonParser jp = useStream ?\n+            jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : jf.createParser(new StringReader(DOC));\n+        assertNull(jp.nextFieldName());\n+        assertToken(JsonToken.START_OBJECT, jp.getCurrentToken());\n+        assertEquals(\"name\", jp.nextFieldName());\n+        assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n+        assertEquals(\"name\", jp.getCurrentName());\n+        assertEquals(\"name\", jp.getText());\n+        assertNull(jp.nextFieldName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken());\n+        assertEquals(123, jp.getIntValue());\n+\n+        assertEquals(\"name2\", jp.nextFieldName());\n+        assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n+        assertEquals(\"name2\", jp.getCurrentName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+\n+        assertEquals(\"x\", jp.nextFieldName());\n+        assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n+        assertEquals(\"x\", jp.getCurrentName());\n+\n+        assertNull(jp.nextFieldName());\n+        assertToken(JsonToken.VALUE_STRING, jp.getCurrentToken());\n+\n+        assertNull(jp.nextFieldName());\n+        assertToken(JsonToken.END_OBJECT, jp.getCurrentToken());\n+\n+        assertNull(jp.nextFieldName());\n+        assertNull(jp.getCurrentToken());\n+\n+        jp.close();\n+    }\n+\n     private void _testIssue34(boolean useStream) throws Exception\n     {\n         final int TESTROUNDS = 223;\n         final String DOC_PART = \"{ \\\"fieldName\\\": 1 }\";\n-        \n+\n         // build the big document to trigger issue\n         StringBuilder sb = new StringBuilder(2000);\n         for (int i = 0; i < TESTROUNDS; ++i) {\n             sb.append(DOC_PART);\n         }\n         final String DOC = sb.toString();\n-        \n+\n         SerializableString fieldName = new SerializedString(\"fieldName\");\n         JsonFactory jf = new JsonFactory();\n         JsonParser parser = useStream ?", "timestamp": 1418324264, "metainfo": ""}