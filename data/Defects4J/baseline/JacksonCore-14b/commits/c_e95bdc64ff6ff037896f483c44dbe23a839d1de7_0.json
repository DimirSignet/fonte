{"sha": "e95bdc64ff6ff037896f483c44dbe23a839d1de7", "log": "more testing for generator filtering", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n \n     protected void writeJsonDoc(JsonFactory f, String doc, JsonGenerator g) throws IOException\n     {\n-        JsonParser p = f.createParser(doc);\n+        JsonParser p = f.createParser(aposToQuotes(doc));\n         \n         while (p.nextToken() != null) {\n             g.copyCurrentStructure(p);\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java\n  * Low-level tests for explicit, hand-written tests for generator-side\n  * filtering.\n  */\n+@SuppressWarnings(\"resource\")\n public class BasicGeneratorFilteringTest extends com.fasterxml.jackson.core.BaseTest\n {\n     static class NameMatchFilter extends TokenFilter\n         // First, verify non-filtering\n         StringWriter w = new StringWriter();\n         JsonGenerator gen = JSON_F.createGenerator(w);\n-        _writeSimpleDoc(gen);\n-        gen.close();\n+        final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n+        writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\n                 \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\"),\n                 w.toString());\n                 false, // includePath\n                 false // multipleMatches\n                 );\n-        \n-        _writeSimpleDoc(gen);\n-        gen.close();\n+        final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n+        writeJsonDoc(JSON_F, JSON, gen);\n         // Since properties MUST be contained within an Object, inclusion needs\n          // to materialize surrounding Object too!\n         assertEquals(aposToQuotes(\"{'value':3}\"), w.toString());\n                 true, // includePath\n                 false // multipleMatches\n                 );\n-        \n-        _writeSimpleDoc(gen);\n-        gen.close();\n+        final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n+        writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), w.toString());\n     }\n \n         JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new NameMatchFilter(\"value0\", \"value2\"),\n                 true, /* includePath */ true /* multipleMatches */ );\n-        _writeSimpleDoc(gen);\n-        gen.close();\n+        final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n+        writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'ob':{'value0':2,'value2':4}}\"), w.toString());\n     }\n \n         JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new NameMatchFilter(\"array\", \"b\", \"value\"),\n                 true, true);\n-        _writeSimpleDoc(gen);\n-        gen.close();\n+        final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n+        writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'array':[1,2],'ob':{'value':3},'b':true}\"), w.toString());\n     }\n \n+    public void testMultipleMatchFilteringWithPath3() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        \n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"value\"),\n+                true, true);\n+        final String JSON = \"{'root':{'a0':true,'a':{'value':3},'b':{'value':4}},'b0':false}\";\n+        writeJsonDoc(JSON_F, JSON, gen);\n+        assertEquals(aposToQuotes(\"{'root':{'a':{'value':3},'b':{'value':4}}}\"), w.toString());\n+    }\n+    \n     public void testIndexMatchWithPath1() throws Exception\n     {\n         StringWriter w = new StringWriter();\n         JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new IndexMatchFilter(1),\n                 true, true);\n-        _writeSimpleDoc(gen);\n-        gen.close();\n+        final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n+        writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'array':[2]}\"), w.toString());\n \n         w = new StringWriter();\n         gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new IndexMatchFilter(0),\n                 true, true);\n-        _writeSimpleDoc(gen);\n-        gen.close();\n+        writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'array':[1]}\"), w.toString());\n     }\n \n         JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new IndexMatchFilter(0,1),\n                 true, true);\n-        _writeSimpleDoc(gen);\n-        gen.close();\n+        final String JSON = \"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\";\n+        writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'array':[1,2]}\"), w.toString());\n     }\n-\n-    protected void _writeSimpleDoc(JsonGenerator gen) throws IOException\n-    {\n-        // { \"a\" : 123,\n-        //   \"array\" : [ 1, 2 ],\n-        //   \"ob\" : { \"value\" : 3 },\n-        //   \"b\" : true\n-        // }\n-\n-        gen.writeStartObject();\n-\n-        gen.writeFieldName(\"a\");\n-        gen.writeNumber(123);\n-        \n-        gen.writeFieldName(\"array\");\n-        gen.writeStartArray();\n-        gen.writeNumber(1);\n-        gen.writeNumber(2);\n-        gen.writeEndArray();\n-\n-        gen.writeFieldName(\"ob\");\n-        gen.writeStartObject();\n-        gen.writeFieldName(\"value0\");\n-        gen.writeNumber(2);\n-        gen.writeFieldName(\"value\");\n-        gen.writeNumber(3);\n-        gen.writeFieldName(\"value2\");\n-        gen.writeNumber(4);\n-        gen.writeEndObject();\n-\n-        gen.writeFieldName(\"b\");\n-        gen.writeBoolean(true);\n-\n-        gen.writeEndObject();\n-    }\n }", "timestamp": 1428721058, "metainfo": ""}