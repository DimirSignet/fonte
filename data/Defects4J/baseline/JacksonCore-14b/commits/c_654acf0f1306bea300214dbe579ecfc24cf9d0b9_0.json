{"sha": "654acf0f1306bea300214dbe579ecfc24cf9d0b9", "log": "Fixes to parser-filtering, first test now passes", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n                 f = f.filterStartArray();\n             }\n             _itemFilter = f;\n-            _headContext = _headContext.createChildArrayContext(f, true);\n             if (f == TokenFilter.INCLUDE_ALL) {\n+                _headContext = _headContext.createChildArrayContext(f, true);\n                 return (_currToken = t);\n             }\n-            // but if we didn't figure it out yet, need to buffer possible events\n-            return _nextTokenWithBuffering(_headContext);\n+            _headContext = _headContext.createChildArrayContext(f, false);\n+            \n+            // Also: only need buffering if parent path to be included\n+            if (_includePath) {\n+                return _nextTokenWithBuffering(_headContext);\n+            }\n+            break;\n \n         case ID_START_OBJECT:\n             f = _itemFilter;\n                 f = f.filterStartObject();\n             }\n             _itemFilter = f;\n-            _headContext = _headContext.createChildObjectContext(f, true);\n             if (f == TokenFilter.INCLUDE_ALL) {\n+                _headContext = _headContext.createChildObjectContext(f, true);\n                 return (_currToken = t);\n             }\n-            // but if we didn't figure it out yet, need to buffer possible events\n-            return _nextTokenWithBuffering(_headContext);\n+            _headContext = _headContext.createChildObjectContext(f, false);\n+            // Also: only need buffering if parent path to be included\n+            if (_includePath) {\n+                return _nextTokenWithBuffering(_headContext);\n+            }\n+            // note: inclusion of surrounding Object handled separately via\n+            // FIELD_NAME\n+            break;\n \n         case ID_END_ARRAY:\n         case ID_END_OBJECT:\n                 f = _headContext.setFieldName(name);\n                 if (f == TokenFilter.INCLUDE_ALL) {\n                     _itemFilter = f;\n+                    // Minor twist here: if parent NOT included, may need to induce output of\n+                    // surrounding START_OBJECT/END_OBJECT\n+                    if (!_includePath && !_headContext.isStartHandled()) {\n+                        t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n+                        _exposedContext = _headContext;\n+                    }\n                     return (_currToken = t);\n                 }\n-                if (f == null) { // filter out the value\n+                if (f == null) {\n                     delegate.nextToken();\n                     delegate.skipChildren();\n                     break;\n                 }\n                 f = f.includeProperty(name);\n-                if (f == null) { // filter out the value\n+                if (f == null) {\n                     delegate.nextToken();\n                     delegate.skipChildren();\n                     break;\n                 if (f == TokenFilter.INCLUDE_ALL) {\n                     return (_currToken = t);\n                 }\n-                return _nextTokenWithBuffering(_headContext);\n+                if (_includePath) {\n+                    return _nextTokenWithBuffering(_headContext);\n+                }\n+                break;\n             }\n \n         default: // scalar value\n                     f = f.filterStartArray();\n                 }\n                 _itemFilter = f;\n-                _headContext = _headContext.createChildArrayContext(f, true);\n                 if (f == TokenFilter.INCLUDE_ALL) {\n+                    _headContext = _headContext.createChildArrayContext(f, true);\n                     return (_currToken = t);\n                 }\n+                _headContext = _headContext.createChildArrayContext(f, false);\n                 // but if we didn't figure it out yet, need to buffer possible events\n-                return _nextTokenWithBuffering(_headContext);\n+                if (_includePath) {\n+                    return _nextTokenWithBuffering(_headContext);\n+                }\n+                continue main_loop;\n \n             case ID_START_OBJECT:\n                 f = _itemFilter;\n                     f = f.filterStartObject();\n                 }\n                 _itemFilter = f;\n-                _headContext = _headContext.createChildObjectContext(f, true);\n                 if (f == TokenFilter.INCLUDE_ALL) {\n+                    _headContext = _headContext.createChildObjectContext(f, true);\n                     return (_currToken = t);\n                 }\n-                // but if we didn't figure it out yet, need to buffer possible events\n-                return _nextTokenWithBuffering(_headContext);\n+                _headContext = _headContext.createChildObjectContext(f, false);\n+                if (_includePath) {\n+                    return _nextTokenWithBuffering(_headContext);\n+                }\n+                continue main_loop;\n \n             case ID_END_ARRAY:\n             case ID_END_OBJECT:\n                     if (f == TokenFilter.INCLUDE_ALL) {\n                         return (_currToken = t);\n                     }\n-                }\n-                return _nextTokenWithBuffering(_headContext);\n+                    if (_includePath) {\n+                        return _nextTokenWithBuffering(_headContext);\n+                    }\n+                }\n+                continue main_loop;\n \n             default: // scalar value\n                 if (_itemFilter == TokenFilter.INCLUDE_ALL) {\n     protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n         throws IOException\n     {\n-        _exposedContext = _headContext;\n+        _exposedContext = buffRoot;\n \n         main_loop:\n         while (true) {", "timestamp": 1429223443, "metainfo": ""}