{"sha": "37d0d6e8356d8ad72f6ebe2e72219e697b190d55", "log": "... more on filtering", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n     public JsonToken nextToken() throws IOException\n     {\n         // Anything buffered?\n-        if (_exposedContext != null) {\n+        TokenFilterContext ctxt = _exposedContext;\n+        if (ctxt != null) {\n+            while (true) {\n+                JsonToken t = _exposedContext.nextTokenToRead(_currToken);\n+                if (t != null) {\n+                    _currToken = t;\n+                    return t;\n+                }\n+                // all done with buffered stuff?\n+                if (ctxt == _headContext) {\n+                    _exposedContext = null;\n+                    break;\n+                }\n+                // If not, traverse down the context chain\n+                ctxt = _exposedContext.findChildOf(_exposedContext);\n+                _exposedContext = ctxt;\n+                if (ctxt == null) { // should never occur\n+                    throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n+                }\n+            }\n+        }\n+\n+        // If not, need to \n+        JsonToken t = delegate.nextToken();\n+        if (t == null) {\n             \n         }\n-        return delegate.nextToken();\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java\n package com.fasterxml.jackson.core.filter;\n \n+import java.io.IOException;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n \n /**\n  * Strategy class that can be implemented to specify actual inclusion/exclusion\n     public TokenFilter includeRootValue(int index) {\n         return this;\n     }\n-    \n-    /*\n-    /**********************************************************\n-    /* API, scalas values\n+\n+    /*\n+    /**********************************************************\n+    /* API, scalar values (being read)\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Call made when verifying whether a scaler value is being\n+     * read from a parser.\n+     *<p>\n+     * Default action is to call {@link #_includeScalar()} and return\n+     * whatever it indicates.\n+     */\n+    public boolean includeValue(JsonParser p) throws IOException {\n+        return _includeScalar();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* API, scalar values (being written)\n     /**********************************************************\n      */\n ", "timestamp": 1429066090, "metainfo": ""}