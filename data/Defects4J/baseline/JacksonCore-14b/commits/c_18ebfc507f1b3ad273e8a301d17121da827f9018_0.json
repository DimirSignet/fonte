{"sha": "18ebfc507f1b3ad273e8a301d17121da827f9018", "log": "one more test for byte-based symbol table (to guard against regressions)", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n      * available methods, and ensures results are consistent, before\n      * returning them\n      */\n-    protected String getAndVerifyText(JsonParser jp)\n-        throws IOException, JsonParseException\n+    protected String getAndVerifyText(JsonParser jp) throws IOException\n     {\n         // Ok, let's verify other accessors\n         int actLen = jp.getTextLength();\n         return result;\n     }\n \n-    public String quote(String str) {\n+    protected String quote(String str) {\n         return '\"'+str+'\"';\n+    }\n+\n+    protected String aposToQuotes(String json) {\n+        return json.replace(\"'\", \"\\\"\");\n     }\n \n     protected void fieldNameFor(StringBuilder sb, int index)\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n package com.fasterxml.jackson.core.sym;\n \n import java.io.IOException;\n+import java.lang.reflect.Field;\n import java.nio.charset.Charset;\n \n-import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;\n \n public class TestSymbolTables extends com.fasterxml.jackson.core.BaseTest\n {\n             symbolsC.release();\n         }\n     }\n+\n+    // And then one more test just for Bytes-based symbol table\n+    public void testByteBasedSymbolTable() throws Exception\n+    {\n+        // combination of short, medium1/2, long names...\n+        final String JSON = aposToQuotes(\"{'abc':1, 'abc\\\\u0000':2, '\\\\u0000abc':3, \"\n+                // then some medium\n+                +\"'abc123':4,'abcd1234':5,\"\n+                +\"'abcd1234a':6,'abcd1234abcd':7,\"\n+                +\"'abcd1234abcd1':8\"\n+                +\"}\");\n+\n+        JsonFactory f = new JsonFactory();\n+        JsonParser p = f.createParser(JSON.getBytes(\"UTF-8\"));\n+        assertEquals(0, _findSymbolCount(p));\n+        _streamThrough(p);\n+        assertEquals(8, _findSymbolCount(p));\n+        p.close();\n+\n+        // and, for fun, try again\n+        p = f.createParser(JSON.getBytes(\"UTF-8\"));\n+        _streamThrough(p);\n+        assertEquals(8, _findSymbolCount(p));\n+        p.close();\n+    }\n+\n+    private void _streamThrough(JsonParser p) throws IOException\n+    {\n+        while (p.nextToken() != null) { }\n+    }\n+    \n+    private int _findSymbolCount(JsonParser p) throws Exception\n+    {\n+        Field syms = p.getClass().getDeclaredField(\"_symbols\");\n+        syms.setAccessible(true);\n+        return ((BytesToNameCanonicalizer) syms.get(p)).size();\n+    }\n }", "timestamp": 1423029525, "metainfo": ""}