{"sha": "496f3fc5d6f8dc3a10a8d87fa966008f618fe870", "log": "Merge branch 'master' of github.com:FasterXML/jackson-core", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n     protected GeneratorBase(int features, ObjectCodec codec) {\n         super();\n         _features = features;\n+        _objectCodec = codec;\n         DupDetector dups = Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features)\n                 ? DupDetector.rootDetector(this) : null;\n         _writeContext = JsonWriteContext.createRootContext(dups);\n+        _cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(features);\n+    }\n+\n+    /**\n+     * @since 2.5\n+     */\n+    protected GeneratorBase(int features, ObjectCodec codec, JsonWriteContext ctxt) {\n+        super();\n+        _features = features;\n         _objectCodec = codec;\n+        _writeContext = ctxt;\n         _cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(features);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     protected JsonToken _parsePosNumber(int c) throws IOException\n     {\n         char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();\n-        int outPtr = 0;\n         // One special case: if first char is 0, must not be followed by a digit\n         if (c == INT_0) {\n             c = _verifyNoLeadingZeroes();\n         }\n         // Ok: we can first just add digit we saw first:\n-        outBuf[outPtr++] = (char) c;\n+        outBuf[0] = (char) c;\n         int intLen = 1;\n+        int outPtr = 1;\n         // And then figure out how far we can read without further checks\n         // for either input or output\n-        int end = _inputPtr + outBuf.length;\n+        int end = _inputPtr + outBuf.length - 1; // 1 == outPtr\n         if (end > _inputEnd) {\n             end = _inputEnd;\n         }\n \n         // And then figure out how far we can read without further checks\n         // for either input or output\n-        int end = _inputPtr + outBuf.length;\n+        int end = _inputPtr + outBuf.length - outPtr;\n         if (end > _inputEnd) {\n             end = _inputEnd;\n         }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n         }\n     }\n \n+    // [jackson-core#157]\n+    public void testLongNumbers() throws Exception\n+    {\n+        StringBuilder sb = new StringBuilder(9000);\n+        for (int i = 0; i < 9000; ++i) {\n+            sb.append('9');\n+        }\n+        String NUM = sb.toString();\n+        // force use of new factory, just in case (might still recycle same buffers tho?)\n+        JsonFactory f = new JsonFactory();\n+        _testLongNumbers(f, NUM, false);\n+        _testLongNumbers(f, NUM, true);\n+    }\n+    \n+    private void _testLongNumbers(JsonFactory f, String num, boolean useStream) throws Exception\n+    {\n+        final String doc = \"[ \"+num+\" ]\";\n+        JsonParser jp = useStream\n+                ? f.createParser(doc.getBytes(\"UTF-8\"))\n+                        : f.createParser(doc);\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(num, jp.getText());\n+        assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+    }\n+\n+    // and alternate take on for #157 (with negative num)\n+    public void testLongNumbers2() throws Exception\n+    {\n+        StringBuilder input = new StringBuilder();\n+        // test this with negative\n+        input.append('-');\n+        for (int i = 0; i < 2100; i++) {\n+            input.append(1);\n+        }\n+        final String DOC = input.toString();\n+        JsonFactory f = new JsonFactory();\n+        _testIssue160LongNumbers(f, DOC, false);\n+        _testIssue160LongNumbers(f, DOC, true);\n+    }\n+\n+    private void _testIssue160LongNumbers(JsonFactory f, String doc, boolean useStream) throws Exception\n+    {\n+        JsonParser jp = useStream\n+                ? FACTORY.createParser(doc.getBytes(\"UTF-8\"))\n+                        : FACTORY.createParser(doc);\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        BigInteger v = jp.getBigIntegerValue();\n+        assertNull(jp.nextToken());\n+        assertEquals(doc, v.toString());\n+    }\n+\n     /*\n     /**********************************************************\n     /* Tests for invalid access\n     /**********************************************************\n      */\n     \n-    public void testInvalidBooleanAccess()\n-        throws Exception\n+    public void testInvalidBooleanAccess() throws Exception\n     {\n         JsonParser jp = FACTORY.createParser(\"[ \\\"abc\\\" ]\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());", "timestamp": 1414552009, "metainfo": ""}