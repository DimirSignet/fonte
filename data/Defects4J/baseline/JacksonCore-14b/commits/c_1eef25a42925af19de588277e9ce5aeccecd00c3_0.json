{"sha": "1eef25a42925af19de588277e9ce5aeccecd00c3", "log": "Add `JsonParser.hasToken(JsonToken)`", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     public abstract boolean hasTokenId(int id);\n \n     /**\n+     * Method that is functionally equivalent to:\n+     *<code>\n+     *  return getCurrentTokenId() == id\n+     *</code>\n+     * but may be more efficiently implemented.\n+     *<p>\n+     * Note that no traversal or conversion is performed; so in some\n+     * cases calling method like {@link #isExpectedStartArrayToken()}\n+     * is necessary instead.\n+     *\n+     * @since 2.6\n+     */\n+    public abstract boolean hasToken(JsonToken t);\n+    \n+    /**\n      * Method that can be called to get the name associated with\n      * the current token: for {@link JsonToken#FIELD_NAME}s it will\n      * be the same as what {@link #getText} returns;\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n         return t.id() == id;\n     }\n \n+    @Override public final boolean hasToken(JsonToken t) {\n+        return (_currToken == t);\n+    }\n+    \n     @Override public boolean isExpectedStartArrayToken() { return _currToken == JsonToken.START_ARRAY; }\n     @Override public boolean isExpectedStartObjectToken() { return _currToken == JsonToken.START_OBJECT; }\n     \n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n     @Override public int getCurrentTokenId() { return delegate.getCurrentTokenId(); }\n     @Override public boolean hasCurrentToken() { return delegate.hasCurrentToken(); }\n     @Override public boolean hasTokenId(int id) { return delegate.hasTokenId(id); }\n-    \n+    @Override public boolean hasToken(JsonToken t) { return delegate.hasToken(t); }\n+\n     @Override public String getCurrentName() throws IOException, JsonParseException { return delegate.getCurrentName(); }\n     @Override public JsonLocation getCurrentLocation() { return delegate.getCurrentLocation(); }\n     @Override public JsonStreamContext getParsingContext() { return delegate.getParsingContext(); }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java\n         jp.close();\n     }\n \n-    public void testUtf8Name2Bytes()\n-        throws Exception\n+    public void testUtf8Name2Bytes() throws Exception\n     {\n         final String[] NAMES = UTF8_2BYTE_STRINGS;\n \n             String DOC = \"{ \\\"\"+NAME+\"\\\" : 0 }\";\n             JsonParser jp = createParserUsingStream(DOC, \"UTF-8\");\n             assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+\n+            assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+\n+            assertTrue(jp.hasToken(JsonToken.FIELD_NAME));\n+            assertTrue(jp.hasTokenId(JsonTokenId.ID_FIELD_NAME));\n             \n-            assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n             assertEquals(NAME, jp.getCurrentName());\n             assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+            assertTrue(jp.hasToken(JsonToken.VALUE_NUMBER_INT));\n+            assertTrue(jp.hasTokenId(JsonTokenId.ID_NUMBER_INT));\n+\n             // should retain name during value entry, too\n             assertEquals(NAME, jp.getCurrentName());\n             ", "timestamp": 1422252360, "metainfo": ""}