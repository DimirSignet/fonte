{"sha": "e183d16b2f03c06217f221f57ac35b6001d74d3f", "log": "More testing for parser/filter comb", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n         g.close();\n     }\n \n+    protected String readAndWrite(JsonFactory f, JsonParser p) throws IOException\n+    {\n+        StringWriter sw = new StringWriter(100);\n+        JsonGenerator g = f.createGenerator(sw);\n+        while (p.nextToken() != null) {\n+            g.copyCurrentEvent(p);\n+        }\n+        p.close();\n+        g.close();\n+        return sw.toString();\n+    }\n+\n     /*\n     /**********************************************************\n     /* Additional assertion methods\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java\n  * filtering.\n  */\n @SuppressWarnings(\"resource\")\n-public class BasicGeneratorFilteringTest extends com.fasterxml.jackson.core.BaseTest\n+public class BasicGeneratorFilteringTest extends BaseTest\n {\n     static class NameMatchFilter extends TokenFilter\n     {\n         @Override\n         protected boolean _includeScalar() { return false; }\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Test methods\n         writeJsonDoc(JSON_F, JSON, gen);\n         assertEquals(aposToQuotes(\"{'root':{'a':{'value':3},'b':{'value':4}}}\"), w.toString());\n     }\n-    \n+\n     public void testIndexMatchWithPath1() throws Exception\n     {\n         StringWriter w = new StringWriter();\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java\n+package com.fasterxml.jackson.core.filter;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+public class BasicParserFilteringTest extends BaseTest\n+{\n+    static class NameMatchFilter extends TokenFilter\n+    {\n+        private final Set<String> _names;\n+        \n+        public NameMatchFilter(String... names) {\n+            _names = new HashSet<String>(Arrays.asList(names));\n+        }\n+\n+        @Override\n+        public TokenFilter includeElement(int index) {\n+            return this;\n+        }\n+\n+        @Override\n+        public TokenFilter includeProperty(String name) {\n+            if (_names.contains(name)) {\n+                return TokenFilter.INCLUDE_ALL;\n+            }\n+            return this;\n+        }\n+\n+        @Override\n+        protected boolean _includeScalar() { return false; }\n+    }\n+\n+    static class IndexMatchFilter extends TokenFilter\n+    {\n+        private final BitSet _indices;\n+        \n+        public IndexMatchFilter(int... ixs) {\n+            _indices = new BitSet();\n+            for (int ix : ixs) {\n+                _indices.set(ix);\n+            }\n+        }\n+\n+        @Override\n+        public TokenFilter includeProperty(String name) {\n+            return this;\n+        }\n+        \n+        @Override\n+        public TokenFilter includeElement(int index) {\n+            if (_indices.get(index)) {\n+                return TokenFilter.INCLUDE_ALL;\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        protected boolean _includeScalar() { return false; }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+\n+    private final JsonFactory JSON_F = new JsonFactory();\n+\n+    private final String SIMPLE = aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testNonFiltering() throws Exception\n+    {\n+        JsonParser p = JSON_F.createParser(SIMPLE);\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(SIMPLE, result);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testSingleMatchFilteringWithoutPath() throws Exception\n+    {\n+        JsonParser p0 = JSON_F.createParser(SIMPLE);\n+        JsonParser p = new FilteringParserDelegate(p0,\n+               new NameMatchFilter(\"value\"),\n+                   false, // includePath\n+                   false // multipleMatches\n+                );\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"3\"), result);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testSingleMatchFilteringWithPath() throws Exception\n+    {\n+        JsonParser p0 = JSON_F.createParser(SIMPLE);\n+        JsonParser p = new FilteringParserDelegate(p0,\n+               new NameMatchFilter(\"value\"),\n+                   true, // includePath\n+                   false // multipleMatches\n+                );\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"{'ob':{'value':3}}\"), result);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testMultipleMatchFilteringWithPath1() throws Exception\n+    {\n+        JsonParser p0 = JSON_F.createParser(SIMPLE);\n+        JsonParser p = new FilteringParserDelegate(p0,\n+                new NameMatchFilter(\"value0\", \"value2\"),\n+                true, /* includePath */ true /* multipleMatches */ );\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"{'ob':{'value0':2,'value2':4}}\"), result);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testMultipleMatchFilteringWithPath2() throws Exception\n+    {\n+        JsonParser p0 = JSON_F.createParser(SIMPLE);\n+        JsonParser p = new FilteringParserDelegate(p0,\n+                new NameMatchFilter(\"array\", \"b\", \"value\"),\n+                true, true);\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"{'array':[1,2],'ob':{'value':3},'b':true}\"), result);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testMultipleMatchFilteringWithPath3() throws Exception\n+    {\n+        final String JSON = aposToQuotes(\"{'root':{'a0':true,'a':{'value':3},'b':{'value':4}},'b0':false}\");\n+        JsonParser p0 = JSON_F.createParser(JSON);\n+        JsonParser p = new FilteringParserDelegate(p0,\n+                new NameMatchFilter(\"value\"),\n+                true, true);\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"{'root':{'a':{'value':3},'b':{'value':4}}}\"), result);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testIndexMatchWithPath1() throws Exception\n+    {\n+        JsonParser p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n+                new IndexMatchFilter(1), true, true);\n+        String result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"{'array':[2]}\"), result);\n+\n+        p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n+                new IndexMatchFilter(0), true, true);\n+        result = readAndWrite(JSON_F, p);\n+        assertEquals(aposToQuotes(\"{'array':[1]}\"), result);\n+    }\n+\n+    @SuppressWarnings(\"resource\")\n+    public void testIndexMatchWithPath2() throws Exception\n+    {\n+        JsonParser p = new FilteringParserDelegate(JSON_F.createParser(SIMPLE),\n+                new IndexMatchFilter(0, 1), true, true);\n+        assertEquals(aposToQuotes(\"{'array':[1,2]}\"), readAndWrite(JSON_F, p));\n+    \n+        String JSON = aposToQuotes(\"{'a':123,'array':[1,2,3,4,5],'b':[1,2,3]}\");\n+        p = new FilteringParserDelegate(JSON_F.createParser(JSON),\n+                new IndexMatchFilter(1, 3), true, true);\n+        assertEquals(aposToQuotes(\"{'array':[2,4],'b':[2]}\"), readAndWrite(JSON_F, p));\n+    }\n+}", "timestamp": 1430348700, "metainfo": ""}