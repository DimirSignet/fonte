{"sha": "67a24ded6442a7d7dce051c2417a3f9f973b3801", "log": "Minor cleanup for JsonTokenId, adding comments", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     public abstract JsonToken getCurrentToken();\n \n     /**\n+     * Method similar to {@link #getCurrentToken()} but that returns an\n+     * <code>int</code> instead of {@link JsonToken} (enum value).\n+     *<p>\n+     * Use of int directly is typically more efficient on switch statements,\n+     * so this method may be useful when building low-overhead codecs.\n+     * Note, however, that effect may not be big enough to matter: make sure\n+     * to profile performance before deciding to use this method.\n+     * \n+     * @since 2.3\n+     * \n+     * @return <code>int</code> matching one of constants from {@link JsonTokenId}.\n+     */\n+    public abstract int getCurrentTokenId();\n+    \n+    /**\n      * Method for checking whether parser currently points to\n      * a token (and data for that token is available).\n      * Equivalent to check for <code>parser.getCurrentToken() != null</code>.\n--- a/src/main/java/com/fasterxml/jackson/core/JsonTokenId.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonTokenId.java\n  */\n public interface JsonTokenId\n {\n-    public final static int ID_NOT_AVAILABLE = 0;\n+    /**\n+     * Id used to represent {@link JsonToken#NOT_AVAILABLE}, used in\n+     * cases where a token may become available when more input\n+     * is available: this occurs in non-blocking use cases.\n+     */\n+    public final static int ID_NOT_AVAILABLE = -1;\n \n+    /**\n+     * Id used to represent the case where no {@link JsonToken}\n+     * is available: either because {@link JsonParser} has not been\n+     * advanced to first token, or because no more tokens will be\n+     * available (end-of-input or explicit closing of parser}.\n+     */\n+    public final static int ID_NO_TOKEN = 0;\n+\n+    /**\n+     * Id used to represent {@link JsonToken#START_OBJECT}\n+     */\n     public final static int ID_START_OBJECT = 1;\n+\n+    /**\n+     * Id used to represent {@link JsonToken#END_OBJECT}\n+     */\n     public final static int ID_END_OBJECT = 2;\n+\n+    /**\n+     * Id used to represent {@link JsonToken#START_ARRAY}\n+     */\n     public final static int ID_START_ARRAY = 3;\n+\n+    /**\n+     * Id used to represent {@link JsonToken#END_ARRAY}\n+     */\n     public final static int ID_END_ARRAY = 4;\n \n+    /**\n+     * Id used to represent {@link JsonToken#FIELD_NAME}\n+     */\n     public final static int ID_FIELD_NAME = 5;\n \n+    /**\n+     * Id used to represent {@link JsonToken#VALUE_STRING}\n+     */\n     public final static int ID_STRING = 6;\n+\n+    /**\n+     * Id used to represent {@link JsonToken#VALUE_NUMBER_INT}\n+     */\n     public final static int ID_NUMBER_INT = 7;\n+\n+    /**\n+     * Id used to represent {@link JsonToken#VALUE_NUMBER_FLOAT}\n+     */\n     public final static int ID_NUMBER_FLOAT = 8;\n+\n+    /**\n+     * Id used to represent {@link JsonToken#VALUE_TRUE}\n+     */\n     public final static int ID_TRUE = 9;\n+\n+    /**\n+     * Id used to represent {@link JsonToken#VALUE_FALSE}\n+     */\n     public final static int ID_FALSE = 10;\n+    /**\n+     * Id used to represent {@link JsonToken#VALUE_NULL}\n+     */\n+\n     public final static int ID_NULL = 11;\n \n+    /**\n+     * Id used to represent {@link JsonToken#VALUE_EMBEDDED_OBJECT}\n+     */\n     public final static int ID_EMBEDDED_OBJECT = 12;\n }\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n     }\n \n     @Override\n+    public final int getCurrentTokenId() {\n+        final JsonToken t = _currToken;\n+        return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();\n+    }\n+    \n+    @Override\n     public boolean hasCurrentToken() {\n         return _currToken != null;\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n     }\n \n     @Override\n+    public int getCurrentTokenId() {\n+        return delegate.getCurrentTokenId();\n+    }\n+    \n+    @Override\n     public boolean hasCurrentToken() {\n         return delegate.hasCurrentToken();\n     }\n--- a/src/test/java/com/fasterxml/jackson/core/base64/TestBase64Parsing.java\n+++ b/src/test/java/com/fasterxml/jackson/core/base64/TestBase64Parsing.java\n         return result;\n     }\n \n+    @SuppressWarnings(\"resource\")\n     private void _testStreaming(boolean useBytes) throws IOException\n     {\n         final int[] SIZES = new int[] {\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java\n {\n     // // // First, tests for primitive (non-structured) values\n \n-    public void testStringWrite()\n-        throws Exception\n+    @SuppressWarnings(\"resource\")\n+    public void testStringWrite() throws Exception\n     {\n         JsonFactory jf = new JsonFactory();\n         String[] inputStrings = new String[] { \"\", \"X\", \"1234567890\" };\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n         doTestSpecIndividual(\"UTF-32\", verify);\n     }\n \n-    private void doTestSpecIndividual(String enc, boolean verify)\n-        throws IOException\n+    @SuppressWarnings(\"resource\")\n+    private void doTestSpecIndividual(String enc, boolean verify) throws IOException\n     {\n         String doc = SAMPLE_DOC_JSON_SPEC;\n         JsonParser jp;\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n  * Set of basic unit tests for verifying that the basic parser\n  * functionality works as expected.\n  */\n+@SuppressWarnings(\"resource\")\n public class TestNumericValues\n     extends com.fasterxml.jackson.test.BaseTest\n {\n         }\n     }\n \n-    @SuppressWarnings(\"resource\")\n     public void testLongOverflow() throws Exception\n     {\n         BigInteger below = BigInteger.valueOf(Long.MIN_VALUE);\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestValueConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestValueConversions.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonToken;\n \n-/**\n- * @since 1.6\n- */\n+@SuppressWarnings(\"resource\")\n public class TestValueConversions\n     extends com.fasterxml.jackson.test.BaseTest\n {\n             jp.close();\n         }     \n     }\n-    \n+\n     public void testAsLong() throws Exception\n     {\n         final String input = \"[ 1, -3, 4.98, true, false, null, \\\"-17\\\", \\\"foo\\\" ]\";\n             if (i == 0) {\n                 jp = createParserUsingReader(input);                \n             } else {\n-                jp = this.createParserUsingStream(input, \"UTF-8\");\n+                jp = createParserUsingStream(input, \"UTF-8\");\n             }\n             assertToken(JsonToken.START_ARRAY, jp.nextToken());\n             assertEquals(0L, jp.getValueAsLong());\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java\n  * Set of basic unit tests for verifying basic generator\n  * features.\n  */\n+@SuppressWarnings(\"resource\")\n public class TestGeneratorMisc\n     extends com.fasterxml.jackson.test.BaseTest\n {\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java\n         assertEquals(2, useBytes ? f.byteSymbolCount() : f.charSymbolCount());\n     }\n \n+    @SuppressWarnings(\"resource\")\n     private JsonParser _getParser(MyJsonFactory f, String doc, boolean useBytes) throws IOException\n     {\n         JsonParser jp;", "timestamp": 1379970065, "metainfo": ""}