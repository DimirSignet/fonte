{"sha": "4b7260c069df02e1b1c9db2df2041524e6a76520", "log": "Merge pull request #1 from jroper/master  Support for parsing versions from maven pom.properties files [JACKSON-745]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n package com.fasterxml.jackson.core.util;\n \n import java.io.*;\n+import java.util.Properties;\n import java.util.regex.Pattern;\n \n import com.fasterxml.jackson.core.Version;\n     }\n \n     /**\n+     * Will attempt to load the maven version for the given groupId and\n+     * artifactId.  Maven puts a pom.properties file in\n+     * META-INF/maven/groupId/artifactId, containing the groupId,\n+     * artifactId and version of the library.\n+     *\n+     * @param classLoader the ClassLoader to load the pom.properties file from\n+     * @param groupId the groupId of the library\n+     * @param artifactId the artifactId of the library\n+     * @return The version\n+     */\n+    public static Version mavenVersionFor(ClassLoader classLoader, String groupId, String artifactId) {\n+        InputStream pomPoperties = classLoader.getResourceAsStream(\"META-INF/maven/\" + groupId.replaceAll(\"\\\\.\", \"/\")\n+                + \"/\" + artifactId + \"/pom.properties\");\n+        if (pomPoperties != null) {\n+            try {\n+                Properties props = new Properties();\n+                props.load(pomPoperties);\n+                String versionStr = props.getProperty(\"version\");\n+                String pomPropertiesArtifactId = props.getProperty(\"artifactId\");\n+                String pomPropertiesGroupId = props.getProperty(\"groupId\");\n+                return parseVersion(versionStr, pomPropertiesGroupId, pomPropertiesArtifactId);\n+            } catch (IOException e) {\n+                // Ignore\n+            } finally {\n+                try {\n+                    pomPoperties.close();\n+                } catch (IOException e) {\n+                    // Ignore\n+                }\n+            }\n+        }\n+        return Version.unknownVersion();\n+    }\n+\n+    /**\n      * Use variant that takes three arguments instead\n      * \n      * @deprecated\n--- a/src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestVersionUtil.java\n package com.fasterxml.jackson.core.util;\n \n import com.fasterxml.jackson.core.Version;\n-import com.fasterxml.jackson.core.util.VersionUtil;\n \n public class TestVersionUtil extends com.fasterxml.jackson.test.BaseTest\n {\n     {\n         assertEquals(new Version(1, 2, 15, \"foo\"), VersionUtil.parseVersion(\"1.2.15-foo\"));\n     }\n+\n+    public void testMavenVersionParsing() {\n+        assertEquals(new Version(1, 2, 3, \"SNAPSHOT\", \"foo.bar\", \"foo-bar\"),\n+                VersionUtil.mavenVersionFor(TestVersionUtil.class.getClassLoader(), \"foo.bar\", \"foo-bar\"));\n+    }\n }", "timestamp": 1325623070, "metainfo": ""}