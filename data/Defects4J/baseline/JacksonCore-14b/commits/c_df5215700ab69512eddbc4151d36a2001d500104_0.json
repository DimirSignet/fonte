{"sha": "df5215700ab69512eddbc4151d36a2001d500104", "log": "More fixing, testing, for parser-filtering", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n                     _exposedContext = null;\n                     // Almost! Most likely still have the current token;\n                     // with the sole exception of \n+                    /*\n                     t = delegate.getCurrentToken();\n                     if (t != JsonToken.FIELD_NAME) {\n                         _currToken = t;\n                         return t;\n                     }\n+                    */\n                     break;\n                 }\n                 // If not, traverse down the context chain\n-                ctxt = _exposedContext.findChildOf(ctxt);\n+                ctxt = _headContext.findChildOf(ctxt);\n+\n                 _exposedContext = ctxt;\n                 if (ctxt == null) { // should never occur\n                     throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n                     f = f.filterStartObject();\n                 }\n                 _itemFilter = f;\n-                _headContext = _headContext.createChildObjectContext(f, true);\n                 if (f == TokenFilter.INCLUDE_ALL) {\n+                    _headContext = _headContext.createChildObjectContext(f, true);\n                     return _nextBuffered();\n                 }\n+                _headContext = _headContext.createChildObjectContext(f, false);\n                 continue main_loop;\n \n             case ID_END_ARRAY:\n--- a/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java\n         _assert(SIMPLEST_INPUT, \"/b\", false, \"2\");\n     }\n \n+    public void testSimpleWithPath() throws Exception\n+    {\n+        _assert(SIMPLE_INPUT, \"/c\", true, \"{'c':{'d':{'a':true}}}\");\n+        _assert(SIMPLE_INPUT, \"/c/d\", true, \"{'c':{'d':{'a':true}}}\");\n+        _assert(SIMPLE_INPUT, \"/a\", true, \"{'a':1}\");\n+        _assert(SIMPLE_INPUT, \"/b\", true, \"{'b':[1,2,3]}\");\n+//        _assert(SIMPLE_INPUT, \"/b/1\", true, \"{'b':[2]}\");\n+    }\n+\n+    public void testSimpleNoPath() throws Exception\n+    {\n+        _assert(SIMPLE_INPUT, \"/c/d\", false, \"{'a':true}\");\n+    }\n+    \n     @SuppressWarnings(\"resource\")\n     void _assert(String input, String pathExpr, boolean includeParent, String exp)\n         throws Exception", "timestamp": 1429225121, "metainfo": ""}