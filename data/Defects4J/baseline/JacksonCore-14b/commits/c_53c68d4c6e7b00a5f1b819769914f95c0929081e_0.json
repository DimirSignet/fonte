{"sha": "53c68d4c6e7b00a5f1b819769914f95c0929081e", "log": "Streamline `getValueAsInt()`, `getValueAsLong()` of `ParserMinimalBase`", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n     }\n \n     @Override\n+    public int getValueAsInt() throws IOException\n+    {\n+        JsonToken t = _currToken;\n+        if (t == JsonToken.VALUE_NUMBER_INT) {\n+            return getIntValue();\n+        }\n+        if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n+            return getIntValue();\n+        }\n+        return getValueAsInt(0);\n+    }\n+\n+    @Override\n     public int getValueAsInt(int defaultValue) throws IOException\n     {\n         JsonToken t = _currToken;\n+        if (t == JsonToken.VALUE_NUMBER_INT) {\n+            return getIntValue();\n+        }\n+        if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n+            return getIntValue();\n+        }\n         if (t != null) {\n             switch (t.id()) {\n             case ID_STRING:\n                     return 0;\n                 }\n                 return NumberInput.parseAsInt(str, defaultValue);\n-            case ID_NUMBER_INT:\n-            case ID_NUMBER_FLOAT:\n-                return getIntValue();\n             case ID_TRUE:\n                 return 1;\n             case ID_FALSE:\n         }\n         return defaultValue;\n     }\n+\n+    @Override\n+    public long getValueAsLong() throws IOException\n+    {\n+        JsonToken t = _currToken;\n+        if (t == JsonToken.VALUE_NUMBER_INT) {\n+            return getLongValue();\n+        }\n+        if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n+            return getLongValue();\n+        }\n+        return getValueAsLong(0L);\n+    }\n     \n     @Override\n     public long getValueAsLong(long defaultValue) throws IOException\n     {\n         JsonToken t = _currToken;\n+        if (t == JsonToken.VALUE_NUMBER_INT) {\n+            return getLongValue();\n+        }\n+        if (t == JsonToken.VALUE_NUMBER_FLOAT) {\n+            return getLongValue();\n+        }\n         if (t != null) {\n             switch (t.id()) {\n             case ID_STRING:\n                     return 0L;\n                 }\n                 return NumberInput.parseAsLong(str, defaultValue);\n-            case ID_NUMBER_INT:\n-            case ID_NUMBER_FLOAT:\n-                return getLongValue();\n             case ID_TRUE:\n                 return 1L;\n             case ID_FALSE:\n     }\n \n     @Override\n+    public String getValueAsString() throws IOException {\n+        if (_currToken == JsonToken.VALUE_STRING) {\n+            return getText();\n+        }\n+        return getValueAsString(null);\n+    }\n+    \n+    @Override\n     public String getValueAsString(String defaultValue) throws IOException {\n         if (_currToken != JsonToken.VALUE_STRING) {\n             if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.JsonGenerator.Feature;\n import com.fasterxml.jackson.core.io.*;\n \n public class UTF8JsonGenerator", "timestamp": 1425260488, "metainfo": ""}