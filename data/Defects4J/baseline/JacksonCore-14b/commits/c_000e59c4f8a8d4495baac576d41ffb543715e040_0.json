{"sha": "000e59c4f8a8d4495baac576d41ffb543715e040", "log": "Improved test coverage for JsonParser.nextXxx() methods; a related fix to UTF8StreamJsonParser.nextBooleanValue()", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n             return null;\n         }\n \n-        switch (nextToken().id()) {\n-        case ID_TRUE:\n+        JsonToken t = nextToken();\n+        if (t == JsonToken.VALUE_TRUE) {\n             return Boolean.TRUE;\n-        case ID_FALSE:\n+        }\n+        if (t == JsonToken.VALUE_FALSE) {\n             return Boolean.FALSE;\n-        default:\n-            return null;\n-        }\n-    }\n-    \n+        }\n+        return null;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Internal methods, number parsing\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n     /* Wrappers to test InputStream vs Reader\n     /********************************************************\n      */\n-    \n+\n+    private final JsonFactory JSON_F = new JsonFactory();\n+\n     // [JACKSON-653]\n     public void testIsNextTokenName() throws Exception\n     {\n \n     public void testNextNameWithLongContent() throws Exception\n     {\n-        final JsonFactory jf = new JsonFactory();\n-\n-        _testLong(jf, false);\n-        _testLong(jf, true);\n+        _testNextNameWithLong(false);\n+        _testNextNameWithLong(true);\n+    }\n+\n+    public void testNextTextValue() throws Exception\n+    {\n+        _textNextText(false);\n+        _textNextText(true);\n+    }\n+\n+    public void testNextIntValue() throws Exception\n+    {\n+        _textNextInt(false);\n+        _textNextInt(true);\n+    }\n+\n+    public void testNextLongValue() throws Exception\n+    {\n+        _textNextLong(false);\n+        _textNextLong(true);\n+    }\n+\n+    public void testNextBooleanValue() throws Exception\n+    {\n+        _textNextBoolean(false);\n+        _textNextBoolean(true);\n     }\n     \n     /*\n     private void _testIsNextTokenName2(boolean useStream) throws Exception\n     {\n         final String DOC = \"{\\\"name\\\":123,\\\"name2\\\":14,\\\"x\\\":\\\"name\\\"}\";\n-        JsonFactory jf = new JsonFactory();\n         JsonParser jp = useStream ?\n-            jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-            : jf.createParser(new StringReader(DOC));\n+                JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : JSON_F.createParser(new StringReader(DOC));\n         SerializableString NAME = new SerializedString(\"name\");\n         assertFalse(jp.nextFieldName(NAME));\n         assertToken(JsonToken.START_OBJECT, jp.getCurrentToken());\n     private void _testIsNextTokenName3(boolean useStream) throws Exception\n     {\n         final String DOC = \"{\\\"name\\\":123,\\\"name2\\\":14,\\\"x\\\":\\\"name\\\"}\";\n-        JsonFactory jf = new JsonFactory();\n         JsonParser jp = useStream ?\n-            jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-            : jf.createParser(new StringReader(DOC));\n+                JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : JSON_F.createParser(new StringReader(DOC));\n         assertNull(jp.nextFieldName());\n         assertToken(JsonToken.START_OBJECT, jp.getCurrentToken());\n         assertEquals(\"name\", jp.nextFieldName());\n         jp.close();\n     }\n \n+    private void _textNextText(boolean useStream) throws Exception\n+    {\n+        final String DOC = aposToQuotes(\"{'a':'123','b':5,'c':[false,'foo']}\");\n+        JsonParser p = useStream ?\n+            JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : JSON_F.createParser(new StringReader(DOC));\n+        assertNull(p.nextTextValue());\n+        assertToken(JsonToken.START_OBJECT, p.getCurrentToken());\n+        assertNull(p.nextTextValue());\n+        assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());\n+        assertEquals(\"a\", p.getCurrentName());\n+\n+        assertEquals(\"123\", p.nextTextValue());\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(\"b\", p.getCurrentName());\n+        assertNull(p.nextFieldName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());\n+\n+        assertEquals(\"c\", p.nextFieldName());\n+        \n+        assertNull(p.nextTextValue());\n+        assertToken(JsonToken.START_ARRAY, p.getCurrentToken());\n+        assertNull(p.nextTextValue());\n+        assertToken(JsonToken.VALUE_FALSE, p.getCurrentToken());\n+        assertEquals(\"foo\", p.nextTextValue());\n+        \n+        assertNull(p.nextTextValue());\n+        assertToken(JsonToken.END_ARRAY, p.getCurrentToken());\n+        assertNull(p.nextTextValue());\n+        assertToken(JsonToken.END_OBJECT, p.getCurrentToken());\n+        assertNull(p.nextTextValue());\n+        assertNull(p.getCurrentToken());\n+\n+        p.close();\n+    }\n+\n+    private void _textNextInt(boolean useStream) throws Exception\n+    {\n+        final String DOC = aposToQuotes(\"{'a':'123','b':5,'c':[false,456]}\");\n+        JsonParser p = useStream ?\n+            JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : JSON_F.createParser(new StringReader(DOC));\n+        assertEquals(0, p.nextIntValue(0));\n+        assertToken(JsonToken.START_OBJECT, p.getCurrentToken());\n+        assertEquals(0, p.nextIntValue(0));\n+        assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());\n+        assertEquals(\"a\", p.getCurrentName());\n+\n+        assertEquals(0, p.nextIntValue(0));\n+        assertToken(JsonToken.VALUE_STRING, p.getCurrentToken());\n+        assertEquals(\"123\", p.getText());\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(\"b\", p.getCurrentName());\n+        assertEquals(5, p.nextIntValue(0));\n+\n+        assertEquals(\"c\", p.nextFieldName());\n+        \n+        assertEquals(0, p.nextIntValue(0));\n+        assertToken(JsonToken.START_ARRAY, p.getCurrentToken());\n+        assertEquals(0, p.nextIntValue(0));\n+        assertToken(JsonToken.VALUE_FALSE, p.getCurrentToken());\n+        assertEquals(456, p.nextIntValue(0));\n+        \n+        assertEquals(0, p.nextIntValue(0));\n+        assertToken(JsonToken.END_ARRAY, p.getCurrentToken());\n+        assertEquals(0, p.nextIntValue(0));\n+        assertToken(JsonToken.END_OBJECT, p.getCurrentToken());\n+        assertEquals(0, p.nextIntValue(0));\n+        assertNull(p.getCurrentToken());\n+\n+        p.close();\n+    }\n+\n+    private void _textNextLong(boolean useStream) throws Exception\n+    {\n+        final String DOC = aposToQuotes(\"{'a':'xyz','b':-59,'c':[false,-1]}\");\n+        JsonParser p = useStream ?\n+            JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : JSON_F.createParser(new StringReader(DOC));\n+        assertEquals(0L, p.nextLongValue(0L));\n+        assertToken(JsonToken.START_OBJECT, p.getCurrentToken());\n+        assertEquals(0L, p.nextLongValue(0L));\n+        assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());\n+        assertEquals(\"a\", p.getCurrentName());\n+\n+        assertEquals(0L, p.nextLongValue(0L));\n+        assertToken(JsonToken.VALUE_STRING, p.getCurrentToken());\n+        assertEquals(\"xyz\", p.getText());\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(\"b\", p.getCurrentName());\n+        assertEquals(-59L, p.nextLongValue(0L));\n+\n+        assertEquals(\"c\", p.nextFieldName());\n+        \n+        assertEquals(0L, p.nextLongValue(0L));\n+        assertToken(JsonToken.START_ARRAY, p.getCurrentToken());\n+        assertEquals(0L, p.nextLongValue(0L));\n+        assertToken(JsonToken.VALUE_FALSE, p.getCurrentToken());\n+        assertEquals(-1L, p.nextLongValue(0L));\n+        \n+        assertEquals(0L, p.nextLongValue(0L));\n+        assertToken(JsonToken.END_ARRAY, p.getCurrentToken());\n+        assertEquals(0L, p.nextLongValue(0L));\n+        assertToken(JsonToken.END_OBJECT, p.getCurrentToken());\n+        assertEquals(0L, p.nextLongValue(0L));\n+        assertNull(p.getCurrentToken());\n+\n+        p.close();\n+    }\n+\n+    private void _textNextBoolean(boolean useStream) throws Exception\n+    {\n+        final String DOC = aposToQuotes(\"{'a':'xyz','b':true,'c':[false,0]}\");\n+        JsonParser p = useStream ?\n+            JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : JSON_F.createParser(new StringReader(DOC));\n+        assertNull(p.nextBooleanValue());\n+        assertToken(JsonToken.START_OBJECT, p.getCurrentToken());\n+        assertNull(p.nextBooleanValue());\n+        assertToken(JsonToken.FIELD_NAME, p.getCurrentToken());\n+        assertEquals(\"a\", p.getCurrentName());\n+\n+        assertNull(p.nextBooleanValue());\n+        assertToken(JsonToken.VALUE_STRING, p.getCurrentToken());\n+        assertEquals(\"xyz\", p.getText());\n+        assertToken(JsonToken.FIELD_NAME, p.nextToken());\n+        assertEquals(\"b\", p.getCurrentName());\n+        assertEquals(Boolean.TRUE, p.nextBooleanValue());\n+\n+        assertEquals(\"c\", p.nextFieldName());\n+        \n+        assertNull(p.nextBooleanValue());\n+        assertToken(JsonToken.START_ARRAY, p.getCurrentToken());\n+        assertEquals(Boolean.FALSE, p.nextBooleanValue());\n+        assertNull(p.nextBooleanValue());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, p.getCurrentToken());\n+        assertEquals(0, p.getIntValue());\n+        \n+        assertNull(p.nextBooleanValue());\n+        assertToken(JsonToken.END_ARRAY, p.getCurrentToken());\n+        assertNull(p.nextBooleanValue());\n+        assertToken(JsonToken.END_OBJECT, p.getCurrentToken());\n+        assertNull(p.nextBooleanValue());\n+        assertNull(p.getCurrentToken());\n+\n+        p.close();\n+    }\n+    \n     private void _testIssue34(boolean useStream) throws Exception\n     {\n         final int TESTROUNDS = 223;\n         parser.close();\n     }\n \n-    private void _testLong(JsonFactory f, boolean useStream) throws Exception\n+    private void _testNextNameWithLong(boolean useStream) throws Exception\n     {\n         // do 5 meg thingy\n         final int SIZE = 5 * 1024 * 1024;\n         final String DOC = sb.toString();\n     \n         JsonParser parser = useStream ?\n-                f.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-                : f.createParser(new StringReader(DOC));\n+                JSON_F.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+                : JSON_F.createParser(new StringReader(DOC));\n         assertToken(JsonToken.START_OBJECT, parser.nextToken());\n         rnd = new Random(1);\n         for (int i = 0; i < count; ++i) {\n--- a/src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/type/TypeReferenceTest.java\n     public void testInvalid()\n     {\n         try { \n-            new TypeReference() { };\n-            fail(\"Should not pass!\");\n+            Object ob = new TypeReference() { };\n+            fail(\"Should not pass, got: \"+ob);\n         } catch (IllegalArgumentException e) {\n             verifyException(e, \"without actual type information\");\n         }", "timestamp": 1433396129, "metainfo": ""}