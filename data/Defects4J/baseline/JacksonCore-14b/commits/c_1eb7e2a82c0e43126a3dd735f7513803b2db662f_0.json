{"sha": "1eb7e2a82c0e43126a3dd735f7513803b2db662f", "log": "... working on generator filtering, close to first full version", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n import com.fasterxml.jackson.core.util.JsonGeneratorDelegate;\n \n /**\n- * @since 2.6.0\n+ * Specialized {@link JsonGeneratorDelegate} that allows use of\n+ * {@link TokenFilter} for outputting a subset of content that\n+ * caller tries to generate.\n+ * \n+ * @since 2.6\n  */\n public class FilteringGeneratorDelegate extends JsonGeneratorDelegate\n {\n      * actually outputs.\n      */\n     protected TokenFilterContext _filterContext;\n-    \n+\n     /**\n-     * The current state constant is kept here as well,\n-     * not just at the tip of {@link #_filterContext}.\n-     */\n-    protected int _currentState;\n-\n+     * State that applies to the item within container, used where applicable.\n+     * Specifically used to pass inclusion state between property name and\n+     * property, and also used for array elements.\n+     */\n+    protected int _itemState;\n+    \n     /**\n      * Number of tokens for which {@link TokenFilter#FILTER_INCLUDE}\n      * has been returned\n      */\n-    protected int _fullMatchCount;\n-\n-    /**\n-     * Number of tokens for which {@link TokenFilter#FILTER_INCLUDE_BUT_CHECK}\n-     * has been returned\n-     */\n-    protected int _partialMatchCount;\n+    protected int _matchCount;\n \n     /*\n     /**********************************************************\n         super(d, false);\n         filter = f;\n         // Doesn't matter if it's include or exclude current, but shouldn't be including/excluding sub-tree\n-        _currentState = TokenFilter.FILTER_CHECK;\n-        _filterContext = TokenFilterContext.createRootContext(_currentState);\n+        _itemState = TokenFilter.FILTER_CHECK;\n+        _filterContext = TokenFilterContext.createRootContext(_itemState);\n     }\n \n     /*\n     public TokenFilter getTokenFilter() { return filter; }\n \n     /**\n-     * Accessor for finding number of \"full\" matches, where specific token and sub-tree\n+     * Accessor for finding number of matches, where specific token and sub-tree\n      * starting (if structured type) are passed.\n      */\n-    public int getFullMatchCount() {\n-        return _partialMatchCount + _fullMatchCount;\n-    }\n-    \n-    /**\n-     * Accessor for finding number of total matches; both full matches (see\n-     * {@link #getFullMatchCount()}) and partial matches, latter meaning inclusion\n-     * of intermediate containers but not necessarily whole sub-tree.\n-     * This method can be called to check if any content was passed: if <code>0</code>\n-     * is returned, all content was filtered out and nothing was copied.\n-     */\n     public int getMatchCount() {\n-        return _partialMatchCount + _fullMatchCount;\n-    }\n-    \n+        return _matchCount;\n+    }\n+\n     /*\n     /**********************************************************\n     /* Public API, write methods, structural\n     public void writeStartArray() throws IOException\n     {\n         // First things first: whole-sale skipping easy\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            _filterContext = _filterContext.createChildArrayContext(_currentState, false);\n-            return;\n-        }\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            _filterContext = _filterContext.createChildArrayContext(_itemState, false);\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_INCLUDE) { // include the whole sub-tree?\n+            _filterContext = _filterContext.createChildArrayContext(_itemState, true);\n+            delegate.writeStartArray();\n+            return;\n+        }\n+        // Ok; regular checking state then\n+        _itemState = filter.filterStartArray();\n+        if (_itemState == TokenFilter.FILTER_INCLUDE) {\n+            // First: may need to re-create path\n+            _checkParentPath();\n+            _filterContext = _filterContext.createChildArrayContext(_itemState, true);\n+            delegate.writeStartArray();\n+        } else { // filter out\n+            _filterContext = _filterContext.createChildArrayContext(_itemState, false);\n+        }\n+        if (_itemState != TokenFilter.FILTER_SKIP) {\n+            _filterContext.markNeedsCloseCheck();\n+        }\n+    }\n         \n-        switch (_currentState) {\n-        case TokenFilter.FILTER_CHECK: // may or may not include, need to check\n-            int oldState = _currentState;\n-            _currentState = filter.filterStartArray();\n-            if (_currentState == TokenFilter.FILTER_INCLUDE) {\n-                // First: may need to re-create path\n-                _checkContainerParentPath(oldState, _currentState);\n-                _filterContext = _filterContext.createChildArrayContext(_currentState, true);\n-                delegate.writeStartArray();\n-            } else { // filter out\n-                _filterContext = _filterContext.createChildArrayContext(_currentState, false);\n-            }\n-            return;\n-        case TokenFilter.FILTER_INCLUDE: // include the whole sub-tree?\n-        default:\n-            _filterContext = _filterContext.createChildArrayContext(_currentState, true);\n-            delegate.writeStartArray();\n-            return;\n-        }\n-    }\n-        \n     @Override\n     public void writeStartArray(int size) throws IOException\n     {\n-        // First things first: whole-sale skipping easy\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            _filterContext = _filterContext.createChildArrayContext(_currentState, false);\n-            return;\n-        }\n-\n-        switch (_currentState) {\n-        case TokenFilter.FILTER_CHECK: // may or may not include, need to check\n-            int oldState = _currentState;\n-            _currentState = filter.filterStartArray();\n-            if (_currentState == TokenFilter.FILTER_INCLUDE) {\n-                // First: may need to re-create path\n-                _checkContainerParentPath(oldState, _currentState);\n-                _filterContext = _filterContext.createChildArrayContext(_currentState, true);\n-                delegate.writeStartArray(size);\n-            } else { // filter out\n-                _filterContext = _filterContext.createChildArrayContext(_currentState, false);\n-            }\n-            return;\n-        case TokenFilter.FILTER_INCLUDE: // include the whole sub-tree?\n-        default:\n-            _filterContext = _filterContext.createChildArrayContext(_currentState, true);\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            _filterContext = _filterContext.createChildArrayContext(_itemState, false);\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_INCLUDE) {\n+            _filterContext = _filterContext.createChildArrayContext(_itemState, true);\n             delegate.writeStartArray(size);\n             return;\n+        }\n+        _itemState = filter.filterStartArray();\n+        if (_itemState == TokenFilter.FILTER_INCLUDE) {\n+            _checkParentPath();\n+            _filterContext = _filterContext.createChildArrayContext(_itemState, true);\n+            delegate.writeStartArray(size);\n+        } else {\n+            _filterContext = _filterContext.createChildArrayContext(_itemState, false);\n+        }\n+        if (_itemState != TokenFilter.FILTER_SKIP) {\n+            _filterContext.markNeedsCloseCheck();\n         }\n     }\n     \n         if (_filterContext.needsCloseToken()) {\n             delegate.writeEndArray();\n         }\n+        if (_filterContext.needsCloseCheck()) {\n+            filter.filterFinishArray();\n+        }\n         _filterContext = _filterContext.getParent();\n         if (_filterContext != null) {\n-            _currentState = _filterContext.getFilterState();\n+            _itemState = _filterContext.getFilterState();\n         }\n     }\n \n     @Override\n     public void writeStartObject() throws IOException\n     {\n-        // First things first: whole-sale skipping easy\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            _filterContext = _filterContext.createChildObjectContext(_currentState, false);\n-            return;\n-        }\n-\n-        switch (_currentState) {\n-        case TokenFilter.FILTER_CHECK: // may or may not include, need to check\n-            int oldState = _currentState;\n-            _currentState = filter.filterStartArray();\n-            if (_currentState == TokenFilter.FILTER_INCLUDE) {\n-                // First: may need to re-create path\n-                _checkContainerParentPath(oldState, _currentState);\n-                _filterContext = _filterContext.createChildObjectContext(_currentState, true);\n-                delegate.writeStartObject();\n-            } else { // filter out\n-                _filterContext = _filterContext.createChildObjectContext(_currentState, false);\n-            }\n-            return;\n-        case TokenFilter.FILTER_INCLUDE: // include the whole sub-tree?\n-        default:\n-            _filterContext = _filterContext.createChildObjectContext(_currentState, true);\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            _filterContext = _filterContext.createChildObjectContext(_itemState, false);\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_INCLUDE) {\n+            _filterContext = _filterContext.createChildArrayContext(_itemState, true);\n             delegate.writeStartObject();\n             return;\n+        }\n+        _itemState = filter.filterStartObject();\n+        if (_itemState == TokenFilter.FILTER_INCLUDE) {\n+            _checkParentPath();\n+            _filterContext = _filterContext.createChildObjectContext(_itemState, true);\n+            delegate.writeStartObject();\n+        } else { // filter out\n+            _filterContext = _filterContext.createChildObjectContext(_itemState, false);\n+        }\n+        if (_itemState != TokenFilter.FILTER_SKIP) {\n+            _filterContext.markNeedsCloseCheck();\n         }\n     }\n     \n         if (_filterContext.needsCloseToken()) {\n             delegate.writeEndArray();\n         }\n+        if (_filterContext.needsCloseCheck()) {\n+            filter.filterFinishObject();\n+        }\n         _filterContext = _filterContext.getParent();\n         if (_filterContext != null) {\n-            _currentState = _filterContext.getFilterState();\n+            _itemState = _filterContext.getFilterState();\n         }\n     }\n \n     @Override\n     public void writeFieldName(String name) throws IOException\n     {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n+        // Bit different here: we will actually need state of parent container\n+        int state = _filterContext.setFieldName(name);\n+\n+        // used as-is for basic include/skip, but not if checking is needed\n+        if (state == TokenFilter.FILTER_CHECK) {\n+            state = filter.includeProperty(name);\n+            if (state == TokenFilter.FILTER_INCLUDE) {\n+                _checkParentPath();\n+            }\n+        }\n+        _itemState = state;\n+        if (state == TokenFilter.FILTER_INCLUDE) {\n+            delegate.writeFieldName(name);\n+        }\n+    }\n+\n+    @Override\n+    public void writeFieldName(SerializableString name) throws IOException\n+    {\n+        int state = _filterContext.setFieldName(name.getValue());\n+\n+        if (state == TokenFilter.FILTER_CHECK) {\n+            state = filter.includeProperty(name.getValue());\n+            if (state == TokenFilter.FILTER_INCLUDE) {\n+                _checkParentPath();\n+            }\n+        }\n+        _itemState = state;\n+        if (state == TokenFilter.FILTER_INCLUDE) {\n+            delegate.writeFieldName(name);\n+        }\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, write methods, text/String values\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void writeString(String value) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            int state = _filterContext.checkValue(filter);\n+            if (state == TokenFilter.FILTER_SKIP) {\n+                return;\n+            }\n+            if (state == TokenFilter.FILTER_CHECK) {\n+                if (!filter.includeString(value)) {\n+                    return;\n+                }\n+            }\n+            _checkParentPath();\n+            // one important thing: may need to write element name now\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+        } \n+        delegate.writeString(value);\n+    }\n+\n+    @Override\n+    public void writeString(char[] text, int offset, int len) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            String value = new String(text, offset, len);\n+            int state = _filterContext.checkValue(filter);\n+            if (state == TokenFilter.FILTER_SKIP) {\n+                return;\n+            }\n+            if (state == TokenFilter.FILTER_CHECK) {\n+                if (!filter.includeString(value)) {\n+                    return;\n+                }\n+            }\n+            _checkParentPath();\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+        } \n+        delegate.writeString(text, offset, len);\n+    }\n+\n+    @Override\n+    public void writeString(SerializableString value) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            int state = _filterContext.checkValue(filter);\n+            if (state == TokenFilter.FILTER_SKIP) {\n+                return;\n+            }\n+            if (state == TokenFilter.FILTER_CHECK) {\n+                if (!filter.includeString(value.getValue())) {\n+                    return;\n+                }\n+            }\n+            _checkParentPath();\n+            if (_filterContext.inObject()) {\n+                delegate.writeFieldName(_filterContext.getCurrentName());\n+            }\n+        } \n+        delegate.writeString(value);\n+    }\n+\n+    @Override\n+    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException\n+    {\n+        /*\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n             return;\n         }\n         \n-        // !!! TODO\n-        \n-        switch (_currentState) {\n-        case TokenFilter.FILTER_CHECK:\n-            return;\n-        case TokenFilter.FILTER_INCLUDE:\n-        default:\n-            return;\n-        }\n-    }\n-\n-    @Override\n-    public void writeFieldName(SerializableString name) throws IOException\n-    {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-\n-        // !!! TODO\n-        \n-        switch (_currentState) {\n-        case TokenFilter.FILTER_CHECK:\n-            return;\n-        case TokenFilter.FILTER_INCLUDE:\n-        default:\n-            return;\n-        }\n-//        delegate.writeFieldName(name);\n-    }\n-\n-    /*\n-    /**********************************************************\n-    /* Public API, write methods, text/String values\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    public void writeString(String text) throws IOException\n-    {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-\n-        \n-        if (_currentState == TokenFilter.FILTER_INCLUDE) {\n-            delegate.writeString(text);\n-        } else if (_currentState == TokenFilter.FILTER_CHECK) {\n-//            if (filter.includeString(value))\n-        } \n-    }\n-\n-    @Override\n-    public void writeString(char[] text, int offset, int len) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-        delegate.writeString(text, offset, len);\n-    }\n-\n-    @Override\n-    public void writeString(SerializableString text) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-        delegate.writeString(text);\n-    }\n-\n-    @Override\n-    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+\n+            \n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n+        */\n         delegate.writeRawUTF8String(text, offset, length);\n     }\n \n     @Override\n-    public void writeUTF8String(byte[] text, int offset, int length) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-        delegate.writeUTF8String(text, offset, length);\n+    public void writeUTF8String(byte[] text, int offset, int length) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n+        delegate.writeRawUTF8String(text, offset, length);\n     }\n \n     /*\n      */\n \n     @Override\n-    public void writeRaw(String text) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeRaw(String text) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeRaw(text);\n     }\n \n     @Override\n-    public void writeRaw(String text, int offset, int len) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeRaw(String text, int offset, int len) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n+        delegate.writeRaw(text);\n+    }\n+\n+    @Override\n+    public void writeRaw(SerializableString text) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n+        delegate.writeRaw(text);\n+    }\n+\n+    @Override\n+    public void writeRaw(char[] text, int offset, int len) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeRaw(text, offset, len);\n     }\n \n     @Override\n-    public void writeRaw(SerializableString raw) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-        delegate.writeRaw(raw);\n-    }\n-\n-    @Override\n-    public void writeRaw(char[] text, int offset, int len) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeRaw(char c) throws IOException {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n+        delegate.writeRaw(c);\n+    }\n+\n+    @Override\n+    public void writeRawValue(String text) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n+        delegate.writeRaw(text);\n+    }\n+\n+    @Override\n+    public void writeRawValue(String text, int offset, int len) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeRaw(text, offset, len);\n     }\n \n     @Override\n-    public void writeRaw(char c) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-        delegate.writeRaw(c);\n-    }\n-\n-    @Override\n-    public void writeRawValue(String text) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-        delegate.writeRawValue(text);\n-    }\n-\n-    @Override\n-    public void writeRawValue(String text, int offset, int len) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-        delegate.writeRawValue(text, offset, len);\n-    }\n-\n-    @Override\n-    public void writeRawValue(char[] text, int offset, int len) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-        delegate.writeRawValue(text, offset, len);\n-    }\n-\n-    @Override\n-    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeRawValue(char[] text, int offset, int len) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n+        delegate.writeRaw(text, offset, len);\n+    }\n+\n+    @Override\n+    public void writeBinary(Base64Variant b64variant, byte[] data, int offset, int len) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeBinary()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeBinary(b64variant, data, offset, len);\n     }\n \n     @Override\n-    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return 0;\n-        }\n+    public int writeBinary(Base64Variant b64variant, InputStream data, int dataLength) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return -1;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeBinary()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         return delegate.writeBinary(b64variant, data, dataLength);\n     }\n \n      */\n \n     @Override\n-    public void writeNumber(short v) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeNumber(short v) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeNumber(v)) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeNumber(v);\n     }\n \n     @Override\n-    public void writeNumber(int v) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeNumber(int v) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeNumber(v)) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeNumber(v);\n     }\n \n     @Override\n-    public void writeNumber(long v) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeNumber(long v) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeNumber(v)) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeNumber(v);\n     }\n \n     @Override\n-    public void writeNumber(BigInteger v) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeNumber(BigInteger v) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeNumber(v)) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeNumber(v);\n     }\n \n     @Override\n-    public void writeNumber(double v) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeNumber(double v) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeNumber(v)) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeNumber(v);\n     }\n \n     @Override\n-    public void writeNumber(float v) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeNumber(float v) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeNumber(v)) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeNumber(v);\n     }\n \n     @Override\n-    public void writeNumber(BigDecimal v) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeNumber(BigDecimal v) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeNumber(v)) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeNumber(v);\n     }\n \n     @Override\n-    public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeNumber(String encodedValue) throws IOException, UnsupportedOperationException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeRawValue()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeNumber(encodedValue);\n     }\n \n     @Override\n-    public void writeBoolean(boolean state) throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n-        delegate.writeBoolean(state);\n-    }\n-\n-    @Override\n-    public void writeNull() throws IOException {\n-        if (_currentState == TokenFilter.FILTER_SKIP) {\n-            return;\n-        }\n+    public void writeBoolean(boolean v) throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeBoolean(v)) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n+        delegate.writeBoolean(v);\n+    }\n+\n+    @Override\n+    public void writeNull() throws IOException\n+    {\n+        if (_itemState == TokenFilter.FILTER_SKIP) {\n+            return;\n+        }\n+        if (_itemState == TokenFilter.FILTER_CHECK) {\n+            if (filter.includeNull()) { // close enough?\n+                if (_filterContext.inObject()) {\n+                    delegate.writeFieldName(_filterContext.getCurrentName());\n+                }\n+            }\n+        } \n         delegate.writeNull();\n     }\n \n     \n     @Override\n     public void writeObjectId(Object id) throws IOException {\n-        delegate.writeObjectId(id);\n+        if (_itemState != TokenFilter.FILTER_SKIP) {\n+            delegate.writeObjectId(id);\n+        }\n     }\n \n     @Override\n     public void writeObjectRef(Object id) throws IOException {\n-        delegate.writeObjectRef(id);\n+        if (_itemState != TokenFilter.FILTER_SKIP) {\n+            delegate.writeObjectRef(id);\n+        }\n     }\n     \n     @Override\n     public void writeTypeId(Object id) throws IOException {\n-        delegate.writeTypeId(id);\n+        if (_itemState != TokenFilter.FILTER_SKIP) {\n+            delegate.writeTypeId(id);\n+        }\n     }\n \n     /*\n     /**********************************************************\n      */\n     \n-    protected void _checkContainerParentPath(int oldState, int newState)\n-        throws IOException\n-    {\n-        if (newState == TokenFilter.FILTER_INCLUDE) {\n-            ++_fullMatchCount;\n-        } else {\n-            ++_partialMatchCount;\n-        }\n+    protected void _checkParentPath() throws IOException\n+    {\n+        ++_matchCount;\n         // only need to construct path if parent wasn't written\n-        if (oldState == TokenFilter.FILTER_CHECK) {\n-            // and even then only if parent path is actually desired...\n-            if (_includePath) {\n-                _filterContext.writePath(delegate);\n-            }\n-            // also: if no multiple matches desired, short-cut checks\n-            if (newState == TokenFilter.FILTER_INCLUDE && !_filterAll) {\n-                // Mark parents as \"skip\" so that further check calls are not made\n-                _filterContext.skipParentChecks();\n-            }\n-        }\n-    }\n-\n-    protected void _checkScalarParentPath(int oldState, int newState)\n-            throws IOException\n-    {\n-        if (newState == TokenFilter.FILTER_INCLUDE) {\n-            ++_fullMatchCount;\n-        } else {\n-            ++_partialMatchCount;\n-        }\n-        if (oldState == TokenFilter.FILTER_CHECK) {\n-            // and even then only if parent path is actually desired...\n-            if (_includePath) {\n-                _filterContext.writePath(delegate);\n-            }\n-            // also: if no multiple matches desired, short-cut checks\n-            if (newState == TokenFilter.FILTER_INCLUDE && !_filterAll) {\n-                // Mark parents as \"skip\" so that further check calls are not made\n-                _filterContext.skipParentChecks();\n-            }\n+        if (_includePath) {\n+            _filterContext.writePath(delegate);\n+        }\n+        // also: if no multiple matches desired, short-cut checks\n+        if (!_filterAll) {\n+            // Mark parents as \"skip\" so that further check calls are not made\n+            _filterContext.skipParentChecks();\n         }\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java\n import java.math.BigInteger;\n \n /**\n+ * Strategy class that can be implemented to specify actual inclusion/exclusion\n+ * criteria for filtering, used by {@link FilteringGeneratorDelegate}.\n+ *\n  * @since 2.6\n  */\n public abstract class TokenFilter\n \n     // API, properties/elements\n \n-    public int filterProperty(String name) {\n+    /**\n+     * Called to see if Object property with specified name (of any type)\n+     * should be included or not\n+     */\n+    public int includeProperty(String name) {\n         return FILTER_CHECK;\n     }\n \n-    public int filterElement(int index) {\n+    /**\n+     * Called to see if Array element with specified index (of any type)\n+     * should be included or not\n+     */\n+    public int includeElement(int index) {\n         return FILTER_CHECK;\n     }\n \n+    /**\n+     * Called to see if root value about to be written should be included or not\n+     */\n+    public int includeRootValue(int index) {\n+        return FILTER_CHECK;\n+    }\n+    \n     // API, scalar\n \n     public boolean includeBoolean(boolean value) {\n-        return false;\n+        return _includeScalar();\n     }\n \n     public boolean includeNull() {\n-        return false;\n+        return _includeScalar();\n     }\n \n     public boolean includeString(String value) {\n-        return false;\n+        return _includeScalar();\n     }\n \n     /**\n      * NOTE: also called for `short`, `byte`\n      */\n-    public boolean includeNumber(int i) {\n-        return false;\n+    public boolean includeNumber(int v) {\n+        return _includeScalar();\n     }\n \n-    public boolean includeNumber(long l) {\n-        return false;\n+    public boolean includeNumber(long v) {\n+        return _includeScalar();\n     }\n \n+    public boolean includeNumber(float v) {\n+        return _includeScalar();\n+    }\n+\n+    public boolean includeNumber(double v) {\n+        return _includeScalar();\n+    }\n+    \n     public boolean includeNumber(BigDecimal v) {\n-        return false;\n+        return _includeScalar();\n     }\n \n     public boolean includeNumber(BigInteger v) {\n-        return false;\n+        return _includeScalar();\n     }\n \n     /**\n      * use.\n      */\n     public boolean includeBinary() {\n-        return false;\n+        return _includeScalar();\n     }\n \n     /**\n      * criteria.\n      */\n     public boolean includeRawValue() {\n-        return false;\n+        return _includeScalar();\n     }\n     \n     public boolean includeEmbeddedValue(Object ob) {\n+        return _includeScalar();\n+    }\n+\n+    /**\n+     * Overridable default implementation delegated to all scalar value\n+     * inclusion check methods\n+     */\n+    protected boolean _includeScalar() {\n         return false;\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n /**\n  * Alternative variant of {@link JsonStreamContext}, used when filtering\n  * content being read or written (based on {@link TokenFilter}).\n+ * \n+ * @since 2.6\n  */\n public class TokenFilterContext extends JsonStreamContext\n {\n      * regardless of inclusion status.\n      */\n     protected boolean _startWritten;\n+\n+    /**\n+     * Flag that indicates that when context is closed, a call needs\n+     * to be made to {@link TokenFilter}\n+     */\n+    protected boolean _needCloseCheck;\n     \n     /*\n     /**********************************************************\n     /**********************************************************\n      */\n     \n-    public void writeFieldName(String name) throws JsonProcessingException {\n+    public int setFieldName(String name) throws JsonProcessingException {\n         _currentName = name;\n-    }\n-    public int writeValue() {\n-        return ++_index;\n-    }\n+        return _filterState;\n+    }\n+\n+    /**\n+     * Method called to check whether value is to be included at current output\n+     * position, either as Object property, Array element, or root value.\n+     */\n+    public int checkValue(TokenFilter filter) {\n+        // First, checks for Object properties have been made earlier:\n+        if (_type == TYPE_OBJECT) {\n+            return TokenFilter.FILTER_CHECK;\n+        }\n+        int ix = ++_index;\n+        if (_type == TYPE_ARRAY) {\n+            return filter.includeElement(ix);\n+        }\n+        return filter.includeRootValue(ix);\n+    }\n+\n     /**\n      * Method called to ensure that parent path from root is written up to\n      * and including this node.\n     public int getFilterState() { return _filterState; }\n     public boolean needsCloseToken() { return _startWritten; }\n \n-    public void markStartToken() { _startWritten = true; }\n+    public void markNeedsCloseCheck() { _needCloseCheck = true; }\n+    public boolean needsCloseCheck() { return _needCloseCheck; }\n     \n     // // // Internally used abstract methods\n \n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n+package com.fasterxml.jackson.core.filter;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+public class BasicFilteringTest extends com.fasterxml.jackson.core.BaseTest\n+{\n+    static class NameMatchFilter extends TokenFilter\n+    {\n+        \n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n+    private final JsonFactory JSON_F = new JsonFactory();\n+    \n+    public void testNonFiltering() throws Exception\n+    {\n+        // First, verify non-filtering\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = JSON_F.createGenerator(w);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value':3},'b':true}\"),\n+                w.toString());\n+    }\n+\n+    public void testSingleMatchFiltering() throws Exception\n+    {\n+        // First, verify non-filtering\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = JSON_F.createGenerator(w);\n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        assertEquals(aposToQuotes(\"{'a':123,'array':[1,2],'ob':{'value':3},'b':true}\"),\n+                w.toString());\n+    }\n+\n+    protected void _writeSimpleDoc(JsonGenerator gen) throws IOException\n+    {\n+        // { \"a\" : 123,\n+        //   \"array\" : [ 1, 2 ],\n+        //   \"ob\" : { \"value\" : 3 },\n+        //   \"b\" : true\n+        // }\n+\n+        gen.writeStartObject();\n+\n+        gen.writeFieldName(\"a\");\n+        gen.writeNumber(123);\n+        \n+        gen.writeFieldName(\"array\");\n+        gen.writeStartArray();\n+        gen.writeNumber(1);\n+        gen.writeNumber(2);\n+        gen.writeEndArray();\n+\n+        gen.writeFieldName(\"ob\");\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"value\");\n+        gen.writeNumber(3);\n+        gen.writeEndObject();\n+\n+        gen.writeFieldName(\"b\");\n+        gen.writeBoolean(true);\n+\n+        gen.writeEndObject();\n+    }\n+}", "timestamp": 1428122186, "metainfo": ""}