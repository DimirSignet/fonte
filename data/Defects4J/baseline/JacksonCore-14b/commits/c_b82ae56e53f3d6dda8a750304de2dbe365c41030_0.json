{"sha": "b82ae56e53f3d6dda8a750304de2dbe365c41030", "log": "Minor cleanup for `ObjectCodec`", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n+++ b/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n {\n     protected ObjectCodec() { }\n \n-    // Since 2.3: need baseline implementation to avoid backwards compatibility\n+    // Since 2.3\n     @Override\n-    public Version version() { return Version.unknownVersion(); }\n+    public abstract Version version();\n     \n     /*\n     /**********************************************************\n      * The reason is that due to type erasure, key and value types\n      * can not be introspected when using this method.\n      */\n-    public abstract <T> T readValue(JsonParser jp, Class<T> valueType)\n-        throws IOException, JsonProcessingException;\n+    public abstract <T> T readValue(JsonParser p, Class<T> valueType)\n+        throws IOException;\n \n     /**\n      * Method to deserialize JSON content into a Java type, reference\n      * and specifically needs to be used if the root type is a \n      * parameterized (generic) container type.\n      */\n-    public abstract <T> T readValue(JsonParser jp, TypeReference<?> valueTypeRef)\n-        throws IOException, JsonProcessingException;\n+    public abstract <T> T readValue(JsonParser p, TypeReference<?> valueTypeRef)\n+        throws IOException;\n \n     /**\n      * Method to deserialize JSON content into a POJO, type specified\n      * including containers like {@link java.util.Collection} and\n      * {@link java.util.Map}).\n      */\n-    public abstract <T> T readValue(JsonParser jp, ResolvedType valueType)\n-        throws IOException, JsonProcessingException;\n+    public abstract <T> T readValue(JsonParser p, ResolvedType valueType)\n+        throws IOException;\n \n     /**\n      * Method for reading sequence of Objects from parser stream,\n      * all with same specified value type.\n      */\n-    public abstract <T> Iterator<T> readValues(JsonParser jp, Class<T> valueType)\n-        throws IOException, JsonProcessingException;\n+    public abstract <T> Iterator<T> readValues(JsonParser p, Class<T> valueType)\n+        throws IOException;\n \n     /**\n      * Method for reading sequence of Objects from parser stream,\n      * all with same specified value type.\n      */\n-    public abstract <T> Iterator<T> readValues(JsonParser jp, TypeReference<?> valueTypeRef)\n-        throws IOException, JsonProcessingException;\n+    public abstract <T> Iterator<T> readValues(JsonParser p, TypeReference<?> valueTypeRef)\n+        throws IOException;\n     \n     /**\n      * Method for reading sequence of Objects from parser stream,\n      * all with same specified value type.\n      */\n-    public abstract <T> Iterator<T> readValues(JsonParser jp, ResolvedType valueType)\n-        throws IOException, JsonProcessingException;\n-    \n+    public abstract <T> Iterator<T> readValues(JsonParser p, ResolvedType valueType)\n+        throws IOException;\n+\n     /*\n     /**********************************************************\n     /* API for serialization (Object-to-JSON)\n      * Method to serialize given Java Object, using generator\n      * provided.\n      */\n-    public abstract void writeValue(JsonGenerator jgen, Object value)\n-        throws IOException, JsonProcessingException;\n+    public abstract void writeValue(JsonGenerator gen, Object value) throws IOException;\n \n     /*\n     /**********************************************************\n      * value event, not container). Empty or whitespace\n      * documents return null.\n      *\n-     * @return next tree from jp, or null if empty.\n+     * @return next tree from p, or null if empty.\n      */\n     @Override\n-    public abstract <T extends TreeNode> T readTree(JsonParser jp)\n-        throws IOException, JsonProcessingException;\n+    public abstract <T extends TreeNode> T readTree(JsonParser p) throws IOException;\n     \n     @Override\n-    public abstract void writeTree(JsonGenerator jg, TreeNode tree)\n-        throws IOException, JsonProcessingException;\n+    public abstract void writeTree(JsonGenerator gen, TreeNode tree) throws IOException;\n     \n     /**\n      * Method for construct root level Object nodes", "timestamp": 1454560260, "metainfo": ""}