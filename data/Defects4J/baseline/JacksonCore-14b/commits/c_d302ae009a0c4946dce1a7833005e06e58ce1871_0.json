{"sha": "d302ae009a0c4946dce1a7833005e06e58ce1871", "log": "Add deprecation markers for parse, generation exception constructors obsoleted in 2.6", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n \n     /*\n     /**********************************************************\n-    /* Parser factories (old ones, as per [Issue-25])\n+    /* Parser factories (old ones, pre-2.2)\n     /**********************************************************\n      */\n \n     /**\n      * Method for constructing JSON parser instance to parse\n      * contents of specified file.\n-     *\n      *<p>\n      * Encoding is auto-detected from contents according to JSON\n      * specification recommended mechanism. Json specification\n \n     /*\n     /**********************************************************\n-    /* Generator factories, old (as per [Issue-25]\n+    /* Generator factories, old (pre-2.2)\n     /**********************************************************\n      */\n \n     public JsonGenerator createJsonGenerator(OutputStream out) throws IOException {\n         return createGenerator(out, JsonEncoding.UTF8);\n     }\n-    \n-    /**\n-     * Method for constructing JSON generator for writing JSON content\n-     * to specified file, overwriting contents it might have (or creating\n-     * it if such file does not yet exist).\n-     * Encoding to use must be specified, and needs to be one of available\n-     * types (as per JSON specification).\n-     *<p>\n-     * Underlying stream <b>is owned</b> by the generator constructed,\n-     * i.e. generator will handle closing of file when\n-     * {@link JsonGenerator#close} is called.\n-     *\n-     * @param f File to write contents to\n-     * @param enc Character encoding to use\n-     * \n-     * @deprecated Since 2.2, use {@link #createGenerator(File,JsonEncoding)} instead.\n-     */\n-    @Deprecated\n-    public JsonGenerator createJsonGenerator(File f, JsonEncoding enc) throws IOException {\n-        return createGenerator(f, enc);\n-    }\n \n     /*\n     /**********************************************************\n         }\n         return br;\n     }\n-    \n+\n     /**\n      * Overridable factory method that actually instantiates desired\n      * context object.\n     protected IOContext _createContext(Object srcRef, boolean resourceManaged) {\n         return new IOContext(_getBufferRecycler(), srcRef, resourceManaged);\n     }\n-    \n+\n     /**\n      * Helper methods used for constructing an optimal stream for\n      * parsers to use, when input is to be read from an URL.\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java\n \n     protected JsonGenerator _processor;\n \n-    // TODO: mark deprecated in 2.7\n+    @Deprecated // since 2.7\n     public JsonGenerationException(Throwable rootCause) {\n         super(rootCause);\n     }\n \n-    // TODO: mark deprecated in 2.7\n+    @Deprecated // since 2.7\n     public JsonGenerationException(String msg) {\n         super(msg, (JsonLocation)null);\n     }\n \n-    // TODO: mark deprecated in 2.7\n+    @Deprecated // since 2.7\n     public JsonGenerationException(String msg, Throwable rootCause) {\n         super(msg, null, rootCause);\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParseException.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParseException.java\n \n     protected JsonParser _processor;\n \n-    // TODO: mark deprecated in 2.7\n+    @Deprecated // since 2.7\n     public JsonParseException(String msg, JsonLocation loc) {\n         super(msg, loc);\n     }\n \n-    // TODO: mark deprecated in 2.7\n+    @Deprecated // since 2.7\n     public JsonParseException(String msg, JsonLocation loc, Throwable root) {\n         super(msg, loc, root);\n     }", "timestamp": 1451281995, "metainfo": ""}