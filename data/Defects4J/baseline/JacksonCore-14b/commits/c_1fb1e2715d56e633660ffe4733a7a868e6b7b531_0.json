{"sha": "1fb1e2715d56e633660ffe4733a7a868e6b7b531", "log": "Fixed #248", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n     /**\n      * Loads version information by introspecting a class named\n      * \"PackageVersion\" in the same package as the given class.\n-     *\n+     *<p>\n      * If the class could not be found or does not have a public\n      * static Version field named \"VERSION\", returns null.\n      */\n     public static Version packageVersionFor(Class<?> cls)\n     {\n+        Version v = null;\n         try {\n             String versionInfoClassName = cls.getPackage().getName() + \".PackageVersion\";\n             Class<?> vClass = Class.forName(versionInfoClassName, true, cls.getClassLoader());\n             // However, if class exists, it better work correctly, no swallowing exceptions\n             try {\n-                return ((Versioned) vClass.newInstance()).version();\n+                v = ((Versioned) vClass.newInstance()).version();\n             } catch (Exception e) {\n                 throw new IllegalArgumentException(\"Failed to get Versioned out of \"+vClass);\n             }\n         } catch (Exception e) { // ok to be missing (not good but acceptable)\n-            return null;\n+            ;\n         }\n+        return (v == null) ? Version.unknownVersion() : v;\n     }\n \n     /**\n                     (parts.length > 3) ? parts[3] : null,\n                     groupId, artifactId);\n         }\n-        return null;\n+        return Version.unknownVersion();\n     }\n \n     protected static int parseVersionPart(String s) {", "timestamp": 1453780810, "metainfo": ""}