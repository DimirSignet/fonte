{"sha": "22a452323f59e1ea207368440c8a4315a1cd872c", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n         throw new IllegalStateException(\"Longest collision chain in symbol table (of size \"+_size\n                 +\") now exceeds maximum, \"+maxLen+\" -- suspect a DoS attack based on hash collisions\");\n     }\n-    \n+\n+    // For debugging, comment out\n+    /*\n+    @Override\n+    public String toString()\n+    {\n+        StringBuilder sb = new StringBuilder();\n+        int primaryCount = 0;\n+        for (String s : _symbols) {\n+            if (s != null) ++primaryCount;\n+        }\n+        \n+        sb.append(\"[BytesToNameCanonicalizer, size: \");\n+        sb.append(_size);\n+        sb.append('/');\n+        sb.append(_symbols.length);\n+        sb.append(\", \");\n+        sb.append(primaryCount);\n+        sb.append('/');\n+        sb.append(_size - primaryCount);\n+        sb.append(\" coll; avg length: \");\n+\n+        // Average length: minimum of 1 for all (1 == primary hit);\n+        // and then 1 per each traversal for collisions/buckets\n+        //int maxDist = 1;\n+        int pathCount = _size;\n+        for (Bucket b : _buckets) {\n+            if (b != null) {\n+                int spillLen = b.length;\n+                for (int j = 1; j <= spillLen; ++j) {\n+                    pathCount += j;\n+                }\n+            }\n+        }\n+        double avgLength;\n+\n+        if (_size == 0) {\n+            avgLength = 0.0;\n+        } else {\n+            avgLength = (double) pathCount / (double) _size;\n+        }\n+        // let's round up a bit (two 2 decimal places)\n+        //avgLength -= (avgLength % 0.01);\n+\n+        sb.append(avgLength);\n+        sb.append(']');\n+        return sb.toString();\n+    }\n+*/\n+\n     /*\n     /**********************************************************\n     /* Bucket class\n             } while (++i < len);\n             return symbol;\n         }\n-\n-        /*\n-        public String find(char[] buf, int start, int len) {\n-            String sym = symbol;\n-            Bucket b = next;\n-\n-            while (true) { // Inlined equality comparison:\n-                if (sym.length() == len) {\n-                    int i = 0;\n-                    do {\n-                        if (sym.charAt(i) != buf[start+i]) {\n-                            break;\n-                        }\n-                    } while (++i < len);\n-                    if (i == len) {\n-                        return sym;\n-                    }\n-                }\n-                if (b == null) {\n-                    break;\n-                }\n-                sym = b.symbol;\n-                b = b.next;\n-            }\n-            return null;\n-        }\n-        */\n     }\n }", "timestamp": 1398135430, "metainfo": ""}