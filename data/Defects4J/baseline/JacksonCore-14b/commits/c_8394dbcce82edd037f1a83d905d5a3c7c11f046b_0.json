{"sha": "8394dbcce82edd037f1a83d905d5a3c7c11f046b", "log": "Add bit more symbols testing", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java\n     /**********************************************************\n      */\n \n-    protected JsonParser createParser(JsonFactory jf, String input)\n-        throws IOException, JsonParseException\n+    protected JsonParser createParser(JsonFactory jf, String input) throws IOException\n     {\n         byte[] data = input.getBytes(\"UTF-8\");\n         InputStream is = new ByteArrayInputStream(data);\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n         p.close();\n     }\n \n+    private String _shortDoc191() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"{\\n\");\n+        for (int i = 0; i < 400; ++i) {\n+            if (i > 0) {\n+                sb.append(\",\\n\");\n+            }\n+            sb.append('\"');\n+            char c = (char) i;\n+            if (Character.isLetterOrDigit(c)) {\n+                sb.append((char) i);\n+            } else {\n+                sb.append(String.format(\"\\\\u%04x\", i));\n+            }\n+            sb.append(\"\\\" : \"+i);\n+        }\n+        sb.append(\"}\\n\");\n+        return sb.toString();\n+    }\n+    \n     // [core#191]\n-    public void testShortNameCollisionsDirect() throws IOException\n-    {\n-        final int COUNT = 400;\n+    @SuppressWarnings(\"deprecation\")\n+    public void testShortNameCollisionsDirectOld() throws IOException\n+    {\n+        final int COUNT = 600;\n \n         // First, char-based\n         {\n             assertEquals(COUNT, symbols.size());\n             assertEquals(1024, symbols.bucketCount());\n     \n-            assertEquals(0, symbols.collisionCount());\n-            assertEquals(0, symbols.maxCollisionLength());\n-        }\n-\n+            assertEquals(16, symbols.collisionCount());\n+            assertEquals(1, symbols.maxCollisionLength());\n+        }\n+        \n         // then byte-based\n         {\n             BytesToNameCanonicalizer symbols =\n                     BytesToNameCanonicalizer.createRoot(1).makeChild(JsonFactory.Feature.collectDefaults());\n             for (int i = 0; i < COUNT; ++i) {\n                 String id = String.valueOf((char) i);\n-                int[] quads = BytesToNameCanonicalizer.calcQuads(id.getBytes(\"UTF-8\"));\n+                int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n                 symbols.addName(id, quads, quads.length);\n             }\n             assertEquals(COUNT, symbols.size());\n             assertEquals(1024, symbols.bucketCount());\n     \n-            assertEquals(15, symbols.collisionCount());\n+            assertEquals(209, symbols.collisionCount());\n             assertEquals(1, symbols.maxCollisionLength());\n         }\n     }\n-    \n-    private String _shortDoc191() {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append(\"{\\n\");\n-        for (int i = 0; i < 400; ++i) {\n-            if (i > 0) {\n-                sb.append(\",\\n\");\n-            }\n-            sb.append('\"');\n-            char c = (char) i;\n-            if (Character.isLetterOrDigit(c)) {\n-                sb.append((char) i);\n-            } else {\n-                sb.append(String.format(\"\\\\u%04x\", i));\n-            }\n-            sb.append(\"\\\" : \"+i);\n-        }\n-        sb.append(\"}\\n\");\n-        return sb.toString();\n+\n+    public void testShortNameCollisionsDirectNew() throws IOException\n+    {\n+        final int COUNT = 700;\n+        {\n+            final int SEED = 33333;\n+            ByteQuadsCanonicalizer symbols =\n+                    ByteQuadsCanonicalizer.createRoot(SEED).makeChild(JsonFactory.Feature.collectDefaults());\n+            for (int i = 0; i < COUNT; ++i) {\n+                String id = String.valueOf((char) i);\n+                int[] quads = calcQuads(id.getBytes(\"UTF-8\"));\n+                symbols.addName(id, quads, quads.length);\n+            }\n+            assertEquals(COUNT, symbols.size());\n+\n+            assertEquals(2048, symbols.bucketCount());\n+\n+            // Primary is good, but secondary spills cluster in nasty way...\n+            assertEquals(640, symbols.primaryCount());\n+            assertEquals(30, symbols.secondaryCount());\n+            assertEquals(16, symbols.tertiaryCount());\n+            assertEquals(14, symbols.spilloverCount());\n+\n+            assertEquals(COUNT,\n+                    symbols.primaryCount() + symbols.secondaryCount() + symbols.tertiaryCount() + symbols.spilloverCount());\n+        }\n     }\n }", "timestamp": 1429747725, "metainfo": ""}