{"sha": "a84b41cc5e83c94043303549847daf9e5af8b9be", "log": "minor test coverage improvement", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java\n \n public class TestDelegates extends com.fasterxml.jackson.core.BaseTest\n {\n+    private final JsonFactory JSON_F = new JsonFactory();\n+    \n     /**\n      * Test default, non-overridden parser delegate.\n      */\n     public void testParserDelegate() throws IOException\n     {\n-        JsonParser jp = new JsonFactory().createParser(\"[ 1, true ]\");\n+        JsonParser jp0 = JSON_F.createParser(\"[ 1, true, null, { } ]\");\n+        JsonParserDelegate jp = new JsonParserDelegate(jp0);\n+        \n         assertNull(jp.getCurrentToken());\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertEquals(\"[\", jp.getText());\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         assertEquals(1, jp.getIntValue());\n+\n         assertToken(JsonToken.VALUE_TRUE, jp.nextToken());\n         assertTrue(jp.getBooleanValue());\n+\n+        assertToken(JsonToken.VALUE_NULL, jp.nextToken());\n+        \n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+\n         jp.close();\n         assertTrue(jp.isClosed());\n+        assertTrue(jp0.isClosed());\n+\n+        jp0.close();\n     }\n \n     /**\n     public void testGeneratorDelegate() throws IOException\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = new JsonFactory().createGenerator(sw);\n+        JsonGenerator g0 = JSON_F.createGenerator(sw);\n+        JsonGeneratorDelegate jg = new JsonGeneratorDelegate(g0);\n         jg.writeStartArray();\n+\n+        assertEquals(1, jg.getOutputBuffered());\n+        \n         jg.writeNumber(13);\n         jg.writeNull();\n         jg.writeBoolean(false);\n+        jg.writeString(\"foo\");\n+        jg.writeStartObject();\n+        jg.writeEndObject();\n+\n+        jg.writeStartArray(0);\n         jg.writeEndArray();\n+\n+        jg.writeEndArray();\n+        \n+        jg.flush();\n         jg.close();\n         assertTrue(jg.isClosed());        \n-        assertEquals(\"[13,null,false]\", sw.toString());\n+        assertTrue(g0.isClosed());        \n+        assertEquals(\"[13,null,false,\\\"foo\\\",{},[]]\", sw.toString());\n+\n+        g0.close();\n     }\n \n     public void testNotDelegateCopyMethods() throws IOException\n     {\n-        JsonParser jp = new JsonFactory().createParser(\"[{\\\"a\\\":[1,2,{\\\"b\\\":3}],\\\"c\\\":\\\"d\\\"},{\\\"e\\\":false},null]\");\n+        JsonParser jp = JSON_F.createParser(\"[{\\\"a\\\":[1,2,{\\\"b\\\":3}],\\\"c\\\":\\\"d\\\"},{\\\"e\\\":false},null]\");\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = new JsonGeneratorDelegate(new JsonFactory().createGenerator(sw), false) {\n+        JsonGenerator jg = new JsonGeneratorDelegate(JSON_F.createGenerator(sw), false) {\n             @Override\n             public void writeFieldName(String name) throws IOException, JsonGenerationException {\n                 super.writeFieldName(name+\"-test\");", "timestamp": 1432688784, "metainfo": ""}