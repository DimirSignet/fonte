{"sha": "1d97b5396e198a05a99508eaf64ece4451526a4e", "log": "Merge branch 'master' of github.com:FasterXML/jackson-core  Conflicts: \tsrc/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n         ;\n \n         private final boolean _defaultState;\n-\n         private final int _mask;\n         \n         /**\n         }\n         \n         private Feature(boolean defaultState) {\n+            _defaultState = defaultState;\n             _mask = (1 << ordinal());\n-            _defaultState = defaultState;\n         }\n \n         public boolean enabledByDefault() { return _defaultState; }\n     public abstract int getFeatureMask();\n \n     /**\n-     * Bulk set method for (re)settting states of all standard {@link Feature}s\n+     * Bulk set method for (re)setting states of all standard {@link Feature}s\n      * \n      * @since 2.3\n      * \n+     * @param values Bitmask that defines which {@link Feature}s are enabled\n+     *    and which disabled\n+     *\n      * @return This parser object, to allow chaining of calls\n      */\n-    public abstract JsonGenerator setFeatureMask(int mask);\n-    \n+    public abstract JsonGenerator setFeatureMask(int values);\n+\n     /*\n     /**********************************************************\n     /* Public API, Schema configuration\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n             }\n             return flags;\n         }\n-        \n+\n         private Feature(boolean defaultState) {\n             _mask = (1 << ordinal());\n             _defaultState = defaultState;\n         }\n-        \n+\n         public boolean enabledByDefault() { return _defaultState; }\n-        \n+\n         /**\n          * @since 2.3\n          */\n         public boolean enabledIn(int flags) { return (flags & _mask) != 0; }\n \n-        public int getMask() { return (1 << ordinal()); }\n+        public int getMask() { return _mask; }\n     }\n \n     /*\n     /**\n      * Method for checking whether specified {@link Feature} is enabled.\n      */\n-    public boolean isEnabled(Feature f) { return (_features & f.getMask()) != 0; }\n+    public boolean isEnabled(Feature f) { return f.enabledIn(_features); }\n \n     /**\n      * Bulk access method for getting state of all standard {@link Feature}s.\n     public int getFeatureMask() { return _features; }\n \n     /**\n-     * Bulk set method for (re)settting states of all standard {@link Feature}s\n-     * \n+     * Bulk set method for (re)setting states of all standard {@link Feature}s\n+     *\n      * @since 2.3\n      * \n      * @return This parser object, to allow chaining of calls\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n     public final static int SURR2_FIRST = 0xDC00;\n     public final static int SURR2_LAST = 0xDFFF;\n \n+    /**\n+     * Set of feature masks related to features that need updates of other\n+     * local configuration or state.\n+     * \n+     * @since 2.5\n+     */\n+    protected final static int DERIVED_FEATURES_MASK = Feature.WRITE_NUMBERS_AS_STRINGS.getMask()\n+            | Feature.ESCAPE_NON_ASCII.getMask()\n+            | Feature.STRICT_DUPLICATE_DETECTION.getMask()\n+            ;\n+\n     /*\n     /**********************************************************\n     /* Configuration\n     /**********************************************************\n      */\n \n-    @Override\n-    public JsonGenerator enable(Feature f) {\n-        _features |= f.getMask();\n-        if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n-            _cfgNumbersAsStrings = true;\n-        } else if (f == Feature.ESCAPE_NON_ASCII) {\n-            setHighestNonEscapedChar(127);\n-        }\n-        return this;\n-    }\n-\n-    @Override\n-    public JsonGenerator disable(Feature f) {\n-        _features &= ~f.getMask();\n-        if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n-            _cfgNumbersAsStrings = false;\n-        } else if (f == Feature.ESCAPE_NON_ASCII) {\n-            setHighestNonEscapedChar(0);\n-        }\n-        return this;\n-    }\n-\n-    //public JsonGenerator configure(Feature f, boolean state) { }\n \n     @Override public final boolean isEnabled(Feature f) { return (_features & f.getMask()) != 0; }\n     @Override public int getFeatureMask() { return _features; }\n \n-    @Override public JsonGenerator setFeatureMask(int mask) {\n-        _features = mask;\n+    //public JsonGenerator configure(Feature f, boolean state) { }\n+    \n+    @Override\n+    public JsonGenerator enable(Feature f) {\n+        final int mask = f.getMask();\n+        _features |= mask;\n+        if ((mask & DERIVED_FEATURES_MASK) != 0) {\n+            if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n+                _cfgNumbersAsStrings = true;\n+            } else if (f == Feature.ESCAPE_NON_ASCII) {\n+                setHighestNonEscapedChar(127);\n+            } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {\n+                if (_writeContext.getDupDetector() == null) { // but only if disabled currently\n+                    _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));\n+                }\n+            }\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonGenerator disable(Feature f) {\n+        final int mask = f.getMask();\n+        _features &= ~mask;\n+        if ((mask & DERIVED_FEATURES_MASK) != 0) {\n+            if (f == Feature.WRITE_NUMBERS_AS_STRINGS) {\n+                _cfgNumbersAsStrings = false;\n+            } else if (f == Feature.ESCAPE_NON_ASCII) {\n+                setHighestNonEscapedChar(0);\n+            } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {\n+                _writeContext = _writeContext.withDupDetector(null);\n+            }\n+        }\n+        return this;\n+    }\n+\n+    @Override public JsonGenerator setFeatureMask(int newMask) {\n+        int changed = newMask ^ _features;\n+        _features = newMask;\n+        if ((changed & DERIVED_FEATURES_MASK) != 0) {\n+            _cfgNumbersAsStrings = Feature.WRITE_NUMBERS_AS_STRINGS.enabledIn(newMask);\n+            if (Feature.ESCAPE_NON_ASCII.enabledIn(changed)) {\n+                if (Feature.ESCAPE_NON_ASCII.enabledIn(newMask)) {\n+                    setHighestNonEscapedChar(127);\n+                } else {\n+                    setHighestNonEscapedChar(0);\n+                }\n+            }\n+            if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(changed)) {\n+                if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newMask)) { // enabling\n+                    if (_writeContext.getDupDetector() == null) { // but only if disabled currently\n+                        _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));\n+                    }\n+                } else { // disabling\n+                    _writeContext = _writeContext.withDupDetector(null);\n+                }\n+            }\n+        }\n         return this;\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.JsonParser.Feature;\n import com.fasterxml.jackson.core.io.IOContext;\n import com.fasterxml.jackson.core.io.NumberInput;\n import com.fasterxml.jackson.core.json.DupDetector;\n \n     @Override public Version version() { return PackageVersion.VERSION; }\n \n+    /*\n+    /**********************************************************\n+    /* Overrides for Feature handling\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonParser enable(Feature f) {\n+        _features |= f.getMask();\n+        if (f == Feature.STRICT_DUPLICATE_DETECTION) { // enabling dup detection?\n+            if (_parsingContext.getDupDetector() == null) { // but only if disabled currently\n+                _parsingContext = _parsingContext.withDupDetector(DupDetector.rootDetector(this));\n+            }\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonParser disable(Feature f) {\n+        _features &= ~f.getMask();\n+        if (f == Feature.STRICT_DUPLICATE_DETECTION) {\n+            _parsingContext = _parsingContext.withDupDetector(null);\n+        }\n+        return this;\n+    }\n+    \n+    @Override\n+    public JsonParser setFeatureMask(int newMask) {\n+        int changes = (_features ^ newMask);\n+        if (changes != 0) {\n+            _features = newMask;\n+            if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newMask)) { // enabling\n+                if (_parsingContext.getDupDetector() == null) { // but only if disabled currently\n+                    _parsingContext = _parsingContext.withDupDetector(DupDetector.rootDetector(this));\n+                }\n+            } else { // disabling\n+                _parsingContext = _parsingContext.withDupDetector(null);\n+            }\n+        }\n+        return this;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* JsonParser impl\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n     \n     // // // Optional duplicate detection\n \n-    protected final DupDetector _dups;\n+    protected DupDetector _dups;\n     \n     // // // Location information (minus source reference)\n \n     }\n     */\n \n-    // // // Factory methods\n+    public JsonReadContext withDupDetector(DupDetector dups) {\n+        _dups = dups;\n+        return this;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Factory methods\n+    /**********************************************************\n+     */\n \n     @Deprecated // since 2.3, use variant that takes dup detector\n     public static JsonReadContext createRootContext(int lineNr, int colNr) {\n         return createRootContext(lineNr, colNr, null);\n     }\n-    \n+\n     public static JsonReadContext createRootContext(int lineNr, int colNr, DupDetector dups) {\n         return new JsonReadContext(null, dups, TYPE_ROOT, lineNr, colNr);\n     }\n         // We don't keep track of offsets at this level (only reader does)\n         long totalChars = -1L;\n         return new JsonLocation(srcRef, totalChars, _lineNr, _columnNr);\n+    }\n+\n+    public DupDetector getDupDetector() {\n+        return _dups;\n     }\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n \n     // // // Optional duplicate detection\n \n-    protected final DupDetector _dups;\n+    protected DupDetector _dups;\n     \n     /*\n     /**********************************************************\n         if (_dups != null) { _dups.reset(); }\n         return this;\n     }\n+\n+    public JsonWriteContext withDupDetector(DupDetector dups) {\n+        _dups = dups;\n+        return this;\n+    }\n     \n-    // // // Factory methods\n+    /*\n+    /**********************************************************\n+    /* Factory methods\n+    /**********************************************************\n+     */\n \n     /**\n      * @deprecated Since 2.3; use method that takes argument\n     @Deprecated\n     public static JsonWriteContext createRootContext() { return createRootContext(null); }\n \n-    public static JsonWriteContext createRootContext(DupDetector dd) { return new JsonWriteContext(TYPE_ROOT, null, dd); }\n+    public static JsonWriteContext createRootContext(DupDetector dd) {\n+        return new JsonWriteContext(TYPE_ROOT, null, dd);\n+    }\n \n     public JsonWriteContext createChildArrayContext() {\n         JsonWriteContext ctxt = _child;\n \n     @Override public final JsonWriteContext getParent() { return _parent; }\n     @Override public final String getCurrentName() { return _currentName; }\n+\n+    public DupDetector getDupDetector() {\n+        return _dups;\n+    }\n     \n     // // // API sub-classes are to implement\n \n--- a/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorDupHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorDupHandling.java\n public class TestGeneratorDupHandling\n     extends com.fasterxml.jackson.core.BaseTest\n {\n-    public void testSimpleDups() throws Exception\n-    {\n-        _testSimpleDups(false);\n-        _testSimpleDups(true);\n+    public void testSimpleDupsEagerlyBytes() throws Exception {\n+        _testSimpleDups(true, false, new JsonFactory());\n+    }\n+    public void testSimpleDupsEagerlyChars() throws Exception {\n+        _testSimpleDups(false, false, new JsonFactory());\n+    }\n+\n+    // Testing ability to enable checking after construction of\n+    // generator, not just via JsonFactory\n+    public void testSimpleDupsLazilyBytes() throws Exception {\n+        final JsonFactory f = new JsonFactory();\n+        assertFalse(f.isEnabled(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION));\n+        _testSimpleDups(true, true, f);\n+    }\n+\n+    public void testSimpleDupsLazilyChars() throws Exception {\n+        final JsonFactory f = new JsonFactory();\n+        _testSimpleDups(false, true, f);\n     }\n     \n-    protected void _testSimpleDups(boolean useStream) throws Exception\n+    @SuppressWarnings(\"resource\")\n+    protected void _testSimpleDups(boolean useStream, boolean lazySetting, JsonFactory f)\n+            throws Exception\n     {\n-        JsonFactory f = new JsonFactory();\n-        assertFalse(f.isEnabled(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION));\n-\n         // First: fine, when not checking\n-        _writeSimple0(_generator(f, useStream), \"a\");\n-        _writeSimple1(_generator(f, useStream), \"b\");\n+        if (!lazySetting) {\n+            _writeSimple0(_generator(f, useStream), \"a\");\n+            _writeSimple1(_generator(f, useStream), \"b\");\n+        }\n \n         // but not when checking\n-        f.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+        JsonGenerator g1;\n+\n+        if (lazySetting) {\n+            g1 = _generator(f, useStream);            \n+            g1.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+        } else {\n+            f.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+            g1 = _generator(f, useStream);            \n+        }\n         try {\n-            _writeSimple0( _generator(f, useStream), \"a\");\n+            _writeSimple0(g1, \"a\");\n             fail(\"Should have gotten exception\");\n         } catch (JsonGenerationException e) {\n             verifyException(e, \"duplicate field 'a'\");\n         }\n \n+        JsonGenerator g2;\n+        if (lazySetting) {\n+            g2 = _generator(f, useStream);            \n+            g2.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+        } else {\n+            g2 = _generator(f, useStream);            \n+        }\n         try {\n-            _writeSimple1( _generator(f, useStream), \"x\");\n+            _writeSimple1(g2, \"x\");\n             fail(\"Should have gotten exception\");\n         } catch (JsonGenerationException e) {\n             verifyException(e, \"duplicate field 'x'\");\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestParserDupHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserDupHandling.java\n public class TestParserDupHandling\n     extends com.fasterxml.jackson.core.BaseTest\n {\n-    public void testSimpleDups() throws Exception\n-    {\n-        for (String doc : new String[] {\n+    private final String[] DUP_DOCS = new String[] {\n             \"{ 'a':1, 'a':2 }\",\n             \"[{ 'a':1, 'a':2 }]\",\n             \"{ 'a':1, 'b':2, 'c':3,'a':true,'e':false }\",\n             \"{ 'foo': { 'bar': [ [ { 'x':3, 'a':1 } ]], 'x':0, 'a':'y', 'b':3,'a':13 } }\",\n             \"[{'b':1},{'b\\\":3},[{'a':3}], {'a':1,'a':2}]\",\n             \"{'b':1,'array':[{'b':3}],'ob':{'b':4,'x':0,'y':3,'a':true,'a':false }}\",\n-        }) {\n-            doc = doc.replace(\"'\", \"\\\"\");\n-            JsonFactory f = new JsonFactory();\n-            assertFalse(f.isEnabled(JsonParser.Feature.STRICT_DUPLICATE_DETECTION));\n+    };\n+    {\n+        for (int i = 0; i < DUP_DOCS.length; ++i) {\n+            DUP_DOCS[i] = DUP_DOCS[i].replace(\"'\", \"\\\"\");\n+        }\n+    }\n+    \n+    public void testSimpleDupsDisabled() throws Exception\n+    {\n+        // first: verify no problems if detection NOT enabled\n+        final JsonFactory f = new JsonFactory();\n+        assertFalse(f.isEnabled(JsonParser.Feature.STRICT_DUPLICATE_DETECTION));\n+        for (String doc : DUP_DOCS) {\n             _testSimpleDupsOk(doc, f, false);\n             _testSimpleDupsOk(doc, f, true);\n-    \n-            f.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n-            _testSimpleDupsFail(doc, f, false, \"a\");\n-            _testSimpleDupsFail(doc, f, true, \"a\");\n         }\n     }\n \n-    private void _testSimpleDupsOk(final String doc, JsonFactory f, boolean useStream) throws Exception\n+    public void testSimpleDupsBytes() throws Exception\n+    {\n+        JsonFactory nonDupF = new JsonFactory();\n+        JsonFactory dupF = new JsonFactory();\n+        dupF.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n+        for (String doc : DUP_DOCS) {\n+            // First, with static setting\n+            _testSimpleDupsFail(doc, dupF, true, \"a\", false);\n+\n+            // and then dynamic\n+            _testSimpleDupsFail(doc, nonDupF, true, \"a\", true);\n+        }\n+    }\n+\n+    public void testSimpleDupsChars() throws Exception\n+    {\n+        JsonFactory nonDupF = new JsonFactory();\n+        JsonFactory dupF = new JsonFactory();\n+        dupF.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n+        for (String doc : DUP_DOCS) {\n+            _testSimpleDupsFail(doc, dupF, false, \"a\", false);\n+            _testSimpleDupsFail(doc, nonDupF, false, \"a\", true);\n+        }\n+    }\n+    \n+    private void _testSimpleDupsOk(final String doc, JsonFactory f,\n+            boolean useStream) throws Exception\n     {\n         JsonParser jp = useStream ?\n                 createParserUsingStream(f, doc, \"UTF-8\") : createParserUsingReader(f, doc);\n     }\n \n     private void _testSimpleDupsFail(final String doc, JsonFactory f,\n-            boolean useStream, String name) throws Exception\n+            boolean useStream, String name, boolean lazily) throws Exception\n     {\n         JsonParser jp = useStream ?\n                 createParserUsingStream(f, doc, \"UTF-8\") : createParserUsingReader(f, doc);\n+        if (lazily) {\n+            jp.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n+        }\n         JsonToken t = jp.nextToken();\n         assertNotNull(t);\n         assertTrue(t.isStructStart());\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n  */\n public abstract class GeneratorBase extends JsonGenerator\n {\n+    public final static int SURR1_FIRST = 0xD800;\n+    public final static int SURR1_LAST = 0xDBFF;\n+    public final static int SURR2_FIRST = 0xDC00;\n+    public final static int SURR2_LAST = 0xDFFF;\n+\n     /**\n      * Set of feature masks related to features that need updates of other\n      * local configuration or state.\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n     private final static byte BYTE_COMMA = (byte) ',';\n     private final static byte BYTE_COLON = (byte) ':';\n     private final static byte BYTE_QUOTE = (byte) '\"';\n-\n-    protected final static int SURR1_FIRST = 0xD800;\n-    protected final static int SURR1_LAST = 0xDBFF;\n-    protected final static int SURR2_FIRST = 0xDC00;\n-    protected final static int SURR2_LAST = 0xDFFF;\n \n     // intermediate copies only made up to certain length...\n     private final static int MAX_BYTES_TO_BUFFER = 512;\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n     public void writeRaw(SerializableString text) throws IOException {\n         writeRaw(text.getValue());\n     }\n-    \n+\n     @Override\n     public void writeRaw(char[] text, int offset, int len) throws IOException\n     {", "timestamp": 1415740106, "metainfo": ""}