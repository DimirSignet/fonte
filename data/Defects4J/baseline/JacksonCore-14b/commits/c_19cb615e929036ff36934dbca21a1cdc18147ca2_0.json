{"sha": "19cb615e929036ff36934dbca21a1cdc18147ca2", "log": "Add bit more testing, using 'MediaItem' as another sanity check", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n      * and truncates to be used as the index.\n      */\n     public int _hashToIndex(int rawHash) {\n-        rawHash += (rawHash >>> 15); // this seems to help quite a bit, at least for our tests\n+        // doing these seems to help a bit\n+        rawHash += (rawHash >>> 15);\n+//        rawHash ^= (rawHash >> 5);\n+        rawHash += (rawHash << 3);\n         return (rawHash & _indexMask);\n     }\n     \n--- a/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n         return sb.toString();\n     }\n \n+    protected int[] calcQuads(byte[] wordBytes) {\n+        int blen = wordBytes.length;\n+        int[] result = new int[(blen + 3) / 4];\n+        for (int i = 0; i < blen; ++i) {\n+            int x = wordBytes[i] & 0xFF;\n+\n+            if (++i < blen) {\n+                x = (x << 8) | (wordBytes[i] & 0xFF);\n+                if (++i < blen) {\n+                    x = (x << 8) | (wordBytes[i] & 0xFF);\n+                    if (++i < blen) {\n+                        x = (x << 8) | (wordBytes[i] & 0xFF);\n+                    }\n+                }\n+            }\n+            result[i >> 2] = x;\n+        }\n+        return result;\n+    }\n }\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n         \n         // holy guacamoley... there are way too many. 31 gives 3567 (!), 33 gives 2747\n         // ... at least before shuffling. Shuffling helps quite a lot, so:\n-\n+        \n         assertEquals(2691, symbols.collisionCount());\n \n-        assertEquals(3, symbols.maxCollisionLength());\n+        assertEquals(4, symbols.maxCollisionLength());\n     }\n \n     // Test for verifying stability of hashCode, wrt collisions, using\n         return ((ByteQuadsCanonicalizer) syms.get(p));\n     }\n \n-    // Method only used by unit tests\n-    protected static int[] calcQuads(byte[] wordBytes) {\n-        int blen = wordBytes.length;\n-        int[] result = new int[(blen + 3) / 4];\n-        for (int i = 0; i < blen; ++i) {\n-            int x = wordBytes[i] & 0xFF;\n-\n-            if (++i < blen) {\n-                x = (x << 8) | (wordBytes[i] & 0xFF);\n-                if (++i < blen) {\n-                    x = (x << 8) | (wordBytes[i] & 0xFF);\n-                    if (++i < blen) {\n-                        x = (x << 8) | (wordBytes[i] & 0xFF);\n-                    }\n-                }\n-            }\n-            result[i >> 2] = x;\n-        }\n-        return result;\n-    }\n-\n     // [core#187]: unexpectedly high number of collisions for straight numbers\n     @SuppressWarnings(\"deprecation\")\n     public void testCollisionsWithBytes187() throws IOException\n         // collision count rather high, but has to do\n         assertEquals(14408, symbols.collisionCount());\n         // as well as collision counts\n-        assertEquals(10, symbols.maxCollisionLength());\n+        assertEquals(5, symbols.maxCollisionLength());\n     }\n \n     // [core#187]: unexpectedly high number of collisions for straight numbers\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolsWithMediaItem.java\n+package com.fasterxml.jackson.core.sym;\n+\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+public class TestSymbolsWithMediaItem extends com.fasterxml.jackson.core.BaseTest\n+{\n+    private final String JSON = aposToQuotes(\n+            \"{'media' : {\\n\"\n+            +\"      'uri' : 'http://foo.com',\"\n+            +\"      'title' : 'Test title 1',\"\n+            +\"      'width' : 640, 'height' : 480,\"\n+            +\"      'format' : 'video/mpeg4',\"\n+            +\"      'duration' : 18000000,\"\n+            +\"      'size' : 58982400,\"\n+            +\"      'bitrate' : 262144,\"\n+            +\"      'persons' : [ ],\"\n+            +\"      'player' : 'native',\"\n+            +\"      'copyright' : 'None'\"\n+            +\"   },\\n\"\n+            +\"   'images' : [ {\\n\"\n+            +\"      'uri' : 'http://bar.com',\\n\"\n+            +\"      'title' : 'Test title 1',\\n\"\n+            +\"      'width' : 1024,'height' : 768,\\n\"\n+            +\"      'size' : 'LARGE'\\n\"\n+            +\"    }, {\\n\"\n+            +\"      'uri' : 'http://foobar.org',\\n\"\n+            +\"      'title' : 'Javaone Keynote',\\n\"\n+            +\"      'width' : 320, 'height' : 240,\\n\"\n+            +\"      'size' : 'SMALL'\\n\"\n+            +\"    } ]\\n\"\n+            +\"}\\n\");\n+\n+    public void testSmallSymbolSetWithBytes() throws IOException\n+    {\n+        final int SEED = 33333;\n+\n+        ByteQuadsCanonicalizer symbolsRoot = ByteQuadsCanonicalizer.createRoot(SEED);\n+        ByteQuadsCanonicalizer symbols = symbolsRoot.makeChild(JsonFactory.Feature.collectDefaults());\n+        JsonFactory f = new JsonFactory();\n+        JsonParser p = f.createParser(JSON.getBytes(\"UTF-8\"));\n+\n+        JsonToken t;\n+        while ((t = p.nextToken()) != null) {\n+            if (t != JsonToken.FIELD_NAME) {\n+                continue;\n+            }\n+            String name = p.getCurrentName();\n+            int[] quads = calcQuads(name.getBytes(\"UTF-8\"));\n+\n+            if (symbols.findName(quads, quads.length) != null) {\n+                continue;\n+            }\n+            symbols.addName(name, quads, quads.length);\n+        }\n+        p.close();\n+        \n+        assertEquals(13, symbols.size());\n+        assertEquals(12, symbols.primaryCount()); // 80% primary hit rate\n+        assertEquals(1, symbols.secondaryCount()); // 13% secondary\n+        assertEquals(0, symbols.tertiaryCount()); // 7% tertiary\n+        assertEquals(0, symbols.spilloverCount()); // and couple of leftovers\n+    }\n+\n+    public void testSmallSymbolSetWithChars() throws IOException\n+    {\n+        final int SEED = 33333;\n+\n+        CharsToNameCanonicalizer symbols = CharsToNameCanonicalizer.createRoot(SEED);\n+        JsonFactory f = new JsonFactory();\n+        JsonParser p = f.createParser(JSON);\n+\n+        JsonToken t;\n+        while ((t = p.nextToken()) != null) {\n+            if (t != JsonToken.FIELD_NAME) {\n+                continue;\n+            }\n+            String name = p.getCurrentName();\n+            char[] ch = name.toCharArray();\n+            symbols.findSymbol(ch, 0, ch.length, symbols.calcHash(name));\n+        }\n+        p.close();\n+        \n+        assertEquals(13, symbols.size());\n+        assertEquals(13, symbols.size());\n+        assertEquals(64, symbols.bucketCount());\n+\n+        /* 30-Mar-2015, tatu: It is possible to tweak things to eliminate the\n+         *    last collision, but difficult to make it overall beneficial\n+         *    with other collision rate tests.\n+         */\n+        \n+        // collision count rather high, but has to do\n+        assertEquals(1, symbols.collisionCount());\n+        // as well as collision counts\n+        assertEquals(1, symbols.maxCollisionLength());\n+    }\n+}", "timestamp": 1427737034, "metainfo": ""}