{"sha": "0e535351692fe8e67df43c10028522ded5913ed7", "log": "Remaining fixes to make initial tests work 100%", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n      * to be made to {@link TokenFilter}\n      */\n     protected boolean _needCloseCheck;\n+\n+    /**\n+     * Flag that indicates that the current name of this context\n+     * still needs to be written, if path from root is desired.\n+     */\n+    protected boolean _needToWriteName;\n     \n     /*\n     /**********************************************************\n         _filter = filter;\n         _index = -1;\n         _startWritten = startWritten;\n+        _needToWriteName = false;\n     }\n \n     protected TokenFilterContext reset(int type,\n         _index = -1;\n         _currentName = null;\n         _startWritten = startWritten;\n+        _needToWriteName = false;\n         return this;\n     }\n \n     \n     public TokenFilter setFieldName(String name) throws JsonProcessingException {\n         _currentName = name;\n+        _needToWriteName = true;\n         return _filter;\n     }\n \n         if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {\n             return;\n         }\n-//System.err.println(\"writePath(), startWritten? \"+_startWritten+\" at \"+toString());\n+System.err.println(\"writePath(\"+_type+\"), startWritten? \"+_startWritten+\", writeName? \"+_needToWriteName+\" at \"+toString());\n         if (_parent != null) {\n             _parent._writePath(gen);\n         }\n         if (_startWritten) {\n             // even if Object started, need to start leaf-level name\n-            if (_type == TYPE_OBJECT) {\n-//System.err.println(\" write field name '\"+_currentName+\"'\");                \n+            if (_needToWriteName) {\n+System.err.println(\" write field name '\"+_currentName+\"'\");                \n                 gen.writeFieldName(_currentName);\n             }\n         } else {\n             _startWritten = true;\n             if (_type == TYPE_OBJECT) {\n-//System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n+System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n                 gen.writeStartObject();\n-                gen.writeFieldName(_currentName);\n+                gen.writeFieldName(_currentName); // we know name must be written\n             } else if (_type == TYPE_ARRAY) {\n+System.err.println(\" write array start\");\n                 gen.writeStartArray();\n             }\n         }\n         }\n         if (_startWritten) {\n             // even if Object started, need to start leaf-level name\n-            if (_type == TYPE_OBJECT) {\n+            if (_needToWriteName) {\n                 gen.writeFieldName(_currentName);\n             }\n         } else {\n             _startWritten = true;\n             if (_type == TYPE_OBJECT) {\n                 gen.writeStartObject();\n-                gen.writeFieldName(_currentName);\n+                if (_needToWriteName) {\n+                    gen.writeFieldName(_currentName);\n+                }\n             } else if (_type == TYPE_ARRAY) {\n                 gen.writeStartArray();\n             }\n \n     private void _writePath(JsonGenerator gen) throws IOException\n     {\n-//System.err.println(\"_writePath(), startWritten? \"+_startWritten+\" at \"+toString());\n+System.err.println(\"_writePath(\"+_type+\"), startWritten? \"+_startWritten+\", writeName? \"+_needToWriteName+\" at \"+toString());\n         if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {\n             return;\n         }\n         if (_parent != null) {\n             _parent._writePath(gen);\n         }\n-        if (!_startWritten) {\n+        if (_startWritten) {\n+            // even if Object started, need to start leaf-level name\n+            if (_needToWriteName) {\n+                _needToWriteName = false; // at parent must explicitly clear\n+                gen.writeFieldName(_currentName);\n+            }\n+        } else {\n             _startWritten = true;\n             if (_type == TYPE_OBJECT) {\n-//System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n+System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n                 gen.writeStartObject();\n-                gen.writeFieldName(_currentName);\n+                if (_needToWriteName) {\n+                    _needToWriteName = false; // at parent must explicitly clear\n+                    gen.writeFieldName(_currentName);\n+                }\n             } else if (_type == TYPE_ARRAY) {\n                 gen.writeStartArray();\n             }\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicFilteringTest.java\n                 w.toString());\n     }\n \n+    public void testSingleMatchFilteringWithoutPath() throws Exception\n+    {\n+        StringWriter w = new StringWriter();\n+        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n+                new NameMatchFilter(\"value\"),\n+                false, // includePath\n+                false // multipleMatches\n+                );\n+        \n+        _writeSimpleDoc(gen);\n+        gen.close();\n+        // Since properties MUST be contained within an Object, inclusion needs\n+         // to materialize surrounding Object too!\n+        assertEquals(aposToQuotes(\"{'value':3}\"), w.toString());\n+    }\n+\n     public void testSingleMatchFilteringWithPath() throws Exception\n     {\n         StringWriter w = new StringWriter();\n     public void testMultipleMatchFilteringWithPath2() throws Exception\n     {\n         StringWriter w = new StringWriter();\n+        \n         JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n                 new NameMatchFilter(\"array\", \"b\", \"value\"),\n                 true, true);\n+        try {\n         _writeSimpleDoc(gen);\n         gen.close();\n+        } finally {\n+            gen.flush();\n+            System.out.println(\"JSON -> <\"+w+\">\");\n+        }\n         assertEquals(aposToQuotes(\"{'array':[1,2],'ob':{'value':3},'b':true}\"), w.toString());\n-    \n-    }\n-    \n-    public void testSingleMatchFilteringWithoutPath() throws Exception\n-    {\n-        StringWriter w = new StringWriter();\n-        JsonGenerator gen = new FilteringGeneratorDelegate(JSON_F.createGenerator(w),\n-                new NameMatchFilter(\"value\"),\n-                false, // includePath\n-                false // multipleMatches\n-                );\n-        \n-        _writeSimpleDoc(gen);\n-        gen.close();\n-        /* Since properties MUST be contained within an Object, inclusion needs\n-         * to materialize surrounding Object too!\n-         */\n-        assertEquals(aposToQuotes(\"{'value':3}\"), w.toString());\n     }\n     \n     protected void _writeSimpleDoc(JsonGenerator gen) throws IOException", "timestamp": 1428539190, "metainfo": ""}