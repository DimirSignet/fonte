{"sha": "e9972871d6dcc24cfb56440c46e1f085a31b85ec", "log": "Fixed #148 as suggested (need to do perf tests but should work correctly)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n             if (qlen >= quads.length) {\n                 _quadBuffer = quads = growArrayBy(quads, quads.length);\n             }\n-            quads[qlen++] = currQuad;\n+            quads[qlen++] = pad(currQuad, currQuadBytes);\n         }\n         Name name = _symbols.findName(quads, qlen);\n         if (name == null) {\n     private final Name findName(int q1, int lastQuadBytes)\n         throws JsonParseException\n     {\n+        q1 = pad(q1, lastQuadBytes);\n         // Usually we'll find it from the canonical symbol table already\n         Name name = _symbols.findName(q1);\n         if (name != null) {\n     private final Name findName(int q1, int q2, int lastQuadBytes)\n         throws JsonParseException\n     {\n+        q2 = pad(q2, lastQuadBytes);\n         // Usually we'll find it from the canonical symbol table already\n         Name name = _symbols.findName(q1, q2);\n         if (name != null) {\n         if (qlen >= quads.length) {\n             _quadBuffer = quads = growArrayBy(quads, quads.length);\n         }\n-        quads[qlen++] = lastQuad;\n+        quads[qlen++] = pad(lastQuad, lastQuadBytes);\n         Name name = _symbols.findName(quads, qlen);\n         if (name == null) {\n             return addName(quads, qlen, lastQuadBytes);\n \n     /*\n     /**********************************************************\n-    /* Binary access\n+    /* Internal methods, binary access\n     /**********************************************************\n      */\n \n             builder.appendThreeBytes(decodedData);\n         }\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Internal methods, other\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Helper method needed to fix [Issue#148], masking of 0x00 character\n+     */\n+    private final static int pad(int q, int bytes) {\n+        return (bytes == 4) ? q : (q | (-1 << (bytes << 3)));\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserSymbols.java\n+package com.fasterxml.jackson.core.json;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+public class TestParserSymbols\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+    // For [Issue#148]\n+    public void testSymbolsWithNullBytes() throws Exception {\n+        _testSymbolsWithNull(true);\n+    }\n+\n+    // For [Issue#148]\n+    public void testSymbolsWithNullChars() throws Exception {\n+        _testSymbolsWithNull(false);\n+    }\n+    \n+    private void _testSymbolsWithNull(boolean useBytes) throws Exception\n+    {\n+        final JsonFactory f = new JsonFactory();\n+        final String INPUT = \"{\\\"\\\\u0000abc\\\" : 1, \\\"abc\\\" : 2}\";\n+        JsonParser parser = useBytes ? f.createParser(INPUT.getBytes(\"UTF-8\"))\n+                : f.createParser(INPUT);\n+\n+        assertToken(JsonToken.START_OBJECT, parser.nextToken());\n+\n+        assertToken(JsonToken.FIELD_NAME, parser.nextToken());\n+        assertEquals(\"\\u0000abc\", parser.getCurrentName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, parser.nextToken());\n+        assertEquals(1, parser.getIntValue());\n+\n+        assertToken(JsonToken.FIELD_NAME, parser.nextToken());\n+        assertEquals(\"abc\", parser.getCurrentName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, parser.nextToken());\n+        assertEquals(2, parser.getIntValue());\n+        \n+        assertToken(JsonToken.END_OBJECT, parser.nextToken());\n+        parser.close();\n+    }\n+}", "timestamp": 1407960057, "metainfo": ""}