{"sha": "5e14c461c04f71fc3f35a5ac2e75ed2df0d7c462", "log": "Fixed #115", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n                 _outputBuffer[_outputTail++] = (byte) (0xc0 | (ch >> 6));\n                 _outputBuffer[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n             } else {\n-                _outputRawMultiByteChar(ch, cbuf, offset, len);\n+                offset = _outputRawMultiByteChar(ch, cbuf, offset, len);\n             }\n         }\n     }\n             bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6));\n             bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n         } else {\n-            _outputRawMultiByteChar(ch, null, 0, 0);\n+            /*offset =*/ _outputRawMultiByteChar(ch, null, 0, 0);\n         }\n     }\n \n                 bbuf[_outputTail++] = (byte) (0xc0 | (ch >> 6));\n                 bbuf[_outputTail++] = (byte) (0x80 | (ch & 0x3f));\n             } else {\n-                _outputRawMultiByteChar(ch, cbuf, offset, len);\n+                offset = _outputRawMultiByteChar(ch, cbuf, offset, len);\n             }\n         }\n     }\n         if (ch >= SURR1_FIRST) {\n             if (ch <= SURR2_LAST) { // yes, outside of BMP\n                 // Do we have second part?\n-                if (inputOffset >= inputLen) { // nope... have to note down\n+                if (inputOffset >= inputLen || cbuf == null) { // nope... have to note down\n                     _reportError(\"Split surrogate on writeRaw() input (last character)\");\n                 }\n                 _outputSurrogates(ch, cbuf[inputOffset]);\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java\n         assertNull(p.nextToken());\n         p.close();\n     }\n+\n+    // for [Issue#115]\n+    public void testSurrogatesWithRaw() throws Exception\n+    {\n+        final String VALUE = quote(\"\\ud83d\\ude0c\");\n+        JsonFactory f = new JsonFactory();\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        JsonGenerator jgen = f.createGenerator(out);\n+        jgen.writeStartArray();\n+        jgen.writeRaw(VALUE);\n+        jgen.writeEndArray();\n+        jgen.close();\n+\n+        final byte[] JSON = out.toByteArray();\n+\n+        JsonParser jp = f.createParser(JSON);\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        String str = jp.getText();\n+        assertEquals(2, str.length());\n+        assertEquals((char) 0xD83D, str.charAt(0));\n+        assertEquals((char) 0xDE0C, str.charAt(1));\n+        assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+        jp.close();\n+    }\n }", "timestamp": 1383967854, "metainfo": ""}