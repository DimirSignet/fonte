{"sha": "d6d57e541ba435ad6765c190671c17d97bd5b688", "log": "Add missing JsonGeneratorDelegate methods (setPrettyPrinter)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n \n     /*\n     /**********************************************************\n-    /* Construction, configuration, initialization\n+    /* Construction, initialization\n     /**********************************************************\n      */\n     \n     protected JsonGenerator() { }\n \n+    /**\n+     * Method that can be called to set or reset the object to\n+     * use for writing Java objects as JsonContent\n+     * (using method {@link #writeObject}).\n+     *\n+     * @return Generator itself (this), to allow chaining\n+     */\n+    public abstract JsonGenerator setCodec(ObjectCodec oc);\n+\n+    /**\n+     * Method for accessing the object used for writing Java\n+     * object as Json content\n+     * (using method {@link #writeObject}).\n+     */\n+    public abstract ObjectCodec getCodec();\n+    \n     /**\n      * Method to call to make this generator use specified schema.\n      * Method must be called before generating any content, right after instance\n      * @since 2.1\n      */\n     public FormatSchema getSchema() {\n-\treturn null;\n+        return null;\n     }\n     \n     /**\n      */\n     public abstract boolean isEnabled(Feature f);\n \n-    /**\n-     * Method that can be called to set or reset the object to\n-     * use for writing Java objects as JsonContent\n-     * (using method {@link #writeObject}).\n-     *\n-     * @return Generator itself (this), to allow chaining\n-     */\n-    public abstract JsonGenerator setCodec(ObjectCodec oc);\n-\n-    /**\n-     * Method for accessing the object used for writing Java\n-     * object as Json content\n-     * (using method {@link #writeObject}).\n-     */\n-    public abstract ObjectCodec getCodec();\n-\n     /*\n     /**********************************************************\n     /* Configuring generator\n     public int getHighestEscapedChar() {\n         return 0;\n     }\n+\n     /**\n      * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n      * it creates.\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.io.CharacterEscapes;\n \n public class JsonGeneratorDelegate extends JsonGenerator\n {\n      */\n     protected JsonGenerator delegate;\n \n+    /*\n+    /**********************************************************\n+    /* Construction, initialization\n+    /**********************************************************\n+     */\n+    \n     public JsonGeneratorDelegate(JsonGenerator d) {\n         delegate = d;\n     }   \n \n     @Override\n-    public void close() throws IOException {\n-        delegate.close();\n-    }\n-\n-    @Override\n-    public void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n-        delegate.copyCurrentEvent(jp);\n-    }\n-\n-    @Override\n-    public void copyCurrentStructure(JsonParser jp) throws IOException, JsonProcessingException {\n-        delegate.copyCurrentStructure(jp);\n-    }\n-\n+    public ObjectCodec getCodec() {\n+        return delegate.getCodec();\n+    }\n+\n+    @Override\n+    public JsonGenerator setCodec(ObjectCodec oc) {\n+        delegate.setCodec(oc);\n+        return this;\n+    }\n+    \n+    @Override\n+    public void setSchema(FormatSchema schema) {\n+        delegate.setSchema(schema);\n+    }\n+\n+    @Override\n+    public FormatSchema getSchema() {\n+        return delegate.getSchema();\n+    }\n+    \n+    @Override\n+    public boolean canUseSchema(FormatSchema schema) {\n+        return delegate.canUseSchema(schema);\n+    }\n+\n+    @Override\n+    public Version version() {\n+        return delegate.version();\n+    }\n+\n+    @Override\n+    public Object getOutputTarget() {\n+        return delegate.getOutputTarget();\n+    }\n+\n+    @Override\n+    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n+        delegate.setRootValueSeparator(sep);\n+        return this;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Public API, configuration\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonGenerator enable(Feature f) {\n+        delegate.enable(f);\n+        return this;\n+    }\n+    \n     @Override\n     public JsonGenerator disable(Feature f) {\n         delegate.disable(f);\n     }\n \n     @Override\n-    public JsonGenerator enable(Feature f) {\n-        delegate.enable(f);\n-        return this;\n-    }\n-\n-    @Override\n-    public void flush() throws IOException {\n-        delegate.flush();\n-    }\n-\n-    @Override\n-    public ObjectCodec getCodec() {\n-        return delegate.getCodec();\n-    }\n-\n-    @Override\n-    public JsonStreamContext getOutputContext() {\n-        return delegate.getOutputContext();\n-    }\n-\n-    @Override\n-    public void setSchema(FormatSchema schema) {\n-        delegate.setSchema(schema);\n-    }\n-    \n-    @Override\n-    public boolean canUseSchema(FormatSchema schema) {\n-        return delegate.canUseSchema(schema);\n-    }\n-    \n-    @Override\n-    public Version version() {\n-        return delegate.version();\n-    }\n-    \n-    @Override\n-    public Object getOutputTarget() {\n-        return delegate.getOutputTarget();\n-    }\n-\n-    @Override\n-    public JsonGenerator setRootValueSeparator(SerializableString sep) {\n-        delegate.setRootValueSeparator(sep);\n-        return this;\n-    }\n-    \n-    @Override\n-    public boolean isClosed() {\n-        return delegate.isClosed();\n-    }\n-\n-    @Override\n     public boolean isEnabled(Feature f) {\n         return delegate.isEnabled(f);\n     }\n \n-    @Override\n-    public JsonGenerator setCodec(ObjectCodec oc) {\n-        delegate.setCodec(oc);\n-        return this;\n-    }\n-\n+    // final, can't override (and no need to)\n+    //public final JsonGenerator configure(Feature f, boolean state)\n+\n+    /*\n+    /**********************************************************\n+    /* Configuring generator\n+    /**********************************************************\n+      */\n+\n+    @Override\n+    public JsonGenerator setPrettyPrinter(PrettyPrinter pp) {\n+        delegate.setPrettyPrinter(pp);\n+        return this;\n+    }\n+\n+    @Override\n+    public PrettyPrinter getPrettyPrinter() {\n+        return delegate.getPrettyPrinter();\n+    }\n+    \n     @Override\n     public JsonGenerator useDefaultPrettyPrinter() {\n         delegate.useDefaultPrettyPrinter();\n         return this;\n+    }\n+\n+    @Override\n+    public JsonGenerator setHighestNonEscapedChar(int charCode) {\n+        delegate.setHighestNonEscapedChar(charCode);\n+        return this;\n+    }\n+\n+    @Override\n+    public int getHighestEscapedChar() {\n+        return delegate.getHighestEscapedChar();\n+    }\n+\n+    @Override\n+    public CharacterEscapes getCharacterEscapes() {\n+        return delegate.getCharacterEscapes();\n+    }\n+\n+    @Override\n+    public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {\n+        delegate.setCharacterEscapes(esc);\n+        return this;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, write methods, structural\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void writeStartArray() throws IOException, JsonGenerationException {\n+         delegate.writeStartArray();\n+    }\n+\n+\n+    @Override\n+    public void writeEndArray() throws IOException, JsonGenerationException {\n+        delegate.writeEndArray();\n+    }\n+\n+    @Override\n+    public void writeStartObject() throws IOException, JsonGenerationException {\n+        delegate.writeStartObject();\n+    }\n+    \n+    @Override\n+    public void writeEndObject() throws IOException, JsonGenerationException {\n+        delegate.writeEndObject();\n+    }\n+\n+    @Override\n+    public void writeFieldName(String name)\n+        throws IOException, JsonGenerationException\n+    {\n+        delegate.writeFieldName(name);\n+    }\n+\n+    @Override\n+    public void writeFieldName(SerializableString name)\n+        throws IOException, JsonGenerationException\n+    {\n+        delegate.writeFieldName(name);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Public API, write methods, text/String values\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void writeString(String text) throws IOException,JsonGenerationException {\n+        delegate.writeString(text);\n+    }\n+\n+    @Override\n+    public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException {\n+        delegate.writeString(text, offset, len);\n+    }\n+\n+    @Override\n+    public void writeString(SerializableString text) throws IOException, JsonGenerationException {\n+        delegate.writeString(text);\n+    }\n+\n+    @Override\n+    public void writeRawUTF8String(byte[] text, int offset, int length)\n+        throws IOException, JsonGenerationException\n+    {\n+        delegate.writeRawUTF8String(text, offset, length);\n+    }\n+\n+    @Override\n+    public void writeUTF8String(byte[] text, int offset, int length)\n+        throws IOException, JsonGenerationException\n+    {\n+        delegate.writeUTF8String(text, offset, length);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, write methods, binary/raw content\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void writeRaw(String text) throws IOException, JsonGenerationException {\n+        delegate.writeRaw(text);\n+    }\n+\n+    @Override\n+    public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException {\n+        delegate.writeRaw(text, offset, len);\n+    }\n+\n+    @Override\n+    public void writeRaw(SerializableString raw)\n+        throws IOException, JsonGenerationException {\n+        delegate.writeRaw(raw);\n+    }\n+    \n+    @Override\n+    public void writeRaw(char[] text, int offset, int len) throws IOException, JsonGenerationException {\n+        delegate.writeRaw(text, offset, len);\n+    }\n+\n+    @Override\n+    public void writeRaw(char c) throws IOException, JsonGenerationException {\n+        delegate.writeRaw(c);\n+    }\n+\n+    @Override\n+    public void writeRawValue(String text) throws IOException, JsonGenerationException {\n+        delegate.writeRawValue(text);\n+    }\n+\n+    @Override\n+    public void writeRawValue(String text, int offset, int len) throws IOException, JsonGenerationException {\n+         delegate.writeRawValue(text, offset, len);\n+    }\n+\n+    @Override\n+    public void writeRawValue(char[] text, int offset, int len) throws IOException, JsonGenerationException {\n+         delegate.writeRawValue(text, offset, len);\n     }\n \n     @Override\n         return delegate.writeBinary(b64variant, data, dataLength);\n     }\n     \n+    /*\n+    /**********************************************************\n+    /* Public API, write methods, other value types\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void writeNumber(int v) throws IOException, JsonGenerationException {\n+        delegate.writeNumber(v);\n+    }\n+\n+    @Override\n+    public void writeNumber(long v) throws IOException, JsonGenerationException {\n+        delegate.writeNumber(v);\n+    }\n+\n+    @Override\n+    public void writeNumber(BigInteger v) throws IOException,\n+            JsonGenerationException {\n+        delegate.writeNumber(v);\n+    }\n+\n+    @Override\n+    public void writeNumber(double v) throws IOException,\n+            JsonGenerationException {\n+        delegate.writeNumber(v);\n+    }\n+\n+    @Override\n+    public void writeNumber(float v) throws IOException,\n+            JsonGenerationException {\n+        delegate.writeNumber(v);\n+    }\n+\n+    @Override\n+    public void writeNumber(BigDecimal v) throws IOException,\n+            JsonGenerationException {\n+        delegate.writeNumber(v);\n+    }\n+\n+    @Override\n+    public void writeNumber(String encodedValue) throws IOException, JsonGenerationException, UnsupportedOperationException {\n+        delegate.writeNumber(encodedValue);\n+    }\n+\n     @Override\n     public void writeBoolean(boolean state) throws IOException, JsonGenerationException {\n         delegate.writeBoolean(state);\n     }\n-\n-    @Override\n-    public void writeEndArray() throws IOException, JsonGenerationException {\n-        delegate.writeEndArray();\n-    }\n-\n-    @Override\n-    public void writeEndObject() throws IOException, JsonGenerationException {\n-        delegate.writeEndObject();\n-    }\n-\n-    @Override\n-    public void writeFieldName(String name)\n-        throws IOException, JsonGenerationException\n-    {\n-        delegate.writeFieldName(name);\n-    }\n-\n-    @Override\n-    public void writeFieldName(SerializableString name)\n-        throws IOException, JsonGenerationException\n-    {\n-        delegate.writeFieldName(name);\n-    }\n     \n     @Override\n     public void writeNull() throws IOException, JsonGenerationException {\n         delegate.writeNull();\n     }\n \n-    @Override\n-    public void writeNumber(int v) throws IOException, JsonGenerationException {\n-        delegate.writeNumber(v);\n-    }\n-\n-    @Override\n-    public void writeNumber(long v) throws IOException, JsonGenerationException {\n-        delegate.writeNumber(v);\n-    }\n-\n-    @Override\n-    public void writeNumber(BigInteger v) throws IOException,\n-            JsonGenerationException {\n-        delegate.writeNumber(v);\n-    }\n-\n-    @Override\n-    public void writeNumber(double v) throws IOException,\n-            JsonGenerationException {\n-        delegate.writeNumber(v);\n-    }\n-\n-    @Override\n-    public void writeNumber(float v) throws IOException,\n-            JsonGenerationException {\n-        delegate.writeNumber(v);\n-    }\n-\n-    @Override\n-    public void writeNumber(BigDecimal v) throws IOException,\n-            JsonGenerationException {\n-        delegate.writeNumber(v);\n-    }\n-\n-    @Override\n-    public void writeNumber(String encodedValue) throws IOException, JsonGenerationException, UnsupportedOperationException {\n-        delegate.writeNumber(encodedValue);\n-    }\n-\n+    /*\n+    /**********************************************************\n+    /* Public API, write methods, serializing Java objects\n+    /**********************************************************\n+     */\n+    \n     @Override\n     public void writeObject(Object pojo) throws IOException,JsonProcessingException {\n         delegate.writeObject(pojo);\n     }\n-\n-    @Override\n-    public void writeRaw(String text) throws IOException, JsonGenerationException {\n-        delegate.writeRaw(text);\n-    }\n-\n-    @Override\n-    public void writeRaw(String text, int offset, int len) throws IOException, JsonGenerationException {\n-        delegate.writeRaw(text, offset, len);\n-    }\n-\n-    @Override\n-    public void writeRaw(SerializableString raw)\n-        throws IOException, JsonGenerationException {\n-        delegate.writeRaw(raw);\n-    }\n-    \n-    @Override\n-    public void writeRaw(char[] text, int offset, int len) throws IOException, JsonGenerationException {\n-        delegate.writeRaw(text, offset, len);\n-    }\n-\n-    @Override\n-    public void writeRaw(char c) throws IOException, JsonGenerationException {\n-        delegate.writeRaw(c);\n-    }\n-\n-    @Override\n-    public void writeRawValue(String text) throws IOException, JsonGenerationException {\n-        delegate.writeRawValue(text);\n-    }\n-\n-    @Override\n-    public void writeRawValue(String text, int offset, int len) throws IOException, JsonGenerationException {\n-         delegate.writeRawValue(text, offset, len);\n-    }\n-\n-    @Override\n-    public void writeRawValue(char[] text, int offset, int len) throws IOException, JsonGenerationException {\n-         delegate.writeRawValue(text, offset, len);\n-    }\n-\n-    @Override\n-    public void writeStartArray() throws IOException, JsonGenerationException {\n-         delegate.writeStartArray();\n-    }\n-\n-    @Override\n-    public void writeStartObject() throws IOException, JsonGenerationException {\n-        delegate.writeStartObject();\n-    }\n-\n-    @Override\n-    public void writeString(String text) throws IOException,JsonGenerationException {\n-        delegate.writeString(text);\n-    }\n-\n-    @Override\n-    public void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException {\n-        delegate.writeString(text, offset, len);\n-    }\n-\n-    @Override\n-    public void writeString(SerializableString text) throws IOException, JsonGenerationException {\n-        delegate.writeString(text);\n-    }\n-\n-    @Override\n-    public void writeRawUTF8String(byte[] text, int offset, int length)\n-        throws IOException, JsonGenerationException\n-    {\n-        delegate.writeRawUTF8String(text, offset, length);\n-    }\n-\n-    @Override\n-    public void writeUTF8String(byte[] text, int offset, int length)\n-        throws IOException, JsonGenerationException\n-    {\n-        delegate.writeUTF8String(text, offset, length);\n-    }\n     \n     @Override\n     public void writeTree(TreeNode rootNode) throws IOException, JsonProcessingException {\n         delegate.writeTree(rootNode);\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, convenience field write methods\n+    /**********************************************************\n+     */\n+\n+    // // These are fine, just delegate to other methods...\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, copy-through methods\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n+        delegate.copyCurrentEvent(jp);\n+    }\n+\n+    @Override\n+    public void copyCurrentStructure(JsonParser jp) throws IOException, JsonProcessingException {\n+        delegate.copyCurrentStructure(jp);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, context access\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonStreamContext getOutputContext() {\n+        return delegate.getOutputContext();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, buffer handling\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public void flush() throws IOException {\n+        delegate.flush();\n+    }\n+    \n+    @Override\n+    public void close() throws IOException {\n+        delegate.close();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Closeable implementation\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public boolean isClosed() {\n+        return delegate.isClosed();\n+    }\n+    \n }", "timestamp": 1352775391, "metainfo": ""}