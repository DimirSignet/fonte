{"sha": "6fc0271dc60f513e31bd6649d53c9d665ab6f11d", "log": "Commit actual dup-detection implementation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParseException.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParseException.java\n     extends JsonProcessingException\n {\n     private static final long serialVersionUID = 1L;\n-\n+    \n     public JsonParseException(String msg, JsonLocation loc)\n     {\n         super(msg, loc);\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n          * this is a non-standard feature, and as such disabled by default.\n          */\n          ALLOW_NON_NUMERIC_NUMBERS(false),\n-        \n+\n+         /**\n+          * Feature that determines whether {@link JsonParser} will explicitly\n+          * check that no duplicate JSON Object field names are encountered.\n+          * If enabled, parser will check all names within context and report\n+          * duplicates by throwing a {@link JsonParseException}; if disabled,\n+          * parser will not do such checking. Assumption in latter case is\n+          * that caller takes care of handling duplicates at a higher level:\n+          * data-binding, for example, has features to specify detection to\n+          * be done there.\n+          * \n+          * @since 2.3\n+          */\n+         STRICT_DUPLICATE_DETECTION(false),\n+         \n             ;\n \n         /**\n         }\n         \n         public boolean enabledByDefault() { return _defaultState; }\n-//        public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n+        \n+        /**\n+         * @since 2.3\n+         */\n+        public boolean enabledIn(int flags) { return (flags & getMask()) != 0; }\n+\n         public int getMask() { return (1 << ordinal()); }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n         _features = features;\n         _ioContext = ctxt;\n         _textBuffer = ctxt.constructTextBuffer();\n-        _parsingContext = JsonReadContext.createRootContext();\n+        JsonReadContext readCtxt = JsonReadContext.createRootContext();\n+        if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(features)) {\n+            readCtxt.trackDups(this);\n+        }\n+        _parsingContext = readCtxt;\n     }\n \n     @Override\n         if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {\n             ctxt = ctxt.getParent();\n         }\n-        ctxt.setCurrentName(name);\n+        /* 24-Sep-2013, tatu: Unfortunate, but since we did not expose exceptions,\n+         *   need to wrap this here\n+         */\n+        try {\n+            ctxt.setCurrentName(name);\n+        } catch (IOException e) {\n+            throw new IllegalStateException(e);\n+        }\n     }\n     \n     @Override\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/core/json/DupDetector.java\n+package com.fasterxml.jackson.core.json;\n+\n+import java.util.*;\n+\n+import com.fasterxml.jackson.core.JsonLocation;\n+import com.fasterxml.jackson.core.JsonParseException;\n+import com.fasterxml.jackson.core.JsonParser;\n+\n+/**\n+ * Helper class used if\n+ * {@link com.fasterxml.jackson.core.JsonParser.Feature#STRICT_DUPLICATE_DETECTION}\n+ * is enabled.\n+ * Optimized to try to limit memory usage and processing overhead for smallest\n+ * entries, but without adding trashing (immutable objects would achieve optimal\n+ * memory usage but lead to significant number of discarded temp objects for\n+ * scopes with large number of entries). Another consideration is trying to limit\n+ * actual number of compiled classes as it contributes significantly to overall\n+ * jar size (due to linkage etc).\n+ * \n+ * @since 2.3\n+ */\n+public class DupDetector\n+{\n+    /**\n+     * We need to store a back-reference here, unfortunately.\n+     */\n+    protected final JsonParser _parser;\n+\n+    protected String _firstName;\n+\n+    protected String _secondName;\n+    \n+    /**\n+     * Lazily constructed set of names already seen within this context.\n+     */\n+    protected HashSet<String> _seen;\n+\n+    private DupDetector(JsonParser parser) {\n+        _parser = parser;\n+    }\n+\n+    public static DupDetector rootDetector(JsonParser jp) {\n+        return new DupDetector(jp);\n+    }\n+\n+    public DupDetector child() {\n+        return new DupDetector(_parser);\n+    }\n+\n+    public void reset() {\n+        _firstName = null;\n+        _secondName = null;\n+        _seen = null;\n+    }\n+\n+    public JsonLocation findLocation() {\n+        return _parser.getCurrentLocation();\n+    }\n+    \n+    public boolean isDup(String name) throws JsonParseException\n+    {\n+        if (_firstName == null) {\n+            _firstName = name;\n+            return false;\n+        }\n+        if (name.equals(_firstName)) {\n+            return true;\n+        }\n+        if (_secondName == null) {\n+            _secondName = name;\n+            return false;\n+        }\n+        if (name.equals(_secondName)) {\n+            return true;\n+        }\n+        if (_seen == null) {\n+            _seen = new HashSet<String>(16); // 16 is default, seems reasonable\n+            _seen.add(_firstName);\n+            _seen.add(_secondName);\n+        }\n+        return !_seen.add(name);\n+    }\n+}\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n     // // // Configuration\n \n     protected final JsonReadContext _parent;\n-\n+    \n     // // // Location information (minus source reference)\n \n     protected int _lineNr;\n \n     protected String _currentName;\n \n+    // // // Optional duplicate detection\n+\n+    protected DupDetector _dups;\n+    \n     /*\n     /**********************************************************\n     /* Simple instance reuse slots; speeds up things\n         _lineNr = lineNr;\n         _columnNr = colNr;\n         _currentName = null;\n+        if (_dups != null) {\n+            _dups.reset();\n+        }\n+    }\n+\n+    public void trackDups(JsonParser jp) {\n+        _dups = DupDetector.rootDetector(jp);\n     }\n \n     // // // Factory methods\n         JsonReadContext ctxt = _child;\n         if (ctxt == null) {\n             _child = ctxt = new JsonReadContext(this, TYPE_ARRAY, lineNr, colNr);\n-            return ctxt;\n-        }\n-        ctxt.reset(TYPE_ARRAY, lineNr, colNr);\n+        } else {\n+            ctxt.reset(TYPE_ARRAY, lineNr, colNr);\n+        }\n+        if (_dups != null) {\n+            // must pass a placeholder to indicate that tracking is on; not used\n+            ctxt._dups = _dups;\n+        }\n         return ctxt;\n     }\n \n         JsonReadContext ctxt = _child;\n         if (ctxt == null) {\n             _child = ctxt = new JsonReadContext(this, TYPE_OBJECT, lineNr, colNr);\n+            if (_dups != null) {\n+                ctxt._dups = _dups.child();\n+            }\n             return ctxt;\n         }\n         ctxt.reset(TYPE_OBJECT, lineNr, colNr);\n         return (_type != TYPE_ROOT && ix > 0);\n     }\n \n-    public void setCurrentName(String name)\n+    public void setCurrentName(String name) throws JsonProcessingException\n     {\n         _currentName = name;\n-    }\n-\n+        if (_dups != null) {\n+            _checkDup(_dups, name);\n+        }\n+    }\n+\n+    private void _checkDup(DupDetector dd, String name) throws JsonProcessingException\n+    {\n+        if (dd.isDup(name)) {\n+            throw new JsonParseException(\"Duplicate field '\"+name+\"'\", dd.findLocation());\n+        }\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Overridden standard methods\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserDupHandling.java\n+package com.fasterxml.jackson.core.json;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+public class TestParserDupHandling\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+    public void testSimpleDups() throws Exception\n+    {\n+        for (String doc : new String[] {\n+                \"{ \\\"a\\\":1, \\\"a\\\":2 }\",\n+                \"[{ \\\"a\\\":1, \\\"a\\\":2 }]\",\n+                \"{ \\\"a\\\":1, \\\"b\\\":2, \\\"c\\\":3,\\\"a\\\":true,\\\"e\\\":false }\",\n+                \"{ \\\"foo\\\": { \\\"bar\\\": [ [ { \\\"x\\\":3, \\\"a\\\":1 } ]], \\\"x\\\":0, \\\"a\\\":\\\"y\\\", \\\"b\\\":3,\\\"a\\\":13 } }\",\n+        }) {\n+            JsonFactory f = new JsonFactory();\n+            assertFalse(f.isEnabled(JsonParser.Feature.STRICT_DUPLICATE_DETECTION));\n+            _testSimpleDupsOk(doc, f, false);\n+            _testSimpleDupsOk(doc, f, true);\n+    \n+            f.enable(JsonParser.Feature.STRICT_DUPLICATE_DETECTION);\n+            _testSimpleDupsFail(doc, f, false, \"a\");\n+            _testSimpleDupsFail(doc, f, true, \"a\");\n+        }\n+    }\n+\n+    private void _testSimpleDupsOk(final String doc, JsonFactory f, boolean useStream) throws Exception\n+    {\n+        JsonParser jp = useStream ?\n+                createParserUsingStream(f, doc, \"UTF-8\") : createParserUsingReader(f, doc);\n+        JsonToken t = jp.nextToken();\n+        assertNotNull(t);\n+        assertTrue(t.isStructStart());\n+        while (jp.nextToken() != null) { }\n+        jp.close();\n+    }\n+\n+    private void _testSimpleDupsFail(final String doc, JsonFactory f,\n+            boolean useStream, String name) throws Exception\n+    {\n+        JsonParser jp = useStream ?\n+                createParserUsingStream(f, doc, \"UTF-8\") : createParserUsingReader(f, doc);\n+        JsonToken t = jp.nextToken();\n+        assertNotNull(t);\n+        assertTrue(t.isStructStart());\n+        try {\n+            while (jp.nextToken() != null) { }\n+            fail(\"Should have caught dups in document: \"+doc);\n+        } catch (JsonParseException e) {\n+            verifyException(e, \"duplicate field '\"+name+\"'\");\n+        }\n+        jp.close();\n+    }\n+    \n+}", "timestamp": 1380062033, "metainfo": ""}