{"sha": "5a5d119f6fa637115259ebab2c9a7be53edee712", "log": "Minor clean up for filtering", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringGeneratorDelegate.java\n             delegate.writeStartArray();\n         } else {\n             _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);\n-            if (_itemFilter != null) {\n-                _filterContext.markNeedsCloseCheck();\n-            }\n         }\n     }\n         \n             delegate.writeStartArray(size);\n         } else {\n             _filterContext = _filterContext.createChildArrayContext(_itemFilter, false);\n-            if (_itemFilter != null) {\n-                _filterContext.markNeedsCloseCheck();\n-            }\n         }\n     }\n     \n             delegate.writeStartObject();\n         } else { // filter out\n             _filterContext = _filterContext.createChildObjectContext(state, false);\n-            if (state != null) {\n-                _filterContext.markNeedsCloseCheck();\n-            }\n         }\n     }\n     \n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n     protected TokenFilterContext _filterContext;\n \n     /**\n+     * When parent tokens are buffered (during checking whether child tokens included),\n+     * we need to keep a reference back to the context closest to root that is yet to\n+     * be exposed.\n+     */\n+    protected TokenFilterContext _replayContext;\n+    \n+    /**\n      * State that applies to the item within container, used where applicable.\n      * Specifically used to pass inclusion state between property name and\n      * property, and also used for array elements.\n     \n     /**\n      * Number of tokens for which {@link TokenFilter#INCLUDE_ALL}\n-     * has been returned\n+     * has been returned.\n      */\n     protected int _matchCount;\n \n--- a/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java\n     protected TokenFilter _filter;\n \n     /**\n-     * Flag that indicates that start token has been written, so\n-     * that matching close token needs to be written as well,\n-     * regardless of inclusion status.\n-     */\n-    protected boolean _startWritten;\n-\n-    /**\n-     * Flag that indicates that when context is closed, a call needs\n-     * to be made to {@link TokenFilter}\n-     */\n-    protected boolean _needCloseCheck;\n+     * Flag that indicates that start token has been read/written,\n+     * so that matching close token needs to be read/written as well\n+     * when context is getting closed.\n+     */\n+    protected boolean _startHandled;\n \n     /**\n      * Flag that indicates that the current name of this context\n-     * still needs to be written, if path from root is desired.\n-     */\n-    protected boolean _needToWriteName;\n+     * still needs to be read/written, if path from root down to\n+     * included leaf is to be exposed.\n+     */\n+    protected boolean _needToHandleName;\n     \n     /*\n     /**********************************************************\n         _parent = parent;\n         _filter = filter;\n         _index = -1;\n-        _startWritten = startWritten;\n-        _needToWriteName = false;\n-        _needCloseCheck = false;\n+        _startHandled = startWritten;\n+        _needToHandleName = false;\n     }\n \n     protected TokenFilterContext reset(int type,\n         _filter = filter;\n         _index = -1;\n         _currentName = null;\n-        _startWritten = startWritten;\n-        _needToWriteName = false;\n-        _needCloseCheck = false;\n+        _startHandled = startWritten;\n+        _needToHandleName = false;\n         return this;\n     }\n \n     \n     public TokenFilter setFieldName(String name) throws JsonProcessingException {\n         _currentName = name;\n-        _needToWriteName = true;\n+        _needToHandleName = true;\n         return _filter;\n     }\n \n         if (_parent != null) {\n             _parent._writePath(gen);\n         }\n-        if (_startWritten) {\n+        if (_startHandled) {\n             // even if Object started, need to start leaf-level name\n-            if (_needToWriteName) {\n+            if (_needToHandleName) {\n                 gen.writeFieldName(_currentName);\n             }\n         } else {\n-            _startWritten = true;\n+            _startHandled = true;\n             if (_type == TYPE_OBJECT) {\n                 gen.writeStartObject();\n                 gen.writeFieldName(_currentName); // we know name must be written\n         if ((_filter == null) || (_filter == TokenFilter.INCLUDE_ALL)) {\n             return;\n         }\n-        if (_startWritten) {\n+        if (_startHandled) {\n             // even if Object started, need to start leaf-level name\n-            if (_needToWriteName) {\n+            if (_needToHandleName) {\n                 gen.writeFieldName(_currentName);\n             }\n         } else {\n-            _startWritten = true;\n+            _startHandled = true;\n             if (_type == TYPE_OBJECT) {\n                 gen.writeStartObject();\n-                if (_needToWriteName) {\n+                if (_needToHandleName) {\n                     gen.writeFieldName(_currentName);\n                 }\n             } else if (_type == TYPE_ARRAY) {\n         if (_parent != null) {\n             _parent._writePath(gen);\n         }\n-        if (_startWritten) {\n+        if (_startHandled) {\n             // even if Object started, need to start leaf-level name\n-            if (_needToWriteName) {\n-                _needToWriteName = false; // at parent must explicitly clear\n+            if (_needToHandleName) {\n+                _needToHandleName = false; // at parent must explicitly clear\n                 gen.writeFieldName(_currentName);\n             }\n         } else {\n-            _startWritten = true;\n+            _startHandled = true;\n             if (_type == TYPE_OBJECT) {\n //System.err.println(\" write object start, field '\"+_currentName+\"'\");                \n                 gen.writeStartObject();\n-                if (_needToWriteName) {\n-                    _needToWriteName = false; // at parent must explicitly clear\n+                if (_needToHandleName) {\n+                    _needToHandleName = false; // at parent must explicitly clear\n                     gen.writeFieldName(_currentName);\n                 }\n             } else if (_type == TYPE_ARRAY) {\n \n     public TokenFilter getFilterState() { return _filter; }\n \n-    public void markNeedsCloseCheck() { _needCloseCheck = true; }\n-\n     public final TokenFilterContext closeArray(JsonGenerator gen) throws IOException\n     {\n //System.err.println(\"closeArray, started? \"+_startWritten+\"; filter = \"+_filter);        \n-        if (_startWritten) {\n+        if (_startHandled) {\n             gen.writeEndArray();\n         }\n         if ((_filter != null) && (_filter != TokenFilter.INCLUDE_ALL)) {\n     \n     public final TokenFilterContext closeObject(JsonGenerator gen) throws IOException\n     {\n-        if (_startWritten) {\n+        if (_startHandled) {\n             gen.writeEndObject();\n         }\n         if ((_filter != null) && (_filter != TokenFilter.INCLUDE_ALL)) {", "timestamp": 1428991507, "metainfo": ""}