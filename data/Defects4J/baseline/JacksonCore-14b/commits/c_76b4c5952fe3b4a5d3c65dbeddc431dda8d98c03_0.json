{"sha": "76b4c5952fe3b4a5d3c65dbeddc431dda8d98c03", "log": "Improve reader-based impl JsonParser.nextFieldName() implementation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n     }\n \n     /*\n-   /**********************************************************\n-   /* Public API, traversal\n-   /**********************************************************\n-    */\n+    /**********************************************************\n+    /* Public API, traversal\n+    /**********************************************************\n+     */\n \n     /**\n      * @return Next token from the stream, if any found, or null\n     }\n \n     /*\n+    /**********************************************************\n+    /* Public API, nextXxx() overrides\n+    /**********************************************************\n+     */\n+\n+    /*\n     @Override\n     public boolean nextFieldName(SerializableString str)\n-         throws IOException\n-     */\n-\n+        throws IOException\n+    {\n+    \n+    }\n+    */\n+\n+    @Override\n+    public String nextFieldName() throws IOException\n+    {\n+        // // // Note: this is almost a verbatim copy of nextToken() (minus comments)\n+\n+        _numTypesValid = NR_UNKNOWN;\n+        if (_currToken == JsonToken.FIELD_NAME) {\n+            _nextAfterName();\n+            return null;\n+        }\n+        if (_tokenIncomplete) {\n+            _skipString();\n+        }\n+        int i = _skipWSOrEnd();\n+        if (i < 0) {\n+            close();\n+            _currToken = null;\n+            return null;\n+        }\n+        _tokenInputTotal = _currInputProcessed + _inputPtr - 1;\n+        _tokenInputRow = _currInputRow;\n+        _tokenInputCol = _inputPtr - _currInputRowStart - 1;\n+        _binaryValue = null;\n+        if (i == INT_RBRACKET) {\n+            if (!_parsingContext.inArray()) {\n+                _reportMismatchedEndMarker(i, '}');\n+            }\n+            _parsingContext = _parsingContext.getParent();\n+            _currToken = JsonToken.END_ARRAY;\n+            return null;\n+        }\n+        if (i == INT_RCURLY) {\n+            if (!_parsingContext.inObject()) {\n+                _reportMismatchedEndMarker(i, ']');\n+            }\n+            _parsingContext = _parsingContext.getParent();\n+            _currToken = JsonToken.END_OBJECT;\n+            return null;\n+        }\n+        if (_parsingContext.expectComma()) {\n+            i = _skipComma(i);\n+        }\n+\n+        if (!_parsingContext.inObject()) {\n+            _nextTokenNotInObject(i);\n+            return null;\n+        }\n+        \n+        String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);\n+        _parsingContext.setCurrentName(name);\n+        _currToken = JsonToken.FIELD_NAME;\n+        i = _skipColon();\n+\n+        if (i == INT_QUOTE) {\n+            _tokenIncomplete = true;\n+            _nextToken = JsonToken.VALUE_STRING;\n+            return name;\n+        }\n+        \n+        // Ok: we must have a value... what is it?\n+\n+        JsonToken t;\n+\n+        switch (i) {\n+        case '-':\n+            t = _parseNegNumber();\n+            break;\n+        case '0':\n+        case '1':\n+        case '2':\n+        case '3':\n+        case '4':\n+        case '5':\n+        case '6':\n+        case '7':\n+        case '8':\n+        case '9':\n+            t = _parsePosNumber(i);\n+            break;\n+        case 'f':\n+            _matchFalse();\n+            t = JsonToken.VALUE_FALSE;\n+            break;\n+        case 'n':\n+            _matchNull();\n+            t = JsonToken.VALUE_NULL;\n+            break;\n+        case 't':\n+            _matchTrue();\n+            t = JsonToken.VALUE_TRUE;\n+            break;\n+        case '[':\n+            t = JsonToken.START_ARRAY;\n+            break;\n+        case '{':\n+            t = JsonToken.START_OBJECT;\n+            break;\n+        case ']':\n+        case '}':\n+            _reportUnexpectedChar(i, \"expected a value\");\n+        default:\n+            t = _handleOddValue(i);\n+            break;\n+        }\n+        _nextToken = t;\n+        return name;\n+    }\n+\n+    private final JsonToken _nextTokenNotInObject(int i) throws IOException\n+    {\n+        if (i == INT_QUOTE) {\n+            _tokenIncomplete = true;\n+            return (_currToken = JsonToken.VALUE_STRING);\n+        }\n+        switch (i) {\n+        case '[':\n+            _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n+            return (_currToken = JsonToken.START_ARRAY);\n+        case '{':\n+            _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n+            return (_currToken = JsonToken.START_OBJECT);\n+        case 't':\n+            _matchToken(\"true\", 1);\n+            return (_currToken = JsonToken.VALUE_TRUE);\n+        case 'f':\n+            _matchToken(\"false\", 1);\n+            return (_currToken = JsonToken.VALUE_FALSE);\n+        case 'n':\n+            _matchToken(\"null\", 1);\n+            return (_currToken = JsonToken.VALUE_NULL);\n+        case '-':\n+            return (_currToken = _parseNegNumber());\n+            /* Should we have separate handling for plus? Although\n+             * it is not allowed per se, it may be erroneously used,\n+             * and could be indicated by a more specific error message.\n+             */\n+        case '0':\n+        case '1':\n+        case '2':\n+        case '3':\n+        case '4':\n+        case '5':\n+        case '6':\n+        case '7':\n+        case '8':\n+        case '9':\n+            return (_currToken = _parsePosNumber(i));\n+        }\n+        return (_currToken = _handleOddValue(i));\n+    }\n+    \n     // note: identical to one in UTF8StreamJsonParser\n     @Override\n     public final String nextTextValue() throws IOException\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n         case '-':\n             t = _parseNegNumber();\n             break;\n-\n-            /* Should we have separate handling for plus? Although\n-             * it is not allowed per se, it may be erroneously used,\n-             * and could be indicate by a more specific error message.\n-             */\n         case '0':\n         case '1':\n         case '2':", "timestamp": 1433397130, "metainfo": ""}