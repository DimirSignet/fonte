{"sha": "a7b345975f4e7a29b0ed58f2dcb5d9e12019da94", "log": "Merge pull request #183 from masaruh/fix/182  Always return empty array instead of null for empty buffer", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n             return (_resultArray = _resultString.toCharArray());\n         }\n         // Nope; but does it fit in just one segment?\n-        if (!_hasSegments)  return _currentSegment;\n+        if (!_hasSegments && _currentSegment != null)  return _currentSegment;\n         // Nope, need to have/create a non-segmented array and return it\n         return contentsAsArray();\n     }\n--- a/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestTextBuffer.java\n package com.fasterxml.jackson.core.util;\n-\n-import com.fasterxml.jackson.core.util.BufferRecycler;\n-import com.fasterxml.jackson.core.util.TextBuffer;\n \n public class TestTextBuffer\n     extends com.fasterxml.jackson.core.BaseTest\n               }\n           }\n       }\n+\n+    // [Core#182]\n+    public void testEmpty() {\n+        TextBuffer tb = new TextBuffer(new BufferRecycler());\n+        tb.resetWithEmpty();\n+\n+        assertTrue(tb.getTextBuffer().length == 0);\n+        tb.contentsAsString();\n+        assertTrue(tb.getTextBuffer().length == 0);\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.JsonGenerator.Feature;\n import com.fasterxml.jackson.core.io.*;\n \n public class UTF8JsonGenerator\n         if (value == null) {\n             _writeNull();\n         } else if (_cfgNumbersAsStrings) {\n-            _writeQuotedRaw(value);\n+            _writeQuotedRaw(value.toString());\n         } else {\n             writeRaw(value.toString());\n         }\n         if (value == null) {\n             _writeNull();\n         } else if (_cfgNumbersAsStrings) {\n-            _writeQuotedRaw(value);\n+            String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+            _writeQuotedRaw(raw);\n         } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n             writeRaw(value.toPlainString());\n         } else {\n         }\n     }\n \n-    private final void _writeQuotedRaw(Object value) throws IOException\n-    {\n-        if (_outputTail >= _outputEnd) {\n-            _flushBuffer();\n-        }\n-        _outputBuffer[_outputTail++] = BYTE_QUOTE;\n-        writeRaw(value.toString());\n+    private final void _writeQuotedRaw(String value) throws IOException\n+    {\n+        if (_outputTail >= _outputEnd) {\n+            _flushBuffer();\n+        }\n+        _outputBuffer[_outputTail++] = BYTE_QUOTE;\n+        writeRaw(value);\n         if (_outputTail >= _outputEnd) {\n             _flushBuffer();\n         }\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n         if (value == null) {\n             _writeNull();\n         } else if (_cfgNumbersAsStrings) {\n-            _writeQuotedRaw(value);\n+            _writeQuotedRaw(value.toString());\n         } else {\n             writeRaw(value.toString());\n         }\n         if (value == null) {\n             _writeNull();\n         } else if (_cfgNumbersAsStrings) {\n-            _writeQuotedRaw(value);\n+            String raw = isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN) ? value.toPlainString() : value.toString();\n+            _writeQuotedRaw(raw);\n         } else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {\n             writeRaw(value.toPlainString());\n         } else {\n         }\n     }\n \n-    private void _writeQuotedRaw(Object value) throws IOException\n+    private void _writeQuotedRaw(String value) throws IOException\n     {\n         if (_outputTail >= _outputEnd) {\n             _flushBuffer();\n         }\n         _outputBuffer[_outputTail++] = '\"';\n-        writeRaw(value.toString());\n+        writeRaw(value);\n         if (_outputTail >= _outputEnd) {\n             _flushBuffer();\n         }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonGeneratorFeatures.java\n         jg.close();\n         assertEquals(\"100\", sw.toString());\n     }\n+\n+    // [issue#184]\n+    public void testBigDecimalAsPlainString() throws Exception\n+    {\n+        JsonFactory jf = new JsonFactory();\n+        BigDecimal ENG = new BigDecimal(\"1E+2\");\n+        jf.enable(JsonGenerator.Feature.WRITE_BIGDECIMAL_AS_PLAIN);\n+        jf.enable(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS);\n+\n+        StringWriter sw = new StringWriter();\n+        JsonGenerator jg = jf.createGenerator(sw);\n+        jg.writeNumber(ENG);\n+        jg.close();\n+        assertEquals(quote(\"100\"), sw.toString());\n+\n+        // also, as bytes\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        jg = jf.createGenerator(bos);\n+        jg.writeNumber(ENG);\n+        jg.close();\n+        assertEquals(quote(\"100\"), bos.toString(\"UTF-8\"));\n+    }\n     \n     private String _writeNumbers(JsonFactory jf) throws IOException\n     {", "timestamp": 1424735249, "metainfo": ""}