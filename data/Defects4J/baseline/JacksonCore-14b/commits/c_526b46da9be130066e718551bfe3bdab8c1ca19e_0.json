{"sha": "526b46da9be130066e718551bfe3bdab8c1ca19e", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      * parser, although it may cause parser to internally process\n      * more data (if it lazy loads contents of value events, for example)\n      */\n-    public void copyCurrentEvent(JsonParser jp) throws IOException\n+    public void copyCurrentEvent(JsonParser p) throws IOException\n     {\n-        JsonToken t = jp.getCurrentToken();\n+        JsonToken t = p.getCurrentToken();\n         // sanity check; what to do?\n         if (t == null) {\n             _reportError(\"No current event to copy\");\n             writeEndArray();\n             break;\n         case ID_FIELD_NAME:\n-            writeFieldName(jp.getCurrentName());\n+            writeFieldName(p.getCurrentName());\n             break;\n         case ID_STRING:\n-            if (jp.hasTextCharacters()) {\n-                writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n+            if (p.hasTextCharacters()) {\n+                writeString(p.getTextCharacters(), p.getTextOffset(), p.getTextLength());\n             } else {\n-                writeString(jp.getText());\n+                writeString(p.getText());\n             }\n             break;\n         case ID_NUMBER_INT:\n         {\n-            NumberType n = jp.getNumberType();\n+            NumberType n = p.getNumberType();\n             if (n == NumberType.INT) {\n-                writeNumber(jp.getIntValue());\n+                writeNumber(p.getIntValue());\n             } else if (n == NumberType.BIG_INTEGER) {\n-                writeNumber(jp.getBigIntegerValue());\n+                writeNumber(p.getBigIntegerValue());\n             } else {\n-                writeNumber(jp.getLongValue());\n+                writeNumber(p.getLongValue());\n             }\n             break;\n         }\n         case ID_NUMBER_FLOAT:\n         {\n-            NumberType n = jp.getNumberType();\n+            NumberType n = p.getNumberType();\n             if (n == NumberType.BIG_DECIMAL) {\n-                writeNumber(jp.getDecimalValue());\n+                writeNumber(p.getDecimalValue());\n             } else if (n == NumberType.FLOAT) {\n-                writeNumber(jp.getFloatValue());\n+                writeNumber(p.getFloatValue());\n             } else {\n-                writeNumber(jp.getDoubleValue());\n+                writeNumber(p.getDoubleValue());\n             }\n             break;\n         }\n             writeNull();\n             break;\n         case ID_EMBEDDED_OBJECT:\n-            writeObject(jp.getEmbeddedObject());\n+            writeObject(p.getEmbeddedObject());\n             break;\n         default:\n             _throwInternal();\n      * the event parser already pointed to (if there were no\n      * enclosed events), or the last enclosed event copied.\n      */\n-    public void copyCurrentStructure(JsonParser jp) throws IOException\n+    public void copyCurrentStructure(JsonParser p) throws IOException\n     {\n-        JsonToken t = jp.getCurrentToken();\n+        JsonToken t = p.getCurrentToken();\n         if (t == null) {\n             _reportError(\"No current event to copy\");\n         }\n         // Let's handle field-name separately first\n         int id = t.id();\n         if (id == ID_FIELD_NAME) {\n-            writeFieldName(jp.getCurrentName());\n-            t = jp.nextToken();\n+            writeFieldName(p.getCurrentName());\n+            t = p.nextToken();\n             id = t.id();\n             // fall-through to copy the associated value\n         }\n         switch (id) {\n         case ID_START_OBJECT:\n             writeStartObject();\n-            while (jp.nextToken() != JsonToken.END_OBJECT) {\n-                copyCurrentStructure(jp);\n+            while (p.nextToken() != JsonToken.END_OBJECT) {\n+                copyCurrentStructure(p);\n             }\n             writeEndObject();\n             break;\n         case ID_START_ARRAY:\n             writeStartArray();\n-            while (jp.nextToken() != JsonToken.END_ARRAY) {\n-                copyCurrentStructure(jp);\n+            while (p.nextToken() != JsonToken.END_ARRAY) {\n+                copyCurrentStructure(p);\n             }\n             writeEndArray();\n             break;\n         default:\n-            copyCurrentEvent(jp);\n+            copyCurrentEvent(p);\n         }\n     }\n ", "timestamp": 1456538972, "metainfo": ""}