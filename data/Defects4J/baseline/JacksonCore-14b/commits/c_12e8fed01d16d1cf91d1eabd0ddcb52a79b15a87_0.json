{"sha": "12e8fed01d16d1cf91d1eabd0ddcb52a79b15a87", "log": "Fix for #167", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n      * @return Index of the field entry (0-based)\n      */\n     public int writeFieldName(String name) throws JsonProcessingException {\n+        if (_gotName) {\n+            return JsonWriteContext.STATUS_EXPECT_VALUE;\n+        }\n         _gotName = true;\n         _currentName = name;\n         if (_dups != null) { _checkDup(_dups, name); }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorDupHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorDupHandling.java\n         final JsonFactory f = new JsonFactory();\n         _testSimpleDups(false, true, f);\n     }\n-    \n+\n     @SuppressWarnings(\"resource\")\n     protected void _testSimpleDups(boolean useStream, boolean lazySetting, JsonFactory f)\n             throws Exception\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java\n {\n     // // // First, tests for primitive (non-structured) values\n \n-    @SuppressWarnings(\"resource\")\n     public void testStringWrite() throws Exception\n     {\n         JsonFactory jf = new JsonFactory();\n         \n         gen.close();\n     }\n-    \n+\n+    // [core#167]: no error for writing field name twice\n+    public void testDupFieldNameWrites() throws Exception\n+    {\n+        JsonFactory f = new JsonFactory();\n+        _testDupFieldNameWrites(f, false);\n+        _testDupFieldNameWrites(f, true);        \n+    }\n+\n+    private void _testDupFieldNameWrites(JsonFactory f, boolean useReader) throws Exception\n+    {\n+        JsonGenerator gen;\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        if (useReader) {\n+            gen = f.createGenerator(new OutputStreamWriter(bout, \"UTF-8\"));\n+        } else {\n+            gen = f.createGenerator(bout, JsonEncoding.UTF8);\n+        }\n+        gen.writeStartObject();\n+        gen.writeFieldName(\"a\");\n+        \n+        try {\n+            gen.writeFieldName(\"b\");\n+            gen.flush();\n+            String json = bout.toString(\"UTF-8\");\n+            fail(\"Should not have let two consequtive field name writes succeed: output = \"+json);\n+        } catch (JsonProcessingException e) {\n+            verifyException(e, \"can not write a field name, expecting a value\");\n+        }\n+        gen.close();\n+    }\n+            \n     /*\n     /**********************************************************\n     /* Internal methods", "timestamp": 1416857978, "metainfo": ""}