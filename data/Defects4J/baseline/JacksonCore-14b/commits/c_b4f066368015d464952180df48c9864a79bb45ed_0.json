{"sha": "b4f066368015d464952180df48c9864a79bb45ed", "log": "add bit more testing for nextFieldName() verification", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n \n import java.io.ByteArrayInputStream;\n import java.io.StringReader;\n+import java.util.Random;\n \n import com.fasterxml.jackson.core.JsonFactory;\n import com.fasterxml.jackson.core.JsonParser;\n     {\n         _testIssue38(false);\n         _testIssue38(true);\n+    }\n+\n+    public void testNextNameWithLongContent() throws Exception\n+    {\n+        final JsonFactory jf = new JsonFactory();\n+\n+        _testLong(jf, false);\n+        _testLong(jf, true);\n     }\n     \n     /*\n         assertNull(parser.nextToken());\n         parser.close();\n     }\n+\n+    private void _testLong(JsonFactory f, boolean useStream) throws Exception\n+    {\n+        // do 5 meg thingy\n+        final int SIZE = 5 * 1024 * 1024;\n+        StringBuilder sb = new StringBuilder(SIZE + 20);\n+\n+        sb.append(\"{\");\n+        Random rnd = new Random(1);\n+        int count = 0;\n+        while (sb.length() < SIZE) {\n+            ++count;\n+            if (sb.length() > 1) {\n+                sb.append(\", \");\n+            }\n+            int val = rnd.nextInt();\n+            sb.append('\"');\n+            sb.append(\"f\"+val);\n+            sb.append(\"\\\":\");\n+            sb.append(String.valueOf(val % 1000));\n+        }\n+        sb.append(\"}\");\n+        final String DOC = sb.toString();\n+    \n+        JsonParser parser = useStream ?\n+                f.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+                : f.createParser(new StringReader(DOC));\n+        assertToken(JsonToken.START_OBJECT, parser.nextToken());\n+        rnd = new Random(1);\n+        for (int i = 0; i < count; ++i) {\n+            int exp = rnd.nextInt();\n+            SerializableString expName = new SerializedString(\"f\"+exp);\n+            assertTrue(parser.nextFieldName(expName));\n+            assertToken(JsonToken.VALUE_NUMBER_INT, parser.nextToken());\n+            assertEquals(exp % 1000, parser.getIntValue());\n+        }\n+        assertToken(JsonToken.END_OBJECT, parser.nextToken());\n+        parser.close();\n+    }\n }", "timestamp": 1399437976, "metainfo": ""}