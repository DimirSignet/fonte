{"sha": "ac4b449aee6071c53533863d56a485fdff915fce", "log": "fix to parser filtering, arrays", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n                 // all done with buffered stuff?\n                 if (ctxt == _headContext) {\n                     _exposedContext = null;\n+                    if (ctxt.inArray()) {\n+                        t = delegate.getCurrentToken();\n+// Is this guaranteed to work without further checks?\n+//                        if (t != JsonToken.START_ARRAY) {\n+                        _currToken = t;\n+                        return t;\n+                    }\n+\n                     // Almost! Most likely still have the current token;\n                     // with the sole exception of \n                     /*\n         main_loop:\n         while (true) {\n             JsonToken t = delegate.nextToken();\n-\n             if (t == null) { // is this even legal?\n                 return (_currToken = t);\n             }\n                     f = f.filterStartArray();\n                 }\n                 _itemFilter = f;\n-                _headContext = _headContext.createChildArrayContext(f, true);\n-                if (f == TokenFilter.INCLUDE_ALL) {\n+                if (f == TokenFilter.INCLUDE_ALL) {\n+                    _headContext = _headContext.createChildArrayContext(f, true);\n                     return _nextBuffered();\n                 }\n+                _headContext = _headContext.createChildArrayContext(f, false);\n                 continue main_loop;\n \n             case ID_START_OBJECT:\n--- a/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/JsonPointerParserFilteringTest.java\n         _assert(SIMPLE_INPUT, \"/c/d\", true, \"{'c':{'d':{'a':true}}}\");\n         _assert(SIMPLE_INPUT, \"/a\", true, \"{'a':1}\");\n         _assert(SIMPLE_INPUT, \"/b\", true, \"{'b':[1,2,3]}\");\n-\n-//        _assert(SIMPLE_INPUT, \"/b/1\", true, \"{'b':[2]}\");\n+        _assert(SIMPLE_INPUT, \"/b/0\", true, \"{'b':[1]}\");\n+        _assert(SIMPLE_INPUT, \"/b/1\", true, \"{'b':[2]}\");\n     }\n \n     public void testSimpleNoPath() throws Exception\n     {\n-//        _assert(SIMPLE_INPUT, \"/c\", false, \"{'d':{'a':true}}\");\n+        _assert(SIMPLE_INPUT, \"/c\", false, \"{'d':{'a':true}}\");\n \n         _assert(SIMPLE_INPUT, \"/c/d\", false, \"{'a':true}\");\n         _assert(SIMPLE_INPUT, \"/a\", false, \"1\");", "timestamp": 1429828610, "metainfo": ""}