{"sha": "7f7d10a8479598e5e076ed759d9c9b66f6dd20e7", "log": "Fix a newly found issue with parser filtering", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java\n                 }\n                 // If not, traverse down the context chain\n                 ctxt = _headContext.findChildOf(ctxt);\n-\n                 _exposedContext = ctxt;\n                 if (ctxt == null) { // should never occur\n                     throw _constructError(\"Unexpected problem: chain of filtered context broken\");\n     protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n         throws IOException\n     {\n-        _exposedContext = buffRoot;\n-\n         main_loop:\n         while (true) {\n             JsonToken t = delegate.nextToken();\n                 _itemFilter = f;\n                 if (f == TokenFilter.INCLUDE_ALL) {\n                     _headContext = _headContext.createChildArrayContext(f, true);\n-                    return _nextBuffered();\n+                    return _nextBuffered(buffRoot);\n                 }\n                 _headContext = _headContext.createChildArrayContext(f, false);\n                 continue main_loop;\n                 _itemFilter = f;\n                 if (f == TokenFilter.INCLUDE_ALL) {\n                     _headContext = _headContext.createChildObjectContext(f, true);\n-                    return _nextBuffered();\n+                    return _nextBuffered(buffRoot);\n                 }\n                 _headContext = _headContext.createChildObjectContext(f, false);\n                 continue main_loop;\n                     if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                         f.filterFinishArray();\n                     }\n+                    boolean gotEnd = (_headContext == buffRoot);\n+                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n+\n                     _headContext = _headContext.getParent();\n                     _itemFilter = _headContext.getFilter();\n-                    \n-                    if (_headContext == buffRoot) {\n+\n+                    if (returnEnd) {\n+                        return t;\n+                    }\n+                    // Hmmh. Do we need both checks, or should above suffice?\n+                    if (gotEnd || (_headContext == buffRoot)) {\n                         return null;\n                     }\n                 }\n                     f = _headContext.setFieldName(name);\n                     if (f == TokenFilter.INCLUDE_ALL) {\n                         _itemFilter = f;\n-                        return _nextBuffered();\n+                        return _nextBuffered(buffRoot);\n                     }\n                     if (f == null) { // filter out the value\n                         delegate.nextToken();\n                     }\n                     _itemFilter = f;\n                     if (f == TokenFilter.INCLUDE_ALL) {\n-                        return _nextBuffered();\n+                        return _nextBuffered(buffRoot);\n                     }\n                 }\n                 continue main_loop;\n             default: // scalar value\n                 f = _itemFilter;\n                 if (f == TokenFilter.INCLUDE_ALL) {\n-                    return _nextBuffered();\n+                    return _nextBuffered(buffRoot);\n                 }\n                 if (f != null) {\n                     f = _headContext.checkValue(f);\n                     if ((f == TokenFilter.INCLUDE_ALL)\n                             || ((f != null) && f.includeValue(delegate))) {\n-                        return _nextBuffered();\n+                        return _nextBuffered(buffRoot);\n                     }\n                 }\n                 // Otherwise not included (leaves must be explicitly included)\n         }\n     }\n \n-    private JsonToken _nextBuffered() throws IOException\n+    private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException\n     {\n-        TokenFilterContext ctxt = _exposedContext;\n+        _exposedContext = buffRoot;\n+        TokenFilterContext ctxt = buffRoot;\n         JsonToken t = ctxt.nextTokenToRead();\n         if (t != null) {\n             return t;\n--- a/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/BaseTest.java\n     {\n         StringWriter sw = new StringWriter(100);\n         JsonGenerator g = f.createGenerator(sw);\n-        while (p.nextToken() != null) {\n-            g.copyCurrentEvent(p);\n+        try {\n+            while (p.nextToken() != null) {\n+                g.copyCurrentEvent(p);\n+            }\n+        } catch (IOException e) {\n+            g.flush();\n+            fail(\"Unexpected problem during `readAndWrite`. Output so far: '\"+sw+\"'; problem: \"+e);\n         }\n         p.close();\n         g.close();\n--- a/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java\n+++ b/src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java\n     @SuppressWarnings(\"resource\")\n     public void testMultipleMatchFilteringWithPath2() throws Exception\n     {\n-        JsonParser p0 = JSON_F.createParser(SIMPLE);\n+        String INPUT = aposToQuotes(\"{'a':123,'ob':{'value0':2,'value':3,'value2':4},'b':true}\");\n+        JsonParser p0 = JSON_F.createParser(INPUT);\n         JsonParser p = new FilteringParserDelegate(p0,\n-                new NameMatchFilter(\"array\", \"b\", \"value\"),\n+                new NameMatchFilter(\"b\", \"value\"),\n                 true, true);\n+\n         String result = readAndWrite(JSON_F, p);\n-        assertEquals(aposToQuotes(\"{'array':[1,2],'ob':{'value':3},'b':true}\"), result);\n+        assertEquals(aposToQuotes(\"{'ob':{'value':3},'b':true}\"), result);\n     }\n \n     @SuppressWarnings(\"resource\")", "timestamp": 1430351102, "metainfo": ""}