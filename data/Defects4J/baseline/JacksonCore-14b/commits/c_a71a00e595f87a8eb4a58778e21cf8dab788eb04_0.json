{"sha": "a71a00e595f87a8eb4a58778e21cf8dab788eb04", "log": "Add the failing test for #207", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/ByteQuadsCanonicalizer.java\n      * Array that contains <code>String</code> instances matching\n      * entries in {@link #_hashArea}.\n      * Contains nulls for unused entries. Note that this size is twice\n-     * that o\n+     * that of {@link #_hashArea}\n      */\n     protected String[] _names;\n \n                     0, // count\n                     tertShift,\n                     new int[hashAreaSize], // mainHash, 2x slots, 4 ints per slot\n-                    new String[sz << 1], // 2x slots\n+                    new String[sz << 1], // names == 2x slots\n                     hashAreaSize - sz, // at 7/8 of the total area\n                     hashAreaSize // longNameOffset, immediately after main hashes\n             );\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java\n package com.fasterxml.jackson.core.sym;\n \n import java.io.*;\n+import java.lang.reflect.Field;\n \n import com.fasterxml.jackson.core.*;\n \n /**\n  * Unit test(s) to verify that handling of (byte-based) symbol tables\n- * is working. Created to verify fix to [JACKSON-5] (although not very\n- * good at catching it...).\n+ * is working.\n  */\n public class TestByteBasedSymbols\n     extends com.fasterxml.jackson.core.BaseTest\n          */\n         assertNotNull(nc.toString());\n     }\n-    \n+\n+    // as per name, for [core#207]\n+    public void testIssue207() throws Exception\n+    {\n+        ByteQuadsCanonicalizer nc = ByteQuadsCanonicalizer.createRoot(-523743345);\n+        Field byteSymbolCanonicalizerField = JsonFactory.class.getDeclaredField(\"_byteSymbolCanonicalizer\");\n+        byteSymbolCanonicalizerField.setAccessible(true);\n+        JsonFactory jsonF = new JsonFactory();\n+        byteSymbolCanonicalizerField.set(jsonF, nc);\n+\n+        StringBuilder stringBuilder = new StringBuilder();\n+        stringBuilder.append(\"{\\n\");\n+        stringBuilder.append(\"    \\\"expectedGCperPosition\\\": null\");\n+        for (int i = 0; i < 60; ++i) {\n+            stringBuilder.append(\",\\n    \\\"\").append(i + 1).append(\"\\\": null\");\n+        }\n+        stringBuilder.append(\"\\n}\");\n+\n+        JsonParser p = jsonF.createParser(stringBuilder.toString().getBytes(\"UTF-8\"));\n+        while (p.nextToken() != null) { }\n+        p.close();\n+    }\n+\n     /*\n     /**********************************************************\n     /* Helper methods", "timestamp": 1438300991, "metainfo": ""}