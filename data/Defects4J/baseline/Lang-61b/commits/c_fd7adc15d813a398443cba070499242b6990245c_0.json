{"sha": "fd7adc15d813a398443cba070499242b6990245c", "log": "No bug fix but add a test like http://issues.apache.org/bugzilla/show_bug.cgi?id=33069.   ", "commit": "\n--- a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n  */\n package org.apache.commons.lang.builder;\n \n+import java.util.Arrays;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Maarten Coene\n- * @version $Id: EqualsBuilderTest.java,v 1.11 2004/08/26 05:46:45 ggregory Exp $\n+ * @version $Id: EqualsBuilderTest.java,v 1.12 2005/01/16 19:34:34 ggregory Exp $\n  */\n public class EqualsBuilderTest extends TestCase {\n \n             return b;\n         }\n     }\n-\n+    \n     static class TestEmptySubObject extends TestObject {\n         public TestEmptySubObject(int a) {\n             super(a);\n         array1[1] = true;\n         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n     }\n-\n+    \n+    public static class TestACanEqualB {\n+        private int a;\n+\n+        public TestACanEqualB(int a) {\n+            this.a = a;\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (o == this)\n+                return true;\n+            if (o instanceof TestACanEqualB)\n+                return this.a == ((TestACanEqualB) o).getA();\n+            if (o instanceof TestBCanEqualA)\n+                return this.a == ((TestBCanEqualA) o).getB();\n+            return false;\n+        }\n+\n+        public int getA() {\n+            return this.a;\n+        }\n+    }\n+\n+    public static class TestBCanEqualA {\n+        private int b;\n+\n+        public TestBCanEqualA(int b) {\n+            this.b = b;\n+        }\n+\n+        public boolean equals(Object o) {\n+            if (o == this)\n+                return true;\n+            if (o instanceof TestACanEqualB)\n+                return this.b == ((TestACanEqualB) o).getA();\n+            if (o instanceof TestBCanEqualA)\n+                return this.b == ((TestBCanEqualA) o).getB();\n+            return false;\n+        }\n+\n+        public int getB() {\n+            return this.b;\n+        }\n+    }\n+    \n+    /**\n+     * Tests two instances of classes that can be equal and that are not \"related\". The two classes are not subclasses\n+     * of each other and do not share a parent aside from Object.\n+     * See http://issues.apache.org/bugzilla/show_bug.cgi?id=33069\n+     */\n+    public void testUnrelatedClasses() {\n+        Object[] x = new Object[]{new TestACanEqualB(1)};\n+        Object[] y = new Object[]{new TestBCanEqualA(1)};\n+\n+        // sanity checks:\n+        assertTrue(Arrays.equals(x, x));\n+        assertTrue(Arrays.equals(y, y));\n+        assertTrue(Arrays.equals(x, y));\n+        assertTrue(Arrays.equals(y, x));\n+        // real tests:\n+        assertTrue(x[0].equals(x[0]));\n+        assertTrue(y[0].equals(y[0]));\n+        assertTrue(x[0].equals(y[0]));\n+        assertTrue(y[0].equals(x[0]));\n+        assertTrue(new EqualsBuilder().append(x, x).isEquals());\n+        assertTrue(new EqualsBuilder().append(y, y).isEquals());\n+        assertTrue(new EqualsBuilder().append(x, y).isEquals());\n+        assertTrue(new EqualsBuilder().append(y, x).isEquals());\n+    }\n+    \n }", "timestamp": 1105904074, "metainfo": ""}