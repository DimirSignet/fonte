{"sha": "d6f8e97b576d9395669dc170c8cd3b56be37ba96", "log": "Rename  toCharacter  to  toChar Rename  toInteger  to  toIntValue Add  toCharacterObject(String)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharUtils.java\n+++ b/src/java/org/apache/commons/lang/CharUtils.java\n  * \n  * @author Stephen Colebourne\n  * @since 2.1\n- * @version $Id: CharUtils.java,v 1.7 2004/03/10 22:59:45 scolebourne Exp $\n+ * @version $Id: CharUtils.java,v 1.8 2004/03/10 23:23:46 scolebourne Exp $\n  */\n public class CharUtils {\n     \n         }\n     }\n     \n+    /**\n+     * <p>Converts the String to a Character using the first character, returning\n+     * null for empty Strings.</p>\n+     * \n+     * <p>For ASCII 7 bit characters, this uses a cache that will return the\n+     * same Character object each time.</p>\n+     * \n+     * <pre>\n+     *   CharUtils.toCharacterObject(null) = null\n+     *   CharUtils.toCharacterObject(\"\")   = null\n+     *   CharUtils.toCharacterObject(\"A\")  = 'A'\n+     *   CharUtils.toCharacterObject(\"BA\") = 'B'\n+     * </pre>\n+     *\n+     * @param str  the character to convert\n+     * @return the Character value of the first letter of the String\n+     */\n+    public static Character toCharacterObject(String str) {\n+        if (StringUtils.isEmpty(str)) {\n+            return null;\n+        }\n+        return toCharacterObject(str.charAt(0));\n+    }\n+    \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Converts the Character to a char throwing an exception for <code>null</code>.</p>\n      * \n      * <pre>\n-     *   CharUtils.toCharacter(null) = IllegalArgumentException\n-     *   CharUtils.toCharacter(' ')  = ' '\n-     *   CharUtils.toCharacter('A')  = 'A'\n+     *   CharUtils.toChar(null) = IllegalArgumentException\n+     *   CharUtils.toChar(' ')  = ' '\n+     *   CharUtils.toChar('A')  = 'A'\n      * </pre>\n      *\n      * @param ch  the character to convert\n      * @return the char value of the Character\n      * @throws IllegalArgumentException if the Character is null\n      */\n-    public static char toCharacter(Character ch) {\n+    public static char toChar(Character ch) {\n         if (ch == null) {\n             throw new IllegalArgumentException(\"The Character must not be null\");\n         }\n      * <p>Converts the Character to a char handling <code>null</code>.</p>\n      * \n      * <pre>\n-     *   CharUtils.toCharacter(null, 'X') = 'X'\n-     *   CharUtils.toCharacter(' ', 'X')  = ' '\n-     *   CharUtils.toCharacter('A', 'X')  = 'A'\n+     *   CharUtils.toChar(null, 'X') = 'X'\n+     *   CharUtils.toChar(' ', 'X')  = ' '\n+     *   CharUtils.toChar('A', 'X')  = 'A'\n      * </pre>\n      *\n      * @param ch  the character to convert\n      * @param defaultValue  the value to use if the  Character is null\n      * @return the char value of the Character or the default if null\n      */\n-    public static char toCharacter(Character ch, char defaultValue) {\n+    public static char toChar(Character ch, char defaultValue) {\n         if (ch == null) {\n             return defaultValue;\n         }\n     \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Converts the String to a char using the first character throwing\n+     * <p>Converts the String to a char using the first character, throwing\n      * an exception on empty Strings.</p>\n      * \n      * <pre>\n-     *   CharUtils.toCharacter(null) = IllegalArgumentException\n-     *   CharUtils.toCharacter(\"\")   = IllegalArgumentException\n-     *   CharUtils.toCharacter(\"A\")  = 'A'\n-     *   CharUtils.toCharacter(\"BA\") = 'B'\n+     *   CharUtils.toChar(null) = IllegalArgumentException\n+     *   CharUtils.toChar(\"\")   = IllegalArgumentException\n+     *   CharUtils.toChar(\"A\")  = 'A'\n+     *   CharUtils.toChar(\"BA\") = 'B'\n      * </pre>\n      *\n      * @param str  the character to convert\n-     * @return the char value of the Character\n+     * @return the char value of the first letter of the String\n      * @throws IllegalArgumentException if the String is empty\n      */\n-    public static char toCharacter(String str) {\n+    public static char toChar(String str) {\n         if (StringUtils.isEmpty(str)) {\n             throw new IllegalArgumentException(\"The String must not be empty\");\n         }\n     }\n     \n     /**\n-     * <p>Converts the String to a char using the first character defaulting\n+     * <p>Converts the String to a char using the first character, defaulting\n      * the value on empty Strings.</p>\n      * \n      * <pre>\n-     *   CharUtils.toCharacter(null, 'X') = 'X'\n-     *   CharUtils.toCharacter(\"\", 'X')   = 'X'\n-     *   CharUtils.toCharacter(\"A\", 'X')  = 'A'\n-     *   CharUtils.toCharacter(\"BA\", 'X') = 'B'\n+     *   CharUtils.toChar(null, 'X') = 'X'\n+     *   CharUtils.toChar(\"\", 'X')   = 'X'\n+     *   CharUtils.toChar(\"A\", 'X')  = 'A'\n+     *   CharUtils.toChar(\"BA\", 'X') = 'B'\n      * </pre>\n      *\n      * @param str  the character to convert\n      * @param defaultValue  the value to use if the  Character is null\n-     * @return the char value of the Character or the default if null\n-     */\n-    public static char toCharacter(String str, char defaultValue) {\n+     * @return the char value of the first letter of the String or the default if null\n+     */\n+    public static char toChar(String str, char defaultValue) {\n         if (StringUtils.isEmpty(str)) {\n             return defaultValue;\n         }\n      * <p>This method coverts the char '1' to the int 1 and so on.</p>\n      *\n      * <pre>\n-     *   CharUtils.toInteger('3')  = 3\n-     *   CharUtils.toInteger('A')  = IllegalArgumentException\n+     *   CharUtils.toIntValue('3')  = 3\n+     *   CharUtils.toIntValue('A')  = IllegalArgumentException\n      * </pre>\n      *\n      * @param ch  the character to convert\n      * @return the int value of the character\n      * @throws IllegalArgumentException if the character is not ASCII numeric\n      */\n-    public static int toInteger(char ch) {\n+    public static int toIntValue(char ch) {\n         if (isAsciiNumeric(ch) == false) {\n             throw new IllegalArgumentException(\"The character \" + ch + \" is not in the range '0' - '9'\");\n         }\n      * <p>This method coverts the char '1' to the int 1 and so on.</p>\n      *\n      * <pre>\n-     *   CharUtils.toInteger('3', -1)  = 3\n-     *   CharUtils.toInteger('A', -1)  = -1\n+     *   CharUtils.toIntValue('3', -1)  = 3\n+     *   CharUtils.toIntValue('A', -1)  = -1\n      * </pre>\n      *\n      * @param ch  the character to convert\n      * @param defaultValue  the default value to use if the character is not numeric\n      * @return the int value of the character\n      */\n-    public static int toInteger(char ch, int defaultValue) {\n+    public static int toIntValue(char ch, int defaultValue) {\n         if (isAsciiNumeric(ch) == false) {\n             return defaultValue;\n         }\n      * <p>This method coverts the char '1' to the int 1 and so on.</p>\n      *\n      * <pre>\n-     *   CharUtils.toInteger(null) = IllegalArgumentException\n-     *   CharUtils.toInteger('3')  = 3\n-     *   CharUtils.toInteger('A')  = IllegalArgumentException\n+     *   CharUtils.toIntValue(null) = IllegalArgumentException\n+     *   CharUtils.toIntValue('3')  = 3\n+     *   CharUtils.toIntValue('A')  = IllegalArgumentException\n      * </pre>\n      *\n      * @param ch  the character to convert, not null\n      * @return the int value of the character\n      * @throws IllegalArgumentException if the Character is not ASCII numeric or is null\n      */\n-    public static int toInteger(Character ch) {\n+    public static int toIntValue(Character ch) {\n         if (ch == null) {\n             throw new IllegalArgumentException(\"The character must not be null\");\n         }\n-        return toInteger(ch.charValue());\n+        return toIntValue(ch.charValue());\n     }\n     \n     /**\n      * <p>This method coverts the char '1' to the int 1 and so on.</p>\n      *\n      * <pre>\n-     *   CharUtils.toInteger(null, -1) = -1\n-     *   CharUtils.toInteger('3', -1)  = 3\n-     *   CharUtils.toInteger('A', -1)  = -1\n+     *   CharUtils.toIntValue(null, -1) = -1\n+     *   CharUtils.toIntValue('3', -1)  = 3\n+     *   CharUtils.toIntValue('A', -1)  = -1\n      * </pre>\n      *\n      * @param ch  the character to convert\n      * @param defaultValue  the default value to use if the character is not numeric\n      * @return the int value of the character\n      */\n-    public static int toInteger(Character ch, int defaultValue) {\n+    public static int toIntValue(Character ch, int defaultValue) {\n         if (ch == null) {\n             return defaultValue;\n         }\n-        return toInteger(ch.charValue(), defaultValue);\n+        return toIntValue(ch.charValue(), defaultValue);\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/test/org/apache/commons/lang/CharUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/CharUtilsTest.java\n  * Unit tests {@link org.apache.commons.lang.CharUtils}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: CharUtilsTest.java,v 1.3 2004/02/24 22:22:51 fredrik Exp $\n+ * @version $Id: CharUtilsTest.java,v 1.4 2004/03/10 23:23:46 scolebourne Exp $\n  */\n public class CharUtilsTest extends TestCase {\n \n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n-    public void testToCharacter_Character() {\n-        assertEquals('A', CharUtils.toCharacter(CHARACTER_A));\n-        assertEquals('B', CharUtils.toCharacter(CHARACTER_B));\n-        try {\n-            CharUtils.toCharacter((Character) null);\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-    \n-    public void testToCharacter_Character_char() {\n-        assertEquals('A', CharUtils.toCharacter(CHARACTER_A, 'X'));\n-        assertEquals('B', CharUtils.toCharacter(CHARACTER_B, 'X'));\n-        assertEquals('X', CharUtils.toCharacter((Character) null, 'X'));\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testToCharacter_String() {\n-        assertEquals('A', CharUtils.toCharacter(\"A\"));\n-        assertEquals('B', CharUtils.toCharacter(\"BA\"));\n-        try {\n-            CharUtils.toCharacter((String) null);\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            CharUtils.toCharacter(\"\");\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-    \n-    public void testToCharacter_String_char() {\n-        assertEquals('A', CharUtils.toCharacter(\"A\", 'X'));\n-        assertEquals('B', CharUtils.toCharacter(\"BA\", 'X'));\n-        assertEquals('X', CharUtils.toCharacter(\"\", 'X'));\n-        assertEquals('X', CharUtils.toCharacter((String) null, 'X'));\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testToInteger_char() {\n-        assertEquals(0, CharUtils.toInteger('0'));\n-        assertEquals(1, CharUtils.toInteger('1'));\n-        assertEquals(2, CharUtils.toInteger('2'));\n-        assertEquals(3, CharUtils.toInteger('3'));\n-        assertEquals(4, CharUtils.toInteger('4'));\n-        assertEquals(5, CharUtils.toInteger('5'));\n-        assertEquals(6, CharUtils.toInteger('6'));\n-        assertEquals(7, CharUtils.toInteger('7'));\n-        assertEquals(8, CharUtils.toInteger('8'));\n-        assertEquals(9, CharUtils.toInteger('9'));\n-        try {\n-            CharUtils.toInteger('a');\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-    \n-    public void testToInteger_char_int() {\n-        assertEquals(0, CharUtils.toInteger('0', -1));\n-        assertEquals(3, CharUtils.toInteger('3', -1));\n-        assertEquals(-1, CharUtils.toInteger('a', -1));\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testToInteger_Character() {\n-        assertEquals(0, CharUtils.toInteger(new Character('0')));\n-        assertEquals(3, CharUtils.toInteger(new Character('3')));\n-        try {\n-            CharUtils.toInteger(null);\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            CharUtils.toInteger(CHARACTER_A);\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-    \n-    public void testToInteger_Character_int() {\n-        assertEquals(0, CharUtils.toInteger(new Character('0'), -1));\n-        assertEquals(3, CharUtils.toInteger(new Character('3'), -1));\n-        assertEquals(-1, CharUtils.toInteger(new Character('A'), -1));\n-        assertEquals(-1, CharUtils.toInteger(null, -1));\n+    public void testToCharacterObject_String() {\n+        assertEquals(null, CharUtils.toCharacterObject(null));\n+        assertEquals(null, CharUtils.toCharacterObject(\"\"));\n+        assertEquals(new Character('a'), CharUtils.toCharacterObject(\"a\"));\n+        assertEquals(new Character('a'), CharUtils.toCharacterObject(\"abc\"));\n+        assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject(\"a\"));\n+        assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject('a'));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToChar_Character() {\n+        assertEquals('A', CharUtils.toChar(CHARACTER_A));\n+        assertEquals('B', CharUtils.toChar(CHARACTER_B));\n+        try {\n+            CharUtils.toChar((Character) null);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToChar_Character_char() {\n+        assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));\n+        assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));\n+        assertEquals('X', CharUtils.toChar((Character) null, 'X'));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToChar_String() {\n+        assertEquals('A', CharUtils.toChar(\"A\"));\n+        assertEquals('B', CharUtils.toChar(\"BA\"));\n+        try {\n+            CharUtils.toChar((String) null);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            CharUtils.toChar(\"\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToChar_String_char() {\n+        assertEquals('A', CharUtils.toChar(\"A\", 'X'));\n+        assertEquals('B', CharUtils.toChar(\"BA\", 'X'));\n+        assertEquals('X', CharUtils.toChar(\"\", 'X'));\n+        assertEquals('X', CharUtils.toChar((String) null, 'X'));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToIntValue_char() {\n+        assertEquals(0, CharUtils.toIntValue('0'));\n+        assertEquals(1, CharUtils.toIntValue('1'));\n+        assertEquals(2, CharUtils.toIntValue('2'));\n+        assertEquals(3, CharUtils.toIntValue('3'));\n+        assertEquals(4, CharUtils.toIntValue('4'));\n+        assertEquals(5, CharUtils.toIntValue('5'));\n+        assertEquals(6, CharUtils.toIntValue('6'));\n+        assertEquals(7, CharUtils.toIntValue('7'));\n+        assertEquals(8, CharUtils.toIntValue('8'));\n+        assertEquals(9, CharUtils.toIntValue('9'));\n+        try {\n+            CharUtils.toIntValue('a');\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToIntValue_char_int() {\n+        assertEquals(0, CharUtils.toIntValue('0', -1));\n+        assertEquals(3, CharUtils.toIntValue('3', -1));\n+        assertEquals(-1, CharUtils.toIntValue('a', -1));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testToIntValue_Character() {\n+        assertEquals(0, CharUtils.toIntValue(new Character('0')));\n+        assertEquals(3, CharUtils.toIntValue(new Character('3')));\n+        try {\n+            CharUtils.toIntValue(null);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            CharUtils.toIntValue(CHARACTER_A);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testToIntValue_Character_int() {\n+        assertEquals(0, CharUtils.toIntValue(new Character('0'), -1));\n+        assertEquals(3, CharUtils.toIntValue(new Character('3'), -1));\n+        assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1));\n+        assertEquals(-1, CharUtils.toIntValue(null, -1));\n     }\n     \n     //-----------------------------------------------------------------------", "timestamp": 1078961026, "metainfo": ""}