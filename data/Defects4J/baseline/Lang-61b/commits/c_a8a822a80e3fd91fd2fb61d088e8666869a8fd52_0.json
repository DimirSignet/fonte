{"sha": "a8a822a80e3fd91fd2fb61d088e8666869a8fd52", "log": "Javadoc clarity   ", "commit": "\n--- a/src/java/org/apache/commons/lang/WordWrapUtils.java\n+++ b/src/java/org/apache/commons/lang/WordWrapUtils.java\n  * An exception will not be thrown for a <code>null</code> input.\n  * Each method documents its behaviour in more detail.</p>\n  * \n+ * @author Apache Jakarta Velocity\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: WordWrapUtils.java,v 1.9 2003/08/13 23:47:39 scolebourne Exp $\n+ * @version $Id: WordWrapUtils.java,v 1.10 2003/08/16 12:45:38 scolebourne Exp $\n  */\n public class WordWrapUtils {\n \n \n     // Wrapping\n     //--------------------------------------------------------------------------\n+//    /**\n+//     * <p>Wraps a block of text to a specified line length using '\\n' as\n+//     * a newline.</p>\n+//     *\n+//     * <p>This method takes a block of text, which might have long lines in it\n+//     * and wraps the long lines based on the supplied lineLength parameter.</p>\n+//     * \n+//     * <p>If a single word is longer than the line length (eg. a URL), it will\n+//     * not be broken, and will display beyond the expected width.</p>\n+//     * \n+//     * <p>If there are tabs in inString, you are going to get results that are\n+//     * a bit strange. Tabs are a single character but are displayed as 4 or 8\n+//     * spaces. Remove the tabs.</p>\n+//     *\n+//     * @param str  text which is in need of word-wrapping, may be null\n+//     * @param lineLength  the column to wrap the words at\n+//     * @return the text with all the long lines word-wrapped\n+//     *  <code>null</code> if null string input\n+//     */\n+//    public static String wrapText(String str, int lineLength) {\n+//        return wrap(str, null, lineLength);\n+//    }\n+    \n     /**\n      * <p>Wraps a block of text to a specified line length.</p>\n      *\n      * <p>This method takes a block of text, which might have long lines in it\n-     * and wraps the long lines based on the supplied wrapColumn parameter. \n-     * It was initially implemented for use by VelocityEmail. If there are tabs\n-     * in inString, you are going to get results that are a bit strange,\n-     * since tabs are a single character but are displayed as 4 or 8\n+     * and wraps the long lines based on the supplied lineLength parameter.</p>\n+     * \n+     * <p>If a single word is longer than the wrapColumn (eg. a URL), it will\n+     * not be broken, and will display beyond the expected width.</p>\n+     * \n+     * <p>If there are tabs in inString, you are going to get results that are\n+     * a bit strange. Tabs are a single character but are displayed as 4 or 8\n      * spaces. Remove the tabs.</p>\n      *\n      * @param str  text which is in need of word-wrapping, may be null\n      * @param newLineChars  the characters that define a newline, null treated as \\n\n-     * @param wrapColumn  the column to wrap the words at\n-     * @return the text with all the long lines word-wrapped,\n+     * @param lineLength  the column to wrap the words at\n+     * @return the text with all the long lines word-wrapped\n      *  <code>null</code> if null string input\n      */\n-    public static String wrapText(String str, String newLineChars, int wrapColumn) {\n+    public static String wrapText(String str, String newLineChars, int lineLength) {\n         if (str == null) {\n             return null;\n         }\n             try {\n                 String nextLine = lineTokenizer.nextToken();\n \n-                if (nextLine.length() > wrapColumn) {\n+                if (nextLine.length() > lineLength) {\n                     // This line is long enough to be wrapped.\n-                    nextLine = wrapLine(nextLine, newLineChars, wrapColumn);\n+                    nextLine = wrapLine(nextLine, newLineChars, lineLength);\n                 }\n \n                 stringBuffer.append(nextLine);\n      *\n      * @param line  a line which is in need of word-wrapping\n      * @param newline  the characters that define a newline\n-     * @param wrapColumn  the column to wrap the words at\n+     * @param lineLength  the column to wrap the words at\n      * @return a line with newlines inserted\n      */\n-    private static String wrapLine(String line, String newline, int wrapColumn) {\n+    private static String wrapLine(String line, String newline, int lineLength) {\n         StringBuffer wrappedLine = new StringBuffer();\n \n-        while (line.length() > wrapColumn) {\n-            int spaceToWrapAt = line.lastIndexOf(' ', wrapColumn);\n+        while (line.length() > lineLength) {\n+            int spaceToWrapAt = line.lastIndexOf(' ', lineLength);\n \n             if (spaceToWrapAt >= 0) {\n                 wrappedLine.append(line.substring(0, spaceToWrapAt));\n             // dependent on a parameter for those situations when\n             // someone wants long words broken at line length.\n             else {\n-                spaceToWrapAt = line.indexOf(' ', wrapColumn);\n+                spaceToWrapAt = line.indexOf(' ', lineLength);\n \n                 if (spaceToWrapAt >= 0) {\n                     wrappedLine.append(line.substring(0, spaceToWrapAt));", "timestamp": 1061037938, "metainfo": ""}