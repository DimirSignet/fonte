{"sha": "2f435baa687274dac335ed00aa943f2d35bbf9a2", "log": "Bugzilla Bug 30815 ArrayUtils.isEquals() throws ClassCastException when array1 and array2 are different dimension http://issues.apache.org/bugzilla/show_bug.cgi?id=30815   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * @author Pete Gieser\n  * @author Arun Mammen Thomas\n  * @since 1.0\n- * @version $Id: EqualsBuilder.java,v 1.24 2004/02/18 22:53:24 ggregory Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.25 2004/08/25 21:20:13 ggregory Exp $\n  */\n public class EqualsBuilder {\n     /**\n         }\n         Class lhsClass = lhs.getClass();\n         if (!lhsClass.isArray()) {\n-            //the simple case, not an array, just test the element\n+            // The simple case, not an array, just test the element\n             isEquals = lhs.equals(rhs);\n+        } else if (lhs.getClass() != rhs.getClass()) {\n+            // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n+            isEquals = false;\n+        }\n+        // 'Switch' on type of array, to dispatch to the correct handler\n+        // This handles multi dimensional arrays of the same depth\n+        else if (lhs instanceof long[]) {\n+            append((long[]) lhs, (long[]) rhs);\n+        } else if (lhs instanceof int[]) {\n+            append((int[]) lhs, (int[]) rhs);\n+        } else if (lhs instanceof short[]) {\n+            append((short[]) lhs, (short[]) rhs);\n+        } else if (lhs instanceof char[]) {\n+            append((char[]) lhs, (char[]) rhs);\n+        } else if (lhs instanceof byte[]) {\n+            append((byte[]) lhs, (byte[]) rhs);\n+        } else if (lhs instanceof double[]) {\n+            append((double[]) lhs, (double[]) rhs);\n+        } else if (lhs instanceof float[]) {\n+            append((float[]) lhs, (float[]) rhs);\n+        } else if (lhs instanceof boolean[]) {\n+            append((boolean[]) lhs, (boolean[]) rhs);\n         } else {\n-            //'Switch' on type of array, to dispatch to the correct handler\n-            // This handles multi dimensional arrays\n-            if (lhs instanceof long[]) {\n-                append((long[]) lhs, (long[]) rhs);\n-            } else if (lhs instanceof int[]) {\n-                append((int[]) lhs, (int[]) rhs);\n-            } else if (lhs instanceof short[]) {\n-                append((short[]) lhs, (short[]) rhs);\n-            } else if (lhs instanceof char[]) {\n-                append((char[]) lhs, (char[]) rhs);\n-            } else if (lhs instanceof byte[]) {\n-                append((byte[]) lhs, (byte[]) rhs);\n-            } else if (lhs instanceof double[]) {\n-                append((double[]) lhs, (double[]) rhs);\n-            } else if (lhs instanceof float[]) {\n-                append((float[]) lhs, (float[]) rhs);\n-            } else if (lhs instanceof boolean[]) {\n-                append((boolean[]) lhs, (boolean[]) rhs);\n-            } else {\n-                // Not an array of primitives\n-                append((Object[]) lhs, (Object[]) rhs);\n-            }\n-        }\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Test if two <code>long</code>s are equal.</p>\n-     *\n-     * @param lhs  the left hand <code>long</code>\n-     * @param rhs  the right hand <code>long</code>\n+            // Not an array of primitives\n+            append((Object[]) lhs, (Object[]) rhs);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * <p>\n+     * Test if two <code>long</code> s are equal.\n+     * </p>\n+     * \n+     * @param lhs\n+     *                  the left hand <code>long</code>\n+     * @param rhs\n+     *                  the right hand <code>long</code>\n      * @return EqualsBuilder - used to chain calls.\n      */\n     public EqualsBuilder append(long lhs, long rhs) {\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author Fredrik Westermarck\n  * @author Gary Gregory\n  * @author Maarten Coene\n- * @version $Id: ArrayUtilsTest.java,v 1.27 2004/06/06 03:53:24 bayard Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.28 2004/08/25 21:20:13 ggregory Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n     }\n \n     //-----------------------------------------------------------------------\n+    private void assertIsEquals(Object array1, Object array2, Object array3) {\n+        assertEquals(true, ArrayUtils.isEquals(array1, array1));\n+        assertEquals(true, ArrayUtils.isEquals(array2, array2));\n+        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n+        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n+        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n+        assertEquals(false, ArrayUtils.isEquals(array1, array3));\n+        assertEquals(false, ArrayUtils.isEquals(array3, array1));\n+        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n+        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n+    }\n+\n     public void testIsEquals() {\n-        long[][] array1 = new long[][] {{2,5}, {4,5}};\n-        long[][] array2 = new long[][] {{2,5}, {4,6}};\n-        assertEquals(true, ArrayUtils.isEquals(array1, array1));\n-        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n-        \n-        Object[] array3 = new Object[] {new String(new char[] {'A', 'B'})};\n-        Object[] array4 = new Object[] {\"AB\"};\n+        long[][] larray1 = new long[][]{{2, 5}, {4, 5}};\n+        long[][] larray2 = new long[][]{{2, 5}, {4, 6}};\n+        long[] larray3 = new long[]{2, 5};\n+        this.assertIsEquals(larray1, larray2, larray3);\n+\n+        int[][] iarray1 = new int[][]{{2, 5}, {4, 5}};\n+        int[][] iarray2 = new int[][]{{2, 5}, {4, 6}};\n+        int[] iarray3 = new int[]{2, 5};\n+        this.assertIsEquals(iarray1, iarray2, iarray3);\n+\n+        short[][] sarray1 = new short[][]{{2, 5}, {4, 5}};\n+        short[][] sarray2 = new short[][]{{2, 5}, {4, 6}};\n+        short[] sarray3 = new short[]{2, 5};\n+        this.assertIsEquals(sarray1, sarray2, sarray3);\n+\n+        float[][] farray1 = new float[][]{{2, 5}, {4, 5}};\n+        float[][] farray2 = new float[][]{{2, 5}, {4, 6}};\n+        float[] farray3 = new float[]{2, 5};\n+        this.assertIsEquals(farray1, farray2, farray3);\n+\n+        double[][] darray1 = new double[][]{{2, 5}, {4, 5}};\n+        double[][] darray2 = new double[][]{{2, 5}, {4, 6}};\n+        double[] darray3 = new double[]{2, 5};\n+        this.assertIsEquals(darray1, darray2, darray3);\n+\n+        byte[][] byteArray1 = new byte[][]{{2, 5}, {4, 5}};\n+        byte[][] byteArray2 = new byte[][]{{2, 5}, {4, 6}};\n+        byte[] byteArray3 = new byte[]{2, 5};\n+        this.assertIsEquals(byteArray1, byteArray2, byteArray3);\n+\n+        char[][] charArray1 = new char[][]{{2, 5}, {4, 5}};\n+        char[][] charArray2 = new char[][]{{2, 5}, {4, 6}};\n+        char[] charArray3 = new char[]{2, 5};\n+        this.assertIsEquals(charArray1, charArray2, charArray3);\n+\n+        boolean[][] barray1 = new boolean[][]{{true, false}, {true, true}};\n+        boolean[][] barray2 = new boolean[][]{{true, false}, {true, false}};\n+        boolean[] barray3 = new boolean[]{false, true};\n+        this.assertIsEquals(barray1, barray2, barray3);\n+\n+        Object[] array3 = new Object[]{new String(new char[]{'A', 'B'})};\n+        Object[] array4 = new Object[]{\"AB\"};\n         assertEquals(true, ArrayUtils.isEquals(array3, array3));\n         assertEquals(true, ArrayUtils.isEquals(array3, array4));\n \n--- a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Maarten Coene\n- * @version $Id: EqualsBuilderTest.java,v 1.9 2004/02/18 23:00:51 ggregory Exp $\n+ * @version $Id: EqualsBuilderTest.java,v 1.10 2004/08/25 21:20:15 ggregory Exp $\n  */\n public class EqualsBuilderTest extends TestCase {\n \n         assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n         array1[1][1] = false;\n         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+        \n+        // compare 1 dim to 2.\n+        boolean[] array3 = new boolean[]{true, true};\n+        assertFalse(new EqualsBuilder().append(array1, array3).isEquals());\n+        assertFalse(new EqualsBuilder().append(array3, array1).isEquals());\n+        assertFalse(new EqualsBuilder().append(array2, array3).isEquals());\n+        assertFalse(new EqualsBuilder().append(array3, array2).isEquals());\n     }\n \n     public void testRaggedArray() {", "timestamp": 1093468815, "metainfo": ""}