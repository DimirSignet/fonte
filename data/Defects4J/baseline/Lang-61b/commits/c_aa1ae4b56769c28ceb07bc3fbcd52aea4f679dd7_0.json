{"sha": "aa1ae4b56769c28ceb07bc3fbcd52aea4f679dd7", "log": "Added code from Steve Downey,  with some formatting changes and extra tests   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.builder;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.EqualsBuilder}.\n+ *\n+ * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: EqualsBuilderTest.java,v 1.1 2002/09/12 22:00:35 scolebourne Exp $\n+ */\n+public class EqualsBuilderTest extends TestCase {\n+\n+    public EqualsBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(EqualsBuilderTest.class);\n+        suite.setName(\"HashCodeBuilder Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    static class TestObject {\n+        private int a;\n+        public TestObject(int a) {\n+            this.a = a;\n+        }\n+        public boolean equals(Object o) {\n+            if (o == this) {\n+                return true;\n+            }\n+            if (!(o instanceof TestObject)) {\n+                return false;\n+            }\n+            TestObject rhs = (TestObject) o;\n+            return (a == rhs.a);\n+        }\n+\n+        public void setA(int a) {\n+            this.a = a;\n+        }\n+\n+        public int getA() {\n+            return a;\n+        }\n+    }\n+\n+    public void testReflectionEquals() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(5);\n+        assertTrue(EqualsBuilder.reflectionEquals(o1, o1));\n+        assertTrue(!EqualsBuilder.reflectionEquals(o1, o2));\n+        o2.setA(4);\n+        assertTrue(EqualsBuilder.reflectionEquals(o1, o2));\n+\n+        assertTrue(!EqualsBuilder.reflectionEquals(o1, this));\n+        \n+        assertTrue(!EqualsBuilder.reflectionEquals(o1, null));\n+        assertTrue(!EqualsBuilder.reflectionEquals(null, o2));\n+        assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null));\n+    }\n+\n+    public void testObject() {\n+        TestObject o1 = new TestObject(4);\n+        TestObject o2 = new TestObject(5);\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+        o2.setA(4);\n+        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());\n+\n+        assertTrue(!new EqualsBuilder().append(o1, this).isEquals());\n+        \n+        assertTrue(!new EqualsBuilder().append(o1, null).isEquals());\n+        assertTrue(!new EqualsBuilder().append(null, o2).isEquals());\n+        assertTrue(new EqualsBuilder().append((Object) null, (Object) null).isEquals());\n+    }\n+\n+    public void testLong() {\n+        long o1 = 1L;\n+        long o2 = 2L;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testInt() {\n+        int o1 = 1;\n+        int o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testShort() {\n+        short o1 = 1;\n+        short o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testChar() {\n+        char o1 = 1;\n+        char o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testByte() {\n+        byte o1 = 1;\n+        byte o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testDouble() {\n+        double o1 = 1;\n+        double o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals());\n+        assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals());\n+        assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals());\n+    }\n+\n+    public void testFloat() {\n+        float o1 = 1;\n+        float o2 = 2;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, Float.NaN).isEquals());\n+        assertTrue(new EqualsBuilder().append(Float.NaN, Float.NaN).isEquals());\n+        assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n+    }\n+\n+    public void testBoolean() {\n+        boolean o1 = true;\n+        boolean o2 = false;\n+        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());\n+        assertTrue(!new EqualsBuilder().append(o1, o2).isEquals());\n+    }\n+\n+    public void testObjectArray() {\n+        TestObject[] obj1 = new TestObject[2];\n+        obj1[0] = new TestObject(4);\n+        obj1[1] = new TestObject(5);\n+        TestObject[] obj2 = new TestObject[2];\n+        obj2[0] = new TestObject(4);\n+        obj2[1] = new TestObject(5);\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1].setA(6);\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testLongArray() {\n+        long[] obj1 = new long[2];\n+        obj1[0] = 5L;\n+        obj1[1] = 6L;\n+        long[] obj2 = new long[2];\n+        obj2[0] = 5L;\n+        obj2[1] = 6L;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testIntArray() {\n+        int[] obj1 = new int[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        int[] obj2 = new int[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testShortArray() {\n+        short[] obj1 = new short[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        short[] obj2 = new short[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testCharArray() {\n+        char[] obj1 = new char[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        char[] obj2 = new char[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testByteArray() {\n+        byte[] obj1 = new byte[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        byte[] obj2 = new byte[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testDoubleArray() {\n+        double[] obj1 = new double[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        double[] obj2 = new double[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testFloatArray() {\n+        float[] obj1 = new float[2];\n+        obj1[0] = 5;\n+        obj1[1] = 6;\n+        float[] obj2 = new float[2];\n+        obj2[0] = 5;\n+        obj2[1] = 6;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testBooleanArray() {\n+        boolean[] obj1 = new boolean[2];\n+        obj1[0] = true;\n+        obj1[1] = false;\n+        boolean[] obj2 = new boolean[2];\n+        obj2[0] = true;\n+        obj2[1] = false;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1[1] = true;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+\n+        obj2 = null;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+        obj1 = null;\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testMultiLongArray() {\n+        long[][] array1 = new long[2][2];\n+        long[][] array2 = new long[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiIntArray() {\n+        int[][] array1 = new int[2][2];\n+        int[][] array2 = new int[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiShortArray() {\n+        short[][] array1 = new short[2][2];\n+        short[][] array2 = new short[2][2];\n+        for (short i = 0; i < array1.length; ++i) {\n+            for (short j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = i;\n+                array2[i][j] = i;\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiCharArray() {\n+        char[][] array1 = new char[2][2];\n+        char[][] array2 = new char[2][2];\n+        for (char i = 0; i < array1.length; ++i) {\n+            for (char j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = i;\n+                array2[i][j] = i;\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiByteArray() {\n+        byte[][] array1 = new byte[2][2];\n+        byte[][] array2 = new byte[2][2];\n+        for (byte i = 0; i < array1.length; ++i) {\n+            for (byte j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = i;\n+                array2[i][j] = i;\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+    public void testMultiFloatArray() {\n+        float[][] array1 = new float[2][2];\n+        float[][] array2 = new float[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiDoubleArray() {\n+        double[][] array1 = new double[2][2];\n+        double[][] array2 = new double[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMultiBooleanArray() {\n+        boolean[][] array1 = new boolean[2][2];\n+        boolean[][] array2 = new boolean[2][2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            for (int j = 0; j < array1[0].length; j++) {\n+                array1[i][j] = (i == 1) || (j == 1);\n+                array2[i][j] = (i == 1) || (j == 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = false;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testRaggedArray() {\n+        long array1[][] = new long[2][];\n+        long array2[][] = new long[2][];\n+        for (int i = 0; i < array1.length; ++i) {\n+            array1[i] = new long[2];\n+            array2[i] = new long[2];\n+            for (int j = 0; j < array1[i].length; ++j) {\n+                array1[i][j] = (i + 1) * (j + 1);\n+                array2[i][j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        array1[1][1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testMixedArray() {\n+        Object array1[] = new Object[2];\n+        Object array2[] = new Object[2];\n+        for (int i = 0; i < array1.length; ++i) {\n+            array1[i] = new long[2];\n+            array2[i] = new long[2];\n+            for (int j = 0; j < 2; ++j) {\n+                TestObject obj1 = new TestObject((i + 1) * (j + 1));\n+                TestObject obj2 = new TestObject((i + 1) * (j + 1));\n+                ((long[]) array1[i])[j] = (i + 1) * (j + 1);\n+                ((long[]) array2[i])[j] = (i + 1) * (j + 1);\n+            }\n+        }\n+        assertTrue(new EqualsBuilder().append(array1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(array1, array2).isEquals());\n+        ((long[]) array1[1])[1] = 0;\n+        assertTrue(!new EqualsBuilder().append(array1, array2).isEquals());\n+    }\n+\n+    public void testObjectArrayHiddenByObject() {\n+        TestObject[] array1 = new TestObject[2];\n+        array1[0] = new TestObject(4);\n+        array1[1] = new TestObject(5);\n+        TestObject[] array2 = new TestObject[2];\n+        array2[0] = new TestObject(4);\n+        array2[1] = new TestObject(5);\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1].setA(6);\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testLongArrayHiddenByObject() {\n+        long[] array1 = new long[2];\n+        array1[0] = 5L;\n+        array1[1] = 6L;\n+        long[] array2 = new long[2];\n+        array2[0] = 5L;\n+        array2[1] = 6L;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testIntArrayHiddenByObject() {\n+        int[] array1 = new int[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        int[] array2 = new int[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testShortArrayHiddenByObject() {\n+        short[] array1 = new short[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        short[] array2 = new short[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testCharArrayHiddenByObject() {\n+        char[] array1 = new char[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        char[] array2 = new char[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testByteArrayHiddenByObject() {\n+        byte[] array1 = new byte[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        byte[] array2 = new byte[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testDoubleArrayHiddenByObject() {\n+        double[] array1 = new double[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        double[] array2 = new double[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testFloatArrayHiddenByObject() {\n+        float[] array1 = new float[2];\n+        array1[0] = 5;\n+        array1[1] = 6;\n+        float[] array2 = new float[2];\n+        array2[0] = 5;\n+        array2[1] = 6;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = 7;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+    public void testBooleanArrayHiddenByObject() {\n+        boolean[] array1 = new boolean[2];\n+        array1[0] = true;\n+        array1[1] = false;\n+        boolean[] array2 = new boolean[2];\n+        array2[0] = true;\n+        array2[1] = false;\n+        Object obj1 = array1;\n+        Object obj2 = array2;\n+        assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array1).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals());\n+        assertTrue(new EqualsBuilder().append(obj1, array2).isEquals());\n+        array1[1] = true;\n+        assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals());\n+    }\n+\n+}", "timestamp": 1031868035, "metainfo": ""}