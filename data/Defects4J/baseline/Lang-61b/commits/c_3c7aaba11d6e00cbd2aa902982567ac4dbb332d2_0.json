{"sha": "3c7aaba11d6e00cbd2aa902982567ac4dbb332d2", "log": "IllegalStateException in text.VariableFormatter with \"empty\" keys.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/VariableFormatter.java\n+++ b/src/java/org/apache/commons/lang/text/VariableFormatter.java\n                     objResult = doReplace(objResult, priorVariables);\n                     result.append(objResult);\n                     objLen = objResult.toString().length();\n-\n-                    // pop the interpolated variable off the stack\n-                    // this maintains priorVariables correctness for\n-                    // properties with multiple interpolations, e.g.\n-                    // prop.name=${some.other.prop1}/blahblah/${some.other.prop2}\n-                    priorVariables.remove(priorVariables.size() - 1);\n                 } else {\n                     // variable not defined - so put it back in the value\n                     result.append(getVariablePrefix()).append(variable).append(getVariableSuffix());\n                 }\n+\n+                // pop the interpolated variable off the stack\n+                // this maintains priorVariables correctness for\n+                // properties with multiple interpolations, e.g.\n+                // prop.name=${some.other.prop1}/blahblah/${some.other.prop2}\n+                priorVariables.remove(priorVariables.size() - 1);\n             }\n \n             prec = end;\n--- a/src/test/org/apache/commons/lang/text/VariableFormatterTest.java\n+++ b/src/test/org/apache/commons/lang/text/VariableFormatterTest.java\n         assertEquals(\"Variable ${var} is unknown!\", this.getFormat().replace(\"Variable ${var} is unknown!\"));\n     }\n \n+    /**\n+     * Tests a replace template with missing empty marker strings.\n+     */\n+    public void testReplaceEmptyKeys() {\n+        testReplaceNoElement(REPLACE_TEMPLATE_EMPTY_KEYS);\n+    }\n+\n     void testReplaceNoElement(String badReplaceTemplate) {\n         assertEquals(badReplaceTemplate, this.getFormat().replaceObject(badReplaceTemplate));\n         Map map = this.getValueMap();\n     }\n \n     /**\n+     * Tests a replace template with missing marker strings.\n+     */\n+    public void testReplaceNoMarkers() {\n+        testReplaceNoElement(REPLACE_TEMPLATE_NO_MARKERS);\n+    }\n+\n+    /**\n      * Tests a replace template with missing prefix strings.\n      */\n     public void testReplaceNoPrefix() {\n         testReplaceNoElement(REPLACE_TEMPLATE_NO_PREFIX);\n-    }\n-\n-    /**\n-     * Tests a replace template with missing marker strings.\n-     */\n-    public void testReplaceNoMarkers() {\n-        testReplaceNoElement(REPLACE_TEMPLATE_NO_MARKERS);\n-    }\n-\n-    /**\n-     * Tests a replace template with missing empty marker strings.\n-     */\n-    public void testReplaceEmptyKeys() {\n-        try {\n-            testReplaceNoElement(REPLACE_TEMPLATE_EMPTY_KEYS);\n-            fail(\"Expected IllegalStateException.\");\n-        } catch (IllegalStateException e) {\n-            // expected for now.\n-        }\n     }\n \n     /**", "timestamp": 1122324728, "metainfo": ""}