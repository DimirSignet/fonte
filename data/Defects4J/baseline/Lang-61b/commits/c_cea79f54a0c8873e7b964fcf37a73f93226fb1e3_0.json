{"sha": "cea79f54a0c8873e7b964fcf37a73f93226fb1e3", "log": "https://issues.apache.org/jira/browse/LANG-279 HashCodeBuilder throws java.lang.StackOverflowError when an object contains a cycle.  ", "commit": "\n--- a/src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java\n  */\n package org.apache.commons.lang.builder;\n \n+import org.apache.commons.lang.builder.ToStringBuilderTest.ReflectionTestCycleA;\n+import org.apache.commons.lang.builder.ToStringBuilderTest.ReflectionTestCycleB;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n  */\n public class HashCodeBuilderTest extends TestCase {\n \n+    /**\n+     * A reflection test fixture.\n+     */\n+    static class ReflectionTestCycleA {\n+        ReflectionTestCycleB b;\n+\n+        public int hashCode() {\n+            return HashCodeBuilder.reflectionHashCode(this);\n+        }\n+    }\n+\n+    /**\n+     * A reflection test fixture.\n+     */\n+    static class ReflectionTestCycleB {\n+        ReflectionTestCycleA a;\n+\n+        public int hashCode() {\n+            return HashCodeBuilder.reflectionHashCode(this);\n+        }\n+    }\n+    \n     public HashCodeBuilderTest(String name) {\n         super(name);\n     }\n             this.three = three;\n         }\n     }\n+    \n+    /**\n+     * Test Objects pointing to each other.\n+     */\n+    public void testReflectionObjectCycle() {\n+        ReflectionTestCycleA a = new ReflectionTestCycleA();\n+        ReflectionTestCycleB b = new ReflectionTestCycleB();\n+        a.b = b;\n+        b.a = a;\n+        // Causes:\n+        // java.lang.StackOverflowError\n+        // at java.lang.ClassLoader.getCallerClassLoader(Native Method)\n+        // at java.lang.Class.getDeclaredFields(Class.java:992)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:373)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n+        // at\n+        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleB.hashCode(HashCodeBuilderTest.java:53)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionAppend(HashCodeBuilder.java:383)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:349)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.reflectionHashCode(HashCodeBuilder.java:155)\n+        // at\n+        // org.apache.commons.lang.builder.HashCodeBuilderTest$ReflectionTestCycleA.hashCode(HashCodeBuilderTest.java:42)\n+        // at org.apache.commons.lang.builder.HashCodeBuilder.append(HashCodeBuilder.java:422)\n+\n+        // a.hashCode();\n+        // b.hashCode();\n+    }\n+\n }", "timestamp": 1158697206, "metainfo": ""}