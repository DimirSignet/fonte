{"sha": "ed2a8da1bf10db5cb3c7701b60accd0165dc2e10", "log": "Document and fix fraction reduction  ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n     }\n \n     /**\n-     * <p>Creates a <code>Fraction</code> instance with the 2 parts\n+     * <p>Creates a reduced <code>Fraction</code> instance with the 2 parts\n      * of a fraction Y/Z.</p>\n+     *\n+     * <p>For example, if the input parameters represent 2/4, then the created\n+     * fraction will be 1/2.</p>\n      *\n      * <p>Any negative signs are resolved to be on the numerator.</p>\n      *\n \n     /**\n      * <p>Reduce the fraction to the smallest values for the numerator and\n-     * denominator, returning the result..</p>\n-     *\n-     * @return a new reduce fraction instance, or this if no simplification possible\n+     * denominator, returning the result.</p>\n+     * \n+     * <p>For example, if this fraction represents 2/4, then the result\n+     * will be 1/2.</p>\n+     *\n+     * @return a new reduced fraction instance, or this if no simplification possible\n      */\n     public Fraction reduce() {\n         int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);\n+        if (gcd == 1) {\n+            return this;\n+        }\n         return Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n \n--- a/src/test/org/apache/commons/lang/math/FractionTest.java\n+++ b/src/test/org/apache/commons/lang/math/FractionTest.java\n         Fraction f = null;\n         \n         f = Fraction.getFraction(50, 75);\n-        f = f.reduce();\n-        assertEquals(2, f.getNumerator());\n-        assertEquals(3, f.getDenominator());\n+        Fraction result = f.reduce();\n+        assertEquals(2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+\n+        f = Fraction.getFraction(-2, -3);\n+        result = f.reduce();\n+        assertEquals(2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+\n+        f = Fraction.getFraction(2, -3);\n+        result = f.reduce();\n+        assertEquals(-2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+\n+        f = Fraction.getFraction(-2, 3);\n+        result = f.reduce();\n+        assertEquals(-2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+        assertSame(f, result);\n \n         f = Fraction.getFraction(2, 3);\n-        f = f.reduce();\n-        assertEquals(2, f.getNumerator());\n-        assertEquals(3, f.getDenominator());\n+        result = f.reduce();\n+        assertEquals(2, result.getNumerator());\n+        assertEquals(3, result.getDenominator());\n+        assertSame(f, result);\n     }\n     \n     public void testInvert() {", "timestamp": 1126346112, "metainfo": ""}