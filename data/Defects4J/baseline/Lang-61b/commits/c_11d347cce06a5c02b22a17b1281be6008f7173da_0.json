{"sha": "11d347cce06a5c02b22a17b1281be6008f7173da", "log": "Ensure that RandomStringUtils returns all expected characters bug 20592, reported/patched by Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.12 2003/05/20 21:15:19 ggregory Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.13 2003/06/09 21:36:02 scolebourne Exp $\n  */\n public class RandomStringUtils {\n \n      * specified.</p>\n      *\n      * <p>Characters will be chosen from the set of characters whose\n-     * ASCII value is between <code>32</code> and <code>127</code>.</p>\n+     * ASCII value is between <code>32</code> and <code>126</code> (inclusive).</p>\n      *\n      * @param count length of random string to create\n      * @return the random string\n      *\n      * This method has exactly the same semantics as {@link\n      * #random(int,int,int,boolean,boolean,char[],Random)}, but\n-     * instead of depending on internal source of randomness ({@link\n-     * #RANDOM}) it uses externally supplied instance of {@link\n-     * Random} class.\n+     * instead of using an externally supplied source of randomness, it uses\n+     * the internal static {@link Random} instance ({@link #RANDOM}).\n      *\n      * @param count length of random string to create\n      * @param start position in set of chars to start at\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if( (start == 0) && (end == 0) ) {\n-            end = (int)'z';\n+            end = (int)'z' + 1;\n             start = (int)' ';\n             if(!letters && !numbers) {\n                 start = 0;\n--- a/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n \n import junit.framework.*;\n import junit.textui.TestRunner;\n+\n /**\n  * Unit tests {@link org.apache.commons.lang.RandomStringUtils}.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: RandomStringUtilsTest.java,v 1.6 2003/05/14 02:50:43 bayard Exp $\n+ * @author Phil Steitz\n+ * @version $Id: RandomStringUtilsTest.java,v 1.7 2003/06/09 21:36:03 scolebourne Exp $\n  */\n public class RandomStringUtilsTest extends junit.framework.TestCase {\n     /**\n             e = e2;\n         }\n         assertNotNull(\"random(<0) throws exception\", e);\n+    }\n+    \n+    /**\n+     * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric\n+     * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7\n+     */  \n+    public void testRandomAlphaNumeric() {\n+        char[] testChars = {'a', 'z', 'A', 'Z', '0', '9'};\n+        boolean[] found = {false, false, false, false, false, false};\n+        for (int i = 0; i < 100; i++) {\n+            String randString = RandomStringUtils.randomAlphanumeric(10);\n+            for (int j = 0; j < testChars.length; j++) {\n+                if (randString.indexOf(testChars[j]) > 0) {\n+                    found[j] = true;\n+                }\n+            }\n+        }\n+        for (int i = 0; i < testChars.length; i++) {\n+            if (!found[i]) {\n+                fail(\"alphanumeric character not generated in 1000 attempts: \" \n+                   + testChars[i] +\" -- repeated failures indicate a problem \");\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Make sure '0' and '9' are generated by randomNumeric\n+     * This test will fail randomly with probability = 2 * (9/10)**1000 ~ 3.5E-46\n+     */  \n+    public void testRandomNumeric() {\n+        char[] testChars = {'0','9'};\n+        boolean[] found = {false, false};\n+        for (int i = 0; i < 100; i++) {\n+            String randString = RandomStringUtils.randomNumeric(10);\n+            for (int j = 0; j < testChars.length; j++) {\n+                if (randString.indexOf(testChars[j]) > 0) {\n+                    found[j] = true;\n+                }\n+            }\n+        }\n+        for (int i = 0; i < testChars.length; i++) {\n+            if (!found[i]) {\n+                fail(\"digit not generated in 1000 attempts: \" \n+                   + testChars[i] +\" -- repeated failures indicate a problem \");\n+            }\n+        }  \n+    }\n+    \n+    /**\n+     * Make sure boundary alpha characters are generated by randomAlphabetic\n+     * This test will fail randomly with probability = 4 * (51/52)**1000 ~ 1.58E-8\n+     */  \n+    public void testRandomAlphabetic() {\n+        char[] testChars = {'a', 'z', 'A', 'Z'};\n+        boolean[] found = {false, false, false, false};\n+        for (int i = 0; i < 100; i++) {\n+            String randString = RandomStringUtils.randomAlphabetic(10);\n+            for (int j = 0; j < testChars.length; j++) {\n+                if (randString.indexOf(testChars[j]) > 0) {\n+                    found[j] = true;\n+                }\n+            }\n+        }\n+        for (int i = 0; i < testChars.length; i++) {\n+            if (!found[i]) {\n+                fail(\"alphanumeric character not generated in 1000 attempts: \" \n+                   + testChars[i] +\" -- repeated failures indicate a problem \");\n+            }\n+        }\n+    }\n+    \n+    /**\n+     * Make sure 32 and 127 are generated by randomNumeric\n+     * This test will fail randomly with probability = 2*(95/96)**1000 ~ 5.7E-5\n+     */  \n+    public void testRandomAscii() {\n+        char[] testChars = {(char) 32, (char) 126};\n+        boolean[] found = {false, false};\n+        for (int i = 0; i < 100; i++) {\n+            String randString = RandomStringUtils.randomAscii(10);\n+            for (int j = 0; j < testChars.length; j++) {\n+                if (randString.indexOf(testChars[j]) > 0) {\n+                    found[j] = true;\n+                }\n+            }\n+        }\n+        for (int i = 0; i < testChars.length; i++) {\n+            if (!found[i]) {\n+                fail(\"ascii character not generated in 1000 attempts: \" \n+                + (int) testChars[i] + \n+                 \" -- repeated failures indicate a problem\");\n+            }\n+        }  \n     }\n     \n     /** \n             chiSquare(expected,counts) < 13.82);  \n     }\n     \n-    //FIXME: add similar tests for other functions\n-    \n     /**\n      * Computes Chi-Square statistic given observed and expected counts\n      * @param observed array of observed frequency counts\n--- a/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n  * Test cases for the {@link RandomUtils} class.\n  *\n  * @author <a href=\"mailto:phil@steitz.com\">Phil Steitz</a>\n- * @version $Revision: 1.2 $ $Date: 2003/06/08 14:19:43 $\n+ * @version $Revision: 1.3 $ $Date: 2003/06/09 21:36:03 $\n  */\n \n public final class RandomUtilsTest extends TestCase {\n             assertTrue(result >= 0);\n             observed[result]++;\n         } \n-        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .01\n-         * Change to 16.27 for alpha = .001\n+        /* Use ChiSquare dist with df = 4-1 = 3, alpha = .001\n+         * Change to 11.34 for alpha = .01   \n          */\n         assertTrue(\n-            \"chi-square test -- will fail about 1 in 100 times\",\n-            chiSquare(expected,observed) < 11.34);                                                            \n+            \"chi-square test -- will fail about 1 in 1000 times\",\n+            chiSquare(expected,observed) < 16.27);                                                            \n     }  \n     \n     /** test distribution of nextLong() */\n                 observed[1]++;\n             }\n         }\n-        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .01\n-         * Change to 10.83 for alpha = .001 \n+        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n+         * Change to 6.64 for alpha = .01  \n          */ \n         assertTrue(\n-            \"chi-square test -- will fail about 1 in 100 times\",\n-            chiSquare(expected,observed) < 6.64); \n+            \"chi-square test -- will fail about 1 in 1000 times\",\n+            chiSquare(expected,observed) < 10.83); \n     }\n         \n     \n                 observed[1]++;\n             }\n         }\n-        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .01\n-         * Change to 10.83 for alpha = .001\n+        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n+         * Change to 6.64 for alpha = .01 \n          */\n         assertTrue(\n-            \"chi-square test -- will fail about 1 in 100 times\",\n-            chiSquare(expected,observed) < 6.64);  \n+            \"chi-square test -- will fail about 1 in 1000 times\",\n+            chiSquare(expected,observed) < 10.83 );  \n     }\n     \n     /** test distribution of nextFloat() */\n                 observed[1]++;\n             }\n         }\n-        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .01\n-         * Change to 10.83 for alpha = .001\n+        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n+         * Change to 6.64 for alpha = .01 \n          */\n         assertTrue(\n-            \"chi-square test -- will fail about 1 in 100 times\",\n-            chiSquare(expected,observed) < 6.64);  \n+            \"chi-square test -- will fail about 1 in 1000 times\",\n+            chiSquare(expected,observed) < 10.83);  \n     }\n     \n     /** test distribution of nextDouble() */\n                 observed[1]++;\n             }\n         }\n-        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .01\n-         * Change to 10.83 for alpha = .001\n+        /* Use ChiSquare dist with df = 2-1 = 1, alpha = .001\n+         * Change to 6.64 for alpha = .01 \n          */\n         assertTrue(\n-            \"chi-square test -- will fail about 1 in 100 times\",\n-            chiSquare(expected,observed) < 6.64);  \n+            \"chi-square test -- will fail about 1 in 1000 times\",\n+            chiSquare(expected,observed) < 10.83);  \n     }\n     \n     /** make sure that setSeed fails */", "timestamp": 1055194563, "metainfo": ""}