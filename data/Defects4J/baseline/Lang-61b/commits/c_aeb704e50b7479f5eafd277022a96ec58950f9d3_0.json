{"sha": "aeb704e50b7479f5eafd277022a96ec58950f9d3", "log": "http://issues.apache.org/bugzilla/show_bug.cgi?id=37574 [lang] [PATCH] new ExceptionUtils.setCause() method  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n import org.apache.commons.lang.ArrayUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.SystemUtils;\n+import org.apache.commons.lang.NullArgumentException;\n \n /**\n  * <p>Provides utilities for manipulating and examining \n- * <code>Throwable</code> objects.</p>\n+<code>Throwable</code> objects.</p>\n  *\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author Dmitri Plotnikov\n     };\n \n     /**\n-     * <p>The Method object for JDK1.4 getCause.</p>\n+     * <p>\n+     * The Method object for Java 1.4 getCause.\n+     * </p>\n      */\n     private static final Method THROWABLE_CAUSE_METHOD;\n+\n+    /**\n+     * <p>\n+     * The Method object for Java 1.4 initCause.\n+     * </p>\n+     */\n+    private static final Method THROWABLE_INITCAUSE_METHOD;\n+    \n     static {\n-        Method getCauseMethod;\n+        Method causeMethod;\n         try {\n-            getCauseMethod = Throwable.class.getMethod(\"getCause\", null);\n+            causeMethod = Throwable.class.getMethod(\"getCause\", null);\n         } catch (Exception e) {\n-            getCauseMethod = null;\n-        }\n-        THROWABLE_CAUSE_METHOD = getCauseMethod;\n+            causeMethod = null;\n+        }\n+        THROWABLE_CAUSE_METHOD = causeMethod;\n+        try {\n+            causeMethod = Throwable.class.getMethod(\"initCause\", new Class[]{Throwable.class});\n+        } catch (Exception e) {\n+            causeMethod = null;\n+        }\n+        THROWABLE_INITCAUSE_METHOD = causeMethod;\n     }\n     \n     /**\n-     * <p>Public constructor allows an instance of <code>ExceptionUtils</code>\n-     * to be created, although that is not normally necessary.</p>\n+     * <p>\n+     * Public constructor allows an instance of <code>ExceptionUtils</code> to be created, although that is not\n+     * normally necessary.\n+     * </p>\n      */\n     public ExceptionUtils() {\n         super();\n                 CAUSE_METHOD_NAMES = toArray(list);\n             }\n         }\n+    }\n+\n+    /**\n+     * <p>\n+     * Sets the cause of a <code>Throwable</code> using introspection, allowing source code compatibility between\n+     * pre-1.4 and post-1.4 Java releases.\n+     * </p>\n+     * \n+     * <p>\n+     * The typical use of this method is inside a constructor as in the following example:\n+     * </p>\n+     * \n+     * <p>\n+     * <pre>\n+     * import org.apache.commons.lang.exception.ExceptionUtils;\n+     *  \n+     * public class MyException extends Exception {\n+     *  \n+     *    public MyException(String msg) {\n+     *       super(msg);\n+     *    }\n+     *   \n+     *    public MyException(String msg, Throwable cause) {\n+     *       super(msg);\n+     *       ExceptionUtils.setCause(this, cause);\n+     *    }\n+     * \n+     * }           \n+     * </pre>\n+     * </p>\n+     * \n+     * @param target\n+     *            the target <code>Throwable</code>\n+     * @param cause\n+     *            the <code>Throwable</code> to set in the target\n+     * @return a <code>true</code> if the target has been modified\n+     * @since 2.2\n+     */\n+    public static boolean setCause(Throwable target, Throwable cause) {\n+        if (target == null) {\n+            throw new NullArgumentException(\"target\");\n+        }\n+        Object[] causeArgs = new Object[]{cause};\n+        boolean modifiedTarget = false;\n+        if (THROWABLE_INITCAUSE_METHOD != null) {\n+            try {\n+                THROWABLE_INITCAUSE_METHOD.invoke(target, causeArgs);\n+                modifiedTarget = true;\n+            } catch (IllegalAccessException ignored) {\n+                // Exception ignored.\n+            } catch (InvocationTargetException ignored) {\n+                // Exception ignored.\n+            }\n+        }\n+        try {\n+            Method setCauseMethod = target.getClass().getMethod(\"setCause\", new Class[]{Throwable.class});\n+            setCauseMethod.invoke(target, causeArgs);\n+            modifiedTarget = true;\n+        } catch (NoSuchMethodException ignored) {\n+            // Exception ignored.\n+        } catch (IllegalAccessException ignored) {\n+            // Exception ignored.\n+        } catch (InvocationTargetException ignored) {\n+            // Exception ignored.\n+        }\n+        return modifiedTarget;\n     }\n \n     /**\n     }\n \n     /**\n-     * <p>Returns an array where each element is a line from the argument.</p>\n-     * <p>The end of line is determined by the value of {@link SystemUtils#LINE_SEPARATOR}.</p>\n-     *  \n-     * <p>Functionality shared between the\n-     * <code>getStackFrames(Throwable)</code> methods of this and the\n-     * {@link org.apache.commons.lang.exception.NestableDelegate}\n-     * classes.</p>\n-     * @param stackTrace A stack trace String.\n+     * <p>\n+     * Returns an array where each element is a line from the argument.\n+     * </p>\n+     * <p>\n+     * The end of line is determined by the value of {@link SystemUtils#LINE_SEPARATOR}.\n+     * </p>\n+     * \n+     * <p>\n+     * Functionality shared between the <code>getStackFrames(Throwable)</code> methods of this and the\n+     * {@link org.apache.commons.lang.exception.NestableDelegate} classes.\n+     * </p>\n+     * \n+     * @param stackTrace\n+     *            A stack trace String.\n      * @return an array where each element is a line from the argument.\n      */\n     static String[] getStackFrames(String stackTrace) {\n--- a/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n package org.apache.commons.lang.exception;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import junit.framework.Assert;\n import junit.framework.Test;\n import junit.framework.TestSuite;\n+\n import org.apache.commons.lang.SystemUtils;\n \n /**\n         assertSame(null, ExceptionUtils.getRootCause(withoutCause));\n         assertSame(withoutCause, ExceptionUtils.getRootCause(nested));\n         assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\n+    }\n+\n+    public void testSetCause() {\n+        Exception cause = new ExceptionWithoutCause();\n+        assertEquals(true, ExceptionUtils.setCause(new ExceptionWithCause(null), cause));\n+        if (SystemUtils.isJavaVersionAtLeast(140)) {\n+            assertEquals(true, ExceptionUtils.setCause(new ExceptionWithoutCause(), cause));\n+        }\n+    }\n+\n+    /**\n+     * Tests overriding a cause to <code>null</code>.\n+     */\n+    public void testSetCauseToNull() {\n+        Exception ex = new ExceptionWithCause(new IOException());\n+        assertEquals(true, ExceptionUtils.setCause(ex, new IllegalStateException()));\n+        assertNotNull(ExceptionUtils.getCause(ex));\n+        assertEquals(true, ExceptionUtils.setCause(ex, null));\n+        assertNull(ExceptionUtils.getCause(ex));\n     }\n \n     //-----------------------------------------------------------------------\n         private Throwable cause;\n \n         public ExceptionWithCause(Throwable cause) {\n-            this.cause = cause;\n+            setCause(cause);\n         }\n \n         public Throwable getCause() {\n             return cause;\n+        }\n+\n+        public void setCause(Throwable cause) {\n+            this.cause = cause;\n         }\n     }\n ", "timestamp": 1136482543, "metainfo": ""}