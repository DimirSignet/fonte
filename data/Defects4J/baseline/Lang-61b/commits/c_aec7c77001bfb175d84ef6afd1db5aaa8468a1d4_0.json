{"sha": "aec7c77001bfb175d84ef6afd1db5aaa8468a1d4", "log": "Fix formatting to lang standards  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n         return cls.getName().indexOf(INNER_CLASS_SEPARATOR_CHAR) >= 0;\n     }\n \n-    /**\n-     * Returns the class represented by <code>className</code> using the <code>classLoader</code>.  This implementation\n-     * supports names like \"<code>java.lang.String[]</code>\" as well as \"<code>[Ljava.lang.String;</code>\".\n-     *\n-     * @param classLoader the class loader to use to load the class\n-     * @param className   the class name\n+    // Class loading\n+    // ----------------------------------------------------------------------\n+    /**\n+     * Returns the class represented by <code>className</code> using the\n+     * <code>classLoader</code>.  This implementation supports names like\n+     * \"<code>java.lang.String[]</code>\" as well as \"<code>[Ljava.lang.String;</code>\".\n+     *\n+     * @param classLoader  the class loader to use to load the class\n+     * @param className  the class name\n      * @param initialize  whether the class must be initialized\n      * @return the class represented by <code>className</code> using the <code>classLoader</code>\n      * @throws ClassNotFoundException if the class is not found\n      */\n-    public static Class getClass( ClassLoader classLoader, String className, boolean initialize )\n-            throws ClassNotFoundException {\n+    public static Class getClass(\n+            ClassLoader classLoader, String className, boolean initialize) throws ClassNotFoundException {\n         Class clazz;\n-        if( abbreviationMap.containsKey( className ) ) {\n-            clazz = Class.forName( \"[\" + abbreviationMap.get( className ), initialize, classLoader ).getComponentType();\n-        }\n-        else {\n-            clazz = Class.forName( toProperClassName( className ), initialize, classLoader );\n+        if (abbreviationMap.containsKey(className)) {\n+            String clsName = \"[\" + abbreviationMap.get(className);\n+            clazz = Class.forName(clsName, initialize, classLoader).getComponentType();\n+        } else {\n+            clazz = Class.forName(toProperClassName(className), initialize, classLoader);\n         }\n         return clazz;\n     }\n \n     /**\n-     * Returns the (initialized) class represented by <code>className</code> using the <code>classLoader</code>.  This\n-     * implementation supports names like \"<code>java.lang.String[]</code>\" as well as\n+     * Returns the (initialized) class represented by <code>className</code>\n+     * using the <code>classLoader</code>.  This implementation supports names\n+     * like \"<code>java.lang.String[]</code>\" as well as\n      * \"<code>[Ljava.lang.String;</code>\".\n      *\n-     * @param classLoader the class loader to use to load the class\n-     * @param className   the class name\n+     * @param classLoader  the class loader to use to load the class\n+     * @param className  the class name\n      * @return the class represented by <code>className</code> using the <code>classLoader</code>\n      * @throws ClassNotFoundException if the class is not found\n      */\n-    public static Class getClass( ClassLoader classLoader, String className ) throws ClassNotFoundException {\n-        return getClass( classLoader, className, true );\n-    }\n-\n-    /**\n-     * Returns the (initialized )class represented by <code>className</code> using the current thread's context class\n-     * loader.  This implementation supports names like \"<code>java.lang.String[]</code>\" as well as\n+    public static Class getClass(ClassLoader classLoader, String className) throws ClassNotFoundException {\n+        return getClass(classLoader, className, true);\n+    }\n+\n+    /**\n+     * Returns the (initialized )class represented by <code>className</code>\n+     * using the current thread's context class loader. This implementation\n+     * supports names like \"<code>java.lang.String[]</code>\" as well as\n      * \"<code>[Ljava.lang.String;</code>\".\n      *\n-     * @param className the class name\n+     * @param className  the class name\n      * @return the class represented by <code>className</code> using the current thread's context class loader\n      * @throws ClassNotFoundException if the class is not found\n      */\n-    public static Class getClass( String className ) throws ClassNotFoundException {\n-        return getClass( Thread.currentThread().getContextClassLoader() == null ? ClassUtils.class.getClassLoader() :\n-                         Thread.currentThread().getContextClassLoader(), className, true );\n-    }\n-\n-    /**\n-     * Returns the class represented by <code>className</code> using the current thread's context class loader. This\n-     * implementation supports names like \"<code>java.lang.String[]</code>\" as well as\n+    public static Class getClass(String className) throws ClassNotFoundException {\n+        return getClass(className, true);\n+    }\n+\n+    /**\n+     * Returns the class represented by <code>className</code> using the\n+     * current thread's context class loader. This implementation supports\n+     * names like \"<code>java.lang.String[]</code>\" as well as\n      * \"<code>[Ljava.lang.String;</code>\".\n      *\n      * @param className  the class name\n-     * @param initialize whether the class must be initialized\n+     * @param initialize  whether the class must be initialized\n      * @return the class represented by <code>className</code> using the current thread's context class loader\n      * @throws ClassNotFoundException if the class is not found\n      */\n-    public static Class getClass( String className, boolean initialize ) throws ClassNotFoundException {\n-        return getClass( Thread.currentThread().getContextClassLoader() == null ? ClassUtils.class.getClassLoader() :\n-                         Thread.currentThread().getContextClassLoader(), className, initialize );\n-    }\n-\n-    private static String toProperClassName( String className ) {\n-        className = StringUtils.deleteWhitespace( className );\n-        if( className == null ) {\n-            throw new NullArgumentException( \"className\" );\n-        }\n-        else if( className.endsWith( \"[]\" ) ) {\n-            final StringBuffer classNameBuffer = new StringBuffer();\n-            while( className.endsWith( \"[]\" ) ) {\n-                className = className.substring( 0, className.length() - 2 );\n-                classNameBuffer.append( \"[\" );\n-            }\n-            final String abbreviation = ( String ) abbreviationMap.get( className );\n-            if( abbreviation != null ) {\n-                classNameBuffer.append( abbreviation );\n-            }\n-            else {\n-                classNameBuffer.append( \"L\" ).append( className ).append( \";\" );\n+    public static Class getClass(String className, boolean initialize) throws ClassNotFoundException {\n+        ClassLoader contextCL = Thread.currentThread().getContextClassLoader();\n+        ClassLoader loader = contextCL == null ? ClassUtils.class.getClassLoader() : contextCL;\n+        return getClass(loader, className, initialize );\n+    }\n+\n+    /**\n+     * Converts a class name to a JLS stle class name.\n+     *\n+     * @param className  the class name\n+     * @return the converted name\n+     */\n+    private static String toProperClassName(String className) {\n+        className = StringUtils.deleteWhitespace(className);\n+        if (className == null) {\n+            throw new NullArgumentException(\"className\");\n+        } else if (className.endsWith(\"[]\")) {\n+            StringBuffer classNameBuffer = new StringBuffer();\n+            while (className.endsWith(\"[]\")) {\n+                className = className.substring(0, className.length() - 2);\n+                classNameBuffer.append(\"[\");\n+            }\n+            String abbreviation = (String) abbreviationMap.get(className);\n+            if (abbreviation != null) {\n+                classNameBuffer.append(abbreviation);\n+            } else {\n+                classNameBuffer.append(\"L\").append(className).append(\";\");\n             }\n             className = classNameBuffer.toString();\n-\n         }\n         return className;\n     }\n+\n }", "timestamp": 1136140230, "metainfo": ""}