{"sha": "e2604f377af515d7f644a3078c25710a064e64fc", "log": "deprecated method getLength(), replaced with getThrowableCount(); deprecated indexOfThrowable(int, Class), replaced with indexOfThrowable(Class, int) to make signature consistent with other APIs; changed functionality of methods that receive an index argument to throw an IndexOutOfBoundsException if the index is specified incorrectly, rather than absorbing invalid indices silently, to bring in line with the String API cleaned up javadoc; rearranged methods alphabetically   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/Nestable.java\n+++ b/src/java/org/apache/commons/lang/exception/Nestable.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: Nestable.java,v 1.1 2002/07/19 03:35:54 bayard Exp $\n+ * @version $Id: Nestable.java,v 1.2 2002/07/26 20:30:10 stevencaswell Exp $\n  */\n public interface Nestable\n {\n     /**\n      * Returns the number of nested <code>Throwable</code>s represented by\n      * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @deprecated replaced by {@link #getThrowableCount()}\n      */\n     public int getLength();\n     \n      * Returns the error message of this and any nested\n      * <code>Throwable</code>.\n      *\n-     * @return The error message.\n+     * @return the error message\n      */\n     public String getMessage();\n \n     /**\n      * Returns the error message of the <code>Throwable</code> in the chain\n      * of <code>Throwable</code>s at the specified index, numbererd from 0.\n-     * If <code>index</code> is negative, the effect is the same as if it\n-     * were 0. If <code>index</code> is greater than or equal to the length\n-     * of the chain, the message of the last <code>Throwable</code> in the\n-     * chain is returned.\n      *\n      * @param index the index of the <code>Throwable</code> in the chain of\n      * <code>Throwable</code>s\n-     * @return the error message\n+     * @return the error message, or null if the <code>Throwable</code> at the\n+     * specified index in the chain does not contain a message\n+     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n+     * negative or not less than the count of <code>Throwable</code>s in the\n+     * chain\n      */\n     public String getMessage(int index);\n \n     /**\n      * Returns the error message of this and any nested <code>Throwable</code>s\n      * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n+     * <code>Throwable</code> not containing a message is represented in the\n+     * array by a null. This has the effect of cause the length of the returned\n+     * array to be equal to the result of the {@link #getThrowableCount()}\n+     * operation.\n      *\n      * @return the error messages\n      */\n \n     /**\n      * Returns the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s at the specified index, numbererd from 0. If\n-     * <code>index</code> is negative, the effect is the same as if it\n-     * were 0. If <code>index</code> is greater than or equal to the length\n-     * of the chain, the last <code>Throwable</code> in the chain is returned.\n-     *\n-     * @param index the index of the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s\n+     * <code>Throwable</code>s at the specified index, numbererd from 0.\n+     *\n+     * @param index the index, numbered from 0, of the <code>Throwable</code> in\n+     * the chain of <code>Throwable</code>s\n      * @return the <code>Throwable</code>\n+     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n+     * negative or not less than the count of <code>Throwable</code>s in the\n+     * chain\n      */\n     public Throwable getThrowable(int index);\n \n     /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n+     * Returns the number of nested <code>Throwable</code>s represented by\n+     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     *\n+     * @return the throwable count\n+     */\n+    public int getThrowableCount();\n+    \n+    /**\n+     * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s\n+     * in an array of <code>Throwable</code>s, one element for each\n+     * <code>Throwable</code>.\n      *\n      * @return the <code>Throwable</code>s\n      */\n     /**\n      * Returns the index, numbered from 0, of the first occurrence of the\n      * specified type in the chain of <code>Throwable</code>s, or -1 if the\n-     * specified type is not found in the chain. If <code>pos</code> is\n-     * negative, the effect is the same as if it were 0. If <code>pos</code>\n-     * is greater than or equal to the length of the chain, the effect is the\n-     * same as if it were the index of the last element in the chain.\n+     * specified type is not found in the chain.\n      *\n      * @param type <code>Class</code> to be found\n      * @return index of the first occurrence of the type in the chain, or -1 if\n      */\n     public int indexOfThrowable(Class type);\n \n+    /**\n+     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n+     * that matches the specified type in the chain of <code>Throwable</code>s\n+     * with an index greater than or equal to the specified index, or -1 if\n+     * the type is not found.\n+     *\n+     * @param type <code>Class</code> to be found\n+     * @param fromIndex the index, numbered from 0, of the starting position in\n+     * the chain to be searched\n+     * @return index of the first occurrence of the type in the chain, or -1 if\n+     * the type is not found\n+     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n+     * is negative or not less than the count of <code>Throwable</code>s in the\n+     * chain\n+     */\n+    public int indexOfThrowable(Class type, int fromIndex);\n+    \n     /**\n      * Returns the index, numbered from 0, of the first <code>Throwable</code>\n      * that matches the specified type in the chain of <code>Throwable</code>s\n      * length of the chain, the effect is the same as if it were the index of\n      * the last element in the chain.\n      *\n-     * @param type <code>Class</code> to be found\n      * @param pos index, numbered from 0, of the starting position in the chain\n      * to be searched\n+     * @param type <code>Class</code> to be found\n      * \n      * @return index of the first occurrence of the type in the chain, or -1 if\n      * the type is not found\n+     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n      */\n     public int indexOfThrowable(int pos, Class type);\n     \n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableDelegate.java,v 1.1 2002/07/19 03:35:54 bayard Exp $\n+ * @version $Id: NestableDelegate.java,v 1.2 2002/07/26 20:30:10 stevencaswell Exp $\n  */\n public class NestableDelegate\n {\n     private Nestable cause = null;\n \n     /**\n-     * @param cause The Nestable implementation to get a stack trace for\n-     * (<i>must</i> extend {@link java.lang.Throwable}).\n+     * Constructs a new <code>NestableDelegate</code> instance to manage the\n+     * specified <code>Nestable</code>.\n+     *\n+     * @param cause the Nestable implementation (<i>must</i> extend\n+     * {@link java.lang.Throwable})\n      */\n     NestableDelegate(Nestable cause) // package\n     {\n     }\n \n     /**\n-     * Returns the number of <code>Throwable</code>s contained in the\n-     * <code>Nestable</code> contained by this delegate.\n-     */\n-    int getLength() // package\n-    {\n-        // Count the number of throwables\n-        int count = 1;\n-        String msg = null;\n-        if(this.cause.getCause() == null)\n-        {\n-            return count;\n-        }\n-        Throwable t = this.cause.getCause();\n-        while(t != null)\n-        {\n-            ++count;\n-            if(Nestable.class.isInstance(t))\n-            {\n-                t = ((Nestable) t).getCause();\n-            }\n-            else\n-            {\n-                t = null;\n-            }\n-        }\n-        return count;\n+     * Returns the error message of the <code>Throwable</code> in the chain\n+     * of <code>Throwable</code>s at the specified index, numbererd from 0.\n+     *\n+     * @param index the index of the <code>Throwable</code> in the chain of\n+     * <code>Throwable</code>s\n+     * @return the error message, or null if the <code>Throwable</code> at the\n+     * specified index in the chain does not contain a message\n+     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n+     * negative or not less than the count of <code>Throwable</code>s in the\n+     * chain\n+     */\n+    String getMessage(int index)\n+    {\n+        Throwable t = this.getThrowable(index);\n+        if(Nestable.class.isInstance(t))\n+        {\n+            return ((Nestable) t).getMessage(0);\n+        }\n+        else\n+        {\n+            return t.getMessage();\n+        }\n     }\n     \n     /**\n-     * @param baseMsg The base message to use when creating the full\n-     * message.  Should be generally be called via\n+     * Returns the full message contains by the <code>Nestable</code> and any\n+     * nested <code>Throwable</code>s.\n+     *\n+     * @param baseMsg the base message to use when creating the full\n+     * message. Should be generally be called via\n      * <code>nestableHelper.getMessage(super.getMessage())</code>,\n      * where <code>super</code> is an instance of {@link\n      * java.lang.Throwable}.\n      * @return The concatenated message for this and all nested\n-     * exceptions.\n+     * <code>Throwable</code>s\n      */\n     String getMessage(String baseMsg) // package\n     {\n         return (msg.length() > 0 ? msg.toString() : null);\n     }\n \n-    String getMessage(int index)\n-    {\n-        Throwable t = this.getThrowable(index);\n-        if(Nestable.class.isInstance(t))\n-        {\n-            return ((Nestable) t).getMessage(0);\n-        }\n-        else\n-        {\n-            return t.getMessage();\n-        }\n+    /**\n+     * Returns the error message of this and any nested <code>Throwable</code>s\n+     * in an array of Strings, one element for each message. Any\n+     * <code>Throwable</code> not containing a message is represented in the\n+     * array by a null. This has the effect of cause the length of the returned\n+     * array to be equal to the result of the {@link #getThrowableCount()}\n+     * operation.\n+     *\n+     * @return the error messages\n+     */\n+    String[] getMessages() // package\n+    {\n+        Throwable throwables[] = this.getThrowables();\n+        String[] msgs = new String[throwables.length];\n+        for(int i = 0; i < throwables.length; i++)\n+        {\n+            msgs[i] = (Nestable.class.isInstance(throwables[i]) ? ((Nestable) throwables[i]).getMessage(0) : throwables[i].getMessage());\n+        }\n+        return msgs;\n+    }\n+\n+    /**\n+     * Returns the <code>Throwable</code> in the chain of\n+     * <code>Throwable</code>s at the specified index, numbererd from 0.\n+     *\n+     * @param index the index, numbered from 0, of the <code>Throwable</code> in\n+     * the chain of <code>Throwable</code>s\n+     * @return the <code>Throwable</code>\n+     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n+     * negative or not less than the count of <code>Throwable</code>s in the\n+     * chain\n+     */\n+    Throwable getThrowable(int index)\n+    {\n+        if(index == 0)\n+        {\n+            return (Throwable) this.cause;\n+        }\n+        Throwable[] throwables = this.getThrowables();\n+        return throwables[index];\n     }\n     \n-    Throwable getThrowable(int index)\n-    {\n-        Throwable[] throwables = this.getThrowables();\n-        if(index < 0)\n-        {\n-            index = 0;\n-        }\n-        if(index == 0)\n-        {\n-            return (Throwable) this.cause;\n-        }\n-        if(index >= throwables.length)\n-        {\n-            index = throwables.length - 1;\n-        }\n-        return throwables[index];\n+    /**\n+     * Returns the number of <code>Throwable</code>s contained in the\n+     * <code>Nestable</code> contained by this delegate.\n+     *\n+     * @return the throwable count\n+     */\n+    int getThrowableCount() // package\n+    {\n+        // Count the number of throwables\n+        int count = 1;\n+        String msg = null;\n+        if(this.cause.getCause() == null)\n+        {\n+            return count;\n+        }\n+        Throwable t = this.cause.getCause();\n+        while(t != null)\n+        {\n+            ++count;\n+            if(Nestable.class.isInstance(t))\n+            {\n+                t = ((Nestable) t).getCause();\n+            }\n+            else\n+            {\n+                t = null;\n+            }\n+        }\n+        return count;\n     }\n     \n+    /**\n+     * Returns this delegate's <code>Nestable</code> and any nested\n+     * <code>Throwable</code>s in an array of <code>Throwable</code>s, one\n+     * element for each <code>Throwable</code>.\n+     *\n+     * @return the <code>Throwable</code>s\n+     */\n     Throwable[] getThrowables() // package\n     {\n-        int count = this.getLength();\n+        int count = this.getThrowableCount();\n         // Allocate an array to hold the messages\n         Throwable[] throwables = new Throwable[count];\n         count = 0;\n         return throwables;\n     }\n \n-    String[] getMessages() // package\n-    {\n+    /**\n+     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n+     * that matches the specified type in the chain of <code>Throwable</code>s\n+     * held in this delegate's <code>Nestable</code> with an index greater than\n+     * or equal to the specified index, or -1 if the type is not found.\n+     *\n+     * @param type <code>Class</code> to be found\n+     * @param fromIndex the index, numbered from 0, of the starting position in\n+     * the chain to be searched\n+     * @return index of the first occurrence of the type in the chain, or -1 if\n+     * the type is not found\n+     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n+     * is negative or not less than the count of <code>Throwable</code>s in the\n+     * chain\n+     */\n+    int indexOfThrowable(Class type, int fromIndex) // package\n+    {\n+        if(fromIndex < 0)\n+        {\n+            throw new IndexOutOfBoundsException(\"Throwable index out of range: \" + fromIndex);\n+        }\n         Throwable throwables[] = this.getThrowables();\n-        String[] msgs = new String[throwables.length];\n-        for(int i = 0; i < throwables.length; i++)\n-        {\n-            msgs[i] = (Nestable.class.isInstance(throwables[i]) ? ((Nestable) throwables[i]).getMessage(0) : throwables[i].getMessage());\n-        }\n-        return msgs;\n-    }\n-\n-    int indexOfThrowable(int pos, Class type) // package\n-    {\n-        pos = (pos < 0) ? 0 : pos;\n-        Throwable throwables[] = this.getThrowables();\n-        pos = (pos >= throwables.length) ? throwables.length - 1 : pos;\n-        for(int i = pos; i < throwables.length; i++)\n+        if(fromIndex >= throwables.length)\n+        {\n+            throw new IndexOutOfBoundsException(\"Throwable index out of range: \" + fromIndex);\n+        }\n+        for(int i = fromIndex; i < throwables.length; i++)\n         {\n             if(throwables[i].getClass().equals(type))\n             {\n--- a/src/java/org/apache/commons/lang/exception/NestableException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableException.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableException.java,v 1.1 2002/07/19 03:35:54 bayard Exp $\n+ * @version $Id: NestableException.java,v 1.2 2002/07/26 20:30:10 stevencaswell Exp $\n  */\n public class NestableException extends Exception implements Nestable\n {\n      * Constructs a new <code>NestableException</code> with specified\n      * nested <code>Throwable</code>.\n      *\n-     * @param nested The exception or error that caused this exception\n-     *               to be thrown.\n+     * @param cause the exception or error that caused this exception to be\n+     * thrown\n      */\n     public NestableException(Throwable cause)\n     {\n      * Constructs a new <code>NestableException</code> with specified\n      * detail message and nested <code>Throwable</code>.\n      *\n-     * @param msg    The error message.\n-     * @param nested The exception or error that caused this exception\n-     *               to be thrown.\n+     * @param msg    the error message\n+     * @param cause  the exception or error that caused this exception to be\n+     * thrown\n      */\n     public NestableException(String msg, Throwable cause)\n     {\n         this.cause = cause;\n     }\n \n-    /**\n-     * @see org.apache.commons.lang.exception.Nestable#getCause()\n-     */\n     public Throwable getCause()\n     {\n         return cause;\n     }\n \n     /**\n-     * Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @deprecated replaced by {@link #getThrowableCount()}\n      */\n     public int getLength()\n     {\n-        return delegate.getLength();\n-    }\n-    \n-    /**\n-     * @see org.apache.commons.lang.exception.Nestable#getMessage()\n-     */\n+        return delegate.getThrowableCount();\n+    }\n+    \n     public String getMessage()\n     {\n         StringBuffer msg = new StringBuffer();\n         return (msg.length() > 0 ? msg.toString() : null);\n     }\n \n-    /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n-     */\n+    public String getMessage(int index)\n+    {\n+        if(index == 0)\n+        {\n+            return super.getMessage();\n+        }\n+        else\n+        {\n+            return delegate.getMessage(index);\n+        }\n+    }\n+    \n     public String[] getMessages()\n     {\n         return delegate.getMessages();\n         return delegate.getThrowable(index);\n     }\n     \n+    public int getThrowableCount()\n+    {\n+        return delegate.getThrowableCount();\n+    }\n+    \n     public Throwable[] getThrowables()\n     {\n         return delegate.getThrowables();\n     }\n     \n-    public String getMessage(int index)\n-    {\n-        if(index == 0)\n-        {\n-            return super.getMessage();\n-        }\n-        else\n-        {\n-            return delegate.getMessage(index);\n-        }\n-    }\n-    \n-    /**\n-     * Returns the index, numbered from 0, of the first occurrence of the\n-     * specified type in the chain of <code>Throwable</code>s, or -1 if the\n-     * specified type is not found in the chain. If <code>pos</code> is\n-     * negative, the effect is the same as if it were 0. If <code>pos</code>\n-     * is greater than or equal to the length of the chain, the effect is the\n-     * same as if it were the index of the last element in the chain.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n-     */\n     public int indexOfThrowable(Class type)\n     {\n-        return delegate.indexOfThrowable(0, type);\n-    }\n-\n-    /**\n-     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     * \n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n+        return delegate.indexOfThrowable(type, 0);\n+    }\n+\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return delegate.indexOfThrowable(type, fromIndex);\n+    }\n+\n+    /**\n+     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n      */\n     public int indexOfThrowable(int pos, Class type)\n     {\n-        return delegate.indexOfThrowable(pos, type);\n-    }\n-    \n-    /**\n-     * Prints the stack trace of this exception the the standar error\n-     * stream.\n-     */\n+        if(pos < 0)\n+        {\n+            pos = 0;\n+        }\n+        else if(pos >= this.getThrowableCount())\n+        {\n+            pos = this.getThrowableCount() - 1;\n+        }\n+        return delegate.indexOfThrowable(type, pos);\n+    }\n+    \n     public void printStackTrace()\n     {\n         delegate.printStackTrace();\n     }\n \n-    /**\n-     * Prints the stack trace of this exception to the specified print stream.\n-     *\n-     * @param out <code>PrintStream</code> to use for output.\n-     */\n     public void printStackTrace(PrintStream out)\n     {\n         delegate.printStackTrace(out);\n     }\n \n-    /**\n-     * @see org.apache.commons.lang.exception.Nestable#printStackTrace(PrintWriter out)\n-     */\n     public void printStackTrace(PrintWriter out)\n     {\n         delegate.printStackTrace(out);\n     }\n \n-    /**\n-     * @see org.apache.commons.lang.exception.Nestable#printPartialStackTrace(PrintWriter out)\n-     */\n     public final void printPartialStackTrace(PrintWriter out)\n     {\n         super.printStackTrace(out);\n--- a/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n  * @author <a href=\"mailto:dlr@collab.net\">Daniel Rall</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: NestableRuntimeException.java,v 1.1 2002/07/19 03:35:54 bayard Exp $\n+ * @version $Id: NestableRuntimeException.java,v 1.2 2002/07/26 20:30:10 stevencaswell Exp $\n  */\n public class NestableRuntimeException extends RuntimeException\n     implements Nestable\n      * Constructs a new <code>NestableRuntimeException</code> with specified\n      * detail message.\n      *\n-     * @param msg The error message.\n+     * @param msg the error message\n      */\n     public NestableRuntimeException(String msg)\n     {\n      * Constructs a new <code>NestableRuntimeException</code> with specified\n      * nested <code>Throwable</code>.\n      *\n-     * @param nested The exception or error that caused this exception\n-     *               to be thrown.\n+     * @param cause the exception or error that caused this exception to be\n+     * thrown\n      */\n     public NestableRuntimeException(Throwable cause)\n     {\n      * Constructs a new <code>NestableRuntimeException</code> with specified\n      * detail message and nested <code>Throwable</code>.\n      *\n-     * @param msg    The error message.\n-     * @param nested The exception or error that caused this exception\n-     *               to be thrown.\n+     * @param msg    the error message\n+     * @param cause  the exception or error that caused this exception to be\n+     * thrown\n      */\n     public NestableRuntimeException(String msg, Throwable cause)\n     {\n         this.cause = cause;\n     }\n \n-    /**\n-     * @see org.apache.commons.lang.exception.Nestable#getCause()\n-     */\n     public Throwable getCause()\n     {\n         return cause;\n     }\n \n     /**\n-     * Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @deprecated replaced by {@link #getThrowableCount()}\n      */\n     public int getLength()\n     {\n-        return delegate.getLength();\n-    }\n-    \n-    /**\n-     * @see org.apache.commons.lang.exception.Nestable#getMessage()\n-     */\n+        return delegate.getThrowableCount();\n+    }\n+    \n     public String getMessage()\n     {\n         StringBuffer msg = new StringBuffer();\n         return (msg.length() > 0 ? msg.toString() : null);\n     }\n \n-    /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n-     */\n+    public String getMessage(int index)\n+    {\n+        if(index == 0)\n+        {\n+            return super.getMessage();\n+        }\n+        else\n+        {\n+            return delegate.getMessage(index);\n+        }\n+    }\n+    \n     public String[] getMessages()\n     {\n         return delegate.getMessages();\n         return delegate.getThrowable(index);\n     }\n     \n+    public int getThrowableCount()\n+    {\n+        return delegate.getThrowableCount();\n+    }\n+    \n     public Throwable[] getThrowables()\n     {\n         return delegate.getThrowables();\n     }\n     \n-    public String getMessage(int index)\n-    {\n-        if(index == 0)\n-        {\n-            return super.getMessage();\n-        }\n-        else\n-        {\n-            return delegate.getMessage(index);\n-        }\n-    }\n-    \n-    /**\n-     * Returns the index, numbered from 0, of the first occurrence of the\n-     * specified type in the chain of <code>Throwable</code>s, or -1 if the\n-     * specified type is not found in the chain. If <code>pos</code> is\n-     * negative, the effect is the same as if it were 0. If <code>pos</code>\n-     * is greater than or equal to the length of the chain, the effect is the\n-     * same as if it were the index of the last element in the chain.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n-     */\n     public int indexOfThrowable(Class type)\n     {\n-        return delegate.indexOfThrowable(0, type);\n-    }\n-\n-    /**\n-     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     * \n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n+        return delegate.indexOfThrowable(type, 0);\n+    }\n+\n+    public int indexOfThrowable(Class type, int fromIndex)\n+    {\n+        return delegate.indexOfThrowable(type, fromIndex);\n+    }\n+    \n+    /**\n+     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n      */\n     public int indexOfThrowable(int pos, Class type)\n     {\n-        return delegate.indexOfThrowable(pos, type);\n-    }\n-    \n-    /**\n-     * Prints the stack trace of this exception the the standar error\n-     * stream.\n-     */\n+        if(pos < 0)\n+        {\n+            pos = 0;\n+        }\n+        else if(pos >= this.getThrowableCount())\n+        {\n+            pos = this.getThrowableCount() - 1;\n+        }\n+        return delegate.indexOfThrowable(type, pos);\n+    }\n+    \n     public void printStackTrace()\n     {\n         delegate.printStackTrace();\n     }\n \n-    /**\n-     * Prints the stack trace of this exception to the specified print stream.\n-     *\n-     * @param out <code>PrintStream</code> to use for output.\n-     */\n     public void printStackTrace(PrintStream out)\n     {\n         delegate.printStackTrace(out);\n     }\n \n-    /**\n-     * @see org.apache.commons.lang.exception.Nestable#printStackTrace(PrintWriter out)\n-     */\n     public void printStackTrace(PrintWriter out)\n     {\n         delegate.printStackTrace(out);\n     }\n \n-    /**\n-     * @see org.apache.commons.lang.exception.Nestable#printPartialStackTrace(PrintWriter out)\n-     */\n     public final void printPartialStackTrace(PrintWriter out)\n     {\n         super.printStackTrace(out);", "timestamp": 1027715410, "metainfo": ""}