{"sha": "c51a86074928d8c5811b6a1155abcb3f71782840", "log": "Bugzilla Bug 30855 [lang] Additional constructor for EqualsBuilder and isEquals member access. Addressing: \"Finally, can they change the member \"isEquals\" from private to protected?  At present, I cannot subclass EqualsBuilder and use this member.\"  I've added:  protected void setEquals(boolean isEquals)  which in conjunction with:  public boolean isEquals()  allows one to access the isEquals.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java\n  * @author Pete Gieser\n  * @author Arun Mammen Thomas\n  * @since 1.0\n- * @version $Id: EqualsBuilder.java,v 1.25 2004/08/25 21:20:13 ggregory Exp $\n+ * @version $Id: EqualsBuilder.java,v 1.26 2004/08/26 05:46:45 ggregory Exp $\n  */\n public class EqualsBuilder {\n+    \n     /**\n      * If the fields tested are equals.\n-     */\n-    private boolean isEquals;\n+     * The default value is <code>true</code>.\n+     */\n+    private boolean isEquals = true;\n \n     /**\n      * <p>Constructor for EqualsBuilder.</p>\n      * @see Object#equals(Object)\n      */\n     public EqualsBuilder() {\n-        super();\n-        isEquals = true;\n+        // do nothing for now.\n     }\n \n     //-------------------------------------------------------------------------\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n+            this.setEquals(false);\n             return this;\n         }\n         Class lhsClass = lhs.getClass();\n             isEquals = lhs.equals(rhs);\n         } else if (lhs.getClass() != rhs.getClass()) {\n             // Here when we compare different dimensions, for example: a boolean[][] to a boolean[] \n-            isEquals = false;\n+            this.setEquals(false);\n         }\n         // 'Switch' on type of array, to dispatch to the correct handler\n         // This handles multi dimensional arrays of the same depth\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n-            return this;\n-        }\n-        if (lhs.length != rhs.length) {\n-            isEquals = false;\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n             return this;\n         }\n         for (int i = 0; i < lhs.length && isEquals; ++i) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n-            return this;\n-        }\n-        if (lhs.length != rhs.length) {\n-            isEquals = false;\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n             return this;\n         }\n         for (int i = 0; i < lhs.length && isEquals; ++i) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n-            return this;\n-        }\n-        if (lhs.length != rhs.length) {\n-            isEquals = false;\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n             return this;\n         }\n         for (int i = 0; i < lhs.length && isEquals; ++i) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n-            return this;\n-        }\n-        if (lhs.length != rhs.length) {\n-            isEquals = false;\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n             return this;\n         }\n         for (int i = 0; i < lhs.length && isEquals; ++i) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n-            return this;\n-        }\n-        if (lhs.length != rhs.length) {\n-            isEquals = false;\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n             return this;\n         }\n         for (int i = 0; i < lhs.length && isEquals; ++i) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n-            return this;\n-        }\n-        if (lhs.length != rhs.length) {\n-            isEquals = false;\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n             return this;\n         }\n         for (int i = 0; i < lhs.length && isEquals; ++i) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n-            return this;\n-        }\n-        if (lhs.length != rhs.length) {\n-            isEquals = false;\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n             return this;\n         }\n         for (int i = 0; i < lhs.length && isEquals; ++i) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n-            return this;\n-        }\n-        if (lhs.length != rhs.length) {\n-            isEquals = false;\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n             return this;\n         }\n         for (int i = 0; i < lhs.length && isEquals; ++i) {\n             return this;\n         }\n         if (lhs == null || rhs == null) {\n-            isEquals = false;\n-            return this;\n-        }\n-        if (lhs.length != rhs.length) {\n-            isEquals = false;\n-            return this;\n-        }\n-        for (int i = 0; i < lhs.length && isEquals; ++i) {\n-            append(lhs[i], rhs[i]);\n-        }\n-        return this;\n-    }\n-\n-    /**\n-     * <p>Return <code>true</code> if the fields that have been checked\n+            this.setEquals(false);\n+            return this;\n+        }\n+        if (lhs.length != rhs.length) {\n+            this.setEquals(false);\n+            return this;\n+        }\n+        for (int i = 0; i < lhs.length && isEquals; ++i) {\n+            append(lhs[i], rhs[i]);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Returns <code>true</code> if the fields that have been checked\n      * are all equal.</p>\n      *\n      * @return boolean\n      */\n     public boolean isEquals() {\n-        return isEquals;\n-    }\n-\n+        return this.isEquals;\n+    }\n+\n+    /**\n+     * Sets the <code>isEquals</code> value.\n+     * \n+     * @param isEquals The value to set.\n+     */\n+    protected void setEquals(boolean isEquals) {\n+        this.isEquals = isEquals;\n+    }\n }\n--- a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Maarten Coene\n- * @version $Id: EqualsBuilderTest.java,v 1.10 2004/08/25 21:20:15 ggregory Exp $\n+ * @version $Id: EqualsBuilderTest.java,v 1.11 2004/08/26 05:46:45 ggregory Exp $\n  */\n public class EqualsBuilderTest extends TestCase {\n \n         assertTrue(new EqualsBuilder().append(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY).isEquals());\n     }\n \n+    public void testAccessors() {\n+        EqualsBuilder equalsBuilder = new EqualsBuilder();\n+        assertTrue(equalsBuilder.isEquals());\n+        equalsBuilder.setEquals(true);\n+        assertTrue(equalsBuilder.isEquals());\n+        equalsBuilder.setEquals(false);\n+        assertFalse(equalsBuilder.isEquals());\n+    }\n+    \n     public void testBoolean() {\n         boolean o1 = true;\n         boolean o2 = false;", "timestamp": 1093499205, "metainfo": ""}