{"sha": "87ddbd3e3578cc305d399ba1e09f936b3c8b064c", "log": "Adding initial crack at mutables.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/Mutable.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+/**\n+ * A mutable object.\n+ *\n+ * @author Matthew Hawthorne\n+ * @since 2.1\n+ * @version $Id: Mutable.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ */\n+public interface Mutable {\n+\n+    /**\n+     * Sets the value of this object.\n+     *\n+     * @param value the value of this object.\n+     */\n+    public void setValue(Object value);\n+\n+    /**\n+     * Gets the value of this object.\n+     *\n+     * @return a value.\n+     */\n+    public Object getValue();\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+/**\n+ * A mutable <code>Byte</code>.\n+ * \n+ * @since 2.1\n+ * @version $Id: MutableByte.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ */\n+public class MutableByte extends MutableNumber {\n+\n+    /**\n+     * Internal value.\n+     */\n+    private byte value;\n+    \n+    /**\n+     * Instantiates with the specified value\n+     * @param value a value.\n+     */\n+    public MutableByte(byte value) {\n+        super();\n+        this.value = value;\n+    }\n+\n+    public void setValue(byte value) {\n+        this.value = value;\n+    }\n+\n+    public long longValue() {\n+        return this.value;\n+    }\n+\n+    public double doubleValue() {\n+        return this.value;\n+    }\n+\n+    public int intValue() {\n+        return this.value;\n+    }\n+\n+    /**\n+     * @return a <code>Byte</code>\n+     */\n+    public Object getValue() {\n+        return new Byte(this.value);\n+    }\n+\n+    /**\n+     * @param value a <code>Byte</code>\n+     */\n+    public void setValue(Object value) {\n+        setValue(((Number)value).byteValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+/**\n+ * A mutable <code>Double</code>\n+ * \n+ * @since 2.1\n+ * @version $Id: MutableDouble.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ */\n+public class MutableDouble extends MutableNumber {\n+\n+    /**\n+     * Internal value.\n+     */\n+    private double value;\n+\n+    /**\n+     * Instantiates with the specified value\n+     * @param value a value.\n+     */\n+    public MutableDouble(double value) {\n+        super();\n+        this.value = value;\n+    }\n+\n+    public void setValue(double value) {\n+        this.value = value;\n+    }\n+\n+    public double doubleValue() {\n+        return this.value;\n+    }\n+\n+    public long longValue() {\n+        return (long)this.value;\n+    }\n+\n+    public int intValue() {\n+        return (int)this.value;\n+    }\n+\n+    public Object getValue() {\n+        return new Double(this.value);\n+    }\n+\n+    public void setValue(Object value) {\n+        setValue(((Number)value).doubleValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+/**\n+ * A mutable <code>Float</code>\n+ * \n+ * @since 2.1\n+ * @version $Id: MutableFloat.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ */\n+public class MutableFloat extends MutableNumber {\n+\n+    /**\n+     * Internal value.\n+     */\n+    private float value;\n+\n+    /**\n+     * Instantiates with the specified value\n+     * \n+     * @param value a value.\n+     */\n+    public MutableFloat(float value) {\n+        super();\n+        this.value = value;\n+    }\n+\n+    public void setValue(float value) {\n+        this.value = value;\n+    }\n+\n+    public double doubleValue() {\n+        return this.value;\n+    }\n+\n+    public int intValue() {\n+        return (int)this.value;\n+    }\n+\n+    public long longValue() {\n+        return (long)this.value;\n+    }\n+\n+    public Object getValue() {\n+        return new Float(this.value);\n+    }\n+\n+    public void setValue(Object value) {\n+        setValue(((Number)value).floatValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInteger.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+/**\n+ * A mutable <code>Integer</code>.\n+ * \n+ * @since 2.1\n+ * @version $Id: MutableInteger.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ */\n+public class MutableInteger extends MutableNumber {\n+\n+    /**\n+     * Internal value.\n+     */\n+    private int value;\n+\n+    /**\n+     * Instantiates with the specified value\n+     * \n+     * @param value a value.\n+     */\n+    public MutableInteger(int value) {\n+        super();\n+        this.value = value;\n+    }\n+\n+    public void setValue(int value) {\n+        this.value = value;\n+    }\n+\n+    public double doubleValue() {\n+        return this.value;\n+    }\n+\n+    public long longValue() {\n+        return this.value;\n+    }\n+\n+    public int intValue() {\n+        return this.value;\n+    }\n+\n+    public Object getValue() {\n+        return new Float(this.value);\n+    }\n+\n+    public void setValue(Object value) {\n+        setValue(((Number)value).intValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+/**\n+ * A mutable <code>Long</code>\n+ * \n+ * @since 2.1\n+ * @version $Id: MutableLong.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ */\n+public class MutableLong extends MutableNumber {\n+\n+    /**\n+     * Internal value.\n+     */\n+    private long value;\n+\n+    /**\n+     * Instantiates with the specified value\n+     * @param value a value.\n+     */\n+    public MutableLong(long value) {\n+        super();\n+        setValue(value);\n+    }\n+\n+    public void setValue(long value) {\n+        this.value = value;\n+    }\n+\n+    public double doubleValue() {\n+        return this.value;\n+    }\n+\n+    public long longValue() {\n+        return this.value;\n+    }\n+\n+    public int intValue() {\n+        return (int)this.value;\n+    }\n+\n+    public Object getValue() {\n+        return new Long(this.value);\n+    }\n+\n+    public void setValue(Object value) {\n+        setValue(((Number)value).longValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableNumber.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang.mutable;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A mutable <code>Number</code>.\n+ *\n+ * @since 2.1\n+ * @version $Id: MutableNumber.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ */\n+public abstract class MutableNumber\n+    extends Number\n+    implements Comparable, Mutable, Serializable {\n+\n+    MutableNumber() {\n+        super();\n+    }\n+\n+    // ----------------------------------------------------------------\n+    // Number overrides\n+    // ----------------------------------------------------------------\n+\n+    public float floatValue() {\n+        return (float)doubleValue();\n+    }\n+    \n+    // ----------------------------------------------------------------\n+    // Object overrides\n+    // ----------------------------------------------------------------\n+\n+    public String toString() {\n+        return String.valueOf(doubleValue()).intern();\n+    }\n+\n+    public int hashCode() {\n+        return super.hashCode();\n+    }\n+\n+    /**\n+     * Compares <code>this</code> to another object.\n+     * \n+     * @param obj an object to compare to\n+     * @return <code>true</code> if <code>this</code> is equal to \n+     * <code>obj</code>.\n+     * @see #compareTo(Object)\n+     */\n+    public boolean equals(Object obj) {\n+        return super.equals(obj);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    //  Comparable overrides\n+    // ----------------------------------------------------------------\n+\n+    /**\n+     * Compares to another object\n+     * \n+     * @param o an object to compare to\n+     * @return -1 if <code>this < o</code>, 0 if <code>this.equals(o)</code>, \n+     *  1 if <code>this > o<code>\n+     * @throws ClassCastException if <code>o</code> is not a \n+     * <code>Number</code>.\n+     */\n+    public int compareTo(Object o) {\n+        final double d = ((Number)o).doubleValue();\n+        return (doubleValue() < d) ? -1 : (doubleValue() > d) ? 1 : 0;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+/**\n+ * A mutable <code>Short</code>\n+ * \n+ * @since 2.1\n+ * @version $Id: MutableShort.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ */\n+public class MutableShort extends MutableNumber {\n+\n+    /**\n+     * Internal value.\n+     */\n+    private short value;\n+\n+    /**\n+     * Instantiates with the specified value\n+     * @param value a value.\n+     */\n+    public MutableShort(short value) {\n+        super();\n+        this.value = value;\n+    }\n+\n+    public void setValue(short value) {\n+        this.value = value;\n+    }\n+\n+    public double doubleValue() {\n+        return this.value;\n+    }\n+\n+    public int intValue() {\n+        return this.value;\n+    }\n+\n+    public long longValue() {\n+        return this.value;\n+    }\n+\n+    public Object getValue() {\n+        return new Short(this.value);\n+    }\n+\n+    public void setValue(Object value) {\n+        setValue(((Number)value).shortValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableByteTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @see MutableByte\n+ */\n+public class MutableByteTest extends MutableNumberTest {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(MutableByteTest.class);\n+    }\n+\n+    public MutableByteTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public MutableNumber getMutableNumber(double value) {\n+        return new MutableByte((byte)value);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    //  Converters\n+    // ----------------------------------------------------------------\n+\n+    public byte byteValue(double value) {\n+        return (byte)value;\n+    }\n+\n+    public short shortValue(double value) {\n+        return (byte)value;\n+    }\n+\n+    public int intValue(double value) {\n+        return (byte)value;\n+    }\n+\n+    public long longValue(double value) {\n+        return (byte)value;\n+    }\n+\n+    public float floatValue(double value) {\n+        return (byte)value;\n+    }\n+\n+    public double doubleValue(double value) {\n+        return (byte)value;\n+    }\n+\n+} // MutableByteTest\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableDoubleTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @see MutableDouble\n+ */\n+public class MutableDoubleTest extends MutableNumberTest {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n+    public static Test suite() {\n+        return new TestSuite(MutableDoubleTest.class);\n+    }\n+\n+    public MutableDoubleTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public MutableNumber getMutableNumber(double value) {\n+        return new MutableDouble(value);\n+    }\n+\n+    // Converters\n+    // ----------------------------------------------------------------\n+    \n+    public byte byteValue(double value) {\n+        return (byte)value;\n+    }\n+\n+    public short shortValue(double value) {\n+        return (short)value;\n+    }\n+\n+    public int intValue(double value) {\n+        return (int)value;\n+    }\n+\n+    public long longValue(double value) {\n+        return (long)value;\n+    }\n+\n+    public float floatValue(double value) {\n+        return (float)value;\n+    }\n+\n+    public double doubleValue(double value) {\n+        return value;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableFloatTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @see MutableFloat\n+ */\n+public class MutableFloatTest extends MutableNumberTest {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableFloatTest.class);\n+    }\n+\n+    /**\n+     * @param testName\n+     */\n+    public MutableFloatTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public MutableNumber getMutableNumber(double value) {\n+        return new MutableFloat((float)value);\n+    }\n+\n+    //  Converters\n+    // ----------------------------------------------------------------\n+    public byte byteValue(double value) {\n+        return (byte)(float)value;\n+    }\n+\n+    public short shortValue(double value) {\n+        return (short)(float)value;\n+    }\n+\n+    public int intValue(double value) {\n+        return (int)(float)value;\n+    }\n+\n+    public long longValue(double value) {\n+        return (long)(float)value;\n+    }\n+\n+    public float floatValue(double value) {\n+        return (float)value;\n+    }\n+\n+    public double doubleValue(double value) {\n+        return (float)value;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableIntegerTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableIntegerTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @see MutableInteger\n+ */\n+public class MutableIntegerTest extends MutableNumberTest {\n+\n+    public MutableIntegerTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableIntegerTest.class);\n+    }\n+\n+    public MutableNumber getMutableNumber(double value) {\n+        return new MutableInteger((int)value);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    //  Converters\n+    // ----------------------------------------------------------------\n+\n+    public byte byteValue(double value) {\n+        return (byte)(int)value;\n+    }\n+\n+    public double doubleValue(double value) {\n+        return (int)value;\n+    }\n+\n+    public float floatValue(double value) {\n+        return (int)value;\n+    }\n+\n+    public int intValue(double value) {\n+        return (int)value;\n+    }\n+\n+    public long longValue(double value) {\n+        return (int)value;\n+    }\n+\n+    public short shortValue(double value) {\n+        return (short)(int)value;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableLongTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @see MutableLong\n+ */\n+public class MutableLongTest extends MutableNumberTest {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableLongTest.class);\n+    }\n+\n+    public MutableLongTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public MutableNumber getMutableNumber(double value) {\n+        return new MutableLong((long)value);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    // Converters\n+    // ----------------------------------------------------------------    \n+\n+    public byte byteValue(double value) {\n+        return (byte)(long)value;\n+    }\n+\n+    public short shortValue(double value) {\n+        return (short)(long)value;\n+    }\n+\n+    public int intValue(double value) {\n+        return (int)(long)value;\n+    }\n+\n+    public long longValue(double value) {\n+        return (long)value;\n+    }\n+\n+    public float floatValue(double value) {\n+        return (long)value;\n+    }\n+\n+    public double doubleValue(double value) {\n+        return (long)value;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableNumberTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * JUnit tests.\n+ *\n+ * @version $Id: MutableNumberTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @see MutableNumber\n+ */\n+public abstract class MutableNumberTest extends TestCase {\n+\n+    public MutableNumberTest(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * Gets an instance to test.\n+     * @param value the value of the number.\n+     * @return a <code>MutableNumber</code>\n+     */\n+    public abstract MutableNumber getMutableNumber(double value);\n+\n+    // ----------------------------------------------------------------\n+    // Converters\n+    // ----------------------------------------------------------------\n+\n+    public abstract byte byteValue(double value);\n+\n+    public abstract short shortValue(double value);\n+\n+    public abstract int intValue(double value);\n+\n+    public abstract long longValue(double value);\n+\n+    public abstract float floatValue(double value);\n+\n+    public abstract double doubleValue(double value);\n+\n+    //  ----------------------------------------------------------------\n+    // Tests\n+    // ----------------------------------------------------------------\n+\n+    public void testCompareTo() {\n+        final double num = 0;\n+        final MutableNumber mutNum = getMutableNumber(num);\n+\n+        assertEquals(\"Equality\", 0, mutNum.compareTo(new Double(num)));\n+\n+        assertEquals(\n+            \"Less than\",\n+            -1,\n+            mutNum.compareTo(new Double(Double.POSITIVE_INFINITY)));\n+\n+        assertEquals(\n+            \"Greater than\",\n+            1,\n+            mutNum.compareTo(new Double(Double.NEGATIVE_INFINITY)));\n+    }\n+\n+    public void testPrimitiveAccessors() {\n+        testPrimitiveAccessors(0);\n+        testPrimitiveAccessors(Double.MAX_VALUE);\n+        testPrimitiveAccessors(-Double.MAX_VALUE);\n+\n+        testPrimitiveAccessors(Float.MAX_VALUE);\n+        testPrimitiveAccessors(-Float.MAX_VALUE);\n+\n+        testPrimitiveAccessors(Long.MAX_VALUE);\n+        testPrimitiveAccessors(Long.MIN_VALUE);\n+\n+        testPrimitiveAccessors(Integer.MAX_VALUE);\n+        testPrimitiveAccessors(Integer.MIN_VALUE);\n+\n+        testPrimitiveAccessors(Short.MAX_VALUE);\n+        testPrimitiveAccessors(Short.MIN_VALUE);\n+\n+        testPrimitiveAccessors(Byte.MAX_VALUE);\n+        testPrimitiveAccessors(Byte.MIN_VALUE);\n+    }\n+\n+    public void XtestObjectAccessors() {\n+        testObjectAccessors(0);\n+        testObjectAccessors(Double.MAX_VALUE);\n+        testObjectAccessors(-Double.MAX_VALUE);\n+\n+        testObjectAccessors(Float.MAX_VALUE);\n+        testObjectAccessors(-Float.MAX_VALUE);\n+\n+        testObjectAccessors(Long.MAX_VALUE);\n+        testObjectAccessors(Long.MIN_VALUE);\n+\n+        testObjectAccessors(Integer.MAX_VALUE);\n+        testObjectAccessors(Integer.MIN_VALUE);\n+\n+        testObjectAccessors(Short.MAX_VALUE);\n+        testObjectAccessors(Short.MIN_VALUE);\n+\n+        testObjectAccessors(Byte.MAX_VALUE);\n+        testObjectAccessors(Byte.MIN_VALUE);\n+    }\n+\n+    public void testSetValue() {\n+        setValueAndTestAccessors(Double.MAX_VALUE);\n+        setValueAndTestAccessors(-Double.MAX_VALUE);\n+\n+        setValueAndTestAccessors(Float.MAX_VALUE);\n+        setValueAndTestAccessors(-Float.MAX_VALUE);\n+\n+        setValueAndTestAccessors(Long.MAX_VALUE);\n+        setValueAndTestAccessors(Long.MIN_VALUE);\n+\n+        setValueAndTestAccessors(Integer.MAX_VALUE);\n+        setValueAndTestAccessors(Integer.MIN_VALUE);\n+\n+        setValueAndTestAccessors(Short.MAX_VALUE);\n+        setValueAndTestAccessors(Short.MIN_VALUE);\n+\n+        setValueAndTestAccessors(Byte.MAX_VALUE);\n+        setValueAndTestAccessors(Byte.MIN_VALUE);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    // Private methods\n+    // ----------------------------------------------------------------\n+\n+    private void setValueAndTestAccessors(double num) {\n+        final MutableNumber mutNum = getMutableNumber(0);\n+        mutNum.setValue(new Double(num));\n+        testPrimitiveAccessors(mutNum, num);\n+        //testObjectAccessors(mutNum, num);\n+    }\n+\n+    private void testPrimitiveAccessors(double num) {\n+        testPrimitiveAccessors(getMutableNumber(num), num);\n+    }\n+\n+    private void testPrimitiveAccessors(MutableNumber mutNum, double num) {\n+        assertEquals(\"byte comparison\", byteValue(num), mutNum.byteValue());\n+        assertEquals(\"short comparison\", shortValue(num), mutNum.shortValue());\n+        assertEquals(\"int comparison\", intValue(num), mutNum.intValue());\n+        assertEquals(\"long comparison\", longValue(num), mutNum.longValue());\n+\n+        assertEquals(\n+            \"float comparison\",\n+            floatValue(num),\n+            mutNum.floatValue(),\n+            0);\n+\n+        assertEquals(\n+            \"double comparison\",\n+            doubleValue(num),\n+            mutNum.doubleValue(),\n+            0);\n+    }\n+\n+    private void testObjectAccessors(double num) {\n+        testObjectAccessors(getMutableNumber(num), num);\n+    }\n+\n+    private void testObjectAccessors(MutableNumber mutNum, double num) {\n+        assertEquals(\n+            \"byte comparison\",\n+            new Byte(byteValue(num)),\n+            mutNum.getValue());\n+\n+        assertEquals(\n+            \"short comparison\",\n+            new Short(shortValue(num)),\n+            mutNum.getValue());\n+\n+        assertEquals(\n+            \"int comparison\",\n+            new Integer(intValue(num)),\n+            mutNum.getValue());\n+\n+        assertEquals(\n+            \"long comparison\",\n+            new Long(longValue(num)),\n+            mutNum.getValue());\n+\n+        assertEquals(\n+            \"float comparison\",\n+            new Float(floatValue(num)),\n+            mutNum.getValue());\n+\n+        assertEquals(\n+            \"double comparison\",\n+            new Double(doubleValue(num)),\n+            mutNum.getValue());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @version $Id: MutableShortTest.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ * @see MutableShort\n+ */\n+public class MutableShortTest extends MutableNumberTest {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableShortTest.class);\n+    }\n+\n+    public MutableShortTest(String testName) {\n+        super(testName);\n+    }\n+\n+    // ----------------------------------------------------------------\n+    //  Converters\n+    // ----------------------------------------------------------------\n+\n+    public MutableNumber getMutableNumber(double value) {\n+        return new MutableShort((short)value);\n+    }\n+\n+    public byte byteValue(double value) {\n+        return (byte)(short)value;\n+    }\n+\n+    public short shortValue(double value) {\n+        return (short)value;\n+    }\n+\n+    public int intValue(double value) {\n+        return (short)value;\n+    }\n+\n+    public long longValue(double value) {\n+        return (short)value;\n+    }\n+\n+    public float floatValue(double value) {\n+        return (short)value;\n+    }\n+\n+    public double doubleValue(double value) {\n+        return (short)value;\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableTestSuite.java\n+/*\n+ * Copyright 2002-2004 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ *\n+ * @version $Id: MutableTestSuite.java,v 1.1 2004/06/11 02:26:32 matth Exp $\n+ */\n+public final class MutableTestSuite {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        final TestSuite suite = new TestSuite();\n+\n+        suite.addTest(MutableByteTest.suite());\n+        suite.addTest(MutableShortTest.suite());\n+        suite.addTest(MutableIntegerTest.suite());\n+        suite.addTest(MutableLongTest.suite());\n+        suite.addTest(MutableFloatTest.suite());\n+        suite.addTest(MutableDoubleTest.suite());\n+\n+        return suite;\n+    }\n+\n+    private MutableTestSuite() {}\n+\n+}", "timestamp": 1086920792, "metainfo": ""}