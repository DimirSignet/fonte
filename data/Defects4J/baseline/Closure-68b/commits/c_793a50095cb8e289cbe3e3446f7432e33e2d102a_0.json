{"sha": "793a50095cb8e289cbe3e3446f7432e33e2d102a", "log": "FlowSensitiveInlineVariable pass does not try to inline variables within loops.  R=acleung DELTA=46  (27 added, 18 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=196210   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n+++ b/src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java\n       // in the program and in the CFG node. Even when it is semantically\n       // correctly inlining twice increases code size.\n       if (numUseWithinUseCfgNode != 1) {\n+        return false;\n+      }\n+\n+      // Make sure that the name is not within a loop\n+      if (NodeUtil.isWithinLoop(use)) {\n         return false;\n       }\n \n--- a/src/com/google/javascript/jscomp/FunctionInjector.java\n+++ b/src/com/google/javascript/jscomp/FunctionInjector.java\n         throw new IllegalStateException(\"Unexpected call site type.\");\n     }\n \n-    boolean isCallInLoop = isCallWithinLoop(callNode);\n+    boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);\n \n     FunctionToBlockMutator mutator = new FunctionToBlockMutator(\n         compiler, this.safeNameIdSupplier);\n \n     return newBlock;\n   }\n-\n-  /**\n-   * @return Whether the specified callNode has a loop parent that\n-   * is within the current scope.\n-   */\n-  private boolean isCallWithinLoop(Node callNode) {\n-    for (Node parent : callNode.getAncestors()) {\n-      if (NodeUtil.isLoopStructure(parent)) {\n-        return true;\n-      }\n-\n-      if (NodeUtil.isFunction(parent)) {\n-        break;\n-      }\n-    }\n-    return false;\n-  }\n-\n \n   /**\n    * Checks if the given function matches the criteria for an inlinable\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n   }\n \n   /**\n+   * @return Whether the specified node has a loop parent that\n+   * is within the current scope.\n+   */\n+  static boolean isWithinLoop(Node n) {\n+    for (Node parent : n.getAncestors()) {\n+      if (NodeUtil.isLoopStructure(parent)) {\n+        return true;\n+      }\n+\n+      if (NodeUtil.isFunction(parent)) {\n+        break;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  /**\n    * Determines whether the given node is a FOR, DO, WHILE, WITH, or IF node.\n    */\n   static boolean isControlStructure(Node n) {\n--- a/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n+++ b/test/com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java\n     noInline(\"while (z) { var x = 3; } var y = x;\");\n   }\n \n+  public void testDoNotInlineWithinLoop() {\n+    noInline(\"var y = noSFX(); do { var z = y.foo(); } while (true);\");\n+  }\n+\n   public void testDefinitionAfterUse() {\n     inline(\"var x = 0; print(x); x = 1\", \"var x; print(0); x = 1\");\n   }", "timestamp": 1282962917, "metainfo": ""}