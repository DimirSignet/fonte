{"sha": "4bc588102a66b46608a29e41d0343e1e27e1c3e5", "log": "don't unbox proxy types until the last generation  R=johnlenz DELTA=68  (54 added, 3 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=92003   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n \n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n-      return referencedType;\n+      return registry.isLastGeneration() ? referencedType : this;\n     }\n \n     resolveViaProperties(t, enclosing);\n     }\n \n     super.resolveInternal(t, enclosing);\n-    return referencedType;\n+    return registry.isLastGeneration() ? referencedType : this;\n   }\n \n   /**\n   // type name.\n   private void handleUnresolvedType(\n       ErrorReporter t, boolean ignoreForwardReferencedTypes) {\n-    boolean beForgiving = forgiving ||\n-        (ignoreForwardReferencedTypes &&\n-         registry.isForwardDeclaredType(reference));\n-    if (!beForgiving && registry.isLastGeneration()) {\n-      t.warning(\"Unknown type \" + reference, sourceName, lineno, null,\n-          charno);\n+    if (registry.isLastGeneration()) {\n+      boolean beForgiving = forgiving ||\n+          (ignoreForwardReferencedTypes &&\n+           registry.isForwardDeclaredType(reference));\n+      if (!beForgiving && registry.isLastGeneration()) {\n+        t.warning(\"Unknown type \" + reference, sourceName, lineno, null,\n+            charno);\n+      } else {\n+        referencedType = registry.getNativeObjectType(\n+            JSTypeNative.CHECKED_UNKNOWN_TYPE);\n+      }\n+\n+      setResolvedTypeInternal(referencedType);\n     } else {\n-      referencedType = registry.getNativeObjectType(\n-          JSTypeNative.CHECKED_UNKNOWN_TYPE);\n-    }\n-\n-    setResolvedTypeInternal(referencedType);\n+      setResolvedTypeInternal(this);\n+    }\n   }\n \n   JSType getTypedefType(ErrorReporter t, StaticSlot<JSType> slot, String name) {\n--- a/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeRegistryTest.java\n     assertTrue(typeRegistry.hasNamespace(\"a.b.Foo\"));\n   }\n \n-  public void testGenerationIncrementing() {\n+  public void testGenerationIncrementing1() {\n     SimpleErrorReporter reporter = new SimpleErrorReporter();\n     final JSTypeRegistry typeRegistry = new JSTypeRegistry(reporter);\n \n     assertFalse(subNamed.isUnknownType());\n   }\n \n+  public void testGenerationIncrementing2() {\n+    SimpleErrorReporter reporter = new SimpleErrorReporter();\n+    final JSTypeRegistry typeRegistry = new JSTypeRegistry(reporter);\n+\n+    StaticScope<JSType> scope = new StaticScope<JSType>() {\n+          public StaticSlot<JSType> getSlot(final String name) {\n+            return new SimpleSlot(\n+                name,\n+                typeRegistry.getNativeType(JSTypeNative.UNKNOWN_TYPE),\n+                false);\n+          }\n+          public StaticSlot<JSType> getOwnSlot(String name) {\n+            return getSlot(name);\n+          }\n+          public StaticScope<JSType> getParentScope() { return null; }\n+          public JSType getTypeOfThis() { return null; }\n+        };\n+\n+    ObjectType namedType =\n+        (ObjectType) typeRegistry.getType(scope, \"Foo\", null, 0, 0);\n+    FunctionType functionType = typeRegistry.createFunctionType(namedType);\n+\n+    // Subclass of named type is initially unresolved.\n+    typeRegistry.setLastGeneration(false);\n+    typeRegistry.resolveTypesInScope(scope);\n+    assertTrue(functionType.getReturnType().isUnknownType());\n+    functionType.resolve(reporter, scope);\n+    assertTrue(functionType.getReturnType().isUnknownType());\n+\n+    // Subclass of named type is still unresolved, even though the named type is\n+    // now present in the registry.\n+    typeRegistry.declareType(\"Foo\", typeRegistry.createAnonymousObjectType());\n+    typeRegistry.resolveTypesInScope(scope);\n+    assertTrue(functionType.getReturnType().isUnknownType());\n+\n+    assertNull(\"Unexpected errors: \" + reporter.errors(),\n+        reporter.errors());\n+    assertNull(\"Unexpected warnings: \" + reporter.warnings(),\n+        reporter.warnings());\n+\n+    // After incrementing the generation, resolve works again.\n+    typeRegistry.incrementGeneration();\n+    typeRegistry.setLastGeneration(true);\n+    typeRegistry.resolveTypesInScope(scope);\n+    assertFalse(functionType.getReturnType().isUnknownType());\n+  }\n+\n   public void testTypeResolutionModes() {\n     SimpleErrorReporter reporter = new SimpleErrorReporter();\n ", "timestamp": 1281476942, "metainfo": ""}