{"sha": "c306f810ac0d653caadb7bf0b7cf7c12d6c06a20", "log": "don't run RemoveUnusedVars to a fixed point, because the PhaseOptimizer does that already.  make sure %outname% works properly with js binaries.  fix a bad call to getClassesDefinedByCall  Revision created by MOE tool push_codebase. MOE_MIGRATION=   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCompilerRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompilerRunner.java\n     }\n \n     File outputFile = new File(path);\n-    PrintStream out = openSourceMapStream(options, path + \".js\");\n+    PrintStream out = openSourceMapStream(options, path);\n     compiler.getSourceMap().appendTo(out, outputFile.getName());\n     out.close();\n   }\n--- a/src/com/google/javascript/jscomp/GenerateExports.java\n+++ b/src/com/google/javascript/jscomp/GenerateExports.java\n       CodingConvention convention = compiler.getCodingConvention();\n       while (insertionPoint != null &&\n           NodeUtil.isExprCall(insertionPoint) &&\n-          convention.getClassesDefinedByCall(insertionPoint) == null) {\n+          convention.getClassesDefinedByCall(\n+              insertionPoint.getFirstChild()) != null) {\n         insertionPoint = insertionPoint.getNext();\n       }\n \n--- a/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n+++ b/src/com/google/javascript/jscomp/RemoveUnusedVars.java\n    */\n   public void process(Node externs, Node root) {\n     warnedVars_.clear();\n-\n-    // TODO(nicksantos|user): Maybe speed this up by only repeating the pass\n-    // if any functions were removed.\n-    int i = 0;\n-    do {\n-      numRemoved_ = 0;\n-      referenced.clear();\n-      traverseAndRemoveUnusedReferences(root);\n-\n-      if (numRemoved_ > 0) {\n-        compiler_.reportCodeChange();\n-        logger_.fine(\"RemoveUnusedVars(\" + i + \"): removed \" + numRemoved_);\n-      }\n-    } while (numRemoved_ > 0 && ++i < MAX_ITERATIONS);\n-\n-    if (i == MAX_ITERATIONS) {\n-      logger_.warning(\"Reached max allowable iterations. Stopping.\");\n+    numRemoved_ = 0;\n+    referenced.clear();\n+\n+    traverseAndRemoveUnusedReferences(root);\n+\n+    if (numRemoved_ > 0) {\n+      compiler_.reportCodeChange();\n     }\n   }\n \n--- a/test/com/google/javascript/jscomp/GenerateExportsTest.java\n+++ b/test/com/google/javascript/jscomp/GenerateExportsTest.java\n          null, FindExportableNodes.NON_GLOBAL_ERROR);\n   }\n \n+  public void testExportClass() {\n+    test(\"/** @export */ function G() {} foo();\",\n+         \"function G() {} google_exportSymbol('G', G); foo();\");\n+  }\n+\n   public void testExportSubclass() {\n     test(\"var goog = {}; function F() {}\" +\n          \"/** @export */ function G() {} goog.inherits(G, F);\",\n--- a/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n+++ b/test/com/google/javascript/jscomp/RemoveUnusedVarsTest.java\n \n     // Test multiple passes required\n     test(\"var a,b,c,d;var e=[b,c];var x=e[3];var f=[d];print(f[0])\",\n-         \"var d;var f=[d];print(f[0])\");\n+         \"var b,c,d;var f=[d];print(f[0])\");\n \n     // Test proper scoping (static vs dynamic)\n     test(\"var x;function A(){var x;B()}function B(){print(x)}A()\",\n          \"return function(){print(f)}}B()\",\n \n          \"function B(){\" +\n-         \"var e,f,h;\" +\n+         \"var d,e,f,h;\" +\n          \"e=function(){print(e)};\" +\n          \"if(1);\" +\n          \"arr=[function(){print(h)}];\" +\n     test(\"var y=function(x){var z;}\", \"var y=function(){}\");\n   }\n }\n-", "timestamp": 1266350600, "metainfo": ""}