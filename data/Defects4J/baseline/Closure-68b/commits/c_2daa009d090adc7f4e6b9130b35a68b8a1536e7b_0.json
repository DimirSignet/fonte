{"sha": "2daa009d090adc7f4e6b9130b35a68b8a1536e7b", "log": "Automated g4 rollback.  *** Reason for rollback ***  breaks with NPEs  *** Original change description ***  -Turn on RemoveUnusedVars's optimizeCalls option within the main optimization loop. This is required to handle call sites that propagate unused parameters.  R=agrieve,johnlenz DELTA=31  (8 added, 16 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=833   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       passes.add(devirtualizePrototypeMethods);\n     }\n \n+    // Running \"optimizeCalls\" after devirtualization is useful for removing\n+    // unneeded \"this\" values.\n+    if (options.optimizeCalls\n+        || options.optimizeParameters\n+        || options.optimizeReturns) {\n+      passes.add(optimizeCalls);\n+    }\n+\n     if (options.customPasses != null) {\n       passes.add(getCustomPasses(\n           CustomPassExecutionTime.BEFORE_OPTIMIZATION_LOOP));\n       passes.add(inlineFunctions);\n     }\n \n-    boolean runOptimizeCalls = options.optimizeCalls\n-        || options.optimizeParameters\n-        || options.optimizeReturns;\n-\n     if (options.removeUnusedVars || options.removeUnusedLocalVars) {\n       if (options.deadAssignmentElimination) {\n         passes.add(deadAssignmentsElimination);\n       }\n-      if (!runOptimizeCalls) {\n-        passes.add(removeUnusedVars);\n-      }\n-    }\n-    if (runOptimizeCalls) {\n-      passes.add(optimizeCallsAndRemoveUnusedVars);\n+      passes.add(removeUnusedVars);\n     }\n     assertAllLoopablePasses(passes);\n     return passes;\n   };\n \n   /**\n-   * Optimizes unused function arguments, unused return values, and inlines\n-   * constant parameters. Also runs RemoveUnusedVars.\n-   */\n-  private final PassFactory optimizeCallsAndRemoveUnusedVars =\n-      new PassFactory(\"optimizeCalls_and_removeUnusedVars\", false) {\n+   * Rewrite instance methods as static methods, to make them easier\n+   * to inline.\n+   */\n+  private final PassFactory optimizeCalls =\n+      new PassFactory(\"optimizeCalls\", true) {\n     @Override\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       OptimizeCalls passes = new OptimizeCalls(compiler);\n       }\n \n       if (options.optimizeCalls) {\n-        boolean removeOnlyLocals = options.removeUnusedLocalVars\n-            && !options.removeUnusedVars;\n-        boolean preserveAnonymousFunctionNames =\n-            options.anonymousFunctionNaming !=\n-            AnonymousFunctionNamingPolicy.OFF;\n-        passes.addPass(\n-            new RemoveUnusedVars(compiler, !removeOnlyLocals,\n-                preserveAnonymousFunctionNames, true));\n+        passes.addPass(new RemoveUnusedVars(compiler, false, true, true));\n       }\n       return passes;\n     }", "timestamp": 1299873388, "metainfo": ""}