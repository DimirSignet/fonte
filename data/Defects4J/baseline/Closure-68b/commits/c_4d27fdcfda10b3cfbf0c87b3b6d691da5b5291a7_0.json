{"sha": "4d27fdcfda10b3cfbf0c87b3b6d691da5b5291a7", "log": "For IDE-type invocations, added an \"infer types flag\" that is similar to the existing checkTypes step, except for the actual TypeCheck step.  R=johnlenz,nicksantos DELTA=67  (64 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1620   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n    * </ul>\n    */\n   public boolean ideMode;\n+\n+  /**\n+   * Even if checkTypes is disabled, clients might want to still infer types.\n+   * This is mostly used when ideMode is enabled.\n+   */\n+  boolean inferTypes;\n \n   /**\n    * Configures the compiler to skip as many passes as possible.\n     return this.aliasHandler;\n   }\n \n+  /**\n+   * If true, enables type inference. If checkTypes is enabled, this flag has\n+   * no effect.\n+   */\n+  public void setInferTypes(boolean enable) {\n+    inferTypes = enable;\n+  }\n+\n+  /**\n+   * Gets the inferTypes flag. Note that if checkTypes is enabled, this flag\n+   * is ignored when configuring the compiler.\n+   */\n+  public boolean getInferTypes() {\n+    return inferTypes;\n+  }\n+\n   //////////////////////////////////////////////////////////////////////////////\n   // Enums\n \n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n       checks.add(objectPropertyStringPreprocess);\n     }\n \n-    if (options.checkTypes) {\n+    if (options.checkTypes || options.inferTypes) {\n       checks.add(resolveTypes.makeOneTimePass());\n       checks.add(inferTypes.makeOneTimePass());\n-      checks.add(checkTypes.makeOneTimePass());\n+      if (options.checkTypes) {\n+        checks.add(checkTypes.makeOneTimePass());\n+      } else {\n+        checks.add(inferJsDocInfo.makeOneTimePass());\n+      }\n     }\n \n     if (options.checkUnreachableCode.isOn() ||\n     }\n   };\n \n-  /** Rusn type inference. */\n+  /** Run type inference. */\n   final PassFactory inferTypes =\n       new PassFactory(\"inferTypes\", false) {\n     @Override\n       };\n     }\n   };\n+\n+  final PassFactory inferJsDocInfo =\n+    new PassFactory(\"inferJsDocInfo\", false) {\n+  @Override\n+  protected CompilerPass createInternal(final AbstractCompiler compiler) {\n+    return new CompilerPass() {\n+      @Override\n+      public void process(Node externs, Node root) {\n+        Preconditions.checkNotNull(topScope);\n+        Preconditions.checkNotNull(getTypedScopeCreator());\n+\n+        makeInferJsDocInfo(compiler).process(externs, root);\n+      }\n+    };\n+  }\n+};\n \n   /** Checks type usage */\n   private final PassFactory checkTypes =\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n     return new TypeInferencePass(\n         compiler, compiler.getReverseAbstractInterpreter(),\n         topScope, typedScopeCreator);\n+  }\n+\n+  final InferJSDocInfo makeInferJsDocInfo(AbstractCompiler compiler) {\n+    return new InferJSDocInfo(compiler);\n   }\n \n   /**", "timestamp": 1303827256, "metainfo": ""}