{"sha": "685443251d5be1186e0d8abf4ad1181153bebe01", "log": "Add BITXOR to the list of commutative and associative operators.  R=nicksantos DELTA=21  (21 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=250   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n       case Token.AND:\n       case Token.OR:\n       case Token.BITOR:\n+      case Token.BITXOR:\n       case Token.BITAND:\n         return true;\n       default:\n     switch (type) {\n       case Token.MUL:\n       case Token.BITOR:\n+      case Token.BITXOR:\n       case Token.BITAND:\n         return true;\n       default:\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n       case Token.MUL:\n       case Token.BITAND:\n       case Token.BITOR:\n+      case Token.BITXOR:\n         Node result = tryFoldArithmeticOp(subtree, left, right);\n         if (result != subtree) {\n           return result;\n           return null;\n         }\n         result = (int)lval | (int)rval;\n+        break;\n+      case Token.BITXOR:\n+        if (!areValidInts(lval, rval)) {\n+          return null;\n+        }\n+        result = (int)lval ^ (int)rval;\n         break;\n       case Token.ADD:\n         result = lval + rval;\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n     fold(\"x = 3 | 1\", \"x = 3\");\n     fold(\"x = 3 | 3\", \"x = 3\");\n \n+    fold(\"x = 1 ^ 1\", \"x = 0\");\n+    fold(\"x = 1 ^ 2\", \"x = 3\");\n+    fold(\"x = 3 ^ 1\", \"x = 2\");\n+    fold(\"x = 3 ^ 3\", \"x = 0\");\n+\n     fold(\"x = -1 & 0\", \"x = 0\");\n     fold(\"x = 0 & -1\", \"x = 0\");\n     fold(\"x = 1 & 4\", \"x = 0\");\n     fold(\"x = 3 | y | 1\", \"x = y | 3\");\n     fold(\"x = y | 3 | 3\", \"x = y | 3\");\n     fold(\"x = 3 | y | 3\", \"x = y | 3\");\n+\n+    fold(\"x = y ^ 1 ^ 1\", \"x = y ^ 0\");\n+    fold(\"x = y ^ 1 ^ 2\", \"x = y ^ 3\");\n+    fold(\"x = y ^ 3 ^ 1\", \"x = y ^ 2\");\n+    fold(\"x = 3 ^ y ^ 1\", \"x = y ^ 2\");\n+    fold(\"x = y ^ 3 ^ 3\", \"x = y ^ 0\");\n+    fold(\"x = 3 ^ y ^ 3\", \"x = y ^ 0\");\n   }\n \n   public void testFoldBitwiseOpStringCompare() {", "timestamp": 1294790396, "metainfo": ""}