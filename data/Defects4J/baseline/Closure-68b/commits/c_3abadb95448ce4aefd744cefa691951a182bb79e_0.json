{"sha": "3abadb95448ce4aefd744cefa691951a182bb79e", "log": "Collapse typedefs specially This is kind of a hack to support a use-case that currently works by accident.  goog.provide('foo.Bar.Baz'); /** @typedef */ foo.Bar.Baz; foo.Bar = function() {};  which gets transformed to  foo.Bar = {}; foo.Bar.Baz = {}; foo.Bar.Baz; foo.Bar = function() {};  which \"works\", but is all sorts of weird type-system-wise.  I'm not sure if we should fix this as a one-off, or try something more general (like treating all \"stubs\" as declarations).  R=johnlenz DELTA=49  (49 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1706   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n \n import com.google.common.base.Preconditions;\n import com.google.common.base.Predicates;\n+import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.GlobalNamespace.Name;\n \n       if (p.canCollapse()) {\n         flattenReferencesTo(p, propAlias);\n+      } else if (p.isSimpleStubDeclaration()) {\n+        flattenSimpleStubDeclaration(p, propAlias);\n       }\n \n       flattenReferencesToCollapsibleDescendantNames(p, propAlias);\n     }\n   }\n+\n+\n+  /**\n+   * Flattens a stub declaration.\n+   * This is mostly a hack to support legacy users.\n+   */\n+  private void flattenSimpleStubDeclaration(Name name, String alias) {\n+    Ref ref = Iterables.getOnlyElement(name.getRefs());\n+    Node nameNode = NodeUtil.newName(\n+        compiler.getCodingConvention(), alias, ref.node,\n+        name.fullName());\n+    Node varNode = new Node(Token.VAR, nameNode).copyInformationFrom(nameNode);\n+\n+    Preconditions.checkState(\n+        ref.node.getParent().getType() == Token.EXPR_RESULT);\n+    Node parent = ref.node.getParent();\n+    Node gramps = parent.getParent();\n+    gramps.replaceChild(parent, varNode);\n+    compiler.reportCodeChange();\n+  }\n+\n \n   /**\n    * Flattens all references to a collapsible property of a global name except\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n       return true;\n     }\n \n+    boolean isSimpleStubDeclaration() {\n+      if (getRefs().size() == 1) {\n+        Ref ref = refs.get(0);\n+        JSDocInfo info = ref.node.getJSDocInfo();\n+        if (ref.node.getParent() != null &&\n+            ref.node.getParent().getType() == Token.EXPR_RESULT) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    }\n+\n     boolean canCollapse() {\n       return !inExterns && !isGetOrSetDefinition() && (isClassOrEnum ||\n           (parent == null || parent.canCollapseUnannotatedChildNames()) &&\n--- a/test/com/google/javascript/jscomp/CollapsePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/CollapsePropertiesTest.java\n         \"var a = null;\" +\n         \"this.c = a.b;\");\n   }\n+\n+  public void testTypedef1() {\n+    test(\"var foo = {};\" +\n+         \"/** @typedef {number} */ foo.Baz;\",\n+         \"var foo = {}; var foo$Baz;\");\n+  }\n+\n+  public void testTypedef2() {\n+    test(\"var foo = {};\" +\n+         \"/** @typedef {number} */ foo.Bar.Baz;\" +\n+         \"foo.Bar = function() {};\",\n+         \"var foo$Bar$Baz; var foo$Bar = function(){};\");\n+  }\n }", "timestamp": 1304437074, "metainfo": ""}