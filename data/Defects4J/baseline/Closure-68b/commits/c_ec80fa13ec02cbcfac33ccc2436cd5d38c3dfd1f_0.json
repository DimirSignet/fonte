{"sha": "ec80fa13ec02cbcfac33ccc2436cd5d38c3dfd1f", "log": "Create some functions for incremental recompilation.  R=bashir,johnlenz DELTA=114  (110 added, 2 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=88   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n     inputsByName.put(sourceName, new CompilerInput(ast));\n   }\n \n+  /**\n+   * Replace a source input dynamically. Intended for incremental\n+   * re-compilation.\n+   *\n+   * If the new source input doesn't parse, then keep the old input\n+   * in the AST and return false.\n+   *\n+   * @return Whether the new AST was attached successfully.\n+   */\n+  boolean replaceIncrementalSourceAst(JsAst ast) {\n+    String sourceName = ast.getSourceFile().getName();\n+    CompilerInput oldInput =\n+        Preconditions.checkNotNull(\n+            getInput(sourceName),\n+            \"No input to replace: \" + sourceName);\n+    Node newRoot = ast.getAstRoot(this);\n+    if (newRoot == null) {\n+      return false;\n+    }\n+\n+    Node oldRoot = oldInput.getAstRoot(this);\n+    if (oldRoot != null) {\n+      oldRoot.getParent().replaceChild(oldRoot, newRoot);\n+    } else {\n+      getRoot().getLastChild().addChildToBack(newRoot);\n+    }\n+\n+    inputsByName.put(sourceName, new CompilerInput(ast));\n+    return true;\n+  }\n+\n   @Override\n   JSModuleGraph getModuleGraph() {\n     return moduleGraph;\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n     @Override\n     public void process(Node externs, Node root) {\n       if (topScope == null) {\n-        typedScopeCreator =\n-            new MemoizedScopeCreator(new TypedScopeCreator(compiler));\n-        topScope = typedScopeCreator.createScope(root.getParent(), null);\n+        regenerateGlobalTypedScope(compiler, root.getParent());\n       } else {\n         compiler.getTypeRegistry().resolveTypesInScope(topScope);\n       }\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n import com.google.common.collect.Iterables;\n import com.google.javascript.jscomp.graph.GraphvizGraph;\n import com.google.javascript.jscomp.graph.LinkedDirectedGraph;\n+import com.google.javascript.rhino.Node;\n \n import java.io.Serializable;\n import java.util.List;\n \n   public PassConfig(CompilerOptions options) {\n     this.options = options;\n+  }\n+\n+  /**\n+   * Regenerates the top scope.\n+   */\n+  void regenerateGlobalTypedScope(AbstractCompiler compiler, Node root) {\n+    typedScopeCreator =\n+        new MemoizedScopeCreator(new TypedScopeCreator(compiler));\n+    topScope = typedScopeCreator.createScope(root, null);\n   }\n \n   /**", "timestamp": 1291758926, "metainfo": ""}