{"sha": "28f53ea8e95302f96c6fa2fd91e4afc8178ab8a7", "log": "Silence all warnings in QUIET mode.    ", "commit": "\n--- a/src/com/google/javascript/jscomp/WarningLevel.java\n+++ b/src/com/google/javascript/jscomp/WarningLevel.java\n   public void setOptionsForWarningLevel(CompilerOptions options) {\n     switch (this) {\n       case QUIET:\n-        // Nothing to do\n+        silenceAllWarnings(options);\n         break;\n       case DEFAULT:\n         addDefaultWarnings(options);\n       default:\n         throw new RuntimeException(\"Unknown warning level.\");\n     }\n+  }\n+\n+  /**\n+   * Silence all non-essential warnings.\n+   */\n+  private static void silenceAllWarnings(CompilerOptions options) {\n+    // Just use a ShowByPath warnings guard, so that we don't have\n+    // to maintain a separate class of warnings guards for silencing warnings.\n+    options.addWarningsGuard(\n+        new ShowByPathWarningsGuard(\n+            \"the_longest_path_that_cannot_be_expressed_as_a_string\"));\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/CompilerRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CompilerRunnerTest.java\n   }\n \n   public void testTypeCheckOverride2() {\n-    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.QUIET);\n+    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.DEFAULT);\n+    testSame(\"var x = x || {}; x.f = function() {}; x.f(3);\");\n+\n     CompilerRunner.FLAG_jscomp_warning.setForTest(\n         Lists.newArrayList(\"checkTypes\"));\n     test(\"var x = x || {}; x.f = function() {}; x.f(3);\",\n     test(\"function f() {'use strict';}\", \"function f() {}\");\n     test(\"function f() {'no use strict';}\",\n          CheckSideEffects.USELESS_CODE_ERROR);\n+  }\n+\n+  public void testQuietMode() {\n+    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.DEFAULT);\n+    test(\"/** @type { not a type name } */ var x;\",\n+         RhinoErrorReporter.PARSE_ERROR);\n+    CompilerRunner.FLAG_warning_level.setForTest(WarningLevel.QUIET);\n+    testSame(\"/** @type { not a type name } */ var x;\");\n   }\n \n   //////////////////////////////////////////////////////////////////////////////\n    */\n   private void test(String[] original, DiagnosticType warning) {\n     Compiler compiler = compile(original);\n-    assertEquals(\"Expected exactly one warning or error\",\n+    assertEquals(\"Expected exactly one warning or error \" +\n+        \"Errors: \\n\" + Joiner.on(\"\\n\").join(compiler.getErrors()) +\n+        \"Warnings: \\n\" + Joiner.on(\"\\n\").join(compiler.getWarnings()),\n         1, compiler.getErrors().length + compiler.getWarnings().length);\n     if (compiler.getErrors().length > 0) {\n       assertEquals(warning, compiler.getErrors()[0].getType());", "timestamp": 1264119871, "metainfo": ""}