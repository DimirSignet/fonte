{"sha": "936537f0ed66d00d0365fecd4e85a44802bca759", "log": "Don't allow the removal of synthetic blocks in NodeUtil.removeChild   R=nicksantos DELTA=34  (25 added, 5 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=213   ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n \n   /** Safely remove children while maintaining a valid node structure. */\n   static void removeChild(Node parent, Node node) {\n-    // Node parent = node.getParent();\n-    if (isStatementBlock(parent)\n-        || isSwitchCase(node)\n-        || isTryFinallyNode(parent, node)) {\n+    if (isTryFinallyNode(parent, node)) { // A BLOCK node used as a \"finally\"\n+      // A finally node can simply be removed.\n+      parent.removeChild(node);\n+    } else if (node.getType() == Token.BLOCK) {\n+      // Simply empty the block.  This maintains source location and\n+      // \"synthetic\"-ness.\n+      node.detachChildren();\n+    } else if (isStatementBlock(parent)\n+        || isSwitchCase(node)) {\n       // A statement in a block can simply be removed.\n       parent.removeChild(node);\n     } else if (parent.getType() == Token.VAR) {\n         // This would leave an empty VAR, remove the VAR itself.\n         removeChild(parent.getParent(), parent);\n       }\n-    } else if (node.getType() == Token.BLOCK) {\n-      // Simply empty the block.  This maintains source location and\n-      // \"synthetic\"-ness.\n-      node.detachChildren();\n     } else if (parent.getType() == Token.LABEL\n         && node == parent.getLastChild()) {\n       // Remove the node from the parent, so it can be reused.\n--- a/test/com/google/javascript/jscomp/NodeUtilTest.java\n+++ b/test/com/google/javascript/jscomp/NodeUtilTest.java\n     assertFalse(NodeUtil.isFunctionExpression(functionNode));\n   }\n \n+  public void testRemoveChildBlock() {\n+    Compiler compiler = new Compiler();\n+\n+    Node root = parse(\"{{x()}}\");\n+\n+    // Test removing the inner block.\n+    Node actual = root.cloneTree();\n+\n+    Node outerBlockNode = actual.getFirstChild();\n+    Node innerBlockNode = outerBlockNode.getFirstChild();\n+    innerBlockNode.setIsSyntheticBlock(true);\n+\n+    NodeUtil.removeChild(outerBlockNode, innerBlockNode);\n+    String expected = \"{{}}\";\n+    String difference = parse(expected).checkTreeEquals(actual);\n+    if (difference != null) {\n+      assertTrue(\"Nodes do not match:\\n\" + difference, false);\n+    }\n+  }  \n+\n   public void testRemoveTryChild() {\n     Compiler compiler = new Compiler();\n \n     if (difference != null) {\n       assertTrue(\"Nodes do not match:\\n\" + difference, false);\n     }\n-\n   }\n \n   public void testRemoveVarChild() {", "timestamp": 1294351342, "metainfo": ""}