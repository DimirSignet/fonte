{"sha": "831de24c490d14ef7dc99148cf2be39f6c67df92", "log": "Use more deterministic data structures in the type system. Not all of these are strictly necessary right now, but they will help prevent non-determinism in the future.  R=acleung DELTA=16  (5 added, 2 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=110008   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n    * types are resolved, it may return an incomplete set.\n    */\n   public Iterable<ObjectType> getAllImplementedInterfaces() {\n-    Set<ObjectType> interfaces = Sets.newHashSet();\n+    // Store them in a linked hash set, so that the compile job is\n+    // deterministic.\n+    Set<ObjectType> interfaces = Sets.newLinkedHashSet();\n \n     for (ObjectType type : getImplementedInterfaces()) {\n       addRelatedInterfaces(type, interfaces);\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ArrayListMultimap;\n-import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.LinkedHashMultimap;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n \n   // A map from interface name to types that implement it.\n   private final Multimap<String, FunctionType> interfaceToImplementors =\n-      HashMultimap.create();\n+      LinkedHashMultimap.create();\n \n   // All the unresolved named types.\n   private final Multimap<StaticScope<JSType>, NamedType> unresolvedNamedTypes =\n \n     Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);\n     if (typeSet == null) {\n-      typesIndexedByProperty.put(propertyName, typeSet = Sets.newHashSet());\n+      typesIndexedByProperty.put(\n+          propertyName, typeSet = Sets.newLinkedHashSet());\n     }\n     greatestSubtypeByProperty.remove(propertyName);\n     typeSet.add(owner);\n   public Set<ObjectType> getTypesWithProperty(String propertyName) {\n     Set<ObjectType> typeSet = typesIndexedByProperty.get(propertyName);\n     if (typeSet == null) {\n-      return Sets.newHashSet(getNativeObjectType(NO_TYPE));\n+      return Sets.newLinkedHashSet(getNativeObjectType(NO_TYPE));\n     }\n     return typeSet;\n   }\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n import com.google.common.collect.Sets;\n import com.google.javascript.rhino.JSDocInfo;\n \n-import java.util.HashSet;\n import java.util.Set;\n \n /**\n \n   /** Returns the names of all the properties directly on this type. */\n   public Set<String> getOwnPropertyNames() {\n-    return new HashSet<String>();\n+    return ImmutableSet.of();\n   }\n \n   /**\n    * its supertypes.\n    */\n   public Set<String> getPropertyNames() {\n-    Set<String> props = Sets.newHashSet();\n+    Set<String> props = Sets.newTreeSet();\n     collectPropertyNames(props);\n     return props;\n   }\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n   PrototypeObjectType(JSTypeRegistry registry, String className,\n       ObjectType implicitPrototype, boolean nativeType) {\n     super(registry);\n-    this.properties = Maps.newHashMap();\n+    this.properties = Maps.newTreeMap();\n     this.className = className;\n     this.nativeType = nativeType;\n     if (nativeType) {\n--- a/src/com/google/javascript/rhino/jstype/RecordType.java\n+++ b/src/com/google/javascript/rhino/jstype/RecordType.java\n \n package com.google.javascript.rhino.jstype;\n \n+import com.google.common.collect.Maps;\n import com.google.javascript.rhino.ErrorReporter;\n \n-import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n+import java.util.SortedMap;\n \n /**\n  * A record (structural) type.\n public class RecordType extends PrototypeObjectType {\n   private static final long serialVersionUID = 1L;\n \n-  private Map<String, JSType> properties = new HashMap<String, JSType>();\n+  private SortedMap<String, JSType> properties = Maps.newTreeMap();\n   private boolean isFrozen = false;\n \n   /**", "timestamp": 1281729654, "metainfo": ""}