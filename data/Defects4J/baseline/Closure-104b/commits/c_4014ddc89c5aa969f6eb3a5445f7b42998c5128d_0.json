{"sha": "4014ddc89c5aa969f6eb3a5445f7b42998c5128d", "log": "Make the interfaces API a bit less specific.  Remove a bad type annotation from Math.    ", "commit": "\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n       constructor = type.toObjectType().getConstructor();\n     }\n     if (constructor != null) {\n-      Set<ObjectType> interfaces = constructor.getAllImplementedInterfaces();\n-      for (ObjectType itype : interfaces) {\n+      for (ObjectType itype : constructor.getAllImplementedInterfaces()) {\n         related.set(getIntForType(itype));\n       }\n     }\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n           constructor = objType.getConstructor();\n         }\n         while (constructor != null) {\n-          List<ObjectType> interfaces = constructor.getImplementedInterfaces();\n-          for (ObjectType itype : interfaces) {\n+          for (ObjectType itype : constructor.getImplementedInterfaces()) {\n             JSType top = getTypeWithProperty(p.name, itype);\n             if (top != null) {\n               p.addType(itype, top, relatedType);\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n import static com.google.javascript.rhino.jstype.JSTypeNative.UNKNOWN_TYPE;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n import com.google.javascript.rhino.JSDocInfo;\n           JSType maybeFunctionType = baseType.getConstructor();\n           if (maybeFunctionType instanceof FunctionType) {\n             FunctionType functionType = baseType.getConstructor();\n-            implementedInterfaces.addAll(\n+            Iterables.addAll(\n+                implementedInterfaces,\n                 functionType.getImplementedInterfaces());\n           }\n         }\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n   private Node source;\n \n   /**\n-   * The interfaces implemented by the instance type of this function.\n-   * It is only relevant for constructors and may be {@code null}.\n-   */\n-  private List<ObjectType> implementedInterfaces;\n+   * The interfaces directly implemented by this function.\n+   * It is only relevant for constructors. May not be {@code null}.\n+   */\n+  private List<ObjectType> implementedInterfaces = ImmutableList.of();\n \n   /**\n    * The types which are subtypes of this function. It is only relevant for\n    * superclasses for any of those interfaces. If this is called before all\n    * types are resolved, it may return an incomplete set.\n    */\n-  public Set<ObjectType> getAllImplementedInterfaces() {\n+  public Iterable<ObjectType> getAllImplementedInterfaces() {\n     Set<ObjectType> interfaces = Sets.newHashSet();\n \n     for (ObjectType type : getImplementedInterfaces()) {\n   }\n \n   /** Returns interfaces implemented directly by a class or its superclass. */\n-  public List<ObjectType> getImplementedInterfaces() {\n-    if (implementedInterfaces == null) {\n-      return ImmutableList.of();\n-    } else {\n-      return implementedInterfaces;\n-    }\n+  public Iterable<ObjectType> getImplementedInterfaces() {\n+    return implementedInterfaces;\n   }\n \n   public void setImplementedInterfaces(List<ObjectType> implementedInterfaces) {\n--- a/src/com/google/javascript/rhino/jstype/InstanceObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/InstanceObjectType.java\n     if (super.isSubtype(that)) {\n       return true;\n     }\n-    List<ObjectType> thisInterfaces =\n+    Iterable<ObjectType> thisInterfaces =\n         getConstructor().getImplementedInterfaces();\n     if (thisInterfaces != null) {\n       List<ObjectType> thatInterfaces = that.keepAssignableInterfaces();", "timestamp": 1262644961, "metainfo": ""}