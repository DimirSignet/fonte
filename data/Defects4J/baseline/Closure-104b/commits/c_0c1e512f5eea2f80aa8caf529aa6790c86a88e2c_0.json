{"sha": "0c1e512f5eea2f80aa8caf529aa6790c86a88e2c", "log": "Make sure that the SourceMap (for debugging) is valid JSON by escaping strings correctly.    ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n   /** Escapes regular expression */\n   static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder) {\n     return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);\n+  }\n+\n+  /**\n+   * Escapes the given string to a double quoted (\") JavaScript/JSON string\n+   */\n+  static String escapeToDoubleQuotedJsString(String s) {\n+    return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);\n   }\n \n   /* If the user doesn't want to specify an output charset encoder, assume\n--- a/src/com/google/javascript/jscomp/SourceMap.java\n+++ b/src/com/google/javascript/jscomp/SourceMap.java\n     void appendTo(Appendable out) throws IOException {\n       out.append(\"[\");\n \n-      out.append(\"\\\"\");\n-      out.append(sourceFile);\n-      out.append(\"\\\"\");\n+      out.append(escapeString(sourceFile));\n \n       out.append(\",\");\n       out.append(originalPosition.getLineNumber() + \"\");\n \n       if (originalName != null) {\n         out.append(\",\");\n-        out.append(\"\\\"\");\n-        out.append(originalName);\n-        out.append(\"\\\"\");\n+        out.append(escapeString(originalName));\n       }\n \n       out.append(\"]\");\n           out.append(\",\");\n         }\n \n-        out.append(\"\\\"\");\n-        out.append(files.get(j));\n-        out.append(\"\\\"\");\n+        out.append(escapeString(files.get(j)));\n       }\n \n       out.append(\"]\");\n    * an output wrapper prefix.\n    */\n   private Position prefixPosition = new Position(0, 0);\n+\n+  /**\n+   * Escapes the given string for JSON.\n+   */\n+  private static String escapeString(String value) {\n+    return CodeGenerator.escapeToDoubleQuotedJsString(value);\n+  }\n \n   /**\n    * Adds a mapping for the given node.\n           }\n \n           int lcmLength = lcm.endCharacter - lcm.startCharacter;\n+\n+          // Give precedence to items with names.\n+          if (lcmLength == minLength && lcm.basisMapping.originalName != null) {\n+            current = lcm;\n+            continue;\n+          }\n \n           if (lcmLength < minLength) {\n             minLength = lcmLength;\n     // 12) [\"d.js\", 3, 78, \"foo\"]\n \n     // Add the line character maps.\n-    out.append(\"/** Begin line maps. **/{ \\\"file\\\" : \\\"\");\n-    out.append(name);\n-    out.append(\"\\\", \\\"count\\\": \");\n+    out.append(\"/** Begin line maps. **/{ \\\"file\\\" : \");\n+    out.append(escapeString(name));\n+    out.append(\", \\\"count\\\": \");\n     out.append((maxLine + 1) + \"\");\n     out.append(\" }\\n\");\n \n--- a/test/com/google/javascript/jscomp/SourceMapTest.java\n+++ b/test/com/google/javascript/jscomp/SourceMapTest.java\n                    \"[\\\"testcode\\\",6,7,\\\"foo\\\"]\\n\");\n   }\n \n+  public void testGoldenOutput3() throws Exception {\n+    checkSourceMap(\"c:\\\\myfile.js\",\n+                   \"foo;\",\n+\n+                   \"/** Begin line maps. **/{ \\\"file\\\" : \\\"testMap\\\", \" +\n+                   \"\\\"count\\\": 1 }\\n\" +\n+\n+                   \"[2,2,2,2]\\n\" +\n+\n+                   \"/** Begin file information. **/\\n\" +\n+                   \"[\\\"c:\\\\\\\\myfile.js\\\"]\\n\" +\n+                   \"/** Begin mapping definitions. **/\\n\" +\n+                   \"[\\\"c:\\\\\\\\myfile.js\\\",1,0]\\n\" +\n+                   \"[\\\"c:\\\\\\\\myfile.js\\\",1,0]\\n\" +\n+                   \"[\\\"c:\\\\\\\\myfile.js\\\",1,0,\\\"foo\\\"]\\n\");\n+  }\n+\n   /**\n    * Creates a source map for the given JS code and asserts it is\n    * equal to the expected golden map.\n    */\n   private void checkSourceMap(String js, String expectedMap)\n       throws IOException {\n-    RunResult result = compile(js);\n+    checkSourceMap(\"testcode\", js, expectedMap);\n+  }\n+\n+  private void checkSourceMap(String fileName, String js, String expectedMap)\n+      throws IOException {\n+    RunResult result = compile(js, fileName);\n     StringBuilder sb = new StringBuilder();\n     result.sourceMap.appendTo(sb, \"testMap\");\n-\n     assertEquals(expectedMap, sb.toString());\n   }\n \n   }\n \n   private RunResult compile(String js) {\n+    return compile(js, \"testcode\");\n+  }\n+\n+  private RunResult compile(String js, String fileName) {\n     Compiler compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n     options.sourceMapOutputPath = \"testcode_source_map.out\";\n     // Turn on IDE mode to get rid of optimizations.\n     options.ideMode = true;\n \n-    JSSourceFile[] inputs = { JSSourceFile.fromCode(\"testcode\", js) };\n+    JSSourceFile[] inputs = { JSSourceFile.fromCode(fileName, js) };\n     Result result = compiler.compile(EXTERNS, inputs, options);\n \n     assertTrue(result.success);", "timestamp": 1263248310, "metainfo": ""}