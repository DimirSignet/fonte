{"sha": "1771d2005a441cb87df2a488069f265bd71ed9ee", "log": "delete some dead code    ", "commit": "\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n     public void addNode(Property prop) {\n       typesInSet.or(prop.typesSet);\n       typesRelatedToSet.or(prop.relatedTypesSet);\n-    }\n-\n-    /**\n-     * Finds all types related to the provided type and returns a BitSet with\n-     * their bits to true.\n-     */\n-    private JSTypeBitSet getRelated(JSType type) {\n-      JSTypeBitSet relatedTypes = new JSTypeBitSet(intForType.size());\n-      if (type instanceof UnionType) {\n-        for (JSType alt : ((UnionType) type).getAlternates()) {\n-          intersectRelatedTypesOnNonUnion(alt, relatedTypes);\n-        }\n-      } else {\n-        intersectRelatedTypesOnNonUnion(type, relatedTypes);\n-      }\n-      return relatedTypes;\n-    }\n-\n-    /**\n-     * Finds all types related to the provided type and intersects them with\n-     * the given BitSet. Expects a non-union type.\n-     */\n-    private void intersectRelatedTypesOnNonUnion(\n-        JSType type, JSTypeBitSet relatedTypes) {\n-      relatedTypes.or(getRelatedTypesOnNonUnion(type));\n     }\n   }\n \n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n     protected CompilerPass createInternal(AbstractCompiler compiler) {\n       return new AmbiguateProperties(\n           compiler, options.anonymousFunctionNaming.getReservedCharacters());\n-    }\n-  };\n-\n-  /** Normalizes the AST for optimizations. */\n-  private final PassFactory normalize =\n-      new PassFactory(\"normalize\", true) {\n-    @Override\n-    protected CompilerPass createInternal(AbstractCompiler compiler) {\n-      compiler.setNormalized();\n-      return new Normalize(compiler, false);\n     }\n   };\n \n--- a/src/com/google/javascript/jscomp/InlineVariables.java\n+++ b/src/com/google/javascript/jscomp/InlineVariables.java\n     // Locals only\n     LOCALS_ONLY,\n     ALL\n-  };\n+  }\n \n   private final Mode mode;\n \n       }\n \n       boolean isNeverAssigned = refInfo.isNeverAssigned();\n-      // For values that are never assigned, only the references need to be \n+      // For values that are never assigned, only the references need to be\n       // checked.\n       if (!isNeverAssigned) {\n         Reference refInit = refInfo.getInitializingReference();\n         if (!refInfo.isWellDefined()) {\n           return false;\n         }\n-        \n+\n         Node value = refInit.getAssignedValue();\n         Preconditions.checkNotNull(value);\n         if (!(NodeUtil.isImmutableValue(value) &&\n--- a/src/com/google/javascript/jscomp/NameAnalyzer.java\n+++ b/src/com/google/javascript/jscomp/NameAnalyzer.java\n \n package com.google.javascript.jscomp;\n \n-import com.google.common.base.Joiner;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Lists;\n--- a/src/com/google/javascript/jscomp/PassConfig.java\n+++ b/src/com/google/javascript/jscomp/PassConfig.java\n \n package com.google.javascript.jscomp;\n \n-\n-\n import com.google.common.collect.Iterables;\n-import com.google.javascript.jscomp.graph.DiGraph;\n import com.google.javascript.jscomp.graph.GraphvizGraph;\n import com.google.javascript.jscomp.graph.LinkedDirectedGraph;\n \n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n \n     // The candidate definition.\n     private Node candidateDefinition = null;\n-    private JSModule candidateModule = null;\n \n     // The minimum module where the provide must appear.\n     private JSModule minimumModule = null;\n       Preconditions.checkArgument(explicitNode != node);\n       if ((candidateDefinition == null) || !NodeUtil.isExpressionNode(node)) {\n         candidateDefinition = node;\n-        candidateModule = module;\n         updateMinimumModule(module);\n       }\n     }\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n import com.google.javascript.jscomp.ControlFlowGraph.Branch;\n import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.jscomp.graph.DiGraph.DiGraphEdge;\n-import com.google.javascript.jscomp.graph.DiGraph.DiGraphNode;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;", "timestamp": 1265922131, "metainfo": ""}