{"sha": "ec09e01c8bb73de2052debfac5d70c110118f8a4", "log": "[LANG-545] Added ability to create a ConstantFuture object. Thanks to Stephen Colebourne for the patch.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java\n+++ b/src/java/org/apache/commons/lang/concurrent/ConcurrentUtils.java\n package org.apache.commons.lang.concurrent;\n \n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n \n /**\n  * <p>\n  * @version $Id$\n  */\n public class ConcurrentUtils {\n+\n     /**\n      * Private constructor so that no instances can be created. This class\n      * contains only static utility methods.\n             throw (Error) ex.getCause();\n         }\n     }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>\n+     * Gets an implementation of <code>Future</code> that is immediately done\n+     * and returns the specified constant value.\n+     * </p>\n+     * <p>\n+     * This can be useful to return a simple constant immediately from the\n+     * concurrent processing, perhaps as part of avoiding nulls.\n+     * A constant future can also be useful in testing.\n+     * </p>\n+     * \n+     * @param value  the constant value to return, may be null\n+     * @return an instance of Future that will return the value, never null\n+     */\n+    public static <T> Future<T> constantFuture(T value) {\n+        return new ConstantFuture<T>(value);\n+    }\n+\n+    static final class ConstantFuture<T> implements Future<T> {\n+        /** The constant value. */\n+        private final T value;\n+\n+        ConstantFuture(T value) {\n+            this.value = value;\n+        }\n+\n+        public boolean isDone() {\n+            return true;\n+        }\n+\n+        public T get() {\n+            return value;\n+        }\n+\n+        public T get(long timeout, TimeUnit unit) {\n+            return value;\n+        }\n+\n+        public boolean isCancelled() {\n+            return false;\n+        }\n+\n+        public boolean cancel(boolean mayInterruptIfRunning) {\n+            return false;\n+        }\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/concurrent/ConcurrentUtilsTest.java\n package org.apache.commons.lang.concurrent;\n \n import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n \n import junit.framework.TestCase;\n \n         ConcurrentUtils.handleCause(null);\n         ConcurrentUtils.handleCause(new ExecutionException(\"Test\", null));\n     }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Tests constant future.\n+     */\n+    public void testConstantFuture_Integer() throws Exception {\n+        Integer value = new Integer(5);\n+        Future<Integer> test = ConcurrentUtils.constantFuture(value);\n+        assertEquals(true, test.isDone());\n+        assertSame(value, test.get());\n+        assertSame(value, test.get(1000, TimeUnit.SECONDS));\n+        assertSame(value, test.get(1000, null));\n+        assertEquals(false, test.isCancelled());\n+        assertEquals(false, test.cancel(true));\n+        assertEquals(false, test.cancel(false));\n+    }\n+\n+    /**\n+     * Tests constant future.\n+     */\n+    public void testConstantFuture_null() throws Exception {\n+        Integer value = null;\n+        Future<Integer> test = ConcurrentUtils.constantFuture(value);\n+        assertEquals(true, test.isDone());\n+        assertSame(value, test.get());\n+        assertSame(value, test.get(1000, TimeUnit.SECONDS));\n+        assertSame(value, test.get(1000, null));\n+        assertEquals(false, test.isCancelled());\n+        assertEquals(false, test.cancel(true));\n+        assertEquals(false, test.cancel(false));\n+    }\n+\n }", "timestamp": 1257611825, "metainfo": ""}