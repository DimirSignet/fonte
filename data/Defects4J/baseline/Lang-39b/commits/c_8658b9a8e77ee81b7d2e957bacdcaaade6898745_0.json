{"sha": "8658b9a8e77ee81b7d2e957bacdcaaade6898745", "log": "[LANG-501] There was a problem with inconsistent line endings in the last commit, so the svn:eol-style property was not set. Fixing now.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java\n+++ b/src/java/org/apache/commons/lang/concurrent/CallableBackgroundInitializer.java\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.apache.commons.lang.concurrent;\n-\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.ExecutorService;\n-\n-/**\n- * <p>\n- * A specialized {@link BackgroundInitializer} implementation that wraps a\n- * {@code Callable} object.\n- * </p>\n- * <p>\n- * An instance of this class is initialized with a {@code Callable} object when\n- * it is constructed. The implementation of the {@link #initialize()} method\n- * defined in the super class delegates to this {@code Callable} so that the\n- * {@code Callable} is executed in the background thread.\n- * </p>\n- * <p>\n- * The {@code java.util.concurrent.Callable} interface is a standard mechanism\n- * of the JDK to define tasks to be executed by another thread. The {@code\n- * CallableBackgroundInitializer} class allows combining this standard interface\n- * with the background initializer API.\n- * </p>\n- * <p>\n- * Usage of this class is very similar to the default usage pattern of the\n- * {@link BackgroundInitializer} class: Just create an instance and provide the\n- * {@code Callable} object to be executed, then call the initializer's\n- * {@link #start()} method. This causes the {@code Callable} to be executed in\n- * another thread. When the results of the {@code Callable} are needed the\n- * initializer's {@link #get()} method can be called (which may block until\n- * background execution is complete). The following code fragment shows a\n- * typical usage example:\n- *\n- * <pre>\n- * // a Callable that performs a complex computation\n- * Callable<Integer> computationCallable = new MyComputationCallable();\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n  *\n- * // setup the background initializer\n- * CallableBackgroundInitializer<Integer> initializer =\n- *     new CallableBackgroundInitializer(computationCallable);\n- * initializer.start();\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * // Now do some other things. Initialization runs in a parallel thread\n- * ...\n- * // Wait for the end of initialization and access the result\n- * Integer result = initializer.get();\n- * </pre>\n- *\n- * </p>\n- *\n- * @version $Id: $\n- * @param <T> the type of the object managed by this initializer class\n- */\n-public class CallableBackgroundInitializer<T> extends BackgroundInitializer<T> {\n-    /** The Callable to be executed. */\n-    private final Callable<T> callable;\n-\n-    /**\n-     * Creates a new instance of {@code CallableBackgroundInitializer} and sets\n-     * the {@code Callable} to be executed in a background thread.\n-     *\n-     * @param call the {@code Callable} (must not be <b>null</b>)\n-     * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>\n-     */\n-    public CallableBackgroundInitializer(Callable<T> call) {\n-        checkCallable(call);\n-        callable = call;\n-    }\n-\n-    /**\n-     * Creates a new instance of {@code CallableBackgroundInitializer} and\n-     * initializes it with the {@code Callable} to be executed in a background\n-     * thread and the {@code ExecutorService} for managing the background\n-     * execution.\n-     *\n-     * @param call the {@code Callable} (must not be <b>null</b>)\n-     * @param exec an external {@code ExecutorService} to be used for task\n-     * execution\n-     * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>\n-     */\n-    public CallableBackgroundInitializer(Callable<T> call, ExecutorService exec) {\n-        super(exec);\n-        checkCallable(call);\n-        callable = call;\n-    }\n-\n-    /**\n-     * Performs initialization in a background thread. This implementation\n-     * delegates to the {@code Callable} passed at construction time of this\n-     * object.\n-     *\n-     * @return the result of the initialization\n-     * @throws Exception if an error occurs\n-     */\n-    @Override\n-    protected T initialize() throws Exception {\n-        return callable.call();\n-    }\n-\n-    /**\n-     * Tests the passed in {@code Callable} and throws an exception if it is\n-     * undefined.\n-     *\n-     * @param call the object to check\n-     * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>\n-     */\n-    private void checkCallable(Callable<T> call) {\n-        if (call == null) {\n-            throw new IllegalArgumentException(\"Callable must not be null!\");\n-        }\n-    }\n-}\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.concurrent;\n+\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+\n+/**\n+ * <p>\n+ * A specialized {@link BackgroundInitializer} implementation that wraps a\n+ * {@code Callable} object.\n+ * </p>\n+ * <p>\n+ * An instance of this class is initialized with a {@code Callable} object when\n+ * it is constructed. The implementation of the {@link #initialize()} method\n+ * defined in the super class delegates to this {@code Callable} so that the\n+ * {@code Callable} is executed in the background thread.\n+ * </p>\n+ * <p>\n+ * The {@code java.util.concurrent.Callable} interface is a standard mechanism\n+ * of the JDK to define tasks to be executed by another thread. The {@code\n+ * CallableBackgroundInitializer} class allows combining this standard interface\n+ * with the background initializer API.\n+ * </p>\n+ * <p>\n+ * Usage of this class is very similar to the default usage pattern of the\n+ * {@link BackgroundInitializer} class: Just create an instance and provide the\n+ * {@code Callable} object to be executed, then call the initializer's\n+ * {@link #start()} method. This causes the {@code Callable} to be executed in\n+ * another thread. When the results of the {@code Callable} are needed the\n+ * initializer's {@link #get()} method can be called (which may block until\n+ * background execution is complete). The following code fragment shows a\n+ * typical usage example:\n+ *\n+ * <pre>\n+ * // a Callable that performs a complex computation\n+ * Callable&lt;Integer&gt; computationCallable = new MyComputationCallable();\n+ * // setup the background initializer\n+ * CallableBackgroundInitializer&lt;Integer&gt; initializer =\n+ *     new CallableBackgroundInitializer(computationCallable);\n+ * initializer.start();\n+ * // Now do some other things. Initialization runs in a parallel thread\n+ * ...\n+ * // Wait for the end of initialization and access the result\n+ * Integer result = initializer.get();\n+ * </pre>\n+ *\n+ * </p>\n+ *\n+ * @version $Id$\n+ * @param <T> the type of the object managed by this initializer class\n+ */\n+public class CallableBackgroundInitializer<T> extends BackgroundInitializer<T> {\n+    /** The Callable to be executed. */\n+    private final Callable<T> callable;\n+\n+    /**\n+     * Creates a new instance of {@code CallableBackgroundInitializer} and sets\n+     * the {@code Callable} to be executed in a background thread.\n+     *\n+     * @param call the {@code Callable} (must not be <b>null</b>)\n+     * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>\n+     */\n+    public CallableBackgroundInitializer(Callable<T> call) {\n+        checkCallable(call);\n+        callable = call;\n+    }\n+\n+    /**\n+     * Creates a new instance of {@code CallableBackgroundInitializer} and\n+     * initializes it with the {@code Callable} to be executed in a background\n+     * thread and the {@code ExecutorService} for managing the background\n+     * execution.\n+     *\n+     * @param call the {@code Callable} (must not be <b>null</b>)\n+     * @param exec an external {@code ExecutorService} to be used for task\n+     * execution\n+     * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>\n+     */\n+    public CallableBackgroundInitializer(Callable<T> call, ExecutorService exec) {\n+        super(exec);\n+        checkCallable(call);\n+        callable = call;\n+    }\n+\n+    /**\n+     * Performs initialization in a background thread. This implementation\n+     * delegates to the {@code Callable} passed at construction time of this\n+     * object.\n+     *\n+     * @return the result of the initialization\n+     * @throws Exception if an error occurs\n+     */\n+    @Override\n+    protected T initialize() throws Exception {\n+        return callable.call();\n+    }\n+\n+    /**\n+     * Tests the passed in {@code Callable} and throws an exception if it is\n+     * undefined.\n+     *\n+     * @param call the object to check\n+     * @throws IllegalArgumentException if the {@code Callable} is <b>null</b>\n+     */\n+    private void checkCallable(Callable<T> call) {\n+        if (call == null) {\n+            throw new IllegalArgumentException(\"Callable must not be null!\");\n+        }\n+    }\n+}", "timestamp": 1258909390, "metainfo": ""}