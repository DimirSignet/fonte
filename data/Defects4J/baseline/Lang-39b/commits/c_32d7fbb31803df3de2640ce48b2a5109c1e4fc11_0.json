{"sha": "32d7fbb31803df3de2640ce48b2a5109c1e4fc11", "log": "added missing javadoc  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n     static final Object s = \"s\";\n     static final Object S = \"S\";\n     \n+    /**\n+     * Parse a classic date format string into Tokens\n+     *\n+     * @param format to parse\n+     * @return Token[] of tokens\n+     */\n     static Token[] lexx(String format) {\n         char[] array = format.toCharArray();\n         java.util.ArrayList list = new java.util.ArrayList(array.length);\n      */\n     static class Token {\n \n-        // will only work for the tokens, not for stringbuffers/numbers\n+        /**\n+         * Helper method to determine if a set of tokens contain a value\n+         *\n+         * @param tokens set to look in\n+         * @param value to look for\n+         * @return boolean <code>true</code> if contained\n+         */\n         static boolean containsTokenWithValue(Token[] tokens, Object value) {\n             int sz = tokens.length;\n             for (int i = 0; i < sz; i++) {\n         private Object value;\n         private int count;\n \n+        /**\n+         * Wrap a token around a value. A value would be something like a 'Y'.\n+         *\n+         * @param value to wrap\n+         */\n         Token(Object value) {\n             this.value = value;\n             this.count = 1;\n         }\n \n+        /**\n+         * Wrap a token around a repeated number of a value, for example it would \n+         * store 'yyyy' as a value for y and a count of 4.\n+         *\n+         * @param value to wrap\n+         * @param count to wrap\n+         */\n         Token(Object value, int count) {\n             this.value = value;\n             this.count = count;\n         }\n \n+        /**\n+         * Add another one of the value\n+         */\n         void increment() { \n             count++;\n         }\n \n+        /**\n+         * Get the current number of values represented\n+         *\n+         * @return int number of values represented\n+         */\n         int getCount() {\n             return count;\n         }\n \n+        /**\n+         * Get the particular value this token represents.\n+         * \n+         * @return Object value\n+         */\n         Object getValue() {\n             return value;\n         }\n \n+        /**\n+         * Supports equality of this Token to another Token.\n+         *\n+         * @param obj2 Object to consider equality of\n+         * @return boolean <code>true</code> if equal\n+         */\n         public boolean equals(Object obj2) {\n             if (obj2 instanceof Token) {\n                 Token tok2 = (Token) obj2;\n             }\n         }\n \n+        /**\n+         * Represent this token as a String.\n+         *\n+         * @return String representation of the token\n+         */\n         public String toString() {\n             return StringUtils.repeat(this.value.toString(), this.count);\n         }", "timestamp": 1107487851, "metainfo": ""}