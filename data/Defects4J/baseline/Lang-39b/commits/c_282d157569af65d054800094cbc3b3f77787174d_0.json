{"sha": "282d157569af65d054800094cbc3b3f77787174d", "log": "Group all the trim/strip methods together in source file   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.69 2003/07/20 00:17:29 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.70 2003/07/20 00:37:09 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     public StringUtils() {\n     }\n \n-    // Empty\n+    // Empty checks\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * <p>Checks if a String is empty (\"\") or null.\n+     * <code>null</code> returns <code>false</code></p>\n+     * \n+     * <pre>\n+     * StringUtils.isEmpty(null)      = true\n+     * StringUtils.isEmpty(\"\")        = true\n+     * StringUtils.isEmpty(\" \")       = false\n+     * StringUtils.isEmpty(\"bob\")     = false\n+     * StringUtils.isEmpty(\"  bob  \") = false\n+     * </pre>\n+     *\n+     * <p>NOTE: This method changed in version 2.0.\n+     * It no longer trims the String.\n+     * That functionality is available in isBlank().</p>\n+     * \n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is empty or null\n+     */\n+    public static boolean isEmpty(String str) {\n+        return (str == null || str.length() == 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a String is not empty (\"\") and not null.</p>\n+     * \n+     * <pre>\n+     * StringUtils.isNotEmpty(null)      = false\n+     * StringUtils.isNotEmpty(\"\")        = false\n+     * StringUtils.isNotEmpty(\" \")       = true\n+     * StringUtils.isNotEmpty(\"bob\")     = true\n+     * StringUtils.isNotEmpty(\"  bob  \") = true\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is not empty and not null\n+     */\n+    public static boolean isNotEmpty(String str) {\n+        return (str != null && str.length() > 0);\n+    }\n+\n+    /**\n+     * <p>Checks if a String is whitespace, empty (\"\") or null.</p>\n+     * \n+     * <pre>\n+     * StringUtils.isBlank(null)      = true\n+     * StringUtils.isBlank(\"\")        = true\n+     * StringUtils.isBlank(\" \")       = true\n+     * StringUtils.isBlank(\"bob\")     = false\n+     * StringUtils.isBlank(\"  bob  \") = false\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is null, empty or whitespace\n+     */\n+    public static boolean isBlank(String str) {\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return true;\n+        }\n+        for (int i = 0; i < strLen; i++) {\n+            if ((Character.isWhitespace(str.charAt(i)) == false) ) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks if a String is not empty (\"\") and not null.</p>\n+     * \n+     * <pre>\n+     * StringUtils.isNotBlank(null)      = false\n+     * StringUtils.isNotBlank(\"\")        = false\n+     * StringUtils.isNotBlank(\" \")       = false\n+     * StringUtils.isNotBlank(\"bob\")     = true\n+     * StringUtils.isNotBlank(\"  bob  \") = true\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @return <code>true</code> if the String is \n+     *  not empty and not null and not whitespace\n+     */\n+    public static boolean isNotBlank(String str) {\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return false;\n+        }\n+        for (int i = 0; i < strLen; i++) {\n+            if ((Character.isWhitespace(str.charAt(i)) == false) ) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    // Trim\n     //-----------------------------------------------------------------------\n \n     /**\n         return (str == null ? \"\" : str.trim());\n     }\n     \n-    // Empty checks\n+    // Stripping\n     //-----------------------------------------------------------------------\n-\n-    /**\n-     * <p>Checks if a String is empty (\"\") or null.\n-     * <code>null</code> returns <code>false</code></p>\n-     * \n-     * <pre>\n-     * StringUtils.isEmpty(null)      = true\n-     * StringUtils.isEmpty(\"\")        = true\n-     * StringUtils.isEmpty(\" \")       = false\n-     * StringUtils.isEmpty(\"bob\")     = false\n-     * StringUtils.isEmpty(\"  bob  \") = false\n-     * </pre>\n-     *\n-     * <p>NOTE: This method changed in version 2.0.\n-     * It no longer trims the String.\n-     * That functionality is available in isBlank().</p>\n-     * \n-     * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is empty or null\n-     */\n-    public static boolean isEmpty(String str) {\n-        return (str == null || str.length() == 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a String is not empty (\"\") and not null.</p>\n-     * \n-     * <pre>\n-     * StringUtils.isNotEmpty(null)      = false\n-     * StringUtils.isNotEmpty(\"\")        = false\n-     * StringUtils.isNotEmpty(\" \")       = true\n-     * StringUtils.isNotEmpty(\"bob\")     = true\n-     * StringUtils.isNotEmpty(\"  bob  \") = true\n-     * </pre>\n-     *\n-     * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is not empty and not null\n-     */\n-    public static boolean isNotEmpty(String str) {\n-        return (str != null && str.length() > 0);\n-    }\n-\n-    /**\n-     * <p>Checks if a String is whitespace, empty (\"\") or null.</p>\n-     * \n-     * <pre>\n-     * StringUtils.isBlank(null)      = true\n-     * StringUtils.isBlank(\"\")        = true\n-     * StringUtils.isBlank(\" \")       = true\n-     * StringUtils.isBlank(\"bob\")     = false\n-     * StringUtils.isBlank(\"  bob  \") = false\n-     * </pre>\n-     *\n-     * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is null, empty or whitespace\n-     */\n-    public static boolean isBlank(String str) {\n+    \n+    /**\n+     * <p>Strips whitespace from the start and end of a String.</p>\n+     * \n+     * <p>This is similar to {@link #trim(String)} but removes whitespace.\n+     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n+     * \n+     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.strip(null)     = null\n+     * StringUtils.strip(\"\")       = \"\"\n+     * StringUtils.strip(\"   \")    = \"\"\n+     * StringUtils.strip(\"abc\")    = \"abc\"\n+     * StringUtils.strip(\"  abc\")  = \"abc\"\n+     * StringUtils.strip(\"abc  \")  = \"abc\"\n+     * StringUtils.strip(\" abc \")  = \"abc\"\n+     * StringUtils.strip(\" ab c \") = \"ab c\"\n+     * </pre>\n+     * \n+     * @param str  the String to remove whitespace from, may be null\n+     * @return the stripped String, <code>null</code> if null String input\n+     */\n+    public static String strip(String str) {\n+        return strip(str, null);\n+    }\n+    \n+    /** \n+     * <p>Strips whitespace from the start and end of a String  returning\n+     * <code>null</code> if the String is empty (\"\") after the strip.</p>\n+     * \n+     * <p>This is similar to {@link #trimToNull(String)} but removes whitespace.\n+     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.strip(null)     = null\n+     * StringUtils.strip(\"\")       = null\n+     * StringUtils.strip(\"   \")    = null\n+     * StringUtils.strip(\"abc\")    = \"abc\"\n+     * StringUtils.strip(\"  abc\")  = \"abc\"\n+     * StringUtils.strip(\"abc  \")  = \"abc\"\n+     * StringUtils.strip(\" abc \")  = \"abc\"\n+     * StringUtils.strip(\" ab c \") = \"ab c\"\n+     * </pre>\n+     *  \n+     * @param str  the String to be stripped, may be null\n+     * @return the stripped String, \n+     *  <code>null</code> if whitespace, empty or null String input\n+     */\n+    public static String stripToNull(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        str = strip(str, null);\n+        return (str.length() == 0 ? null : str);\n+    }\n+\n+    /** \n+     * <p>Strips whitespace from the start and end of a String  returning\n+     * an empty String if <code>null</code> input.</p>\n+     * \n+     * <p>This is similar to {@link #trimToEmpty(String)} but removes whitespace.\n+     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.strip(null)     = \"\"\n+     * StringUtils.strip(\"\")       = \"\"\n+     * StringUtils.strip(\"   \")    = \"\"\n+     * StringUtils.strip(\"abc\")    = \"abc\"\n+     * StringUtils.strip(\"  abc\")  = \"abc\"\n+     * StringUtils.strip(\"abc  \")  = \"abc\"\n+     * StringUtils.strip(\" abc \")  = \"abc\"\n+     * StringUtils.strip(\" ab c \") = \"ab c\"\n+     * </pre>\n+     *  \n+     * @param str  the String to be stripped, may be null\n+     * @return the trimmed String, or an empty String if <code>null</code> input\n+     */\n+    public static String stripToEmpty(String str) {\n+        return (str == null ? \"\" : strip(str, null));\n+    }\n+    \n+    /**\n+     * <p>Strips any of a set of characters from the start and end of a String.\n+     * This is similar to {@link String#trim()} but allows the characters\n+     * to be stripped to be controlled.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * \n+     * <p>If the stripChars String is <code>null</code>, whitespace is\n+     * stripped as defined by {@link Character#isWhitespace(char)}.\n+     * Alternatively use {@link #strip(String)}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.strip(null, null)       = null\n+     * StringUtils.strip(\"abc\", null)      = \"abc\"\n+     * StringUtils.strip(\"  abc\", null)    = \"abc\"\n+     * StringUtils.strip(\"abc  \", null)    = \"abc\"\n+     * StringUtils.strip(\" abc \", null)    = \"abc\"\n+     * StringUtils.strip(\"  abcyx\", \"xyz\") = \"  abc\"\n+     * </pre>\n+     * \n+     * @param str  the String to remove characters from, may be null\n+     * @param stripChars  the characters to remove, null treated as whitespace\n+     * @return the stripped String, <code>null</code> if null String input\n+     */\n+    public static String strip(String str, String stripChars) {\n+        if (str == null || str.length() == 0) {\n+            return str;\n+        }\n+        str = stripStart(str, stripChars);\n+        return stripEnd(str, stripChars);\n+    }\n+\n+    /**\n+     * <p>Strips any of a set of characters from the start of a String.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * \n+     * <p>If the stripChars String is <code>null</code>, whitespace is\n+     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.strip(null, null)       = null\n+     * StringUtils.strip(\"abc\", null)      = \"abc\"\n+     * StringUtils.strip(\"  abc\", null)    = \"abc\"\n+     * StringUtils.strip(\"abc  \", null)    = \"abc  \"\n+     * StringUtils.strip(\" abc \", null)    = \"abc \"\n+     * StringUtils.strip(\"yxabc  \", \"xyz\") = \"abc  \"\n+     * </pre>\n+     * \n+     * @param str  the String to remove characters from, may be null\n+     * @param stripChars  the characters to remove, null treated as whitespace\n+     * @return the stripped String, <code>null</code> if null String input\n+     */\n+    public static String stripStart(String str, String stripChars) {\n         int strLen;\n         if (str == null || (strLen = str.length()) == 0) {\n-            return true;\n-        }\n-        for (int i = 0; i < strLen; i++) {\n-            if ((Character.isWhitespace(str.charAt(i)) == false) ) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks if a String is not empty (\"\") and not null.</p>\n-     * \n-     * <pre>\n-     * StringUtils.isNotBlank(null)      = false\n-     * StringUtils.isNotBlank(\"\")        = false\n-     * StringUtils.isNotBlank(\" \")       = false\n-     * StringUtils.isNotBlank(\"bob\")     = true\n-     * StringUtils.isNotBlank(\"  bob  \") = true\n-     * </pre>\n-     *\n-     * @param str  the String to check, may be null\n-     * @return <code>true</code> if the String is \n-     *  not empty and not null and not whitespace\n-     */\n-    public static boolean isNotBlank(String str) {\n-        int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n-            return false;\n-        }\n-        for (int i = 0; i < strLen; i++) {\n-            if ((Character.isWhitespace(str.charAt(i)) == false) ) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n+            return str;\n+        }\n+        int start = 0;\n+        if (stripChars == null) {\n+            while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {\n+                start++;\n+            }\n+        } else {\n+            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {\n+                start++;\n+            }\n+        }\n+        return str.substring(start);\n+    }\n+\n+    /**\n+     * <p>Strips any of a set of characters from the end of a String.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n+     * \n+     * <p>If the stripChars String is <code>null</code>, whitespace is\n+     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.strip(null, null)       = null\n+     * StringUtils.strip(\"abc\", null)      = \"abc\"\n+     * StringUtils.strip(\"  abc\", null)    = \"  abc\"\n+     * StringUtils.strip(\"abc  \", null)    = \"abc\"\n+     * StringUtils.strip(\" abc \", null)    = \" abc\"\n+     * StringUtils.strip(\"  abcyx\", \"xyz\") = \"  abc\"\n+     * </pre>\n+     * \n+     * @param str  the String to remove characters from, may be null\n+     * @param stripChars  the characters to remove, null treated as whitespace\n+     * @return the stripped String, <code>null</code> if null String input\n+     */\n+    public static String stripEnd(String str, String stripChars) {\n+        int end;\n+        if (str == null || (end = str.length()) == 0) {\n+            return str;\n+        }\n+ \n+        if (stripChars == null) {\n+            while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {\n+                end--;\n+            }\n+        } else {\n+            while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1)) {\n+                end--;\n+            }\n+        }\n+        return str.substring(0, end);\n+    }\n+\n+    // StripAll\n+    //-----------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Strips whitespace from the start and end of every String in an array.\n+     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n+     *\n+     * <p>A new array is returned each time, except for length zero.\n+     * A <code>null</code> array will return <code>null</code>.\n+     * An empty array will return itself.\n+     * A <code>null</code> array entry will be ignored.</p>\n+     * \n+     * <pre>\n+     * StringUtils.stripAll(null)             = null\n+     * StringUtils.stripAll([])               = []\n+     * StringUtils.stripAll([\"abc\", \"  abc\"]) = [\"abc\", \"abc\"]\n+     * StringUtils.stripAll([\"abc  \", null])  = [\"abc\", null]\n+     * </pre>\n+     * \n+     * @param str  the array to remove whitespace from, may be null\n+     * @return the stripped Strings, <code>null</code> if null array input\n+     */\n+    public static String[] stripAll(String[] strs) {\n+        return stripAll(strs, null);\n+    }\n+ \n+    /**\n+     * <p>Strips any of a set of characters from the start and end of every\n+     * String in an array.</p>\n+     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n+     *\n+     * <p>A new array is returned each time, except for length zero.\n+     * A <code>null</code> array will return <code>null</code>.\n+     * An empty array will return itself.\n+     * A <code>null</code> array entry will be ignored.\n+     * A <code>null</code> stripChars will strip whitespace as defined by\n+     * {@link Character#isWhitespace(char)}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.stripAll(null, null)             = null\n+     * StringUtils.stripAll([], null)               = []\n+     * StringUtils.stripAll([\"abc\", \"  abc\"], null) = [\"abc\", \"abc\"]\n+     * StringUtils.stripAll([\"abc  \", null], null)  = [\"abc\", null]\n+     * StringUtils.stripAll([\"abc  \", null], \"yz\")  = [\"abc  \", null]\n+     * StringUtils.stripAll([\"yabcz\", null], \"yz\")  = [\"abc\", null]\n+     * </pre>\n+     * \n+     * @param str  the array to remove characters from, may be null\n+     * @param stripChars  the characters to remove, null treated as whitespace\n+     * @return the stripped Strings, <code>null</code> if null array input\n+     */\n+    public static String[] stripAll(String[] strs, String stripChars) {\n+        int strsLen;\n+        if (strs == null || (strsLen = strs.length) == 0) {\n+            return strs;\n+        }\n+        String[] newArr = new String[strsLen];\n+        for (int i = 0; i < strsLen; i++) {\n+            newArr[i] = strip(strs[i], stripChars);\n+        }\n+        return newArr;\n+    }   \n \n     // Equals\n     //-----------------------------------------------------------------------\n         return str;\n     }\n \n-    // Stripping\n-    //-----------------------------------------------------------------------\n-    \n-    /**\n-     * <p>Strips whitespace from the start and end of a String.</p>\n-     * \n-     * <p>This is similar to {@link String#trim()} but instead removes whitespace.\n-     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n-     * <pre>\n-     * StringUtils.strip(null)     = null\n-     * StringUtils.strip(\"\")       = \"\"\n-     * StringUtils.strip(\"   \")    = \"\"\n-     * StringUtils.strip(\"abc\")    = \"abc\"\n-     * StringUtils.strip(\"  abc\")  = \"abc\"\n-     * StringUtils.strip(\"abc  \")  = \"abc\"\n-     * StringUtils.strip(\" abc \")  = \"abc\"\n-     * StringUtils.strip(\" ab c \") = \"ab c\"\n-     * </pre>\n-     * \n-     * @param str  the String to remove whitespace from, may be null\n-     * @return the stripped String, <code>null</code> if null String input\n-     */\n-    public static String strip(String str) {\n-        return strip(str, null);\n-    }\n-    \n-    /** \n-     * <p>Strips whitespace from the start and end of a String  returning\n-     * <code>null</code> if the String is empty (\"\") after the strip.</p>\n-     * \n-     * <p>This is similar to {@link #trimToNull()} but instead removes whitespace.\n-     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n-     * <pre>\n-     * StringUtils.strip(null)     = null\n-     * StringUtils.strip(\"\")       = null\n-     * StringUtils.strip(\"   \")    = null\n-     * StringUtils.strip(\"abc\")    = \"abc\"\n-     * StringUtils.strip(\"  abc\")  = \"abc\"\n-     * StringUtils.strip(\"abc  \")  = \"abc\"\n-     * StringUtils.strip(\" abc \")  = \"abc\"\n-     * StringUtils.strip(\" ab c \") = \"ab c\"\n-     * </pre>\n-     *  \n-     * @param str  the String to be stripped, may be null\n-     * @return the stripped String, \n-     *  <code>null</code> if whitespace, empty or null String input\n-     */\n-    public static String stripToNull(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        str = strip(str, null);\n-        return (str.length() == 0 ? null : str);\n-    }\n-\n-    /** \n-     * <p>Strips whitespace from the start and end of a String  returning\n-     * an empty String if <code>null</code> input.</p>\n-     * \n-     * <p>This is similar to {@link #trimToEmpty()} but instead removes whitespace.\n-     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n-     * <pre>\n-     * StringUtils.strip(null)     = \"\"\n-     * StringUtils.strip(\"\")       = \"\"\n-     * StringUtils.strip(\"   \")    = \"\"\n-     * StringUtils.strip(\"abc\")    = \"abc\"\n-     * StringUtils.strip(\"  abc\")  = \"abc\"\n-     * StringUtils.strip(\"abc  \")  = \"abc\"\n-     * StringUtils.strip(\" abc \")  = \"abc\"\n-     * StringUtils.strip(\" ab c \") = \"ab c\"\n-     * </pre>\n-     *  \n-     * @param str  the String to be stripped, may be null\n-     * @return the trimmed String, or an empty String if <code>null</code> input\n-     */\n-    public static String stripToEmpty(String str) {\n-        return (str == null ? \"\" : strip(str, null));\n-    }\n-    \n-    /**\n-     * <p>Strips any of a set of characters from the start and end of a String.\n-     * This is similar to {@link String#trim()} but allows the characters\n-     * to be stripped to be controlled.</p>\n-     *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n-     * <p>If the stripChars String is <code>null</code>, whitespace is\n-     * stripped as defined by {@link Character#isWhitespace(char)}.\n-     * Alternatively use {@link #strip(String)}.</p>\n-     * \n-     * <pre>\n-     * StringUtils.strip(null, null)       = null\n-     * StringUtils.strip(\"abc\", null)      = \"abc\"\n-     * StringUtils.strip(\"  abc\", null)    = \"abc\"\n-     * StringUtils.strip(\"abc  \", null)    = \"abc\"\n-     * StringUtils.strip(\" abc \", null)    = \"abc\"\n-     * StringUtils.strip(\"  abcyx\", \"xyz\") = \"  abc\"\n-     * </pre>\n-     * \n-     * @param str  the String to remove characters from, may be null\n-     * @param stripChars  the characters to remove, null treated as whitespace\n-     * @return the stripped String, <code>null</code> if null String input\n-     */\n-    public static String strip(String str, String stripChars) {\n-        if (str == null || str.length() == 0) {\n-            return str;\n-        }\n-        str = stripStart(str, stripChars);\n-        return stripEnd(str, stripChars);\n-    }\n-\n-    /**\n-     * <p>Strips any of a set of characters from the start of a String.</p>\n-     *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n-     * <p>If the stripChars String is <code>null</code>, whitespace is\n-     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n-     * <pre>\n-     * StringUtils.strip(null, null)       = null\n-     * StringUtils.strip(\"abc\", null)      = \"abc\"\n-     * StringUtils.strip(\"  abc\", null)    = \"abc\"\n-     * StringUtils.strip(\"abc  \", null)    = \"abc  \"\n-     * StringUtils.strip(\" abc \", null)    = \"abc \"\n-     * StringUtils.strip(\"yxabc  \", \"xyz\") = \"abc  \"\n-     * </pre>\n-     * \n-     * @param str  the String to remove characters from, may be null\n-     * @param stripChars  the characters to remove, null treated as whitespace\n-     * @return the stripped String, <code>null</code> if null String input\n-     */\n-    public static String stripStart(String str, String stripChars) {\n-        int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n-            return str;\n-        }\n-        int start = 0;\n-        if (stripChars == null) {\n-            while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {\n-                start++;\n-            }\n-        } else {\n-            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {\n-                start++;\n-            }\n-        }\n-        return str.substring(start);\n-    }\n-\n-    /**\n-     * <p>Strips any of a set of characters from the end of a String.</p>\n-     *\n-     * <p>A <code>null</code> input String returns <code>null</code>.</p>\n-     * \n-     * <p>If the stripChars String is <code>null</code>, whitespace is\n-     * stripped as defined by {@link Character#isWhitespace(char)}.</p>\n-     * \n-     * <pre>\n-     * StringUtils.strip(null, null)       = null\n-     * StringUtils.strip(\"abc\", null)      = \"abc\"\n-     * StringUtils.strip(\"  abc\", null)    = \"  abc\"\n-     * StringUtils.strip(\"abc  \", null)    = \"abc\"\n-     * StringUtils.strip(\" abc \", null)    = \" abc\"\n-     * StringUtils.strip(\"  abcyx\", \"xyz\") = \"  abc\"\n-     * </pre>\n-     * \n-     * @param str  the String to remove characters from, may be null\n-     * @param stripChars  the characters to remove, null treated as whitespace\n-     * @return the stripped String, <code>null</code> if null String input\n-     */\n-    public static String stripEnd(String str, String stripChars) {\n-        int end;\n-        if (str == null || (end = str.length()) == 0) {\n-            return str;\n-        }\n- \n-        if (stripChars == null) {\n-            while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {\n-                end--;\n-            }\n-        } else {\n-            while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1)) {\n-                end--;\n-            }\n-        }\n-        return str.substring(0, end);\n-    }\n-\n-    /**\n-     * <p>Strips whitespace from the start and end of every String in an array.\n-     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n-     *\n-     * <p>A new array is returned each time, except for length zero.\n-     * A <code>null</code> array will return <code>null</code>.\n-     * An empty array will return itself.\n-     * A <code>null</code> array entry will be ignored.</p>\n-     * \n-     * <pre>\n-     * StringUtils.stripAll(null)             = null\n-     * StringUtils.stripAll([])               = []\n-     * StringUtils.stripAll([\"abc\", \"  abc\"]) = [\"abc\", \"abc\"]\n-     * StringUtils.stripAll([\"abc  \", null])  = [\"abc\", null]\n-     * </pre>\n-     * \n-     * @param str  the array to remove whitespace from, may be null\n-     * @return the stripped Strings, <code>null</code> if null array input\n-     */\n-    public static String[] stripAll(String[] strs) {\n-        return stripAll(strs, null);\n-    }\n- \n-    /**\n-     * <p>Strips any of a set of characters from the start and end of every\n-     * String in an array.</p>\n-     * Whitespace is defined by {@link Character#isWhitespace(char)}.</p>\n-     *\n-     * <p>A new array is returned each time, except for length zero.\n-     * A <code>null</code> array will return <code>null</code>.\n-     * An empty array will return itself.\n-     * A <code>null</code> array entry will be ignored.\n-     * A <code>null</code> stripChars will strip whitespace as defined by\n-     * {@link Character#isWhitespace(char)}.</p>\n-     * \n-     * <pre>\n-     * StringUtils.stripAll(null, null)             = null\n-     * StringUtils.stripAll([], null)               = []\n-     * StringUtils.stripAll([\"abc\", \"  abc\"], null) = [\"abc\", \"abc\"]\n-     * StringUtils.stripAll([\"abc  \", null], null)  = [\"abc\", null]\n-     * StringUtils.stripAll([\"abc  \", null], \"yz\")  = [\"abc  \", null]\n-     * StringUtils.stripAll([\"yabcz\", null], \"yz\")  = [\"abc\", null]\n-     * </pre>\n-     * \n-     * @param str  the array to remove characters from, may be null\n-     * @param stripChars  the characters to remove, null treated as whitespace\n-     * @return the stripped Strings, <code>null</code> if null array input\n-     */\n-    public static String[] stripAll(String[] strs, String stripChars) {\n-        int strsLen;\n-        if (strs == null || (strsLen = strs.length) == 0) {\n-            return strs;\n-        }\n-        String[] newArr = new String[strsLen];\n-        for (int i = 0; i < strsLen; i++) {\n-            newArr[i] = strip(strs[i], stripChars);\n-        }\n-        return newArr;\n-    }   \n-\n     // Case conversion\n     //-----------------------------------------------------------------------\n     \n--- a/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsTrimEmptyTest.java,v 1.14 2003/07/20 00:17:29 scolebourne Exp $\n+ * @version $Id: StringUtilsTrimEmptyTest.java,v 1.15 2003/07/20 00:37:09 scolebourne Exp $\n  */\n public class StringUtilsTrimEmptyTest extends TestCase {\n     private static final String FOO = \"foo\";\n     }\n \n     //-----------------------------------------------------------------------\n-\n+    public void testIsEmpty() {\n+        assertEquals(true, StringUtils.isEmpty(null));\n+        assertEquals(true, StringUtils.isEmpty(\"\"));\n+        assertEquals(false, StringUtils.isEmpty(\" \"));\n+        assertEquals(false, StringUtils.isEmpty(\"foo\"));\n+        assertEquals(false, StringUtils.isEmpty(\"  foo  \"));\n+    }\n+\n+    public void testIsNotEmpty() {\n+        assertEquals(false, StringUtils.isNotEmpty(null));\n+        assertEquals(false, StringUtils.isNotEmpty(\"\"));\n+        assertEquals(true, StringUtils.isNotEmpty(\" \"));\n+        assertEquals(true, StringUtils.isNotEmpty(\"foo\"));\n+        assertEquals(true, StringUtils.isNotEmpty(\"  foo  \"));\n+    }\n+\n+    public void testIsBlank() {\n+        assertEquals(true, StringUtils.isBlank(null));\n+        assertEquals(true, StringUtils.isBlank(\"\"));\n+        assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE));\n+        assertEquals(false, StringUtils.isBlank(\"foo\"));\n+        assertEquals(false, StringUtils.isBlank(\"  foo  \"));\n+    }\n+\n+    public void testIsNotBlank() {\n+        assertEquals(false, StringUtils.isNotBlank(null));\n+        assertEquals(false, StringUtils.isNotBlank(\"\"));\n+        assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n+        assertEquals(true, StringUtils.isNotBlank(\"foo\"));\n+        assertEquals(true, StringUtils.isNotBlank(\"  foo  \"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testClean() {\n         assertEquals(FOO, StringUtils.clean(FOO + \"  \"));\n         assertEquals(FOO, StringUtils.clean(\" \" + FOO + \"  \"));\n         assertEquals(\"\", StringUtils.trimToEmpty(null));\n     }\n \n-    public void testIsEmpty() {\n-        assertEquals(true, StringUtils.isEmpty(null));\n-        assertEquals(true, StringUtils.isEmpty(\"\"));\n-        assertEquals(false, StringUtils.isEmpty(\" \"));\n-        assertEquals(false, StringUtils.isEmpty(\"foo\"));\n-        assertEquals(false, StringUtils.isEmpty(\"  foo  \"));\n-    }\n-\n-    public void testIsNotEmpty() {\n-        assertEquals(false, StringUtils.isNotEmpty(null));\n-        assertEquals(false, StringUtils.isNotEmpty(\"\"));\n-        assertEquals(true, StringUtils.isNotEmpty(\" \"));\n-        assertEquals(true, StringUtils.isNotEmpty(\"foo\"));\n-        assertEquals(true, StringUtils.isNotEmpty(\"  foo  \"));\n-    }\n-\n-    public void testIsBlank() {\n-        assertEquals(true, StringUtils.isBlank(null));\n-        assertEquals(true, StringUtils.isBlank(\"\"));\n-        assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE));\n-        assertEquals(false, StringUtils.isBlank(\"foo\"));\n-        assertEquals(false, StringUtils.isBlank(\"  foo  \"));\n-    }\n-\n-    public void testIsNotBlank() {\n-        assertEquals(false, StringUtils.isNotBlank(null));\n-        assertEquals(false, StringUtils.isNotBlank(\"\"));\n-        assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n-        assertEquals(true, StringUtils.isNotBlank(\"foo\"));\n-        assertEquals(true, StringUtils.isNotBlank(\"  foo  \"));\n-    }\n-\n+    //-----------------------------------------------------------------------\n     public void testStrip_String() {\n         assertEquals(null, StringUtils.strip(null));\n         assertEquals(\"\", StringUtils.strip(\"\"));", "timestamp": 1058661429, "metainfo": ""}