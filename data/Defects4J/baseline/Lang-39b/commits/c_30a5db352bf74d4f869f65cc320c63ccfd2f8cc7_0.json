{"sha": "30a5db352bf74d4f869f65cc320c63ccfd2f8cc7", "log": "Javadoc formatting patch, by Fredrik Westermarck   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n import org.apache.commons.lang.builder.ToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n /**\n- * <code>ArrayUtils</code> contains utility methods for working for\n- * arrays.\n+ * <p><code>ArrayUtils</code> contains utility methods for working for\n+ * arrays.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n  * @author Moritz Petersen\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n- * @version $Id: ArrayUtils.java,v 1.3 2002/11/15 00:25:45 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.4 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n     public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];\n     \n     /**\n-     * ArrayUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <p>ArrayUtils instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>ArrayUtils.clone(new int[] {2})</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n      */\n     public ArrayUtils() {\n     }\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Outputs an array as a String, treating <code>null</code> as an empty array.\n-     * <p>\n-     * Multi-dimensional arrays are handled correctly, including \n-     * multi-dimensional primitive arrays.\n-     * The format is that of Java source code, for example {a,b}.\n+     * <p>Outputs an array as a String, treating <code>null</code> as an empty array.</p>\n+     *\n+     * <p>Multi-dimensional arrays are handled correctly, including\n+     * multi-dimensional primitive arrays.</p>\n+     *\n+     * <p>The format is that of Java source code, for example {a,b}.</p>\n      * \n      * @param array  the array to get a toString for, may not be <code>null</code>\n      * @return a String representation of the array, '{}' if <code>null</code> passed in\n     }\n     \n     /**\n-     * Outputs an array as a String handling <code>null</code>s.\n-     * <p>\n-     * Multi-dimensional arrays are handled correctly, including \n-     * multi-dimensional primitive arrays.\n-     * The format is that of Java source code, for example {a,b}.\n+     * <p>Outputs an array as a String handling <code>null</code>s.</p>\n+     *\n+     * <p>Multi-dimensional arrays are handled correctly, including\n+     * multi-dimensional primitive arrays.</p>\n+     *\n+     * <p>The format is that of Java source code, for example {a,b}.</p>\n      * \n      * @param array  the array to get a toString for, may be <code>null</code>\n      * @param stringIfNull  the String to return if the array is <code>null</code>\n     }\n     \n     /**\n-     * Converts the given array into a {@link Map}. Each element of the array \n+     * <p>Converts the given array into a {@link Map}. Each element of the array\n      * must be either a {@link Map.Entry} or an Array, containing at least two\n      * elements, where the first element is used as key and the second as\n-     * value. This method can be used to initialize:\n-     * \n+     * value.</p>\n+     *\n+     * <p>This method can be used to initialize:</p>\n      * <pre>\n      * // Create a Map mapping colors.\n      * Map colorMap = MapUtils.toMap(new String[][] {{\n      *\n      * @param array  an array whose elements are either a {@link Map.Entry} or \n      *  an Array containing at least two elements\n-     * @return a Map that was created from the array\n+     * @return a <code>Map</code> that was created from the array\n      * @throws IllegalArgumentException  if the array is <code>null</code>\n      * @throws IllegalArgumentException  if one element of this Array is\n      *  itself an Array containing less then two elements\n     }\n     \n //    /**\n-//     * Output the array as a String.\n-//     * <p>\n-//     * Multi-dimensional arrays are handled by the Object[] method.\n-//     * The format is that of Java source code, for example {1,2}.\n+//     * <p>Output the array as a String.</p>\n+//     *\n+//     * <p>Multi-dimensional arrays are handled by the Object[] method.</p>\n+//     *\n+//     * <p>The format is that of Java source code, for example {1,2}.</p>\n //     * \n //     * @param array  the array to get a toString for, must not be <code>null</code>\n //     * @return a String representation of the array\n //    }\n //    \n //    /**\n-//     * Output the array as a String.\n-//     * <p>\n-//     * Multi-dimensional arrays are handled by the Object[] method.\n-//     * The format is that of Java source code, for example {1,2}.\n+//     * <p>Output the array as a String.</p>\n+//     *\n+//     * <p>Multi-dimensional arrays are handled by the Object[] method.</p>\n+//     *\n+//     * <p>The format is that of Java source code, for example {1,2}.</p>\n //     * \n //     * @param array  the array to get a toString for, must not be <code>null</code>\n //     * @return a String representation of the array\n //    }\n //    \n //    /**\n-//     * Output the array as a String.\n-//     * <p>\n-//     * Multi-dimensional arrays are handled by the Object[] method.\n-//     * The format is that of Java source code, for example {1,2}.\n+//     * <p>Output the array as a String.</p>\n+//     *\n+//     * <p>Multi-dimensional arrays are handled by the Object[] method.</p>\n+//     *\n+//     * <p>The format is that of Java source code, for example {1,2}.</p>\n //     * \n //     * @param array  the array to get a toString for, must not be <code>null</code>\n //     * @return a String representation of the array\n //    }\n //    \n //    /**\n-//     * Output the array as a String.\n-//     * <p>\n-//     * Multi-dimensional arrays are handled by the Object[] method.\n-//     * The format is that of Java source code, for example {1,2}.\n+//     * <p>Output the array as a String.</p>\n+//     *\n+//     * <p>Multi-dimensional arrays are handled by the Object[] method.</p>\n+//     *\n+//     * <p>The format is that of Java source code, for example {1,2}.</p>\n //     * \n //     * @param array  the array to get a toString for, must not be <code>null</code>\n //     * @return a String representation of the array\n //    }\n //    \n //    /**\n-//     * Output the array as a String.\n-//     * <p>\n-//     * Multi-dimensional arrays are handled by the Object[] method.\n-//     * The format is that of Java source code, for example {1.0,2.0}.\n+//     * <p>Output the array as a String.</p>\n+//     *\n+//     * <p>Multi-dimensional arrays are handled by the Object[] method.</p>\n+//     *\n+//     * <p>The format is that of Java source code, for example {1.0,2.0}.</p>\n //     * \n //     * @param array  the array to get a toString for, must not be <code>null</code>\n //     * @return a String representation of the array\n //    }\n //    \n //    /**\n-//     * Output the array as a String.\n-//     * <p>\n-//     * Multi-dimensional arrays are handled by the Object[] method.\n-//     * The format is that of Java source code, for example {1.0,2.0}.\n+//     * <p>Output the array as a String.</p>\n+//     *\n+//     * <p>Multi-dimensional arrays are handled by the Object[] method.</p>\n+//     *\n+//     * <p>The format is that of Java source code, for example {1.0,2.0}.</p>\n+//     *\n+//     * @param array  the array to get a toString for, must not be <code>null</code>\n+//     * @return a String representation of the array\n+//     * @throws IllegalArgumentException if the array is <code>null</code>\n+//     */\n+//    public static String toString(float[] array) {\n+//        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n+//    }\n+//    \n+//    /**\n+//     * <p>Output the array as a String.</p>\n+//     *\n+//     * <p>Multi-dimensional arrays are handled by the Object[] method.</p>\n+//     *\n+//     * <p>The format is that of Java source code, for example {true,false}.</p>\n //     * \n //     * @param array  the array to get a toString for, must not be <code>null</code>\n //     * @return a String representation of the array\n //     * @throws IllegalArgumentException if the array is <code>null</code>\n //     */\n-//    public static String toString(float[] array) {\n-//        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n-//    }\n-//    \n-//    /**\n-//     * Output the array as a String.\n-//     * <p>\n-//     * Multi-dimensional arrays are handled by the Object[] method.\n-//     * The format is that of Java source code, for example {true,false}.\n-//     * \n-//     * @param array  the array to get a toString for, must not be <code>null</code>\n-//     * @return a String representation of the array\n-//     * @throws IllegalArgumentException if the array is <code>null</code>\n-//     */\n //    public static String toString(boolean[] array) {\n //        return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();\n //    }\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Shallow clones an array returning a typecast result and handling <code>null</code>.\n-     * <p>\n-     * The objecs in the array are not cloned.\n+     * <p>Shallow clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     *\n+     * <p>The objecs in the array are not cloned.</p>\n      * \n      * @param array  the array to shallow clone, may not be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n+     * @return the cloned array, or <code>null</code> if <code>null</code>\n+     *  passed in\n      */\n     public static Object[] clone(Object[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling <code>null</code>.\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code>\n+     *  passed in\n      */\n     public static long[] clone(long[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling <code>null</code>.\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code>\n+     *  passed in\n      */\n     public static int[] clone(int[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling <code>null</code>.\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code>\n+     *  passed in\n      */\n     public static short[] clone(short[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling <code>null</code>.\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code>\n+     *  passed in\n      */\n     public static byte[] clone(byte[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling <code>null</code>.\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code>\n+     *  passed in\n      */\n     public static double[] clone(double[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling <code>null</code>.\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code>\n+     *  passed in\n      */\n     public static float[] clone(float[] array) {\n         if (array == null) {\n     }\n     \n     /**\n-     * Clones an array returning a typecast result and handling <code>null</code>.\n-     * \n-     * @param array  the array to clone, may not be <code>null</code>\n-     * @return the cloned array, or <code>null</code> if <code>null</code> passed in\n+     * <p>Clones an array returning a typecast result and handling\n+     * <code>null</code>.</p>\n+     * \n+     * @param array  the array to clone, may not be <code>null</code>\n+     * @return the cloned array, or <code>null</code> if <code>null</code>\n+     *  passed in\n      */\n     public static boolean[] clone(boolean[] array) {\n         if (array == null) {\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Checks whether two arrays are the same length, treating <code>null</code> \n-     * arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating <code>null</code> \n-     * arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating <code>null</code> \n-     * arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating <code>null</code> \n-     * arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating <code>null</code> \n-     * arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating <code>null</code> \n-     * arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating <code>null</code> \n-     * arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored</p>.\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n     }\n     \n     /**\n-     * Checks whether two arrays are the same length, treating <code>null</code> \n-     * arrays as length 0.\n-     * Any multi-dimensional aspects of the arrays are ignored.\n+     * <p>Checks whether two arrays are the same length, treating\n+     * <code>null</code> arrays as length <code>0</code>.</p>\n+     *\n+     * <p>Any multi-dimensional aspects of the arrays are ignored.</p>\n      * \n      * @param array1 the first array, may be <code>null</code>\n      * @param array2 the second array, may be <code>null</code>\n     }\n     \n     /**\n-     * Checks whether two arrays are the same type taking into account\n-     * multi-dimensional arrays.\n+     * <p>Checks whether two arrays are the same type taking into account\n+     * multi-dimensional arrays.</p>\n      * \n      * @param array1 the first array, must not be <code>null</code>\n      * @param array2 the second array, must not be <code>null</code>\n--- a/src/java/org/apache/commons/lang/CharRange.java\n+++ b/src/java/org/apache/commons/lang/CharRange.java\n  */\n \n /**\n- * A range of characters. Able to understand the idea of a contiguous \n- * sublist of an alphabet, a negated concept, and a set of characters.\n- * Used by CharSet to handle sets of characters.\n+ * <p>A range of characters. Able to understand the idea of a contiguous\n+ * sublist of an alphabet, a negated concept, and a set of characters.</p>\n+ *\n+ * <p>Used by <code>CharSet</code> to handle sets of characters.</p>\n  *\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: CharRange.java,v 1.1 2002/07/19 03:35:54 bayard Exp $\n+ * @version $Id: CharRange.java,v 1.2 2002/11/16 10:41:03 scolebourne Exp $\n  */\n class CharRange {\n \n     private boolean negated;\n \n     /**\n-     * Construct a CharRange over a single character.\n+     * <p>Construct a <code>CharRange</code> over a single character.</p>\n      *\n      * @param start char over which this range is placed\n      */\n     }\n \n     /**\n-     * Construct a CharRange over a set of characters.\n+     * <p>Construct a <code>CharRange</code> over a set of characters.</p>\n      *\n      * @param start  char start character in this range. inclusive\n      * @param close  char close character in this range. inclusive\n     }\n \n     /**\n-     * Construct a CharRange over a set of characters.\n+     * <p>Construct a <code>CharRange</code> over a set of characters.</p>\n      *\n      * @param start  String start first character is in this range (inclusive).\n      * @param close  String first character is close character in this\n-     * range (inclusive).\n+     *  range (inclusive).\n      */\n     public CharRange(String start, String close) {\n         this.start = start.charAt(0);\n     }\n \n     /**\n-     * Get the start character for this character range\n+     * <p>Get the start character for this character range.</p>\n      * \n      * @return start char (inclusive)\n      */\n     }\n \n     /**\n-     * Get the end character for this character range\n+     * <p>Get the end character for this character range.</p>\n      * \n      * @return end char (inclusive)\n      */\n     }\n \n     /**\n-     * Set the start character for this character range\n+     * <p>Set the start character for this character range.</p>\n      * \n      * @param ch  start char (inclusive)\n      */\n     }\n \n     /**\n-     * Set the end character for this character range\n+     * <p>Set the end character for this character range.</p>\n      * \n      * @param ch  start char (inclusive)\n      */\n     }\n \n     /**\n-     * Is this CharRange over many characters\n-     *\n-     * @return boolean true is many characters\n+     * <p>Is this <code>CharRange</code> over many characters.</p>\n+     *\n+     * @return boolean <code>true</code> is many characters\n      */\n     public boolean isRange() {\n         return this.close != UNSET;\n     }\n \n     /**\n-     * Is the passed in character inside this range\n-     *\n-     * @return boolean true is in range\n+     * <p>Is the passed in character <code>ch</code> inside\n+     * this range.</p>\n+     *\n+     * @return boolean <code>true</code> is in range\n      */\n     public boolean inRange(char ch) {\n         if(isRange()) {\n     }\n \n     /**\n-     * Checks if this CharRange is negated.\n-     *\n-     * @return boolean true is negated\n+     * <p>Checks if this <code>CharRange</code> is negated.</p>\n+     *\n+     * @return boolean <code>true</code> is negated\n      */\n     public boolean isNegated() {\n         return negated;\n     }\n \n     /**\n-     * Sets this character range to be negated or not. \n-     * This implies that this CharRange is over all characters except \n-     * the ones in this range.\n-     * \n-     * @param negated  true to negate the range\n+     * <p>Sets this character range to be negated or not.</p>\n+     *\n+     * <p>This implies that this <code>CharRange</code> is over\n+     * all characters except the ones in this range.</p>\n+     * \n+     * @param negated  <code>true</code> to negate the range\n      */\n     public void setNegated(boolean negated) {\n         this.negated = negated;\n     }\n \n     /**\n-     * Output a string representation of the character range\n+     * <p>Output a string representation of the character range.</p>\n      * \n      * @return string representation\n      */\n--- a/src/java/org/apache/commons/lang/CharSet.java\n+++ b/src/java/org/apache/commons/lang/CharSet.java\n import java.util.List;\n \n /**\n- * A set of characters. You can iterate over the characters in the \n- * set. \n+ * <p>A set of characters. You can iterate over the characters in the\n+ * set.</p>\n  *\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: CharSet.java,v 1.5 2002/10/09 04:35:03 sullis Exp $\n+ * @version $Id: CharSet.java,v 1.6 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class CharSet {\n \n     private List set = new LinkedList();\n \n     /**\n-     * Restricted constructor. Use the factory method evaluateSet().\n+     * <p>Restricted constructor.</p>\n      *\n-     * @throws NullPointerException if any of set[i] is null or if set is null\n+     * <p>Use the factory method\n+     * {@link CharSetUtils#evaluateSet(java.lang.String[])}.</p>\n+     *\n+     * @throws NullPointerException if any of set[i] is <code>null</code>\n+     *  or if set is <code>null</code>\n      */\n     protected CharSet(String[] set) {\n         int sz = set.length;\n     }\n \n     /**\n-     * Does the set contain the character specified\n+     * <p>Does the <code>CharSet</code> contain the specified\n+     * character <code>ch</code>.</p>\n      * \n      * @param ch  the character to check for\n-     * @return true if it does contain it\n+     * @return <code>true</code> if it does contain the character\n+     *  <code>ch</code>\n      */\n     public boolean contains(char ch) {\n         Iterator iterator = set.iterator();\n     }\n \n     /**\n-     * Add a set definition string to the set\n+     * <p>Add a set definition string to the <code>CharSet</code>.</p>\n      * \n      * @param str  set definition string\n-     * @throws NullPointerException if str is null\n+     * @throws NullPointerException if <code>str</code> is <code>null</code>\n      */\n     protected void add(String str) {\n         int sz = str.length();\n     }\n \n     /**\n-     * Returns a string representation of the set\n+     * <p>Returns a string representation of the set.</p>\n      * \n      * @return string representation\n      */\n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n  */\n \n /**\n- * Numerous routines to manipulate a character set.\n+ * <p>Numerous routines to manipulate a <code>CharSet</code>.</p>\n  *\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: CharSetUtils.java,v 1.6 2002/09/29 08:20:52 bayard Exp $\n+ * @version $Id: CharSetUtils.java,v 1.7 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class CharSetUtils {\n \n     /**\n-     * CharSetUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>CharSetUtils.evaluateSet(null);</code>.\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <p>CharSetUtils instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>CharSetUtils.evaluateSet(null);</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n      */\n     public CharSetUtils() {\n     }\n \n     /**\n-     * Creates a CharSetUtils object which allows a certain amount of \n-     * set logic to be performed upon the following syntax:\n-     *\n-     * \"aeio\" which implies 'a','e',..\n-     * \"^e\" implies not e. However it only negates, it's not \n-     * a set in itself due to the size of that set in unicode.\n-     * \"ej-m\" implies e,j->m. e,j,k,l,m.\n+     * <p>Creates a CharSetUtils object which allows a certain amount of\n+     * set logic to be performed upon the following syntax:</p>\n+     *\n+     * <ul>\n+     *  <li>\"aeio\" which implies 'a','e',..\n+     *  <li>\"^e\" implies not e. However it only negates, it's not\n+     *   a set in itself due to the size of that set in unicode.\n+     *  <li>\"ej-m\" implies e,j->m. e,j,k,l,m.\n+     * </ul>\n+     *\n      * @param set\n      * @return CharSet\n      * @throws NullPointerException if any of set[i] is null or if set is null\n-     * @param set\n-     * @return CharSet\n      */\n     public static CharSet evaluateSet(String[] set) {\n         return new CharSet(set); \n     }\n \n     /**\n-     * Squeezes any repititions of a character that is mentioned in the \n-     * supplied set. An example is:\n-     *    squeeze(\"hello\", \"el\")  => \"helo\"\n-     * See evaluateSet for set-syntax.\n-     * \n+     * <p>Squeezes any repititions of a character that is mentioned in the\n+     * supplied set.</p>\n+     *\n+     * <p>An example is:</p>\n+     * <ul>\n+     *  <li>squeeze(\"hello\", \"el\")  => \"helo\"\n+     * </ul>\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n+     *\n      * @param str  the string to work from\n      * @param set  the character set to use for manipulation\n      */\n     }\n \n     /**\n-     * Squeezes any repititions of a character that is mentioned in the \n-     * supplied set. An example is:\n-     *    squeeze(\"hello\", {\"el\"})  => \"helo\"\n-     * See evaluateSet for set-syntax.\n+     * <p>Squeezes any repititions of a character that is mentioned in the\n+     * supplied set.</p>\n+     *\n+     * <p>An example is:</p>\n+     * <ul>\n+     *   <li>squeeze(\"hello\", {\"el\"})  => \"helo\"\n+     * </ul>\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * \n      * @param str  the string to work from\n      * @param set  the character set to use for manipulation\n-     * @throws NullPointerException if str is null\n+     * @throws NullPointerException if <code>str</code> is\n+     *  <code>null</code>\n      */\n     public static String squeeze(String str, String[] set) {\n         CharSet chars = evaluateSet(set);\n     }\n \n     /**\n-     * Takes an argument in set-syntax, see evaluateSet,\n-     * and returns the number of characters present in the specified string.\n-     * An example would be:   count(\"hello\", {\"c-f\",\"o\"}) returns 2.\n+     * <p>Takes an argument in set-syntax, see evaluateSet,\n+     * and returns the number of characters present in the specified string.</p>\n+     *\n+     * <p>An example would be:</p>\n+     * <ul>\n+     *   <li>count(\"hello\", {\"c-f\",\"o\"}) returns 2.\n+     * </ul>\n      *\n      * @param str  String target to count characters in\n      * @param set  String set of characters to count\n     }\n     \n     /**\n-     * Takes an argument in set-syntax, see evaluateSet,\n-     * and returns the number of characters present in the specified string.\n-     * An example would be:   count(\"hello\", {\"c-f\",\"o\"}) returns 2.\n+     * <p>Takes an argument in set-syntax, see evaluateSet,\n+     * and returns the number of characters present in the specified string.</p>\n+     *\n+     * An example would be:</p>\n+     * <ul>\n+     *  <li>count(\"hello\", {\"c-f\",\"o\"}) returns 2.\n+     * </ul>\n      *\n      * @param str  String target to count characters in\n      * @param set  String[] set of characters to count\n     }\n \n     /**\n-     * Takes an argument in set-syntax, see evaluateSet,\n-     * and deletes any of characters present in the specified string.\n-     * An example would be:   delete(\"hello\", {\"c-f\",\"o\"}) returns \"hll\"\n+     * <p>Takes an argument in set-syntax, see evaluateSet,\n+     * and deletes any of characters present in the specified string.</p>\n+     *\n+     * <p>An example would be:</p>\n+     * <ul>\n+     *   <li>delete(\"hello\", {\"c-f\",\"o\"}) returns \"hll\"\n+     * </ul>\n      *\n      * @param str  String target to delete characters from\n      * @param set  String set of characters to delete\n     }\n     \n     /**\n-     * Takes an argument in set-syntax, see evaluateSet,\n-     * and deletes any of characters present in the specified string.\n-     * An example would be:   delete(\"hello\", {\"c-f\",\"o\"}) returns \"hll\"\n+     * <p>Takes an argument in set-syntax, see evaluateSet,\n+     * and deletes any of characters present in the specified string.</p>\n+     *\n+     * <p>An example would be:</p>\n+     * <ul>\n+     *  <li>delete(\"hello\", {\"c-f\",\"o\"}) returns \"hll\"\n+     * </ul>\n      *\n      * @param str  String target to delete characters from\n      * @param set  String[] set of characters to delete\n-     * @throws NullPointerException of str is null\n+     * @throws NullPointerException of <code>str</code> is\n+     *  <code>null</code>\n      */\n     public static String delete(String str, String[] set) {\n         CharSet chars = evaluateSet(set);\n     }\n \n     /**\n-     * Translate characters in a String.\n-     * An example is:  translate(\"hello\", \"ho\", \"jy\") => jelly\n-     * If the length of characters to search for is greater than the \n+     * <p>Translate characters in a String.</p>\n+     *\n+     * <p>An example is:</p>\n+     * <ul>\n+     *   <li>translate(\"hello\", \"ho\", \"jy\") => jelly\n+     * </ul>\n+     *\n+     * <p>If the length of characters to search for is greater than the\n      * length of characters to replace, then the last character is \n-     * used.\n-     *\n-     * @param target String to replace characters  in\n+     * used.</p>\n+     *\n+     * @param target String to replace characters in\n      * @param repl String to find that will be replaced\n      * @param with String to put into the target String\n-     * @throws NullPointerException if target, with or repl is null\n+     * @throws NullPointerException if <code>target</code>, with\n+     *  or <code>repl</code> is <code>null</code>\n      */\n     public static String translate(String target, String repl, String with) {\n         StringBuffer buffer = new StringBuffer(target.length());\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n import java.util.Iterator;\n import java.util.List;\n /**\n- * <code>ClassUtils</code> contains utility methods for working for\n- * classes without using reflection.\n+ * <p><code>ClassUtils</code> contains utility methods for working for\n+ * classes without using reflection.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n- * @version $Id: ClassUtils.java,v 1.4 2002/11/14 22:29:25 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.5 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class ClassUtils {\n \n     /**\n-     * ClassUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>ClassUtils.getShortClassName(cls)</code>.\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <p>ClassUtils instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as\n+     * <code>ClassUtils.getShortClassName(cls)</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n      */\n     public ClassUtils() {\n     }\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets the class name minus the package name from a Class.\n-     * \n-     * @param cls  the class to get the short name for, must not be <code>null</code>\n+     * <p>Gets the class name minus the package name from a\n+     * <code>Class</code>.</p>\n+     * \n+     * @param cls  the class to get the short name for, must not be\n+     *  <code>null</code>\n      * @return the class name without the package name\n      * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     }\n     \n     /**\n-     * Gets the class name minus the package name for an Object.\n-     * \n-     * @param object  the class to get the short name for, must not be <code>null</code>\n+     * <p>Gets the class name minus the package name for an\n+     * <code>Object</code>.</p>\n+     * \n+     * @param object  the class to get the short name for, must not be\n+     *  <code>null</code>\n      * @return the class name of the object without the package name\n      * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n     }\n     \n     /**\n-     * Gets the class name minus the package name from a String.\n-     * <p>\n-     * The string passed in is assumed to be a class name - it is not checked.\n+     * <p>Gets the class name minus the package name from a String.</p>\n+     *\n+     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n      * \n      * @param className  the className to get the short name for, must not be empty\n      * @return the class name of the class without the package name\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets the package name of a Class.\n-     * \n-     * @param cls  the class to get the package name for, must not be <code>null</code>\n+     * <p>Gets the package name of a <code>Class</code>.</p>\n+     * \n+     * @param cls  the class to get the package name for, must not be\n+     *  <code>null</code>\n      * @return the package name\n      * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     }\n     \n     /**\n-     * Gets the package name of an Object.\n-     * \n-     * @param object  the class to get the package name for, must not be <code>null</code>\n+     * <p>Gets the package name of an <code>Object</code>.</p>\n+     * \n+     * @param object  the class to get the package name for, must not be\n+     *  <code>null</code>\n      * @return the package name\n      * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n     }\n     \n     /**\n-     * Gets the package name from a String.\n-     * <p>\n-     * The string passed in is assumed to be a class name - it is not checked.\n+     * <p>Gets the package name from a <code>String</code>.</p>\n+     *\n+     * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n      * \n      * @param className  the className to get the package name for, must not be empty\n      * @return the package name\n     // -------------------------------------------------------------------------\n     \n     /**\n-     * Gets a list of superclasses for the given class.\n+     * <p>Gets a <code>List</code> of superclasses for the given class.</p>\n      * \n      * @param cls  the class to look up, must not be <code>null</code>\n-     * @return the list of superclasses in order going up from this one\n+     * @return the <code>List</code> of superclasses in order going up from this one\n      * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static List getAllSuperclasses(Class cls) {\n     }\n     \n     /**\n-     * Gets a list of all interfaces implemented by the given class.\n-     * <p>\n-     * The order is determined by looking through each interface in turn as\n+     * <p>Gets a <code>List</code> of all interfaces implemented by the given\n+     * class.</p>\n+     *\n+     * <p>The order is determined by looking through each interface in turn as\n      * declared in the source file and following its hieracrchy up. Later\n-     * duplicates are ignored, so the order is maintained.\n+     * duplicates are ignored, so the order is maintained.</p>\n      * \n      * @param cls  the class to look up, must not be <code>null</code>\n-     * @return the list of interfaces in order\n+     * @return the <code>List</code> of interfaces in order\n      * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static List getAllInterfaces(Class cls) {\n     }\n     \n //    /**\n-//     * Gets a list of subclasses of the specified class.\n-//     * <p>\n-//     * This method searches the classpath to find all the subclasses\n+//     * <p>Gets a <code>List</code> of subclasses of the specified class.</p>\n+//     *\n+//     * <p>This method searches the classpath to find all the subclasses\n //     * of a particular class available. No classes are loaded, the \n-//     * returned list contains class names, not classes.\n+//     * returned list contains class names, not classes.</p>\n //     *\n //     * @param cls  the class to find subclasses for\n-//     * @return the list of subclass String class names\n+//     * @return the <code>List</code> of subclass String class names\n //     * @throws IllegalArgumentException if the class is <code>null</code>\n //     */\n //    public static List getAllSubclassNames(Class cls) {\n //    }\n \n //    /**\n-//     * Gets a list of subclasses of the specified class.\n-//     * <p>\n-//     * This method searches the classpath to find all the subclasses\n-//     * of a particular class available.\n+//     * <p>Gets a <code>List</code> of subclasses of the specified class.</p>\n+//     *\n+//     * <p>This method searches the classpath to find all the subclasses\n+//     * of a particular class available.</p>\n //     *\n //     * @param cls  the class to find subclasses for\n-//     * @return the list of subclasses\n+//     * @return the <code>List</code> of subclasses\n //     * @throws IllegalArgumentException if the class is <code>null</code>\n //     */\n //    public static List getAllSubclasses(Class cls) {\n //    }\n \n //    /**\n-//     * Gets a list of implementations of the specified interface.\n-//     * <p>\n-//     * This method searches the classpath to find all the implementations\n+//     * <p>Gets a <code>List</code> of implementations of the specified interface.</p>\n+//     *\n+//     * <p>This method searches the classpath to find all the implementations\n //     * of a particular interface available. No classes are loaded, the \n-//     * returned list contains class names, not classes.\n+//     * returned list contains class names, not classes.</p>\n //     *\n //     * @param cls  the class to find sub classes for\n-//     * @return the list of implementation String class names\n+//     * @return the <code>List</code> of implementation String class names\n //     * @throws IllegalArgumentException if the class is <code>null</code>\n //     */\n //    public static List getAllImplementationClassNames(Class cls) {\n //    }\n \n     /**\n-     * Given a list of class names, this method converts them into classes.\n-     * A new list is returned. If the class name cannot be found, <code>null</code>\n-     * is stored in the list. If the class name in the list is <code>null</code>,\n-     * <code>null</code> is stored in the output list.\n+     * <p>Given a <code>List</code> of class names, this method converts them into classes.     *\n+     * A new <code>List</code> is returned. If the class name cannot be found, <code>null</code>\n+     * is stored in the <code>List</code>. If the class name in the <code>List</code> is\n+     * <code>null</code>, <code>null</code> is stored in the output <code>List</code>.</p>\n      * \n      * @param classNames  the classNames to change, the class is stored back\n-     *  into the list. <code>null</code> will be stored in the list if no class is found.\n-     * @return the list of Class objects corresponding to the class names\n+     *  into the <code>List</code>. <code>null</code> will be stored in the <code>List</code>\n+     *  if no class is found.\n+     * @return the <code>List</code> of Class objects corresponding to the class names\n      * @throws IllegalArgumentException if the classNames is <code>null</code>\n      */\n     public static List convertClassNamesToClasses(List classNames) {\n     }\n     \n     /**\n-     * Given a list of classes, this method finds all those which are\n-     * subclasses or implementations of a specified superclass.\n+     * <p>Given a <code>List</code> of classes, this method finds all those which\n+     * are subclasses or implementations of a specified superclass.</p>\n      * \n      * @param classes  the classes to check\n      * @param superclass  the superclass to check for\n     }\n \n     /**\n-     * Checks if an array of Classes can be assigned to another array of Classes.\n-     * <p>\n-     * This can be used to check if parameter types are suitably compatable for\n-     * reflection invocation.\n-     * <p>\n-     * Unlike the Class.isAssignableFrom method, this method takes into \n-     * account widenings of primitive classes and <code>null</code>s.\n-     * <p>\n-     * Primitive widenings allow an int to be assigned to a long, float or \n-     * double. This method returns the correct result for these cases.\n-     * <p>\n-     * <code>Null</code> may be assigned to any reference type. This method will return\n-     * true if <code>null</code> is passed in and the toClass is non-primitive.\n-     * <p>\n-     * Specifically, this method tests whether the type represented by the\n+     * <p>Checks if an array of Classes can be assigned to another array of Classes.</p>\n+     *\n+     * <p>This can be used to check if parameter types are suitably compatable for\n+     * reflection invocation.</p>\n+     *\n+     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this\n+     * method takes into account widenings of primitive classes and\n+     * <code>null</code>s.</p>\n+     *\n+     * <p>Primitive widenings allow an int to be assigned to a <code>long</code>,\n+     * <code>float</code> or <code>double</code>. This method returns the correct\n+     * result for these cases.</p>\n+     *\n+     * <p><code>Null</code> may be assigned to any reference type. This method will\n+     * return <code>true</code> if <code>null</code> is passed in and the toClass is\n+     * non-primitive.</p>\n+     *\n+     * <p>Specifically, this method tests whether the type represented by the\n      * specified <code>Class</code> parameter can be converted to the type\n      * represented by this <code>Class</code> object via an identity conversion\n      * widening primitive or widening reference conversion. See \n-     * <em>The Java Language Specification</em>, sections 5.1.1, 5.1.2 and \n-     * 5.1.4 for details.\n+     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n+     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n      * @param classArray  the array of Classes to check, may be <code>null</code>\n      * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>\n-     * @return true if assignment possible\n+     * @return <code>true</code> if assignment possible\n      */\n     public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {\n         if (ArrayUtils.isSameLength(classArray, toClassArray) == false) {\n     }\n     \n     /**\n-     * Checks if one Class can be assigned to a variable of another Class.\n-     * <p>\n-     * Unlike the Class.isAssignableFrom method, this method takes into \n-     * account widenings of primitive classes and <code>null</code>s.\n-     * <p>\n-     * Primitive widenings allow an int to be assigned to a long, float or \n-     * double. This method returns the correct result for these cases.\n-     * <p>\n-     * Null may be assigned to any reference type. This method will return\n-     * true if <code>null</code> is passed in and the toClass is non-primitive.\n-     * <p>\n-     * Specifically, this method tests whether the type represented by the\n+     * <p>Checks if one <code>Class</code> can be assigned to a variable of\n+     * another <code>Class</code>.</p>\n+     *\n+     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,\n+     * this method takes into account widenings of primitive classes and\n+     * <code>null</code>s.</p>\n+     *\n+     * <p>Primitive widenings allow an int to be assigned to a long, float or\n+     * double. This method returns the correct result for these cases.</p>\n+     *\n+     * <p><code>Null</code> may be assigned to any reference type. This method\n+     * will return <code>true</code> if <code>null</code> is passed in and the\n+     * toClass is non-primitive.</p>\n+     *\n+     * <p>Specifically, this method tests whether the type represented by the\n      * specified <code>Class</code> parameter can be converted to the type\n      * represented by this <code>Class</code> object via an identity conversion\n      * widening primitive or widening reference conversion. See \n-     * <em>The Java Language Specification</em>, sections 5.1.1, 5.1.2 and \n-     * 5.1.4 for details.\n+     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n+     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n      * @param cls  the Class to check, may be <code>null</code>\n      * @param toClass  the Class to try to assign into, must not be <code>null</code>\n-     * @return true if assignment possible\n+     * @return <code>true</code> if assignment possible\n      * @throws IllegalArgumentException if the toClass is <code>null</code>\n      */\n     public static boolean isAssignable(Class cls, Class toClass) {\n     }\n     \n     /**\n-     * Is the specified class an inner class or static nested class.\n+     * <p>Is the specified class an inner class or static nested class.</p>\n      * \n      * @param cls  the class to check\n-     * @return true if the class is an inner or static nested class\n+     * @return <code>true</code> if the class is an inner or static nested class\n      * @throws IllegalArgumentException if the class is <code>null</code>\n      */\n     public static boolean isInnerClass(Class cls) {\n--- a/src/java/org/apache/commons/lang/Notifier.java\n+++ b/src/java/org/apache/commons/lang/Notifier.java\n import java.lang.reflect.InvocationTargetException;\n \n /**\n- * A utility which takes much of the pain out of the Event/Listener \n+ * <p>A utility which takes much of the pain out of the Event/Listener\n  * system. It handles the collection, and the loop-notification.\n- * Reflection is used for the actual notification call.\n+ * Reflection is used for the actual notification call.</p>\n  *\n- * Alternate strategies are usable. For example this class currently \n+ * <p>Alternate strategies are usable. For example this class currently\n  * does not enforce a particular interface, which means it cannot \n- * cache that method. Doing this probably makes a lot of sense.\n+ * cache that method. Doing this probably makes a lot of sense.</p>\n  */\n public class Notifier {\n \n     }\n \n     /**\n-     * Construct with the class and the name of the method to \n-     * call upon the listeners.\n+     * <p>Construct with the class and the name of the method to\n+     * call upon the listeners.</p>\n      */\n     public Notifier(Class clss, String name) {\n         if(clss == null) {\n     }\n \n     /**\n-     * Convenience method for when a listener has a single method.\n-     * Currently this method needs to be called, but it's possible \n+     * <p>Convenience method for when a listener has a single method.</p>\n+     *\n+     * <p>Currently this method needs to be called, but it's possible\n      * that by providing the interface class, it can be assumed as \n-     * to what the listening method is.\n+     * to what the listening method is.</p>\n      */\n     public void notify(EventObject event) throws NotifierException {\n         if(this.clss == null) {\n     }\n \n     /**\n-     * Notify the listeners of a certain event, to a certain method.\n-     * This is usable when a Listener has more than one method and \n-     * a single Notifier wants to be shared.\n+     * <p>Notify the listeners of a certain event, to a certain method.</p>\n+     *\n+     * <p>This is usable when a Listener has more than one method and\n+     * a single <code>Notifier</code> wants to be shared.</p>\n      */\n     private void notify(Method listenerMethod, EventObject event) throws NotifierException {\n         Iterator itr = getListeners().iterator();\n     }\n \n     /**\n-     * Notify the listeners of a certain event, to a certain method.\n-     * This is usable when a Listener has more than one method and \n-     * a single Notifier wants to be shared.\n+     * <p>Notify the listeners of a certain event, to a certain method.</p>\n+     *\n+     * <p>This is usable when a Listener has more than one method and\n+     * a single Notifier wants to be shared.</p>\n      */\n     public void notify(String methodName, EventObject event) throws NotifierException {\n         Iterator itr = getListeners().iterator();\n--- a/src/java/org/apache/commons/lang/NotifierException.java\n+++ b/src/java/org/apache/commons/lang/NotifierException.java\n import org.apache.commons.lang.exception.NestableException;\n \n /**\n- * Exception thrown when something goes wrong in notifying.\n+ * <p>Exception thrown when something goes wrong in notifying.</p>\n  *\n  * @author <a href=\"mailto:bayard@apache.org\">Henri Yandell</a>\n- * @version $Id: NotifierException.java,v 1.1 2002/11/12 03:01:05 bayard Exp $\n+ * @version $Id: NotifierException.java,v 1.2 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class NotifierException extends NestableException {\n \n     /**\n-     * Constructs a new <code>NotifierException</code> without specified\n-     * detail message.\n+     * <p>Constructs a new <code>NotifierException</code> without specified\n+     * detail message.</p>\n      */\n     public NotifierException() {\n         super();\n     }\n \n     /**\n-     * Constructs a new <code>NotifierException</code> with specified\n-     * detail message.\n+     * <p>Constructs a new <code>NotifierException</code> with specified\n+     * detail message.</p>\n      *\n      * @param msg  the error message.\n      */\n     }\n \n     /**\n-     * Constructs a new <code>NotifierException</code> with specified\n-     * nested <code>Throwable</code> root cause.\n+     * <p>Constructs a new <code>NotifierException</code> with specified\n+     * nested <code>Throwable</code> root cause.</p>\n      *\n-     * @param rootCause  the exception or error that caused this exception\n-     *                   to be thrown.\n+     * @param rootCause  the <code>Exception</code> or <code>Error</code> that\n+     *  caused this exception to be thrown.\n      */\n     public NotifierException(Throwable rootCause) {\n         super(rootCause);\n     }\n \n     /**\n-     * Constructs a new <code>NotifierException</code> with specified\n-     * detail message and nested <code>Throwable</code> root cause.\n+     * <p>Constructs a new <code>NotifierException</code> with specified\n+     * detail message and nested <code>Throwable</code> root cause.</p>\n      *\n      * @param msg        the error message.\n-     * @param rootCause  the exception or error that caused this exception\n-     *                   to be thrown.\n+     * @param rootCause  the <code>Exception</code> or <code>Error</code> that\n+     * caused this exception to be thrown.\n      */\n     public NotifierException(String msg, Throwable rootCause) {\n         super(msg, rootCause);\n--- a/src/java/org/apache/commons/lang/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/NumberRange.java\n  */\n \n /**\n- * Represents a range of {@link Number} objects.\n+ * <p>Represents a range of {@link Number} objects.</p>\n  *\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Revision: 1.2 $ $Date: 2002/11/07 16:59:44 $\n+ * @version $Revision: 1.3 $ $Date: 2002/11/16 10:41:03 $\n  */\n public final class NumberRange {\n \n \n \n     /**\n-     * Constructs a new instance using the specified number as both the\n-     * minimum and maximum in theis range.\n+     * <p>Constructs a new <code>NumberRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n      *\n      * @param num the number to use for this range\n      * @throws NullPointerException if the number is <code>null</code>\n     }\n \n     /**\n-     * Constructs a new instance with the specified minimum and maximum\n-     * numbers.\n+     * <p>Constructs a new <code>NumberRange</code> with the specified\n+     * minimum and maximum numbers.</p>\n      *\n      * @param min the minimum number in this range\n      * @param max the maximum number in this range\n      * @throws NullPointerException if either the minimum or maximum number is\n-     *         <code>null</code>\n+     *  <code>null</code>\n      */\n     public NumberRange(Number min, Number max) {\n         if (min == null) {\n     }\n \n     /**\n-     * Returns the minimum number in this range.\n+     * <p>Returns the minimum number in this range.</p>\n      *\n      * @return the minimum number in this range\n      */\n     }\n \n     /**\n-     * Returns the maximum number in this range.\n+     * <p>Returns the maximum number in this range.</p>\n      *\n      * @return the maximum number in this range\n      */\n     }\n \n     /**\n-     * Tests whether the specified number occurs within this range.\n+     * <p>Tests whether the specified <code>number</code> occurs within\n+     * this range.</p>\n      *\n      * @param number the number to test\n      * @return <code>true</code> if the specified number occurs within this\n-     *         range; otherwise, <code>false</code>\n+     *  range; otherwise, <code>false</code>\n      */\n     public boolean includesNumber(Number number) {\n         if (number == null) {\n     }\n \n     /**\n-     * Tests whether the specified range occurs entirely within this range.\n+     * <p>Tests whether the specified range occurs entirely within this\n+     * range.</p>\n      *\n      * @param range the range to test\n      * @return <code>true</code> if the specified range occurs entirely within\n-     *         this range; otherwise, <code>false</code>\n+     *  this range; otherwise, <code>false</code>\n      */\n     public boolean includesRange(NumberRange range) {\n         if (range == null) {\n     }\n \n     /**\n-     * Tests whether the specified range overlaps with this range.\n+     * <p>Tests whether the specified range overlaps with this range.</p>\n      *\n      * @param range the range to test\n      * @return <code>true</code> if the specified range overlaps with this\n-     *         range; otherwise, <code>false</code>\n+     *  range; otherwise, <code>false</code>\n      */\n     public boolean overlaps(NumberRange range) {\n         if (range == null) {\n     }\n \n     /**\n-     * Indicates whether some other object is \"equal\" to this one.\n+     * <p>Indicates whether some other <code>Object</code> is \"equal\" to\n+     * this one</p>.\n      *\n      * @param obj the reference object with which to compare\n      * @return <code>true</code> if this object is the same as the obj\n-     *         argument; <code>false</code> otherwise\n+     *  argument; <code>false</code> otherwise\n      */\n     public boolean equals(Object obj) {\n         if (obj == this) {\n     }\n \n     /**\n-     * Returns a hash code value for this object.\n+     * <p>Returns a hash code value for this object.</p>\n      *\n      * @return a hash code value for this object\n      */\n     }\n \n     /**\n-     * Returns the string representation of this range. This string is the\n-     * string representation of the minimum and maximum numbers in the range,\n-     * separated by a hyphen. If a number is negative, then it is enclosed\n-     * in parentheses.\n+     * <p>Returns the string representation of this range.</p>\n+     *\n+     * <p>This string is the string representation of the minimum and\n+     * maximum numbers in the range, separated by a hyphen. If a number\n+     * is negative, then it is enclosed in parentheses.</p>\n      *\n      * @return the string representation of this range\n      */\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n import java.math.BigInteger;\n import java.math.BigDecimal;\n /**\n- * Provides extra functionality for Java Number classes.\n+ * <p>Provides extra functionality for Java Number classes</p>.\n  *\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n- * @version $Id: NumberUtils.java,v 1.3 2002/09/28 10:34:54 scolebourne Exp $\n+ * @version $Id: NumberUtils.java,v 1.4 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public final class NumberUtils {\n \n     /**\n-     * NumberUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>NumberUtils.stringToInt(\"6\");</code>.\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <p>NumberUtils instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>NumberUtils.stringToInt(\"6\");</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n      */\n     public NumberUtils() {\n     }\n     //--------------------------------------------------------------------\n     \n     /**\n-     * Convert a String to an int, returning zero if the conversion fails\n+     * <p>Convert a <code>String</code> to an <code>int</code>, returning\n+     * <code>zero</code> if the conversion fails.</p>\n      * \n      * @param str  the string to convert\n-     * @return the int represented by the string, or zero if conversion fails\n+     * @return the int represented by the string, or <code>zero</code> if\n+     *  conversion fails\n      */\n     public static int stringToInt(String str) {\n         return stringToInt(str, 0);\n     }\n \n     /**\n-     * Convert a String to an int, returning a default value if the \n-     * conversion fails.\n+     * <p>Convert a <code>String</code> to an <code>int</code>, returning a\n+     * default value if the conversion fails.</p>\n      * \n      * @param str  the string to convert\n      * @param defaultValue  the default value\n     // plus minus everything. Prolly more. A lot are not separable.\n \n     /**\n-     * <p>\n-     * Turns a string value into a java.lang.Number.\n-     * First, the value is examined for a type qualifier on the end \n+     * <p>Turns a string value into a java.lang.Number.</p>\n+     *\n+     * <p>First, the value is examined for a type qualifier on the end\n      * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n      * trying to create succissively larger types from the type specified\n-     * until one is found that can hold the value.\n-     * </p>\n-     * <p>\n-     * If a type specifier is not found, it will check for a decimal point\n-     * and then try successively larger types from Integer to BigInteger \n-     * and from Float to BigDecimal.\n-     * </p>\n-     * <p>\n-     * If the string starts with \"0x\" or \"-0x\", it will be interpreted as a \n-     * hexadecimal integer.  Values with leading 0's will not be interpreted \n-     * as octal.\n-     * </p>\n-     * \n+     * until one is found that can hold the value.</p>\n+     *\n+     * <p>If a type specifier is not found, it will check for a decimal point\n+     * and then try successively larger types from <code>Integer</code> to\n+     * <code>BigInteger</code> and from <code>Float</code> to\n+     * <code>BigDecimal</code>.</p>\n+     *\n+     * <p>If the string starts with <code>0x</code> or <code>-0x</code>, it\n+     * will be interpreted as a hexadecimal integer.  Values with leading\n+     * <code>0</code>'s will not be interpreted as octal.</p>\n+     *\n      * @param val String containing a number\n      * @return Number created from the string\n      * @throws NumberFormatException if the value cannot be converted\n     }\n \n     /**\n-     * Utility method for createNumber.  Returns true if s is null\n+     * <p>Utility method for {@link #createNumber(java.lang.String)}.</p>\n+     *\n+     * <p>Returns <code>true</code> if s is <code>null</code>.</p>\n      * \n      * @param s the String to check\n-     * @return if it is all zeros or null\n+     * @return if it is all zeros or <code>null</code>\n      */\n     private static boolean isAllZeros(String s) {\n         if (s == null) {\n     //--------------------------------------------------------------------\n     \n     /**\n-     * Convert a String to a Float\n-     * \n-     * @param val  a String to convert\n-     * @return converted Float\n+     * <p>Convert a <code>String</code> to a <code>Float</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>Float</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Float createFloat(String val) {\n     }\n \n     /**\n-     * Convert a String to a Double\n-     * \n-     * @param val  a String to convert\n-     * @return converted Double\n+     * <p>Convert a <code>String</code> to a <code>Double</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>Double</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Double createDouble(String val) {\n     }\n \n     /**\n-     * Convert a String to a Integer, handling hex and\n-     * octal notations.\n-     * \n-     * @param val  a String to convert\n-     * @return converted Integer\n+     * <p>Convert a <code>String</code> to a <code>Integer</code>, handling\n+     * hex and octal notations.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>Integer</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Integer createInteger(String val) {\n     }\n \n     /**\n-     * Convert a String to a Long\n-     * \n-     * @param val  a String to convert\n-     * @return converted Long\n+     * <p>Convert a <code>String</code> to a <code>Long</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>Long</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static Long createLong(String val) {\n     }\n \n     /**\n-     * Convert a String to a BigInteger\n-     * \n-     * @param val  a String to convert\n-     * @return converted BigInteger\n+     * <p>Convert a <code>String</code> to a <code>BigInteger</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>BigInteger</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static BigInteger createBigInteger(String val) {\n     }\n \n     /**\n-     * Convert a String to a BigDecimal\n-     * \n-     * @param val  a String to convert\n-     * @return converted BigDecimal\n+     * <p>Convert a <code>String</code> to a <code>BigDecimal</code>.</p>\n+     * \n+     * @param val  a <code>String</code> to convert\n+     * @return converted <code>BigDecimal</code>\n      * @throws NumberFormatException if the value cannot be converted\n      */\n     public static BigDecimal createBigDecimal(String val) {\n     //--------------------------------------------------------------------\n     \n     /**\n-     * Gets the minimum of three long values.\n+     * <p>Gets the minimum of three <code>long</code> values.</p>\n      * \n      * @param a  value 1\n      * @param b  value 2\n     }\n \n     /**\n-     * Gets the minimum of three int values.\n+     * <p>Gets the minimum of three <code>int</code> values.</p>\n      * \n      * @param a  value 1\n      * @param b  value 2\n     }\n \n     /**\n-     * Gets the maximum of three long values.\n+     * <p>Gets the maximum of three <code>long</code> values.</p>\n      * \n      * @param a  value 1\n      * @param b  value 2\n     }\n \n     /**\n-     * Gets the maximum of three int values.\n+     * <p>Gets the maximum of three <code>int</code> values.</p>\n      * \n      * @param a  value 1\n      * @param b  value 2\n     //--------------------------------------------------------------------\n     \n     /**\n-     * Compares two doubles for order.\n-     * <p>\n-     * This method is more comprhensive than the standard Java greater than,\n-     * less than and equals operators.\n-     * It returns -1 if the first value is less than the second.\n-     * It returns +1 if the first value is greater than the second.\n-     * It returns 0 if the values are equal.\n+     * <p>Compares two <code>doubles</code> for order.</p>\n+     *\n+     * <p>This method is more comprehensive than the standard Java greater\n+     * than, less than and equals operators.</p>\n+     * <ul>\n+     *  <li>It returns <code>-1</code> if the first value is less than the second.\n+     *  <li>It returns <code>+1</code> if the first value is greater than the second.\n+     *  <li>It returns <code>0</code> if the values are equal.\n+     * </ul>\n+     *\n      * <p>\n      * The ordering is as follows, largest to smallest:\n      * <ul>\n-     * <li>NaN\n-     * <li>Positive infinity\n-     * <li>Maximum double\n-     * <li>Normal positve numbers\n-     * <li>+0.0\n-     * <li>-0.0\n-     * <li>Normal negative numbers\n-     * <li>Minimum double (-Double.MAX_VALUE)\n-     * <li>Negative infinity\n+     *  <li>NaN\n+     *  <li>Positive infinity\n+     *  <li>Maximum double\n+     *  <li>Normal positve numbers\n+     *  <li>+0.0\n+     *  <li>-0.0\n+     *  <li>Normal negative numbers\n+     *  <li>Minimum double (-Double.MAX_VALUE)\n+     *  <li>Negative infinity\n      * </ul>\n-     * Comparing NaN with NaN will return 0.\n-     * \n-     * @param lhs  the first double\n-     * @param rhs  the second double\n-     * @return -1 if lhs is less, +1 if greater, 0 if equal to rhs\n+     * </p>\n+     *\n+     * <p>Comparing <code>NaN</code> with <code>NaN</code> will\n+     * return <code>0</code>.</p>\n+     * \n+     * @param lhs  the first <code>double</code>\n+     * @param rhs  the second <code>double</code>\n+     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n+     *  <code>0</code> if equal to rhs\n      */\n     public static int compare(double lhs, double rhs) {\n         if (lhs < rhs) {\n     }\n     \n     /**\n-     * Compares two floats for order.\n-     * <p>\n-     * This method is more comprhensive than the standard Java greater than,\n-     * less than and equals operators.\n-     * It returns -1 if the first value is less than the second.\n-     * It returns +1 if the first value is greater than the second.\n-     * It returns 0 if the values are equal.\n-     * <p>\n-     * The ordering is as follows, largest to smallest:\n+     * <p>Compares two floats for order.</p>\n+     *\n+     * <p>This method is more comprhensive than the standard Java greater than,\n+     * less than and equals operators.</p>\n+     * <ul>\n+     *  <li>It returns <code>-1</code> if the first value is less than the second.\n+     *  <li>It returns <code>+1</code> if the first value is greater than the second.\n+     *  <li>It returns <code>0</code> if the values are equal.\n+     * </ul>\n+     *\n+     * <p> The ordering is as follows, largest to smallest:\n      * <ul>\n      * <li>NaN\n      * <li>Positive infinity\n      * <li>Minimum float (-Float.MAX_VALUE)\n      * <li>Negative infinity\n      * </ul>\n-     * Comparing NaN with NaN will return 0.\n-     * \n-     * @param lhs  the first float\n-     * @param rhs  the second float\n-     * @return -1 if lhs is less, +1 if greater, 0 if equal to rhs\n+     *\n+     * <p>Comparing <code>NaN</code> with <code>NaN</code> will return\n+     * <code>0</code>.</p>\n+     * \n+     * @param lhs  the first <code>float</code>\n+     * @param rhs  the second <code>float</code>\n+     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n+     *  <code>0</code> if equal to rhs\n      */\n     public static int compare(float lhs, float rhs) {\n         if (lhs < rhs) {\n     //--------------------------------------------------------------------\n     \n     /**\n-     * Checks whether the String contains only digit characters.\n-     * Null and blank string will return false.\n-     *\n-     * @param str  the string to check\n-     * @return boolean contains only unicode numeric\n+     * <p>Checks whether the <code>String</code> contains only\n+     * digit characters.</p>\n+     *\n+     * <p><code>Null</code> and empty String will return\n+     * <code>false</code>.</p>\n+     *\n+     * @param str  the <code>String</code> to check\n+     * @return <code>true</code> if str contains only unicode numeric\n      */\n     public static boolean isDigits(String str) {\n         if ((str == null) || (str.length() == 0)) {\n     }\n \n     /**\n-     * <p>\n-     * Checks whether the String a valid Java number.\n-     * Valid numbers include hexadecimal marked with the \"0x\" qualifier,\n-     * scientific notation and numbers marked with a type qualifier (e.g. 123L).\n-     * </p>\n-     * <p>\n-     * Null and blank string will return false.\n-     * </p>\n-     * \n-     * @param str  the string to check\n-     * @return true if the string is a correctly formatted number\n+     * <p>Checks whether the String a valid Java number.</p>\n+     *\n+     * <p>Valid numbers include hexadecimal marked with the <code>0x</code>\n+     * qualifier, scientific notation and numbers marked with a type\n+     * qualifier (e.g. 123L).</p>\n+     *\n+     * <p><code>Null</code> and empty String will return\n+     * <code>false</code>.</p>\n+     *\n+     * @param str  the <code>String</code> to check\n+     * @return <code>true</code> if the string is a correctly formatted number\n      */\n     public static boolean isNumber(String str) {\n         if ((str == null) || (str.length() == 0)) {\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n \n import java.io.Serializable;\n /**\n- * Common <code>Object</code> manipulation routines.\n+ * <p>Common <code>Object</code> manipulation routines.</p>\n  *\n  * @author <a href=\"mailto:nissim@nksystems.com\">Nissim Karpenstein</a>\n  * @author <a href=\"mailto:janekdb@yahoo.co.uk\">Janek Bogucki</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ObjectUtils.java,v 1.4 2002/09/22 09:18:33 scolebourne Exp $\n+ * @version $Id: ObjectUtils.java,v 1.5 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class ObjectUtils {\n     \n     /**\n-     * Singleton used as a null placeholder where null has another meaning.\n-     * <p>\n-     * For example, in a <code>HashMap</code> the get(key) method returns null \n-     * if the Map contains null or if there is no matching key. The Null \n-     * placeholder can be used to distinguish between these two cases.\n-     * <p>\n-     * Another example is <code>HashTable</code>, where <code>null</code> \n-     * cannot be stored.\n-     * <p>\n-     * This instance is Serializable.\n+     * <p>Singleton used as a <code>null</code> placeholder where\n+     * <code>null</code> has another meaning.</p>\n+     *\n+     * <p>For example, in a <code>HashMap</code> the\n+     * {@link java.util.HashMap#get(java.lang.Object)} method returns\n+     * <code>null</code> if the <code>Map</code> contains\n+     * <code>null</code> or if there is no matching key. The\n+     * <code>Null</code> placeholder can be used to distinguish between\n+     * these two cases.</p>\n+     *\n+     * <p>Another example is <code>HashTable</code>, where <code>null</code>\n+     * cannot be stored.</p>\n+     *\n+     * <p>This instance is Serializable.</p>\n      */\n     public static final Null NULL = new Null();\n     \n     /**\n-     * ObjectUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>ObjectUtils.defaultIfNull(\"a\",\"b\");</code>.\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <p><code>ObjectUtils</code> instances should NOT be constructed in\n+     * standard programming. Instead, the class should be used as\n+     * <code>ObjectUtils.defaultIfNull(\"a\",\"b\");</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n      */\n     public ObjectUtils() {\n     }\n     //--------------------------------------------------------------------\n     \n     /**\n-     * Returns a default value if the object passed is null.\n+     * <p>Returns a default value if the object passed is\n+     * <code>null</code>.</p>\n      *\n-     * @param object  the object to test\n+     * @param object  the <code>Object</code> to test\n      * @param defaultValue  the default value to return\n-     * @return object if it is not null, defaultValue otherwise\n+     * @return <code>object</code> if it is not <code>null</code>, defaultValue otherwise\n      */\n     public static Object defaultIfNull(Object object, Object defaultValue) {\n         return (object != null ? object : defaultValue);\n     }\n \n     /**\n-     * Compares two objects for equality, where either one or both\n-     * objects may be <code>null</code>.\n+     * <p>Compares two objects for equality, where either one or both\n+     * objects may be <code>null</code>.</p>\n      *\n      * @param object1  the first object\n      * @param object2  the second object\n     }\n     \n     /**\n-     * Gets the toString that would be produced by Object if a class did not\n-     * override toString itself. Null will return null.\n+     * <p>Gets the toString that would be produced by <code>Object</code>\n+     * if a class did not override toString itself. <code>Null</code>\n+     * will return <code>null</code>.</p>\n      *\n-     * @param object  the object to create a toString for, may be null\n-     * @return the default toString text, or null if null passed in\n+     * @param object  the object to create a toString for, may be\n+     *  <code>null</code>\n+     * @return the default toString text, or <code>null</code> if\n+     *  <code>null</code> passed in\n      */\n     public static String identityToString(Object object) {\n         if (object == null) {\n     }\n \n     /**\n-     * Class used as a null placeholder where null has another meaning.\n-     * <p>\n-     * For example, in a <code>HashMap</code> the get(key) method returns null \n-     * if the Map contains null or if there is no matching key. The Null \n-     * placeholder can be used to distinguish between these two cases.\n-     * <p>\n-     * Another example is <code>HashTable</code>, where <code>null</code> \n-     * cannot be stored.\n+     * <p>Class used as a null placeholder where null has another meaning.</p>\n+     *\n+     * <p>For example, in a <code>HashMap</code> the\n+     * {@link java.util.HashMap#get(java.lang.Object)} method returns\n+     * <code>null</code> if the <code>Map</code> contains\n+     * <code>null</code> or if there is no matching key. The\n+     * <code>Null</code> placeholder can be used to distinguish between\n+     * these two cases.</p>\n+     *\n+     * <p>Another example is <code>HashTable</code>, where <code>null</code>\n+     * cannot be stored.</p>\n      */\n     public static class Null implements Serializable {\n         /**\n         }\n         \n         /**\n-         * Ensure singleton.\n+         * <p>Ensure singleton.</p>\n+         * \n          * @return the singleton value\n          */\n         private Object readResolve() {\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: RandomStringUtils.java,v 1.5 2002/09/28 10:34:54 scolebourne Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.6 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class RandomStringUtils {\n \n     /**\n-     * Random object used by random method. This has to be not local \n+     * <p>Random object used by random method. This has to be not local\n      * to the random method so as to not return the same value in the \n-     * same millisecond. \n+     * same millisecond.</p>\n      */\n     private static final Random RANDOM = new Random();\n \n     /**\n-     * RandomStringUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>RandomStringUtils.random(5);</code>.\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <p><code>RandomStringUtils</code> instances should NOT be constructed in\n+     * standard programming. Instead, the class should be used as\n+     * <code>RandomStringUtils.random(5);</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n      */\n     public RandomStringUtils() {\n     }\n \n     /**\n-     * Creates a random string whose length is the number of characters\n-     * specified. Characters will be chosen from the set of all characters.\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of all characters.</p>\n      *\n      * @param count length of random string to create\n      * @return the random string\n     }\n \n     /**\n-     * Creates a random string whose length is the number of characters\n-     * specified. Characters will be chosen from the set of characters whose\n-     * ASCII value is between 32 and 127 .\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of characters whose\n+     * ASCII value is between <code>32</code> and <code>127</code>.</p>\n      *\n      * @param count length of random string to create\n      * @return the random string\n     }\n     \n     /**\n-     * Creates a random string whose length is the number of characters\n-     * specified. Characters will be chosen from the set of alphabetic\n-     * characters.\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of alphabetic\n+     * characters.</p>\n      *\n      * @param count length of random string to create\n      * @return the random string\n     }\n     \n     /**\n-     * Creates a random string whose length is the number of characters\n-     * specified. Characters will be chosen from the set of alpha-numeric\n-     * characters.\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <u>Characters will be chosen from the set of alpha-numeric\n+     * characters.</p>\n      *\n      * @param count length of random string to create\n      * @return the random string\n     }\n     \n     /**\n-     * Creates a random string whose length is the number of characters\n-     * specified. Characters will be chosen from the set of numeric\n-     * characters.\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of numeric\n+     * characters.</p>\n      *\n      * @param count length of random string to create\n      * @return the random string\n     }\n \n     /**\n-     * Creates a random string whose length is the number of characters\n-     * specified. Characters will be chosen from the set of alpha-numeric\n-     * characters as indicated by the arguments.\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of alpha-numeric\n+     * characters as indicated by the arguments.</p>\n      *\n      * @param count length of random string to create\n      * @param letters if <code>true</code>, generated string will include\n-     * alphabetic characters\n+     *  alphabetic characters\n      * @param numbers if <code>true</code>, generatd string will include\n-     * numeric characters\n+     *  numeric characters\n      * @return the random string\n      */\n     public static String random(int count, boolean letters, boolean numbers) {\n     }\n     \n     /**\n-     * Creates a random string whose length is the number of characters\n-     * specified. Characters will be chosen from the set of alpha-numeric\n-     * characters as indicated by the arguments.\n-     *\n-     * @param count length of random string to create\n-     * @param start int position in set of chars to start at\n-     * @param end int position in set of chars to end before\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of alpha-numeric\n+     * characters as indicated by the arguments.</p>\n+     *\n+     * @param count length of random string to create\n+     * @param start position in set of chars to start at\n+     * @param end  position in set of chars to end before\n      * @param letters if <code>true</code>, generated string will include\n-     * alphabetic characters\n-     * @param numbers if <code>true</code>, generatd string will include\n-     * numeric characters\n+     *  alphabetic characters\n+     * @param numbers if <code>true</code>, generated string will include\n+     *  numeric characters\n      * @return the random string\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers) {\n     }\n     \n     /**\n-     * Creates a random string based on a variety of options.\n-\t * If start and end are both 0, start and end are set to ' ' and 'z', the ASCII\n-\t * printable characters, will be used, unless letters and numbers are both \n-\t * false, in which case, start and end are set to 0 and Integer.MAX_VALUE.\n-\t * <p>\n-\t * If set is not null, characters between start and end are chosen.\n-\t * <p>\n-     *\n-     * @param count int length of random string to create\n-     * @param start int position in set of chars to start at\n-     * @param end int position in set of chars to end before\n-     * @param letters boolean only allow letters?\n-     * @param numbers boolean only allow numbers?\n-     * @param set char[] set of chars to choose randoms from.\n-     *        If null, then it will use the set of all chars.\n-     * @return the random string\n-     * @throws ArrayIndexOutOfBoundsException if there are not (end - start) + 1 \n-     * characters in the set array.\n+     * <p>Creates a random string based on a variety of options.</p>\n+     *\n+\t * <p>If start and end are both <code>0</code>, start and end are set\n+     * to <code>' '</code> and <code>'z'</code>, the ASCII printable\n+     * characters, will be used, unless letters and numbers are both\n+\t * <code>false</code>, in which case, start and end are set to\n+     * <code>0</code> and <code>Integer.MAX_VALUE</code>.\n+     *\n+\t * <p>If set is not <code>null</code>, characters between start and\n+     * end are chosen.</p>\n+     *\n+     * @param count length of random string to create\n+     * @param start position in set of chars to start at\n+     * @param end position in set of chars to end before\n+     * @param letters only allow letters?\n+     * @param numbers only allow numbers?\n+     * @param set set of chars to choose randoms from. If <code>null</code>,\n+     *  then it will use the set of all chars.\n+     * @return the random string\n+     * @throws ArrayIndexOutOfBoundsException if there are not\n+     *  <code>(end - start) + 1</code> characters in the set array.\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n         if( (start == 0) && (end == 0) ) {\n     }\n \n     /**\n-     * Creates a random string whose length is the number of characters\n-     * specified. Characters will be chosen from the set of characters\n-     * specified.\n-     *\n-     * @param count int length of random string to create\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of characters\n+     * specified.</p>\n+     *\n+     * @param count length of random string to create\n      * @param set String containing the set of characters to use\n      * @return the random string\n      */\n     }\n \n     /**\n-     * Creates a random string whose length is the number of characters\n-     * specified. Characters will be chosen from the set of characters\n-     * specified.\n-     *\n-     * @param count int length of random string to create\n+     * <p>Creates a random string whose length is the number of characters\n+     * specified.</p>\n+     *\n+     * <p>Characters will be chosen from the set of characters specified.</p>\n+     *\n+     * @param count length of random string to create\n      * @param set character array containing the set of characters to use\n      * @return the random string\n      */\n--- a/src/java/org/apache/commons/lang/SerializationException.java\n+++ b/src/java/org/apache/commons/lang/SerializationException.java\n import org.apache.commons.lang.exception.NestableRuntimeException;\n \n /**\n- * Exception thrown when the Serialization process fails. The original\n- * error is wrapped within this one.\n+ * <p>Exception thrown when the Serialization process fails.</p>\n+ *\n+ * <p>The original error is wrapped within this one.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: SerializationException.java,v 1.2 2002/08/31 11:11:03 scolebourne Exp $\n+ * @version $Id: SerializationException.java,v 1.3 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class SerializationException extends NestableRuntimeException {\n \n     /**\n-     * Constructs a new <code>SerializationException</code> without specified\n-     * detail message.\n+     * <p>Constructs a new <code>SerializationException</code> without specified\n+     * detail message.</p>\n      */\n     public SerializationException() {\n         super();\n     }\n \n     /**\n-     * Constructs a new <code>SerializationException</code> with specified\n-     * detail message.\n+     * <p>Constructs a new <code>SerializationException</code> with specified\n+     * detail message.</p>\n      *\n      * @param msg  The error message.\n      */\n     }\n \n     /**\n-     * Constructs a new <code>SerializationException</code> with specified\n-     * nested <code>Throwable</code>.\n+     * <p>Constructs a new <code>SerializationException</code> with specified\n+     * nested <code>Throwable</code>.</p>\n      *\n-     * @param cause  The exception or error that caused this exception\n-     *               to be thrown.\n+     * @param cause  The <code>Exception</code> or <code>Error</code>\n+     *  that caused this exception to be thrown.\n      */\n     public SerializationException(Throwable cause) {\n         super(cause);\n     }\n \n     /**\n-     * Constructs a new <code>SerializationException</code> with specified\n-     * detail message and nested <code>Throwable</code>.\n+     * <p>Constructs a new <code>SerializationException</code> with specified\n+     * detail message and nested <code>Throwable</code>.</p>\n      *\n      * @param msg    The error message.\n-     * @param cause  The exception or error that caused this exception\n-     *               to be thrown.\n+     * @param cause  The <code>Exception</code> or <code>Error</code>\n+     *  that caused this exception to be thrown.\n      */\n     public SerializationException(String msg, Throwable cause) {\n         super(msg, cause);\n--- a/src/java/org/apache/commons/lang/SerializationUtils.java\n+++ b/src/java/org/apache/commons/lang/SerializationUtils.java\n import java.io.Serializable;\n \n /**\n- * Methods that assist with the serialization process, or perform\n- * additional functionality based on serialization.\n+ * <p>Methods that assist with the serialization process, or perform\n+ * additional functionality based on serialization.</p>\n  * <ul>\n  * <li>Deep clone using serialization\n  * <li>Serialize managing finally and IOException\n  * @author <a href=\"mailto:janekdb@yahoo.co.uk\">Janek Bogucki</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: SerializationUtils.java,v 1.2 2002/08/31 11:09:45 scolebourne Exp $\n+ * @version $Id: SerializationUtils.java,v 1.3 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class SerializationUtils {\n     \n     /**\n-     * Constructor for SerializationUtils is private\n+     * <p>Constructor for SerializationUtils is private.</p>\n      */\n     private SerializationUtils() {\n         super();\n     }\n \n     /**\n-     * Deep clone an object using serialization.\n-     * <p>\n-     * This is many times slower than writing clone methods by hand\n+     * <p>Deep clone an <code>Object</code> using serialization.</p>\n+     *\n+     * <p>This is many times slower than writing clone methods by hand\n      * on all objects in your object graph. However, for complex object\n      * graphs, or for those that don't support deep cloning this can\n      * be a simple alternative implementation. Of course all the objects\n-     * must be <code>Serializable</code>.\n+     * must be <code>Serializable</code>.</p>\n      * \n      * @param object  the <code>Serializable</code> object to clone\n      * @return the cloned object\n     }\n     \n     /**\n-     * Serializes an object to the specified stream. The stream will\n-     * be closed once the object is written. This avoids the need for\n-     * a finally clause, and maybe also exception handling, in the\n-     * application code.\n+     * <p>Serializes an <code>Object</code> to the specified stream.</p>\n+     *\n+     * <p>The stream will be closed once the object is written.\n+     * This avoids the need for a finally clause, and maybe also exception\n+     * handling, in the application code.</p>\n      *\n      * @param obj  the object to serialize to bytes\n      * @param outputStream  the stream to write to\n     }\n \n     /**\n-     * Serializes an object to a byte array for storage/serialization.\n+     * <p>Serializes an <code>Object</code> to a byte array for\n+     * storage/serialization.</p>\n      *\n      * @param obj  the object to serialize to bytes\n      * @return a byte[] with the converted Serializable\n     }\n \n     /**\n-     * Deserializes an object from the specified stream. The stream will\n-     * be closed once the object is written. This avoids the need for\n-     * a finally clause, and maybe also exception handling, in the\n-     * application code.\n+     * <p>Deserializes an <code>Object</code> from the specified stream.</p>\n+     *\n+     * <p>The stream will be closed once the object is written. This\n+     * avoids the need for a finally clause, and maybe also exception\n+     * handling, in the application code.</p>\n      *\n      * @param inputStream  the serialized object input stream\n      * @return the deserialized object\n     }\n \n     /**\n-     * Deserializes a single object from an array of bytes.\n+     * <p>Deserializes a single <code>Object</code> from an array of bytes.</p>\n      *\n      * @param objectData  the serialized object\n      * @return the deserialized object\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n- * @version $Id: StringUtils.java,v 1.24 2002/11/15 00:25:45 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.25 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class StringUtils {\n \n     /**\n-     * StringUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>StringUtils.trim(\" foo \");</code>.\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <p><code>StringUtils<code> instances should NOT be constructed in\n+     * standard programming. Instead, the class should be used as\n+     * <code>StringUtils.trim(\" foo \");</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n      */\n     public StringUtils() {\n     }\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Removes control characters, including whitespace, from both ends of this\n-     * String, handling <code>null</code> by returning an empty String.\n+     * <p>Removes control characters, including whitespace, from both\n+     * ends of this String, handling <code>null</code> by returning\n+     * an empty String.</p>\n      *\n      * @see java.lang.String#trim()\n      * @param str the String to check\n     }\n \n     /**\n-     * Removes control characters, including whitespace, from both ends of this\n-     * String, handling <code>null</code> by returning <code>null</code>.\n+     * <p>Removes control characters, including whitespace, from both\n+     * ends of this String, handling <code>null</code> by returning\n+     * <code>null</code>.</p>\n      *\n      * @see java.lang.String#trim()\n      * @param str the String to check\n     }\n \n     /**\n-     * Deletes all 'space' characters from a String.\n-     * Spaces are defined as {' ', '\\t', '\\r', '\\n', '\\b'}\n-     * in line with the deprecated Character.isSpace\n+     * <p>Deletes all 'space' characters from a String.</p>\n+     *\n+     * <p>Spaces are defined as <code>{' ', '\\t', '\\r', '\\n', '\\b'}</code>\n+     * in line with the deprecated {@link Character#isSpace(char)}.</p>\n      *\n      * @param str String target to delete spaces from\n      * @return the String without spaces\n     }\n \n     /**\n-     * Deletes all whitespaces from a String.\n-     * Whitespace is defined by Character.isWhitespace\n+     * <p>Deletes all whitespaces from a String.</p>\n+     *\n+     * <p>Whitespace is defined by\n+     * {@link Character#isWhitespace(char)}.</p>\n      *\n      * @param str String target to delete whitespace from\n      * @return the String without whitespaces\n     }\n \n     /**\n-     * Checks if a String is non null and is not empty (length > 0).\n+     * <p>Checks if a String is non <code>null</code> and is\n+     * not empty (<code>length > 0</code>).</p>\n      *\n      * @param str the String to check\n      * @return true if the String is non-null, and not length zero\n     }\n \n     /**\n-     * Checks if a (trimmed) String is <code>null</code> or empty.\n+     * <p>Checks if a (trimmed) String is <code>null</code> or empty.</p>\n      *\n      * @param str the String to check\n-     * @return true if the String is <code>null</code>, or length zero once trimmed\n+     * @return <code>true</code> if the String is <code>null</code>, or\n+     *  length zero once trimmed\n      */\n     public static boolean isEmpty(String str) {\n         return (str == null || str.trim().length() == 0);\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Compares two Strings, returning <code>true</code> if they are equal.\n-     * <code>null</code>s are handled without exceptions. Two <code>null</code>\n-     * references are considered to be equal. The comparison is case sensitive.\n+     * <p>Compares two Strings, returning <code>true</code> if they are equal.</p>\n+     *\n+     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * references are considered to be equal. The comparison is case sensitive.</p>\n      *\n      * @see java.lang.String#equals(Object)\n      * @param str1 the first string\n      * @param str2 the second string\n-     * @return true if the Strings are equal, case sensitive, or both <code>null</code>\n+     * @return <code>true</code> if the Strings are equal, case sensitive, or\n+     *  both <code>null</code>\n      */\n     public static boolean equals(String str1, String str2) {\n         return (str1 == null ? str2 == null : str1.equals(str2));\n     }\n \n     /**\n-     * Compares two Strings, returning <code>true</code> if they are equal ignoring\n-     * the case. Nulls are handled without exceptions. Two <code>null</code>\n-     * references are considered equal. Comparison is case insensitive.\n+     * <p>Compares two Strings, returning <code>true</code> if they are equal ignoring\n+     * the case.</p>\n+     *\n+     * <p><code>Nulls</code> are handled without exceptions. Two <code>null</code>\n+     * references are considered equal. Comparison is case insensitive.</p>\n      *\n      * @see java.lang.String#equalsIgnoreCase(String)\n      * @param str1  the first string\n      * @param str2  the second string\n-     * @return true if the Strings are equal, case insensitive, or both <code>null</code>\n+     * @return <code>true</code> if the Strings are equal, case insensitive, or\n+     *  both <code>null</code>\n      */\n     public static boolean equalsIgnoreCase(String str1, String str2) {\n         return (str1 == null ? str2 == null : str1.equalsIgnoreCase(str2));\n     }\n \n     /**\n-     * Find the first index of any of a set of potential substrings.\n-     * <code>null</code> String will return <code>-1</code>.\n+     * <p>Find the first index of any of a set of potential substrings.</p>\n+     *\n+     * <p><code>null</code> String will return <code>-1</code>.</p>\n      * \n      * @param str the String to check\n      * @param searchStrs the Strings to search for\n     }\n \n     /**\n-     * Find the latest index of any of a set of potential substrings.\n-     * <code>null</code> string will return <code>-1</code>.\n+     * <p>Find the latest index of any of a set of potential substrings.</p>\n+     *\n+     * <p><code>null</code> string will return <code>-1</code>.</p>\n      * \n      * @param str  the String to check\n      * @param searchStrs  the Strings to search for\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Gets a substring from the specified string avoiding exceptions.\n-     * A negative start position can be used to start n characters from\n-     * the end of the String.\n+     * <p>Gets a substring from the specified string avoiding exceptions.</p>\n+     *\n+     * <p>A negative start position can be used to start <code>n</code>\n+     * characters from the end of the String.</p>\n      * \n      * @param str the String to get the substring from\n      * @param start the position to start from, negative means\n-     * count back from the end of the String by this many characters\n+     *  count back from the end of the String by this many characters\n      * @return substring from start position\n      */\n     public static String substring(String str, int start) {\n     }\n     \n     /**\n-     * Gets a substring from the specified String avoiding exceptions.\n-     * A negative start position can be used to start/end n characters\n-     * from the end of the String.\n+     * <p>Gets a substring from the specified String avoiding exceptions.</p>\n+     *\n+     * <p>A negative start position can be used to start/end <code>n</code>\n+     * characters from the end of the String.</p>\n      * \n      * @param str the String to get the substring from\n      * @param start the position to start from, negative means\n-     * count back from the end of the string by this many characters\n+     *  count back from the end of the string by this many characters\n      * @param end the position to end at (exclusive), negative means\n-     * count back from the end of the String by this many characters\n+     *  count back from the end of the String by this many characters\n      * @return substring from start position to end positon\n      */\n     public static String substring(String str, int start, int end) {\n     }\n \n     /**\n-     * Gets the leftmost n characters of a String. If n characters are not\n-     * available, or the String is <code>null</code>, the String will be\n-     * returned without an exception.\n+     * <p>Gets the leftmost <code>n</code> characters of a String.</p>\n+     *\n+     * <p>If <code>n</code> characters are not available, or the\n+     * String is <code>null</code>, the String will be returned without\n+     * an exception.</p>\n      *\n      * @param str the String to get the leftmost characters from\n      * @param len the length of the required String\n     }\n \n     /**\n-     * Gets the rightmost n characters of a String. If n characters are not\n-     * available, or the String is <code>null</code>, the String will be\n-     * returned without an exception.\n+     * <p>Gets the rightmost <code>n</code> characters of a String.</p>\n+     *\n+     * <p>If <code>n</code> characters are not available, or the String\n+     * is <code>null</code>, the String will be returned without an\n+     * exception.</p>\n      *\n      * @param str the String to get the rightmost characters from\n      * @param len the length of the required String\n     }\n \n     /**\n-     * Gets n characters from the middle of a String. If n characters are\n-     * not available, the remainder of the String will be returned\n-     * without an exception. If the String is <code>null</code>,\n-     * <code>null</code> will be returned.\n+     * <p>Gets <code>n</code> characters from the middle of a String.</p>\n+     *\n+     * <p>If <code>n</code> characters are not available, the remainder\n+     * of the String will be returned without an exception. If the\n+     * String is <code>null</code>, <code>null</code> will be returned.</p>\n      *\n      * @param str the String to get the characters from\n      * @param pos the position to start from\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Splits the provided text into a array, using whitespace as the separator.\n-     * The separator is not included in the returned String array.\n+     * <p>Splits the provided text into a array, using whitespace as the\n+     * separator.</p>\n+     *\n+     * <p>The separator is not included in the returned String array.</p>\n      *\n      * @param str the String to parse\n      * @return an array of parsed Strings \n     }\n \n     /**\n-     * Splits the provided text into a array, based on a given separator.\n-     * The separator is not included in the returned String array.\n-     * The maximum number of splits to perfom can be controlled.\n-     * A <code>null</code> separator will cause parsing to be on whitespace.\n+     * <p>Splits the provided text into a array, based on a given separator.</p>\n+     *\n+     * <p>The separator is not included in the returned String array. The\n+     * maximum number of splits to perfom can be controlled. A <code>null</code>\n+     * separator will cause parsing to be on whitespace.</p>\n      *\n      * <p>This is useful for quickly splitting a String directly into\n      * an array of tokens, instead of an enumeration of tokens (as\n-     * <code>StringTokenizer</code> does).\n+     * <code>StringTokenizer</code> does).</p>\n      *\n      * @param str The string to parse.\n      * @param separator Characters used as the delimiters. If\n-     * <code>null</code>, splits on whitespace.\n+     *  <code>null</code>, splits on whitespace.\n      * @param max The maximum number of elements to include in the\n-     * array.  A zero or negative value implies no limit.\n+     *  array.  A zero or negative value implies no limit.\n      * @return an array of parsed Strings \n      */\n     public static String[] split(String str, String separator, int max) {\n     // Joining\n     //--------------------------------------------------------------------------\n     /**\n-     * Concatenates elements of an array into a single String.\n-     * The difference from join is that concatenate has no delimiter.\n+     * <p>Concatenates elements of an array into a single String.</p>\n+     *\n+     * <p>The difference from join is that concatenate has no delimiter.</p>\n      * \n      * @param array the array of values to concatenate.\n      * @return the concatenated string.\n     }\n     \n     /**\n-     * Joins the elements of the provided array into a single String\n-     * containing the provided list of elements. \n-     * No delimiter is added before or after the list.\n-     * A <code>null</code> separator is the same as a blank String.\n+     * <p>Joins the elements of the provided array into a single String\n+     * containing the provided list of elements.</p>\n+     *\n+     * <p>No delimiter is added before or after the list. A\n+     * <code>null</code> separator is the same as a blank String.</p>\n      *\n      * @param array the array of values to join together\n      * @param separator the separator character to use\n     }\n \n     /**\n-     * Joins the elements of the provided <code>Iterator</code> into a\n-     * single String containing the provided elements.\n-     * No delimiter is added before or after the list.\n-     * A <code>null</code> separator is the same as a blank String.\n+     * <p>Joins the elements of the provided <code>Iterator</code> into\n+     * a single String containing the provided elements.</p>\n+     *\n+     * <p>No delimiter is added before or after the list. A\n+     * <code>null</code> separator is the same as a blank String.</p>\n      *\n      * @param iterator the <code>Iterator</code> of values to join together\n      * @param separator  the separator character to use\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Replace a String with another String inside a larger String, once.\n+     * <p>Replace a String with another String inside a larger String, once.</p>\n      *\n      * @see #replace(String text, String repl, String with, int max)\n      * @param text text to search and replace in\n     }\n \n     /**\n-     * Replace all occurances of a String within another String.\n+     * <p>Replace all occurances of a String within another String.</p>\n      *\n      * @see #replace(String text, String repl, String with, int max)\n      * @param text text to search and replace in\n     }\n \n     /**\n-     * Replace a String with another String inside a larger String,\n-     * for the first <code>max</code> values of the search String.  A\n-     * <code>null</code> reference is passed to this method is a\n-     * no-op.\n+     * <p>Replace a String with another String inside a larger String,\n+     * for the first <code>max</code> values of the search String.</p>\n+     *\n+     * <p>A <code>null</code> reference is passed to this method is a\n+     * no-op.</p>\n      *\n      * @param text text to search and replace in\n      * @param repl String to search for\n      * @param with String to replace with\n      * @param max maximum number of values to replace, or\n-     * <code>-1</code> if no maximum\n+     *  <code>-1</code> if no maximum\n      * @return the text with any replacements processed\n-     * @throws NullPointerException if repl is null\n+     * @throws NullPointerException if repl is <code>null</code>\n      */\n     public static String replace(String text, String repl, String with,\n                                  int max) {\n     }\n \n     /**\n-     * Overlay a part of a String with another String.\n+     * <p>Overlay a part of a String with another String.</p>\n      *\n      * @param text String to do overlaying in\n      * @param overlay String to overlay\n      * @param start int to start overlaying at\n      * @param end int to stop overlaying before\n      * @return String with overlayed text\n-     * @throws NullPointerException if text or overlay is null\n+     * @throws NullPointerException if text or overlay is <code>null</code>\n      */\n     public static String overlayString(String text, String overlay, int start, int end) {\n         return new StringBuffer(start + overlay.length() + text.length() - end + 1)\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Center a String in a larger String of size n.\n-     * Uses spaces as the value to buffer the string with.\n-     * Equivalent to <code>center(str, size, \" \")</code>\n+     * <p>Center a String in a larger String of size <code>n</code>.<p>\n+     *\n+     * <p>Uses spaces as the value to buffer the String with.\n+     * Equivalent to <code>center(str, size, \" \")</code>.</p>\n      *\n      * @param str String to center\n      * @param size int size of new String\n      * @return String containing centered String\n-     * @throws NullPointerException if str is null\n+     * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String center(String str, int size) {\n         return center(str, size, \" \");\n     }\n \n     /**\n-     * Center a String in a larger String of size n.\n-     * Uses a supplied String as the value to buffer the String with.\n+     * <p>Center a String in a larger String of size <code>n</code>.</p>\n+     *\n+     * <p>Uses a supplied String as the value to buffer the String with.</p>\n      *\n      * @param str String to center\n      * @param size int size of new String\n      * @param delim String to buffer the new String with\n      * @return String containing centered String\n-     * @throws NullPointerException if str or delim is null\n+     * @throws NullPointerException if str or delim is <code>null</code>\n      * @throws ArithmeticException if delim is the empty String\n      */\n     public static String center(String str, int size, String delim) {\n     //--------------------------------------------------------------------------\n     \n     /** \n-     * Remove the last newline, and everything after it from a String.\n+     * <p>Remove the last newline, and everything after it from a String.</p>\n      *\n      * @param str String to chomp the newline from\n      * @return String without chomped newline\n-     * @throws NullPointerException if str is null\n+     * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String chomp(String str) {\n         return chomp(str, \"\\n\");\n     }\n     \n     /** \n-     * Remove the last value of a supplied String, and everything after it \n-     * from a String.\n+     * <p>Remove the last value of a supplied String, and everything after\n+     * it from a String.</p>\n      *\n      * @param str String to chomp from\n      * @param sep String to chomp\n      * @return String without chomped ending\n-     * @throws NullPointerException if str or sep is null\n+     * @throws NullPointerException if str or sep is <code>null</code>\n      */\n     public static String chomp(String str, String sep) {\n         int idx = str.lastIndexOf(sep);\n     }\n     \n     /**\n-     * Remove a newline if and only if it is at the end \n-     * of the supplied String.\n+     * <p>Remove a newline if and only if it is at the end\n+     * of the supplied String.</p>\n      * \n      * @param str String to chomp from\n      * @return String without chomped ending\n-     * @throws NullPointerException if str is null\n+     * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String chompLast(String str) {\n         return chompLast(str, \"\\n\");\n     }\n     \n     /**\n-     * Remove a value if and only if the String ends with that value.\n+     * <p>Remove a value if and only if the String ends with that value.</p>\n      * \n      * @param str String to chomp from\n      * @param sep String to chomp\n      * @return String without chomped ending\n-     * @throws NullPointerException if str or sep is null\n+     * @throws NullPointerException if str or sep is <code>null</code>\n      */\n     public static String chompLast(String str, String sep) {\n         if (str.length() == 0) {\n     }\n \n     /** \n-     * Remove everything and return the last value of a supplied String, and \n-     * everything after it from a String.\n+     * <p>Remove everything and return the last value of a supplied String, and\n+     * everything after it from a String.</p>\n      *\n      * @param str String to chomp from\n      * @param sep String to chomp\n      * @return String chomped\n-     * @throws NullPointerException if str or sep is null\n+     * @throws NullPointerException if str or sep is <code>null</code>\n      */\n     public static String getChomp(String str, String sep) {\n         int idx = str.lastIndexOf(sep);\n     }\n \n     /** \n-     * Remove the first value of a supplied String, and everything before it \n-     * from a String.\n+     * <p>Remove the first value of a supplied String, and everything before it\n+     * from a String.</p>\n      *\n      * @param str String to chomp from\n      * @param sep String to chomp\n      * @return String without chomped beginning\n-     * @throws NullPointerException if str or sep is null\n+     * @throws NullPointerException if str or sep is <code>null</code>\n      */\n     public static String prechomp(String str, String sep) {\n         int idx = str.indexOf(sep);\n     }\n \n     /** \n-     * Remove and return everything before the first value of a \n-     * supplied String from another String.\n+     * <p>Remove and return everything before the first value of a\n+     * supplied String from another String.</p>\n      *\n      * @param str String to chomp from\n      * @param sep String to chomp\n      * @return String prechomped\n-     * @throws NullPointerException if str or sep is null\n+     * @throws NullPointerException if str or sep is <code>null</code>\n      */\n     public static String getPrechomp(String str, String sep) {\n         int idx = str.indexOf(sep);\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Remove the last character from a String. If the String \n-     * ends in \\r\\n, then remove both of them.\n+     * <p>Remove the last character from a String.</p>\n+     *\n+     * <p>If the String ends in <code>\\r\\n</code>, then remove both\n+     * of them.</p>\n      *\n      * @param str String to chop last character from\n      * @return String without last character\n-     * @throws NullPointerException if str is null\n+     * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String chop(String str) {\n         if (\"\".equals(str)) {\n     }\n \n     /**\n-     * Remove \\n from end of a String if it's there.\n-     * If a \\r precedes it, then remove that too.\n+     * <p>Remove <code>\\n</code> from end of a String if it's there.\n+     * If a <code>\\r</code> precedes it, then remove that too.</p>\n      *\n      * @param str String to chop a newline from\n      * @return String without newline\n-     * @throws NullPointerException if str is null\n+     * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String chopNewline(String str) {\n         int lastIdx = str.length() - 1;\n     \n     // spec 3.10.6\n     /**\n-     * Escapes any values it finds into their String form.\n-     * So a tab becomes the characters '\\\\' and 't'.\n+     * <p>Escapes any values it finds into their String form.</p>\n+     *\n+     * <p>So a tab becomes the characters <code>'\\\\'</code> and\n+     * <code>'t'</code>.</p>\n      *\n      * @param str String to escape values in\n      * @return String with escaped values\n-     * @throws NullPointerException if str is null\n+     * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String escape(String str) {\n         // improved with code from  cybertiger@cyberiantiger.org\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Repeat a String n times to form a new string.\n+     * <p>Repeat a String <code>n</code> times to form a\n+     * new string.</p>\n      *\n      * @param str String to repeat\n      * @param repeat number of times to repeat str\n      * @return String with repeated String\n-     * @throws NegativeArraySizeException if repeat < 0\n-     * @throws NullPointerException if str is null\n+     * @throws NegativeArraySizeException if <code>repeat < 0</code>\n+     * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String repeat(String str, int repeat) {\n         StringBuffer buffer = new StringBuffer(repeat * str.length());\n     }\n \n     /**\n-     * Right pad a String with spaces. Pad to a size of n.\n+     * <p>Right pad a String with spaces.</p>\n+     *\n+     * <p>The String is padded to the size of <code>n</code>.</p>\n      * \n      * @param str String to repeat\n      * @param size number of times to repeat str\n      * @return right padded String\n-     * @throws NullPointerException if str is null\n+     * @throws NullPointerException if str is <code>null</code>\n      */\n     public static String rightPad(String str, int size) {\n         return rightPad(str, size, \" \");\n     }\n     \n     /**\n-     * Right pad a String with a specified string. Pad to a size of n.\n+     * <p>Right pad a String with a specified string.</p>\n+     *\n+     * <p>The String is padded to the size of <code>n</code>.</p>\n      *\n      * @param str String to pad out\n      * @param size size to pad to\n      * @param delim String to pad with\n      * @return right padded String\n-     * @throws NullPointerException if str or delim is null\n-     * @throws ArithmeticException if delim is the empty string\n+     * @throws NullPointerException if str or delim is <code>null<code>\n+     * @throws ArithmeticException if delim is the empty String\n      */\n     public static String rightPad(String str, int size, String delim) {\n         size = (size - str.length()) / delim.length();\n     }\n \n     /**\n-     * Left pad a String with spaces. Pad to a size of n.\n+     * <p>Left pad a String with spaces.</p>\n+     *\n+     * <p>The String is padded to the size of <code>n<code>.</p>\n      *\n      * @param str String to pad out\n      * @param size size to pad to\n      * @return left padded String\n-     * @throws NullPointerException if str or delim is null\n+     * @throws NullPointerException if str or delim is <code>null<code>\n      */\n     public static String leftPad(String str, int size) {\n         return leftPad(str, size, \" \");\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Remove whitespace from the front and back of a String.\n+     * <p>Remove whitespace from the front and back of a String.</p>\n      * \n      * @param str the String to remove whitespace from\n      * @return the stripped String\n         return strip(str, null);\n     }\n     /**\n-     * Remove a specified String from the front and back of a \n-     * String. If Whitespace is wanted to be removed, used the \n-     * strip(String) method.\n+     * <p>Remove a specified String from the front and back of a\n+     * String.</p>\n+     *\n+     * <p>If whitespace is wanted to be removed, used the\n+     * {@link #strip(java.lang.String)} method.</p>\n      * \n      * @param str the String to remove a string from\n      * @param delim the String to remove at start and end\n     }\n \n     /**\n-     * Strip whitespace from the front and back of every String\n-     * in the array.\n+     * <p>Strip whitespace from the front and back of every String\n+     * in the array.</p>\n      * \n      * @param strs the Strings to remove whitespace from\n      * @return the stripped Strings\n     }\n  \n     /**\n-     * Strip the specified delimiter from the front and back of\n-     * every String in the array.\n-     * \n-     * @param strs the Strings to remove a string from\n+     * <p>Strip the specified delimiter from the front and back of\n+     * every String in the array.</p>\n+     * \n+     * @param strs the Strings to remove a String from\n      * @param delimiter the String to remove at start and end\n      * @return the stripped Strings\n      */\n     }   \n \n     /**\n-     * Strip any of a supplied String from the end of a String..\n-     * If the strip String is <code>null</code>, whitespace is stripped.\n+     * <p>Strip any of a supplied String from the end of a String.</p>\n+     *\n+     * <p>If the strip String is <code>null</code>, whitespace is\n+     * stripped.</p>\n      * \n      * @param str the String to remove characters from\n      * @param strip the String to remove\n     }\n \n     /**\n-     * Strip any of a supplied String from the start of a String.\n-     * If the strip String is <code>null</code>, whitespace is stripped.\n+     * <p>Strip any of a supplied String from the start of a String.</p>\n+     *\n+     * <p>If the strip String is <code>null</code>, whitespace is\n+     * stripped.</p>\n      * \n      * @param str the String to remove characters from\n      * @param strip the String to remove\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Convert a String to upper case, <code>null</code> String returns\n-     * <code>null</code>.\n+     * <p>Convert a String to upper case, <code>null</code> String\n+     * returns <code>null</code>.</p>\n      * \n      * @param str the String to uppercase\n      * @return the upper cased String\n     }\n \n     /**\n-     * Convert a String to lower case, <code>null</code> String returns\n-     * <code>null</code>.\n+     * <p>Convert a String to lower case, <code>null</code> String\n+     * returns <code>null</code>.</p>\n      * \n      * @param str the string to lowercase\n      * @return the lower cased String\n     }\n \n     /**\n-     * Uncapitalise a String. That is, convert the first character into\n-     * lower-case. <code>null</code> is returned as <code>null</code>.\n+     * <p>Uncapitalise a String.</p>\n+     *\n+     * <p>That is, convert the first character into lower-case.\n+     * <code>null</code> is returned as <code>null</code>.</p>\n      *\n      * @param str the String to uncapitalise\n      * @return uncapitalised String\n     }\n \n     /**\n-     * Capitalise a String. That is, convert the first character into\n-     * title-case. <code>null</code> is returned as <code>null</code>.\n+     * <p>Capitalise a String.</p>\n+     *\n+     * <p>That is, convert the first character into title-case.\n+     * <code>null</code> is returned as <code>null</code>.</p>\n      *\n      * @param str the String to capitalise\n      * @return capitalised String\n     }\n \n     /**\n-     * Swaps the case of String. Properly looks after \n-     * making sure the start of words are Titlecase and not \n-     * Uppercase. <code>null</code> is returned as\n-     * <code>null</code>.\n+     * <p>Swaps the case of String.</p>\n+     *\n+     * <p>Properly looks after making sure the start of words\n+     * are Titlecase and not Uppercase.</p>\n+     *\n+     * <p><code>null</code> is returned as <code>null</code>.</p>\n      * \n      * @param str the String to swap the case of\n      * @return the modified String\n \n \n     /**\n-     * Capitalise all the words in a String. Uses Character.isWhitespace\n-     * as a separator between words. <code>null</code> will return\n-     * <code>null</code>.\n+     * <p>Capitalise all the words in a String.</p>\n+     *\n+     * <p>Uses {@link Character#isWhitespace(char)} as a\n+     * separator between words.</p>\n+     *\n+     * <p><code>null</code> will return <code>null</code>.</p>\n      *\n      * @param str the String to capitalise\n      * @return capitalised String\n     }\n \n     /**\n-     * Uncapitalise all the words in a string. Uses\n-     * Character.isWhitespace\n-     * as a separator between words. Null will return null.\n+     * <p>Uncapitalise all the words in a string.</p>\n+     *\n+     * <p>Uses {@link Character#isWhitespace(char)} as a\n+     * separator between words.</p>\n+     *\n+     * <p><code>null</code> will return <code>null</code>.</p>\n      *\n      * @param str  the string to uncapitalise\n      * @return uncapitalised string\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Get the String that is nested in between two instances of the \n-     * same String. If <code>str</code> is <code>null</code>, will\n-     * return <code>null</code>.\n+     * <p>Get the String that is nested in between two instances of the\n+     * same String.</p>\n+     *\n+     * <p>If <code>str</code> is <code>null</code>, will\n+     * return <code>null</code>.</p>\n      *\n      * @param str the String containing nested-string\n      * @param tag the String before and after nested-string\n-     * @return the String that was nested, or null\n-     * @throws NullPointerException if tag is null\n+     * @return the String that was nested, or <code>null</code>\n+     * @throws NullPointerException if tag is <code>null</code>\n      */\n     public static String getNestedString(String str, String tag) {\n         return getNestedString(str, tag, tag);\n     }\n     \n     /**\n-     * Get the String that is nested in between two Strings.\n+     * <p>Get the String that is nested in between two Strings.</p>\n      *\n      * @param str the String containing nested-string\n      * @param open the String before nested-string\n      * @param close the String after nested-string\n-     * @return the String that was nested, or null\n-     * @throws NullPointerException if open or close is null\n+     * @return the String that was nested, or <code>null</code>\n+     * @throws NullPointerException if open or close is <code>null</code>\n      */\n     public static String getNestedString(String str, String open, String close) {\n         if (str == null) {\n     }\n \n     /**\n-     * How many times is the substring in the larger String.\n-     * <code>null</code> returns 0.\n+     * <p>How many times is the substring in the larger String.</p>\n+     *\n+     * <p><code>null</code> returns <code>0</code>.</p>\n      * \n      * @param str the String to check\n      * @param sub the substring to count\n-     * @return the number of occurances, 0 if the String is null\n-     * @throws NullPointerException if sub is null\n+     * @return the number of occurances, 0 if the String is <code>null</code>\n+     * @throws NullPointerException if sub is <code>null</code>\n      */\n     public static int countMatches(String str, String sub) {\n         if (str == null) {\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Checks if the String contains only unicode letters.\n-     * <code>null</code> will return <code>false</code>.\n-     * The empty String will return <code>true</code>.\n+     * <p>Checks if the String contains only unicode letters.</p>\n+     *\n+     * <p><code>null</code> will return <code>false</code>.\n+     * An empty String will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n-     * @return true if only contains letters, and is non-null\n+     * @return <code>true</code> if only contains letters, and is non-null\n      */\n     public static boolean isAlpha(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Checks if the String contains only whitespace.\n-     * <code>null</code> will return <code>false</code>.  The empty String\n-     * will return <code>true</code>.\n+     * <p>Checks if the String contains only whitespace.</p>\n+     *\n+     * <p><code>null</code> will return <code>false</code>. An\n+     * empty String will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n-     * @return true if only contains whitespace, and is non-null\n+     * @return <code>true</code> if only contains whitespace, and is non-null\n      */\n     public static boolean isWhitespace(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Checks if the String contains only unicode letters and space (' ').\n-     * <code>null</code> will return <code>false</code>.  The empty String\n-     * will return <code>true</code>.\n+     * <p>Checks if the String contains only unicode letters and\n+     * space (<code>' '</code>).</p>\n+     *\n+     * <p><code>null</code> will return <code>false</code>. An\n+     * empty String will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n-     * @return true if only contains letters and space, and is non-null\n+     * @return <code>true</code> if only contains letters and space,\n+     *  and is non-null\n      */\n     public static boolean isAlphaSpace(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Checks if the String contains only unicode letters or digits.\n-     * <code>null</code> will return <code>false</code>. The empty\n-     * String will return <code>true</code>.\n+     * <p>Checks if the String contains only unicode letters or digits.</p>\n+     *\n+     * <p><code>null</code> will return <code>false</code>. An empty\n+     * String will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n-     * @return true if only contains letters or digits, and is non-null\n+     * @return <code>true</code> if only contains letters or digits,\n+     *  and is non-null\n      */\n     public static boolean isAlphanumeric(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Checks if the String contains only unicode letters, digits or space (' ').\n-     * <code>null</code> will return <code>false</code>. The empty String will\n-     * return <code>true</code>.\n+     * <p>Checks if the String contains only unicode letters, digits\n+     * or space (<code>' '</code>).</p>\n+     *\n+     * <p><code>null</code> will return <code>false</code>. An empty\n+     * String will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n-     * @return true if only contains letters, digits or space, and is non-null\n+     * @return <code>true</code> if only contains letters, digits or space,\n+     *  and is non-null\n      */\n     public static boolean isAlphanumericSpace(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Checks if the String contains only unicode digits.\n-     * <code>null</code> will return <code>false</code>.\n-     * The empty String will return <code>true</code>.\n+     * <p>Checks if the String contains only unicode digits.</p>\n+     *\n+     * <p><code>null</code> will return <code>false</code>.\n+     * An empty String will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n-     * @return true if only contains digits, and is non-null\n+     * @return <code>true</code> if only contains digits, and is non-null\n      */\n     public static boolean isNumeric(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Checks if the String contains only unicode digits or space (' ').\n-     * <code>null</code> will return <code>false</code>. The empty\n-     * String will return <code>true</code>.\n+     * <p>Checks if the String contains only unicode digits or space\n+     * (<code>' '</code>).</p>\n+     *\n+     * <p><code>null</code> will return <code>false</code>. An empty\n+     * String will return <code>true</code>.</p>\n      * \n      * @param str the String to check\n-     * @return true if only contains digits or space, and is non-null\n+     * @return <code>true</code> if only contains digits or space,\n+     *  and is non-null\n      */\n     public static boolean isNumericSpace(String str) {\n         if (str == null) {\n     }\n \n     /**\n-     * Checks if the String contains a 'true' value. These are defined \n-     * as the words 'true', 'on' and 'yes', case insensitive.\n+     * <p>Checks if the String contains a 'true' value.</p>\n+     *\n+     * <p>These values are defined as the words\n+     * <code>'true'</code>, <code>'on'</code> and\n+     * <code>'yes'</code>, case insensitive.</p>\n      *\n      * @param str the String to check\n-     * @return true if the string is 'true|on|yes' case insensitive\n+     * @return <code>true</code> if the string is 'true|on|yes' case\n+     *  insensitive\n      */\n     public static boolean isTrue(String str) {\n         if (\"true\".equalsIgnoreCase(str)) {\n     //--------------------------------------------------------------------------\n     \n     /**\n-     * Returns either the passed in Object as a String, or,\n-     * if the Object is <code>null</code>, an empty String.\n+     * <p>Returns either the passed in <code>Object</code> as a String,\n+     * or, if the <code>Object</code> is <code>null</code>, an empty\n+     * String.</p>\n      * \n      * @param obj the Object to check\n-     * @return the passed in Object's toString, or blank if it was null\n+     * @return the passed in Object's toString, or blank if it was\n+     *  <code>null</code>\n      */\n     public static String defaultString(Object obj) {\n         return defaultString(obj, \"\");\n     }\n \n     /**\n-     * Returns either the passed in Object as a String, or, \n-     * if the Object is <code>null</code>, a passed in default String.\n+     * <p>Returns either the passed in <code>Object</code> as a String,\n+     * or, if the <code>Object</code> is <code>null</code>, a passed\n+     * in default String.</p>\n      * \n      * @param obj the Object to check\n-     * @param defaultString  the default String to return if str is null\n-     * @return the passed in string, or the default if it was null\n+     * @param defaultString  the default String to return if str is\n+     *  <code>null</code>\n+     * @return the passed in string, or the default if it was\n+     *  <code>null</code>\n      */\n     public static String defaultString(Object obj, String defaultString) {\n         return (obj == null) ? defaultString : obj.toString();\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Reverse a String, <code>null</code> String returns <code>null</code>.\n+     * <p>Reverse a String.</p>\n+     *\n+     * <p><code>null</code> String returns <code>null</code>.</p>\n      * \n      * @param str the String to reverse\n      * @return the reversed String\n     }\n \n     /**\n-     * Reverses a String that is delimited by a specific character.\n-     * The Strings between the delimiters are not reversed.\n-     * Thus java.lang.String becomes String.lang.java (if the delimiter is '.').\n+     * <p>Reverses a String that is delimited by a specific character.</p>\n+     *\n+     * <p>The Strings between the delimiters are not reversed.\n+     * Thus java.lang.String becomes String.lang.java (if the delimiter\n+     * is <code>'.'</code>).</p>\n      * \n      * @param str the String to reverse\n      * @param delimiter the delimiter to use\n     }\n \n     /**\n-     * Reverses an array. \n-     * TAKEN FROM CollectionsUtils.\n+     * <p>Reverses an array.</p>\n+     *\n+     * <p>TAKEN FROM CollectionsUtils.</p>\n      *\n      * @param array  the array to reverse\n      */\n     //--------------------------------------------------------------------------\n \n     /**\n-     * Find the Levenshtein distance between two Strings.\n-     * This is the number of changes needed to change one String into\n-     * another. Where each change is a single character modification.\n-     *\n-     * This implemmentation of the levenshtein distance algorithm \n-     * is from http://www.merriampark.com/ld.htm\n+     * <p>Find the Levenshtein distance between two Strings.</p>\n+     *\n+     * <P>This is the number of changes needed to change one String into\n+     * another. Where each change is a single character modification.</p>\n+     *\n+     * <p>This implemmentation of the levenshtein distance algorithm\n+     * is from <a href=\"http://www.merriampark.com/ld.htm\">http://www.merriampark.com/ld.htm</a></p>\n      * \n      * @param s the first String\n      * @param t the second String\n      * @return result distance\n-     * @throws NullPointerException if s or t is null\n+     * @throws NullPointerException if s or t is <code>null</code>\n      */\n     public static int getLevenshteinDistance(String s, String t) {\n         int d[][]; // matrix\n     }\n \n     /**\n-     * Checks if the String contains only certain chars.\n+     * <p>Checks if the String contains only certain chars.</p>\n      *\n      * @param str the String to check\n      * @param valid an array of valid chars\n--- a/src/java/org/apache/commons/lang/SystemUtils.java\n+++ b/src/java/org/apache/commons/lang/SystemUtils.java\n  */\n \n /**\n- * Common <code>System</code> class helpers.\n+ * <p>Common <code>System</code> class helpers.</p>\n  *\n  * @author Based on code from Avalon Excalibur\n  * @author Based on code from Lucene\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:sdowney@panix.com\">Steve Downey</a>\n- * @version $Id: SystemUtils.java,v 1.3 2002/10/29 19:47:02 bayard Exp $\n+ * @version $Id: SystemUtils.java,v 1.4 2002/11/16 10:41:03 scolebourne Exp $\n  */\n public class SystemUtils {\n     \n     /**\n-     * SystemUtils instances should NOT be constructed in standard programming.\n-     * Instead, the class should be used as <code>SystemUtils.FILE_SEPARATOR</code>.\n-     * This constructor is public to permit tools that require a JavaBean instance\n-     * to operate.\n+     * <P>SystemUtils instances should NOT be constructed in standard\n+     * programming. Instead, the class should be used as\n+     * <code>SystemUtils.FILE_SEPARATOR</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n      */\n     public SystemUtils() {\n     }\n //    }\n \n     /**\n-     * Get the Java version number as a float.\n-     * Example output:<br>\n-     * 1.2f  for JDK 1.2<br>\n-     * 1.31f  for JDK 1.3.1<br>\n+     * <p>Get the Java version number as a <code>float</code>.</p>\n+     *\n+     * <P>Example output:</p>\n+     * <ul>\n+     *  <li><code>1.2f</code> for JDK 1.2\n+     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * </ul>\n      * \n      * @return the version, for example 1.31f for JDK 1.3.1\n      */\n     }\n     \n     /**\n-     * Is the Java version at the the requested version.\n-     * Example input:<br>\n-     * 1.2f  for JDK 1.2<br>\n-     * 1.31f  for JDK 1.3.1<br>\n+     * <p>Is the Java version at the the requested version.</p>\n+     *\n+     * <p>Example input:</p>\n+     * <ul>\n+     *  <li><code>1.2f</code> for JDK 1.2\n+     *  <li><code>1.31f</code> for JDK 1.3.1\n+     * </ul>\n      * \n      * @param requiredVersion  the required version, for example 1.31f\n-     * @return true if the actual version is equal or greater than the required version\n+     * @return <code>true</code> if the actual version is equal or greater\n+     *  than the required version\n      */\n     public boolean isJavaVersionAtLeast(float requiredVersion) {\n         return (getJavaVersion() >= requiredVersion);", "timestamp": 1037443263, "metainfo": ""}