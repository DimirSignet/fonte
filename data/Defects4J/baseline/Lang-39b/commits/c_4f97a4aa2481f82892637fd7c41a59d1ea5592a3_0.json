{"sha": "4f97a4aa2481f82892637fd7c41a59d1ea5592a3", "log": "Creation of math subpackage Addition of Range class, and specific subclasses Tests for Range   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/DoubleRange.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p><code>DoubleRange</code> represents an inclusive range of <code>double</code>s.</p>\n+ *\n+ * @author Stephen Colebourne\n+ * @since 2.0\n+ * @version $Id: DoubleRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class DoubleRange extends Range implements Serializable {\n+    \n+    private static final long serialVersionUID = 71849363892740L;\n+\n+    /* The minimum number in this range (inclusive). */\n+    private final double min;\n+    /* The maximum number in this range (inclusive). */\n+    private final double max;\n+    \n+    /** Cached output minObject (class is immutable) */\n+    private transient Double minObject = null;\n+    /** Cached output maxObject (class is immutable) */\n+    private transient Double maxObject = null;\n+    /** Cached output hashCode (class is immutable) */\n+    private transient int hashCode = 0;\n+    /** Cached output toString (class is immutable) */\n+    private transient String toString = null;\n+    \n+    /**\n+     * <p>Constructs a new <code>DoubleRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n+     *\n+     * @param number  the number to use for this range\n+     * @throws IllegalArgumentException if the number is <code>NaN</code>\n+     */\n+    public DoubleRange(double number) {\n+        super();\n+        if (Double.isNaN(number)) {\n+            throw new IllegalArgumentException(\"The number must not be NaN\");\n+        }\n+        this.min = number;\n+        this.max = number;\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>DoubleRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n+     *\n+     * @param number  the number to use for this range, must not be null\n+     * @throws IllegalArgumentException if the number is <code>null</code>\n+     * @throws IllegalArgumentException if the number is <code>NaN</code>\n+     */\n+    public DoubleRange(Number number) {\n+        super();\n+        if (number == null) {\n+            throw new IllegalArgumentException(\"The number must not be null\");\n+        }\n+        this.min = number.doubleValue();\n+        this.max = number.doubleValue();\n+        if (Double.isNaN(min) || Double.isNaN(max)) {\n+            throw new IllegalArgumentException(\"The number must not be NaN\");\n+        }\n+        if (number instanceof Double) {\n+            this.minObject = (Double) number;\n+            this.maxObject = (Double) number;\n+        }\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>DoubleRange</code> with the specified\n+     * minimum and maximum numbers (both inclusive).</p>\n+     * \n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     * \n+     * @param number1  first number that defines the edge of the range, inclusive\n+     * @param number2  second number that defines the edge of the range, inclusive\n+     * @throws IllegalArgumentException if either number is <code>NaN</code>\n+     */\n+    public DoubleRange(double number1, double number2) {\n+        super();\n+        if (Double.isNaN(number1) || Double.isNaN(number2)) {\n+            throw new IllegalArgumentException(\"The numbers must not be NaN\");\n+        }\n+        if (number2 < number1) {\n+            this.min = number2;\n+            this.max = number1;\n+        } else {\n+            this.min = number1;\n+            this.max = number2;\n+        }\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>DoubleRange</code> with the specified\n+     * minimum and maximum numbers (both inclusive).</p>\n+     * \n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     *\n+     * @param number1  first number that defines the edge of the range, inclusive\n+     * @param number2  second number that defines the edge of the range, inclusive\n+     * @throws IllegalArgumentException if either number is <code>null</code>\n+     * @throws IllegalArgumentException if either number is <code>NaN</code>\n+     */\n+    public DoubleRange(Number number1, Number number2) {\n+        super();\n+        if (number1 == null || number2 == null) {\n+            throw new IllegalArgumentException(\"The numbers must not be null\");\n+        }\n+        double number1val = number1.doubleValue();\n+        double number2val = number2.doubleValue();\n+        if (Double.isNaN(number1val) || Double.isNaN(number2val)) {\n+            throw new IllegalArgumentException(\"The numbers must not be NaN\");\n+        }\n+        if (number2val < number1val) {\n+            this.min = number2val;\n+            this.max = number1val;\n+            if (number2 instanceof Double) {\n+                this.minObject = (Double) number2;\n+            }\n+            if (number1 instanceof Double) {\n+                this.maxObject = (Double) number1;\n+            }\n+        } else {\n+            this.min = number1val;\n+            this.max = number2val;\n+            if (number1 instanceof Double) {\n+                this.minObject = (Double) number1;\n+            }\n+            if (number2 instanceof Double) {\n+                this.maxObject = (Double) number2;\n+            }\n+        }\n+    }\n+\n+    // Accessors\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Returns the minimum number in this range.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public Number getMinimumNumber() {\n+        if (minObject == null) {\n+            minObject = new Double(min);            \n+        }\n+        return minObject;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values or decimals.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public long getMinimumLong() {\n+        return (long) min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values or decimals.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public int getMinimumInteger() {\n+        return (int) min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public double getMinimumDouble() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public float getMinimumFloat() {\n+        return (float) min;\n+    }\n+\n+    /**\n+     * <p>Returns the maximum number in this range.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public Number getMaximumNumber() {\n+        if (maxObject == null) {\n+            maxObject = new Double(max);            \n+        }\n+        return maxObject;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values or decimals.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public long getMaximumLong() {\n+        return (long) max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values or decimals.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public int getMaximumInteger() {\n+        return (int) max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public double getMaximumDouble() {\n+        return max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public float getMaximumFloat() {\n+        return (float) max;\n+    }\n+\n+    // Tests\n+    //--------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Tests whether the specified <code>number</code> occurs within\n+     * this range using <code>double</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param number  the number to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this range\n+     */\n+    public boolean includesNumber(Number number) {\n+        if (number == null) {\n+            return false;\n+        }\n+        return includesDouble(number.doubleValue());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>double</code> occurs within\n+     * this range using <code>double</code> comparison.</p>\n+     * \n+     * <p>This implementation overrides the superclass for performance as it is\n+     * the most common case.</p>\n+     * \n+     * @param value  the double to test\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>double</code> comparison\n+     */\n+    public boolean includesDouble(double value) {\n+        return (value >= min && value <= max);\n+    }\n+\n+    // Range tests\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Tests whether the specified range occurs entirely within this range\n+     * using <code>double</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range occurs entirely within this range\n+     * @throws IllegalArgumentException if the range is not of this type\n+     */\n+    public boolean includesRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return includesDouble(range.getMinimumDouble()) &&\n+               includesDouble(range.getMaximumDouble());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified range overlaps with this range\n+     * using <code>double</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range overlaps with this range\n+     */\n+    public boolean overlapsRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return range.includesDouble(min) ||\n+               range.includesDouble(max) || \n+               includesDouble(range.getMinimumDouble());\n+    }\n+\n+    // Basics\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Compares this range to another object to test if they are equal.</p>.\n+     * \n+     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n+     *\n+     * @param obj the reference object with which to compare\n+     * @return <code>true</code> if this object is equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof DoubleRange == false) {\n+            return false;\n+        }\n+        DoubleRange range = (DoubleRange) obj;\n+        return (Double.doubleToLongBits(min) == Double.doubleToLongBits(range.min) &&\n+                Double.doubleToLongBits(max) == Double.doubleToLongBits(range.max));\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode for the range.</p>\n+     *\n+     * @return a hash code value for this object\n+     */\n+    public int hashCode() {\n+        if (hashCode == 0) {\n+            hashCode = 17;\n+            hashCode = 37 * hashCode + getClass().hashCode();\n+            long lng = Double.doubleToLongBits(min);\n+            hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));\n+            lng = Double.doubleToLongBits(max);\n+            hashCode = 37 * hashCode + ((int) (lng ^ (lng >> 32)));\n+        }\n+        return hashCode;\n+    }\n+\n+    /**\n+     * <p>Gets the range as a <code>String</code>.</p>\n+     *\n+     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n+     *\n+     * @return the <code>String</code> representation of this range\n+     */\n+    public String toString() {\n+        if (toString == null) {\n+            StringBuffer buf = new StringBuffer(32);\n+            buf.append(\"Range[\");\n+            buf.append(min);\n+            buf.append(',');\n+            buf.append(max);\n+            buf.append(']');\n+            toString = buf.toString();\n+        }\n+        return toString;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/FloatRange.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p><code>FloatRange</code> represents an inclusive range of <code>float</code>s.</p>\n+ *\n+ * @author Stephen Colebourne\n+ * @since 2.0\n+ * @version $Id: FloatRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class FloatRange extends Range implements Serializable {\n+    \n+    private static final long serialVersionUID = 71849363892750L;\n+\n+    /* The minimum number in this range (inclusive). */\n+    private final float min;\n+    /* The maximum number in this range (inclusive). */\n+    private final float max;\n+    \n+    /** Cached output minObject (class is immutable) */\n+    private transient Float minObject = null;\n+    /** Cached output maxObject (class is immutable) */\n+    private transient Float maxObject = null;\n+    /** Cached output hashCode (class is immutable) */\n+    private transient int hashCode = 0;\n+    /** Cached output toString (class is immutable) */\n+    private transient String toString = null;\n+    \n+    /**\n+     * <p>Constructs a new <code>FloatRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n+     *\n+     * @param number  the number to use for this range\n+     * @throws IllegalArgumentException if the number is <code>NaN</code>\n+     */\n+    public FloatRange(float number) {\n+        super();\n+        if (Float.isNaN(number)) {\n+            throw new IllegalArgumentException(\"The number must not be NaN\");\n+        }\n+        this.min = number;\n+        this.max = number;\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>FloatRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n+     *\n+     * @param number  the number to use for this range, must not be null\n+     * @throws IllegalArgumentException if the number is <code>null</code>\n+     * @throws IllegalArgumentException if the number is <code>NaN</code>\n+     */\n+    public FloatRange(Number number) {\n+        super();\n+        if (number == null) {\n+            throw new IllegalArgumentException(\"The number must not be null\");\n+        }\n+        this.min = number.floatValue();\n+        this.max = number.floatValue();\n+        if (Float.isNaN(min) || Float.isNaN(max)) {\n+            throw new IllegalArgumentException(\"The number must not be NaN\");\n+        }\n+        if (number instanceof Float) {\n+            this.minObject = (Float) number;\n+            this.maxObject = (Float) number;\n+        }\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>FloatRange</code> with the specified\n+     * minimum and maximum numbers (both inclusive).</p>\n+     * \n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     * \n+     * @param number1  first number that defines the edge of the range, inclusive\n+     * @param number2  second number that defines the edge of the range, inclusive\n+     * @throws IllegalArgumentException if either number is <code>NaN</code>\n+     */\n+    public FloatRange(float number1, float number2) {\n+        super();\n+        if (Float.isNaN(number1) || Float.isNaN(number2)) {\n+            throw new IllegalArgumentException(\"The numbers must not be NaN\");\n+        }\n+        if (number2 < number1) {\n+            this.min = number2;\n+            this.max = number1;\n+        } else {\n+            this.min = number1;\n+            this.max = number2;\n+        }\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>FloatRange</code> with the specified\n+     * minimum and maximum numbers (both inclusive).</p>\n+     * \n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     *\n+     * @param number1  first number that defines the edge of the range, inclusive\n+     * @param number2  second number that defines the edge of the range, inclusive\n+     * @throws IllegalArgumentException if either number is <code>null</code>\n+     * @throws IllegalArgumentException if either number is <code>NaN</code>\n+     */\n+    public FloatRange(Number number1, Number number2) {\n+        super();\n+        if (number1 == null || number2 == null) {\n+            throw new IllegalArgumentException(\"The numbers must not be null\");\n+        }\n+        float number1val = number1.floatValue();\n+        float number2val = number2.floatValue();\n+        if (Float.isNaN(number1val) || Float.isNaN(number2val)) {\n+            throw new IllegalArgumentException(\"The numbers must not be NaN\");\n+        }\n+        if (number2val < number1val) {\n+            this.min = number2val;\n+            this.max = number1val;\n+            if (number2 instanceof Float) {\n+                this.minObject = (Float) number2;\n+            }\n+            if (number1 instanceof Float) {\n+                this.maxObject = (Float) number1;\n+            }\n+        } else {\n+            this.min = number1val;\n+            this.max = number2val;\n+            if (number1 instanceof Float) {\n+                this.minObject = (Float) number1;\n+            }\n+            if (number2 instanceof Float) {\n+                this.maxObject = (Float) number2;\n+            }\n+        }\n+    }\n+\n+    // Accessors\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Returns the minimum number in this range.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public Number getMinimumNumber() {\n+        if (minObject == null) {\n+            minObject = new Float(min);            \n+        }\n+        return minObject;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values or decimals.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public long getMinimumLong() {\n+        return (long) min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values or decimals.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public int getMinimumInteger() {\n+        return (int) min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public double getMinimumDouble() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public float getMinimumFloat() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Returns the maximum number in this range.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public Number getMaximumNumber() {\n+        if (maxObject == null) {\n+            maxObject = new Float(max);            \n+        }\n+        return maxObject;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values or decimals.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public long getMaximumLong() {\n+        return (long) max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values or decimals.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public int getMaximumInteger() {\n+        return (int) max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public double getMaximumDouble() {\n+        return max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public float getMaximumFloat() {\n+        return max;\n+    }\n+\n+    // Tests\n+    //--------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Tests whether the specified <code>number</code> occurs within\n+     * this range using <code>float</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param number  the number to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this range\n+     */\n+    public boolean includesNumber(Number number) {\n+        if (number == null) {\n+            return false;\n+        }\n+        return includesFloat(number.floatValue());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>float</code> occurs within\n+     * this range using <code>float</code> comparison.</p>\n+     * \n+     * <p>This implementation overrides the superclass for performance as it is\n+     * the most common case.</p>\n+     * \n+     * @param value  the float to test\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>float</code> comparison\n+     */\n+    public boolean includesFloat(float value) {\n+        return (value >= min && value <= max);\n+    }\n+\n+    // Range tests\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Tests whether the specified range occurs entirely within this range\n+     * using <code>float</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range occurs entirely within this range\n+     * @throws IllegalArgumentException if the range is not of this type\n+     */\n+    public boolean includesRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return includesFloat(range.getMinimumFloat()) &&\n+               includesFloat(range.getMaximumFloat());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified range overlaps with this range\n+     * using <code>float</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range overlaps with this range\n+     */\n+    public boolean overlapsRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return range.includesFloat(min) ||\n+               range.includesFloat(max) || \n+               includesFloat(range.getMinimumFloat());\n+    }\n+\n+    // Basics\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Compares this range to another object to test if they are equal.</p>.\n+     * \n+     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n+     *\n+     * @param obj the reference object with which to compare\n+     * @return <code>true</code> if this object is equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof FloatRange == false) {\n+            return false;\n+        }\n+        FloatRange range = (FloatRange) obj;\n+        return (Float.floatToIntBits(min) == Float.floatToIntBits(range.min) &&\n+                Float.floatToIntBits(max) == Float.floatToIntBits(range.max));\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode for the range.</p>\n+     *\n+     * @return a hash code value for this object\n+     */\n+    public int hashCode() {\n+        if (hashCode == 0) {\n+            hashCode = 17;\n+            hashCode = 37 * hashCode + getClass().hashCode();\n+            hashCode = 37 * hashCode + Float.floatToIntBits(min);\n+            hashCode = 37 * hashCode + Float.floatToIntBits(max);\n+        }\n+        return hashCode;\n+    }\n+\n+    /**\n+     * <p>Gets the range as a <code>String</code>.</p>\n+     *\n+     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n+     *\n+     * @return the <code>String</code> representation of this range\n+     */\n+    public String toString() {\n+        if (toString == null) {\n+            StringBuffer buf = new StringBuffer(32);\n+            buf.append(\"Range[\");\n+            buf.append(min);\n+            buf.append(',');\n+            buf.append(max);\n+            buf.append(']');\n+            toString = buf.toString();\n+        }\n+        return toString;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/IntRange.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p><code>IntRange</code> represents an inclusive range of <code>int</code>s.</p>\n+ *\n+ * @author Stephen Colebourne\n+ * @since 2.0\n+ * @version $Id: IntRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class IntRange extends Range implements Serializable {\n+    \n+    private static final long serialVersionUID = 71849363892730L;\n+\n+    /* The minimum number in this range (inclusive). */\n+    private final int min;\n+    /* The maximum number in this range (inclusive). */\n+    private final int max;\n+    \n+    /** Cached output minObject (class is immutable) */\n+    private transient Integer minObject = null;\n+    /** Cached output maxObject (class is immutable) */\n+    private transient Integer maxObject = null;\n+    /** Cached output hashCode (class is immutable) */\n+    private transient int hashCode = 0;\n+    /** Cached output toString (class is immutable) */\n+    private transient String toString = null;\n+    \n+    /**\n+     * <p>Constructs a new <code>IntRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n+     *\n+     * @param number  the number to use for this range\n+     */\n+    public IntRange(int number) {\n+        super();\n+        this.min = number;\n+        this.max = number;\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>IntRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n+     *\n+     * @param number  the number to use for this range, must not be null\n+     * @throws IllegalArgumentException if the number is <code>null</code>\n+     */\n+    public IntRange(Number number) {\n+        super();\n+        if (number == null) {\n+            throw new IllegalArgumentException(\"The number must not be null\");\n+        }\n+        this.min = number.intValue();\n+        this.max = number.intValue();\n+        if (number instanceof Integer) {\n+            this.minObject = (Integer) number;\n+            this.maxObject = (Integer) number;\n+        }\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>IntRange</code> with the specified\n+     * minimum and maximum numbers (both inclusive).</p>\n+     * \n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     * \n+     * @param number1  first number that defines the edge of the range, inclusive\n+     * @param number2  second number that defines the edge of the range, inclusive\n+     */\n+    public IntRange(int number1, int number2) {\n+        super();\n+        if (number2 < number1) {\n+            this.min = number2;\n+            this.max = number1;\n+        } else {\n+            this.min = number1;\n+            this.max = number2;\n+        }\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>IntRange</code> with the specified\n+     * minimum and maximum numbers (both inclusive).</p>\n+     * \n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     *\n+     * @param number1  first number that defines the edge of the range, inclusive\n+     * @param number2  second number that defines the edge of the range, inclusive\n+     * @throws IllegalArgumentException if either number is <code>null</code>\n+     */\n+    public IntRange(Number number1, Number number2) {\n+        super();\n+        if (number1 == null || number2 == null) {\n+            throw new IllegalArgumentException(\"The numbers must not be null\");\n+        }\n+        int number1val = number1.intValue();\n+        int number2val = number2.intValue();\n+        if (number2val < number1val) {\n+            this.min = number2val;\n+            this.max = number1val;\n+            if (number2 instanceof Integer) {\n+                this.minObject = (Integer) number2;\n+            }\n+            if (number1 instanceof Integer) {\n+                this.maxObject = (Integer) number1;\n+            }\n+        } else {\n+            this.min = number1val;\n+            this.max = number2val;\n+            if (number1 instanceof Integer) {\n+                this.minObject = (Integer) number1;\n+            }\n+            if (number2 instanceof Integer) {\n+                this.maxObject = (Integer) number2;\n+            }\n+        }\n+    }\n+\n+    // Accessors\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Returns the minimum number in this range.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public Number getMinimumNumber() {\n+        if (minObject == null) {\n+            minObject = new Integer(min);            \n+        }\n+        return minObject;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public long getMinimumLong() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public int getMinimumInteger() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public double getMinimumDouble() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public float getMinimumFloat() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Returns the maximum number in this range.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public Number getMaximumNumber() {\n+        if (maxObject == null) {\n+            maxObject = new Integer(max);            \n+        }\n+        return maxObject;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public long getMaximumLong() {\n+        return max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public int getMaximumInteger() {\n+        return max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public double getMaximumDouble() {\n+        return max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public float getMaximumFloat() {\n+        return max;\n+    }\n+\n+    // Tests\n+    //--------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Tests whether the specified <code>number</code> occurs within\n+     * this range using <code>int</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param number  the number to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this range\n+     */\n+    public boolean includesNumber(Number number) {\n+        if (number == null) {\n+            return false;\n+        }\n+        return includesInteger(number.intValue());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>int</code> occurs within\n+     * this range using <code>int</code> comparison.</p>\n+     * \n+     * <p>This implementation overrides the superclass for performance as it is\n+     * the most common case.</p>\n+     * \n+     * @param value  the int to test\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>int</code> comparison\n+     */\n+    public boolean includesInteger(int value) {\n+        return (value >= min && value <= max);\n+    }\n+\n+    // Range tests\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Tests whether the specified range occurs entirely within this range\n+     * using <code>int</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range occurs entirely within this range\n+     * @throws IllegalArgumentException if the range is not of this type\n+     */\n+    public boolean includesRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return includesInteger(range.getMinimumInteger()) &&\n+               includesInteger(range.getMaximumInteger());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified range overlaps with this range\n+     * using <code>int</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range overlaps with this range\n+     */\n+    public boolean overlapsRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return range.includesInteger(min) ||\n+               range.includesInteger(max) || \n+               includesInteger(range.getMinimumInteger());\n+    }\n+\n+    // Basics\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Compares this range to another object to test if they are equal.</p>.\n+     * \n+     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n+     *\n+     * @param obj the reference object with which to compare\n+     * @return <code>true</code> if this object is equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof IntRange == false) {\n+            return false;\n+        }\n+        IntRange range = (IntRange) obj;\n+        return (min == range.min && max == range.max);\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode for the range.</p>\n+     *\n+     * @return a hash code value for this object\n+     */\n+    public int hashCode() {\n+        if (hashCode == 0) {\n+            hashCode = 17;\n+            hashCode = 37 * hashCode + getClass().hashCode();\n+            hashCode = 37 * hashCode + min;\n+            hashCode = 37 * hashCode + max;\n+        }\n+        return hashCode;\n+    }\n+\n+    /**\n+     * <p>Gets the range as a <code>String</code>.</p>\n+     *\n+     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n+     *\n+     * @return the <code>String</code> representation of this range\n+     */\n+    public String toString() {\n+        if (toString == null) {\n+            StringBuffer buf = new StringBuffer(32);\n+            buf.append(\"Range[\");\n+            buf.append(min);\n+            buf.append(',');\n+            buf.append(max);\n+            buf.append(']');\n+            toString = buf.toString();\n+        }\n+        return toString;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p><code>LongRange</code> represents an inclusive range of <code>long</code>s.</p>\n+ *\n+ * @author Stephen Colebourne\n+ * @since 2.0\n+ * @version $Id: LongRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class LongRange extends Range implements Serializable {\n+    \n+    private static final long serialVersionUID = 71849363892720L;\n+\n+    /* The minimum number in this range (inclusive). */\n+    private final long min;\n+    /* The maximum number in this range (inclusive). */\n+    private final long max;\n+    \n+    /** Cached output minObject (class is immutable) */\n+    private transient Long minObject = null;\n+    /** Cached output maxObject (class is immutable) */\n+    private transient Long maxObject = null;\n+    /** Cached output hashCode (class is immutable) */\n+    private transient int hashCode = 0;\n+    /** Cached output toString (class is immutable) */\n+    private transient String toString = null;\n+    \n+    /**\n+     * <p>Constructs a new <code>LongRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n+     *\n+     * @param number  the number to use for this range\n+     */\n+    public LongRange(long number) {\n+        super();\n+        this.min = number;\n+        this.max = number;\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>LongRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n+     *\n+     * @param number  the number to use for this range, must not be null\n+     * @throws IllegalArgumentException if the number is <code>null</code>\n+     */\n+    public LongRange(Number number) {\n+        super();\n+        if (number == null) {\n+            throw new IllegalArgumentException(\"The number must not be null\");\n+        }\n+        this.min = number.longValue();\n+        this.max = number.longValue();\n+        if (number instanceof Long) {\n+            this.minObject = (Long) number;\n+            this.maxObject = (Long) number;\n+        }\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>LongRange</code> with the specified\n+     * minimum and maximum numbers (both inclusive).</p>\n+     * \n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     * \n+     * @param number1  first number that defines the edge of the range, inclusive\n+     * @param number2  second number that defines the edge of the range, inclusive\n+     */\n+    public LongRange(long number1, long number2) {\n+        super();\n+        if (number2 < number1) {\n+            this.min = number2;\n+            this.max = number1;\n+        } else {\n+            this.min = number1;\n+            this.max = number2;\n+        }\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>LongRange</code> with the specified\n+     * minimum and maximum numbers (both inclusive).</p>\n+     * \n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * getMinimum and getMaximum methods will return the correct values.</p>\n+     *\n+     * @param number1  first number that defines the edge of the range, inclusive\n+     * @param number2  second number that defines the edge of the range, inclusive\n+     * @throws IllegalArgumentException if either number is <code>null</code>\n+     */\n+    public LongRange(Number number1, Number number2) {\n+        super();\n+        if (number1 == null || number2 == null) {\n+            throw new IllegalArgumentException(\"The numbers must not be null\");\n+        }\n+        long number1val = number1.longValue();\n+        long number2val = number2.longValue();\n+        if (number2val < number1val) {\n+            this.min = number2val;\n+            this.max = number1val;\n+            if (number2 instanceof Long) {\n+                this.minObject = (Long) number2;\n+            }\n+            if (number1 instanceof Long) {\n+                this.maxObject = (Long) number1;\n+            }\n+        } else {\n+            this.min = number1val;\n+            this.max = number2val;\n+            if (number1 instanceof Long) {\n+                this.minObject = (Long) number1;\n+            }\n+            if (number2 instanceof Long) {\n+                this.maxObject = (Long) number2;\n+            }\n+        }\n+    }\n+\n+    // Accessors\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Returns the minimum number in this range.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public Number getMinimumNumber() {\n+        if (minObject == null) {\n+            minObject = new Long(min);            \n+        }\n+        return minObject;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public long getMinimumLong() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public int getMinimumInteger() {\n+        return (int) min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public double getMinimumDouble() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public float getMinimumFloat() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Returns the maximum number in this range.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public Number getMaximumNumber() {\n+        if (maxObject == null) {\n+            maxObject = new Long(max);            \n+        }\n+        return maxObject;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public long getMaximumLong() {\n+        return max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values.</p>\n+     */\n+    public int getMaximumInteger() {\n+        return (int) max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values.</p>\n+     */\n+    public double getMaximumDouble() {\n+        return max;\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n+     * \n+     * <p>This conversion can lose information for large values.</p>\n+     */\n+    public float getMaximumFloat() {\n+        return max;\n+    }\n+\n+    // Tests\n+    //--------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Tests whether the specified <code>number</code> occurs within\n+     * this range using <code>long</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param number  the number to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this range\n+     */\n+    public boolean includesNumber(Number number) {\n+        if (number == null) {\n+            return false;\n+        }\n+        return includesLong(number.longValue());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>long</code> occurs within\n+     * this range using <code>long</code> comparison.</p>\n+     * \n+     * <p>This implementation overrides the superclass for performance as it is\n+     * the most common case.</p>\n+     * \n+     * @param value  the long to test\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>long</code> comparison\n+     */\n+    public boolean includesLong(long value) {\n+        return (value >= min && value <= max);\n+    }\n+\n+    // Range tests\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Tests whether the specified range occurs entirely within this range\n+     * using <code>long</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range occurs entirely within this range\n+     * @throws IllegalArgumentException if the range is not of this type\n+     */\n+    public boolean includesRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return includesLong(range.getMinimumLong()) &&\n+               includesLong(range.getMaximumLong());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified range overlaps with this range\n+     * using <code>long</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range overlaps with this range\n+     */\n+    public boolean overlapsRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return range.includesLong(min) ||\n+               range.includesLong(max) || \n+               includesLong(range.getMinimumLong());\n+    }\n+\n+    // Basics\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Compares this range to another object to test if they are equal.</p>.\n+     * \n+     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n+     *\n+     * @param obj the reference object with which to compare\n+     * @return <code>true</code> if this object is equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof LongRange == false) {\n+            return false;\n+        }\n+        LongRange range = (LongRange) obj;\n+        return (min == range.min && max == range.max);\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode for the range.</p>\n+     *\n+     * @return a hash code value for this object\n+     */\n+    public int hashCode() {\n+        if (hashCode == 0) {\n+            hashCode = 17;\n+            hashCode = 37 * hashCode + getClass().hashCode();\n+            hashCode = 37 * hashCode + ((int) (min ^ (min >> 32)));\n+            hashCode = 37 * hashCode + ((int) (max ^ (max >> 32)));\n+        }\n+        return hashCode;\n+    }\n+\n+    /**\n+     * <p>Gets the range as a <code>String</code>.</p>\n+     *\n+     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n+     *\n+     * @return the <code>String</code> representation of this range\n+     */\n+    public String toString() {\n+        if (toString == null) {\n+            StringBuffer buf = new StringBuffer(32);\n+            buf.append(\"Range[\");\n+            buf.append(min);\n+            buf.append(',');\n+            buf.append(max);\n+            buf.append(']');\n+            toString = buf.toString();\n+        }\n+        return toString;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * <p><code>NumberRange</code> represents an inclusive range of \n+ * {@link java.lang.Number Number} objects of the same type.</p>\n+ *\n+ * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n+ * @author Stephen Colebourne\n+ * @since 2.0 (previously in org.apache.commons.lang)\n+ * @version $Id: NumberRange.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class NumberRange extends Range implements Serializable {\n+    \n+    private static final long serialVersionUID = 71849363892710L;\n+\n+    /* The minimum number in this range. */\n+    private final Number min;\n+    /* The maximum number in this range. */\n+    private final Number max;\n+    \n+    /** Cached output hashCode (class is immutable) */\n+    private transient int hashCode = 0;\n+    /** Cached output toString (class is immutable) */\n+    private transient String toString = null;\n+\n+    /**\n+     * <p>Constructs a new <code>NumberRange</code> using the specified\n+     * number as both the minimum and maximum in this range.</p>\n+     *\n+     * @param num the number to use for this range\n+     * @throws IllegalArgumentException if the number is <code>null</code>\n+     * @throws IllegalArgumentException if the number doesn't implement <code>Comparable</code>\n+     * @throws IllegalArgumentException if the number is <code>Double.NaN</code> or <code>Float.NaN</code>\n+     */\n+    public NumberRange(Number num) {\n+        if (num == null) {\n+            throw new IllegalArgumentException(\"The number must not be null\");\n+        }\n+        if (num instanceof Comparable == false) {\n+            throw new IllegalArgumentException(\"The number must implement Comparable\");\n+        }\n+        if (num instanceof Double && ((Double) num).isNaN()) {\n+            throw new IllegalArgumentException(\"The number must not be NaN\");\n+        }\n+        if (num instanceof Float && ((Float) num).isNaN()) {\n+            throw new IllegalArgumentException(\"The number must not be NaN\");\n+        }\n+\n+        this.min = num;\n+        this.max = num;\n+    }\n+\n+    /**\n+     * <p>Constructs a new <code>NumberRange</code> with the specified\n+     * minimum and maximum numbers (both inclusive).</p>\n+     * \n+     * <p>The arguments may be passed in the order (min,max) or (max,min). The\n+     * {@link #getMinimum()} and {@link #getMaximum()} methods will return the\n+     * correct value.</p>\n+     * \n+     * <p>This constructor is designed to be used with two <code>Number</code>\n+     * objects of the same type. If two objects of different types are passed in,\n+     * an exception is thrown.</p>\n+     *\n+     * @param num1  first number that defines the edge of the range, inclusive\n+     * @param num2  second number that defines the edge of the range, inclusive\n+     * @throws IllegalArgumentException if either number is <code>null</code>\n+     * @throws IllegalArgumentException if the numbers are of different types\n+     * @throws IllegalArgumentException if the numbers don't implement <code>Comparable</code>\n+     */\n+    public NumberRange(Number num1, Number num2) {\n+        if (num1 == null || num2 == null) {\n+            throw new IllegalArgumentException(\"The numbers must not be null\");\n+        }\n+        if (num1.getClass() != num2.getClass()) {\n+            throw new IllegalArgumentException(\"The numbers must be of the same type\");\n+        }\n+        if (num1 instanceof Comparable == false) {\n+            throw new IllegalArgumentException(\"The numbers must implement Comparable\");\n+        }\n+        if (num1 instanceof Double) {\n+            if (((Double) num1).isNaN() || ((Double) num2).isNaN()) {\n+                throw new IllegalArgumentException(\"The number must not be NaN\");\n+            }\n+        } else if (num1 instanceof Float) {\n+            if (((Float) num1).isNaN() || ((Float) num2).isNaN()) {\n+                throw new IllegalArgumentException(\"The number must not be NaN\");\n+            }\n+        }\n+        \n+        int compare = ((Comparable) num1).compareTo(num2);\n+        if (compare == 0) {\n+            this.min = num1;\n+            this.max = num1;\n+        } else if (compare > 0) {\n+            this.min = num2;\n+            this.max = num1;\n+        } else {\n+            this.min = num1;\n+            this.max = num2;\n+        }\n+    }\n+    \n+    // Accessors\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Returns the minimum number in this range.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public Number getMinimumNumber() {\n+        return min;\n+    }\n+\n+    /**\n+     * <p>Returns the maximum number in this range.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public Number getMaximumNumber() {\n+        return max;\n+    }\n+\n+    // Tests\n+    //--------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Tests whether the specified <code>number</code> occurs within\n+     * this range.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param number  the number to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this range\n+     * @throws IllegalArgumentException if the number is of a different type to the range\n+     */\n+    public boolean includesNumber(Number number) {\n+        if (number == null) {\n+            return false;\n+        }\n+        if (number.getClass() != min.getClass()) {\n+            throw new IllegalArgumentException(\"The number must be of the same type as the range numbers\");\n+        }\n+        int compareMin = ((Comparable) min).compareTo(number);\n+        int compareMax = ((Comparable) max).compareTo(number);\n+        return (compareMin <= 0 && compareMax >= 0);\n+    }\n+\n+    // Range tests\n+    //--------------------------------------------------------------------\n+    // use Range implementations\n+\n+    // Basics\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Compares this range to another object to test if they are equal.</p>.\n+     * \n+     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n+     *\n+     * @param obj the reference object with which to compare\n+     * @return <code>true</code> if this object is equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj instanceof NumberRange == false) {\n+            return false;\n+        }\n+        NumberRange range = (NumberRange) obj;\n+        return min.equals(range.min) && max.equals(range.max);\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode for the range.</p>\n+     *\n+     * @return a hash code value for this object\n+     */\n+    public int hashCode() {\n+        if (hashCode == 0) {\n+            hashCode = 17;\n+            hashCode = 37 * hashCode + getClass().hashCode();\n+            hashCode = 37 * hashCode + min.hashCode();\n+            hashCode = 37 * hashCode + max.hashCode();\n+        }\n+        return hashCode;\n+    }\n+\n+    /**\n+     * <p>Gets the range as a <code>String</code>.</p>\n+     *\n+     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n+     *\n+     * @return the <code>String</code> representation of this range\n+     */\n+    public String toString() {\n+        if (toString == null) {\n+            StringBuffer buf = new StringBuffer(32);\n+            buf.append(\"Range[\");\n+            buf.append(min);\n+            buf.append(',');\n+            buf.append(max);\n+            buf.append(']');\n+            toString = buf.toString();\n+        }\n+        return toString;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/math/Range.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import org.apache.commons.lang.NumberUtils;\n+\n+/**\n+ * <p><code>Range</code> represents a range of numbers of the same type.</p>\n+ * \n+ * <p>Specific subclasses hold the range values as different types. Each\n+ * subclass should be immutable and {@link java.io.Serializable Serializable}\n+ * if possible.</p>\n+ *\n+ * @author Stephen Colebourne\n+ * @since 2.0\n+ * @version $Id: Range.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public abstract class Range {\n+\n+    /**\n+     * <p>Constructs a new range.</p>\n+     */\n+    public Range() {\n+        super();\n+    }\n+\n+    // Accessors\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Gets the minimum number in this range.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public abstract Number getMinimumNumber();\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>long</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} method. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public long getMinimumLong() {\n+        return getMinimumNumber().longValue();\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>int</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} method. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public int getMinimumInteger() {\n+        return getMinimumNumber().intValue();\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>double</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} method. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public double getMinimumDouble() {\n+        return getMinimumNumber().doubleValue();\n+    }\n+\n+    /**\n+     * <p>Gets the minimum number in this range as a <code>float</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} method. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the minimum number in this range\n+     */\n+    public float getMinimumFloat() {\n+        return getMinimumNumber().floatValue();\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public abstract Number getMaximumNumber();\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>long</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMaximumNumber()} method. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public long getMaximumLong() {\n+        return getMaximumNumber().longValue();\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>int</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMaximumNumber()} method. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public int getMaximumInteger() {\n+        return getMaximumNumber().intValue();\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>double</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMaximumNumber()} method. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public double getMaximumDouble() {\n+        return getMaximumNumber().doubleValue();\n+    }\n+\n+    /**\n+     * <p>Gets the maximum number in this range as a <code>float</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMaximumNumber()} method. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the maximum number in this range\n+     */\n+    public float getMaximumFloat() {\n+        return getMaximumNumber().floatValue();\n+    }\n+\n+    // Include tests\n+    //--------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Tests whether the specified <code>Number</code> occurs within\n+     * this range.</p>\n+     * \n+     * <p>The exact comparison implementation varies by subclass. It is\n+     * intended that an <code>int</code> specific subclass will compare using\n+     * <code>int</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     *\n+     * @param number  the number to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this range\n+     * @throws IllegalArgumentException if the <code>Number</code> cannot be compared\n+     */\n+    public abstract boolean includesNumber(Number number);\n+\n+    /**\n+     * <p>Tests whether the specified <code>Number</code> occurs within\n+     * this range using <code>long</code> comparison..</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     * \n+     * <p>This implementation forwards to the {@link #includesLong(long)} method.</p>\n+     *\n+     * @param value  the long to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>long</code> comparison\n+     */\n+    public boolean includesLong(Number value) {\n+        if (value == null) {\n+            return false;\n+        }\n+        return includesLong(value.longValue());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>long</code> occurs within\n+     * this range using <code>long</code> comparison.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumLong()} and \n+     * {@link #getMaximumLong()} methods and should be good for most uses.</p>\n+     * \n+     * @param value  the long to test\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>long</code> comparison\n+     */\n+    public boolean includesLong(long value) {\n+        return (value >= getMinimumLong() && value <= getMaximumLong());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>Number</code> occurs within\n+     * this range using <code>int</code> comparison..</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     * \n+     * <p>This implementation forwards to the {@link #includesInteger(int)} method.</p>\n+     *\n+     * @param value  the integer to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>int</code> comparison\n+     */\n+    public boolean includesInteger(Number value) {\n+        if (value == null) {\n+            return false;\n+        }\n+        return includesInteger(value.intValue());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>int</code> occurs within\n+     * this range using <code>int</code> comparison.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumInteger()} and \n+     * {@link #getMaximumInteger()} methods and should be good for most uses.</p>\n+     * \n+     * @param value  the int to test\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>int</code> comparison\n+     */\n+    public boolean includesInteger(int value) {\n+        return (value >= getMinimumInteger() && value <= getMaximumInteger());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>Number</code> occurs within\n+     * this range using <code>double</code> comparison..</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     * \n+     * <p>This implementation forwards to the {@link #includesDouble(double)} method.</p>\n+     *\n+     * @param value  the double to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>double</code> comparison\n+     */\n+    public boolean includesDouble(Number value) {\n+        if (value == null) {\n+            return false;\n+        }\n+        return includesDouble(value.doubleValue());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>double</code> occurs within\n+     * this range using <code>double</code> comparison.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumDouble()} and \n+     * {@link #getMaximumDouble()} methods and should be good for most uses.</p>\n+     * \n+     * @param value  the double to test\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>double</code> comparison\n+     */\n+    public boolean includesDouble(double value) {\n+        int compareMin = NumberUtils.compare(getMinimumDouble(), value);\n+        int compareMax = NumberUtils.compare(getMaximumDouble(), value);\n+        return (compareMin <= 0 && compareMax >= 0);\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>Number</code> occurs within\n+     * this range using <code>float</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     * \n+     * <p>This implementation forwards to the {@link #includesFloat(float)} method.</p>\n+     *\n+     * @param value  the float to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>float</code> comparison\n+     */\n+    public boolean includesFloat(Number value) {\n+        if (value == null) {\n+            return false;\n+        }\n+        return includesFloat(value.floatValue());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified <code>float</code> occurs within\n+     * this range using <code>float</code> comparison.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumFloat()} and \n+     * {@link #getMaximumFloat()} methods and should be good for most uses.</p>\n+     * \n+     * @param value  the float to test\n+     * @return <code>true</code> if the specified number occurs within this\n+     *  range by <code>float</code> comparison\n+     */\n+    public boolean includesFloat(float value) {\n+        int compareMin = NumberUtils.compare(getMinimumFloat(), value);\n+        int compareMax = NumberUtils.compare(getMaximumFloat(), value);\n+        return (compareMin <= 0 && compareMax >= 0);\n+    }\n+\n+    // Range tests\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Tests whether the specified range occurs entirely within this range.</p>\n+     * \n+     * <p>The exact comparison implementation varies by subclass. It is\n+     * intended that an <code>int</code> specific subclass will compare using\n+     * <code>int</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #includesNumber(Number)} method.\n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range occurs entirely within\n+     *  this range; otherwise, <code>false</code>\n+     * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n+     */\n+    public boolean includesRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return includesNumber(range.getMinimumNumber()) &&\n+               includesNumber(range.getMaximumNumber());\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified range overlaps with this range.</p>\n+     * \n+     * <p>The exact comparison implementation varies by subclass. It is\n+     * intended that an <code>int</code> specific subclass will compare using\n+     * <code>int</code> comparison.</p>\n+     * \n+     * <p><code>null</code> is handled and returns <code>false</code>.</p>\n+     * \n+     * <p>This implementation uses the {@link #includesNumber(Number)} and\n+     * {@link #includesRange(Range)} methods.\n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @param range  the range to test, may be <code>null</code>\n+     * @return <code>true</code> if the specified range overlaps with this\n+     *  range; otherwise, <code>false</code>\n+     * @throws IllegalArgumentException if the <code>Range</code> cannot be compared\n+     */\n+    public boolean overlapsRange(Range range) {\n+        if (range == null) {\n+            return false;\n+        }\n+        return range.includesNumber(getMinimumNumber()) ||\n+               range.includesNumber(getMaximumNumber()) || \n+               includesNumber(range.getMinimumNumber());\n+    }\n+\n+    // Basics\n+    //--------------------------------------------------------------------\n+\n+    /**\n+     * <p>Compares this range to another object to test if they are equal.</p>.\n+     * \n+     * <p>To be equal, the class, minimum and maximum must be equal.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} and \n+     * {@link #getMaximumNumber()} methods. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @param obj the reference object with which to compare\n+     * @return <code>true</code> if this object is equal\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj == this) {\n+            return true;\n+        } else if (obj == null || obj.getClass() != getClass()) {\n+            return false;\n+        } else {\n+            Range range = (Range) obj;\n+            return getMinimumNumber().equals(range.getMinimumNumber()) &&\n+                   getMaximumNumber().equals(range.getMaximumNumber());\n+        }\n+    }\n+\n+    /**\n+     * <p>Gets a hashCode for the range.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} and \n+     * {@link #getMaximumNumber()} methods. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return a hash code value for this object\n+     */\n+    public int hashCode() {\n+        int result = 17;\n+        result = 37 * result + getClass().hashCode();\n+        result = 37 * result + getMinimumNumber().hashCode();\n+        result = 37 * result + getMaximumNumber().hashCode();\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Gets the range as a <code>String</code>.</p>\n+     *\n+     * <p>The format of the String is 'Range[<i>min</i>,<i>max</i>]'.</p>\n+     * \n+     * <p>This implementation uses the {@link #getMinimumNumber()} and \n+     * {@link #getMaximumNumber()} methods. \n+     * Subclasses may be able to optimise this.</p>\n+     *\n+     * @return the <code>String</code> representation of this range\n+     */\n+    public String toString() {\n+        StringBuffer buf = new StringBuffer(32);\n+        buf.append(\"Range[\");\n+        buf.append(getMinimumNumber());\n+        buf.append(',');\n+        buf.append(getMaximumNumber());\n+        buf.append(']');\n+        return buf.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the {@link Range} classes.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: AbstractRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public abstract class AbstractRangeTest extends TestCase {\n+\n+    protected Range tenToTwenty;\n+    protected Range otherRange;\n+    \n+    protected Integer five;\n+    protected Integer ten;\n+    protected Integer twelve;\n+    protected Integer fifteen;\n+    protected Integer twenty;\n+    protected Integer twentyFive;\n+    protected Long long8;\n+    protected Long long10;\n+    protected Long long12;\n+    protected Long long20;\n+    protected Long long21;\n+    protected Double double8;\n+    protected Double double10;\n+    protected Double double12;\n+    protected Double double20;\n+    protected Double double21;\n+    protected Float float8;\n+    protected Float float10;\n+    protected Float float12;\n+    protected Float float20;\n+    protected Float float21;\n+    \n+    private static class InnerNumber extends Number {\n+        public double doubleValue() {\n+            return 12d;\n+        }\n+        public float floatValue() {\n+            return 12f;\n+        }\n+        public int intValue() {\n+            return 12;\n+        }\n+        public long longValue() {\n+            return 12L;\n+        }\n+\n+    }\n+    \n+    protected InnerNumber nonComparable = new InnerNumber();\n+\n+\n+    public AbstractRangeTest(String name) {\n+        super(name);\n+    }\n+\n+    public void setUp() {\n+        five        = new Integer(5);\n+        ten         = new Integer(10);\n+        twelve      = new Integer(12);\n+        fifteen     = new Integer(15);\n+        twenty      = new Integer(20);\n+        twentyFive  = new Integer(25);\n+        long8       = new Long(8);\n+        long10      = new Long(10);\n+        long12      = new Long(12);\n+        long20      = new Long(20);\n+        long21      = new Long(21);\n+        double8     = new Double(8);\n+        double10    = new Double(10);\n+        double12    = new Double(12);\n+        double20    = new Double(20);\n+        double21    = new Double(21);\n+        float8      = new Float(8);\n+        float10     = new Float(10);\n+        float12     = new Float(12);\n+        float20     = new Float(20);\n+        float21     = new Float(21);\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testGetMinimum() {\n+        assertEquals(10L, tenToTwenty.getMinimumLong());\n+        assertEquals(10, tenToTwenty.getMinimumInteger());\n+        assertEquals(10d, tenToTwenty.getMinimumDouble(), 0.00001d);\n+        assertEquals(10f, tenToTwenty.getMinimumFloat(), 0.00001f);\n+    }\n+    \n+    public void testGetMaximum() {\n+        assertEquals(20L, tenToTwenty.getMaximumLong());\n+        assertEquals(20, tenToTwenty.getMaximumInteger());\n+        assertEquals(20d, tenToTwenty.getMaximumDouble(), 0.00001d);\n+        assertEquals(20f, tenToTwenty.getMaximumFloat(), 0.00001f);\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testIncludesLong() {\n+        assertEquals(false, tenToTwenty.includesLong(null));\n+        assertEquals(true, tenToTwenty.includesLong(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.includesLong(five));\n+        assertEquals(true, tenToTwenty.includesLong(ten));\n+        assertEquals(true, tenToTwenty.includesLong(fifteen));\n+        assertEquals(true, tenToTwenty.includesLong(twenty));\n+        assertEquals(false, tenToTwenty.includesLong(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.includesLong(long8));\n+        assertEquals(true, tenToTwenty.includesLong(long10));\n+        assertEquals(true, tenToTwenty.includesLong(long12));\n+        assertEquals(true, tenToTwenty.includesLong(long20));\n+        assertEquals(false, tenToTwenty.includesLong(long21));\n+        \n+        assertEquals(false, tenToTwenty.includesLong(double8));\n+        assertEquals(true, tenToTwenty.includesLong(double10));\n+        assertEquals(true, tenToTwenty.includesLong(double12));\n+        assertEquals(true, tenToTwenty.includesLong(double20));\n+        assertEquals(false, tenToTwenty.includesLong(double21));\n+        \n+        assertEquals(false, tenToTwenty.includesLong(float8));\n+        assertEquals(true, tenToTwenty.includesLong(float10));\n+        assertEquals(true, tenToTwenty.includesLong(float12));\n+        assertEquals(true, tenToTwenty.includesLong(float20));\n+        assertEquals(false, tenToTwenty.includesLong(float21));\n+        \n+        assertEquals(false, tenToTwenty.includesLong(9L));\n+        assertEquals(true, tenToTwenty.includesLong(10L));\n+        assertEquals(true, tenToTwenty.includesLong(15L));\n+        assertEquals(true, tenToTwenty.includesLong(20L));\n+        assertEquals(false, tenToTwenty.includesLong(21L));\n+    }\n+        \n+    public void testIncludesInteger() {\n+        assertEquals(false, tenToTwenty.includesInteger(null));\n+        assertEquals(true, tenToTwenty.includesInteger(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.includesInteger(five));\n+        assertEquals(true, tenToTwenty.includesInteger(ten));\n+        assertEquals(true, tenToTwenty.includesInteger(fifteen));\n+        assertEquals(true, tenToTwenty.includesInteger(twenty));\n+        assertEquals(false, tenToTwenty.includesInteger(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.includesInteger(long8));\n+        assertEquals(true, tenToTwenty.includesInteger(long10));\n+        assertEquals(true, tenToTwenty.includesInteger(long12));\n+        assertEquals(true, tenToTwenty.includesInteger(long20));\n+        assertEquals(false, tenToTwenty.includesInteger(long21));\n+        \n+        assertEquals(false, tenToTwenty.includesInteger(double8));\n+        assertEquals(true, tenToTwenty.includesInteger(double10));\n+        assertEquals(true, tenToTwenty.includesInteger(double12));\n+        assertEquals(true, tenToTwenty.includesInteger(double20));\n+        assertEquals(false, tenToTwenty.includesInteger(double21));\n+        \n+        assertEquals(false, tenToTwenty.includesInteger(float8));\n+        assertEquals(true, tenToTwenty.includesInteger(float10));\n+        assertEquals(true, tenToTwenty.includesInteger(float12));\n+        assertEquals(true, tenToTwenty.includesInteger(float20));\n+        assertEquals(false, tenToTwenty.includesInteger(float21));\n+        \n+        assertEquals(false, tenToTwenty.includesInteger(9));\n+        assertEquals(true, tenToTwenty.includesInteger(10));\n+        assertEquals(true, tenToTwenty.includesInteger(15));\n+        assertEquals(true, tenToTwenty.includesInteger(20));\n+        assertEquals(false, tenToTwenty.includesInteger(21));\n+    }\n+\n+    public void testIncludesDouble() {\n+        assertEquals(false, tenToTwenty.includesDouble(null));\n+        assertEquals(true, tenToTwenty.includesDouble(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.includesDouble(five));\n+        assertEquals(true, tenToTwenty.includesDouble(ten));\n+        assertEquals(true, tenToTwenty.includesDouble(fifteen));\n+        assertEquals(true, tenToTwenty.includesDouble(twenty));\n+        assertEquals(false, tenToTwenty.includesDouble(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.includesDouble(long8));\n+        assertEquals(true, tenToTwenty.includesDouble(long10));\n+        assertEquals(true, tenToTwenty.includesDouble(long12));\n+        assertEquals(true, tenToTwenty.includesDouble(long20));\n+        assertEquals(false, tenToTwenty.includesDouble(long21));\n+        \n+        assertEquals(false, tenToTwenty.includesDouble(double8));\n+        assertEquals(true, tenToTwenty.includesDouble(double10));\n+        assertEquals(true, tenToTwenty.includesDouble(double12));\n+        assertEquals(true, tenToTwenty.includesDouble(double20));\n+        assertEquals(false, tenToTwenty.includesDouble(double21));\n+        \n+        assertEquals(false, tenToTwenty.includesDouble(float8));\n+        assertEquals(true, tenToTwenty.includesDouble(float10));\n+        assertEquals(true, tenToTwenty.includesDouble(float12));\n+        assertEquals(true, tenToTwenty.includesDouble(float20));\n+        assertEquals(false, tenToTwenty.includesDouble(float21));\n+        \n+        assertEquals(false, tenToTwenty.includesDouble(9d));\n+        assertEquals(true, tenToTwenty.includesDouble(10d));\n+        assertEquals(true, tenToTwenty.includesDouble(15d));\n+        assertEquals(true, tenToTwenty.includesDouble(20d));\n+        assertEquals(false, tenToTwenty.includesDouble(21d));\n+    }\n+\n+    public void testIncludesFloat() {\n+        assertEquals(false, tenToTwenty.includesFloat(null));\n+        assertEquals(true, tenToTwenty.includesFloat(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.includesFloat(five));\n+        assertEquals(true, tenToTwenty.includesFloat(ten));\n+        assertEquals(true, tenToTwenty.includesFloat(fifteen));\n+        assertEquals(true, tenToTwenty.includesFloat(twenty));\n+        assertEquals(false, tenToTwenty.includesFloat(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.includesFloat(long8));\n+        assertEquals(true, tenToTwenty.includesFloat(long10));\n+        assertEquals(true, tenToTwenty.includesFloat(long12));\n+        assertEquals(true, tenToTwenty.includesFloat(long20));\n+        assertEquals(false, tenToTwenty.includesFloat(long21));\n+        \n+        assertEquals(false, tenToTwenty.includesFloat(double8));\n+        assertEquals(true, tenToTwenty.includesFloat(double10));\n+        assertEquals(true, tenToTwenty.includesFloat(double12));\n+        assertEquals(true, tenToTwenty.includesFloat(double20));\n+        assertEquals(false, tenToTwenty.includesFloat(double21));\n+        \n+        assertEquals(false, tenToTwenty.includesFloat(float8));\n+        assertEquals(true, tenToTwenty.includesFloat(float10));\n+        assertEquals(true, tenToTwenty.includesFloat(float12));\n+        assertEquals(true, tenToTwenty.includesFloat(float20));\n+        assertEquals(false, tenToTwenty.includesFloat(float21));\n+        \n+        assertEquals(false, tenToTwenty.includesFloat(9f));\n+        assertEquals(true, tenToTwenty.includesFloat(10f));\n+        assertEquals(true, tenToTwenty.includesFloat(15f));\n+        assertEquals(true, tenToTwenty.includesFloat(20f));\n+        assertEquals(false, tenToTwenty.includesFloat(21f));\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testIncludesRange() {\n+        assertEquals(false, tenToTwenty.includesRange(createRange(five, five)));\n+        assertEquals(false, tenToTwenty.includesRange(createRange(five, ten)));\n+        assertEquals(false, tenToTwenty.includesRange(createRange(five, twelve)));\n+        assertEquals(false, tenToTwenty.includesRange(createRange(five, fifteen)));\n+        assertEquals(false, tenToTwenty.includesRange(createRange(five, twenty)));\n+        assertEquals(false, tenToTwenty.includesRange(createRange(five, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.includesRange(createRange(ten, ten)));\n+        assertEquals(true, tenToTwenty.includesRange(createRange(ten, twelve)));\n+        assertEquals(true, tenToTwenty.includesRange(createRange(ten, fifteen)));\n+        assertEquals(true, tenToTwenty.includesRange(createRange(ten, twenty)));\n+        assertEquals(false, tenToTwenty.includesRange(createRange(ten, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.includesRange(createRange(twelve, twelve)));\n+        assertEquals(true, tenToTwenty.includesRange(createRange(twelve, fifteen)));\n+        assertEquals(true, tenToTwenty.includesRange(createRange(twelve, twenty)));\n+        assertEquals(false, tenToTwenty.includesRange(createRange(twelve, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.includesRange(createRange(fifteen, fifteen)));\n+        assertEquals(true, tenToTwenty.includesRange(createRange(fifteen, twenty)));\n+        assertEquals(false, tenToTwenty.includesRange(createRange(fifteen, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.includesRange(createRange(twenty, twenty)));\n+        assertEquals(false, tenToTwenty.includesRange(createRange(twenty, twentyFive)));\n+        \n+        assertEquals(false, tenToTwenty.includesRange(createRange(twentyFive, twentyFive)));\n+    }\n+\n+    public void testOverlapsRange() {\n+        assertEquals(false, tenToTwenty.overlapsRange(createRange(five, five)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, ten)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twelve)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, fifteen)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twenty)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, ten)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twelve)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, fifteen)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twenty)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(ten, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twelve)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, fifteen)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twenty)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(twelve, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, fifteen)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twenty)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(fifteen, twentyFive)));\n+        \n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twenty)));\n+        assertEquals(true, tenToTwenty.overlapsRange(createRange(twenty, twentyFive)));\n+        \n+        assertEquals(false, tenToTwenty.overlapsRange(createRange(twentyFive, twentyFive)));\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testEquals() {\n+        assertEquals(false, tenToTwenty.equals(createRange(ten, fifteen)));\n+        assertEquals(false, tenToTwenty.equals(createRange(ten, twentyFive)));\n+        \n+        assertEquals(false, tenToTwenty.equals(createRange(fifteen, twenty)));\n+        assertEquals(false, tenToTwenty.equals(createRange(five, twenty)));\n+        \n+        assertEquals(false, tenToTwenty.equals(createRange(five, ten)));\n+        assertEquals(false, tenToTwenty.equals(createRange(ten)));\n+\n+        assertEquals(true, tenToTwenty.equals(createRange(ten, twenty)));\n+        assertEquals(true, tenToTwenty.equals(createRange(twenty, ten)));\n+        \n+        assertEquals(false, tenToTwenty.equals(null));\n+        assertEquals(false, tenToTwenty.equals(new Object()));\n+        assertEquals(false, tenToTwenty.equals(otherRange));\n+    }\n+\n+    public void testHashCode() {\n+        assertEquals(tenToTwenty.hashCode(), tenToTwenty.hashCode());\n+        assertTrue(tenToTwenty.hashCode() != 0);\n+    }\n+    \n+    public void testToString() {\n+        assertEquals(\"Range[10,20]\", tenToTwenty.toString());\n+        assertEquals(\"Range[-20,-10]\", createRange(new Integer(-20), new Integer(-10)).toString());\n+    }\n+\n+\n+    protected abstract Range createRange(Integer integer);\n+    protected abstract Range createRange(Integer integer1, Integer integer2);\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the {@link DoubleRange} class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: DoubleRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class DoubleRangeTest extends AbstractRangeTest {\n+\n+    public DoubleRangeTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(DoubleRangeTest.class);\n+        suite.setName(\"DoubleRange Tests\");\n+        return suite;\n+    }\n+    \n+    public void setUp() {\n+        super.setUp();\n+        tenToTwenty = new DoubleRange(double10, double20);\n+        otherRange = new NumberRange(ten, twenty);\n+    }\n+\n+    protected Range createRange(Integer integer1, Integer integer2) {\n+        return new DoubleRange(integer1, integer2);\n+    }\n+    protected Range createRange(Integer integer) {\n+        return new NumberRange(integer);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+\n+    public void testConstructor1a() {\n+        DoubleRange nr = new DoubleRange(8d);\n+        assertEquals(double8, nr.getMinimumNumber());\n+        assertEquals(double8, nr.getMaximumNumber());\n+        \n+        try {\n+            new DoubleRange(Double.NaN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testConstructor1b() {\n+        DoubleRange nr = new DoubleRange(double8);\n+        assertSame(double8, nr.getMinimumNumber());\n+        assertSame(double8, nr.getMaximumNumber());\n+        \n+        Range r = new DoubleRange(nonComparable);\n+        \n+        try {\n+            new DoubleRange(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DoubleRange(new Double(Double.NaN));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testConstructor2a() {\n+        DoubleRange nr = new DoubleRange(8d, 10d);\n+        assertEquals(double8, nr.getMinimumNumber());\n+        assertEquals(double10, nr.getMaximumNumber());\n+        \n+        nr = new DoubleRange(10d, 8d);\n+        assertEquals(double8, nr.getMinimumNumber());\n+        assertEquals(double10, nr.getMaximumNumber());\n+        \n+        try {\n+            new DoubleRange(Double.NaN, 8d);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor2b() {\n+        DoubleRange nr = new DoubleRange(double8, double10);\n+        assertSame(double8, nr.getMinimumNumber());\n+        assertSame(double10, nr.getMaximumNumber());\n+        \n+        nr = new DoubleRange(double10, double8);\n+        assertSame(double8, nr.getMinimumNumber());\n+        assertSame(double10, nr.getMaximumNumber());\n+        \n+        nr = new DoubleRange(double8, double10);\n+        assertSame(double8, nr.getMinimumNumber());\n+        assertEquals(double10, nr.getMaximumNumber());\n+        \n+        // not null\n+        try {\n+            new DoubleRange(double8, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DoubleRange(null, double8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DoubleRange(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            new DoubleRange(new Double(Double.NaN), double10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testIncludesNumber() {\n+        assertEquals(false, tenToTwenty.includesNumber(null));\n+        assertEquals(true, tenToTwenty.includesNumber(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(five));\n+        assertEquals(true, tenToTwenty.includesNumber(ten));\n+        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n+        assertEquals(true, tenToTwenty.includesNumber(twenty));\n+        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(long8));\n+        assertEquals(true, tenToTwenty.includesNumber(long10));\n+        assertEquals(true, tenToTwenty.includesNumber(long12));\n+        assertEquals(true, tenToTwenty.includesNumber(long20));\n+        assertEquals(false, tenToTwenty.includesNumber(long21));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(double8));\n+        assertEquals(true, tenToTwenty.includesNumber(double10));\n+        assertEquals(true, tenToTwenty.includesNumber(double12));\n+        assertEquals(true, tenToTwenty.includesNumber(double20));\n+        assertEquals(false, tenToTwenty.includesNumber(double21));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(float8));\n+        assertEquals(true, tenToTwenty.includesNumber(float10));\n+        assertEquals(true, tenToTwenty.includesNumber(float12));\n+        assertEquals(true, tenToTwenty.includesNumber(float20));\n+        assertEquals(false, tenToTwenty.includesNumber(float21));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"Range[10.0,20.0]\", tenToTwenty.toString());\n+        assertEquals(\"Range[-20.0,-10.0]\", createRange(new Integer(-20), new Integer(-10)).toString());\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the {@link FloatRange} class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: FloatRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class FloatRangeTest extends AbstractRangeTest {\n+\n+    public FloatRangeTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(FloatRangeTest.class);\n+        suite.setName(\"FloatRange Tests\");\n+        return suite;\n+    }\n+    \n+    public void setUp() {\n+        super.setUp();\n+        tenToTwenty = new FloatRange(float10, float20);\n+        otherRange = new NumberRange(ten, twenty);\n+    }\n+\n+    protected Range createRange(Integer integer1, Integer integer2) {\n+        return new FloatRange(integer1, integer2);\n+    }\n+    protected Range createRange(Integer integer) {\n+        return new NumberRange(integer);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+\n+    public void testConstructor1a() {\n+        FloatRange nr = new FloatRange(8f);\n+        assertEquals(float8, nr.getMinimumNumber());\n+        assertEquals(float8, nr.getMaximumNumber());\n+        \n+        try {\n+            new FloatRange(Float.NaN);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testConstructor1b() {\n+        FloatRange nr = new FloatRange(float8);\n+        assertSame(float8, nr.getMinimumNumber());\n+        assertSame(float8, nr.getMaximumNumber());\n+        \n+        Range r = new FloatRange(nonComparable);\n+        \n+        try {\n+            new FloatRange(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new FloatRange(new Double(Double.NaN));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testConstructor2a() {\n+        FloatRange nr = new FloatRange(8f, 10f);\n+        assertEquals(float8, nr.getMinimumNumber());\n+        assertEquals(float10, nr.getMaximumNumber());\n+        \n+        nr = new FloatRange(10f, 8f);\n+        assertEquals(float8, nr.getMinimumNumber());\n+        assertEquals(float10, nr.getMaximumNumber());\n+        \n+        try {\n+            new FloatRange(Float.NaN, 8f);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testConstructor2b() {\n+        FloatRange nr = new FloatRange(float8, float10);\n+        assertSame(float8, nr.getMinimumNumber());\n+        assertSame(float10, nr.getMaximumNumber());\n+        \n+        nr = new FloatRange(float10, float8);\n+        assertSame(float8, nr.getMinimumNumber());\n+        assertSame(float10, nr.getMaximumNumber());\n+        \n+        nr = new FloatRange(float8, float10);\n+        assertSame(float8, nr.getMinimumNumber());\n+        assertEquals(float10, nr.getMaximumNumber());\n+        \n+        // not null\n+        try {\n+            new FloatRange(float8, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new FloatRange(null, float8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new FloatRange(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            new FloatRange(new Double(Double.NaN), float10);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testIncludesNumber() {\n+        assertEquals(false, tenToTwenty.includesNumber(null));\n+        assertEquals(true, tenToTwenty.includesNumber(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(five));\n+        assertEquals(true, tenToTwenty.includesNumber(ten));\n+        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n+        assertEquals(true, tenToTwenty.includesNumber(twenty));\n+        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(long8));\n+        assertEquals(true, tenToTwenty.includesNumber(long10));\n+        assertEquals(true, tenToTwenty.includesNumber(long12));\n+        assertEquals(true, tenToTwenty.includesNumber(long20));\n+        assertEquals(false, tenToTwenty.includesNumber(long21));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(double8));\n+        assertEquals(true, tenToTwenty.includesNumber(double10));\n+        assertEquals(true, tenToTwenty.includesNumber(double12));\n+        assertEquals(true, tenToTwenty.includesNumber(double20));\n+        assertEquals(false, tenToTwenty.includesNumber(double21));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(float8));\n+        assertEquals(true, tenToTwenty.includesNumber(float10));\n+        assertEquals(true, tenToTwenty.includesNumber(float12));\n+        assertEquals(true, tenToTwenty.includesNumber(float20));\n+        assertEquals(false, tenToTwenty.includesNumber(float21));\n+    }\n+\n+    public void testToString() {\n+        assertEquals(\"Range[10.0,20.0]\", tenToTwenty.toString());\n+        assertEquals(\"Range[-20.0,-10.0]\", createRange(new Integer(-20), new Integer(-10)).toString());\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/IntRangeTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the {@link IntRange} class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: IntRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class IntRangeTest extends AbstractRangeTest {\n+\n+    public IntRangeTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(IntRangeTest.class);\n+        suite.setName(\"IntRange Tests\");\n+        return suite;\n+    }\n+    \n+    public void setUp() {\n+        super.setUp();\n+        tenToTwenty = new IntRange(ten, twenty);\n+        otherRange = new NumberRange(ten, twenty);\n+    }\n+\n+    protected Range createRange(Integer integer1, Integer integer2) {\n+        return new IntRange(integer1, integer2);\n+    }\n+    protected Range createRange(Integer integer) {\n+        return new NumberRange(integer);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+\n+    public void testConstructor1a() {\n+        IntRange nr = new IntRange(5);\n+        assertEquals(five, nr.getMinimumNumber());\n+        assertEquals(five, nr.getMaximumNumber());\n+    }\n+    \n+    public void testConstructor1b() {\n+        IntRange nr = new IntRange(five);\n+        assertSame(five, nr.getMinimumNumber());\n+        assertSame(five, nr.getMaximumNumber());\n+        \n+        Range r = new IntRange(nonComparable);\n+        \n+        try {\n+            new IntRange(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testConstructor2a() {\n+        IntRange nr = new IntRange(5, 10);\n+        assertEquals(five, nr.getMinimumNumber());\n+        assertEquals(ten, nr.getMaximumNumber());\n+        \n+        nr = new IntRange(5, 10);\n+        assertEquals(five, nr.getMinimumNumber());\n+        assertEquals(ten, nr.getMaximumNumber());\n+    }\n+\n+    public void testConstructor2b() {\n+        IntRange nr = new IntRange(five, ten);\n+        assertSame(five, nr.getMinimumNumber());\n+        assertSame(ten, nr.getMaximumNumber());\n+        \n+        nr = new IntRange(ten, five);\n+        assertSame(five, nr.getMinimumNumber());\n+        assertSame(ten, nr.getMaximumNumber());\n+        \n+        nr = new IntRange(five, long10);\n+        assertSame(five, nr.getMinimumNumber());\n+        assertEquals(ten, nr.getMaximumNumber());\n+        \n+        // not null\n+        try {\n+            new IntRange(five, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new IntRange(null, five);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new IntRange(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testIncludesNumber() {\n+        assertEquals(false, tenToTwenty.includesNumber(null));\n+        assertEquals(true, tenToTwenty.includesNumber(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(five));\n+        assertEquals(true, tenToTwenty.includesNumber(ten));\n+        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n+        assertEquals(true, tenToTwenty.includesNumber(twenty));\n+        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(long8));\n+        assertEquals(true, tenToTwenty.includesNumber(long10));\n+        assertEquals(true, tenToTwenty.includesNumber(long12));\n+        assertEquals(true, tenToTwenty.includesNumber(long20));\n+        assertEquals(false, tenToTwenty.includesNumber(long21));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(double8));\n+        assertEquals(true, tenToTwenty.includesNumber(double10));\n+        assertEquals(true, tenToTwenty.includesNumber(double12));\n+        assertEquals(true, tenToTwenty.includesNumber(double20));\n+        assertEquals(false, tenToTwenty.includesNumber(double21));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(float8));\n+        assertEquals(true, tenToTwenty.includesNumber(float10));\n+        assertEquals(true, tenToTwenty.includesNumber(float12));\n+        assertEquals(true, tenToTwenty.includesNumber(float20));\n+        assertEquals(false, tenToTwenty.includesNumber(float21));\n+    }\n+\n+    public void testIncludesIntegerBig() {\n+        IntRange big = new IntRange(Integer.MAX_VALUE, Integer.MAX_VALUE- 2);\n+        assertEquals(true, big.includesInteger(Integer.MAX_VALUE - 1));\n+        assertEquals(false, big.includesInteger(Integer.MAX_VALUE - 3));\n+    }\n+\n+    //--------------------------------------------------------------------------\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/LongRangeTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the {@link LongRange} class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: LongRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class LongRangeTest extends AbstractRangeTest {\n+\n+    public LongRangeTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(LongRangeTest.class);\n+        suite.setName(\"LongRange Tests\");\n+        return suite;\n+    }\n+    \n+    public void setUp() {\n+        super.setUp();\n+        tenToTwenty = new LongRange(long10, long20);\n+        otherRange = new NumberRange(ten, twenty);\n+    }\n+\n+    protected Range createRange(Integer integer1, Integer integer2) {\n+        return new LongRange(integer1, integer2);\n+    }\n+    protected Range createRange(Integer integer) {\n+        return new NumberRange(integer);\n+    }\n+    \n+    //--------------------------------------------------------------------------\n+\n+    public void testConstructor1a() {\n+        LongRange nr = new LongRange(8L);\n+        assertEquals(long8, nr.getMinimumNumber());\n+        assertEquals(long8, nr.getMaximumNumber());\n+    }\n+    \n+    public void testConstructor1b() {\n+        LongRange nr = new LongRange(long8);\n+        assertSame(long8, nr.getMinimumNumber());\n+        assertSame(long8, nr.getMaximumNumber());\n+        \n+        Range r = new LongRange(nonComparable);\n+        \n+        try {\n+            new LongRange(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testConstructor2a() {\n+        LongRange nr = new LongRange(8L, 10L);\n+        assertEquals(long8, nr.getMinimumNumber());\n+        assertEquals(long10, nr.getMaximumNumber());\n+        \n+        nr = new LongRange(10L, 8L);\n+        assertEquals(long8, nr.getMinimumNumber());\n+        assertEquals(long10, nr.getMaximumNumber());\n+    }\n+\n+    public void testConstructor2b() {\n+        LongRange nr = new LongRange(long8, long10);\n+        assertSame(long8, nr.getMinimumNumber());\n+        assertSame(long10, nr.getMaximumNumber());\n+        \n+        nr = new LongRange(long10, long8);\n+        assertSame(long8, nr.getMinimumNumber());\n+        assertSame(long10, nr.getMaximumNumber());\n+        \n+        nr = new LongRange(long8, long10);\n+        assertSame(long8, nr.getMinimumNumber());\n+        assertEquals(long10, nr.getMaximumNumber());\n+        \n+        // not null\n+        try {\n+            new LongRange(long8, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LongRange(null, long8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new LongRange(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testIncludesNumber() {\n+        assertEquals(false, tenToTwenty.includesNumber(null));\n+        assertEquals(true, tenToTwenty.includesNumber(nonComparable));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(five));\n+        assertEquals(true, tenToTwenty.includesNumber(ten));\n+        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n+        assertEquals(true, tenToTwenty.includesNumber(twenty));\n+        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(long8));\n+        assertEquals(true, tenToTwenty.includesNumber(long10));\n+        assertEquals(true, tenToTwenty.includesNumber(long12));\n+        assertEquals(true, tenToTwenty.includesNumber(long20));\n+        assertEquals(false, tenToTwenty.includesNumber(long21));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(double8));\n+        assertEquals(true, tenToTwenty.includesNumber(double10));\n+        assertEquals(true, tenToTwenty.includesNumber(double12));\n+        assertEquals(true, tenToTwenty.includesNumber(double20));\n+        assertEquals(false, tenToTwenty.includesNumber(double21));\n+        \n+        assertEquals(false, tenToTwenty.includesNumber(float8));\n+        assertEquals(true, tenToTwenty.includesNumber(float10));\n+        assertEquals(true, tenToTwenty.includesNumber(float12));\n+        assertEquals(true, tenToTwenty.includesNumber(float20));\n+        assertEquals(false, tenToTwenty.includesNumber(float21));\n+    }\n+\n+    public void testIncludesLongBig() {\n+        LongRange big = new LongRange(Long.MAX_VALUE, Long.MAX_VALUE- 2);\n+        assertEquals(true, big.includesLong(Long.MAX_VALUE - 1));\n+        assertEquals(false, big.includesLong(Long.MAX_VALUE - 3));\n+    }\n+\n+    //--------------------------------------------------------------------------\n+    \n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/MathTestSuite.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Test suite for the Math package.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: MathTestSuite.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public class MathTestSuite extends TestCase {\n+    \n+    /**\n+     * Construct a new instance.\n+     */\n+    public MathTestSuite(String name) {\n+        super(name);\n+    }\n+\n+    /**\n+     * Command-line interface.\n+     */\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Get the suite of tests\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite();\n+        suite.setName(\"Commons-Lang-Math Tests\");\n+        suite.addTest(DoubleRangeTest.suite());\n+        suite.addTest(FloatRangeTest.suite());\n+        suite.addTest(IntRangeTest.suite());\n+        suite.addTest(LongRangeTest.suite());\n+        suite.addTest(NumberRangeTest.suite());\n+        return suite;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.math;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+/**\n+ * Test cases for the {@link NumberRange} class.\n+ *\n+ * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author Stephen Colebourne\n+ * @version $Id: NumberRangeTest.java,v 1.1 2002/12/22 16:20:29 scolebourne Exp $\n+ */\n+public final class NumberRangeTest extends AbstractRangeTest {\n+\n+    public NumberRangeTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(NumberRangeTest.class);\n+        suite.setName(\"NumberRange Tests\");\n+        return suite;\n+    }\n+    \n+    public void setUp() {\n+        super.setUp();\n+        tenToTwenty = new NumberRange(ten, twenty);\n+        otherRange = new IntRange(ten, twenty);\n+    }\n+\n+    protected Range createRange(Integer integer1, Integer integer2) {\n+        return new NumberRange(integer1, integer2);\n+    }\n+    protected Range createRange(Integer integer) {\n+        return new NumberRange(integer);\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testConstructor1() {\n+        NumberRange nr = new NumberRange(five);\n+        assertSame(five, nr.getMinimumNumber());\n+        assertSame(five, nr.getMaximumNumber());\n+        \n+        try {\n+            new NumberRange(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new NumberRange(nonComparable);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+    \n+    public void testConstructor2() {\n+        NumberRange nr = new NumberRange(five, ten);\n+        assertSame(five, nr.getMinimumNumber());\n+        assertSame(ten, nr.getMaximumNumber());\n+        \n+        nr = new NumberRange(ten, five);\n+        assertSame(five, nr.getMinimumNumber());\n+        assertSame(ten, nr.getMaximumNumber());\n+        \n+        // not null\n+        try {\n+            new NumberRange(five, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new NumberRange(null, five);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new NumberRange(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        // no mixed types\n+        try {\n+            new NumberRange(five, long21);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        // must be comparable\n+        try {\n+            new NumberRange(nonComparable, nonComparable);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        // no double NaN\n+        try {\n+            new NumberRange(new Double(0), new Double(Double.NaN));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            new NumberRange(new Double(Double.NaN), new Double(0));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        // no float NaN\n+        try {\n+            new NumberRange(new Float(0), new Float(Float.NaN));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            new NumberRange(new Float(Float.NaN), new Float(0));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+    public void testIncludesNumber() {\n+        assertEquals(false, tenToTwenty.includesNumber(null));\n+        assertEquals(false, tenToTwenty.includesNumber(five));\n+        assertEquals(true, tenToTwenty.includesNumber(ten));\n+        assertEquals(true, tenToTwenty.includesNumber(fifteen));\n+        assertEquals(true, tenToTwenty.includesNumber(twenty));\n+        assertEquals(false, tenToTwenty.includesNumber(twentyFive));\n+        \n+        try {\n+            tenToTwenty.includesNumber(long21);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testIncludesLongBig() {\n+        // original NumberRange class failed this test\n+        NumberRange big = new NumberRange(new Long(Long.MAX_VALUE), new Long(Long.MAX_VALUE- 2));\n+        assertEquals(true, big.includesLong(Long.MAX_VALUE - 1));\n+        assertEquals(false, big.includesLong(Long.MAX_VALUE - 3));\n+    }\n+\n+    //--------------------------------------------------------------------------\n+\n+}", "timestamp": 1040574029, "metainfo": ""}