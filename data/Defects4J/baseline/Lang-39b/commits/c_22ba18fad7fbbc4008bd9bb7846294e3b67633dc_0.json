{"sha": "22ba18fad7fbbc4008bd9bb7846294e3b67633dc", "log": "[LANG-496] Added a comment why a temporary variable is used in get().  ", "commit": "\n--- a/src/java/org/apache/commons/lang/concurrent/LazyInitializer.java\n+++ b/src/java/org/apache/commons/lang/concurrent/LazyInitializer.java\n  * to this class, a subclass of {@code LazyInitializer} has to be created:\n  *\n  * <pre>\n- * public class ComplexObjectInitializer extends LazyInitializer&lt;ComplexObject&gt; {\n+ * public class ComplexObjectInitializer extends LazyInitializer&lt;ComplexObject&gt;\n+ * {\n  *     &#064;Override\n- *     protected ComplexObject initialize() {\n+ *     protected ComplexObject initialize()\n+ *     {\n  *         return new ComplexObject();\n  *     }\n  * }\n  * @version $Id$\n  * @param <T> the type of the object managed by this initializer class\n  */\n-public abstract class LazyInitializer<T> {\n+public abstract class LazyInitializer<T>\n+{\n     /** Stores the managed object. */\n     private volatile T object;\n \n      *\n      * @return the object initialized by this {@code LazyInitializer}\n      */\n-    public T get() {\n+    public T get()\n+    {\n+        // use a temporary variable to reduce the number of reads of the\n+        // volatile field\n         T result = object;\n \n-        if (result == null) {\n-            synchronized (this) {\n+        if (result == null)\n+        {\n+            synchronized (this)\n+            {\n                 result = object;\n-                if (result == null) {\n+                if (result == null)\n+                {\n                     object = result = initialize();\n                 }\n             }", "timestamp": 1253977386, "metainfo": ""}