{"sha": "b62e9898108c678a456c28d3f40d54b99b4b544c", "log": "Don't clone char array input, and handle nulls better  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n import java.util.ArrayList;\n import java.util.List;\n import java.util.ListIterator;\n+\n+import org.apache.commons.lang.ArrayUtils;\n \n /**\n  * Tokenizes a string based based on delimiters (separators)\n      */\n     public StrTokenizer(String input) {\n         super();\n-        this.text = input;\n-        this.chars = input.toCharArray();  // no clone as toCharArray() clones\n+        text = input;\n+        if (input != null) {\n+            chars = input.toCharArray();\n+        } else {\n+            chars = null;\n+        }\n     }\n \n     /**\n     /**\n      * Constructs a tokenizer splitting on space, tab, newline and formfeed\n      * as per StringTokenizer.\n-     *\n-     * @param input  the string which is to be parsed, cloned\n+     * <p>\n+     * The input character array is not cloned, and must not be altered after\n+     * passing in to this method.\n+     *\n+     * @param input  the string which is to be parsed, not cloned\n      */\n     public StrTokenizer(char[] input) {\n         super();\n         this.text = null;\n-        this.chars = (char[]) input.clone();\n+        this.chars = input;\n     }\n \n     /**\n      * Constructs a tokenizer splitting on the specified character.\n-     *\n-     * @param input  the string which is to be parsed, cloned\n+     * <p>\n+     * The input character array is not cloned, and must not be altered after\n+     * passing in to this method.\n+     *\n+     * @param input  the string which is to be parsed, not cloned\n      * @param delim the field delimiter character\n      */\n     public StrTokenizer(char[] input, char delim) {\n \n     /**\n      * Constructs a tokenizer splitting on the specified string.\n-     *\n-     * @param input  the string which is to be parsed, cloned\n+     * <p>\n+     * The input character array is not cloned, and must not be altered after\n+     * passing in to this method.\n+     *\n+     * @param input  the string which is to be parsed, not cloned\n      * @param delim the field delimiter string\n      */\n     public StrTokenizer(char[] input, String delim) {\n \n     /**\n      * Constructs a tokenizer splitting using the specified delimiter matcher.\n-     *\n-     * @param input  the string which is to be parsed, cloned\n+     * <p>\n+     * The input character array is not cloned, and must not be altered after\n+     * passing in to this method.\n+     *\n+     * @param input  the string which is to be parsed, not cloned\n      * @param delim  the field delimiter matcher\n      */\n     public StrTokenizer(char[] input, StrMatcher delim) {\n     /**\n      * Constructs a tokenizer splitting on the specified delimiter character\n      * and handling quotes using the specified quote character.\n-     *\n-     * @param input  the string which is to be parsed, cloned\n+     * <p>\n+     * The input character array is not cloned, and must not be altered after\n+     * passing in to this method.\n+     *\n+     * @param input  the string which is to be parsed, not cloned\n      * @param delim  the field delimiter character\n      * @param quote  the field quoted string character\n      */\n     /**\n      * Constructs a tokenizer splitting using the specified delimiter matcher\n      * and handling quotes using the specified quote matcher.\n-     *\n-     * @param input  the string which is to be parsed, cloned\n+     * <p>\n+     * The input character array is not cloned, and must not be altered after\n+     * passing in to this method.\n+     *\n+     * @param input  the string which is to be parsed, not cloned\n      * @param delim  the field delimiter character\n      * @param quote  the field quoted string character\n      */\n      * In this manner you can re-use a tokenizer with the same settings\n      * on multiple input lines.\n      *\n-     * @param input  the new string to tokenize\n+     * @param input  the new string to tokenize, null sets no text to parse\n      */\n     public void reset(String input) {\n         reset();\n-        this.text = input;\n-        chars = input.toCharArray();  // no clone as toCharArray() clones\n+        text = input;\n+        if (input != null) {\n+            chars = input.toCharArray();\n+        } else {\n+            chars = null;\n+        }\n     }\n \n     /**\n      * Reset this tokenizer, giving it a new input string to parse.\n      * In this manner you can re-use a tokenizer with the same settings\n      * on multiple input lines.\n-     *\n-     * @param input  the new character array to tokenize, cloned\n-     */\n-    public void reset(char [] input) {\n+     * <p>\n+     * The input character array is not cloned, and must not be altered after\n+     * passing in to this method.\n+     *\n+     * @param input  the new character array to tokenize, not cloned, null sets no text to parse\n+     */\n+    public void reset(char[] input) {\n         reset();\n-        this.text = null;\n-        chars = (char[]) input.clone();\n+        text = null;\n+        chars = input;\n     }\n \n     // ListIterator\n      * @return array containing the tokens.\n      */\n     private String[] readTokens() {\n+        if (chars == null) {\n+            return ArrayUtils.EMPTY_STRING_ARRAY;\n+        }\n         int len = chars.length;\n         char cbuf[] = new char[len];\n         StringBuffer token = new StringBuffer();\n     }\n \n     /**\n-     * Sets the field delimiter character\n+     * Sets the field delimiter character.\n      *\n      * @param delim  the delimiter character to use\n      */\n     }\n \n     /**\n-     * Sets the field delimiter character\n-     *\n-     * @param delim  the delimiter character to use\n+     * Sets the field delimiter string.\n+     *\n+     * @param delim  the delimiter string to use\n      */\n     public void setDelimiterString(String delim) {\n         setDelimiterMatcher(StrMatcher.stringMatcher(delim));\n--- a/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n         assertEquals(input, tok.getContent());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor_String() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\");\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(\"\");\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((String) null);\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_String_char() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\", ' ');\n+        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(\"\", ' ');\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((String) null, ' ');\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_String_char_char() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\", ' ', '\"');\n+        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n+        assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(\"\", ' ', '\"');\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((String) null, ' ', '\"');\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_charArray() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(new char[0]);\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((char[]) null);\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_charArray_char() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ');\n+        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(new char[0], ' ');\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((char[]) null, ' ');\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_charArray_char_char() {\n+        StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray(), ' ', '\"');\n+        assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n+        assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer(new char[0], ' ', '\"');\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok = new StrTokenizer((char[]) null, ' ', '\"');\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testReset() {\n-        String input = \"a b c\";\n-        StrTokenizer tok = new StrTokenizer(input);\n-        assertEquals(\"a\", tok.next());\n-        assertEquals(\"b\", tok.next());\n-        assertEquals(\"c\", tok.next());\n+        StrTokenizer tok = new StrTokenizer(\"a b c\");\n+        assertEquals(\"a\", tok.next());\n+        assertEquals(\"b\", tok.next());\n+        assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n         tok.reset();\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(\"c\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReset_String() {\n+        StrTokenizer tok = new StrTokenizer(\"x x x\");\n         tok.reset(\"d e\");\n         assertEquals(\"d\", tok.next());\n         assertEquals(\"e\", tok.next());\n-        tok.reset(\"f g\".toCharArray());\n-        assertEquals(\"f\", tok.next());\n-        assertEquals(\"g\", tok.next());\n-    }\n-\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok.reset((String) null);\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testReset_charArray() {\n+        StrTokenizer tok = new StrTokenizer(\"x x x\");\n+        \n+        char[] array = new char[] {'a', ' ', 'c'};\n+        tok.reset(array);\n+        array[1] = 'b'; // test linked array\n+        assertEquals(\"abc\", tok.next());\n+        assertEquals(false, tok.hasNext());\n+        \n+        tok.reset((char[]) null);\n+        assertEquals(false, tok.hasNext());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testTSV() {\n         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE));\n         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray()));", "timestamp": 1124546321, "metainfo": ""}