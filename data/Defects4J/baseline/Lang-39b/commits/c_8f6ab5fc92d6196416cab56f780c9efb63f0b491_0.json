{"sha": "8f6ab5fc92d6196416cab56f780c9efb63f0b491", "log": "Minor Javadoc fix and improvements.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/IllegalClassException.java\n+++ b/src/java/org/apache/commons/lang/IllegalClassException.java\n package org.apache.commons.lang;\n \n /**\n- * Thrown when an object is an instance of an unexpected class.\n+ * Thrown when an object is an instance of an unexpected type (a class or interface).\n  * \n  * @author Matthew Hawthorne\n+ * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: IllegalClassException.java,v 1.2 2003/05/16 16:14:16 scolebourne Exp $\n+ * @version $Id: IllegalClassException.java,v 1.3 2003/06/03 20:49:59 ggregory Exp $\n  */\n public class IllegalClassException extends IllegalArgumentException {\n \n     /**\n-     * Instantiates with the specified classes.\n+     * Instantiates with the specified types (classes or interfaces).\n      * \n      * @param expected  the expected type\n      * @param actual  the actual type\n         super(\n             \"Expected: \"\n                 + safeGetClassName(expected)\n-                + \", Actual: \"\n+                + \", actual: \"\n                 + safeGetClassName(actual));\n     }\n \n     /**\n-     * Instantiates with the specified classes.\n+     * Instantiates with the specified message.\n      * \n      * @param message  the exception message\n      */\n     }\n \n     /**\n-     * Gets a classname without throwing an Exception.\n+     * Returns the class name or <code>null</code> if the class is <code>null</code>.\n      * \n      * @param cls  a <code>Class</code>\n-     * @return the name of <code>c</code>, or a <code>null</code> <code>String</code>\n+     * @return the name of <code>cls</code>, or <code>null</code> if if <code>cls</code> is <code>null</code>.\n      */\n     private static final String safeGetClassName(Class cls) {\n         return cls == null ? null : cls.getName();", "timestamp": 1054673399, "metainfo": ""}