{"sha": "e2e5b8ec947642ec52008ea5e8e7979fc8e0444b", "log": "Applying the Date.setXxx replacement methods that use Calendar as supplied by Travis Meisenheimer in LANG-383  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n         c.add(calendarField, amount);\n         return c.getTime();\n     }\n-\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the years field to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount the amount to set\n+     * @return a new Date object set with the specified value\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date setYears(Date date, int amount) {\n+        return set(date, Calendar.YEAR, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the months field to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount the amount to set\n+     * @return a new Date object set with the specified value\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date setMonths(Date date, int amount) {\n+        return set(date, Calendar.MONTH, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the day of month field to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount the amount to set\n+     * @return a new Date object set with the specified value\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date setDays(Date date, int amount) {\n+        return set(date, Calendar.DAY_OF_MONTH, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the hours field to a date returning a new object.  Hours range \n+     * from  0-23.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount the amount to set\n+     * @return a new Date object set with the specified value\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date setHours(Date date, int amount) {\n+        return set(date, Calendar.HOUR_OF_DAY, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the minute field to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount the amount to set\n+     * @return a new Date object set with the specified value\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date setMinutes(Date date, int amount) {\n+        return set(date, Calendar.MINUTE, amount);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the seconds field to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount the amount to set\n+     * @return a new Date object set with the specified value\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date setSeconds(Date date, int amount) {\n+        return set(date, Calendar.SECOND, amount);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the miliseconds field to a date returning a new object.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount the amount to set\n+     * @return a new Date object set with the specified value\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    public static Date setMilliseconds(Date date, int amount) {\n+        return set(date, Calendar.MILLISECOND, amount);\n+    } \n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Sets the specified field to a date returning a new object.  \n+     * This does not use a lenient calendar.\n+     * The original date object is unchanged.\n+     *\n+     * @param date  the date, not null\n+     * @param amount the amount to set\n+     * @return a new Date object set with the specified value\n+     * @throws IllegalArgumentException if the date is null\n+     */\n+    private static Date set(Date date, int calendarField, int amount) {\n+        if (date == null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        // getInstance() returns a new object, so this method is thread safe.\n+        Calendar c = Calendar.getInstance();\n+        c.setLenient(false);\n+        c.setTime(date);\n+        c.set(calendarField, amount);\n+        return c.getTime();\n+    }   \n+    \n     //-----------------------------------------------------------------------\n     /**\n      * <p>Round this date, leaving the field specified as the most\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n         assertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n         assertDate(result, 1999, 6, 5, 4, 3, 2, 1);\n     }\n+    \n+\t// -----------------------------------------------------------------------\n+\tpublic void testSetYears() throws Exception {\n+\t\tDate base = new Date(MILLIS_TEST);\n+\t\tDate result = DateUtils.setYears(base, 2000);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 5, 4, 3, 2, 1);\n+\n+\t\tresult = DateUtils.setYears(base, 2008);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2008, 6, 5, 4, 3, 2, 1);\n+\n+\t\tresult = DateUtils.setYears(base, 2005);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2005, 6, 5, 4, 3, 2, 1);\n+\t}\n+\n+\t// -----------------------------------------------------------------------\n+\tpublic void testSetMonths() throws Exception {\n+\t\tDate base = new Date(MILLIS_TEST);\n+\t\tDate result = DateUtils.setMonths(base, 5);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 5, 5, 4, 3, 2, 1);\n+\n+\t\tresult = DateUtils.setMonths(base, 1);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 1, 5, 4, 3, 2, 1);\n+\n+\t\ttry {\n+\t\t\tresult = DateUtils.setMonths(base, 12);\n+\t\t\tfail(\"DateUtils.setMonths did not throw an expected IllegalArguementException.\");\n+\t\t} catch (IllegalArgumentException e) {\n+\n+\t\t}\n+\t}\n+\n+\t// -----------------------------------------------------------------------\n+\tpublic void testSetDays() throws Exception {\n+\t\tDate base = new Date(MILLIS_TEST);\n+\t\tDate result = DateUtils.setDays(base, 1);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 1, 4, 3, 2, 1);\n+\n+\t\tresult = DateUtils.setDays(base, 29);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 29, 4, 3, 2, 1);\n+\n+\t\ttry {\n+\t\t\tresult = DateUtils.setDays(base, 32);\n+\t\t\tfail(\"DateUtils.setDays did not throw an expected IllegalArguementException.\");\n+\t\t} catch (IllegalArgumentException e) {\n+\n+\t\t}\n+\t}\n+\n+\t// -----------------------------------------------------------------------\n+\tpublic void testSetHours() throws Exception {\n+\t\tDate base = new Date(MILLIS_TEST);\n+\t\tDate result = DateUtils.setHours(base, 0);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 5, 0, 3, 2, 1);\n+\n+\t\tresult = DateUtils.setHours(base, 23);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 5, 23, 3, 2, 1);\n+\n+\t\ttry {\n+\t\t\tresult = DateUtils.setHours(base, 24);\n+\t\t\tfail(\"DateUtils.setHours did not throw an expected IllegalArguementException.\");\n+\t\t} catch (IllegalArgumentException e) {\n+\n+\t\t}\n+\t}\n+\n+\t// -----------------------------------------------------------------------\n+\tpublic void testSetMinutes() throws Exception {\n+\t\tDate base = new Date(MILLIS_TEST);\n+\t\tDate result = DateUtils.setMinutes(base, 0);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 5, 4, 0, 2, 1);\n+\n+\t\tresult = DateUtils.setMinutes(base, 59);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 5, 4, 59, 2, 1);\n+\n+\t\ttry {\n+\t\t\tresult = DateUtils.setMinutes(base, 60);\n+\t\t\tfail(\"DateUtils.setMinutes did not throw an expected IllegalArguementException.\");\n+\t\t} catch (IllegalArgumentException e) {\n+\n+\t\t}\n+\t}\n+\n+\t// -----------------------------------------------------------------------\n+\tpublic void testSetSeconds() throws Exception {\n+\t\tDate base = new Date(MILLIS_TEST);\n+\t\tDate result = DateUtils.setSeconds(base, 0);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 5, 4, 3, 0, 1);\n+\n+\t\tresult = DateUtils.setSeconds(base, 59);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 5, 4, 3, 59, 1);\n+\n+\t\ttry {\n+\t\t\tresult = DateUtils.setSeconds(base, 60);\n+\t\t\tfail(\"DateUtils.setSeconds did not throw an expected IllegalArguementException.\");\n+\t\t} catch (IllegalArgumentException e) {\n+\n+\t\t}\n+\t}\n+\n+\t// -----------------------------------------------------------------------\n+\tpublic void testSetMilliseconds() throws Exception {\n+\t\tDate base = new Date(MILLIS_TEST);\n+\t\tDate result = DateUtils.setMilliseconds(base, 0);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 5, 4, 3, 2, 0);\n+\n+\t\tresult = DateUtils.setMilliseconds(base, 999);\n+\t\tassertNotSame(base, result);\n+\t\tassertDate(base, 2000, 6, 5, 4, 3, 2, 1);\n+\t\tassertDate(result, 2000, 6, 5, 4, 3, 2, 999);\n+\n+\t\ttry {\n+\t\t\tresult = DateUtils.setMilliseconds(base, 1000);\n+\t\t\tfail(\"DateUtils.setMilliseconds did not throw an expected IllegalArguementException.\");\n+\t\t} catch (IllegalArgumentException e) {\n+\n+\t\t}\n+\t}\n \n     //-----------------------------------------------------------------------\n     private void assertDate(Date date, int year, int month, int day, int hour, int min, int sec, int mil) throws Exception {", "timestamp": 1199940082, "metainfo": ""}