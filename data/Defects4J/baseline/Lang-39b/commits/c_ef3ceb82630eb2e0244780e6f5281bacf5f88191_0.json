{"sha": "ef3ceb82630eb2e0244780e6f5281bacf5f88191", "log": "[LANG-553] Add TypeUtils  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/reflect/TypeUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.reflect;\n+\n+import java.lang.reflect.Array;\n+import java.lang.reflect.GenericArrayType;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.lang.reflect.TypeVariable;\n+\n+import org.apache.commons.lang.Validate;\n+\n+/**\n+ * <p>Utility methods focusing on type inspection, particularly with regard to\n+ * generics.</p>\n+ * @author James Carman\n+ * @author Matt Benson\n+ * @since 3.0\n+ * @version $Id$\n+ */\n+public class TypeUtils {\n+\n+    /**\n+     * Get the raw type of a Java type, given its context. Primarily for use\n+     * with {@link TypeVariable}s and {@link GenericArrayType}s, or when you do\n+     * not know the runtime type of <code>type</code>: if you know you have a\n+     * {@link Class} instance, it is already raw; if you know you have a\n+     * {@link ParameterizedType}, its raw type is only a method call away.\n+     * @param enclosingType context\n+     * @param type to read\n+     * @return Class<?>\n+     */\n+    // original code stolen from commons [proxy]'s 2.0 branch, then kneaded until firm\n+    public static Class<?> getRawType(Type enclosingType, Type type) {\n+        if (type instanceof Class<?>) {\n+            // it is raw, no problem\n+            return (Class<?>) type;\n+        }\n+        if (type instanceof ParameterizedType) {\n+            // simple enough to get the raw type of a ParameterizedType\n+            return (Class<?>) ((ParameterizedType) type).getRawType();\n+        }\n+        if (type instanceof TypeVariable<?>) {\n+            Validate.notNull(enclosingType,\n+                    \"Cannot get raw type of TypeVariable without enclosing type\");\n+            // resolve the variable against the enclosing type, hope for the best (casting)\n+            return (Class<?>) resolveVariable(enclosingType, (TypeVariable<?>) type);\n+        }\n+        if (type instanceof GenericArrayType) {\n+            Validate.notNull(enclosingType,\n+                    \"Cannot get raw type of GenericArrayType without enclosing type\");\n+            // not included in original code, but not too difficult:  just have to get raw component type...\n+            Class<?> rawComponentType = getRawType(enclosingType, ((GenericArrayType) type)\n+                    .getGenericComponentType());\n+            // ...and know how to reflectively create array types, uncommon but not unheard of:\n+            return Array.newInstance(rawComponentType, 0).getClass();\n+        }\n+        throw new IllegalArgumentException(String.valueOf(type));\n+    }\n+\n+    /**\n+     * We plan to return Class<?> from the top-level call, as evidenced by the\n+     * cast in the above method, but to handle recursion and falling back up the\n+     * graph, as it were, return Type\n+     * @param enclosingType\n+     * @param typeVar\n+     * @return Type resolved\n+     */\n+    // original code stolen from commons [proxy]'s 2.0 branch, then kneaded until firm\n+    private static Type resolveVariable(Type enclosingType, TypeVariable<?> typeVar) {\n+        if (enclosingType instanceof ParameterizedType) {\n+            ParameterizedType parameterizedEnclosingType = (ParameterizedType) enclosingType;\n+            TypeVariable<?>[] typeVariables = getRawType(null,\n+                    parameterizedEnclosingType.getRawType()).getTypeParameters();\n+            //look for the matching variable:\n+            for (int i = 0; i < typeVariables.length; i++) {\n+                if (typeVariables[i].equals(typeVar)) {\n+                    return parameterizedEnclosingType.getActualTypeArguments()[i];\n+                }\n+            }\n+            //otherwise recurse to try against raw class\n+            Type result = resolveVariable(parameterizedEnclosingType.getRawType(), typeVar);\n+            //unroll variable if returned\n+            if (result instanceof TypeVariable<?>) {\n+                return resolveVariable(enclosingType, (TypeVariable<?>) result);\n+            }\n+            return result;\n+        }\n+        if (enclosingType instanceof Class<?>) {\n+            Class<?> enclosingClass = (Class<?>) enclosingType;\n+            Type result = null;\n+            Type genericSuperclass = enclosingClass.getGenericSuperclass();\n+            if (genericSuperclass != null && !Object.class.equals(genericSuperclass)) {\n+                result = resolveVariable(genericSuperclass, typeVar);\n+            }\n+            if (result == null) {\n+                for (Type genericInterface : enclosingClass.getGenericInterfaces()) {\n+                    result = resolveVariable(genericInterface, typeVar);\n+                    if (result != null) {\n+                        break;\n+                    }\n+                }\n+            }\n+            if (result != null) {\n+                return result;\n+            }\n+        }\n+        throw new IllegalArgumentException(String.valueOf(typeVar));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/TypeUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.reflect;\n+\n+import static junit.framework.Assert.*;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.TypeVariable;\n+import java.util.List;\n+\n+import org.apache.commons.lang.reflect.testbed.*;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test TypeUtils\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class TypeUtilsTest {\n+    private Field stringParentField;\n+    private Field integerParentField;\n+    private Field foosField;\n+    private Field barParentsField;\n+    private TypeVariable<?> genericParentT;\n+    private TypeVariable<?> listType;\n+    private TypeVariable<?> iterableType;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        stringParentField = GenericTypeHolder.class.getDeclaredField(\"stringParent\");\n+        integerParentField = GenericTypeHolder.class.getDeclaredField(\"integerParent\");\n+        foosField = GenericTypeHolder.class.getDeclaredField(\"foos\");\n+        barParentsField = GenericTypeHolder.class.getDeclaredField(\"barParents\");\n+        genericParentT = GenericParent.class.getTypeParameters()[0];\n+        listType = List.class.getTypeParameters()[0];\n+        iterableType = Iterable.class.getTypeParameters()[0];\n+    }\n+\n+    @Test\n+    public void testGetRawTypeClass() throws Exception {\n+        assertEquals(GenericParent.class, TypeUtils.getRawType(null, GenericParent.class));\n+    }\n+\n+    @Test\n+    public void testGetRawTypeParameterizedType() throws Exception {\n+        assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,\n+                stringParentField.getGenericType()));\n+        assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,\n+                integerParentField.getGenericType()));\n+        assertEquals(List.class, TypeUtils.getRawType(GenericTypeHolder.class, foosField\n+                .getGenericType()));\n+    }\n+\n+    @Test\n+    public void testGetRawTypeTypeVariable() throws Exception {\n+        assertEquals(String.class, TypeUtils.getRawType(StringParameterizedChild.class,\n+                genericParentT));\n+        assertEquals(String.class, TypeUtils.getRawType(stringParentField.getGenericType(),\n+                genericParentT));\n+        assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), iterableType));\n+        assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), listType));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testGetRawTypeUnresolvableTypeVariable() {\n+        TypeUtils.getRawType(GenericParent.class, genericParentT);\n+    }\n+\n+    @Test\n+    public void testGetRawTypeGenericArray() throws Exception {\n+        assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class,\n+                barParentsField.getGenericType()));\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/testbed/GenericParent.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.reflect.testbed;\n+\n+/**\n+ * Class declaring a parameter variable.\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class GenericParent<T> {\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/testbed/GenericTypeHolder.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.reflect.testbed;\n+\n+import java.util.List;\n+\n+/**\n+ * Holds generic testbed types.\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class GenericTypeHolder {\n+    public GenericParent<String> stringParent;\n+    public GenericParent<Integer> integerParent;\n+    public List<Foo> foos;\n+    public GenericParent<Bar>[] barParents;\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/reflect/testbed/StringParameterizedChild.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.reflect.testbed;\n+\n+/**\n+ * {@link GenericParent} subclass that explicitly specifies <T> as {@link String}.\n+ * @author mbenson\n+ * @version $Id$\n+ */\n+public class StringParameterizedChild extends GenericParent<String> {\n+\n+}", "timestamp": 1258143467, "metainfo": ""}