{"sha": "6387c31656da0a09aa968455f1c66f8fc1170d96", "log": "Added the StringUtils.unescape method, UnitTest and STATUS change.  PR: Obtained from: Submitted by: Reviewed by:   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  */\n \n import java.util.StringTokenizer;\n-\n import java.util.Iterator;\n+\n+import org.apache.commons.lang.exception.NestableRuntimeException;\n \n /**\n  * <p>Common <code>String</code> manipulation routines.</p>\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n- * @version $Id: StringUtils.java,v 1.27 2002/11/27 22:54:29 bayard Exp $\n+ * @version $Id: StringUtils.java,v 1.28 2002/12/07 21:50:29 bayard Exp $\n  */\n public class StringUtils {\n \n         return buffer.toString();\n     }\n \n+    /**\n+     * Unescapes any Java literals found in the String. For example, \n+     * it will turn a sequence of '\\' and 'n' into a newline character, \n+     * unless the '\\' is preceded by another '\\'.\n+     */\n+    public static String unescape(String str) {\n+        int sz = str.length();\n+        StringBuffer buffer = new StringBuffer(sz);\n+        StringBuffer unicode = new StringBuffer(4);\n+        boolean hadSlash = false;\n+        boolean inUnicode = false;\n+        for (int i = 0; i < sz; i++) {\n+            char ch = str.charAt(i);\n+            if(inUnicode) {\n+                // if in unicode, then we're reading unicode \n+                // values in somehow\n+                if(unicode.length() == 4) {\n+                    // unicode now contains the four hex digits \n+                    // which represents our unicode chacater\n+                    try {\n+                        int value = Integer.parseInt(unicode.toString(), 16);\n+                        buffer.append( (char)value );\n+                        unicode.setLength(0);\n+                        unicode.setLength(4);\n+                        inUnicode = false;\n+                        hadSlash = false;\n+                    } catch(NumberFormatException nfe) {\n+                        throw new NestableRuntimeException(\"Unable to parse unicode value: \"+unicode, nfe);\n+                    }\n+                } else {\n+                    unicode.append(ch);\n+                    continue;\n+                }\n+            }\n+            if(hadSlash) {\n+                // handle an escaped value\n+                hadSlash = false;\n+                switch(ch) {\n+                    case '\\\\': buffer.append('\\\\'); break;\n+                    case '\\'': buffer.append('\\''); break;\n+                    case '\\\"': buffer.append('\"'); break;\n+                    case 'r':  buffer.append('\\r'); break;\n+                    case 'f':  buffer.append('\\f'); break;\n+                    case 't':  buffer.append('\\t'); break;\n+                    case 'n':  buffer.append('\\n'); break;\n+                    case 'b':  buffer.append('\\b'); break;\n+                    case 'u':  {\n+                        // uh-oh, we're in unicode country....\n+                        inUnicode=true;\n+                        break;\n+                    }\n+                    default :\n+                        buffer.append(ch);\n+                        break;\n+                }\n+                continue;\n+            } else\n+            if(ch == '\\\\') {\n+                hadSlash = true;\n+                continue;\n+            } \n+            buffer.append(ch);\n+        }\n+        if(hadSlash) {\n+            // then we're in the weird case of a \\ at the end of the \n+            // string, let's output it anyway.\n+            buffer.append('\\\\');\n+        }\n+        return buffer.toString();\n+    }\n+\n     // Padding\n     //--------------------------------------------------------------------------\n     \n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n- * @version $Id: StringUtilsTest.java,v 1.10 2002/11/23 00:51:34 bayard Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.11 2002/12/07 21:50:30 bayard Exp $\n  */\n public class StringUtilsTest extends TestCase\n {\n                      \"\\\\u0234\", StringUtils.escape(\"\\u0234\") );\n         assertEquals(\"escape(String) failed\",\n                      \"\\\\u00fd\", StringUtils.escape(\"\\u00fd\") );\n+        assertEquals(\"unescape(String) failed\", \n+                     \"\", StringUtils.unescape(\"\") );\n+        assertEquals(\"unescape(String) failed\", \n+                     \"test\", StringUtils.unescape(\"test\") );\n+        assertEquals(\"unescape(String) failed\", \n+                     \"\\ntest\\b\", StringUtils.unescape(\"\\\\ntest\\\\b\") );\n+        assertEquals(\"unescape(String) failed\", \n+                     \"\\u123425foo\\ntest\\b\", StringUtils.unescape(\"\\\\u123425foo\\\\ntest\\\\b\") );\n     }\n \n     public void testGetLevenshteinDistance() {", "timestamp": 1039297830, "metainfo": ""}