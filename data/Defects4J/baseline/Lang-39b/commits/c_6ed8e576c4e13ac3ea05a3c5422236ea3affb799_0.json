{"sha": "6ed8e576c4e13ac3ea05a3c5422236ea3affb799", "log": "Relax exceptions in left(), right() and mid()   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.87 2003/08/01 23:01:52 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.88 2003/08/01 23:11:55 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n      *\n      * <pre>\n      * StringUtils.left(null, *)    = null\n-     * StringUtils.left(*, -ve)     = IllegalArgumentException\n+     * StringUtils.left(*, -ve)     = \"\"\n      * StringUtils.left(\"\", *)      = \"\"\n      * StringUtils.left(\"abc\", 0)   = \"\"\n      * StringUtils.left(\"abc\", 2)   = \"ab\"\n      * @param str  the String to get the leftmost characters from, may be null\n      * @param len  the length of the required String, must be zero or positive\n      * @return the leftmost characters, <code>null</code> if null String input\n-     * @throws IllegalArgumentException if len is less than zero\n      */\n     public static String left(String str, int len) {\n         if (str == null) {\n             return null;\n         }\n         if (len < 0) {\n-            throw new IllegalArgumentException(\"Requested String length \" + len + \" is less than zero\");\n+            return \"\";\n         }\n         if (str.length() <= len) {\n             return str;\n      *\n      * <pre>\n      * StringUtils.right(null, *)    = null\n-     * StringUtils.right(*, -ve)     = IllegalArgumentException\n+     * StringUtils.right(*, -ve)     = \"\"\n      * StringUtils.right(\"\", *)      = \"\"\n      * StringUtils.right(\"abc\", 0)   = \"\"\n      * StringUtils.right(\"abc\", 2)   = \"bc\"\n      * @param str  the String to get the rightmost characters from, may be null\n      * @param len  the length of the required String, must be zero or positive\n      * @return the rightmost characters, <code>null</code> if null String input\n-     * @throws IllegalArgumentException if len is less than zero\n      */\n     public static String right(String str, int len) {\n         if (str == null) {\n             return null;\n         }\n         if (len < 0) {\n-            throw new IllegalArgumentException(\"Requested String length \" + len + \" is less than zero\");\n+            return \"\";\n         }\n         if (str.length() <= len) {\n             return str;\n      *\n      * <pre>\n      * StringUtils.mid(null, *, *)    = null\n-     * StringUtils.mid(*, *, -ve)     = IllegalArgumentException\n+     * StringUtils.mid(*, *, -ve)     = \"\"\n      * StringUtils.mid(\"\", 0, *)      = \"\"\n      * StringUtils.mid(\"abc\", 0, 2)   = \"ab\"\n      * StringUtils.mid(\"abc\", 0, 4)   = \"abc\"\n      * @param pos  the position to start from, negative treated as zero\n      * @param len  the length of the required String, must be zero or positive\n      * @return the middle characters, <code>null</code> if null String input\n-     * @throws IllegalArgumentException if len is less than zero\n      */\n     public static String mid(String str, int pos, int len) {\n         if (str == null) {\n             return null;\n         }\n-        if (pos > str.length()) {\n+        if (len < 0 || pos > str.length()) {\n             return \"\";\n         }\n         if (pos < 0) {\n             pos = 0;\n-        }\n-        if (len < 0) {\n-            throw new IllegalArgumentException(\"Requested String length \" + len + \" is less than zero\");\n         }\n         if (str.length() <= (pos + len)) {\n             return str.substring(pos);\n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsSubstringTest.java,v 1.11 2003/08/01 22:05:43 scolebourne Exp $\n+ * @version $Id: StringUtilsSubstringTest.java,v 1.12 2003/08/01 23:11:54 scolebourne Exp $\n  */\n public class StringUtilsSubstringTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertSame(null, StringUtils.left(null, -1));\n         assertSame(null, StringUtils.left(null, 0));\n         assertSame(null, StringUtils.left(null, 2));\n-        assertSame(\"\", StringUtils.left(\"\", 0));\n-        assertSame(\"\", StringUtils.left(\"\", 2));\n+        \n+        assertEquals(\"\", StringUtils.left(\"\", -1));\n+        assertEquals(\"\", StringUtils.left(\"\", 0));\n+        assertEquals(\"\", StringUtils.left(\"\", 2));\n+        \n+        assertEquals(\"\", StringUtils.left(FOOBAR, -1));\n         assertEquals(\"\", StringUtils.left(FOOBAR, 0));\n         assertEquals(FOO, StringUtils.left(FOOBAR, 3));\n         assertSame(FOOBAR, StringUtils.left(FOOBAR, 80));\n-        try {\n-            StringUtils.left(FOOBAR, -1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n     }\n     \n     public void testRight_String() {\n         assertSame(null, StringUtils.right(null, -1));\n         assertSame(null, StringUtils.right(null, 0));\n         assertSame(null, StringUtils.right(null, 2));\n-        assertSame(\"\", StringUtils.right(\"\", 0));\n-        assertSame(\"\", StringUtils.right(\"\", 2));\n+        \n+        assertEquals(\"\", StringUtils.right(\"\", -1));\n+        assertEquals(\"\", StringUtils.right(\"\", 0));\n+        assertEquals(\"\", StringUtils.right(\"\", 2));\n+        \n+        assertEquals(\"\", StringUtils.right(FOOBAR, -1));\n         assertEquals(\"\", StringUtils.right(FOOBAR, 0));\n         assertEquals(BAR, StringUtils.right(FOOBAR, 3));\n         assertSame(FOOBAR, StringUtils.right(FOOBAR, 80));\n-        try {\n-            StringUtils.right(FOOBAR, -1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n     }\n     \n     public void testMid_String() {\n         assertSame(null, StringUtils.mid(null, 0, -1));\n         assertSame(null, StringUtils.mid(null, 3, 0));\n         assertSame(null, StringUtils.mid(null, 3, 2));\n-        assertSame(\"\", StringUtils.mid(\"\", 0, 0));\n-        assertSame(\"\", StringUtils.mid(\"\", 0, 2));\n+        \n+        assertEquals(\"\", StringUtils.mid(\"\", 0, -1));\n+        assertEquals(\"\", StringUtils.mid(\"\", 0, 0));\n+        assertEquals(\"\", StringUtils.mid(\"\", 0, 2));\n+        \n+        assertEquals(\"\", StringUtils.mid(FOOBAR, 3, -1));\n         assertEquals(\"\", StringUtils.mid(FOOBAR, 3, 0));\n         assertEquals(\"b\", StringUtils.mid(FOOBAR, 3, 1));\n         assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3));\n         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80));\n         assertEquals(\"\", StringUtils.mid(FOOBAR, 9, 3));\n         assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3));\n-        try {\n-            StringUtils.mid(FOOBAR, 0, -1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n     }\n     \n     //-----------------------------------------------------------------------", "timestamp": 1059779515, "metainfo": ""}