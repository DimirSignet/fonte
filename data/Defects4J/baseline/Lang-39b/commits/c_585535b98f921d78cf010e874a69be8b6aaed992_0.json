{"sha": "585535b98f921d78cf010e874a69be8b6aaed992", "log": "Add missing @Override markers  ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/NestableError.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableError.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public Throwable getCause() {\n         return cause;\n     }\n      *\n      * @return String message string of the throwable\n      */\n+    @Override\n     public String getMessage() {\n         if (super.getMessage() != null) {\n             return super.getMessage();\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n--- a/src/java/org/apache/commons/lang/exception/NestableException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableException.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public Throwable getCause() {\n         return cause;\n     }\n      *\n      * @return String message string of the throwable\n      */\n+    @Override\n     public String getMessage() {\n         if (super.getMessage() != null) {\n             return super.getMessage();\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n--- a/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public Throwable getCause() {\n         return cause;\n     }\n      *\n      * @return String message string of the throwable\n      */\n+    @Override\n     public String getMessage() {\n         if (super.getMessage() != null) {\n             return super.getMessage();\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void printStackTrace() {\n         delegate.printStackTrace();\n     }\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void printStackTrace(PrintStream out) {\n         delegate.printStackTrace(out);\n     }\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public void printStackTrace(PrintWriter out) {\n         delegate.printStackTrace(out);\n     }\n--- a/src/java/org/apache/commons/lang/math/DoubleRange.java\n+++ b/src/java/org/apache/commons/lang/math/DoubleRange.java\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public Number getMinimumNumber() {\n         if (minObject == null) {\n             minObject = new Double(min);            \n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public long getMinimumLong() {\n         return (long) min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public int getMinimumInteger() {\n         return (int) min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public double getMinimumDouble() {\n         return min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public float getMinimumFloat() {\n         return (float) min;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public Number getMaximumNumber() {\n         if (maxObject == null) {\n             maxObject = new Double(max);            \n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public long getMaximumLong() {\n         return (long) max;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public int getMaximumInteger() {\n         return (int) max;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public double getMaximumDouble() {\n         return max;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public float getMaximumFloat() {\n         return (float) max;\n     }\n      * @param number  the number to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this range\n      */\n+    @Override\n     public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>double</code> comparison\n      */\n+    @Override\n     public boolean containsDouble(double value) {\n         return value >= min && value <= max;\n     }\n      * @return <code>true</code> if the specified range occurs entirely within this range\n      * @throws IllegalArgumentException if the range is not of this type\n      */\n+    @Override\n     public boolean containsRange(Range range) {\n         if (range == null) {\n             return false;\n      * @param range  the range to test, may be <code>null</code>\n      * @return <code>true</code> if the specified range overlaps with this range\n      */\n+    @Override\n     public boolean overlapsRange(Range range) {\n         if (range == null) {\n             return false;\n      * @param obj the reference object with which to compare\n      * @return <code>true</code> if this object is equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      *\n      * @return a hash code value for this object\n      */\n+    @Override\n     public int hashCode() {\n         if (hashCode == 0) {\n             hashCode = 17;\n      *\n      * @return the <code>String</code> representation of this range\n      */\n+    @Override\n     public String toString() {\n         if (toString == null) {\n             StringBuffer buf = new StringBuffer(32);\n--- a/src/java/org/apache/commons/lang/math/FloatRange.java\n+++ b/src/java/org/apache/commons/lang/math/FloatRange.java\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public Number getMinimumNumber() {\n         if (minObject == null) {\n             minObject = new Float(min);            \n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public long getMinimumLong() {\n         return (long) min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public int getMinimumInteger() {\n         return (int) min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public double getMinimumDouble() {\n         return min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public float getMinimumFloat() {\n         return min;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public Number getMaximumNumber() {\n         if (maxObject == null) {\n             maxObject = new Float(max);            \n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public long getMaximumLong() {\n         return (long) max;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public int getMaximumInteger() {\n         return (int) max;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public double getMaximumDouble() {\n         return max;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public float getMaximumFloat() {\n         return max;\n     }\n      * @param number  the number to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this range\n      */\n+    @Override\n     public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>float</code> comparison\n      */\n+    @Override\n     public boolean containsFloat(float value) {\n         return value >= min && value <= max;\n     }\n      * @return <code>true</code> if the specified range occurs entirely within this range\n      * @throws IllegalArgumentException if the range is not of this type\n      */\n+    @Override\n     public boolean containsRange(Range range) {\n         if (range == null) {\n             return false;\n      * @param range  the range to test, may be <code>null</code>\n      * @return <code>true</code> if the specified range overlaps with this range\n      */\n+    @Override\n     public boolean overlapsRange(Range range) {\n         if (range == null) {\n             return false;\n      * @param obj the reference object with which to compare\n      * @return <code>true</code> if this object is equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      *\n      * @return a hash code value for this object\n      */\n+    @Override\n     public int hashCode() {\n         if (hashCode == 0) {\n             hashCode = 17;\n      *\n      * @return the <code>String</code> representation of this range\n      */\n+    @Override\n     public String toString() {\n         if (toString == null) {\n             StringBuffer buf = new StringBuffer(32);\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n      *\n      * @return the whole number fraction part\n      */\n+    @Override\n     public int intValue() {\n         return numerator / denominator;\n     }\n      *\n      * @return the whole number fraction part\n      */\n+    @Override\n     public long longValue() {\n         return (long) numerator / denominator;\n     }\n      *\n      * @return the fraction as a <code>float</code>\n      */\n+    @Override\n     public float floatValue() {\n         return ((float) numerator) / ((float) denominator);\n     }\n      *\n      * @return the fraction as a <code>double</code>\n      */\n+    @Override\n     public double doubleValue() {\n         return ((double) numerator) / ((double) denominator);\n     }\n      * @param obj the reference object with which to compare\n      * @return <code>true</code> if this object is equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      *\n      * @return a hash code value for this object\n      */\n+    @Override\n     public int hashCode() {\n         if (hashCode == 0) {\n             // hashcode update should be atomic.\n      *\n      * @return a <code>String</code> form of the fraction\n      */\n+    @Override\n     public String toString() {\n         if (toString == null) {\n             toString = new StringBuffer(32)\n--- a/src/java/org/apache/commons/lang/math/IntRange.java\n+++ b/src/java/org/apache/commons/lang/math/IntRange.java\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public Number getMinimumNumber() {\n         if (minObject == null) {\n             minObject = new Integer(min);            \n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public long getMinimumLong() {\n         return min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public int getMinimumInteger() {\n         return min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public double getMinimumDouble() {\n         return min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public float getMinimumFloat() {\n         return min;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public Number getMaximumNumber() {\n         if (maxObject == null) {\n             maxObject = new Integer(max);            \n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public long getMaximumLong() {\n         return max;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public int getMaximumInteger() {\n         return max;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public double getMaximumDouble() {\n         return max;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public float getMaximumFloat() {\n         return max;\n     }\n      * @param number  the number to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this range\n      */\n+    @Override\n     public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>int</code> comparison\n      */\n+    @Override\n     public boolean containsInteger(int value) {\n         return value >= min && value <= max;\n     }\n      * @return <code>true</code> if the specified range occurs entirely within this range\n      * @throws IllegalArgumentException if the range is not of this type\n      */\n+    @Override\n     public boolean containsRange(Range range) {\n         if (range == null) {\n             return false;\n      * @param range  the range to test, may be <code>null</code>\n      * @return <code>true</code> if the specified range overlaps with this range\n      */\n+    @Override\n     public boolean overlapsRange(Range range) {\n         if (range == null) {\n             return false;\n      * @param obj the reference object with which to compare\n      * @return <code>true</code> if this object is equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      *\n      * @return a hash code value for this object\n      */\n+    @Override\n     public int hashCode() {\n         if (hashCode == 0) {\n             hashCode = 17;\n      *\n      * @return the <code>String</code> representation of this range\n      */\n+    @Override\n     public String toString() {\n         if (toString == null) {\n             StringBuffer buf = new StringBuffer(32);\n--- a/src/java/org/apache/commons/lang/math/JVMRandom.java\n+++ b/src/java/org/apache/commons/lang/math/JVMRandom.java\n      * @param seed ignored\n      * @throws UnsupportedOperationException\n      */\n+    @Override\n     public synchronized void setSeed(long seed) {\n         if (this.constructed) {\n             throw new UnsupportedOperationException();\n      * @return Nothing, this method always throws an UnsupportedOperationException.\n      * @throws UnsupportedOperationException\n      */\n+    @Override\n     public synchronized double nextGaussian() {\n         throw new UnsupportedOperationException();\n     }\n      * @param byteArray ignored\n      * @throws UnsupportedOperationException\n      */\n+    @Override\n     public void nextBytes(byte[] byteArray) {\n         throw new UnsupportedOperationException();\n     }\n      *\n      * @return the random int\n      */\n+    @Override\n     public int nextInt() {\n         return nextInt(Integer.MAX_VALUE);\n     }\n      * @return the random int\n      * @throws IllegalArgumentException when <code>n &lt;= 0</code>\n      */\n+    @Override\n     public int nextInt(int n) {\n         if (n <= 0) {\n             throw new IllegalArgumentException(\n      * from the Math.random() sequence.</p>\n      * @return the random long\n      */\n+    @Override\n     public long nextLong() {\n         // possible loss of precision?\n         return nextLong(Long.MAX_VALUE);\n      *\n      * @return the random boolean\n      */\n+    @Override\n     public boolean nextBoolean() {\n         return Math.random() > 0.5;\n     }\n      *\n      * @return the random float\n      */\n+    @Override\n     public float nextFloat() {\n         return (float)Math.random();\n     }\n      *\n      * @return the random double\n      */\n+    @Override\n     public double nextDouble() {\n         return Math.random();\n     }\n--- a/src/java/org/apache/commons/lang/math/LongRange.java\n+++ b/src/java/org/apache/commons/lang/math/LongRange.java\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public Number getMinimumNumber() {\n         if (minObject == null) {\n             minObject = new Long(min);            \n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public long getMinimumLong() {\n         return min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public int getMinimumInteger() {\n         return (int) min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public double getMinimumDouble() {\n         return min;\n     }\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public float getMinimumFloat() {\n         return min;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public Number getMaximumNumber() {\n         if (maxObject == null) {\n             maxObject = new Long(max);            \n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public long getMaximumLong() {\n         return max;\n     }\n      * \n      * @return the maximum number in this range cast to an <code>int</code>.\n      */\n+    @Override\n     public int getMaximumInteger() {\n         return (int) max;\n     }\n      * \n      * @return The maximum number in this range as a <code>double</code>.\n      */\n+    @Override\n     public double getMaximumDouble() {\n         return max;\n     }\n      * \n      * @return The maximum number in this range as a <code>float</code>.\n      */\n+    @Override\n     public float getMaximumFloat() {\n         return max;\n     }\n      * @param number  the number to test, may be <code>null</code>\n      * @return <code>true</code> if the specified number occurs within this range\n      */\n+    @Override\n     public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n      * @return <code>true</code> if the specified number occurs within this\n      *  range by <code>long</code> comparison\n      */\n+    @Override\n     public boolean containsLong(long value) {\n         return value >= min && value <= max;\n     }\n      * @return <code>true</code> if the specified range occurs entirely within this range\n      * @throws IllegalArgumentException if the range is not of this type\n      */\n+    @Override\n     public boolean containsRange(Range range) {\n         if (range == null) {\n             return false;\n      * @param range  the range to test, may be <code>null</code>\n      * @return <code>true</code> if the specified range overlaps with this range\n      */\n+    @Override\n     public boolean overlapsRange(Range range) {\n         if (range == null) {\n             return false;\n      * @param obj the reference object with which to compare\n      * @return <code>true</code> if this object is equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      *\n      * @return a hash code value for this object\n      */\n+    @Override\n     public int hashCode() {\n         if (hashCode == 0) {\n             hashCode = 17;\n      *\n      * @return the <code>String</code> representation of this range\n      */\n+    @Override\n     public String toString() {\n         if (toString == null) {\n             StringBuffer buf = new StringBuffer(32);\n--- a/src/java/org/apache/commons/lang/math/NumberRange.java\n+++ b/src/java/org/apache/commons/lang/math/NumberRange.java\n      *\n      * @return the minimum number in this range\n      */\n+    @Override\n     public Number getMinimumNumber() {\n         return min;\n     }\n      *\n      * @return the maximum number in this range\n      */\n+    @Override\n     public Number getMaximumNumber() {\n         return max;\n     }\n      * @return <code>true</code> if the specified number occurs within this range\n      * @throws IllegalArgumentException if the number is of a different type to the range\n      */\n+    @Override\n     public boolean containsNumber(Number number) {\n         if (number == null) {\n             return false;\n      * @param obj the reference object with which to compare\n      * @return <code>true</code> if this object is equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      *\n      * @return a hash code value for this object\n      */\n+    @Override\n     public int hashCode() {\n         if (hashCode == 0) {\n             hashCode = 17;\n      *\n      * @return the <code>String</code> representation of this range\n      */\n+    @Override\n     public String toString() {\n         if (toString == null) {\n             StringBuffer buf = new StringBuffer(32);\n--- a/src/java/org/apache/commons/lang/math/Range.java\n+++ b/src/java/org/apache/commons/lang/math/Range.java\n      * @param obj the reference object with which to compare\n      * @return <code>true</code> if this object is equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n      *\n      * @return a hash code value for this object\n      */\n+    @Override\n     public int hashCode() {\n         int result = 17;\n         result = 37 * result + getClass().hashCode();\n      *\n      * @return the <code>String</code> representation of this range\n      */\n+    @Override\n     public String toString() {\n         StringBuffer buf = new StringBuffer(32);\n         buf.append(\"Range[\");\n--- a/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n      *            the object to compare with.\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableBoolean) {\n             return value == ((MutableBoolean) obj).booleanValue();\n      * @return the integer <code>1231</code> if this object represents <code>true</code>; returns the integer\n      *         <code>1237</code> if this object represents <code>false</code>.\n      */\n+    @Override\n     public int hashCode() {\n         return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();\n     }\n      * \n      * @return the mutable value as a string\n      */\n+    @Override\n     public String toString() {\n         return String.valueOf(value);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n      *\n      * @return the numeric value represented by this object after conversion to type byte.\n      */\n+    @Override\n     public byte byteValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n+    @Override\n     public int intValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type long.\n      */\n+    @Override\n     public long longValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type float.\n      */\n+    @Override\n     public float floatValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type double.\n      */\n+    @Override\n     public double doubleValue() {\n         return value;\n     }\n      *            the object to compare with.\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableByte) {\n             return value == ((MutableByte) obj).byteValue();\n      * \n      * @return a suitable hashcode\n      */\n+    @Override\n     public int hashCode() {\n         return value;\n     }\n      * \n      * @return the mutable value as a string\n      */\n+    @Override\n     public String toString() {\n         return String.valueOf(value);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n+    @Override\n     public int intValue() {\n         return (int) value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type long.\n      */\n+    @Override\n     public long longValue() {\n         return (long) value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type float.\n      */\n+    @Override\n     public float floatValue() {\n         return (float) value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type double.\n      */\n+    @Override\n     public double doubleValue() {\n         return value;\n     }\n      *            the object to compare with.\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         return (obj instanceof MutableDouble)\n             && (Double.doubleToLongBits(((MutableDouble) obj).value) == Double.doubleToLongBits(value));\n      * \n      * @return a suitable hashcode\n      */\n+    @Override\n     public int hashCode() {\n         long bits = Double.doubleToLongBits(value);\n         return (int) (bits ^ (bits >>> 32));\n      * \n      * @return the mutable value as a string\n      */\n+    @Override\n     public String toString() {\n         return String.valueOf(value);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n+    @Override\n     public int intValue() {\n         return (int) value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type long.\n      */\n+    @Override\n     public long longValue() {\n         return (long) value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type float.\n      */\n+    @Override\n     public float floatValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type double.\n      */\n+    @Override\n     public double doubleValue() {\n         return value;\n     }\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      * @see java.lang.Float#floatToIntBits(float)\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         return (obj instanceof MutableFloat)\n             && (Float.floatToIntBits(((MutableFloat) obj).value) == Float.floatToIntBits(value));\n      * \n      * @return a suitable hashcode\n      */\n+    @Override\n     public int hashCode() {\n         return Float.floatToIntBits(value);\n     }\n      * \n      * @return the mutable value as a string\n      */\n+    @Override\n     public String toString() {\n         return String.valueOf(value);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n+    @Override\n     public int intValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type long.\n      */\n+    @Override\n     public long longValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type float.\n      */\n+    @Override\n     public float floatValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type double.\n      */\n+    @Override\n     public double doubleValue() {\n         return value;\n     }\n      *                  the object to compare with.\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableInt) {\n             return value == ((MutableInt) obj).intValue();\n      * \n      * @return a suitable hashcode\n      */\n+    @Override\n     public int hashCode() {\n         return value;\n     }\n      * \n      * @return the mutable value as a string\n      */\n+    @Override\n     public String toString() {\n         return String.valueOf(value);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n+    @Override\n     public int intValue() {\n         return (int) value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type long.\n      */\n+    @Override\n     public long longValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type float.\n      */\n+    @Override\n     public float floatValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type double.\n      */\n+    @Override\n     public double doubleValue() {\n         return value;\n     }\n      *            the object to compare with.\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableLong) {\n             return value == ((MutableLong) obj).longValue();\n      * \n      * @return a suitable hashcode\n      */\n+    @Override\n     public int hashCode() {\n         return (int) (value ^ (value >>> 32));\n     }\n      * \n      * @return the mutable value as a string\n      */\n+    @Override\n     public String toString() {\n         return String.valueOf(value);\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableObject.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableObject.java\n      *            the object to compare with.\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableObject) {\n             Object other = ((MutableObject) obj).value;\n      * \n      * @return the value's hash code or <code>0</code> if the value is <code>null</code>.\n      */\n+    @Override\n     public int hashCode() {\n         return value == null ? 0 : value.hashCode();\n     }\n      * \n      * @return the mutable value as a string\n      */\n+    @Override\n     public String toString() {\n         return value == null ? \"null\" : value.toString();\n     }\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n      *\n      * @return the numeric value represented by this object after conversion to type short.\n      */\n+    @Override\n     public short shortValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type int.\n      */\n+    @Override\n     public int intValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type long.\n      */\n+    @Override\n     public long longValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type float.\n      */\n+    @Override\n     public float floatValue() {\n         return value;\n     }\n      *\n      * @return the numeric value represented by this object after conversion to type double.\n      */\n+    @Override\n     public double doubleValue() {\n         return value;\n     }\n      *                  the object to compare with.\n      * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableShort) {\n             return value == ((MutableShort) obj).shortValue();\n      * \n      * @return a suitable hashcode\n      */\n+    @Override\n     public int hashCode() {\n         return value;\n     }\n      * \n      * @return the mutable value as a string\n      */\n+    @Override\n     public String toString() {\n         return String.valueOf(value);\n     }\n--- a/src/java/org/apache/commons/lang/text/CompositeFormat.java\n+++ b/src/java/org/apache/commons/lang/text/CompositeFormat.java\n      * @return <code>toAppendTo</code>\n      * @see Format#format(Object, StringBuffer, FieldPosition)\n      */\n+    @Override\n     public StringBuffer format(Object obj, StringBuffer toAppendTo,\n             FieldPosition pos) {\n         return formatter.format(obj, toAppendTo, pos);\n      * @return the parsed Object\n      * @see Format#parseObject(String, ParsePosition)\n      */\n+    @Override\n     public Object parseObject(String source, ParsePosition pos) {\n         return parser.parseObject(source, pos);\n     }\n--- a/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n+++ b/src/java/org/apache/commons/lang/text/ExtendedMessageFormat.java\n     /**\n      * {@inheritDoc}\n      */\n+    @Override\n     public String toPattern() {\n         return toPattern;\n     }\n      * \n      * @param pattern String\n      */\n+    @Override\n     public final void applyPattern(String pattern) {\n         if (registry == null) {\n             super.applyPattern(pattern);\n      * {@inheritDoc}\n      * @throws UnsupportedOperationException\n      */\n+    @Override\n     public void setFormat(int formatElementIndex, Format newFormat) {\n         throw new UnsupportedOperationException();\n     }\n      * {@inheritDoc}\n      * @throws UnsupportedOperationException\n      */\n+    @Override\n     public void setFormatByArgumentIndex(int argumentIndex, Format newFormat) {\n         throw new UnsupportedOperationException();\n     }\n      * {@inheritDoc}\n      * @throws UnsupportedOperationException\n      */\n+    @Override\n     public void setFormats(Format[] newFormats) {\n         throw new UnsupportedOperationException();\n     }\n      * {@inheritDoc}\n      * @throws UnsupportedOperationException\n      */\n+    @Override\n     public void setFormatsByArgumentIndex(Format[] newFormats) {\n         throw new UnsupportedOperationException();\n     }\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n      * @param obj  the object to check, null returns false\n      * @return true if the builders contain the same characters in the same order\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj instanceof StrBuilder) {\n             return equals((StrBuilder) obj);\n      *\n      * @return a hash code\n      */\n+    @Override\n     public int hashCode() {\n         char buf[] = buffer;\n         int hash = 0;\n      *\n      * @return the builder as a String\n      */\n+    @Override\n     public String toString() {\n         return new String(buffer, 0, size);\n     }\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         protected List tokenize(char[] chars, int offset, int count) {\n             if (chars == null) {\n                 return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public String getContent() {\n             String str = super.getContent();\n             if (str == null) {\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void close() {\n             // do nothing\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public int read() {\n             if (ready() == false) {\n                 return -1;\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public int read(char b[], int off, int len) {\n             if (off < 0 || len < 0 || off > b.length ||\n                     (off + len) > b.length || (off + len) < 0) {\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public long skip(long n) {\n             if (pos + n > StrBuilder.this.size()) {\n                 n = StrBuilder.this.size() - pos;\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public boolean ready() {\n             return pos < StrBuilder.this.size();\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public boolean markSupported() {\n             return true;\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void mark(int readAheadLimit) {\n             mark = pos;\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void reset() {\n             pos = mark;\n         }\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void close() {\n             // do nothing\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void flush() {\n             // do nothing\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void write(int c) {\n             StrBuilder.this.append((char) c);\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void write(char[] cbuf) {\n             StrBuilder.this.append(cbuf);\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void write(char[] cbuf, int off, int len) {\n             StrBuilder.this.append(cbuf, off, len);\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void write(String str) {\n             StrBuilder.this.append(str);\n         }\n \n         /** {@inheritDoc} */\n+        @Override\n         public void write(String str, int off, int len) {\n             StrBuilder.this.append(str, off, len);\n         }\n--- a/src/java/org/apache/commons/lang/text/StrLookup.java\n+++ b/src/java/org/apache/commons/lang/text/StrLookup.java\n          * @param key  the key to be looked up, may be null\n          * @return the matching value, null if no match\n          */\n+        @Override\n         public String lookup(String key) {\n             if (map == null) {\n                 return null;\n--- a/src/java/org/apache/commons/lang/text/StrMatcher.java\n+++ b/src/java/org/apache/commons/lang/text/StrMatcher.java\n          * @param bufferEnd  the end index of the active buffer, valid for buffer\n          * @return the number of matching characters, zero for no match\n          */\n+        @Override\n         public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n             return Arrays.binarySearch(chars, buffer[pos]) >= 0 ? 1 : 0;\n         }\n          * @param bufferEnd  the end index of the active buffer, valid for buffer\n          * @return the number of matching characters, zero for no match\n          */\n+        @Override\n         public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n             return ch == buffer[pos] ? 1 : 0;\n         }\n          * @param bufferEnd  the end index of the active buffer, valid for buffer\n          * @return the number of matching characters, zero for no match\n          */\n+        @Override\n         public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n             int len = chars.length;\n             if (pos + len > bufferEnd) {\n          * @param bufferEnd  the end index of the active buffer, valid for buffer\n          * @return the number of matching characters, zero for no match\n          */\n+        @Override\n         public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n             return 0;\n         }\n          * @param bufferEnd  the end index of the active buffer, valid for buffer\n          * @return the number of matching characters, zero for no match\n          */\n+        @Override\n         public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n             return buffer[pos] <= 32 ? 1 : 0;\n         }\n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n      * \n      * @return a new instance of this Tokenizer which has been reset.\n      */\n+    @Override\n     public Object clone() {\n         try {\n             return cloneReset();\n      *\n      * @return the string content being parsed\n      */\n+    @Override\n     public String toString() {\n         if (tokens == null) {\n             return \"StrTokenizer[not tokenized yet]\";\n--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java\n          * @param obj2 Object to consider equality of\n          * @return boolean <code>true</code> if equal\n          */\n+        @Override\n         public boolean equals(Object obj2) {\n             if (obj2 instanceof Token) {\n                 Token tok2 = (Token) obj2;\n          *\n          * @return The hashcode for the token\n          */\n+        @Override\n         public int hashCode() {\n             return this.value.hashCode();\n         }\n          *\n          * @return String representation of the token\n          */\n+        @Override\n         public String toString() {\n             return StringUtils.repeat(this.value.toString(), this.count);\n         }\n--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java\n+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java\n      * @param pos  the position - ignored\n      * @return the buffer passed in\n      */\n+    @Override\n     public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n         if (obj instanceof Date) {\n             return format((Date) obj, toAppendTo);\n      * @param pos  the parsing position\n      * @return <code>null</code> as not supported\n      */\n+    @Override\n     public Object parseObject(String source, ParsePosition pos) {\n         pos.setIndex(0);\n         pos.setErrorIndex(0);\n      * @param obj  the object to compare to\n      * @return <code>true</code> if equal\n      */\n+    @Override\n     public boolean equals(Object obj) {\n         if (obj instanceof FastDateFormat == false) {\n             return false;\n      * \n      * @return a hashcode compatible with equals\n      */\n+    @Override\n     public int hashCode() {\n         int total = 0;\n         total += mPattern.hashCode();\n      * \n      * @return a debugging string\n      */\n+    @Override\n     public String toString() {\n         return \"FastDateFormat[\" + mPattern + \"]\";\n     }\n         /**\n          * {@inheritDoc}\n          */\n+        @Override\n         public int hashCode() {\n             return mStyle * 31 + mLocale.hashCode();\n         }\n         /**\n          * {@inheritDoc}\n          */\n+        @Override\n         public boolean equals(Object obj) {\n             if (this == obj) {\n                 return true;\n         /**\n          * {@inheritDoc}\n          */\n+        @Override\n         public boolean equals(Object obj) {\n             if (this == obj) {\n                 return true;\n         /**\n          * {@inheritDoc}\n          */\n+        @Override\n         public int hashCode() {\n             return\n                 (mObj1 == null ? 0 : mObj1.hashCode()) +\n         /**\n          * {@inheritDoc}\n          */\n+        @Override\n         public String toString() {\n             return \"[\" + mObj1 + ':' + mObj2 + ']';\n         }\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n      * \n      * @return the time as a String\n      */\n+    @Override\n     public String toString() {\n         return DurationFormatUtils.formatDurationHMS(getTime());\n     }\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n             public Object setValue(Object value) {\n                 throw new UnsupportedOperationException();\n             }\n+            @Override\n             public boolean equals(Object o) {\n                 throw new UnsupportedOperationException();\n             }\n+            @Override\n             public int hashCode() {\n                 throw new UnsupportedOperationException();\n             }\n--- a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n \n     /** Test subclass of Object, with a toString method. */\n     private static Object FOO = new Object() {\n+        @Override\n         public String toString() {\n             return \"foo\";\n         }\n     public void testAppendln_String() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n+            @Override\n             public StrBuilder append(String str) {\n                 count[0]++;\n                 return super.append(str);\n             }\n+            @Override\n             public StrBuilder appendNewLine() {\n                 count[1]++;\n                 return super.appendNewLine();\n     public void testAppendln_String_int_int() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n+            @Override\n             public StrBuilder append(String str, int startIndex, int length) {\n                 count[0]++;\n                 return super.append(str, startIndex, length);\n             }\n+            @Override\n             public StrBuilder appendNewLine() {\n                 count[1]++;\n                 return super.appendNewLine();\n     public void testAppendln_StringBuffer() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n+            @Override\n             public StrBuilder append(StringBuffer str) {\n                 count[0]++;\n                 return super.append(str);\n             }\n+            @Override\n             public StrBuilder appendNewLine() {\n                 count[1]++;\n                 return super.appendNewLine();\n     public void testAppendln_StringBuffer_int_int() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n+            @Override\n             public StrBuilder append(StringBuffer str, int startIndex, int length) {\n                 count[0]++;\n                 return super.append(str, startIndex, length);\n             }\n+            @Override\n             public StrBuilder appendNewLine() {\n                 count[1]++;\n                 return super.appendNewLine();\n     public void testAppendln_StrBuilder() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n+            @Override\n             public StrBuilder append(StrBuilder str) {\n                 count[0]++;\n                 return super.append(str);\n             }\n+            @Override\n             public StrBuilder appendNewLine() {\n                 count[1]++;\n                 return super.appendNewLine();\n     public void testAppendln_StrBuilder_int_int() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n+            @Override\n             public StrBuilder append(StrBuilder str, int startIndex, int length) {\n                 count[0]++;\n                 return super.append(str, startIndex, length);\n             }\n+            @Override\n             public StrBuilder appendNewLine() {\n                 count[1]++;\n                 return super.appendNewLine();\n     public void testAppendln_CharArray() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n+            @Override\n             public StrBuilder append(char[] str) {\n                 count[0]++;\n                 return super.append(str);\n             }\n+            @Override\n             public StrBuilder appendNewLine() {\n                 count[1]++;\n                 return super.appendNewLine();\n     public void testAppendln_CharArray_int_int() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n+            @Override\n             public StrBuilder append(char[] str, int startIndex, int length) {\n                 count[0]++;\n                 return super.append(str, startIndex, length);\n             }\n+            @Override\n             public StrBuilder appendNewLine() {\n                 count[1]++;\n                 return super.appendNewLine();", "timestamp": 1237035485, "metainfo": ""}