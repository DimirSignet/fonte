{"sha": "37c66d1c8b405e3fbd7e9a78e6b5b8ccf223426f", "log": "merge ClassUtils isAssignable w/ autoboxing from LANG_POST_2_4 branch  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n      * @return <code>true</code> if assignment possible\n      */\n     public static boolean isAssignable(Class[] classArray, Class[] toClassArray) {\n-        if (ArrayUtils.isSameLength(classArray, toClassArray) == false) {\n-            return false;\n-        }\n-        if (classArray == null) {\n-            classArray = ArrayUtils.EMPTY_CLASS_ARRAY;\n-        }\n-        if (toClassArray == null) {\n-            toClassArray = ArrayUtils.EMPTY_CLASS_ARRAY;\n-        }\n-        for (int i = 0; i < classArray.length; i++) {\n-            if (isAssignable(classArray[i], toClassArray[i]) == false) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    /**\n-     * <p>Checks if one <code>Class</code> can be assigned to a variable of\n-     * another <code>Class</code>.</p>\n-     *\n-     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,\n-     * this method takes into account widenings of primitive classes and\n+        return isAssignable(classArray, toClassArray, false);\n+    }\n+\n+    /**\n+     * <p>Checks if an array of Classes can be assigned to another array of Classes.</p>\n+     *\n+     * <p>This method calls {@link #isAssignable(Class, Class) isAssignable} for each\n+     * Class pair in the input arrays. It can be used to check if a set of arguments\n+     * (the first parameter) are suitably compatible with a set of method parameter types\n+     * (the second parameter).</p>\n+     *\n+     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method, this\n+     * method takes into account widenings of primitive classes and\n      * <code>null</code>s.</p>\n      *\n-     * <p>Primitive widenings allow an int to be assigned to a long, float or\n-     * double. This method returns the correct result for these cases.</p>\n-     *\n-     * <p><code>Null</code> may be assigned to any reference type. This method\n-     * will return <code>true</code> if <code>null</code> is passed in and the\n-     * toClass is non-primitive.</p>\n+     * <p>Primitive widenings allow an int to be assigned to a <code>long</code>,\n+     * <code>float</code> or <code>double</code>. This method returns the correct\n+     * result for these cases.</p>\n+     *\n+     * <p><code>Null</code> may be assigned to any reference type. This method will\n+     * return <code>true</code> if <code>null</code> is passed in and the toClass is\n+     * non-primitive.</p>\n      *\n      * <p>Specifically, this method tests whether the type represented by the\n      * specified <code>Class</code> parameter can be converted to the type\n      * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n+     * @param classArray  the array of Classes to check, may be <code>null</code>\n+     * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>\n+     * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers\n+     * @return <code>true</code> if assignment possible\n+     */\n+    public static boolean isAssignable(Class[] classArray, Class[] toClassArray, boolean autoboxing) {\n+        if (ArrayUtils.isSameLength(classArray, toClassArray) == false) {\n+            return false;\n+        }\n+        if (classArray == null) {\n+            classArray = ArrayUtils.EMPTY_CLASS_ARRAY;\n+        }\n+        if (toClassArray == null) {\n+            toClassArray = ArrayUtils.EMPTY_CLASS_ARRAY;\n+        }\n+        for (int i = 0; i < classArray.length; i++) {\n+            if (isAssignable(classArray[i], toClassArray[i], autoboxing) == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Checks if one <code>Class</code> can be assigned to a variable of\n+     * another <code>Class</code>.</p>\n+     *\n+     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,\n+     * this method takes into account widenings of primitive classes and\n+     * <code>null</code>s.</p>\n+     *\n+     * <p>Primitive widenings allow an int to be assigned to a long, float or\n+     * double. This method returns the correct result for these cases.</p>\n+     *\n+     * <p><code>Null</code> may be assigned to any reference type. This method\n+     * will return <code>true</code> if <code>null</code> is passed in and the\n+     * toClass is non-primitive.</p>\n+     *\n+     * <p>Specifically, this method tests whether the type represented by the\n+     * specified <code>Class</code> parameter can be converted to the type\n+     * represented by this <code>Class</code> object via an identity conversion\n+     * widening primitive or widening reference conversion. See\n+     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n+     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n+     *\n      * @param cls  the Class to check, may be null\n      * @param toClass  the Class to try to assign into, returns false if null\n      * @return <code>true</code> if assignment possible\n      */\n     public static boolean isAssignable(Class cls, Class toClass) {\n+        return isAssignable(cls, toClass, false);\n+    }\n+\n+    /**\n+     * <p>Checks if one <code>Class</code> can be assigned to a variable of\n+     * another <code>Class</code>.</p>\n+     *\n+     * <p>Unlike the {@link Class#isAssignableFrom(java.lang.Class)} method,\n+     * this method takes into account widenings of primitive classes and\n+     * <code>null</code>s.</p>\n+     *\n+     * <p>Primitive widenings allow an int to be assigned to a long, float or\n+     * double. This method returns the correct result for these cases.</p>\n+     *\n+     * <p><code>Null</code> may be assigned to any reference type. This method\n+     * will return <code>true</code> if <code>null</code> is passed in and the\n+     * toClass is non-primitive.</p>\n+     *\n+     * <p>Specifically, this method tests whether the type represented by the\n+     * specified <code>Class</code> parameter can be converted to the type\n+     * represented by this <code>Class</code> object via an identity conversion\n+     * widening primitive or widening reference conversion. See\n+     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n+     * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n+     *\n+     * @param cls  the Class to check, may be null\n+     * @param toClass  the Class to try to assign into, returns false if null\n+     * @param autoboxing  whether to use implicit autoboxing/unboxing between primitives and wrappers\n+     * @return <code>true</code> if assignment possible\n+     */\n+    public static boolean isAssignable(Class cls, Class toClass, boolean autoboxing) {\n         if (toClass == null) {\n             return false;\n         }\n         // have to check for null, as isAssignableFrom doesn't\n         if (cls == null) {\n             return !(toClass.isPrimitive());\n+        }\n+        //autoboxing:\n+        if (autoboxing) {\n+            if (cls.isPrimitive() && !toClass.isPrimitive()) {\n+                cls = primitiveToWrapper(cls);\n+                if (cls == null) {\n+                    return false;\n+                }\n+            }\n+            if (toClass.isPrimitive() && !cls.isPrimitive()) {\n+                cls = wrapperToPrimitive(cls);\n+                if (cls == null) {\n+                    return false;\n+                }\n+            }\n         }\n         if (cls.equals(toClass)) {\n             return true;\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n         Class[] array1s = new Class[] {String.class};\n         Class[] array0 = new Class[] {};\n \n-        assertEquals(false, ClassUtils.isAssignable(array1, array2));\n-        assertEquals(false, ClassUtils.isAssignable(null, array2));\n-        assertEquals(true, ClassUtils.isAssignable(null, array0));\n-        assertEquals(true, ClassUtils.isAssignable(array0, array0));\n-        assertEquals(true, ClassUtils.isAssignable(array0, null));\n-        assertEquals(true, ClassUtils.isAssignable((Class[]) null, (Class[]) null));\n-        \n-        assertEquals(false, ClassUtils.isAssignable(array1, array1s));\n-        assertEquals(true, ClassUtils.isAssignable(array1s, array1s));\n-        assertEquals(true, ClassUtils.isAssignable(array1s, array1));\n+        assertFalse(ClassUtils.isAssignable(array1, array2));\n+        assertFalse(ClassUtils.isAssignable(null, array2));\n+        assertTrue(ClassUtils.isAssignable(null, array0));\n+        assertTrue(ClassUtils.isAssignable(array0, array0));\n+        assertTrue(ClassUtils.isAssignable(array0, null));\n+        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null));\n+        \n+        assertFalse(ClassUtils.isAssignable(array1, array1s));\n+        assertTrue(ClassUtils.isAssignable(array1s, array1s));\n+        assertTrue(ClassUtils.isAssignable(array1s, array1));\n     }\n     \n     public void test_isAssignable() throws Exception {\n-        assertEquals(false, ClassUtils.isAssignable((Class) null, null));\n-        assertEquals(false, ClassUtils.isAssignable(String.class, null));\n-        \n-        assertEquals(true, ClassUtils.isAssignable(null, Object.class));\n-        assertEquals(true, ClassUtils.isAssignable(null, Integer.class));\n-        assertEquals(false, ClassUtils.isAssignable(null, Integer.TYPE));\n-        assertEquals(true, ClassUtils.isAssignable(String.class, Object.class));\n-        assertEquals(true, ClassUtils.isAssignable(String.class, String.class));\n-        assertEquals(false, ClassUtils.isAssignable(Object.class, String.class));\n-        assertEquals(false, ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n-        assertEquals(false, ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n-        assertEquals(true, ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n-        assertEquals(true, ClassUtils.isAssignable(Integer.class, Integer.class));\n-    }\n-    \n+        assertFalse(ClassUtils.isAssignable((Class) null, null));\n+        assertFalse(ClassUtils.isAssignable(String.class, null));\n+        \n+        assertTrue(ClassUtils.isAssignable(null, Object.class));\n+        assertTrue(ClassUtils.isAssignable(null, Integer.class));\n+        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE));\n+        assertTrue(ClassUtils.isAssignable(String.class, Object.class));\n+        assertTrue(ClassUtils.isAssignable(String.class, String.class));\n+        assertFalse(ClassUtils.isAssignable(Object.class, String.class));\n+        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n+        assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n+        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n+        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));\n+        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));\n+        assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n+        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n+        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));\n+    }\n+    \n+    public void test_isAssignable_Autoboxing() throws Exception {\n+        assertFalse(ClassUtils.isAssignable((Class) null, null, true));\n+        assertFalse(ClassUtils.isAssignable(String.class, null, true));\n+\n+        assertTrue(ClassUtils.isAssignable(null, Object.class, true));\n+        assertTrue(ClassUtils.isAssignable(null, Integer.class, true));\n+        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(String.class, Object.class, true));\n+        assertTrue(ClassUtils.isAssignable(String.class, String.class, true));\n+        assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));\n+        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));\n+        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));\n+    }\n+\n     public void test_isAssignable_Widening() throws Exception {\n         // test byte conversions\n-        assertEquals(\"byte -> char\", false, ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));\n-        assertEquals(\"byte -> byte\", true, ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE));\n-        assertEquals(\"byte -> short\", true, ClassUtils.isAssignable(Byte.TYPE, Short.TYPE));\n-        assertEquals(\"byte -> int\", true, ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE));\n-        assertEquals(\"byte -> long\", true, ClassUtils.isAssignable(Byte.TYPE, Long.TYPE));\n-        assertEquals(\"byte -> float\", true, ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));\n-        assertEquals(\"byte -> double\", true, ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));\n-        assertEquals(\"byte -> boolean\", false, ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));\n+        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.TYPE, Character.TYPE));\n+        assertTrue(\"byte -> byte\", ClassUtils.isAssignable(Byte.TYPE, Byte.TYPE));\n+        assertTrue(\"byte -> short\", ClassUtils.isAssignable(Byte.TYPE, Short.TYPE));\n+        assertTrue(\"byte -> int\", ClassUtils.isAssignable(Byte.TYPE, Integer.TYPE));\n+        assertTrue(\"byte -> long\", ClassUtils.isAssignable(Byte.TYPE, Long.TYPE));\n+        assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.TYPE, Float.TYPE));\n+        assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.TYPE, Double.TYPE));\n+        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.TYPE, Boolean.TYPE));\n         \n         // test short conversions\n-        assertEquals(\"short -> char\", false, ClassUtils.isAssignable(Short.TYPE, Character.TYPE));\n-        assertEquals(\"short -> byte\", false, ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));\n-        assertEquals(\"short -> short\", true, ClassUtils.isAssignable(Short.TYPE, Short.TYPE));\n-        assertEquals(\"short -> int\", true, ClassUtils.isAssignable(Short.TYPE, Integer.TYPE));\n-        assertEquals(\"short -> long\", true, ClassUtils.isAssignable(Short.TYPE, Long.TYPE));\n-        assertEquals(\"short -> float\", true, ClassUtils.isAssignable(Short.TYPE, Float.TYPE));\n-        assertEquals(\"short -> double\", true, ClassUtils.isAssignable(Short.TYPE, Double.TYPE));\n-        assertEquals(\"short -> boolean\", false, ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));\n+        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.TYPE, Character.TYPE));\n+        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.TYPE, Byte.TYPE));\n+        assertTrue(\"short -> short\", ClassUtils.isAssignable(Short.TYPE, Short.TYPE));\n+        assertTrue(\"short -> int\", ClassUtils.isAssignable(Short.TYPE, Integer.TYPE));\n+        assertTrue(\"short -> long\", ClassUtils.isAssignable(Short.TYPE, Long.TYPE));\n+        assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.TYPE, Float.TYPE));\n+        assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.TYPE, Double.TYPE));\n+        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.TYPE, Boolean.TYPE));\n         \n         // test char conversions\n-        assertEquals(\"char -> char\", true, ClassUtils.isAssignable(Character.TYPE, Character.TYPE));\n-        assertEquals(\"char -> byte\", false, ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));\n-        assertEquals(\"char -> short\", false, ClassUtils.isAssignable(Character.TYPE, Short.TYPE));\n-        assertEquals(\"char -> int\", true, ClassUtils.isAssignable(Character.TYPE, Integer.TYPE));\n-        assertEquals(\"char -> long\", true, ClassUtils.isAssignable(Character.TYPE, Long.TYPE));\n-        assertEquals(\"char -> float\", true, ClassUtils.isAssignable(Character.TYPE, Float.TYPE));\n-        assertEquals(\"char -> double\", true, ClassUtils.isAssignable(Character.TYPE, Double.TYPE));\n-        assertEquals(\"char -> boolean\", false, ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));\n+        assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.TYPE, Character.TYPE));\n+        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.TYPE, Byte.TYPE));\n+        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.TYPE, Short.TYPE));\n+        assertTrue(\"char -> int\", ClassUtils.isAssignable(Character.TYPE, Integer.TYPE));\n+        assertTrue(\"char -> long\", ClassUtils.isAssignable(Character.TYPE, Long.TYPE));\n+        assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.TYPE, Float.TYPE));\n+        assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.TYPE, Double.TYPE));\n+        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.TYPE, Boolean.TYPE));\n         \n         // test int conversions\n-        assertEquals(\"int -> char\", false, ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));\n-        assertEquals(\"int -> byte\", false, ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));\n-        assertEquals(\"int -> short\", false, ClassUtils.isAssignable(Integer.TYPE, Short.TYPE));\n-        assertEquals(\"int -> int\", true, ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n-        assertEquals(\"int -> long\", true, ClassUtils.isAssignable(Integer.TYPE, Long.TYPE));\n-        assertEquals(\"int -> float\", true, ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));\n-        assertEquals(\"int -> double\", true, ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));\n-        assertEquals(\"int -> boolean\", false, ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));\n+        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.TYPE, Character.TYPE));\n+        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.TYPE, Byte.TYPE));\n+        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.TYPE, Short.TYPE));\n+        assertTrue(\"int -> int\", ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n+        assertTrue(\"int -> long\", ClassUtils.isAssignable(Integer.TYPE, Long.TYPE));\n+        assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.TYPE, Float.TYPE));\n+        assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.TYPE, Double.TYPE));\n+        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.TYPE, Boolean.TYPE));\n  \n         // test long conversions\n-        assertEquals(\"long -> char\", false, ClassUtils.isAssignable(Long.TYPE, Character.TYPE));\n-        assertEquals(\"long -> byte\", false, ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));\n-        assertEquals(\"long -> short\", false, ClassUtils.isAssignable(Long.TYPE, Short.TYPE));\n-        assertEquals(\"long -> int\", false, ClassUtils.isAssignable(Long.TYPE, Integer.TYPE));\n-        assertEquals(\"long -> long\", true, ClassUtils.isAssignable(Long.TYPE, Long.TYPE));\n-        assertEquals(\"long -> float\", true, ClassUtils.isAssignable(Long.TYPE, Float.TYPE));\n-        assertEquals(\"long -> double\", true, ClassUtils.isAssignable(Long.TYPE, Double.TYPE));\n-        assertEquals(\"long -> boolean\", false, ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));\n+        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.TYPE, Character.TYPE));\n+        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.TYPE, Byte.TYPE));\n+        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.TYPE, Short.TYPE));\n+        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.TYPE, Integer.TYPE));\n+        assertTrue(\"long -> long\", ClassUtils.isAssignable(Long.TYPE, Long.TYPE));\n+        assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.TYPE, Float.TYPE));\n+        assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.TYPE, Double.TYPE));\n+        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.TYPE, Boolean.TYPE));\n  \n         // test float conversions\n-        assertEquals(\"float -> char\", false, ClassUtils.isAssignable(Float.TYPE, Character.TYPE));\n-        assertEquals(\"float -> byte\", false, ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));\n-        assertEquals(\"float -> short\", false, ClassUtils.isAssignable(Float.TYPE, Short.TYPE));\n-        assertEquals(\"float -> int\", false, ClassUtils.isAssignable(Float.TYPE, Integer.TYPE));\n-        assertEquals(\"float -> long\", false, ClassUtils.isAssignable(Float.TYPE, Long.TYPE));\n-        assertEquals(\"float -> float\", true, ClassUtils.isAssignable(Float.TYPE, Float.TYPE));\n-        assertEquals(\"float -> double\", true, ClassUtils.isAssignable(Float.TYPE, Double.TYPE));\n-        assertEquals(\"float -> boolean\", false, ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));\n+        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.TYPE, Character.TYPE));\n+        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.TYPE, Byte.TYPE));\n+        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.TYPE, Short.TYPE));\n+        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.TYPE, Integer.TYPE));\n+        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.TYPE, Long.TYPE));\n+        assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.TYPE, Float.TYPE));\n+        assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.TYPE, Double.TYPE));\n+        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.TYPE, Boolean.TYPE));\n+        \n+        // test double conversions\n+        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.TYPE, Character.TYPE));\n+        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));\n+        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.TYPE, Short.TYPE));\n+        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.TYPE, Integer.TYPE));\n+        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.TYPE, Long.TYPE));\n+        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.TYPE, Float.TYPE));\n+        assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.TYPE, Double.TYPE));\n+        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));\n+        \n+        // test boolean conversions\n+        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));\n+        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));\n+        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE));\n+        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE));\n+        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE));\n+        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));\n+        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));\n+        assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n+    }\n+    \n+    public void test_isAssignable_Unboxing_Widening() throws Exception {\n+        // test byte conversions\n+        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE, true));\n+        assertTrue(\"byte -> byte\", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true));\n+        assertTrue(\"byte -> short\", ClassUtils.isAssignable(Byte.class, Short.TYPE, true));\n+        assertTrue(\"byte -> int\", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true));\n+        assertTrue(\"byte -> long\", ClassUtils.isAssignable(Byte.class, Long.TYPE, true));\n+        assertTrue(\"byte -> float\", ClassUtils.isAssignable(Byte.class, Float.TYPE, true));\n+        assertTrue(\"byte -> double\", ClassUtils.isAssignable(Byte.class, Double.TYPE, true));\n+        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true));\n+        \n+        // test short conversions\n+        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.class, Character.TYPE, true));\n+        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.class, Byte.TYPE, true));\n+        assertTrue(\"short -> short\", ClassUtils.isAssignable(Short.class, Short.TYPE, true));\n+        assertTrue(\"short -> int\", ClassUtils.isAssignable(Short.class, Integer.TYPE, true));\n+        assertTrue(\"short -> long\", ClassUtils.isAssignable(Short.class, Long.TYPE, true));\n+        assertTrue(\"short -> float\", ClassUtils.isAssignable(Short.class, Float.TYPE, true));\n+        assertTrue(\"short -> double\", ClassUtils.isAssignable(Short.class, Double.TYPE, true));\n+        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true));\n+        \n+        // test char conversions\n+        assertTrue(\"char -> char\", ClassUtils.isAssignable(Character.class, Character.TYPE, true));\n+        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.class, Byte.TYPE, true));\n+        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.class, Short.TYPE, true));\n+        assertTrue(\"char -> int\", ClassUtils.isAssignable(Character.class, Integer.TYPE, true));\n+        assertTrue(\"char -> long\", ClassUtils.isAssignable(Character.class, Long.TYPE, true));\n+        assertTrue(\"char -> float\", ClassUtils.isAssignable(Character.class, Float.TYPE, true));\n+        assertTrue(\"char -> double\", ClassUtils.isAssignable(Character.class, Double.TYPE, true));\n+        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true));\n+        \n+        // test int conversions\n+        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.class, Character.TYPE, true));\n+        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true));\n+        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.class, Short.TYPE, true));\n+        assertTrue(\"int -> int\", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\n+        assertTrue(\"int -> long\", ClassUtils.isAssignable(Integer.class, Long.TYPE, true));\n+        assertTrue(\"int -> float\", ClassUtils.isAssignable(Integer.class, Float.TYPE, true));\n+        assertTrue(\"int -> double\", ClassUtils.isAssignable(Integer.class, Double.TYPE, true));\n+        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true));\n+        \n+        // test long conversions\n+        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.class, Character.TYPE, true));\n+        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.class, Byte.TYPE, true));\n+        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.class, Short.TYPE, true));\n+        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.class, Integer.TYPE, true));\n+        assertTrue(\"long -> long\", ClassUtils.isAssignable(Long.class, Long.TYPE, true));\n+        assertTrue(\"long -> float\", ClassUtils.isAssignable(Long.class, Float.TYPE, true));\n+        assertTrue(\"long -> double\", ClassUtils.isAssignable(Long.class, Double.TYPE, true));\n+        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true));\n         \n         // test float conversions\n-        assertEquals(\"double -> char\", false, ClassUtils.isAssignable(Double.TYPE, Character.TYPE));\n-        assertEquals(\"double -> byte\", false, ClassUtils.isAssignable(Double.TYPE, Byte.TYPE));\n-        assertEquals(\"double -> short\", false, ClassUtils.isAssignable(Double.TYPE, Short.TYPE));\n-        assertEquals(\"double -> int\", false, ClassUtils.isAssignable(Double.TYPE, Integer.TYPE));\n-        assertEquals(\"double -> long\", false, ClassUtils.isAssignable(Double.TYPE, Long.TYPE));\n-        assertEquals(\"double -> float\", false, ClassUtils.isAssignable(Double.TYPE, Float.TYPE));\n-        assertEquals(\"double -> double\", true, ClassUtils.isAssignable(Double.TYPE, Double.TYPE));\n-        assertEquals(\"double -> boolean\", false, ClassUtils.isAssignable(Double.TYPE, Boolean.TYPE));\n-        \n-        // test float conversions\n-        assertEquals(\"boolean -> char\", false, ClassUtils.isAssignable(Boolean.TYPE, Character.TYPE));\n-        assertEquals(\"boolean -> byte\", false, ClassUtils.isAssignable(Boolean.TYPE, Byte.TYPE));\n-        assertEquals(\"boolean -> short\", false, ClassUtils.isAssignable(Boolean.TYPE, Short.TYPE));\n-        assertEquals(\"boolean -> int\", false, ClassUtils.isAssignable(Boolean.TYPE, Integer.TYPE));\n-        assertEquals(\"boolean -> long\", false, ClassUtils.isAssignable(Boolean.TYPE, Long.TYPE));\n-        assertEquals(\"boolean -> float\", false, ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));\n-        assertEquals(\"boolean -> double\", false, ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));\n-        assertEquals(\"boolean -> boolean\", true, ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n+        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.class, Character.TYPE, true));\n+        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.class, Byte.TYPE, true));\n+        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.class, Short.TYPE, true));\n+        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.class, Integer.TYPE, true));\n+        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.class, Long.TYPE, true));\n+        assertTrue(\"float -> float\", ClassUtils.isAssignable(Float.class, Float.TYPE, true));\n+        assertTrue(\"float -> double\", ClassUtils.isAssignable(Float.class, Double.TYPE, true));\n+        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true));\n+        \n+        // test double conversions\n+        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.class, Character.TYPE, true));\n+        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.class, Byte.TYPE, true));\n+        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.class, Short.TYPE, true));\n+        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.class, Integer.TYPE, true));\n+        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.class, Long.TYPE, true));\n+        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.class, Float.TYPE, true));\n+        assertTrue(\"double -> double\", ClassUtils.isAssignable(Double.class, Double.TYPE, true));\n+        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true));\n+        \n+        // test boolean conversions\n+        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true));\n+        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true));\n+        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true));\n+        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true));\n+        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true));\n+        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true));\n+        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true));\n+        assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n     }\n     \n     public void testPrimitiveToWrapper() {", "timestamp": 1210105568, "metainfo": ""}