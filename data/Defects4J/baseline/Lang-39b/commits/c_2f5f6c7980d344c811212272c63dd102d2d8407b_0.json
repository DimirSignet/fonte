{"sha": "2f5f6c7980d344c811212272c63dd102d2d8407b", "log": "Add reverse to ArrayUtils   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:scolebourne@apache.org\">Stephen Colebourne</a>\n  * @author Moritz Petersen\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n- * @version $Id: ArrayUtils.java,v 1.5 2002/11/16 12:56:43 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.6 2002/11/24 16:50:38 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n         return array1.getClass().getName().equals(array2.getClass().getName());\n     }\n     \n+    /** \n+     * Reverses the order of the given array.\n+     * <p>\n+     * There is no special handling for multi-dimensional arrays.\n+     * <p>\n+     * The method does nothing if <code>null</code> is passed in.\n+     * \n+     * @param array  the array to reverse\n+     */\n+    public static void reverse(Object[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        Object tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * Reverses the order of the given array.\n+     * <p>\n+     * The method does nothing if <code>null</code> is passed in.\n+     * \n+     * @param array  the array to reverse\n+     */\n+    public static void reverse(long[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        long tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * Reverses the order of the given array.\n+     * <p>\n+     * The method does nothing if <code>null</code> is passed in.\n+     * \n+     * @param array  the array to reverse\n+     */\n+    public static void reverse(int[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        int tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * Reverses the order of the given array.\n+     * <p>\n+     * There is no special handling for multi-dimensional arrays.\n+     * \n+     * @param array  the array to reverse\n+     */\n+    public static void reverse(short[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        short tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * Reverses the order of the given array.\n+     * <p>\n+     * The method does nothing if <code>null</code> is passed in.\n+     * \n+     * @param array  the array to reverse\n+     */\n+    public static void reverse(char[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        char tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * Reverses the order of the given array.\n+     * <p>\n+     * The method does nothing if <code>null</code> is passed in.\n+     * \n+     * @param array  the array to reverse\n+     */\n+    public static void reverse(byte[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        byte tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * Reverses the order of the given array.\n+     * <p>\n+     * The method does nothing if <code>null</code> is passed in.\n+     * \n+     * @param array  the array to reverse\n+     */\n+    public static void reverse(double[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        double tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * Reverses the order of the given array.\n+     * <p>\n+     * The method does nothing if <code>null</code> is passed in.\n+     * \n+     * @param array  the array to reverse\n+     */\n+    public static void reverse(float[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        float tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n+    /**\n+     * Reverses the order of the given array.\n+     * <p>\n+     * The method does nothing if <code>null</code> is passed in.\n+     * \n+     * @param array  the array to reverse\n+     */\n+    public static void reverse(boolean[] array) {\n+        if (array == null) {\n+            return;\n+        }\n+        int i = 0;\n+        int j = array.length - 1;\n+        boolean tmp;\n+        while (j > i) {\n+            tmp = array[j];\n+            array[j] = array[i];\n+            array[i] = tmp;\n+            j--;\n+            i++;\n+        }\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author Moritz Petersen\n- * @version $Id: ArrayUtilsTest.java,v 1.2 2002/11/16 12:56:44 scolebourne Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.3 2002/11/24 16:50:38 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         assertEquals(false, ArrayUtils.isSameType(new String[0][0], new String[0]));\n     }\n     \n+    //-----------------------------------------------------------------------\n+    public void testReverse() {\n+        StringBuffer str1 = new StringBuffer(\"pick\");\n+        String str2 = \"a\";\n+        String[] str3 = new String[] {\"stick\"};\n+        String str4 = \"up\";\n+        \n+        Object[] array = new Object[] {str1, str2, str3};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], str3);\n+        assertEquals(array[1], str2);\n+        assertEquals(array[2], str1);\n+        \n+        array = new Object[] {str1, str2, str3, str4};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], str4);\n+        assertEquals(array[1], str3);\n+        assertEquals(array[2], str2);\n+        assertEquals(array[3], str1);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+\n+    public void testReverseLong() {\n+        long[] array = new long[] {1L, 2L, 3L};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 3L);\n+        assertEquals(array[1], 2L);\n+        assertEquals(array[2], 1L);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseInt() {\n+        int[] array = new int[] {1, 2, 3};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 3);\n+        assertEquals(array[1], 2);\n+        assertEquals(array[2], 1);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseShort() {\n+        short[] array = new short[] {1, 2, 3};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 3);\n+        assertEquals(array[1], 2);\n+        assertEquals(array[2], 1);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseChar() {\n+        char[] array = new char[] {'a', 'f', 'C'};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 'C');\n+        assertEquals(array[1], 'f');\n+        assertEquals(array[2], 'a');\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseByte() {\n+        byte[] array = new byte[] {2, 3, 4};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 4);\n+        assertEquals(array[1], 3);\n+        assertEquals(array[2], 2);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseDouble() {\n+        double[] array = new double[] {0.3d, 0.4d, 0.5d};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 0.5d, 0.0d);\n+        assertEquals(array[1], 0.4d, 0.0d);\n+        assertEquals(array[2], 0.3d, 0.0d);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseFloat() {\n+        float[] array = new float[] {0.3f, 0.4f, 0.5f};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], 0.5f, 0.0f);\n+        assertEquals(array[1], 0.4f, 0.0f);\n+        assertEquals(array[2], 0.3f, 0.0f);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n+    public void testReverseBoolean() {\n+        boolean[] array = new boolean[] {false, false, true};\n+        ArrayUtils.reverse(array);\n+        assertEquals(array[0], true);\n+        assertEquals(array[1], false);\n+        assertEquals(array[2], false);\n+\n+        array = null;\n+        ArrayUtils.reverse(array);\n+        assertEquals(null, array);\n+    }\n+    \n }", "timestamp": 1038156638, "metainfo": ""}