{"sha": "96507962170a3ca71eaf15a83a9982fb12df414d", "log": "- VariableFormatter.java now gets 98.7% clover coverage. - MapVariableFormatter.java now gets 100% clover coverage. - Javadocs. - Constructor clean ups.  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/VariableFormatter.java\n+++ b/src/java/org/apache/commons/lang/text/VariableFormatter.java\n     /** Stores the variable prefix. */\n     private String variablePrefix;\n \n+    /**\n+     * Variable resolution is delegated to an implementor of VariableResolver.\n+     */\n     private VariableResolver variableResolver;\n \n     /** Stores the variable suffix. */\n     private String variableSuffix;\n \n     /**\n-     * Creates a new instance of <code>VariableFormat</code> and initializes it. Uses defaults for variable prefix and\n-     * suffix and the escaping character.\n+     * Creates a new instance and initializes it. Uses defaults for variable prefix and suffix and the escaping\n+     * character.\n      * \n      * @param valueMap\n      *            the map with the variables' values\n-     * @throws IllegalArgumentException\n-     *             if the map is undefined\n      */\n     public VariableFormatter(Map valueMap) {\n         this(valueMap, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);\n     }\n \n     /**\n-     * Creates a new instance of <code>VariableFormat</code> and initializes it. Uses a default escaping character.\n+     * Creates a new instance with defaults for variable prefix and suffix and the escaping character.\n+     */\n+    public VariableFormatter() {\n+        this((VariableResolver) null, DEFAULT_PREFIX, DEFAULT_SUFFIX, DEFAULT_ESCAPE);\n+    }\n+\n+    /**\n+     * Creates a new instance and initializes it. Uses a default escaping character.\n      * \n      * @param valueMap\n      *            the map with the variables' values\n      *            the prefix for variables\n      * @param suffix\n      *            the suffix for variables\n-     * @throws IllegalArgumentException\n-     *             if the map is undefined\n      */\n     public VariableFormatter(Map valueMap, String prefix, String suffix) {\n         this(valueMap, prefix, suffix, DEFAULT_ESCAPE);\n     }\n \n     /**\n-     * Creates a new instance of <code>VariableFormat</code> and initializes it.\n+     * Creates a new instance and initializes it.\n      * \n      * @param valueMap\n      *            the map with the variables' values\n      *            the suffix for variables\n      * @param escape\n      *            the escape character\n-     * @throws IllegalArgumentException\n-     *             if the map is undefined\n      */\n     public VariableFormatter(Map valueMap, String prefix, String suffix, char escape) {\n-        this.setVariableResolver(new MapVariableResolver(valueMap));\n+        this(new MapVariableResolver(valueMap), prefix, suffix, escape);\n+    }\n+\n+    /**\n+     * Creates a new instance and initializes it.\n+     * \n+     * @param variableResolver\n+     *            the variable resolver\n+     * @param prefix\n+     *            the prefix for variables\n+     * @param suffix\n+     *            the suffix for variables\n+     * @param escape\n+     *            the escape character\n+     */\n+    public VariableFormatter(VariableResolver variableResolver, String prefix, String suffix, char escape) {\n+        this.setVariableResolver(variableResolver);\n         this.setVariablePrefix(prefix);\n         this.setVariableSuffix(suffix);\n         this.setEscapeCharacter(escape);\n         return this.variablePrefix;\n     }\n \n+    /**\n+     * Gets the VariableResolver\n+     * \n+     * @return the VariableResolver\n+     */\n     public VariableResolver getVariableResolver() {\n         return this.variableResolver;\n     }\n         this.variablePrefix = variablePrefix;\n     }\n \n+    /**\n+     * Sets the VariableResolver\n+     * \n+     * @param variableResolver\n+     *            the VariableResolver\n+     */\n     public void setVariableResolver(VariableResolver variableResolver) {\n         this.variableResolver = variableResolver;\n     }\n--- a/src/test/org/apache/commons/lang/text/VariableFormatterTest.java\n+++ b/src/test/org/apache/commons/lang/text/VariableFormatterTest.java\n     }\n \n     MapVariableResolver getMapVariableResolver() {\n-        return (MapVariableResolver)this.getFormat().getVariableResolver();\n+        return (MapVariableResolver) this.getFormat().getVariableResolver();\n     }\n \n     private Map getValueMap() {\n         assertEquals(\">>\", this.getFormat().getVariableSuffix());\n         assertEquals('\\\\', this.getFormat().getEscapeCharacter());\n \n-// new VariableFormatter(null) should be OK IMO\n-// Gary Gregory - July 14 2005        \n-//        try {\n-//            format = new VariableFormatter(null);\n-//            fail(\"Could create format object with null map!\");\n-//        } catch (IllegalArgumentException iex) {\n-//            // ok\n-//        }\n+        // new VariableFormatter(null) should be OK IMO\n+        // Gary Gregory - July 14 2005\n+        // try {\n+        // format = new VariableFormatter(null);\n+        // fail(\"Could create format object with null map!\");\n+        // } catch (IllegalArgumentException iex) {\n+        // // ok\n+        // }\n \n         try {\n             format = new VariableFormatter(values, \"${\", null);\n      * Tests invoking the static convenience methods.\n      */\n     public void testNonInstanceMethods() {\n-        assertEquals(\"The quick brown fox jumps over the lazy dog.\", VariableFormatter.replace(values, REPLACE_TEMPLATE));\n+        assertEquals(\"The quick brown fox jumps over the lazy dog.\", VariableFormatter\n+                .replace(values, REPLACE_TEMPLATE));\n         values.put(\"animal\", \"cow\");\n         values.put(\"target\", \"moon\");\n         assertEquals(\"The cow jumps over the moon.\", VariableFormatter.replace(values, \"&\", \";\",\n                 \"The &animal; jumps over the &target;.\"));\n+    }\n+\n+    public void testNoResolver() throws Exception {\n+        this.testNoResolver(new VariableFormatter());\n+        this.testNoResolver(new VariableFormatter(null));\n+    }\n+\n+    void testNoResolver(VariableFormatter formatter) throws Exception {\n+        formatter.setVariableResolver(null);\n+        this.validateNoReplace(formatter);\n+    }\n+\n+    public void testNullMap() throws Exception {\n+        VariableFormatter formatter = new VariableFormatter(null);\n+        validateNoReplace(formatter);\n     }\n \n     /**\n             + \"working with ${os.name}, your home \"\n             + \"directory is ${user.home}.\"));\n     }\n+\n+    void validateNoReplace(VariableFormatter formatter) {\n+        String srcString = \"Hello ${user.name}\";\n+        String destString = formatter.replace(srcString);\n+        assertEquals(srcString, destString);\n+    }\n }", "timestamp": 1121379857, "metainfo": ""}