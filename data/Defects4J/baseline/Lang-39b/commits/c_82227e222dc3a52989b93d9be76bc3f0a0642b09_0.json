{"sha": "82227e222dc3a52989b93d9be76bc3f0a0642b09", "log": "Fix internal raw types  ", "commit": "\n--- a/src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<Integer>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n-        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n-        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=[]\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n-        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n-        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=[]\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<size=0>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n     }\n--- a/src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n         assertEquals(baseStr + \"[3,4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n         assertEquals(baseStr + \"[<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n-        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n-        assertEquals(baseStr + \"[[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n-        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n-        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n         assertEquals(baseStr + \"[<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n         assertEquals(baseStr + \"[{}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n     }\n--- a/src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java\n     }\n \n     public void test_toStringExcludeCollection() {\n-        List excludeList = new ArrayList();\n+        List<String> excludeList = new ArrayList<String>();\n         excludeList.add(SECRET_FIELD);\n         String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n         this.validateSecretFieldAbsent(toString);\n     }\n \n     public void test_toStringExcludeCollectionWithNull() {\n-        List excludeList = new ArrayList();\n+        List<String> excludeList = new ArrayList<String>();\n         excludeList.add(null);\n         String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n         this.validateSecretFieldPresent(toString);\n     }\n \n     public void test_toStringExcludeCollectionWithNulls() {\n-        List excludeList = new ArrayList();\n+        List<String> excludeList = new ArrayList<String>();\n         excludeList.add(null);\n         excludeList.add(null);\n         String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n     }\n \n     public void test_toStringExcludeEmptyCollection() {\n-        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new ArrayList());\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new ArrayList<String>());\n         this.validateSecretFieldPresent(toString);\n     }\n \n     }\n \n     public void test_toStringExcludeNullCollection() {\n-        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (Collection) null);\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (Collection<String>) null);\n         this.validateSecretFieldPresent(toString);\n     }\n \n--- a/src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java\n         assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n         assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n         assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n-        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n-        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n-        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n-        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n         assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n         assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n     }\n--- a/src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java\n         assertEquals(\"3\", new ToStringBuilder(base).append(\"a\", i3).toString());\n         assertEquals(\"3,4\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n         assertEquals(\"<Integer>\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n-        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n-        assertEquals(\"[]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n-        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n-        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(\"[]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n         assertEquals(\"<size=0>\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n         assertEquals(\"{}\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n     }\n--- a/src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java\n         assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n         assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n         assertEquals(baseStr + \"[a=%Integer%]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n-        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n-        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n-        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n-        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n         assertEquals(baseStr + \"[a=%SIZE=0%]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n         assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n     }\n--- a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n     // Reflection hierarchy tests\n \n     public void testReflectionHierarchyArrayList() {\n-        List base = new ArrayList();\n+        List<Object> base = new ArrayList<Object>();\n         String baseStr = this.toBaseString(base);\n         assertEquals(baseStr + \"[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]\", ToStringBuilder.reflectionToString(base, null, true));\n         assertEquals(baseStr + \"[size=0]\", ToStringBuilder.reflectionToString(base, null, false));\n         assertEquals(baseStr + \"[a=3]\", new ToStringBuilder(base).append(\"a\", i3).toString());\n         assertEquals(baseStr + \"[a=3,b=4]\", new ToStringBuilder(base).append(\"a\", i3).append(\"b\", i4).toString());\n         assertEquals(baseStr + \"[a=<Integer>]\", new ToStringBuilder(base).append(\"a\", i3, false).toString());\n-        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), false).toString());\n-        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList(), true).toString());\n-        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap(), false).toString());\n-        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), false).toString());\n+        assertEquals(baseStr + \"[a=[]]\", new ToStringBuilder(base).append(\"a\", new ArrayList<Object>(), true).toString());\n+        assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), false).toString());\n+        assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", new HashMap<Object, Object>(), true).toString());\n         assertEquals(baseStr + \"[a=<size=0>]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], false).toString());\n         assertEquals(baseStr + \"[a={}]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n     }", "timestamp": 1256471155, "metainfo": ""}