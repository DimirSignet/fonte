{"sha": "a5854d8a7051debef6be15105dd0918d4bd55361", "log": "Improving performance of getAllInterfaces per LANG-500's patch from Pino Silvaggio  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n \n         if (cls == null) {\n             return null;\n         }\n-        List<Class<?>> list = new ArrayList<Class<?>>();\n+\n+        LinkedHashSet<Class<?>> interfacesFound = new LinkedHashSet<Class<?>>();\n+        getAllInterfaces(cls, interfacesFound);\n+\n+        return new ArrayList<Class<?>>(interfacesFound);\n+    }\n+\n+    private static void getAllInterfaces(Class<?> cls, HashSet<Class<?>> interfacesFound) {\n         while (cls != null) {\n             Class<?>[] interfaces = cls.getInterfaces();\n-            for (Class<?> intface : interfaces) {\n-                if (list.contains(intface) == false) {\n-                    list.add(intface);\n+\n+            for (Class<?> i : interfaces) {\n+                if (interfacesFound.add(i)) {\n+                    getAllInterfaces(i, interfacesFound);\n                 }\n-                List<Class<?>> superInterfaces = getAllInterfaces(intface);\n-                for (Class<?> superInterface : superInterfaces) {\n-                    if (list.contains(superInterface) == false) {\n-                        list.add(superInterface);\n-                    }\n-                }\n-            }\n+            }\n+\n             cls = cls.getSuperclass();\n-        }\n-        return list;\n-    }\n+         }\n+     }\n \n     // Convert list\n     // ----------------------------------------------------------------------", "timestamp": 1249785896, "metainfo": ""}