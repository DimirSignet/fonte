{"sha": "00bcd4cc7c8724a6456b06d4a3a83ee36921be92", "log": "Removing the Lang NestableException concept and instead relying on the JDK support. [LANG-492]. [LANG-491] notes the need to rethink ExceptionUtils and its test.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/NotImplementedException.java\n+++ b/src/java/org/apache/commons/lang/NotImplementedException.java\n import java.io.PrintStream;\n import java.io.PrintWriter;\n \n-import org.apache.commons.lang.exception.Nestable;\n-import org.apache.commons.lang.exception.NestableDelegate;\n-\n /**\n  * <p>Thrown to indicate that a block of code has not been implemented.\n  * This exception supplements <code>UnsupportedOperationException</code>\n  * \n  * <p><code>NotImplementedException</code> represents the case where the\n  * author has yet to implement the logic at this point in the program.\n- * This can act as an exception based TODO tag.\n- * Because this logic might be within a catch block, this exception\n- * suports exception chaining.</p>\n+ * This can act as an exception based TODO tag. </p>\n  * \n  * <pre>\n  * public void foo() {\n  * @since 2.0\n  * @version $Id$\n  */\n-public class NotImplementedException\n-        extends UnsupportedOperationException implements Nestable {\n+public class NotImplementedException extends UnsupportedOperationException {\n \n     private static final String DEFAULT_MESSAGE = \"Code is not implemented\";\n \n      * @see java.io.Serializable\n      */\n     private static final long serialVersionUID = -6894122266938754088L;\n-\n-    /**\n-     * The exception helper to delegate nested exception handling to.\n-     */\n-    private NestableDelegate delegate = new NestableDelegate(this);\n-\n-    /**\n-     * Holds the reference to the exception or error that caused\n-     * this exception to be thrown.\n-     */\n-    private Throwable cause;\n \n     //-----------------------------------------------------------------------\n     /**\n      * @since 2.1\n      */\n     public NotImplementedException(Throwable cause) {\n-        super(DEFAULT_MESSAGE);\n-        this.cause = cause;\n+        super(DEFAULT_MESSAGE, cause);\n     }\n \n     /**\n      * @since 2.1\n      */\n     public NotImplementedException(String msg, Throwable cause) {\n-        super(msg == null ? DEFAULT_MESSAGE : msg);\n-        this.cause = cause;\n+        super(msg == null ? DEFAULT_MESSAGE : msg, cause);\n     }\n \n     /**\n         super(clazz == null ? DEFAULT_MESSAGE : DEFAULT_MESSAGE + \" in \" + clazz);\n     }\n \n-    // -----------------------------------------------------------------------\n-    /**\n-     * Gets the root cause of this exception.\n-     * @return the root cause of this exception.\n-     * \n-     * @since 2.1\n-     */\n-    @Override\n-    public Throwable getCause() {\n-        return cause;\n-    }\n-\n-    /**\n-     * Gets the combined the error message of this and any nested errors.\n-     *\n-     * @return the error message\n-     * @since 2.1\n-     */\n-    @Override\n-    public String getMessage() {\n-        if (super.getMessage() != null) {\n-            return super.getMessage();\n-        } else if (cause != null) {\n-            return cause.toString();\n-        } else {\n-            return null;\n-        }\n-    }\n-\n-    /**\n-     * Returns the error message of the <code>Throwable</code> in the chain\n-     * of <code>Throwable</code>s at the specified index, numbered from 0.\n-     *\n-     * @param index  the index of the <code>Throwable</code> in the chain\n-     * @return the error message, or null if the <code>Throwable</code> at the\n-     *  specified index in the chain does not contain a message\n-     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n-     *  negative or not less than the count of <code>Throwable</code>s in the chain\n-     * @since 2.1\n-     */\n-    public String getMessage(int index) {\n-        if (index == 0) {\n-            return super.getMessage();\n-        }\n-        return delegate.getMessage(index);\n-    }\n-\n-    /**\n-     * Returns the error message of this and any nested <code>Throwable</code> objects.\n-     * Each throwable returns a message, a null string is included in the array if\n-     * there is no message for a particular <code>Throwable</code>.\n-     *\n-     * @return the error messages\n-     * @since 2.1\n-     */\n-    public String[] getMessages() {\n-        return delegate.getMessages();\n-    }\n-\n-    /**\n-     * Returns the <code>Throwable</code> in the chain by index.\n-     *\n-     * @param index  the index to retrieve\n-     * @return the <code>Throwable</code>\n-     * @throws IndexOutOfBoundsException if the <code>index</code> argument is\n-     *  negative or not less than the count of <code>Throwable</code>s in the chain\n-     * @since 2.1\n-     */\n-    public Throwable getThrowable(int index) {\n-        return delegate.getThrowable(index);\n-    }\n-\n-    /**\n-     * Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n-     *\n-     * @return the throwable count\n-     * @since 2.1\n-     */\n-    public int getThrowableCount() {\n-        return delegate.getThrowableCount();\n-    }\n-\n-    /**\n-     * Returns this <code>Nestable</code> and any nested <code>Throwable</code>s\n-     * in an array of <code>Throwable</code>s, one element for each\n-     * <code>Throwable</code>.\n-     *\n-     * @return the <code>Throwable</code>s\n-     * @since 2.1\n-     */\n-    public Throwable[] getThrowables() {\n-        return delegate.getThrowables();\n-    }\n-\n-    /**\n-     * Returns the index of the first occurrence of the specified type.\n-     * If there is no match, <code>-1</code> is returned.\n-     *\n-     * @param type  the type to search for\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     *  the type is not found\n-     * @since 2.1\n-     */\n-    public int indexOfThrowable(Class type) {\n-        return delegate.indexOfThrowable(type, 0);\n-    }\n-\n-    /**\n-     * Returns the index of the first occurrence of the specified type starting\n-     * from the specified index. If there is no match, <code>-1</code> is returned.\n-     *\n-     * @param type  the type to search for\n-     * @param fromIndex  the index of the starting position in the chain to be searched\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     *  the type is not found\n-     * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument\n-     *  is negative or not less than the count of <code>Throwable</code>s in the chain\n-     * @since 2.1\n-     */\n-    public int indexOfThrowable(Class type, int fromIndex) {\n-        return delegate.indexOfThrowable(type, fromIndex);\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception.\n-     * Includes information from the exception, if any, which caused this exception.\n-     * \n-     * @since 2.1\n-     */\n-    @Override\n-    public void printStackTrace() {\n-        delegate.printStackTrace();\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception to the specified stream.\n-     * Includes information from the exception, if any, which caused this exception.\n-     *\n-     * @param out  the stream to write to\n-     * @since 2.1\n-     */\n-    @Override\n-    public void printStackTrace(PrintStream out) {\n-        delegate.printStackTrace(out);\n-    }\n-\n-    /**\n-     * Prints the stack trace of this exception to the specified writer.\n-     * Includes information from the exception, if any, which caused this exception.\n-     *\n-     * @param out  the writer to write to\n-     * @since 2.1\n-     */\n-    @Override\n-    public void printStackTrace(PrintWriter out) {\n-        delegate.printStackTrace(out);\n-    }\n-\n-    /**\n-     * Prints the stack trace for this exception only (root cause not included)\n-     * using the specified writer.\n-     * \n-     * @param out  the writer to write to\n-     * @since 2.1\n-     */\n-    public final void printPartialStackTrace(PrintWriter out) {\n-        super.printStackTrace(out);\n-    }\n-\n }\n--- a/src/java/org/apache/commons/lang/SerializationException.java\n+++ b/src/java/org/apache/commons/lang/SerializationException.java\n  */\n package org.apache.commons.lang;\n \n-import org.apache.commons.lang.exception.NestableRuntimeException;\n-\n /**\n  * <p>Exception thrown when the Serialization process fails.</p>\n  *\n  * @since 1.0\n  * @version $Id$\n  */\n-public class SerializationException extends NestableRuntimeException {\n+public class SerializationException extends RuntimeException {\n \n     /**\n      * Required for serialization support.\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n import java.io.StringWriter;\n import java.io.Writer;\n import java.util.Locale;\n-\n-import org.apache.commons.lang.exception.NestableRuntimeException;\n \n /**\n  * <p>Escapes and unescapes <code>String</code>s for\n                         inUnicode = false;\n                         hadSlash = false;\n                     } catch (NumberFormatException nfe) {\n-                        throw new NestableRuntimeException(\"Unable to parse unicode value: \" + unicode, nfe);\n+                        throw new UnhandledException(\"Unable to parse unicode value: \" + unicode, nfe);\n                     }\n                 }\n                 continue;\n--- a/src/java/org/apache/commons/lang/UnhandledException.java\n+++ b/src/java/org/apache/commons/lang/UnhandledException.java\n  * limitations under the License.\n  */\n package org.apache.commons.lang;\n-\n-import org.apache.commons.lang.exception.NestableRuntimeException;\n \n /**\n  * <p>Thrown when it is impossible or undesirable to consume or throw a checked exception.</p>\n  * @since 2.0\n  * @version $Id$\n  */\n-public class UnhandledException extends NestableRuntimeException {\n+public class UnhandledException extends RuntimeException {\n \n     /**\n      * Required for serialization support.\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n      *\n      * <p>The method searches for methods with specific names that return a \n      * <code>Throwable</code> object. This will pick up most wrapping exceptions,\n-     * including those from JDK 1.4, and\n-     * {@link org.apache.commons.lang.exception.NestableException NestableException}.\n+     * including those from JDK 1.4.\n      * The method names can be added to using {@link #addCauseMethodName(String)}.</p>\n      *\n      * <p>The default list searched for are:</p>\n      * @return the wrapped exception, or <code>null</code> if not found\n      */\n     private static Throwable getCauseUsingWellKnownTypes(Throwable throwable) {\n-        if (throwable instanceof Nestable) {\n-            return ((Nestable) throwable).getCause();\n-        } else if (throwable instanceof SQLException) {\n+        if (throwable instanceof SQLException) {\n             return ((SQLException) throwable).getNextException();\n         } else if (throwable instanceof InvocationTargetException) {\n             return ((InvocationTargetException) throwable).getTargetException();\n             return false;\n         }\n \n-        if (throwable instanceof Nestable) {\n-            return true;\n-        } else if (throwable instanceof SQLException) {\n+        if (throwable instanceof SQLException) {\n             return true;\n         } else if (throwable instanceof InvocationTargetException) {\n             return true;\n      * <p>Returns an array where each element is a line from the argument.</p>\n      *\n      * <p>The end of line is determined by the value of {@link SystemUtils#LINE_SEPARATOR}.</p>\n-     *\n-     * <p>Functionality shared between the\n-     * <code>getStackFrames(Throwable)</code> methods of this and the\n-     * {@link org.apache.commons.lang.exception.NestableDelegate} classes.</p>\n      *\n      * @param stackTrace  a stack trace String\n      * @return an array where each element is a line from the argument\n--- a/src/test/org/apache/commons/lang/NotImplementedExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/NotImplementedExceptionTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n-\n-import org.apache.commons.lang.exception.NestableException;\n \n /**\n  * JUnit tests.\n         assertEquals(\"Code is not implemented in class java.lang.String\", ex.getMessage());\n     }\n \n-    public void testGetMessage_Indexed() throws Exception {\n-        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n-            Exception ex1 = new Exception(\"nested 2\");\n-            Constructor con = Exception.class.getConstructor(new Class[] {String.class, Throwable.class});\n-            Exception ex2 = (Exception) con.newInstance(new Object[] {\"nested 1\", ex1});\n-            NotImplementedException ex = new NotImplementedException(ex2);\n-            assertEquals(\"Code is not implemented\", ex.getMessage());\n-            assertEquals(\"Code is not implemented\", ex.getMessage(0));\n-            assertEquals(\"nested 1\", ex.getMessage(1));\n-            assertEquals(\"nested 2\", ex.getMessage(2));\n-            \n-            String[] messages = ex.getMessages();\n-            assertEquals(3, messages.length);\n-            assertEquals(\"Code is not implemented\", messages[0]);\n-            assertEquals(\"nested 1\", messages[1]);\n-            assertEquals(\"nested 2\", messages[2]);\n-        }\n-    }\n-    \n-    public void testGetThrowable() {\n-        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n-        \n-        assertEquals(3, ex.getThrowableCount());\n-        \n-        assertEquals(NotImplementedException.class, ex.getThrowable(0).getClass());\n-        assertEquals(\"Code is not implemented\", ex.getThrowable(0).getMessage());\n-        assertEquals(NestableException.class, ex.getThrowable(1).getClass());\n-        assertEquals(\"nested 1\", ex.getThrowable(1).getMessage());\n-        assertEquals(NestableException.class, ex.getThrowable(2).getClass());\n-        assertEquals(\"nested 2\", ex.getThrowable(2).getMessage());\n-        \n-        assertEquals(3, ex.getThrowables().length);\n-        assertEquals(NotImplementedException.class, ex.getThrowables()[0].getClass());\n-        assertEquals(\"Code is not implemented\", ex.getThrowables()[0].getMessage());\n-        assertEquals(NestableException.class, ex.getThrowables()[1].getClass());\n-        assertEquals(\"nested 1\", ex.getThrowables()[1].getMessage());\n-        assertEquals(NestableException.class, ex.getThrowables()[2].getClass());\n-        assertEquals(\"nested 2\", ex.getThrowables()[2].getMessage());\n-    }\n-    \n-    public void testIndexOfThrowable() {\n-        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n-        assertEquals(0, ex.indexOfThrowable(NotImplementedException.class));\n-        assertEquals(1, ex.indexOfThrowable(NestableException.class));\n-    }\n-    \n-    public void testIndexOfThrowable_Index() {\n-        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n-        assertEquals(1, ex.indexOfThrowable(NestableException.class, 1));\n-    }\n-    \n     public void testPrintStackTrace() {\n-        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n+        NotImplementedException ex = new NotImplementedException(new Exception(\"nested 1\", new RuntimeException(\"nested 2\")));\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         PrintStream ps = new PrintStream(baos);\n         PrintStream errStream = System.err;\n     }\n     \n     public void testPrintStackTrace_Stream() {\n-        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n+        NotImplementedException ex = new NotImplementedException(new Exception(\"nested 1\", new RuntimeException(\"nested 2\")));\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         PrintStream ps = new PrintStream(baos);\n         ex.printStackTrace(ps);\n     }\n     \n     public void testPrintStackTrace_Writer() {\n-        NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n+        NotImplementedException ex = new NotImplementedException(new Exception(\"nested 1\", new RuntimeException(\"nested 2\")));\n         StringWriter stringWriter = new StringWriter();\n         PrintWriter writer = new PrintWriter(stringWriter);\n         ex.printStackTrace(writer);\n         assertTrue(stringWriter.toString().length() > 0);\n     }\n     \n-    public void testPrintPartialStackTrace_Writer() {\n-      NotImplementedException ex = new NotImplementedException(new NestableException(\"nested 1\", new NestableException(\"nested 2\")));\n-      StringWriter stringWriter = new StringWriter();\n-      PrintWriter writer = new PrintWriter(stringWriter);\n-      ex.printPartialStackTrace(writer);\n-      assertTrue(stringWriter.toString().length() > 0);\n-  }\n }\n--- a/src/test/org/apache/commons/lang/UnhandledExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/UnhandledExceptionTest.java\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n-\n-import org.apache.commons.lang.exception.Nestable;\n \n /**\n  * JUnit tests.\n \n     public void testGetCause() {\n         final Throwable t = new NullPointerException();\n-        final Nestable n = new UnhandledException(t);\n+        final Throwable n = new UnhandledException(t);\n         assertEquals(t, n.getCause());\n     }\n \n     public void testGetCauseAndGetMessage() {\n         final Throwable t = new NullPointerException();\n         final String msg = \"nullArg\";\n-        final Nestable n = new UnhandledException(msg, t);\n+        final Throwable n = new UnhandledException(msg, t);\n         assertEquals(t, n.getCause());\n         assertEquals(msg, n.getMessage());\n     }\n--- a/src/test/org/apache/commons/lang/exception/ExceptionTestSuite.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionTestSuite.java\n     public static Test suite()\n     {\n         TestSuite suite = new TestSuite();\n-        suite.addTest(NestableDelegateTest.suite());\n-        suite.addTest(NestableErrorTest.suite());\n-        suite.addTest(NestableExceptionTest.suite());\n-        suite.addTest(NestableRuntimeExceptionTest.suite());\n         suite.addTest(ExceptionUtilsTest.suite());\n         return suite;\n     }\n--- a/src/test/org/apache/commons/lang/exception/ExceptionUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTest.java\n         assertSame(null, ExceptionUtils.getCause(null, null));\n         assertSame(null, ExceptionUtils.getCause(null, new String[0]));\n \n-        // match because known type        \n-        assertSame(withoutCause, ExceptionUtils.getCause(nested, null));\n-        assertSame(withoutCause, ExceptionUtils.getCause(nested, new String[0]));\n-        assertSame(withoutCause, ExceptionUtils.getCause(nested, new String[] {\"getCause\"}));\n-        \n         // not known type, so match on supplied method names\n         assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names\n         assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));\n         }\n     }\n \n+    // Temporary classes to allow the nested exception code to be removed \n+    // prior to a rewrite of this test class. \n+    private static class NestableRuntimeException extends RuntimeException { \n+        public NestableRuntimeException() { super(); }\n+        public NestableRuntimeException(Throwable t) { super(t); }\n+    }\n+    private static class NestableException extends Exception { \n+        public NestableException() { super(); }\n+        public NestableException(Throwable t) { super(t); }\n+    }\n+\n }", "timestamp": 1237083044, "metainfo": ""}