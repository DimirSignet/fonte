{"sha": "fe6ec51f06b15fd66c52ed214ca891757df3bf62", "log": "Replacing the NonAsciiAsNumericEntity class with a more generic NumericEntityEscaper. cf LANG-505  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/translate/EscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/text/translate/EscapeUtils.java\n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_ESCAPE),\n             new LookupTranslator(EntityArrays.APOS_ESCAPE),\n-            new EscapeNonAsciiAsNumericEntity()\n+            NumericEntityEscaper.above(0x7f)\n         );\n \n     public static final String escapeXml(String input) {\n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_ESCAPE),\n             new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE),\n-            new EscapeNonAsciiAsNumericEntity()\n+            NumericEntityEscaper.above(0x7f)\n         );\n \n     public static final String escapeHtml3(String input) {\n             new LookupTranslator(EntityArrays.BASIC_ESCAPE),\n             new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE),\n             new LookupTranslator(EntityArrays.HTML40_EXTENDED_ESCAPE),\n-            new EscapeNonAsciiAsNumericEntity()\n+            NumericEntityEscaper.above(0x7f)\n         );\n \n     public static final String escapeHtml4(String input) {\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/text/translate/NumericEntityEscaper.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang.text.translate;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+/**\n+ * Translates codepoints to their XML numeric entity escaped value. \n+ * @since 3.0\n+ */\n+public class NumericEntityEscaper extends CodePointTranslator {\n+\n+    private int below = 0;\n+    private int above = Integer.MAX_VALUE;\n+    private boolean between = true;\n+\n+    public static NumericEntityEscaper below(int codepoint) {\n+        return outsideOf(codepoint, Integer.MAX_VALUE);\n+    }\n+\n+    public static NumericEntityEscaper above(int codepoint) {\n+        return outsideOf(0, codepoint);\n+    }\n+\n+    public static NumericEntityEscaper between(int codepointLow, int codepointHigh) {\n+        NumericEntityEscaper escaper = new NumericEntityEscaper();\n+        escaper.above = codepointHigh;\n+        escaper.below = codepointLow;\n+        return escaper;\n+    }\n+\n+    public static NumericEntityEscaper outsideOf(int codepointLow, int codepointHigh) {\n+        NumericEntityEscaper escaper = new NumericEntityEscaper();\n+        escaper.above = codepointHigh;\n+        escaper.below = codepointLow;\n+        escaper.between = false;\n+        return escaper;\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public boolean translate(int codepoint, Writer out) throws IOException {\n+        if(between) {\n+            if (codepoint < below || codepoint > above) {\n+                return false;\n+            }\n+        } else {\n+            if (codepoint >= below && codepoint <= above) {\n+                return false;\n+            }\n+        }\n+\n+        // TODO: if (codepoint > 0xffff) ?\n+        out.write(\"&#\");\n+        out.write(Integer.toString(codepoint, 10));\n+        out.write(';');\n+        return true;\n+    }\n+}", "timestamp": 1245905778, "metainfo": ""}