{"sha": "70de8cc81082b1a1bd25be1c0453b3a2adb89b02", "log": "Bugzilla Bug 26056 [lang] Add methods to ArrayUtils: add at end and insert-like ops Added methods: primitiveType[] add(primitiveType[], primitiveType)   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author Gary Gregory\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.39 2004/01/31 20:12:16 ggregory Exp $\n+ * @version $Id: ArrayUtils.java,v 1.40 2004/02/03 22:14:24 ggregory Exp $\n  */\n public class ArrayUtils {\n \n     }\n \n     /**\n-     * <p>Adds the element to the end of the array.</p>\n+     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n      *\n      * <p>The new array contains the same elements of the input\n      * array plus the given element in the last position. The component type of \n-     * the new array is  the same as that of the input array.</p>\n+     * the new array is the same as that of the input array.</p>\n      *\n      * <p>If the input array is <code>null</code>, a new one element array is returned\n      *  whose component type is the same as the element.</p>\n      * \n      * @param array  the array to \"add\" the element to, may be <code>null</code>\n      * @param element  the object to add\n-     * @return A new array containing the existing elements and the new element\n+     * @return A new array containing the existing elements plus the new element\n      * @since 2.1\n      */\n-    public static Object[] add(Object[] array, Object element) {\n-        Object joinedArray;\n-        int elementPos;\n+    public static Object[] add(final Object[] array, final Object element) {\n+        Object newArray = copyArrayGrow1(array, element != null ? element.getClass() : Object.class);\n+        Array.set(newArray, lastIndex(newArray), element);\n+        return (Object[]) newArray;\n+    }\n+    \n+    /**\n+     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, true)          = [true]\n+     * ArrayUtils.add([true], false)       = [true, false]\n+     * ArrayUtils.add([true, false], true) = [true, false, true]\n+     * </pre>\n+     * \n+     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param element  the object to add at the last index of the new array\n+     * @return A new array containing the existing elements plus the new element\n+     * @since 2.1\n+     */\n+    public static boolean[] add(final boolean[] array, final boolean element) {\n+        boolean[] newArray = (boolean[])copyArrayGrow1(array, Boolean.TYPE);\n+        newArray[lastIndex(newArray)] = element;\n+        return newArray;\n+    }\n+    \n+    /**\n+     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0)   = [0]\n+     * ArrayUtils.add([1], 0)    = [1, 0]\n+     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n+     * </pre>\n+     * \n+     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param element  the object to add at the last index of the new array\n+     * @return A new array containing the existing elements plus the new element\n+     * @since 2.1\n+     */\n+    public static byte[] add(final byte[] array, final byte element) {\n+        byte[] newArray = (byte[])copyArrayGrow1(array, Byte.TYPE);\n+        newArray[lastIndex(newArray)] = element;\n+        return newArray;\n+    }\n+    \n+    /**\n+     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, '0')       = ['0']\n+     * ArrayUtils.add(['1'], '0')      = ['1', '0']\n+     * ArrayUtils.add(['1', '0'], '1') = ['1', '0', '1']\n+     * </pre>\n+     * \n+     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param element  the object to add at the last index of the new array\n+     * @return A new array containing the existing elements plus the new element\n+     * @since 2.1\n+     */\n+    public static char[] add(final char[] array, final char element) {\n+        char[] newArray = (char[])copyArrayGrow1(array, Character.TYPE);\n+        newArray[lastIndex(newArray)] = element;\n+        return newArray;\n+    }\n+    \n+    /**\n+     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0)   = [0]\n+     * ArrayUtils.add([1], 0)    = [1, 0]\n+     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n+     * </pre>\n+     * \n+     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param element  the object to add at the last index of the new array\n+     * @return A new array containing the existing elements plus the new element\n+     * @since 2.1\n+     */\n+    public static double[] add(final double[] array, final double element) {\n+        double[] newArray = (double[])copyArrayGrow1(array, Double.TYPE);\n+        newArray[lastIndex(newArray)] = element;\n+        return newArray;\n+    }\n+    \n+    /**\n+     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0)   = [0]\n+     * ArrayUtils.add([1], 0)    = [1, 0]\n+     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n+     * </pre>\n+     * \n+     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param element  the object to add at the last index of the new array\n+     * @return A new array containing the existing elements plus the new element\n+     * @since 2.1\n+     */\n+    public static float[] add(final float[] array, final float element) {\n+        float[] newArray = (float[])copyArrayGrow1(array, Float.TYPE);\n+        newArray[lastIndex(newArray)] = element;\n+        return newArray;\n+    }\n+    \n+    /**\n+     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0)   = [0]\n+     * ArrayUtils.add([1], 0)    = [1, 0]\n+     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n+     * </pre>\n+     * \n+     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param element  the object to add at the last index of the new array\n+     * @return A new array containing the existing elements plus the new element\n+     * @since 2.1\n+     */\n+    public static int[] add(final int[] array, final int element) {\n+        int[] newArray = (int[])copyArrayGrow1(array, Integer.TYPE);\n+        newArray[lastIndex(newArray)] = element;\n+        return newArray;\n+    }\n+    \n+    /**\n+     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0)   = [0]\n+     * ArrayUtils.add([1], 0)    = [1, 0]\n+     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n+     * </pre>\n+     * \n+     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param element  the object to add at the last index of the new array\n+     * @return A new array containing the existing elements plus the new element\n+     * @since 2.1\n+     */\n+    public static long[] add(final long[] array, final long element) {\n+        long[] newArray = (long[])copyArrayGrow1(array, Long.TYPE);\n+        newArray[lastIndex(newArray)] = element;\n+        return newArray;\n+    }\n+    \n+    /**\n+     * <p>Copies the given array and adds the given element at the end of the new array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0)   = [0]\n+     * ArrayUtils.add([1], 0)    = [1, 0]\n+     * ArrayUtils.add([1, 0], 1) = [1, 0, 1]\n+     * </pre>\n+     * \n+     * @param array  the array to copy and add the element to, may be <code>null</code>\n+     * @param element  the object to add at the last index of the new array\n+     * @return A new array containing the existing elements plus the new element\n+     * @since 2.1\n+     */\n+    public static short[] add(final short[] array, final short element) {\n+        short[] newArray = (short[])copyArrayGrow1(array, Short.TYPE);\n+        newArray[lastIndex(newArray)] = element;\n+        return newArray;\n+    }\n+    \n+    /**\n+     * Returns a copy of the given array of size 1 greater than the argument. \n+     * The last value of the array is left to the default value.\n+     * \n+     * @param array The array to copy, must not be <code>null</code>.\n+     * @param newArrayComponentType If <code>array</code> is <code>null</code>, create a \n+     * size 1 array of this type.\n+     * @return A new copy of the array of size 1 greater than the input.\n+     */    \n+    private static Object copyArrayGrow1(final Object array, Class newArrayComponentType) {\n         if (array != null) {\n-            joinedArray = Array.newInstance(array.getClass().getComponentType(), array.length + 1);\n-            System.arraycopy(array, 0, joinedArray, 0, array.length);\n-            elementPos = array.length;\n+            int arrayLength = Array.getLength(array);\n+            Object newArray = Array.newInstance(array.getClass().getComponentType(), arrayLength + 1);\n+            System.arraycopy(array, 0, newArray, 0, arrayLength);\n+            return newArray;\n         } else {\n-            // null input array, use the element type\n-            joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);\n-            elementPos = 0;\n-        }\n-        Array.set(joinedArray, elementPos, element);\n-        return (Object[]) joinedArray;\n-    }\n-\n+            return Array.newInstance(newArrayComponentType, 1);\n+        }\n+    }\n+    \n+    /**\n+     * Returns the last index of the given array. This value is one less than the size since\n+     * arrays indices are 0-based.\n+     *  \n+     * @param array The array to return the last index for, must not be <code>null</code>.\n+     * @return The last index\n+     */\n+    public static int lastIndex(final Object array) {\n+        return Array.getLength(array) - 1;\n+    }\n+    \n     /**\n      * <p>Inserts the specified element at the specified position in the array. \n      * Shifts the element currently at that position (if any) and any subsequent\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsAddTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+package org.apache.commons.lang;\n+\n+import java.util.Arrays;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests ArrayUtils add methods.\n+ * \n+ * @author Gary D. Gregory\n+ * @version $Id: ArrayUtilsAddTest.java,v 1.1 2004/02/03 22:14:24 ggregory Exp $\n+ */\n+public class ArrayUtilsAddTest extends TestCase {\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(ArrayUtilsAddTest.class);\n+        suite.setName(\"ArrayUtils add Tests\");\n+        return suite;\n+    }\n+\n+    public void testAddObjectArrayBoolean() {\n+        boolean[] newArray;\n+        newArray = ArrayUtils.add((boolean[])null, false);\n+        assertTrue(Arrays.equals(new boolean[]{false}, newArray));\n+        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((boolean[])null, true);\n+        assertTrue(Arrays.equals(new boolean[]{true}, newArray));\n+        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n+        boolean[] array1 = new boolean[]{true, false, true};\n+        newArray = ArrayUtils.add(array1, false);\n+        assertTrue(Arrays.equals(new boolean[]{true, false, true, false}, newArray));\n+        assertEquals(Boolean.TYPE, newArray.getClass().getComponentType());\n+    }\n+    \n+    public void testAddObjectArrayByte() {\n+        byte[] newArray;\n+        newArray = ArrayUtils.add((byte[])null, (byte)0);\n+        assertTrue(Arrays.equals(new byte[]{0}, newArray));\n+        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((byte[])null, (byte)1);\n+        assertTrue(Arrays.equals(new byte[]{1}, newArray));\n+        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n+        byte[] array1 = new byte[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, (byte)0);\n+        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, (byte)4);\n+        assertTrue(Arrays.equals(new byte[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Byte.TYPE, newArray.getClass().getComponentType());        \n+    }\n+    \n+    public void testAddObjectArrayChar() {\n+        char[] newArray;\n+        newArray = ArrayUtils.add((char[])null, (char)0);\n+        assertTrue(Arrays.equals(new char[]{0}, newArray));\n+        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((char[])null, (char)1);\n+        assertTrue(Arrays.equals(new char[]{1}, newArray));\n+        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n+        char[] array1 = new char[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, (char)0);\n+        assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Character.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, (char)4);\n+        assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Character.TYPE, newArray.getClass().getComponentType());        \n+    }\n+    \n+    public void testAddObjectArrayDouble() {\n+        double[] newArray;\n+        newArray = ArrayUtils.add((double[])null, 0);\n+        assertTrue(Arrays.equals(new double[]{0}, newArray));\n+        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((double[])null, 1);\n+        assertTrue(Arrays.equals(new double[]{1}, newArray));\n+        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n+        double[] array1 = new double[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, 0);\n+        assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Double.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, 4);\n+        assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Double.TYPE, newArray.getClass().getComponentType());        \n+    }\n+    \n+    public void testAddObjectArrayFloat() {\n+        float[] newArray;\n+        newArray = ArrayUtils.add((float[])null, 0);\n+        assertTrue(Arrays.equals(new float[]{0}, newArray));\n+        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((float[])null, 1);\n+        assertTrue(Arrays.equals(new float[]{1}, newArray));\n+        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n+        float[] array1 = new float[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, 0);\n+        assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Float.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, 4);\n+        assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Float.TYPE, newArray.getClass().getComponentType());        \n+    }\n+    \n+    public void testAddObjectArrayInt() {\n+        int[] newArray;\n+        newArray = ArrayUtils.add((int[])null, 0);\n+        assertTrue(Arrays.equals(new int[]{0}, newArray));\n+        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((int[])null, 1);\n+        assertTrue(Arrays.equals(new int[]{1}, newArray));\n+        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n+        int[] array1 = new int[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, 0);\n+        assertTrue(Arrays.equals(new int[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, 4);\n+        assertTrue(Arrays.equals(new int[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Integer.TYPE, newArray.getClass().getComponentType());        \n+    }\n+    \n+    public void testAddObjectArrayLong() {\n+        long[] newArray;\n+        newArray = ArrayUtils.add((long[])null, 0);\n+        assertTrue(Arrays.equals(new long[]{0}, newArray));\n+        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((long[])null, 1);\n+        assertTrue(Arrays.equals(new long[]{1}, newArray));\n+        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n+        long[] array1 = new long[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, 0);\n+        assertTrue(Arrays.equals(new long[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Long.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, 4);\n+        assertTrue(Arrays.equals(new long[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Long.TYPE, newArray.getClass().getComponentType());        \n+    }\n+    \n+    public void testAddObjectArrayShort() {\n+        short[] newArray;\n+        newArray = ArrayUtils.add((short[])null, (short)0);\n+        assertTrue(Arrays.equals(new short[]{0}, newArray));\n+        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((short[])null, (short)1);\n+        assertTrue(Arrays.equals(new short[]{1}, newArray));\n+        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n+        short[] array1 = new short[]{1, 2, 3};\n+        newArray = ArrayUtils.add(array1, (short)0);\n+        assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray));\n+        assertEquals(Short.TYPE, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(array1, (short)4);\n+        assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray));\n+        assertEquals(Short.TYPE, newArray.getClass().getComponentType());        \n+    }\n+    \n+    public void testAddObjectArrayObject() {\n+        Object[] newArray;\n+        newArray = ArrayUtils.add((Object[])null, null);\n+        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n+        assertEquals(Object.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((Object[])null, \"a\");\n+        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n+        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n+        newArray = ArrayUtils.add(stringArray1, null);\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(stringArray1, \"d\");\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+    }\n+    \n+    public void testAddObjectArrayToObjectArray() {\n+        assertNull(ArrayUtils.addAll(null, null));\n+        Object[] newArray;\n+        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n+        String[] stringArray2 = new String[]{\"1\", \"2\", \"3\"};\n+        newArray = ArrayUtils.addAll(stringArray1, null);\n+        assertTrue(Arrays.equals(stringArray1, newArray));\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(null, stringArray2);\n+        assertTrue(Arrays.equals(stringArray2, newArray));\n+        assertTrue(Arrays.equals((new String[]{\"1\", \"2\", \"3\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(stringArray1, stringArray2);\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n+        assertTrue(Arrays.equals((new String[]{}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n+        assertTrue(Arrays.equals((new String[]{}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);\n+        assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray));\n+        assertTrue(Arrays.equals((new String[]{}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        String[] stringArrayNull = new String []{null};\n+        newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);        \n+        assertTrue(Arrays.equals((new String[]{null, null}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+    }    \n+    \n+    public void testAddObjectAtIndex() {\n+        Object[] newArray;\n+        newArray = ArrayUtils.add((Object[])null, 0, null);\n+        assertTrue(Arrays.equals((new Object[]{null}), newArray));\n+        assertEquals(Object.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add((Object[])null, 0, \"a\");\n+        assertTrue(Arrays.equals((new String[]{\"a\"}), newArray));\n+        assertTrue(Arrays.equals((new Object[]{\"a\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n+        newArray = ArrayUtils.add(stringArray1, 0, null);\n+        assertTrue(Arrays.equals((new String[]{null, \"a\", \"b\", \"c\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(stringArray1, 1, null);\n+        assertTrue(Arrays.equals((new String[]{\"a\", null, \"b\", \"c\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(stringArray1, 3, null);\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", null}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+        newArray = ArrayUtils.add(stringArray1, 3, \"d\");\n+        assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n+        assertEquals(String.class, newArray.getClass().getComponentType());        \n+        assertEquals(String.class, newArray.getClass().getComponentType());\n+\n+        Object[] o = new Object[] {\"1\", \"2\", \"4\"};\n+        Object[] result = ArrayUtils.add(o, 2, \"3\");\n+        Object[] result2 = ArrayUtils.add(o, 3, \"5\");\n+        \n+        assertNotNull(result);\n+        assertEquals(4, result.length);\n+        assertEquals(\"1\", result[0]);\n+        assertEquals(\"2\", result[1]);\n+        assertEquals(\"3\", result[2]);\n+        assertEquals(\"4\", result[3]);\n+        assertNotNull(result2);\n+        assertEquals(4, result2.length);\n+        assertEquals(\"1\", result2[0]);\n+        assertEquals(\"2\", result2[1]);\n+        assertEquals(\"4\", result2[2]);\n+        assertEquals(\"5\", result2[3]);\n+    }\n+    \n+}\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Fredrik Westermarck\n  * @author Gary Gregory\n- * @version $Id: ArrayUtilsTest.java,v 1.23 2004/01/31 20:12:15 ggregory Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.24 2004/02/03 22:14:24 ggregory Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         assertEquals(false, Modifier.isFinal(ArrayUtils.class.getModifiers()));\n     }\n     \n-    void assertArraysEquals(Object[] array1, Object[] array2) {\n-        assertTrue(Arrays.equals(array1, array2));\n-    }\n-    \n-    public void testJoin() {\n-        assertNull(ArrayUtils.addAll(null, null));\n-        Object[] joinedArray;\n-        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n-        String[] stringArray2 = new String[]{\"1\", \"2\", \"3\"};\n-        joinedArray = ArrayUtils.addAll(stringArray1, null);\n-        assertArraysEquals(stringArray1, joinedArray);\n-        assertArraysEquals(new String[]{\"a\", \"b\", \"c\"}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.addAll(null, stringArray2);\n-        assertArraysEquals(stringArray2, joinedArray);\n-        assertArraysEquals(new String[]{\"1\", \"2\", \"3\"}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.addAll(stringArray1, stringArray2);\n-        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, null);\n-        assertArraysEquals(ArrayUtils.EMPTY_STRING_ARRAY, joinedArray);\n-        assertArraysEquals(new String[]{}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY);\n-        assertArraysEquals(ArrayUtils.EMPTY_STRING_ARRAY, joinedArray);\n-        assertArraysEquals(new String[]{}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);\n-        assertArraysEquals(ArrayUtils.EMPTY_STRING_ARRAY, joinedArray);\n-        assertArraysEquals(new String[]{}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        String[] stringArrayNull = new String []{null};\n-        joinedArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull);        \n-        assertArraysEquals(new String[]{null, null}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-    }    \n-    \n-    public void testAddObjectArrayObject() {\n-        Object[] joinedArray;\n-        joinedArray = ArrayUtils.add((Object[])null, null);\n-        assertArraysEquals(new Object[]{null}, joinedArray);\n-        assertEquals(Object.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.add((Object[])null, \"a\");\n-        assertArraysEquals(new String[]{\"a\"}, joinedArray);\n-        assertArraysEquals(new Object[]{\"a\"}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n-        joinedArray = ArrayUtils.add(stringArray1, null);\n-        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", null}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.add(stringArray1, \"d\");\n-        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", \"d\"}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());        \n-    }\n-\n-    public void testAddAtIndex() {\n-        Object[] joinedArray;\n-        joinedArray = ArrayUtils.add((Object[])null, 0, null);\n-        assertArraysEquals(new Object[]{null}, joinedArray);\n-        assertEquals(Object.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.add((Object[])null, 0, \"a\");\n-        assertArraysEquals(new String[]{\"a\"}, joinedArray);\n-        assertArraysEquals(new Object[]{\"a\"}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n-        joinedArray = ArrayUtils.add(stringArray1, 0, null);\n-        assertArraysEquals(new String[]{null, \"a\", \"b\", \"c\"}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.add(stringArray1, 1, null);\n-        assertArraysEquals(new String[]{\"a\", null, \"b\", \"c\"}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.add(stringArray1, 3, null);\n-        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", null}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());\n-        joinedArray = ArrayUtils.add(stringArray1, 3, \"d\");\n-        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", \"d\"}, joinedArray);\n-        assertEquals(String.class, joinedArray.getClass().getComponentType());        \n-\n-        Object[] o = new Object[] {\"1\", \"2\", \"4\"};\n-        Object[] result = ArrayUtils.add(o, 2, \"3\");\n-        Object[] result2 = ArrayUtils.add(o, 3, \"5\");\n-        \n-        assertNotNull(result);\n-        assertEquals(4, result.length);\n-        assertEquals(\"1\", result[0]);\n-        assertEquals(\"2\", result[1]);\n-        assertEquals(\"3\", result[2]);\n-        assertEquals(\"4\", result[3]);\n-        assertNotNull(result2);\n-        assertEquals(4, result2.length);\n-        assertEquals(\"1\", result2[0]);\n-        assertEquals(\"2\", result2[1]);\n-        assertEquals(\"4\", result2[2]);\n-        assertEquals(\"5\", result2[3]);\n-    }\n-\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"{}\", ArrayUtils.toString(null));\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Matthew Hawthorne\n- * @version $Id: LangTestSuite.java,v 1.24 2004/01/31 13:00:07 scolebourne Exp $\n+ * @version $Id: LangTestSuite.java,v 1.25 2004/02/03 22:14:24 ggregory Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         TestSuite suite = new TestSuite();\n         suite.setName(\"Commons-Lang Tests\");\n         suite.addTest(ArrayUtilsTest.suite());\n+        suite.addTest(ArrayUtilsAddTest.suite());\n         suite.addTest(BitFieldTest.suite());\n         suite.addTest(BooleanUtilsTest.suite());\n         suite.addTest(CharRangeTest.suite());", "timestamp": 1075846464, "metainfo": ""}