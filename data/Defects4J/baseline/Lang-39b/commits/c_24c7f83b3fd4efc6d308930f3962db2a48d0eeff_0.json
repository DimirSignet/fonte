{"sha": "24c7f83b3fd4efc6d308930f3962db2a48d0eeff", "log": "Adding more tests, plus a rename of lessThan to elementBefore; greaterThan to elementAfter and bugfix so the new code works - LANG-551  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Range.java\n+++ b/src/java/org/apache/commons/lang/Range.java\n      *\n      * @param element  the element to test, may be <code>null</code>\n      * @return <code>true</code> if the specified element occurs within this range\n-     * @throws IllegalArgumentException if the <code>Number</code> cannot be compared\n      */\n     public boolean contains(T element) {\n         if(element == null) {\n         return (comparator.compare(element, getMinimum()) > -1) && (comparator.compare(element, getMaximum()) < 1);\n     }\n \n-    public boolean lessThan(T element) {\n+    /**\n+     * <p>Tests whether the specified element occurs before this range.</p>\n+     *\n+     * @param element  the element to test\n+     * @return <code>true</code> if the specified element occurs before this range\n+     */\n+    public boolean elementBefore(T element) {\n         if (element == null) {\n-            return false;\n+            return false; // ??\n         }\n         \n-        return this.comparator.compare(getMinimum(), element) < 1;\n-    }\n-\n-    public boolean greaterThan(T element) {\n+        return this.comparator.compare(element, getMinimum()) < 0;\n+    }\n+\n+    /**\n+     * <p>Tests whether the specified element occurs after this range.</p>\n+     *\n+     * @param element  the element to test\n+     * @return <code>true</code> if the specified element occurs after this range\n+     */\n+    public boolean elementAfter(T element) {\n         if (element == null) {\n-            return false;\n+            return false; // ??\n         }\n         \n-        return this.comparator.compare(getMaximum(), element) > -1;\n+        return this.comparator.compare(element, getMaximum()) > 0;\n     }\n \n     // Range tests\n--- a/src/test/org/apache/commons/lang/RangeTest.java\n+++ b/src/test/org/apache/commons/lang/RangeTest.java\n         doubleRange = new Range<Double>((double) 10, (double) 20);\n     }\n \n-    /**\n-     * Test method for 'org.apache.commons.lang.Range.equals(Object)'\n-     */\n     public void testEqualsObject() {\n         assertEquals(byteRange, byteRange);\n         assertEquals(byteRange, byteRange2);\n         assertFalse(byteRange2.equals(\"Ni!\"));\n     }\n \n-    /**\n-     * Test method for 'org.apache.commons.lang.Range.hashCode()'\n-     */\n     public void testHashCode() {\n         assertEquals(byteRange.hashCode(), byteRange2.hashCode());\n         assertFalse(byteRange.hashCode() == byteRange3.hashCode());\n+\n+        assertEquals(intRange.hashCode(), intRange.hashCode());\n+        assertTrue(intRange.hashCode() != 0);\n     }\n \n-    /**\n-     * Test method for 'org.apache.commons.lang.Range.toString()'\n-     */\n     public void testToString() {\n         assertNotNull(byteRange.toString());\n+\n+        String str = intRange.toString();\n+        assertEquals(\"Range[10,20]\", str);\n+//        assertSame(str, intRange.toString());  // no longer passes - does it matter?\n+        assertEquals(\"Range[-20,-10]\", new Range<Integer>(-20, -10).toString());\n     }\n \n     // --------------------------------------------------------------------------\n+\n     public void testGetMinimum() {\n         assertEquals(10, (int) intRange.getMinimum());\n         assertEquals(10L, (long) longRange.getMinimum());\n         assertTrue(intRange.contains(20));\n         assertFalse(intRange.contains(25));\n     }\n+\n+    public void testElementBefore() {\n+        assertFalse(intRange.elementBefore(null));\n+        \n+        assertTrue(intRange.elementBefore(5));\n+        assertFalse(intRange.elementBefore(10));\n+        assertFalse(intRange.elementBefore(15));\n+        assertFalse(intRange.elementBefore(20));\n+        assertFalse(intRange.elementBefore(25));\n+    }\n+\n+    public void testElementAfter() {\n+        assertFalse(intRange.elementAfter(null));\n+        \n+        assertFalse(intRange.elementAfter(5));\n+        assertFalse(intRange.elementAfter(10));\n+        assertFalse(intRange.elementAfter(15));\n+        assertFalse(intRange.elementAfter(20));\n+        assertTrue(intRange.elementAfter(25));\n+    }\n+\n+    // --------------------------------------------------------------------------\n \n     public void testContainsRange() {\n \n \n     }\n \n+    public void testOverlapsRange() {\n+\n+        // null handling\n+        assertFalse(intRange.overlapsRange(null));\n+\n+        // easy inside range\n+        assertTrue(intRange.overlapsRange(new Range(12, 18)));\n+\n+        // outside range on each side\n+        assertFalse(intRange.overlapsRange(new Range(32, 45)));\n+        assertFalse(intRange.overlapsRange(new Range(2, 8)));\n+\n+        // equals range\n+        assertTrue(intRange.overlapsRange(new Range(10, 20)));\n+\n+        // overlaps\n+        assertTrue(intRange.overlapsRange(new Range(9, 14)));\n+        assertTrue(intRange.overlapsRange(new Range(16, 21)));\n+\n+        // touches lower boundary\n+        assertTrue(intRange.overlapsRange(new Range(10, 19)));\n+        assertTrue(intRange.overlapsRange(new Range(10, 21)));\n+\n+        // touches upper boundary\n+        assertTrue(intRange.overlapsRange(new Range(11, 20)));\n+        assertTrue(intRange.overlapsRange(new Range(9, 20)));\n+        \n+        // negative\n+        assertFalse(intRange.overlapsRange(new Range(-11, -18)));\n+\n+    }\n+\n }", "timestamp": 1257507938, "metainfo": ""}