{"sha": "f44af42ede37938ca710297cff9f14afa9e3c04d", "log": "Fixing the lack of ClassLoader consideration in the compareTo methods of enum.Enum and enums.Enum, along with unit tests, as mentioned on Bugzilla entry #32619 by Kathy Van Stone.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n             return iName.equals(((Enum) other).iName);\n         } else {\n             // This and other are in different class loaders, we must use reflection.\n-            try {\n-                Method mth = other.getClass().getMethod(\"getName\", null);\n-                String name = (String) mth.invoke(other, null);\n-                return iName.equals(name);\n-            } catch (NoSuchMethodException e) {\n-                // ignore - should never happen\n-            } catch (IllegalAccessException e) {\n-                // ignore - should never happen\n-            } catch (InvocationTargetException e) {\n-                // ignore - should never happen\n+            if (other.getClass().getName().equals(this.getClass().getName()) == false) {\n+                return false;\n             }\n-            return false;\n+            return iName.equals( getNameInOtherClassLoader(other) );\n         }\n     }\n     \n      * <p>The default ordering is alphabetic by name, but this\n      * can be overridden by subclasses.</p>\n      * \n+     * <p>If the parameter is in a different class loader than this instance,\n+     * reflection is used to compare the names.</p>\n+     *\n      * @see java.lang.Comparable#compareTo(Object)\n      * @param other  the other object to compare to\n      * @return -ve if this is less than the other object, +ve if greater\n         if (other == this) {\n             return 0;\n         }\n+        if (other.getClass() != this.getClass()) {\n+            if (other.getClass().getName().equals(this.getClass().getName())) {\n+                return iName.compareTo( getNameInOtherClassLoader(other) );\n+            }\n+        }\n         return iName.compareTo(((Enum) other).iName);\n+    }\n+\n+    private String getNameInOtherClassLoader(Object other) {\n+        try {\n+            Method mth = other.getClass().getMethod(\"getName\", null);\n+            String name = (String) mth.invoke(other, null);\n+            return name;\n+        } catch (NoSuchMethodException e) {\n+            // ignore - should never happen\n+        } catch (IllegalAccessException e) {\n+            // ignore - should never happen\n+        } catch (InvocationTargetException e) {\n+            // ignore - should never happen\n+        }\n+        throw new IllegalStateException(\"This should not happen\");\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/enums/Enum.java\n+++ b/src/java/org/apache/commons/lang/enums/Enum.java\n             if (other.getClass().getName().equals(this.getClass().getName()) == false) {\n                 return false;\n             }\n-            try {\n-                Method mth = other.getClass().getMethod(\"getName\", null);\n-                String name = (String) mth.invoke(other, null);\n-                return iName.equals(name);\n-            } catch (NoSuchMethodException e) {\n-                // ignore - should never happen\n-            } catch (IllegalAccessException e) {\n-                // ignore - should never happen\n-            } catch (InvocationTargetException e) {\n-                // ignore - should never happen\n-            }\n-            return false;\n+            return iName.equals( getNameInOtherClassLoader(other) );\n         }\n     }\n     \n      * <p>The default ordering is alphabetic by name, but this\n      * can be overridden by subclasses.</p>\n      * \n+     * <p>If the parameter is in a different class loader than this instance,\n+     * reflection is used to compare the names.</p>\n+     *\n      * @see java.lang.Comparable#compareTo(Object)\n      * @param other  the other object to compare to\n      * @return -ve if this is less than the other object, +ve if greater\n         if (other == this) {\n             return 0;\n         }\n+        if (other.getClass() != this.getClass()) {\n+            if (other.getClass().getName().equals(this.getClass().getName())) {\n+                return iName.compareTo( getNameInOtherClassLoader(other) );\n+            }\n+        }\n         return iName.compareTo(((Enum) other).iName);\n+    }\n+\n+    private String getNameInOtherClassLoader(Object other) {\n+        try {\n+            Method mth = other.getClass().getMethod(\"getName\", null);\n+            String name = (String) mth.invoke(other, null);\n+            return name;\n+        } catch (NoSuchMethodException e) {\n+            // ignore - should never happen\n+        } catch (IllegalAccessException e) {\n+            // ignore - should never happen\n+        } catch (InvocationTargetException e) {\n+            // ignore - should never happen\n+        }\n+        throw new IllegalStateException(\"This should not happen\");\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n \n     public void testColorEnumEqualsWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException,\n             ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n-        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);\n-        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.GREEN);\n-        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.RED);\n-    }\n-\n-    void testEqualsTrueWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,\n+        this.testWithDifferentClassLoaders(ColorEnum.BLUE);\n+        this.testWithDifferentClassLoaders(ColorEnum.GREEN);\n+        this.testWithDifferentClassLoaders(ColorEnum.RED);\n+    }\n+\n+    void testWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,\n             NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n         // Sanity checks:\n         assertTrue(colorEnum.equals(colorEnum));\n         // set up:\n         ClassLoader classLoader = ClassUtilsTest.newSystemClassLoader();\n         Object enumObjectFromOtherClassLoader = this.getColorEnum(classLoader, colorEnum.getName());\n+\n         // the real test, part 1.\n         try {\n             ColorEnum testCase = (ColorEnum) enumObjectFromOtherClassLoader;\n         } catch (ClassCastException e) {\n             // normal.\n         }\n+\n         // the real test, part 2.\n         assertEquals(\"The two objects should match even though they are from different class loaders\", colorEnum,\n                 enumObjectFromOtherClassLoader);\n-        // the real test, part 3.\n+\n+        // the real test, part 3 - testing equals(Object)\n         int falseCount = 0;\n         for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n             ColorEnum element = (ColorEnum) iter.next();\n             if (!colorEnum.equals(element)) {\n                 falseCount++;\n                 assertFalse(enumObjectFromOtherClassLoader.equals(element));\n+            }\n+        }\n+        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);\n+\n+        // the real test, part 4 - testing compareTo(Object) == 0\n+        falseCount = 0;\n+        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n+            ColorEnum element = (ColorEnum) iter.next();\n+            if (!colorEnum.equals(element)) {\n+                falseCount++;\n+                assertFalse( ((Comparable)enumObjectFromOtherClassLoader).compareTo(element) == 0);\n             }\n         }\n         assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);\n--- a/src/test/org/apache/commons/lang/enums/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enums/EnumTest.java\n     \n     public void testColorEnumEqualsWithDifferentClassLoaders() throws SecurityException, IllegalArgumentException,\n             ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {\n-        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.BLUE);\n-        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.GREEN);\n-        this.testEqualsTrueWithDifferentClassLoaders(ColorEnum.RED);\n-    }\n-\n-    void testEqualsTrueWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,\n+        this.testWithDifferentClassLoaders(ColorEnum.BLUE);\n+        this.testWithDifferentClassLoaders(ColorEnum.GREEN);\n+        this.testWithDifferentClassLoaders(ColorEnum.RED);\n+    }\n+\n+    void testWithDifferentClassLoaders(ColorEnum colorEnum) throws ClassNotFoundException, SecurityException,\n             NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n         // Sanity checks:\n         assertTrue(colorEnum.equals(colorEnum));\n         // set up:\n         ClassLoader classLoader = ClassUtilsTest.newSystemClassLoader();\n         Object enumObjectFromOtherClassLoader = this.getColorEnum(classLoader, colorEnum.getName());\n+\n         // the real test, part 1.\n         try {\n             ColorEnum testCase = (ColorEnum) enumObjectFromOtherClassLoader;\n         } catch (ClassCastException e) {\n             // normal.\n         }\n+\n         // the real test, part 2.\n         assertEquals(\"The two objects should match even though they are from different class loaders\", colorEnum,\n                 enumObjectFromOtherClassLoader);\n-        // the real test, part 3.\n+\n+        // the real test, part 3 - testing equals(Object)\n         int falseCount = 0;\n         for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n             ColorEnum element = (ColorEnum) iter.next();\n             if (!colorEnum.equals(element)) {\n                 falseCount++;\n                 assertFalse(enumObjectFromOtherClassLoader.equals(element));\n+            }\n+        }\n+        assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);\n+\n+        // the real test, part 4 - testing compareTo(Object) == 0\n+        falseCount = 0;\n+        for (Iterator iter = ColorEnum.iterator(); iter.hasNext();) {\n+            ColorEnum element = (ColorEnum) iter.next();\n+            if (!colorEnum.equals(element)) {\n+                falseCount++;\n+                assertFalse( ((Comparable)enumObjectFromOtherClassLoader).compareTo(element) == 0);\n             }\n         }\n         assertEquals(ColorEnum.getEnumList().size() - 1, falseCount);", "timestamp": 1146547260, "metainfo": ""}