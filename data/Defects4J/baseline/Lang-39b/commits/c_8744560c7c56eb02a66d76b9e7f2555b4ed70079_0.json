{"sha": "8744560c7c56eb02a66d76b9e7f2555b4ed70079", "log": "Complete the indexOfAny() method set   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.89 2003/08/01 23:20:06 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.90 2003/08/01 23:54:41 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n         return (str.indexOf(searchStr) >= 0);\n     }\n     \n-    // IndexOfAny\n+    // IndexOfAny strings\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Find the first index of any of a set of potential substrings.</p>\n         return ret;\n     }\n \n-    // IndexOfAnyBut\n+    // IndexOfAny chars\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Search a String to find the first index of any\n-     * character not in the given set of characters.</p>\n+     * character in the given set of characters.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.indexOfAnyBut(null, *)           = -1\n-     * StringUtils.indexOfAnyBut(*, null)           = -1\n-     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n-     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n-     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n+     * StringUtils.indexOfAny(null, *)                = -1\n+     * StringUtils.indexOfAny(\"\", *)                  = -1\n+     * StringUtils.indexOfAny(*, null)                = -1\n+     * StringUtils.indexOfAny(*, [])                  = -1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\",['z','a']) = 0\n+     * StringUtils.indexOfAny(\"zzabyycdxx\",['b','y']) = 3\n+     * StringUtils.indexOfAny(\"aba\", ['z'])           = -1\n      * </pre>\n      * \n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      */\n-     public static int indexOfAnyBut(String str, char[] searchChars) {\n-         if (searchChars == null) {\n+     public static int indexOfAny(String str, char[] searchChars) {\n+         if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n              return -1;\n          }\n-         return indexOfAnyBut(str, new String(searchChars));\n+         for (int i = 0; i < str.length(); i ++) {\n+             char ch = str.charAt(i);\n+             for (int j = 0; j < searchChars.length; j++) {\n+                 if (searchChars[j] == ch) {\n+                     return i;\n+                 }\n+             }\n+         }\n+         return -1;\n      }\n \n     /**\n      * <p>Search a String to find the first index of any\n-     * character not in the given set of characters.</p>\n+     * character in the given set of characters.</p>\n      *\n      * <p>A <code>null</code> String will return <code>-1</code>.\n      * A <code>null</code> search string will return <code>-1</code>.</p>\n      * \n      * <pre>\n-     * StringUtils.indexOfAnyBut(null, *)            = -1\n-     * StringUtils.indexOfAnyBut(*, null)            = -1\n-     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n-     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n-     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n+     * StringUtils.indexOfAny(null, *)            = -1\n+     * StringUtils.indexOfAny(\"\", *)              = -1\n+     * StringUtils.indexOfAny(*, null)            = -1\n+     * StringUtils.indexOfAny(*, \"\")              = -1\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", \"za\") = 0\n+     * StringUtils.indexOfAny(\"zzabyycdxx\", \"by\") = 3\n+     * StringUtils.indexOfAny(\"aba\",\"z\")          = -1\n      * </pre>\n      *  \n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n      */\n+    public static int indexOfAny(String str, String searchChars) {\n+        if (str == null || str.length() == 0 || searchChars == null || searchChars.length() == 0) {\n+            return -1;\n+        }\n+        return indexOfAny(str, searchChars.toCharArray());\n+    }\n+\n+    // IndexOfAnyBut chars\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Search a String to find the first index of any\n+     * character not in the given set of characters.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A <code>null</code> or zero length search array will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOfAnyBut(null, *)           = -1\n+     * StringUtils.indexOfAnyBut(\"\", *)             = -1\n+     * StringUtils.indexOfAnyBut(*, null)           = -1\n+     * StringUtils.indexOfAnyBut(*, [])             = -1\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\",'za') = 3\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", '')  = 0\n+     * StringUtils.indexOfAnyBut(\"aba\", 'ab')       = -1\n+     * </pre>\n+     * \n+     * @param str  the String to check, may be null\n+     * @param searchChars  the chars to search for, may be null\n+     * @return the index of any of the chars, -1 if no match or null input\n+     */\n+     public static int indexOfAnyBut(String str, char[] searchChars) {\n+         if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n+             return -1;\n+         }\n+         outer: for (int i = 0; i < str.length(); i ++) {\n+             char ch = str.charAt(i);\n+             for (int j = 0; j < searchChars.length; j++) {\n+                 if (searchChars[j] == ch) {\n+                     continue outer;\n+                 }\n+             }\n+             return i;\n+         }\n+         return -1;\n+     }\n+\n+    /**\n+     * <p>Search a String to find the first index of any\n+     * character not in the given set of characters.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.\n+     * A <code>null</code> search string will return <code>-1</code>.</p>\n+     * \n+     * <pre>\n+     * StringUtils.indexOfAnyBut(null, *)            = -1\n+     * StringUtils.indexOfAnyBut(\"\", *)              = -1\n+     * StringUtils.indexOfAnyBut(*, null)            = -1\n+     * StringUtils.indexOfAnyBut(*, \"\")              = -1\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\") = 3\n+     * StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")   = 0\n+     * StringUtils.indexOfAnyBut(\"aba\",\"ab\")         = -1\n+     * </pre>\n+     *  \n+     * @param str  the String to check, may be null\n+     * @param searchChars  the chars to search for, may be null\n+     * @return the index of any of the chars, -1 if no match or null input\n+     */\n     public static int indexOfAnyBut(String str, String searchChars) {\n-        if (str == null || searchChars == null) {\n+        if (str == null || str.length() == 0 || searchChars == null || searchChars.length() == 0) {\n             return -1;\n         }\n-\n-        for (int i = 0; i < str.length(); i ++) {\n-           if (searchChars.indexOf(str.charAt(i)) < 0) {\n-               return i;\n-           }\n-        }\n-\n+        for (int i = 0; i < str.length(); i++) {\n+            if (searchChars.indexOf(str.charAt(i)) < 0) {\n+                return i;\n+            }\n+        }\n         return -1;\n     }\n \n--- a/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.6 2003/07/30 22:21:39 scolebourne Exp $\n+ * @version $Id: StringUtilsEqualsIndexOfTest.java,v 1.7 2003/08/01 23:54:41 scolebourne Exp $\n  */\n public class StringUtilsEqualsIndexOfTest extends TestCase {\n     private static final String FOO = \"foo\";\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testIndexOfAny() {\n-        assertEquals(-1, StringUtils.indexOfAny(null, null));\n+    public void testIndexOfAny_StringStringarray() {\n+        assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null));\n         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY));\n-        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, null));\n+        assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null));\n         assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0]));\n         assertEquals(-1, StringUtils.indexOfAny(null, new String[0]));\n         assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null}));\n     }\n \n-    public void testLastIndexOfAny() {\n+    public void testLastIndexOfAny_StringStringarray() {\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, null));\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\n         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testIndexOfAnyBut() {\n-        String str1 = \"a\";\n-        String str2 = \"b\";\n-        String str3 = \"ab\";\n-        String chars1= \"b\";\n-        String chars2= \"a\";\n-        String chars3= \"ab\";\n+    public void testIndexOfAny_StringChararray() {\n+        assertEquals(-1, StringUtils.indexOfAny(null, (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(null, new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"\", (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (char[]) null)); \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", new char[0])); \n+        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'z','a'})); \n+        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", new char[] {'b','y'}));\n+        assertEquals(-1, StringUtils.indexOfAny(\"ab\", new char[] {'z'}));\n+    }\n+\n+    public void testIndexOfAny_StringString() {\n+        assertEquals(-1, StringUtils.indexOfAny(null, (String) null));\n+        assertEquals(-1, StringUtils.indexOfAny(null, \"\"));\n+        assertEquals(-1, StringUtils.indexOfAny(null, \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"\", (String) null));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", \"\"));\n+        assertEquals(-1, StringUtils.indexOfAny(\"\", \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", (String) null)); \n+        assertEquals(-1, StringUtils.indexOfAny(\"zzabyycdxx\", \"\")); \n+        assertEquals(0, StringUtils.indexOfAny(\"zzabyycdxx\", \"za\")); \n+        assertEquals(3, StringUtils.indexOfAny(\"zzabyycdxx\", \"by\"));\n+        assertEquals(-1, StringUtils.indexOfAny(\"ab\", \"z\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOfAnyBut_StringChararray() {\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[] {'a','b'}));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (char[]) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[0]));\n+        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'b','y'})); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", new char[] {'z'}));\n+    }\n+\n+    public void testIndexOfAnyBut_StringString() {\n         assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"ab\"));\n+        \n         assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (String) null));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(null, \"\"));\n-        assertEquals(0, StringUtils.indexOfAnyBut(str1, \"\"));\n         assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"\"));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", chars1));\n-        assertEquals(0, StringUtils.indexOfAnyBut(str1, chars1));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(str1, chars2));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(str1, chars3));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(str2, chars1));\n-        assertEquals(0, StringUtils.indexOfAnyBut(str2, chars2));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(str2, chars3));\n-        assertEquals(0, StringUtils.indexOfAnyBut(str3, chars1));\n-        assertEquals(1, StringUtils.indexOfAnyBut(str3, chars2));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(str3, chars3));\n-        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\"));\n-        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\"));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"aba\",\"ab\"));\n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", \"ab\"));\n+        \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", (String) null)); \n+        assertEquals(-1, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"\")); \n+        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"za\")); \n+        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", \"by\"));\n+        assertEquals(0, StringUtils.indexOfAnyBut(\"ab\", \"z\"));\n     }\n     \n-    //-----------------------------------------------------------------------\n-    public void testIndexOfAnyButChar() {\n-        assertEquals(-1, StringUtils.indexOfAnyBut(null, (char[]) null));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", (char[]) null));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(null, new char[0]));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"\", new char[0]));\n-        assertEquals(3, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[] {'z','a'})); \n-        assertEquals(0, StringUtils.indexOfAnyBut(\"zzabyycdxx\", new char[0]));\n-        assertEquals(-1, StringUtils.indexOfAnyBut(\"ab\", new char[] {'a','b'}));\n-    }\n-\n     //-----------------------------------------------------------------------\n     public void testContainsOnly_String() {\n         String str1 = \"a\";\n         assertEquals(true, StringUtils.containsOnly(str3, chars3));\n     }\n \n-    public void testContainsOnly_CharArray() {\n+    public void testContainsOnly_Chararray() {\n         String str1 = \"a\";\n         String str2 = \"b\";\n         String str3 = \"ab\";\n         assertEquals(true, StringUtils.containsNone(str3, chars3));\n     }\n \n-    public void testContainsNone_CharArray() {\n+    public void testContainsNone_Chararray() {\n         String str1 = \"a\";\n         String str2 = \"b\";\n         String str3 = \"ab.\";", "timestamp": 1059782081, "metainfo": ""}