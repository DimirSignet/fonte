{"sha": "5ac633a4e4471847da5aa22bb1fcf28727eb7fe9", "log": "Add a toUnionType method. I think this should be a lot more correct and easier for clients to use, because it will resolve typedefs of UnionTypes better. I will probably do this for all other instanceof checks if we agree that this is the way we want to go.  R=johnlenz DELTA=79  (14 added, 7 deleted, 58 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3047   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n import com.google.javascript.rhino.jstype.JSTypeNative;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n-import com.google.javascript.rhino.jstype.UnionType;\n \n import java.util.BitSet;\n import java.util.Collection;\n    */\n   private void addInvalidatingType(JSType type) {\n     type = type.restrictByNotNullOrUndefined();\n-    if (type instanceof UnionType) {\n-      for (JSType alt : ((UnionType) type).getAlternates()) {\n+    if (type.isUnionType()) {\n+      for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n         addInvalidatingType(alt);\n       }\n     }\n    * won't be ambiguated).\n    */\n   private void computeRelatedTypes(JSType type) {\n-    if (type instanceof UnionType) {\n+    if (type.isUnionType()) {\n       type = type.restrictByNotNullOrUndefined();\n-      if (type instanceof UnionType) {\n-        for (JSType alt : ((UnionType) type).getAlternates()) {\n+      if (type.isUnionType()) {\n+        for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n           computeRelatedTypes(alt);\n         }\n         return;\n \n   /** Returns true if properties on this type should not be renamed. */\n   private boolean isInvalidatingType(JSType type) {\n-    if (type instanceof UnionType) {\n+    if (type.isUnionType()) {\n       type = type.restrictByNotNullOrUndefined();\n-      if (type instanceof UnionType) {\n-        for (JSType alt : ((UnionType) type).getAlternates()) {\n+      if (type.isUnionType()) {\n+        for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n           if (isInvalidatingType(alt)) {\n             return true;\n           }\n \n       ++numOccurrences;\n \n-      if (newType instanceof UnionType) {\n+      if (newType.isUnionType()) {\n         newType = newType.restrictByNotNullOrUndefined();\n-        if (newType instanceof UnionType) {\n-          for (JSType alt : ((UnionType) newType).getAlternates()) {\n+        if (newType.isUnionType()) {\n+          for (JSType alt : newType.toMaybeUnionType().getAlternates()) {\n             addNonUnionType(alt);\n           }\n           return;\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n import com.google.javascript.rhino.jstype.StaticScope;\n-import com.google.javascript.rhino.jstype.UnionType;\n \n import java.util.Collection;\n import java.util.List;\n       return;\n     }\n     if (t.isUnionType()) {\n-      for (JSType alt : ((UnionType) t).getAlternates()) {\n+      for (JSType alt : t.toMaybeUnionType().getAlternates()) {\n         recordInvalidationError(alt, error);\n       }\n       return;\n    */\n   private void addInvalidatingType(JSType type) {\n     type = type.restrictByNotNullOrUndefined();\n-    if (type instanceof UnionType) {\n-      for (JSType alt : ((UnionType) type).getAlternates()) {\n+    if (type.isUnionType()) {\n+      for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n         addInvalidatingType(alt);\n       }\n     } else if (type instanceof EnumElementType) {\n         return;\n       }\n       if (t.isUnionType()) {\n-        for (JSType alt : ((UnionType) t).getAlternates()) {\n+        for (JSType alt : t.toMaybeUnionType().getAlternates()) {\n           printErrorLocations(sb, alt);\n         }\n         return;\n \n     @Override public ImmutableSet<JSType> getTypesToSkipForType(JSType type) {\n       type = type.restrictByNotNullOrUndefined();\n-      if (type instanceof UnionType) {\n+      if (type.isUnionType()) {\n         Set<JSType> types = Sets.newHashSet(type);\n-        for (JSType alt : ((UnionType) type).getAlternates()) {\n+        for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n           types.addAll(getTypesToSkipForTypeNonUnion(type));\n         }\n         return ImmutableSet.copyOf(types);\n \n     @Override public Iterable<JSType> getTypeAlternatives(JSType type) {\n       if (type.isUnionType()) {\n-        return ((UnionType) type).getAlternates();\n+        return type.toMaybeUnionType().getAlternates();\n       } else {\n         ObjectType objType = type.toObjectType();\n         if (objType != null &&\n     private ConcreteType maybeAddAutoboxes(\n         ConcreteType cType, JSType jsType, String prop) {\n       jsType = jsType.restrictByNotNullOrUndefined();\n-      if (jsType instanceof UnionType) {\n-        for (JSType alt : ((UnionType) jsType).getAlternates()) {\n+      if (jsType.isUnionType()) {\n+        for (JSType alt : jsType.toMaybeUnionType().getAlternates()) {\n           cType = maybeAddAutoboxes(cType, alt, prop);\n         }\n         return cType;\n--- a/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n+++ b/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n import com.google.javascript.rhino.jstype.JSType;\n import com.google.javascript.rhino.jstype.ObjectType;\n import com.google.javascript.rhino.jstype.StaticSourceFile;\n-import com.google.javascript.rhino.jstype.UnionType;\n \n import java.io.IOException;\n import java.io.InputStreamReader;\n       Collection<JSType> alternates;\n       if (type.isUnionType()) {\n         alternates = Sets.newTreeSet(ALPHA);\n-        Iterables.addAll(alternates, ((UnionType)type).getAlternates());\n+        Iterables.addAll(alternates, type.toMaybeUnionType().getAlternates());\n       } else {\n         alternates = ImmutableList.of(type);\n       }\n--- a/src/com/google/javascript/jscomp/TightenTypes.java\n+++ b/src/com/google/javascript/jscomp/TightenTypes.java\n import com.google.javascript.rhino.jstype.StaticReference;\n import com.google.javascript.rhino.jstype.StaticScope;\n import com.google.javascript.rhino.jstype.StaticSlot;\n-import com.google.javascript.rhino.jstype.UnionType;\n \n import java.util.Collection;\n import java.util.Iterator;\n     private Collection<Action> getImplicitActionsFromCall(\n         Node n, JSType recvType) {\n       Node receiver = n.getFirstChild();\n-      if (recvType instanceof UnionType) {\n+      if (recvType.isUnionType()) {\n         List<Action> actions = Lists.newArrayList();\n-        for (JSType alt : ((UnionType) recvType).getAlternates()) {\n+        for (JSType alt : recvType.toMaybeUnionType().getAlternates()) {\n           actions.addAll(getImplicitActionsFromCall(n, alt));\n         }\n         return actions;\n \n     private Collection<Action> getImplicitActionsFromArgument(\n         Node arg, ObjectType thisType, JSType paramType) {\n-      if (paramType instanceof UnionType) {\n+      if (paramType.isUnionType()) {\n         List<Action> actions = Lists.newArrayList();\n-        for (JSType paramAlt : ((UnionType) paramType).getAlternates()) {\n+        for (JSType paramAlt : paramType.toMaybeUnionType().getAlternates()) {\n           actions.addAll(\n               getImplicitActionsFromArgument(arg, thisType, paramAlt));\n         }\n     private Collection<Action> getImplicitActionsFromProp(\n         JSType jsType, String prop, Node fnNode) {\n       List<Action> actions = Lists.newArrayList();\n-      if (jsType instanceof UnionType) {\n+      if (jsType.isUnionType()) {\n         boolean found = false;\n-        for (JSType alt : ((UnionType) jsType).getAlternates()) {\n+        for (JSType alt : jsType.toMaybeUnionType().getAlternates()) {\n           ObjectType altObj = ObjectType.cast(alt);\n           if (altObj != null) {\n             actions.addAll(getImplicitActionsFromPropNonUnion(\n \n     if (jsType.isUnionType()) {\n       ConcreteType type = ConcreteType.NONE;\n-      for (JSType alt : ((UnionType) jsType).getAlternates()) {\n+      for (JSType alt : jsType.toMaybeUnionType().getAlternates()) {\n         type = type.unionWith(createType(alt));\n       }\n       return type;\n    */\n   private ConcreteType createTypeWithSubTypes(JSType jsType) {\n     ConcreteType ret = ConcreteType.NONE;\n-    if (jsType instanceof UnionType) {\n-      for (JSType alt : ((UnionType) jsType).getAlternates()) {\n+    if (jsType.isUnionType()) {\n+      for (JSType alt : jsType.toMaybeUnionType().getAlternates()) {\n         ret = ret.unionWith(createTypeWithSubTypes(alt));\n       }\n     } else {\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n import com.google.javascript.rhino.jstype.StaticSlot;\n-import com.google.javascript.rhino.jstype.UnionType;\n \n import java.util.Collection;\n import java.util.Iterator;\n       if (literals.booleanValues == BooleanLiteralSet.EMPTY &&\n           getNativeType(BOOLEAN_TYPE).isSubtype(type)) {\n         // Exclusion only make sense for a union type.\n-        if (type instanceof UnionType) {\n-          type = ((UnionType) type).getRestrictedUnion(\n+        if (type.isUnionType()) {\n+          type = type.toMaybeUnionType().getRestrictedUnion(\n               getNativeType(BOOLEAN_TYPE));\n         }\n       }\n--- a/src/com/google/javascript/jscomp/TypeValidator.java\n+++ b/src/com/google/javascript/jscomp/TypeValidator.java\n import com.google.javascript.rhino.jstype.JSTypeNative;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n-import com.google.javascript.rhino.jstype.UnionType;\n \n import java.text.MessageFormat;\n import java.util.Iterator;\n   }\n \n   private boolean containsForwardDeclaredUnresolvedName(JSType type) {\n-    if (type instanceof UnionType) {\n-      for (JSType alt : ((UnionType) type).getAlternates()) {\n+    if (type.isUnionType()) {\n+      for (JSType alt : type.toMaybeUnionType().getAlternates()) {\n         if (containsForwardDeclaredUnresolvedName(alt)) {\n           return true;\n         }\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n   private void appendVarArgsString(StringBuilder builder, JSType paramType) {\n     if (paramType.isUnionType()) {\n       // Remove the optionalness from the var arg.\n-      paramType = ((UnionType) paramType).getRestrictedUnion(\n+      paramType = paramType.toMaybeUnionType().getRestrictedUnion(\n           registry.getNativeType(JSTypeNative.VOID_TYPE));\n     }\n     builder.append(\"...[\").append(paramType.toString()).append(\"]\");\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n     return false;\n   }\n \n-  public boolean isUnionType() {\n-    return false;\n+  public final boolean isUnionType() {\n+    return toMaybeUnionType() != null;\n+  }\n+\n+  /**\n+   * Downcasts this to a UnionType, or returns null if this is not a UnionType.\n+   *\n+   * Named in honor of Haskell's Maybe type constructor.\n+   */\n+  public UnionType toMaybeUnionType() {\n+    return null;\n   }\n \n   public boolean isFunctionType() {\n     } else if (thatType.isSubtype(thisType)) {\n       return filterNoResolvedType(thatType);\n     } else if (thisType.isUnionType()) {\n-      return ((UnionType) thisType).meet(thatType);\n+      return thisType.toMaybeUnionType().meet(thatType);\n     } else if (thatType.isUnionType()) {\n-      return ((UnionType) thatType).meet(thisType);\n+      return thatType.toMaybeUnionType().meet(thisType);\n     }\n \n     if (thisType instanceof EnumElementType) {\n       // inf(UnresolvedType1, UnresolvedType2) needs to resolve\n       // to the base unresolved type, so that the relation is symmetric.\n       return type.getNativeType(JSTypeNative.NO_RESOLVED_TYPE);\n-    } else if (type instanceof UnionType) {\n-      UnionType unionType = (UnionType) type;\n+    } else if (type.isUnionType()) {\n+      UnionType unionType = type.toMaybeUnionType();\n       boolean needsFiltering = false;\n       for (JSType alt : unionType.getAlternates()) {\n         if (alt.isNoResolvedType()) {\n    */\n   public TypePair getTypesUnderEquality(JSType that) {\n     // unions types\n-    if (that instanceof UnionType) {\n+    if (that.isUnionType()) {\n       TypePair p = that.getTypesUnderEquality(this);\n       return new TypePair(p.typeB, p.typeA);\n     }\n    */\n   public TypePair getTypesUnderInequality(JSType that) {\n     // unions types\n-    if (that instanceof UnionType) {\n+    if (that.isUnionType()) {\n       TypePair p = that.getTypesUnderInequality(this);\n       return new TypePair(p.typeB, p.typeA);\n     }\n    */\n   public TypePair getTypesUnderShallowInequality(JSType that) {\n     // union types\n-    if (that instanceof UnionType) {\n+    if (that.isUnionType()) {\n       TypePair p = that.getTypesUnderShallowInequality(this);\n       return new TypePair(p.typeB, p.typeA);\n     }\n       return true;\n     }\n     // unions\n-    if (thatType instanceof UnionType) {\n-      UnionType union = (UnionType)thatType;\n+    if (thatType.isUnionType()) {\n+      UnionType union = thatType.toMaybeUnionType();\n       for (JSType element : union.alternates) {\n         if (thisType.isSubtype(element)) {\n           return true;\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n     } else if (type instanceof NamedType) {\n       addReferenceTypeIndexedByProperty(\n           propertyName, ((NamedType) type).getReferencedType());\n-    } else if (type instanceof UnionType) {\n-      for (JSType alternate : ((UnionType) type).getAlternates()) {\n+    } else if (type.isUnionType()) {\n+      for (JSType alternate : type.toMaybeUnionType().getAlternates()) {\n         addReferenceTypeIndexedByProperty(propertyName, alternate);\n       }\n     }\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n     }\n \n     // Union types\n-    if (that instanceof UnionType) {\n+    if (that.isUnionType()) {\n       // The static {@code JSType.isSubtype} check already decomposed\n       // union types, so we don't need to check those again.\n       return false;\n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n   }\n \n   @Override\n+  public UnionType toMaybeUnionType() {\n+    return referencedType.toMaybeUnionType();\n+  }\n+\n+  @Override\n   public TernaryValue testForEquality(JSType that) {\n     return referencedType.testForEquality(that);\n   }\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n       }\n     }\n \n-    if (that instanceof UnionType) {\n-      for (JSType otherAlternate : ((UnionType) that).alternates) {\n+    if (that.isUnionType()) {\n+      for (JSType otherAlternate : that.toMaybeUnionType().alternates) {\n         if (otherAlternate.isSubtype(this)) {\n           builder.addAlternate(otherAlternate);\n         }\n    */\n   @Override\n   public boolean isEquivalentTo(JSType object) {\n-    if (object instanceof UnionType) {\n-      UnionType that = (UnionType) object;\n+    if (object.isUnionType()) {\n+      UnionType that = object.toMaybeUnionType();\n       if (alternates.size() != that.alternates.size()) {\n         return false;\n       }\n   }\n \n   @Override\n-  public boolean isUnionType() {\n-    return true;\n+  public UnionType toMaybeUnionType() {\n+    return this;\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n           alternate.isCheckedUnknownType();\n     }\n     if (!isAllType && !isNativeUnknownType) {\n-      if (alternate instanceof UnionType) {\n-        UnionType union = (UnionType) alternate;\n+      if (alternate.isUnionType()) {\n+        UnionType union = alternate.toMaybeUnionType();\n         for (JSType unionAlt : union.getAlternates()) {\n           addAlternate(unionAlt);\n         }", "timestamp": 1313606606, "metainfo": ""}