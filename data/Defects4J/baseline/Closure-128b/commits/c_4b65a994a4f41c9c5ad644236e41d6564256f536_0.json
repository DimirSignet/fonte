{"sha": "4b65a994a4f41c9c5ad644236e41d6564256f536", "log": "clean up some duplicate code and grab back some memory  R=dimvar DELTA=42  (1 added, 33 deleted, 8 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5375   ", "commit": "\n--- a/src/com/google/javascript/jscomp/Scope.java\n+++ b/src/com/google/javascript/jscomp/Scope.java\n import com.google.javascript.rhino.ErrorReporter;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.Node;\n-import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.jstype.JSType;\n import com.google.javascript.rhino.jstype.ObjectType;\n import com.google.javascript.rhino.jstype.StaticReference;\n     private JSType type;\n \n     /**\n-     * The variable's doc info.\n-     */\n-    private final JSDocInfo info;\n-\n-    /**\n      * Whether the variable's type has been inferred or is declared. An inferred\n      * type may change over time (as more code is discovered), whereas a\n      * declared type is a static contract that must be matched.\n     /** Input source */\n     final CompilerInput input;\n \n-    /** Whether the variable is a define */\n-    final boolean isDefine;\n-\n     /**\n      * The index at which the var is declared. e..g if it's 0, it's the first\n      * declared variable in that scope\n      * @param inferred whether its type is inferred (as opposed to declared)\n      */\n     private Var(boolean inferred, String name, Node nameNode, JSType type,\n-                Scope scope, int index, CompilerInput input, boolean isDefine,\n-                JSDocInfo info) {\n+                Scope scope, int index, CompilerInput input) {\n       this.name = name;\n       this.nameNode = nameNode;\n       this.type = type;\n       this.scope = scope;\n       this.index = index;\n       this.input = input;\n-      this.isDefine = isDefine;\n-      this.info = info;\n       this.typeInferred = inferred;\n     }\n \n      * A variable is a define if it is annotated by {@code @define}.\n      */\n     public boolean isDefine() {\n-      return isDefine;\n+      JSDocInfo info = getJSDocInfo();\n+      return info != null && info.isDefine();\n     }\n \n     public Node getInitialValue() {\n-      Node parent = getParentNode();\n-      int pType = parent.getType();\n-      if (pType == Token.FUNCTION) {\n-        return parent;\n-      } else if (pType == Token.ASSIGN) {\n-        return parent.getLastChild();\n-      } else if (pType == Token.VAR) {\n-        return nameNode.getFirstChild();\n-      } else {\n-        return null;\n-      }\n+      return NodeUtil.getRValueOfLValue(nameNode);\n     }\n \n     /**\n      */\n     @Override\n     public JSDocInfo getJSDocInfo() {\n-      return info;\n+      return nameNode == null ? null : NodeUtil.getBestJSDocInfo(nameNode);\n     }\n \n     /**\n     }\n \n     public boolean isNoShadow() {\n-      if (info != null && info.isNoShadow()) {\n-        return true;\n-      } else {\n-        return false;\n-      }\n+      JSDocInfo info = getJSDocInfo();\n+      return info != null && info.isNoShadow();\n     }\n \n     @Override public boolean equals(Object other) {\n         null,  // no type info\n         scope,\n         -1,    // no variable index\n-        null,  // input,\n-        false, // not a define\n-        null   // no jsdoc\n+        null   // input\n         );\n     }\n \n     // Make sure that it's declared only once\n     Preconditions.checkState(vars.get(name) == null);\n \n-    // native variables do not have a name node.\n-    JSDocInfo info = nameNode == null\n-        ? null : NodeUtil.getBestJSDocInfo(nameNode);\n-\n-    Var var = new Var(inferred, name, nameNode, type, this, vars.size(), input,\n-        info != null && info.isDefine(), info);\n-\n+    Var var = new Var(inferred, name, nameNode, type, this, vars.size(), input);\n     vars.put(name, var);\n     return var;\n   }", "timestamp": 1344993800, "metainfo": ""}