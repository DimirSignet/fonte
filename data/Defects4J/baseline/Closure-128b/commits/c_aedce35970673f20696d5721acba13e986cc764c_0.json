{"sha": "aedce35970673f20696d5721acba13e986cc764c", "log": "Fix how source line numbers are stored in the source files. Fixes issue 575  R=jschorr DELTA=81  (62 added, 3 deleted, 16 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3704   ", "commit": "\n--- a/src/com/google/debugging/sourcemap/FilePosition.java\n+++ b/src/com/google/debugging/sourcemap/FilePosition.java\n  * Represents a position in a source file.\n  *\n  */\n-/**\n- * Represents a position in a source file.\n- */\n public class FilePosition {\n   private final int line;\n   private final int column;\n   }\n \n   /**\n-   * Returns the line number of this postion.\n+   * Returns the line number of this position.\n+   * Note: The v1 and v2 source maps use a line number with the first line\n+   * being 1, whereas the v3 source map corrects this and uses a first line\n+   * number of 0 to be consistent with the column representation.\n    */\n   public int getLine() {\n     return line;\n   }\n \n   /**\n-   * Returns the character index on the line\n-   * of this position.\n+   * @return the character index on the line\n+   * of this position, with the first column being 0.\n    */\n   public int getColumn() {\n     return column;\n--- a/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n+++ b/src/com/google/debugging/sourcemap/SourceMapConsumerV3.java\n     if (entry.getSourceFileId() == UNMAPPED) {\n       return null;\n     } else {\n+      // Adjust the line/column here to be start at 1.\n       Builder x = OriginalMapping.newBuilder()\n         .setOriginalFile(sources[entry.getSourceFileId()])\n-        .setLineNumber(entry.getSourceLine())\n-        .setColumnPosition(entry.getSourceColumn());\n+        .setLineNumber(entry.getSourceLine() + 1)\n+        .setColumnPosition(entry.getSourceColumn() + 1);\n       if (entry.getNameId() != UNMAPPED) {\n         x.setIdentifier(names[entry.getNameId()]);\n       }\n--- a/src/com/google/javascript/jscomp/SourceMap.java\n+++ b/src/com/google/javascript/jscomp/SourceMap.java\n import com.google.debugging.sourcemap.SourceMapFormat;\n import com.google.debugging.sourcemap.SourceMapGenerator;\n import com.google.debugging.sourcemap.SourceMapGeneratorFactory;\n+import com.google.debugging.sourcemap.SourceMapGeneratorV1;\n+import com.google.debugging.sourcemap.SourceMapGeneratorV2;\n import com.google.javascript.rhino.Node;\n \n import java.io.IOException;\n \n     String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);\n \n+    // Strangely, Rhino source lines are one based but columns are\n+    // zero based.\n+    // We don't change this for the v1 or v2 source maps but for\n+    // v3 we make them both 0 based.\n+    int lineBaseOffset = 1;\n+    if (generator instanceof SourceMapGeneratorV1\n+        || generator instanceof SourceMapGeneratorV2) {\n+      lineBaseOffset = 0;\n+    }\n+\n     generator.addMapping(\n         sourceFile, originalName,\n-        new FilePosition(node.getLineno(), node.getCharno()),\n+        new FilePosition(node.getLineno() - lineBaseOffset, node.getCharno()),\n         outputStartPosition, outputEndPosition);\n   }\n \n--- a/test/com/google/debugging/sourcemap/SourceMapGeneratorV1Test.java\n+++ b/test/com/google/debugging/sourcemap/SourceMapGeneratorV1Test.java\n  */\n public class SourceMapGeneratorV1Test extends SourceMapTestCase {\n \n+  public SourceMapGeneratorV1Test() {\n+    disableColumnValidation();\n+  }\n+\n   @Override\n   protected SourceMapConsumer getSourceMapConsumer() {\n     return new SourceMapConsumerV1();\n--- a/test/com/google/debugging/sourcemap/SourceMapGeneratorV2Test.java\n+++ b/test/com/google/debugging/sourcemap/SourceMapGeneratorV2Test.java\n  *\n  */\n public class SourceMapGeneratorV2Test extends SourceMapTestCase {\n+\n+  public SourceMapGeneratorV2Test() {\n+    disableColumnValidation();\n+  }\n \n   @Override\n   protected SourceMapConsumer getSourceMapConsumer() {\n--- a/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java\n+++ b/test/com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java\n  */\n public class SourceMapGeneratorV3Test extends SourceMapTestCase {\n \n+  public SourceMapGeneratorV3Test() {\n+  }\n+\n   @Override\n   protected SourceMapConsumer getSourceMapConsumer() {\n     return new SourceMapConsumerV3();\n                    \"\\\"version\\\":3,\\n\" +\n                    \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                    \"\\\"lineCount\\\":1,\\n\" +\n-                   \"\\\"mappings\\\":\\\"AACAA,QAASA,UAAS,EAAG;\\\",\\n\" +\n+                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,EAAG;\\\",\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                    \"\\\"names\\\":[\\\"__BASIC__\\\"]\\n\" +\n                    \"}\\n\");\n                    \"\\\"version\\\":3,\\n\" +\n                    \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                    \"\\\"lineCount\\\":1,\\n\" +\n-                   \"\\\"mappings\\\":\\\"AACAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,\" +\n+                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,UAAS,CAACC,UAAD,CAAaC,UAAb,\" +\n                        \"CAAyB,CAAE,IAAIC,QAAU,SAAhB;\\\",\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                    \"\\\"names\\\":[\\\"__BASIC__\\\",\\\"__PARAM1__\\\",\\\"__PARAM2__\\\",\" +\n                    \"}\\n\");\n   }\n \n+  public void testGoldenOutput0a() throws Exception {\n+    // Empty source map test\n+    checkSourceMap(\"a;\",\n+\n+                   \"{\\n\" +\n+                   \"\\\"version\\\":3,\\n\" +\n+                   \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n+                   \"\\\"lineCount\\\":1,\\n\" +\n+                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n+                   \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n+                   \"\\\"names\\\":[\\\"a\\\"]\\n\" +\n+                   \"}\\n\");\n+  }\n+\n   public void testGoldenOutput1() throws Exception {\n     detailLevel = SourceMap.DetailLevel.ALL;\n \n                    \"\\\"version\\\":3,\\n\" +\n                    \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                    \"\\\"lineCount\\\":1,\\n\" +\n-                   \"\\\"mappings\\\":\\\"AACAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n+                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                        \"CAAW,CAAED,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkB,CAAG,\" +\n                        \"OAAOD,IAA9B;\\\",\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                    \"\\\"version\\\":3,\\n\" +\n                    \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                    \"\\\"lineCount\\\":1,\\n\" +\n-                   \"\\\"mappings\\\":\\\"AACAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE,\" +\n+                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAATA,CAAWC,GAAXD,CAAgBE,\" +\n                        \"GAAhBF,EAAuBC,GAAvBD,CAA6BC,GAA7BD,CAAmCE,GAAnCF,\" +\n                        \"SAAmDC,IAAnDD;\\\",\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                    \"\\\"version\\\":3,\\n\" +\n                    \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                    \"\\\"lineCount\\\":1,\\n\" +\n-                   \"\\\"mappings\\\":\\\"AACAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n+                   \"\\\"mappings\\\":\\\"AAAAA,QAASA,EAAC,CAACC,GAAD,CAAMC,GAAN,\" +\n                        \"CAAW,CAIrBD,GAAA,CAAMA,GAAN,CAAYC,GAAZ,CAAkBD,\" +\n                        \"GAClB,OAAOA,IALc;\\\",\\n\" +\n                    \"\\\"sources\\\":[\\\"testcode\\\"],\\n\" +\n                    \"\\\"version\\\":3,\\n\" +\n                    \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                    \"\\\"lineCount\\\":1,\\n\" +\n-                   \"\\\"mappings\\\":\\\"AACAA;\\\",\\n\" +\n+                   \"\\\"mappings\\\":\\\"AAAAA;\\\",\\n\" +\n                    \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                    \"\\\"names\\\":[\\\"foo\\\"]\\n\" +\n                    \"}\\n\");\n                    \"\\\"version\\\":3,\\n\" +\n                    \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n                    \"\\\"lineCount\\\":1,\\n\" +\n-                   \"\\\"mappings\\\":\\\"AACAA,GAAOC,IAAOC;\\\",\\n\" +\n+                   \"\\\"mappings\\\":\\\"AAAAA,GAAOC,IAAOC;\\\",\\n\" +\n                    \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n                    \"\\\"names\\\":[\\\"foo\\\",\\\"boo\\\",\\\"goo\\\"]\\n\" +\n                    \"}\\n\");\n         \"\\\"version\\\":3,\\n\" +\n         \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n         \"\\\"lineCount\\\":6,\\n\" +\n-        \"\\\"mappings\\\":\\\"A;;;;AAIA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,\" +\n+        \"\\\"mappings\\\":\\\"A;;;;AAGA,IAAIA,IAAIC,CAAJD,CAAQ,mxCAARA;AAA8xCE,\" +\n             \"CAA9xCF,CAAkyCG,CAAlyCH,CAAsyCI;\\\",\\n\" +\n         \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n         \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n         \"\\\"version\\\":3,\\n\" +\n         \"\\\"file\\\":\\\"testcode\\\",\\n\" +\n         \"\\\"lineCount\\\":6,\\n\" +\n-        \"\\\"mappings\\\":\\\"A;;;;IAIIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG,\" +\n+        \"\\\"mappings\\\":\\\"A;;;;IAGIA,IAAIC,CAAJD;AAA8xCE,CAA9xCF,CAAkyCG,\" +\n             \"CAAlyCH,CAAsyCI;\\\",\\n\" +\n         \"\\\"sources\\\":[\\\"c:\\\\\\\\myfile.js\\\"],\\n\" +\n         \"\\\"names\\\":[\\\"foo\\\",\\\"a\\\",\\\"c\\\",\\\"d\\\",\\\"e\\\"]\\n\" +\n--- a/test/com/google/debugging/sourcemap/SourceMapTestCase.java\n+++ b/test/com/google/debugging/sourcemap/SourceMapTestCase.java\n  */\n public abstract class SourceMapTestCase extends TestCase {\n \n-  public SourceMapTestCase() {}\n+  private boolean validateColumns = true;\n+\n+  public SourceMapTestCase() {\n+  }\n+\n+  void disableColumnValidation() {\n+    validateColumns = false;\n+  }\n+\n \n   static final JSSourceFile[] EXTERNS = {\n       JSSourceFile.fromCode(\"externs\", \"\")\n       assertEquals(mapping.getLineNumber(),\n                    inputToken.position.getLine() + 1);\n \n+      int start = inputToken.position.getColumn() + 1;\n+      if (inputToken.tokenName.startsWith(\"STR\")) {\n+        // include the preceding quote.\n+        start--;\n+      }\n+\n+      if (validateColumns) {\n+        assertEquals(start, mapping.getColumnPosition());\n+      }\n+\n       // Ensure that if the token name does not being with an 'STR' (meaning a\n       // string) it has an original name.\n       if (!inputToken.tokenName.startsWith(\"STR\")) {\n--- a/test/com/google/javascript/jscomp/SourceMapTest.java\n+++ b/test/com/google/javascript/jscomp/SourceMapTest.java\n  * @author johnlenz@google.com (John Lenz)\n  */\n public class SourceMapTest extends SourceMapTestCase {\n+\n+  public SourceMapTest() {\n+  }\n \n   private List<SourceMap.LocationMapping> mappings;\n ", "timestamp": 1321311815, "metainfo": ""}