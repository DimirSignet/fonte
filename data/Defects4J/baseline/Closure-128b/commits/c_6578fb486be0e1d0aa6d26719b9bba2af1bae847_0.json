{"sha": "6578fb486be0e1d0aa6d26719b9bba2af1bae847", "log": "Replacing property access \"something.$inject\" to array element access \"something['$inject']\" to prevent $inject property from being optimized by property_renaming. Alternative to this is reduce the priority of angular pass in DefaultPassConfig. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43134176", "commit": "\n--- a/src/com/google/javascript/jscomp/AngularPass.java\n+++ b/src/com/google/javascript/jscomp/AngularPass.java\n       // creates `something.$inject = ['param1', 'param2']` node.\n       Node statement = IR.exprResult(\n           IR.assign(\n-              NodeUtil.newQualifiedNameNode(convention,\n-                  name + \".\" + INJECT_PROPERTY_NAME),\n+              IR.getelem(\n+                  NodeUtil.newQualifiedNameNode(convention, name),\n+                  IR.string(INJECT_PROPERTY_NAME)),\n               dependenciesArray\n           )\n       );\n--- a/test/com/google/javascript/jscomp/AngularPassTest.java\n+++ b/test/com/google/javascript/jscomp/AngularPassTest.java\n         \"function fn(a, b) {}\",\n \n         \"function fn(a, b) {}\\n\" +\n-        \"fn.$inject=['a', 'b']\"\n+        \"fn['$inject']=['a', 'b']\"\n     );\n \n     testSame(\n \n         \"var ns = {};\\n\" +\n         \"ns.fn = function (a, b) {}\\n\" +\n-        \"ns.fn.$inject=['a', 'b']\"\n+        \"ns.fn['$inject']=['a', 'b']\"\n     );\n \n     testSame(\n \n         \"var ns = {};ns.subns = {};\\n\" +\n         \"ns.subns.fn = function (a, b) {}\\n\" +\n-        \"ns.subns.fn.$inject=['a', 'b']\"\n+        \"ns.subns.fn['$inject']=['a', 'b']\"\n     );\n \n     testSame(\n         \"var fn = function (a, b) {}\",\n \n         \"var fn = function (a, b) {};\\n\" +\n-        \"fn.$inject=['a', 'b']\"\n+        \"fn['$inject']=['a', 'b']\"\n     );\n \n     testSame(\n         \"var fn = ns.func = function (a, b) {}\",\n \n         \"var ns = {}; var fn = ns.func = function (a, b) {};\\n\" +\n-        \"fn.$inject=['a', 'b']\"\n+        \"fn['$inject']=['a', 'b']\"\n     );\n \n     testSame(\n \n         \"(function() {\" +\n         \"var ns = {}; var fn = ns.func = function (a, b) {};\\n\" +\n-        \"fn.$inject=['a', 'b']\" +\n+        \"fn['$inject']=['a', 'b']\" +\n         \"})()\"\n     );\n \n         \"var fn = 10;\" +\n         \"(function() {\" +\n         \"var ns = {}; var fn = ns.func = function (a, b) {};\\n\" +\n-        \"fn.$inject=['a', 'b']\" +\n+        \"fn['$inject']=['a', 'b']\" +\n         \"})()\"\n     );\n   }\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n         \"/** @ngInject */ var b = function f(a, b, c) {} \",\n \n         \"function f() {} \" +\n-        \"function g(a) {} g.$inject=['a'];\" +\n-        \"var b = function f(a, b, c) {}; b.$inject=['a', 'b', 'c']\");\n+        \"function g(a) {} g['$inject']=['a'];\" +\n+        \"var b = function f(a, b, c) {}; b['$inject']=['a', 'b', 'c']\");\n   }\n \n   public void testExportTestFunctionsOff() {", "timestamp": 1361927906, "metainfo": ""}