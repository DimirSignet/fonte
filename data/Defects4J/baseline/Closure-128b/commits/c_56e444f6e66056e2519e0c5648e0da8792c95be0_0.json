{"sha": "56e444f6e66056e2519e0c5648e0da8792c95be0", "log": "Minor cleanup of Node.getQualifiedName calls.  R=nicksantos DELTA=13  (1 added, 2 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5534   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java\n+++ b/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java\n \n     private void visitNewNode(NodeTraversal t, Node n) {\n       Node qNameNode = n.getFirstChild();\n-      String qName = qNameNode.getQualifiedName();\n \n       // If the ctor is something other than a qualified name, ignore it.\n-      if (qName == null || qName.isEmpty()) {\n+      if (!qNameNode.isQualifiedName()) {\n         return;\n       }\n \n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n           String suggestion = \"\";\n           if (type instanceof JSType) {\n             JSType jsType = (JSType) type;\n-            String qName = n.getFirstChild().getQualifiedName();\n             if (jsType.isAllType() || jsType.isUnknownType()) {\n               if (n.getFirstChild().isThis()) {\n                 suggestion = \"The \\\"this\\\" object is unknown in the function,\"+\n                     \"consider using @this\";\n               } else {\n+                String qName = n.getFirstChild().getQualifiedName();\n                 suggestion = \"Consider casting \" + qName +\n                     \" if you know it's type.\";\n               }\n--- a/src/com/google/javascript/jscomp/ExternExportsPass.java\n+++ b/src/com/google/javascript/jscomp/ExternExportsPass.java\n         }\n \n         if (parent.isAssign() || parent.isVar()) {\n-          definitionMap.put(n.getQualifiedName(), parent);\n+          definitionMap.put(name, parent);\n         }\n \n         // Only handle function calls. This avoids assignments\n           return;\n         }\n \n-        if (exportPropertyFunctionNames.contains(n.getQualifiedName())) {\n+        if (exportPropertyFunctionNames.contains(name)) {\n           handlePropertyExport(parent);\n         }\n \n-        if (exportSymbolFunctionNames.contains(n.getQualifiedName())) {\n+        if (exportSymbolFunctionNames.contains(name)) {\n           handleSymbolExport(parent);\n         }\n     }\n \n     // Confirm the arguments are the expected types. If they are not,\n     // then we have an export that we cannot statically identify.\n-    if (objectArg.getQualifiedName() == null) {\n+    if (!objectArg.isQualifiedName()) {\n       return;\n     }\n ", "timestamp": 1348265156, "metainfo": ""}