{"sha": "e859f6f557d0ac39f3bf45949691b2a0e150a2e4", "log": "Automated g4 rollback.  *** Reason for rollback ***  Breaks command-line result status  *** Original change description ***  Wire JSCompiler up to logging.  R=nicksantos DELTA=88  (3 added, 80 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=181005   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n   }\n \n   /**\n-   * Runs the Compiler and calls exit() with the exit status of the\n-   * compiler. By default, exit() is just System.exit().\n+   * Runs the Compiler and calls System.exit() with the exit status of the\n+   * compiler.\n    */\n   final public void run() {\n     int result = 0;\n     int runs = 1;\n-    Throwable error = null;\n     if (config.computePhaseOrdering) {\n       runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;\n       PhaseOptimizer.randomizeLoops();\n         result = doRun();\n         runTimeStats.recordEndRun();\n       }\n+    } catch (AbstractCommandLineRunner.FlagUsageException e) {\n+      System.err.println(e.getMessage());\n+      result = -1;\n     } catch (Throwable t) {\n-      error = t;\n-    }\n-    exit(runTimeStats, error);\n-  }\n-\n-  /**\n-   * Exits the current process. Prints out any \"process\" statistics\n-   * that the user might need to know about.\n-   */\n-  void exit(RunTimeStats runTimeStats, Throwable error) {\n-    int result = 0;\n-    if (error instanceof AbstractCommandLineRunner.FlagUsageException) {\n-      System.err.println(error.getMessage());\n-      result = -1;\n-    } else if (error != null) {\n-      error.printStackTrace();\n+      t.printStackTrace();\n       result = -2;\n     }\n-\n     if (config.computePhaseOrdering) {\n       runTimeStats.outputBestPhaseOrdering();\n     }\n-\n     System.exit(result);\n   }\n \n     out.append(\"\\n\");\n   }\n \n-  class RunTimeStats {\n+  private class RunTimeStats {\n     private long bestRunTime = Long.MAX_VALUE;\n     private long worstRunTime = Long.MIN_VALUE;\n-    long lastStartTime = 0;\n+    private long lastStartTime = 0;\n     private List<List<String>> loopedPassesInBestRun = null;\n \n     /**", "timestamp": 1282267051, "metainfo": ""}