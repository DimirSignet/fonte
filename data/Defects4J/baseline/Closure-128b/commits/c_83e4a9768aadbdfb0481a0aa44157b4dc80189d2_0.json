{"sha": "83e4a9768aadbdfb0481a0aa44157b4dc80189d2", "log": "Fix a null pointer exception in TypedScopeCreator  Add AST annotations for @javadispatch    ", "commit": "\n--- a/src/com/google/javascript/jscomp/NodeTypeNormalizer.java\n+++ b/src/com/google/javascript/jscomp/NodeTypeNormalizer.java\n       }\n     }\n \n+    // TODO(johnlenz): Determine if it is possible to simply use the javadoc\n+    // everywhere rather than use IS_DISPATCHER.\n+    /*\n+     * Translate dispatcher info into the property expected node.\n+     */\n+    if (n.getJSDocInfo() != null && n.getJSDocInfo().isJavaDispatch()) {\n+      if (n.getType() == Token.ASSIGN) {\n+        Node fnNode = n.getLastChild();\n+        Preconditions.checkState(fnNode.getType() == Token.FUNCTION);\n+        fnNode.putBooleanProp(Node.IS_DISPATCHER, true);\n+      }\n+    }\n+\n     for (Node child = n.getFirstChild();\n          child != null; child = child.getNext()) {\n       normalizeJsDocAnnotations(child);\n--- a/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/TypedCodeGenerator.java\n     //   LP\n     //     NAME param1\n     //     NAME param2\n-    Node paramNode = funType.getSource().getFirstChild().getNext()\n-        .getFirstChild();\n+    Node fnNode = funType.getSource();\n+    Node paramNode = NodeUtil.getFnParameters(fnNode).getFirstChild();\n \n     // Param types\n     for (Node n : funType.getParameters()) {\n         sb.append(\" * @interface\\n\");\n       }\n     }\n+\n+    if (fnNode.getBooleanProp(Node.IS_DISPATCHER)) {\n+      sb.append(\" * @javadispatch\\n\");\n+    }\n+\n     sb.append(\" */\\n\");\n     return sb.toString();\n   }\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n         typeRegistry.forwardDeclareType(typedef);\n \n         JSDocInfo info = candidate.getJSDocInfo();\n-        JSType realType = info == null ? null :\n-            info.getType().evaluate(scope);\n+        JSType realType = null;\n+        if (info != null && info.getType() != null) {\n+          realType = info.getType().evaluate(scope);\n+        }\n+\n         if (realType == null) {\n           compiler.report(\n               JSError.make(\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n     assertPrint(\"1 || ({})\", \"1||{}\");\n     assertPrint(\"({}) ? 1 : 2\", \"({})?1:2\");\n     assertPrint(\"0 ? ({}) : 2\", \"0?{}:2\");\n-    assertPrint(\"0 ? 1 : ({})\", \"0?1:{}\");    \n+    assertPrint(\"0 ? 1 : ({})\", \"0?1:{}\");\n     assertPrint(\"typeof ({})\", \"typeof{}\");\n     assertPrint(\"f({})\", \"f({})\");\n \n     assertPrint(\"+ - + + - + 3\", \"+-+ +-+3\"); // chained unary plus/minus\n     assertPrint(\"+(--x)\", \"+--x\");\n     assertPrint(\"-(++x)\", \"-++x\");\n-    \n+\n     // needs a space to prevent an ambiguous parse\n     assertPrint(\"-(--x)\", \"- --x\");\n     assertPrint(\"!(~~5)\", \"!~~5\");\n         + \"/**\\n * @extends {a.Foo}\\n * @implements {a.I}\\n\"\n         + \" * @implements {a.I2}\\n * @constructor\\n */\\n\"\n         + \"a.Bar = function() {\\n}\");\n+  }\n+\n+  public void testTypeAnnotationsDispatcher1() {\n+    assertTypeAnnotations(\n+        \"var a = {};\\n\" +\n+        \"/** \\n\" +\n+        \" * @constructor \\n\" +\n+        \" * @javadispatch \\n\" +\n+        \" */\\n\" +\n+        \"a.Foo = function(){}\",\n+        \"var a = {};\\n\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @javadispatch\\n\" +\n+        \" */\\n\" +\n+        \"a.Foo = function() {\\n\" +\n+        \"}\");\n+  }\n+\n+  public void testTypeAnnotationsDispatcher2() {\n+    assertTypeAnnotations(\n+        \"var a = {};\\n\" +\n+        \"/** \\n\" +\n+        \" * @constructor \\n\" +\n+        \" */\\n\" +\n+        \"a.Foo = function(){}\\n\" +\n+        \"/**\\n\" +\n+        \" * @javadispatch\\n\" +\n+        \" */\\n\" +\n+        \"a.Foo.prototype.foo = function() {};\",\n+\n+        \"var a = {};\\n\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" */\\n\" +\n+        \"a.Foo = function() {\\n\" +\n+        \"};\\n\" +\n+        \"/**\\n\" +\n+        \" * @javadispatch\\n\" +\n+        \" */\\n\" +\n+        \"a.Foo.prototype.foo = function() {\\n\" +\n+        \"}\");\n   }\n \n   private void assertPrettyPrint(String js, String expected) {\n     assertPrint(\"if(e1)function goo(){return true}\",\n         \"if(e1){function goo(){return true}}\");\n   }\n-  \n+\n   public void testExponents() {\n     assertPrint(\"1\", \"1\");\n     assertPrint(\"10\", \"10\");\n     assertPrint(\"1000000000000000000\", \"1E18\");\n     assertPrint(\"100000.0\", \"1E5\");\n     assertPrint(\"100000.1\", \"100000.1\");\n-    \n+\n     assertPrint(\"0.000001\", \"1.0E-6\");\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"Typedef for goog.Bar does not have any type information\");\n   }\n \n+  public void testMalformedOldTypeDef2() throws Exception {\n+    testTypes(\n+        \"var goog = {}; goog.typedef = true;\" +\n+        \"/** @typedef {boolean} */ goog.Bar = goog.typedef\",\n+        \"Typedef for goog.Bar does not have any type information\");\n+  }\n+\n   public void testDuplicateOldTypeDef() throws Exception {\n     testTypes(\n         \"var goog = {}; goog.typedef = true;\" +", "timestamp": 1265045741, "metainfo": ""}