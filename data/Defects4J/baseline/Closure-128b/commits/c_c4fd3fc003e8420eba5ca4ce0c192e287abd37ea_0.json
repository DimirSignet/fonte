{"sha": "c4fd3fc003e8420eba5ca4ce0c192e287abd37ea", "log": "Add \"--source_map_format\" to the open source command-line so users can still use Closure Inspector and experiment with the V3 format.  R=nicksantos DELTA=15  (15 added, 0 deleted, 0 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2537   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n         \"expand to the name of the output file that the source map \" +\n         \"corresponds to.\")\n     private String create_source_map = \"\";\n+\n+    @Option(name = \"--source_map_format\",\n+        usage = \"The source map format to produce. \" +\n+        \"Options: V1, V2, V3, DEFAULT. DEFAULT produces V2.\")\n+    private SourceMap.Format source_map_format = SourceMap.Format.DEFAULT;\n \n     // Used to define the flag, values are stored by the handler.\n     @SuppressWarnings(\"unused\")\n           .setModuleWrapper(flags.module_wrapper)\n           .setModuleOutputPathPrefix(flags.module_output_path_prefix)\n           .setCreateSourceMap(flags.create_source_map)\n+          .setSourceMapFormat(flags.source_map_format)\n           .setWarningGuardSpec(Flags.warningGuardSpec)\n           .setDefine(flags.define)\n           .setCharset(flags.charset)\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n         lastCompiler.getOptions().sourceMapFormat);\n   }\n \n+  public void testSourceMapFormat2() {\n+    args.add(\"--js_output_file\");\n+    args.add(\"/path/to/out.js\");\n+    args.add(\"--source_map_format=V3\");\n+    testSame(\"var x = 3;\");\n+    assertEquals(SourceMap.Format.V3,\n+        lastCompiler.getOptions().sourceMapFormat);\n+  }\n+\n   public void testCharSetExpansion() {\n     testSame(\"\");\n     assertEquals(\"US-ASCII\", lastCompiler.getOptions().outputCharset);", "timestamp": 1310063210, "metainfo": ""}