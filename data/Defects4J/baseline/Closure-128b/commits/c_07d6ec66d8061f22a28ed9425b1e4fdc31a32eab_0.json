{"sha": "07d6ec66d8061f22a28ed9425b1e4fdc31a32eab", "log": "Enable preserving old Asts when compiling for clients which can use the extra position info.  R=johnlenz,dimvar,nicksantos DELTA=94 (85 added, 0 deleted, 9 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5964   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCompiler.java\n+++ b/src/com/google/javascript/jscomp/AbstractCompiler.java\n import com.google.javascript.rhino.InputId;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.head.ErrorReporter;\n+import com.google.javascript.rhino.head.ast.AstRoot;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n \n import java.util.List;\n    *     returns null.\n    */\n   abstract Node ensureLibraryInjected(String resourceName);\n+\n+   /**\n+    * Stores the old parse tree for a given source file.\n+    * @param sourceName\n+    * @param astRoot\n+    */\n+   abstract void setOldParseTree(String sourceName, AstRoot astRoot);\n+\n+   /**\n+    * Gets an old format parse tree for a given source file.\n+    * @param sourceName The source file name to get the tree for.\n+    * @return The old format parse tree for the given source file.\n+    */\n+   abstract AstRoot getOldParseTreeByName(String sourceName);\n }\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.head.ErrorReporter;\n+import com.google.javascript.rhino.head.ast.AstRoot;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n \n import java.io.IOException;\n     ResourceBundle config = ResourceBundle.getBundle(CONFIG_RESOURCE);\n     return config.getString(\"compiler.date\");\n   }\n+\n+  /**\n+   * Stores the old parse tree for a given source file.\n+   * @param sourceName\n+   * @param oldAst\n+   */\n+  public void setOldParseTree(String sourceName, AstRoot oldAst) {\n+  }\n+\n+  /**\n+   * Gets an old format parse tree for a given source file.\n+   * @param sourceName\n+   * @return\n+   */\n+  public AstRoot getOldParseTreeByName(String sourceName) {\n+    return null;\n+  }\n }\n--- a/src/com/google/javascript/jscomp/JsAst.java\n+++ b/src/com/google/javascript/jscomp/JsAst.java\n   private void parse(AbstractCompiler compiler) {\n     try {\n       logger_.fine(\"Parsing: \" + sourceFile.getName());\n-      root = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n+      ParserRunner.ParseResult result = ParserRunner.parse(sourceFile, sourceFile.getCode(),\n           compiler.getParserConfig(),\n           compiler.getDefaultErrorReporter(),\n           logger_);\n+      root = result.ast;\n+      compiler.setOldParseTree(sourceFile.getName(), result.oldAst);\n     } catch (IOException e) {\n       compiler.report(\n           JSError.make(AbstractCompiler.READ_ERROR, sourceFile.getName()));\n--- a/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n+++ b/src/com/google/javascript/jscomp/parsing/ParserRunner.java\n    * @return The AST of the given text.\n    * @throws IOException\n    */\n-  public static Node parse(StaticSourceFile sourceFile,\n-                           String sourceString,\n-                           Config config,\n-                           ErrorReporter errorReporter,\n-                           Logger logger) throws IOException {\n+  public static ParseResult parse(StaticSourceFile sourceFile,\n+                                  String sourceString,\n+                                  Config config,\n+                                  ErrorReporter errorReporter,\n+                                  Logger logger) throws IOException {\n     Context cx = Context.enter();\n     cx.setErrorReporter(errorReporter);\n     cx.setLanguageVersion(Context.VERSION_1_5);\n           astRoot, sourceFile, sourceString, config, errorReporter);\n       root.setIsSyntheticBlock(true);\n     }\n-    return root;\n+    return new ParseResult(root, astRoot);\n+  }\n+\n+  /**\n+   * Holds results of parsing. Includes both ast formats.\n+   */\n+  public static class ParseResult {\n+    public final Node ast;\n+    public final AstRoot oldAst;\n+\n+    public ParseResult(Node ast, AstRoot oldAst) {\n+      this.ast = ast;\n+      this.oldAst = oldAst;\n+    }\n   }\n }\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n       StaticSourceFile file = new SimpleSourceFile(\"input\", false);\n       script = ParserRunner.parse(\n           file, string, ParserRunner.createConfig(isIdeMode, mode, false),\n-          testErrorReporter, Logger.getAnonymousLogger());\n+          testErrorReporter, Logger.getAnonymousLogger()).ast;\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }\n       StaticSourceFile file = new SimpleSourceFile(\"input\", false);\n       script = ParserRunner.parse(\n           file, string, ParserRunner.createConfig(true, mode, false),\n-          testErrorReporter, Logger.getAnonymousLogger());\n+          testErrorReporter, Logger.getAnonymousLogger()).ast;\n     } catch (IOException e) {\n       throw new RuntimeException(e);\n     }", "timestamp": 1355272713, "metainfo": ""}