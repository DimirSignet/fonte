{"sha": "0ec0f7a6bb1031dfd1d75932d5fb1550c9b99ef7", "log": "Remove incorrect @const annotations for the Constraint Validation API. Correct spelling/copy paste errors. Small changes to WebSockets contributed by adetaylor and pablo.platt  R=acleung  Update jQuery 1.7 externs to allow jQuery.when to take multiple arguments.  R=johnlenz  Fix edge cases when folding parseInt and parseFloat calls.  R=nicksantos  Moe re-sync of r2032, r2033, r2034  Revision created by MOE tool push_codebase. MOE_MIGRATION=4999   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java\n     }\n \n     int startIndex = 0, endIndex = input.length() - 1;\n-    while (startIndex < input.length() && input.charAt(startIndex) == '0') {\n+\n+    // Remove leading zeros\n+    while (startIndex < input.length() && input.charAt(startIndex) == '0' &&\n+        input.charAt(startIndex) != '.') {\n       startIndex++;\n     }\n-    while (endIndex >= 0 && input.charAt(endIndex) == '0') {\n-      endIndex--;\n+\n+    // Remove trailing zeros only after the decimal\n+    if (input.indexOf('.') >= 0) {\n+      while (endIndex >= 0 && input.charAt(endIndex) == '0') {\n+        endIndex--;\n+      }\n+      if (input.charAt(endIndex) == '.') {\n+        endIndex--;\n+      }\n     }\n     if (startIndex >= endIndex) {\n       return input;\n       }\n \n       stringVal = NodeUtil.trimJsWhiteSpace(stringVal);\n+      if (stringVal.length() == 0) {\n+        return n;\n+      }\n     }\n \n     Node newNode;\n-    if (isParseInt) {\n+    if (stringVal.equals(\"0\")) {\n+      // Special case for parseInt(\"0\") or parseFloat(\"0\")\n+      newNode = IR.number(0);\n+    } else if (isParseInt) {\n       if (radix == 0 || radix == 16) {\n         if (stringVal.length() > 1 &&\n             stringVal.substring(0, 2).equalsIgnoreCase(\"0x\")) {\n--- a/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java\n     fold(\"x = parseInt('0xA', 16)\", \"x = 10\");\n     fold(\"x = parseInt('07', 8)\", \"x = 7\");\n     fold(\"x = parseInt('08')\", \"x = 8\");\n+    fold(\"x = parseInt('0')\", \"x = 0\");\n+    fold(\"x = parseFloat('0')\", \"x = 0\");\n     fold(\"x = parseFloat('1.23')\", \"x = 1.23\");\n     fold(\"x = parseFloat('1.2300')\", \"x = 1.23\");\n     fold(\"x = parseFloat(' 0.3333')\", \"x = 0.3333\");\n+    fold(\"x = parseFloat('0100')\", \"x = 100\");\n+    fold(\"x = parseFloat('0100.000')\", \"x = 100\");\n \n     //Mozilla Dev Center test cases\n     fold(\"x = parseInt(' 0xF', 16)\", \"x = 15\");\n \n     //Invalid calls\n     foldSame(\"x = parseInt('0xa', 10)\");\n+    foldSame(\"x = parseInt('')\");\n \n     enableEcmaScript5(false);\n     foldSame(\"x = parseInt('08')\");", "timestamp": 1339611828, "metainfo": ""}