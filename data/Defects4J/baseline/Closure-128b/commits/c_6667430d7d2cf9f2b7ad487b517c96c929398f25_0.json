{"sha": "6667430d7d2cf9f2b7ad487b517c96c929398f25", "log": "Fold toLowerCase and toUpperCase as they are locale independent.  R=acleung DELTA=66  (50 added, 6 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=881   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n import com.google.javascript.rhino.jstype.TernaryValue;\n \n import java.util.List;\n+import java.util.Locale;\n \n /**\n  * Peephole optimization to fold constants (e.g. x + 1 + 7 --> x + 8).\n       \"Fractional bitwise operand: {0}\");\n \n   private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);\n+\n+  // The LOCALE independent \"locale\"\n+  private static final Locale ROOT_LOCALE = new Locale(\"\");\n \n   @Override\n   Node optimizeSubtree(Node subtree) {\n       return subtree;\n     }\n \n-    Node firstArg = callTarget.getNext();\n-    if (firstArg == null) {\n-      return subtree;\n-    }\n-\n-    if (!NodeUtil.isGet(callTarget) ||\n-        !NodeUtil.isImmutableValue(firstArg)) {\n+    if (!NodeUtil.isGet(callTarget)) {\n       return subtree;\n     }\n \n     }\n \n     String functionNameString = functionName.getString();\n-    if (functionNameString.equals(\"indexOf\") ||\n-        functionNameString.equals(\"lastIndexOf\")) {\n-      subtree = tryFoldStringIndexOf(subtree, functionNameString,\n-          stringNode, firstArg);\n-    } else if (functionNameString.equals(\"substr\")) {\n-      subtree = tryFoldStringSubstr(subtree, stringNode, firstArg);\n-    } else if (functionNameString.equals(\"substring\")) {\n-      subtree = tryFoldStringSubstring(subtree, stringNode, firstArg);\n+    Node firstArg = callTarget.getNext();\n+    if (firstArg == null) {\n+      if (functionNameString.equals(\"toLowerCase\")) {\n+        subtree = tryFoldStringToLowerCase(subtree, stringNode);\n+      } else if (functionNameString.equals(\"toUpperCase\")) {\n+        subtree = tryFoldStringToUpperCase(subtree, stringNode);\n+      }\n+      return subtree;\n+    } else if (NodeUtil.isImmutableValue(firstArg)) {\n+      if (functionNameString.equals(\"indexOf\") ||\n+          functionNameString.equals(\"lastIndexOf\")) {\n+        subtree = tryFoldStringIndexOf(subtree, functionNameString,\n+            stringNode, firstArg);\n+      } else if (functionNameString.equals(\"substr\")) {\n+        subtree = tryFoldStringSubstr(subtree, stringNode, firstArg);\n+      } else if (functionNameString.equals(\"substring\")) {\n+        subtree = tryFoldStringSubstring(subtree, stringNode, firstArg);\n+      }\n     }\n \n     return subtree;\n- }\n+  }\n+\n+  /**\n+   * @return The lowered string Node.\n+   */\n+  private Node tryFoldStringToLowerCase(Node subtree, Node stringNode) {\n+    // From Rhino, NativeString.java. See ECMA 15.5.4.11\n+    String lowered = stringNode.getString().toLowerCase(ROOT_LOCALE);\n+    Node replacement = Node.newString(lowered);\n+    subtree.getParent().replaceChild(subtree, replacement);\n+    reportCodeChange();\n+    return replacement;\n+  }\n+\n+  /**\n+   * @return The uppered string Node.\n+   */\n+  private Node tryFoldStringToUpperCase(Node subtree, Node stringNode) {\n+    // From Rhino, NativeString.java. See ECMA 15.5.4.12\n+    String uppered = stringNode.getString().toUpperCase(ROOT_LOCALE);\n+    Node replacement = Node.newString(uppered);\n+    subtree.getParent().replaceChild(subtree, replacement);\n+    reportCodeChange();\n+    return replacement;\n+  }\n \n   /**\n    * Try to evaluate String.indexOf/lastIndexOf:\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n             \"    0,\\n\" +\n             \"    0\\n\" +\n             \"  ].join()\");\n+  }\n+\n+  public void testToUpper() {\n+    fold(\"'a'.toUpperCase()\", \"'A'\");\n+    fold(\"'A'.toUpperCase()\", \"'A'\");\n+    fold(\"'aBcDe'.toUpperCase()\", \"'ABCDE'\");\n+  }\n+\n+  public void testToLower() {\n+    fold(\"'A'.toLowerCase()\", \"'a'\");\n+    fold(\"'a'.toLowerCase()\", \"'a'\");\n+    fold(\"'aBcDe'.toLowerCase()\", \"'abcde'\");\n   }\n \n   private static final List<String> LITERAL_OPERANDS =", "timestamp": 1300218269, "metainfo": ""}