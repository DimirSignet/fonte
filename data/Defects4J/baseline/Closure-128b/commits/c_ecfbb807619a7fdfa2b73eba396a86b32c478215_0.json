{"sha": "ecfbb807619a7fdfa2b73eba396a86b32c478215", "log": "the command-line Closure Compiler can now take a vararg number of inputs in addition to those specified by a --js argument.  R=nicksantos,pupius,nnaze   Revision created by MOE tool push_codebase. MOE_MIGRATION=3369   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/CommandLineRunner.java\n import com.google.common.io.Files;\n import com.google.common.io.LimitInputStream;\n \n+import org.kohsuke.args4j.Argument;\n import org.kohsuke.args4j.CmdLineException;\n import org.kohsuke.args4j.CmdLineParser;\n import org.kohsuke.args4j.Option;\n         usage = \"A file containing additional command-line options.\")\n     private String flag_file = \"\";\n \n+    @Argument\n+    private List<String> arguments = Lists.newArrayList();\n+\n+    /**\n+     * Users may specify JS inputs via the legacy {@code --js} option, as well\n+     * as via additional arguments to the Closure Compiler. For example, it is\n+     * convenient to leverage the additional arguments feature when using the\n+     * Closure Compiler in combination with {@code find} and {@code xargs}:\n+     * <pre>\n+     * find MY_JS_SRC_DIR -name '*.js' \\\n+     *     | xargs java -jar compiler.jar --manage_closure_dependencies\n+     * </pre>\n+     * The {@code find} command will produce a list of '*.js' source files in\n+     * the {@code MY_JS_SRC_DIR} directory while {@code xargs} will convert them\n+     * to a single, space-delimited set of arguments that are appended to the\n+     * {@code java} command to run the Compiler.\n+     * <p>\n+     * Note that it is important to use the\n+     * {@code --manage_closure_dependencies} option in this case because the\n+     * order produced by {@code find} is unlikely to be sorted correctly with\n+     * respect to {@code goog.provide()} and {@code goog.requires()}.\n+     */\n+    List<String> getJsFiles() {\n+      List<String> allJsInputs = Lists.newArrayListWithCapacity(\n+          js.size() + arguments.size());\n+      allJsInputs.addAll(js);\n+      allJsInputs.addAll(arguments);\n+      return allJsInputs;\n+    }\n+\n     // Our own option parser to be backwards-compatible.\n     // It needs to be public because of the crazy reflection that args4j does.\n     public static class BooleanOptionHandler extends OptionHandler<Boolean> {\n           .setJscompDevMode(flags.jscomp_dev_mode)\n           .setLoggingLevel(flags.logging_level)\n           .setExterns(flags.externs)\n-          .setJs(flags.js)\n+          .setJs(flags.getJsFiles())\n           .setJsOutputFile(flags.js_output_file)\n           .setModule(flags.module)\n           .setVariableMapInputFile(flags.variable_map_input_file)", "timestamp": 1317335885, "metainfo": ""}