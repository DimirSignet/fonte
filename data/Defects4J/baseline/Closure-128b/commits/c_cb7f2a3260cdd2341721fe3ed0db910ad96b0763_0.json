{"sha": "cb7f2a3260cdd2341721fe3ed0db910ad96b0763", "log": "Change on 2010/04/16 by john          Enable cross module code motion in advanced mode.          R=nick         DELTA=4  (4 added, 0 deleted, 0 changed)  Change on 2010/04/16 by john          Allow global anonymous function inlining to be turned off so we can use         it in simple mode.          R=robert         DELTA=39  (32 added, 0 deleted, 7 changed)  Change on 2010/04/16 by john          Turn on RegExp reference warning by default.          R=alan         DELTA=5  (4 added, 0 deleted, 1 changed)  Change on 2010/04/16 by john          Enable local function inlining in simple mode.          R=robert         DELTA=2  (2 added, 0 deleted, 0 changed)  Change on 2010/04/16 by john          Enable LineNumberCheck by default in unit tests.           R=anatol,mark,nick         DELTA=67  (66 added, 0 deleted, 1 changed)    Revision created by MOE tool push_codebase. MOE_MIGRATION=jqeuwc   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckRegExp.java\n+++ b/src/com/google/javascript/jscomp/CheckRegExp.java\n \n   // TODO(johnlenz): Get this warning turned on by default.\n   static final DiagnosticType REGEXP_REFERENCE =\n-    DiagnosticType.disabled(\"JSC_REGEXP_REFERENCE\",\n+    DiagnosticType.warning(\"JSC_REGEXP_REFERENCE\",\n         \"References to the global RegExp object prevents \" +\n         \"optimization of regular expressions.\");\n \n--- a/src/com/google/javascript/jscomp/CompilationLevel.java\n+++ b/src/com/google/javascript/jscomp/CompilationLevel.java\n     options.closurePass = true;\n     options.variableRenaming = VariableRenamingPolicy.LOCAL;\n     options.inlineLocalVariables = true;\n+    options.inlineLocalFunctions = true;\n+    options.inlineAnonymousFunctionExpressions = true;    \n     options.checkGlobalThisLevel = CheckLevel.OFF;\n     options.foldConstants = true;\n     options.removeConstantExpressions = true;\n     options.removeUnusedVars = true;\n     options.removeUnusedVarsInGlobalScope = true;\n \n+    // Move code around based on the defined modules.\n+    options.crossModuleCodeMotion = true;\n+    options.crossModuleMethodMotion = true;\n+    \n     // Kindly tell the user that they have JsDocs that we don't understand.\n     options.setWarningLevel(DiagnosticGroups.NON_STANDARD_JSDOC,\n         CheckLevel.WARNING);\n--- a/src/com/google/javascript/jscomp/InlineFunctions.java\n+++ b/src/com/google/javascript/jscomp/InlineFunctions.java\n       if ((t.inGlobalScope() && inlineGlobalFunctions)\n           || (!t.inGlobalScope() && inlineLocalFunctions)) {\n         findNamedFunctions(t, n, parent);\n-      } \n-      \n-      if (inlineAnonymousFunctionExpressions) {\n-        findAnonymousFunctionExpressions(t, n);\n+\n+        if (inlineAnonymousFunctionExpressions) {\n+          findAnonymousFunctionExpressions(t, n);\n+        }\n       }\n     }\n \n       // by external definitions.\n       return false;\n     }\n-    \n+\n     // Don't inline this special function\n     if (RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(fnName)) {\n       return false;\n     for (Reference ref : fs.getReferences()) {\n       if (!ref.inlined) {\n         throw new IllegalStateException(\"Call site missed.\\n call: \"\n-            + ref.callNode.toStringTree() + \"\\n parent:  \" \n+            + ref.callNode.toStringTree() + \"\\n parent:  \"\n             + ref.callNode.getParent().toStringTree());\n       }\n     }\n--- a/test/com/google/javascript/jscomp/AliasExternalsTest.java\n+++ b/test/com/google/javascript/jscomp/AliasExternalsTest.java\n \n   @Override\n   public void setUp() {\n+    super.enableLineNumberCheck(false);\n     unaliasableGlobals = null;\n     aliasableGlobals = null;\n   }\n--- a/test/com/google/javascript/jscomp/AliasKeywordsTest.java\n+++ b/test/com/google/javascript/jscomp/AliasKeywordsTest.java\n     = AliasKeywords.MIN_OCCURRENCES_REQUIRED_TO_ALIAS_THROW;\n   private static final int TOO_FEW_TO_ALIAS_THROW\n     = ENOUGH_TO_ALIAS_THROW - 1;\n+\n+  @Override\n+  public void setUp() {\n+    super.enableLineNumberCheck(false);\n+  }\n \n   @Override\n   public CompilerPass getProcessor(Compiler compiler) {\n--- a/test/com/google/javascript/jscomp/AliasStringsTest.java\n+++ b/test/com/google/javascript/jscomp/AliasStringsTest.java\n \n   public AliasStringsTest() {\n     super(EXTERNS);\n+  }\n+\n+  @Override\n+  public void setUp() {\n+    super.enableLineNumberCheck(false);\n   }\n \n   @Override\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n   private boolean normalizeExpected = false;\n \n   /** Whether to check that all line number information is preserved. */\n-  private boolean checkLineNumbers = false;\n+  private boolean checkLineNumbers = true;\n \n   /**\n    * An expected symbol table error. Only useful for testing the\n--- a/test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java\n+++ b/test/com/google/javascript/jscomp/CreateSyntheticBlocksTest.java\n   public CreateSyntheticBlocksTest() {\n     // Can't use compare as a tree because of the added synthetic blocks.\n     super(\"\", false);\n+  }\n+\n+  @Override\n+  public void setUp() {\n+    super.enableLineNumberCheck(false);\n   }\n \n   @Override\n--- a/test/com/google/javascript/jscomp/ExportTestFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/ExportTestFunctionsTest.java\n \n   public ExportTestFunctionsTest() {\n     super(EXTERNS);\n+  }\n+\n+  @Override\n+  public void setUp() {\n+    super.enableLineNumberCheck(false);\n   }\n \n   @Override\n--- a/test/com/google/javascript/jscomp/FunctionRewriterTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionRewriterTest.java\n     \"      return JSCompiler_identityFn_value\" +\n     \"  }\" +\n     \"}\";\n+\n+  @Override\n+  protected void setUp() {\n+    super.enableLineNumberCheck(false);\n+  }\n \n   @Override\n   protected FunctionRewriter getProcessor(Compiler compiler) {\n--- a/test/com/google/javascript/jscomp/GenerateExportsTest.java\n+++ b/test/com/google/javascript/jscomp/GenerateExportsTest.java\n   @Override\n   public void setUp() throws Exception {\n     super.setUp();\n+    super.enableLineNumberCheck(false);\n   }\n \n   public void testExportSymbol() {\n--- a/test/com/google/javascript/jscomp/GroupVariableDeclarationsTest.java\n+++ b/test/com/google/javascript/jscomp/GroupVariableDeclarationsTest.java\n package com.google.javascript.jscomp;\n \n public class GroupVariableDeclarationsTest extends CompilerTestCase {\n+\n+  @Override\n+  protected void setUp() {\n+    super.enableLineNumberCheck(false);\n+  }\n \n   public void testGroupingUninitializedVarsInScope() {\n     // basic with just one fn call in between\n--- a/test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/IgnoreCajaPropertiesTest.java\n  */\n public class IgnoreCajaPropertiesTest extends CompilerTestCase {\n \n-  private static final String EXTERNS = \n+  private static final String EXTERNS =\n       \"var z = {}, \" +\n       \"f = function(y) { z[y] = z[y] ? (z[y]+1) : 1; }, \" +\n       \"x, i;\";\n   }\n \n   @Override\n+  public void setUp() {\n+    super.enableLineNumberCheck(false);\n+  }\n+\n+  @Override\n   public int getNumRepetitions() {\n     return 1;\n   }\n-  \n+\n   public void testSimpleKey() {\n     // Test a one-statement body.\n     test(\"for (i in x) f(i);\",\n          \"    i = JSCompiler_IgnoreCajaProperties_0;\" +\n          \"    { f(i); f(i); }\" +\n          \"  }\");\n-    // Check that the counter's incrementing properly and \n+    // Check that the counter's incrementing properly and\n     //   that nested loops work.\n     test(\"for (i in x) for (j in y) f(i,j);\",\n          \"for (var JSCompiler_IgnoreCajaProperties_1 in x)\" +\n          \"  }\" +\n          \"}\");\n   }\n-  \n+\n   public void testVarKey() {\n     // Test a one-statement body.\n     test(\"for (var j in x) { f(j); }\",\n          \"    }\" +\n          \"  }\");\n   }\n-  \n+\n   public void testFourChildFor() {\n     test(\"for (i = 0; i < 10; ++i) { f(i); }\",\n          \"for (i = 0; i < 10; ++i) { f(i); }\");\n   }\n-  \n+\n   /** {@inheritDoc} */\n   @Override\n   public CompilerPass getProcessor(Compiler compiler) {\n--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n public class InlineFunctionsTest extends CompilerTestCase {\n   boolean allowGlobalFunctionInlining = true;\n   boolean allowBlockInlining = true;\n-  boolean allowExpressionDecomposition = true;\n-  boolean allowAnonymousFunctionExpressionInlining = true;\n-  boolean allowLocalFunctionInlining = true;\n+  final boolean allowExpressionDecomposition = true;\n+  final boolean allowAnonymousFunctionExpressionInlining = true;\n+  final boolean allowLocalFunctionInlining = true;\n \n   public InlineFunctionsTest() {\n     this.enableNormalize();\n   protected void setUp() throws Exception {\n     super.setUp();\n     super.enableLineNumberCheck(true);\n+    allowGlobalFunctionInlining = true;\n     allowBlockInlining = true;\n   }\n \n     testSame(\"function _f(){ function g() {this;} return g; }\");\n   }\n \n+  public void testLocalFunctionInliningOnly1() {\n+    this.allowGlobalFunctionInlining = true;\n+    test(\"function f(){} f()\", \"void 0;\");\n+    this.allowGlobalFunctionInlining = false;\n+    testSame(\"function f(){} f()\");\n+  }\n+\n+  public void testLocalFunctionInliningOnly2() {\n+    this.allowGlobalFunctionInlining = false;\n+    testSame(\"function f(){} f()\");\n+\n+    test(\"function f(){ function g() {return 1} return g() }; f();\",\n+         \"function f(){ return 1 }; f();\");\n+  }\n+\n+  public void testLocalFunctionInliningOnly3() {\n+    this.allowGlobalFunctionInlining = false;\n+    testSame(\"function f(){} f()\");\n+\n+    test(\"(function(){ function g() {return 1} return g() })();\",\n+         \"(function(){ return 1 })();\");\n+  }\n+\n+  public void testLocalFunctionInliningOnly4() {\n+    this.allowGlobalFunctionInlining = false;\n+    testSame(\"function f(){} f()\");\n+\n+    test(\"(function(){ return (function() {return 1})() })();\",\n+         \"(function(){ return 1 })();\");\n+  }\n+\n   // http://en.wikipedia.org/wiki/Fixed_point_combinator#Y_combinator\n   public void testAnonymousFunctionYCombinator() {\n     testSame(\n--- a/test/com/google/javascript/jscomp/InstrumentFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InstrumentFunctionsTest.java\n \n   @Override\n   protected void setUp() {\n+    super.enableLineNumberCheck(false);\n     this.instrumentationPb = null;\n   }\n \n--- a/test/com/google/javascript/jscomp/OptimizeArgumentsArrayTest.java\n+++ b/test/com/google/javascript/jscomp/OptimizeArgumentsArrayTest.java\n   public OptimizeArgumentsArrayTest() {\n \n     super(\"var arguments, alert\" /* Externs */);\n+  }\n+\n+  @Override\n+  public void setUp() {\n+    super.enableLineNumberCheck(false);\n   }\n \n   @Override\n--- a/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n+++ b/test/com/google/javascript/jscomp/OptimizeParametersTest.java\n     return new OptimizeParameters(compiler);\n   }\n \n+  @Override\n+  public void setUp() {\n+    super.enableLineNumberCheck(false);\n+  }\n+\n   public void testNoRemoval() {\n     testSame(\"function foo(p1) { } foo(1); foo(2)\");\n     testSame(\"function foo(p1) { } foo(1,2); foo(3,4)\");\n--- a/test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java\n \n   public RuntimeTypeCheckTest() {\n     enableTypeCheck(CheckLevel.WARNING);\n+  }\n+\n+  @Override\n+  protected void setUp() {\n+    super.enableLineNumberCheck(false);\n   }\n \n   public void testValue() {\n--- a/test/com/google/javascript/jscomp/SymbolTableTest.java\n+++ b/test/com/google/javascript/jscomp/SymbolTableTest.java\n   }\n \n   @Override public void setUp() {\n+    super.enableLineNumberCheck(false);\n     setExpectedSymbolTableError(null);\n     targetError = null;\n   }", "timestamp": 1271459478, "metainfo": ""}