{"sha": "c055c33e1e87c5c9e9f952b87ed3118dd34db437", "log": "Enable constant variable checks by default.  R=nicksantos DELTA=33  (29 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5013   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n \n     // Constant checking must be done after property collapsing because\n     // property collapsing can introduce new constants (e.g. enum values).\n-    if (options.inlineConstantVars) {\n-      passes.add(checkConsts);\n-    }\n+    // TODO(johnlenz): make checkConsts namespace aware so it can be run\n+    // as during the checks phase.\n+    passes.add(checkConsts);\n \n     // The Caja library adds properties to Object.prototype, which breaks\n     // most for-in loops.  This adds a check to each loop that skips\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n   // to parser/ParserConfig.properties\n   static final String DIAGNOSTIC_GROUP_NAMES =\n       \"accessControls, ambiguousFunctionDecl, checkRegExp, \" +\n-      \"checkTypes, checkVars, constantProperty, deprecated, \" +\n+      \"checkTypes, checkVars, const, constantProperty, deprecated, \" +\n       \"duplicateMessage, \" +\n       \"es5Strict, externsValidation, fileoverviewTags, globalThis, \" +\n       \"internetExplorerChecks, invalidCasts, missingProperties, \" +\n--- a/src/com/google/javascript/jscomp/WarningLevel.java\n+++ b/src/com/google/javascript/jscomp/WarningLevel.java\n     options.checkUnreachableCode = CheckLevel.OFF;\n     options.checkMissingReturn = CheckLevel.OFF;\n     options.setWarningLevel(DiagnosticGroups.ACCESS_CONTROLS, CheckLevel.OFF);\n+    options.setWarningLevel(DiagnosticGroups.CONST, CheckLevel.OFF);\n     options.setWarningLevel(DiagnosticGroups.CONSTANT_PROPERTY, CheckLevel.OFF);\n     options.checkGlobalNamesLevel = CheckLevel.OFF;\n     options.checkSuspiciousCode = false;\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n     test(options, code, \"alert(2);\");\n   }\n \n+  public void testCheckConstants1() {\n+    CompilerOptions options = createCompilerOptions();\n+    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n+    level.setOptionsForCompilationLevel(options);\n+    WarningLevel warnings = WarningLevel.QUIET;\n+    warnings.setOptionsForWarningLevel(options);\n+\n+    String code = \"\" +\n+        \"var foo; foo();\\n\" +\n+        \"/** @const */\\n\" +\n+        \"var x = 1; foo(); x = 2;\\n\";\n+    test(options, code, code);\n+  }\n+\n+  public void testCheckConstants2() {\n+    CompilerOptions options = createCompilerOptions();\n+    CompilationLevel level = CompilationLevel.SIMPLE_OPTIMIZATIONS;\n+    level.setOptionsForCompilationLevel(options);\n+    WarningLevel warnings = WarningLevel.DEFAULT;\n+    warnings.setOptionsForWarningLevel(options);\n+\n+    String code = \"\" +\n+        \"var foo;\\n\" +\n+        \"/** @const */\\n\" +\n+        \"var x = 1; foo(); x = 2;\\n\";\n+    test(options, code, ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n+  }\n+\n   /** Creates a CompilerOptions object with google coding conventions. */\n   @Override\n   protected CompilerOptions createCompilerOptions() {", "timestamp": 1339693510, "metainfo": ""}