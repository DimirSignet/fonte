{"sha": "4c7bdf25e9f831e6b9d30a2e78675fc65395033f", "log": "Improve reporting of performance data.  R=johnlenz DELTA=270  (122 added, 118 deleted, 30 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5795   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n import com.google.common.collect.Sets;\n import com.google.common.io.Files;\n import com.google.javascript.jscomp.CompilerOptions.TweakProcessing;\n-import com.google.javascript.jscomp.PerformanceTracker.Stats;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.TokenStream;\n import com.google.protobuf.CodedOutputStream;\n       // Output the manifest and bundle files if requested.\n       outputManifest();\n       outputBundle();\n-\n-      if (options.tracer.isOn()) {\n-        outputTracerReport();\n-      }\n     }\n \n     // return 0 if no errors, the error count otherwise\n \n     if (mapOut != null) {\n       mapOut.close();\n-    }\n-  }\n-\n-  private void outputTracerReport() {\n-    JvmMetrics.maybeWriteJvmMetrics(this.err, \"verbose:pretty:all\");\n-\n-    OutputStreamWriter output = new OutputStreamWriter(this.err);\n-    try {\n-      int runtime = 0;\n-      int runs = 0;\n-      int changes = 0;\n-      int diff = 0;\n-      int gzDiff = 0;\n-\n-      // header\n-      output.write(\"Summary:\\n\");\n-      output.write(\"pass,runtime,runs,chancingRuns,reduction,gzReduction\\n\");\n-      Map<String, Stats> runtimeMap = compiler.tracker.getStats();\n-      for (Entry<String, Stats> entry : runtimeMap.entrySet()) {\n-        String key = entry.getKey();\n-        Stats stats = entry.getValue();\n-\n-        output.write(key);\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.runtime));\n-        runtime += stats.runtime;\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.runs));\n-        runs += stats.runs;\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.changes));\n-        changes += stats.changes;\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.diff));\n-        diff += stats.diff;\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.gzDiff));\n-        gzDiff += stats.gzDiff;\n-        output.write(\"\\n\");\n-      }\n-      output.write(\"TOTAL\");\n-      output.write(\",\");\n-      output.write(String.valueOf(runtime));\n-      output.write(\",\");\n-      output.write(String.valueOf(runs));\n-      output.write(\",\");\n-      output.write(String.valueOf(changes));\n-      output.write(\",\");\n-      output.write(String.valueOf(diff));\n-      output.write(\",\");\n-      output.write(String.valueOf(gzDiff));\n-      output.write(\"\\n\");\n-      output.write(\"\\n\");\n-\n-      output.write(\"Log:\\n\");\n-      output.write(\n-          \"pass,runtime,runs,chancingRuns,reduction,gzReduction,size,gzSize\\n\");\n-      List<Stats> runtimeLog = compiler.tracker.getLog();\n-      for (Stats stats : runtimeLog) {\n-        output.write(stats.pass);\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.runtime));\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.runs));\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.changes));\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.diff));\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.gzDiff));\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.size));\n-        output.write(\",\");\n-        output.write(String.valueOf(stats.gzSize));\n-        output.write(\"\\n\");\n-      }\n-      output.write(\"\\n\");\n-      output.close();\n-    } catch (IOException e) {\n-      e.printStackTrace();\n     }\n   }\n \n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n           compilerThread = null;\n           if (dumpTraceReport) {\n             Tracer.logAndClearCurrentThreadTrace();\n+            tracker.outputTracerReport(outStream == null ?\n+                System.out : outStream);\n           }\n         }\n         return null;\n--- a/src/com/google/javascript/jscomp/PerformanceTracker.java\n+++ b/src/com/google/javascript/jscomp/PerformanceTracker.java\n \n package com.google.javascript.jscomp;\n \n-import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n \n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.Deque;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.zip.GZIPOutputStream;\n \n /**\n \n   /** Summary stats by pass name. */\n   private final Map<String, Stats> summary = Maps.newHashMap();\n+\n+  // To share with the rest of the program\n+  private ImmutableMap<String, Stats> summaryCopy = null;\n \n   /** Stats for each run of a compiler pass. */\n   private final List<Stats> log = Lists.newArrayList();\n     }\n   }\n \n-  public ImmutableMap<String, Long> getRuntimeRecord() {\n-    ImmutableMap.Builder<String, Long> builder = ImmutableMap.builder();\n-    for (Map.Entry<String, Stats> entry : summary.entrySet()) {\n-      builder.put(entry.getKey(), entry.getValue().runtime);\n-    }\n-    return builder.build();\n-  }\n-\n-  public ImmutableMap<String, Stats> getStats() {\n-    return ImmutableMap.copyOf(summary);\n-  }\n-\n-  public ImmutableList<Stats> getLog() {\n-    return ImmutableList.copyOf(log);\n-  }\n-\n-  public ImmutableMap<String, Integer> getCodeSizeRecord() {\n-    ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();\n-    for (Map.Entry<String, Stats> entry : summary.entrySet()) {\n-      builder.put(entry.getKey(), entry.getValue().diff);\n-    }\n-    return builder.build();\n-  }\n-\n-  public ImmutableMap<String, Integer> getZippedCodeSizeRecord() {\n-    ImmutableMap.Builder<String, Integer> builder = ImmutableMap.builder();\n-    for (Map.Entry<String, Stats> entry : summary.entrySet()) {\n-      builder.put(entry.getKey(), entry.getValue().gzDiff);\n-    }\n-    return builder.build();\n-  }\n-\n   private final CodeSizeEstimatePrinter estimateCodeSize(Node root) {\n     CodeSizeEstimatePrinter cp = new CodeSizeEstimatePrinter(trackGzippedSize);\n     CodeGenerator cg = new CodeGenerator(cp, null, false);\n     cg.add(root);\n     return cp;\n+  }\n+\n+  public ImmutableMap<String, Stats> getStats() {\n+    if (summaryCopy == null) {\n+      summaryCopy = ImmutableMap.copyOf(summary);\n+    }\n+    return summaryCopy;\n+  }\n+\n+  class CmpEntries implements Comparator<Entry<String, Stats>> {\n+    public int compare(Entry<String, Stats> e1, Entry<String, Stats> e2) {\n+      return (int) (e1.getValue().runtime - e2.getValue().runtime);\n+    }\n+  }\n+\n+  public void outputTracerReport(PrintStream pstr) {\n+    JvmMetrics.maybeWriteJvmMetrics(pstr, \"verbose:pretty:all\");\n+    OutputStreamWriter output = new OutputStreamWriter(pstr);\n+    try {\n+      int runtime = 0;\n+      int runs = 0;\n+      int changes = 0;\n+      int diff = 0;\n+      int gzDiff = 0;\n+\n+      // header\n+      output.write(\"Summary:\\n\");\n+      output.write(\"pass,runtime,runs,changingRuns,reduction,gzReduction\\n\");\n+\n+      ArrayList<Entry<String, Stats>> a = new ArrayList<Entry<String, Stats>>();\n+      for (Entry<String, Stats> entry : summary.entrySet()) {\n+        a.add(entry);\n+      }\n+      Collections.sort(a, new CmpEntries());\n+\n+      for (Entry<String, Stats> entry : a) {\n+        String key = entry.getKey();\n+        Stats stats = entry.getValue();\n+\n+        output.write(key);\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.runtime));\n+        runtime += stats.runtime;\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.runs));\n+        runs += stats.runs;\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.changes));\n+        changes += stats.changes;\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.diff));\n+        diff += stats.diff;\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.gzDiff));\n+        gzDiff += stats.gzDiff;\n+        output.write(\"\\n\");\n+      }\n+      output.write(\"TOTAL\");\n+      output.write(\",\");\n+      output.write(String.valueOf(runtime));\n+      output.write(\",\");\n+      output.write(String.valueOf(runs));\n+      output.write(\",\");\n+      output.write(String.valueOf(changes));\n+      output.write(\",\");\n+      output.write(String.valueOf(diff));\n+      output.write(\",\");\n+      output.write(String.valueOf(gzDiff));\n+      output.write(\"\\n\");\n+      output.write(\"\\n\");\n+\n+      output.write(\"Log:\\n\");\n+      output.write(\n+          \"pass,runtime,runs,changingRuns,reduction,gzReduction,size,gzSize\\n\");\n+      for (Stats stats : log) {\n+        output.write(stats.pass);\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.runtime));\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.runs));\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.changes));\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.diff));\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.gzDiff));\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.size));\n+        output.write(\",\");\n+        output.write(String.valueOf(stats.gzSize));\n+        output.write(\"\\n\");\n+      }\n+      output.write(\"\\n\");\n+      output.close();\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+    }\n   }\n \n   /**", "timestamp": 1352402344, "metainfo": ""}