{"sha": "fa4efe64c28ccac2cd85afe9d6f38d9a1e30e9d8", "log": "Fixed the JsDocInfoParser to parse the documentation associated with @define tag. Currently the @define tag does not have any description associated with it. This CL fixes that. ------------- Created by MOE: http://code.google.com/p/moe-java MOE_MIGRATED_REVID=43877942", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n                   parser.addParserWarning(\"msg.jsdoc.define\",\n                       lineno, charno);\n                 }\n-                break;\n+                return recordDescription(token);\n \n               case PRIVATE:\n                 if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n                       \"msg.jsdoc.visibility.private\",\n                       lineno, charno);\n                 }\n-                break;\n+                return recordDescription(token);\n \n               case PROTECTED:\n                 if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n                       \"msg.jsdoc.visibility.protected\",\n                       lineno, charno);\n                 }\n-                break;\n+                return recordDescription(token);\n \n               case PUBLIC:\n                 if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n                       \"msg.jsdoc.visibility.public\",\n                       lineno, charno);\n                 }\n-                break;\n+                return recordDescription(token);\n \n               case RETURN:\n                 if (type == null) {\n     }\n \n     return next();\n+  }\n+\n+  /**\n+   * Records a marker's description if there is one available and record it in\n+   * the current marker.\n+   */\n+  private JsDocToken recordDescription(JsDocToken token) {\n+    // Find marker's description (if applicable).\n+    if (jsdocBuilder.shouldParseDocumentation()) {\n+      ExtractionInfo descriptionInfo = extractMultilineTextualBlock(token);\n+      token = descriptionInfo.token;\n+    } else {\n+      token = eatTokensUntilEOL(token);\n+    }\n+    return token;\n   }\n \n   private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes) {\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n import com.google.javascript.jscomp.testing.TestErrorReporter;\n import com.google.javascript.rhino.InputId;\n import com.google.javascript.rhino.JSDocInfo;\n+import com.google.javascript.rhino.JSDocInfo.Marker;\n import com.google.javascript.rhino.JSDocInfo.Visibility;\n import com.google.javascript.rhino.JSTypeExpression;\n import com.google.javascript.rhino.Node;\n   public void testParseDefine5() throws Exception {\n     assertTypeEquals(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE),\n         parse(\"@define {number|boolean}*/\").getType());\n+  }\n+\n+  public void testParseDefineDescription() throws Exception {\n+    JSDocInfo doc = parse(\n+        \"@define {string} description of element \\n next line*/\", true);\n+    Marker defineMarker = doc.getMarkers().iterator().next();\n+    assertEquals(\"define\", defineMarker.getAnnotation().getItem());\n+    assertTrue(defineMarker.getDescription().getItem().contains(\"description of element\"));\n+    assertTrue(defineMarker.getDescription().getItem().contains(\"next line\"));\n+  }\n+\n+  public void testParsePrivateDescription() throws Exception {\n+    JSDocInfo doc =\n+        parse(\"@private {string} description \\n next line*/\", true);\n+    Marker defineMarker = doc.getMarkers().iterator().next();\n+    assertEquals(\"private\", defineMarker.getAnnotation().getItem());\n+    assertTrue(defineMarker.getDescription().getItem().contains(\"description \"));\n+    assertTrue(defineMarker.getDescription().getItem().contains(\"next line\"));\n+  }\n+\n+  public void testParseProtectedDescription() throws Exception {\n+    JSDocInfo doc =\n+        parse(\"@protected {string} description \\n next line*/\", true);\n+    Marker defineMarker = doc.getMarkers().iterator().next();\n+    assertEquals(\"protected\", defineMarker.getAnnotation().getItem());\n+    assertTrue(defineMarker.getDescription().getItem().contains(\"description \"));\n+    assertTrue(defineMarker.getDescription().getItem().contains(\"next line\"));\n   }\n \n   public void testParseDefineErrors1() throws Exception {", "timestamp": 1363210223, "metainfo": ""}