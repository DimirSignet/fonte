{"sha": "d68322323aa52d943b9dc5618ef8ea81d43d7b4f", "log": "Update the global namespace for get and set properties.  R=nicksantos DELTA=117  (111 added, 0 deleted, 6 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=131   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CollapseProperties.java\n+++ b/src/com/google/javascript/jscomp/CollapseProperties.java\n     while (!workList.isEmpty()) {\n       Name name = workList.pop();\n \n+      // Don't attempt to inline a getter or setter property as a variable.\n+      if (name.type == Name.Type.GET || name.type == Name.Type.SET) {\n+        continue;\n+      }\n+\n       if (name.globalSets == 1 && name.localSets == 0 &&\n           name.aliasingGets > 0) {\n         // {@code name} meets condition (b). Find all of its local aliases\n     // proceeding. In the OBJLIT case, we don't need to do anything.\n     int nType = n.getType();\n     boolean isQName = nType == Token.NAME || nType == Token.GETPROP;\n-    boolean isObjKey = nType == Token.STRING || nType == Token.NUMBER;\n+    boolean isObjKey = NodeUtil.isObjectLitKey(n, n.getParent());\n     Preconditions.checkState(isObjKey || isQName);\n     if (isQName) {\n       for (int i = 1; i < depth && n.hasChildren(); i++) {\n       Node value = key.getFirstChild();\n       nextKey = key.getNext();\n \n+      // A get or a set can not be rewritten as a VAR.\n+      if (key.getType() == Token.GET || key.getType() == Token.SET) {\n+        continue;\n+      }\n+\n       // We generate arbitrary names for keys that aren't valid JavaScript\n       // identifiers, since those keys are never referenced. (If they were,\n       // this object literal's child names wouldn't be collapsible.) The only\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n       boolean isPropAssign = false;\n \n       switch (n.getType()) {\n+        case Token.GET:\n+        case Token.SET:\n         case Token.STRING:\n           // This may be a key in an object literal declaration.\n           name = null;\n           }\n           if (name == null) return;\n           isSet = true;\n-          type = getValueType(n.getFirstChild());\n+          switch (n.getType()) {\n+            case Token.STRING:\n+              type = getValueType(n.getFirstChild());\n+              break;\n+            case Token.GET:\n+              type = Name.Type.GET;\n+              break;\n+            case Token.SET:\n+              type = Name.Type.SET;\n+              break;\n+            default:\n+              throw new IllegalStateException(\"unexpected:\" + n);\n+          }\n           break;\n         case Token.NAME:\n           // This may be a variable get or set.\n     enum Type {\n       OBJECTLIT,\n       FUNCTION,\n+      GET,\n+      SET,\n       OTHER,\n     }\n \n     }\n \n     boolean canCollapse() {\n-      return !inExterns && (isClassOrEnum ||\n+      return !inExterns && !isGetOrSetDefinition() && (isClassOrEnum ||\n           (parent == null || parent.canCollapseUnannotatedChildNames()) &&\n           (globalSets > 0 || localSets > 0));\n     }\n \n+    boolean isGetOrSetDefinition() {\n+      return this.type == Type.GET || this.type == Type.SET;\n+    }\n+\n     boolean canCollapseUnannotatedChildNames() {\n-      if (type == Type.OTHER || globalSets != 1 || localSets != 0) {\n+      if (type == Type.OTHER || isGetOrSetDefinition()\n+          || globalSets != 1 || localSets != 0) {\n         return false;\n       }\n \n--- a/test/com/google/javascript/jscomp/CheckGlobalNamesTest.java\n+++ b/test/com/google/javascript/jscomp/CheckGlobalNamesTest.java\n     STRICT_MODULE_DEP_QNAME.level = CheckLevel.WARNING;\n   }\n \n+  private static final String GET_NAMES = \n+      \"var a = {get d() {return 1}}; a.b = 3; a.c = {get e() {return 5}};\";\n+  private static final String SET_NAMES =\n+      \"var a = {set d(x) {}}; a.b = 3; a.c = {set e(y) {}};\";\n   private static final String NAMES = \"var a = {d: 1}; a.b = 3; a.c = {e: 5};\";\n \n   public void testRefToDefinedProperties1() {\n     testSame(NAMES + \"alert(a.b); alert(a.c.e);\");\n+    testSame(GET_NAMES + \"alert(a.b); alert(a.c.e);\");\n+    testSame(SET_NAMES + \"alert(a.b); alert(a.c.e);\");\n   }\n \n   public void testRefToDefinedProperties2() {\n-    testSame(NAMES + \"a.x={}; alert(a.x);\");\n+    testSame(NAMES + \"a.x={}; alert(a.c);\");\n+    testSame(GET_NAMES + \"a.x={}; alert(a.c);\");\n+    testSame(SET_NAMES + \"a.x={}; alert(a.c);\");\n   }\n \n   public void testRefToDefinedProperties3() {\n     testSame(NAMES + \"alert(a.d);\");\n+    testSame(GET_NAMES + \"alert(a.d);\");\n+    testSame(SET_NAMES + \"alert(a.d);\");\n   }\n \n   public void testRefToMethod1() {\n \n   public void testRefToUndefinedProperty3() {\n     testSame(NAMES + \"alert(a.c.x);\", UNDEFINED_NAME_WARNING);\n-  }\n+    testSame(GET_NAMES + \"alert(a.c.x);\", UNDEFINED_NAME_WARNING);\n+    testSame(SET_NAMES + \"alert(a.c.x);\", UNDEFINED_NAME_WARNING);\n+  }\n+  \n+  public void testRefToUndefinedProperty4() {\n+    testSame(NAMES + \"alert(a.d.x);\");\n+    testSame(GET_NAMES + \"alert(a.d.x);\");\n+    testSame(SET_NAMES + \"alert(a.d.x);\");\n+  }  \n \n   public void testRefToDescendantOfUndefinedProperty1() {\n     testSame(NAMES + \"var c = a.x.b;\", UNDEFINED_NAME_WARNING);\n--- a/test/com/google/javascript/jscomp/CollapsePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/CollapsePropertiesTest.java\n          \"var a$b = {}; var a$c = {}; var d = a$b; var e = a$c\");\n   }\n \n+  public void testObjLitDeclarationWithGet1() {\n+    testSame(\"var a = {get b(){}};\");\n+  }\n+\n+  public void testObjLitDeclarationWithGet2() {\n+    test(\"var a = {b: {}, get c(){}}; var d = a.b; var e = a.c\",\n+         \"var a$b = {};var a = {get c(){}};var d = a$b; var e = a.c\");\n+  }\n+\n+  public void testObjLitDeclarationWithGet3() {\n+    test(\"var a = {b: {get c() { return 3; }}};\",\n+         \"var a$b = {get c() { return 3; }};\");\n+  }\n+\n+  public void testObjLitDeclarationWithSet1() {\n+    testSame(\"var a = {set b(a){}};\");\n+  }\n+\n+  public void testObjLitDeclarationWithSet2() {\n+    test(\"var a = {b: {}, set c(a){}}; var d = a.b; var e = a.c\",\n+         \"var a$b = {};var a = {set c(a){}};var d = a$b; var e = a.c\");\n+  }\n+\n+  public void testObjLitDeclarationWithSet3() {\n+    test(\"var a = {b: {set c(d) {}}};\",\n+         \"var a$b = {set c(d) {}};\");\n+  }\n+\n+  public void testObjLitDeclarationWithGetAndSet1() {\n+    test(\"var a = {b: {get c() { return 3; },set c(d) {}}};\",\n+         \"var a$b = {get c() { return 3; },set c(d) {}};\");\n+  }\n+\n   public void testObjLitDeclarationWithDuplicateKeys() {\n     test(\"var a = {b: 0, b: 1}; var c = a.b;\",\n          \"var a$b = 0; var a$b = 1; var c = a$b;\",\n   public void testGlobalObjectDeclaredToPreserveItsPreviousValue2() {\n     test(\"var a = a || {}; a.c = 1;\",\n          \"var a = a || {}; var a$c = 1;\");\n+  }\n+\n+  public void testGlobalObjectDeclaredToPreserveItsPreviousValue3() {\n+    test(\"var a = a || {get b() {}}; a.c = 1;\",\n+         \"var a = a || {get b() {}}; var a$c = 1;\");\n   }\n \n   public void testGlobalObjectNameInBooleanExpressionDepth1_1() {\n--- a/test/com/google/javascript/jscomp/ProcessDefinesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessDefinesTest.java\n     test(\"/** @define {boolean} */ var DEF = new Boolean(true);\", null,\n         ProcessDefines.INVALID_DEFINE_INIT_ERROR);\n   }\n-  \n+\n   public void testDefineWithBadValue2() {\n     test(\"/** @define {string} */ var DEF = 'x' + y;\", null,\n         ProcessDefines.INVALID_DEFINE_INIT_ERROR);\n-  }  \n+  }\n \n   public void testDefineWithDependentValue() {\n     test(\"/** @define {boolean} */ var BASE = false;\\n\" +\n         \"/** @define {string} */ var DEF_OVERRIDE_STRING = 'x';\",\n         \"var DEF_OVERRIDE_STRING=\\\"x\\\"\");\n   }\n-  \n+\n   public void testOverridingString1() {\n     test(\n         \"/** @define {string} */ var DEF_OVERRIDE_STRING = 'x' + 'y';\",\n         \"var DEF_OVERRIDE_STRING=\\\"x\\\" + \\\"y\\\"\");\n-  }  \n-  \n+  }\n+\n   public void testOverridingString2() {\n     overrides.put(\"DEF_OVERRIDE_STRING\", Node.newString(\"foo\"));\n     test(\n         \"/** @define {string} */ var DEF_OVERRIDE_STRING = 'x';\",\n         \"var DEF_OVERRIDE_STRING=\\\"foo\\\"\");\n-  }  \n-  \n+  }\n+\n   public void testOverridingString3() {\n     overrides.put(\"DEF_OVERRIDE_STRING\", Node.newString(\"foo\"));\n     test(\n         \"/** @define {string} */ var DEF_OVERRIDE_STRING = 'x' + 'y';\",\n         \"var DEF_OVERRIDE_STRING=\\\"foo\\\"\");\n   }\n-  \n+\n   public void testMisspelledOverride() {\n     overrides.put(\"DEF_BAD_OVERIDE\", new Node(Token.TRUE));\n     test(\"/** @define {boolean} */ var DEF_BAD_OVERRIDE = true\",\n     assertNotNull(aDotB.declaration);\n   }\n \n-  public void testNamespacedDefine2() {\n+  public void testNamespacedDefine2a() {\n     overrides.put(\"a.B\", new Node(Token.TRUE));\n     test(\"var a = {}; /** @define {boolean} */ a.B = false;\",\n          \"var a = {}; a.B = true;\");\n   }\n \n+  public void testNamespacedDefine2b() {\n+    // TODO(johnlenz): We should either reject the define as invalid\n+    // or replace its value.\n+    overrides.put(\"a.B\", new Node(Token.TRUE));\n+    test(\"var a = { /** @define {boolean} */ B : false };\",\n+         \"var a = {B : false};\",\n+         null, ProcessDefines.UNKNOWN_DEFINE_WARNING);\n+  }\n+\n+  public void testNamespacedDefine2c() {\n+    // TODO(johnlenz): We should either reject the define as invalid\n+    // or replace its value.\n+    overrides.put(\"a.B\", new Node(Token.TRUE));\n+    test(\"var a = { /** @define {boolean} */ get B() { return false } };\",\n+      \"var a = {get B() { return false } };\",\n+      null, ProcessDefines.UNKNOWN_DEFINE_WARNING);\n+  }\n+\n   public void testNamespacedDefine3() {\n     overrides.put(\"a.B\", new Node(Token.TRUE));\n     test(\"var a = {};\", \"var a = {};\", null,\n          ProcessDefines.UNKNOWN_DEFINE_WARNING);\n+  }\n+\n+  public void testNamespacedDefine4() {\n+    overrides.put(\"a.B\", new Node(Token.TRUE));\n+    test(\"var a = {}; /** @define {boolean} */ a.B = false;\",\n+         \"var a = {}; a.B = true;\");\n   }\n \n ", "timestamp": 1292343551, "metainfo": ""}