{"sha": "6a17da87f9e132bdc147b33223826da040c77a6b", "log": "Fix checks for variable reads in expressions with assignments. Fixes issue 297.  R=nicksantos DELTA=123  (113 added, 3 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=132   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n+++ b/src/com/google/javascript/jscomp/DeadAssignmentsElimination.java\n       for(Node sibling = n.getNext(); sibling != null;\n           sibling = sibling.getNext()) {\n         if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {\n-          VariableLiveness state = readVariableBeforeKilling(sibling, variable);\n+          VariableLiveness state = isVariableReadBeforeKill(sibling, variable);\n \n           // If we see a READ or KILL there is no need to continue.\n           if (state == VariableLiveness.READ) {\n   }\n \n   /**\n-   * Give an expression and a variable. It returns READ, if the right-most\n-   * reference of that variable is a read. It returns KILL, if the right-most\n+   * Give an expression and a variable. It returns READ, if the first\n+   * reference of that variable is a read. It returns KILL, if the first\n    * reference of that variable is an assignment. It returns MAY_LIVE otherwise.\n-   *\n-   * This need to be a pre-order traversal so we cannot use the normal node\n-   * traversals.\n    */\n-  private VariableLiveness readVariableBeforeKilling(Node n, String variable) {\n+  private VariableLiveness isVariableReadBeforeKill(\n+      Node n, String variable) {\n     if (NodeUtil.isName(n) && variable.equals(n.getString())) {\n       if (NodeUtil.isLhs(n, n.getParent())) {\n+        Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);\n+        // The expression to which the assignment is made is evaluated before\n+        // the RHS is evaluated (normal left to right evaluation) but the KILL\n+        // occurs after the RHS is evaluated.\n+        Node rhs = n.getNext();\n+        VariableLiveness state = isVariableReadBeforeKill(rhs, variable);\n+        if (state == VariableLiveness.READ) {\n+          return state;\n+        }\n         return VariableLiveness.KILL;\n       } else {\n         return VariableLiveness.READ;\n       }\n     }\n+\n+    // Expressions are evaluated left-right, depth first.\n     for (Node child = n.getFirstChild();\n         child != null; child = child.getNext()) {\n-      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) {\n-        VariableLiveness state = readVariableBeforeKilling(child, variable);\n+      if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION\n+        VariableLiveness state = isVariableReadBeforeKill(child, variable);\n         if (state != VariableLiveness.MAYBE_LIVE) {\n           return state;\n         }\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n          \"}\");\n   }\n \n+  public void testIssue297() {\n+    args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n+    test(\"function f(p) {\" +\n+         \" var x;\" +\n+         \" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);\" +\n+         \"}\",\n+         \"function f(b) {\" +\n+         \" var a;\" +\n+         \" return ((a=b.id) && (a=parseInt(a.substr(1))) && a>0);\" +\n+         \"}\");\n+  }  \n+\n   public void testDebugFlag1() {\n     args.add(\"--compilation_level=SIMPLE_OPTIMIZATIONS\");\n     args.add(\"--debug=false\");\n--- a/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java\n+++ b/test/com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java\n   }\n \n   public void testAssignToExtern() {\n-    inFunction(\"extern = true;\", \"extern = true;\");\n+    inFunction(\"extern = true;\");\n+  }\n+\n+  public void testIssue297a() {\n+    testSame(\"function f(p) {\" +\n+         \" var x;\" +\n+         \" return ((x=p.id) && (x=parseInt(x.substr(1))) && x>0);\" +\n+         \"}; f('');\");\n+  }\n+\n+  public void testIssue297b() {\n+    test(\"function f() {\" +\n+         \" var x;\" +\n+         \" return (x='') && (x = x.substr(1));\" +\n+         \"};\",\n+         \"function f() {\" +\n+         \" var x;\" +\n+         \" return (x='') && (x.substr(1));\" +\n+         \"};\");\n+  }\n+\n+  public void testIssue297c() {\n+    test(\"function f() {\" +\n+         \" var x;\" +\n+         \" return (x=1) && (x = f(x));\" +\n+         \"};\",\n+         \"function f() {\" +\n+         \" var x;\" +\n+         \" return (x=1) && f(x);\" +\n+         \"};\");\n+  }\n+\n+  public void testIssue297d() {\n+    test(\"function f(a) {\" +\n+         \" return (a=1) && (a = f(a));\" +\n+         \"};\",\n+         \"function f(a) {\" +\n+         \" return (a=1) && (f(a));\" +\n+         \"};\");\n+  }\n+\n+  public void testIssue297e() {\n+    test(\"function f(a) {\" +\n+         \" return (a=1) - (a = g(a));\" +\n+         \"};\",\n+         \"function f(a) {\" +\n+         \" return (a=1) - (g(a));\" +\n+         \"};\");\n+  }\n+\n+  public void testIssue297f() {\n+    test(\"function f(a) {\" +\n+         \" h((a=1) - (a = g(a)));\" +\n+         \"};\",\n+         \"function f(a) {\" +\n+         \" h((a=1) - (g(a)));\" +\n+         \"};\");\n+  }\n+\n+  public void testIssue297g() {\n+    test(\"function f(a) {\" +\n+         \" var b = h((b=1) - (b = g(b)));\" +\n+         \" return b;\" +\n+         \"};\",\n+         // The last assignment in the initializer should be eliminated\n+         \"function f(a) {\" +\n+         \" var b = h((b=1) - (b = g(b)));\" +\n+         \" return b;\" +\n+         \"};\");\n+  }\n+\n+  public void testIssue297h() {\n+    test(\"function f(a) {\" +\n+         \" var b = b=1;\" +\n+         \" return b;\" +\n+         \"};\",\n+         // The assignment in the initializer should be eliminated\n+         \"function f(a) {\" +\n+         \" var b = b = 1;\" +\n+         \" return b;\" +\n+         \"};\");\n+  }\n+\n+\n+  public void testInExpression() {\n+    inFunction(\"var a; return a=(a=(a=3));\", \"var a; return 3;\");\n+    inFunction(\"var a; return a=(a=(a=a));\", \"var a; return a;\");\n+    inFunction(\"var a; return a=(a=(a=a+1)+1);\", \"var a; return a+1+1;\");\n+    inFunction(\"var a; return a=(a=(a=f(a)+1)+1);\", \"var a; return f(a)+1+1;\");\n+    inFunction(\"var a; return a=f(a=f(a=f(a)));\", \"var a; return f(f(f(a)));\");\n   }\n }", "timestamp": 1292356297, "metainfo": ""}