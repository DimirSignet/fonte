{"sha": "9f0fe0d670f27702820633ae6c1460cccc757447", "log": "Properly invalidate type names that don't resolve  R=acleung DELTA=44  (42 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4661   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AmbiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/AmbiguateProperties.java\n     return objType == null\n         || invalidatingTypes.contains(objType)\n         || !objType.hasReferenceName()\n-        || objType.isUnknownType() /* unresolved types */\n-        || objType.isEnumType() || objType.autoboxesTo() != null;\n+        || objType.isUnknownType()\n+        || objType.isEmptyType() /* unresolved types */\n+        || objType.isEnumType()\n+        || objType.autoboxesTo() != null;\n   }\n \n   private Property getProperty(String name) {\n--- a/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/AmbiguatePropertiesTest.java\n   private AmbiguateProperties lastPass;\n \n   private static final String EXTERNS =\n+      \"Function.prototype.call=function(){};\" +\n       \"Function.prototype.inherits=function(){};\" +\n       \"prop.toString;\" +\n       \"var google = { gears: { factory: {}, workerPool: {} } };\";\n     super(EXTERNS);\n     enableNormalize();\n     enableTypeCheck(CheckLevel.WARNING);\n+    enableClosurePass();\n   }\n \n   @Override\n     test(js, output);\n   }\n \n+  public void testPredeclaredType() {\n+    String js =\n+        \"goog.addDependency('zzz.js', ['goog.Foo'], []);\" +\n+        \"/** @constructor */ \" +\n+        \"function A() {\" +\n+        \"  this.x = 3;\" +\n+        \"}\" +\n+        \"/** @param {goog.Foo} x */\" +\n+        \"function f(x) { x.y = 4; }\";\n+    String result =\n+        \"0;\" +\n+        \"/** @constructor */ \" +\n+        \"function A() {\" +\n+        \"  this.a = 3;\" +\n+        \"}\" +\n+        \"/** @param {goog.Foo} x */\" +\n+        \"function f(x) { x.y = 4; }\";\n+    test(js, result);\n+  }\n }\n--- a/test/com/google/javascript/jscomp/CompilerTestCase.java\n+++ b/test/com/google/javascript/jscomp/CompilerTestCase.java\n   /** Whether we check warnings without source information. */\n   private boolean allowSourcelessWarnings = false;\n \n+  /** True iff closure pass runs before pass being tested. */\n+  private boolean closurePassEnabled = false;\n+\n   /** True iff type checking pass runs before pass being tested. */\n   private boolean typeCheckEnabled = false;\n \n    */\n   void disableTypeCheck() {\n     typeCheckEnabled  = false;\n+  }\n+\n+  /**\n+   * Process closure library primitives.\n+   */\n+  // TODO(nicksantos): Fix other passes to use this when appropriate.\n+  void enableClosurePass() {\n+    closurePassEnabled = true;\n   }\n \n   /**\n     for (int i = 0; i < numRepetitions; ++i) {\n       if (compiler.getErrorCount() == 0) {\n         errorManagers[i] = new BlackHoleErrorManager(compiler);\n+\n+        // Only run process closure primitives once, if asked.\n+        if (closurePassEnabled && i == 0) {\n+          recentChange.reset();\n+          new ProcessClosurePrimitives(compiler, null, CheckLevel.ERROR, true)\n+              .process(null, mainRoot);\n+          hasCodeChanged = hasCodeChanged || recentChange.hasCodeChanged();\n+        }\n \n         // Only run the type checking pass once, if asked.\n         // Running it twice can cause unpredictable behavior because duplicate", "timestamp": 1335907805, "metainfo": ""}