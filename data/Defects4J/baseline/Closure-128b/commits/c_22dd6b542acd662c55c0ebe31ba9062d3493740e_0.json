{"sha": "22dd6b542acd662c55c0ebe31ba9062d3493740e", "log": "Simplify the error reporter interface.  R=nicksantos DELTA=47  (24 added, 5 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3690   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n   }\n \n   public void warning(String message, String sourceName, int line,\n-      String lineSource, int lineOffset) {\n+      int lineOffset) {\n     compiler.report(\n         makeError(message, sourceName, line, lineOffset, CheckLevel.WARNING));\n   }\n \n   public void error(String message, String sourceName, int line,\n-      String lineSource, int lineOffset) {\n+      int lineOffset) {\n     compiler.report(\n         makeError(message, sourceName, line, lineOffset, CheckLevel.ERROR));\n   }\n       return new com.google.javascript.jscomp.mozilla.rhino.EvaluatorException(\n           message, sourceName, line, lineSource, lineOffset);\n     }\n+\n+    @Override\n+    public void error(String message, String sourceName, int line,\n+        String sourceLine, int lineOffset) {\n+      super.error(message, sourceName, line, lineOffset);\n+    }\n+\n+    @Override\n+    public void warning(String message, String sourceName, int line,\n+        String sourceLine, int lineOffset) {\n+      super.warning(message, sourceName, line, lineOffset);\n+    }\n   }\n }\n--- a/src/com/google/javascript/jscomp/parsing/NullErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/parsing/NullErrorReporter.java\n   }\n \n   public void error(String message, String sourceName, int line,\n-      String lineSource, int lineOffset) {\n+      int lineOffset) {\n   }\n \n   public void warning(String message, String sourceName, int line,\n-      String lineSource, int lineOffset) {\n+      int lineOffset) {\n   }\n \n   public static ErrorReporter forOldRhino() {\n       return new com.google.javascript.jscomp.mozilla.rhino.EvaluatorException(\n           message);\n     }\n+\n+    @Override\n+    public void error(String message, String sourceName, int line,\n+        String sourceLine, int lineOffset) {\n+      super.error(message, sourceName, line, lineOffset);\n+    }\n+\n+    @Override\n+    public void warning(String message, String sourceName, int line,\n+        String sourceLine, int lineOffset) {\n+      super.warning(message, sourceName, line, lineOffset);\n+    }\n   }\n \n   private static class OldRhinoNullReporter extends NullErrorReporter\n--- a/src/com/google/javascript/rhino/ErrorReporter.java\n+++ b/src/com/google/javascript/rhino/ErrorReporter.java\n      * @param sourceName a String describing the JavaScript source\n      * where the warning occured; typically a filename or URL\n      * @param line the line number associated with the warning\n-     * @param lineSource the text of the line (may be null)\n      * @param lineOffset the offset into lineSource where problem was detected\n      */\n-    void warning(String message, String sourceName, int line,\n-                 String lineSource, int lineOffset);\n+    void warning(String message, String sourceName, int line, int lineOffset);\n \n     /**\n      * Report an error.\n      * @param sourceName a String describing the JavaScript source\n      * where the error occured; typically a filename or URL\n      * @param line the line number associated with the error\n-     * @param lineSource the text of the line (may be null)\n      * @param lineOffset the offset into lineSource where problem was detected\n      */\n-    void error(String message, String sourceName, int line,\n-               String lineSource, int lineOffset);\n+    void error(String message, String sourceName, int line, int lineOffset);\n \n }\n--- a/src/com/google/javascript/rhino/SimpleErrorReporter.java\n+++ b/src/com/google/javascript/rhino/SimpleErrorReporter.java\n \n     @Override\n     public void warning(String message, String sourceName, int line,\n-                        String lineSource, int lineOffset) {\n+                        int lineOffset) {\n         if (warnings == null) {\n             warnings = new ArrayList<String>();\n         }\n         warnings.add(formatDetailedMessage(\n-            message, sourceName, line, lineSource, lineOffset));\n+            message, sourceName, line, lineOffset));\n     }\n \n     @Override\n     public void error(String message, String sourceName, int line,\n-                      String lineSource, int lineOffset) {\n+                      int lineOffset) {\n         if (errors == null) {\n             errors = new ArrayList<String>();\n         }\n         errors.add(formatDetailedMessage(\n-            message, sourceName, line, lineSource, lineOffset));\n+            message, sourceName, line, lineOffset));\n     }\n \n     /**\n     }\n \n     private String formatDetailedMessage(\n-        String message, String sourceName, int lineNumber, String lineSource,\n-        int lineOffset) {\n+        String message, String sourceName, int lineNumber, int lineOffset) {\n       String details = message;\n       if (sourceName == null || lineNumber <= 0) {\n         return details;\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n                     \"msg.jsdoc.function.thisnotobject\" :\n                     \"msg.jsdoc.function.newnotobject\"),\n                 sourceName,\n-                contextNode.getLineno(), \"\", contextNode.getCharno());\n+                contextNode.getLineno(), contextNode.getCharno());\n           }\n \n           isConstructor = current.getType() == Token.NEW;\n                 if (!addSuccess) {\n                   reporter.warning(\n                       ScriptRuntime.getMessage0(\"msg.jsdoc.function.varargs\"),\n-                      sourceName, arg.getLineno(), \"\", arg.getCharno());\n+                      sourceName, arg.getLineno(), arg.getCharno());\n                 }\n               } else {\n                 paramBuilder.addRequiredParams(type);\n         reporter.warning(\n             \"Duplicate record field \" + fieldName,\n             sourceName,\n-            n.getLineno(), \"\", fieldNameNode.getCharno());\n+            n.getLineno(), fieldNameNode.getCharno());\n       }\n     }\n \n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n     setReferencedType(\n         registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));\n     t.warning(\"Cycle detected in inheritance chain of type \" + reference,\n-        sourceName, lineno, null, charno);\n+        sourceName, lineno, charno);\n     setResolvedTypeInternal(getReferencedType());\n   }\n \n           registry.isForwardDeclaredType(reference);\n       if (!isForwardDeclared && registry.isLastGeneration()) {\n         t.warning(\"Bad type annotation. Unknown type \" + reference,\n-            sourceName, lineno, null, charno);\n+            sourceName, lineno, charno);\n       } else {\n         setReferencedType(\n             registry.getNativeObjectType(\n--- a/src/com/google/javascript/rhino/testing/TestErrorReporter.java\n+++ b/src/com/google/javascript/rhino/testing/TestErrorReporter.java\n \n   @Override\n   public void error(String message, String sourceName, int line,\n-      String lineSource, int lineOffset) {\n+      int lineOffset) {\n     if (errors != null && errorsIndex < errors.length) {\n       assertEquals(errors[errorsIndex++], message);\n     } else {\n \n   @Override\n   public void warning(String message, String sourceName, int line,\n-      String lineSource, int lineOffset) {\n+      int lineOffset) {\n     if (warnings != null && warningsIndex < warnings.length) {\n       assertEquals(warnings[warningsIndex++], message);\n     } else {", "timestamp": 1320956496, "metainfo": ""}