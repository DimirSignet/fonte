{"sha": "819dd2d2f8dc36cc6770236f1eb91635f3f9410e", "log": "Move the devirtualizer later in the optimization process. We're not really sure why this improves things (yet).    ", "commit": "\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n     // TODO(nicksantos): The order of these passes makes no sense, and needs\n     // to be re-arranged.\n \n+    passes.add(createEmptyPass(\"beforeStandardOptimizations\"));\n+\n     if (!options.idGenerators.isEmpty()) {\n       passes.add(replaceIdGenerators);\n     }\n       passes.add(chainCalls);\n     }\n \n-    // Method devirtualization benefits from property disambiguiation so\n-    // it should run after that pass but before passes that do\n-    // optimizations based on global names (like smart name removal and cross\n-    // module code motion)\n-    if (options.devirtualizePrototypeMethods) {\n-      passes.add(devirtualizePrototypeMethods);\n-    }\n-\n     // Constant checking must be done after property collapsing because\n     // property collapsing can introduce new constants (e.g. enum values).\n     if (options.inlineConstantVars) {\n     if (options.smartNameRemoval || options.reportPath != null) {\n       passes.addAll(getCodeRemovingPasses());\n       passes.add(smartNamePass);\n+    }\n+\n+    // Method devirtualization benefits from property disambiguiation so\n+    // it should run after that pass but before passes that do\n+    // optimizations based on global names (like cross module code motion\n+    // and inline functions).  Smart Name Removal does better if run before\n+    // this pass.\n+    if (options.devirtualizePrototypeMethods) {\n+      passes.add(devirtualizePrototypeMethods);\n     }\n \n     if (options.customPasses != null) {", "timestamp": 1265134717, "metainfo": ""}