{"sha": "d3be4eec85ac05af0aff996ac8b03cc8ff861b8e", "log": "Make sure that deleting a @const property is a compiler error  R=zhuyi DELTA=23  (22 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2253   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CheckAccessControls.java\n+++ b/src/com/google/javascript/jscomp/CheckAccessControls.java\n       DiagnosticType.warning(\n         \"JSC_CONSTANT_PROPERTY_REASSIGNED_VALUE\",\n         \"constant property {0} assigned a value more than once\");\n+\n+  static final DiagnosticType CONST_PROPERTY_DELETED =\n+      DiagnosticType.warning(\n+        \"JSC_CONSTANT_PROPERTY_DELETED\",\n+        \"constant property {0} cannot be deleted\");\n \n   private final AbstractCompiler compiler;\n   private final TypeValidator validator;\n       Node getprop) {\n     // Check whether the property is modified\n     Node parent = getprop.getParent();\n+    boolean isDelete = parent.getType() == Token.DELPROP;\n     if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop)\n-        && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) {\n+        && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)\n+        && !isDelete) {\n       return;\n     }\n \n \n     // Check whether constant properties are reassigned\n     if (isConstant) {\n+      if (isDelete) {\n+        compiler.report(\n+            t.makeError(getprop, CONST_PROPERTY_DELETED, propertyName));\n+        return;\n+      }\n+\n       ObjectType oType = objectType;\n       while (oType != null) {\n         if (oType.hasReferenceName()) {\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n \n   public static DiagnosticGroup CONSTANT_PROPERTY = DiagnosticGroups\n       .registerGroup(\"constantProperty\",\n+          CheckAccessControls.CONST_PROPERTY_DELETED,\n           CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE);\n \n   public static DiagnosticGroup NON_STANDARD_JSDOC =\n \n   public static DiagnosticGroup CONST =\n       DiagnosticGroups.registerGroup(\"const\",\n+          CheckAccessControls.CONST_PROPERTY_DELETED,\n           CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE,\n           ConstCheck.CONST_REASSIGNED_VALUE_ERROR);\n \n--- a/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n+++ b/test/com/google/javascript/jscomp/CheckAccessControlsTest.java\n import static com.google.javascript.jscomp.CheckAccessControls.DEPRECATED_PROP_REASON;\n import static com.google.javascript.jscomp.CheckAccessControls.PRIVATE_OVERRIDE;\n import static com.google.javascript.jscomp.CheckAccessControls.VISIBILITY_MISMATCH;\n+import static com.google.javascript.jscomp.CheckAccessControls.CONST_PROPERTY_DELETED;\n import static com.google.javascript.jscomp.CheckAccessControls.CONST_PROPERTY_REASSIGNED_VALUE;\n \n import com.google.javascript.jscomp.CheckLevel;\n         null , CONST_PROPERTY_REASSIGNED_VALUE);\n   }\n \n+  public void testConstantProperty14() {\n+    test(\"/** @constructor */ function Foo() {\" +\n+        \"/** @const */ this.bar = 3; delete this.bar; }\",\n+        null, CONST_PROPERTY_DELETED);\n+  }\n+\n   public void testSuppressConstantProperty() {\n     testSame(\"/** @constructor */ function A() {\" +\n         \"/** @const */ this.bar = 3;}\" +", "timestamp": 1307980716, "metainfo": ""}