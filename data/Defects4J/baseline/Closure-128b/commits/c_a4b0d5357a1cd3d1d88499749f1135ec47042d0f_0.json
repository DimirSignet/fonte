{"sha": "a4b0d5357a1cd3d1d88499749f1135ec47042d0f", "log": "Delete a node removal that never removes anything.  R=johnlenz DELTA=28 (5 added, 16 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6157   ", "commit": "\n--- a/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n+++ b/src/com/google/javascript/jscomp/MinimizeExitPoints.java\n package com.google.javascript.jscomp;\n \n import com.google.common.base.Preconditions;\n-import com.google.javascript.jscomp.AbstractCompiler;\n-import com.google.javascript.jscomp.CompilerPass;\n-import com.google.javascript.jscomp.NodeTraversal;\n import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n-import com.google.javascript.jscomp.NodeUtil;\n import com.google.javascript.rhino.IR;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.Token;\n \n       case Token.FOR:\n       case Token.WHILE:\n-        tryMinimizeExits(\n-            NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n+        tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n         break;\n \n       case Token.DO:\n-        tryMinimizeExits(\n-            NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n+        tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);\n \n         Node cond = NodeUtil.getConditionExpression(n);\n         if (NodeUtil.getImpureBooleanValue(cond) == TernaryValue.FALSE) {\n           // Normally, we wouldn't be able to optimize BREAKs inside a loop\n           // but as we know the condition will always false, we can treat them\n           // as we would a CONTINUE.\n-          tryMinimizeExits(\n-              n.getFirstChild(), Token.BREAK, null);\n+          tryMinimizeExits(n.getFirstChild(), Token.BREAK, null);\n         }\n         break;\n \n       case Token.FUNCTION:\n-        tryMinimizeExits(\n-            n.getLastChild(), Token.RETURN, null);\n+        tryMinimizeExits(n.getLastChild(), Token.RETURN, null);\n         break;\n     }\n   }\n \n       // Move all the if node's following siblings.\n       moveAllFollowing(ifNode, ifNode.getParent(), newDestBlock);\n-    }\n-\n-    // Get rid of the \"exit\", replace with an empty item if needed.\n-    NodeUtil.removeChild(exitNodeParent, exitNode);\n-\n-    compiler.reportCodeChange();\n+      compiler.reportCodeChange();\n+    }\n   }\n \n   /**\n    * @nullable labelName non-null only for breaks associated with labels.\n    * @return Whether the node matches the specified block-exit type.\n    */\n-  static private boolean matchingExitNode(Node n, int type, String labelName) {\n+  private static boolean matchingExitNode(Node n, int type, String labelName) {\n     if (n.getType() == type) {\n       if (type == Token.RETURN) {\n         // only returns without expressions.\n    * @param srcParent The parent node of start.\n    * @param destParent The destination node.\n    */\n-  static private void moveAllFollowing(\n+  private static void moveAllFollowing(\n       Node start, Node srcParent, Node destParent) {\n     for (Node n = start.getNext(); n != null; n = start.getNext()) {\n-      boolean isFunctionDeclaration =\n-          NodeUtil.isFunctionDeclaration(n);\n-\n+      boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);\n       srcParent.removeChild(n);\n-\n       if (isFunctionDeclaration) {\n         destParent.addChildToFront(n);\n       } else {\n--- a/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java\n+++ b/test/com/google/javascript/jscomp/MinimizeExitPointsTest.java\n          \"function f(){if(a()){}else{}}\");\n     fold(\"function f(){if(a()){return;}else{return;} b();}\",\n          \"function f(){if(a()){}else{return;b()}}\");\n+    fold(\"function f(){ if (x) return; if (y) return; if (z) return; w(); }\",\n+        \" function f() {\" +\n+        \"   if (x) {} else { if (y) {} else { if (z) {} else w(); }}\" +\n+        \" }\");\n \n     fold(\"function f(){while(a())return;}\",\n          \"function f(){while(a())return}\");", "timestamp": 1358448427, "metainfo": ""}