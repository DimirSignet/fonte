{"sha": "725ecc108d6c4e02730ed79f471437f240fbc107", "log": "add a test for inlining into an object literal. also, fix an infinite loop guard.  R=johnlenz DELTA=15  (13 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=338511   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ExpressionDecomposer.java\n+++ b/src/com/google/javascript/jscomp/ExpressionDecomposer.java\n     int i = 0;\n     while (DecompositionType.DECOMPOSABLE == canExposeExpression(expression)) {\n       exposeExpression(expression);\n+      i++;\n       if (i > MAX_INTERATIONS) {\n         throw new IllegalStateException(\n             \"DecomposeExpression depth exceeded on :\\n\" +\n--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n   public void testInlineFunctions26() {\n     // Don't inline external functions\n     testSame(\"function _foo(x){return x}_foo(1)\");\n+  }\n+\n+  public void testInlineFunctions27() {\n+    test(\"var window = {}; function foo(){window.bar++; return 3;}\" +\n+        \"var x = {y: 1, z: foo(2)};\",\n+        \"var window={};\" +\n+        \"{\" +\n+        \"  var JSCompiler_inline_result$$0;\" +\n+        \"  window.bar++;\" +\n+        \"  JSCompiler_inline_result$$0 = 3;\" +\n+        \"}\" +\n+        \"var x = {y: 1, z: JSCompiler_inline_result$$0};\");\n   }\n \n   public void testMixedModeInlining1() {\n   public void testFunctionExpressionCallInlining11c() {\n     // Can't inline functions that return inner functions into non-global scope.\n     testSame(\"function _x() {\" +\n-    \t\t\"((function(){return function(){foo()}})())();\" +\n-    \t\t\"}\");\n+                \"((function(){return function(){foo()}})())();\" +\n+                \"}\");\n   }\n \n   public void testFunctionExpressionCallInlining12() {", "timestamp": 1287071003, "metainfo": ""}