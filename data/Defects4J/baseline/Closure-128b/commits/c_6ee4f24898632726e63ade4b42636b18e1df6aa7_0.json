{"sha": "6ee4f24898632726e63ade4b42636b18e1df6aa7", "log": "Preserve quotes on object literals unless they are explicitly removed.  R=acleung DELTA=22  (18 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=347   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n             // Object literal property names don't have to be quoted if they are\n             // not JavaScript keywords\n             if (c.getType() == Token.STRING &&\n+                !c.isQuotedString() &&\n                 !TokenStream.isKeyword(c.getString()) &&\n                 TokenStream.isJSIdentifier(c.getString()) &&\n                 // do not encode literally any non-literal characters that were\n--- a/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\n+++ b/src/com/google/javascript/jscomp/ConvertToDottedProperties.java\n   @Override\n   public void visit(NodeTraversal t, Node n, Node parent) {\n     switch (n.getType()) {\n+      case Token.STRING:\n+        if (NodeUtil.isObjectLitKey(n, parent)) {\n+          n.putBooleanProp(Node.QUOTED_PROP, false);\n+        }\n+        break;\n+\n       case Token.GETELEM:\n         Node left = n.getFirstChild();\n         Node right = left.getNext();\n--- a/test/com/google/javascript/jscomp/CodePrinterTest.java\n+++ b/test/com/google/javascript/jscomp/CodePrinterTest.java\n     assertPrint(\"function f(){}\", \"function f(){}\");\n \n     // Make sure we don't treat non-latin character escapes as raw strings.\n-    assertPrint(\"({ 'a': 4, '\\\\u0100': 4 })\", \"({a:4,\\\"\\\\u0100\\\":4})\");\n+    assertPrint(\"({ 'a': 4, '\\\\u0100': 4 })\", \"({\\\"a\\\":4,\\\"\\\\u0100\\\":4})\");\n+    assertPrint(\"({ a: 4, '\\\\u0100': 4 })\", \"({a:4,\\\"\\\\u0100\\\":4})\");\n \n     // Test if statement and for statements with single statements in body.\n     assertPrint(\"if (true) { alert();}\", \"if(true)alert()\");\n     assertEquals(\"\\\"f\\\";\\n\\\"g\\\";\\n\", result);\n   }\n \n+  public void testObjectLit() {\n+    assertPrint(\"({x:1})\", \"({x:1})\");\n+    assertPrint(\"var x=({x:1})\", \"var x={x:1}\");\n+    assertPrint(\"var x={'x':1}\", \"var x={\\\"x\\\":1}\");\n+    assertPrint(\"var x={1:1}\", \"var x={1:1}\");\n+  }\n+\n   public void testGetter() {\n     assertPrint(\"var x = {}\", \"var x={}\");\n     assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");\n     assertPrint(\"var x = - - 2;\", \"var x=2\");\n     assertPrint(\"var x = - (2);\", \"var x=-2\");\n   }\n+  \n+  \n }\n--- a/test/com/google/javascript/jscomp/SourceMapTest.java\n+++ b/test/com/google/javascript/jscomp/SourceMapTest.java\n                    \"/** Begin line maps. **/{ \\\"file\\\" : \\\"testcode\\\", \" +\n                    \"\\\"count\\\": 1 }\\n\" +\n \n-                   \"[0,0,0,0,1,1,1,1,1,1,1,1,2,2,3,3,0,0]\\n\" +\n+                   \"[0,0,1,1,1,0,2,2,2,2,2,2,2,2,3,3,4,4,0,0]\\n\" +\n \n                    \"/** Begin file information. **/\\n\" +\n                    \"[]\\n\" +\n \n                    \"/** Begin mapping definitions. **/\\n\" +\n                    \"[\\\"testcode\\\",1,1]\\n\" +\n+                   \"[\\\"testcode\\\",1,3]\\n\" +\n                    \"[\\\"testcode\\\",1,18,\\\"q\\\"]\\n\" +\n                    \"[\\\"testcode\\\",1,18]\\n\" +\n                    \"[\\\"testcode\\\",1,21]\\n\");", "timestamp": 1295993699, "metainfo": ""}