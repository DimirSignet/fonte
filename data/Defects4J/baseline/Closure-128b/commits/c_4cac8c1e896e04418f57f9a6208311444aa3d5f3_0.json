{"sha": "4cac8c1e896e04418f57f9a6208311444aa3d5f3", "log": "Renames ParameterizedType to TemplatizedType.  R=dimvar,nicksantos,johnlenz   Revision created by MOE tool push_codebase. MOE_MIGRATION=6186   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ModificationVisitor;\n import com.google.javascript.rhino.jstype.ObjectType;\n-import com.google.javascript.rhino.jstype.ParameterizedType;\n+import com.google.javascript.rhino.jstype.TemplatizedType;\n import com.google.javascript.rhino.jstype.StaticSlot;\n import com.google.javascript.rhino.jstype.TemplateType;\n import com.google.javascript.rhino.jstype.UnionType;\n             paramFunctionType.getParameters(),\n             argFunctionType.getParameters(), resolvedTypes);\n       }\n-    } else if (paramType.isParameterizedType()) {\n-      ParameterizedType paramObjectType = paramType.toMaybeParameterizedType();\n-      JSType typeParameter = paramObjectType.getParameterType();\n+    } else if (paramType.isTemplatizedType()) {\n+      TemplatizedType paramObjectType = paramType.toMaybeTemplatizedType();\n+      JSType typeParameter = paramObjectType.getTemplateType();\n       Preconditions.checkNotNull(typeParameter);\n       if (typeParameter != null) {\n         // @param {Array.<T>}\n         ObjectType argObjectType = argType\n             .restrictByNotNullOrUndefined()\n             .collapseUnion()\n-            .toMaybeParameterizedType();\n+            .toMaybeTemplatizedType();\n         if (argObjectType != null && argObjectType.isSubtype(paramType)) {\n-          JSType argTypeParameter = argObjectType.getParameterType();\n+          JSType argTypeParameter = argObjectType.getTemplateType();\n           Preconditions.checkNotNull(argTypeParameter);\n           maybeResolveTemplatedType(\n               typeParameter, argTypeParameter, resolvedTypes);\n     ObjectType objType = ObjectType.cast(\n         getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());\n     if (objType != null) {\n-      JSType type = objType.getParameterType();\n+      JSType type = objType.getTemplateType();\n       if (type != null) {\n         n.setJSType(type);\n       }\n--- a/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n+++ b/src/com/google/javascript/jscomp/type/ChainableReverseAbstractInterpreter.java\n import com.google.javascript.rhino.jstype.JSTypeNative;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n-import com.google.javascript.rhino.jstype.ParameterizedType;\n+import com.google.javascript.rhino.jstype.TemplatizedType;\n import com.google.javascript.rhino.jstype.StaticSlot;\n import com.google.javascript.rhino.jstype.TemplateType;\n import com.google.javascript.rhino.jstype.UnionType;\n       }\n \n       @Override\n-      public JSType caseParameterizedType(ParameterizedType type) {\n+      public JSType caseTemplatizedType(TemplatizedType type) {\n         return caseObjectType(type);\n       }\n \n       }\n \n       @Override\n-      public JSType caseParameterizedType(ParameterizedType type) {\n+      public JSType caseTemplatizedType(TemplatizedType type) {\n         return caseObjectType(type);\n       }\n \n     }\n \n     @Override\n-    public JSType caseParameterizedType(ParameterizedType type) {\n+    public JSType caseTemplatizedType(TemplatizedType type) {\n       return caseObjectType(type);\n     }\n \n--- a/src/com/google/javascript/rhino/jstype/CanCastToVisitor.java\n+++ b/src/com/google/javascript/rhino/jstype/CanCastToVisitor.java\n       return canCastToUnion(thisType, thatType.toMaybeUnionType());\n     } else if (thatType.isFunctionType()) {\n       return canCastToFunction(thisType, thatType.toMaybeFunctionType());\n-    } else if (thatType.isParameterizedType()) {\n+    } else if (thatType.isTemplatizedType()) {\n       // TODO(johnlenz): once the templated type work is finished,\n       // restrict the type parameters.\n       return thisType.visit(this,\n-          thatType.toMaybeParameterizedType().getReferencedTypeInternal());\n+          thatType.toMaybeTemplatizedType().getReferencedTypeInternal());\n     }\n \n     return thisType.isSubtype(thatType) || thatType.isSubtype(thisType);\n   }\n \n   @Override\n-  public Boolean caseParameterizedType(\n-      ParameterizedType thisType, JSType thatType) {\n+  public Boolean caseTemplatizedType(\n+      TemplatizedType thisType, JSType thatType) {\n     // TODO(johnlenz): once the templated type work is finished,\n     // restrict the type parameters.\n     return thisType.getReferencedTypeInternal().visit(this, thatType);\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n     return null;\n   }\n \n-  public final boolean isParameterizedType() {\n-    return toMaybeParameterizedType() != null;\n-  }\n-\n-  /**\n-   * Downcasts this to a ParameterizedType, or returns null if this is not\n+  public final boolean isTemplatizedType() {\n+    return toMaybeTemplatizedType() != null;\n+  }\n+\n+  /**\n+   * Downcasts this to a TemplatizedType, or returns null if this is not\n    * a function.\n    */\n-  public ParameterizedType toMaybeParameterizedType() {\n+  public TemplatizedType toMaybeTemplatizedType() {\n     return null;\n   }\n \n   /**\n-   * Null-safe version of toMaybeParameterizedType().\n-   */\n-  public static ParameterizedType toMaybeParameterizedType(JSType type) {\n-    return type == null ? null : type.toMaybeParameterizedType();\n+   * Null-safe version of toMaybeTemplatizedType().\n+   */\n+  public static TemplatizedType toMaybeTemplatizedType(JSType type) {\n+    return type == null ? null : type.toMaybeTemplatizedType();\n   }\n \n   public final boolean isTemplateType() {\n           that.toMaybeRecordType(), eqMethod);\n     }\n \n-    ParameterizedType thisParamType = toMaybeParameterizedType();\n-    ParameterizedType thatParamType = that.toMaybeParameterizedType();\n+    TemplatizedType thisParamType = toMaybeTemplatizedType();\n+    TemplatizedType thatParamType = that.toMaybeTemplatizedType();\n     if (thisParamType != null || thatParamType != null) {\n-      // Check if one type is parameterized, but the other is not.\n+      // Check if one type is templatized, but the other is not.\n       boolean paramsMatch = false;\n       if (thisParamType != null && thatParamType != null) {\n-        paramsMatch = thisParamType.getParameterType().checkEquivalenceHelper(\n-            thatParamType.getParameterType(), eqMethod);\n+        paramsMatch = thisParamType.getTemplateType().checkEquivalenceHelper(\n+            thatParamType.getTemplateType(), eqMethod);\n       } else if (eqMethod == EquivalenceMethod.IDENTITY) {\n         paramsMatch = false;\n       } else {\n       return thisType.toMaybeUnionType().meet(thatType);\n     } else if (thatType.isUnionType()) {\n       return thatType.toMaybeUnionType().meet(thisType);\n-    } else if (thisType.isParameterizedType()) {\n-      return thisType.toMaybeParameterizedType().getGreatestSubtypeHelper(\n+    } else if (thisType.isTemplatizedType()) {\n+      return thisType.toMaybeTemplatizedType().getGreatestSubtypeHelper(\n           thatType);\n-    }  else if (thatType.isParameterizedType()) {\n-      return thatType.toMaybeParameterizedType().getGreatestSubtypeHelper(\n+    }  else if (thatType.isTemplatizedType()) {\n+      return thatType.toMaybeTemplatizedType().getGreatestSubtypeHelper(\n           thisType);\n     } else if (thisType.isSubtype(thatType)) {\n       return filterNoResolvedType(thisType);\n       return false;\n     }\n \n-    // parameterized types.\n-    if (thisType.isParameterizedType()) {\n-      return thisType.toMaybeParameterizedType().isParameterizeSubtypeOf(\n+    // templatized types.\n+    if (thisType.isTemplatizedType()) {\n+      return thisType.toMaybeTemplatizedType().isTemplatizedSubtypeOf(\n           thatType);\n     }\n \n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n   }\n \n   /**\n-   * Creates a parameterized type.\n-   */\n-  public ParameterizedType createParameterizedType(\n+   * Creates a templatized type.\n+   */\n+  public TemplatizedType createTemplatizedType(\n       ObjectType objectType, JSType parameterType) {\n-    return new ParameterizedType(this, objectType, parameterType);\n+    return new TemplatizedType(this, objectType, parameterType);\n   }\n \n   /**\n           if (typeList != null &&\n               (\"Array\".equals(n.getString()) ||\n                \"Object\".equals(n.getString()))) {\n-            JSType parameterType =\n+            JSType templateType =\n                 createFromTypeNodesInternal(\n                     typeList.getLastChild(), sourceName, scope);\n-            namedType = new ParameterizedType(\n-                this, (ObjectType) namedType, parameterType);\n+            namedType = new TemplatizedType(\n+                this, (ObjectType) namedType, templateType);\n             if (typeList.hasMoreThanOneChild()) {\n               JSType indexType =\n                   createFromTypeNodesInternal(\n--- a/src/com/google/javascript/rhino/jstype/ModificationVisitor.java\n+++ b/src/com/google/javascript/rhino/jstype/ModificationVisitor.java\n   }\n \n   @Override\n-  public JSType caseParameterizedType(ParameterizedType type) {\n+  public JSType caseTemplatizedType(TemplatizedType type) {\n     ObjectType genericType = ObjectType.cast(\n         type.getReferencedTypeInternal().visit(this));\n-    JSType paramType = type.getParameterType().visit(this);\n+    JSType paramType = type.getTemplateType().visit(this);\n     if (type.getReferencedTypeInternal() != genericType\n-        || type.getParameterType() != paramType) {\n-      type = registry.createParameterizedType(genericType, paramType);\n+        || type.getTemplateType() != paramType) {\n+      type = registry.createTemplatizedType(genericType, paramType);\n     }\n     return type;\n   }\n--- a/src/com/google/javascript/rhino/jstype/ObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ObjectType.java\n \n   /**\n    * Gets the declared default element type.\n-   * @see ParameterizedType\n-   */\n-  public JSType getParameterType() {\n+   * @see TemplatizedType\n+   */\n+  public JSType getTemplateType() {\n     return null;\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n  * An object type which uses composition to delegate all calls.\n  *\n  * @see NamedType\n- * @see ParameterizedType\n+ * @see TemplatizedType\n  *\n  */\n class ProxyObjectType extends ObjectType {\n   }\n \n   @Override\n-  public JSType getParameterType() {\n+  public JSType getTemplateType() {\n     return referencedObjType == null ? null :\n-        referencedObjType.getParameterType();\n+        referencedObjType.getTemplateType();\n   }\n \n   @Override\n   }\n \n   @Override\n-  public ParameterizedType toMaybeParameterizedType() {\n-    return referencedType.toMaybeParameterizedType();\n+  public TemplatizedType toMaybeTemplatizedType() {\n+    return referencedType.toMaybeTemplatizedType();\n   }\n \n   @Override\n--- a/src/com/google/javascript/rhino/jstype/RelationshipVisitor.java\n+++ b/src/com/google/javascript/rhino/jstype/RelationshipVisitor.java\n   T caseUnionType(UnionType thisType, JSType thatType);\n \n   /**\n-   * Parameterized type's case.\n+   * Templatized type's case.\n    */\n-  T caseParameterizedType(ParameterizedType thisType, JSType thatType);\n+  T caseTemplatizedType(TemplatizedType thisType, JSType thatType);\n \n   /**\n    * Template type's case.\n--- /dev/null\n+++ b/src/com/google/javascript/rhino/jstype/TemplatizedType.java\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Bob Jervis\n+ *   Google Inc.\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.common.base.Preconditions;\n+\n+/**\n+ * An object type with a declared default element type, such as\n+ * <code>Array.<string></code>.\n+ *\n+ * // TODO(user): Define the subtyping relation for templatized types. Also,\n+ * take templatized type into account for equality.\n+ *\n+ */\n+public final class TemplatizedType extends ProxyObjectType {\n+  private static final long serialVersionUID = 1L;\n+\n+  final JSType templateType;\n+\n+  TemplatizedType(\n+      JSTypeRegistry registry, ObjectType objectType, JSType templateType) {\n+    super(registry, objectType);\n+    this.templateType = templateType;\n+  }\n+\n+  @Override\n+  public JSType getTemplateType() {\n+    return templateType;\n+  }\n+\n+  @Override\n+  String toStringHelper(boolean forAnnotations) {\n+    String result = super.toStringHelper(forAnnotations);\n+    return result + \".<\" + templateType.toStringHelper(forAnnotations) + \">\";\n+  }\n+\n+  @Override\n+  public <T> T visit(Visitor<T> visitor) {\n+    return visitor.caseTemplatizedType(this);\n+  }\n+\n+  @Override <T> T visit(RelationshipVisitor<T> visitor, JSType that) {\n+    return visitor.caseTemplatizedType(this, that);\n+  }\n+\n+  @Override\n+  public TemplatizedType toMaybeTemplatizedType() {\n+    return this;\n+  }\n+\n+  @Override\n+  public boolean hasAnyTemplateTypesInternal() {\n+    return super.hasAnyTemplateTypes() || templateType.hasAnyTemplateTypes();\n+  }\n+\n+  @Override\n+  public boolean isSubtype(JSType that) {\n+    return isSubtypeHelper(this, that);\n+  }\n+\n+  boolean isTemplatizedSubtypeOf(JSType thatType) {\n+    if (thatType.isTemplatizedType()) {\n+      JSType thisParameter = this.templateType;\n+      JSType thatParameter = thatType.toMaybeTemplatizedType().templateType;\n+      // Currently, there is no way to declare a templatized type so we have\n+      // no way to determine if the type parameters are in anyway related.\n+      //\n+      // Right now we fallback to the raw type relationship if the raw types\n+      // are different. This is not great, and we'll figure out a better\n+      // solution later.\n+      if (this.wrapsSameRawType(thatType)) {\n+        return (thisParameter.isSubtype(thatParameter)\n+            || thatParameter.isSubtype(thisParameter));\n+      }\n+    }\n+\n+    return this.getReferencedTypeInternal().isSubtype(thatType);\n+  }\n+\n+  boolean wrapsSameRawType(JSType that) {\n+    return that.isTemplatizedType() && this.getReferencedTypeInternal()\n+        .isEquivalentTo(\n+            that.toMaybeTemplatizedType().getReferencedTypeInternal());\n+  }\n+\n+  boolean wrapsRawType(JSType that) {\n+    return this.getReferencedTypeInternal().isEquivalentTo(that);\n+  }\n+\n+  /**\n+   * Computes the greatest subtype of two related templatized types.\n+   * @return The greatest subtype.\n+   */\n+  JSType getGreatestSubtypeHelper(JSType rawThat) {\n+    Preconditions.checkNotNull(rawThat);\n+\n+    if (!wrapsSameRawType(rawThat)) {\n+      if (!rawThat.isTemplatizedType()) {\n+        if (this.isSubtype(rawThat)) {\n+          return this;\n+        } else if (rawThat.isSubtype(this)) {\n+          return filterNoResolvedType(rawThat);\n+        }\n+      }\n+      if (this.isObject() && rawThat.isObject()) {\n+        return this.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+      }\n+      return this.getNativeType(JSTypeNative.NO_TYPE);\n+    }\n+\n+    TemplatizedType that = rawThat.toMaybeTemplatizedType();\n+    Preconditions.checkNotNull(that);\n+\n+    if (this.templateType.isEquivalentTo(that.templateType)) {\n+      return this;\n+    }\n+\n+    // For types that have the same raw type but different type parameters,\n+    // we simply create a type has a \"unknown\" type parameter.  This is\n+    // equivalent to the raw type.\n+    return getReferencedObjTypeInternal();\n+  }\n+}\n--- a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n           } else {\n \n             // Because \"Foo\" and \"Foo.<?>\" are roughly equivalent\n-            // parameterized types, special care is needed when building the\n+            // templatized types, special care is needed when building the\n             // union. For example:\n             //   Object is consider a subtype of Object.<string>\n             // but we want to leave \"Object\" not \"Object.<string>\" when\n             // building the subtype.\n             //\n \n-            if (alternate.isParameterizedType() || current.isParameterizedType()) {\n+            if (alternate.isTemplatizedType() || current.isTemplatizedType()) {\n               // Cases:\n               // 1) alternate:Array.<string> and current:Object ==> Object\n               // 2) alternate:Array.<string> and current:Array ==> Array\n               // 9) alternate:Array.<string> and\n               //    current:Object.<string> ==> Object.<string>|Array.<string>\n \n-              if (!current.isParameterizedType()) {\n+              if (!current.isTemplatizedType()) {\n                 if (alternate.isSubtype(current)) {\n                   // case 1, 2\n                   return this;\n                 }\n                 // case 3: leave current, add alternate\n-              } else if (!alternate.isParameterizedType()) {\n+              } else if (!alternate.isTemplatizedType()) {\n                 if (current.isSubtype(alternate)) {\n                   // case 4, 5\n                   removeCurrent = true;\n                 }\n                 // case 6: leave current, add alternate\n               } else {\n-                Preconditions.checkState(current.isParameterizedType()\n-                    && alternate.isParameterizedType());\n-                ParameterizedType parameterizedAlternate = alternate.toMaybeParameterizedType();\n-                ParameterizedType parameterizedCurrent = current.toMaybeParameterizedType();\n-\n-                if (parameterizedCurrent.wrapsSameRawType(parameterizedAlternate)) {\n-                  JSType currentTypeParameter = parameterizedCurrent.getParameterType();\n-                  if (currentTypeParameter.isEquivalentTo(parameterizedCurrent)) {\n+                Preconditions.checkState(current.isTemplatizedType()\n+                    && alternate.isTemplatizedType());\n+                TemplatizedType templatizedAlternate = alternate.toMaybeTemplatizedType();\n+                TemplatizedType templatizedCurrent = current.toMaybeTemplatizedType();\n+\n+                if (templatizedCurrent.wrapsSameRawType(templatizedAlternate)) {\n+                  JSType currentTypeParameter = templatizedCurrent.getTemplateType();\n+                  if (currentTypeParameter.isEquivalentTo(templatizedCurrent)) {\n                     // case 8\n                     return this;\n                   } else {\n                     // TODO(johnlenz): should we leave both types?\n                     // case 7: add a merged alternate\n-                    // We currently merge to the parameterized types to \"unknown\"\n+                    // We currently merge to the templatized types to \"unknown\"\n                     // which is equivalent to the raw type.\n-                    JSType merged = parameterizedCurrent\n+                    JSType merged = templatizedCurrent\n                         .getReferencedObjTypeInternal();\n                     return addAlternate(merged);\n                   }\n                 }\n                 // case 9: leave current, add alternate\n               }\n-              // Otherwise leave both parameterized types.\n+              // Otherwise leave both templatized types.\n             } else if (alternate.isSubtype(current)) {\n               // Alternate is unnecessary.\n               return this;\n--- a/src/com/google/javascript/rhino/jstype/Visitor.java\n+++ b/src/com/google/javascript/rhino/jstype/Visitor.java\n   T caseUnionType(UnionType type);\n \n   /**\n-   * Parameterized type's case.\n+   * Templatized type's case.\n    */\n-  T caseParameterizedType(ParameterizedType type);\n+  T caseTemplatizedType(TemplatizedType type);\n \n   /**\n    * Template type's case.\n--- a/src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java\n+++ b/src/com/google/javascript/rhino/testing/BaseJSTypeTestCase.java\n import com.google.javascript.rhino.jstype.JSTypeNative;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.ObjectType;\n-import com.google.javascript.rhino.jstype.ParameterizedType;\n+import com.google.javascript.rhino.jstype.TemplatizedType;\n import com.google.javascript.rhino.jstype.RecordTypeBuilder;\n \n import junit.framework.TestCase;\n     return registry.createTemplatizedType(baseType, templatizedTypes);\n   }\n \n-  protected JSType createParameterizedType(\n+  protected JSType createTemplatizedType(\n       ObjectType type, JSType typeParameter) {\n-    return registry.createParameterizedType(type, typeParameter);\n+    return registry.createTemplatizedType(type, typeParameter);\n   }\n \n   /**\n     Asserts.assertTypeNotEquals(msg, a, b);\n   }\n \n-  protected final ParameterizedType parameterize(ObjectType objType, JSType t) {\n-    return registry.createParameterizedType(objType, t);\n+  protected final TemplatizedType templatize(ObjectType objType, JSType t) {\n+    return registry.createTemplatizedType(objType, t);\n   }\n }\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \"required: string\", false);\n   }\n \n-  public void testParameterizedArray1() throws Exception {\n+  public void testTemplatizedArray1() throws Exception {\n     testTypes(\"/** @param {!Array.<number>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedArray2() throws Exception {\n+  public void testTemplatizedArray2() throws Exception {\n     testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n         \"* @return {number}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: number\");\n   }\n \n-  public void testParameterizedArray3() throws Exception {\n+  public void testTemplatizedArray3() throws Exception {\n     testTypes(\"/** @param {!Array.<number>} a\\n\" +\n         \"* @return {number}\\n\" +\n         \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n   }\n \n-  public void testParameterizedArray4() throws Exception {\n+  public void testTemplatizedArray4() throws Exception {\n     testTypes(\"/** @param {!Array.<number>} a\\n\" +\n         \"*/ var f = function(a) { a[0] = 'a'; };\",\n         \"assignment\\n\" +\n         \"required: number\");\n   }\n \n-  public void testParameterizedArray5() throws Exception {\n+  public void testTemplatizedArray5() throws Exception {\n     testTypes(\"/** @param {!Array.<*>} a\\n\" +\n         \"*/ var f = function(a) { a[0] = 'a'; };\");\n   }\n \n-  public void testParameterizedArray6() throws Exception {\n+  public void testTemplatizedArray6() throws Exception {\n     testTypes(\"/** @param {!Array.<*>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedArray7() throws Exception {\n+  public void testTemplatizedArray7() throws Exception {\n     testTypes(\"/** @param {?Array.<number>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedObject1() throws Exception {\n+  public void testTemplatizedObject1() throws Exception {\n     testTypes(\"/** @param {!Object.<number>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedObject2() throws Exception {\n+  public void testTemplatizedObject2() throws Exception {\n     testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a['x']; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedObject3() throws Exception {\n+  public void testTemplatizedObject3() throws Exception {\n     testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a['x']; };\",\n         \"required: number\");\n   }\n \n-  public void testParameterizedObject4() throws Exception {\n+  public void testTemplatizedObject4() throws Exception {\n     testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n         \"/** @param {!Object.<E,string>} a\\n\" +\n         \"* @return {string}\\n\" +\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         false);\n   }\n \n-  public void testParameterizedArray1() throws Exception {\n+  public void testTemplatizedArray1() throws Exception {\n     testTypes(\"/** @param {!Array.<number>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedArray2() throws Exception {\n+  public void testTemplatizedArray2() throws Exception {\n     testTypes(\"/** @param {!Array.<!Array.<number>>} a\\n\" +\n         \"* @return {number}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: number\");\n   }\n \n-  public void testParameterizedArray3() throws Exception {\n+  public void testTemplatizedArray3() throws Exception {\n     testTypes(\"/** @param {!Array.<number>} a\\n\" +\n         \"* @return {number}\\n\" +\n         \"*/ var f = function(a) { a[1] = 0; return a[0]; };\");\n   }\n \n-  public void testParameterizedArray4() throws Exception {\n+  public void testTemplatizedArray4() throws Exception {\n     testTypes(\"/** @param {!Array.<number>} a\\n\" +\n         \"*/ var f = function(a) { a[0] = 'a'; };\",\n         \"assignment\\n\" +\n         \"required: number\");\n   }\n \n-  public void testParameterizedArray5() throws Exception {\n+  public void testTemplatizedArray5() throws Exception {\n     testTypes(\"/** @param {!Array.<*>} a\\n\" +\n         \"*/ var f = function(a) { a[0] = 'a'; };\");\n   }\n \n-  public void testParameterizedArray6() throws Exception {\n+  public void testTemplatizedArray6() throws Exception {\n     testTypes(\"/** @param {!Array.<*>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedArray7() throws Exception {\n+  public void testTemplatizedArray7() throws Exception {\n     testTypes(\"/** @param {?Array.<number>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedObject1() throws Exception {\n+  public void testTemplatizedObject1() throws Exception {\n     testTypes(\"/** @param {!Object.<number>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a[0]; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedObject2() throws Exception {\n+  public void testTemplatizedObject2() throws Exception {\n     testTypes(\"/** @param {!Object.<string,number>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a['x']; };\",\n         \"required: string\");\n   }\n \n-  public void testParameterizedObject3() throws Exception {\n+  public void testTemplatizedObject3() throws Exception {\n     testTypes(\"/** @param {!Object.<number,string>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"*/ var f = function(a) { return a['x']; };\",\n         \"required: number\");\n   }\n \n-  public void testParameterizedObject4() throws Exception {\n+  public void testTemplatizedObject4() throws Exception {\n     testTypes(\"/** @enum {string} */ var E = {A: 'a', B: 'b'};\\n\" +\n         \"/** @param {!Object.<E,string>} a\\n\" +\n         \"* @return {string}\\n\" +\n         \"required: E.<string>\");\n   }\n \n-  public void testParameterizedObject5() throws Exception {\n+  public void testTemplatizedObject5() throws Exception {\n     testTypes(\"/** @constructor */ function F() {\" +\n         \"  /** @type {Object.<number, string>} */ this.numbers = {};\" +\n         \"}\" +\n         \"}\\n\");\n   }\n \n-  public void testParameterized1() throws Exception {\n+  public void testTemplatized1() throws Exception {\n     testTypes(\n         \"/** @type {!Array.<string>} */\" +\n         \"var arr1 = [];\\n\" +\n         \"required: Array.<string>\");\n   }\n \n-  public void testParameterized2() throws Exception {\n+  public void testTemplatized2() throws Exception {\n     testTypes(\n         \"/** @type {!Array.<string>} */\" +\n         \"var arr1 = /** @type {!Array.<number>} */([]);\\n\",\n         \"required: Array.<string>\");\n   }\n \n-  public void testParameterized3() throws Exception {\n+  public void testTemplatized3() throws Exception {\n     testTypes(\n         \"/** @type {Array.<string>} */\" +\n         \"var arr1 = /** @type {!Array.<number>} */([]);\\n\",\n         \"required: (Array.<string>|null)\");\n   }\n \n-  public void testParameterized4() throws Exception {\n+  public void testTemplatized4() throws Exception {\n     testTypes(\n         \"/** @type {Array.<string>} */\" +\n         \"var arr1 = [];\\n\" +\n         \"required: (Array.<number>|null)\");\n   }\n \n-  public void testParameterized5() throws Exception {\n+  public void testTemplatized5() throws Exception {\n     testTypes(\n         \"/**\\n\" +\n         \" * @param {Object.<T>} obj\\n\" +\n         \"some(g());\\n\");\n   }\n \n-  public void testParameterizedTypeSubtypes2() throws Exception {\n-    JSType arrayOfNumber = createParameterizedType(\n+  public void testTemplatizedTypeSubtypes2() throws Exception {\n+    JSType arrayOfNumber = createTemplatizedType(\n         ARRAY_TYPE, NUMBER_TYPE);\n-    JSType arrayOfString = createParameterizedType(\n+    JSType arrayOfString = createTemplatizedType(\n         ARRAY_TYPE, STRING_TYPE);\n     assertFalse(arrayOfString.isSubtype(createUnionType(arrayOfNumber, NULL_VOID)));\n \n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n   }\n \n   public void testFor5() {\n-    assuming(\"y\", parameterize(\n+    assuming(\"y\", templatize(\n         getNativeObjectType(ARRAY_TYPE), getNativeType(NUMBER_TYPE)));\n     inFunction(\n         \"var x = null; for (var i = 0; i < y.length; i++) { x = y[i]; }\");\n     return registry.getNativeType(t);\n   }\n \n-  private JSType parameterize(ObjectType objType, JSType t) {\n-    return registry.createParameterizedType(objType, t);\n+  private JSType templatize(ObjectType objType, JSType t) {\n+    return registry.createTemplatizedType(objType, t);\n   }\n }\n--- a/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java\n     assertTypeEquals(VOID_TYPE, parse(\"@type {void}*/\").getType());\n   }\n \n-  public void testParseParametrizedType1() throws Exception {\n+  public void testParseTemplatizedType1() throws Exception {\n     JSDocInfo info = parse(\"@type !Array.<number> */\");\n-    assertTypeEquals(parameterize(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n-  }\n-\n-  public void testParseParametrizedType2() throws Exception {\n+    assertTypeEquals(templatize(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n+  }\n+\n+  public void testParseTemplatizedType2() throws Exception {\n     JSDocInfo info = parse(\"@type {!Array.<number>}*/\");\n-    assertTypeEquals(parameterize(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n-  }\n-\n-  public void testParseParametrizedType3() throws Exception {\n+    assertTypeEquals(templatize(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n+  }\n+\n+  public void testParseTemplatizedType3() throws Exception {\n     JSDocInfo info = parse(\"@type !Array.<(number,null)>*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n+        templatize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n         info.getType());\n   }\n \n-  public void testParseParametrizedType4() throws Exception {\n+  public void testParseTemplatizedType4() throws Exception {\n     JSDocInfo info = parse(\"@type {!Array.<(number|null)>}*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n+        templatize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n         info.getType());\n   }\n \n-  public void testParseParametrizedType5() throws Exception {\n+  public void testParseTemplatizedType5() throws Exception {\n     JSDocInfo info = parse(\"@type {!Array.<Array.<(number|null)>>}*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE,\n+        templatize(ARRAY_TYPE,\n             createUnionType(NULL_TYPE,\n-                parameterize(ARRAY_TYPE,\n+                templatize(ARRAY_TYPE,\n                     createUnionType(NUMBER_TYPE, NULL_TYPE)))),\n         info.getType());\n   }\n \n-  public void testParseParametrizedType6() throws Exception {\n+  public void testParseTemplatizedType6() throws Exception {\n     JSDocInfo info = parse(\"@type {!Array.<!Array.<(number|null)>>}*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE,\n-            parameterize(ARRAY_TYPE,\n+        templatize(ARRAY_TYPE,\n+            templatize(ARRAY_TYPE,\n                 createUnionType(NUMBER_TYPE, NULL_TYPE))),\n         info.getType());\n   }\n \n-  public void testParseParametrizedType7() throws Exception {\n+  public void testParseTemplatizedType7() throws Exception {\n     JSDocInfo info = parse(\"@type {!Array.<function():Date>}*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE,\n+        templatize(ARRAY_TYPE,\n             registry.createFunctionType(\n                 createUnionType(DATE_TYPE, NULL_TYPE))),\n         info.getType());\n   }\n \n-  public void testParseParametrizedType8() throws Exception {\n+  public void testParseTemplatizedType8() throws Exception {\n     JSDocInfo info = parse(\"@type {!Array.<function():!Date>}*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE,\n+        templatize(ARRAY_TYPE,\n             registry.createFunctionType(DATE_TYPE)),\n         info.getType());\n   }\n \n-  public void testParseParametrizedType9() throws Exception {\n+  public void testParseTemplatizedType9() throws Exception {\n     JSDocInfo info = parse(\"@type {!Array.<Date|number>}*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE,\n+        templatize(ARRAY_TYPE,\n             createUnionType(DATE_TYPE, NUMBER_TYPE, NULL_TYPE)),\n         info.getType());\n   }\n \n-  public void testParseParametrizedType10() throws Exception {\n+  public void testParseTemplatizedType10() throws Exception {\n     JSDocInfo info = parse(\"@type {!Array.<Date|number|boolean>}*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE,\n+        templatize(ARRAY_TYPE,\n             createUnionType(DATE_TYPE, NUMBER_TYPE, BOOLEAN_TYPE, NULL_TYPE)),\n         info.getType());\n   }\n \n-  public void testParseParameterizedType11() throws Exception {\n+  public void testParseTemplatizedType11() throws Exception {\n     JSDocInfo info = parse(\"@type {!Object.<number>}*/\");\n     assertTypeEquals(\n-        parameterize(OBJECT_TYPE, NUMBER_TYPE),\n+        templatize(OBJECT_TYPE, NUMBER_TYPE),\n         info.getType());\n     assertParameterTypeEquals(NUMBER_TYPE, info.getType());\n   }\n \n-  public void testParseParameterizedType12() throws Exception {\n+  public void testParseTemplatizedType12() throws Exception {\n     JSDocInfo info = parse(\"@type {!Object.<string,number>}*/\");\n     assertTypeEquals(\n-        parameterize(OBJECT_TYPE, NUMBER_TYPE), info.getType());\n+        templatize(OBJECT_TYPE, NUMBER_TYPE), info.getType());\n     assertParameterTypeEquals(NUMBER_TYPE, info.getType());\n     assertIndexTypeEquals(STRING_TYPE, info.getType());\n   }\n \n-  public void testParseParametrizedType13() throws Exception {\n+  public void testParseTemplatizedType13() throws Exception {\n     JSDocInfo info = parse(\"@type !Array.<?> */\");\n-    assertTypeEquals(parameterize(ARRAY_TYPE, UNKNOWN_TYPE), info.getType());\n+    assertTypeEquals(templatize(ARRAY_TYPE, UNKNOWN_TYPE), info.getType());\n   }\n \n   public void testParseUnionType1() throws Exception {\n   public void testParseUnionType4() throws Exception {\n     JSDocInfo info = parse(\"@type {(Array.<boolean>,null)}*/\");\n     assertTypeEquals(createUnionType(\n-        parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n+        templatize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n   }\n \n   public void testParseUnionType5() throws Exception {\n     JSDocInfo info = parse(\"@type {(null, Array.<boolean>)}*/\");\n     assertTypeEquals(createUnionType(\n-        parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n+        templatize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n   }\n \n   public void testParseUnionType6() throws Exception {\n     JSDocInfo info = parse(\"@type {Array.<boolean>|null}*/\");\n     assertTypeEquals(createUnionType(\n-        parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n+        templatize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n   }\n \n   public void testParseUnionType7() throws Exception {\n     JSDocInfo info = parse(\"@type {null|Array.<boolean>}*/\");\n     assertTypeEquals(createUnionType(\n-        parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n+        templatize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n   }\n \n   public void testParseUnionType8() throws Exception {\n     JSDocInfo info = parse(\"@type {null||Array.<boolean>}*/\");\n     assertTypeEquals(createUnionType(\n-        parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n+        templatize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n   }\n \n   public void testParseUnionType9() throws Exception {\n     JSDocInfo info = parse(\"@type {Array.<boolean>||null}*/\");\n     assertTypeEquals(createUnionType(\n-        parameterize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n+        templatize(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE), info.getType());\n   }\n \n   public void testParseUnionType10() throws Exception {\n   public void testParseNullableModifiers2() throws Exception {\n     JSDocInfo info = parse(\"@type {!Array.<string?>}*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE, createUnionType(STRING_TYPE, NULL_TYPE)),\n+        templatize(ARRAY_TYPE, createUnionType(STRING_TYPE, NULL_TYPE)),\n         info.getType());\n   }\n \n   public void testParseNullableModifiers3() throws Exception {\n     JSDocInfo info = parse(\"@type {Array.<boolean>?}*/\");\n     assertTypeEquals(\n-        createNullableType(parameterize(ARRAY_TYPE, BOOLEAN_TYPE)),\n+        createNullableType(templatize(ARRAY_TYPE, BOOLEAN_TYPE)),\n         info.getType());\n   }\n \n \n   public void testParseNewline2() throws Exception {\n     JSDocInfo info = parse(\"@type !Array.<\\n* number\\n* > */\");\n-    assertTypeEquals(parameterize(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n+    assertTypeEquals(templatize(ARRAY_TYPE, NUMBER_TYPE), info.getType());\n   }\n \n   public void testParseNewline3() throws Exception {\n     JSDocInfo info = parse(\"@type !Array.<(number,\\n* null)>*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n+        templatize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n         info.getType());\n   }\n \n   public void testParseNewline4() throws Exception {\n     JSDocInfo info = parse(\"@type !Array.<(number|\\n* null)>*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n+        templatize(ARRAY_TYPE, createUnionType(NUMBER_TYPE, NULL_TYPE)),\n         info.getType());\n   }\n \n   public void testParseNewline5() throws Exception {\n     JSDocInfo info = parse(\"@type !Array.<function(\\n* )\\n* :\\n* Date>*/\");\n     assertTypeEquals(\n-        parameterize(ARRAY_TYPE,\n+        templatize(ARRAY_TYPE,\n             registry.createFunctionType(\n                 createUnionType(DATE_TYPE, NULL_TYPE))),\n         info.getType());\n     JSDocInfo info =\n         parse(\"@return {null|string|Array.<boolean>}*/\");\n     assertTypeEquals(\n-        createUnionType(parameterize(ARRAY_TYPE, BOOLEAN_TYPE),\n+        createUnionType(templatize(ARRAY_TYPE, BOOLEAN_TYPE),\n             NULL_TYPE, STRING_TYPE),\n         info.getReturnType());\n   }\n     JSDocInfo info =\n         parse(\"@returns {null|(string,Array.<boolean>)}*/\");\n     assertTypeEquals(\n-        createUnionType(parameterize(ARRAY_TYPE, BOOLEAN_TYPE),\n+        createUnionType(templatize(ARRAY_TYPE, BOOLEAN_TYPE),\n             NULL_TYPE, STRING_TYPE),\n         info.getReturnType());\n   }\n     JSDocInfo info =\n         parse(\"@return {((null||Array.<boolean>,string),boolean)}*/\");\n     assertTypeEquals(\n-        createUnionType(parameterize(ARRAY_TYPE, BOOLEAN_TYPE),\n+        createUnionType(templatize(ARRAY_TYPE, BOOLEAN_TYPE),\n             NULL_TYPE, STRING_TYPE, BOOLEAN_TYPE),\n         info.getReturnType());\n   }\n   }\n \n   private void assertParameterTypeEquals(JSType expected, JSTypeExpression te) {\n-    assertEquals(expected, ((ObjectType) resolve(te)).getParameterType());\n+    assertEquals(expected, ((ObjectType) resolve(te)).getTemplateType());\n   }\n \n   private void assertIndexTypeEquals(JSType expected, JSTypeExpression te) {\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.SimpleErrorReporter;\n import com.google.javascript.rhino.Token;\n-import com.google.javascript.rhino.jstype.ArrowType;\n import com.google.javascript.rhino.jstype.JSType.TypePair;\n import com.google.javascript.rhino.jstype.RecordTypeBuilder.RecordProperty;\n import com.google.javascript.rhino.testing.Asserts;\n         recordType,\n         forwardDeclaredNamedType,\n         createUnionType(forwardDeclaredNamedType, NULL_TYPE),\n-        createParameterizedType(OBJECT_TYPE, STRING_TYPE),\n-        createParameterizedType(OBJECT_TYPE, NUMBER_TYPE),\n-        createParameterizedType(ARRAY_TYPE, STRING_TYPE),\n-        createParameterizedType(ARRAY_TYPE, NUMBER_TYPE),\n+        createTemplatizedType(OBJECT_TYPE, STRING_TYPE),\n+        createTemplatizedType(OBJECT_TYPE, NUMBER_TYPE),\n+        createTemplatizedType(ARRAY_TYPE, STRING_TYPE),\n+        createTemplatizedType(ARRAY_TYPE, NUMBER_TYPE),\n         createUnionType(\n-            createParameterizedType(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE),\n+            createTemplatizedType(ARRAY_TYPE, BOOLEAN_TYPE), NULL_TYPE),\n         createUnionType(\n-            createParameterizedType(OBJECT_TYPE, BOOLEAN_TYPE), NULL_TYPE)\n+            createTemplatizedType(OBJECT_TYPE, BOOLEAN_TYPE), NULL_TYPE)\n         );\n   }\n \n     verifySubtypeChain(typeChain);\n   }\n \n-  public void testParameterizedArrayChain() throws Exception {\n-    JSType arrayOfNoType = createParameterizedType(\n+  public void testTemplatizedArrayChain() throws Exception {\n+    JSType arrayOfNoType = createTemplatizedType(\n         ARRAY_TYPE, NO_TYPE);\n-    JSType arrayOfString = createParameterizedType(\n+    JSType arrayOfString = createTemplatizedType(\n         ARRAY_TYPE, STRING_TYPE);\n-    JSType arrayOfStringOrNumber = createParameterizedType(\n+    JSType arrayOfStringOrNumber = createTemplatizedType(\n         ARRAY_TYPE, createUnionType(STRING_TYPE, NUMBER_TYPE));\n-    JSType arrayOfAllType = createParameterizedType(\n+    JSType arrayOfAllType = createTemplatizedType(\n         ARRAY_TYPE, ALL_TYPE);\n \n     List<JSType> typeChain = Lists.newArrayList(\n     verifySubtypeChain(typeChain, false);\n   }\n \n-  public void testParameterizedArrayChain2() throws Exception {\n-    JSType arrayOfNoType = createParameterizedType(\n+  public void testTemplatizedArrayChain2() throws Exception {\n+    JSType arrayOfNoType = createTemplatizedType(\n         ARRAY_TYPE, NO_TYPE);\n-    JSType arrayOfNoObjectType = createParameterizedType(\n+    JSType arrayOfNoObjectType = createTemplatizedType(\n         ARRAY_TYPE, NO_OBJECT_TYPE);\n-    JSType arrayOfArray = createParameterizedType(\n+    JSType arrayOfArray = createTemplatizedType(\n         ARRAY_TYPE, ARRAY_TYPE);\n-    JSType arrayOfObject = createParameterizedType(\n+    JSType arrayOfObject = createTemplatizedType(\n         ARRAY_TYPE, OBJECT_TYPE);\n-    JSType arrayOfAllType = createParameterizedType(\n+    JSType arrayOfAllType = createTemplatizedType(\n         ARRAY_TYPE, ALL_TYPE);\n \n     List<JSType> typeChain = Lists.newArrayList(\n     verifySubtypeChain(typeChain, false);\n   }\n \n-  public void testParameterizedObjectChain() throws Exception {\n-    JSType objectOfNoType = createParameterizedType(\n+  public void testTemplatizedObjectChain() throws Exception {\n+    JSType objectOfNoType = createTemplatizedType(\n         OBJECT_TYPE, NO_TYPE);\n-    JSType objectOfString = createParameterizedType(\n+    JSType objectOfString = createTemplatizedType(\n         OBJECT_TYPE, STRING_TYPE);\n-    JSType objectOfStringOrNumber = createParameterizedType(\n+    JSType objectOfStringOrNumber = createTemplatizedType(\n         OBJECT_TYPE, createUnionType(STRING_TYPE, NUMBER_TYPE));\n-    JSType objectOfAllType = createParameterizedType(\n+    JSType objectOfAllType = createTemplatizedType(\n         OBJECT_TYPE, ALL_TYPE);\n \n     List<JSType> typeChain = Lists.newArrayList(\n     verifySubtypeChain(typeChain, false);\n   }\n \n-  public void testMixedParameterizedTypeChain() throws Exception {\n-    JSType arrayOfNoType = createParameterizedType(\n+  public void testMixedTemplatizedTypeChain() throws Exception {\n+    JSType arrayOfNoType = createTemplatizedType(\n         ARRAY_TYPE, NO_TYPE);\n-    JSType arrayOfString = createParameterizedType(\n+    JSType arrayOfString = createTemplatizedType(\n         ARRAY_TYPE, STRING_TYPE);\n-    JSType objectOfString = createParameterizedType(\n+    JSType objectOfString = createTemplatizedType(\n         OBJECT_TYPE, STRING_TYPE);\n-    JSType objectOfStringOrNumber = createParameterizedType(\n+    JSType objectOfStringOrNumber = createTemplatizedType(\n         OBJECT_TYPE, createUnionType(STRING_TYPE, NUMBER_TYPE));\n-    JSType objectOfAllType = createParameterizedType(\n+    JSType objectOfAllType = createTemplatizedType(\n         OBJECT_TYPE, ALL_TYPE);\n \n     List<JSType> typeChain = Lists.newArrayList(\n     verifySubtypeChain(typeChain, false);\n   }\n \n-  public void testParameterizedTypeSubtypes() {\n-    JSType objectOfString = createParameterizedType(\n+  public void testTemplatizedTypeSubtypes() {\n+    JSType objectOfString = createTemplatizedType(\n         OBJECT_TYPE, STRING_TYPE);\n-    JSType arrayOfString = createParameterizedType(\n+    JSType arrayOfString = createTemplatizedType(\n         ARRAY_TYPE, STRING_TYPE);\n-    JSType arrayOfNumber = createParameterizedType(\n+    JSType arrayOfNumber = createTemplatizedType(\n         ARRAY_TYPE, NUMBER_TYPE);\n-    JSType arrayOfUnknown = createParameterizedType(\n+    JSType arrayOfUnknown = createTemplatizedType(\n         ARRAY_TYPE, UNKNOWN_TYPE);\n \n     assertFalse(objectOfString.isSubtype(ARRAY_TYPE));\n     assertFalse(arrayOfString.isSubtype(createUnionType(arrayOfNumber, NULL_VOID)));\n   }\n \n-  public void testParameterizedTypeRelations() throws Exception {\n-    JSType objectOfString = createParameterizedType(\n+  public void testTemplatizedTypeRelations() throws Exception {\n+    JSType objectOfString = createTemplatizedType(\n         OBJECT_TYPE, STRING_TYPE);\n-    JSType arrayOfString = createParameterizedType(\n+    JSType arrayOfString = createTemplatizedType(\n         ARRAY_TYPE, STRING_TYPE);\n-    JSType arrayOfNumber = createParameterizedType(\n+    JSType arrayOfNumber = createTemplatizedType(\n         ARRAY_TYPE, NUMBER_TYPE);\n \n     // Union and least super type cases:\n             .hasAnyTemplateTypes());\n \n     assertTrue(\n-        registry.createParameterizedType(\n+        registry.createTemplatizedType(\n             ARRAY_TYPE, new TemplateType(registry, \"T\"))\n             .hasAnyTemplateTypes());\n     assertFalse(\n-        registry.createParameterizedType(\n+        registry.createTemplatizedType(\n             ARRAY_TYPE, STRING_TYPE)\n             .hasAnyTemplateTypes());\n \n--- /dev/null\n+++ b/test/com/google/javascript/rhino/jstype/TemplatizedTypeTest.java\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   John Lenz\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.javascript.rhino.testing.BaseJSTypeTestCase;\n+\n+public class TemplatizedTypeTest extends BaseJSTypeTestCase {\n+\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+  }\n+\n+  @Override\n+  protected TemplatizedType createTemplatizedType(\n+      ObjectType objectType, JSType templateType) {\n+    return registry.createTemplatizedType(objectType, templateType);\n+  }\n+\n+  /**\n+   * Assert that a type can assign to itself.\n+   */\n+  private void assertTypeCanAssignToItself(JSType type) {\n+    assertTrue(type.isSubtype(type));\n+  }\n+\n+  /**\n+   * Tests the behavior of variants type.\n+   */\n+  @SuppressWarnings(\"checked\")\n+  public void testTemplatizedType() throws Exception {\n+    TemplatizedType arrOfString = createTemplatizedType(\n+        ARRAY_TYPE, STRING_TYPE);\n+    assertTypeCanAssignToItself(arrOfString);\n+    assertTrue(arrOfString.isSubtype(ARRAY_TYPE));\n+    assertTrue(ARRAY_TYPE.isSubtype(arrOfString));\n+\n+    TemplatizedType arrOfNumber = createTemplatizedType(\n+        ARRAY_TYPE, NUMBER_TYPE);\n+    assertTypeCanAssignToItself(arrOfNumber);\n+    assertTrue(arrOfNumber.isSubtype(ARRAY_TYPE));\n+    assertTrue(ARRAY_TYPE.isSubtype(arrOfNumber));\n+\n+    assertTrue(arrOfString.isEquivalentTo(createTemplatizedType(\n+        ARRAY_TYPE, STRING_TYPE)));\n+\n+    assertFalse(arrOfString.isEquivalentTo(ARRAY_TYPE));\n+    assertFalse(arrOfString.isEquivalentTo(ARRAY_TYPE));\n+    assertFalse(arrOfString.isEquivalentTo(arrOfNumber));\n+    assertFalse(arrOfNumber.isEquivalentTo(arrOfString));\n+  }\n+\n+  public void testPrint1() throws Exception {\n+    TemplatizedType arrOfString = createTemplatizedType(\n+        ARRAY_TYPE, STRING_TYPE);\n+    assertEquals(\"Array.<string>\", arrOfString.toString());\n+  }\n+\n+  public void testPrint2() throws Exception {\n+    TemplatizedType arrOfTemplateType = createTemplatizedType(\n+        ARRAY_TYPE, new TemplateType(registry, \"T\"));\n+    assertEquals(\"Array.<T>\", arrOfTemplateType.toString());\n+  }\n+\n+  public void testPrint3() throws Exception {\n+    TemplatizedType arrOfUnknown = createTemplatizedType(\n+        ARRAY_TYPE, UNKNOWN_TYPE);\n+    assertEquals(\"Array.<?>\", arrOfUnknown.toString());\n+  }\n+\n+  public void testDifferentRawTypes() throws Exception {\n+    TemplatizedType arrOfNumber = createTemplatizedType(\n+        ARRAY_TYPE, NUMBER_TYPE);\n+    TemplatizedType objType = createTemplatizedType(\n+        OBJECT_TYPE, UNKNOWN_TYPE);\n+    assertTrue(arrOfNumber.isSubtype(objType));\n+    assertFalse(objType.isSubtype(arrOfNumber));\n+  }\n+}", "timestamp": 1358991937, "metainfo": ""}