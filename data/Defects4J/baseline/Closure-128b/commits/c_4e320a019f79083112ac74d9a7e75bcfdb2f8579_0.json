{"sha": "4e320a019f79083112ac74d9a7e75bcfdb2f8579", "log": "Add a test  R=nicksantos DELTA=26  (23 added, 2 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4845   ", "commit": "\n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n import com.google.javascript.jscomp.DataFlowAnalysis.BranchedFlowState;\n import com.google.javascript.jscomp.type.FlowScope;\n import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;\n-import com.google.javascript.jscomp.type.SemanticReverseAbstractInterpreter;\n import com.google.javascript.rhino.Node;\n import com.google.javascript.rhino.jstype.EnumType;\n import com.google.javascript.rhino.jstype.JSType;\n   public void setUp() {\n     compiler = new Compiler();\n     CompilerOptions options = new CompilerOptions();\n+    options.setClosurePass(true);\n     options.setLanguageIn(LanguageMode.ECMASCRIPT5);\n     compiler.initOptions(options);\n     registry = compiler.getTypeRegistry();\n     cfa.process(null, n);\n     ControlFlowGraph<Node> cfg = cfa.getCfg();\n     // Create a simple reverse abstract interpreter.\n-    ReverseAbstractInterpreter rai = new SemanticReverseAbstractInterpreter(\n-        compiler.getCodingConvention(), registry);\n+    ReverseAbstractInterpreter rai = compiler.getReverseAbstractInterpreter();\n     // Do the type inference by data-flow analysis.\n     TypeInference dfa = new TypeInference(compiler, cfg, rai, assumedScope,\n         ASSERTION_FUNCTION_MAP);\n     inFunction(\"out1 = x; goog.asserts.assertInstanceof(x); out2 = x;\");\n     verify(\"out1\", startType);\n     verifySubtypeOf(\"out2\", OBJECT_TYPE);\n+  }\n+\n+  public void testAssertWithIsDef() {\n+    JSType startType = createNullableType(NUMBER_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\n+        \"out1 = x;\" +\n+        \"goog.asserts.assert(goog.isDefAndNotNull(x));\" +\n+        \"out2 = x;\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", NUMBER_TYPE);\n+  }\n+\n+  public void testAssertWithNotIsNull() {\n+    JSType startType = createNullableType(NUMBER_TYPE);\n+    assuming(\"x\", startType);\n+    inFunction(\n+        \"out1 = x;\" +\n+        \"goog.asserts.assert(!goog.isNull(x));\" +\n+        \"out2 = x;\");\n+    verify(\"out1\", startType);\n+    verify(\"out2\", NUMBER_TYPE);\n   }\n \n   public void testReturn1() {", "timestamp": 1337730245, "metainfo": ""}