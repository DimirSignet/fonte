{"sha": "e79ee2e8fd69d625424aa85863a2c15b4a1bcc8e", "log": "Warn if disambiguating a property might be allowed by usage but disallowed due to a invalidation of a related type.  R=mknichel DELTA=45 (44 added, 0 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=6204   ", "commit": "\n--- a/src/com/google/javascript/jscomp/DiagnosticGroups.java\n+++ b/src/com/google/javascript/jscomp/DiagnosticGroups.java\n \n   public static final DiagnosticGroup TYPE_INVALIDATION =\n       DiagnosticGroups.registerGroup(\"typeInvalidation\",\n-          DisambiguateProperties.Warnings.INVALIDATION);\n+          DisambiguateProperties.Warnings.INVALIDATION,\n+          DisambiguateProperties.Warnings.INVALIDATION_ON_TYPE);\n \n   public static final DiagnosticGroup DUPLICATE_VARS =\n       DiagnosticGroups.registerGroup(\"duplicate\",\n--- a/src/com/google/javascript/jscomp/DisambiguateProperties.java\n+++ b/src/com/google/javascript/jscomp/DisambiguateProperties.java\n         \"JSC_INVALIDATION\",\n         \"Property disambiguator skipping all instances of property {0} \"\n         + \"because of type {1} node {2}. {3}\");\n+\n+    static final DiagnosticType INVALIDATION_ON_TYPE = DiagnosticType.disabled(\n+        \"JSC_INVALIDATION_TYPE\",\n+        \"Property disambiguator skipping instances of property {0} \"\n+        + \"on type {1}. {2}\");\n   }\n \n   private final AbstractCompiler compiler;\n     int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0,\n         instancesSkipped = 0, singleTypeProps = 0;\n \n+    Set<String> reported = Sets.newHashSet();\n     for (Property prop : properties.values()) {\n       if (prop.shouldRename()) {\n         Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name);\n             ++instancesRenamed;\n           } else {\n             ++instancesSkipped;\n+\n+            CheckLevel checkLevelForProp = propertiesToErrorFor.get(prop.name);\n+            if (checkLevelForProp != null &&\n+                checkLevelForProp != CheckLevel.OFF &&\n+                !reported.contains(prop.name)) {\n+              reported.add(prop.name);\n+              compiler.report(JSError.make(\n+                  NodeUtil.getSourceName(node), node,\n+                  checkLevelForProp,\n+                  Warnings.INVALIDATION_ON_TYPE, prop.name,\n+                  rootType.toString(), \"\"));\n+            }\n           }\n         }\n       } else {\n--- a/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n+++ b/test/com/google/javascript/jscomp/DisambiguatePropertiesTest.java\n         .contains(\"Consider fixing errors\"));\n   }\n \n+  public void testUnionTypeInvalidationError() {\n+    String externs = \"\"\n+        + \"/** @constructor */ function Baz() {}\"\n+        + \"Baz.prototype.foobar\";\n+    String js = \"\"\n+        + \"/** @constructor */ function Ind() {this.foobar=0}\\n\"\n+        + \"/** @constructor */ function Foo() {}\\n\"\n+        + \"Foo.prototype.foobar = 0;\\n\"\n+        + \"/** @constructor */ function Bar() {}\\n\"\n+        + \"Bar.prototype.foobar = 0;\\n\"\n+        + \"/** @type {Foo|Bar} */\\n\"\n+        + \"var F = new Foo;\\n\"\n+        + \"F.foobar = 1\\n;\"\n+        + \"F = new Bar;\\n\"\n+        + \"/** @type {Baz} */\\n\"\n+        + \"var Z = new Baz;\\n\"\n+        + \"Z.foobar = 1\\n;\";\n+\n+    test(\n+        externs, js, \"\",\n+        DisambiguateProperties.Warnings.INVALIDATION_ON_TYPE, null);\n+    assertTrue(getLastCompiler().getErrors()[0].toString()\n+        .contains(\"foobar\"));\n+   }\n+\n   public void runFindHighestTypeInChain() {\n     // Check that this doesn't go into an infinite loop.\n     DisambiguateProperties.forJSTypeSystem(new Compiler(),", "timestamp": 1359418896, "metainfo": ""}