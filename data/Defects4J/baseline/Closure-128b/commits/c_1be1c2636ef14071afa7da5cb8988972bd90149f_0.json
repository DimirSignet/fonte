{"sha": "1be1c2636ef14071afa7da5cb8988972bd90149f", "log": "Fix getGreatestSubtype for UnionTypes by always returning the meet of the two types. (Andrew)    ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n       return thisType;\n     } else if (thatType.isSubtype(thisType)) {\n       return thatType;\n+    } else if (thisType.isUnionType()) {\n+      return ((UnionType) thisType).meet(thatType);\n+    } else if (thatType.isUnionType()) {\n+      return ((UnionType) thatType).meet(thisType);\n     } else if (thisType.isObject() && thatType.isObject()) {\n       return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n     }\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n     return getLeastSupertype(this, that);\n   }\n \n-  @Override\n-  public JSType getGreatestSubtype(JSType that) {\n-    if (that instanceof UnionType) {\n-      return meet((UnionType) that);\n-    }\n-    return getGreatestSubtype(this, that);\n-  }\n-\n-  private JSType meet(UnionType that) {\n+  JSType meet(JSType that) {\n     UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n     for (JSType alternate : alternates) {\n       if (alternate.isSubtype(that)) {\n         builder.addAlternate(alternate);\n       }\n     }\n-    for (JSType otherAlternate : that.alternates) {\n-      if (otherAlternate.isSubtype(this)) {\n-        builder.addAlternate(otherAlternate);\n-      }\n+\n+    if (that instanceof UnionType) {\n+      for (JSType otherAlternate : ((UnionType) that).alternates) {\n+        if (otherAlternate.isSubtype(this)) {\n+          builder.addAlternate(otherAlternate);\n+        }\n+      }\n+    } else if (that.isSubtype(this)) {\n+      builder.addAlternate(that);\n     }\n     JSType result = builder.build();\n-    return result == null ? getNativeType(JSTypeNative.NO_TYPE) : result;\n+    if (result != null) {\n+      return result;\n+    } else if (this.isObject() && that.isObject()) {\n+      return getNativeType(JSTypeNative.NO_OBJECT_TYPE);\n+    } else {\n+      return getNativeType(JSTypeNative.NO_TYPE);\n+    }\n   }\n \n   /**\n--- a/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/JSTypeTest.java\n     assertEquals(STRING_OBJECT_FUNCTION_TYPE, stringEnum.getConstructor());\n   }\n \n-  /**\n-   * Tests the behavior of variants type.\n-   */\n-  @SuppressWarnings(\"checked\")\n-      public void testUnionType() throws Exception {\n-    UnionType nullOrString =\n-        (UnionType) createUnionType(NULL_TYPE, STRING_OBJECT_TYPE);\n-    UnionType stringOrNull =\n-        (UnionType) createUnionType(STRING_OBJECT_TYPE, NULL_TYPE);\n-\n-    assertEquals(nullOrString, stringOrNull);\n-    assertEquals(stringOrNull, nullOrString);\n-\n-    assertTypeCanAssignToItself(createUnionType(VOID_TYPE, NUMBER_TYPE));\n-    assertTypeCanAssignToItself(\n-        createUnionType(NUMBER_TYPE, STRING_TYPE, OBJECT_TYPE));\n-    assertTypeCanAssignToItself(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE));\n-    assertTypeCanAssignToItself(createUnionType(VOID_TYPE));\n-\n-    UnionType nullOrUnknown =\n-        (UnionType) createUnionType(NULL_TYPE, unresolvedNamedType);\n-    assertTrue(nullOrUnknown.isUnknownType());\n-    assertEquals(nullOrUnknown, NULL_TYPE.getLeastSupertype(nullOrUnknown));\n-    assertEquals(nullOrUnknown, nullOrUnknown.getLeastSupertype(NULL_TYPE));\n-    assertEquals(UNKNOWN_TYPE,\n-        NULL_TYPE.getGreatestSubtype(nullOrUnknown));\n-    assertEquals(UNKNOWN_TYPE,\n-        nullOrUnknown.getGreatestSubtype(NULL_TYPE));\n-\n-    assertTrue(NULL_TYPE.differsFrom(nullOrUnknown));\n-    assertTrue(nullOrUnknown.differsFrom(NULL_TYPE));\n-    assertFalse(nullOrUnknown.differsFrom(unresolvedNamedType));\n-\n-    assertTrue(NULL_TYPE.isSubtype(nullOrUnknown));\n-    assertTrue(unresolvedNamedType.isSubtype(nullOrUnknown));\n-    assertTrue(nullOrUnknown.isSubtype(NULL_TYPE));\n-\n-    assertEquals(unresolvedNamedType,\n-        nullOrUnknown.restrictByNotNullOrUndefined());\n-\n-    // findPropertyType\n-    assertEquals(NUMBER_TYPE, nullOrString.findPropertyType(\"length\"));\n-    assertEquals(null, nullOrString.findPropertyType(\"lengthx\"));\n-\n-    Asserts.assertResolvesToSame(nullOrString);\n-  }\n \n   /**\n    * Tests object types.\n    * special corner cases.\n    */\n   @SuppressWarnings(\"checked\")\n-      public void testCanTestForEqualityWithCornerCases() {\n+  public void testCanTestForEqualityWithCornerCases() {\n     // null == undefined is always true\n     assertFalse(NULL_TYPE.canTestForEqualityWith(VOID_TYPE));\n \n     assertFalse(ALL_TYPE.isSubtype(TYPE_ERROR_TYPE));\n     assertTrue(ALL_TYPE.isSubtype(ALL_TYPE));\n     assertFalse(ALL_TYPE.isSubtype(VOID_TYPE));\n-  }\n-\n-  /**\n-   * Tests subtyping of union types.\n-   */\n-  public void testSubtypingUnionTypes() throws Exception {\n-    // subtypes\n-    assertTrue(BOOLEAN_TYPE.\n-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));\n-    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).\n-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));\n-    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).\n-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n-    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).\n-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n-    assertTrue(createUnionType(BOOLEAN_TYPE).\n-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n-    assertTrue(createUnionType(STRING_TYPE).\n-        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n-    assertTrue(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(ALL_TYPE));\n-    assertTrue(createUnionType(DATE_TYPE, REGEXP_TYPE).isSubtype(OBJECT_TYPE));\n-    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).\n-        isSubtype(ERROR_TYPE));\n-    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).\n-        isSubtype(OBJECT_TYPE));\n-\n-    // not subtypes\n-    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(NO_TYPE));\n-    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).\n-        isSubtype(NO_OBJECT_TYPE));\n-    assertFalse(createUnionType(NO_OBJECT_TYPE, NULL_TYPE).\n-        isSubtype(OBJECT_TYPE));\n-\n-    // defined unions\n-    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n-    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n-    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n-    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n-\n-    assertTrue(NUMBER_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));\n-    assertTrue(BOOLEAN_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));\n-    assertTrue(STRING_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));\n-\n-    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n-    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n-    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n-    assertTrue(BOOLEAN_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n-    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n   }\n \n   /**\n   }\n \n   /**\n-   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n-   */\n-  public void testGreatestSubtypeUnionTypes1() {\n-    assertEquals(NULL_TYPE, createNullableType(STRING_TYPE).getGreatestSubtype(\n-            createNullableType(NUMBER_TYPE)));\n-  }\n-\n-  /**\n-   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n-   */\n-  @SuppressWarnings(\"checked\")\n-      public void testGreatestSubtypeUnionTypes2() {\n-    UnionType evalUriError =\n-        (UnionType) createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE);\n-    assertEquals(evalUriError,\n-        evalUriError.getGreatestSubtype(ERROR_TYPE));\n-  }\n-\n-  /**\n-   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n-   */\n-  @SuppressWarnings(\"checked\")\n-      public void testGreatestSubtypeUnionTypes3() {\n-    // (number,undefined,null)\n-    UnionType nullableOptionalNumber =\n-        (UnionType) createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);\n-    // (null,undefined)\n-    UnionType nullUndefined =\n-        (UnionType) createUnionType(VOID_TYPE, NULL_TYPE);\n-    assertEquals(nullUndefined,\n-        nullUndefined.getGreatestSubtype(nullableOptionalNumber));\n-    assertEquals(nullUndefined,\n-        nullableOptionalNumber.getGreatestSubtype(nullUndefined));\n-  }\n-\n-  /**\n    * Tests that a derived class extending a type via a named type is a subtype\n    * of it.\n    */\n         }\n       }\n     }\n-  }\n-\n-  /**\n-   * Tests that special union types can assign to other types.  Unions\n-   * containing the unknown type should be able to assign to any other\n-   * type.\n-   */\n-  @SuppressWarnings(\"checked\")\n-      public void testSpecialUnionCanAssignTo() throws Exception {\n-    // autoboxing quirks\n-    UnionType numbers =\n-        (UnionType) createUnionType(NUMBER_TYPE, NUMBER_OBJECT_TYPE);\n-    assertFalse(numbers.canAssignTo(NUMBER_TYPE));\n-    assertFalse(numbers.canAssignTo(NUMBER_OBJECT_TYPE));\n-    assertFalse(numbers.canAssignTo(EVAL_ERROR_TYPE));\n-\n-    UnionType strings =\n-        (UnionType) createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n-    assertFalse(strings.canAssignTo(STRING_TYPE));\n-    assertFalse(strings.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(strings.canAssignTo(DATE_TYPE));\n-\n-    UnionType booleans =\n-        (UnionType) createUnionType(BOOLEAN_OBJECT_TYPE, BOOLEAN_TYPE);\n-    assertFalse(booleans.canAssignTo(BOOLEAN_TYPE));\n-    assertFalse(booleans.canAssignTo(BOOLEAN_OBJECT_TYPE));\n-    assertFalse(booleans.canAssignTo(REGEXP_TYPE));\n-\n-    // unknown quirks\n-    JSType unknown = createUnionType(UNKNOWN_TYPE, DATE_TYPE);\n-    assertTrue(unknown.canAssignTo(STRING_TYPE));\n-\n-    // all members need to be assignable to\n-    UnionType stringDate =\n-        (UnionType) createUnionType(STRING_OBJECT_TYPE, DATE_TYPE);\n-    assertTrue(stringDate.canAssignTo(OBJECT_TYPE));\n-    assertFalse(stringDate.canAssignTo(STRING_OBJECT_TYPE));\n-    assertFalse(stringDate.canAssignTo(DATE_TYPE));\n   }\n \n   /**\n         registry.getGreatestSubtypeWithProperty(derived2, \"propz\"));\n   }\n \n+  /**\n+   * Tests {@link JSTypeRegistry#getGreatestSubtypeWithProperty(JSType)}.\n+   */\n+  public void testGreatestSubtypeWithProperty() {\n+    ObjectType foo = registry.createObjectType(\"foo\", null, OBJECT_TYPE);\n+    ObjectType bar = registry.createObjectType(\"bar\", null, namedGoogBar);\n+\n+    foo.defineDeclaredProperty(\"propz\", UNKNOWN_TYPE, false);\n+    bar.defineDeclaredProperty(\"propz\", UNKNOWN_TYPE, false);\n+\n+    assertEquals(bar,\n+        registry.getGreatestSubtypeWithProperty(namedGoogBar, \"propz\"));\n+  }\n+\n   public void testGoodSetPrototypeBasedOn() {\n     FunctionType fun = registry.createConstructorType(\"fun\", null, null, null);\n     fun.setPrototypeBasedOn(unresolvedNamedType);\n   }\n \n   @SuppressWarnings(\"checked\")\n-      public void testGetTypesUnderInequality1() {\n+  public void testGetTypesUnderInequality1() {\n     // objects can be not equal to numbers\n     UnionType numberObject =\n         (UnionType) createUnionType(NUMBER_TYPE, OBJECT_TYPE);\n   }\n \n   @SuppressWarnings(\"checked\")\n-      public void testGetTypesUnderInequality2() {\n+  public void testGetTypesUnderInequality2() {\n     // null == undefined\n     UnionType nullUndefined =\n         (UnionType) createUnionType(VOID_TYPE, NULL_TYPE);\n   }\n \n   @SuppressWarnings(\"checked\")\n-      public void testGetTypesUnderInequality3() {\n+  public void testGetTypesUnderInequality3() {\n     // (number,string)\n     UnionType stringNumber =\n         (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE);\n   }\n \n   @SuppressWarnings(\"checked\")\n-      public void testGetTypesUnderInequality4() throws Exception {\n+  public void testGetTypesUnderInequality4() throws Exception {\n     // (number,undefined,null) and null\n     UnionType nullableOptionalNumber =\n         (UnionType) createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);\n \n     JSType recordType = registry.createRecordType(properties);\n     assertEquals(\"{ hello : number }\", recordType.toString());\n-  }\n-\n-  /**\n-   * Tests the factory method\n-   * {@link JSTypeRegistry#createUnionType(JSType...)}.\n-   */\n-  @SuppressWarnings(\"checked\")\n-      public void testCreateUnionType() throws Exception {\n-    // number\n-    UnionType optNumber =\n-        (UnionType) registry.createUnionType(NUMBER_TYPE, DATE_TYPE);\n-    assertTrue(optNumber.contains(NUMBER_TYPE));\n-    assertTrue(optNumber.contains(DATE_TYPE));\n-\n-    // union\n-    UnionType optUnion =\n-        (UnionType) registry.createUnionType(REGEXP_TYPE,\n-            registry.createUnionType(STRING_OBJECT_TYPE, DATE_TYPE));\n-    assertTrue(optUnion.contains(DATE_TYPE));\n-    assertTrue(optUnion.contains(STRING_OBJECT_TYPE));\n-    assertTrue(optUnion.contains(REGEXP_TYPE));\n   }\n \n   /**\n    * Tests {@code (U2U_CONSTRUCTOR,undefined) <: (U2U_CONSTRUCTOR,undefined)}.\n    */\n   @SuppressWarnings(\"checked\")\n-      public void testBug903110() throws Exception {\n+  public void testBug903110() throws Exception {\n     UnionType union =\n         (UnionType) createUnionType(U2U_CONSTRUCTOR_TYPE, VOID_TYPE);\n     assertTrue(VOID_TYPE.isSubtype(union));\n     assertTrue(U2U_FUNCTION_TYPE.isSubtype(U2U_CONSTRUCTOR_TYPE));\n     assertTrue(U2U_FUNCTION_TYPE.\n         isSubtype(createOptionalType(U2U_CONSTRUCTOR_TYPE)));\n-  }\n-\n-  public void testUnionWithUnknown() throws Exception {\n-    assertTrue(createUnionType(UNKNOWN_TYPE, NULL_TYPE).isUnknownType());\n   }\n \n   /**\n--- /dev/null\n+++ b/test/com/google/javascript/rhino/jstype/UnionTypeTest.java\n+/*\n+ *\n+ * ***** BEGIN LICENSE BLOCK *****\n+ * Version: MPL 1.1/GPL 2.0\n+ *\n+ * The contents of this file are subject to the Mozilla Public License Version\n+ * 1.1 (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ * http://www.mozilla.org/MPL/\n+ *\n+ * Software distributed under the License is distributed on an \"AS IS\" basis,\n+ * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License\n+ * for the specific language governing rights and limitations under the\n+ * License.\n+ *\n+ * The Original Code is Rhino code, released\n+ * May 6, 1999.\n+ *\n+ * The Initial Developer of the Original Code is\n+ * Netscape Communications Corporation.\n+ * Portions created by the Initial Developer are Copyright (C) 1997-1999\n+ * the Initial Developer. All Rights Reserved.\n+ *\n+ * Contributor(s):\n+ *   Nick Santos\n+ *\n+ * Alternatively, the contents of this file may be used under the terms of\n+ * the GNU General Public License Version 2 or later (the \"GPL\"), in which\n+ * case the provisions of the GPL are applicable instead of those above. If\n+ * you wish to allow use of your version of this file only under the terms of\n+ * the GPL and not to allow others to use your version of this file under the\n+ * MPL, indicate your decision by deleting the provisions above and replacing\n+ * them with the notice and other provisions required by the GPL. If you do\n+ * not delete the provisions above, a recipient may use your version of this\n+ * file under either the MPL or the GPL.\n+ *\n+ * ***** END LICENSE BLOCK ***** */\n+\n+package com.google.javascript.rhino.jstype;\n+\n+import com.google.javascript.rhino.testing.BaseJSTypeTestCase;\n+import com.google.javascript.rhino.testing.Asserts;\n+\n+public class UnionTypeTest extends BaseJSTypeTestCase {\n+  private NamedType unresolvedNamedType;\n+\n+  @Override\n+  public void setUp() throws Exception {\n+    super.setUp();\n+    unresolvedNamedType =\n+        new NamedType(registry, \"not.resolved.named.type\", null, -1, -1);\n+  }\n+\n+  /**\n+   * Assert that a type can assign to itself.\n+   */\n+  private void assertTypeCanAssignToItself(JSType type) {\n+    assertTrue(type.canAssignTo(type));\n+  }\n+\n+  /**\n+   * Tests the behavior of variants type.\n+   */\n+  @SuppressWarnings(\"checked\")\n+      public void testUnionType() throws Exception {\n+    UnionType nullOrString =\n+        (UnionType) createUnionType(NULL_TYPE, STRING_OBJECT_TYPE);\n+    UnionType stringOrNull =\n+        (UnionType) createUnionType(STRING_OBJECT_TYPE, NULL_TYPE);\n+\n+    assertEquals(nullOrString, stringOrNull);\n+    assertEquals(stringOrNull, nullOrString);\n+\n+    assertTypeCanAssignToItself(createUnionType(VOID_TYPE, NUMBER_TYPE));\n+    assertTypeCanAssignToItself(\n+        createUnionType(NUMBER_TYPE, STRING_TYPE, OBJECT_TYPE));\n+    assertTypeCanAssignToItself(createUnionType(NUMBER_TYPE, BOOLEAN_TYPE));\n+    assertTypeCanAssignToItself(createUnionType(VOID_TYPE));\n+\n+    UnionType nullOrUnknown =\n+        (UnionType) createUnionType(NULL_TYPE, unresolvedNamedType);\n+    assertTrue(nullOrUnknown.isUnknownType());\n+    assertEquals(nullOrUnknown, NULL_TYPE.getLeastSupertype(nullOrUnknown));\n+    assertEquals(nullOrUnknown, nullOrUnknown.getLeastSupertype(NULL_TYPE));\n+    assertEquals(UNKNOWN_TYPE,\n+        NULL_TYPE.getGreatestSubtype(nullOrUnknown));\n+    assertEquals(UNKNOWN_TYPE,\n+        nullOrUnknown.getGreatestSubtype(NULL_TYPE));\n+\n+    assertTrue(NULL_TYPE.differsFrom(nullOrUnknown));\n+    assertTrue(nullOrUnknown.differsFrom(NULL_TYPE));\n+    assertFalse(nullOrUnknown.differsFrom(unresolvedNamedType));\n+\n+    assertTrue(NULL_TYPE.isSubtype(nullOrUnknown));\n+    assertTrue(unresolvedNamedType.isSubtype(nullOrUnknown));\n+    assertTrue(nullOrUnknown.isSubtype(NULL_TYPE));\n+\n+    assertEquals(unresolvedNamedType,\n+        nullOrUnknown.restrictByNotNullOrUndefined());\n+\n+    // findPropertyType\n+    assertEquals(NUMBER_TYPE, nullOrString.findPropertyType(\"length\"));\n+    assertEquals(null, nullOrString.findPropertyType(\"lengthx\"));\n+\n+    Asserts.assertResolvesToSame(nullOrString);\n+  }\n+\n+  /**\n+   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n+   */\n+  public void testGreatestSubtypeUnionTypes1() {\n+    assertEquals(NULL_TYPE, createNullableType(STRING_TYPE).getGreatestSubtype(\n+            createNullableType(NUMBER_TYPE)));\n+  }\n+\n+  /**\n+   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n+   */\n+  @SuppressWarnings(\"checked\")\n+  public void testGreatestSubtypeUnionTypes2() {\n+    UnionType evalUriError =\n+        (UnionType) createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE);\n+    assertEquals(evalUriError,\n+        evalUriError.getGreatestSubtype(ERROR_TYPE));\n+  }\n+\n+  /**\n+   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n+   */\n+  @SuppressWarnings(\"checked\")\n+  public void testGreatestSubtypeUnionTypes3() {\n+    // (number,undefined,null)\n+    UnionType nullableOptionalNumber =\n+        (UnionType) createUnionType(NULL_TYPE, VOID_TYPE, NUMBER_TYPE);\n+    // (null,undefined)\n+    UnionType nullUndefined =\n+        (UnionType) createUnionType(VOID_TYPE, NULL_TYPE);\n+    assertEquals(nullUndefined,\n+        nullUndefined.getGreatestSubtype(nullableOptionalNumber));\n+    assertEquals(nullUndefined,\n+        nullableOptionalNumber.getGreatestSubtype(nullUndefined));\n+  }\n+\n+  /**\n+   * Tests {@link JSType#getGreatestSubtype(JSType)} on union types.\n+   */\n+  public void testGreatestSubtypeUnionTypes4() throws Exception {\n+    UnionType numStr = (UnionType) createUnionType(\n+        NULL_TYPE, EVAL_ERROR_TYPE, URI_ERROR_TYPE);\n+    assertEquals(createUnionType(EVAL_ERROR_TYPE, URI_ERROR_TYPE),\n+        numStr.getGreatestSubtype(ERROR_TYPE));\n+  }\n+\n+  /**\n+   * Tests subtyping of union types.\n+   */\n+  public void testSubtypingUnionTypes() throws Exception {\n+    // subtypes\n+    assertTrue(BOOLEAN_TYPE.\n+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));\n+    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).\n+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE)));\n+    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).\n+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n+    assertTrue(createUnionType(BOOLEAN_TYPE, STRING_TYPE).\n+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n+    assertTrue(createUnionType(BOOLEAN_TYPE).\n+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n+    assertTrue(createUnionType(STRING_TYPE).\n+        isSubtype(createUnionType(BOOLEAN_TYPE, STRING_TYPE, NULL_TYPE)));\n+    assertTrue(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(ALL_TYPE));\n+    assertTrue(createUnionType(DATE_TYPE, REGEXP_TYPE).isSubtype(OBJECT_TYPE));\n+    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).\n+        isSubtype(ERROR_TYPE));\n+    assertTrue(createUnionType(URI_ERROR_TYPE, EVAL_ERROR_TYPE).\n+        isSubtype(OBJECT_TYPE));\n+\n+    // not subtypes\n+    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).isSubtype(NO_TYPE));\n+    assertFalse(createUnionType(STRING_TYPE, NULL_TYPE).\n+        isSubtype(NO_OBJECT_TYPE));\n+    assertFalse(createUnionType(NO_OBJECT_TYPE, NULL_TYPE).\n+        isSubtype(OBJECT_TYPE));\n+\n+    // defined unions\n+    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n+    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n+    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING));\n+\n+    assertTrue(NUMBER_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));\n+    assertTrue(BOOLEAN_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));\n+    assertTrue(STRING_TYPE.isSubtype(NUMBER_STRING_BOOLEAN));\n+\n+    assertTrue(NUMBER_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n+    assertTrue(OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n+    assertTrue(STRING_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n+    assertTrue(BOOLEAN_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n+    assertTrue(NO_OBJECT_TYPE.isSubtype(OBJECT_NUMBER_STRING_BOOLEAN));\n+  }\n+\n+  /**\n+   * Tests that special union types can assign to other types.  Unions\n+   * containing the unknown type should be able to assign to any other\n+   * type.\n+   */\n+  @SuppressWarnings(\"checked\")\n+  public void testSpecialUnionCanAssignTo() throws Exception {\n+    // autoboxing quirks\n+    UnionType numbers =\n+        (UnionType) createUnionType(NUMBER_TYPE, NUMBER_OBJECT_TYPE);\n+    assertFalse(numbers.canAssignTo(NUMBER_TYPE));\n+    assertFalse(numbers.canAssignTo(NUMBER_OBJECT_TYPE));\n+    assertFalse(numbers.canAssignTo(EVAL_ERROR_TYPE));\n+\n+    UnionType strings =\n+        (UnionType) createUnionType(STRING_OBJECT_TYPE, STRING_TYPE);\n+    assertFalse(strings.canAssignTo(STRING_TYPE));\n+    assertFalse(strings.canAssignTo(STRING_OBJECT_TYPE));\n+    assertFalse(strings.canAssignTo(DATE_TYPE));\n+\n+    UnionType booleans =\n+        (UnionType) createUnionType(BOOLEAN_OBJECT_TYPE, BOOLEAN_TYPE);\n+    assertFalse(booleans.canAssignTo(BOOLEAN_TYPE));\n+    assertFalse(booleans.canAssignTo(BOOLEAN_OBJECT_TYPE));\n+    assertFalse(booleans.canAssignTo(REGEXP_TYPE));\n+\n+    // unknown quirks\n+    JSType unknown = createUnionType(UNKNOWN_TYPE, DATE_TYPE);\n+    assertTrue(unknown.canAssignTo(STRING_TYPE));\n+\n+    // all members need to be assignable to\n+    UnionType stringDate =\n+        (UnionType) createUnionType(STRING_OBJECT_TYPE, DATE_TYPE);\n+    assertTrue(stringDate.canAssignTo(OBJECT_TYPE));\n+    assertFalse(stringDate.canAssignTo(STRING_OBJECT_TYPE));\n+    assertFalse(stringDate.canAssignTo(DATE_TYPE));\n+  }\n+\n+  /**\n+   * Tests the factory method\n+   * {@link JSTypeRegistry#createUnionType(JSType...)}.\n+   */\n+  @SuppressWarnings(\"checked\")\n+  public void testCreateUnionType() throws Exception {\n+    // number\n+    UnionType optNumber =\n+        (UnionType) registry.createUnionType(NUMBER_TYPE, DATE_TYPE);\n+    assertTrue(optNumber.contains(NUMBER_TYPE));\n+    assertTrue(optNumber.contains(DATE_TYPE));\n+\n+    // union\n+    UnionType optUnion =\n+        (UnionType) registry.createUnionType(REGEXP_TYPE,\n+            registry.createUnionType(STRING_OBJECT_TYPE, DATE_TYPE));\n+    assertTrue(optUnion.contains(DATE_TYPE));\n+    assertTrue(optUnion.contains(STRING_OBJECT_TYPE));\n+    assertTrue(optUnion.contains(REGEXP_TYPE));\n+  }\n+\n+\n+  public void testUnionWithUnknown() throws Exception {\n+    assertTrue(createUnionType(UNKNOWN_TYPE, NULL_TYPE).isUnknownType());\n+  }\n+\n+  public void testGetRestrictedUnion1() throws Exception {\n+    UnionType numStr = (UnionType) createUnionType(NUMBER_TYPE, STRING_TYPE);\n+    assertEquals(STRING_TYPE, numStr.getRestrictedUnion(NUMBER_TYPE));\n+  }\n+\n+  public void testGetRestrictedUnion2() throws Exception {\n+    UnionType numStr = (UnionType) createUnionType(\n+        NULL_TYPE, EVAL_ERROR_TYPE, URI_ERROR_TYPE);\n+    assertEquals(NULL_TYPE, numStr.getRestrictedUnion(ERROR_TYPE));\n+  }\n+\n+}", "timestamp": 1266865509, "metainfo": ""}