{"sha": "a5486091693a2b0375173c73f6a2daae9fe9076d", "log": "Allow a class method to be \"templated\" to reference the specific subclass at the call site.  R=dimvar DELTA=104  (98 added, 1 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=5636   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n \n   private Map<TemplateType, JSType> inferTemplateTypesFromParameters(\n       FunctionType fnType, Node call) {\n-    if (fnType.getTemplateTypeNames().isEmpty()\n-        || !call.hasMoreThanOneChild()) {\n+    if (fnType.getTemplateTypeNames().isEmpty()) {\n       return Collections.emptyMap();\n     }\n \n     Map<TemplateType, JSType> resolvedTypes = Maps.newIdentityHashMap();\n-    maybeResolveTemplateTypeFromNodes(\n-        fnType.getParameters(),\n-        call.getChildAtIndex(1).siblings(),\n-        resolvedTypes);\n+\n+    Node callTarget = call.getFirstChild();\n+    if (NodeUtil.isGet(callTarget)) {\n+      Node obj = callTarget.getFirstChild();\n+      maybeResolveTemplatedType(\n+          fnType.getTypeOfThis(),\n+          getJSType(obj),\n+          resolvedTypes);\n+    }\n+\n+    if (call.hasMoreThanOneChild()) {\n+      maybeResolveTemplateTypeFromNodes(\n+          fnType.getParameters(),\n+          call.getChildAtIndex(1).siblings(),\n+          resolvedTypes);\n+    }\n     return resolvedTypes;\n   }\n \n           .collapseUnion()\n           .toMaybeFunctionType();\n       if (argFunctionType != null && argFunctionType.isSubtype(paramType)) {\n+        // infer from return type of the function type\n+        maybeResolveTemplatedType(\n+            paramFunctionType.getTypeOfThis(),\n+            argFunctionType.getTypeOfThis(), resolvedTypes);\n         // infer from return type of the function type\n         maybeResolveTemplatedType(\n             paramFunctionType.getReturnType(),\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         false);\n   }\n \n+  public void testTemplatedThisType1() throws Exception {\n+    testTypes(\n+        \"/** @constructor */\\n\" +\n+        \"function Foo() {}\\n\" +\n+        \"/**\\n\" +\n+        \" * @this {T}\\n\" +\n+        \" * @return {T}\\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"Foo.prototype.method = function() {};\\n\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" */\\n\" +\n+        \"function Bar() {}\\n\" +\n+        \"var g = new Bar().method();\\n\" +\n+        \"/**\\n\" +\n+        \" * @param {number} a\\n\" +\n+        \" */\\n\" +\n+        \"function compute(a) {};\\n\" +\n+        \"compute(g);\\n\",\n+\n+        \"actual parameter 1 of compute does not match formal parameter\\n\" +\n+        \"found   : Bar\\n\" +\n+        \"required: number\");\n+  }\n+\n   public void testTemplateType1() throws Exception {\n     testTypes(\n         \"/**\\n\" +\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     assertEquals(\"number\", findNameType(\"f\", lastLocalScope).toString());\n   }\n \n+  public void testTemplateType9() {\n+    testSame(\n+        \"/** @constructor */\\n\" +\n+        \"function Foo() {}\\n\" +\n+        \"/**\\n\" +\n+        \" * @this {T}\\n\" +\n+        \" * @return {T}\\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"Foo.prototype.method = function() {};\\n\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" */\\n\" +\n+        \"function Bar() {}\\n\" +\n+        \"\\n\" +\n+        \"var g = new Bar().method();\\n\");\n+    assertEquals(\"Bar\", findNameType(\"g\", globalScope).toString());\n+  }\n+\n+  public void testTemplateType10() {\n+    // NOTE: we would like the type within the function to remain \"Foo\"\n+    // we can handle this by support template type like \"T extends Foo\"\n+    // to provide a \"minimum\" type for \"Foo\" within the function body.\n+    testSame(\n+        \"/** @constructor */\\n\" +\n+        \"function Foo() {}\\n\" +\n+        \"\\n\" +\n+        \"/**\\n\" +\n+        \" * @this {T}\\n\" +\n+        \" * @return {T} fn\\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"Foo.prototype.method = function() {var g = this;};\\n\");\n+    assertEquals(\"T\", findNameType(\"g\", lastLocalScope).toString());\n+  }\n+\n+  public void testTemplateType11() {\n+    testSame(\n+        \"/**\\n\" +\n+        \" * @this {T}\\n\" +\n+        \" * @return {T} fn\\n\" +\n+        \" * @template T\\n\" +\n+        \" */\\n\" +\n+        \"var method = function() {};\\n\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" */\\n\" +\n+        \"function Bar() {}\\n\" +\n+        \"\\n\" +\n+        \"var g = method().call(new Bar());\\n\");\n+    // NOTE: we would like this to be \"Bar\"\n+    assertEquals(\"?\", findNameType(\"g\", globalScope).toString());\n+  }\n+\n   public void testClosureParameterTypesWithoutJSDoc() {\n     testSame(\n         \"/**\\n\" +", "timestamp": 1350081598, "metainfo": ""}