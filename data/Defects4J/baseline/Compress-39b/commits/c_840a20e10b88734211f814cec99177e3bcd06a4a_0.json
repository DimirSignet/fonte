{"sha": "840a20e10b88734211f814cec99177e3bcd06a4a", "log": "cache bit masks  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/BitInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/utils/BitInputStream.java\n  * @NotThreadSafe\n  */\n public class BitInputStream implements Closeable {\n+    private static final int MAXIMUM_CACHE_SIZE = 31; // bits in int minus sign bit\n+    private static final int[] MASKS = new int[MAXIMUM_CACHE_SIZE + 1];\n+\n+    static {\n+        for (int i = 1; i <= MAXIMUM_CACHE_SIZE; i++) {\n+            MASKS[i] = (MASKS[i - 1] << 1) + 1;\n+        }\n+    }\n+\n     private final InputStream in;\n     private final ByteOrder byteOrder;\n     private int bitsCached = 0;\n      *         -1 if the end of the underlying stream has been reached\n      */\n     public int readBits(final int count) throws IOException {\n-        if (count < 0 || count > 31) {\n-            throw new IllegalArgumentException(\"count must be between 0 and 32\");\n+        if (count < 0 || count > MAXIMUM_CACHE_SIZE) {\n+            throw new IllegalArgumentException(\"count must be between 0 and \" + MAXIMUM_CACHE_SIZE);\n         }\n         while (bitsCachedSize < count) {\n             final int nextByte = in.read();\n             bitsCachedSize += 8;\n         }\n         \n-        final int mask = (1 << count) - 1;\n         final int bitsOut;\n         if (byteOrder == ByteOrder.LITTLE_ENDIAN) {\n-            bitsOut = (bitsCached & mask);\n+            bitsOut = (bitsCached & MASKS[count]);\n             bitsCached >>>= count;\n         } else {\n-            bitsOut = (bitsCached >> (bitsCachedSize - count)) & mask;\n+            bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];\n         }\n         bitsCachedSize -= count;\n         return bitsOut;", "timestamp": 1415890237, "metainfo": ""}