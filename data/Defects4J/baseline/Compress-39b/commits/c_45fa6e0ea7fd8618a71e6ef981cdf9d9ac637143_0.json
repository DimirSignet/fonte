{"sha": "45fa6e0ea7fd8618a71e6ef981cdf9d9ac637143", "log": "COMPRESS-109 - Tar implementation does not support Pax headers  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n \n package org.apache.commons.compress.archivers.tar;\n \n+import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.utils.ArchiveUtils;\n             currEntry.setName(longName.toString());\n         }\n \n+        if (currEntry != null && currEntry.isPaxHeader()){ // Process Pax headers\n+            paxHeaders();\n+        }\n+\n         return currEntry;\n+    }\n+\n+    private void paxHeaders() throws IOException{\n+        BufferedReader br = new BufferedReader(new InputStreamReader(this, \"UTF-8\"));\n+        Map headers = new HashMap();\n+        // Format is \"length keyword=value\\n\";\n+        while(true){ // get length\n+            int ch;\n+            int len=0;\n+            int read=0;\n+            while((ch = br.read()) != -1){\n+                read++;\n+                if (ch == ' '){ // End of length string\n+                    // Get keyword\n+                    StringBuffer sb = new StringBuffer();\n+                    while((ch = br.read()) != -1){\n+                        read++;\n+                        if (ch == '='){ // end of keyword\n+                            String keyword = sb.toString();\n+                            // Get rest of entry\n+                            char[] cbuf = new char[len-read];\n+                            int got = br.read(cbuf);\n+                            if (got != len-read){\n+                                throw new IOException(\"Failed to read Paxheader. Expected \"+(len-read)+\" chars, read \"+got);\n+                            }\n+                            String value = new String(cbuf, 0 , len-read-1); // Drop trailing NL\n+                            headers.put(keyword, value);\n+                            break;\n+                        }\n+                        sb.append((char)ch);\n+                    }\n+                    break; // Processed single header\n+                }\n+                len *= 10;\n+                len += ch - '0';\n+            }\n+            if (ch == -1){ // EOF\n+                break;\n+            }\n+        }\n+        getNextEntry(); // Get the actual file entry\n+        /*\n+         * The following headers are defined for Pax.\n+         * atime, ctime, mtime, charset: cannot use these without changing TarArchiveEntry fields\n+         * comment\n+         * gid, gname\n+         * linkpath\n+         * size\n+         * uid,uname\n+         */\n+        Iterator hdrs = headers.entrySet().iterator();\n+        while(hdrs.hasNext()){\n+            Entry ent = (Entry) hdrs.next();\n+            String key = (String) ent.getKey();\n+            String val = (String) ent.getValue();\n+            if (\"path\".equals(key)){\n+                currEntry.setName(val);\n+            } else if (\"linkpath\".equals(key)){\n+                currEntry.setLinkName(val);\n+            } else if (\"gid\".equals(key)){\n+                currEntry.setGroupId(Integer.parseInt(val));\n+            } else if (\"gname\".equals(key)){\n+                currEntry.setGroupName(val);\n+            } else if (\"uid\".equals(key)){\n+                currEntry.setUserId(Integer.parseInt(val));\n+            } else if (\"uname\".equals(key)){\n+                currEntry.setUserName(val);\n+            } else if (\"size\".equals(key)){\n+                currEntry.setSize(Long.parseLong(val));\n+            }\n+        }\n     }\n \n     public ArchiveEntry getNextEntry() throws IOException {", "timestamp": 1273500877, "metainfo": ""}