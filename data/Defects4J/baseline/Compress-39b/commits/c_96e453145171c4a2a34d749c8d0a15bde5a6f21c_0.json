{"sha": "96e453145171c4a2a34d749c8d0a15bde5a6f21c", "log": "empty values mean \"remove the mapping\" in PAX headers", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n                             String keyword = coll.toString(CharsetNames.UTF_8);\n                             // Get rest of entry\n                             final int restLen = len - read;\n-                            byte[] rest = new byte[restLen];\n-                            int got = IOUtils.readFully(i, rest);\n-                            if (got != restLen) {\n-                                throw new IOException(\"Failed to read \"\n-                                                      + \"Paxheader. Expected \"\n-                                                      + restLen\n-                                                      + \" bytes, read \"\n-                                                      + got);\n+                            if (restLen == 1) { // only NL\n+                                headers.remove(keyword);\n+                            } else {\n+                                byte[] rest = new byte[restLen];\n+                                int got = IOUtils.readFully(i, rest);\n+                                if (got != restLen) {\n+                                    throw new IOException(\"Failed to read \"\n+                                                          + \"Paxheader. Expected \"\n+                                                          + restLen\n+                                                          + \" bytes, read \"\n+                                                          + got);\n+                                }\n+                                // Drop trailing NL\n+                                String value = new String(rest, 0,\n+                                                          restLen - 1, CharsetNames.UTF_8);\n+                                headers.put(keyword, value);\n                             }\n-                            // Drop trailing NL\n-                            String value = new String(rest, 0,\n-                                                      restLen - 1, CharsetNames.UTF_8);\n-                            headers.put(keyword, value);\n                             break;\n                         }\n                         coll.write((byte) ch);\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n         assertEquals(1, headers.size());\n         assertEquals(\"1321711775.972059463\", headers.get(\"atime\"));\n         tais.close();\n+    }\n+\n+    @Test\n+    public void secondEntryWinsWhenPaxHeaderContainsDuplicateKey() throws Exception {\n+        final InputStream is = new ByteArrayInputStream(new byte[1]);\n+        final TarArchiveInputStream tais = new TarArchiveInputStream(is);\n+        Map<String, String> headers = tais\n+            .parsePaxHeaders(new ByteArrayInputStream(\"11 foo=bar\\n11 foo=baz\\n\"\n+                                                      .getBytes(CharsetNames.UTF_8)));\n+        assertEquals(1, headers.size());\n+        assertEquals(\"baz\", headers.get(\"foo\"));\n+        tais.close();\n+    }\n+\n+    @Test\n+    public void paxHeaderEntryWithEmptyValueRemovesKey() throws Exception {\n+        final InputStream is = new ByteArrayInputStream(new byte[1]);\n+        final TarArchiveInputStream tais = new TarArchiveInputStream(is);\n+        Map<String, String> headers = tais\n+            .parsePaxHeaders(new ByteArrayInputStream(\"11 foo=bar\\n7 foo=\\n\"\n+                                                      .getBytes(CharsetNames.UTF_8)));\n+        assertEquals(0, headers.size());\n     }\n \n     @Test", "timestamp": 1458761760, "metainfo": ""}