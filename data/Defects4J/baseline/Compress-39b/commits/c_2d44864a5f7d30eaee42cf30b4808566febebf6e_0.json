{"sha": "2d44864a5f7d30eaee42cf30b4808566febebf6e", "log": "add an option to implicitly create Unicode Extra Fields in ZiparchiveOutputStream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n     private boolean useEFS = true; \n \n     /**\n+     * whether to create UnicodePathExtraField-s for each entry.\n+     */\n+    private boolean createUnicodeExtraFields = false;\n+\n+    /**\n      * Creates a new ZIP OutputStream filtering the underlying stream.\n      * @param out the outputstream to zip\n      * @since 1.1\n     }\n \n     /**\n+     * Whether to create Unicode Extra Fields for all entries.\n+     *\n+     * <p>Defaults to false.</p>\n+     */\n+    public void setCreateUnicodeExtraFields(boolean b) {\n+        createUnicodeExtraFields = b;\n+    }\n+\n+    /**\n      * Finishs writing the contents and closes this as well as the\n      * underlying stream.\n      *\n         closeEntry();\n \n         entry = ze;\n+        if (createUnicodeExtraFields) {\n+            ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n+                                                       encoding));\n+            if (ze.getComment() != null) {\n+                ze.addExtraField(new UnicodeCommentExtraField(ze.getComment(),\n+                                                              encoding));\n+            }\n+        }\n         entries.add(entry);\n \n         if (entry.getMethod() == -1) { // not specified\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n      * </pre>\n      * \n      * @param name The filename or comment with possible non-ASCII\n-     * unicode characters.\n+     * unicode characters.  Must not be null.\n      * @param encoding A valid encoding name. The standard zip\n      *                 encoding is <code>\"CP437\"</code>,\n      *                 <code>\"UTF-8\"</code> is supported in ZIP file\n-     *                 version <code>6.3</code> or later.\n+     *                 version <code>6.3</code> or later.  If null,\n+     *                 will use the platform's {@link\n+     *                 java.lang.String#getBytes default encoding}.\n      * @return A byte array containing the mapped file\n      *         name. Unmappable characters or malformed character\n      *         sequences are mapped to a sequence of utf-16 words\n      *         encoded in the format <code>%Uxxxx</code>.\n      */\n     static final byte[] encodeName(String name, String encoding) {\n+        if (encoding == null) {\n+            return name.getBytes();\n+        }\n+\n         Charset cs = Charset.forName(encoding);\n         CharsetEncoder enc = cs.newEncoder();\n \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n     private static final String EURO_FOR_DOLLAR_TXT = \"\\u20AC_for_Dollar.txt\";\n     private static final String OIL_BARREL_TXT = \"\\u00D6lf\\u00E4sser.txt\";\n \n-    public void xtestUtf8FileRoundtrip() throws IOException {\n-        testFileRoundtrip(UTF_8, true);\n-    }\n-\n-    public void testUtf8FileRoundtripNoEFS() throws IOException {\n-        testFileRoundtrip(UTF_8, false);\n-    }\n-\n-    public void testCP437FileRoundtrip() throws IOException {\n-        testFileRoundtrip(CP437, false);\n-    }\n-\n-    public void testASCIIFileRoundtrip() throws IOException {\n-        testFileRoundtrip(US_ASCII, false);\n+    public void testUtf8FileRoundtripExplicitUnicodeExtra()\n+        throws IOException {\n+        testFileRoundtrip(UTF_8, true, true);\n+    }\n+\n+    public void testUtf8FileRoundtripNoEFSExplicitUnicodeExtra()\n+        throws IOException {\n+        testFileRoundtrip(UTF_8, false, true);\n+    }\n+\n+    public void testCP437FileRoundtripExplicitUnicodeExtra()\n+        throws IOException {\n+        testFileRoundtrip(CP437, false, true);\n+    }\n+\n+    public void testASCIIFileRoundtripExplicitUnicodeExtra()\n+        throws IOException {\n+        testFileRoundtrip(US_ASCII, false, true);\n+    }\n+\n+    public void testUtf8FileRoundtripImplicitUnicodeExtra()\n+        throws IOException {\n+        testFileRoundtrip(UTF_8, true, false);\n+    }\n+\n+    public void testUtf8FileRoundtripNoEFSImplicitUnicodeExtra()\n+        throws IOException {\n+        testFileRoundtrip(UTF_8, false, false);\n+    }\n+\n+    public void testCP437FileRoundtripImplicitUnicodeExtra()\n+        throws IOException {\n+        testFileRoundtrip(CP437, false, false);\n+    }\n+\n+    public void testASCIIFileRoundtripImplicitUnicodeExtra()\n+        throws IOException {\n+        testFileRoundtrip(US_ASCII, false, false);\n     }\n \n     /*\n         }\n     }\n \n-    private static void testFileRoundtrip(String encoding, boolean withEFS)\n+    private static void testFileRoundtrip(String encoding, boolean withEFS,\n+                                          boolean withExplicitUnicodeExtra)\n         throws IOException {\n \n         try {\n \n         File file = File.createTempFile(encoding + \"-test\", \".zip\");\n         try {\n-            createTestFile(file, encoding, withEFS);\n+            createTestFile(file, encoding, withEFS, withExplicitUnicodeExtra);\n             testFile(file, encoding);\n         } finally {\n             if (file.exists()) {\n     }\n \n     private static void createTestFile(File file, String encoding,\n-                                       boolean withEFS)\n+                                       boolean withEFS,\n+                                       boolean withExplicitUnicodeExtra)\n         throws UnsupportedEncodingException, IOException {\n \n         ZipArchiveOutputStream zos = null;\n             zos = new ZipArchiveOutputStream(file);\n             zos.setEncoding(encoding);\n             zos.setUseLanguageEncodingFlag(withEFS);\n+            zos.setCreateUnicodeExtraFields(!withExplicitUnicodeExtra);\n \n             ZipArchiveEntry ze = new ZipArchiveEntry(OIL_BARREL_TXT);\n-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),\n-                                                 zos.getEncoding())) {\n+            if (withExplicitUnicodeExtra\n+                && !ZipEncodingHelper.canEncodeName(ze.getName(),\n+                                                    zos.getEncoding())) {\n                 ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                            zos.getEncoding()));\n             }\n             zos.closeEntry();\n \n             ze = new ZipArchiveEntry(EURO_FOR_DOLLAR_TXT);\n-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),\n-                                                 zos.getEncoding())) {\n+            if (withExplicitUnicodeExtra\n+                && !ZipEncodingHelper.canEncodeName(ze.getName(),\n+                                                    zos.getEncoding())) {\n                 ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                            zos.getEncoding()));\n             }\n \n             ze = new ZipArchiveEntry(ASCII_TXT);\n \n-            if (!ZipEncodingHelper.canEncodeName(ze.getName(),\n-                                                 zos.getEncoding())) {\n+            if (withExplicitUnicodeExtra\n+                && !ZipEncodingHelper.canEncodeName(ze.getName(),\n+                                                    zos.getEncoding())) {\n                 ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                            zos.getEncoding()));\n             }", "timestamp": 1235578152, "metainfo": ""}