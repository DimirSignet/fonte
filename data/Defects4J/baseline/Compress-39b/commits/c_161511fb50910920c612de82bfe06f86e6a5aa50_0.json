{"sha": "161511fb50910920c612de82bfe06f86e6a5aa50", "log": "Some test cases for TarUtils  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \n+ */\n+\n+package org.apache.commons.compress.archivers.tar;\n+\n+import junit.framework.TestCase;\n+\n+public class TarUtilsTest extends TestCase {\n+\n+    \n+    public void testName(){\n+        byte [] buff = new byte[20];\n+        StringBuffer sb1 = new StringBuffer(\"abcdefghijklmnopqrstuvwxyz\");\n+        int off = TarUtils.getNameBytes(sb1, buff, 1, buff.length-1);\n+        assertEquals(off, 20);\n+        StringBuffer sb2 = TarUtils.parseName(buff, 1, 10);\n+        assertEquals(sb2.toString(),sb1.substring(0,10));\n+        sb2 = TarUtils.parseName(buff, 1, 19);\n+        assertEquals(sb2.toString(),sb1.substring(0,19));\n+        buff = new byte[30];\n+        off = TarUtils.getNameBytes(sb1, buff, 1, buff.length-1);\n+        assertEquals(off, 30);\n+        sb2 = TarUtils.parseName(buff, 1, buff.length-1);\n+        assertEquals(sb1.toString(), sb2.toString());\n+    }\n+    \n+    private void fillBuff(byte []buffer, String input){\n+        for(int i=0; i<buffer.length;i++){\n+            buffer[i]=0;\n+        }\n+        System.arraycopy(input.getBytes(),0,buffer,0,Math.min(buffer.length,input.length()));        \n+    }\n+\n+    public void testParseOctal(){\n+        byte [] buffer = new byte[20];\n+        fillBuff(buffer,\"777777777777 \");\n+        long value; \n+        value = TarUtils.parseOctal(buffer,0, 11);\n+        assertEquals(077777777777L, value);\n+        value = TarUtils.parseOctal(buffer,0, 12);\n+        assertEquals(0777777777777L, value);\n+        buffer[11]=' ';\n+        value = TarUtils.parseOctal(buffer,0, 11);\n+        assertEquals(077777777777L, value);\n+        buffer[11]=0;\n+        value = TarUtils.parseOctal(buffer,0, 11);\n+        assertEquals(077777777777L, value);\n+        fillBuff(buffer, \"abcdef\"); // Invalid input\n+        value = TarUtils.parseOctal(buffer,0, 11);\n+//        assertEquals(0, value); // Or perhaps an Exception?\n+    }\n+    \n+    private void checkRoundTripOctal(final long value) {\n+        byte [] buffer = new byte[12];\n+        long parseValue;\n+        TarUtils.getLongOctalBytes(value, buffer, 0, buffer.length);\n+        parseValue = TarUtils.parseOctal(buffer,0, buffer.length);\n+        assertEquals(value,parseValue);\n+    }\n+    \n+    public void testRoundTripOctal() {\n+        checkRoundTripOctal(0);\n+        checkRoundTripOctal(1);\n+//        checkRoundTripOctal(-1); // TODO What should this do?\n+        checkRoundTripOctal(077777777777L);\n+//        checkRoundTripOctal(0100000000000L); // TODO What should this do?\n+    }\n+    \n+    // Check correct trailing bytes are generated\n+    public void testTrailers() {\n+        byte [] buffer = new byte[12];\n+        TarUtils.getLongOctalBytes(123, buffer, 0, buffer.length);\n+        assertEquals(' ', buffer[buffer.length-1]);\n+        assertEquals('3', buffer[buffer.length-2]); // end of number\n+        TarUtils.getOctalBytes(123, buffer, 0, buffer.length);\n+        assertEquals(0  , buffer[buffer.length-1]);\n+        assertEquals(' ', buffer[buffer.length-2]);\n+        assertEquals('3', buffer[buffer.length-3]); // end of number\n+        TarUtils.getCheckSumOctalBytes(123, buffer, 0, buffer.length);\n+        assertEquals(' ', buffer[buffer.length-1]);\n+        assertEquals(0  , buffer[buffer.length-2]);\n+        assertEquals('3', buffer[buffer.length-3]); // end of number\n+    }\n+}", "timestamp": 1238543385, "metainfo": ""}