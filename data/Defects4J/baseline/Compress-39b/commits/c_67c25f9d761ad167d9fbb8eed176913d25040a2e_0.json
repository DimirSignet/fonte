{"sha": "67c25f9d761ad167d9fbb8eed176913d25040a2e", "log": "whitespace  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n     Map<String, String> parsePaxHeaders(Reader br) throws IOException {\n         Map<String, String> headers = new HashMap<String, String>();\n         // Format is \"length keyword=value\\n\";\n-            while(true){ // get length\n-                int ch;\n-                int len = 0;\n-                int read = 0;\n-                while((ch = br.read()) != -1){\n-                    read++;\n-                    if (ch == ' '){ // End of length string\n-                        // Get keyword\n-                        StringBuffer sb = new StringBuffer();\n-                        while((ch = br.read()) != -1){\n-                            read++;\n-                            if (ch == '='){ // end of keyword\n-                                String keyword = sb.toString();\n-                                // Get rest of entry\n-                                char[] cbuf = new char[len-read];\n-                                int got = br.read(cbuf);\n-                                if (got != len - read){\n-                                    throw new IOException(\"Failed to read \"\n-                                                          + \"Paxheader. Expected \"\n-                                                          + (len - read)\n-                                                          + \" chars, read \"\n-                                                          + got);\n-                                }\n-                                // Drop trailing NL\n-                                String value = new String(cbuf, 0,\n-                                                          len - read - 1);\n-                                headers.put(keyword, value);\n-                                break;\n+        while(true){ // get length\n+            int ch;\n+            int len = 0;\n+            int read = 0;\n+            while((ch = br.read()) != -1){\n+                read++;\n+                if (ch == ' '){ // End of length string\n+                    // Get keyword\n+                    StringBuffer sb = new StringBuffer();\n+                    while((ch = br.read()) != -1){\n+                        read++;\n+                        if (ch == '='){ // end of keyword\n+                            String keyword = sb.toString();\n+                            // Get rest of entry\n+                            char[] cbuf = new char[len-read];\n+                            int got = br.read(cbuf);\n+                            if (got != len - read){\n+                                throw new IOException(\"Failed to read \"\n+                                                      + \"Paxheader. Expected \"\n+                                                      + (len - read)\n+                                                      + \" chars, read \"\n+                                                      + got);\n                             }\n-                            sb.append((char) ch);\n+                            // Drop trailing NL\n+                            String value = new String(cbuf, 0,\n+                                                      len - read - 1);\n+                            headers.put(keyword, value);\n+                            break;\n                         }\n-                        break; // Processed single header\n+                        sb.append((char) ch);\n                     }\n-                    len *= 10;\n-                    len += ch - '0';\n+                    break; // Processed single header\n                 }\n-                if (ch == -1){ // EOF\n-                    break;\n-                }\n-            }\n+                len *= 10;\n+                len += ch - '0';\n+            }\n+            if (ch == -1){ // EOF\n+                break;\n+            }\n+        }\n         return headers;\n     }\n ", "timestamp": 1323270165, "metainfo": ""}