{"sha": "6c71a2b11ab80ce9c0523023712b3aebfa6d15b3", "log": "STAR and GNU tar may use binary encoding for all numeric values, including modification time.  COMPRESS-182  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n \n         name = TarUtils.parseName(header, offset, NAMELEN);\n         offset += NAMELEN;\n-        mode = (int) TarUtils.parseOctal(header, offset, MODELEN);\n+        mode = (int) TarUtils.parseOctalOrBinary(header, offset, MODELEN);\n         offset += MODELEN;\n         userId = (int) TarUtils.parseOctalOrBinary(header, offset, UIDLEN);\n         offset += UIDLEN;\n         offset += GIDLEN;\n         size = TarUtils.parseOctalOrBinary(header, offset, SIZELEN);\n         offset += SIZELEN;\n-        modTime = TarUtils.parseOctal(header, offset, MODTIMELEN);\n+        modTime = TarUtils.parseOctalOrBinary(header, offset, MODTIMELEN);\n         offset += MODTIMELEN;\n         offset += CHKSUMLEN;\n         linkFlag = header[offset++];\n         offset += UNAMELEN;\n         groupName = TarUtils.parseName(header, offset, GNAMELEN);\n         offset += GNAMELEN;\n-        devMajor = (int) TarUtils.parseOctal(header, offset, DEVLEN);\n+        devMajor = (int) TarUtils.parseOctalOrBinary(header, offset, DEVLEN);\n         offset += DEVLEN;\n-        devMinor = (int) TarUtils.parseOctal(header, offset, DEVLEN);\n+        devMinor = (int) TarUtils.parseOctalOrBinary(header, offset, DEVLEN);\n         offset += DEVLEN;\n \n         int type = evaluateType(header);\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n import java.io.StringReader;\n import java.net.URI;\n import java.net.URL;\n+import java.util.Calendar;\n import java.util.Date;\n import java.util.Map;\n+import java.util.TimeZone;\n import org.junit.Test;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n         }\n     }        \n \n+    @Test\n+    public void datePriorToEpochInGNUFormat() throws Exception {\n+        URL tar = getClass().getResource(\"/preepoch-gnu.tar\");\n+        TarArchiveInputStream in = null;\n+        try {\n+            in = new TarArchiveInputStream(new FileInputStream(new File(new URI(tar.toString()))));\n+            TarArchiveEntry tae = in.getNextTarEntry();\n+            assertEquals(\"foo\", tae.getName());\n+            Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n+            cal.set(1969, 11, 31, 23, 59, 59);\n+            cal.set(Calendar.MILLISECOND, 0);\n+            assertEquals(cal.getTime(), tae.getLastModifiedDate());\n+        } finally {\n+            if (in != null) {\n+                in.close();\n+            }\n+        }\n+    }        \n+\n }", "timestamp": 1330846092, "metainfo": ""}