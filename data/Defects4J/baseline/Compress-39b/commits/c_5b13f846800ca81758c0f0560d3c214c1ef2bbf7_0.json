{"sha": "5b13f846800ca81758c0f0560d3c214c1ef2bbf7", "log": "Support for major and minor device number in PAX headers.  COMPRESS-182  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n     }\n \n     /**\n+     * Get this entry's major device number.\n+     *\n+     * @return This entry's major device number.\n+     * @since Apache Commons Compress 1.4\n+     */\n+    public int getDevMajor() {\n+        return devMajor;\n+    }\n+\n+    /**\n+     * Set this entry's major device number.\n+     *\n+     * @param devNo This entry's major device number.\n+     * @throws IllegalArgumentException if the devNo is &lt; 0.\n+     * @since Apache Commons Compress 1.4\n+     */\n+    public void setDevMajor(int devNo) {\n+        if (devNo < 0){\n+            throw new IllegalArgumentException(\"Major device number is out of \"\n+                                               + \"range: \" + devNo);\n+        }\n+        this.devMajor = devNo;\n+    }\n+\n+    /**\n+     * Get this entry's minor device number.\n+     *\n+     * @return This entry's minor device number.\n+     * @since Apache Commons Compress 1.4\n+     */\n+    public int getDevMinor() {\n+        return devMinor;\n+    }\n+\n+    /**\n+     * Set this entry's minor device number.\n+     *\n+     * @param devNo This entry's minor device number.\n+     * @throws IllegalArgumentException if the devNo is &lt; 0.\n+     * @since Apache Commons Compress 1.4\n+     */\n+    public void setDevMinor(int devNo) {\n+        if (devNo < 0){\n+            throw new IllegalArgumentException(\"Minor device number is out of \"\n+                                               + \"range: \" + devNo);\n+        }\n+        this.devMinor = devNo;\n+    }\n+\n+    /**\n      * Indicates in case of a sparse file if an extension sparse header\n      * follows.\n      *\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n                 currEntry.setSize(Long.parseLong(val));\n             } else if (\"mtime\".equals(key)){\n                 currEntry.setModTime((long) (Double.parseDouble(val) * 1000));\n-            /* currently not settable\n             } else if (\"SCHILY.devminor\".equals(key)){\n-                currEntry.setMinor(Integer.parseInt(val));\n+                currEntry.setDevMinor(Integer.parseInt(val));\n             } else if (\"SCHILY.devmajor\".equals(key)){\n-                currEntry.setMajor(Integer.parseInt(val));\n-            */\n+                currEntry.setDevMajor(Integer.parseInt(val));\n             }\n         }\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n         if (entry.getUserId() > TarConstants.MAXID) {\n             paxHeaders.put(\"uid\", String.valueOf(entry.getUserId()));\n         }\n+        if (entry.getDevMajor() > TarConstants.MAXID) {\n+            paxHeaders.put(\"SCHILY.devmajor\",\n+                           String.valueOf(entry.getDevMajor()));\n+        }\n+        if (entry.getDevMinor() > TarConstants.MAXID) {\n+            paxHeaders.put(\"SCHILY.devminor\",\n+                           String.valueOf(entry.getDevMinor()));\n+        }\n         if (entry.getMode() > TarConstants.MAXID) {\n             throw new RuntimeException(\"mode '\" + entry.getMode()\n                                        + \"' is too big ( > \"\n                                        + TarConstants.MAXID + \" bytes)\");\n         }\n-        // TODO add devMajor and devMinor\n     }\n \n     private void failForBigNumbers(TarArchiveEntry entry) {\n                                        + \"' is too big ( > \"\n                                        + TarConstants.MAXID + \" bytes)\");\n         }\n-        // TODO add devMajor and devMinor\n+        if (entry.getDevMajor() > TarConstants.MAXID) {\n+            throw new RuntimeException(\"major device number '\"\n+                                       + entry.getDevMajor()\n+                                       + \"' is too big ( > \"\n+                                       + TarConstants.MAXID + \" bytes)\");\n+        }\n+        if (entry.getDevMinor() > TarConstants.MAXID) {\n+            throw new RuntimeException(\"minor device number '\"\n+                                       + entry.getDevMinor()\n+                                       + \"' is too big ( > \"\n+                                       + TarConstants.MAXID + \" bytes)\");\n+        }\n     }\n }", "timestamp": 1331313593, "metainfo": ""}