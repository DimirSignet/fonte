{"sha": "2e3acfa74073a601e3f6ed7bf5ff201a9d843346", "log": "added support for compressor detection    ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n     public ArchiveInputStream createArchiveInputStream(\n             final String archiverName, final InputStream in)\n             throws ArchiveException {\n+        \n         if (archiverName == null) {\n             throw new IllegalArgumentException(\"Archivername must not be null.\");\n         }\n+        \n         if (in == null) {\n         \tthrow new IllegalArgumentException(\"InputStream must not be null.\");\n         }\n \n         if (\"ar\".equalsIgnoreCase(archiverName)) {\n             return new ArArchiveInputStream(in);\n-        } else if (\"zip\".equalsIgnoreCase(archiverName)) {\n+        }\n+        if (\"zip\".equalsIgnoreCase(archiverName)) {\n             return new ZipArchiveInputStream(in);\n-        } else if (\"tar\".equalsIgnoreCase(archiverName)) {\n+        }\n+        if (\"tar\".equalsIgnoreCase(archiverName)) {\n             return new TarArchiveInputStream(in);\n-        } else if (\"jar\".equalsIgnoreCase(archiverName)) {\n+        }\n+        if (\"jar\".equalsIgnoreCase(archiverName)) {\n             return new JarArchiveInputStream(in);\n-        } else if (\"cpio\".equalsIgnoreCase(archiverName)) {\n+        }\n+        if (\"cpio\".equalsIgnoreCase(archiverName)) {\n             return new CpioArchiveInputStream(in);\n         }\n+        \n         throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n  */\n public class CompressorStreamFactory {\n \n+\n+    /**\n+     * Create an compressor input stream from an input stream, autodetecting\n+     * the compressor type from the first few bytes of the stream. The InputStream\n+     * must support marks, like BufferedInputStream.\n+     * \n+     * @param in the input stream\n+     * @return the compressor input stream\n+     * @throws CompressorInputStream if the compressor name is not known\n+     * @throws IllegalArgumentException if the stream is null or does not support mark\n+     */\n+    public CompressorInputStream createCompressorInputStream(final InputStream in)\n+            throws CompressorException {\n+        if (in == null) {\n+            throw new IllegalArgumentException(\"Stream must not be null.\");\n+        }\n+\n+        if (!in.markSupported()) {\n+            throw new IllegalArgumentException(\"Mark is not supported.\");\n+        }\n+\n+        final byte[] signature = new byte[12];\n+        in.mark(signature.length);\n+        try {\n+            int signatureLength = in.read(signature);\n+            in.reset();\n+            \n+            if (BZip2CompressorInputStream.matches(signature, signatureLength)) {\n+                return new BZip2CompressorInputStream(in);\n+            }\n+            \n+            if (GzipCompressorInputStream.matches(signature, signatureLength)) {\n+                return new GzipCompressorInputStream(in);\n+            }\n+\n+        } catch (IOException e) {\n+            throw new CompressorException(\"Failed to detect Compressor from InputStream.\", e);\n+        }\n+\n+        throw new CompressorException(\"No Compressor found for the stream signature.\");\n+    }\n+    \n     /**\n      * Create a compressor input stream from a compressor name and an input stream.\n      * \n         }\n \n         try {\n+            \n             if (\"gz\".equalsIgnoreCase(name)) {\n                 return new GzipCompressorInputStream(in);\n-            } else if (\"bzip2\".equalsIgnoreCase(name)) {\n+            }\n+            \n+            if (\"bzip2\".equalsIgnoreCase(name)) {\n                 return new BZip2CompressorInputStream(in);\n             }\n+            \n         } catch (IOException e) {\n             throw new CompressorException(\n-                    \"Could not create CompressorInputStream\", e);\n+                    \"Could not create CompressorInputStream.\", e);\n         }\n         throw new CompressorException(\"Compressor: \" + name + \" not found.\");\n     }\n         }\n \n         try {\n+\n             if (\"gz\".equalsIgnoreCase(name)) {\n                 return new GzipCompressorOutputStream(out);\n-            } else if (\"bzip2\".equalsIgnoreCase(name)) {\n+            } \n+            \n+            if (\"bzip2\".equalsIgnoreCase(name)) {\n                 return new BZip2CompressorOutputStream(out);\n             }\n+        \n         } catch (IOException e) {\n             throw new CompressorException(\n                     \"Could not create CompressorOutputStream\", e);\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n \n     }\n \n+    public static boolean matches(byte[] signature, int length) {\n+\n+        if (length < 3) {\n+            return false;\n+        }\n+        \n+        if (signature[0] != 'B') {\n+            return false;\n+        }\n+\n+        if (signature[1] != 'Z') {\n+            return false;\n+        }\n+\n+        if (signature[2] != 'h') {\n+            return false;\n+        }\n+        \n+        return true;\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n         this.count(read);\n         return read;\n     }\n+\n+    public static boolean matches(byte[] signature, int length) {\n+\n+        if (length < 2) {\n+            return false;\n+        }\n+        \n+        if (signature[0] != 31) {\n+            return false;\n+        }\n+\n+        if (signature[1] != -117) {\n+            return false;\n+        }\n+        \n+        return true;\n+    }\n+    \n }\n--- a/src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java\n  */\n package org.apache.commons.compress;\n \n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.net.URL;\n+\n import junit.framework.TestCase;\n \n+import org.apache.commons.compress.compressors.CompressorException;\n+import org.apache.commons.compress.compressors.CompressorInputStream;\n+import org.apache.commons.compress.compressors.CompressorStreamFactory;\n+import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+\n public final class DetectCompressorTestCase extends TestCase {\n-\tpublic void testDetection() throws Exception {\n-\t}\n+\n+    public DetectCompressorTestCase(String name) {\n+        super(name);\n+    }\n+\n+    final ClassLoader classLoader = getClass().getClassLoader();\n+    final CompressorStreamFactory factory = new CompressorStreamFactory();\n+\n+    public void testDetection() throws Exception {\n+\n+        final CompressorInputStream bzip2 = getStreamFor(\"bla.txt.bz2\"); \n+        assertNotNull(bzip2);\n+        assertTrue(bzip2 instanceof BZip2CompressorInputStream);\n+\n+        final CompressorInputStream gzip = getStreamFor(\"bla.tgz\");\n+        assertNotNull(gzip);\n+        assertTrue(gzip instanceof GzipCompressorInputStream);\n+\n+    }\n+\n+    private CompressorInputStream getStreamFor(String resource)\n+            throws CompressorException, FileNotFoundException {\n+\n+        final URL rsc = classLoader.getResource(resource);\n+        assertNotNull(\"Could not find resource \"+resource,rsc);\n+        return factory.createCompressorInputStream(\n+                   new BufferedInputStream(new FileInputStream(\n+                       new File(rsc.getFile()))));\n+    }\n+    \n }", "timestamp": 1265984071, "metainfo": ""}