{"sha": "e451ee48eea0be402f9a3502b22b0104d55d3cb9", "log": "TestCase for new Unicode extra fields, based on submission by Wolfgang Glas, SANDBOX-176  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.UnsupportedCharsetException;\n+import java.util.Enumeration;\n+import junit.framework.TestCase;\n+\n+public class UTF8ZipFilesTest extends TestCase {\n+\n+    private static final String UTF_8 = \"utf-8\";\n+    private static final String CP437 = \"cp437\";\n+    private static final String US_ASCII = \"US-ASCII\";\n+    private static final String ASCII_TXT = \"ascii.txt\";\n+    private static final String EURO_FOR_DOLLAR_TXT = \"\\u20AC_for_Dollar.txt\";\n+    private static final String OIL_BARREL_TXT = \"\\u00D6lf\\u00E4sser.txt\";\n+\n+    public void testUtf8FileRoundtrip() throws IOException {\n+        testFileRoundtrip(UTF_8);\n+    }\n+\n+\n+    public void testCP437FileRoundtrip() throws IOException {\n+        testFileRoundtrip(CP437);\n+    }\n+\n+    public void testASCIIFileRoundtrip() throws IOException {\n+        testFileRoundtrip(US_ASCII);\n+    }\n+\n+    private static void testFileRoundtrip(String encoding)\n+        throws IOException {\n+\n+        try {\n+            Charset.forName(encoding);\n+        } catch (UnsupportedCharsetException use) {\n+            System.err.println(\"Skipping testFileRoundtrip for unsupported \"\n+                               + \" encoding \" + encoding);\n+            return;\n+        }\n+\n+        File file = File.createTempFile(encoding + \"-test\", \".zip\");\n+        try {\n+            createTestFile(file, encoding);\n+            testFile(file, encoding);\n+        } finally {\n+            if (file.exists()) {\n+                file.delete();\n+            }\n+        }\n+    }\n+\n+    private static void createTestFile(File file, String encoding)\n+        throws UnsupportedEncodingException, IOException {\n+\n+        ZipArchiveOutputStream zos = null;\n+        try {\n+            zos = new ZipArchiveOutputStream(file);\n+            zos.setEncoding(encoding);\n+\n+            ZipArchiveEntry ze = new ZipArchiveEntry(OIL_BARREL_TXT);\n+            if (!ZipEncodingHelper.canEncodeName(ze.getName(),\n+                                                 zos.getEncoding())) {\n+                ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n+                                                           zos.getEncoding()));\n+            }\n+\n+            zos.putNextEntry(ze);\n+            zos.write(\"Hello, world!\".getBytes(\"US-ASCII\"));\n+            zos.closeEntry();\n+\n+            ze = new ZipArchiveEntry(EURO_FOR_DOLLAR_TXT);\n+            if (!ZipEncodingHelper.canEncodeName(ze.getName(),\n+                                                 zos.getEncoding())) {\n+                ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n+                                                           zos.getEncoding()));\n+            }\n+\n+            zos.putNextEntry(ze);\n+            zos.write(\"Give me your money!\".getBytes(\"US-ASCII\"));\n+            zos.closeEntry();\n+\n+            ze = new ZipArchiveEntry(ASCII_TXT);\n+\n+            if (!ZipEncodingHelper.canEncodeName(ze.getName(),\n+                                                 zos.getEncoding())) {\n+                ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n+                                                           zos.getEncoding()));\n+            }\n+\n+            zos.putNextEntry(ze);\n+            zos.write(\"ascii\".getBytes(\"US-ASCII\"));\n+            zos.closeEntry();\n+        } finally {\n+            if (zos != null) {\n+                try {\n+                    zos.close();\n+                } catch (IOException e) { /* swallow */ }\n+            }\n+        }\n+    }\n+\n+    private static void testFile(File file, String encoding)\n+        throws IOException {\n+        ZipFile zf = null;\n+        try {\n+            zf = new ZipFile(file, encoding);\n+\n+            Enumeration e = zf.getEntries();\n+            while (e.hasMoreElements()) {\n+                ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n+\n+                if (ze.getName().endsWith(\"sser.txt\")) {\n+                    assertUnicodeName(ze, OIL_BARREL_TXT, encoding);\n+\n+                } else if (ze.getName().endsWith(\"_for_Dollar.txt\")) {\n+                    assertUnicodeName(ze, EURO_FOR_DOLLAR_TXT, encoding);\n+                } else if (!ze.getName().equals(ASCII_TXT)) {\n+                    throw new AssertionError(\"Urecognized ZIP entry with name [\"\n+                                             + ze.getName() + \"] found.\");\n+                }\n+            }\n+        } finally {\n+            ZipFile.closeQuietly(zf);\n+        }\n+    }\n+\n+    private static UnicodePathExtraField findUniCodePath(ZipArchiveEntry ze) {\n+\n+        ZipExtraField[] efs = ze.getExtraFields();\n+        for (int i = 0; i < efs.length; ++i) {\n+            if (efs[i].getHeaderId().equals(UnicodePathExtraField.UPATH_ID)) {\n+                return (UnicodePathExtraField) efs[i];\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void assertUnicodeName(ZipArchiveEntry ze,\n+                                          String expectedName,\n+                                          String encoding)\n+        throws IOException {\n+        if (!expectedName.equals(ze.getName())) {\n+            UnicodePathExtraField ucpf = findUniCodePath(ze);\n+            assertNotNull(ucpf);\n+\n+            UnicodePathExtraField ucpe = new UnicodePathExtraField(expectedName,\n+                                                                   encoding);\n+            assertEquals(ucpe.getNameCRC32(), ucpf.getNameCRC32());\n+            assertEquals(expectedName, new String(ucpf.getUnicodeName(),\n+                                                  UTF_8));\n+        }\n+    }\n+\n+    /*\n+    public void testUtf8Interoperability() throws IOException {\n+        File file1 = super.getFile(\"utf8-7zip-test.zip\");\n+        File file2 = super.getFile(\"utf8-winzip-test.zip\");\n+\n+        testFile(file1,CP437);\n+        testFile(file2,CP437);\n+\n+    }\n+    */\n+}\n+", "timestamp": 1235050619, "metainfo": ""}