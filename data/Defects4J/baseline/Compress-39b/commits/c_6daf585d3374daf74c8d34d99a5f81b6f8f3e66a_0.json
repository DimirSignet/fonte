{"sha": "6daf585d3374daf74c8d34d99a5f81b6f8f3e66a", "log": "be more aggressive when closing/deleting temporary files in tests  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Locale;\n \n import junit.framework.TestCase;\n \n         rmdir(dir);\n         rmdir(resultDir);\n         dir = resultDir = null;\n-        if (archive != null && archive.exists()) {\n-            if (!archive.delete()){\n-                // Note: this exception won't be shown if the test has already failed\n-                throw new Exception(\"Could not delete \"+archive.getPath());\n-            }\n+        if (!tryHardToDelete(archive)) {\n+            // Note: this exception won't be shown if the test has already failed\n+            throw new Exception(\"Could not delete \"+archive.getPath());\n         }\n     }\n \n     protected static void rmdir(File f) {\n-        // Sometimes fails without a pause - perhaps file close is partially asynchronous?\n-        try {\n-            Thread.sleep(20);\n-        } catch (InterruptedException e) {\n-        }\n         String[] s = f.list();\n         if (s != null) {\n             for (int i = 0; i < s.length; i++) {\n                 if (file.isDirectory()){\n                     rmdir(file);\n                 }\n-                boolean ok = file.delete();\n+                boolean ok = tryHardToDelete(file);\n                 if (!ok && file.exists()){\n                     System.out.println(\"Failed to delete \"+s[i]+\" in \"+f.getPath());\n                 }\n             }\n         }\n-        f.delete(); // safer to delete and check\n+        tryHardToDelete(f); // safer to delete and check\n         if (f.exists()){\n             throw new Error(\"Failed to delete \"+f.getPath());\n         }\n+    }\n+\n+    private static final boolean ON_WINDOWS =\n+        System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH)\n+        .indexOf(\"windows\") > -1;\n+\n+    /**\n+     * Accommodate Windows bug encountered in both Sun and IBM JDKs.\n+     * Others possible. If the delete does not work, call System.gc(),\n+     * wait a little and try again.\n+     *\n+     * @return whether deletion was successful\n+     * @since Stolen from FileUtils in Ant 1.8.0\n+     */\n+    public static boolean tryHardToDelete(File f) {\n+        if (f != null && f.exists() && !f.delete()) {\n+            if (ON_WINDOWS) {\n+                System.gc();\n+            }\n+            try {\n+                Thread.sleep(10);\n+            } catch (InterruptedException ex) {\n+                // Ignore Exception\n+            }\n+            return f.delete();\n+        }\n+        return true;\n     }\n \n     /**\n         OutputStream stream = null;\n         try {\n             archive = File.createTempFile(\"test\", \".\" + archivename);\n+            archive.deleteOnExit();\n             archiveList = new ArrayList<String>();\n \n             stream = new FileOutputStream(archive);\n         archiveList = new ArrayList<String>();\n         try {\n             archive = File.createTempFile(\"empty\", \".\" + archivename);\n+            archive.deleteOnExit();\n             stream = new FileOutputStream(archive);\n             out = factory.createArchiveOutputStream(archivename, stream);\n             out.finish();\n         archiveList = new ArrayList<String>();\n         try {\n             archive = File.createTempFile(\"empty\", \".\" + archivename);\n+            archive.deleteOnExit();\n             stream = new FileOutputStream(archive);\n             out = factory.createArchiveOutputStream(archivename, stream);\n             // Use short file name so does not cause problems for ar\n      */\n     protected File checkArchiveContent(ArchiveInputStream in, List<String> expected, boolean cleanUp)\n             throws Exception {\n-        File result = File.createTempFile(\"dir-result\", \"\");\n-        result.delete();\n-        result.mkdir();\n+        File result = mkdir(\"dir-result\");\n+        result.deleteOnExit();\n \n         try {\n             ArchiveEntry entry = null;\n      * element of the two element array).\n      */\n     protected File[] createTempDirAndFile() throws IOException {\n-        File tmpDir = File.createTempFile(\"testdir\", \"\");\n-        tmpDir.delete();\n-        tmpDir.mkdir();\n+        File tmpDir = mkdir(\"testdir\");\n         tmpDir.deleteOnExit();\n         File tmpFile = File.createTempFile(\"testfile\", \"\", tmpDir);\n         tmpFile.deleteOnExit();\n--- a/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n             if (aos != null) {\n                 aos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(archive);\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (aos != null) {\n                 aos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(archive);\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (aos != null) {\n                 aos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n+            tryHardToDelete(archive);\n             if (fis != null) {\n                 fis.close();\n             }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (aos != null) {\n                 aos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n+            tryHardToDelete(archive);\n             if (fis != null) {\n                 fis.close();\n             }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n             if (tos != null) {\n                 tos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(archive);\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (tos != null) {\n                 tos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(archive);\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (tos != null) {\n                 tos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n+            tryHardToDelete(archive);\n             if (fis != null) {\n                 fis.close();\n             }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (tos != null) {\n                 tos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n+            tryHardToDelete(archive);\n             if (fis != null) {\n                 fis.close();\n             }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n             checkArchiveContent(ais, expected);\n         } catch (AssertionFailedError e) {\n             fail(\"Error processing \"+file.getName()+\" \"+e);\n+        } finally {\n+            ais.close();\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n             if (tos != null) {\n                 tos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(archive);\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (tos != null) {\n                 tos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(archive);\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (tos != null) {\n                 tos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n+            tryHardToDelete(archive);\n             if (fis != null) {\n                 fis.close();\n             }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (tos != null) {\n                 tos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n+            tryHardToDelete(archive);\n             if (fis != null) {\n                 fis.close();\n             }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n             if (zos != null) {\n                 zos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(archive);\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (zos != null) {\n                 zos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(archive);\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (zos != null) {\n                 zos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n+            tryHardToDelete(archive);\n             if (fis != null) {\n                 fis.close();\n             }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n \n             if (zos != null) {\n                 zos.close();\n             }\n-            if (archive != null) {\n-                archive.delete();\n-            }\n+            tryHardToDelete(archive);\n             if (fis != null) {\n                 fis.close();\n             }\n-            tmp[1].delete();\n-            tmp[0].delete();\n+            tryHardToDelete(tmp[1]);\n+            rmdir(tmp[0]);\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java\n import java.io.IOException;\n import junit.framework.TestCase;\n \n+import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.zip.JarMarker;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipExtraField;\n \n     public void testJarMarker() throws IOException {\n         File testArchive = File.createTempFile(\"jar-aostest\", \".jar\");\n+        testArchive.deleteOnExit();\n         JarArchiveOutputStream out = null;\n         ZipFile zf = null;\n         try {\n                 } catch (IOException e) { /* swallow */ }\n             }\n             ZipFile.closeQuietly(zf);\n-            if (testArchive.exists()) {\n-                testArchive.delete();\n-            }\n+            AbstractTestCase.tryHardToDelete(testArchive);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java\n import java.io.IOException;\n import java.util.Locale;\n import junit.framework.TestCase;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n \n public class TarArchiveEntryTest extends TestCase {\n \n             if (tout != null) {\n                 tout.close();\n             }\n+            AbstractTestCase.tryHardToDelete(f);\n         }\n     }\n     \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n \n     public void testZipFileReadsUnicodeFields() throws IOException {\n         File file = File.createTempFile(\"unicode-test\", \".zip\");\n+        file.deleteOnExit();\n         ZipArchiveInputStream zi = null;\n         try {\n             createTestFile(file, US_ASCII, false, true);\n             if (zi != null) {\n                 zi.close();\n             }\n-            if (file.exists()) {\n-                file.delete();\n-            }\n+            tryHardToDelete(file);\n         }\n     }\n \n     public void testZipArchiveInputStreamReadsUnicodeFields()\n         throws IOException {\n         File file = File.createTempFile(\"unicode-test\", \".zip\");\n+        file.deleteOnExit();\n         ZipFile zf = null;\n         try {\n             createTestFile(file, US_ASCII, false, true);\n             assertNotNull(zf.getEntry(OIL_BARREL_TXT));\n         } finally {\n             ZipFile.closeQuietly(zf);\n-            if (file.exists()) {\n-                file.delete();\n-            }\n+            tryHardToDelete(file);\n         }\n     }\n \n         throws IOException {\n \n         File file = File.createTempFile(encoding + \"-test\", \".zip\");\n+        file.deleteOnExit();\n         try {\n             createTestFile(file, encoding, withEFS, withExplicitUnicodeExtra);\n             testFile(file, encoding);\n         } finally {\n-            if (file.exists()) {\n-                file.delete();\n-            }\n+            tryHardToDelete(file);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n import java.net.URL;\n import java.util.Enumeration;\n import java.util.Random;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n \n import org.junit.Ignore;\n import org.junit.Test;\n                 if (os != null) {\n                     os.close();\n                 }\n-                f.delete();\n+                AbstractTestCase.tryHardToDelete(f);\n             }\n         }\n     }", "timestamp": 1313158904, "metainfo": ""}