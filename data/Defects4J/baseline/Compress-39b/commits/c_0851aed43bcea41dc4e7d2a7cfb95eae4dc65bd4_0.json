{"sha": "0851aed43bcea41dc4e7d2a7cfb95eae4dc65bd4", "log": "COMPRESS-147 unit test for the remaining chunk types along with necessary fixes.  The test archive is hand-crafted and the CRCs are wrong right now, will be fixed once I implement CRC verification inside the stream.   ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java\n         int read = -1;\n         if (inUncompressedChunk) {\n             int amount = Math.min(uncompressedBytesRemaining, len);\n+            if (amount == 0) {\n+                return -1;\n+            }\n             read = in.read(b, off, amount);\n             if (read != -1) {\n                 uncompressedBytesRemaining -= read;\n     }\n \n     private void readNextBlock() throws IOException {\n+        inUncompressedChunk = false;\n         int type = readOneByte();\n         if (type == -1) {\n             endReached = true;\n             readNextBlock();\n         } else if (type >= MIN_UNSKIPPABLE_TYPE && type <= MAX_UNSKIPPABLE_TYPE) {\n             throw new IOException(\"unskippable chunk with type \" + type\n+                                  + \" (hex \" + Integer.toHexString(type) + \")\"\n                                   + \" detected.\");\n         } else if (type == UNCOMPRESSED_CHUNK_TYPE) {\n-            uncompressedBytesRemaining = readSize();\n+            inUncompressedChunk = true;\n+            uncompressedBytesRemaining = readSize() - 4 /* CRC */;\n             readCrc();\n         } else if (type == COMPRESSED_CHUNK_TYPE) {\n-            int size = readSize();\n+            int size = readSize() - 4 /* CRC */;\n             readCrc();\n             currentCompressedChunk =\n                 new SnappyCompressorInputStream(new BoundedInputStream(in, size));\n--- a/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import static org.junit.Assert.assertArrayEquals;\n+\n import java.io.BufferedInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n         try {\n             FileInputStream gz = new FileInputStream(outputGz);\n             try {\n-                assertTrue(Arrays.equals(IOUtils.toByteArray(sz),\n-                                         IOUtils.toByteArray(gz)));\n+                assertArrayEquals(IOUtils.toByteArray(sz),\n+                                  IOUtils.toByteArray(gz));\n             } finally {\n                 gz.close();\n             }\n         } finally {\n             sz.close();\n         }\n+    }\n+\n+    public void testRemainingChunkTypes() throws Exception {\n+        final FileInputStream isSz = new FileInputStream(getFile(\"mixed.txt.sz\"));\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        try {\n+            CompressorInputStream in = new FramedSnappyCompressorInputStream(isSz);\n+            IOUtils.copy(in, out);\n+            out.close();\n+        } finally {\n+            isSz.close();\n+        }\n+\n+        assertArrayEquals(new byte[] { '1', '2', '3', '4',\n+                                       '5', '6', '7', '8', '9',\n+                                       '5', '6', '7', '8', '9',\n+                                       '5', '6', '7', '8', '9',\n+                                       '5', '6', '7', '8', '9',\n+                                       '5', '6', '7', '8', '9', 10,\n+                                       '1', '2', '3', '4',\n+                                       '1', '2', '3', '4',\n+            }, out.toByteArray());\n     }\n \n     private void testUnarchive(StreamWrapper<CompressorInputStream> wrapper) throws Exception {\n         try {\n             FileInputStream orig = new FileInputStream(original);\n             try {\n-                assertTrue(Arrays.equals(IOUtils.toByteArray(written),\n-                                         IOUtils.toByteArray(orig)));\n+                assertArrayEquals(IOUtils.toByteArray(written),\n+                                  IOUtils.toByteArray(orig));\n             } finally {\n                 orig.close();\n             }", "timestamp": 1386401418, "metainfo": ""}