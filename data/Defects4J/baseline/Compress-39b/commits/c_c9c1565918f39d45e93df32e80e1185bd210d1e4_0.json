{"sha": "c9c1565918f39d45e93df32e80e1185bd210d1e4", "log": "COMPRESS-280 don't call read in TarArchiveInputStream#skip  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n         return (int) (entrySize - entryOffset);\n     }\n \n-    /**\n-     * Skip bytes in the input buffer. This skips bytes in the\n-     * current entry's data, not the entire archive, and will\n-     * stop at the end of the current entry's data if the number\n-     * to skip extends beyond that point.\n-     *\n-     * @param numToSkip The number of bytes to skip.\n-     * @return the number actually skipped\n-     * @throws IOException on error\n+    \n+    /**\n+     * Skips over and discards <code>n</code> bytes of data from this input\n+     * stream. The <code>skip</code> method may, for a variety of reasons, end\n+     * up skipping over some smaller number of bytes, possibly <code>0</code>.\n+     * This may result from any of a number of conditions; reaching end of file\n+     * or end of entry before <code>n</code> bytes have been skipped; are only\n+     * two possibilities. The actual number of bytes skipped is returned. If\n+     * <code>n</code> is negative, no bytes are skipped.\n+     * \n+     * \n+     * @param n\n+     *            the number of bytes to be skipped.\n+     * @return the actual number of bytes skipped.\n+     * @exception IOException\n+     *                if some other I/O error occurs.\n      */\n     @Override\n-    public long skip(long numToSkip) throws IOException {\n-\n-        long available = entrySize - entryOffset;\n-        numToSkip = Math.min(numToSkip, available);\n-\n-        long skipped = IOUtils.skip(is, numToSkip); \n+    public long skip(final long n) throws IOException {\n+\n+        final long available = entrySize - entryOffset;\n+        final long skipped = is.skip(Math.min(n, available)); \n         count(skipped);\n         entryOffset += skipped;\n         return skipped;\n \n         if (currEntry != null) {\n             /* Skip will only go to the end of the current entry */\n-            skip(Long.MAX_VALUE);\n+            IOUtils.skip(this, Long.MAX_VALUE);\n \n             /* skip to the end of the last record */\n             skipRecordPadding();", "timestamp": 1399004884, "metainfo": ""}