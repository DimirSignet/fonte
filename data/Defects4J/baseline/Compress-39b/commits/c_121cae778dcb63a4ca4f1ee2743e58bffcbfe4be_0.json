{"sha": "121cae778dcb63a4ca4f1ee2743e58bffcbfe4be", "log": "COMPRESS-303 Restore immutability/thread-safety to CompressorStreamFactory.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n  * IOUtils.copy(in, new FileOutputStream(output));\n  * in.close();\n  * </pre>\n- * \n+ * @Immutable provided that the deprecated method setDecompressConcatenated is not used.\n  */\n public class CompressorStreamFactory {\n \n      */\n     public static final String DEFLATE = \"deflate\";\n \n-    private boolean decompressConcatenated = false;\n+    /**\n+     * If true, decompress until the end of the input.\n+     * If false, stop after the first stream and leave the \n+     * input position to point to the next byte after the stream\n+     */\n+    private final Boolean decompressUntilEOF;\n+    // This is Boolean so setDecompressConcatenated can determine whether it has been set by the ctor\n+    // once the setDecompressConcatenated method has been removed, it can revert to boolean\n+\n+    /**\n+     * If true, decompress until the end of the input.\n+     * If false, stop after the first stream and leave the \n+     * input position to point to the next byte after the stream\n+     */\n+\n+    private volatile boolean decompressConcatenated = false;\n+\n+    /**\n+     * Create an instance with the decompress Concatenated option set to false.\n+     */\n+    public CompressorStreamFactory() {\n+        this.decompressUntilEOF = null;  \n+    }\n+\n+    /**\n+     * Create an instance with the provided decompress Concatenated option.\n+     * @param       decompressUntilEOF\n+     *                          if true, decompress until the end of the\n+     *                          input; if false, stop after the first\n+     *                          stream and leave the input position to point\n+     *                          to the next byte after the stream\n+     * @since 1.10\n+     */\n+    public CompressorStreamFactory(boolean decompressUntilEOF) {\n+        this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);\n+        // Also copy to existing variable so can continue to use that as the current value\n+        this.decompressConcatenated = decompressUntilEOF;\n+    }\n \n     /**\n      * Whether to decompress the full input or only the first stream\n      *                          stream and leave the input position to point\n      *                          to the next byte after the stream\n      * @since 1.5\n-     */\n+     * @deprecated 1.10 use the {@link #CompressorStreamFactory(boolean)} constructor instead\n+     */\n+    @Deprecated\n     public void setDecompressConcatenated(boolean decompressConcatenated) {\n+        if (this.decompressUntilEOF != null) {\n+            throw new IllegalStateException(\"Cannot override the setting defined by the constructor\");\n+        }\n         this.decompressConcatenated = decompressConcatenated;\n     }\n ", "timestamp": 1424040541, "metainfo": ""}