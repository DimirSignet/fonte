{"sha": "81af6235ee8311376d1c8618651763f7ce58e1ed", "log": "If the entry uses a data descriptor, size information is only available after trying to read the next entry.  This doesn't help the jar case as Java7's jar doesn't implement the spec correctly, will file a bug report with OpenJDK and ponder whether a work-around is possible.  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n \n     @Test public void read5GBOfZerosGeneratedByJava7JarUsingInputStream()\n         throws Throwable {\n-        read5GBOfZerosImpl(get5GBZerosFileGeneratedByJava7Jar(), \"5GB_of_Zeros\");\n+        // don't check the size in jar case as jar uses 8-Byte values\n+        // inside the data descriptor without adding a ZIP64 extra\n+        // field, violating the \"spec\".\n+        read5GBOfZerosImpl(get5GBZerosFileGeneratedByJava7Jar(), \"5GB_of_Zeros\",\n+                           false);\n     }\n \n     @Test public void read100KFilesUsingInputStream() throws Throwable {\n \n     private static void read5GBOfZerosImpl(File f, String expectedName)\n         throws IOException {\n+        read5GBOfZerosImpl(f, expectedName, true);\n+    }\n+\n+    private static void read5GBOfZerosImpl(File f, String expectedName,\n+                                           boolean checkSize)\n+        throws IOException {\n         FileInputStream fin = new FileInputStream(f);\n         ZipArchiveInputStream zin = null;\n         try {\n                 read += readNow;\n             }\n             assertEquals(FIVE_BILLION, read);\n-            assertEquals(FIVE_BILLION, zae.getSize());\n             assertNull(zin.getNextZipEntry());\n+            if (checkSize) {\n+                assertEquals(FIVE_BILLION, zae.getSize());\n+            }\n         } finally {\n             if (zin != null) {\n                 zin.close();", "timestamp": 1312193494, "metainfo": ""}