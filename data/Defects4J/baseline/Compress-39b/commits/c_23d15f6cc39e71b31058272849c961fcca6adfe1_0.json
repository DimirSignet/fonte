{"sha": "23d15f6cc39e71b31058272849c961fcca6adfe1", "log": "COMPRESS-289 applies to PAX-headers as well  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n import java.io.StringWriter;\n import java.nio.ByteBuffer;\n import java.util.Arrays;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.Map;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n         }\n \n         if (paxHeaders.size() > 0) {\n-            writePaxHeaders(entryName, paxHeaders);\n+            writePaxHeaders(entry, entryName, paxHeaders);\n         }\n \n         entry.writeEntryHeader(recordBuf, encoding,\n      * Writes a PAX extended header with the given map as contents.\n      * @since 1.4\n      */\n-    void writePaxHeaders(String entryName,\n+    void writePaxHeaders(TarArchiveEntry entry,\n+                         String entryName,\n                          Map<String, String> headers) throws IOException {\n         String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n         if (name.length() >= TarConstants.NAMELEN) {\n         }\n         TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n+        transferModTime(entry, pex);\n \n         StringWriter w = new StringWriter();\n         for (Map.Entry<String, String> h : headers.entrySet()) {\n                 TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK, linkType);\n \n                 longLinkEntry.setSize(len + 1); // +1 for NUL\n-                longLinkEntry.setModTime(entry.getModTime());\n+                transferModTime(entry, longLinkEntry);\n                 putArchiveEntry(longLinkEntry);\n                 write(encodedName.array(), encodedName.arrayOffset(), len);\n                 write(0); // NUL terminator\n         }\n         return false;\n     }\n+\n+    private void transferModTime(TarArchiveEntry from, TarArchiveEntry to) {\n+        Date fromModTime = from.getModTime();\n+        long fromModTimeSeconds = fromModTime.getTime() / 1000;\n+        if (fromModTimeSeconds < 0 || fromModTimeSeconds > TarConstants.MAXSIZE) {\n+            fromModTime = new Date(0);\n+        }\n+        to.setModTime(fromModTime);\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n     private byte[] writePaxHeader(Map<String, String> m) throws Exception {\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         TarArchiveOutputStream tos = new TarArchiveOutputStream(bos, \"ASCII\");\n-        tos.writePaxHeaders(\"foo\", m);\n+        tos.writePaxHeaders(new TarArchiveEntry(\"x\"), \"foo\", m);\n \n         // add a dummy entry so data gets written\n         TarArchiveEntry t = new TarArchiveEntry(\"foo\");", "timestamp": 1411150121, "metainfo": ""}