{"sha": "4ccffaf315dda51eb8a5a52aa55554e2987484be", "log": "add tests for the stream and RandomAccessFile variants of ZipArchiveOutputStream  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import java.io.BufferedOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.RandomAccessFile;\n import java.net.URI;\n         }\n     }\n \n-    @Test public void write100KFiles() throws Throwable {\n-        withTemporaryArchive(\"write100KFiles\", new ZipOutputTest() {\n+    private static final ZipOutputTest write100KFiles =\n+        new ZipOutputTest() {\n                 public void test(File f, ZipArchiveOutputStream zos)\n                     throws IOException {\n                     for (int i = 0; i < ONE_HUNDRED_THOUSAND; i++) {\n                         a.close();\n                     }\n                 }\n-            });\n+        };\n+\n+    @Test public void write100KFilesFile() throws Throwable {\n+        withTemporaryArchive(\"write100KFilesFile\", write100KFiles, true);\n+    }\n+\n+    @Test public void write100KFilesStream() throws Throwable {\n+        withTemporaryArchive(\"write100KFilesStream\", write100KFiles, false);\n     }\n \n     /*\n      * information is needed inside the central directory.\n      *\n      * Creates a temporary archive of approx 5GB in size\n-     */ \n-    @Test public void write3EntriesCreatingBigArchive() throws Throwable {\n-        withTemporaryArchive(\"write3EntriesCreatingBigArchive\",\n-                             new ZipOutputTest() {\n+     */\n+    private static final ZipOutputTest write3EntriesCreatingBigArchive =\n+        new ZipOutputTest() {\n                 public void test(File f, ZipArchiveOutputStream zos)\n                     throws IOException {\n                     byte[] buf = new byte[1000 * 1000];\n                         zae = new ZipArchiveEntry(String.valueOf(i));\n                         zae.setSize(FIVE_BILLION / 2);\n                         zae.setMethod(ZipArchiveEntry.STORED);\n-                        zae.setCrc(0);\n+                        zae.setCrc(0x8a408f16L);\n                         zos.putArchiveEntry(zae);\n                         for (int j = 0; j < FIVE_BILLION / 2 / 1000 / 1000;\n                              j++) {\n                     }\n                     zae = new ZipArchiveEntry(String.valueOf(2));\n                     zae.setSize(0);\n+                    zae.setMethod(ZipArchiveEntry.STORED);\n+                    zae.setCrc(0);\n                     zos.putArchiveEntry(zae);\n+                    zos.write(new byte[0]);\n                     zos.closeArchiveEntry();\n                     zos.close();\n \n                     }\n                 }\n \n-            });\n+        };\n+\n+    @Test public void write3EntriesCreatingBigArchiveFile() throws Throwable {\n+        withTemporaryArchive(\"write3EntriesCreatingBigArchiveFile\",\n+                             write3EntriesCreatingBigArchive,\n+                             true);\n+    }\n+\n+    @Test public void write3EntriesCreatingBigArchiveStream() throws Throwable {\n+        withTemporaryArchive(\"write3EntriesCreatingBigArchiveStream\",\n+                             write3EntriesCreatingBigArchive,\n+                             false);\n     }\n \n     static interface ZipOutputTest {\n     }\n \n     private static void withTemporaryArchive(String testName,\n-                                             ZipOutputTest test)\n+                                             ZipOutputTest test,\n+                                             boolean useRandomAccessFile)\n         throws Throwable {\n         File f = getTempFile(testName);\n-        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(f);\n+        BufferedOutputStream os = null;\n+        ZipArchiveOutputStream zos = useRandomAccessFile\n+            ? new ZipArchiveOutputStream(f)\n+            : new ZipArchiveOutputStream(os = new BufferedOutputStream(new FileOutputStream(f)));\n         try {\n             test.test(f, zos);\n         } catch (IOException ex) {\n                                + \" - likely not enough disk space.\");\n             assumeTrue(false);\n         } finally {\n-            zos.close();\n+            try {\n+                zos.close();\n+            } finally {\n+                if (os != null) {\n+                    os.close();\n+                }\n+            }\n         }\n         f.delete();\n     }", "timestamp": 1311960736, "metainfo": ""}