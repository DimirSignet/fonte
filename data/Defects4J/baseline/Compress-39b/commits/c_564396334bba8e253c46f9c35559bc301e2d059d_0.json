{"sha": "564396334bba8e253c46f9c35559bc301e2d059d", "log": "COMPRESS-263 isZlibHeaderPresent => withZlibHeader  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java\n      */\n     public DeflateCompressorInputStream(InputStream inputStream,\n                                         DeflateParameters parameters) {\n-        in = new InflaterInputStream(inputStream, new Inflater(!parameters.isZlibHeaderPresent()));\n+        in = new InflaterInputStream(inputStream, new Inflater(!parameters.withZlibHeader()));\n     }\n     \n     /** {@inheritDoc} */\n--- a/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream.java\n      */\n     public DeflateCompressorOutputStream(OutputStream outputStream,\n                                          DeflateParameters parameters) throws IOException {\n-        this.out = new DeflaterOutputStream(outputStream, new Deflater(parameters.getCompressionLevel(), !parameters.isZlibHeaderPresent()));\n+        this.out = new DeflaterOutputStream(outputStream, new Deflater(parameters.getCompressionLevel(), !parameters.withZlibHeader()));\n     }\n \n     @Override\n--- a/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateParameters.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateParameters.java\n  */\n public class DeflateParameters {\n \n-    private boolean zlibHeaderPresent = true;\n+    private boolean zlibHeader = true;\n     private int compressionLevel = Deflater.DEFAULT_COMPRESSION;\n \n-    public boolean isZlibHeaderPresent() {\n-        return zlibHeaderPresent;\n+    /**\n+     * Whether or not the zlib header shall be written (when\n+     * compressing) or expected (when decompressing).\n+     */\n+    public boolean withZlibHeader() {\n+        return zlibHeader;\n     }\n \n     /**\n      * Sets the zlib header presence parameter.\n-     * This affects whether or not the zlib header will be written (when compressing) or expected (when decompressing).\n      *\n-     * @param zlibHeaderPresent\n+     * <p>This affects whether or not the zlib header will be written\n+     * (when compressing) or expected (when decompressing).</p>\n+     *\n+     * @param zlibHeader\n      */\n-    public void setZlibHeaderPresent(boolean zlibHeaderPresent) {\n-        this.zlibHeaderPresent = zlibHeaderPresent;\n+    public void setWithZlibHeader(boolean zlibHeader) {\n+        this.zlibHeader = zlibHeader;\n     }\n \n+    /**\n+     * The compression level.\n+     * @see #setCompressionLevel\n+     */\n     public int getCompressionLevel() {\n         return compressionLevel;\n     }\n--- a/src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java\n             out.close();\n         }\n     }\n-    \n+\n     /**\n      * Tests the creation of a \"raw\" DEFLATE archive (without zlib header)\n      * \n         final File output = new File(dir, \"test1.xml.deflate\");\n         final OutputStream out = new FileOutputStream(output);\n         try {\n-        \tDeflateParameters params = new DeflateParameters();\n-        \tparams.setZlibHeaderPresent(false);\n+            DeflateParameters params = new DeflateParameters();\n+            params.setWithZlibHeader(false);\n             final CompressorOutputStream cos = new DeflateCompressorOutputStream(out, params);\n             try {\n                 IOUtils.copy(new FileInputStream(input), cos);\n             is.close();\n         }\n     }\n-    \n+\n     /**\n      * Tests the extraction of a \"raw\" DEFLATE archive (without zlib header)\n      * \n         final File output = new File(dir, \"bla.tar\");\n         final InputStream is = new FileInputStream(input);\n         try {\n-        \tDeflateParameters params = new DeflateParameters();\n-        \tparams.setZlibHeaderPresent(false);\n+            DeflateParameters params = new DeflateParameters();\n+            params.setWithZlibHeader(false);\n             final CompressorInputStream in = new DeflateCompressorInputStream(is, params);\n             FileOutputStream out = null;\n             try {", "timestamp": 1402979604, "metainfo": ""}