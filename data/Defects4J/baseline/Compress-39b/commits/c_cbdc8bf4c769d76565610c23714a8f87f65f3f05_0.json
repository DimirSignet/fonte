{"sha": "cbdc8bf4c769d76565610c23714a8f87f65f3f05", "log": "COMPRESS-68 Filename suffix mappings for compression formats  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.gzip;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Utility code for the gzip compression format.\n+ */\n+public class GzipUtils {\n+\n+    /**\n+     * Map from common filename suffixes to the suffixes that identify gzipped\n+     * versions of those file types. For example: from \".tar\" to \".tgz\".\n+     */\n+    private static final Map compressSuffix = new HashMap();\n+\n+    /**\n+     * Map from common filename suffixes of gzipped files to the corresponding\n+     * suffixes of uncompressed files. For example: from \".tgz\" to \".tar\".\n+     * <p>\n+     * This map also contains gzip-specific suffixes like \".gz\" and \"-z\".\n+     * These suffixes are mapped to the empty string, as they should simply\n+     * be removed from the filename when the file is uncompressed.\n+     */\n+    private static final Map uncompressSuffix = new HashMap();\n+\n+    static {\n+        compressSuffix.put(\".tar\", \".tgz\");\n+        compressSuffix.put(\".svg\", \".svgz\");\n+        compressSuffix.put(\".cpio\", \".cpgz\");\n+        compressSuffix.put(\".wmf\", \".wmz\");\n+        compressSuffix.put(\".emf\", \".emz\");\n+\n+        uncompressSuffix.put(\".tgz\", \".tar\");\n+        uncompressSuffix.put(\".taz\", \".tar\");\n+        uncompressSuffix.put(\".svgz\", \".svg\");\n+        uncompressSuffix.put(\".cpgz\", \".cpio\");\n+        uncompressSuffix.put(\".wmz\", \".wmf\");\n+        uncompressSuffix.put(\".emz\", \".emf\");\n+        uncompressSuffix.put(\".gz\", \"\");\n+        uncompressSuffix.put(\".z\", \"\");\n+        uncompressSuffix.put(\"-gz\", \"\");\n+        uncompressSuffix.put(\"-z\", \"\");\n+        uncompressSuffix.put(\"_z\", \"\");\n+    }\n+    // N.B. if any shorter or longer keys are added, ensure the for loop limits are changed\n+\n+    /** Private constructor to prevent instantiation of this utility class. */\n+    private GzipUtils() {\n+    }\n+\n+    /**\n+     * Detects common gzip suffixes in the given filename.\n+     *\n+     * @param filename name of a file\n+     * @return <code>true</code> if the filename has a common gzip suffix,\n+     *         <code>false</code> otherwise\n+     */\n+    public static boolean isCompressedFilename(String filename) {\n+        String lower = filename.toLowerCase();\n+        int n = lower.length();\n+        // Shortest suffix is two letters (_z), longest is five (.svgz)\n+        for (int i = 2; i <= 5 && i < n; i++) {\n+            if (uncompressSuffix.containsKey(lower.substring(n - i))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Maps the given name of a gzip-compressed file to the name that the\n+     * file should have after uncompression. Commonly used file type specific\n+     * suffixes like \".tgz\" or \".svgz\" are automatically detected and\n+     * correctly mapped. For example the name \"package.tgz\" is mapped to\n+     * \"package.tar\". And any filenames with the generic \".gz\" suffix\n+     * (or any other generic gzip suffix) is mapped to a name without that\n+     * suffix. If no gzip suffix is detected, then the filename is returned\n+     * unmapped.\n+     *\n+     * @param filename name of a file\n+     * @return name of the corresponding uncompressed file\n+     */\n+    public static String getUncompressedFilename(String filename) {\n+        String lower = filename.toLowerCase();\n+        int n = lower.length();\n+        // Shortest suffix is two letters (_z), longest is five (.svgz)\n+        for (int i = 2; i <= 5 && i < n; i++) {\n+            Object suffix = uncompressSuffix.get(lower.substring(n - i));\n+            if (suffix != null) {\n+                return filename.substring(0, n - i) + suffix;\n+            }\n+        }\n+        return filename;\n+    }\n+\n+    /**\n+     * Maps the given filename to the name that the file should have after\n+     * compression with gzip. Common file types with custom suffixes for\n+     * compressed versions are automatically detected and correctly mapped.\n+     * For example the name \"package.tar\" is mapped to \"package.tgz\". If no\n+     * custom mapping is applicable, then the default \".gz\" suffix is appended\n+     * to the filename.\n+     *\n+     * @param filename name of a file\n+     * @return name of the corresponding compressed file\n+     */\n+    public static String getCompressedFilename(String filename) {\n+        String lower = filename.toLowerCase();\n+        int n = lower.length();\n+        // Shortest suffix is four letters (.svg), longest is five (.cpio)\n+        for (int i = 4; i <= 5 && i < n; i++) {\n+            Object suffix = compressSuffix.get(lower.substring(n - i));\n+            if (suffix != null) {\n+                return filename.substring(0, n - i) + suffix;\n+            }\n+        }\n+        // No custom suffix found, just append the default .gz\n+        return filename + \".gz\";\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/GzipUtilsTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors;\n+\n+import org.apache.commons.compress.compressors.gzip.GzipUtils;\n+\n+import junit.framework.TestCase;\n+\n+public class GzipUtilsTestCase extends TestCase {\n+\n+    public void testIsCompressedFilename() {\n+        assertFalse(GzipUtils.isCompressedFilename(\"\"));\n+        assertFalse(GzipUtils.isCompressedFilename(\".gz\"));\n+\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.tgz\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.taz\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.svgz\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.cpgz\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.wmz\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.emz\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.gz\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.z\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x-gz\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x-z\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x_z\"));\n+\n+        assertFalse(GzipUtils.isCompressedFilename(\"xxgz\"));\n+        assertFalse(GzipUtils.isCompressedFilename(\"xzz\"));\n+        assertFalse(GzipUtils.isCompressedFilename(\"xaz\"));\n+\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.SVGZ\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.Svgz\"));\n+        assertTrue(GzipUtils.isCompressedFilename(\"x.svGZ\"));\n+\n+        assertFalse(GzipUtils.isCompressedFilename(\"x.wmz \"));\n+        assertFalse(GzipUtils.isCompressedFilename(\"x.wmz\\n\"));\n+        assertFalse(GzipUtils.isCompressedFilename(\"x.wmz.y\"));\n+    }\n+\n+    public void testGetUncompressedFilename() {\n+        assertEquals(\"\", GzipUtils.getUncompressedFilename(\"\"));\n+        assertEquals(\".gz\", GzipUtils.getUncompressedFilename(\".gz\"));\n+\n+        assertEquals(\"x.tar\", GzipUtils.getUncompressedFilename(\"x.tgz\"));\n+        assertEquals(\"x.tar\", GzipUtils.getUncompressedFilename(\"x.taz\"));\n+        assertEquals(\"x.svg\", GzipUtils.getUncompressedFilename(\"x.svgz\"));\n+        assertEquals(\"x.cpio\", GzipUtils.getUncompressedFilename(\"x.cpgz\"));\n+        assertEquals(\"x.wmf\", GzipUtils.getUncompressedFilename(\"x.wmz\"));\n+        assertEquals(\"x.emf\", GzipUtils.getUncompressedFilename(\"x.emz\"));\n+        assertEquals(\"x\", GzipUtils.getUncompressedFilename(\"x.gz\"));\n+        assertEquals(\"x\", GzipUtils.getUncompressedFilename(\"x.z\"));\n+        assertEquals(\"x\", GzipUtils.getUncompressedFilename(\"x-gz\"));\n+        assertEquals(\"x\", GzipUtils.getUncompressedFilename(\"x-z\"));\n+        assertEquals(\"x\", GzipUtils.getUncompressedFilename(\"x_z\"));\n+\n+        assertEquals(\"x.svg\", GzipUtils.getUncompressedFilename(\"x.SVGZ\"));\n+        assertEquals(\"X.svg\", GzipUtils.getUncompressedFilename(\"X.SVGZ\"));\n+        assertEquals(\"X.svg\", GzipUtils.getUncompressedFilename(\"X.svGZ\"));\n+\n+        assertEquals(\"x.wmz \", GzipUtils.getUncompressedFilename(\"x.wmz \"));\n+        assertEquals(\"x.wmz\\n\", GzipUtils.getUncompressedFilename(\"x.wmz\\n\"));\n+        assertEquals(\"x.wmz.y\", GzipUtils.getUncompressedFilename(\"x.wmz.y\"));\n+    }\n+\n+    public void testGetCompressedFilename() {\n+        assertEquals(\".gz\", GzipUtils.getCompressedFilename(\"\"));\n+        assertEquals(\"x.gz\", GzipUtils.getCompressedFilename(\"x\"));\n+\n+        assertEquals(\"x.tgz\", GzipUtils.getCompressedFilename(\"x.tar\"));\n+        assertEquals(\"x.svgz\", GzipUtils.getCompressedFilename(\"x.svg\"));\n+        assertEquals(\"x.cpgz\", GzipUtils.getCompressedFilename(\"x.cpio\"));\n+        assertEquals(\"x.wmz\", GzipUtils.getCompressedFilename(\"x.wmf\"));\n+        assertEquals(\"x.emz\", GzipUtils.getCompressedFilename(\"x.emf\"));\n+\n+        assertEquals(\"x.svgz\", GzipUtils.getCompressedFilename(\"x.SVG\"));\n+        assertEquals(\"X.svgz\", GzipUtils.getCompressedFilename(\"X.SVG\"));\n+        assertEquals(\"X.svgz\", GzipUtils.getCompressedFilename(\"X.svG\"));\n+\n+        assertEquals(\"x.wmf .gz\", GzipUtils.getCompressedFilename(\"x.wmf \"));\n+        assertEquals(\"x.wmf\\n.gz\", GzipUtils.getCompressedFilename(\"x.wmf\\n\"));\n+        assertEquals(\"x.wmf.y.gz\", GzipUtils.getCompressedFilename(\"x.wmf.y\"));\n+    }\n+\n+}", "timestamp": 1238718943, "metainfo": ""}