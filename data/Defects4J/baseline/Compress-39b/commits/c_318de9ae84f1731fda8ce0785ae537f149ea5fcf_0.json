{"sha": "318de9ae84f1731fda8ce0785ae537f149ea5fcf", "log": "COMPRESS-351 extract method that sanitizes file names", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n+import org.apache.commons.compress.utils.ArchiveUtils;\n import org.apache.commons.compress.utils.IOUtils;\n \n import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;\n         while (remaining > 0) {\n             final long n = in.read(buf.array(), 0, (int) Math.min(buf.capacity(), remaining));\n             if (n < 0) {\n-                String name = current.entry.getName();\n-                int idx = firstUnprintableCharacter(current.entry.getName());\n-                if (idx >= 0) {\n-                    name = \"corrupted name starting with '\" + name.substring(0, idx) + \"'\";\n-                }\n-                throw new EOFException(\"Truncated ZIP entry: \" + name);\n+                throw new EOFException(\"Truncated ZIP entry: \"\n+                                       + ArchiveUtils.sanitize(current.entry.getName()));\n             }\n             count(n);\n             remaining -= n;\n         return b == ZipArchiveOutputStream.EOCD_SIG[0];\n     }\n \n-    private int firstUnprintableCharacter(String name) {\n-        final char[] chars = name.toCharArray();\n-        final int len = chars.length;\n-        for (int i = 0; i < len; i++) {\n-            if (Character.isISOControl(chars[i]) || !Character.isDefined(chars[i])) {\n-                return i;\n-            }\n-        }\n-        return -1;\n-    }\n-\n     /**\n      * Structure collecting information for the entry that is\n      * currently being read.\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n         }\n         return true;\n     }\n+\n+    /**\n+     * Returns a \"sanitized\" version of the string given as arguments,\n+     * where sanitized means non-printable characters have been\n+     * replaced with a question mark.\n+     *\n+     * <p>This method is used to clean up file names when they are\n+     * used in exception messages as they may end up in log files or\n+     * as console output and may have been read from a corrupted\n+     * input.</p>\n+     *\n+     * @param s the string to sanitize\n+     * @return a sanitized version of the argument\n+     * @since Compress 1.12\n+     */\n+    public static String sanitize(String s) {\n+        final char[] chars = s.toCharArray();\n+        final int len = chars.length;\n+        final StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < len; i++) {\n+            final char c = chars[i];\n+            if (!Character.isISOControl(c)) {\n+                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n+                if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n+                    sb.append(c);\n+                    continue;\n+                }\n+            }\n+            sb.append('?');\n+        }\n+        return sb.toString();\n+    }\n+\n }", "timestamp": 1461558676, "metainfo": ""}