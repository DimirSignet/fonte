{"sha": "06a81988d3fa7fd5828cb9f4e67432e23b1af21b", "log": "emptyFiles and antiItems bitsets only iterate over entries without streams  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n     \n     private void writeFileEmptyFiles(final DataOutput header) throws IOException {\n         boolean hasEmptyFiles = false;\n-        for (final SevenZArchiveEntry entry : files) {\n-            if (!entry.hasStream() && !entry.isDirectory()) {\n-                hasEmptyFiles = true;\n-                break;\n+        int emptyStreamCounter = 0;\n+        final BitSet emptyFiles = new BitSet(0);\n+        for (int i = 0; i < files.size(); i++) {\n+            if (!files.get(i).hasStream()) {\n+                boolean isDir = files.get(i).isDirectory();\n+                emptyFiles.set(emptyStreamCounter++, !isDir);\n+                hasEmptyFiles |= !isDir;\n             }\n         }\n         if (hasEmptyFiles) {\n             header.write(NID.kEmptyFile);\n-            final BitSet emptyFiles = new BitSet(files.size());\n-            for (int i = 0; i < files.size(); i++) {\n-                emptyFiles.set(i, !files.get(i).hasStream() && !files.get(i).isDirectory());\n-            }\n             final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n             final DataOutputStream out = new DataOutputStream(baos);\n-            writeBits(out, emptyFiles, files.size());\n+            writeBits(out, emptyFiles, emptyStreamCounter);\n             out.flush();\n             final byte[] contents = baos.toByteArray();\n             writeUint64(header, contents.length);\n     \n     private void writeFileAntiItems(final DataOutput header) throws IOException {\n         boolean hasAntiItems = false;\n-        for (final SevenZArchiveEntry entry : files) {\n-            if (entry.isAntiItem()) {\n-                hasAntiItems = true;\n-                break;\n+        final BitSet antiItems = new BitSet(0);\n+        int antiItemCounter = 0;\n+        for (int i = 0; i < files.size(); i++) {\n+            if (!files.get(i).hasStream()) {\n+                boolean isAnti = files.get(i).isAntiItem();\n+                antiItems.set(antiItemCounter++, isAnti);\n+                hasAntiItems |= isAnti;\n             }\n         }\n         if (hasAntiItems) {\n             header.write(NID.kAnti);\n-            final BitSet antiItems = new BitSet(files.size());\n-            for (int i = 0; i < files.size(); i++) {\n-                antiItems.set(i, files.get(i).isAntiItem());\n-            }\n             final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n             final DataOutputStream out = new DataOutputStream(baos);\n-            writeBits(out, antiItems, files.size());\n+            writeBits(out, antiItems, antiItemCounter);\n             out.flush();\n             final byte[] contents = baos.toByteArray();\n             writeUint64(header, contents.length);", "timestamp": 1382368795, "metainfo": ""}