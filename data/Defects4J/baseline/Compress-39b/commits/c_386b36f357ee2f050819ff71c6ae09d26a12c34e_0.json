{"sha": "386b36f357ee2f050819ff71c6ae09d26a12c34e", "log": "Review comments  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n public class ParallelScatterZipCreator {\n     private List<ScatterZipOutputStream> streams = Collections.synchronizedList(new ArrayList<ScatterZipOutputStream>());\n     private final ExecutorService es;\n+    private final ScatterGatherBackingStoreSupplier defaultSupplier;\n \n     private final long startedAt = System.currentTimeMillis();\n     private long compressionDoneAt = 0;\n     private long scatterDoneAt;\n \n-    static ScatterGatherBackingStoreSupplier defaultSupplier = new DefaultSupplier();\n-\n-    static class DefaultSupplier implements ScatterGatherBackingStoreSupplier {\n+    private static class DefaultSupplier implements ScatterGatherBackingStoreSupplier {\n         AtomicInteger storeNum = new AtomicInteger(0);\n \n         public ScatterGatherBackingStore get() throws IOException {\n     }\n \n \n-    ThreadLocal<ScatterZipOutputStream> tlScatterStreams = new ThreadLocal<ScatterZipOutputStream>() {\n+    private ThreadLocal<ScatterZipOutputStream> tlScatterStreams = new ThreadLocal<ScatterZipOutputStream>() {\n         @Override\n         protected ScatterZipOutputStream initialValue() {\n             try {\n      * @param nThreads the number of threads to use in parallel.\n      */\n     public ParallelScatterZipCreator(int nThreads) {\n+        defaultSupplier = new DefaultSupplier();\n         es = Executors.newFixedThreadPool(nThreads);\n     }\n ", "timestamp": 1420233789, "metainfo": ""}