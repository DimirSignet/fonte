{"sha": "f4044dd0d86684959764783583f24f2b8baf44b0", "log": "COMPRESS-212 use specified encoding when reading GNU long names in TarAIS  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n \n         if (currEntry.isGNULongNameEntry()) {\n             // read in the name\n-            StringBuffer longName = new StringBuffer();\n+            ByteArrayOutputStream longName = new ByteArrayOutputStream();\n             byte[] buf = new byte[SMALL_BUFFER_SIZE];\n             int length = 0;\n             while ((length = read(buf)) >= 0) {\n-                longName.append(new String(buf, 0, length)); // TODO default charset?\n+                longName.write(buf, 0, length);\n             }\n             getNextEntry();\n             if (currEntry == null) {\n                 // Malformed tar file - long entry name not followed by entry\n                 return null;\n             }\n-            // remove trailing null terminator\n-            if (longName.length() > 0\n-                && longName.charAt(longName.length() - 1) == 0) {\n-                longName.deleteCharAt(longName.length() - 1);\n-            }\n-            currEntry.setName(longName.toString());\n+            byte[] longNameData = longName.toByteArray();\n+            // remove trailing null terminator(s)\n+            length = longNameData.length;\n+            while (length > 0 && longNameData[length - 1] == 0) {\n+                --length;\n+            }\n+            if (length != longNameData.length) {\n+                byte[] l = new byte[length];\n+                System.arraycopy(longNameData, 0, l, 0, length);\n+                longNameData = l;\n+            }\n+            \n+            currEntry.setName(encoding.decode(longNameData));\n         }\n \n         if (currEntry.isPaxHeader()){ // Process Pax headers\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n import static org.junit.Assert.fail;\n \n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n         }\n     }\n \n+    @Test\n+    public void shouldUseSpecifiedEncodingWhenReadingGNULongNames()\n+        throws Exception {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        String encoding = CharsetNames.UTF_16;\n+        String name = \"1234567890123456789012345678901234567890123456789\"\n+            + \"01234567890123456789012345678901234567890123456789\"\n+            + \"01234567890\\u00e4\";\n+        TarArchiveOutputStream tos =\n+            new TarArchiveOutputStream(bos, encoding);\n+        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n+        TarArchiveEntry t = new TarArchiveEntry(name);\n+        t.setSize(1);\n+        tos.putArchiveEntry(t);\n+        tos.write(30);\n+        tos.closeArchiveEntry();\n+        tos.close();\n+        byte[] data = bos.toByteArray();\n+        ByteArrayInputStream bis = new ByteArrayInputStream(data);\n+        TarArchiveInputStream tis =\n+            new TarArchiveInputStream(bis, encoding);\n+        t = tis.getNextTarEntry();\n+        assertEquals(name, t.getName());\n+    }\n+\n     private TarArchiveInputStream getTestStream(String name) {\n         return new TarArchiveInputStream(\n                 TarArchiveInputStreamTest.class.getResourceAsStream(name));", "timestamp": 1357315178, "metainfo": ""}