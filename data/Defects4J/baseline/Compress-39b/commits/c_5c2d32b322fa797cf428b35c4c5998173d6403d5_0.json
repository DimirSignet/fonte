{"sha": "5c2d32b322fa797cf428b35c4c5998173d6403d5", "log": "COMPRESS-252 off-by-one error writing bitsets that leads to corrupt 7z headers  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n         int shift = 7;\n         for (int i = 0; i < length; i++) {\n             cache |= ((bits.get(i) ? 1 : 0) << shift);\n-            --shift;\n-            if (shift == 0) {\n+            if (--shift < 0) {\n                 header.write(cache);\n                 shift = 7;\n                 cache = 0;\n             }\n         }\n-        if (length > 0 && shift > 0) {\n+        if (shift != 7) {\n             header.write(cache);\n         }\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n         }\n     }\n \n+    public void testSixEmptyFiles() throws Exception {\n+        testCompress252(6, 0);\n+    }\n+\n+    public void testSixFilesSomeNotEmpty() throws Exception {\n+        testCompress252(6, 2);\n+    }\n+\n+    public void testSevenEmptyFiles() throws Exception {\n+        testCompress252(7, 0);\n+    }\n+\n+    public void testSevenFilesSomeNotEmpty() throws Exception {\n+        testCompress252(7, 2);\n+    }\n+\n+    public void testEightEmptyFiles() throws Exception {\n+        testCompress252(8, 0);\n+    }\n+\n+    public void testEightFilesSomeNotEmpty() throws Exception {\n+        testCompress252(8, 2);\n+    }\n+\n+    public void testNineEmptyFiles() throws Exception {\n+        testCompress252(9, 0);\n+    }\n+\n+    public void testNineFilesSomeNotEmpty() throws Exception {\n+        testCompress252(9, 2);\n+    }\n+\n+    private void testCompress252(int numberOfFiles, int numberOfNonEmptyFiles)\n+        throws Exception {\n+        int nonEmptyModulus = numberOfNonEmptyFiles != 0\n+            ? numberOfFiles / numberOfNonEmptyFiles\n+            : numberOfFiles + 1;\n+        output = new File(dir, \"COMPRESS252-\" + numberOfFiles + \"-\" + numberOfNonEmptyFiles + \".7z\");\n+        SevenZOutputFile archive = new SevenZOutputFile(output);\n+        try {\n+            addDir(archive);\n+            for (int i = 0; i < numberOfFiles; i++) {\n+                addFile(archive, i, (i + 1) % nonEmptyModulus == 0);\n+            }\n+        } finally {\n+            archive.close();\n+        }\n+        verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n+    }\n+\n+    private void verifyCompress252(File output, int numberOfFiles, int numberOfNonEmptyFiles)\n+        throws Exception {\n+        SevenZFile archive = new SevenZFile(output);\n+        int filesFound = 0;\n+        int nonEmptyFilesFound = 0;\n+        try {\n+            verifyDir(archive);\n+            Boolean b = verifyFile(archive, filesFound++);\n+            while (b != null) {\n+                if (Boolean.TRUE.equals(b)) {\n+                    nonEmptyFilesFound++;\n+                }\n+                b = verifyFile(archive, filesFound++);\n+            }\n+        } finally {\n+            archive.close();\n+        }\n+        assertEquals(numberOfFiles + 1, filesFound);\n+        assertEquals(numberOfNonEmptyFiles, nonEmptyFilesFound);\n+    }\n+\n+    private void addDir(SevenZOutputFile archive) throws Exception {\n+        SevenZArchiveEntry entry = archive.createArchiveEntry(dir, \"foo/\");\n+        archive.putArchiveEntry(entry);\n+        archive.closeArchiveEntry();\n+    }\n+\n+    private void verifyDir(SevenZFile archive) throws Exception {\n+        SevenZArchiveEntry entry = archive.getNextEntry();\n+        assertNotNull(entry);\n+        assertEquals(\"foo/\", entry.getName());\n+        assertTrue(entry.isDirectory());\n+    }\n+\n+    private void addFile(SevenZOutputFile archive, int index, boolean nonEmpty)\n+        throws Exception {\n+        SevenZArchiveEntry entry = new SevenZArchiveEntry();\n+        entry.setName(\"foo/\" + index + \".txt\");\n+        archive.putArchiveEntry(entry);\n+        archive.write(nonEmpty ? new byte[] { 17 } : new byte[0]);\n+        archive.closeArchiveEntry();\n+    }\n+\n+    private Boolean verifyFile(SevenZFile archive, int index) throws Exception {\n+        SevenZArchiveEntry entry = archive.getNextEntry();\n+        if (entry == null) {\n+            return null;\n+        }\n+        assertEquals(\"foo/\" + index + \".txt\", entry.getName());\n+        assertEquals(false, entry.isDirectory());\n+        if (entry.getSize() == 0) {\n+            return false;\n+        }\n+        assertEquals(1, entry.getSize());\n+        assertEquals(17, archive.read());\n+        assertEquals(-1, archive.read());\n+        return true;\n+    }\n+\n }", "timestamp": 1387541591, "metainfo": ""}