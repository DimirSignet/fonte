{"sha": "a8a9e645e7c5ac3d5354580b9eb22df67acba520", "log": "removed author tags in favor of NOTICE file, split up testcases, nitpicking    ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveEntry.java\n  * Represents an entry of an archive.\n  */\n public interface ArchiveEntry {\n-\t/**\n-\t * Returns the name of this entry.\n-\t * @return the name of this entry\n-\t */\n+\n \tpublic String getName();\n \t\n \tpublic long getSize();\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n import java.io.InputStream;\n \n public abstract class ArchiveInputStream extends InputStream {\n-    /**\n+\n+\t/**\n      * Returns the next Archive Entry in this Stream.\n      * @return the next entry\n      * @throws IOException if the next entry could not be read\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n  * char devminor[8];\n  * } header;\n  * </pre>\n- *\n- * @author <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>\n- * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n- * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n- * @version $Revision$ $Date$\n- * @see TarInputStream\n- * @see TarArchiveOutputStream\n  */\n public class TarArchiveEntry implements ArchiveEntry {\n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n \n     private TarOutputStream out = null;\n     \n-    /**\n-     * @param out\n-     */\n     public TarArchiveOutputStream(OutputStream out) {\n         this.out = new TarOutputStream(out);\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java\n  *\n  * You should never have a need to access this class directly. TarBuffers are\n  * created by Tar IO Streams.\n- *\n- * @author <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>\n- * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n- * @version $Revision$ $Date$\n  */\n class TarBuffer\n {\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n \n /**\n  * This interface contains all the definitions used in the package.\n- *\n- * @author <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>\n- * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n- * @version $Revision$ $Date$\n  */\n interface TarConstants\n {\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarInputStream.java\n  * The TarInputStream reads a UNIX tar archive as an InputStream. methods are\n  * provided to position at each successive entry in the archive, and the read\n  * each entry as a normal input stream using read().\n- *\n- * @author <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>\n- * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n- * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n- * @version $Revision$ $Date$\n- * @see TarInputStream\n- * @see TarArchiveEntry\n  */\n public class TarInputStream\n     extends FilterInputStream\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarOutputStream.java\n  * The TarOutputStream writes a UNIX tar archive as an OutputStream. Methods are\n  * provided to put entries, and then write their contents by writing to this\n  * stream using write().\n- *\n- * @author Timothy Gerard Endres <a href=\"mailto:time@ice.com\">time@ice.com</a>\n- * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n- * @version $Revision$ $Date$\n- * @see TarInputStream\n- * @see TarArchiveEntry\n  */\n public class TarOutputStream\n     extends FilterOutputStream\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n \n /**\n  * This class provides static utility methods to work with byte streams.\n- *\n- * @author <a href=\"mailto:time@ice.com\">Timothy Gerard Endres</a>\n- * @author <a href=\"mailto:stefano@apache.org\">Stefano Mazzocchi</a>\n- * @version $Revision$ $Date$\n  */\n class TarUtils\n {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n  *\n  * Short is two bytes and Long is four bytes in big endian byte and word order,\n  * device numbers are currently not supported.</p>\n- *\n- * @author <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>\n- * @version $Revision$\n  */\n public class AsiExtraField\n     implements ZipExtraField, UnixStat, Cloneable\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n \n /**\n  * ZipExtraField related methods\n- *\n- * @author <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>\n- * @version $Revision$\n  */\n public class ExtraFieldUtils\n {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnixStat.java\n \n /**\n  * Constants from stat.h on Unix systems.\n- *\n- * @author <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>\n- * @version $Revision$\n  */\n public interface UnixStat\n {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnrecognizedExtraField.java\n  *\n  * Assumes local file data and central directory entries are identical - unless\n  * told the opposite.</p>\n- *\n- * @author <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>\n- * @version $Revision$\n  */\n public class UnrecognizedExtraField\n     implements ZipExtraField\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n /**\n  * Extension that adds better handling of extra fields and provides access to\n  * the internal and external file attributes.\n- *\n- * @author <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>\n- * @version $Revision$\n  */\n public class ZipArchiveEntry\n     extends java.util.zip.ZipEntry\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n public class ZipArchiveOutputStream extends ArchiveOutputStream {\n \n     private ZipOutputStream zipOut = null;\n-\n-    \n+ \n     public ZipArchiveOutputStream(OutputStream out) {\n         this.zipOut = new ZipOutputStream(out);\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java\n /**\n  * Extension that adds better handling of extra fields and provides access to\n  * the internal and external file attributes.\n- *\n- * @author <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>\n-<<<<<<< HEAD:src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java\n- * @version $Revision$\n-=======\n- * @version $Revision$\n->>>>>>> 75cb63ff7005344589b57d17338b64783f8f430c:src/main/java/org/apache/commons/compress/archivers/zip/ZipEntry.java\n  */\n public class ZipEntry\n     extends java.util.zip.ZipEntry\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java\n  * once in the central directory. Usually they are the same, but they don't have\n  * to be. {@link java.util.zip.ZipOutputStream java.util.zip.ZipOutputStream}\n  * will only use the local file data in both places.</p>\n- *\n- * @author <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>\n- * @version $Revision$\n  */\n public interface ZipExtraField\n {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java\n /**\n  * Utility class that represents a four byte integer with conversion rules for\n  * the big endian byte order of ZIP files.\n- *\n- * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n- * @version $Revision$\n  */\n public final class ZipLong implements Cloneable\n {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipOutputStream.java\n  * them yourself. Unfortunately this is not possible for the STORED method, here\n  * setting the CRC and uncompressed size information is required before {@link\n  * #putNextEntry putNextEntry} will be called.</p>\n- *\n- * @author <a href=\"stefan.bodewig@epost.de\">Stefan Bodewig</a>\n- * @version $Revision$\n  */\n public class ZipOutputStream\n     extends DeflaterOutputStream\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n /**\n  * Utility class that represents a two byte integer with conversion rules for\n  * the big endian byte order of ZIP files.\n- *\n- * @author <a href=\"mailto:stefan.bodewig@epost.de\">Stefan Bodewig</a>\n- * @version $Revision$\n  */\n public final class ZipShort implements Cloneable\n {\n--- a/src/main/java/org/apache/commons/compress/changes/Change.java\n+++ b/src/main/java/org/apache/commons/compress/changes/Change.java\n  */\n package org.apache.commons.compress.changes;\n \n-import org.apache.commons.compress.archivers.ArchiveInputStream;\n \n interface Change {\n \t// public void perform(ArchiveInputStream input);\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorOutputStream.java\n \n import java.io.OutputStream;\n \n-\n public abstract class CompressorOutputStream extends OutputStream {\n \t// TODO\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n \n import org.apache.commons.compress.compressors.CompressorInputStream;\n \n-/*\n- * This package is based on the work done by Keiron Liddle, Aftex Software\n- * <keiron@aftexsw.com> to whom the Ant project is very grateful for his great\n- * code. \n- */\n-\n /**\n  * An input stream that decompresses from the BZip2 format (without the file\n  * header chars) to be read as any other stream.\n- * \n- * @author <a href=\"mailto:keiron@aftexsw.com\">Keiron Liddle</a>\n  */\n public class BZip2CompressorInputStream extends CompressorInputStream implements BZip2Constants {\n \n         //throw new CCoruptionError();\n     }\n \n+    /*\n     private static void badBGLengths() {\n         cadvise();\n     }\n     private static void bitStreamEOF() {\n         cadvise();\n     }\n+    */\n \n     private static void compressedStreamEOF() {\n         cadvise();\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n \n import org.apache.commons.compress.compressors.CompressorOutputStream;\n \n-/*\n- * This package is based on the work done by Keiron Liddle, Aftex Software\n- * <keiron@aftexsw.com> to whom the Ant project is very grateful for his great\n- * code. \n- */\n /**\n  * An output stream that compresses into the BZip2 format (without the file\n  * header chars) into another stream. TODO: Update to BZip2 1.0.1\n- * \n- * @author <a href=\"mailto:keiron@aftexsw.com\">Keiron Liddle</a>\n  */\n public class BZip2CompressorOutputStream extends CompressorOutputStream implements BZip2Constants {\n \tprotected static final int SETMASK = (1 << 21);\n \n         int v, t, i, j, gs, ge, totc, bt, bc, iter;\n         int nSelectors = 0, alphaSize, minLen, maxLen, selCtr;\n-        int nGroups, nBytes;\n+        int nGroups;\n+        //int nBytes;\n \n         alphaSize = nInUse + 2;\n         for (t = 0; t < N_GROUPS; t++) {\n                 }\n             }\n \n-            nBytes = bytesOut;\n+            //nBytes = bytesOut;\n             for (i = 0; i < 16; i++) {\n                 if (inUse16[i]) {\n                     bsW(1, 1);\n         }\n \n         /* Now the selectors. */\n-        nBytes = bytesOut;\n+        //nBytes = bytesOut;\n         bsW (3, nGroups);\n         bsW (15, nSelectors);\n         for (i = 0; i < nSelectors; i++) {\n         }\n \n         /* Now the coding tables. */\n-        nBytes = bytesOut;\n+        //nBytes = bytesOut;\n \n         for (t = 0; t < nGroups; t++) {\n             int curr = len[t][0];\n         }\n \n         /* And finally, the block data proper */\n-        nBytes = bytesOut;\n+        //nBytes = bytesOut;\n         selCtr = 0;\n         gs = 0;\n         while (true) {\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Constants.java\n \n package org.apache.commons.compress.compressors.bzip2;\n \n-/*\n- * This package is based on the work done by Keiron Liddle, Aftex Software\n- * <keiron@aftexsw.com> to whom the Ant project is very grateful for his great\n- * code.\n- */\n-\n /**\n  * Base class for both the compress and decompress classes. Holds common arrays,\n  * and static data.\n- * \n- * @author <a href=\"mailto:keiron@aftexsw.com\">Keiron Liddle</a>\n  */\n interface BZip2Constants {\n \n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java\n  */\n package org.apache.commons.compress.compressors.bzip2;\n \n-/*\n- * This package is based on the work done by Keiron Liddle, Aftex Software\n- * <keiron@aftexsw.com> to whom the Ant project is very grateful for his great\n- * code.\n- */\n-\n /**\n  * A simple class the hold and calculate the CRC for sanity checking of the\n  * data.\n- * \n- * @author <a href=\"mailto:keiron@aftexsw.com\">Keiron Liddle</a>\n  */\n class CRC {\n \tprivate static int[] CRC32_TABLE = new int[] { 0x00000000, 0x04c11db7,\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+package org.apache.commons.compress;\n+\n+import java.io.File;\n+\n+import junit.framework.TestCase;\n+\n+public abstract class AbstractTestCase extends TestCase {\n+\n+\tprotected File dir;\n+\t\n+\tprotected void setUp() throws Exception {\n+\t\tdir = File.createTempFile(\"dir\", \"\");\n+\t\tdir.delete();\n+\t\tdir.mkdir();\n+\t}\n+\n+\tprotected void tearDown() throws Exception {\n+\t\tdir.delete();\n+\t\tdir = null;\n+\t}\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.compress.archivers.ArchiveInputStream;\n+import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n+import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n+import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n+\n+public final class DetectArchiverTestCase extends TestCase {\n+\tpublic void testDetection() throws Exception {\n+\t\tfinal ArchiveStreamFactory factory = new ArchiveStreamFactory();\n+\n+\t\tfinal ArchiveInputStream ar = factory.createArchiveInputStream(\n+\t\t\t\tnew BufferedInputStream(new FileInputStream(\n+\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); \n+\t\tassertTrue(ar instanceof ArArchiveInputStream);\n+\n+\t\tfinal ArchiveInputStream tar = factory.createArchiveInputStream(\n+\t\t\t\tnew BufferedInputStream(new FileInputStream(\n+\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.tar\").getFile()))));\n+\t\tassertTrue(tar instanceof TarArchiveInputStream);\n+\n+\t\tfinal ArchiveInputStream zip = factory.createArchiveInputStream(\n+\t\t\t\tnew BufferedInputStream(new FileInputStream(\n+\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.zip\").getFile()))));\n+\t\tassertTrue(zip instanceof ZipArchiveInputStream);\n+\n+\t\tfinal ArchiveInputStream jar = factory.createArchiveInputStream(\n+\t\t\t\tnew BufferedInputStream(new FileInputStream(\n+\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.jar\").getFile()))));\n+\t\tassertTrue(jar instanceof JarArchiveInputStream);\n+\n+//\t\tfinal ArchiveInputStream tgz = factory.createArchiveInputStream(\n+//\t\t\t\tnew BufferedInputStream(new FileInputStream(\n+//\t\t\t\t\t\tnew File(getClass().getClassLoader().getResource(\"bla.tgz\").getFile()))));\n+//\t\tassertTrue(tgz instanceof TarArchiveInputStream);\n+\t\t\n+\t}\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/DetectCompressorTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress;\n+\n+import junit.framework.TestCase;\n+\n+public final class DetectCompressorTestCase extends TestCase {\n+\tpublic void testDetection() throws Exception {\n+\t}\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+\n+public final class ArTestCase extends AbstractTestCase {\n+\tpublic void testArArchiveCreation() throws Exception {\n+\t\tfinal File output = new File(dir, \"bla.ar\");\n+\t\t\n+\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+\t\tfinal File file2 = new File(getClass().getClassLoader().getResource(\"test2.xml\").getFile());\n+\t\t\n+\t\tfinal OutputStream out = new FileOutputStream(output);\n+        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n+\t\tos.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n+\t\tIOUtils.copy(new FileInputStream(file1), os);\n+\t\tos.closeArchiveEntry();\n+\t\t\n+\t\tos.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n+\t\tIOUtils.copy(new FileInputStream(file2), os);\n+\t\tos.closeArchiveEntry();\n+\t\t\n+\t\tos.close();\n+\t}\n+\n+\tpublic void testArUnarchive() throws Exception {\n+\t\tfinal File output = new File(dir, \"bla.ar\");\n+\t\t{\n+\t\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+\t\t\tfinal File file2 = new File(getClass().getClassLoader().getResource(\"test2.xml\").getFile());\n+\t\t\t\n+\t\t\tfinal OutputStream out = new FileOutputStream(output);\n+\t        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"ar\", out);\n+\t\t\tos.putArchiveEntry(new ArArchiveEntry(\"test1.xml\", file1.length()));\n+\t\t\tIOUtils.copy(new FileInputStream(file1), os);\n+\t\t\tos.closeArchiveEntry();\n+\t\t\t\n+\t\t\tos.putArchiveEntry(new ArArchiveEntry(\"test2.xml\", file2.length()));\n+\t\t\tIOUtils.copy(new FileInputStream(file2), os);\n+\t\t\tos.closeArchiveEntry();\n+\t\t\tos.close();\n+\t\t}\n+\t\t\n+\t\t// UnArArchive Operation\n+\t\tfinal File input = output;\n+\t\tfinal InputStream is = new FileInputStream(input);\n+\t\tfinal ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"ar\", is);\n+\t\tfinal ArArchiveEntry entry = (ArArchiveEntry)in.getNextEntry();\n+\t\t\n+\t\tFile target = new File(dir, entry.getName());\n+        final OutputStream out = new FileOutputStream(target);\n+        \n+        IOUtils.copy(in, out);\n+    \n+        out.close();\n+        in.close();\n+\t}\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+\n+public final class JarTestCase extends AbstractTestCase {\n+\tpublic void testJarArchiveCreation() throws Exception {\n+\t\tfinal File output = new File(dir, \"bla.jar\");\n+\n+\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+\t\tfinal File file2 = new File(getClass().getClassLoader().getResource(\"test2.xml\").getFile());\n+\t\t\n+        final OutputStream out = new FileOutputStream(output);\n+        \n+        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", out);\n+\n+        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n+        IOUtils.copy(new FileInputStream(file1), os);\n+        os.closeArchiveEntry();\n+        \n+        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n+        IOUtils.copy(new FileInputStream(file2), os);\n+        os.closeArchiveEntry();\n+\n+        os.close();\n+    }\n+\n+\t\n+\tpublic void testJarUnarchive() throws Exception {\n+\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile());\n+        final InputStream is = new FileInputStream(input);\n+        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n+        \n+        ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n+        File o = new File(dir, entry.getName());\n+        o.getParentFile().mkdirs();\n+        OutputStream out = new FileOutputStream(o);\n+        IOUtils.copy(in, out);\n+        out.close();\n+        \n+        entry = (ZipArchiveEntry)in.getNextEntry();\n+        o = new File(dir, entry.getName());\n+        o.getParentFile().mkdirs();\n+        out = new FileOutputStream(o);\n+        IOUtils.copy(in, out);\n+        out.close();\n+        \n+        entry = (ZipArchiveEntry)in.getNextEntry();\n+        o = new File(dir, entry.getName());\n+        o.getParentFile().mkdirs();\n+        out = new FileOutputStream(o);\n+        IOUtils.copy(in, out);\n+        out.close();\n+        \n+        in.close();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+public final class TarTestCase extends AbstractTestCase {\n+    public void testTarArchiveCreation() throws Exception {\n+\n+\t\tfinal File output = new File(dir, \"bla.tar\");\n+\n+\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+\n+    \tfinal OutputStream out = new FileOutputStream(output);\n+        \n+        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out);\n+        \n+        final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test1.xml\");\n+        entry.setModTime(0);\n+        entry.setSize(file1.length());\n+        entry.setUserID(0);\n+        entry.setGroupID(0);\n+        entry.setUserName(\"avalon\");\n+        entry.setGroupName(\"excalibur\");\n+        entry.setMode(0100000);\n+        \n+        os.putArchiveEntry(entry);\n+        IOUtils.copy(new FileInputStream(file1), os);\n+\n+        os.closeArchiveEntry();\n+        os.close();\n+    }\n+    public void testTarUnarchive() throws Exception {\n+\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile());\n+\t\tfinal InputStream is = new FileInputStream(input);\n+        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n+        final TarArchiveEntry entry = (TarArchiveEntry)in.getNextEntry();\n+        final OutputStream out = new FileOutputStream(new File(dir, entry.getName()));\n+        IOUtils.copy(in, out);\n+        out.close();\n+        in.close();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+\n+public final class ZipTestCase extends AbstractTestCase {\n+\tpublic void testZipArchiveCreation() throws Exception {\n+\t\t\n+\t\tfinal File output = new File(dir, \"bla.zip\");\n+\t\t\n+\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+\t\tfinal File file2 = new File(getClass().getClassLoader().getResource(\"test2.xml\").getFile());\n+\t\t\n+        final OutputStream out = new FileOutputStream(output);\n+        \n+        final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", out);\n+\n+        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n+        IOUtils.copy(new FileInputStream(file1), os);\n+        os.closeArchiveEntry();\n+        \n+        os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n+        IOUtils.copy(new FileInputStream(file2), os);\n+        os.closeArchiveEntry();\n+        \n+        os.close();\n+    }\n+    public void testZipUnarchive() throws Exception {\n+\n+\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile());\n+    \t\n+        final InputStream is = new FileInputStream(input);\n+        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"zip\", is);\n+ \n+        final ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n+        final OutputStream out = new FileOutputStream(new File(dir, entry.getName()));\n+        \n+        IOUtils.copy(in, out);\n+    \n+        out.close();\n+        in.close();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+public final class BZip2TestCase extends AbstractTestCase {\n+\tpublic void testBzipCreation()  throws Exception {\n+\t\tfinal File output = new File(dir, \"bla.txt.bz2\");\n+\t\tSystem.out.println(dir);\n+\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test.txt\").getFile());\n+\t\tfinal OutputStream out = new FileOutputStream(output);\n+\t\tCompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n+\t\tIOUtils.copy(new FileInputStream(file1), cos);\n+\t\tcos.close();\n+\t}\n+\t\n+\tpublic void testBzip2Unarchive() throws Exception {\n+\t\tfinal File output = new File(dir, \"test-entpackt.txt\");\n+\t\tSystem.out.println(dir);\n+\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.txt.bz2\").getFile());\n+        final InputStream is = new FileInputStream(input);\n+        //final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is);\n+        final CompressorInputStream in = new BZip2CompressorInputStream(is);\n+        IOUtils.copy(in, new FileOutputStream(output));\n+\t\tin.close();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+public final class GZipTestCase extends AbstractTestCase {\n+\tpublic void testGzipCreation()  throws Exception {\n+\t\tfinal File output = new File(dir, \"bla.gz\");\n+\t\tfinal File file1 = new File(getClass().getClassLoader().getResource(\"test1.xml\").getFile());\n+\t\tfinal OutputStream out = new FileOutputStream(output);\n+\t\tCompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"gz\", out);\n+\t\tIOUtils.copy(new FileInputStream(file1), cos);\n+\t\tcos.close();\n+\t}\n+\t\n+\tpublic void testGzipUnarchive() throws Exception {\n+\t\tfinal File output = new File(dir, \"bla-entpackt.tar\");\n+\t\tfinal File input = new File(getClass().getClassLoader().getResource(\"bla.tgz\").getFile());\n+        final InputStream is = new FileInputStream(input);\n+        final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"gz\", is);\n+        IOUtils.copy(in, new FileOutputStream(output));\n+\t\tin.close();\n+    }\n+\n+}", "timestamp": 1216505924, "metainfo": ""}