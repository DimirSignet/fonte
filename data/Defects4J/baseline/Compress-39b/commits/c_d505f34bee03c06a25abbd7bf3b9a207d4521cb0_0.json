{"sha": "d505f34bee03c06a25abbd7bf3b9a207d4521cb0", "log": "deal with some potential int overflows  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n     // CRC32 from uncompressed data\n     private final CRC32 crc = new CRC32();\n \n-    private int memberSize;\n+    private long memberSize;\n \n     // True once everything has been decompressed\n     private boolean endReached = false;\n         return bos.toByteArray();\n     }\n \n-    private int readLittleEndianInt(DataInputStream inData) throws IOException {\n+    private long readLittleEndianInt(DataInputStream inData) throws IOException {\n         return inData.readUnsignedByte()\n             | (inData.readUnsignedByte() << 8)\n             | (inData.readUnsignedByte() << 16)\n-            | (inData.readUnsignedByte() << 24);\n+            | (((long) inData.readUnsignedByte()) << 24);\n     }\n \n     @Override\n                 DataInputStream inData = new DataInputStream(in);\n \n                 // CRC32\n-                long crcStored = 0;\n-                for (int i = 0; i < 4; ++i) {\n-                    crcStored |= (long)inData.readUnsignedByte() << (i * 8);\n-                }\n+                long crcStored = readLittleEndianInt(inData);\n \n                 if (crcStored != crc.getValue()) {\n                     throw new IOException(\"Gzip-compressed data is corrupt \"\n                 }\n \n                 // Uncompressed size modulo 2^32 (ISIZE in the spec)\n-                int isize = 0;\n-                for (int i = 0; i < 4; ++i) {\n-                    isize |= inData.readUnsignedByte() << (i * 8);\n-                }\n-\n-                if (isize != memberSize) {\n+                long isize = readLittleEndianInt(inData);\n+\n+                if (isize != (memberSize & 0xffffffffl)) {\n                     throw new IOException(\"Gzip-compressed data is corrupt\"\n                                           + \"(uncompressed size mismatch)\");\n                 }", "timestamp": 1408679678, "metainfo": ""}