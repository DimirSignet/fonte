{"sha": "1a90ed5e8713392507996df3bc20b2dfe32ab41e", "log": "Added a sample in the docs. Sample is also present in code form (test scope) with test case  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ScatterSample.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+\n+public class ScatterSample {\n+\n+    ParallelScatterZipCreator scatterZipCreator = new ParallelScatterZipCreator();\n+    ScatterZipOutputStream dirs = ScatterZipOutputStream.fileBased(File.createTempFile(\"scatter-dirs\", \"tmp\"));\n+\n+    public ScatterSample() throws IOException {\n+    }\n+\n+    public void addEntry(ZipArchiveEntry zipArchiveEntry, InputStreamSupplier streamSupplier) throws IOException {\n+        if (zipArchiveEntry.isDirectory() && !zipArchiveEntry.isUnixSymlink())\n+            dirs.addArchiveEntry(ZipArchiveEntryRequest.createZipArchiveEntryRequest(zipArchiveEntry, streamSupplier));\n+        else\n+            scatterZipCreator.addArchiveEntry( zipArchiveEntry, streamSupplier);\n+    }\n+\n+    public void writeTo(ZipArchiveOutputStream zipArchiveOutputStream)\n+            throws IOException, ExecutionException, InterruptedException {\n+        dirs.writeTo(zipArchiveOutputStream);\n+        dirs.close();\n+        scatterZipCreator.writeTo(zipArchiveOutputStream);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.zip;\n+\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.ExecutionException;\n+import java.util.zip.ZipEntry;\n+\n+import static org.junit.Assert.*;\n+\n+public class ScatterSampleTest {\n+\n+    @Test\n+    public void testSample() throws Exception {\n+        File result = File.createTempFile(\"testSample\", \"fe\");\n+\n+        createFile(result);\n+        checkFile(result);\n+    }\n+\n+    private void createFile(File result) throws IOException, ExecutionException, InterruptedException {\n+        ScatterSample scatterSample = new ScatterSample();\n+        ZipArchiveEntry archiveEntry = new ZipArchiveEntry(\"test1.xml\");\n+        archiveEntry.setMethod(ZipEntry.DEFLATED);\n+        InputStreamSupplier supp = new InputStreamSupplier() {\n+            public InputStream get() {\n+                return new ByteArrayInputStream(\"Hello\".getBytes());\n+            }\n+        };\n+\n+        scatterSample.addEntry(archiveEntry, supp);\n+        ZipArchiveOutputStream zipArchiveOutputStream = new ZipArchiveOutputStream(result);\n+        scatterSample.writeTo(zipArchiveOutputStream);\n+        zipArchiveOutputStream.close();\n+    }\n+\n+    private void checkFile(File result) throws IOException {\n+        ZipFile zf = new ZipFile(result);\n+        ZipArchiveEntry archiveEntry1 = zf.getEntries().nextElement();\n+        assertEquals( \"test1.xml\", archiveEntry1.getName());\n+        InputStream inputStream = zf.getInputStream(archiveEntry1);\n+        byte[] b = new byte[6];\n+        int i = IOUtils.readFully(inputStream, b);\n+        assertEquals(5, i);\n+        assertEquals('H', b[0]);\n+        assertEquals('o', b[4]);\n+        zf.close();\n+        result.delete();\n+    }\n+}", "timestamp": 1422047012, "metainfo": ""}