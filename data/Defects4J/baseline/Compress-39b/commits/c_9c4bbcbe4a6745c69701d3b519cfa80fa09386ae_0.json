{"sha": "9c4bbcbe4a6745c69701d3b519cfa80fa09386ae", "log": "a bit more typesafety by using a custom class rather than Map.Entry - more incremental changes to follow  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n     private LZMA2Options getOptions(Object opts) throws IOException {\n         if (opts instanceof LZMA2Options) {\n             return (LZMA2Options) opts;\n-        } else if (opts != null) {\n-            throw new IllegalArgumentException(\"LZMA2 method only supports LZMA2Options objects as option\");\n         }\n         LZMA2Options options = new LZMA2Options();\n         options.setDictSize(LZMA2Options.DICT_SIZE_DEFAULT);\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n     /** LZMA - only supported when reading */\n     LZMA(new byte[] { (byte)0x03, (byte)0x01, (byte)0x01 }),\n     /** LZMA2 */\n-    LZMA2(new byte[] { (byte)0x21 }) {\n+    LZMA2(new byte[] { (byte)0x21 }, LZMA2Options.class) {\n         @Override\n         byte[] getProperties(Object opts) {\n             int dictSize = getDictSize(opts);\n                 (byte) ((19 - lead) * 2 + secondBit)\n             };\n         }\n-        int getDictSize(Object opts) {\n+        private int getDictSize(Object opts) {\n             if (opts instanceof LZMA2Options) {\n                 return ((LZMA2Options) opts).getDictSize();\n-            } else if (opts != null) {\n-                throw new IllegalArgumentException(\"LZMA2 method only supports LZMA2Options objects as option\");\n             }\n             return LZMA2Options.DICT_SIZE_DEFAULT;\n         }\n     AES256SHA256(new byte[] { (byte)0x06, (byte)0xf1, (byte)0x07, (byte)0x01 });\n \n     private final byte[] id;\n+    private final Class<?>[] acceptableOptions;\n \n-    private SevenZMethod(byte[] id) {\n+    private SevenZMethod(byte[] id, Class<?>... acceptableOptions) {\n         this.id = id;\n+        this.acceptableOptions = acceptableOptions;\n     }\n \n     byte[] getId() {\n         return new byte[0];\n     }\n \n+    /**\n+     * @return whether this method can extract options from the given object.\n+     */\n+    boolean canAcceptOptions(Object opts) {\n+        for (Class<?> c : acceptableOptions) {\n+            if (c.isInstance(opts)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.sevenz;\n+\n+/**\n+ * Combines a SevenZMethod with configuration options for the method.\n+ * @Immutable\n+ * @since 1.8\n+ */\n+public class SevenZMethodConfiguration {\n+    private final SevenZMethod method;\n+    private final Object options;\n+\n+    /**\n+     * Doesn't configure any additional options.\n+     * @param method the method to use\n+     */\n+    public SevenZMethodConfiguration(SevenZMethod method) {\n+        this(method, null);\n+    }\n+\n+    /**\n+     * Specifies and method plus configuration options.\n+     * @param method the method to use\n+     * @param options the options to use\n+     * @throws IllegalArgumentException if the method doesn't understand the options specified.\n+     */\n+    public SevenZMethodConfiguration(SevenZMethod method, Object options) {\n+        this.method = method;\n+        this.options = options;\n+        if (options != null && !method.canAcceptOptions(options)) {\n+            throw new IllegalArgumentException(\"The \" + method + \" method doesn't support options of type \"\n+                                               + options.getClass());\n+        }\n+    }\n+\n+    /**\n+     * The specified method.\n+     */\n+    public SevenZMethod getMethod() {\n+        return method;\n+    }\n+\n+    /**\n+     * The specified options.\n+     */\n+    public Object getOptions() {\n+        return options;\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n import java.util.Date;\n import java.util.List;\n import java.util.LinkedList;\n-import java.util.Map.Entry;\n import java.util.zip.CRC32;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n     private long fileBytesWritten = 0;\n     private boolean finished = false;\n     private CountingOutputStream currentOutputStream;\n-    private Iterable<? extends Entry<SevenZMethod, ?>> contentMethods =\n-            Collections.singletonList(new FakeEntry(SevenZMethod.LZMA2));\n+    private Iterable<? extends SevenZMethodConfiguration> contentMethods =\n+            Collections.singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2));\n     \n     /**\n      * Opens file to write a 7z archive to.\n      * to {@link #setContentMethods}.</p>\n      */\n     public void setContentCompression(SevenZMethod method) {\n-        setContentMethods(Collections.singletonList(new FakeEntry(method)));\n+        setContentMethods(Collections.singletonList(new SevenZMethodConfiguration(method)));\n     }\n \n     /**\n      *\n      * @since 1.8\n      */\n-    public void setContentMethods(Iterable<? extends Entry<SevenZMethod, ?>> methods) {\n+    public void setContentMethods(Iterable<? extends SevenZMethodConfiguration> methods) {\n         this.contentMethods = methods;\n     }\n \n \n     private CountingOutputStream setupFileOutputStream() throws IOException {\n         OutputStream out = new OutputStreamWrapper();\n-        for (Entry<SevenZMethod, ?> m : reverse(contentMethods)) {\n-            out = Coders.addEncoder(out, m.getKey(), m.getValue());\n+        for (SevenZMethodConfiguration m : reverse(contentMethods)) {\n+            out = Coders.addEncoder(out, m.getMethod(), m.getOptions());\n         }\n         return new CountingOutputStream(out) {\n             @Override\n     }\n \n     private static <T> Iterable<T> reverse(Iterable<T> i) {\n-        LinkedList<T> l = new LinkedList();\n+        LinkedList<T> l = new LinkedList<T>();\n         for (T t : i) {\n             l.addFirst(t);\n         }\n     private void writeFolder(final DataOutput header) throws IOException {\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         int numCoders = 0;\n-        for (Entry<SevenZMethod, ?> m : contentMethods) {\n+        for (SevenZMethodConfiguration m : contentMethods) {\n             numCoders++;\n             writeSingleCodec(m, bos);\n         }\n         header.write(bos.toByteArray());\n     }\n \n-    private void writeSingleCodec(Entry<SevenZMethod, ?> m, OutputStream bos) throws IOException {\n-        byte[] id = m.getKey().getId();\n-        byte[] properties = m.getKey().getProperties(m.getValue());\n+    private void writeSingleCodec(SevenZMethodConfiguration m, OutputStream bos) throws IOException {\n+        byte[] id = m.getMethod().getId();\n+        byte[] properties = m.getMethod().getProperties(m.getOptions());\n \n         int codecFlags = id.length;\n         if (properties.length > 0) {\n             // the file will be closed by the containing class's close method\n         }\n     }\n-\n-    private static class FakeEntry implements Entry<SevenZMethod, Object> {\n-        private final SevenZMethod m;\n-        FakeEntry(SevenZMethod m) {\n-            this.m = m;\n-        }\n-        public SevenZMethod getKey() {\n-            return m;\n-        }\n-        public Object getValue() {\n-            return null;\n-        }\n-        public Object setValue(Object o) {\n-            return null;\n-        }\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.sevenz;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.tukaani.xz.LZMA2Options;\n+\n+public class SevenZMethodConfigurationTest {\n+\n+    @Test\n+    public void shouldAllowNullOptions() {\n+        Assert.assertNull(new SevenZMethodConfiguration(SevenZMethod.LZMA2, null)\n+                          .getOptions());\n+    }\n+\n+    @Test\n+    public void shouldAllowLZMA2OptionsForLZMA2() {\n+        Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.LZMA2,\n+                                                           new LZMA2Options())\n+                             .getOptions());\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void shouldNotAllowStringOptionsForLZMA2() {\n+        new SevenZMethodConfiguration(SevenZMethod.LZMA2, \"\");\n+    }\n+\n+}", "timestamp": 1393239419, "metainfo": ""}