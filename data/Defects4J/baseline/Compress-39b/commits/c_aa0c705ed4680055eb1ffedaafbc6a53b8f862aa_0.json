{"sha": "aa0c705ed4680055eb1ffedaafbc6a53b8f862aa", "log": "COMPRESS-276 verify there is a current archive entry before reading from or writing to the stream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n     \n     @Override\n     public int read(final byte[] b, final int off, final int len) throws IOException {\n+        if (currentLocalFileHeader == null) {\n+            throw new IllegalStateException(\"No current arj entry\");\n+        }\n         if (currentLocalFileHeader.method != LocalFileHeader.Methods.STORED) {\n             throw new IOException(\"Unsupported compression method \" + currentLocalFileHeader.method);\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n             return -1;\n         }\n \n+        if (active == null) {\n+            throw new IllegalStateException(\"No current dump entry\");\n+        }\n+\n         if (len + entryOffset > entrySize) {\n             len = (int) (entrySize - entryOffset);\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n      *             if an I/O error has occurred\n      */\n     public int read() throws IOException {\n+        if (currentEntryInputStream == null) {\n+            throw new IllegalStateException(\"No current 7z entry\");\n+        }\n         return currentEntryInputStream.read();\n     }\n     \n      *             if an I/O error has occurred\n      */\n     public int read(byte[] b, int off, int len) throws IOException {\n+        if (currentEntryInputStream == null) {\n+            throw new IllegalStateException(\"No current 7z entry\");\n+        }\n         return currentEntryInputStream.read(b, off, len);\n     }\n     \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n         compressedCrc32.reset();\n         fileBytesWritten = 0;\n     }\n-    \n+\n     /**\n      * Writes a byte to the current archive entry.\n      * @param b The byte to be written.\n     }\n \n     private CountingOutputStream setupFileOutputStream() throws IOException {\n+        if (files.isEmpty()) {\n+            throw new IllegalStateException(\"No current 7z entry\");\n+        }\n+\n         OutputStream out = new OutputStreamWrapper();\n         ArrayList<CountingOutputStream> moreStreams = new ArrayList<CountingOutputStream>();\n         boolean first = true;\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n             return -1;\n         }\n \n+        if (currEntry == null) {\n+            throw new IllegalStateException(\"No current tar entry\");\n+        }\n+\n         numToRead = Math.min(numToRead, available());\n         \n         totalRead = is.read(buf, offset, numToRead);\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n      */\n     @Override\n     public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException {\n-        if(finished) {\n+        if (finished) {\n             throw new IOException(\"Stream has already been finished\");\n         }\n         TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n      */\n     @Override\n     public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException {\n+        if (!haveUnclosedEntry) {\n+            throw new IllegalStateException(\"No current tar entry\");\n+        }\n         if (currBytes + numToWrite > currSize) {\n             throw new IOException(\"request to write '\" + numToWrite\n                                   + \"' bytes exceeds size in header of '\"\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      */\n     @Override\n     public void write(byte[] b, int offset, int length) throws IOException {\n+        if (entry == null) {\n+            throw new IllegalStateException(\"No current entry\");\n+        }\n         ZipUtil.checkRequestedFeatures(entry.entry);\n         entry.hasWritten = true;\n         if (entry.entry.getMethod() == DEFLATED) {", "timestamp": 1397377967, "metainfo": ""}