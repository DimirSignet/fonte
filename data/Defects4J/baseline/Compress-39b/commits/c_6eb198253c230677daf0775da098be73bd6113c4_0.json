{"sha": "6eb198253c230677daf0775da098be73bd6113c4", "log": "print a warning if finalize closes the archive  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n     private final ZipEncoding zipEncoding;\n \n     /**\n+     * File name of actual source.\n+     */\n+    private final String archiveName;\n+\n+    /**\n      * The actual data source.\n      */\n     private final RandomAccessFile archive;\n      */\n     public ZipFile(File f, String encoding, boolean useUnicodeExtraFields)\n         throws IOException {\n+        this.archiveName = f.getAbsolutePath();\n         this.encoding = encoding;\n         this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);\n         this.useUnicodeExtraFields = useUnicodeExtraFields;\n      * @throws IOException if an error occurs closing the archive.\n      */\n     public void close() throws IOException {\n+        // this flag is only written here and read in finalize() which\n+        // can never be run in parallel.\n+        // no synchronization needed.\n         closed = true;\n+\n         archive.close();\n     }\n \n      */\n     protected void finalize() throws Throwable {\n         try {\n-            close();\n+            if (!closed) {\n+                System.err.println(\"Cleaning up unclosed ZipFile for archive \"\n+                                   + archiveName);\n+                close();\n+            }\n         } finally {\n             super.finalize();\n         }", "timestamp": 1303191304, "metainfo": ""}