{"sha": "593339ab62ce5db71fd42501a9ddea9fe698b9ca", "log": "Replace old school @exception with new school @throws.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n      * @param n\n      *            the number of bytes to be skipped.\n      * @return the actual number of bytes skipped.\n-     * @exception IOException\n+     * @throws IOException\n      *                if some other I/O error occurs.\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n      * {@link UnrecognizedExtraField UnrecognizedExtraField}.\n      * @param headerId the header identifier\n      * @return an instance of the appropriate ExtraField\n-     * @exception InstantiationException if unable to instantiate the class\n-     * @exception IllegalAccessException if not allowed to instantiate the class\n+     * @throws InstantiationException if unable to instantiate the class\n+     * @throws IllegalAccessException if not allowed to instantiate the class\n      */\n     public static ZipExtraField createExtraField(final ZipShort headerId)\n         throws InstantiationException, IllegalAccessException {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n     /**\n      * Sets the uncompressed size of the entry data.\n      * @param size the uncompressed size in bytes\n-     * @exception IllegalArgumentException if the specified size is less\n+     * @throws IllegalArgumentException if the specified size is less\n      *            than 0\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      * Closes this output stream and releases any system resources\n      * associated with the stream.\n      *\n-     * @exception  IOException  if an I/O error occurs.\n+     * @throws  IOException  if an I/O error occurs.\n      * @throws Zip64RequiredException if the archive's size exceeds 4\n      * GByte or there are more than 65535 entries inside the archive\n      * and {@link #setUseZip64} is {@link Zip64Mode#Never}.\n      * Flushes this output stream and forces any buffered output bytes\n      * to be written out to the stream.\n      *\n-     * @exception  IOException  if an I/O error occurs.\n+     * @throws  IOException  if an I/O error occurs.\n      */\n     @Override\n     public void flush() throws IOException {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java\n      * @param buffer the buffer to read data from\n      * @param offset offset into buffer to read data\n      * @param length the length of data\n-     * @exception ZipException on error\n+     * @throws ZipException on error\n      */\n     void parseFromLocalFileData(byte[] buffer, int offset, int length)\n         throws ZipException;\n      * @param buffer the buffer to read data from\n      * @param offset offset into buffer to read data\n      * @param length the length of data\n-     * @exception ZipException on error\n+     * @throws ZipException on error\n      */\n     void parseFromCentralDirectoryData(byte[] buffer, int offset, int length)\n         throws ZipException;", "timestamp": 1465260058, "metainfo": ""}