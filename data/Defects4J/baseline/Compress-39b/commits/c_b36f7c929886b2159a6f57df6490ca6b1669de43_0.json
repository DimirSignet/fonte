{"sha": "b36f7c929886b2159a6f57df6490ca6b1669de43", "log": "unused code", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n         long unsignedSum = 0;\n         long signedSum = 0;\n \n-        int digits = 0;\n         for (int i = 0; i < header.length; i++) {\n             byte b = header[i];\n             if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java\n         this.ivData = new byte[ivSize];\n         System.arraycopy(data, offset + 4, this.ivData, 0, ivSize);\n \n-        long size = ZipLong.getValue(data, offset + ivSize + 2);\n         this.format = ZipShort.getValue(data, offset + ivSize + 6);\n         this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + ivSize + 8));\n         this.bitlen = ZipShort.getValue(data, offset + ivSize + 10);\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n \n     /** indicates if this archive is finished. protected for use in Jar implementation */\n     protected boolean finished = false;\n-\n-    /* \n-     * Apparently Deflater.setInput gets slowed down a lot on Sun JVMs\n-     * when it gets handed a really big buffer.  See\n-     * https://issues.apache.org/bugzilla/show_bug.cgi?id=45396\n-     *\n-     * Using a buffer size of 8 kB proved to be a good compromise\n-     */\n-    private static final int DEFLATER_BLOCK_SIZE = 8192;\n \n     /**\n      * Compression method for deflated entries.", "timestamp": 1458917938, "metainfo": ""}