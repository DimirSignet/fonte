{"sha": "b75dc0db46b40822b4e2ffed3bbb748963180131", "log": "move lookup method for SevenZMethod by byte sequence  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n         }\n         return null;\n     }\n-    static SevenZMethod findBySignature(byte[] sig) {\n-        for (final CoderId coderId : coderTable) {\n-            if (Arrays.equals(coderId.method.getId(), sig)) {\n-                return coderId.method;\n-            }\n-        }\n-        return null;\n-    }\n \n     static InputStream addDecoder(final InputStream is,\n             final Coder coder, final byte[] password) throws IOException {\n-        for (final CoderId coderId : coderTable) {\n-            if (Arrays.equals(coderId.method.getId(), coder.decompressionMethodId)) {\n-                return coderId.coder.decode(is, coder, password);\n-            }\n-        }\n-        throw new IOException(\"Unsupported compression method \" +\n-                Arrays.toString(coder.decompressionMethodId));\n+        CoderBase cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));\n+        if (cb == null) {\n+            throw new IOException(\"Unsupported compression method \" +\n+                                  Arrays.toString(coder.decompressionMethodId));\n+        }\n+        return cb.decode(is, coder, password);\n     }\n     \n     static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n             if (coder.numInStreams != 1 || coder.numOutStreams != 1) {\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }\n-            SevenZMethod method = Coders.findBySignature(coder.decompressionMethodId);\n+            SevenZMethod method = SevenZMethod.byId(coder.decompressionMethodId);\n             methods.addFirst(new SevenZMethodConfiguration(method));\n             inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n  *\n  */\n package org.apache.commons.compress.archivers.sevenz;\n+\n+import java.util.Arrays;\n \n /**\n  * The (partially) supported compression/encryption methods used in 7z archives.\n         return copy;\n     }\n \n+    static SevenZMethod byId(byte[] id) {\n+        for (SevenZMethod m : SevenZMethod.class.getEnumConstants()) {\n+            if (Arrays.equals(m.id, id)) {\n+                return m;\n+            }\n+        }\n+        return null;\n+    }\n }", "timestamp": 1393422381, "metainfo": ""}