{"sha": "8aeba821862851375f38ba563ce3629624bceab1", "log": "change some class names in the pack200 package.  COMPRESS-142  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/InMemoryCachingStreamBridge.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.commons.compress.compressors.pack200;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * StreamSwitcher that caches all data written to the output side in\n+ * memory.\n+ * @since Apache Commons Compress 1.3\n+ */\n+class InMemoryCachingStreamBridge extends StreamBridge {\n+    InMemoryCachingStreamBridge() {\n+        super(new ByteArrayOutputStream());\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    InputStream getInputView() throws IOException {\n+        return new ByteArrayInputStream(((ByteArrayOutputStream) out)\n+                                        .toByteArray());\n+    }\n+}\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java\n  */\n public class Pack200CompressorInputStream extends CompressorInputStream {\n     private final InputStream originalInput;\n-    private final StreamSwitcher streamSwitcher;\n+    private final StreamBridge streamBridge;\n \n     /**\n      * Decompresses the given stream, caching the decompressed data in\n      */\n     public Pack200CompressorInputStream(final InputStream in)\n         throws IOException {\n-        this(in, StreamMode.IN_MEMORY);\n+        this(in, Pack200Strategy.IN_MEMORY);\n     }\n \n     /**\n      * provide better performance.</p>\n      */\n     public Pack200CompressorInputStream(final InputStream in,\n-                                        final StreamMode mode)\n+                                        final Pack200Strategy mode)\n         throws IOException {\n         this(in, null, mode, null);\n     }\n     public Pack200CompressorInputStream(final InputStream in,\n                                         final Map<String, String> props)\n         throws IOException {\n-        this(in, StreamMode.IN_MEMORY, props);\n+        this(in, Pack200Strategy.IN_MEMORY, props);\n     }\n \n     /**\n      * provide better performance.</p>\n      */\n     public Pack200CompressorInputStream(final InputStream in,\n-                                        final StreamMode mode,\n+                                        final Pack200Strategy mode,\n                                         final Map<String, String> props)\n         throws IOException {\n         this(in, null, mode, props);\n      * memory.\n      */\n     public Pack200CompressorInputStream(final File f) throws IOException {\n-        this(f, StreamMode.IN_MEMORY);\n+        this(f, Pack200Strategy.IN_MEMORY);\n     }\n \n     /**\n      * Decompresses the given file using the given strategy to cache\n      * the results.\n      */\n-    public Pack200CompressorInputStream(final File f, final StreamMode mode)\n+    public Pack200CompressorInputStream(final File f, final Pack200Strategy mode)\n         throws IOException {\n         this(null, f, mode, null);\n     }\n     public Pack200CompressorInputStream(final File f,\n                                         final Map<String, String> props)\n         throws IOException {\n-        this(f, StreamMode.IN_MEMORY, props);\n+        this(f, Pack200Strategy.IN_MEMORY, props);\n     }\n \n     /**\n      * Decompresses the given file using the given strategy to cache\n      * the results and the given properties.\n      */\n-    public Pack200CompressorInputStream(final File f, final StreamMode mode,\n+    public Pack200CompressorInputStream(final File f, final Pack200Strategy mode,\n                                         final Map<String, String> props)\n         throws IOException {\n         this(null, f, mode, props);\n     }\n \n     private Pack200CompressorInputStream(final InputStream in, final File f,\n-                                         final StreamMode mode,\n+                                         final Pack200Strategy mode,\n                                          final Map<String, String> props)\n         throws IOException {\n         originalInput = in;\n-        streamSwitcher = mode.newStreamSwitcher();\n-        JarOutputStream jarOut = new JarOutputStream(streamSwitcher);\n+        streamBridge = mode.newStreamBridge();\n+        JarOutputStream jarOut = new JarOutputStream(streamBridge);\n         Pack200.Unpacker u = Pack200.newUnpacker();\n         if (props != null) {\n             u.properties().putAll(props);\n     /** {@inheritDoc} */\n     @Override\n     public int read() throws IOException {\n-        return streamSwitcher.getInput().read();\n+        return streamBridge.getInput().read();\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public int read(byte[] b) throws IOException {\n-        return streamSwitcher.getInput().read(b);\n+        return streamBridge.getInput().read(b);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public int read(byte[] b, int off, int count) throws IOException {\n-        return streamSwitcher.getInput().read(b, off, count);\n+        return streamBridge.getInput().read(b, off, count);\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public int available() throws IOException {\n-        return streamSwitcher.getInput().available();\n+        return streamBridge.getInput().available();\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public boolean markSupported() {\n         try {\n-            return streamSwitcher.getInput().markSupported();\n+            return streamBridge.getInput().markSupported();\n         } catch (IOException ex) {\n             return false;\n         }\n     @Override\n     public void mark(int limit) {\n         try {\n-            streamSwitcher.getInput().mark(limit);\n+            streamBridge.getInput().mark(limit);\n         } catch (IOException ex) {\n             throw new RuntimeException(ex);\n         }\n     /** {@inheritDoc} */\n     @Override\n     public void reset() throws IOException {\n-        streamSwitcher.getInput().reset();\n+        streamBridge.getInput().reset();\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public long skip(long count) throws IOException {\n-        return streamSwitcher.getInput().skip(count);\n+        return streamBridge.getInput().skip(count);\n     }\n \n     @Override\n     public void close() throws IOException {\n         try {\n-            streamSwitcher.stop();\n+            streamBridge.stop();\n         } finally {\n             if (originalInput != null) {\n                 originalInput.close();\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java\n public class Pack200CompressorOutputStream extends CompressorOutputStream {\n     private boolean finished = false;\n     private final OutputStream originalOutput;\n-    private final StreamSwitcher streamSwitcher;\n+    private final StreamBridge streamBridge;\n     private final Map<String, String> properties;\n \n     /**\n      */\n     public Pack200CompressorOutputStream(final OutputStream out)\n         throws IOException {\n-        this(out, StreamMode.IN_MEMORY);\n+        this(out, Pack200Strategy.IN_MEMORY);\n     }\n \n     /**\n      * the results.\n      */\n     public Pack200CompressorOutputStream(final OutputStream out,\n-                                         final StreamMode mode)\n+                                         final Pack200Strategy mode)\n         throws IOException {\n         this(out, mode, null);\n     }\n     public Pack200CompressorOutputStream(final OutputStream out,\n                                          final Map<String, String> props)\n         throws IOException {\n-        this(out, StreamMode.IN_MEMORY, props);\n+        this(out, Pack200Strategy.IN_MEMORY, props);\n     }\n \n     /**\n      * the results and the given properties.\n      */\n     public Pack200CompressorOutputStream(final OutputStream out,\n-                                         final StreamMode mode,\n+                                         final Pack200Strategy mode,\n                                          final Map<String, String> props)\n         throws IOException {\n         originalOutput = out;\n-        streamSwitcher = mode.newStreamSwitcher();\n+        streamBridge = mode.newStreamBridge();\n         properties = props;\n     }\n \n     /** {@inheritDoc} */\n     @Override\n     public void write(int b) throws IOException {\n-        streamSwitcher.write(b);\n+        streamBridge.write(b);\n     }\n \n     /**\n      */\n     @Override\n     public void write(byte[] b) throws IOException {\n-        streamSwitcher.write(b);\n+        streamBridge.write(b);\n     }\n \n     /**\n      */\n     @Override\n     public void write(byte[] b, int from, int length) throws IOException {\n-        streamSwitcher.write(b, from, length);\n+        streamBridge.write(b, from, length);\n     }\n \n     @Override\n     public void close() throws IOException {\n         finish();\n         try {\n-            streamSwitcher.stop();\n+            streamBridge.stop();\n         } finally {\n             originalOutput.close();\n         }\n             if (properties != null) {\n                 p.properties().putAll(properties);\n             }\n-            p.pack(new JarInputStream(streamSwitcher.getInput()),\n+            p.pack(new JarInputStream(streamBridge.getInput()),\n                    originalOutput);\n         }\n     }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Strategy.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.commons.compress.compressors.pack200;\n+\n+import java.io.IOException;\n+\n+/**\n+ * The different modes the Pack200 streams can use to wrap input and\n+ * output.\n+ * @since Apache Commons Compress 1.3\n+ */\n+public enum Pack200Strategy {\n+    /** Cache output in memory */\n+    IN_MEMORY() {\n+        StreamBridge newStreamBridge() {\n+            return new InMemoryCachingStreamBridge();\n+        }\n+    },\n+    /** Cache output in a temporary file */\n+    TEMP_FILE() {\n+        StreamBridge newStreamBridge() throws IOException {\n+            return new TempFileCachingStreamBridge();\n+        }\n+    };\n+\n+    abstract StreamBridge newStreamBridge() throws IOException;\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/StreamBridge.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.commons.compress.compressors.pack200;\n+\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+/**\n+ * Provides an InputStream to read all data written to this\n+ * OutputStream.\n+ *\n+ * @ThreadSafe\n+ * @since Apache Commons Compress 1.3\n+ */\n+abstract class StreamBridge extends FilterOutputStream {\n+    private InputStream input;\n+    private final Object INPUT_LOCK = new Object();\n+\n+    protected StreamBridge(OutputStream out) {\n+        super(out);\n+    }\n+\n+    protected StreamBridge() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Provides the input view.\n+     */\n+    InputStream getInput() throws IOException {\n+        synchronized (INPUT_LOCK) {\n+            if (input == null) {\n+                input = getInputView();\n+            }\n+        }\n+        return input;\n+    }\n+\n+    /**\n+     * Creates the input view.\n+     */\n+    abstract InputStream getInputView() throws IOException;\n+\n+    /**\n+     * Closes input and output and releases all associated resources.\n+     */\n+    void stop() throws IOException {\n+        close();\n+        synchronized (INPUT_LOCK) {\n+            if (input != null) {\n+                input.close();\n+                input = null;\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.commons.compress.compressors.pack200;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * StreamSwitcher that caches all data written to the output side in\n+ * a temporary file.\n+ * @since Apache Commons Compress 1.3\n+ */\n+class TempFileCachingStreamBridge extends StreamBridge {\n+    private final File f;\n+\n+    TempFileCachingStreamBridge() throws IOException {\n+        f = File.createTempFile(\"commons-compress\", \"packtemp\");\n+        f.deleteOnExit();\n+        out = new FileOutputStream(f);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    InputStream getInputView() throws IOException {\n+        out.close();\n+        return new FileInputStream(f) {\n+            @Override\n+            public void close() throws IOException {\n+                super.close();\n+                f.delete();\n+            }\n+        };\n+    }\n+}\n--- a/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;\n-import org.apache.commons.compress.compressors.pack200.StreamMode;\n+import org.apache.commons.compress.compressors.pack200.Pack200Strategy;\n import org.apache.commons.compress.utils.IOUtils;\n \n public final class Pack200TestCase extends AbstractTestCase {\n \n     public void testJarUnarchiveAllInMemory() throws Exception {\n-        jarUnarchiveAll(false, StreamMode.IN_MEMORY);\n+        jarUnarchiveAll(false, Pack200Strategy.IN_MEMORY);\n     }\n \n     public void testJarUnarchiveAllFileArgInMemory() throws Exception {\n-        jarUnarchiveAll(true, StreamMode.IN_MEMORY);\n+        jarUnarchiveAll(true, Pack200Strategy.IN_MEMORY);\n     }\n \n     public void testJarUnarchiveAllTempFile() throws Exception {\n-        jarUnarchiveAll(false, StreamMode.TEMP_FILE);\n+        jarUnarchiveAll(false, Pack200Strategy.TEMP_FILE);\n     }\n \n     public void testJarUnarchiveAllFileTempFile() throws Exception {\n-        jarUnarchiveAll(true, StreamMode.TEMP_FILE);\n+        jarUnarchiveAll(true, Pack200Strategy.TEMP_FILE);\n     }\n \n-    private void jarUnarchiveAll(boolean useFile, StreamMode mode)\n+    private void jarUnarchiveAll(boolean useFile, Pack200Strategy mode)\n         throws Exception {\n         final File input = getFile(\"bla.pack\");\n         final InputStream is = useFile\n     }\n \n     public void testJarArchiveCreationInMemory() throws Exception {\n-        jarArchiveCreation(StreamMode.IN_MEMORY);\n+        jarArchiveCreation(Pack200Strategy.IN_MEMORY);\n     }\n \n     public void testJarArchiveCreationTempFile() throws Exception {\n-        jarArchiveCreation(StreamMode.TEMP_FILE);\n+        jarArchiveCreation(Pack200Strategy.TEMP_FILE);\n     }\n \n-    private void jarArchiveCreation(StreamMode mode) throws Exception {\n+    private void jarArchiveCreation(Pack200Strategy mode) throws Exception {\n         final File output = new File(dir, \"bla.pack\");\n \n         final File file1 = getFile(\"test1.xml\");", "timestamp": 1315996384, "metainfo": ""}