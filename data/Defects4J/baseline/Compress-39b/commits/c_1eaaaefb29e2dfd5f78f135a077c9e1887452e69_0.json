{"sha": "1eaaaefb29e2dfd5f78f135a077c9e1887452e69", "log": "After reading up what the InfoZIP people do I changed the data descriptor logic.  What seems to be the correct way is:  If you use a data descriptor and don't use ZIP64:  * set \"version needed to extract\" < 4.5  * set CRC and sizes in LFH to 0  * don't add any ZIP64 extended information extra field  * use four byte sizes in data descriptor  If you use a data descriptor and use ZIP64:  * set \"version needed to extract\" >= 4.5  * set CRC in LFH 0  * set sizes in LFH to 0xFFFFFFFF  * add a ZIP64 extended information extra field with sizes set to 0  * use eight byte sizes in data descriptor    ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         entry.localDataStart = written;\n         if (zipMethod == DEFLATED || raf != null) {\n             writeOut(LZERO);\n-            writeOut(LZERO);\n-            writeOut(LZERO);\n+            if (zipMethod == DEFLATED && hasZip64Extra(entry.entry)) {\n+                // point to ZIP64 extended information extra field for\n+                // sizes, may get rewritten once sizes are known if\n+                // stream is seekable\n+                writeOut(ZipLong.ZIP64_MAGIC.getBytes());\n+                writeOut(ZipLong.ZIP64_MAGIC.getBytes());\n+            } else {\n+                writeOut(LZERO);\n+                writeOut(LZERO);\n+            }\n         } else {\n             writeOut(ZipLong.getBytes(ze.getCrc()));\n             byte[] size = ZipLong.getBytes(Math.min(ze.getSize(), ZIP64_MAGIC));\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n                                        \"5GB_of_Zeros\");\n     }\n \n+    @Ignore\n     @Test public void read5GBOfZerosGeneratedByJava7JarUsingZipFile()\n         throws Throwable {\n         read5GBOfZerosUsingZipFileImpl(get5GBZerosFileGeneratedByJava7Jar(),\n      *\n      * Creates a temporary archive of approx 4MB in size\n      */\n-    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToStream()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToStream\",\n                                                  // CRC\n                                                  0, 0, 0, 0,\n                                                  // Compressed Size\n-                                                 0, 0, 0, 0,\n+                                                 (byte) 0xFF, (byte) 0xFF,\n+                                                 (byte) 0xFF, (byte) 0xFF,\n                                                  // Original Size\n-                                                 0, 0, 0, 0,\n+                                                 (byte) 0xFF, (byte) 0xFF,\n+                                                 (byte) 0xFF, (byte) 0xFF,\n                                                  // file name length\n                                                  1, 0,\n                                                  // extra field length\n         };\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToFile()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToFile\",\n                              true);\n     }\n \n-    @Ignore\n     @Test public void writeBigDeflatedEntryUnknownSizeToFile()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryUnknownSizeToFile\",", "timestamp": 1312599175, "metainfo": ""}