{"sha": "d0501577d37b594c3ff59a39ac211f7a1b170fa7", "log": "COMPRESS-348 7z fails to read from empty entries.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n     }\n     \n     private InputStream getCurrentStream() throws IOException {\n+        if (archive.files[currentEntryIndex].getSize() == 0) {\n+            return new ByteArrayInputStream(new byte[0]);\n+        }\n         if (deferredBlockStreams.isEmpty()) {\n             throw new IllegalStateException(\"No current 7z entry (call getNextEntry() first).\");\n         }\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n             sevenZFile.close();\n         }\n     }\n+\n+    /**\n+     * @see \"https://issues.apache.org/jira/browse/COMPRESS-348\"\n+     */\n+    @Test\n+    public void readEntriesOfSize0() throws IOException {\n+        final SevenZFile sevenZFile = new SevenZFile(getFile(\"COMPRESS-348.7z\"));\n+        try {\n+            int entries = 0;\n+            SevenZArchiveEntry entry = sevenZFile.getNextEntry();\n+            while (entry != null) {\n+                entries++;\n+                int b = sevenZFile.read();\n+                if (\"2.txt\".equals(entry.getName()) || \"5.txt\".equals(entry.getName())) {\n+                    assertEquals(-1, b);\n+                } else {\n+                    assertNotEquals(-1, b);\n+                }\n+                entry = sevenZFile.getNextEntry();\n+            }\n+            assertEquals(5, entries);\n+        } finally {\n+            sevenZFile.close();\n+        }\n+    }\n     \n     private void test7zUnarchive(final File f, final SevenZMethod m, final byte[] password) throws Exception {\n         final SevenZFile sevenZFile = new SevenZFile(f, password);", "timestamp": 1461496954, "metainfo": ""}