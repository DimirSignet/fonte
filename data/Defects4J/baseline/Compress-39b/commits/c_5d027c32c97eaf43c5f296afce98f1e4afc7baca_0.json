{"sha": "5d027c32c97eaf43c5f296afce98f1e4afc7baca", "log": "reduce duplication as suggested by Jeremy Gustie", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n             int signatureLength = IOUtils.readFully(in, signature);\n             in.reset();\n             if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n-                if (entryEncoding != null) {\n-                    return new ZipArchiveInputStream(in, entryEncoding);\n-                } else {\n-                    return new ZipArchiveInputStream(in);\n-                }\n+                return createArchiveInputStream(ZIP, in);\n             } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n-                if (entryEncoding != null) {\n-                    return new JarArchiveInputStream(in, entryEncoding);\n-                } else {\n-                    return new JarArchiveInputStream(in);\n-                }\n+                return createArchiveInputStream(JAR, in);\n             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n-                return new ArArchiveInputStream(in);\n+                return createArchiveInputStream(AR, in);\n             } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n-                if (entryEncoding != null) {\n-                    return new CpioArchiveInputStream(in, entryEncoding);\n-                } else {\n-                    return new CpioArchiveInputStream(in);\n-                }\n+                return createArchiveInputStream(CPIO, in);\n             } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {\n-                if (entryEncoding != null) {\n-                    return new ArjArchiveInputStream(in, entryEncoding);\n-                } else {\n-                    return new ArjArchiveInputStream(in);\n-                }\n+                return createArchiveInputStream(ARJ, in);\n             } else if (SevenZFile.matches(signature, signatureLength)) {\n                 throw new StreamingNotSupportedException(SEVEN_Z);\n             }\n             signatureLength = IOUtils.readFully(in, dumpsig);\n             in.reset();\n             if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n-                return new DumpArchiveInputStream(in, entryEncoding);\n+                return createArchiveInputStream(DUMP, in);\n             }\n \n             // Tar needs an even bigger buffer to check the signature; read the first block\n             signatureLength = IOUtils.readFully(in, tarheader);\n             in.reset();\n             if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n-                return new TarArchiveInputStream(in, entryEncoding);\n+                return createArchiveInputStream(TAR, in);\n             }\n             // COMPRESS-117 - improve auto-recognition\n             if (signatureLength >= 512) {\n                     tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n                     // COMPRESS-191 - verify the header checksum\n                     if (tais.getNextTarEntry().isCheckSumOK()) {\n-                        return new TarArchiveInputStream(in, encoding);\n+                        return createArchiveInputStream(TAR, in);\n                     }\n                 } catch (Exception e) { // NOPMD\n                     // can generate IllegalArgumentException as well", "timestamp": 1452196118, "metainfo": ""}