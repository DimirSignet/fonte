{"sha": "dab23f70249430ca50a863195e6a15a1e548b009", "log": "Removed the explicit calls to the default constructor  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveException.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveException.java\n     }\n \n     public DumpArchiveException(Throwable cause) {\n-        super();\n         initCause(cause);\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n      * @throws NullPointerException\n      *             if <tt>in == null</tt>\n      */\n-    public BZip2CompressorInputStream(final InputStream in,\n-                                      final boolean decompressConcatenated)\n-            throws IOException {\n-        super();\n-\n+    public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {\n         this.in = in;\n         this.decompressConcatenated = decompressConcatenated;\n \n         // ===============\n \n         Data(int blockSize100k) {\n-            super();\n-\n             this.ll8 = new byte[blockSize100k * BZip2Constants.BASEBLOCKSIZE];\n         }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n      * @see #MIN_BLOCKSIZE\n      * @see #MAX_BLOCKSIZE\n      */\n-    public BZip2CompressorOutputStream(final OutputStream out,\n-                                       final int blockSize)\n-        throws IOException {\n-        super();\n-\n+    public BZip2CompressorOutputStream(final OutputStream out, final int blockSize) throws IOException {\n         if (blockSize < 1) {\n-            throw new IllegalArgumentException(\"blockSize(\" + blockSize\n-                                               + \") < 1\");\n+            throw new IllegalArgumentException(\"blockSize(\" + blockSize + \") < 1\");\n         }\n         if (blockSize > 9) {\n-            throw new IllegalArgumentException(\"blockSize(\" + blockSize\n-                                               + \") > 9\");\n+            throw new IllegalArgumentException(\"blockSize(\" + blockSize + \") > 9\");\n         }\n \n         this.blockSize100k = blockSize;\n         int origPtr;\n \n         Data(int blockSize100k) {\n-            super();\n-\n             final int n = blockSize100k * BZip2Constants.BASEBLOCKSIZE;\n             this.block = new byte[(n + 1 + NUM_OVERSHOOT_BYTES)];\n             this.fmap = new int[n];\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n     protected ArchiveStreamFactory factory = new ArchiveStreamFactory();\n \n     public AbstractTestCase() {\n-        super();\n     }\n \n     public AbstractTestCase(String name) {", "timestamp": 1375884945, "metainfo": ""}