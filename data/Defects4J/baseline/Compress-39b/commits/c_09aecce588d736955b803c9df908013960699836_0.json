{"sha": "09aecce588d736955b803c9df908013960699836", "log": "Fixed style issues as reported by IntelliJ  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/Dirent.java\n      */\n     @Override\n     public String toString() {\n-        return String.format(\"[%d]: %s\", Integer.valueOf(ino), name);\n+        return String.format(\"[%d]: %s\", ino, name);\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n \n         // put in a dummy record for the root node.\n         Dirent root = new Dirent(2, 2, 4, \".\");\n-        names.put(Integer.valueOf(2), root);\n+        names.put(2, root);\n \n         // use priority based on queue to ensure parent directories are\n         // released first.\n         }\n \n         entry.setName(path);\n-        entry.setSimpleName(names.get(Integer.valueOf(entry.getIno())).getName());\n+        entry.setSimpleName(names.get(entry.getIno()).getName());\n         entry.setOffset(filepos);\n \n         return entry;\n                 raw.readRecord();\n             }\n \n-            if (!names.containsKey(Integer.valueOf(entry.getIno())) &&\n+            if (!names.containsKey(entry.getIno()) &&\n                     DumpArchiveConstants.SEGMENT_TYPE.INODE == entry.getHeaderType()) {\n-                pending.put(Integer.valueOf(entry.getIno()), entry);\n+                pending.put(entry.getIno(), entry);\n             }\n \n             int datalen = DumpArchiveConstants.TP_SIZE * entry.getHeaderCount();\n                 }\n                 */\n \n-                names.put(Integer.valueOf(ino), d);\n+                names.put(ino, d);\n \n                 // check whether this allows us to fill anything in the pending list.\n                 for (Map.Entry<Integer, DumpArchiveEntry> e : pending.entrySet()) {\n                 // remove anything that we found. (We can't do it earlier\n                 // because of concurrent modification exceptions.)\n                 for (DumpArchiveEntry e : queue) {\n-                    pending.remove(Integer.valueOf(e.getIno()));\n+                    pending.remove(e.getIno());\n                 }\n             }\n \n         Dirent dirent = null;\n \n         for (int i = entry.getIno();; i = dirent.getParentIno()) {\n-            if (!names.containsKey(Integer.valueOf(i))) {\n+            if (!names.containsKey(i)) {\n                 elements.clear();\n                 break;\n             }\n \n-            dirent = names.get(Integer.valueOf(i));\n+            dirent = names.get(i);\n             elements.push(dirent.getName());\n \n             if (dirent.getIno() == dirent.getParentIno()) {\n \n         // if an element is missing defer the work and read next entry.\n         if (elements.isEmpty()) {\n-            pending.put(Integer.valueOf(entry.getIno()), entry);\n+            pending.put(entry.getIno(), entry);\n \n             return null;\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java\n                     first = false;\n                     sb.append(m.getMethod());\n                     if (m.getOptions() != null) {\n-                        sb.append(\"(\" + m.getOptions() + \")\");\n+                        sb.append(\"(\").append(m.getOptions()).append(\")\");\n                     }\n                 }\n                 return sb.toString();\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java\n \n     @Override\n     Object getOptionsFromCoder(Coder coder, InputStream in) {\n-        return Integer.valueOf(getOptionsFromCoder(coder));\n+        return getOptionsFromCoder(coder);\n     }\n \n     private int getOptionsFromCoder(Coder coder) {\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n \n     @Override\n     Object getOptionsFromCoder(Coder coder, InputStream in) {\n-        return Integer.valueOf(getDictionarySize(coder));\n+        return getDictionarySize(coder);\n     }\n \n     private int getDictSize(Object opts) {\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n         final byte archiveVersionMinor = file.readByte();\n         if (archiveVersionMajor != 0) {\n             throw new IOException(String.format(\"Unsupported 7z version (%d,%d)\",\n-                    Byte.valueOf(archiveVersionMajor), Byte.valueOf(archiveVersionMinor)));\n+                    archiveVersionMajor, archiveVersionMinor));\n         }\n \n         final long startHeaderCrc = 0xffffFFFFL & Integer.reverseBytes(file.readInt());\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n         boolean hasEmptyFiles = false;\n         int emptyStreamCounter = 0;\n         final BitSet emptyFiles = new BitSet(0);\n-        for (int i = 0; i < files.size(); i++) {\n-            if (!files.get(i).hasStream()) {\n-                boolean isDir = files.get(i).isDirectory();\n+        for (SevenZArchiveEntry file1 : files) {\n+            if (!file1.hasStream()) {\n+                boolean isDir = file1.isDirectory();\n                 emptyFiles.set(emptyStreamCounter++, !isDir);\n                 hasEmptyFiles |= !isDir;\n             }\n         boolean hasAntiItems = false;\n         final BitSet antiItems = new BitSet(0);\n         int antiItemCounter = 0;\n-        for (int i = 0; i < files.size(); i++) {\n-            if (!files.get(i).hasStream()) {\n-                boolean isAnti = files.get(i).isAntiItem();\n+        for (SevenZArchiveEntry file1 : files) {\n+            if (!file1.hasStream()) {\n+                boolean isAnti = file1.isAntiItem();\n                 antiItems.set(antiItemCounter++, isAnti);\n                 hasAntiItems |= isAnti;\n             }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n      * @return This entry's name.\n      */\n     public String getName() {\n-        return name.toString();\n+        return name;\n     }\n \n     /**\n      * @return This entry's link name.\n      */\n     public String getLinkName() {\n-        return linkName.toString();\n+        return linkName;\n     }\n \n     /**\n      * @return This entry's user name.\n      */\n     public String getUserName() {\n-        return userName.toString();\n+        return userName;\n     }\n \n     /**\n      * @return This entry's group name.\n      */\n     public String getGroupName() {\n-        return groupName.toString();\n+        return groupName;\n     }\n \n     /**\n                         fileName = fileName.substring(2);\n                     }\n                 }\n-            } else if (osname.indexOf(\"netware\") > -1) {\n+            } else if (osname.contains(\"netware\")) {\n                 int colon = fileName.indexOf(':');\n                 if (colon != -1) {\n                     fileName = fileName.substring(colon + 1);\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n                 final int length = buffer.length;\n                 StringBuilder result = new StringBuilder(length);\n \n-                for (int i = 0; i < length; ++i) {\n-                    byte b = buffer[i];\n+                for (byte b : buffer) {\n                     if (b == 0) { // Trailing null\n                         break;\n                     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n  * #ZipArchiveOutputStream *before* calling #writeTo on this class.</p>\n  */\n public class ParallelScatterZipCreator {\n-    private List<ScatterZipOutputStream> streams = synchronizedList(new ArrayList<ScatterZipOutputStream>());\n+    private final List<ScatterZipOutputStream> streams = synchronizedList(new ArrayList<ScatterZipOutputStream>());\n     private final ExecutorService es;\n     private final ScatterGatherBackingStoreSupplier supplier;\n \n     private long scatterDoneAt;\n \n     private static class DefaultSupplier implements ScatterGatherBackingStoreSupplier {\n-        AtomicInteger storeNum = new AtomicInteger(0);\n+        final AtomicInteger storeNum = new AtomicInteger(0);\n \n         public ScatterGatherBackingStore get() throws IOException {\n             File tempFile = File.createTempFile(\"parallelscatter\", \"n\" + storeNum.incrementAndGet());\n         return new ScatterZipOutputStream(bs, sc);\n     }\n \n-    private ThreadLocal<ScatterZipOutputStream> tlScatterStreams = new ThreadLocal<ScatterZipOutputStream>() {\n+    private final ThreadLocal<ScatterZipOutputStream> tlScatterStreams = new ThreadLocal<ScatterZipOutputStream>() {\n         @Override\n         protected ScatterZipOutputStream initialValue() {\n             try {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n \n     private byte[] createCentralFileHeader(ZipArchiveEntry ze) throws IOException {\n \n-        final long lfhOffset = offsets.get(ze).longValue();\n+        final long lfhOffset = offsets.get(ze);\n         final boolean needsZip64Extra = hasZip64Extra(ze)\n                 || ze.getCompressedSize() >= ZIP64_MAGIC\n                 || ze.getSize() >= ZIP64_MAGIC\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java\n     static {\n         Map<Integer, ZipMethod> cte = new HashMap<Integer, ZipMethod>();\n         for (ZipMethod method : values()) {\n-            cte.put(Integer.valueOf(method.getCode()), method);\n+            cte.put(method.getCode(), method);\n         }\n         codeToEnum = Collections.unmodifiableMap(cte);\n     }\n      * method is not known.\n      */\n     public static ZipMethod getMethodByCode(int code) {\n-        return codeToEnum.get(Integer.valueOf(code));\n+        return codeToEnum.get(code);\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n                 addRepeatOfPreviousCode();\n                 addedUnfinishedEntry = true;\n             } else if (code > tableSize) {\n-                throw new IOException(String.format(\"Invalid %d bit code 0x%x\", Integer.valueOf(codeSize), Integer.valueOf(code)));\n+                throw new IOException(String.format(\"Invalid %d bit code 0x%x\", codeSize, code));\n             }\n             return expandCodeToOutputStack(code, addedUnfinishedEntry);\n         }\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n     }\n \n     private static final boolean ON_WINDOWS =\n-        System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH)\n-        .indexOf(\"windows\") > -1;\n+            System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH).contains(\"windows\");\n \n     /**\n      * Accommodate Windows bug encountered in both Sun and IBM JDKs.\n--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n             assertTrue(ais instanceof ArArchiveInputStream);\n             // CPIO does not store directories or directory names\n             expected.clear();\n-            for(int i=0; i < fileList.size(); i++){\n-                String ent = fileList.get(i);\n-                if (!ent.endsWith(\"/\")){// not a directory\n+            for (String ent : fileList) {\n+                if (!ent.endsWith(\"/\")) {// not a directory\n                     final int lastSlash = ent.lastIndexOf('/');\n                     if (lastSlash >= 0) { // extract path name\n-                        expected.add(ent.substring(lastSlash+1, ent.length()));\n+                        expected.add(ent.substring(lastSlash + 1, ent.length()));\n                     } else {\n                         expected.add(ent);\n                     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n     }\n \n     public void testUtf8Interoperability() throws IOException {\n-        File file1 = super.getFile(\"utf8-7zip-test.zip\");\n-        File file2 = super.getFile(\"utf8-winzip-test.zip\");\n+        File file1 = getFile(\"utf8-7zip-test.zip\");\n+        File file2 = getFile(\"utf8-winzip-test.zip\");\n \n         testFile(file1,CP437);\n         testFile(file2,CP437);\n--- a/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n             fail(\"expected an exception\");\n             in.close();\n         } catch (IOException ex) {\n-            assertTrue(ex.getMessage().indexOf(\"unskippable chunk\") > -1);\n+            assertTrue(ex.getMessage().contains(\"unskippable chunk\"));\n         }\n     }\n ", "timestamp": 1420906554, "metainfo": ""}