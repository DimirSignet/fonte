{"sha": "651c295bbdc95751691f7d62330050a7fb20c0eb", "log": "Explicit boxing  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n         final byte archiveVersionMinor = file.readByte();\n         if (archiveVersionMajor != 0) {\n             throw new IOException(String.format(\"Unsupported 7z version (%d,%d)\",\n-                    archiveVersionMajor, archiveVersionMinor));\n+                    Byte.valueOf(archiveVersionMajor), Byte.valueOf(archiveVersionMinor)));\n         }\n \n         final long startHeaderCrc = 0xffffFFFFL & Integer.reverseBytes(file.readInt());\n--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n                 addRepeatOfPreviousCode();\n                 addedUnfinishedEntry = true;\n             } else if (code > tableSize) {\n-                throw new IOException(String.format(\"Invalid %d bit code 0x%x\", codeSize, code));\n+                throw new IOException(String.format(\"Invalid %d bit code 0x%x\", Integer.valueOf(codeSize), Integer.valueOf(code)));\n             }\n             return expandCodeToOutputStack(code, addedUnfinishedEntry);\n         }\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n         assertEquals(\"foo/\" + index + \".txt\", entry.getName());\n         assertEquals(false, entry.isDirectory());\n         if (entry.getSize() == 0) {\n-            return false;\n+            return Boolean.FALSE;\n         }\n         assertEquals(1, entry.getSize());\n         assertEquals(17, archive.read());\n         assertEquals(-1, archive.read());\n-        return true;\n+        return Boolean.TRUE;\n     }\n \n }", "timestamp": 1387561911, "metainfo": ""}