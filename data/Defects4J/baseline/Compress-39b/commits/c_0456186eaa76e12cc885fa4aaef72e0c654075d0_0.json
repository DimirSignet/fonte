{"sha": "0456186eaa76e12cc885fa4aaef72e0c654075d0", "log": "support reading of long file names in AR archives that use the BSD variant.  COMPRESS-144  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n  */\n package org.apache.commons.compress.archivers.ar;\n \n+import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n \n \n         // entry name is stored as ASCII string\n         String temp = ArchiveUtils.toAsciiString(name).trim();\n+        long len = asLong(length);\n \n         if (temp.equals(\"//\")){ // GNU extended filenames entry\n             int bufflen = asInt(length); // Assume length will fit in an int\n         } else if (temp.matches(\"^/\\\\d+\")) {// GNU long filename ref.\n             int offset = Integer.parseInt(temp.substring(1));// get the offset\n             temp = getExtendedName(offset); // convert to the long name\n-        }\n-        currentEntry = new ArArchiveEntry(temp, asLong(length), asInt(userid, true),\n+        } else if (isBSDLongName(temp)) {\n+            temp = getBSDLongName(temp);\n+            // entry length contained the length of the file name in\n+            // addition to the real length of the entry.\n+            // assume file name was ASCII, there is no \"standard\" otherwise\n+            int nameLen = temp.length();\n+            len -= nameLen;\n+            entryOffset += nameLen;\n+        }\n+\n+        currentEntry = new ArArchiveEntry(temp, len, asInt(userid, true),\n                                           asInt(groupid, true), asInt(filemode, 8),\n                                           asLong(lastmodified));\n         return currentEntry;\n         return true;\n     }\n \n+    private static final String BSD_LONGNAME_PREFIX = \"#1/\";\n+    private static final int BSD_LONGNAME_PREFIX_LEN =\n+        BSD_LONGNAME_PREFIX.length();\n+\n+    /**\n+     * Does the name look like it is a long name (or a name containing\n+     * spaces) as encoded by BSD ar?\n+     *\n+     * <p>From the FreeBSD ar(5) man page:</p>\n+     * <pre>\n+     * BSD   In the BSD variant, names that are shorter than 16\n+     *\t     characters and without embedded spaces are stored\n+     *\t     directly in this field.  If a name has an embedded\n+     *\t     space, or if it is longer than 16 characters, then\n+     *\t     the string \"#1/\" followed by the decimal represen-\n+     *\t     tation of the length of the file name is placed in\n+     *\t     this field.\tThe actual file name is stored immedi-\n+     *\t     ately after the archive header.  The content of the\n+     *\t     archive member follows the file name.  The ar_size\n+     *\t     field of the header (see below) will then hold the\n+     *\t     sum of the size of the file name and the size of\n+     *\t     the member.\n+     * </pre>\n+     *\n+     * @since Apache Commons Compress 1.3\n+     */\n+    private static boolean isBSDLongName(String name) {\n+        return name.startsWith(BSD_LONGNAME_PREFIX)\n+            && name.length() > BSD_LONGNAME_PREFIX_LEN;\n+    }\n+\n+    /**\n+     * Reads the real name from the current stream assuming the very\n+     * first bytes to be read are the real file name.\n+     *\n+     * @see #isBSDLongName\n+     */\n+    private String getBSDLongName(String bsdLongName) throws IOException {\n+        int nameLen =\n+            Integer.parseInt(bsdLongName.substring(BSD_LONGNAME_PREFIX_LEN));\n+        byte[] name = new byte[nameLen];\n+        int read = 0, readNow = 0;\n+        while ((readNow = input.read(name, read, nameLen - read)) >= 0) {\n+            read += readNow;\n+            count(readNow);\n+            if (read == nameLen) {\n+                break;\n+            }\n+        }\n+        if (read != nameLen) {\n+            throw new EOFException();\n+        }\n+        return ArchiveUtils.toAsciiString(name);\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java\n \n package org.apache.commons.compress.archivers.ar;\n \n-import java.util.ArrayList;\n+import java.io.BufferedInputStream;\n+import java.io.FileInputStream;\n import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.utils.ArchiveUtils;\n \n public class ArArchiveInputStreamTest extends AbstractTestCase {\n \n     public void testReadLongNamesGNU() throws Exception {\n-        ArrayList<String> l = new ArrayList<String>();\n-        l.add(\"this_is_a_long_file_name.txt\");\n-        checkArchiveContent(getFile(\"longfile_gnu.ar\"), l);\n+        checkLongNameEntry(\"longfile_gnu.ar\");\n     }\n \n+    public void testReadLongNamesBSD() throws Exception {\n+        checkLongNameEntry(\"longfile_bsd.ar\");\n+    }\n+\n+    private void checkLongNameEntry(String archive) throws Exception {\n+        FileInputStream fis = new FileInputStream(getFile(archive));\n+        ArArchiveInputStream s = null;\n+        try {\n+            s = new ArArchiveInputStream(new BufferedInputStream(fis));\n+            ArchiveEntry e = s.getNextEntry();\n+            assertEquals(\"this_is_a_long_file_name.txt\", e.getName());\n+            assertEquals(14, e.getSize());\n+            byte[] hello = new byte[14];\n+            s.read(hello);\n+            assertEquals(\"Hello, world!\\n\", ArchiveUtils.toAsciiString(hello));\n+            assertNull(s.getNextEntry());\n+        } finally {\n+            if (s != null) {\n+                s.close();\n+            }\n+            fis.close();\n+        }\n+    }\n }", "timestamp": 1312793673, "metainfo": ""}