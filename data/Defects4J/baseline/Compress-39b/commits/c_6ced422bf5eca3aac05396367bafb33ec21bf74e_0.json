{"sha": "6ced422bf5eca3aac05396367bafb33ec21bf74e", "log": "remove randomization code  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n         }\n \n         /* sort the block and establish posn of original string */\n-        final boolean blockRandomised = blockSort();\n+        blockSort();\n \n         /*\n          * A 6-byte block header, the value chosen arbitrarily as 0x314159265359\n         /* Now the block's CRC, so it is in a known place. */\n         bsPutInt(this.blockCRC);\n \n-        /* Now a single bit indicating randomisation. */\n-        if (blockRandomised) {\n-            bsW(1, 1);\n-        } else {\n-            bsW(1, 0);\n-        }\n+        /* Now a single bit indicating no randomisation. */\n+        bsW(1, 0);\n \n         /* Finally, block's contents proper. */\n         moveToFrontCodeAndSend();\n         sendMTFValues();\n     }\n \n-    private boolean blockSort() {\n-        return blockSorter.blockSort(data, last);\n+    private void blockSort() {\n+        blockSorter.blockSort(data, last);\n     }\n \n     /*\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java\n      * This class seems to mix several revisions of libbzip2's code.\n      * The mainSort function and those used by it look closer to the\n      * 0.9.5 version but show some variations introduced later.  At\n-     * the same time the logic to randomize the block on bad input has\n-     * been dropped after 0.9.0 and replaced by a fallback sorting\n-     * algorithm.\n+     * the same time the logic of Compress 1.4 to randomize the block\n+     * on bad input has been dropped after libbzip2 0.9.0 and replaced\n+     * by a fallback sorting algorithm.\n      *\n      * I've added the fallbackSort function of 1.0.6 and tried to\n      * integrate it with the existing code without touching too much.\n+     * I've also removed the now unused reandomization code.\n      */\n \n     /*\n         QSORT_STACK_SIZE < FALLBACK_QSORT_STACK_SIZE\n         ? FALLBACK_QSORT_STACK_SIZE : QSORT_STACK_SIZE;\n \n-    private boolean blockRandomised;\n-\n     /*\n      * Used when sorting. If too many long comparisons happen, we stop sorting,\n-     * randomise the block slightly, and try again.\n+     * and use fallbackSort instead.\n      */\n     private int workDone;\n     private int workLimit;\n         this.quadrant = data.sfmap;\n     }\n \n-    boolean blockSort(final BZip2CompressorOutputStream.Data data, final int last) {\n+    void blockSort(final BZip2CompressorOutputStream.Data data, final int last) {\n         this.workLimit = WORK_FACTOR * last;\n         this.workDone = 0;\n-        this.blockRandomised = false;\n         this.firstAttempt = true;\n \n         if (last + 1 < 10000) {\n         }\n \n         // assert (data.origPtr != -1) : data.origPtr;\n-        return false;\n     }\n \n     /**\n         }\n     }\n \n-/*---------------------------------------------*/\n-\n-    private void randomiseBlock(final BZip2CompressorOutputStream.Data data,\n-                                final int lastShadow) {\n-        final boolean[] inUse = data.inUse;\n-        final byte[] block = data.block;\n-\n-        for (int i = 256; --i >= 0;) {\n-            inUse[i] = false;\n-        }\n-\n-        int rNToGo = 0;\n-        int rTPos = 0;\n-        for (int i = 0, j = 1; i <= lastShadow; i = j, j++) {\n-            if (rNToGo == 0) {\n-                rNToGo = (char) Rand.rNums(rTPos);\n-                if (++rTPos == 512) {\n-                    rTPos = 0;\n-                }\n-            }\n-\n-            rNToGo--;\n-            block[j] ^= ((rNToGo == 1) ? 1 : 0);\n-\n-            // handle 16 bit signed numbers\n-            inUse[block[j] & 0xff] = true;\n-        }\n-\n-        this.blockRandomised = true;\n-    }\n-\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/bzip2/BlockSortTest.java\n \n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n \n public class BlockSortTest {\n \n     @Test\n     public void testSortFixture() {\n         DS ds = setUpFixture();\n-        assertFalse(ds.s.blockSort(ds.data, FIXTURE.length - 1));\n+        ds.s.blockSort(ds.data, FIXTURE.length - 1);\n         assertFixtureSorted(ds.data);\n         assertEquals(0, ds.data.origPtr);\n     }\n     @Test\n     public void testSortFixture2() {\n         DS ds = setUpFixture2();\n-        assertFalse(ds.s.blockSort(ds.data, FIXTURE2.length - 1));\n+        ds.s.blockSort(ds.data, FIXTURE2.length - 1);\n         assertFixture2Sorted(ds.data);\n         assertEquals(1, ds.data.origPtr);\n     }", "timestamp": 1337537446, "metainfo": ""}