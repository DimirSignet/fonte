{"sha": "dfea8360996daab340502f3497b5050f3a11fbf1", "log": "DumpArchiveInputStream didn't count bytes read.  COMPRESS-132  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n import org.apache.commons.compress.archivers.ArchiveException;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n \n+import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n \n      * @throws Exception\n      */\n     public DumpArchiveInputStream(InputStream is) throws ArchiveException {\n-        this.raw = new TapeInputStream(is);\n+        this.raw = new TapeInputStream(new CountingStream(is));\n         this.hasHitEOF = false;\n \n         try {\n         return DumpArchiveConstants.NFS_MAGIC == DumpArchiveUtil.convert32(buffer,\n             7);\n     }\n+\n+    private class CountingStream extends FilterInputStream {\n+        private CountingStream(final InputStream in) {\n+            super(in);\n+        }\n+        @Override\n+        public int read() throws IOException {\n+            int r = in.read();\n+            if (r >= 0) {\n+                count(1);\n+            }\n+            return r;\n+        }\n+        @Override\n+        public int read(byte[] b) throws IOException {\n+            return read(b, 0, b.length);\n+        }\n+        @Override\n+        public int read(byte[] b, int off, int len) throws IOException {\n+            int r = in.read(b, off, len);\n+            if (r >= 0) {\n+                count(r);\n+            }\n+            return r;\n+        }\n+    }\n }", "timestamp": 1313407814, "metainfo": ""}