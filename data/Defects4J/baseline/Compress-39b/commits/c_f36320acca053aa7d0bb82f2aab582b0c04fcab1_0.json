{"sha": "f36320acca053aa7d0bb82f2aab582b0c04fcab1", "log": "some formatting and javadoc tweaks, minor optimization  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n      */\n     public boolean isGNULongNameEntry() {\n         return linkFlag == LF_GNUTYPE_LONGNAME\n-            && name.toString().equals(GNU_LONGLINK);\n+            && name.equals(GNU_LONGLINK);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n      * is left in the entire archive, only in the current entry.\n      * This value is determined from the entry's size header field\n      * and the amount of data already read from the current entry.\n-     * Integer.MAX_VALUE is returen in case more than Integer.MAX_VALUE\n+     * Integer.MAX_VALUE is returned in case more than Integer.MAX_VALUE\n      * bytes are left in the current entry in the archive.\n      *\n      * @return The number of available bytes for the current entry.\n             while (numToSkip > 0) {\n                 long skipped = skip(numToSkip);\n                 if (skipped <= 0) {\n-                    throw new RuntimeException(\"failed to skip current tar entry\");\n+                    throw new RuntimeException(\"failed to skip current tar\"\n+                                               + \" entry\");\n                 }\n                 numToSkip -= skipped;\n             }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n             throw new IOException(\"This archive has already been finished\");\n         }\n \n-        if(haveUnclosedEntry) {\n+        if (haveUnclosedEntry) {\n             throw new IOException(\"This archives contains unclosed entries.\");\n         }\n         writeEOFRecord();\n      */\n     @Override\n     public void closeArchiveEntry() throws IOException {\n-        if(finished) {\n+        if (finished) {\n             throw new IOException(\"Stream has already been finished\");\n         }\n         if (!haveUnclosedEntry){\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n     /**\n      * The maximum value of gid/uid in a tar archive which can\n      * be expressed in octal char notation (that's 7 sevens, octal).\n-     * @since 1.4\n      */\n     long    MAXID = 07777777L;\n  ", "timestamp": 1339306792, "metainfo": ""}