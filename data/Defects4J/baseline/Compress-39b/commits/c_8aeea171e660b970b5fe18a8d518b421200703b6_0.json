{"sha": "8aeea171e660b970b5fe18a8d518b421200703b6", "log": "initial tests for reading of ZIP64 archives using ZipArchiveInputStream, seems to work OK.  COMPRESS-148  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.net.URI;\n+import java.net.URL;\n+import java.util.Random;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assume.assumeNotNull;\n+import static org.junit.Assume.assumeTrue;\n+\n+public class Zip64SupportTest {\n+\n+    private static File getFile(String name) throws Throwable {\n+        URL url = Zip64SupportTest.class.getResource(name);\n+        assumeNotNull(url);\n+        File file = new File(new URI(url.toString()));\n+        assumeTrue(file.exists());\n+        return file;\n+    }\n+\n+    private static File get5GBZerosFile() throws Throwable {\n+        return getFile(\"/5GB_of_Zeros.zip\");\n+    }\n+\n+    private static File get100KFileFile() throws Throwable {\n+        return getFile(\"/100k_Files.zip\");\n+    }\n+\n+    private static final long FIVE_BILLION = 5000000000l;\n+    private static final int ONE_HUNDRED_THOUSAND = 100000;\n+\n+    @Test public void read5GBOfZerosUsingInputStream() throws Throwable {\n+        FileInputStream fin = new FileInputStream(get5GBZerosFile());\n+        ZipArchiveInputStream zin = null;\n+        try {\n+            zin = new ZipArchiveInputStream(fin);\n+            ZipArchiveEntry zae = zin.getNextZipEntry();\n+            assertEquals(\"5GB_of_Zeros\", zae.getName());\n+            assertEquals(FIVE_BILLION, zae.getSize());\n+            byte[] buf = new byte[1024 * 1024];\n+            long read = 0;\n+            Random r = new Random(System.currentTimeMillis());\n+            int readNow;\n+            while ((readNow = zin.read(buf, 0, buf.length)) > 0) {\n+                // testing all bytes for a value of 0 is going to take\n+                // too long, just pick a few ones randomly\n+                for (int i = 0; i < 1024; i++) {\n+                    int idx = r.nextInt(readNow);\n+                    assertEquals(\"testing byte \" + (read + idx), 0, buf[idx]);\n+                }\n+                read += readNow;\n+            }\n+            assertEquals(FIVE_BILLION, read);\n+            assertNull(zin.getNextZipEntry());\n+        } finally {\n+            if (zin != null) {\n+                zin.close();\n+            }\n+            if (fin != null) {\n+                fin.close();\n+            }\n+        }\n+    }\n+\n+    @Test public void read100KFilesUsingInputStream() throws Throwable {\n+        FileInputStream fin = new FileInputStream(get100KFileFile());\n+        ZipArchiveInputStream zin = null;\n+        try {\n+            zin = new ZipArchiveInputStream(fin);\n+            int files = 0;\n+            ZipArchiveEntry zae = null;\n+            while ((zae = zin.getNextZipEntry()) != null) {\n+                if (!zae.isDirectory()) {\n+                    files++;\n+                    assertEquals(0, zae.getSize());\n+                }\n+            }\n+            assertEquals(ONE_HUNDRED_THOUSAND, files);\n+        } finally {\n+            if (zin != null) {\n+                zin.close();\n+            }\n+            if (fin != null) {\n+                fin.close();\n+            }\n+        }\n+    }\n+}", "timestamp": 1311862391, "metainfo": ""}