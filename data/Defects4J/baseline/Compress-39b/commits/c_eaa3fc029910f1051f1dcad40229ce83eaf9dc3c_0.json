{"sha": "eaa3fc029910f1051f1dcad40229ce83eaf9dc3c", "log": "Check that empty archives created by the code can be read back  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n \n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveException;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n \n public final class DetectArchiverTestCase extends AbstractTestCase {\n+    final ArchiveStreamFactory factory = new ArchiveStreamFactory();\n+    final ClassLoader classLoader = getClass().getClassLoader();\n+\n     public void testDetection() throws Exception {\n-        final ArchiveStreamFactory factory = new ArchiveStreamFactory();\n \n-        final ArchiveInputStream ar = factory.createArchiveInputStream(\n-                                                                       new BufferedInputStream(new FileInputStream(\n-                                                                                                                   new File(getClass().getClassLoader().getResource(\"bla.ar\").getFile())))); \n+        final ArchiveInputStream ar = getStreamFor(\"bla.ar\"); \n         assertNotNull(ar);\n         assertTrue(ar instanceof ArArchiveInputStream);\n \n-        final ArchiveInputStream tar = factory.createArchiveInputStream(\n-                                                                        new BufferedInputStream(new FileInputStream(\n-                                                                                                                    new File(getClass().getClassLoader().getResource(\"bla.tar\").getFile()))));\n+        final ArchiveInputStream tar = getStreamFor(\"bla.tar\");\n         assertNotNull(tar);\n         assertTrue(tar instanceof TarArchiveInputStream);\n \n-        final ArchiveInputStream zip = factory.createArchiveInputStream(\n-                                                                        new BufferedInputStream(new FileInputStream(\n-                                                                                                                    new File(getClass().getClassLoader().getResource(\"bla.zip\").getFile()))));\n+        final ArchiveInputStream zip = getStreamFor(\"bla.zip\");\n         assertNotNull(zip);\n         assertTrue(zip instanceof ZipArchiveInputStream);\n \n-        final ArchiveInputStream jar = factory.createArchiveInputStream(\n-                                                                        new BufferedInputStream(new FileInputStream(\n-                                                                                                                    new File(getClass().getClassLoader().getResource(\"bla.jar\").getFile()))));\n+        final ArchiveInputStream jar = getStreamFor(\"bla.jar\");\n         assertNotNull(jar);\n         assertTrue(jar instanceof ZipArchiveInputStream);\n \n-        final ArchiveInputStream cpio = factory.createArchiveInputStream(\n-                                                                         new BufferedInputStream(new FileInputStream(\n-                                                                                                                     new File(getClass().getClassLoader().getResource(\"bla.cpio\").getFile()))));\n+        final ArchiveInputStream cpio = getStreamFor(\"bla.cpio\");\n         assertNotNull(cpio);\n         assertTrue(cpio instanceof CpioArchiveInputStream);\n \n-        //              final ArchiveInputStream tgz = factory.createArchiveInputStream(\n-        //                              new BufferedInputStream(new FileInputStream(\n-        //                                              new File(getClass().getClassLoader().getResource(\"bla.tgz\").getFile()))));\n-        //              assertTrue(tgz instanceof TarArchiveInputStream);\n+// Not yet implemented        \n+//        final ArchiveInputStream tgz = getStreamFor(\"bla.tgz\");\n+//        assertNotNull(tgz);\n+//        assertTrue(tgz instanceof TarArchiveInputStream);\n \n     }\n \n+    private ArchiveInputStream getStreamFor(String resource)\n+            throws ArchiveException, FileNotFoundException {\n+        final URL rsc = classLoader.getResource(resource);\n+        assertNotNull(\"Could not find resource \"+resource,rsc);\n+        return factory.createArchiveInputStream(\n+                   new BufferedInputStream(new FileInputStream(\n+                       new File(rsc.getFile()))));\n+    }\n+    \n+    // Scan list of archives in resources/archives directory\n+    public void notyettestArchives() throws Exception{\n+        File arcdir =new File(classLoader.getResource(\"archives\").getFile());\n+        assertTrue(arcdir.exists());\n+        File[]files=arcdir.listFiles();\n+        for (int i=0; i<files.length; i++){\n+            final File file = files[i];\n+            if (file.getName().endsWith(\".txt\")){\n+                continue;\n+            }\n+           try {\n+               // TODO - how to determine expected file contents\n+               final ArrayList expected = new ArrayList();\n+               checkArchiveContent(file, expected);\n+            } catch (ArchiveException e) {\n+                fail(\"Problem checking \"+file);\n+            }\n+        }\n+    }\n+\n+    // Check that the empty archives created by the code are readable\n+    \n+    // Not possible to detect empty \"ar\" archive as it is completely empty\n+//    public void testEmptyArArchive() throws Exception {\n+//        emptyArchive(\"ar\");\n+//    }\n+\n+    public void testEmptyCpioArchive() throws Exception {\n+        checkEmptyArchive(\"cpio\");\n+    }\n+\n+    public void testEmptyJarArchive() throws Exception {\n+        checkEmptyArchive(\"jar\");\n+    }\n+\n+    // empty tar archives just have 512 null bytes\n+//    public void testEmptyTarArchive() throws Exception {\n+//        checkEmptyArchive(\"tar\");\n+//    }\n+    public void testEmptyZipArchive() throws Exception {\n+        checkEmptyArchive(\"zip\");\n+    }\n+\n+    private void checkEmptyArchive(String type) throws Exception{\n+        File ar = createEmptyArchive(type); // will be deleted by tearDown()\n+        ar.deleteOnExit(); // Just in case file cannot be deleted\n+        ArchiveInputStream ais = null;\n+        BufferedInputStream in = null;\n+        try {\n+            in = new BufferedInputStream(new FileInputStream(ar));\n+            ais = factory.createArchiveInputStream(in);\n+        } catch (ArchiveException ae) {\n+            fail(\"Should have recognised empty archive for \"+type);\n+        } finally {\n+            if (ais != null) {\n+                ais.close(); // will close input as well\n+            } else if (in != null){\n+                in.close();\n+            }\n+        }\n+    }\n }", "timestamp": 1238374026, "metainfo": ""}