{"sha": "811fb4e1f7cb0b87d9af62cc892ac06a413eb560", "log": "COMPRESS-191 add checksum check to TarArchiveEntry.  Submitted by Jukka Zitting.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n     /** The entry's modification time. */\n     private long modTime;\n \n+    /** If the header checksum is reasonably correct. */\n+    private boolean checkSumOK;\n+\n     /** The entry's link flag. */\n     private byte linkFlag;\n \n     /** {@inheritDoc} */\n     public Date getLastModifiedDate() {\n         return getModTime();\n+    }\n+\n+    /**\n+     * Get this entry's checksum status.\n+     *\n+     * @return if the header checksum is reasonably correct\n+     * @see TarUtils#verifyCheckSum(byte[])\n+     * @since 1.5\n+     */\n+    public boolean isCheckSumOK() {\n+        return checkSumOK;\n     }\n \n     /**\n         offset += SIZELEN;\n         modTime = TarUtils.parseOctalOrBinary(header, offset, MODTIMELEN);\n         offset += MODTIMELEN;\n+        checkSumOK = TarUtils.verifyCheckSum(header);\n         offset += CHKSUMLEN;\n         linkFlag = header[offset++];\n         linkName = oldStyle ? TarUtils.parseName(header, offset, NAMELEN)\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n     int    CHKSUMLEN = 8;\n \n     /**\n+     * Offset of the checksum field within header record.\n+     */\n+    int    CHKSUM_OFFSET = 148;\n+\n+    /**\n      * The length of the size field in a header buffer.\n      * Includes the trailing space or NUL.\n      */\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n  */\n package org.apache.commons.compress.archivers.tar;\n \n+import static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUMLEN;\n+import static org.apache.commons.compress.archivers.tar.TarConstants.CHKSUM_OFFSET;\n+\n import java.io.IOException;\n import java.math.BigInteger;\n import java.nio.ByteBuffer;\n         return sum;\n     }\n \n+    /**\n+     * Wikipedia <a href=\"http://en.wikipedia.org/wiki/Tar_(file_format)#File_header\">says</a>:\n+     * <blockquote>\n+     * The checksum is calculated by taking the sum of the unsigned byte values\n+     * of the header block with the eight checksum bytes taken to be ascii\n+     * spaces (decimal value 32). It is stored as a six digit octal number with\n+     * leading zeroes followed by a NUL and then a space. Various\n+     * implementations do not adhere to this format. For better compatibility,\n+     * ignore leading and trailing whitespace, and get the first six digits. In\n+     * addition, some historic tar implementations treated bytes as signed.\n+     * Implementations typically calculate the checksum both ways, and treat it\n+     * as good if either the signed or unsigned sum matches the included\n+     * checksum.\n+     * </blockquote>\n+     * <p>\n+     * In addition there are\n+     * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-117\">some tar files</a>\n+     * that seem to have parts of their header cleared to zero (no detectable\n+     * magic bytes, etc.) but still have a reasonable-looking checksum field\n+     * present. It looks like we can detect such cases reasonably well by\n+     * checking whether the stored checksum is <em>greater than</em> the\n+     * computed unsigned checksum. That check is unlikely to pass on some\n+     * random file header, as it would need to have a valid sequence of\n+     * octal digits in just the right place.\n+     * <p>\n+     * The return value of this method should be treated as a best-effort\n+     * heuristic rather than an absolute and final truth. The checksum\n+     * verification logic may well evolve over time as more special cases\n+     * are encountered.\n+     *\n+     * @param header tar header\n+     * @return whether the checksum is reasonably good\n+     * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-191\">COMPRESS-191</a>\n+     * @since 1.5\n+     */\n+    public static boolean verifyCheckSum(byte[] header) {\n+        long storedSum = 0;\n+        long unsignedSum = 0;\n+        long signedSum = 0;\n+\n+        int digits = 0;\n+        for (int i = 0; i < header.length; i++) {\n+            byte b = header[i];\n+            if (CHKSUM_OFFSET  <= i && i < CHKSUM_OFFSET + CHKSUMLEN) {\n+                if ('0' <= b && b <= '7' && digits++ < 6) {\n+                    storedSum = storedSum * 8 + b - '0';\n+                } else if (digits > 0) {\n+                    digits = 6; // only look at the first octal digit sequence\n+                }\n+                b = ' ';\n+            }\n+            unsignedSum += 0xff & b;\n+            signedSum += b;\n+        }\n+\n+        return storedSum == unsignedSum || storedSum == signedSum\n+                || storedSum > unsignedSum; // COMPRESS-177\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java\n             t = tin.getNextTarEntry();\n             assertNotNull(t);\n             assertEquals(\"/\", t.getName());\n+            assertTrue(t.isCheckSumOK());\n             t = tin.getNextTarEntry();\n             assertNotNull(t);\n             assertEquals(\"foo.txt\", t.getName());\n+            assertTrue(t.isCheckSumOK());\n             t = tin.getNextTarEntry();\n             assertNotNull(t);\n             assertEquals(\"bar.txt\", t.getName());\n+            assertTrue(t.isCheckSumOK());\n             t = tin.getNextTarEntry();\n             assertNotNull(t);\n             assertEquals(\"baz.txt\", t.getName());\n+            assertTrue(t.isCheckSumOK());\n         } finally {\n             if (tin != null) {\n                 tin.close();\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n             assertEquals(\"sample/link-to-txt-file.lnk\", tae.getName());\n             assertEquals(new Date(0), tae.getLastModifiedDate());\n             assertTrue(tae.isSymbolicLink());\n+            assertTrue(tae.isCheckSumOK());\n         } finally {\n             if (in != null) {\n                 in.close();\n             cal.set(1969, 11, 31, 23, 59, 59);\n             cal.set(Calendar.MILLISECOND, 0);\n             assertEquals(cal.getTime(), tae.getLastModifiedDate());\n+            assertTrue(tae.isCheckSumOK());\n         } finally {\n             if (in != null) {\n                 in.close();\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n         assertEquals(-3601l, TarUtils.parseOctalOrBinary(b, 0, 8));\n     }\n \n+    // https://issues.apache.org/jira/browse/COMPRESS-191\n+    public void testVerifyHeaderCheckSum() {\n+        byte[] valid = { // from bla.tar\n+                116, 101, 115, 116, 49, 46, 120, 109, 108, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 48, 48, 48, 48, 54, 52, 52, 0, 48, 48, 48, 48, 55, 54, 53,\n+                0, 48, 48, 48, 48, 55, 54, 53, 0, 48, 48, 48, 48, 48, 48, 48,\n+                49, 49, 52, 50, 0, 49, 48, 55, 49, 54, 53, 52, 53, 54, 50, 54,\n+                0, 48, 49, 50, 50, 54, 48, 0, 32, 48, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 117, 115, 116, 97, 114, 32, 32, 0,\n+                116, 99, 117, 114, 100, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 116, 99, 117,\n+                114, 100, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0 };\n+        assertTrue(TarUtils.verifyCheckSum(valid));\n+\n+        byte[] compress117 = { // from COMPRESS-117\n+                116, 101, 115, 116, 49, 46, 120, 109, 108, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 48, 48, 48, 48, 54, 52, 52, 0, 48, 48, 48, 48, 55, 54, 53,\n+                0, 48, 48, 48, 48, 55, 54, 53, 0, 48, 48, 48, 48, 48, 48, 48,\n+                49, 49, 52, 50, 0, 49, 48, 55, 49, 54, 53, 52, 53, 54, 50, 54,\n+                0, 48, 49, 50, 50, 54, 48, 0, 32, 48, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n+        assertTrue(TarUtils.verifyCheckSum(compress117));\n+\n+        byte[] invalid = { // from the testAIFF.aif file in Tika\n+                70, 79, 82, 77, 0, 0, 15, 46, 65, 73, 70, 70, 67, 79, 77, 77,\n+                0, 0, 0, 18, 0, 2, 0, 0, 3, -64, 0, 16, 64, 14, -84, 68, 0, 0,\n+                0, 0, 0, 0, 83, 83, 78, 68, 0, 0, 15, 8, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 1, -1, -1, 0, 1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1,\n+                0, 0, 0, 0, 0, 0, -1, -1, 0, 2, -1, -2, 0, 2, -1, -1, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 1, -1, -1, 0, 0, -1, -1, 0, 1, 0, 0, 0, 0,\n+                0, 0, 0, 1, -1, -1, 0, 1, -1, -2, 0, 1, -1, -1, 0, 1, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0,\n+                2, -1, -2, 0, 2, -1, -1, 0, 0, 0, 1, -1, -1, 0, 1, -1, -1, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -2, 0, 2, -1, -2, 0, 1, 0, 0,\n+                0, 1, -1, -1, 0, 0, 0, 1, -1, -1, 0, 0, 0, 1, -1, -2, 0, 2,\n+                -1, -1, 0, 0, 0, 0, 0, 0, -1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 1, -1, -1, 0, 2, -1, -2,\n+                0, 2, -1, -2, 0, 2, -1, -2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, -1,\n+                -2, 0, 2, -1, -2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                -1, -1, 0, 1, 0, 0, -1, -1, 0, 2, -1, -2, 0, 2, -1, -1, 0, 0,\n+                0, 0, 0, 0, -1, -1, 0, 1, -1, -1, 0, 1, -1, -1, 0, 2, -1, -2,\n+                0, 1, 0, 0, -1, -1, 0, 2, -1, -2, 0, 2, -1, -2, 0, 1, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -1, 0, 0, 0,\n+                0, -1, -1, 0, 1, 0, 0, 0, 0, 0, 1, -1, -1, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -2, 0, 2, -1, -1, 0,\n+                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, -2, 0, 1, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 0, 1, -1, -1, 0, 0, 0, 0, -1, -1, 0, 2, -1, -2,\n+                0, 2, -1, -2, 0, 2, -1, -1, 0, 0, 0, 0, -1, -1, 0, 1, -1, -1,\n+                0, 1, -1, -1, 0, 1, -1, -1, 0, 1, -1, -1, 0, 1, 0, 0, 0, 0,\n+                -1, -1, 0, 2, -1, -2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n+                1, -1, -1, 0, 0, 0, 0, -1, -1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n+                0, 0, 0, 0, 0, 1 };\n+        assertFalse(TarUtils.verifyCheckSum(invalid));\n+    }\n+\n }", "timestamp": 1341638379, "metainfo": ""}