{"sha": "56b7c80e21a70fa5aabd1c905b3f7a2ce4f1503c", "log": "COMPRESS-147 and COMPRESS-243 - add .Z and Snappy to Factory  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import org.apache.commons.compress.compressors.xz.XZUtils;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;\n+import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;\n+import org.apache.commons.compress.compressors.snappy.SnappyCompressorInputStream;\n+import org.apache.commons.compress.compressors.z.ZCompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n \n /**\n      * @since 1.6\n      */\n     public static final String LZMA = \"lzma\";\n+\n+    /**\n+     * Constant used to identify the \"framed\" Snappy compression method.\n+     * @since 1.7\n+     */\n+    public static final String SNAPPY_FRAMED = \"snappy-framed\";\n+\n+    /**\n+     * Constant used to identify the \"raw\" Snappy compression method.\n+     * @since 1.7\n+     */\n+    public static final String SNAPPY_RAW = \"snappy-raw\";\n+\n+    /**\n+     * Constant used to identify the traditional Unix compress method.\n+     * @since 1.7\n+     */\n+    public static final String Z = \"z\";\n \n     private boolean decompressConcatenated = false;\n \n                 return new Pack200CompressorInputStream(in);\n             }\n \n+            if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {\n+                return new FramedSnappyCompressorInputStream(in);\n+            }\n+\n         } catch (IOException e) {\n             throw new CompressorException(\"Failed to detect Compressor from InputStream.\", e);\n         }\n     /**\n      * Create a compressor input stream from a compressor name and an input stream.\n      * \n-     * @param name of the compressor, i.e. \"gz\", \"bzip2\", \"xz\", \"lzma\", or \"pack200\"\n+     * @param name of the compressor, i.e. \"gz\", \"bzip2\", \"xz\",\n+     *        \"lzma\", \"snappy-raw\", \"snappy-framed\", \"pack200\", \"z\"\n      * @param in the input stream\n      * @return compressor input stream\n      * @throws CompressorException if the compressor name is not known\n \n             if (PACK200.equalsIgnoreCase(name)) {\n                 return new Pack200CompressorInputStream(in);\n+            }\n+\n+            if (SNAPPY_RAW.equalsIgnoreCase(name)) {\n+                return new SnappyCompressorInputStream(in);\n+            }\n+\n+            if (SNAPPY_FRAMED.equalsIgnoreCase(name)) {\n+                return new FramedSnappyCompressorInputStream(in);\n+            }\n+\n+            if (Z.equalsIgnoreCase(name)) {\n+                return new ZCompressorInputStream(in);\n             }\n \n         } catch (IOException e) {\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n             }\n         }\n     }\n+\n+    protected static interface StreamWrapper<I extends InputStream> {\n+        I wrap(InputStream in) throws Exception;\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.util.Arrays;\n \n import org.apache.commons.compress.AbstractTestCase;\n         assertTrue(FramedSnappyCompressorInputStream.matches(b, 12));\n     }\n \n-    public void testDefaultExtraction() throws IOException {\n+    public void testDefaultExtraction() throws Exception {\n+        testUnarchive(new StreamWrapper<CompressorInputStream>() {\n+            public CompressorInputStream wrap(InputStream is) throws IOException {\n+                return new FramedSnappyCompressorInputStream(is);\n+            }\n+        });\n+    }\n+\n+    public void testDefaultExtractionViaFactory() throws Exception {\n+        testUnarchive(new StreamWrapper<CompressorInputStream>() {\n+            public CompressorInputStream wrap(InputStream is) throws Exception {\n+                return new CompressorStreamFactory()\n+                    .createCompressorInputStream(CompressorStreamFactory.SNAPPY_FRAMED,\n+                                                 is);\n+            }\n+        });\n+    }\n+\n+    public void testDefaultExtractionViaFactoryAutodetection() throws Exception {\n+        testUnarchive(new StreamWrapper<CompressorInputStream>() {\n+            public CompressorInputStream wrap(InputStream is) throws Exception {\n+                return new CompressorStreamFactory().createCompressorInputStream(is);\n+            }\n+        });\n+    }\n+\n+    private void testUnarchive(StreamWrapper<CompressorInputStream> wrapper) throws Exception {\n         final File input = getFile(\"bla.tar.sz\");\n         final File output = new File(dir, \"bla.tar\");\n         final FileInputStream is = new FileInputStream(input);\n         try {\n-            final CompressorInputStream in =\n-                new FramedSnappyCompressorInputStream(is);\n+            // the intermediate BufferedInputStream is there for mark\n+            // support in the autodetection test\n+            final CompressorInputStream in = wrapper.wrap(new BufferedInputStream(is));\n             FileOutputStream out = null;\n             try {\n                 out = new FileOutputStream(output);\n--- a/src/test/java/org/apache/commons/compress/compressors/ZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/ZTestCase.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n \n import org.apache.commons.compress.AbstractTestCase;\n public final class ZTestCase extends AbstractTestCase {\n \n     public void testZUnarchive() throws Exception {\n+        testUnarchive(new StreamWrapper<CompressorInputStream>() {\n+            public CompressorInputStream wrap(InputStream is) throws IOException {\n+                return new ZCompressorInputStream(is);\n+            }\n+        });\n+    }\n+\n+    public void testZUnarchiveViaFactory() throws Exception {\n+        testUnarchive(new StreamWrapper<CompressorInputStream>() {\n+            public CompressorInputStream wrap(InputStream is) throws Exception {\n+                return new CompressorStreamFactory()\n+                    .createCompressorInputStream(CompressorStreamFactory.Z, is);\n+            }\n+        });\n+    }\n+\n+    private void testUnarchive(StreamWrapper wrapper) throws Exception {\n         final File input = getFile(\"bla.tar.Z\");\n         final File output = new File(dir, \"bla.tar\");\n         final InputStream is = new FileInputStream(input);\n         try {\n-            final CompressorInputStream in = new ZCompressorInputStream(is);\n+            final InputStream in = wrapper.wrap(is);\n             FileOutputStream out = null;\n             try {\n                 out = new FileOutputStream(output);\n             is.close();\n         }\n     }\n+\n }", "timestamp": 1385881437, "metainfo": ""}