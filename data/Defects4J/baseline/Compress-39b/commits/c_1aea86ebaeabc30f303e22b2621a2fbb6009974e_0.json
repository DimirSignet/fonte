{"sha": "1aea86ebaeabc30f303e22b2621a2fbb6009974e", "log": "ensure the CRC is correct for empty entries, with this 7ZIP likes the 100K files written to stream archive as well  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n             throw new IOException(\"No current entry to close\");\n         }\n \n+        if (!entry.hasWritten) {\n+            write(new byte[0], 0, 0);\n+        }\n+\n         if (entry.entry.getMethod() == DEFLATED) {\n             def.finish();\n             while (!def.finished()) {\n     @Override\n     public void write(byte[] b, int offset, int length) throws IOException {\n         ZipUtil.checkRequestedFeatures(entry.entry);\n+        entry.hasWritten = true;\n         if (entry.entry.getMethod() == DEFLATED) {\n             if (length > 0 && !def.finished()) {\n                 entry.bytesRead += length;\n          * Whether current entry was the first one using ZIP64 features.\n          */\n         private boolean causedUseOfZip64 = false;\n+        /**\n+         * Whether write() has been called at all.\n+         *\n+         * <p>In order to create a valid archive {@link\n+         * #closeArchiveEntry closeArchiveEntry} will write an empty\n+         * array to get the CRC right if nothing has been written to\n+         * the stream at all.</p>\n+         */\n+        private boolean hasWritten;\n     }\n \n }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n         read100KFilesImpl(get100KFileFileGeneratedByJava7Jar());\n     }\n \n+    @Ignore\n     @Test public void read5GBOfZerosUsingZipFile() throws Throwable {\n         read5GBOfZerosUsingZipFileImpl(get5GBZerosFile(), \"5GB_of_Zeros\");\n     }\n \n+    @Ignore\n     @Test public void read5GBOfZerosGeneratedBy7ZIPUsingZipFile()\n         throws Throwable {\n         read5GBOfZerosUsingZipFileImpl(get5GBZerosFileGeneratedBy7ZIP(),\n         withTemporaryArchive(\"write100KFilesFile\", write100KFiles, true);\n     }\n \n-    @Ignore\n     @Test public void write100KFilesStream() throws Throwable {\n         withTemporaryArchive(\"write100KFilesStream\", write100KFiles, false);\n     }\n \n+    @Ignore\n     @Test public void readSelfGenerated100KFilesUsingZipFile()\n         throws Throwable {\n         withTemporaryArchive(\"readSelfGenerated100KFilesUsingZipFile()\",\n                              true);\n     }\n \n+    @Ignore\n     @Test public void write3EntriesCreatingBigArchiveStream() throws Throwable {\n         withTemporaryArchive(\"write3EntriesCreatingBigArchiveStream\",\n                              write3EntriesCreatingBigArchive,\n                              false);\n     }\n \n+    @Ignore\n     @Test public void read3EntriesCreatingBigArchiveFileUsingZipFile()\n         throws Throwable {\n         withTemporaryArchive(\"read3EntriesCreatingBigArchiveFileUsingZipFile\",", "timestamp": 1312453686, "metainfo": ""}