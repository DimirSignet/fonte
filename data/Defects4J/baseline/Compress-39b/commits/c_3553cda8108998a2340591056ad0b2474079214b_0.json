{"sha": "3553cda8108998a2340591056ad0b2474079214b", "log": "compile without warnings using -Xlint:unchecked  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n      */\n     private final short entryFormat;\n \n-    private final HashMap names = new HashMap();\n+    private final HashMap<String, CpioArchiveEntry> names =\n+        new HashMap<String, CpioArchiveEntry>();\n \n     private long crc = 0;\n \n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n \n     private void paxHeaders() throws IOException{\n         BufferedReader br = new BufferedReader(new InputStreamReader(this, \"UTF-8\"));\n-        Map headers = new HashMap();\n+        Map<String, String> headers = new HashMap<String, String>();\n         // Format is \"length keyword=value\\n\";\n         while(true){ // get length\n             int ch;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java\n      * A character entity, which is put to the reverse mapping table\n      * of a simple encoding.\n      */\n-    private static final class Simple8BitChar implements Comparable {\n+    private static final class Simple8BitChar implements Comparable<Simple8BitChar> {\n         public final char unicode;\n         public final byte code;\n \n             this.unicode = unicode;\n         }\n \n-        public int compareTo(Object o) {\n-            Simple8BitChar a = (Simple8BitChar) o;\n-\n+        public int compareTo(Simple8BitChar a) {\n             return this.unicode - a.unicode;\n         }\n \n      */\n     public Simple8BitZipEncoding(char[] highChars) {\n         this.highChars = (char[]) highChars.clone();\n-        List temp = new ArrayList<Simple8BitChar>(this.highChars.length);\n+        List<Simple8BitChar> temp =\n+            new ArrayList<Simple8BitChar>(this.highChars.length);\n \n         byte code = 127;\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n         if (ze instanceof UnparseableExtraFieldData) {\n             unparseableExtra = (UnparseableExtraFieldData) ze;\n         } else {\n-            LinkedHashMap copy = extraFields;\n+            LinkedHashMap<ZipShort, ZipExtraField> copy = extraFields;\n             extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();\n             extraFields.put(ze.getHeaderId(), ze);\n             if (copy != null) {\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n  */\n public final class ChangeSet {\n \n-    private final Set changes = new LinkedHashSet();\n+    private final Set<Change> changes = new LinkedHashSet<Change>();\n \n     /**\n      * Deletes the file with the filename from the archive. \n      * are not reflected on this ChangeSet and vice versa.\n      * @return the changes as a copy\n      */\n-    Set getChanges() {\n-        return new LinkedHashSet(changes);\n+    Set<Change> getChanges() {\n+        return new LinkedHashSet<Change>(changes);\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java\n  * @Immutable\n  */\n public class ChangeSetPerformer {\n-    private final Set changes;\n+    private final Set<Change> changes;\n     \n     /**\n      * Constructs a ChangeSetPerformer with the changes from this ChangeSet\n             throws IOException {\n         ChangeSetResults results = new ChangeSetResults();\n         \n-        Set workingSet = new LinkedHashSet(changes);\n+        Set<Change> workingSet = new LinkedHashSet<Change>(changes);\n         \n-        for (Iterator it = workingSet.iterator(); it.hasNext();) {\n-            Change change = (Change) it.next();\n+        for (Iterator<Change> it = workingSet.iterator(); it.hasNext();) {\n+            Change change = it.next();\n \n             if (change.type() == Change.TYPE_ADD && change.isReplaceMode()) {\n                 copyStream(change.getInput(), out, change.getEntry());\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java\n  * Stores the results of an performed ChangeSet operation.\n  */\n public class ChangeSetResults {\n-    private final List addedFromChangeSet = new ArrayList();\n-    private final List addedFromStream = new ArrayList();\n-    private final List deleted = new ArrayList();\n+    private final List<String> addedFromChangeSet = new ArrayList<String>();\n+    private final List<String> addedFromStream = new ArrayList<String>();\n+    private final List<String> deleted = new ArrayList<String>();\n     \n     /**\n      * Adds the filename of a recently deleted file to the result list.\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n      * suffixes are mapped to the empty string, as they should simply be\n      * removed from the filename when the file is uncompressed.\n      */\n-    private static final Map uncompressSuffix = new HashMap();\n+    private static final Map<String, String> uncompressSuffix =\n+        new HashMap<String, String>();\n \n     static {\n         uncompressSuffix.put(\".tbz2\", \".tar\");\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java\n      * Map from common filename suffixes to the suffixes that identify gzipped\n      * versions of those file types. For example: from \".tar\" to \".tgz\".\n      */\n-    private static final Map compressSuffix = new HashMap();\n+    private static final Map<String, String> compressSuffix =\n+        new HashMap<String, String>();\n \n     /**\n      * Map from common filename suffixes of gzipped files to the corresponding\n      * These suffixes are mapped to the empty string, as they should simply\n      * be removed from the filename when the file is uncompressed.\n      */\n-    private static final Map uncompressSuffix = new HashMap();\n+    private static final Map<String, String> uncompressSuffix =\n+        new HashMap<String, String>();\n \n     static {\n         compressSuffix.put(\".tar\", \".tgz\");\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n     protected File resultDir;\n \n     private File archive; // used to delete the archive in tearDown\n-    protected List archiveList; // Lists the content of the archive as originally created\n+    protected List<String> archiveList; // Lists the content of the archive as originally created\n     \n     protected ArchiveStreamFactory factory = new ArchiveStreamFactory();\n \n         OutputStream stream = null;\n         try {\n             archive = File.createTempFile(\"test\", \".\" + archivename);\n-            archiveList = new ArrayList();\n+            archiveList = new ArrayList<String>();\n \n             stream = new FileOutputStream(archive);\n             out = factory.createArchiveOutputStream(archivename, stream);\n     protected File createEmptyArchive(String archivename) throws Exception {\n         ArchiveOutputStream out = null;\n         OutputStream stream = null;\n-        archiveList = new ArrayList();\n+        archiveList = new ArrayList<String>();\n         try {\n             archive = File.createTempFile(\"empty\", \".\" + archivename);\n             stream = new FileOutputStream(archive);\n     protected File createSingleEntryArchive(String archivename) throws Exception {\n         ArchiveOutputStream out = null;\n         OutputStream stream = null;\n-        archiveList = new ArrayList();\n+        archiveList = new ArrayList<String>();\n         try {\n             archive = File.createTempFile(\"empty\", \".\" + archivename);\n             stream = new FileOutputStream(archive);\n      *            a list with expected string filenames\n      * @throws Exception\n      */\n-    protected void checkArchiveContent(File archive, List expected)\n+    protected void checkArchiveContent(File archive, List<String> expected)\n             throws Exception {\n         final InputStream is = new FileInputStream(archive);\n         try {\n      * @param expected list of expected entries or <code>null</code> if no check of names desired\n      * @throws Exception\n      */\n-    protected void checkArchiveContent(ArchiveInputStream in, List expected)\n+    protected void checkArchiveContent(ArchiveInputStream in, List<String> expected)\n             throws Exception {\n         checkArchiveContent(in, expected, true);\n     }\n      * @return returns the created result file if cleanUp = false, or null otherwise \n      * @throws Exception\n      */\n-    protected File checkArchiveContent(ArchiveInputStream in, List expected, boolean cleanUp)\n+    protected File checkArchiveContent(ArchiveInputStream in, List<String> expected, boolean cleanUp)\n             throws Exception {\n         File result = File.createTempFile(\"dir-result\", \"\");\n         result.delete();\n--- a/src/test/java/org/apache/commons/compress/ArchiveReadTests.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveReadTests.java\n     final static ClassLoader classLoader = ArchiveReadTests.class.getClassLoader();\n \n     private File file;\n-    private static final ArrayList fileList = new ArrayList();\n+    private static final ArrayList<String> fileList = new ArrayList<String>();\n     \n     public ArchiveReadTests(String name) {\n         super(name);\n     }\n \n     public void testArchive() throws Exception{\n-        ArrayList expected=(ArrayList) fileList.clone();\n+        @SuppressWarnings(\"unchecked\")\n+        ArrayList<String> expected= (ArrayList<String>) fileList.clone();\n         try {\n            checkArchiveContent(file, expected);\n         } catch (ArchiveException e) {\n--- a/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is);\n \n \n-        Map result = new HashMap();\n+        Map<String, File> result = new HashMap<String, File>();\n         ArchiveEntry entry = null;\n         while ((entry = in.getNextEntry()) != null) {\n             File cpioget = new File(dir, entry.getName());\n         in.close();\n         is.close();\n \n-        File t = (File)result.get(\"test1.xml\");\n+        File t = result.get(\"test1.xml\");\n         assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists());\n         assertEquals(\"length of \" + t.getAbsolutePath(), file1Length, t.length());\n \n-        t = (File)result.get(\"test2.xml\");\n+        t = result.get(\"test2.xml\");\n         assertTrue(\"Expected \" + t.getAbsolutePath() + \" to exist\", t.exists());\n         assertEquals(\"length of \" + t.getAbsolutePath(), file2Length, t.length());\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n \n     private File file;\n \n-    private static final ArrayList fileList = new ArrayList();\n+    private static final ArrayList<String> fileList = new ArrayList<String>();\n \n     private final ArchiveStreamFactory factory = new ArchiveStreamFactory();\n     \n     }\n     \n     public void testArchive() throws Exception {\n-        ArrayList expected=(ArrayList) fileList.clone();\n+        @SuppressWarnings(\"unchecked\")\n+        ArrayList<String> expected = (ArrayList<String>) fileList.clone();\n         String name = file.getName();\n         if (\"minotaur.jar\".equals(name) || \"minotaur-0.jar\".equals(name)){\n             expected.add(\"META-INF/\");\n             // CPIO does not store directories or directory names\n             expected.clear();\n             for(int i=0; i < fileList.size(); i++){\n-                String ent = (String) fileList.get(i);\n+                String ent = fileList.get(i);\n                 if (!ent.endsWith(\"/\")){// not a directory\n                     final int lastSlash = ent.lastIndexOf('/');\n                     if (lastSlash >= 0) { // extract path name\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n         out.close();\n \n         // Unarchive the same\n-        List results = new ArrayList();\n+        List<File> results = new ArrayList<File>();\n \n         final InputStream is = new FileInputStream(output);\n         ArchiveInputStream in = null;\n         is.close();\n \n         assertEquals(results.size(), 2);\n-        File result = (File)results.get(0);\n+        File result = results.get(0);\n         assertEquals(file1.length(), result.length());\n-        result = (File)results.get(1);\n+        result = results.get(1);\n         assertEquals(file2.length(), result.length());\n     }\n \n     public void testListAllFilesWithNestedArchive() throws Exception {\n         final File input = getFile(\"OSX_ArchiveWithNestedArchive.zip\");\n        \n-        List results = new ArrayList();\n+        List<String> results = new ArrayList<String>();\n \n         final InputStream is = new FileInputStream(input);\n         ArchiveInputStream in = null;\n--- a/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java\n public class ArArchiveInputStreamTest extends AbstractTestCase {\n \n     public void testReadLongNamesGNU() throws Exception {\n-        ArrayList l = new ArrayList();\n+        ArrayList<String> l = new ArrayList<String>();\n         l.add(\"this_is_a_long_file_name.txt\");\n         checkArchiveContent(getFile(\"longfile_gnu.ar\"), l);\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n \n     public void testCDOrder() throws Exception {\n         readOrderTest();\n-        ArrayList l = Collections.list(zf.getEntries());\n+        @SuppressWarnings(\"unchecked\")\n+        ArrayList<ZipArchiveEntry> l = Collections.list(zf.getEntries());\n         assertEntryName(l, 0, \"AbstractUnicodeExtraField\");\n         assertEntryName(l, 1, \"AsiExtraField\");\n         assertEntryName(l, 2, \"ExtraFieldUtils\");\n \n     public void testPhysicalOrder() throws Exception {\n         readOrderTest();\n-        ArrayList l = Collections.list(zf.getEntriesInPhysicalOrder());\n+        @SuppressWarnings(\"unchecked\")\n+        ArrayList<ZipArchiveEntry> l = Collections.list(zf.getEntriesInPhysicalOrder());\n         assertEntryName(l, 0, \"AbstractUnicodeExtraField\");\n         assertEntryName(l, 1, \"AsiExtraField\");\n         assertEntryName(l, 2, \"ExtraFieldUtils\");\n         zf = new ZipFile(archive);\n     }\n \n-    private static void assertEntryName(ArrayList entries, int index,\n+    private static void assertEntryName(ArrayList<ZipArchiveEntry> entries,\n+                                        int index,\n                                         String expectedName) {\n         ZipArchiveEntry ze = (ZipArchiveEntry) entries.get(index);\n         assertEquals(\"src/main/java/org/apache/commons/compress/archivers/zip/\"\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n                 ais.close();\n         }\n \n-        List expected = new ArrayList();\n+        List<String> expected = new ArrayList<String>();\n         expected.add(\"test1.xml\");\n \n         this.checkArchiveContent(temp, expected);\n             if (ais != null)\n                 ais.close();\n         }\n-        List expected = new ArrayList();\n+        List<String> expected = new ArrayList<String>();\n         expected.add(\"test1.xml\");\n         this.checkArchiveContent(temp, expected);\n     }\n             if (ais != null)\n                 ais.close();\n         }\n-        List expected = new ArrayList();\n+        List<String> expected = new ArrayList<String>();\n         expected.add(\"test1.xml\");\n         this.checkArchiveContent(temp, expected);\n     }\n             if (ais != null)\n                 ais.close();\n         }\n-        List expected = new ArrayList();\n+        List<String> expected = new ArrayList<String>();\n         expected.add(\"test1.xml\");\n         expected.add(\"testdata/test.txt\");\n         final ArchiveInputStream in = factory.createArchiveInputStream(\"tar\", new FileInputStream(temp));\n             if (ais != null)\n                 ais.close();\n         }\n-        List expected = new ArrayList();\n+        List<String> expected = new ArrayList<String>();\n         expected.add(\"test1.xml\");\n         expected.add(\"testdata/test.txt\");\n         this.checkArchiveContent(temp, expected);\n                 ais.close();\n         }\n \n-        List expected = new ArrayList();\n+        List<String> expected = new ArrayList<String>();\n         expected.add(\"test1.xml\");\n         this.checkArchiveContent(temp, expected);\n     }\n             if (ais != null)\n                 ais.close();\n         }\n-        List expected = new ArrayList();\n+        List<String> expected = new ArrayList<String>();\n         expected.add(\"test1.xml\");\n         expected.add(\"test.txt\");\n         this.checkArchiveContent(temp, expected);", "timestamp": 1312635676, "metainfo": ""}