{"sha": "32619a8f4b14a633fcaed2c8a848d73cc726ad2e", "log": "allow the encoding to be specified when writing tar archives  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n      * @param outbuf The tar entry header buffer to fill in.\n      */\n     public void writeEntryHeader(byte[] outbuf) {\n-        writeEntryHeader(outbuf, false);\n+        try {\n+            writeEntryHeader(outbuf, TarUtils.DEFAULT_ENCODING, false);\n+        } catch (IOException ex) {\n+            try {\n+                writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);\n+            } catch (IOException ex2) {\n+                // impossible\n+                throw new RuntimeException(ex2);\n+            }\n+        }\n     }\n \n     /**\n      * Write an entry's header information to a header buffer.\n      *\n      * @param outbuf The tar entry header buffer to fill in.\n+     * @param encoding encoding to use when writing the file name.\n      * @param starMode whether to use the star/GNU tar/BSD tar\n      * extension for numeric fields if their value doesn't fit in the\n      * maximum size of standard tar archives\n      * @since Apache Commons Compress 1.4\n      */\n-    public void writeEntryHeader(byte[] outbuf, boolean starMode) {\n+    public void writeEntryHeader(byte[] outbuf, ZipEncoding encoding,\n+                                 boolean starMode) throws IOException {\n         int offset = 0;\n \n-        offset = TarUtils.formatNameBytes(name, outbuf, offset, NAMELEN);\n+        offset = TarUtils.formatNameBytes(name, outbuf, offset, NAMELEN,\n+                                          encoding);\n         offset = writeEntryHeaderField(mode, outbuf, offset, MODELEN, starMode);\n         offset = writeEntryHeaderField(userId, outbuf, offset, UIDLEN,\n                                        starMode);\n         }\n \n         outbuf[offset++] = linkFlag;\n-        offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN);\n+        offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN,\n+                                          encoding);\n         offset = TarUtils.formatNameBytes(magic, outbuf, offset, MAGICLEN);\n         offset = TarUtils.formatNameBytes(version, outbuf, offset, VERSIONLEN);\n-        offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN);\n-        offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN);\n+        offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN,\n+                                          encoding);\n+        offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN,\n+                                          encoding);\n         offset = writeEntryHeaderField(devMajor, outbuf, offset, DEVLEN,\n                                        starMode);\n         offset = writeEntryHeaderField(devMinor, outbuf, offset, DEVLEN,\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n         }\n         TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n         Map<String, String> paxHeaders = new HashMap<String, String>();\n-        if (entry.getName().length() >= TarConstants.NAMELEN) {\n+        final byte[] nameBytes = encoding.encode(entry.getName()).array();\n+        if (nameBytes.length >= TarConstants.NAMELEN) {\n \n             if (longFileMode == LONGFILE_POSIX) {\n                 paxHeaders.put(\"path\", entry.getName());\n                 TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n                                                                     TarConstants.LF_GNUTYPE_LONGNAME);\n \n-                final byte[] nameBytes = ArchiveUtils.toAsciiBytes(entry.getName());\n                 longLinkEntry.setSize(nameBytes.length + 1); // +1 for NUL\n                 putArchiveEntry(longLinkEntry);\n                 write(nameBytes);\n             writePaxHeaders(entry.getName(), paxHeaders);\n         }\n \n-        entry.writeEntryHeader(recordBuf, bigNumberMode == BIGNUMBER_STAR);\n+        entry.writeEntryHeader(recordBuf, encoding,\n+                               bigNumberMode == BIGNUMBER_STAR);\n         buffer.writeRecord(recordBuf);\n \n         currBytes = 0;\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n      * Encapsulates the algorithms used up to Commons Compress 1.3 as\n      * ZipEncoding.\n      */\n-    private static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {\n+    static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {\n             public boolean canEncode(String name) { return true; }\n \n             public ByteBuffer encode(String name) {", "timestamp": 1332275227, "metainfo": ""}