{"sha": "51eb0f22b20b94fc635ecc64cdcb5f72e0ed0186", "log": "COMPRESS-330 ignore non-zero size for directories", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n      */\n     @Override\n     public int available() throws IOException {\n+        if (isDirectory()) {\n+            return 0;\n+        }\n         if (entrySize - entryOffset > Integer.MAX_VALUE) {\n             return Integer.MAX_VALUE;\n         }\n      */\n     @Override\n     public long skip(final long n) throws IOException {\n-        if (n <= 0) {\n+        if (n <= 0 || isDirectory()) {\n             return 0;\n         }\n \n      * additional space used to fill a record after an entry\n      */\n     private void skipRecordPadding() throws IOException {\n-        if (this.entrySize > 0 && this.entrySize % this.recordSize != 0) {\n+        if (!isDirectory() && this.entrySize > 0 && this.entrySize % this.recordSize != 0) {\n             long numRecords = (this.entrySize / this.recordSize) + 1;\n             long padding = (numRecords * this.recordSize) - this.entrySize;\n             long skipped = IOUtils.skip(is, padding);\n         }\n     }\n \n+    private boolean isDirectory() {\n+        return currEntry != null && currEntry.isDirectory();\n+    }\n+\n     /**\n      * Returns the next Archive Entry in this Stream.\n      *\n     public int read(byte[] buf, int offset, int numToRead) throws IOException {\n     \tint totalRead = 0;\n \n-        if (hasHitEOF || entryOffset >= entrySize) {\n+        if (hasHitEOF || isDirectory() || entryOffset >= entrySize) {\n             return -1;\n         }\n ", "timestamp": 1454692131, "metainfo": ""}