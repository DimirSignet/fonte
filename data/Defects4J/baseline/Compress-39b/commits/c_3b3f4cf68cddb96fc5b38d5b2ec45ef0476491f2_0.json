{"sha": "3b3f4cf68cddb96fc5b38d5b2ec45ef0476491f2", "log": "Unthrown Exception  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n             if (current.usesZip64 && (cSize.equals(ZipLong.ZIP64_MAGIC)\n                                       || size.equals(ZipLong.ZIP64_MAGIC))\n                 ) {\n-                current.entry.setCompressedSize(z64.getCompressedSize()\n+                current.entry.setCompressedSize(z64.getCompressedSize() // z64 cannot be null here\n                                                 .getLongValue());\n                 current.entry.setSize(z64.getSize().getLongValue());\n             } else {\n      * worst case) can be 20 bytes max.</p>\n      */\n     private int cacheBytesRead(ByteArrayOutputStream bos, int offset,\n-                               int lastRead, int expecteDDLen)\n-        throws IOException {\n+                               int lastRead, int expecteDDLen) {\n         final int cacheable = offset + lastRead - expecteDDLen - 3;\n         if (cacheable > 0) {\n             bos.write(buf.buf, 0, cacheable);", "timestamp": 1313934783, "metainfo": ""}