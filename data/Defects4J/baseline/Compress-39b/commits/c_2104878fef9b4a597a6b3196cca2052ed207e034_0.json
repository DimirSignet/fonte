{"sha": "2104878fef9b4a597a6b3196cca2052ed207e034", "log": "fixed deprecations, fixed imports, noticed the TarArchive test data is broken    ", "commit": "\n--- a/src/examples/org/apache/commons/compress/examples/BZip2Example.java\n+++ b/src/examples/org/apache/commons/compress/examples/BZip2Example.java\n import org.apache.commons.compress.CompressException;\n import org.apache.commons.compress.Compressor;\n import org.apache.commons.compress.CompressorFactory;\n-/**\n- * BZIP2 .Example\n- */\n+\n public class BZip2Example {\n-\t/**\n-\t * \n-\t */\n+\n \tpublic BZip2Example() {\n \t\tsuper();\n \t}\n--- a/src/examples/org/apache/commons/compress/examples/Bzip2Compress.java\n+++ b/src/examples/org/apache/commons/compress/examples/Bzip2Compress.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n \n import org.apache.commons.compress.CompressUtils;\n import org.apache.commons.compress.compressors.bzip2.BZip2OutputStream;\n     /**\n      * Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.\n      */\n-    private static void copy( final InputStream input,\n-                              final OutputStream output )\n-        throws IOException\n-    {\n-        final byte[] buffer = new byte[ 8024 ];\n-        int n = 0;\n-        while( -1 != ( n = input.read( buffer ) ) )\n-        {\n-            output.write( buffer, 0, n );\n-        }\n-    }\n+//    private static void copy( final InputStream input,\n+//                              final OutputStream output )\n+//        throws IOException\n+//    {\n+//        final byte[] buffer = new byte[ 8024 ];\n+//        int n = 0;\n+//        while( -1 != ( n = input.read( buffer ) ) )\n+//        {\n+//            output.write( buffer, 0, n );\n+//        }\n+//    }\n }\n--- a/src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java\n+++ b/src/examples/org/apache/commons/compress/examples/Bzip2Uncompress.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n \n import org.apache.commons.compress.CompressUtils;\n import org.apache.commons.compress.compressors.bzip2.BZip2InputStream;\n     /**\n      * Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.\n      */\n-    private static void copy( final InputStream input,\n-                              final OutputStream output )\n-        throws IOException\n-    {\n-        final byte[] buffer = new byte[ 8024 ];\n-        int n = 0;\n-        while( -1 != ( n = input.read( buffer ) ) )\n-        {\n-            output.write( buffer, 0, n );\n-        }\n-    }\n+//    private static void copy( final InputStream input,\n+//                              final OutputStream output )\n+//        throws IOException\n+//    {\n+//        final byte[] buffer = new byte[ 8024 ];\n+//        int n = 0;\n+//        while( -1 != ( n = input.read( buffer ) ) )\n+//        {\n+//            output.write( buffer, 0, n );\n+//        }\n+//    }\n }\n--- a/src/java/org/apache/commons/compress/PackableObject.java\n+++ b/src/java/org/apache/commons/compress/PackableObject.java\n \t\t\n \t\ttry {\n \t\t\t/* Archive result */\n-\t\t\tPackableObject packable = null; \n+\t\t\t//PackableObject packable = null; \n \t\t\t\n \t//\t\t identify archive by header\n \t\t\tfis = new FileInputStream(file);\n--- a/src/java/org/apache/commons/compress/archivers/tar/TarArchive.java\n+++ b/src/java/org/apache/commons/compress/archivers/tar/TarArchive.java\n \t */\n \tpublic void doSave(FileOutputStream output) throws ArchiveException {\n \t\t// Stream initializing\n-\t\tBufferedInputStream origin = null;\n+\t\t//BufferedInputStream origin = null;\n \t\t\n \t\t//out.setMethod(ZipOutputStream.DEFLATED);\n-\t\tbyte data[] = new byte[BUFFER];\n+\t\t//byte data[] = new byte[BUFFER];\n \t\t\n \t\t// get a list of files from current directory\n \t\t// less than one file leads to an exception\n--- a/src/java/org/apache/commons/compress/archivers/tar/TarEntry.java\n+++ b/src/java/org/apache/commons/compress/archivers/tar/TarEntry.java\n      * LF_ constants represent the \"link flag\" of an entry, or more commonly,\n      * the \"entry type\". This is the \"old way\" of indicating a normal file.\n      */\n-    private final static byte LF_OLDNORM = 0;\n+    //private final static byte LF_OLDNORM = 0;\n \n     /**\n      * Normal file type.\n     /**\n      * Link file type.\n      */\n-    private final static byte LF_LINK = (byte)'1';\n+    //private final static byte LF_LINK = (byte)'1';\n \n     /**\n      * Symbolic link file type.\n      */\n-    private final static byte LF_SYMLINK = (byte)'2';\n+    //private final static byte LF_SYMLINK = (byte)'2';\n \n     /**\n      * Character device file type.\n      */\n-    private final static byte LF_CHR = (byte)'3';\n+    //private final static byte LF_CHR = (byte)'3';\n \n     /**\n      * Block device file type.\n      */\n-    private final static byte LF_BLK = (byte)'4';\n+    //private final static byte LF_BLK = (byte)'4';\n \n     /**\n      * Directory file type.\n     /**\n      * FIFO (pipe) file type.\n      */\n-    private final static byte LF_FIFO = (byte)'6';\n+    //private final static byte LF_FIFO = (byte)'6';\n \n     /**\n      * Contiguous file type.\n      */\n-    private final static byte LF_CONTIG = (byte)'7';\n+    //private final static byte LF_CONTIG = (byte)'7';\n \n     /**\n      * The magic tag representing a POSIX tar archive.\n     /**\n      * The magic tag representing a GNU tar archive.\n      */\n-    private final static String GNU_TMAGIC = \"ustar  \";\n+    //private final static String GNU_TMAGIC = \"ustar  \";\n \n     /**\n      * The name of the GNU tar entry which contains a long name.\n      * Identifies the *next* file on the tape as having a long name.\n      */\n     static byte LF_GNUTYPE_LONGNAME = (byte)'L';\n-    \n-    \n-    \n-    \n-    \n     \n     \n     \n--- a/src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java\n+++ b/src/java/org/apache/commons/compress/compressors/bzip2/BZip2Compressor.java\n \tprivate BZip2InputStream getPackedInput( final InputStream input )\n \t\tthrows IOException {\n \t\t// skips the 'BZ' header bytes required by the BZip2InputStream class\n-\t\tfinal int b1 = input.read();\n-\t\tfinal int b2 = input.read();\n+\t\tinput.read();\n+\t\tinput.read();\n \t\treturn new BZip2InputStream( input );\n \t}\n \t\n--- a/src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java\n+++ b/src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java\n     /**\n      * Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.\n      */\n-    private void copy( final InputStream input,\n-                       final OutputStream output )\n-        throws IOException\n-    {\n-        final byte[] buffer = new byte[ 8024 ];\n-        int n = 0;\n-        while( -1 != ( n = input.read( buffer ) ) )\n-        {\n-            output.write( buffer, 0, n );\n-        }\n-    }\n+//    private void copy( final InputStream input,\n+//                       final OutputStream output )\n+//        throws IOException\n+//    {\n+//        final byte[] buffer = new byte[ 8024 ];\n+//        int n = 0;\n+//        while( -1 != ( n = input.read( buffer ) ) )\n+//        {\n+//            output.write( buffer, 0, n );\n+//        }\n+//    }\n \n     private void compareContents( final String initial, final File generated )\n         throws Exception\n--- a/src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java\n+++ b/src/test/org/apache/commons/compress/zip/AsiExtraFieldTestCase.java\n     {\n         final AsiExtraField field = new AsiExtraField();\n         field.setMode( 0123 );\n-        field.setUserId( 5 );\n+        field.setUserID( 5 );\n         field.setGroupId( 6 );\n         return field;\n     }\n         assertTrue( \"plain file, no link\", !field.isLink() );\n         assertTrue( \"plain file, no dir\", !field.isDirectory() );\n         assertEquals( \"mode plain file\", FILE_FLAG | 0123, field.getMode() );\n-        assertEquals( \"uid plain file\", 5, field.getUserId() );\n+        assertEquals( \"uid plain file\", 5, field.getUserID() );\n         assertEquals( \"gid plain file\", 6, field.getGroupID() );\n     }\n \n         assertTrue( \"link, is link\", field.isLink() );\n         assertTrue( \"link, no dir\", !field.isDirectory() );\n         assertEquals( \"mode link\", LINK_FLAG | 0123, field.getMode() );\n-        assertEquals( \"uid link\", 5, field.getUserId() );\n+        assertEquals( \"uid link\", 5, field.getUserID() );\n         assertEquals( \"gid link\", 6, field.getGroupID() );\n         assertEquals( \"test\", field.getLinkedFile() );\n     }\n         assertTrue( \"dir, no link\", !field.isLink() );\n         assertTrue( \"dir, is dir\", field.isDirectory() );\n         assertEquals( \"mode dir\", DIR_FLAG | 0123, field.getMode() );\n-        assertEquals( \"uid dir\", 5, field.getUserId() );\n+        assertEquals( \"uid dir\", 5, field.getUserID() );\n         assertEquals( \"gid dir\", 6, field.getGroupID() );\n     }\n \n--- a/src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java\n+++ b/src/test/org/apache/commons/compress/zip/ExtraFieldUtilsTestCase.java\n         m_field.setMode( 0755 );\n         m_field.setDirectory( true );\n         m_dummy = new UnrecognizedExtraField();\n-        m_dummy.setHeaderId( new ZipShort( 1 ) );\n+        m_dummy.setHeaderID( new ZipShort( 1 ) );\n         m_dummy.setLocalFileDataData( new byte[ 0 ] );\n         m_dummy.setCentralDirectoryData( new byte[]{0} );\n \n--- a/src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java\n+++ b/src/test/org/apache/commons/compress/zip/ZipEntryTestCase.java\n         assertSame( extraField, result[ 1 ] );\n \n         UnrecognizedExtraField u2 = new UnrecognizedExtraField();\n-        u2.setHeaderId( new ZipShort( 1 ) );\n+        u2.setHeaderID( new ZipShort( 1 ) );\n         u2.setLocalFileDataData( new byte[]{1} );\n \n         entry.addExtraField( u2 );\n         assertEquals( \"length second pass\", data1.length + 1, data2.length );\n \n         UnrecognizedExtraField u3 = new UnrecognizedExtraField();\n-        u3.setHeaderId( new ZipShort( 2 ) );\n+        u3.setHeaderID( new ZipShort( 2 ) );\n         u3.setLocalFileDataData( new byte[]{1} );\n         entry.addExtraField( u3 );\n         result = entry.getExtraFields();\n     private UnrecognizedExtraField createExtraField()\n     {\n         UnrecognizedExtraField extraField = new UnrecognizedExtraField();\n-        extraField.setHeaderId( new ZipShort( 1 ) );\n+        extraField.setHeaderID( new ZipShort( 1 ) );\n         extraField.setLocalFileDataData( new byte[ 0 ] );\n         return extraField;\n     }", "timestamp": 1168334673, "metainfo": ""}