{"sha": "2c9bec11701af7dc9cdd3b99aca9035cd641419e", "log": "LZMA2 compression when writing 7z archives  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n import org.tukaani.xz.LZMAInputStream;\n-import org.tukaani.xz.LZMA2InputStream;\n \n class Coders {\n     static InputStream addDecoder(final InputStream is,\n         }\n     }\n \n-    static class LZMA2Decoder extends CoderBase {\n-        @Override\n-        InputStream decode(final InputStream in, final Coder coder,\n-                String password) throws IOException {\n-            final int dictionarySizeBits = 0xff & coder.properties[0];\n-            if ((dictionarySizeBits & (~0x3f)) != 0) {\n-                throw new IOException(\"Unsupported LZMA2 property bits\");\n-            }\n-            if (dictionarySizeBits > 40) {\n-                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n-            }\n-            final int dictionarySize;\n-            if (dictionarySizeBits == 40) {\n-                dictionarySize = 0xFFFFffff;\n-            } else {\n-                dictionarySize = (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);\n-            }\n-            return new LZMA2InputStream(in, dictionarySize);\n-        }\n-    }\n-    \n     static class LZMADecoder extends CoderBase {\n         @Override\n         InputStream decode(final InputStream in, final Coder coder,\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.sevenz;\n+\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import org.tukaani.xz.FinishableWrapperOutputStream;\n+import org.tukaani.xz.FinishableOutputStream;\n+import org.tukaani.xz.LZMA2InputStream;\n+import org.tukaani.xz.LZMA2Options;\n+\n+class LZMA2Decoder extends Coders.CoderBase {\n+    @Override\n+    InputStream decode(final InputStream in, final Coder coder, String password)\n+        throws IOException {\n+        final int dictionarySizeBits = 0xff & coder.properties[0];\n+        if ((dictionarySizeBits & (~0x3f)) != 0) {\n+            throw new IOException(\"Unsupported LZMA2 property bits\");\n+        }\n+        if (dictionarySizeBits > 40) {\n+            throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n+        }\n+        final int dictionarySize;\n+        if (dictionarySizeBits == 40) {\n+            dictionarySize = 0xFFFFffff;\n+        } else {\n+            dictionarySize = (2 | (dictionarySizeBits & 0x1)) << (dictionarySizeBits / 2 + 11);\n+        }\n+        return new LZMA2InputStream(in, dictionarySize);\n+    }\n+\n+    @Override\n+    OutputStream encode(final OutputStream out, final String password)\n+        throws IOException {\n+        LZMA2Options options = new LZMA2Options();\n+        options.setDictSize(LZMA2Options.DICT_SIZE_DEFAULT);\n+        FinishableOutputStream wrapped = new FinishableWrapperOutputStream(out);\n+        return new FinishOnCloseStream(options.getOutputStream(wrapped));\n+    }\n+\n+    private static class FinishOnCloseStream extends FilterOutputStream {\n+\n+        private FinishOnCloseStream(FinishableOutputStream out) {\n+            super(out);\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            ((FinishableOutputStream) out).finish();\n+            super.close();\n+        }\n+    }\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n  */\n package org.apache.commons.compress.archivers.sevenz;\n \n+import org.tukaani.xz.LZMA2Options;\n+\n /**\n  * The (partially) supported compression/encryption methods used in 7z archives.\n  */\n     COPY(new byte[] { (byte)0x00 }),\n     /** LZMA - only supported when reading */\n     LZMA(new byte[] { (byte)0x03, (byte)0x01, (byte)0x01 }),\n-    /** LZMA2 - only supported when reading */\n-    LZMA2(new byte[] { (byte)0x21 }),\n-    /** Deflate - only supported when reading */\n+    /** LZMA2 */\n+    LZMA2(new byte[] { (byte)0x21 }) {\n+        @Override\n+        byte[] getProperties() {\n+            int dictSize = LZMA2Options.DICT_SIZE_DEFAULT;\n+            int lead = Integer.numberOfLeadingZeros(dictSize);\n+            int secondBit = (dictSize >>> (30 - lead)) - 2;\n+            return new byte[] {\n+                (byte) ((19 - lead) * 2 + secondBit)\n+            };\n+        }\n+    },\n+    /** Deflate */\n     DEFLATE(new byte[] { (byte)0x04, (byte)0x01, (byte)0x08 }),\n-    /** BZIP2 - only supported when reading */\n+    /** BZIP2 */\n     BZIP2(new byte[] { (byte)0x04, (byte)0x02, (byte)0x02 }),\n     /**\n      * AES encryption with a key length of 256 bit using SHA256 for\n         return copy;\n     }\n \n+    byte[] getProperties() {\n+        return new byte[0];\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n     private long fileBytesWritten = 0;\n     private boolean finished = false;\n     private CountingOutputStream currentOutputStream;\n-    private SevenZMethod contentCompression = SevenZMethod.COPY;\n+    private SevenZMethod contentCompression = SevenZMethod.LZMA2;\n     \n     public SevenZOutputFile(final File filename) throws IOException {\n         file = new RandomAccessFile(filename, \"rw\");\n         // one coder\n         writeUint64(header, 1);\n         byte[] id = contentCompression.getId();\n-        // FIXME - deal with coder properties\n-        header.write(id.length);\n+        byte[] properties = contentCompression.getProperties();\n+\n+        int codecFlags = id.length;\n+        if (properties.length > 0) {\n+            codecFlags |= 0x20;\n+        }\n+        header.write(codecFlags);\n         header.write(id);\n+\n+        if (properties.length > 0) {\n+            header.write(properties.length);\n+            header.write(properties);\n+        }\n     }\n     \n     private void writeSubStreamsInfo(final DataOutput header) throws IOException {\n--- a/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n \n     public void testSevenZArchiveCreationUsingCopy() throws Exception {\n         testSevenZArchiveCreation(SevenZMethod.COPY);\n+    }\n+    \n+    public void testSevenZArchiveCreationUsingLZMA2() throws Exception {\n+        testSevenZArchiveCreation(SevenZMethod.LZMA2);\n     }\n     \n     public void testSevenZArchiveCreationUsingBZIP2() throws Exception {", "timestamp": 1381490071, "metainfo": ""}