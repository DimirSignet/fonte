{"sha": "2629802a495f335bfb3407f593ba5d11087da4e5", "log": "parse ZIP64 extra data from central directory header in ZipFile.  COMPRESS-149  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n             int commentLen = ZipShort.getValue(cfh, off);\n             off += SHORT;\n \n-            off += SHORT; // disk number\n+            int diskStart = ZipShort.getValue(cfh, off);\n+            off += SHORT;\n \n             ze.setInternalAttributes(ZipShort.getValue(cfh, off));\n             off += SHORT;\n             byte[] cdExtraData = new byte[extraLen];\n             archive.readFully(cdExtraData);\n             ze.setCentralDirectoryExtra(cdExtraData);\n+\n+            Zip64ExtendedInformationExtraField z64 =\n+                (Zip64ExtendedInformationExtraField)\n+                ze.getExtraField(Zip64ExtendedInformationExtraField\n+                                 .HEADER_ID);\n+            if (z64 != null) {\n+                z64.reparseCentralDirectoryData(ze.getSize() == ZIP64_MAGIC,\n+                                                ze.getCompressedSize()\n+                                                == ZIP64_MAGIC,\n+                                                offset.headerOffset\n+                                                == ZIP64_MAGIC,\n+                                                diskStart == ZIP64_MAGIC_SHORT);\n+                if (ze.getSize() == ZIP64_MAGIC) {\n+                    ze.setSize(z64.getSize().getLongValue());\n+                }\n+                if (ze.getCompressedSize() == ZIP64_MAGIC) {\n+                    ze.setCompressedSize(z64.getCompressedSize()\n+                                         .getLongValue());\n+                }\n+                if (offset.headerOffset == ZIP64_MAGIC) {\n+                    offset.headerOffset =\n+                        z64.getRelativeHeaderOffset().getLongValue();\n+                }\n+            }\n \n             byte[] comment = new byte[commentLen];\n             archive.readFully(comment);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.RandomAccessFile;\n import java.net.URI;\n import java.net.URL;\n import org.junit.Test;\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assume.assumeNotNull;\n import static org.junit.Assume.assumeTrue;\n     private static final int ONE_MILLION = 1000000;\n     private static final int ONE_HUNDRED_THOUSAND = 100000;\n \n+    @Ignore\n     @Test public void read5GBOfZerosUsingInputStream() throws Throwable {\n         read5GBOfZerosImpl(get5GBZerosFile(), \"5GB_of_Zeros\");\n     }\n \n+    @Ignore\n     @Test public void read5GBOfZerosGeneratedBy7ZIPUsingInputStream()\n         throws Throwable {\n         read5GBOfZerosImpl(get5GBZerosFileGeneratedBy7ZIP(), \"5GB_of_Zeros\");\n     }\n \n+    @Ignore\n     @Test public void read5GBOfZerosGeneratedByJava7JarUsingInputStream()\n         throws Throwable {\n         read5GBOfZerosImpl(get5GBZerosFileGeneratedByJava7Jar(), \"5GB_of_Zeros\");\n     }\n \n+    @Ignore\n     @Test public void read100KFilesUsingInputStream() throws Throwable {\n         read100KFilesImpl(get100KFileFile());\n     }\n \n+    @Ignore\n     @Test public void read100KFilesGeneratedBy7ZIPUsingInputStream() throws Throwable {\n         read100KFilesImpl(get100KFileFileGeneratedBy7ZIP());\n     }\n \n+    @Ignore\n     @Test public void read100KFilesGeneratedByWinCFUsingInputStream() throws Throwable {\n         read100KFilesImpl(get100KFileFileGeneratedByWinCF());\n     }\n \n+    @Ignore\n     @Test public void read100KFilesGeneratedByJava7JarUsingInputStream() throws Throwable {\n         read100KFilesImpl(get100KFileFileGeneratedByJava7Jar());\n     }\n         read100KFilesUsingZipFileImpl(get100KFileFile());\n     }\n \n+    @Ignore\n     @Test public void read100KFilesGeneratedBy7ZIPUsingZipFile() throws Throwable {\n         read100KFilesUsingZipFileImpl(get100KFileFileGeneratedBy7ZIP());\n     }\n \n+    @Ignore\n     @Test public void read100KFilesGeneratedByWinCFUsingZipFile() throws Throwable {\n         read100KFilesUsingZipFileImpl(get100KFileFileGeneratedByWinCF());\n     }\n \n+    @Ignore\n     @Test public void read100KFilesGeneratedByJava7JarUsingZipFile() throws Throwable {\n         read100KFilesUsingZipFileImpl(get100KFileFileGeneratedByJava7Jar());\n     }\n             }\n         };\n \n+    @Ignore\n     @Test public void write100KFilesFile() throws Throwable {\n         withTemporaryArchive(\"write100KFilesFile\", write100KFiles, true);\n     }\n \n+    @Ignore\n     @Test public void write100KFilesStream() throws Throwable {\n         withTemporaryArchive(\"write100KFilesStream\", write100KFiles, false);\n     }\n         new ZipOutputTest() {\n             public void test(File f, ZipArchiveOutputStream zos)\n                 throws IOException {\n-                byte[] buf = new byte[ONE_MILLION];\n-                ZipArchiveEntry zae = null;\n-                for (int i = 0; i < 2; i++) {\n-                    zae = new ZipArchiveEntry(String.valueOf(i));\n-                    zae.setSize(FIVE_BILLION / 2);\n-                    zae.setMethod(ZipArchiveEntry.STORED);\n-                    zae.setCrc(0x8a408f16L);\n-                    zos.putArchiveEntry(zae);\n-                    for (int j = 0; j < FIVE_BILLION / 2 / 1000 / 1000;\n-                         j++) {\n-                        zos.write(buf);\n-                    }\n-                    zos.closeArchiveEntry();\n-                }\n-                zae = new ZipArchiveEntry(String.valueOf(2));\n-                zae.setSize(0);\n-                zae.setMethod(ZipArchiveEntry.STORED);\n-                zae.setCrc(0);\n-                zos.putArchiveEntry(zae);\n-                zos.write(new byte[0]);\n-                zos.closeArchiveEntry();\n-                zos.close();\n+                write3EntriesCreatingBigArchiveToStream(zos);\n \n                 RandomAccessFile a = new RandomAccessFile(f, \"r\");\n                 try {\n                     a.readFully(rest);\n                     assertArrayEquals(new byte[] {\n                             // Original Size\n-                            0, 0, 0, 0,\n+                            1, 0, 0, 0,\n                             // file name length\n                             1, 0,\n                             // extra field length\n                              true);\n     }\n \n-    @Ignore\n     @Test public void write3EntriesCreatingBigArchiveStream() throws Throwable {\n         withTemporaryArchive(\"write3EntriesCreatingBigArchiveStream\",\n                              write3EntriesCreatingBigArchive,\n                              false);\n+    }\n+\n+    @Test public void read3EntriesCreatingBigArchiveFileUsingZipFile()\n+        throws Throwable {\n+        withTemporaryArchive(\"read3EntriesCreatingBigArchiveFileUsingZipFile\",\n+                             new ZipOutputTest() {\n+                                 public void test(File f,\n+                                                  ZipArchiveOutputStream zos)\n+                                     throws IOException {\n+                                     write3EntriesCreatingBigArchiveToStream(zos);\n+                                     ZipFile zf = null;\n+                                     try {\n+                                         zf = new ZipFile(f);\n+                                         int idx = 0;\n+                                         for (Enumeration e =\n+                                                  zf.getEntriesInPhysicalOrder();\n+                                              e.hasMoreElements(); ) {\n+                                             ZipArchiveEntry zae =\n+                                                 (ZipArchiveEntry)\n+                                                 e.nextElement();\n+                                             assertEquals(String.valueOf(idx),\n+                                                          zae.getName());\n+                                             if (idx++ < 2) {\n+                                                 assertEquals(FIVE_BILLION / 2,\n+                                                              zae.getSize());\n+                                             } else {\n+                                                 assertEquals(1,\n+                                                              zae.getSize());\n+                                                 InputStream i =\n+                                                     zf.getInputStream(zae);\n+                                                 try {\n+                                                     assertNotNull(i);\n+                                                     assertEquals(42, i.read());\n+                                                 } finally {\n+                                                     i.close();\n+                                                 }\n+                                             }\n+                                         }\n+                                     } finally {\n+                                         ZipFile.closeQuietly(zf);\n+                                     }\n+                                 }\n+                             },\n+                             true);\n     }\n \n     /*\n      *\n      * Creates a temporary archive of approx 4MB in size\n      */\n+    @Ignore\n     @Test public void writeBigDeflatedEntryKnownSizeToStream()\n         throws Throwable {\n         withTemporaryArchive(\"writeBigDeflatedEntryKnownSizeToStream\",\n                     os.close();\n                 }\n             }\n+            f.delete();\n         }\n-        f.delete();\n     }\n \n     private static File getFile(String name) throws Throwable {\n         }\n         zos.close();\n     }\n+\n+    private static void\n+        write3EntriesCreatingBigArchiveToStream(ZipArchiveOutputStream zos)\n+        throws IOException {\n+        byte[] buf = new byte[ONE_MILLION];\n+        ZipArchiveEntry zae = null;\n+        for (int i = 0; i < 2; i++) {\n+            zae = new ZipArchiveEntry(String.valueOf(i));\n+            zae.setSize(FIVE_BILLION / 2);\n+            zae.setMethod(ZipArchiveEntry.STORED);\n+            zae.setCrc(0x8a408f16L);\n+            zos.putArchiveEntry(zae);\n+            for (int j = 0; j < FIVE_BILLION / 2 / 1000 / 1000;\n+                 j++) {\n+                zos.write(buf);\n+            }\n+            zos.closeArchiveEntry();\n+        }\n+        zae = new ZipArchiveEntry(String.valueOf(2));\n+        zae.setSize(1);\n+        zae.setMethod(ZipArchiveEntry.STORED);\n+        zae.setCrc(0x9b9265bL);\n+        zos.putArchiveEntry(zae);\n+        zos.write(new byte[] { 42 });\n+        zos.closeArchiveEntry();\n+        zos.close();\n+    }\n }", "timestamp": 1312440927, "metainfo": ""}