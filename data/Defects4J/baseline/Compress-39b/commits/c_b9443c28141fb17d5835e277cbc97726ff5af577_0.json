{"sha": "b9443c28141fb17d5835e277cbc97726ff5af577", "log": "Avoid unclosed stream warnings  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java\n     public void shouldNotAllowReadingOfANegativeAmountOfBits() throws IOException {\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n         bis.readBits(-1);\n+        bis.close();\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void shouldNotAllowReadingOfMoreThan63BitsAtATime() throws IOException {\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n         bis.readBits(64);\n+        bis.close();\n     }\n \n     @Test\n     public void testReading24BitsInLittleEndian() throws IOException {\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n         assertEquals(0x000140f8, bis.readBits(24));\n+        bis.close();\n     }\n \n     @Test\n     public void testReading24BitsInBigEndian() throws IOException {\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n         assertEquals(0x00f84001, bis.readBits(24));\n+        bis.close();\n     }\n \n     @Test\n     public void testReading17BitsInLittleEndian() throws IOException {\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n         assertEquals(0x000140f8, bis.readBits(17));\n+        bis.close();\n     }\n \n     @Test\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n         // 1-11110000-10000000\n         assertEquals(0x0001f080, bis.readBits(17));\n+        bis.close();\n     }\n \n     @Test\n     public void testReading30BitsInLittleEndian() throws IOException {\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n         assertEquals(0x2f0140f8, bis.readBits(30));\n+        bis.close();\n     }\n \n     @Test\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n         // 111110-00010000-00000000-01001011\n         assertEquals(0x3e10004b, bis.readBits(30));\n+        bis.close();\n     }\n \n     @Test\n     public void testReading31BitsInLittleEndian() throws IOException {\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n         assertEquals(0x2f0140f8, bis.readBits(31));\n+        bis.close();\n     }\n \n     @Test\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n         // 1111100-00100000-00000000-10010111\n         assertEquals(0x7c200097, bis.readBits(31));\n+        bis.close();\n     }\n \n     @Test\n         assertEquals(0x08, bis.readBits(4));\n         bis.clearBitCache();\n         assertEquals(0, bis.readBits(1));\n+        bis.close();\n     }\n \n     @Test\n         BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n         assertEquals(0x2f0140f8, bis.readBits(30));\n         assertEquals(-1, bis.readBits(3));\n+        bis.close();\n     }\n \n     private ByteArrayInputStream getStream() {", "timestamp": 1422819582, "metainfo": ""}