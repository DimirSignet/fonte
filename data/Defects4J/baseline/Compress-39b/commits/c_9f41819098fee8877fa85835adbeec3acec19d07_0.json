{"sha": "9f41819098fee8877fa85835adbeec3acec19d07", "log": "Renamed method to getBytesWrittenForLastEntry  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n     public void addArchiveEntry(ZipArchiveEntry zipArchiveEntry, InputStream payload, int method) throws IOException {\n         streamCompressor.deflate(payload, method);\n         items.add(new CompressedEntry(zipArchiveEntry, streamCompressor.getCrc32(),\n-                                      streamCompressor.getBytesWritten(), method,\n+                                      streamCompressor.getBytesWrittenForLastEntry(), method,\n                                       streamCompressor.getBytesRead()));\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java\n \n     private final CRC32 crc = new CRC32();\n \n-    private long writtenToOutputStream = 0;\n+    private long writtenToOutputStreamForLastEntry = 0;\n     private long sourcePayloadLength = 0;\n     private long totalWrittenToOutputStream = 0;\n \n     }\n \n     /**\n-     * The number of bytes written to the output\n+     * The number of bytes written to the output for the last entry\n      *\n      * @return The number of bytes, never negative\n      */\n-    public long getBytesWritten() {\n-        return writtenToOutputStream;\n+    public long getBytesWrittenForLastEntry() {\n+        return writtenToOutputStreamForLastEntry;\n     }\n \n     /**\n      * @throws IOException on error\n      */\n     long write(byte[] b, int offset, int length, int method) throws IOException {\n-        long current = writtenToOutputStream;\n+        long current = writtenToOutputStreamForLastEntry;\n         crc.update(b, offset, length);\n         if (method == ZipArchiveEntry.DEFLATED) {\n             writeDeflated(b, offset, length);\n             writeCounted(b, offset, length);\n         }\n         sourcePayloadLength += length;\n-        return writtenToOutputStream - current;\n+        return writtenToOutputStreamForLastEntry - current;\n     }\n \n \n         crc.reset();\n         def.reset();\n         sourcePayloadLength = 0;\n-        writtenToOutputStream = 0;\n+        writtenToOutputStreamForLastEntry = 0;\n     }\n \n     public void close() throws IOException {\n \n     public void writeCounted(byte[] data, int offset, int length) throws IOException {\n         writeOut(data, offset, length);\n-        writtenToOutputStream += length;\n+        writtenToOutputStreamForLastEntry += length;\n         totalWrittenToOutputStream += length;\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/StreamCompressorTest.java\n         sc.deflate(new ByteArrayInputStream(\"A\".getBytes()), ZipEntry.STORED);\n         sc.deflate(new ByteArrayInputStream(\"BAD\".getBytes()), ZipEntry.STORED);\n         assertEquals(3, sc.getBytesRead());\n-        assertEquals(3, sc.getBytesWritten());\n+        assertEquals(3, sc.getBytesWrittenForLastEntry());\n         assertEquals(344750961, sc.getCrc32());\n         sc.deflate(new ByteArrayInputStream(\"CAFE\".getBytes()), ZipEntry.STORED);\n         assertEquals(\"ABADCAFE\", baos.toString());\n         StreamCompressor sc = StreamCompressor.create( baos);\n         sc.deflate(new ByteArrayInputStream(\"AAAAAABBBBBB\".getBytes()), ZipEntry.DEFLATED);\n         assertEquals(12, sc.getBytesRead());\n-        assertEquals(8, sc.getBytesWritten());\n+        assertEquals(8, sc.getBytesWrittenForLastEntry());\n         assertEquals(3299542, sc.getCrc32());\n \n         final byte[] actuals = baos.toByteArray();", "timestamp": 1420392946, "metainfo": ""}