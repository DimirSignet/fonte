{"sha": "e9d7bcf5f2284f2aa326a3d2ea1807c465b0de8b", "log": "COMPRESS-200 use the backing array of the returned ByteBuffer properly  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n import java.io.IOException;\n import java.io.OutputStream;\n import java.io.StringWriter;\n+import java.nio.ByteBuffer;\n import java.util.HashMap;\n import java.util.Map;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n         TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n         Map<String, String> paxHeaders = new HashMap<String, String>();\n         final String entryName = entry.getName();\n-        final byte[] nameBytes = encoding.encode(entryName).array();\n+        final ByteBuffer encodedName = encoding.encode(entryName);\n+        final int nameLen = encodedName.limit() - encodedName.position();\n         boolean paxHeaderContainsPath = false;\n-        if (nameBytes.length >= TarConstants.NAMELEN) {\n+        if (nameLen >= TarConstants.NAMELEN) {\n \n             if (longFileMode == LONGFILE_POSIX) {\n                 paxHeaders.put(\"path\", entryName);\n                 TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n                                                                     TarConstants.LF_GNUTYPE_LONGNAME);\n \n-                longLinkEntry.setSize(nameBytes.length + 1); // +1 for NUL\n+                longLinkEntry.setSize(nameLen + 1); // +1 for NUL\n                 putArchiveEntry(longLinkEntry);\n-                write(nameBytes);\n+                write(encodedName.array(), encodedName.arrayOffset(), nameLen);\n                 write(0); // NUL terminator\n                 closeArchiveEntry();\n             } else if (longFileMode != LONGFILE_TRUNCATE) {", "timestamp": 1356641682, "metainfo": ""}