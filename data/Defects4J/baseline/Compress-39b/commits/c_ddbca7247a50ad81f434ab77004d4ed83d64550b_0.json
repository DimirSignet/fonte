{"sha": "ddbca7247a50ad81f434ab77004d4ed83d64550b", "log": "@since: Standardise on number only; drop redundant component name  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n \n     /**\n      * Constant used to identify the AR archive format.\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public static final String AR = \"ar\";\n     /**\n      * Constant used to identify the CPIO archive format.\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public static final String CPIO = \"cpio\";\n     /**\n      * Constant used to identify the Unix DUMP archive format.\n-     * @since Commons Compress 1.3\n+     * @since 1.3\n      */\n     public static final String DUMP = \"dump\";\n     /**\n      * Constant used to identify the JAR archive format.\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public static final String JAR = \"jar\";\n     /**\n      * Constant used to identify the TAR archive format.\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public static final String TAR = \"tar\";\n     /**\n      * Constant used to identify the ZIP archive format.\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public static final String ZIP = \"zip\";\n \n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n      *\n      * @param headerBuf The header bytes from a tar archive entry.\n      * @param encoding encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      * @throws IllegalArgumentException if any of the numeric fields have an invalid format\n      */\n     public TarArchiveEntry(byte[] headerBuf, ZipEncoding encoding)\n      *\n      * @param header The tar entry header buffer to get information from.\n      * @param encoding encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      * @throws IllegalArgumentException if any of the numeric fields\n      * have an invalid format\n      */\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n      * Constructor for TarInputStream.\n      * @param is the input stream to use\n      * @param encoding name of the encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      */\n     public TarArchiveInputStream(InputStream is, String encoding) {\n         this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);\n      * @param is the input stream to use\n      * @param blockSize the block size to use\n      * @param encoding name of the encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      */\n     public TarArchiveInputStream(InputStream is, int blockSize,\n                                  String encoding) {\n      * @param blockSize the block size to use\n      * @param recordSize the record size to use\n      * @param encoding name of the encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      */\n     public TarArchiveInputStream(InputStream is, int blockSize, int recordSize,\n                                  String encoding) {\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n      * Constructor for TarInputStream.\n      * @param os the output stream to use\n      * @param encoding name of the encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      */\n     public TarArchiveOutputStream(OutputStream os, String encoding) {\n         this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE, encoding);\n      * @param os the output stream to use\n      * @param blockSize the block size to use\n      * @param encoding name of the encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      */\n     public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                   String encoding) {\n      * @param blockSize the block size to use\n      * @param recordSize the record size to use\n      * @param encoding name of the encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      */\n     public TarArchiveOutputStream(OutputStream os, int blockSize,\n                                   int recordSize, String encoding) {\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n      * @param offset The offset into the buffer from which to parse.\n      * @param length The maximum number of bytes to parse.\n      * @param encoding name of the encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      * @return The entry name.\n      */\n     public static String parseName(byte[] buffer, final int offset,\n      * @param offset The starting offset into the buffer\n      * @param length The maximum number of header bytes to copy.\n      * @param encoding name of the encoding to use for file names\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      * @return The updated offset, i.e. offset + length\n      */\n     public static int formatNameBytes(String name, byte[] buf, final int offset,\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n /**\n  * Exception thrown when attempting to read or write data for a zip\n  * entry that uses ZIP features not supported by this library.\n- * @since Commons Compress 1.1\n+ * @since 1.1\n  */\n public class UnsupportedZipFeatureException extends ZipException {\n \n \n     /**\n      * ZIP Features that may or may not be supported.\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public static class Feature {\n         /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n      *\n      * @return all entries as {@link ZipArchiveEntry} instances\n      *\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public Enumeration<ZipArchiveEntry> getEntriesInPhysicalOrder() {\n         ZipArchiveEntry[] allEntries =\n      * <p>Won't return any meaningful results if one of the entries\n      * isn't part of the archive at all.</p>\n      *\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR =\n         new Comparator<ZipArchiveEntry>() {\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n \n     /**\n      * Constant used to identify the BZIP2 compression algorithm.\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public static final String BZIP2 = \"bzip2\";\n \n     /**\n      * Constant used to identify the GZIP compression algorithm.\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public static final String GZIP = \"gz\";\n     /**\n      * Constant used to identify the PACK200 compression algorithm.\n-     * @since Commons Compress 1.3\n+     * @since 1.3\n      */\n     public static final String PACK200 = \"pack200\";\n \n     /**\n      * Constant used to identify the XZ compression method.\n-     * @since Commons Compress 1.4\n+     * @since 1.4\n      */\n     public static final String XZ = \"xz\";\n \n      * @return the compressor input stream\n      * @throws CompressorException if the compressor name is not known\n      * @throws IllegalArgumentException if the stream is null or does not support mark\n-     * @since Commons Compress 1.1\n+     * @since 1.1\n      */\n     public CompressorInputStream createCompressorInputStream(final InputStream in)\n             throws CompressorException {\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n /**\n  * Utility code for the BZip2 compression format.\n  * @ThreadSafe\n- * @since Commons Compress 1.1\n+ * @since 1.1\n  */\n public abstract class BZip2Utils {\n \n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n \n /**\n  * XZ decompressor.\n- * @since Commons Compress 1.4\n+ * @since 1.4\n  */\n public class XZCompressorInputStream extends CompressorInputStream {\n     private final InputStream in;\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java\n \n /**\n  * XZ compressor.\n- * @since Commons Compress 1.4\n+ * @since 1.4\n  */\n public class XZCompressorOutputStream extends CompressorOutputStream {\n     private final XZOutputStream out;\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n /**\n  * Utility code for the xz compression format.\n  * @ThreadSafe\n- * @since Commons Compress 1.4\n+ * @since 1.4\n  */\n public class XZUtils {\n ", "timestamp": 1363011287, "metainfo": ""}