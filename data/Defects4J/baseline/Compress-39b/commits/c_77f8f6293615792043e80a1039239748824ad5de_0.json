{"sha": "77f8f6293615792043e80a1039239748824ad5de", "log": "COMPRESS-266 tests  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n import java.io.File;\n import java.io.IOException;\n import java.util.Calendar;\n+import java.util.Collections;\n import java.util.Date;\n+import java.util.ArrayList;\n import org.apache.commons.compress.AbstractTestCase;\n+import org.tukaani.xz.LZMA2Options;\n \n public class SevenZOutputFileTest extends AbstractTestCase {\n \n     }\n \n     public void testDirectoriesAndEmptyFiles() throws Exception {\n-        File output = new File(dir, \"empties.7z\");\n+        output = new File(dir, \"empties.7z\");\n \n         Date accessDate = new Date();\n         Calendar cal = Calendar.getInstance();\n     }\n \n     public void testDirectoriesOnly() throws Exception {\n-        File output = new File(dir, \"dirs.7z\");\n+        output = new File(dir, \"dirs.7z\");\n         SevenZOutputFile outArchive = new SevenZOutputFile(output);\n         try {\n             SevenZArchiveEntry entry = new SevenZArchiveEntry();\n     }\n \n     public void testCantFinishTwice() throws Exception {\n-        File output = new File(dir, \"finish.7z\");\n+        output = new File(dir, \"finish.7z\");\n         SevenZOutputFile outArchive = new SevenZOutputFile(output);\n         try {\n             outArchive.finish();\n \n     public void testTwentyNineFilesSomeNotEmpty() throws Exception {\n         testCompress252(29, 7);\n+    }\n+\n+    public void testCopyRoundtrip() throws Exception {\n+        testRoundTrip(SevenZMethod.COPY);\n+    }\n+\n+    public void testBzip2Roundtrip() throws Exception {\n+        testRoundTrip(SevenZMethod.BZIP2);\n+    }\n+\n+    public void testLzma2Roundtrip() throws Exception {\n+        testRoundTrip(SevenZMethod.LZMA2);\n+    }\n+\n+    public void testDeflateRoundtrip() throws Exception {\n+        testRoundTrip(SevenZMethod.DEFLATE);\n+    }\n+\n+    public void testStackOfContentCompressions() throws Exception {\n+        output = new File(dir, \"multiple-methods.7z\");\n+        ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();\n+        methods.add(new SevenZMethodConfiguration(SevenZMethod.LZMA2));\n+        methods.add(new SevenZMethodConfiguration(SevenZMethod.COPY));\n+        methods.add(new SevenZMethodConfiguration(SevenZMethod.DEFLATE));\n+        methods.add(new SevenZMethodConfiguration(SevenZMethod.BZIP2));\n+        createAndReadBack(output, methods);\n+    }\n+\n+    public void testDeflateWithConfiguration() throws Exception {\n+        output = new File(dir, \"deflate-options.7z\");\n+        // Deflater.BEST_SPEED\n+        createAndReadBack(output, Collections\n+                          .singletonList(new SevenZMethodConfiguration(SevenZMethod.DEFLATE, 1)));\n+    }\n+\n+    public void testBzip2WithConfiguration() throws Exception {\n+        output = new File(dir, \"bzip2-options.7z\");\n+        // 400k block size\n+        createAndReadBack(output, Collections\n+                          .singletonList(new SevenZMethodConfiguration(SevenZMethod.BZIP2, 4)));\n+    }\n+\n+    public void testLzma2WithIntConfiguration() throws Exception {\n+        output = new File(dir, \"bzip2-options.7z\");\n+        // 16 MB dictionary\n+        createAndReadBack(output, Collections\n+                          .singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2, 16 << 20)));\n+    }\n+\n+    public void testLzma2WithOptionsConfiguration() throws Exception {\n+        output = new File(dir, \"bzip2-options.7z\");\n+        LZMA2Options opts = new LZMA2Options(9);\n+        createAndReadBack(output, Collections\n+                          .singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2, opts)));\n     }\n \n     private void testCompress252(int numberOfFiles, int numberOfNonEmptyFiles)\n         SevenZArchiveEntry entry = new SevenZArchiveEntry();\n         entry.setName(\"foo/\" + index + \".txt\");\n         archive.putArchiveEntry(entry);\n-        archive.write(nonEmpty ? new byte[] { 17 } : new byte[0]);\n+        archive.write(nonEmpty ? new byte[] { 'A' } : new byte[0]);\n         archive.closeArchiveEntry();\n     }\n \n             return Boolean.FALSE;\n         }\n         assertEquals(1, entry.getSize());\n-        assertEquals(17, archive.read());\n+        assertEquals('A', archive.read());\n         assertEquals(-1, archive.read());\n         return Boolean.TRUE;\n     }\n \n+    private void testRoundTrip(SevenZMethod method) throws Exception {\n+        output = new File(dir, method + \"-roundtrip.7z\");\n+        ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();\n+        methods.add(new SevenZMethodConfiguration(method));\n+        createAndReadBack(output, methods);\n+    }\n+\n+    private void createAndReadBack(File output, Iterable<SevenZMethodConfiguration> methods) throws Exception {\n+        SevenZOutputFile outArchive = new SevenZOutputFile(output);\n+        outArchive.setContentMethods(methods);\n+        try {\n+            addFile(outArchive, 0, true);\n+        } finally {\n+            outArchive.close();\n+        }\n+\n+        SevenZFile archive = new SevenZFile(output);\n+        try {\n+            assertEquals(Boolean.TRUE, verifyFile(archive, 0));\n+        } finally {\n+            archive.close();\n+        }\n+    }\n }", "timestamp": 1393275226, "metainfo": ""}