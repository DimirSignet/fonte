{"sha": "267a334dbf83b5e56022caeb7f6a19183aff5c96", "log": "Having a thread-safe count in an otherwise not-thread-safe stream doesn't make much sense  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/CountingInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/utils/CountingInputStream.java\n /**\n  * Stream that tracks the number of bytes read.\n  * @since Apache Commons Compress 1.3\n- * @ThreadSafe\n+ * @NotThreadSafe\n  */\n public class CountingInputStream extends FilterInputStream {\n-    private final AtomicLong bytesRead = new AtomicLong();\n+    private long bytesRead;\n \n     public CountingInputStream(final InputStream in) {\n         super(in);\n      */\n     protected final void count(long read) {\n         if (read != -1) {\n-            bytesRead.addAndGet(read);\n+            bytesRead += read;\n         }\n     }\n     \n      * @return the number of read bytes\n      */\n     public long getBytesRead() {\n-        return bytesRead.longValue();\n+        return bytesRead;\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java\n /**\n  * Stream that tracks the number of bytes read.\n  * @since Apache Commons Compress 1.3\n- * @ThreadSafe\n+ * @NotThreadSafe\n  */\n public class CountingOutputStream extends FilterOutputStream {\n-    private final AtomicLong bytesWritten = new AtomicLong();\n+    private long bytesWritten = 0;\n \n     public CountingOutputStream(final OutputStream out) {\n         super(out);\n      */\n     protected void count(long written) {\n         if (written != -1) {\n-            bytesWritten.addAndGet(written);\n+            bytesWritten += written;\n         }\n     }\n     \n      * @return the number of written bytes\n      */\n     public long getBytesWritten() {\n-        return bytesWritten.longValue();\n+        return bytesWritten;\n     }\n }", "timestamp": 1319540359, "metainfo": ""}