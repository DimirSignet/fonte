{"sha": "ae0f984b0d20a9e1d9baff43e2cbeb73d1a767d4", "log": "make String comparisions locale-insensitive  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.Locale;\n \n import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;\n  * @Immutable\n  */\n public class ArchiveStreamFactory {\n+\n+    // constants used for case- and locale-insensitive comparisons.\n+\n+    private static final String AR_LC = \"ar\";\n+    private static final String CPIO_LC = \"cpio\";\n+    private static final String JAR_LC = \"jar\";\n+    private static final String TAR_LC = \"tar\";\n+    private static final String ZIP_LC = \"zip\";\n \n     /**\n      * Create an archive input stream from an archiver name and an input stream.\n         \tthrow new IllegalArgumentException(\"InputStream must not be null.\");\n         }\n \n-        if (\"ar\".equalsIgnoreCase(archiverName)) {\n+        String archiverNameToCompare = archiverName.toLowerCase(Locale.ENGLISH);\n+\n+        if (AR_LC.equals(archiverNameToCompare)) {\n             return new ArArchiveInputStream(in);\n         }\n-        if (\"zip\".equalsIgnoreCase(archiverName)) {\n+        if (ZIP_LC.equals(archiverNameToCompare)) {\n             return new ZipArchiveInputStream(in);\n         }\n-        if (\"tar\".equalsIgnoreCase(archiverName)) {\n+        if (TAR_LC.equals(archiverNameToCompare)) {\n             return new TarArchiveInputStream(in);\n         }\n-        if (\"jar\".equalsIgnoreCase(archiverName)) {\n+        if (JAR_LC.equals(archiverNameToCompare)) {\n             return new JarArchiveInputStream(in);\n         }\n-        if (\"cpio\".equalsIgnoreCase(archiverName)) {\n+        if (CPIO_LC.equals(archiverNameToCompare)) {\n             return new CpioArchiveInputStream(in);\n         }\n         \n         \tthrow new IllegalArgumentException(\"OutputStream must not be null.\");\n         }\n \n-        if (\"ar\".equalsIgnoreCase(archiverName)) {\n+        String archiverNameToCompare = archiverName.toLowerCase(Locale.ENGLISH);\n+\n+        if (AR_LC.equals(archiverNameToCompare)) {\n             return new ArArchiveOutputStream(out);\n-        } else if (\"zip\".equalsIgnoreCase(archiverName)) {\n+        }\n+        if (ZIP_LC.equals(archiverNameToCompare)) {\n             return new ZipArchiveOutputStream(out);\n-        } else if (\"tar\".equalsIgnoreCase(archiverName)) {\n+        }\n+        if (TAR_LC.equals(archiverNameToCompare)) {\n             return new TarArchiveOutputStream(out);\n-        } else if (\"jar\".equalsIgnoreCase(archiverName)) {\n+        }\n+        if (JAR_LC.equals(archiverNameToCompare)) {\n             return new JarArchiveOutputStream(out);\n-        } else if (\"cpio\".equalsIgnoreCase(archiverName)) {\n+        }\n+        if (CPIO_LC.equals(archiverNameToCompare)) {\n             return new CpioArchiveOutputStream(out);\n         }\n         throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipEncodingHelper.java\n import java.nio.charset.Charset;\n import java.nio.charset.UnsupportedCharsetException;\n import java.util.HashMap;\n+import java.util.Locale;\n import java.util.Map;\n \n /**\n     static final String UTF8 = \"UTF8\";\n \n     /**\n+     * name of the encoding UTF-8 used for comparisions.\n+     */\n+    private static final String UTF8_LC = UTF8.toLowerCase(Locale.ENGLISH);\n+\n+    /**\n+     * variant name of the encoding UTF-8 used for comparisions.\n+     */\n+    private static final String UTF_DASH_8_LC = \"utf-8\";\n+\n+    /**\n      * name of the encoding UTF-8\n      */\n     static final ZipEncoding UTF8_ZIP_ENCODING = new FallbackZipEncoding(UTF8);\n             // check platform's default encoding\n             encoding = System.getProperty(\"file.encoding\");\n         }\n-        return UTF8.equalsIgnoreCase(encoding)\n-            || \"utf-8\".equalsIgnoreCase(encoding);\n+        String enc = encoding.toLowerCase(Locale.ENGLISH);\n+        return UTF8_LC.equals(enc) || UTF_DASH_8_LC.equals(enc);\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.Locale;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n  */\n public class CompressorStreamFactory {\n \n+    // constants used for case- and locale-insensitive comparisons.\n+    private static final String BZ_LC = \"bzip2\";\n+    private static final String GZ_LC = \"gz\";\n \n     /**\n      * Create an compressor input stream from an input stream, autodetecting\n                     \"Compressor name and stream must not be null.\");\n         }\n \n+        String nameToCompare = name.toLowerCase(Locale.ENGLISH);\n+\n         try {\n             \n-            if (\"gz\".equalsIgnoreCase(name)) {\n+            if (GZ_LC.equals(nameToCompare)) {\n                 return new GzipCompressorInputStream(in);\n             }\n             \n-            if (\"bzip2\".equalsIgnoreCase(name)) {\n+            if (BZ_LC.equals(nameToCompare)) {\n                 return new BZip2CompressorInputStream(in);\n             }\n             \n                     \"Compressor name and stream must not be null.\");\n         }\n \n+        String nameToCompare = name.toLowerCase(Locale.ENGLISH);\n+\n         try {\n \n-            if (\"gz\".equalsIgnoreCase(name)) {\n+            if (GZ_LC.equals(nameToCompare)) {\n                 return new GzipCompressorOutputStream(out);\n-            } \n+            }\n             \n-            if (\"bzip2\".equalsIgnoreCase(name)) {\n+            if (BZ_LC.equals(nameToCompare)) {\n                 return new BZip2CompressorOutputStream(out);\n             }\n         \n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n package org.apache.commons.compress.compressors.bzip2;\n \n import java.util.HashMap;\n+import java.util.Locale;\n import java.util.Map;\n \n /**\n      *         <code>false</code> otherwise\n      */\n     public static boolean isCompressedFilename(String filename) {\n-        String lower = filename.toLowerCase();\n+        String lower = filename.toLowerCase(Locale.ENGLISH);\n         int n = lower.length();\n         // Shortest suffix is three letters (.bz), longest is five (.tbz2)\n         for (int i = 3; i <= 5 && i < n; i++) {\n      * @return name of the corresponding uncompressed file\n      */\n     public static String getUncompressedFilename(String filename) {\n-        String lower = filename.toLowerCase();\n+        String lower = filename.toLowerCase(Locale.ENGLISH);\n         int n = lower.length();\n         // Shortest suffix is three letters (.bz), longest is five (.tbz2)\n         for (int i = 3; i <= 5 && i < n; i++) {\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java\n package org.apache.commons.compress.compressors.gzip;\n \n import java.util.HashMap;\n+import java.util.Locale;\n import java.util.Map;\n \n /**\n      *         <code>false</code> otherwise\n      */\n     public static boolean isCompressedFilename(String filename) {\n-        String lower = filename.toLowerCase();\n+        String lower = filename.toLowerCase(Locale.ENGLISH);\n         int n = lower.length();\n         // Shortest suffix is two letters (_z), longest is five (.svgz)\n         for (int i = 2; i <= 5 && i < n; i++) {\n      * @return name of the corresponding uncompressed file\n      */\n     public static String getUncompressedFilename(String filename) {\n-        String lower = filename.toLowerCase();\n+        String lower = filename.toLowerCase(Locale.ENGLISH);\n         int n = lower.length();\n         // Shortest suffix is two letters (_z), longest is five (.svgz)\n         for (int i = 2; i <= 5 && i < n; i++) {\n      * @return name of the corresponding compressed file\n      */\n     public static String getCompressedFilename(String filename) {\n-        String lower = filename.toLowerCase();\n+        String lower = filename.toLowerCase(Locale.ENGLISH);\n         int n = lower.length();\n         // Shortest suffix is four letters (.svg), longest is five (.cpio)\n         for (int i = 4; i <= 5 && i < n; i++) {", "timestamp": 1265988122, "metainfo": ""}