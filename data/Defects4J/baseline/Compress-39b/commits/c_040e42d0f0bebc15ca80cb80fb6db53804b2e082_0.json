{"sha": "040e42d0f0bebc15ca80cb80fb6db53804b2e082", "log": "COMPRESS-236 - CpioArchiveInputStream doesn't like Redline RPM's archives.  Patch by Andrew Duffy  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n      * @return TRUE if this entry is a block device.\n      */\n     public boolean isBlockDevice() {\n-        return (this.mode & S_IFMT) == C_ISBLK;\n+        return CpioUtil.fileType(mode) == C_ISBLK;\n     }\n \n     /**\n      * @return TRUE if this entry is a character device.\n      */\n     public boolean isCharacterDevice() {\n-        return (this.mode & S_IFMT) == C_ISCHR;\n+        return CpioUtil.fileType(mode) == C_ISCHR;\n     }\n \n     /**\n      * @return TRUE if this entry is a directory.\n      */\n     public boolean isDirectory() {\n-        return (this.mode & S_IFMT) == C_ISDIR;\n+        return CpioUtil.fileType(mode) == C_ISDIR;\n     }\n \n     /**\n      * @return TRUE if this entry is a network device.\n      */\n     public boolean isNetwork() {\n-        return (this.mode & S_IFMT) == C_ISNWK;\n+        return CpioUtil.fileType(mode) == C_ISNWK;\n     }\n \n     /**\n      * @return TRUE if this entry is a pipe.\n      */\n     public boolean isPipe() {\n-        return (this.mode & S_IFMT) == C_ISFIFO;\n+        return CpioUtil.fileType(mode) == C_ISFIFO;\n     }\n \n     /**\n      * @return TRUE if this entry is a regular file.\n      */\n     public boolean isRegularFile() {\n-        return (this.mode & S_IFMT) == C_ISREG;\n+        return CpioUtil.fileType(mode) == C_ISREG;\n     }\n \n     /**\n      * @return TRUE if this entry is a socket.\n      */\n     public boolean isSocket() {\n-        return (this.mode & S_IFMT) == C_ISSOCK;\n+        return CpioUtil.fileType(mode) == C_ISSOCK;\n     }\n \n     /**\n      * @return TRUE if this entry is a symbolic link.\n      */\n     public boolean isSymbolicLink() {\n-        return (this.mode & S_IFMT) == C_ISLNK;\n+        return CpioUtil.fileType(mode) == C_ISLNK;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n \n         ret.setInode(readAsciiLong(8, 16));\n         long mode = readAsciiLong(8, 16);\n-        if (mode != 0){ // mode is initialised to 0\n+        if (CpioUtil.fileType(mode) != 0){ // mode is initialised to 0\n             ret.setMode(mode);\n         }\n         ret.setUID(readAsciiLong(8, 16));\n         ret.setChksum(readAsciiLong(8, 16));\n         String name = readCString((int) namesize);\n         ret.setName(name);\n-        if (mode == 0 && !name.equals(CPIO_TRAILER)){\n+        if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){\n             throw new IOException(\"Mode 0 only allowed in the trailer. Found entry name: \"+name + \" Occured at byte: \" + getBytesRead());\n         }\n         skip(ret.getHeaderPadCount());\n         ret.setDevice(readAsciiLong(6, 8));\n         ret.setInode(readAsciiLong(6, 8));\n         final long mode = readAsciiLong(6, 8);\n-        if (mode != 0) {\n+        if (CpioUtil.fileType(mode) != 0) {\n             ret.setMode(mode);\n         }\n         ret.setUID(readAsciiLong(6, 8));\n         ret.setSize(readAsciiLong(11, 8));\n         final String name = readCString((int) namesize);\n         ret.setName(name);\n-        if (mode == 0 && !name.equals(CPIO_TRAILER)){\n+        if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){\n             throw new IOException(\"Mode 0 only allowed in the trailer. Found entry: \"+ name + \" Occured at byte: \" + getBytesRead());\n         }\n \n         ret.setDevice(readBinaryLong(2, swapHalfWord));\n         ret.setInode(readBinaryLong(2, swapHalfWord));\n         final long mode = readBinaryLong(2, swapHalfWord);\n-        if (mode != 0){\n+        if (CpioUtil.fileType(mode) != 0){\n             ret.setMode(mode);\n         }\n         ret.setUID(readBinaryLong(2, swapHalfWord));\n         ret.setSize(readBinaryLong(4, swapHalfWord));\n         final String name = readCString((int) namesize);\n         ret.setName(name);\n-        if (mode == 0 && !name.equals(CPIO_TRAILER)){\n+        if (CpioUtil.fileType(mode) == 0 && !name.equals(CPIO_TRAILER)){\n             throw new IOException(\"Mode 0 only allowed in the trailer. Found entry: \"+name + \"Occured at byte: \" + getBytesRead());\n         }\n         skip(ret.getHeaderPadCount());\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioUtil.java\n  * @Immutable\n  */\n class CpioUtil {\n+\n+    /**\n+     * Extracts the file type bits from a mode.\n+     */\n+    static long fileType(long mode) {\n+        return mode & CpioConstants.S_IFMT;\n+    }\n+\n     /**\n      * Converts a byte array to a long. Halfwords can be swapped by setting\n      * swapHalfWord=true.\n--- a/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java\n         in.close();\n         assertEquals(result.toString(), expected.toString());\n     }\n+\n+    public void testCpioUnarchiveCreatedByRedlineRpm() throws Exception {\n+        CpioArchiveInputStream in =\n+            new CpioArchiveInputStream(new FileInputStream(getFile(\"redline.cpio\")));\n+        CpioArchiveEntry entry= null;\n+\n+        int count = 0;\n+        while ((entry = (CpioArchiveEntry) in.getNextEntry()) != null) {\n+            count++;\n+        }\n+        in.close();\n+\n+        assertEquals(count, 1);\n+    }\n }", "timestamp": 1375978725, "metainfo": ""}