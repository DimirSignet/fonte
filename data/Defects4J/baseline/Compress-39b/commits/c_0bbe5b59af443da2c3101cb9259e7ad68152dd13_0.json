{"sha": "0bbe5b59af443da2c3101cb9259e7ad68152dd13", "log": "COMPRESS-305 Convert all tests to JUnit4 style Convert the AbstractTestCase test cases  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n  */\n package org.apache.commons.compress;\n \n+import static org.junit.Assert.*;\n import java.io.BufferedInputStream;\n import java.io.Closeable;\n import java.io.File;\n import java.util.List;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n import org.apache.commons.compress.utils.IOUtils;\n-\n-public abstract class AbstractTestCase extends TestCase {\n+import org.junit.After;\n+import org.junit.Before;\n+\n+public abstract class AbstractTestCase {\n \n     protected File dir;\n     protected File resultDir;\n \n     protected ArchiveStreamFactory factory = new ArchiveStreamFactory();\n \n-    public AbstractTestCase() {\n-    }\n-\n-    public AbstractTestCase(String name) {\n-        super(name);\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n+    @Before\n+    public void setUp() throws Exception {\n         dir = mkdir(\"dir\");\n         resultDir = mkdir(\"dir-result\");\n         archive = null;\n         return new File(uri);\n     }\n \n-    @Override\n-    protected void tearDown() throws Exception {\n+    @After\n+    public void tearDown() throws Exception {\n         rmdir(dir);\n         rmdir(resultDir);\n         dir = resultDir = null;\n--- a/src/test/java/org/apache/commons/compress/ArchiveReadTest.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveReadTest.java\n \n package org.apache.commons.compress;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileReader;\n-import java.io.IOException;\n+import java.io.FilenameFilter;\n import java.util.ArrayList;\n-\n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n+import java.util.Collection;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveException;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n \n /**\n  * Test that can read various archive file examples.\n  * \n  * Files must be in resources/archives, and there must be a file.txt containing\n  * the list of files in the archives.\n- * \n- * The class uses nested suites in order to be able to name the test after the file name,\n- * as JUnit does not allow one to change the display name of a test.\n  */\n+@RunWith(Parameterized.class)\n public class ArchiveReadTest extends AbstractTestCase {\n \n-    final static ClassLoader classLoader = ArchiveReadTest.class.getClassLoader();\n+    private static final ClassLoader CLASSLOADER = ArchiveReadTest.class.getClassLoader();\n+    private static final File ARCDIR = new File(CLASSLOADER.getResource(\"archives\").getFile());\n+    private static final ArrayList<String> FILELIST = new ArrayList<String>();\n \n     private File file;\n-    private static final ArrayList<String> fileList = new ArrayList<String>();\n \n-    public ArchiveReadTest(String name) {\n-        super(name);\n-    }\n-\n-    private ArchiveReadTest(String name, File file){\n-        super(name);\n+    public ArchiveReadTest(File file){\n         this.file = file;\n     }\n \n-    public static TestSuite suite() throws IOException{\n-        TestSuite suite = new TestSuite(\"ArchiveReadTests\");\n-        // TODO move fileList setup to static block\n-        File arcdir =new File(classLoader.getResource(\"archives\").getFile());\n-        assertTrue(arcdir.exists());\n-        File listing= new File(arcdir,\"files.txt\");\n+    @BeforeClass\n+    public static void setUpFileList() throws Exception {\n+        assertTrue(ARCDIR.exists());\n+        File listing= new File(ARCDIR,\"files.txt\");\n         assertTrue(\"files.txt is readable\",listing.canRead());\n         BufferedReader br = new BufferedReader(new FileReader(listing));\n         String line;\n-        fileList.clear(); // Surefire calls the suite more than once\n         while ((line=br.readLine())!=null){\n-            if (line.startsWith(\"#\")){\n-                continue;\n+            if (!line.startsWith(\"#\")){\n+                FILELIST.add(line);\n             }\n-            fileList.add(line);\n         }\n         br.close();\n-        File[]files=arcdir.listFiles();\n-        for (final File file : files) {\n-            if (file.getName().endsWith(\".txt\")){\n-                continue;\n+    }\n+\n+    @Parameters\n+    public static Collection<Object[]> data() {\n+        assertTrue(ARCDIR.exists());\n+        Collection<Object[]> params = new ArrayList<Object[]>();\n+        for (File f : ARCDIR.listFiles(new FilenameFilter() {\n+            public boolean accept(File dir, String name) {\n+                return !name.endsWith(\".txt\");\n             }\n-            // Appears to be the only way to give the test a variable name\n-            TestSuite namedSuite = new TestSuite(file.getName());\n-            Test test = new ArchiveReadTest(\"testArchive\", file);\n-            namedSuite.addTest(test);\n-            suite.addTest(namedSuite);\n+        })) \n+        {\n+            params.add(new Object[] { f });\n         }\n-        return suite;\n+      return params;\n     }\n \n     // files.txt contains size and filename\n         return entry.getSize() + \" \" + entry.getName();\n     }\n \n+    @Test\n     public void testArchive() throws Exception{\n         @SuppressWarnings(\"unchecked\") // fileList is correct type already\n-        ArrayList<String> expected= (ArrayList<String>) fileList.clone();\n+        ArrayList<String> expected= (ArrayList<String>) FILELIST.clone();\n         try {\n            checkArchiveContent(file, expected);\n         } catch (ArchiveException e) {\n             fail(\"Problem checking \"+file);\n-        } catch (junit.framework.AssertionFailedError e) { // show error in context\n+        } catch (AssertionError e) { // show error in context\n             fail(\"Problem checking \" + file + \" \" +e);\n         }\n     }\n--- a/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n \n package org.apache.commons.compress;\n \n+import static org.junit.Assert.*;\n+\n import org.apache.commons.compress.utils.ArchiveUtils;\n+import org.junit.Test;\n \n public class ArchiveUtilsTest extends AbstractTestCase {\n \n             i += 2;\n         }\n     }\n+\n+    @Test\n     public void testCompareBA(){\n         byte[] buffer1 = {1,2,3};\n         byte[] buffer2 = {1,2,3,0};\n         assertTrue(ArchiveUtils.isEqual(buffer3, buffer1));\n     }\n \n+    @Test\n     public void testCompareAscii(){\n         byte[] buffer1 = {'a','b','c'};\n         byte[] buffer2 = {'d','e','f',0};\n         assertFalse(ArchiveUtils.matchAsciiBuffer(\"def\", buffer2));\n     }\n \n+    @Test\n     public void testAsciiConversions() {\n         asciiToByteAndBackOK(\"\");\n         asciiToByteAndBackOK(\"abcd\");\n--- a/src/test/java/org/apache/commons/compress/ChainingTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/ChainingTestCase.java\n \n package org.apache.commons.compress;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileInputStream;\n \n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.junit.Test;\n \n \n public class ChainingTestCase extends AbstractTestCase {\n \n+    @Test\n     public void testTarGzip() throws Exception {\n         File file = getFile(\"bla.tgz\");\n         final TarArchiveInputStream is = new TarArchiveInputStream(new GzipCompressorInputStream(new FileInputStream(file)));\n         is.close();\n     }\n \n+    @Test\n     public void testTarBzip2() throws Exception {\n         File file = getFile(\"bla.tar.bz2\");\n         final TarArchiveInputStream is = new TarArchiveInputStream(new BZip2CompressorInputStream(new FileInputStream(file)));\n--- a/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n  */\n package org.apache.commons.compress;\n \n+import static org.junit.Assert.*;\n+\n import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n+import org.junit.Test;\n \n public final class DetectArchiverTestCase extends AbstractTestCase {\n-    public DetectArchiverTestCase(String name) {\n-        super(name);\n-    }\n \n     final ClassLoader classLoader = getClass().getClassLoader();\n \n+    @Test\n     public void testDetectionNotArchive() throws IOException {\n         try {\n             getStreamFor(\"test.txt\");\n         }\n     }\n \n+    @Test\n     public void testCOMPRESS117() throws Exception {\n         final ArchiveInputStream tar = getStreamFor(\"COMPRESS-117.tar\");\n         assertNotNull(tar);\n         assertTrue(tar instanceof TarArchiveInputStream);\n     }\n \n+    @Test\n     public void testDetection() throws Exception {\n \n         final ArchiveInputStream ar = getStreamFor(\"bla.ar\"); \n //        emptyArchive(\"ar\");\n //    }\n \n+    @Test\n     public void testEmptyCpioArchive() throws Exception {\n         checkEmptyArchive(\"cpio\");\n     }\n \n+    @Test\n     public void testEmptyJarArchive() throws Exception {\n         checkEmptyArchive(\"jar\");\n     }\n //    public void testEmptyTarArchive() throws Exception {\n //        checkEmptyArchive(\"tar\");\n //    }\n+    @Test\n     public void testEmptyZipArchive() throws Exception {\n         checkEmptyArchive(\"zip\");\n     }\n--- a/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n+++ b/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n \n package org.apache.commons.compress;\n \n+import static org.junit.Assert.*;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import org.apache.commons.compress.archivers.jar.JarArchiveEntry;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.junit.Test;\n \n /**\n  * Check that the different write methods create the same output.\n         }\n     }\n \n+    @Test\n     public void testWriteAr() throws Exception {\n         ArchiveEntry entry = new ArArchiveEntry(\"dummy\", bytesToTest);\n         compareWrites(\"ar\", entry);\n     }\n+\n+    @Test\n     public void testWriteCpio() throws Exception {\n         ArchiveEntry entry = new CpioArchiveEntry(\"dummy\", bytesToTest);\n         compareWrites(\"cpio\", entry);\n     }\n+\n+    @Test\n     public void testWriteJar() throws Exception {\n         ArchiveEntry entry = new JarArchiveEntry(\"dummy\");\n         compareWrites(\"jar\", entry);\n     }\n+\n+    @Test\n     public void testWriteTar() throws Exception {\n         TarArchiveEntry entry = new TarArchiveEntry(\"dummy\");\n         entry.setSize(bytesToTest);\n         compareWrites(\"tar\", entry);\n     }\n+\n+    @Test\n     public void testWriteZip() throws Exception {\n         ArchiveEntry entry = new ZipArchiveEntry(\"dummy\");\n         compareWrites(\"zip\", entry);\n     }\n \n+    @Test\n     public void testReadAr() throws Exception {\n         compareReads(\"ar\");\n     }\n \n+    @Test\n     public void testReadCpio() throws Exception {\n         compareReads(\"cpio\");\n     }\n \n+    @Test\n     public void testReadJar() throws Exception {\n         compareReads(\"jar\");\n     }\n \n+    @Test\n     public void testReadTar() throws Exception {\n         compareReads(\"tar\");\n     }\n \n+    @Test\n     public void testReadZip() throws Exception {\n         compareReads(\"zip\");\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import static org.junit.Assert.*;\n+\n import java.io.BufferedInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n import org.apache.commons.compress.archivers.ar.ArArchiveOutputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Ignore;\n+import org.junit.Test;\n \n public final class ArTestCase extends AbstractTestCase {\n \n+    @Test\n     public void testArArchiveCreation() throws Exception {\n         final File output = new File(dir, \"bla.ar\");\n \n         os.close();\n     }\n \n+    @Test\n     public void testArUnarchive() throws Exception {\n         final File output = new File(dir, \"bla.ar\");\n         {\n         is.close();\n     }\n \n+    @Test\n     public void testArDelete() throws Exception {\n         final File output = new File(dir, \"bla.ar\");\n \n     }\n \n     // TODO: revisit - does AR not support storing directories?\n+    @Ignore\n+    @Test\n     public void XtestDirectoryEntryFromFile() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n     }\n \n     // TODO: revisit - does AR not support storing directories?\n+    @Ignore\n+    @Test\n     public void XtestExplicitDirectoryEntry() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testFileEntryFromFile() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testExplicitFileEntry() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n--- a/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import static org.junit.Assert.*;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public class ArchiveOutputStreamTest extends AbstractTestCase {\n \n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-    }\n-\n-    @Override\n-    protected void tearDown() throws Exception {\n-        super.tearDown();\n-    }\n-\n+    @Test\n     public void testFinish() throws Exception {\n         OutputStream out1 = new ByteArrayOutputStream();\n \n         }\n     }\n \n+    @Test\n     public void testOptionalFinish() throws Exception {\n         OutputStream out1 = new ByteArrayOutputStream();\n \n         }\n     }\n \n+    @Test\n     public void testCallSequenceAr() throws Exception{\n         doCallSequence(\"Ar\");\n     }\n \n+    @Test\n     public void testCallSequenceCpio() throws Exception{\n         doCallSequence(\"Cpio\");\n     }\n \n+    @Test\n     public void testCallSequenceJar() throws Exception{\n         doCallSequence(\"Jar\");\n     }\n \n+    @Test\n     public void testCallSequenceTar() throws Exception{\n         doCallSequence(\"Tar\");\n     }\n \n+    @Test\n     public void testCallSequenceZip() throws Exception{\n         doCallSequence(\"Zip\");\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream;\n import org.apache.commons.compress.archivers.cpio.CpioConstants;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class CpioTestCase extends AbstractTestCase {\n \n+    @Test\n     public void testCpioArchiveCreation() throws Exception {\n         final File output = new File(dir, \"bla.cpio\");\n \n         out.close();\n     }\n \n+    @Test\n     public void testCpioUnarchive() throws Exception {\n         final File output = new File(dir, \"bla.cpio\");\n         final File file1 = getFile(\"test1.xml\");\n         assertEquals(\"length of \" + t.getAbsolutePath(), file2Length, t.length());\n     }\n \n+    @Test\n     public void testDirectoryEntryFromFile() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testExplicitDirectoryEntry() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testFileEntryFromFile() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testExplicitFileEntry() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n--- a/src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import static org.junit.Assert.*;\n+\n import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class DumpTestCase extends AbstractTestCase {\n \n+    @Test\n     public void testDumpUnarchiveAll() throws Exception {\n         unarchiveAll(getFile(\"bla.dump\"));\n     }\n \n+    @Test\n     public void testCompressedDumpUnarchiveAll() throws Exception {\n         unarchiveAll(getFile(\"bla.z.dump\"));\n     }\n         }\n     }\n \n+    @Test\n     public void testArchiveDetection() throws Exception {\n         archiveDetection(getFile(\"bla.dump\"));\n     }\n \n+    @Test\n     public void testCompressedArchiveDetection() throws Exception {\n         archiveDetection(getFile(\"bla.z.dump\"));\n     }\n         }\n     }\n \n+    @Test\n     public void testCheckArchive() throws Exception {\n         checkDumpArchive(getFile(\"bla.dump\"));\n     }\n \n+    @Test\n     public void testCheckCompressedArchive() throws Exception {\n         checkDumpArchive(getFile(\"bla.z.dump\"));\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class JarTestCase extends AbstractTestCase {\n+\n+    @Test\n     public void testJarArchiveCreation() throws Exception {\n         final File output = new File(dir, \"bla.jar\");\n \n     }\n \n \n+    @Test\n     public void testJarUnarchive() throws Exception {\n         final File input = getFile(\"bla.jar\");\n         final InputStream is = new FileInputStream(input);\n         is.close();\n     }\n \n+    @Test\n     public void testJarUnarchiveAll() throws Exception {\n         final File input = getFile(\"bla.jar\");\n         final InputStream is = new FileInputStream(input);\n--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n \n package org.apache.commons.compress.archivers;\n \n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.BufferedInputStream;\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileReader;\n-import java.io.IOException;\n+import java.io.FilenameFilter;\n import java.util.ArrayList;\n-import java.util.Map;\n-import java.util.HashMap;\n+import java.util.Collection;\n \n import junit.framework.AssertionFailedError;\n-import junit.framework.Test;\n-import junit.framework.TestSuite;\n \n import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n \n /**\n  * Test that can read various tar file examples.\n  * \n- * The class uses nested suites in order to be able to name the test after the file name,\n- * as JUnit does not allow one to change the display name of a test.\n- */\n+  * Files must be in resources/longpath, and there must be a file.txt containing\n+ * the list of files in the archives.\n+*/\n+@RunWith(Parameterized.class)\n public class LongPathTest extends AbstractTestCase {\n \n-    private String name;\n+    private static final ClassLoader CLASSLOADER = LongPathTest.class.getClassLoader();\n+    private static final File ARCDIR = new File(CLASSLOADER.getResource(\"longpath\").getFile());\n+    private static final ArrayList<String> FILELIST = new ArrayList<String>();\n+\n     private File file;\n \n-    private static final Map<String, ArrayList<String>> fileLists = new HashMap<String, ArrayList<String>>();\n-\n-    public LongPathTest(String name) {\n-        super(name);\n-    }\n-\n-    private LongPathTest(String name, String function, File file) {\n-        super(function);\n-        this.name = name;\n+    public LongPathTest(File file){\n         this.file = file;\n     }\n \n-    public static TestSuite suite() throws IOException{\n-        TestSuite suite = new TestSuite(\"LongPathTests\");\n-        suite.addTest(createSuite(\"LongPathTest\", \"longpath\"));\n-        suite.addTest(createSuite(\"LongSymlinkTest\", \"longsymlink\"));\n-        return suite;\n+    @BeforeClass\n+    public static void setUpFileList() throws Exception {\n+        assertTrue(ARCDIR.exists());\n+        File listing= new File(ARCDIR,\"files.txt\");\n+        assertTrue(\"files.txt is readable\",listing.canRead());\n+        BufferedReader br = new BufferedReader(new FileReader(listing));\n+        String line;\n+        while ((line=br.readLine())!=null){\n+            if (!line.startsWith(\"#\")){\n+                FILELIST.add(line);\n+            }\n+        }\n+        br.close();\n     }\n \n-    public static TestSuite createSuite(String name, String dirname) throws IOException {\n-        TestSuite suite = new TestSuite(name);\n-        File arcdir = getFile(dirname);\n-        assertTrue(arcdir.exists());\n-        File listing= new File(arcdir,\"files.txt\");\n-        assertTrue(\"File listing is readable\",listing.canRead());\n-        BufferedReader br = new BufferedReader(new FileReader(listing));\n-\n-        ArrayList<String> fileList = new ArrayList<String>();\n-        String line;\n-        while ((line=br.readLine())!=null){\n-            if (line.startsWith(\"#\")){\n-                continue;\n+    @Parameters\n+    public static Collection<Object[]> data() {\n+        Collection<Object[]> params = new ArrayList<Object[]>();\n+        for (File f : ARCDIR.listFiles(new FilenameFilter() {\n+            public boolean accept(File dir, String name) {\n+                return !name.endsWith(\".txt\");\n             }\n-            fileList.add(line);\n+        })) \n+        {\n+            params.add(new Object[] { f });\n         }\n-        fileLists.put(name, fileList);\n-        br.close();\n-        File[]files=arcdir.listFiles();\n-        for (final File file : files) {\n-            if (file.getName().endsWith(\".txt\")){\n-                continue;\n-            }\n-            // Appears to be the only way to give the test a variable name\n-            TestSuite namedSuite = new TestSuite(file.getName());\n-            Test test = new LongPathTest(name, \"testArchive\", file);\n-            namedSuite.addTest(test);\n-            suite.addTest(namedSuite);\n-        }\n-        return suite;\n+      return params;\n     }\n \n     @Override\n         return entry.getName();\n     }\n \n+    @Test\n     public void testArchive() throws Exception {\n-        ArrayList<String> fileList = fileLists.get(name);\n         @SuppressWarnings(\"unchecked\") // fileList is of correct type\n-        ArrayList<String> expected = (ArrayList<String>) fileList.clone();\n+        ArrayList<String> expected = (ArrayList<String>) FILELIST.clone();\n         String name = file.getName();\n         if (\"minotaur.jar\".equals(name) || \"minotaur-0.jar\".equals(name)){\n             expected.add(\"META-INF/\");\n             assertTrue(ais instanceof ArArchiveInputStream);\n             // CPIO does not store directories or directory names\n             expected.clear();\n-            for (String ent : fileList) {\n+            for (String ent : FILELIST) {\n                 if (!ent.endsWith(\"/\")) {// not a directory\n                     final int lastSlash = ent.lastIndexOf('/');\n                     if (lastSlash >= 0) { // extract path name\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \n+ */\n+\n+package org.apache.commons.compress.archivers;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.FilenameFilter;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+import junit.framework.AssertionFailedError;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+/**\n+ * Test that can read various tar file examples.\n+ * \n+  * Files must be in resources/longsymlink, and there must be a file.txt containing\n+ * the list of files in the archives.\n+*/\n+@RunWith(Parameterized.class)\n+public class LongSymLinkTest extends AbstractTestCase {\n+\n+    private static final ClassLoader CLASSLOADER = LongSymLinkTest.class.getClassLoader();\n+    private static final File ARCDIR = new File(CLASSLOADER.getResource(\"longsymlink\").getFile());\n+    private static final ArrayList<String> FILELIST = new ArrayList<String>();\n+\n+    private File file;\n+\n+    public LongSymLinkTest(File file){\n+        this.file = file;\n+    }\n+\n+    @BeforeClass\n+    public static void setUpFileList() throws Exception {\n+        assertTrue(ARCDIR.exists());\n+        File listing= new File(ARCDIR,\"files.txt\");\n+        assertTrue(\"files.txt is readable\",listing.canRead());\n+        BufferedReader br = new BufferedReader(new FileReader(listing));\n+        String line;\n+        while ((line=br.readLine())!=null){\n+            if (!line.startsWith(\"#\")){\n+                FILELIST.add(line);\n+            }\n+        }\n+        br.close();\n+    }\n+\n+    @Parameters\n+    public static Collection<Object[]> data() {\n+        Collection<Object[]> params = new ArrayList<Object[]>();\n+        for (File f : ARCDIR.listFiles(new FilenameFilter() {\n+            public boolean accept(File dir, String name) {\n+                return !name.endsWith(\".txt\");\n+            }\n+        })) \n+        {\n+            params.add(new Object[] { f });\n+        }\n+      return params;\n+    }\n+\n+\n+    @Override\n+    protected String getExpectedString(ArchiveEntry entry) {\n+        if (entry instanceof TarArchiveEntry) {\n+            TarArchiveEntry tarEntry = (TarArchiveEntry) entry;\n+            if (tarEntry.isSymbolicLink()) {\n+                return tarEntry.getName() + \" -> \" + tarEntry.getLinkName();\n+            }\n+        }\n+        return entry.getName();\n+    }\n+\n+    @Test\n+    public void testArchive() throws Exception {\n+        @SuppressWarnings(\"unchecked\") // fileList is of correct type\n+        ArrayList<String> expected = (ArrayList<String>) FILELIST.clone();\n+        String name = file.getName();\n+        if (\"minotaur.jar\".equals(name) || \"minotaur-0.jar\".equals(name)){\n+            expected.add(\"META-INF/\");\n+            expected.add(\"META-INF/MANIFEST.MF\");\n+        }\n+        ArchiveInputStream ais = factory.createArchiveInputStream(new BufferedInputStream(new FileInputStream(file)));\n+        // check if expected type recognised\n+        if (name.endsWith(\".tar\")){\n+            assertTrue(ais instanceof TarArchiveInputStream);\n+        } else if (name.endsWith(\".jar\") || name.endsWith(\".zip\")){\n+            assertTrue(ais instanceof ZipArchiveInputStream);\n+        } else if (name.endsWith(\".cpio\")){\n+            assertTrue(ais instanceof CpioArchiveInputStream);\n+            // Hack: cpio does not add trailing \"/\" to directory names\n+            for(int i=0; i < expected.size(); i++){\n+                String ent = expected.get(i);\n+                if (ent.endsWith(\"/\")){\n+                    expected.set(i, ent.substring(0, ent.length()-1));\n+                }\n+            }\n+        } else if (name.endsWith(\".ar\")){\n+            assertTrue(ais instanceof ArArchiveInputStream);\n+            // CPIO does not store directories or directory names\n+            expected.clear();\n+            for (String ent : FILELIST) {\n+                if (!ent.endsWith(\"/\")) {// not a directory\n+                    final int lastSlash = ent.lastIndexOf('/');\n+                    if (lastSlash >= 0) { // extract path name\n+                        expected.add(ent.substring(lastSlash + 1, ent.length()));\n+                    } else {\n+                        expected.add(ent);\n+                    }\n+                }\n+            }\n+        } else {\n+            fail(\"Unexpected file type: \"+name);\n+        }\n+        try {\n+            checkArchiveContent(ais, expected);\n+        } catch (AssertionFailedError e) {\n+            fail(\"Error processing \"+file.getName()+\" \"+e);\n+        } finally {\n+            ais.close();\n+        }\n+    }\n+}\n--- a/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n import org.apache.commons.compress.archivers.sevenz.SevenZFile;\n import org.apache.commons.compress.archivers.sevenz.SevenZMethod;\n import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;\n+import org.junit.Test;\n \n public class SevenZTestCase extends AbstractTestCase {\n \n+    @Test\n     public void testSevenZArchiveCreationUsingCopy() throws Exception {\n         testSevenZArchiveCreation(SevenZMethod.COPY);\n     }\n     \n+    @Test\n     public void testSevenZArchiveCreationUsingLZMA2() throws Exception {\n         testSevenZArchiveCreation(SevenZMethod.LZMA2);\n     }\n     \n+    @Test\n     public void testSevenZArchiveCreationUsingBZIP2() throws Exception {\n         testSevenZArchiveCreation(SevenZMethod.BZIP2);\n     }\n     \n+    @Test\n     public void testSevenZArchiveCreationUsingDeflate() throws Exception {\n         testSevenZArchiveCreation(SevenZMethod.DEFLATE);\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n import org.apache.commons.compress.utils.CharsetNames;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class TarTestCase extends AbstractTestCase {\n+\n+    @Test\n     public void testTarArchiveCreation() throws Exception {\n         final File output = new File(dir, \"bla.tar\");\n         final File file1 = getFile(\"test1.xml\");\n         os.close();\n     }\n \n+    @Test\n     public void testTarArchiveLongNameCreation() throws Exception {\n         String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\";\n         byte[] bytes = name.getBytes(CharsetNames.UTF_8);\n         }\n     }\n \n+    @Test\n     public void testTarUnarchive() throws Exception {\n         final File input = getFile(\"bla.tar\");\n         final InputStream is = new FileInputStream(input);\n         out.close();\n     }\n \n+    @Test\n     public void testCOMPRESS114() throws Exception {\n         final File input = getFile(\"COMPRESS-114.tar\");\n         final InputStream is = new FileInputStream(input);\n         in.close();\n     }\n \n+    @Test\n     public void testDirectoryEntryFromFile() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testExplicitDirectoryEntry() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testFileEntryFromFile() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testExplicitFileEntry() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testCOMPRESS178() throws Exception {\n         final File input = getFile(\"COMPRESS-178.tar\");\n         final InputStream is = new FileInputStream(input);\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import static org.junit.Assert.*;\n+\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.FileInputStream; \t\n import org.apache.commons.compress.archivers.zip.ZipMethod;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.Assert;\n+import org.junit.Test;\n \n public final class ZipTestCase extends AbstractTestCase {\n     /**\n      * and source is the same, it looks like the operations have worked\n      * @throws Exception\n      */\n+    @Test\n     public void testZipArchiveCreation() throws Exception {\n         // Archive\n         final File output = new File(dir, \"bla.zip\");\n      * Simple unarchive test. Asserts nothing.\n      * @throws Exception\n      */\n+    @Test\n     public void testZipUnarchive() throws Exception {\n         final File input = getFile(\"bla.zip\");\n         final InputStream is = new FileInputStream(input);\n      * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-208\"\n      * >COMPRESS-208</a>.\n      */\n+    @Test\n     public void testSkipsPK00Prefix() throws Exception {\n         final File input = getFile(\"COMPRESS-208.zip\");\n         InputStream is = new FileInputStream(input);\n      * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n      * >COMPRESS-93</a>.\n      */\n+    @Test\n     public void testSupportedCompressionMethod() throws IOException {\n         /*\n         ZipFile bla = new ZipFile(getFile(\"bla.zip\"));\n      * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n      *        >COMPRESS-93</a>\n      */\n+    @Test\n     public void testSkipEntryWithUnsupportedCompressionMethod()\n             throws IOException {\n         ZipArchiveInputStream zip =\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testListAllFilesWithNestedArchive() throws Exception {\n         final File input = getFile(\"OSX_ArchiveWithNestedArchive.zip\");\n \n         results.contains(\"test3.xml\");\n     }\n \n+    @Test\n     public void testDirectoryEntryFromFile() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testExplicitDirectoryEntry() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     };\n \n+    @Test\n     public void testCopyRawEntriesFromFile()\n             throws IOException {\n \n         zf2.close();\n     }\n \n+    @Test\n     public void testCopyRawZip64EntryFromFile()\n             throws IOException {\n \n         assertSameFileContents(reference, fileResult);\n         zf1.close();\n     }\n+\n+    @Test\n     public void testUnixModeInAddRaw() throws IOException {\n \n         File[] tmp = createTempDirAndFile();\n         zos.closeArchiveEntry();\n     }\n \n+    @Test\n     public void testFileEntryFromFile() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n         }\n     }\n \n+    @Test\n     public void testExplicitFileEntry() throws Exception {\n         File[] tmp = createTempDirAndFile();\n         File archive = null;\n--- a/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java\n \n package org.apache.commons.compress.archivers.ar;\n \n+import static org.junit.Assert.*;\n+\n import java.io.BufferedInputStream;\n import java.io.FileInputStream;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.utils.ArchiveUtils;\n+import org.junit.Test;\n \n public class ArArchiveInputStreamTest extends AbstractTestCase {\n \n+    @Test\n     public void testReadLongNamesGNU() throws Exception {\n         checkLongNameEntry(\"longfile_gnu.ar\");\n     }\n \n+    @Test\n     public void testReadLongNamesBSD() throws Exception {\n         checkLongNameEntry(\"longfile_bsd.ar\");\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java\n \n package org.apache.commons.compress.archivers.ar;\n \n+import static org.junit.Assert.*;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.util.List;\n \n import org.apache.commons.compress.AbstractTestCase;\n+import org.junit.Test;\n \n public class ArArchiveOutputStreamTest extends AbstractTestCase {\n \n+    @Test\n     public void testLongFileNamesCauseExceptionByDefault() {\n         ArArchiveOutputStream os = null;\n         try {\n         }\n     }\n \n+    @Test\n     public void testLongFileNamesWorkUsingBSDDialect() throws Exception {\n         FileOutputStream fos = null;\n         ArArchiveOutputStream os = null;\n--- a/src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStreamTest.java\n \n package org.apache.commons.compress.archivers.arj;\n \n+import static org.junit.Assert.*;\n+\n import java.io.FileInputStream;\n import java.util.Calendar;\n import java.util.TimeZone;\n \n import org.apache.commons.compress.AbstractTestCase;\n+import org.junit.Test;\n \n public class ArjArchiveInputStreamTest extends AbstractTestCase {\n \n+    @Test\n     public void testArjUnarchive() throws Exception {\n         StringBuilder expected = new StringBuilder();\n         expected.append(\"test1.xml<?xml version=\\\"1.0\\\"?>\\n\");\n         assertEquals(result.toString(), expected.toString());\n     }\n \n+    @Test\n     public void testReadingOfAttributesDosVersion() throws Exception {\n         ArjArchiveInputStream in = new ArjArchiveInputStream(new FileInputStream(getFile(\"bla.arj\")));\n         ArjArchiveEntry entry = in.getNextEntry();\n         in.close();\n     }\n \n+    @Test\n     public void testReadingOfAttributesUnixVersion() throws Exception {\n         ArjArchiveInputStream in = new ArjArchiveInputStream(new FileInputStream(getFile(\"bla.unix.arj\")));\n         ArjArchiveEntry entry = in.getNextEntry();\n--- a/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStreamTest.java\n  */\n package org.apache.commons.compress.archivers.cpio;\n \n+import static org.junit.Assert.*;\n+\n import java.io.FileInputStream;\n \n import org.apache.commons.compress.AbstractTestCase;\n+import org.junit.Test;\n \n public class CpioArchiveInputStreamTest extends AbstractTestCase {\n \n+    @Test\n     public void testCpioUnarchive() throws Exception {\n         StringBuilder expected = new StringBuilder();\n         expected.append(\"./test1.xml<?xml version=\\\"1.0\\\"?>\\n\");\n         assertEquals(result.toString(), expected.toString());\n     }\n \n+    @Test\n     public void testCpioUnarchiveCreatedByRedlineRpm() throws Exception {\n         CpioArchiveInputStream in =\n             new CpioArchiveInputStream(new FileInputStream(getFile(\"redline.cpio\")));\n--- a/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java\n  */\n package org.apache.commons.compress.archivers.cpio;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public class CpioArchiveOutputStreamTest extends AbstractTestCase {\n \n+    @Test\n     public void testWriteOldBinary() throws Exception {\n         final File f = getFile(\"test1.xml\");\n         final File output = new File(dir, \"test.cpio\");\n--- a/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java\n  */\n package org.apache.commons.compress.archivers.dump;\n \n-import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.*;\n \n import java.io.FileInputStream;\n import java.io.InputStream;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.ArchiveException;\n+import org.junit.Test;\n \n public class DumpArchiveInputStreamTest extends AbstractTestCase {\n \n+    @Test\n     public void testNotADumpArchive() throws Exception {\n         FileInputStream is = new FileInputStream(getFile(\"bla.zip\"));\n         try {\n         }\n     }\n \n+    @Test\n     public void testNotADumpArchiveButBigEnough() throws Exception {\n         FileInputStream is = new FileInputStream(getFile(\"zip64support.tar.bz2\"));\n         try {\n         }\n     }\n \n+    @Test\n     public void testConsumesArchiveCompletely() throws Exception {\n         InputStream is = DumpArchiveInputStreamTest.class\n             .getResourceAsStream(\"/archive_with_trailer.dump\");\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n  */\n package org.apache.commons.compress.archivers.sevenz;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.security.NoSuchAlgorithmException;\n import java.util.Arrays;\n import javax.crypto.Cipher;\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.PasswordRequiredException;\n+import org.junit.Test;\n \n public class SevenZFileTest extends AbstractTestCase {\n     private static final String TEST2_CONTENT = \"<?xml version = '1.0'?>\\r\\n<!DOCTYPE\"\n         + \" connections>\\r\\n<meinxml>\\r\\n\\t<leer />\\r\\n</meinxml>\\n\";\n \n+    @Test\n     public void testAllEmptyFilesArchive() throws Exception {\n         SevenZFile archive = new SevenZFile(getFile(\"7z-empty-mhc-off.7z\"));\n         try {\n         }\n     }\n     \n+    @Test\n     public void testHelloWorldHeaderCompressionOffCopy() throws Exception {\n         checkHelloWorld(\"7z-hello-mhc-off-copy.7z\");\n     }\n \n+    @Test\n     public void testHelloWorldHeaderCompressionOffLZMA2() throws Exception {\n         checkHelloWorld(\"7z-hello-mhc-off-lzma2.7z\");\n     }\n \n+    @Test\n     public void test7zUnarchive() throws Exception {\n         test7zUnarchive(getFile(\"bla.7z\"), SevenZMethod.LZMA);\n     }\n \n+    @Test\n     public void test7zDeflateUnarchive() throws Exception {\n         test7zUnarchive(getFile(\"bla.deflate.7z\"), SevenZMethod.DEFLATE);\n     }\n \n+    @Test\n     public void test7zDecryptUnarchive() throws Exception {\n         if (isStrongCryptoAvailable()) {\n             test7zUnarchive(getFile(\"bla.encrypted.7z\"), SevenZMethod.LZMA, // stack LZMA + AES\n         test7zUnarchive(f, m, null);\n     }\n \n+    @Test\n     public void testEncryptedArchiveRequiresPassword() throws Exception {\n         try {\n             new SevenZFile(getFile(\"bla.encrypted.7z\"));\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-256\"\n      */\n+    @Test\n     public void testCompressedHeaderWithNonDefaultDictionarySize() throws Exception {\n         SevenZFile sevenZFile = new SevenZFile(getFile(\"COMPRESS-256.7z\"));\n         try {\n         }\n     }\n \n+    @Test\n     public void testSignatureCheck() {\n         assertTrue(SevenZFile.matches(SevenZFile.sevenZSignature,\n                                       SevenZFile.sevenZSignature.length));\n                                                     (byte) 0xAF, 0x27, 0x1D}, 6));\n     }\n \n+    @Test\n     public void testReadingBackLZMA2DictSize() throws Exception {\n         File output = new File(dir, \"lzma2-dictsize.7z\");\n         SevenZOutputFile outArchive = new SevenZOutputFile(output);\n         }\n     }\n \n+    @Test\n     public void testReadingBackDeltaDistance() throws Exception {\n         File output = new File(dir, \"delta-distance.7z\");\n         SevenZOutputFile outArchive = new SevenZOutputFile(output);\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n  */\n package org.apache.commons.compress.archivers.sevenz;\n \n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n import java.io.File;\n import java.io.IOException;\n import java.util.Arrays;\n         super.tearDown();\n     }\n \n+    @Test\n     public void testDirectoriesAndEmptyFiles() throws Exception {\n         output = new File(dir, \"empties.7z\");\n \n \n     }\n \n+    @Test\n     public void testDirectoriesOnly() throws Exception {\n         output = new File(dir, \"dirs.7z\");\n         SevenZOutputFile outArchive = new SevenZOutputFile(output);\n \n     }\n \n+    @Test\n     public void testCantFinishTwice() throws Exception {\n         output = new File(dir, \"finish.7z\");\n         SevenZOutputFile outArchive = new SevenZOutputFile(output);\n         }\n     }\n \n+    @Test\n     public void testSixEmptyFiles() throws Exception {\n         testCompress252(6, 0);\n     }\n \n+    @Test\n     public void testSixFilesSomeNotEmpty() throws Exception {\n         testCompress252(6, 2);\n     }\n \n+    @Test\n     public void testSevenEmptyFiles() throws Exception {\n         testCompress252(7, 0);\n     }\n \n+    @Test\n     public void testSevenFilesSomeNotEmpty() throws Exception {\n         testCompress252(7, 2);\n     }\n \n+    @Test\n     public void testEightEmptyFiles() throws Exception {\n         testCompress252(8, 0);\n     }\n \n+    @Test\n     public void testEightFilesSomeNotEmpty() throws Exception {\n         testCompress252(8, 2);\n     }\n \n+    @Test\n     public void testNineEmptyFiles() throws Exception {\n         testCompress252(9, 0);\n     }\n \n+    @Test\n     public void testNineFilesSomeNotEmpty() throws Exception {\n         testCompress252(9, 2);\n     }\n \n+    @Test\n     public void testTwentyNineEmptyFiles() throws Exception {\n         testCompress252(29, 0);\n     }\n \n+    @Test\n     public void testTwentyNineFilesSomeNotEmpty() throws Exception {\n         testCompress252(29, 7);\n     }\n \n+    @Test\n     public void testCopyRoundtrip() throws Exception {\n         testRoundTrip(SevenZMethod.COPY);\n     }\n \n+    @Test\n     public void testBzip2Roundtrip() throws Exception {\n         testRoundTrip(SevenZMethod.BZIP2);\n     }\n \n+    @Test\n     public void testLzma2Roundtrip() throws Exception {\n         testRoundTrip(SevenZMethod.LZMA2);\n     }\n \n+    @Test\n     public void testDeflateRoundtrip() throws Exception {\n         testRoundTrip(SevenZMethod.DEFLATE);\n     }\n \n+    @Test\n     public void testBCJX86Roundtrip() throws Exception {\n         if (XZ_BCJ_IS_BUGGY) { return; }\n         testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_X86_FILTER));\n     }\n \n+    @Test\n     public void testBCJARMRoundtrip() throws Exception {\n         if (XZ_BCJ_IS_BUGGY) { return; }\n         testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_ARM_FILTER));\n     }\n \n+    @Test\n     public void testBCJARMThumbRoundtrip() throws Exception {\n         if (XZ_BCJ_IS_BUGGY) { return; }\n         testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_ARM_THUMB_FILTER));\n     }\n \n+    @Test\n     public void testBCJIA64Roundtrip() throws Exception {\n         if (XZ_BCJ_IS_BUGGY) { return; }\n         testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_IA64_FILTER));\n     }\n \n+    @Test\n     public void testBCJPPCRoundtrip() throws Exception {\n         if (XZ_BCJ_IS_BUGGY) { return; }\n         testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_PPC_FILTER));\n     }\n \n+    @Test\n     public void testBCJSparcRoundtrip() throws Exception {\n         if (XZ_BCJ_IS_BUGGY) { return; }\n         testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_SPARC_FILTER));\n     }\n \n+    @Test\n     public void testDeltaRoundtrip() throws Exception {\n         testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.DELTA_FILTER));\n     }\n \n+    @Test\n     public void testStackOfContentCompressions() throws Exception {\n         output = new File(dir, \"multiple-methods.7z\");\n         ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();\n         createAndReadBack(output, methods);\n     }\n \n+    @Test\n     public void testDeflateWithConfiguration() throws Exception {\n         output = new File(dir, \"deflate-options.7z\");\n         // Deflater.BEST_SPEED\n                           .singletonList(new SevenZMethodConfiguration(SevenZMethod.DEFLATE, 1)));\n     }\n \n+    @Test\n     public void testBzip2WithConfiguration() throws Exception {\n         output = new File(dir, \"bzip2-options.7z\");\n         // 400k block size\n                           .singletonList(new SevenZMethodConfiguration(SevenZMethod.BZIP2, 4)));\n     }\n \n+    @Test\n     public void testLzma2WithIntConfiguration() throws Exception {\n         output = new File(dir, \"lzma2-options.7z\");\n         // 1 MB dictionary\n                           .singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2, 1 << 20)));\n     }\n \n+    @Test\n     public void testLzma2WithOptionsConfiguration() throws Exception {\n         output = new File(dir, \"lzma2-options2.7z\");\n         LZMA2Options opts = new LZMA2Options(1);\n                           .singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2, opts)));\n     }\n \n+    @Test\n     public void testArchiveWithMixedMethods() throws Exception {\n         output = new File(dir, \"mixed-methods.7z\");\n         SevenZOutputFile outArchive = new SevenZOutputFile(output);\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n \n package org.apache.commons.compress.archivers.tar;\n \n+import static org.junit.Assert.*;\n+\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n import org.apache.commons.compress.utils.CharsetNames;\n import org.apache.commons.compress.utils.IOUtils;\n-\n import org.junit.Assert;\n+import org.junit.Test;\n \n public class TarArchiveOutputStreamTest extends AbstractTestCase {\n \n+    @Test\n     public void testCount() throws Exception {\n         File f = File.createTempFile(\"commons-compress-tarcount\", \".tar\");\n         f.deleteOnExit();\n         assertEquals(f.length(), tarOut.getBytesWritten());\n     }\n \n+    @Test\n     public void testMaxFileSizeError() throws Exception {\n         TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n         t.setSize(077777777777L);\n         }\n     }\n \n+    @Test\n     public void testBigNumberStarMode() throws Exception {\n         TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n         t.setSize(0100000000000L);\n         closeQuietly(tos);\n     }\n \n+    @Test\n     public void testBigNumberPosixMode() throws Exception {\n         TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n         t.setSize(0100000000000L);\n         closeQuietly(tos);\n     }\n \n+    @Test\n     public void testWriteSimplePaxHeaders() throws Exception {\n         Map<String, String> m = new HashMap<String, String>();\n         m.put(\"a\", \"b\");\n         assertEquals(\"6 a=b\\n\", new String(data, 512, 6, CharsetNames.UTF_8));\n     }\n \n+    @Test\n     public void testPaxHeadersWithLength99() throws Exception {\n         Map<String, String> m = new HashMap<String, String>();\n         m.put(\"a\",\n               + \"012\\n\", new String(data, 512, 99, CharsetNames.UTF_8));\n     }\n \n+    @Test\n     public void testPaxHeadersWithLength101() throws Exception {\n         Map<String, String> m = new HashMap<String, String>();\n         m.put(\"a\",\n         return bos.toByteArray();\n     }\n \n+    @Test\n     public void testWriteLongFileNamePosixMode() throws Exception {\n         String n = \"01234567890123456789012345678901234567890123456789\"\n             + \"01234567890123456789012345678901234567890123456789\"\n         tos.close();\n     }\n \n+    @Test\n     public void testOldEntryStarMode() throws Exception {\n         TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n         t.setSize(Integer.MAX_VALUE);\n         closeQuietly(tos);\n     }\n \n+    @Test\n     public void testOldEntryPosixMode() throws Exception {\n         TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n         t.setSize(Integer.MAX_VALUE);\n         closeQuietly(tos);\n     }\n \n+    @Test\n     public void testOldEntryError() throws Exception {\n         TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n         t.setSize(Integer.MAX_VALUE);\n         tos.close();\n     }\n \n+    @Test\n     public void testWriteNonAsciiPathNamePaxHeader() throws Exception {\n         String n = \"\\u00e4\";\n         TarArchiveEntry t = new TarArchiveEntry(n);\n         tin.close();\n     }\n \n+    @Test\n     public void testWriteNonAsciiLinkPathNamePaxHeader() throws Exception {\n         String n = \"\\u00e4\";\n         TarArchiveEntry t = new TarArchiveEntry(\"a\", TarConstants.LF_LINK);\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-200\"\n      */\n+    @Test\n     public void testRoundtripWith67CharFileNameGnu() throws Exception {\n         testRoundtripWith67CharFileName(TarArchiveOutputStream.LONGFILE_GNU);\n     }\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-200\"\n      */\n+    @Test\n     public void testRoundtripWith67CharFileNamePosix() throws Exception {\n         testRoundtripWith67CharFileName(TarArchiveOutputStream.LONGFILE_POSIX);\n     }\n         tin.close();\n     }\n \n+    @Test\n     public void testWriteLongDirectoryNameErrorMode() throws Exception {\n         String n = \"01234567890123456789012345678901234567890123456789\"\n                 + \"01234567890123456789012345678901234567890123456789\"\n         }\n     }\n \n+    @Test\n     public void testWriteLongDirectoryNameTruncateMode() throws Exception {\n         String n = \"01234567890123456789012345678901234567890123456789\"\n             + \"01234567890123456789012345678901234567890123456789\"\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-203\"\n      */\n+    @Test\n     public void testWriteLongDirectoryNameGnuMode() throws Exception {\n         testWriteLongDirectoryName(TarArchiveOutputStream.LONGFILE_GNU);\n     }\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-203\"\n      */\n+    @Test\n     public void testWriteLongDirectoryNamePosixMode() throws Exception {\n         testWriteLongDirectoryName(TarArchiveOutputStream.LONGFILE_POSIX);\n     }\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-203\"\n      */\n+    @Test\n     public void testWriteNonAsciiDirectoryNamePosixMode() throws Exception {\n         String n = \"f\\u00f6\\u00f6/\";\n         TarArchiveEntry t = new TarArchiveEntry(n);\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-265\"\n      */\n+    @Test\n     public void testWriteNonAsciiNameWithUnfortunateNamePosixMode() throws Exception {\n         String n = \"f\\u00f6\\u00f6\\u00dc\";\n         TarArchiveEntry t = new TarArchiveEntry(n);\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-237\"\n      */\n+    @Test\n     public void testWriteLongLinkNameErrorMode() throws Exception {\n         String linkname = \"01234567890123456789012345678901234567890123456789\"\n                 + \"01234567890123456789012345678901234567890123456789\"\n         }\n     }\n \n+    @Test\n     public void testWriteLongLinkNameTruncateMode() throws Exception {\n         String linkname = \"01234567890123456789012345678901234567890123456789\"\n             + \"01234567890123456789012345678901234567890123456789\"\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-237\"\n      */\n+    @Test\n     public void testWriteLongLinkNameGnuMode() throws Exception {\n         testWriteLongLinkName(TarArchiveOutputStream.LONGFILE_GNU);\n     }\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-237\"\n      */\n+    @Test\n     public void testWriteLongLinkNamePosixMode() throws Exception {\n         testWriteLongLinkName(TarArchiveOutputStream.LONGFILE_POSIX);\n     }\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-237\"\n      */\n-    public void testWriteLongLinkName(int mode) throws Exception {\n+    private void testWriteLongLinkName(int mode) throws Exception {\n         String linkname = \"01234567890123456789012345678901234567890123456789\"\n             + \"01234567890123456789012345678901234567890123456789\"\n             + \"01234567890123456789012345678901234567890123456789/test\";\n         tin.close();\n     }\n \n+    @Test\n     public void testPadsOutputToFullBlockLength() throws Exception {\n         File f = File.createTempFile(\"commons-compress-padding\", \".tar\");\n         f.deleteOnExit();\n      *\n      * @throws Exception\n      */\n+    @Test\n     public void testLongNameMd5Hash() throws Exception {\n         final String longFileName = \"a/considerably/longer/file/name/which/forces/use/of/the/long/link/header/which/appears/to/always/use/the/current/time/as/modification/date\";\n         String fname = longFileName;\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.utils.CharsetNames;\n+import org.junit.Test;\n \n public class UTF8ZipFilesTest extends AbstractTestCase {\n \n     private static final String EURO_FOR_DOLLAR_TXT = \"\\u20AC_for_Dollar.txt\";\n     private static final String OIL_BARREL_TXT = \"\\u00D6lf\\u00E4sser.txt\";\n \n+    @Test\n     public void testUtf8FileRoundtripExplicitUnicodeExtra()\n         throws IOException {\n         testFileRoundtrip(CharsetNames.UTF_8, true, true);\n     }\n \n+    @Test\n     public void testUtf8FileRoundtripNoEFSExplicitUnicodeExtra()\n         throws IOException {\n         testFileRoundtrip(CharsetNames.UTF_8, false, true);\n     }\n \n+    @Test\n     public void testCP437FileRoundtripExplicitUnicodeExtra()\n         throws IOException {\n         testFileRoundtrip(CP437, false, true);\n     }\n \n+    @Test\n     public void testASCIIFileRoundtripExplicitUnicodeExtra()\n         throws IOException {\n         testFileRoundtrip(CharsetNames.US_ASCII, false, true);\n     }\n \n+    @Test\n     public void testUtf8FileRoundtripImplicitUnicodeExtra()\n         throws IOException {\n         testFileRoundtrip(CharsetNames.UTF_8, true, false);\n     }\n \n+    @Test\n     public void testUtf8FileRoundtripNoEFSImplicitUnicodeExtra()\n         throws IOException {\n         testFileRoundtrip(CharsetNames.UTF_8, false, false);\n     }\n \n+    @Test\n     public void testCP437FileRoundtripImplicitUnicodeExtra()\n         throws IOException {\n         testFileRoundtrip(CP437, false, false);\n     }\n \n+    @Test\n     public void testASCIIFileRoundtripImplicitUnicodeExtra()\n         throws IOException {\n         testFileRoundtrip(CharsetNames.US_ASCII, false, false);\n      * 7-ZIP doesn't use EFS for strings that can be encoded in CP437\n      * - which is true for OIL_BARREL_TXT.\n      */\n+    @Test\n     public void testRead7ZipArchive() throws IOException {\n         File archive = getFile(\"utf8-7zip-test.zip\");\n         ZipFile zf = null;\n         }\n     }\n \n+    @Test\n     public void testRead7ZipArchiveForStream() throws IOException {\n         FileInputStream archive =\n             new FileInputStream(getFile(\"utf8-7zip-test.zip\"));\n      * WinZIP created archive, uses Unicode Extra Fields but only in\n      * the central directory.\n      */\n+    @Test\n     public void testReadWinZipArchive() throws IOException {\n         File archive = getFile(\"utf8-winzip-test.zip\");\n         ZipFile zf = null;\n         }\n     }\n \n+    @Test\n     public void testReadWinZipArchiveForStream() throws IOException {\n         FileInputStream archive =\n             new FileInputStream(getFile(\"utf8-winzip-test.zip\"));\n         }\n     }\n \n+    @Test\n     public void testZipFileReadsUnicodeFields() throws IOException {\n         File file = File.createTempFile(\"unicode-test\", \".zip\");\n         file.deleteOnExit();\n         }\n     }\n \n+    @Test\n     public void testZipArchiveInputStreamReadsUnicodeFields()\n         throws IOException {\n         File file = File.createTempFile(\"unicode-test\", \".zip\");\n         }\n     }\n \n+    @Test\n     public void testRawNameReadFromZipFile()\n         throws IOException {\n         File archive = getFile(\"utf8-7zip-test.zip\");\n         }\n     }\n \n+    @Test\n     public void testRawNameReadFromStream()\n         throws IOException {\n         FileInputStream archive =\n         }\n     }\n \n+    @Test\n     public void testUtf8Interoperability() throws IOException {\n         File file1 = getFile(\"utf8-7zip-test.zip\");\n         File file2 = getFile(\"utf8-winzip-test.zip\");\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n  */\n package org.apache.commons.compress.changes;\n \n+import static org.junit.Assert.*;\n+\n import java.io.BufferedInputStream;\n import java.io.BufferedReader;\n import java.io.File;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipFile;\n+import org.junit.Test;\n \n /**\n  * Checks several ChangeSet business logics.\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testAddChangeTwice() throws Exception {\n         InputStream in = null;\n         InputStream in2 = null;\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testAddChangeTwiceWithoutReplace() throws Exception {\n         InputStream in = null;\n         InputStream in2 = null;\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteDir() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteDir2() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteDir3() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFile() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFile2() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeletePlusAddSame() throws Exception {\n         final String archivename = \"zip\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testChangeSetResults() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeletePlusAdd() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFromAndAddToZip() throws Exception {\n         final String archivename = \"zip\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFromAndAddToZipUsingZipFilePerform() throws Exception {\n         final String archivename = \"zip\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testAddDeleteAdd() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteAddDelete() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFromZip() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFromTar() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFromJar() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n         this.checkArchiveContent(temp, expected);\n     }\n \n+    @Test\n     public void testDeleteFromAndAddToTar() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFromAndAddToJar() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFromAr() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteFromAndAddToAr() throws Exception {\n         ArchiveOutputStream out = null;\n         ArchiveInputStream ais = null;\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testRenameAndDelete() throws Exception {\n     }\n \n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testAddMoveDelete() throws Exception {\n     }\n \n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testAddToEmptyArchive() throws Exception {\n         final String archivename = \"zip\";\n         File input = this.createEmptyArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeleteAddToOneFileArchive() throws Exception {\n         final String archivename = \"zip\";\n         File input = this.createSingleEntryArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testAddDeleteToOneFileArchive() throws Exception {\n         final String archivename = \"cpio\";\n         File input = this.createSingleEntryArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testAddAllreadyExistingWithReplaceTrue() throws Exception {\n         final String archivename = \"zip\";\n         File input = this.createArchive(archivename);\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testAddAllreadyExistingWithReplaceFalse() throws Exception {\n         final String archivename = \"zip\";\n         File input = this.createArchive(archivename);\n--- a/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class BZip2TestCase extends AbstractTestCase {\n \n+    @Test\n     public void testBzipCreation()  throws Exception {\n         File output = null;\n         final File input = getFile(\"test.txt\");\n         assertEquals(input.length(),decompressed.length());\n     }\n \n+    @Test\n     public void testBzip2Unarchive() throws Exception {\n         final File input = getFile(\"bla.txt.bz2\");\n         final File output = new File(dir, \"bla.txt\");\n         os.close();\n     }\n \n+    @Test\n     public void testConcatenatedStreamsReadFirstOnly() throws Exception {\n         final File input = getFile(\"multiple.bz2\");\n         final InputStream is = new FileInputStream(input);\n         }\n     }\n \n+    @Test\n     public void testConcatenatedStreamsReadFully() throws Exception {\n         final File input = getFile(\"multiple.bz2\");\n         final InputStream is = new FileInputStream(input);\n         }\n     }\n \n+    @Test\n     public void testCOMPRESS131() throws Exception {\n         final File input = getFile(\"COMPRESS-131.bz2\");\n         final InputStream is = new FileInputStream(input);\n--- a/src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java\n import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;\n import org.apache.commons.compress.compressors.deflate.DeflateParameters;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class DeflateTestCase extends AbstractTestCase {\n \n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeflateCreation()  throws Exception {\n         final File input = getFile(\"test1.xml\");\n         final File output = new File(dir, \"test1.xml.deflatez\");\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testRawDeflateCreation()  throws Exception {\n         final File input = getFile(\"test1.xml\");\n         final File output = new File(dir, \"test1.xml.deflate\");\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testDeflateUnarchive() throws Exception {\n         final File input = getFile(\"bla.tar.deflatez\");\n         final File output = new File(dir, \"bla.tar\");\n      * \n      * @throws Exception\n      */\n+    @Test\n     public void testRawDeflateUnarchive() throws Exception {\n         final File input = getFile(\"bla.tar.deflate\");\n         final File output = new File(dir, \"bla.tar\");\n--- a/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n-import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.*;\n \n import java.io.BufferedInputStream;\n import java.io.File;\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.compressors.snappy.FramedSnappyCompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class FramedSnappyTestCase\n     extends AbstractTestCase {\n \n+    @Test\n     public void testDefaultExtraction() throws Exception {\n         testUnarchive(new StreamWrapper<CompressorInputStream>() {\n             public CompressorInputStream wrap(InputStream is) throws IOException {\n         });\n     }\n \n+    @Test\n     public void testDefaultExtractionViaFactory() throws Exception {\n         testUnarchive(new StreamWrapper<CompressorInputStream>() {\n             public CompressorInputStream wrap(InputStream is) throws Exception {\n         });\n     }\n \n+    @Test\n     public void testDefaultExtractionViaFactoryAutodetection() throws Exception {\n         testUnarchive(new StreamWrapper<CompressorInputStream>() {\n             public CompressorInputStream wrap(InputStream is) throws Exception {\n--- a/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import static org.junit.Assert.*;\n+\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import org.apache.commons.compress.compressors.gzip.GzipParameters;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.Assert;\n+import org.junit.Test;\n \n public final class GZipTestCase extends AbstractTestCase {\n \n+    @Test\n     public void testGzipCreation()  throws Exception {\n         final File input = getFile(\"test1.xml\");\n         final File output = new File(dir, \"test1.xml.gz\");\n         }\n     }\n \n+    @Test\n     public void testGzipUnarchive() throws Exception {\n         final File input = getFile(\"bla.tgz\");\n         final File output = new File(dir, \"bla.tar\");\n         }\n     }\n \n+    @Test\n     public void testConcatenatedStreamsReadFirstOnly() throws Exception {\n         final File input = getFile(\"multiple.gz\");\n         final InputStream is = new FileInputStream(input);\n         }\n     }\n \n+    @Test\n     public void testConcatenatedStreamsReadFully() throws Exception {\n         final File input = getFile(\"multiple.gz\");\n         final InputStream is = new FileInputStream(input);\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-84\"\n      */\n+    @Test\n     public void testCorruptedInput() throws Exception {\n         InputStream in = null;\n         OutputStream out = null;\n         }\n     }\n \n+    @Test\n     public void testInteroperabilityWithGzipCompressorInputStream() throws Exception {\n         FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"));\n         byte[] content;\n         Assert.assertArrayEquals(\"uncompressed content\", content, content2);\n     }\n \n+    @Test\n     public void testInteroperabilityWithGZIPInputStream() throws Exception {\n         FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"));\n         byte[] content;\n         Assert.assertArrayEquals(\"uncompressed content\", content, content2);\n     }\n \n+    @Test\n     public void testInvalidCompressionLevel() {\n         GzipParameters parameters = new GzipParameters();\n         try {\n         assertEquals(\"extra flags (XFL)\", flag, bout.toByteArray()[8]);\n     }\n \n+    @Test\n     public void testExtraFlagsFastestCompression() throws Exception {\n         testExtraFlags(Deflater.BEST_SPEED, 4);\n     }\n \n+    @Test\n     public void testExtraFlagsBestCompression() throws Exception {\n         testExtraFlags(Deflater.BEST_COMPRESSION, 2);\n     }\n \n+    @Test\n     public void testExtraFlagsDefaultCompression() throws Exception {\n         testExtraFlags(Deflater.DEFAULT_COMPRESSION, 0);\n     }\n     \n+    @Test\n     public void testOverWrite() throws Exception {\n         GzipCompressorOutputStream out = new GzipCompressorOutputStream(new ByteArrayOutputStream());\n         out.close();\n         }\n     }\n \n+    @Test\n     public void testMetadataRoundTrip() throws Exception {\n         ByteArrayOutputStream bout = new ByteArrayOutputStream();\n                 \n--- a/src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class LZMATestCase extends AbstractTestCase {\n \n+    @Test\n     public void testLZMAUnarchive() throws Exception {\n         final File input = getFile(\"bla.tar.lzma\");\n         final File output = new File(dir, \"bla.tar\");\n--- a/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200Strategy;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class Pack200TestCase extends AbstractTestCase {\n \n+    @Test\n     public void testJarUnarchiveAllInMemory() throws Exception {\n         jarUnarchiveAll(false, Pack200Strategy.IN_MEMORY);\n     }\n \n+    @Test\n     public void testJarUnarchiveAllFileArgInMemory() throws Exception {\n         jarUnarchiveAll(true, Pack200Strategy.IN_MEMORY);\n     }\n \n+    @Test\n     public void testJarUnarchiveAllTempFile() throws Exception {\n         jarUnarchiveAll(false, Pack200Strategy.TEMP_FILE);\n     }\n \n+    @Test\n     public void testJarUnarchiveAllFileTempFile() throws Exception {\n         jarUnarchiveAll(true, Pack200Strategy.TEMP_FILE);\n     }\n         }\n     }\n \n+    @Test\n     public void testJarArchiveCreationInMemory() throws Exception {\n         jarArchiveCreation(Pack200Strategy.IN_MEMORY);\n     }\n \n+    @Test\n     public void testJarArchiveCreationTempFile() throws Exception {\n         jarArchiveCreation(Pack200Strategy.TEMP_FILE);\n     }\n         }\n     }\n \n+    @Test\n     public void testGoodSignature() throws Exception {\n         final InputStream is = new FileInputStream(getFile(\"bla.pack\"));\n         try {\n         }\n     }\n \n+    @Test\n     public void testBadSignature() throws Exception {\n         final InputStream is = new FileInputStream(getFile(\"bla.jar\"));\n         try {\n         }\n     }\n \n+    @Test\n     public void testShortSignature() throws Exception {\n         final InputStream is = new FileInputStream(getFile(\"bla.pack\"));\n         try {\n         }\n     }\n \n+    @Test\n     public void testInputStreamMethods() throws Exception {\n         Map<String, String> m = new HashMap<String, String>();\n         m.put(\"foo\", \"bar\");\n         }\n     }\n \n+    @Test\n     public void testOutputStreamMethods() throws Exception {\n         final File output = new File(dir, \"bla.pack\");\n         Map<String, String> m = new HashMap<String, String>();\n--- a/src/test/java/org/apache/commons/compress/compressors/XZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/XZTestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class XZTestCase extends AbstractTestCase {\n \n+    @Test\n     public void testXZCreation()  throws Exception {\n         long max = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getMax();\n         System.out.println(\"XZTestCase: HeapMax=\"+max+\" bytes \"+(double)max/(1024*1024)+\" MB\");\n         }\n     }\n \n+    @Test\n     public void testXZUnarchive() throws Exception {\n         final File input = getFile(\"bla.tar.xz\");\n         final File output = new File(dir, \"bla.tar\");\n         }\n     }\n \n+    @Test\n     public void testConcatenatedStreamsReadFirstOnly() throws Exception {\n         final File input = getFile(\"multiple.xz\");\n         final InputStream is = new FileInputStream(input);\n         }\n     }\n \n+    @Test\n     public void testConcatenatedStreamsReadFully() throws Exception {\n         final File input = getFile(\"multiple.xz\");\n         final InputStream is = new FileInputStream(input);\n--- a/src/test/java/org/apache/commons/compress/compressors/ZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/ZTestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import static org.junit.Assert.*;\n+\n import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.compressors.z.ZCompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class ZTestCase extends AbstractTestCase {\n \n+    @Test\n     public void testZUnarchive() throws Exception {\n         testUnarchive(new StreamWrapper<CompressorInputStream>() {\n             public CompressorInputStream wrap(InputStream is) throws IOException {\n         });\n     }\n \n+    @Test\n     public void testZUnarchiveViaFactory() throws Exception {\n         testUnarchive(new StreamWrapper<CompressorInputStream>() {\n             public CompressorInputStream wrap(InputStream is) throws Exception {\n         });\n     }\n \n+    @Test\n     public void testZUnarchiveViaAutoDetection() throws Exception {\n         testUnarchive(new StreamWrapper<CompressorInputStream>() {\n             public CompressorInputStream wrap(InputStream is) throws Exception {\n         });\n     }\n \n+    @Test\n     public void testMatches() throws Exception {\n         assertFalse(ZCompressorInputStream.matches(new byte[] { 1, 2, 3, 4 }, 4));\n         assertFalse(ZCompressorInputStream.matches(new byte[] { 0x1f, 2, 3, 4 }, 4));\n--- a/src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.archivers.ArchiveStreamFactory;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class Pack200UtilsTest extends AbstractTestCase {\n \n+    @Test\n     public void testNormalize() throws Throwable {\n         final File input = getFile(\"bla.jar\");\n         final File[] output = createTempDirAndFile();\n         }\n     }\n \n+    @Test\n     public void testNormalizeInPlace() throws Throwable {\n         final File input = getFile(\"bla.jar\");\n         final File[] output = createTempDirAndFile();\n--- a/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n  */\n package org.apache.commons.compress.compressors.snappy;\n \n-import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.*;\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n public final class FramedSnappyCompressorInputStreamTest\n     extends AbstractTestCase {\n \n+    @Test\n     public void testMatches() throws IOException {\n         assertFalse(FramedSnappyCompressorInputStream.matches(new byte[10], 10));\n         byte[] b = new byte[12];\n     /**\n      * Something big enough to make buffers slide.\n      */\n+    @Test\n     public void testLoremIpsum() throws Exception {\n         final FileInputStream isSz = new FileInputStream(getFile(\"lorem-ipsum.txt.sz\"));\n         final File outputSz = new File(dir, \"lorem-ipsum.1\");\n         }\n     }\n \n+    @Test\n     public void testRemainingChunkTypes() throws Exception {\n         final FileInputStream isSz = new FileInputStream(getFile(\"mixed.txt.sz\"));\n         ByteArrayOutputStream out = new ByteArrayOutputStream();\n             }, out.toByteArray());\n     }\n \n+    @Test\n     public void testAvailable() throws Exception {\n         final FileInputStream isSz = new FileInputStream(getFile(\"mixed.txt.sz\"));\n         try {\n         }\n     }\n \n+    @Test\n     public void testUnskippableChunk() {\n         byte[] input = new byte[] {\n             (byte) 0xff, 6, 0, 0, 's', 'N', 'a', 'P', 'p', 'Y',\n         }\n     }\n \n+    @Test\n     public void testChecksumUnmasking() {\n         testChecksumUnmasking(0xc757l);\n         testChecksumUnmasking(0xffffc757l);\n     }\n \n-    public void testChecksumUnmasking(long x) {\n+    private void testChecksumUnmasking(long x) {\n         assertEquals(Long.toHexString(x),\n                      Long.toHexString(FramedSnappyCompressorInputStream\n                                       .unmask(mask(x))));", "timestamp": 1424194854, "metainfo": ""}