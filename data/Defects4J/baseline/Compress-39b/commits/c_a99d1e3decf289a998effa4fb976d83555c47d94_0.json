{"sha": "a99d1e3decf289a998effa4fb976d83555c47d94", "log": "COMPRESS-267 throw a specific exception in ArchiveStreamFactory if asked to read/write 7z - or any other future format we don't support streaming for  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n import org.apache.commons.compress.archivers.dump.DumpArchiveInputStream;\n import org.apache.commons.compress.archivers.jar.JarArchiveInputStream;\n import org.apache.commons.compress.archivers.jar.JarArchiveOutputStream;\n+import org.apache.commons.compress.archivers.sevenz.SevenZFile;\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n      * @since 1.1\n      */\n     public static final String ZIP = \"zip\";\n+    /**\n+     * Constant used to identify the 7z archive format.\n+     * @since 1.8\n+     */\n+    public static final String SEVEN_Z = \"7z\";\n \n     /**\n      * Entry encoding, null for the default.\n      * @param in the input stream\n      * @return the archive input stream\n      * @throws ArchiveException if the archiver name is not known\n+     * @throws StreamingNotSupportedException if the format cannot be\n+     * read from a stream\n      * @throws IllegalArgumentException if the archiver name or stream is null\n      */\n     public ArchiveInputStream createArchiveInputStream(\n             } else {\n                 return new DumpArchiveInputStream(in);\n             }\n+        }\n+        if (SEVEN_Z.equalsIgnoreCase(archiverName)) {\n+            throw new StreamingNotSupportedException(SEVEN_Z);\n         }\n \n         throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n      * @param out the output stream\n      * @return the archive output stream\n      * @throws ArchiveException if the archiver name is not known\n+     * @throws StreamingNotSupportedException if the format cannot be\n+     * written to a stream\n      * @throws IllegalArgumentException if the archiver name or stream is null\n      */\n     public ArchiveOutputStream createArchiveOutputStream(\n             } else {\n                 return new CpioArchiveOutputStream(out);\n             }\n+        }\n+        if (SEVEN_Z.equalsIgnoreCase(archiverName)) {\n+            throw new StreamingNotSupportedException(SEVEN_Z);\n         }\n         throw new ArchiveException(\"Archiver: \" + archiverName + \" not found.\");\n     }\n      * @param in the input stream\n      * @return the archive input stream\n      * @throws ArchiveException if the archiver name is not known\n+     * @throws StreamingNotSupportedException if the format cannot be\n+     * read from a stream\n      * @throws IllegalArgumentException if the stream is null or does not support mark\n      */\n     public ArchiveInputStream createArchiveInputStream(final InputStream in)\n                 return new CpioArchiveInputStream(in);\n             } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {\n                 return new ArjArchiveInputStream(in);\n+            } else if (SevenZFile.matches(signature, signatureLength)) {\n+                throw new StreamingNotSupportedException(SEVEN_Z);\n             }\n \n             // Dump needs a bigger buffer to check the signature;\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/StreamingNotSupportedException.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers;\n+\n+/**\n+ * Exception thrown by ArchiveStreamFactory if a format is\n+ * requested/detected that doesn't support streaming.\n+ * @since 1.8\n+ */\n+public class StreamingNotSupportedException extends ArchiveException {\n+    private final String format;\n+\n+    /**\n+     * Creates a new StreamingNotSupportedException.\n+     * @param format the format that has been requested/detected.\n+     */\n+    public StreamingNotSupportedException(String format) {\n+        super(\"The \" + format + \" doesn't support streaming.\");\n+        this.format = format;\n+    }\n+\n+    /**\n+     * Returns the format that has been requested/detected.\n+     * @return the format that has been requested/detected.\n+     */\n+    public String getFormat() {\n+        return format;\n+    }\n+    \n+}\n--- a/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java\n  */\n package org.apache.commons.compress.archivers;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.io.BufferedInputStream;\n import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.FileInputStream;\n import java.io.InputStream;\n \n     \t}\n     }\n \n+    @Test(expected = StreamingNotSupportedException.class)\n+    public void cantRead7zFromStream() throws Exception {\n+        new ArchiveStreamFactory()\n+            .createArchiveInputStream(ArchiveStreamFactory.SEVEN_Z,\n+                                      new ByteArrayInputStream(new byte[0]));\n+    }\n+\n+    @Test(expected = StreamingNotSupportedException.class)\n+    public void cantWrite7zToStream() throws Exception {\n+        new ArchiveStreamFactory()\n+            .createArchiveOutputStream(ArchiveStreamFactory.SEVEN_Z,\n+                                       new ByteArrayOutputStream());\n+    }\n+\n+    /**\n+     * Test case for \n+     * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-267\"\n+     * >COMPRESS-267</a>.\n+     */\n+    @Test\n+    public void detectsAndThrowsFor7z() throws Exception {\n+    \tFileInputStream fis = new FileInputStream(\"src/test/resources/bla.7z\");\n+    \ttry {\n+            InputStream bis = new BufferedInputStream(fis);\n+            try {\n+                new ArchiveStreamFactory().createArchiveInputStream(bis);\n+                fail(\"Expected a StreamingNotSupportedException\");\n+            } catch (StreamingNotSupportedException ex) {\n+                assertEquals(ArchiveStreamFactory.SEVEN_Z, ex.getFormat());\n+            } finally {\n+                bis.close();\n+            }\n+    \t} finally {\n+            fis.close();\n+    \t}\n+    }\n+\n     /**\n      * Test case for \n      * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-208\"", "timestamp": 1393096770, "metainfo": ""}