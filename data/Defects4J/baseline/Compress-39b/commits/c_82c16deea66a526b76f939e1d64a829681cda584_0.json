{"sha": "82c16deea66a526b76f939e1d64a829681cda584", "log": "Fix up some raw types  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n      *\n      * @return all entries as {@link ZipArchiveEntry} instances\n      */\n-    public Enumeration getEntries() {\n+    public Enumeration<ZipArchiveEntry> getEntries() {\n         return Collections.enumeration(entries.keySet());\n     }\n \n      *\n      * @since Commons Compress 1.1\n      */\n-    public Enumeration getEntriesInPhysicalOrder() {\n+    public Enumeration<ZipArchiveEntry> getEntriesInPhysicalOrder() {\n         ZipArchiveEntry[] allEntries =\n             entries.keySet().toArray(new ZipArchiveEntry[0]);\n         Arrays.sort(allEntries, OFFSET_COMPARATOR);\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSetResults.java\n      * Returns a list of filenames which has been added from the changeset\n      * @return the list of filenames\n      */\n-    public List getAddedFromChangeSet() {\n+    public List<String> getAddedFromChangeSet() {\n         return addedFromChangeSet;\n     }\n \n      * Returns a list of filenames which has been added from the original stream\n      * @return the list of filenames\n      */\n-    public List getAddedFromStream() {\n+    public List<String> getAddedFromStream() {\n         return addedFromStream;\n     }\n \n      * Returns a list of filenames which has been deleted\n      * @return the list of filenames\n      */\n-    public List getDeleted() {\n+    public List<String> getDeleted() {\n         return deleted;\n     }\n     \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Lister.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Lister.java\n         } else {\n             ZipFile zf = new ZipFile(f, cl.encoding);\n             try {\n-                for (Enumeration entries = zf.getEntries();\n+                for (Enumeration<ZipArchiveEntry> entries = zf.getEntries();\n                      entries.hasMoreElements(); ) {\n-                    ZipArchiveEntry ze = (ZipArchiveEntry) entries.nextElement();\n+                    ZipArchiveEntry ze = entries.nextElement();\n                     list(ze);\n                     if (cl.dir != null) {\n                         InputStream is = zf.getInputStream(ze);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n         try {\n             zf = new ZipFile(file, encoding, false);\n \n-            Enumeration e = zf.getEntries();\n+            Enumeration<ZipArchiveEntry> e = zf.getEntries();\n             while (e.hasMoreElements()) {\n-                ZipArchiveEntry ze = (ZipArchiveEntry) e.nextElement();\n+                ZipArchiveEntry ze = e.nextElement();\n \n                 if (ze.getName().endsWith(\"sser.txt\")) {\n                     assertUnicodeName(ze, OIL_BARREL_TXT, encoding);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n                                      try {\n                                          zf = new ZipFile(f);\n                                          int idx = 0;\n-                                         for (Enumeration e =\n+                                         for (Enumeration<ZipArchiveEntry> e =\n                                                   zf.getEntriesInPhysicalOrder();\n                                               e.hasMoreElements(); ) {\n-                                             ZipArchiveEntry zae =\n-                                                 (ZipArchiveEntry)\n-                                                 e.nextElement();\n+                                             ZipArchiveEntry zae = e.nextElement();\n                                              assertEquals(String.valueOf(idx),\n                                                           zae.getName());\n                                              if (idx++ < 2) {\n         ZipFile zf = null;\n         try {\n             zf = new ZipFile(f);\n-            Enumeration e = zf.getEntries();\n+            Enumeration<ZipArchiveEntry> e = zf.getEntries();\n             assertTrue(e.hasMoreElements());\n-            ZipArchiveEntry zae = (ZipArchiveEntry) e.nextElement();\n+            ZipArchiveEntry zae = e.nextElement();\n             assertEquals(expectedName, zae.getName());\n             assertEquals(FIVE_BILLION, zae.getSize());\n             byte[] buf = new byte[1024 * 1024];\n         try {\n             zf = new ZipFile(f);\n             int files = 0;\n-            for (Enumeration e = zf.getEntries(); e.hasMoreElements(); ) {\n-                ZipArchiveEntry zae = (ZipArchiveEntry) e.nextElement();\n+            for (Enumeration<ZipArchiveEntry> e = zf.getEntries(); e.hasMoreElements(); ) {\n+                ZipArchiveEntry zae = e.nextElement();\n                 if (!zae.isDirectory()) {\n                     files++;\n                     assertEquals(0, zae.getSize());", "timestamp": 1313891545, "metainfo": ""}