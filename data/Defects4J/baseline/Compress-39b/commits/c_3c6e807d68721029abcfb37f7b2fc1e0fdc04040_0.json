{"sha": "3c6e807d68721029abcfb37f7b2fc1e0fdc04040", "log": "GzipCompressorOutputStream revamp to support custom compression level and header metadata (COMPRESS-250)  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n \n import java.io.IOException;\n import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.util.zip.CRC32;\n+import java.util.zip.Deflater;\n+import java.util.zip.GZIPInputStream;\n import java.util.zip.GZIPOutputStream;\n \n import org.apache.commons.compress.compressors.CompressorOutputStream;\n \n+/**\n+ * Compressed output stream using the gzip format. This implementation improves\n+ * over the standard {@link GZIPOutputStream} class by allowing\n+ * the configuration of the compression level and the header metadata (filename,\n+ * comment, modification time, operating system and extra flags).\n+ * \n+ * @see <a href=\"http://tools.ietf.org/html/rfc1952\">GZIP File Format Specification</a>\n+ */\n public class GzipCompressorOutputStream extends CompressorOutputStream {\n \n-    private final GZIPOutputStream out;\n-\n-    public GzipCompressorOutputStream( final OutputStream outputStream ) throws IOException {\n-        out = new GZIPOutputStream(outputStream);\n+    /** Header flag indicating a file name follows the header */\n+    private static final int FNAME = 1 << 3;\n+\n+    /** Header flag indicating a comment follows the header */\n+    private static final int FCOMMENT = 1 << 4;\n+\n+    /** The underlying stream */\n+    private final OutputStream out;\n+\n+    /** Deflater used to compress the data */\n+    private final Deflater deflater;\n+\n+    /** The buffer receiving the compressed data from the deflater */\n+    private final byte[] buffer = new byte[512];\n+\n+    /** Indicates if the stream has been closed */\n+    private boolean closed;\n+\n+    /** The checksum of the uncompressed data */\n+    private final CRC32 crc = new CRC32();\n+\n+    /**\n+     * Creates a gzip compressed output stream with the default parameters.\n+     */\n+    public GzipCompressorOutputStream(OutputStream out) throws IOException {\n+        this(out, new GzipParameters());\n+    }\n+\n+    /**\n+     * Creates a gzip compressed output stream with the specified parameters.\n+     * \n+     * @since 1.7\n+     */\n+    public GzipCompressorOutputStream(OutputStream out, GzipParameters parameters) throws IOException {\n+        this.out = out;\n+        this.deflater = new Deflater(parameters.getCompressionLevel(), true);\n+        \n+        writeHeader(parameters);\n+    }\n+\n+    private void writeHeader(GzipParameters parameters) throws IOException {\n+        String filename = parameters.getFilename();\n+        String comment = parameters.getComment();\n+        \n+        ByteBuffer buffer = ByteBuffer.allocate(10);\n+        buffer.order(ByteOrder.LITTLE_ENDIAN);\n+        buffer.putShort((short) GZIPInputStream.GZIP_MAGIC);\n+        buffer.put((byte) 8); // compression method (8: deflate)\n+        buffer.put((byte) ((filename != null ? FNAME : 0) | (comment != null ? FCOMMENT : 0))); // flags\n+        buffer.putInt((int) (parameters.getModificationTime() / 1000));\n+        \n+        // extra flags\n+        int compressionLevel = parameters.getCompressionLevel();\n+        if (compressionLevel == Deflater.BEST_COMPRESSION) {\n+            buffer.put((byte) 2);\n+        } else if (compressionLevel == Deflater.BEST_SPEED) {\n+            buffer.put((byte) 4);\n+        } else {\n+            buffer.put((byte) 0);\n+        }\n+        \n+        buffer.put((byte) parameters.getOperatingSystem());\n+        \n+        out.write(buffer.array());\n+        \n+        if (filename != null) {\n+            out.write(filename.getBytes(\"ISO-8859-1\"));\n+            out.write(0);\n+        }\n+        \n+        if (comment != null) {\n+            out.write(comment.getBytes(\"ISO-8859-1\"));\n+            out.write(0);\n+        }\n+    }\n+\n+    private void writeTrailer() throws IOException {\n+        ByteBuffer buffer = ByteBuffer.allocate(8);\n+        buffer.order(ByteOrder.LITTLE_ENDIAN);\n+        buffer.putInt((int) crc.getValue());\n+        buffer.putInt(deflater.getTotalIn());\n+\n+        out.write(buffer.array());\n     }\n \n     @Override\n     public void write(int b) throws IOException {\n-        out.write(b);\n+        write(new byte[]{(byte) (b & 0xff)}, 0, 1);\n     }\n \n     /**\n      * @since 1.1\n      */\n     @Override\n-    public void write(byte[] b) throws IOException {\n-        out.write(b);\n+    public void write(byte[] buffer) throws IOException {\n+        write(buffer, 0, buffer.length);\n     }\n \n     /**\n      * @since 1.1\n      */\n     @Override\n-    public void write(byte[] b, int from, int length) throws IOException {\n-        out.write(b, from, length);\n+    public void write(byte[] buffer, int offset, int length) throws IOException {\n+        if (deflater.finished()) {\n+            throw new IOException(\"Cannot write more data, the end of the compressed data stream has been reached\");\n+\n+        } else if (length > 0) {\n+            deflater.setInput(buffer, offset, length);\n+            \n+            while (!deflater.needsInput()) {\n+                deflate();\n+            }\n+            \n+            crc.update(buffer, offset, length);\n+        }\n+    }\n+\n+    private void deflate() throws IOException {\n+        int length = deflater.deflate(buffer, 0, buffer.length);\n+        if (length > 0) {\n+            out.write(buffer, 0, length);\n+        }\n     }\n \n     /**\n      * @since 1.7\n      */\n     public void finish() throws IOException {\n-        out.finish();\n+        if (!deflater.finished()) {\n+            deflater.finish();\n+\n+            while (!deflater.finished()) {\n+                deflate();\n+            }\n+            \n+            writeTrailer();\n+        }\n     }\n \n     /**\n \n     @Override\n     public void close() throws IOException {\n-        out.close();\n+        if (!closed) {\n+            finish();\n+            deflater.end();\n+            out.close();\n+            closed = true;\n+        }\n     }\n \n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipParameters.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.commons.compress.compressors.gzip;\n+\n+import java.util.zip.Deflater;\n+\n+/**\n+ * Parameters for the GZIP compressor.\n+ * \n+ * @since 1.7\n+ */\n+public class GzipParameters {\n+\n+    private int compressionLevel = Deflater.DEFAULT_COMPRESSION;\n+    private long modificationTime;\n+    private String filename;\n+    private String comment;\n+    private int operatingSystem = 255; // Unknown OS by default\n+\n+    public int getCompressionLevel() {\n+        return compressionLevel;\n+    }\n+\n+    /**\n+     * Sets the compression level.\n+     * \n+     * @param compressionLevel the compression level (between 0 and 9) \n+     * @see Deflater#NO_COMPRESSION\n+     * @see Deflater#BEST_SPEED\n+     * @see Deflater#DEFAULT_COMPRESSION\n+     * @see Deflater#BEST_COMPRESSION\n+     */\n+    public void setCompressionLevel(int compressionLevel) {\n+        if (compressionLevel < -1 || compressionLevel > 9) {\n+            throw new IllegalArgumentException(\"Invalid gzip compression level: \" + compressionLevel);\n+        }\n+        this.compressionLevel = compressionLevel;\n+    }\n+\n+    public long getModificationTime() {\n+        return modificationTime;\n+    }\n+\n+    /**\n+     * Sets the modification time of the compressed file.\n+     * \n+     * @param modificationTime the modification time, in milliseconds\n+     */\n+    public void setModificationTime(long modificationTime) {\n+        this.modificationTime = modificationTime;\n+    }\n+\n+    public String getFilename() {\n+        return filename;\n+    }\n+\n+    /**\n+     * Sets the name of the compressed file.\n+     * \n+     * @param filename the name of the file without the directory path\n+     */\n+    public void setFilename(String filename) {\n+        this.filename = filename;\n+    }\n+\n+    public String getComment() {\n+        return comment;\n+    }\n+\n+    public void setComment(String comment) {\n+        this.comment = comment;\n+    }\n+\n+    public int getOperatingSystem() {\n+        return operatingSystem;\n+    }\n+\n+    /**\n+     * Sets the operating system on which the compression took place.\n+     * The defined values are:\n+     * <ul>\n+     *   <li>0: FAT filesystem (MS-DOS, OS/2, NT/Win32)</li>\n+     *   <li>1: Amiga</li>\n+     *   <li>2: VMS (or OpenVMS)</li>\n+     *   <li>3: Unix</li>\n+     *   <li>4: VM/CMS</li>\n+     *   <li>5: Atari TOS</li>\n+     *   <li>6: HPFS filesystem (OS/2, NT)</li>\n+     *   <li>7: Macintosh</li>\n+     *   <li>8: Z-System</li>\n+     *   <li>9: CP/M</li>\n+     *   <li>10: TOPS-20</li>\n+     *   <li>11: NTFS filesystem (NT)</li>\n+     *   <li>12: QDOS</li>\n+     *   <li>13: Acorn RISCOS</li>\n+     *   <li>255: Unknown</li>\n+     * </ul>\n+     * \n+     * @param operatingSystem the code of the operating system\n+     */\n+    public void setOperatingSystem(int operatingSystem) {\n+        this.operatingSystem = operatingSystem;\n+    }\n+}\n--- a/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.zip.Deflater;\n+import java.util.zip.GZIPInputStream;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipParameters;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.output.NullOutputStream;\n+import org.junit.Assert;\n \n public final class GZipTestCase extends AbstractTestCase {\n \n             }\n         }\n     }\n+\n+    public void testInteroperabilityWithGzipCompressorInputStream() throws Exception {\n+        byte[] content = FileUtils.readFileToByteArray(getFile(\"test3.xml\"));\n+        \n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+\n+        GzipParameters parameters = new GzipParameters();\n+        parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);\n+        parameters.setOperatingSystem(3);\n+        parameters.setFilename(\"test3.xml\");\n+        parameters.setComment(\"Test file\");\n+        parameters.setModificationTime(System.currentTimeMillis());\n+        GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);\n+        out.write(content);\n+        out.flush();\n+        out.close();\n+\n+        GzipCompressorInputStream in = new GzipCompressorInputStream(new ByteArrayInputStream(bout.toByteArray()));\n+        byte[] content2 = IOUtils.toByteArray(in);\n+\n+        Assert.assertArrayEquals(\"uncompressed content\", content, content2);\n+    }\n+\n+    public void testInteroperabilityWithGZIPInputStream() throws Exception {\n+        byte[] content = FileUtils.readFileToByteArray(getFile(\"test3.xml\"));\n+        \n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+\n+        GzipParameters parameters = new GzipParameters();\n+        parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);\n+        parameters.setOperatingSystem(3);\n+        parameters.setFilename(\"test3.xml\");\n+        parameters.setComment(\"Test file\");\n+        parameters.setModificationTime(System.currentTimeMillis());\n+        GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);\n+        out.write(content);\n+        out.flush();\n+        out.close();\n+\n+        GZIPInputStream in = new GZIPInputStream(new ByteArrayInputStream(bout.toByteArray()));\n+        byte[] content2 = IOUtils.toByteArray(in);\n+\n+        Assert.assertArrayEquals(\"uncompressed content\", content, content2);\n+    }\n+\n+    public void testInvalidCompressionLevel() {\n+        GzipParameters parameters = new GzipParameters();\n+        try {\n+            parameters.setCompressionLevel(10);\n+            fail(\"IllegalArgumentException not thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            parameters.setCompressionLevel(-5);\n+            fail(\"IllegalArgumentException not thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+    }\n+\n+    private void testExtraFlags(int compressionLevel, int flag) throws Exception {\n+        byte[] content = FileUtils.readFileToByteArray(getFile(\"test3.xml\"));\n+        \n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+        \n+        GzipParameters parameters = new GzipParameters();\n+        parameters.setCompressionLevel(compressionLevel);\n+        GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);\n+        IOUtils.copy(new ByteArrayInputStream(content), out);\n+        out.flush();\n+        out.close();\n+        \n+        assertEquals(\"extra flags (XFL)\", flag, bout.toByteArray()[8]);\n+    }\n+\n+    public void testExtraFlagsFastestCompression() throws Exception {\n+        testExtraFlags(Deflater.BEST_SPEED, 4);\n+    }\n+\n+    public void testExtraFlagsBestCompression() throws Exception {\n+        testExtraFlags(Deflater.BEST_COMPRESSION, 2);\n+    }\n+\n+    public void testExtraFlagsDefaultCompression() throws Exception {\n+        testExtraFlags(Deflater.DEFAULT_COMPRESSION, 0);\n+    }\n+    \n+    public void testOverWrite() throws Exception {\n+        GzipCompressorOutputStream out = new GzipCompressorOutputStream(new NullOutputStream());\n+        out.close();\n+        try {\n+            out.write(0);\n+            fail(\"IOException expected\");\n+        } catch (IOException e) {\n+            // expected\n+        }\n+    }\n }", "timestamp": 1387199904, "metainfo": ""}