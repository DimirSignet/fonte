{"sha": "13650931b296a6d0d34db1b0c4632e38a8a2593a", "log": "COMPRESS-257 add the remaining BCJ implementations provided by XZ for Java  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n package org.apache.commons.compress.archivers.sevenz;\n \n import java.io.FilterInputStream;\n+import java.io.FilterOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n+import org.tukaani.xz.ARMOptions;\n+import org.tukaani.xz.ARMThumbOptions;\n+import org.tukaani.xz.FilterOptions;\n+import org.tukaani.xz.FinishableOutputStream;\n import org.tukaani.xz.FinishableWrapperOutputStream;\n+import org.tukaani.xz.IA64Options;\n import org.tukaani.xz.LZMAInputStream;\n+import org.tukaani.xz.PowerPCOptions;\n+import org.tukaani.xz.SPARCOptions;\n import org.tukaani.xz.X86Options;\n \n class Coders {\n             put(SevenZMethod.DEFLATE, new DeflateDecoder());\n             put(SevenZMethod.BZIP2, new BZIP2Decoder());\n             put(SevenZMethod.AES256SHA256, new AES256SHA256Decoder());\n-            put(SevenZMethod.X86, new X86Decoder());\n+            put(SevenZMethod.BCJ_X86_FILTER, new BCJDecoder(new X86Options()));\n+            put(SevenZMethod.BCJ_PPC_FILTER, new BCJDecoder(new PowerPCOptions()));\n+            put(SevenZMethod.BCJ_IA64_FILTER, new BCJDecoder(new IA64Options()));\n+            put(SevenZMethod.BCJ_ARM_FILTER, new BCJDecoder(new ARMOptions()));\n+            put(SevenZMethod.BCJ_ARM_THUMB_FILTER, new BCJDecoder(new ARMThumbOptions()));\n+            put(SevenZMethod.BCJ_SPARC_FILTER, new BCJDecoder(new SPARCOptions()));\n         }};\n \n     static CoderBase findByMethod(SevenZMethod method) {\n         }\n     }\n     \n-    static class X86Decoder extends CoderBase {\n+    static class BCJDecoder extends CoderBase {\n+        private final FilterOptions opts;\n+        BCJDecoder(FilterOptions opts) {\n+            this.opts = opts;\n+        }\n+\n         @Override\n         InputStream decode(final InputStream in, final Coder coder,\n                 byte[] password) throws IOException {\n-            return new X86Options().getInputStream(in);\n+            return opts.getInputStream(in);\n         }\n         @Override\n         OutputStream encode(final OutputStream out, final Object _) {\n-            return new X86Options().getOutputStream(new FinishableWrapperOutputStream(out));\n+            final FinishableOutputStream fo = opts.getOutputStream(new FinishableWrapperOutputStream(out));\n+            return new FilterOutputStream(fo) {\n+                @Override\n+                public void flush() {\n+                }\n+            };\n         }\n     }\n     \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n \n /**\n  * The (partially) supported compression/encryption methods used in 7z archives.\n+ *\n+ * <p>All methods with a _FILTER suffix are used as preprocessors with\n+ * the goal of creating a better compression ratio with the compressor\n+ * that comes next in the chain of methods.  7z will in general only\n+ * allow them to be used together with a \"real\" compression method but\n+ * Commons Compress doesn't enforce this.</p>\n+ *\n+ * <p>The BCJ_ filters work on executable files for the given platform\n+ * and convert relative addresses to absolute addresses in CALL\n+ * instructions.  This means they are only useful when applied to\n+ * executables of the chosen platform.</p>\n  */\n public enum SevenZMethod {\n     /** no compression at all */\n      */\n     AES256SHA256(new byte[] { (byte)0x06, (byte)0xf1, (byte)0x07, (byte)0x01 }),\n     /**\n-     * BCJ x86 version 1.\n+     * BCJ x86 platform version 1.\n      * @since 1.8\n      */\n-    X86(new byte[] { 0x03, 0x03, 0x01, 0x03 });\n+    BCJ_X86_FILTER(new byte[] { 0x03, 0x03, 0x01, 0x03 }),\n+    /**\n+     * BCJ PowerPC platform.\n+     * @since 1.8\n+     */\n+    BCJ_PPC_FILTER(new byte[] { 0x03, 0x03, 0x02, 0x05 }),\n+    /**\n+     * BCJ I64 platform.\n+     * @since 1.8\n+     */\n+    BCJ_IA64_FILTER(new byte[] { 0x03, 0x03, 0x04, 0x01 }),\n+    /**\n+     * BCJ ARM platform.\n+     * @since 1.8\n+     */\n+    BCJ_ARM_FILTER(new byte[] { 0x03, 0x03, 0x05, 0x01 }),\n+    /**\n+     * BCJ ARM Thumb platform.\n+     * @since 1.8\n+     */\n+    BCJ_ARM_THUMB_FILTER(new byte[] { 0x03, 0x03, 0x07, 0x01 }),\n+    /**\n+     * BCJ Sparc platform.\n+     * @since 1.8\n+     */\n+    BCJ_SPARC_FILTER(new byte[] { 0x03, 0x03, 0x08, 0x05 });\n \n     private final byte[] id;\n \n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n         testRoundTrip(SevenZMethod.DEFLATE);\n     }\n \n+    public void testBCJX86Roundtrip() throws Exception {\n+        testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_X86_FILTER));\n+    }\n+\n+    public void testBCJARMRoundtrip() throws Exception {\n+        testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_ARM_FILTER));\n+    }\n+\n+    public void testBCJARMThumbRoundtrip() throws Exception {\n+        testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_ARM_THUMB_FILTER));\n+    }\n+\n+    public void testBCJIA64Roundtrip() throws Exception {\n+        testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_IA64_FILTER));\n+    }\n+\n+    public void testBCJPPCRoundtrip() throws Exception {\n+        testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_PPC_FILTER));\n+    }\n+\n+    public void testBCJSparcRoundtrip() throws Exception {\n+        testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.BCJ_SPARC_FILTER));\n+    }\n+\n     public void testStackOfContentCompressions() throws Exception {\n         output = new File(dir, \"multiple-methods.7z\");\n         ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();\n         output = new File(dir, method + \"-roundtrip.7z\");\n         ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();\n         methods.add(new SevenZMethodConfiguration(method));\n+        createAndReadBack(output, methods);\n+    }\n+\n+    private void testFilterRoundTrip(SevenZMethodConfiguration method) throws Exception {\n+        output = new File(dir, method + \"-roundtrip.7z\");\n+        ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();\n+        methods.add(method);\n+        methods.add(new SevenZMethodConfiguration(SevenZMethod.LZMA2));\n         createAndReadBack(output, methods);\n     }\n ", "timestamp": 1393589852, "metainfo": ""}