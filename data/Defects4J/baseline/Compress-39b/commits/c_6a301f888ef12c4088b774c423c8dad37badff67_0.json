{"sha": "6a301f888ef12c4088b774c423c8dad37badff67", "log": "Document UseZip64-API of ZipArchiveOutputStream that I intend to implement  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64Mode.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+/**\n+ * The different modes {@link ZipArchiveOutputStream} can operate in.\n+ *\n+ * @see ZipArchiveOutputStream#setUseZip64\n+ *\n+ * @since Apache Commons Compress 1.3\n+ */\n+public enum Zip64Mode {\n+    /**\n+     * Use Zip64 extensions for all entries, even if it is clear it is\n+     * not required.\n+     */\n+    Always,\n+    /**\n+     * Don't use Zip64 extensions for any entries.\n+     *\n+     * <p>This will cause a {@link Zip64RequiredException} to be\n+     * thrown if {@link ZipArchiveOutputStream} detects it needs Zip64\n+     * support.</p>\n+     */\n+    Never,\n+    /**\n+     * Use Zip64 extensions for all entries where they are required,\n+     * don't use them for entries that clearly don't require them.\n+     */\n+    AsNeeded\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64RequiredException.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.util.zip.ZipException;\n+\n+/**\n+ * Exception thrown when attempting to write data that requires Zip64\n+ * support to an archive and {@link ZipArchiveOutputStream#setUseZip64\n+ * UseZip64} has been set to {@link Zip64Mode#Never Never}.\n+ * @since Apache Commons Compress 1.3\n+ */\n+public class Zip64RequiredException extends ZipException {\n+\n+    private static final long serialVersionUID = 20110809L;\n+\n+    public Zip64RequiredException(String reason) {\n+        super(reason);\n+    }\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      */\n     private boolean hasUsedZip64 = false;\n \n+    private Zip64Mode zip64Mode = Zip64Mode.AsNeeded;\n+\n     /**\n      * Creates a new ZIP OutputStream filtering the underlying stream.\n      * @param out the outputstream to zip\n      */\n     public void setFallbackToUTF8(boolean b) {\n         fallbackToUTF8 = b;\n+    }\n+\n+    /**\n+     * Whether Zip64 extensions will be used.\n+     *\n+     * <p>When setting the mode to {@link Zip64Mode#Never Never},\n+     * {@link #putArchiveEntry}, {@link #closeArchiveEntry}, {@link\n+     * #finish} or {@link #close} may throw a {@link\n+     * Zip64RequiredException} if the entry's size or the total size\n+     * of the archive exceeds 4GB or there are more than 65536 entries\n+     * inside the archive.  Any archive created in this mode will be\n+     * readable by implementations that don't support Zip64.</p>\n+     *\n+     * <p>When setting the mode to {@link Zip64Mode#Always Always},\n+     * Zip64 extensions will be used for all entries.  Any archive\n+     * created in this mode may be unreadable by implementations that\n+     * don't support Zip64 even if all its contents would be.</p>\n+     *\n+     * <p>When setting the mode to {@link Zip64Mode#AsNeeded\n+     * AsNeeded}, Zip64 extensions will transparently be used for\n+     * those entries that require them.  This mode can only be used if\n+     * the uncompressed size of the {@link ZipArchiveEntry} is known\n+     * when calling {@link #putArchiveEntry} or the archive is written\n+     * to a seekable output (i.e. you have used the {@link\n+     * #ZipArchiveOutputStream(java.io.File) File-arg constructor}) -\n+     * this mode is not valid when the output stream is not seekable\n+     * and the uncompressed size is unknown when {@link\n+     * #putArchiveEntry} is called.</p>\n+     * \n+     * <p>If no entry inside the resulting archive requires Zip64\n+     * extensions then {@link Zip64Mode#Never Never} will create the\n+     * smallest archive.  {@link Zip64Mode#AsNeeded AsNeeded} will\n+     * create a slightly bigger archive if the uncompressed size of\n+     * any entry has initially been unknown and create an archive\n+     * identical to {@link Zip64Mode#Never Never} otherwise.  {@link\n+     * Zip64Mode#Always Always} will create an archive that is at\n+     * least 20 bytes per entry bigger than the one {@link\n+     * Zip64Mode#Never Never} would create.</p>\n+     *\n+     * <p>Defaults to {@link Zip64Mode#AsNeeded AsNeeded} unless\n+     * {@link #putArchiveEntry} is called with an entry of unknown\n+     * size and data is written to a non-seekable stream - in this\n+     * case the default is {@link Zip64Mode#Never Never}.</p>\n+     *\n+     * @since Apache Commons Compress 1.3\n+     */\n+    public void setUseZip64(Zip64Mode mode) {\n+        zip64Mode = mode;\n     }\n \n     /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n         OutputStream stream = null;\n         archiveList = new ArrayList<String>();\n         try {\n-            archive = File.createTempFile(\"empty\", \".\" + archivename);\n+            archive =File.createTempFile(\"empty\", \".\" + archivename);\n             stream = new FileOutputStream(archive);\n             out = factory.createArchiveOutputStream(archivename, stream);\n             // Use short file name so does not cause problems for ar", "timestamp": 1312871118, "metainfo": ""}