{"sha": "601e4d7dbf966bc861f15c6dd657cb68772df08e", "log": "COMPRESS-229 properly parse GNU_LONGLNK entries, patch by Christoph Gysin  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n     }\n \n     /**\n+     * Indicate if this entry is a GNU long linkname block\n+     *\n+     * @return true if this is a long name extension provided by GNU tar\n+     */\n+    public boolean isGNULongLinkEntry() {\n+        return linkFlag == LF_GNUTYPE_LONGLINK\n+            && name.equals(GNU_LONGLINK);\n+    }\n+\n+    /**\n      * Indicate if this entry is a GNU long name block\n      *\n      * @return true if this is a long name extension provided by GNU tar\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n         entryOffset = 0;\n         entrySize = currEntry.getSize();\n \n+        if (currEntry.isGNULongLinkEntry()) {\n+            byte[] longLinkData = getLongNameData();\n+            currEntry.setLinkName(encoding.decode(longLinkData));\n+        }\n+\n         if (currEntry.isGNULongNameEntry()) {\n-            // read in the name\n-            ByteArrayOutputStream longName = new ByteArrayOutputStream();\n-            int length = 0;\n-            while ((length = read(SMALL_BUF)) >= 0) {\n-                longName.write(SMALL_BUF, 0, length);\n-            }\n-            getNextEntry();\n-            if (currEntry == null) {\n-                // Bugzilla: 40334\n-                // Malformed tar file - long entry name not followed by entry\n-                return null;\n-            }\n-            byte[] longNameData = longName.toByteArray();\n-            // remove trailing null terminator(s)\n-            length = longNameData.length;\n-            while (length > 0 && longNameData[length - 1] == 0) {\n-                --length;\n-            }\n-            if (length != longNameData.length) {\n-                byte[] l = new byte[length];\n-                System.arraycopy(longNameData, 0, l, 0, length);\n-                longNameData = l;\n-            }\n-\n+            byte[] longNameData = getLongNameData();\n             currEntry.setName(encoding.decode(longNameData));\n         }\n \n         // the correct value.\n         entrySize = currEntry.getSize();\n         return currEntry;\n+    }\n+\n+    /**\n+     * Get the next entry in this tar archive as longname data.\n+     *\n+     * @return The next entry in the archive as longname data, or null.\n+     * @throws IOException on error\n+     */\n+    protected byte[] getLongNameData() throws IOException {\n+        // read in the name\n+        ByteArrayOutputStream longName = new ByteArrayOutputStream();\n+        int length = 0;\n+        while ((length = read(SMALL_BUF)) >= 0) {\n+            longName.write(SMALL_BUF, 0, length);\n+        }\n+        getNextEntry();\n+        if (currEntry == null) {\n+            // Bugzilla: 40334\n+            // Malformed tar file - long entry name not followed by entry\n+            return null;\n+        }\n+        byte[] longNameData = longName.toByteArray();\n+        // remove trailing null terminator(s)\n+        length = longNameData.length;\n+        while (length > 0 && longNameData[length - 1] == 0) {\n+            --length;\n+        }\n+        if (length != longNameData.length) {\n+            byte[] l = new byte[length];\n+            System.arraycopy(longNameData, 0, l, 0, length);\n+            longNameData = l;\n+        }\n+        return longNameData;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n     byte   LF_CONTIG = (byte) '7';\n \n     /**\n+     * Identifies the *next* file on the tape as having a long linkname.\n+     */\n+    byte LF_GNUTYPE_LONGLINK = (byte) 'K';\n+\n+    /**\n      * Identifies the *next* file on the tape as having a long name.\n      */\n     byte LF_GNUTYPE_LONGNAME = (byte) 'L';\n--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n import java.io.FileReader;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Map;\n+import java.util.HashMap;\n \n import junit.framework.AssertionFailedError;\n import junit.framework.Test;\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.ar.ArArchiveInputStream;\n import org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n \n  */\n public class LongPathTest extends AbstractTestCase {\n \n+    private String name;\n     private File file;\n \n-    private static final ArrayList<String> fileList = new ArrayList<String>();\n+    private static final Map<String, ArrayList<String>> fileLists = new HashMap<String, ArrayList<String>>();\n \n     public LongPathTest(String name) {\n         super(name);\n     }\n \n-    private LongPathTest(String name, File file){\n-        super(name);\n+    private LongPathTest(String name, String function, File file) {\n+        super(function);\n+        this.name = name;\n         this.file = file;\n     }\n \n     public static TestSuite suite() throws IOException{\n         TestSuite suite = new TestSuite(\"LongPathTests\");\n-        File arcdir = getFile(\"longpath\");\n+        suite.addTest(createSuite(\"LongPathTest\", \"longpath\"));\n+        suite.addTest(createSuite(\"LongSymlinkTest\", \"longsymlink\"));\n+        return suite;\n+    }\n+\n+    public static TestSuite createSuite(String name, String dirname) throws IOException {\n+        TestSuite suite = new TestSuite(name);\n+        File arcdir = getFile(dirname);\n         assertTrue(arcdir.exists());\n         File listing= new File(arcdir,\"files.txt\");\n         assertTrue(\"File listing is readable\",listing.canRead());\n         BufferedReader br = new BufferedReader(new FileReader(listing));\n+\n+        ArrayList<String> fileList = new ArrayList<String>();\n         String line;\n         while ((line=br.readLine())!=null){\n             if (line.startsWith(\"#\")){\n             }\n             fileList.add(line);\n         }\n+        fileLists.put(name, fileList);\n         br.close();\n         File[]files=arcdir.listFiles();\n         for (final File file : files) {\n             }\n             // Appears to be the only way to give the test a variable name\n             TestSuite namedSuite = new TestSuite(file.getName());\n-            Test test = new LongPathTest(\"testArchive\", file);\n+            Test test = new LongPathTest(name, \"testArchive\", file);\n             namedSuite.addTest(test);\n             suite.addTest(namedSuite);\n         }\n         return suite;\n     }\n \n+    protected String getExpectedString(ArchiveEntry entry) {\n+        if (entry instanceof TarArchiveEntry) {\n+            TarArchiveEntry tarEntry = (TarArchiveEntry) entry;\n+            if (tarEntry.isSymbolicLink()) {\n+                return tarEntry.getName() + \" -> \" + tarEntry.getLinkName();\n+            }\n+        }\n+        return entry.getName();\n+    }\n+\n     public void testArchive() throws Exception {\n+        ArrayList<String> fileList = fileLists.get(name);\n         @SuppressWarnings(\"unchecked\") // fileList is of correct type\n         ArrayList<String> expected = (ArrayList<String>) fileList.clone();\n         String name = file.getName();", "timestamp": 1370251230, "metainfo": ""}