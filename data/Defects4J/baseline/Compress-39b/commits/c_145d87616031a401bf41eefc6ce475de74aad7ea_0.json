{"sha": "145d87616031a401bf41eefc6ce475de74aad7ea", "log": "Javadoc; unused import  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n package org.apache.commons.compress.archivers.cpio;\n \n import java.io.File;\n-import java.io.FilterOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n import java.util.HashMap;\n \n     /**\n      * Construct the cpio output stream with a specified format and a\n-     * blocksize of {@link CpioConstants.BLOCK_SIZE BLOCK_SIZE}.\n+     * blocksize of {@link CpioConstants#BLOCK_SIZE BLOCK_SIZE}.\n      * \n      * @param out\n      *            The cpio stream\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnparseableExtraFieldData.java\n      * @param buffer the buffer to read data from\n      * @param offset offset into buffer to read data\n      * @param length the length of data\n-     * @exception ZipException on error\n      */\n     public void parseFromCentralDirectoryData(byte[] buffer, int offset,\n                                               int length) {\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n      * \n      * @param in the input stream\n      * @return the compressor input stream\n-     * @throws CompressorInputStream if the compressor name is not known\n+     * @throws CompressorException if the compressor name is not known\n      * @throws IllegalArgumentException if the stream is null or does not support mark\n      */\n     public CompressorInputStream createCompressorInputStream(final InputStream in)", "timestamp": 1267573025, "metainfo": ""}