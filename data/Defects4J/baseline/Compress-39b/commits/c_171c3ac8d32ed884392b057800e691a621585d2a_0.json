{"sha": "171c3ac8d32ed884392b057800e691a621585d2a", "log": "COMPRESS-318 document ZipArchiveInputStream's limitations in the javadocs  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n     /**\n      * Retrieves the internal file attributes.\n      *\n+     * <p><b>Note</b>: {@link ZipArchiveInputStream} is unable to fill\n+     * this field, you must use {@link ZipFile} if you want to read\n+     * entries using this attribute.</p>\n+     *\n      * @return the internal file attributes\n      */\n     public int getInternalAttributes() {\n \n     /**\n      * Retrieves the external file attributes.\n+     *\n+     * <p><b>Note</b>: {@link ZipArchiveInputStream} is unable to fill\n+     * this field, you must use {@link ZipFile} if you want to read\n+     * entries using this attribute.</p>\n+     *\n      * @return the external file attributes\n      */\n     public long getExternalAttributes() {\n \n     /**\n      * Retrieves all extra fields that have been parsed successfully.\n+     *\n+     * <p><b>Note</b>: The set of extra fields may be incomplete when\n+     * {@link ZipArchiveInputStream} has been used as some extra\n+     * fields use the central directory to store additional\n+     * information.</p>\n+     *\n      * @return an array of the extra fields\n      */\n     public ZipExtraField[] getExtraFields() {\n \n     /**\n      * Gets the uncompressed size of the entry data.\n+     *\n+     * <p><b>Note</b>: {@link ZipArchiveInputStream} may create\n+     * entries that return {@link #SIZE_UNKNOWN SIZE_UNKNOWN} as long\n+     * as the entry hasn't been read completely.</p>\n+     *\n      * @return the entry size\n      */\n     @Override\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n /**\n  * Implements an input stream that can read Zip archives.\n  *\n- * <p>Note that {@link ZipArchiveEntry#getSize()} may return -1 if the\n- * DEFLATE algorithm is used, as the size information is not available\n- * from the header.</p>\n- *\n- * <p>The {@link ZipFile} class is preferred when reading from files.</p>\n- *\n  * <p>As of Apache Commons Compress it transparently supports Zip64\n  * extensions and thus individual entries and archives larger than 4\n  * GB or with more than 65536 entries.</p>\n+ *\n+ * <p>The {@link ZipFile} class is preferred when reading from files\n+ * as {@link ZipArchiveInputStream} is limited by not being able to\n+ * read the central directory header before returning entries.  In\n+ * particular {@link ZipArchiveInputStream}</p>\n+ *\n+ * <ul>\n+ *\n+ *  <li>may return entries that are not part of the central directory\n+ *  at all and shouldn't be considered part of the archive.</li>\n+ *\n+ *  <li>may return several entries with the same name.</li>\n+ *\n+ *  <li>will not return internal or external attributes.</li>\n+ *\n+ *  <li>may return incomplete extra field data.</li>\n+ *\n+ *  <li>may return unknown sizes and CRC values for entries until the\n+ *  next entry has been reached if the archive uses the data\n+ *  descriptor feature.</li>\n+ *\n+ * </ul>\n  *\n  * @see ZipFile\n  * @NotThreadSafe", "timestamp": 1439136369, "metainfo": ""}