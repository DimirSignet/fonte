{"sha": "8d7288d02d77f67662bf8feebeea5d8ec9f6e82d", "log": "Avoid 1:1 binary comparison because timestamps will occasionaly vary  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n import java.io.InputStream; \t\n import java.io.OutputStream;\n import java.util.ArrayList;\n+import java.util.Enumeration;\n import java.util.List;\n import java.util.zip.ZipEntry;\n \n \n     private void assertSameFileContents(File expectedFile, File actualFile) throws IOException {\n         int size = (int) Math.max(expectedFile.length(), actualFile.length());\n-        byte[] expected = new byte[size];\n-        byte[] actual = new byte[size];\n-        final FileInputStream expectedIs = new FileInputStream(expectedFile);\n-        final FileInputStream actualIs = new FileInputStream(actualFile);\n-        IOUtils.readFully(expectedIs, expected);\n-        IOUtils.readFully(actualIs, actual);\n-        expectedIs.close();\n-        actualIs.close();\n-        Assert.assertArrayEquals(expected, actual);\n+        ZipFile expected = new ZipFile(expectedFile);\n+        ZipFile actual = new ZipFile(actualFile);\n+        byte[] expectedBuf = new byte[size];\n+        byte[] actualBuf = new byte[size];\n+\n+        Enumeration<ZipArchiveEntry> actualInOrder = actual.getEntriesInPhysicalOrder();\n+        Enumeration<ZipArchiveEntry> expectedInOrder = expected.getEntriesInPhysicalOrder();\n+\n+        while (actualInOrder.hasMoreElements()){\n+            ZipArchiveEntry actualElement = actualInOrder.nextElement();\n+            ZipArchiveEntry expectedElement = expectedInOrder.nextElement();\n+            assertEquals( expectedElement.getName(), actualElement.getName());\n+            assertEquals( expectedElement.getMethod(), actualElement.getMethod());\n+            assertEquals( expectedElement.getGeneralPurposeBit(), actualElement.getGeneralPurposeBit());\n+            assertEquals( expectedElement.getCrc(), actualElement.getCrc());\n+            assertEquals( expectedElement.getCompressedSize(), actualElement.getCompressedSize());\n+            assertEquals( expectedElement.getSize(), actualElement.getSize());\n+            assertEquals( expectedElement.getExternalAttributes(), actualElement.getExternalAttributes());\n+            assertEquals( expectedElement.getInternalAttributes(), actualElement.getInternalAttributes());\n+\n+            InputStream actualIs = actual.getInputStream(actualElement);\n+            InputStream expectedIs = expected.getInputStream(expectedElement);\n+            IOUtils.readFully(expectedIs, expectedBuf);\n+            IOUtils.readFully(actualIs, actualBuf);\n+            expectedIs.close();\n+            actualIs.close();\n+            Assert.assertArrayEquals(expectedBuf, actualBuf); // Buffers are larger than payload. dont care\n+        }\n+\n+        expected.close();\n+        actual.close();\n     }\n \n ", "timestamp": 1422309147, "metainfo": ""}