{"sha": "3a75bfdb3b4997f8498320f93a34a8732bda99cc", "log": "Give Tar more data to work with when autodetecting  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n             in.reset();\n             if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n                 return new ZipArchiveInputStream(in);\n-            } else if (JarArchiveInputStream\n-                    .matches(signature, signatureLength)) {\n+            } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n                 return new JarArchiveInputStream(in);\n-            } else if (TarArchiveInputStream\n-                    .matches(signature, signatureLength)) {\n-                return new TarArchiveInputStream(in);\n             } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n                 return new ArArchiveInputStream(in);\n-            } else if (CpioArchiveInputStream.matches(signature,\n-                    signatureLength)) {\n+            } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n                 return new CpioArchiveInputStream(in);\n+            }\n+            // Tar needs a bigger buffer to check the signature; read the first block\n+            final byte[] tarheader = new byte[512];\n+            in.mark(tarheader.length);\n+            signatureLength = in.read(tarheader);\n+            in.reset();\n+            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n+                return new TarArchiveInputStream(in);\n             }\n         } catch (IOException e) {\n             throw new ArchiveException(", "timestamp": 1238715153, "metainfo": ""}