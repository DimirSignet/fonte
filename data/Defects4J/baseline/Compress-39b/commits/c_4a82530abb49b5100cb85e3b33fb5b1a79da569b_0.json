{"sha": "4a82530abb49b5100cb85e3b33fb5b1a79da569b", "log": "compile without warnings with -Xlint  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n      * @deprecated this method may yield wrong results for large\n      * archives, use #getBytesRead instead\n      */\n+    @Deprecated\n     public int getCount() {\n         return (int) bytesRead;\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n      * @deprecated this method may yield wrong results for large\n      * archives, use #getBytesWritten instead\n      */\n+    @Deprecated\n     public int getCount() {\n         return (int) bytesWritten;\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n      *\n      * @since Apache Commons Compress 1.1\n      */\n+    @SuppressWarnings(\"fallthrough\")\n     public static ZipExtraField[] parse(byte[] data, boolean local,\n                                         UnparseableExtraField onUnparseableData)\n         throws ZipException {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Simple8BitZipEncoding.java\n      * stored as an array of 128 chars.\n      */\n     public Simple8BitZipEncoding(char[] highChars) {\n-        this.highChars = (char[]) highChars.clone();\n+        this.highChars = highChars.clone();\n         List<Simple8BitChar> temp =\n             new ArrayList<Simple8BitChar>(this.highChars.length);\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n \n     private final Feature reason;\n     private final ZipArchiveEntry entry;\n+    private static final long serialVersionUID = 4430521921766595597L;\n \n     /**\n      * Creates an exception.\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      * written in utf-8.\n      * @deprecated use {@link GeneralPurposeBit#UFT8_NAMES_FLAG} instead\n      */\n+    @Deprecated\n     public static final int EFS_FLAG = GeneralPurposeBit.UFT8_NAMES_FLAG;\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorInputStream.java\n      * @deprecated this method may yield wrong results for large\n      * archives, use #getBytesRead instead\n      */\n+    @Deprecated\n     public int getCount() {\n         return (int) bytesRead;\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n             assertTrue(ais instanceof CpioArchiveInputStream);\n             // Hack: cpio does not add trailing \"/\" to directory names\n             for(int i=0; i < expected.size(); i++){\n-                String ent = (String) expected.get(i);\n+                String ent = expected.get(i);\n                 if (ent.endsWith(\"/\")){\n                     expected.set(i, ent.substring(0, ent.length()-1));\n                 }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n     private static void assertEntryName(ArrayList<ZipArchiveEntry> entries,\n                                         int index,\n                                         String expectedName) {\n-        ZipArchiveEntry ze = (ZipArchiveEntry) entries.get(index);\n+        ZipArchiveEntry ze = entries.get(index);\n         assertEquals(\"src/main/java/org/apache/commons/compress/archivers/zip/\"\n                      + expectedName + \".java\",\n                      ze.getName());\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n             changes.add(e2, in2);\n             \n             assertEquals(1, changes.getChanges().size());\n-            Change c = (Change)changes.getChanges().iterator().next();\n+            Change c = changes.getChanges().iterator().next();\n             assertEquals(in2, c.getInput());\n         } finally {\n             if (in != null)\n             changes.add(e2, in2, false);\n             \n             assertEquals(1, changes.getChanges().size());\n-            Change c = (Change)changes.getChanges().iterator().next();\n+            Change c = changes.getChanges().iterator().next();\n             assertEquals(in, c.getInput());\n         } finally {\n             if (in != null)", "timestamp": 1312636822, "metainfo": ""}