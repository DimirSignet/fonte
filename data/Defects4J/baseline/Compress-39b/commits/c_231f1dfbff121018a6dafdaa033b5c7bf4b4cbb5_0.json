{"sha": "231f1dfbff121018a6dafdaa033b5c7bf4b4cbb5", "log": "Update count properly in CpioArchiveOutputStream, get rid of CountingStream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n      */\n     public CpioArchiveOutputStream(final OutputStream out, final short format,\n                                    final int blockSize) {\n-        this.out = new CountingStream(out);\n+        this.out = out;\n         switch (format) {\n         case FORMAT_NEW:\n         case FORMAT_NEW_CRC:\n         switch (e.getFormat()) {\n         case FORMAT_NEW:\n             out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW));\n+            count(6);\n             writeNewEntry(e);\n             break;\n         case FORMAT_NEW_CRC:\n             out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW_CRC));\n+            count(6);\n             writeNewEntry(e);\n             break;\n         case FORMAT_OLD_ASCII:\n             out.write(ArchiveUtils.toAsciiBytes(MAGIC_OLD_ASCII));\n+            count(6);\n             writeOldAsciiEntry(e);\n             break;\n         case FORMAT_OLD_BINARY:\n         writeHeader(this.entry);\n         closeArchiveEntry();\n \n-        int lengthOfLastBlock =\n-            (int) (((CountingStream) out).getTotalWritten() % blockSize);\n+        int lengthOfLastBlock = (int) (getBytesWritten() % blockSize);\n         if (lengthOfLastBlock != 0) {\n             pad(blockSize - lengthOfLastBlock);\n         }\n         if (count > 0){\n             byte buff[] = new byte[count];\n             out.write(buff);\n+            count(count);\n         }\n     }\n \n             final boolean swapHalfWord) throws IOException {\n         byte tmp[] = CpioUtil.long2byteArray(number, length, swapHalfWord);\n         out.write(tmp);\n+        count(tmp.length);\n     }\n \n     private void writeAsciiLong(final long number, final int length,\n         } else {\n             tmpStr = tmp.substring(tmp.length() - length);\n         }\n-        out.write(ArchiveUtils.toAsciiBytes(tmpStr));\n+        byte[] b = ArchiveUtils.toAsciiBytes(tmpStr);\n+        out.write(b);\n+        count(b.length);\n     }\n \n     /**\n      * @throws IOException if the string couldn't be written\n      */\n     private void writeCString(final String str) throws IOException {\n-        out.write(ArchiveUtils.toAsciiBytes(str)); \n+        byte[] b = ArchiveUtils.toAsciiBytes(str);\n+        out.write(b);\n         out.write('\\0');\n+        count(b.length + 1);\n     }\n \n     /**\n         return new CpioArchiveEntry(inputFile, entryName);\n     }\n \n-    private static class CountingStream extends FilterOutputStream {\n-        private long totalWritten = 0;\n-\n-        private CountingStream(final OutputStream out) {\n-            super(out);\n-        }\n-        public void write(byte[] b) throws IOException {\n-            write(b, 0, b.length);\n-        }\n-        public void write(int b) throws IOException {\n-            out.write(b);\n-            totalWritten++;\n-        }\n-        public void write(byte[] b, int off, int len)\n-            throws IOException {\n-            out.write(b, off, len);\n-            totalWritten += len;\n-        }\n-        private long getTotalWritten() { return totalWritten; }\n-    }\n }", "timestamp": 1266556411, "metainfo": ""}