{"sha": "1b86ffab91d88e2e98e2549756f89890b5b4feb7", "log": "XZUtils modelled after GzipUtils  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.xz;\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Utility code for the xz compression format.\n+ * @ThreadSafe\n+ * @since Commons Compress 1.4\n+ */\n+public class XZUtils {\n+\n+    /**\n+     * Map from common filename suffixes to the suffixes that identify xzped\n+     * versions of those file types. For example: from \".tar\" to \".txz\".\n+     */\n+    private static final Map<String, String> compressSuffix =\n+        new HashMap<String, String>();\n+\n+    /**\n+     * Map from common filename suffixes of xzped files to the corresponding\n+     * suffixes of uncompressed files. For example: from \".tgz\" to \".tar\".\n+     * <p>\n+     * This map also contains xz-specific suffixes like \".gz\" and \"-z\".\n+     * These suffixes are mapped to the empty string, as they should simply\n+     * be removed from the filename when the file is uncompressed.\n+     */\n+    private static final Map<String, String> uncompressSuffix =\n+        new HashMap<String, String>();\n+\n+    static {\n+        compressSuffix.put(\".tar\", \".txz\");\n+\n+        uncompressSuffix.put(\".txz\", \".tar\");\n+        uncompressSuffix.put(\".xz\", \"\");\n+        uncompressSuffix.put(\"-xz\", \"\");\n+    }\n+    // N.B. if any shorter or longer keys are added, ensure the for loop limits are changed\n+\n+    /** Private constructor to prevent instantiation of this utility class. */\n+    private XZUtils() {\n+    }\n+\n+    /**\n+     * Detects common xz suffixes in the given filename.\n+     *\n+     * @param filename name of a file\n+     * @return <code>true</code> if the filename has a common xz suffix,\n+     *         <code>false</code> otherwise\n+     */\n+    public static boolean isCompressedFilename(String filename) {\n+        String lower = filename.toLowerCase(Locale.ENGLISH);\n+        int n = lower.length();\n+        // Shortest suffix is three letters (.xz), longest is four (.txz)\n+        for (int i = 3; i <= 4 && i < n; i++) {\n+            if (uncompressSuffix.containsKey(lower.substring(n - i))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Maps the given name of a xz-compressed file to the name that the\n+     * file should have after uncompression. Commonly used file type specific\n+     * suffixes like \".txz\" are automatically detected and\n+     * correctly mapped. For example the name \"package.txz\" is mapped to\n+     * \"package.tar\". And any filenames with the generic \".xz\" suffix\n+     * (or any other generic xz suffix) is mapped to a name without that\n+     * suffix. If no xz suffix is detected, then the filename is returned\n+     * unmapped.\n+     *\n+     * @param filename name of a file\n+     * @return name of the corresponding uncompressed file\n+     */\n+    public static String getUncompressedFilename(String filename) {\n+        String lower = filename.toLowerCase(Locale.ENGLISH);\n+        int n = lower.length();\n+        // Shortest suffix is three letters (.xz), longest is four (.txz)\n+        for (int i = 3; i <= 4 && i < n; i++) {\n+            Object suffix = uncompressSuffix.get(lower.substring(n - i));\n+            if (suffix != null) {\n+                return filename.substring(0, n - i) + suffix;\n+            }\n+        }\n+        return filename;\n+    }\n+\n+    /**\n+     * Maps the given filename to the name that the file should have after\n+     * compression with xz. Common file types with custom suffixes for\n+     * compressed versions are automatically detected and correctly mapped.\n+     * For example the name \"package.tar\" is mapped to \"package.txz\". If no\n+     * custom mapping is applicable, then the default \".xz\" suffix is appended\n+     * to the filename.\n+     *\n+     * @param filename name of a file\n+     * @return name of the corresponding compressed file\n+     */\n+    public static String getCompressedFilename(String filename) {\n+        String lower = filename.toLowerCase(Locale.ENGLISH);\n+        int n = lower.length();\n+        // Shortest suffix is three letters (.xz), longest is four (.txz)\n+        for (int i = 3; i <= 4 && i < n; i++) {\n+            Object suffix = compressSuffix.get(lower.substring(n - i));\n+            if (suffix != null) {\n+                return filename.substring(0, n - i) + suffix;\n+            }\n+        }\n+        // No custom suffix found, just append the default .gz\n+        return filename + \".xz\";\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/XZUtilsTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors;\n+\n+import org.apache.commons.compress.compressors.xz.XZUtils;\n+\n+import junit.framework.TestCase;\n+\n+public class XZUtilsTestCase extends TestCase {\n+\n+    public void testIsCompressedFilename() {\n+        assertFalse(XZUtils.isCompressedFilename(\"\"));\n+        assertFalse(XZUtils.isCompressedFilename(\".xz\"));\n+\n+        assertTrue(XZUtils.isCompressedFilename(\"x.txz\"));\n+        assertTrue(XZUtils.isCompressedFilename(\"x.xz\"));\n+        assertTrue(XZUtils.isCompressedFilename(\"x-xz\"));\n+\n+        assertFalse(XZUtils.isCompressedFilename(\"xxgz\"));\n+        assertFalse(XZUtils.isCompressedFilename(\"xzz\"));\n+        assertFalse(XZUtils.isCompressedFilename(\"xaz\"));\n+\n+        assertFalse(XZUtils.isCompressedFilename(\"x.txz \"));\n+        assertFalse(XZUtils.isCompressedFilename(\"x.txz\\n\"));\n+        assertFalse(XZUtils.isCompressedFilename(\"x.txz.y\"));\n+    }\n+\n+    public void testGetUncompressedFilename() {\n+        assertEquals(\"\", XZUtils.getUncompressedFilename(\"\"));\n+        assertEquals(\".xz\", XZUtils.getUncompressedFilename(\".xz\"));\n+\n+        assertEquals(\"x.tar\", XZUtils.getUncompressedFilename(\"x.txz\"));\n+        assertEquals(\"x\", XZUtils.getUncompressedFilename(\"x.xz\"));\n+        assertEquals(\"x\", XZUtils.getUncompressedFilename(\"x-xz\"));\n+\n+        assertEquals(\"x.txz \", XZUtils.getUncompressedFilename(\"x.txz \"));\n+        assertEquals(\"x.txz\\n\", XZUtils.getUncompressedFilename(\"x.txz\\n\"));\n+        assertEquals(\"x.txz.y\", XZUtils.getUncompressedFilename(\"x.txz.y\"));\n+    }\n+\n+    public void testGetCompressedFilename() {\n+        assertEquals(\".xz\", XZUtils.getCompressedFilename(\"\"));\n+        assertEquals(\"x.xz\", XZUtils.getCompressedFilename(\"x\"));\n+\n+        assertEquals(\"x.txz\", XZUtils.getCompressedFilename(\"x.tar\"));\n+\n+        assertEquals(\"x.wmf .xz\", XZUtils.getCompressedFilename(\"x.wmf \"));\n+        assertEquals(\"x.wmf\\n.xz\", XZUtils.getCompressedFilename(\"x.wmf\\n\"));\n+        assertEquals(\"x.wmf.y.xz\", XZUtils.getCompressedFilename(\"x.wmf.y\"));\n+    }\n+\n+}", "timestamp": 1320300386, "metainfo": ""}