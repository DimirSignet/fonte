{"sha": "c1fd317a5ef11678af9d13b8d55bab1148aaf276", "log": "Add a bunch of since markers  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n      * This method is not implemented and won't ever be.\n      * The JVM equivalent has a different name {@link java.util.jar.JarEntry#getAttributes()}\n      *\n-     * @deprecated Do not use; always returns null\n+     * @deprecated since 1.5, do not use; always returns null\n      * @return Always returns null.\n      */\n     @Deprecated\n      *\n      * @return Always returns null in the current implementation\n      *\n-     * @deprecated Not currently implemented\n+     * @deprecated since 1.5, not currently implemented\n      */\n     @Deprecated\n     public Certificate[] getCertificates() {\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n \n     /**\n      * Construct an entry with a name and a link flag.\n-     *\n+s     *\n      * @param name the entry name\n      * @param linkFlag the entry link flag.\n      * @param preserveLeadingSlashes whether to allow leading slashes\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n \n     /**\n      * Offset of the checksum field within header record.\n+     * @since 1.5\n      */\n     int    CHKSUM_OFFSET = 148;\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n      * feature.\n      *\n      * @param reason the feature that is not supported\n+     * @since 1.5\n      */\n     public UnsupportedZipFeatureException(Feature reason) {\n         super(\"unsupported feature \" + reason +  \" used in archive.\");\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestamp.java\n  * Flags         Byte        info bits (refers to local header!)\n  * (ModTime)     Long        time of last modification (UTC/GMT)\n  * </pre>\n+ * @since 1.5\n  */\n public class X5455_ExtendedTimestamp implements ZipExtraField, Cloneable, Serializable {\n     private static final ZipShort HEADER_ID = new ZipShort(0x5455);\n         return hc;\n     }\n \n-}\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java\n  * GIDSize       1 byte      Size of GID field\n  * GID           Variable    GID for this entry (little endian)\n  * </pre>\n+ * @since 1.5\n  */\n public class X7875_NewUnix implements ZipExtraField, Cloneable, Serializable {\n     private static final ZipShort HEADER_ID = new ZipShort(0x7875);\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n      * in which case the entry's content contains the target path\n      * for the symlink.\n      *\n+     * @since 1.5\n      * @return true if the entry represents a unix symlink, false otherwise.\n      */\n     public boolean isUnixSymlink() {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n      * @param entry ZipArchiveEntry object that represents the symbolic link\n      * @return entry's content as a String\n      * @throws IOException problem with content's input stream\n+     * @since 1.5\n      */\n     public String getUnixSymlink(ZipArchiveEntry entry) throws IOException {\n         if (entry != null && entry.isUnixSymlink()) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n      *\n      * @return the reversed array (mutated in-place, but also returned for\n      *        convenience).\n+     * @since 1.5\n      */\n     public static byte[] reverse(final byte[] array) {\n         final int z = array.length - 1; // position of last element\n      *\n      * @param b byte to convert to int\n      * @return int representation of the provided byte\n+     * @since 1.5\n      */\n     public static int signedByteToUnsignedInt(byte b) {\n         if (b >= 0) {\n      * @param i integer to convert to byte\n      * @return byte representation of the provided int\n      * @throws IllegalArgumentException if the provided integer is not inside the range [0,255].\n+     * @since 1.5\n      */\n     public static byte unsignedIntToSignedByte(int i) {\n         if (i > 255 || i < 0) {\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java\n      * @throws IOException\n      *             if an read/write error occurs\n      * @return the results of this operation\n+     * @since 1.5\n      */\n     public ChangeSetResults perform(ZipFile in, ArchiveOutputStream out)\n             throws IOException {\n--- a/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n      * @return the requested byte array\n      * @throws NullPointerException if the input is null\n      * @throws IOException if an I/O error occurs\n+     * @since 1.5\n      */\n     public static byte[] toByteArray(final InputStream input) throws IOException {\n         final ByteArrayOutputStream output = new ByteArrayOutputStream();", "timestamp": 1362933436, "metainfo": ""}