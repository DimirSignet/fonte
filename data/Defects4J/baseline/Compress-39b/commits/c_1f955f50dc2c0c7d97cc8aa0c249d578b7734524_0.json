{"sha": "1f955f50dc2c0c7d97cc8aa0c249d578b7734524", "log": "Add tests of read and write  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/IOMethodsTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \n+ */\n+\n+package org.apache.commons.compress;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.ArchiveInputStream;\n+import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.archivers.ar.ArArchiveEntry;\n+import org.apache.commons.compress.archivers.cpio.CpioArchiveEntry;\n+import org.apache.commons.compress.archivers.jar.JarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+\n+/**\n+ * Check that the different write methods create the same output.\n+ * TODO perform the same checks for reads.\n+ */\n+public class IOMethodsTest extends AbstractTestCase {\n+\n+    private static final int bytesToTest = 50;\n+    private static final byte[] byteTest = new byte[bytesToTest];\n+    static {\n+        for(int i=0; i < byteTest.length ;) {\n+            byteTest[i]=(byte) i;\n+            byteTest[i+1]=(byte) -i;\n+            i += 2;\n+        }\n+    }\n+    \n+    public void testWriteAr() throws Exception {\n+        ArchiveEntry entry = new ArArchiveEntry(\"dummy\", bytesToTest);\n+        compareWrites(\"ar\", entry);\n+    }\n+    public void testWriteCpio() throws Exception {\n+        ArchiveEntry entry = new CpioArchiveEntry(\"dummy\", bytesToTest);\n+        compareWrites(\"cpio\", entry);\n+    }\n+    public void testWriteJar() throws Exception {\n+        ArchiveEntry entry = new JarArchiveEntry(\"dummy\");\n+        compareWrites(\"jar\", entry);\n+    }\n+    public void testWriteTar() throws Exception {\n+        TarArchiveEntry entry = new TarArchiveEntry(\"dummy\");\n+        entry.setSize(bytesToTest);\n+        compareWrites(\"tar\", entry);\n+    }\n+    public void testWriteZip() throws Exception {\n+        ArchiveEntry entry = new ZipArchiveEntry(\"dummy\");\n+        compareWrites(\"zip\", entry);\n+    }\n+\n+    public void testReadAr() throws Exception {\n+        compareReads(\"ar\");\n+    }\n+\n+    public void testReadCpio() throws Exception {\n+        compareReads(\"cpio\");\n+    }\n+\n+    public void testReadJar() throws Exception {\n+        compareReads(\"jar\");\n+    }\n+\n+    public void testReadTar() throws Exception {\n+        compareReads(\"tar\");\n+    }\n+\n+    public void testReadZip() throws Exception {\n+        compareReads(\"zip\");\n+    }\n+\n+    private void compareWrites(String archiverName, ArchiveEntry entry) throws Exception {\n+        OutputStream out1 = new ByteArrayOutputStream();\n+        OutputStream out2 = new ByteArrayOutputStream();\n+        OutputStream out3 = new ByteArrayOutputStream();\n+        ArchiveOutputStream aos1 = factory.createArchiveOutputStream(archiverName, out1);\n+        aos1.putArchiveEntry(entry);\n+        ArchiveOutputStream aos2 = factory.createArchiveOutputStream(archiverName, out2);\n+        aos2.putArchiveEntry(entry);\n+        ArchiveOutputStream aos3 = factory.createArchiveOutputStream(archiverName, out3);\n+        aos3.putArchiveEntry(entry);\n+        for (int i=0; i<byteTest.length; i++){\n+            aos1.write(byteTest[i]);            \n+        }\n+        aos1.close();\n+        aos2.write(byteTest);\n+        aos2.close();\n+        aos3.write(byteTest, 0, byteTest.length);\n+        aos3.close();\n+        assertEquals(\"out1!=out2\",out1.toString(),out2.toString());\n+        assertEquals(\"out1!=out3\",out1.toString(),out3.toString());\n+    }\n+    private void compareReads(String archiverName) throws Exception {\n+        OutputStream out1 = new ByteArrayOutputStream();\n+        OutputStream out2 = new ByteArrayOutputStream();\n+        OutputStream out3 = new ByteArrayOutputStream();\n+        File file = createSingleEntryArchive(archiverName);\n+        \n+        InputStream is1 = new FileInputStream(file);\n+        ArchiveInputStream ais1 = factory.createArchiveInputStream(archiverName, is1);\n+        final ArchiveEntry nextEntry = ais1.getNextEntry();\n+        assertNotNull(nextEntry);\n+        final long size = nextEntry.getSize();\n+        assertTrue(\"Size > 0: \"+size, size > 0);\n+        byte [] buff = new byte[(int)size];\n+        \n+        InputStream is2 = new FileInputStream(file);\n+        ArchiveInputStream ais2 = factory.createArchiveInputStream(archiverName, is2);\n+        final ArchiveEntry nextEntry2 = ais2.getNextEntry();\n+        assertNotNull(nextEntry2);\n+        assertEquals(\"Expected same entry size\", size, nextEntry2.getSize());\n+\n+        InputStream is3 = new FileInputStream(file);\n+        ArchiveInputStream ais3 = factory.createArchiveInputStream(archiverName, is3);\n+        final ArchiveEntry nextEntry3 = ais3.getNextEntry();\n+        assertNotNull(nextEntry3);\n+        assertEquals(\"Expected same entry size\", size, nextEntry3.getSize());\n+\n+        int b;\n+        while((b=ais1.read()) != -1){\n+            out1.write(b);\n+        }\n+        ais1.close();\n+\n+        while(ais2.read(buff)>0){\n+            out2.write(buff);\n+        }\n+        ais2.close();\n+        \n+        while(ais3.read(buff, 0 , buff.length)>0){\n+            out3.write(buff);\n+        }\n+        ais3.close();\n+\n+        assertEquals(\"out1!=out2\",out1.toString(),out2.toString());\n+        assertEquals(\"out1!=out3\",out1.toString(),out3.toString());\n+    }\n+}", "timestamp": 1238461439, "metainfo": ""}