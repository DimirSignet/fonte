{"sha": "af2da2e151a8c76e217bc239616174cafbb702ec", "log": "COMPRESS-345 add support for GNU sparse files using PAX dialects", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n import java.io.IOException;\n import java.util.Date;\n import java.util.Locale;\n+import java.util.Map;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipEncoding;\n     /** The entry's real size in case of a sparse file. */\n     private long realSize;\n \n+    /** is this entry a GNU sparse entry using one of the PAX formats? */\n+    private boolean paxGNUSparse;\n+\n     /** The entry's file reference */\n     private final File file;\n \n     }\n \n     /**\n-     * Indicates in case of a sparse file if an extension sparse header\n-     * follows.\n-     *\n-     * @return true if an extension sparse header follows.\n+     * Indicates in case of an oldgnu sparse file if an extension\n+     * sparse header follows.\n+     *\n+     * @return true if an extension oldgnu sparse header follows.\n      */\n     public boolean isExtended() {\n         return isExtended;\n     }\n \n     /**\n-     * Indicate if this entry is a GNU sparse block\n+     * Indicate if this entry is a GNU sparse block.\n      *\n      * @return true if this is a sparse extension provided by GNU tar\n      */\n     public boolean isGNUSparse() {\n+        return isOldGNUSparse() || isPaxGNUSparse();\n+    }\n+\n+    /**\n+     * Indicate if this entry is a GNU sparse block using the oldgnu format.\n+     *\n+     * @return true if this is a sparse extension provided by GNU tar\n+     * @since 1.11\n+     */\n+    public boolean isOldGNUSparse() {\n         return linkFlag == LF_GNUTYPE_SPARSE;\n+    }\n+\n+    /**\n+     * Indicate if this entry is a GNU sparse block using one of the\n+     * PAX formats.\n+     *\n+     * @return true if this is a sparse extension provided by GNU tar\n+     * @since 1.11\n+     */\n+    public boolean isPaxGNUSparse() {\n+        return paxGNUSparse;\n     }\n \n     /**\n      */\n     public boolean isFIFO() {\n         return linkFlag == LF_FIFO;\n+    }\n+\n+    /**\n+     * Check whether this is a sparse entry.\n+     *\n+     * @since 1.11\n+     */\n+    public boolean isSparse() {\n+        return isGNUSparse();\n     }\n \n     /**\n         }\n         return 0;\n     }\n+\n+    void fillGNUSparse0xData(Map<String, String> headers) {\n+        paxGNUSparse = true;\n+        realSize = Integer.parseInt(headers.get(\"GNU.sparse.size\"));\n+        if (headers.containsKey(\"GNU.sparse.name\")) {\n+            // version 0.1\n+            name = headers.get(\"GNU.sparse.name\");\n+        }\n+    }\n+\n+    void fillGNUSparse1xData(Map<String, String> headers) {\n+        paxGNUSparse = true;\n+        realSize = Integer.parseInt(headers.get(\"GNU.sparse.realsize\"));\n+        name = headers.get(\"GNU.sparse.name\");\n+    }\n }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n             paxHeaders();\n         }\n \n-        if (currEntry.isGNUSparse()){ // Process sparse files\n-            readGNUSparse();\n+        if (currEntry.isOldGNUSparse()){ // Process sparse files\n+            readOldGNUSparse();\n         }\n \n         // If the size of the next element in the archive has changed\n         applyPaxHeadersToCurrentEntry(headers);\n     }\n \n+    // NOTE, using a Map here makes it impossible to ever support GNU\n+    // sparse files using the PAX Format 0.0, see\n+    // https://www.gnu.org/software/tar/manual/html_section/tar_92.html#SEC188\n     Map<String, String> parsePaxHeaders(InputStream i) throws IOException {\n         Map<String, String> headers = new HashMap<String, String>();\n         // Format is \"length keyword=value\\n\";\n          * size\n          * uid,uname\n          * SCHILY.devminor, SCHILY.devmajor: don't have setters/getters for those\n+         *\n+         * GNU sparse files use additional members, we use\n+         * GNU.sparse.size to detect the 0.0 and 0.1 versions and\n+         * GNU.sparse.realsize for 1.0.\n          */\n         for (Entry<String, String> ent : headers.entrySet()){\n             String key = ent.getKey();\n                 currEntry.setDevMinor(Integer.parseInt(val));\n             } else if (\"SCHILY.devmajor\".equals(key)){\n                 currEntry.setDevMajor(Integer.parseInt(val));\n+            } else if (\"GNU.sparse.size\".equals(key)) {\n+                currEntry.fillGNUSparse0xData(headers);\n+            } else if (\"GNU.sparse.realsize\".equals(key)) {\n+                currEntry.fillGNUSparse1xData(headers);\n             }\n         }\n     }\n      *\n      * @todo Sparse files get not yet really processed.\n      */\n-    private void readGNUSparse() throws IOException {\n+    private void readOldGNUSparse() throws IOException {\n         /* we do not really process sparse files yet\n         sparses = new ArrayList();\n         sparses.addAll(currEntry.getSparses());\n     public boolean canReadEntryData(ArchiveEntry ae) {\n         if (ae instanceof TarArchiveEntry) {\n             TarArchiveEntry te = (TarArchiveEntry) ae;\n-            return !te.isGNUSparse();\n+            return !te.isSparse();\n         }\n         return false;\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java\n             tin = new TarArchiveInputStream(new FileInputStream(file));\n             TarArchiveEntry ae = tin.getNextTarEntry();\n             assertEquals(\"sparsefile\", ae.getName());\n+            assertTrue(ae.isOldGNUSparse());\n             assertTrue(ae.isGNUSparse());\n+            assertFalse(ae.isPaxGNUSparse());\n             assertFalse(tin.canReadEntryData(ae));\n         } finally {\n             if (tin != null) {\n             }\n         }\n     }\n+\n+    @Test\n+    public void testPaxGNU() throws Throwable {\n+        File file = getFile(\"pax_gnu_sparse.tar\");\n+        TarArchiveInputStream tin = null;\n+        try {\n+            tin = new TarArchiveInputStream(new FileInputStream(file));\n+            assertPaxGNUEntry(tin, \"0.0\");\n+            assertPaxGNUEntry(tin, \"0.1\");\n+            assertPaxGNUEntry(tin, \"1.0\");\n+        } finally {\n+            if (tin != null) {\n+                tin.close();\n+            }\n+        }\n+    }\n+\n+    private void assertPaxGNUEntry(TarArchiveInputStream tin, String suffix) throws Throwable {\n+        TarArchiveEntry ae = tin.getNextTarEntry();\n+        assertEquals(\"sparsefile-\" + suffix, ae.getName());\n+        assertTrue(ae.isGNUSparse());\n+        assertTrue(ae.isPaxGNUSparse());\n+        assertFalse(ae.isOldGNUSparse());\n+        assertFalse(tin.canReadEntryData(ae));\n+    }\n }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarLister.java\n             }\n             System.out.print(ae.getLinkName());\n         }\n+        if (ae.isSparse()) {\n+            System.out.print(\" (sparse)\");\n+        }\n         System.out.println();\n     }\n             ", "timestamp": 1458754173, "metainfo": ""}