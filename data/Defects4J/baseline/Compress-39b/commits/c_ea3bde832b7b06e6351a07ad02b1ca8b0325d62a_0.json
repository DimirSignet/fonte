{"sha": "ea3bde832b7b06e6351a07ad02b1ca8b0325d62a", "log": "Count bytes read from ZCompressorInputStream.    ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n         }\n     }\n \n-    public int read() throws IOException {\n-        byte[] b = new byte[1];\n-        int ret;\n-        while ((ret = read(b)) == 0) {\n-        }\n-        if (ret < 0) {\n-            return ret;\n-        }\n-        return 0xff & b[0];\n-    }\n-    \n-    public int read(byte[] b, int off, int len) throws IOException {\n-        int bytesRead = 0;\n-        int remainingInStack = outputStack.length - outputStackLocation;\n-        if (remainingInStack > 0) {\n-            int maxLength = Math.min(remainingInStack, len);\n-            System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);\n-            outputStackLocation += maxLength;\n-            off += maxLength;\n-            len -= maxLength;\n-            bytesRead += maxLength;\n-        }\n-        while (len > 0) {\n-            int result = decompressNextSymbol();\n-            if (result < 0) {\n-                return (bytesRead > 0) ? bytesRead : result;\n-            }\n-            remainingInStack = outputStack.length - outputStackLocation;\n-            if (remainingInStack > 0) {\n-                int maxLength = Math.min(remainingInStack, len);\n-                System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);\n-                outputStackLocation += maxLength;\n-                off += maxLength;\n-                len -= maxLength;\n-                bytesRead += maxLength;\n-            }\n-        }\n-        return bytesRead;\n-    }\n-    \n     private int decompressNextSymbol() throws IOException {\n         //\n         //                   table entry    table entry\n             return outputStackLocation;\n         }\n     }\n+    \n+    public int read() throws IOException {\n+        byte[] b = new byte[1];\n+        int ret;\n+        while ((ret = read(b)) == 0) {\n+        }\n+        if (ret < 0) {\n+            return ret;\n+        }\n+        return 0xff & b[0];\n+    }\n+    \n+    public int read(byte[] b, int off, int len) throws IOException {\n+        int bytesRead = 0;\n+        int remainingInStack = outputStack.length - outputStackLocation;\n+        if (remainingInStack > 0) {\n+            int maxLength = Math.min(remainingInStack, len);\n+            System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);\n+            outputStackLocation += maxLength;\n+            off += maxLength;\n+            len -= maxLength;\n+            bytesRead += maxLength;\n+        }\n+        while (len > 0) {\n+            int result = decompressNextSymbol();\n+            if (result < 0) {\n+                if (bytesRead > 0) {\n+                    count(bytesRead);\n+                    return bytesRead;\n+                } else {\n+                    return result;\n+                }\n+            }\n+            remainingInStack = outputStack.length - outputStackLocation;\n+            if (remainingInStack > 0) {\n+                int maxLength = Math.min(remainingInStack, len);\n+                System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);\n+                outputStackLocation += maxLength;\n+                off += maxLength;\n+                len -= maxLength;\n+                bytesRead += maxLength;\n+            }\n+        }\n+        count(bytesRead);\n+        return bytesRead;\n+    }\n }", "timestamp": 1386355273, "metainfo": ""}