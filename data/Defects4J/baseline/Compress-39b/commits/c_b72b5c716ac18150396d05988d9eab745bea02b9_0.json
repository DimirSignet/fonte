{"sha": "b72b5c716ac18150396d05988d9eab745bea02b9", "log": "COMPRESS-316 detect DEFLATE streams with ZLIB header, submitted by Nick Burch  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n                 return new ZCompressorInputStream(in);\n             }\n \n+            if (DeflateCompressorInputStream.matches(signature, signatureLength)) {\n+                return new DeflateCompressorInputStream(in);\n+            }\n+\n             if (XZUtils.matches(signature, signatureLength) &&\n                 XZUtils.isXZCompressionAvailable()) {\n                 return new XZCompressorInputStream(in, decompressConcatenated);\n--- a/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java\n  * @since 1.9\n  */\n public class DeflateCompressorInputStream extends CompressorInputStream {\n+    private static final int MAGIC_1 = 0x78;\n+    private static final int MAGIC_2a = 0x01;\n+    private static final int MAGIC_2b = 0x5e;\n+    private static final int MAGIC_2c = 0x9c;\n+    private static final int MAGIC_2d = 0xda;\n+    \n     private final InputStream in;\n \n     /**\n     public void close() throws IOException {\n         in.close();\n     }\n+    \n+    /**\n+     * Checks if the signature matches what is expected for a zlib / deflated file\n+     *  with the zlib header.\n+     * \n+     * @param signature\n+     *            the bytes to check\n+     * @param length\n+     *            the number of bytes to check\n+     * @return true, if this stream is zlib / deflate compressed with a header\n+     * stream, false otherwise\n+     * \n+     * @since 1.9\n+     */\n+    public static boolean matches(byte[] signature, int length) {\n+        return length > 3 && signature[0] == MAGIC_1 && (\n+                signature[1] == (byte) MAGIC_2a ||\n+                signature[1] == (byte) MAGIC_2b ||\n+                signature[1] == (byte) MAGIC_2c ||\n+                signature[1] == (byte) MAGIC_2d);\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n import org.apache.commons.compress.compressors.CompressorInputStream;\n import org.apache.commons.compress.compressors.CompressorStreamFactory;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n+import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;\n import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;\n         assertNotNull(xz);\n         assertTrue(xz instanceof XZCompressorInputStream);\n \n+        CompressorInputStream zlib = getStreamFor(\"bla.tar.deflatez\");\n+        assertNotNull(zlib);\n+        assertTrue(zlib instanceof DeflateCompressorInputStream);\n+\n         try {\n             factory.createCompressorInputStream(new ByteArrayInputStream(new byte[0]));\n             fail(\"No exception thrown for an empty input stream\");", "timestamp": 1432393543, "metainfo": ""}