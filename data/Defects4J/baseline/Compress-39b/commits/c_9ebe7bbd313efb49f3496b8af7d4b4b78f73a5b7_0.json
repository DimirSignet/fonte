{"sha": "9ebe7bbd313efb49f3496b8af7d4b4b78f73a5b7", "log": "committed local change by accident  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java\n     \n     public UnshrinkingInputStream(InputStream inputStream) throws IOException {\n         super(inputStream, ByteOrder.LITTLE_ENDIAN);\n-        setClearCode(DEFAULT_CODE_SIZE);\n+        setClearCode(codeSize);\n         initializeTables(MAX_CODE_SIZE);\n-        isUsed = new boolean[getPrefixesLength()];\n+        isUsed = new boolean[prefixes.length];\n         for (int i = 0; i < (1 << 8); i++) {\n             isUsed[i] = true;\n         }\n-        setTableSize(getClearCode() + 1);\n+        tableSize = clearCode + 1;\n     }\n \n     @Override\n     protected int addEntry(int previousCode, byte character) throws IOException {\n-        int tableSize = getTableSize();\n         while ((tableSize < MAX_TABLE_SIZE) && isUsed[tableSize]) {\n             tableSize++;\n         }\n-        setTableSize(tableSize);\n         int idx = addEntry(previousCode, character, MAX_TABLE_SIZE);\n         if (idx >= 0) {\n             isUsed[idx] = true;\n     private void partialClear() {\n         final boolean[] isParent = new boolean[MAX_TABLE_SIZE];\n         for (int i = 0; i < isUsed.length; i++) {\n-            if (isUsed[i] && getPrefix(i) != UNUSED_PREFIX) {\n-                isParent[getPrefix(i)] = true;\n+            if (isUsed[i] && prefixes[i] != -1) {\n+                isParent[prefixes[i]] = true;\n             }\n         }\n-        for (int i = getClearCode() + 1; i < isParent.length; i++) {\n+        for (int i = clearCode + 1; i < isParent.length; i++) {\n             if (!isParent[i]) {\n                 isUsed[i] = false;\n-                setPrefix(i, UNUSED_PREFIX);\n+                prefixes[i] = -1;\n             }\n         }\n     }\n         final int code = readNextCode();\n         if (code < 0) {\n             return -1;\n-        } else if (code == getClearCode()) {\n+        } else if (code == clearCode) {\n             final int subCode = readNextCode();\n             if (subCode < 0) {\n                 throw new IOException(\"Unexpected EOF;\");\n             } else if (subCode == 1) {\n-                if (getCodeSize() < MAX_CODE_SIZE) {\n-                    incrementCodeSize();\n+                if (codeSize < MAX_CODE_SIZE) {\n+                    codeSize++;\n                 } else {\n                     throw new IOException(\"Attempt to increase code size beyond maximum\");\n                 }\n             } else if (subCode == 2) {\n                 partialClear();\n-                setTableSize(getClearCode() + 1);\n+                tableSize = clearCode + 1;\n             } else {\n                 throw new IOException(\"Invalid clear code subcode \" + subCode);\n             }\n--- a/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n  * @since 1.10\n  */\n public abstract class LZWInputStream extends CompressorInputStream {\n-    protected static final int DEFAULT_CODE_SIZE = 9;\n-    protected static final int UNUSED_PREFIX = -1;\n-\n     private final byte[] oneByte = new byte[1];\n \n     protected final BitInputStream in;\n-    private int clearCode = -1;\n-    private int codeSize = DEFAULT_CODE_SIZE;\n-    private byte previousCodeFirstChar;\n-    private int previousCode = UNUSED_PREFIX;\n-    private int tableSize;\n-    private int[] prefixes;\n-    private byte[] characters;\n+    protected int clearCode = -1;\n+    protected int codeSize = 9;\n+    protected byte previousCodeFirstChar;\n+    protected int previousCode = -1;\n+    protected int tableSize = 0;\n+    protected int[] prefixes;\n+    protected byte[] characters;\n     private byte[] outputStack;\n     private int outputStackLocation;\n \n         }\n         return 0;\n     }\n-\n-    protected int getCodeSize() {\n-        return codeSize;\n-    }\n-\n-    protected void resetCodeSize() {\n-        this.codeSize = DEFAULT_CODE_SIZE;\n-    }\n-\n-    protected void incrementCodeSize() {\n-        codeSize++;\n-    }\n-\n-    protected int getPreviousCode() {\n-        return previousCode;\n-    }\n-\n-    protected byte getPreviousCodeFirstChar() {\n-        return previousCodeFirstChar;\n-    }\n-\n-    protected void resetPreviousCode() {\n-        this.previousCode = -1;\n-    }\n-\n-    protected int getPrefix(int offset) {\n-        return prefixes[offset];\n-    }\n-\n-    protected void setPrefix(int offset, int value) {\n-        prefixes[offset] = value;\n-    }\n-\n-    protected int getPrefixesLength() {\n-        return prefixes.length;\n-    }\n-\n-    protected int getClearCode() {\n-        return clearCode;\n-    }\n-\n-    protected int getTableSize() {\n-        return tableSize;\n-    }\n-\n-    protected void setTableSize(int newSize) {\n-        tableSize = newSize;\n-    }\n-\n-    protected void setCharacter(int offset, byte value) {\n-        characters[offset] = value;\n-    }\n-\n-    protected byte getCharacter(int offset) {\n-        return characters[offset];\n-    }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n         blockMode = (thirdByte & BLOCK_MODE_MASK) != 0;\n         maxCodeSize = thirdByte & MAX_CODE_SIZE_MASK;\n         if (blockMode) {\n-            setClearCode(DEFAULT_CODE_SIZE);\n+            setClearCode(codeSize);\n         }\n         initializeTables(maxCodeSize);\n         clearEntries();\n     }\n     \n     private void clearEntries() {\n-        setTableSize((1 << 8) + (blockMode ? 1 : 0));\n+        tableSize = 1 << 8;\n+        if (blockMode) {\n+            tableSize++;\n+        }\n     }\n \n     /**\n      */\n     @Override\n     protected int addEntry(int previousCode, byte character) throws IOException {\n-        final int maxTableSize = 1 << getCodeSize();\n+        final int maxTableSize = 1 << codeSize;\n         int r = addEntry(previousCode, character, maxTableSize);\n-        if (getTableSize() == maxTableSize && getCodeSize() < maxCodeSize) {\n+        if (tableSize == maxTableSize && codeSize < maxCodeSize) {\n             reAlignReading();\n-            incrementCodeSize();\n+            codeSize++;\n         }\n         return r;\n     }\n         final int code = readNextCode();\n         if (code < 0) {\n             return -1;\n-        } else if (blockMode && code == getClearCode()) {\n+        } else if (blockMode && code == clearCode) {\n             clearEntries();\n             reAlignReading();\n-            resetCodeSize();\n-            resetPreviousCode();\n+            codeSize = 9;\n+            previousCode = -1;\n             return 0;\n         } else {\n             boolean addedUnfinishedEntry = false;\n-            if (code == getTableSize()) {\n+            if (code == tableSize) {\n                 addRepeatOfPreviousCode();\n                 addedUnfinishedEntry = true;\n-            } else if (code > getTableSize()) {\n-                throw new IOException(String.format(\"Invalid %d bit code 0x%x\", getCodeSize(), code));\n+            } else if (code > tableSize) {\n+                throw new IOException(String.format(\"Invalid %d bit code 0x%x\", codeSize, code));\n             }\n             return expandCodeToOutputStack(code, addedUnfinishedEntry);\n         }", "timestamp": 1437452040, "metainfo": ""}