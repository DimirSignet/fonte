{"sha": "8a942e0d97363cbe094cd4b9a083bc9815ca02db", "log": "Cleaned up close semantics further. Increased copy buffer size somewhat  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.Callable;\n  */\n public class ParallelScatterZipCreator {\n     private List<ScatterZipOutputStream> streams = synchronizedList(new ArrayList<ScatterZipOutputStream>());\n-    private List<ScatterGatherBackingStore> backingStores = synchronizedList(new ArrayList<ScatterGatherBackingStore>());\n     private final ExecutorService es;\n     private final ScatterGatherBackingStoreSupplier supplier;\n \n     private ScatterZipOutputStream createDeferred(ScatterGatherBackingStoreSupplier scatterGatherBackingStoreSupplier)\n             throws IOException {\n         ScatterGatherBackingStore bs = scatterGatherBackingStoreSupplier.get();\n-        backingStores.add( bs);\n         StreamCompressor sc = StreamCompressor.create(Deflater.DEFAULT_COMPRESSION, bs);\n         return new ScatterZipOutputStream(bs, sc);\n     }\n         es.submit(new Callable<ScatterZipOutputStream>() {\n             public ScatterZipOutputStream call() throws Exception {\n                 ScatterZipOutputStream streamToUse = tlScatterStreams.get();\n-                streamToUse.addArchiveEntry(zipArchiveEntry, source.get(), method);\n+                InputStream payload = source.get();\n+                try {\n+                    streamToUse.addArchiveEntry(zipArchiveEntry, payload, method);\n+                } finally {\n+                    payload.close();\n+                }\n                 return streamToUse;\n             }\n \n         }\n \n         scatterDoneAt = System.currentTimeMillis();\n-\n-        for (ScatterGatherBackingStore backingStore : backingStores) {\n-            backingStore.close();\n-        }\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n      * Add an archive entry to this scatter stream.\n      *\n      * @param zipArchiveEntry The entry to write\n-     * @param payload         The content to write for the entry\n+     * @param payload         The content to write for the entry. The caller is responsible for closing this.\n      * @param method          The compression method\n      * @throws IOException    If writing fails\n      */\n     public void addArchiveEntry(ZipArchiveEntry zipArchiveEntry, InputStream payload, int method) throws IOException {\n         streamCompressor.deflate(payload, method);\n-        payload.close();\n         items.add(new CompressedEntry(zipArchiveEntry, streamCompressor.getCrc32(),\n                                       streamCompressor.getBytesWritten(), method,\n                                       streamCompressor.getBytesRead()));\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n \n \n \n-\n+    final byte[] copyBuffer = new byte[16384];\n \n     private void copyFromZipInputStream(InputStream src) throws IOException {\n         if (entry == null) {\n         }\n         ZipUtil.checkRequestedFeatures(entry.entry);\n         entry.hasWritten = true;\n-        byte[] tmpBuf = new byte[4096];\n         int length;\n-        while ((length = src.read( tmpBuf )) >= 0 )\n+        while ((length = src.read(copyBuffer)) >= 0 )\n         {\n-            streamCompressor.writeCounted(tmpBuf, 0, length);\n+            streamCompressor.writeCounted(copyBuffer, 0, length);\n             count( length );\n         }\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java\n         final byte[] A_PAYLOAD = \"XAAY\".getBytes();\n \n         ZipArchiveEntry zab = new ZipArchiveEntry(\"b.txt\");\n-        scatterZipOutputStream.addArchiveEntry(zab, new ByteArrayInputStream(B_PAYLOAD), ZipArchiveEntry.DEFLATED);\n+        ByteArrayInputStream payload = new ByteArrayInputStream(B_PAYLOAD);\n+        scatterZipOutputStream.addArchiveEntry(zab, payload, ZipArchiveEntry.DEFLATED);\n \n         ZipArchiveEntry zae = new ZipArchiveEntry(\"a.txt\");\n-        scatterZipOutputStream.addArchiveEntry(zae, new ByteArrayInputStream(A_PAYLOAD), ZipArchiveEntry.DEFLATED);\n+        ByteArrayInputStream payload1 = new ByteArrayInputStream(A_PAYLOAD);\n+        scatterZipOutputStream.addArchiveEntry(zae, payload1, ZipArchiveEntry.DEFLATED);\n \n         File target = File.createTempFile(\"scattertest\", \".zip\");\n         ZipArchiveOutputStream outputStream = new ZipArchiveOutputStream(target);", "timestamp": 1420286396, "metainfo": ""}