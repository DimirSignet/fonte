{"sha": "7c068db30e3eec45479733dc22fccf5202ab239e", "log": "COMPRESS-260 provide read access to GZIP metadata  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n  */\n package org.apache.commons.compress.compressors.gzip;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.EOFException;\n import java.io.InputStream;\n import java.io.DataInputStream;\n import java.io.BufferedInputStream;\n import java.util.zip.DataFormatException;\n+import java.util.zip.Deflater;\n import java.util.zip.Inflater;\n import java.util.zip.CRC32;\n \n     // used in no-arg read method\n     private final byte[] oneByte = new byte[1];\n \n+    private final GzipParameters parameters = new GzipParameters();\n+\n     /**\n      * Constructs a new input stream that decompresses gzip-compressed data\n      * from the specified input stream.\n         init(true);\n     }\n \n+    /**\n+     * Provides the stream's meta data - may change with each stream\n+     * when decompressing concatenated streams.\n+     * @return the stream's meta data\n+     * @since 1.8\n+     */\n+    public GzipParameters getMetaData() {\n+        return parameters;\n+    }\n+\n     private boolean init(boolean isFirstMember) throws IOException {\n         assert isFirstMember || decompressConcatenated;\n \n         // Parsing the rest of the header may throw EOFException.\n         DataInputStream inData = new DataInputStream(in);\n         int method = inData.readUnsignedByte();\n-        if (method != 8) {\n+        if (method != Deflater.DEFLATED) {\n             throw new IOException(\"Unsupported compression method \"\n                                   + method + \" in the .gz header\");\n         }\n                     \"Reserved flags are set in the .gz header\");\n         }\n \n-        inData.readInt(); // mtime, ignored\n-        inData.readUnsignedByte(); // extra flags, ignored\n-        inData.readUnsignedByte(); // operating system, ignored\n+        parameters.setModificationTime(readLittleEndianInt(inData) * 1000);\n+        switch (inData.readUnsignedByte()) { // extra flags\n+        case 2:\n+            parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);\n+            break;\n+        case 4:\n+            parameters.setCompressionLevel(Deflater.BEST_SPEED);\n+            break;\n+        default:\n+            // ignored for now\n+            break;\n+        }\n+        parameters.setOperatingSystem(inData.readUnsignedByte());\n \n         // Extra field, ignored\n         if ((flg & FEXTRA) != 0) {\n             }\n         }\n \n-        // Original file name, ignored\n+        // Original file name\n         if ((flg & FNAME) != 0) {\n-            readToNull(inData);\n-        }\n-\n-        // Comment, ignored\n+            parameters.setFilename(new String(readToNull(inData), \"ISO-8859-1\"));\n+        }\n+\n+        // Comment\n         if ((flg & FCOMMENT) != 0) {\n-            readToNull(inData);\n+            parameters.setComment(new String(readToNull(inData), \"ISO-8859-1\"));\n         }\n \n         // Header \"CRC16\" which is actually a truncated CRC32 (which isn't\n         return true;\n     }\n \n-    private void readToNull(DataInputStream inData) throws IOException {\n-        while (inData.readUnsignedByte() != 0x00) { // NOPMD\n-        }\n+    private byte[] readToNull(DataInputStream inData) throws IOException {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        int b = 0;\n+        while ((b = inData.readUnsignedByte()) != 0x00) { // NOPMD\n+            bos.write(b);\n+        }\n+        return bos.toByteArray();\n+    }\n+\n+    private int readLittleEndianInt(DataInputStream inData) throws IOException {\n+        return inData.readUnsignedByte()\n+            | (inData.readUnsignedByte() << 8)\n+            | (inData.readUnsignedByte() << 16)\n+            | (inData.readUnsignedByte() << 24);\n     }\n \n     @Override\n--- a/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n             // expected\n         }\n     }\n+\n+    public void testMetadataRoundTrip() throws Exception {\n+        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+                \n+        GzipParameters parameters = new GzipParameters();\n+        parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);\n+        parameters.setModificationTime(123456000);\n+        parameters.setOperatingSystem(13);\n+        parameters.setFilename(\"test3.xml\");\n+        parameters.setComment(\"Umlaute m\u00f6glich?\");\n+        GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);\n+        FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"));\n+        try {\n+            IOUtils.copy(fis, out);\n+        } finally {\n+            fis.close();\n+            out.close();\n+        }\n+        \n+        GzipCompressorInputStream input =\n+            new GzipCompressorInputStream(new ByteArrayInputStream(bout.toByteArray()));\n+        input.close();\n+        GzipParameters readParams = input.getMetaData();\n+        assertEquals(Deflater.BEST_COMPRESSION, readParams.getCompressionLevel());\n+        assertEquals(123456000, readParams.getModificationTime());\n+        assertEquals(13, readParams.getOperatingSystem());\n+        assertEquals(\"test3.xml\", readParams.getFilename());\n+        assertEquals(\"Umlaute m\u00f6glich?\", readParams.getComment());\n+    }\n }", "timestamp": 1392912203, "metainfo": ""}