{"sha": "c5f9ceb3cb7a5822012fe33ecfc2d561f63697f8", "log": "COMPRESS-272 add auto-detect for .Z  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n                 return new FramedSnappyCompressorInputStream(in);\n             }\n \n+            if (ZCompressorInputStream.matches(signature, signatureLength)) {\n+                return new ZCompressorInputStream(in);\n+            }\n+\n         } catch (IOException e) {\n             throw new CompressorException(\"Failed to detect Compressor from InputStream.\", e);\n         }\n--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n         }\n     }\n     \n+    /**\n+     * Checks if the signature matches what is expected for a Unix compress file.\n+     * \n+     * @param signature\n+     *            the bytes to check\n+     * @param length\n+     *            the number of bytes to check\n+     * @return true, if this stream is a Unix compress compressed\n+     * stream, false otherwise\n+     * \n+     * @since 1.9\n+     */\n+    public static boolean matches(byte[] signature, int length) {\n+        return length > 3 && signature[0] == MAGIC_1 && signature[1] == (byte) MAGIC_2;\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/ZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/ZTestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n+import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n         });\n     }\n \n+    public void testZUnarchiveViaAutoDetection() throws Exception {\n+        testUnarchive(new StreamWrapper<CompressorInputStream>() {\n+            public CompressorInputStream wrap(InputStream is) throws Exception {\n+                return new CompressorStreamFactory()\n+                    .createCompressorInputStream(new BufferedInputStream(is));\n+            }\n+        });\n+    }\n+\n+    public void testMatches() throws Exception {\n+        assertFalse(ZCompressorInputStream.matches(new byte[] { 1, 2, 3, 4 }, 4));\n+        assertFalse(ZCompressorInputStream.matches(new byte[] { 0x1f, 2, 3, 4 }, 4));\n+        assertFalse(ZCompressorInputStream.matches(new byte[] { 1, (byte)0x9d, 3, 4 },\n+                                                   4));\n+        assertFalse(ZCompressorInputStream.matches(new byte[] { 0x1f, (byte) 0x9d, 3, 4 },\n+                                                   3));\n+        assertTrue(ZCompressorInputStream.matches(new byte[] { 0x1f, (byte) 0x9d, 3, 4 },\n+                                                  4));\n+    }\n+\n     private void testUnarchive(StreamWrapper<CompressorInputStream> wrapper) throws Exception {\n         final File input = getFile(\"bla.tar.Z\");\n         final File output = new File(dir, \"bla.tar\");", "timestamp": 1397319413, "metainfo": ""}