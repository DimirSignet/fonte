{"sha": "3fa07b158b9e4db44198bd6eecd3af8d850769f6", "log": "allow some numeric values to be configured easily  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n             throws IOException {\n             throw new UnsupportedOperationException(\"method doesn't support writing\");\n         }\n+\n+        /**\n+         * If the option represents a number, return its integer\n+         * value, otherwise return the given default value.\n+         */\n+        protected int numberOptionOrDefault(Object options, int defaultValue) {\n+            return options instanceof Number ? ((Number) options).intValue() : defaultValue;\n+        }\n     }\n     \n     static class CopyDecoder extends CoderBase {\n     }\n     \n     static class DeflateDecoder extends CoderBase {\n+        DeflateDecoder() {\n+            super(Number.class);\n+        }\n+\n         @Override\n         InputStream decode(final InputStream in, final Coder coder, final byte[] password)\n             throws IOException {\n         }\n         @Override\n         OutputStream encode(final OutputStream out, final Object options) {\n-            return new DeflaterOutputStream(out, new Deflater(9, true));\n+            int level = numberOptionOrDefault(options, 9);\n+            return new DeflaterOutputStream(out, new Deflater(level, true));\n         }\n     }\n \n     static class BZIP2Decoder extends CoderBase {\n+        BZIP2Decoder() {\n+            super(Number.class);\n+        }\n+\n         @Override\n         InputStream decode(final InputStream in, final Coder coder, final byte[] password)\n                 throws IOException {\n             return new BZip2CompressorInputStream(in);\n         }\n         @Override\n-        OutputStream encode(final OutputStream out, final Object _)\n+        OutputStream encode(final OutputStream out, final Object options)\n                 throws IOException {\n-            return new BZip2CompressorOutputStream(out);\n+            int blockSize = numberOptionOrDefault(options, BZip2CompressorOutputStream.MAX_BLOCKSIZE);\n+            return new BZip2CompressorOutputStream(out, blockSize);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n \n class LZMA2Decoder extends Coders.CoderBase {\n     LZMA2Decoder() {\n-        super(LZMA2Options.class);\n+        super(LZMA2Options.class, Number.class);\n     }\n \n     @Override\n         if (opts instanceof LZMA2Options) {\n             return ((LZMA2Options) opts).getDictSize();\n         }\n-        return LZMA2Options.DICT_SIZE_DEFAULT;\n+        return numberOptionOrDefault(opts);\n     }\n \n     private LZMA2Options getOptions(Object opts) throws IOException {\n             return (LZMA2Options) opts;\n         }\n         LZMA2Options options = new LZMA2Options();\n-        options.setDictSize(LZMA2Options.DICT_SIZE_DEFAULT);\n+        options.setDictSize(numberOptionOrDefault(opts));\n         return options;\n     }\n+\n+    private int numberOptionOrDefault(Object opts) {\n+        return numberOptionOrDefault(opts, LZMA2Options.DICT_SIZE_DEFAULT);\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java\n                              .getOptions());\n     }\n \n+    @Test\n+    public void shouldAllowNumberForLZMA2() {\n+        Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.LZMA2, 42)\n+                             .getOptions());\n+    }\n+\n+    @Test\n+    public void shouldAllowNumberForBzip2() {\n+        Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.BZIP2, 42)\n+                             .getOptions());\n+    }\n+\n+    @Test\n+    public void shouldAllowNumberForDeflate() {\n+        Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.DEFLATE, 42)\n+                             .getOptions());\n+    }\n+\n     @Test(expected = IllegalArgumentException.class)\n     public void shouldNotAllowStringOptionsForLZMA2() {\n         new SevenZMethodConfiguration(SevenZMethod.LZMA2, \"\");", "timestamp": 1393241681, "metainfo": ""}