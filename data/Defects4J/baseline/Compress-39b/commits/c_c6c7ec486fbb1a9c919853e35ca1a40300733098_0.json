{"sha": "c6c7ec486fbb1a9c919853e35ca1a40300733098", "log": "Renamed the 'start' parameter in the read methods to 'offset' for consistency with the standard terminology  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n     }\n \n     @Override\n-    public int read(byte[] buffer, int start, int length) throws IOException {\n+    public int read(byte[] buffer, int offset, int length) throws IOException {\n         if (closed) {\n             throw new IOException(\"The stream is closed\");\n         }\n         }\n \n         // avoid int overflow, check null buffer\n-        if (start <= buffer.length && length >= 0 && start >= 0\n-            && buffer.length - start >= length) {\n+        if (offset <= buffer.length && length >= 0 && offset >= 0\n+            && buffer.length - offset >= length) {\n             ZipUtil.checkRequestedFeatures(current.entry);\n             if (!supportsDataDescriptorFor(current.entry)) {\n                 throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException\n             }\n \n             if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) {\n-                return readStored(buffer, start, length);\n+                return readStored(buffer, offset, length);\n             }\n             if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {\n                 throw new UnsupportedZipFeatureException(ZipMethod.UNSHRINKING,\n                                                          current.entry);\n             }\n-            return readDeflated(buffer, start, length);\n+            return readDeflated(buffer, offset, length);\n         }\n         throw new ArrayIndexOutOfBoundsException();\n     }\n     /**\n      * Implementation of read for STORED entries.\n      */\n-    private int readStored(byte[] buffer, int start, int length)\n+    private int readStored(byte[] buffer, int offset, int length)\n         throws IOException {\n \n         if (current.hasDataDescriptor) {\n             if (lastStoredEntry == null) {\n                 readStoredEntry();\n             }\n-            return lastStoredEntry.read(buffer, start, length);\n+            return lastStoredEntry.read(buffer, offset, length);\n         }\n \n         long csize = current.entry.getSize();\n             // if it is smaller than toRead then it fits into an int\n             toRead = (int) (csize - current.bytesRead);\n         }\n-        buf.get(buffer, start, toRead);\n+        buf.get(buffer, offset, toRead);\n         current.bytesRead += toRead;\n-        crc.update(buffer, start, toRead);\n+        crc.update(buffer, offset, toRead);\n         return toRead;\n     }\n \n     /**\n      * Implementation of read for DEFLATED entries.\n      */\n-    private int readDeflated(byte[] buffer, int start, int length)\n+    private int readDeflated(byte[] buffer, int offset, int length)\n         throws IOException {\n-        int read = readFromInflater(buffer, start, length);\n+        int read = readFromInflater(buffer, offset, length);\n         if (read <= 0) {\n             if (inf.finished()) {\n                 return -1;\n                 throw new IOException(\"Truncated ZIP file\");\n             }\n         }\n-        crc.update(buffer, start, read);\n+        crc.update(buffer, offset, read);\n         return read;\n     }\n \n      * Potentially reads more bytes to fill the inflater's buffer and\n      * reads from it.\n      */\n-    private int readFromInflater(byte[] buffer, int start, int length)\n+    private int readFromInflater(byte[] buffer, int offset, int length)\n         throws IOException {\n         int read = 0;\n         do {\n                 }\n             }\n             try {\n-                read = inf.inflate(buffer, start, length);\n+                read = inf.inflate(buffer, offset, length);\n             } catch (DataFormatException e) {\n                 throw (IOException) new ZipException(e.getMessage()).initCause(e);\n             }", "timestamp": 1387413074, "metainfo": ""}