{"sha": "df1d2a4bb0525244cfeeefe90992f2f96f88f577", "log": "COMPRESS-285 use a volatile enum rather than an AtomicInteger  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n         file.seek(folderOffset);\n         InputStream inputStreamStack = new BoundedRandomAccessFileInputStream(file,\n                 archive.packSizes[firstPackStreamIndex]);\n+        writeOut(inputStreamStack);\n+        file.seek(folderOffset);\n+        inputStreamStack = new BoundedRandomAccessFileInputStream(file,\n+                archive.packSizes[firstPackStreamIndex]);\n         LinkedList<SevenZMethodConfiguration> methods = new LinkedList<SevenZMethodConfiguration>();\n         for (final Coder coder : folder.getOrderedCoders()) {\n             if (coder.numInStreams != 1 || coder.numOutStreams != 1) {\n                     folder.getUnpackSize(), folder.crc);\n         } else {\n             return inputStreamStack;\n+        }\n+    }\n+\n+    private static void writeOut(InputStream in) throws IOException {\n+        java.io.OutputStream out = new java.io.FileOutputStream(\"raw\");\n+        try {\n+            IOUtils.copy(in, out);\n+        } finally {\n+            out.close();\n         }\n     }\n     \n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n         (byte) 0xFD, '7', 'z', 'X', 'Z', '\\0'\n     };\n \n-    private static final int DONT_CACHE = 2;\n-    private static final int CACHED_AVAILABLE = 1;\n-    private static final int CACHED_UNAVAILABLE = 0;\n+    static enum CachedAvailability {\n+        DONT_CACHE, CACHED_AVAILABLE, CACHED_UNAVAILABLE\n+    }\n \n-    private static final AtomicInteger cachedXZAvailability;\n+    private static volatile CachedAvailability cachedXZAvailability;\n \n     static {\n         Map<String, String> uncompressSuffix = new HashMap<String, String>();\n         uncompressSuffix.put(\".xz\", \"\");\n         uncompressSuffix.put(\"-xz\", \"\");\n         fileNameUtil = new FileNameUtil(uncompressSuffix, \".xz\");\n-        cachedXZAvailability = new AtomicInteger(DONT_CACHE);\n+        cachedXZAvailability = CachedAvailability.DONT_CACHE;\n         try {\n             Class.forName(\"org.osgi.framework.BundleEvent\");\n         } catch (Exception ex) {\n      * @since 1.5\n      */\n     public static boolean isXZCompressionAvailable() {\n-        final int cachedResult = cachedXZAvailability.get();\n-        if (cachedResult != DONT_CACHE) {\n-            return cachedResult == CACHED_AVAILABLE;\n+        final CachedAvailability cachedResult = cachedXZAvailability;\n+        if (cachedResult != CachedAvailability.DONT_CACHE) {\n+            return cachedResult == CachedAvailability.CACHED_AVAILABLE;\n         }\n         return internalIsXZCompressionAvailable();\n     }\n      */\n     public static void setCacheXZAvailablity(boolean doCache) {\n         if (!doCache) {\n-            cachedXZAvailability.set(DONT_CACHE);\n-        } else if (cachedXZAvailability.get() == DONT_CACHE) {\n+            cachedXZAvailability = CachedAvailability.DONT_CACHE;\n+        } else if (cachedXZAvailability == CachedAvailability.DONT_CACHE) {\n             final boolean hasXz = internalIsXZCompressionAvailable();\n-            cachedXZAvailability.set(hasXz ? CACHED_AVAILABLE : CACHED_UNAVAILABLE);\n+            cachedXZAvailability = hasXz ? CachedAvailability.CACHED_AVAILABLE\n+                : CachedAvailability.CACHED_UNAVAILABLE;\n         }\n     }\n \n     // only exists to support unit tests\n-    static int getCachedXZAvailability() {\n-        return cachedXZAvailability.get();\n+    static CachedAvailability getCachedXZAvailability() {\n+        return cachedXZAvailability;\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java\n     }\n \n     public void testCachingIsEnabledByDefaultAndXZIsPresent() {\n-        assertEquals(1, XZUtils.getCachedXZAvailability());\n+        assertEquals(XZUtils.CachedAvailability.CACHED_AVAILABLE, XZUtils.getCachedXZAvailability());\n         assertTrue(XZUtils.isXZCompressionAvailable());\n     }\n \n     public void testCanTurnOffCaching() {\n         try {\n             XZUtils.setCacheXZAvailablity(false);\n-            assertEquals(2, XZUtils.getCachedXZAvailability());\n+            assertEquals(XZUtils.CachedAvailability.DONT_CACHE, XZUtils.getCachedXZAvailability());\n             assertTrue(XZUtils.isXZCompressionAvailable());\n         } finally {\n             XZUtils.setCacheXZAvailablity(true);\n     public void testTurningOnCachingReEvaluatesAvailability() {\n         try {\n             XZUtils.setCacheXZAvailablity(false);\n-            assertEquals(2, XZUtils.getCachedXZAvailability());\n+            assertEquals(XZUtils.CachedAvailability.DONT_CACHE, XZUtils.getCachedXZAvailability());\n             XZUtils.setCacheXZAvailablity(true);\n-            assertEquals(1, XZUtils.getCachedXZAvailability());\n+            assertEquals(XZUtils.CachedAvailability.CACHED_AVAILABLE, XZUtils.getCachedXZAvailability());\n         } finally {\n             XZUtils.setCacheXZAvailablity(true);\n         }", "timestamp": 1408361303, "metainfo": ""}