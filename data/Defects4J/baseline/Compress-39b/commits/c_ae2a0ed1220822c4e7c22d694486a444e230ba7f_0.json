{"sha": "ae2a0ed1220822c4e7c22d694486a444e230ba7f", "log": "record Deflate support  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n  * The 7z file format is a flexible container\n  * that can contain many compression and\n  * encryption types, but at the moment only\n- * only Copy, LZMA, LZMA2, BZIP2, and AES-256 + SHA-256\n+ * only Copy, LZMA, LZMA2, BZIP2, Deflate and AES-256 + SHA-256\n  * are supported.\n  * <p>\n  * The format is very Windows/Intel specific,\n             nextHeaderInputStream.close();\n         }\n         return new DataInputStream(new ByteArrayInputStream(nextHeader));\n-\n-        \n-        //throw new IOException(\"LZMA compression unsupported, so files with compressed header cannot be read\");\n-        // FIXME: this extracts the header to an LZMA file which can then be\n-        // manually decompressed.\n-//        long offset = SIGNATURE_HEADER_SIZE + archive.packPos;\n-//        file.seek(offset);\n-//        long unpackSize = archive.folders[0].getUnpackSize();\n-//        byte[] packed = new byte[(int)archive.packSizes[0]];\n-//        file.readFully(packed);\n-//        \n-//        FileOutputStream fos = new FileOutputStream(new File(\"/tmp/encodedHeader.7z\"));\n-//        fos.write(archive.folders[0].coders[0].properties);\n-//        // size - assuming < 256\n-//        fos.write((int)(unpackSize & 0xff));\n-//        fos.write(0);\n-//        fos.write(0);\n-//        fos.write(0);\n-//        fos.write(0);\n-//        fos.write(0);\n-//        fos.write(0);\n-//        fos.write(0);\n-//        fos.write(packed);\n-//        fos.close();\n     }\n     \n     private void readStreamsInfo(final DataInput header, final Archive archive) throws IOException {", "timestamp": 1380950751, "metainfo": ""}