{"sha": "a103f8aac368abed3f3e40733886a3833bb7e1a1", "log": "some formatting changes and a stray semicolon  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n      */\n     private static final byte[] LZERO = {0, 0, 0, 0};\n \n+    private static final byte[] ONE = ZipLong.getBytes(1L);\n+\n     /**\n      * Holds the offsets of the LFH starts for each entry.\n      */\n     private boolean hasUsedZip64 = false;\n \n     private Zip64Mode zip64Mode = Zip64Mode.AsNeeded;\n+\n+    private final byte[] copyBuffer = new byte[32768];\n+    private final Calendar calendarInstance = Calendar.getInstance();\n \n     /**\n      * Creates a new ZIP OutputStream filtering the underlying stream.\n         closeEntry(actuallyNeedsZip64, phased);\n     }\n \n-\n     private void closeEntry(boolean actuallyNeedsZip64, boolean phased) throws IOException {\n         if (!phased && raf != null) {\n             rewriteSizesAndCrc(actuallyNeedsZip64);\n     private boolean isTooLageForZip32(ZipArchiveEntry zipArchiveEntry){\n         return zipArchiveEntry.getSize() >= ZIP64_MAGIC || zipArchiveEntry.getCompressedSize() >= ZIP64_MAGIC;\n     }\n+\n     /**\n      * When using random access output, write the local file header\n      * and potentiall the ZIP64 extra containing the correct CRC and\n     private void writeCounted(byte[] data) throws IOException {\n         streamCompressor.writeCounted(data);\n     }\n-\n-\n-\n-    final byte[] copyBuffer = new byte[32768];\n \n     private void copyFromZipInputStream(InputStream src) throws IOException {\n         if (entry == null) {\n \n         handleZip64Extra(ze, lfhOffset, needsZip64Extra);\n \n-       return createCentralFileHeader(ze, getName(ze), lfhOffset, needsZip64Extra);\n-    };\n-\n-    private final Calendar calendarInstance = Calendar.getInstance();\n+        return createCentralFileHeader(ze, getName(ze), lfhOffset, needsZip64Extra);\n+    }\n \n     /**\n      * Writes the central file header entry.\n         writeCounted(ZipShort.getBytes(dataLen));\n         streamCompressor.writeCounted(data.array(), data.arrayOffset(), dataLen);\n     }\n-\n-    private static final byte[] ONE = ZipLong.getBytes(1L);\n \n     /**\n      * Writes the &quot;ZIP64 End of central dir record&quot; and", "timestamp": 1421771046, "metainfo": ""}