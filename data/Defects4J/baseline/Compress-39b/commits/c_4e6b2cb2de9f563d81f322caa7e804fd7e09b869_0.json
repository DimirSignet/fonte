{"sha": "4e6b2cb2de9f563d81f322caa7e804fd7e09b869", "log": "Made site build on jdk8. Fixed stricter javadoc requirements  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java\n  * <p>The exact type and interpretation of options depends on the\n  * method being configured.  Currently supported are:</p>\n  *\n- * <table>\n+ * <table summary=\"Options\">\n  * <tr><th>Method</th><th>Option Type</th><th>Description</th></tr>\n  * <tr><td>BZIP2</td><td>Number</td><td>Block Size - an number between 1 and 9</td></tr>\n  * <tr><td>DEFLATE</td><td>Number</td><td>Compression Level - an number between 1 and 9</td></tr>\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n \n /**\n  * Creates a zip in parallel by using multiple threadlocal #ScatterZipOutputStream instances.\n- * <p/>\n+ * <p>\n  * Note that this class generally makes no guarantees about the order of things written to\n  * the output file. Things that need to come in a specific order (manifests, directories)\n  * must be handled by the client of this class, usually by writing these things to the\n- * #ZipArchiveOutputStream *before* calling #writeTo on this class.\n+ * #ZipArchiveOutputStream *before* calling #writeTo on this class.</p>\n  */\n public class ParallelScatterZipCreator {\n     private List<ScatterZipOutputStream> streams = Collections.synchronizedList(new ArrayList<ScatterZipOutputStream>());\n \n     /**\n      * Adds an archive entry to this archive.\n-     * <p/>\n+     * <p>\n      * This method is expected to be called from a single client thread\n+     * </p>\n      *\n      * @param zipArchiveEntry The entry to add. Compression method\n      * @param source          The source input stream supplier\n \n     /**\n      * Write the contents this to the target #ZipArchiveOutputStream.\n-     * <p/>\n+     * <p>\n      * It may be beneficial to write things like directories and manifest files to the targetStream\n      * before calling this method.\n+     * </p>\n      *\n      * @param targetStream The ZipArchiveOutputStream to receive the contents of the scatter streams\n      * @throws IOException          If writing fails\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n \n /**\n  * A zip output stream that is optimized for multi-threaded scatter/gather construction of zip files.\n- * <p/>\n+ * <p>\n  * The internal data format of the entries used by this class are entirely private to this class\n  * and are not part of any public api whatsoever.\n- * <p/>\n- * It is possible to extend this class to support different kinds of backing storage, the default\n+ * </p>\n+ * <p>It is possible to extend this class to support different kinds of backing storage, the default\n  * implementation only supports file-based backing.\n- * <p/>\n+ * </p>\n  * Thread safety: This class supports multiple threads. But the \"writeTo\" method must be called\n  * by the thread that originally created the ZipArchiveEntry.\n  *\n--- a/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java\n      * from the specified input stream.\n      *\n      * @param       inputStream where to read the compressed data\n-     * @param       compressor parameters\n+     * @param       parameters parameters\n      */\n     public DeflateCompressorInputStream(InputStream inputStream,\n                                         DeflateParameters parameters) {", "timestamp": 1420237292, "metainfo": ""}