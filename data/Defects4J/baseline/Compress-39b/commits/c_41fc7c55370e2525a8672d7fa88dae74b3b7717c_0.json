{"sha": "41fc7c55370e2525a8672d7fa88dae74b3b7717c", "log": "Add Counting(In|Out)putStreams  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n \n import java.io.EOFException;\n-import java.io.FilterInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n \n import java.util.PriorityQueue;\n import java.util.Queue;\n import java.util.Stack;\n-\n \n /**\n  * The DumpArchiveInputStream reads a UNIX dump archive as an InputStream.\n      * @throws ArchiveException\n      */\n     public DumpArchiveInputStream(InputStream is) throws ArchiveException {\n-        this.raw = new TapeInputStream(new CountingStream(is));\n+        this.raw = new TapeInputStream(is);\n         this.hasHitEOF = false;\n \n         try {\n                         return p.getOriginalName().compareTo(q.getOriginalName());\n                     }\n                 });\n+    }\n+\n+    @Deprecated\n+    @Override\n+    public int getCount() {\n+        return (int) getBytesRead();\n+    }\n+\n+    @Override\n+    public long getBytesRead() {\n+        return raw.getBytesRead();\n     }\n \n     /**\n             24);\n     }\n \n-    private class CountingStream extends FilterInputStream {\n-        private CountingStream(final InputStream in) {\n-            super(in);\n-        }\n-        @Override\n-        public int read() throws IOException {\n-            int r = in.read();\n-            if (r >= 0) {\n-                count(1);\n-            }\n-            return r;\n-        }\n-        @Override\n-        public int read(byte[] b) throws IOException {\n-            return read(b, 0, b.length);\n-        }\n-        @Override\n-        public int read(byte[] b, int off, int len) throws IOException {\n-            int r = in.read(b, off, len);\n-            if (r >= 0) {\n-                count(r);\n-            }\n-            return r;\n-        }\n-    }\n }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/utils/CountingInputStream.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.utils;\n+\n+import java.io.FilterInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Stream that tracks the number of bytes read.\n+ * @since Apache Commons Compress 1.3\n+ * @ThreadSafe\n+ */\n+public class CountingInputStream extends FilterInputStream {\n+    private final AtomicLong bytesRead = new AtomicLong();\n+\n+    private CountingInputStream(final InputStream in) {\n+        super(in);\n+    }\n+\n+    @Override\n+    public int read() throws IOException {\n+        int r = in.read();\n+        if (r >= 0) {\n+            count(1);\n+        }\n+        return r;\n+    }\n+    @Override\n+    public int read(byte[] b) throws IOException {\n+        return read(b, 0, b.length);\n+    }\n+    @Override\n+    public int read(byte[] b, int off, int len) throws IOException {\n+        int r = in.read(b, off, len);\n+        if (r >= 0) {\n+            count(r);\n+        }\n+        return r;\n+    }\n+    /**\n+     * Increments the counter of already read bytes.\n+     * Doesn't increment if the EOF has been hit (read == -1)\n+     * \n+     * @param read the number of bytes read\n+     */\n+    protected final void count(long read) {\n+        if (read != -1) {\n+            bytesRead.addAndGet(read);\n+        }\n+    }\n+    \n+    /**\n+     * Returns the current number of bytes read from this stream.\n+     * @return the number of read bytes\n+     */\n+    public long getBytesRead() {\n+        return bytesRead.longValue();\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/utils/CountingOutputStream.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.utils;\n+\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Stream that tracks the number of bytes read.\n+ * @since Apache Commons Compress 1.3\n+ * @ThreadSafe\n+ */\n+public class CountingOutputStream extends FilterOutputStream {\n+    private final AtomicLong bytesWritten = new AtomicLong();\n+\n+    private CountingOutputStream(final OutputStream out) {\n+        super(out);\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+        out.write(b);\n+        count(1);\n+    }\n+    @Override\n+    public void write(byte[] b) throws IOException {\n+        write(b, 0, b.length);\n+    }\n+    @Override\n+    public void write(byte[] b, int off, int len) throws IOException {\n+        out.write(b, off, len);\n+        count(len);\n+    }\n+\n+    /**\n+     * Increments the counter of already written bytes.\n+     * Doesn't increment if the EOF has been hit (written == -1)\n+     * \n+     * @param written the number of bytes written\n+     */\n+    protected void count(long written) {\n+        if (written != -1) {\n+            bytesWritten.addAndGet(written);\n+        }\n+    }\n+    \n+    /**\n+     * Returns the current number of bytes written to this stream.\n+     * @return the number of written bytes\n+     */\n+    public long getBytesWritten() {\n+        return bytesWritten.longValue();\n+    }\n+}", "timestamp": 1319370539, "metainfo": ""}