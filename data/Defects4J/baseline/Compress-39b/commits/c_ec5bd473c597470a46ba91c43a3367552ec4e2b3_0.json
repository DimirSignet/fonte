{"sha": "ec5bd473c597470a46ba91c43a3367552ec4e2b3", "log": "reduce duplication in read method  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/AbstractLZWInputStream.java\n     \n     @Override\n     public int read(byte[] b, int off, int len) throws IOException {\n-        int bytesRead = 0;\n-        int remainingInStack = outputStack.length - outputStackLocation;\n-        if (remainingInStack > 0) {\n-            int maxLength = Math.min(remainingInStack, len);\n-            System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);\n-            outputStackLocation += maxLength;\n-            off += maxLength;\n-            len -= maxLength;\n-            bytesRead += maxLength;\n-        }\n-        while (len > 0) {\n+        int bytesRead = readFromStack(b, off, len);\n+        while (len - bytesRead > 0) {\n             int result = decompressNextSymbol();\n             if (result < 0) {\n                 if (bytesRead > 0) {\n                     count(bytesRead);\n                     return bytesRead;\n-                } else {\n-                    return result;\n                 }\n+                return result;\n             }\n-            remainingInStack = outputStack.length - outputStackLocation;\n-            if (remainingInStack > 0) {\n-                int maxLength = Math.min(remainingInStack, len);\n-                System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);\n-                outputStackLocation += maxLength;\n-                off += maxLength;\n-                len -= maxLength;\n-                bytesRead += maxLength;\n-            }\n+            bytesRead += readFromStack(b, off + bytesRead, len - bytesRead);\n         }\n         count(bytesRead);\n         return bytesRead;\n         previousCode = code;\n         return outputStackLocation;\n     }\n+\n+    private int readFromStack(byte[] b, int off, int len) {\n+        int remainingInStack = outputStack.length - outputStackLocation;\n+        if (remainingInStack > 0) {\n+            int maxLength = Math.min(remainingInStack, len);\n+            System.arraycopy(outputStack, outputStackLocation, b, off, maxLength);\n+            outputStackLocation += maxLength;\n+            return maxLength;\n+        }\n+        return 0;\n+    }\n }", "timestamp": 1387124628, "metainfo": ""}