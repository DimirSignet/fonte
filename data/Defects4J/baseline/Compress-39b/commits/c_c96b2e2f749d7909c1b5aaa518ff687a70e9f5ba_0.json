{"sha": "c96b2e2f749d7909c1b5aaa518ff687a70e9f5ba", "log": "COMPRESS-188 improve exception method for unsupported compression methods in zips.  Submitted by Harald Kuhn  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n     }\n \n     /**\n+     * Creates an exception for archives that use an unsupported\n+     * compression algorithm.\n+     * @param method the method that is not supported\n+     * @param entry the entry using the feature\n+     * @since 1.5\n+     */\n+    public UnsupportedZipFeatureException(ZipMethod method,\n+                                          ZipArchiveEntry entry) {\n+        super(\"unsupported feature method '\" + method.name()\n+              +  \"' used in entry \" + entry.getName());\n+        this.reason = Feature.METHOD;\n+        this.entry = entry;\n+    }\n+\n+    /**\n      * The unsupported feature that has been used.\n      */\n     public Feature getFeature() {\n             return name;\n         }\n     }\n-}\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+\n+/**\n+ * List of known compression methods \n+ * \n+ * Many of these methods are currently not supported by commons compress\n+ * \n+ * @since 1.5\n+ */\n+public enum ZipMethod {\n+\n+    /**\n+     * Compression method 0 for uncompressed entries.\n+     * \n+     * @see ZipEntry#STORED\n+     */\n+    STORED(ZipEntry.STORED),\n+\n+    /**\n+     * UnShrinking.\n+     * dynamic Lempel-Ziv-Welch-Algorithm\n+     * \n+     * @see http://www.pkware.com/documents/casestudies/APPNOTE.TXT J.\n+     * Explanation of fields: compression method: (2 bytes)\n+     */\n+    UNSHRINKING(1),\n+\n+    /**\n+     * Reduced with compression factor 1.\n+     * \n+     * @see http://www.pkware.com/documents/casestudies/APPNOTE.TXT J.\n+     * Explanation of fields: compression method: (2 bytes)\n+     */\n+    EXPANDING_LEVEL_1(2),\n+\n+    /**\n+     * Reduced with compression factor 2.\n+     * \n+     * @see http://www.pkware.com/documents/casestudies/APPNOTE.TXT J.\n+     * Explanation of fields: compression method: (2 bytes)\n+     */\n+    EXPANDING_LEVEL_2(3),\n+\n+    /**\n+     * Reduced with compression factor 3.\n+     * \n+     * @see http://www.pkware.com/documents/casestudies/APPNOTE.TXT J.\n+     * Explanation of fields: compression method: (2 bytes)\n+     */\n+    EXPANDING_LEVEL_3(4),\n+\n+    /**\n+     * Reduced with compression factor 4.\n+     * \n+     * @see http://www.pkware.com/documents/casestudies/APPNOTE.TXT J.\n+     * Explanation of fields: compression method: (2 bytes)\n+     */\n+    EXPANDING_LEVEL_4(5),\n+\n+    /**\n+     * Imploding.\n+     * \n+     * @see http://www.pkware.com/documents/casestudies/APPNOTE.TXT J.\n+     * Explanation of fields: compression method: (2 bytes)\n+     */\n+    IMPLODING(6),\n+\n+    /**\n+     * Tokenization.\n+     * \n+     * @see http://www.pkware.com/documents/casestudies/APPNOTE.TXT J.\n+     * Explanation of fields: compression method: (2 bytes)\n+     */\n+    TOKENIZATION(7),\n+\n+    /**\n+     * Compression method 8 for compressed (deflated) entries.\n+     * \n+     * @see ZipEntry#DEFLATED\n+     */\n+    DEFLATED(ZipEntry.DEFLATED),\n+\n+    /**\n+     * Compression Method 9 for enhanced deflate.\n+     * \n+     * @see http://www.winzip.com/wz54.htm\n+     */\n+    ENHANCED_DEFLATED(9),\n+\n+    /**\n+     * PKWARE Data Compression Library Imploding.\n+     * \n+     * @see http://www.winzip.com/wz54.htm\n+     */\n+    PKWARE_IMPLODING(10),\n+\n+    /**\n+     * Compression Method 12 for bzip2.\n+     * \n+     * @see http://www.winzip.com/wz54.htm\n+     */\n+    BZIP2(12),\n+\n+    /**\n+     * Compression Method 14 for LZMA.\n+     * \n+     * @see http://www.7-zip.org/sdk.html\n+     * @see http://www.winzip.com/wz54.htm\n+     */\n+    LZMA(14),\n+\n+\n+    /**\n+     * Compression Method 96 for Jpeg compression.\n+     * \n+     * @see http://www.winzip.com/wz54.htm\n+     */\n+    JPEG(96),\n+\n+    /**\n+     * Compression Method 97 for WavPack.\n+     * \n+     * @see http://www.winzip.com/wz54.htm\n+     */\n+    WAVPACK(97),\n+\n+    /**\n+     * Compression Method 98 for PPMd.\n+     * \n+     * @see http://www.winzip.com/wz54.htm\n+     */\n+    PPMD(98),\n+\n+\n+    /**\n+     * Compression Method 99 for AES encryption.\n+     * \n+     * @see http://www.winzip.com/wz54.htm\n+     */\n+    AES_ENCRYPTED(99),\n+\n+    /**\n+     * Unknown compression method.\n+     */\n+    UNKNOWN(-1);\n+\n+    private final int code;\n+\n+    private static final Map<Integer, ZipMethod> codeToEnum =\n+        new HashMap<Integer, ZipMethod>();\n+\n+    static {\n+        for (ZipMethod method : values()) {\n+            codeToEnum.put(Integer.valueOf(method.getCode()), method);\n+        }\n+    }\n+\n+    /**\n+     * private constructor for enum style class.\n+     */\n+    ZipMethod(int code) {\n+        this.code = code;\n+    }\n+\n+    /**\n+     * the code of the compression method.\n+     * \n+     * @see ZipArchiveEntry#getMethod()\n+     * \n+     * @return an integer code for the method\n+     */\n+    public int getCode() {\n+        return code;\n+    }\n+\n+\n+    /**\n+     * returns the {@link ZipMethod} for the given code or null if the\n+     * method is not known.\n+     */\n+    public static ZipMethod getMethodByCode(int code) {\n+        return codeToEnum.get(Integer.valueOf(code));\n+    }\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n                                                    .Feature.ENCRYPTION, ze);\n         }\n         if (!supportsMethodOf(ze)) {\n-            throw\n-                new UnsupportedZipFeatureException(UnsupportedZipFeatureException\n-                                                   .Feature.METHOD, ze);\n-        }\n-    }\n-}\n+            ZipMethod m = ZipMethod.getMethodByCode(ze.getMethod());\n+            if (m == null) {\n+                throw\n+                    new UnsupportedZipFeatureException(UnsupportedZipFeatureException\n+                                                       .Feature.METHOD, ze);\n+            } else {\n+                throw new UnsupportedZipFeatureException(m, ze);\n+            }\n+        }\n+    }\n+}", "timestamp": 1341773706, "metainfo": ""}