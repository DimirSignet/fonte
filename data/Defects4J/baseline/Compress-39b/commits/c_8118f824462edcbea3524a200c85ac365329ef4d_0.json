{"sha": "8118f824462edcbea3524a200c85ac365329ef4d", "log": "Split magic into magic and version Improve match() method so it works for Posix and GNU  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n  * The C structure for a Tar Entry's header is:\n  * <pre>\n  * struct header {\n- * char name[100];     // TarConstants.NAMELEN\n- * char mode[8];       // TarConstants.MODELEN\n- * char uid[8];        // TarConstants.UIDLEN\n- * char gid[8];        // TarConstants.GIDLEN\n- * char size[12];      // TarConstants.SIZELEN\n- * char mtime[12];     // TarConstants.MODTIMELEN\n- * char chksum[8];     // TarConstants.CHKSUMLEN\n- * char linkflag[1];\n- * char linkname[100]; // TarConstants.NAMELEN\n+ * char name[100];     // TarConstants.NAMELEN    - offset   0\n+ * char mode[8];       // TarConstants.MODELEN    - offset 100\n+ * char uid[8];        // TarConstants.UIDLEN     - offset 108\n+ * char gid[8];        // TarConstants.GIDLEN     - offset 116\n+ * char size[12];      // TarConstants.SIZELEN    - offset 124\n+ * char mtime[12];     // TarConstants.MODTIMELEN - offset 136\n+ * char chksum[8];     // TarConstants.CHKSUMLEN  - offset 148\n+ * char linkflag[1];   //                         - offset 156\n+ * char linkname[100]; // TarConstants.NAMELEN    - offset 157\n  * The following fields are only present in new-style POSIX tar archives:\n- * char magic[8];      // TarConstants.MAGICLEN\n- * TODO: Posix/GNU split this into magic[6] and char version[2];\n- * char uname[32];     // TarConstants.UNAMELEN\n- * char gname[32];     // TarConstants.GNAMELEN\n- * char devmajor[8];   // TarConstants.DEVLEN\n- * char devminor[8];   // TarConstants.DEVLEN\n- * char prefix[155];   // Used if \"name\" field is not long enough to hold the path\n- * char pad[12];       // NULs\n+ * char magic[6];      // TarConstants.MAGICLEN   - offset 257\n+ * char version[2];    // TarConstants.VERSIONLEN - offset 263\n+ * char uname[32];     // TarConstants.UNAMELEN   - offset 265\n+ * char gname[32];     // TarConstants.GNAMELEN   - offset 297\n+ * char devmajor[8];   // TarConstants.DEVLEN     - offset 329\n+ * char devminor[8];   // TarConstants.DEVLEN     - offset 337\n+ * char prefix[155];   // TarConstants.PREFIXLEN  - offset 345\n+ * // Used if \"name\" field is not long enough to hold the path\n+ * char pad[12];       // NULs                    - offset 500\n  * } header;\n  * All unused bytes are set to null.\n  * New-style GNU tar files are slightly different from the above.\n \n     /** The entry's magic tag. */\n     private String magic;\n+    /** The version of the format */\n+    private String version;\n \n     /** The entry's user name. */\n     private String userName;\n      */\n     private TarArchiveEntry () {\n         this.magic = MAGIC_POSIX;\n+        this.version = VERSION_POSIX;\n         this.name = \"\";\n         this.linkName = \"\";\n \n         outbuf[offset++] = linkFlag;\n         offset = TarUtils.formatNameBytes(linkName, outbuf, offset, NAMELEN);\n         offset = TarUtils.formatNameBytes(magic, outbuf, offset, MAGICLEN);\n+        offset = TarUtils.formatNameBytes(version, outbuf, offset, VERSIONLEN);\n         offset = TarUtils.formatNameBytes(userName, outbuf, offset, UNAMELEN);\n         offset = TarUtils.formatNameBytes(groupName, outbuf, offset, GNAMELEN);\n         offset = TarUtils.formatOctalBytes(devMajor, outbuf, offset, DEVLEN);\n         offset += NAMELEN;\n         magic = TarUtils.parseName(header, offset, MAGICLEN);\n         offset += MAGICLEN;\n+        version = TarUtils.parseName(header, offset, VERSIONLEN);\n+        offset += VERSIONLEN;\n         userName = TarUtils.parseName(header, offset, UNAMELEN);\n         offset += UNAMELEN;\n         groupName = TarUtils.parseName(header, offset, GNAMELEN);\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n import java.io.OutputStream;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n+import org.apache.commons.compress.utils.ArchiveUtils;\n \n /**\n  * The TarInputStream reads a UNIX tar archive as an InputStream.\n     // ArchiveInputStream\n \n     public static boolean matches(byte[] signature, int length) {\n-        // 6574 7473 2e31 6d78 == \"test1.xml\"\n-        // TODO replace with a proper test if possible - see COMPRESS-65\n-\n-        if (length < 8) {\n+        if (length < TarConstants.VERSION_OFFSET+TarConstants.VERSIONLEN) {\n             return false;\n         }\n \n-        if (signature[0] != 0x74) {\n-            return false;\n-        }\n-        if (signature[1] != 0x65) {\n-            return false;\n-        }\n-        if (signature[2] != 0x73) {\n-            return false;\n-        }\n-        if (signature[3] != 0x74) {\n-            return false;\n-        }\n-        if (signature[4] != 0x31) {\n-            return false;\n-        }\n-        if (signature[5] != 0x2e) {\n-            return false;\n-        }\n-        if (signature[6] != 0x78) {\n-            return false;\n-        }\n-        if (signature[7] != 0x6d) {\n-            return false;\n-        }\n-\n-        return true;\n+        if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_POSIX, \n+                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n+            &&\n+            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_POSIX, \n+                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n+                ){\n+            return true;\n+        }\n+        if (ArchiveUtils.matchAsciiBuffer(TarConstants.MAGIC_GNU, \n+                signature, TarConstants.MAGIC_OFFSET, TarConstants.MAGICLEN)\n+            &&\n+            (\n+             ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_SPACE, \n+                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n+            ||\n+            ArchiveUtils.matchAsciiBuffer(TarConstants.VERSION_GNU_ZERO, \n+                signature, TarConstants.VERSION_OFFSET, TarConstants.VERSIONLEN)\n+            )\n+                ){\n+            return true;\n+        }\n+        return false;\n     }\n \n }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarConstants.java\n      */\n     long   MAXSIZE = 077777777777L;\n \n+    /** Offset of start of magic field within header record */\n+    int    MAGIC_OFFSET = 257;\n     /**\n      * The length of the magic field in a header buffer.\n      */\n-    int    MAGICLEN = 8; // TODO split this into MAGICLEN=6 and VERSIONLEN=2\n+    int    MAGICLEN = 6;\n+\n+    /** Offset of start of magic field within header record */\n+    int    VERSION_OFFSET = 263;\n+    /**\n+     * Previously this was regarded as part of \"magic\" field, but it is separate.\n+     */\n+    int    VERSIONLEN = 2;\n \n     /**\n      * The length of the modification time field in a header buffer.\n      * The length of each of the device fields (major and minor) in a header buffer.\n      */\n     int    DEVLEN = 8;\n+\n+    /**\n+     * Length of the prefix field.\n+     * \n+     */\n+    int    PREFIXLEN = 155;\n \n     /**\n      * LF_ constants represent the \"link flag\" of an entry, or more commonly,\n     /**\n      * The magic tag representing a POSIX tar archive.\n      */\n-    String MAGIC_POSIX = \"ustar\"; // TODO this should be NUL-terminated\n+    String MAGIC_POSIX = \"ustar\\0\";\n+    String VERSION_POSIX = \"00\";\n \n     /**\n      * The magic tag representing a GNU tar archive.\n      */\n-    String MAGIC_GNU = \"ustar  \"; // TODO this should have single space terminator\n+    String MAGIC_GNU = \"ustar \";\n+    // Appear to be two possible GNU versions\n+    String VERSION_GNU_SPACE = \" \\0\";\n+    String VERSION_GNU_ZERO  = \"0\\0\";\n \n     /**\n      * The name of the GNU tar entry which contains a long name.", "timestamp": 1238715288, "metainfo": ""}