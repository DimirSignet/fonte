{"sha": "40f2e6380094ebfdc73e4adaf4059b80e1327aad", "log": "workaround for tar implementations that insert a NUL byte into header fields.  COMPRESS-181  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n \n     /**\n      * Parse an octal string from a buffer.\n-     * Leading spaces are ignored.\n+     *\n+     * <p>Leading spaces are ignored.\n      * The buffer must contain a trailing space or NUL,\n-     * and may contain an additional trailing space or NUL.\n-     *\n-     * The input buffer is allowed to contain all NULs,\n+     * and may contain an additional trailing space or NUL.</p>\n+     *\n+     * <p>The input buffer is allowed to contain all NULs,\n      * in which case the method returns 0L\n-     * (this allows for missing fields).\n+     * (this allows for missing fields).</p>\n+     *\n+     * <p>To work-around some tar implementations that insert a\n+     * leading NUL this method returns 0 if it detects a leading NUL\n+     * since Commons Compress 1.4.</p>\n      *\n      * @param buffer The buffer from which to parse.\n      * @param offset The offset into the buffer from which to parse.\n             throw new IllegalArgumentException(\"Length \"+length+\" must be at least 2\");\n         }\n \n-        boolean allNUL = true;\n-        for (int i = start; i < end; i++){\n-            if (buffer[i] != 0){\n-                allNUL = false;\n-                break;\n-            }\n-        }\n-        if (allNUL) {\n+        if (buffer[start] == 0) {\n             return 0L;\n         }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n \n package org.apache.commons.compress.archivers.tar;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n import java.io.StringReader;\n+import java.net.URI;\n+import java.net.URL;\n+import java.util.Date;\n import java.util.Map;\n import org.junit.Test;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n public class TarArchiveInputStreamTest {\n \n         assertEquals(1, headers.size());\n         assertEquals(\"line1\\nline2\\nand3\", headers.get(\"comment\"));\n     }\n+\n+    @Test\n+    public void workaroundForBrokenTimeHeader() throws Exception {\n+        URL tar = getClass().getResource(\"/simple-aix-native-tar.tar\");\n+        TarArchiveInputStream in = null;\n+        try {\n+            in = new TarArchiveInputStream(new FileInputStream(new File(new URI(tar.toString()))));\n+            TarArchiveEntry tae = in.getNextTarEntry();\n+            tae = in.getNextTarEntry();\n+            assertEquals(\"sample/link-to-txt-file.lnk\", tae.getName());\n+            assertEquals(new Date(0), tae.getLastModifiedDate());\n+            assertTrue(tae.isSymbolicLink());\n+        } finally {\n+            if (in != null) {\n+                in.close();\n+            }\n+        }\n+    }        \n+\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n         try {\n             TarUtils.parseOctal(buffer,0, buffer.length);\n             fail(\"Expected IllegalArgumentException - should be at least 2 bytes long\");\n-        } catch (IllegalArgumentException expected) {\n-        }\n-        buffer=new byte[]{0,0,' '}; // not all NULs\n-        try {\n-            TarUtils.parseOctal(buffer,0, buffer.length);\n-            fail(\"Expected IllegalArgumentException - not all NULs\");\n         } catch (IllegalArgumentException expected) {\n         }\n         buffer=new byte[]{' ',0,0,0}; // not all NULs", "timestamp": 1330718390, "metainfo": ""}