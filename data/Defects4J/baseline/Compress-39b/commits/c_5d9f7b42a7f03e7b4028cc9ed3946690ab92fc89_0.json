{"sha": "5d9f7b42a7f03e7b4028cc9ed3946690ab92fc89", "log": "fix some findbugs issues - SANDBOX-246  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n \n \t\tfinal byte[] signature = new byte[12];\n \t\tinput.mark(signature.length);\n-\t\tinput.read(signature);\n+\t\tint signatureLength = input.read(signature);\n \t\t// TODO if reset is not supported pass on the IOException or return null?\n+                // TODO, what if we failed to read 12 bytes?\n \t\tinput.reset();\n \n \t\tif(ZipArchiveInputStream.matches(signature)) {\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n         case C_ISNWK:\n             break;\n         default:\n-            new IllegalArgumentException(\"Unknown mode\");\n+            // FIXME: testCpioUnarchive fails if I change the line to\n+            //        actually throw the excpetion\n+            new IllegalArgumentException(\"Unknown mode (full mode: \"\n+                                               + mode + \", masked mode: \"\n+                                               + (mode & S_IFMT));\n         }\n \n         this.mode = mode;\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStream.java\n                 throw new IllegalArgumentException(\"Unknown header type\");\n \n         }\n-        this.entryFormat = format;\n+        synchronized (this) {\n+            this.entryFormat = format;\n+        }\n     }\n \n     /**\n      * @throws IOException if an I/O error has occurred or if a CPIO file error has\n      *                     occurred\n      */\n-    public void putNextEntry(final CpioArchiveEntry e) throws IOException {\n+    public synchronized void putNextEntry(final CpioArchiveEntry e) throws IOException {\n         ensureOpen();\n         if (this.cpioEntry != null) {\n             closeEntry(); // close previous entry\n      * @throws IOException if an I/O error has occurred or if a CPIO file error has\n      *                     occurred\n      */\n-    public void closeEntry() throws IOException {\n+    public synchronized void closeEntry() throws IOException {\n         ensureOpen();\n \n         if (this.cpioEntry.getSize() != this.written) {\n                 throw new IOException(\"CRC Error\");\n             }\n         }\n-        if (this.cpioEntry != null) {\n-            this.cpioEntry = null;\n-        }\n+        this.cpioEntry = null;\n         this.crc = 0;\n         this.written = 0;\n     }\n      * @throws IOException if an I/O exception has occurred or if a CPIO file error\n      *                     has occurred\n      */\n-    public void finish() throws IOException {\n+    public synchronized void finish() throws IOException {\n         ensureOpen();\n         // TODO: synchronize and finish\n         if (this.finished) {\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n \t}\n \n \tpublic Certificate[] getCertificates() {\n-\t\treturn certificates;\n+            if (certificates != null) {\n+                Certificate[] certs = new Certificate[certificates.length];\n+                System.arraycopy(certificates, 0, certs, 0, certs.length);\n+                return certs;\n+            }\n+            return null;\n \t}\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n         {\n             // impossible as extra data is in correct format\n             e.printStackTrace();\n-            return null;\n+            throw new RuntimeException(e);\n         }\n \n         entry.setInternalAttributes( getInternalAttributes() );", "timestamp": 1233838807, "metainfo": ""}