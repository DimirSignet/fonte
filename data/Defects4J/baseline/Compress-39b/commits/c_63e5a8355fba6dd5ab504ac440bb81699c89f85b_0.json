{"sha": "63e5a8355fba6dd5ab504ac440bb81699c89f85b", "log": "Generics  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n     private final List<ScatterZipOutputStream> streams = synchronizedList(new ArrayList<ScatterZipOutputStream>());\n     private final ExecutorService es;\n     private final ScatterGatherBackingStoreSupplier backingStoreSupplier;\n-    private final List<Future> futures = new ArrayList<Future>();\n+    private final List<Future<Object>> futures = new ArrayList<Future<Object>>();\n \n     private final long startedAt = System.currentTimeMillis();\n     private long compressionDoneAt = 0;\n             throws IOException, InterruptedException, ExecutionException {\n \n         // Make sure we catch any exceptions from parallel phase\n-        for (Future future : futures) {\n+        for (Future<?> future : futures) {\n             future.get();\n         }\n ", "timestamp": 1422819883, "metainfo": ""}