{"sha": "deeb355c2253b49f39f0be7bf16de1e119f69581", "log": "replace a few magic numbers with constants  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n \n     public void addArchiveEntry(final ZipArchiveEntry zipArchiveEntry, final InputStreamSupplier source) {\n         final int method = zipArchiveEntry.getMethod();\n-        if (method == -1) throw new IllegalArgumentException(\"Method must be set on the supplied zipArchiveEntry\");\n+        if (method == ZipMethod.UNKNOWN_CODE) {\n+            throw new IllegalArgumentException(\"Method must be set on the supplied zipArchiveEntry\");\n+        }\n         // Consider if we want to constrain the number of items that can enqueue here.\n         es.submit(new Callable<ScatterZipOutputStream>() {\n             public ScatterZipOutputStream call() throws Exception {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n \n     public static final int PLATFORM_UNIX = 3;\n     public static final int PLATFORM_FAT  = 0;\n+    public static final int CRC_UNKNOWN = -1;\n     private static final int SHORT_MASK = 0xFFFF;\n     private static final int SHORT_SHIFT = 16;\n     private static final byte[] EMPTY = new byte[0];\n      * @see <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n      *        >COMPRESS-93</a>\n      */\n-    private int method = -1;\n+    private int method = ZipMethod.UNKNOWN_CODE;\n \n     /**\n      * The {@link java.util.zip.ZipEntry#setSize} method in the base\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n \n         processZip64Extra(size, cSize);\n \n-        if (current.entry.getCompressedSize() != -1) {\n+        if (current.entry.getCompressedSize() != ZipArchiveEntry.SIZE_UNKNOWN) {\n             if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {\n                 current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));\n             } else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n             // since standard mode is unable to remove the zip 64 header.\n             ae.removeExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);\n         }\n-        boolean is2PhaseSource = ae.getCrc() != -1\n+        boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN\n                 && ae.getSize() != ArchiveEntry.SIZE_UNKNOWN\n-                && ae.getCompressedSize() != -1;\n+                && ae.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN;\n         putArchiveEntry(ae, is2PhaseSource);\n         copyFromZipInputStream(rawStream);\n         closeCopiedEntry(is2PhaseSource);\n                                        + \" STORED method when not writing to a\"\n                                        + \" file\");\n             }\n-            if (entry.entry.getCrc() == -1) {\n+            if (entry.entry.getCrc() == ZipArchiveEntry.CRC_UNKNOWN) {\n                 throw new ZipException(\"crc checksum is required for STORED\"\n                                        + \" method when not writing to a file\");\n             }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipMethod.java\n     /**\n      * Unknown compression method.\n      */\n-    UNKNOWN(-1);\n+    UNKNOWN();\n+\n+    static final int UNKNOWN_CODE = -1;\n \n     private final int code;\n \n         codeToEnum = Collections.unmodifiableMap(cte);\n     }\n \n+    private ZipMethod() {\n+        this(UNKNOWN_CODE);\n+    }\n+\n     /**\n      * private constructor for enum style class.\n      */", "timestamp": 1420826295, "metainfo": ""}