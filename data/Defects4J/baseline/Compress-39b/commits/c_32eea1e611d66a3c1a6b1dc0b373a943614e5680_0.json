{"sha": "32eea1e611d66a3c1a6b1dc0b373a943614e5680", "log": "deal with file system roots added as tar entries.  SANDBOX-284  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n     public TarArchiveEntry(String name) {\n         this();\n \n+        name = normalizeFileName(name);\n         boolean isDir = name.endsWith(\"/\");\n \n         this.devMajor = 0;\n \n         this.file = file;\n \n-        String fileName = file.getPath();\n-        String osname = System.getProperty(\"os.name\").toLowerCase(Locale.US);\n-\n-        if (osname != null) {\n-\n-            // Strip off drive letters!\n-            // REVIEW Would a better check be \"(File.separator == '\\')\"?\n-\n-            if (osname.startsWith(\"windows\")) {\n-                if (fileName.length() > 2) {\n-                    char ch1 = fileName.charAt(0);\n-                    char ch2 = fileName.charAt(1);\n-\n-                    if (ch2 == ':'\n-                        && ((ch1 >= 'a' && ch1 <= 'z')\n-                            || (ch1 >= 'A' && ch1 <= 'Z'))) {\n-                        fileName = fileName.substring(2);\n-                    }\n-                }\n-            } else if (osname.indexOf(\"netware\") > -1) {\n-                int colon = fileName.indexOf(':');\n-                if (colon != -1) {\n-                    fileName = fileName.substring(colon + 1);\n-                }\n-            }\n-        }\n-\n-        fileName = fileName.replace(File.separatorChar, '/');\n-\n-        // No absolute pathnames\n-        // Windows (and Posix?) paths can start with \"\\\\NetworkDrive\\\",\n-        // so we loop on starting /'s.\n-        while (fileName.startsWith(\"/\")) {\n-            fileName = fileName.substring(1);\n-        }\n-\n+        String fileName = normalizeFileName(file.getPath());\n         this.linkName = new StringBuffer(\"\");\n         this.name = new StringBuffer(fileName);\n \n             this.mode = DEFAULT_DIR_MODE;\n             this.linkFlag = LF_DIR;\n \n-            if (this.name.charAt(this.name.length() - 1) != '/') {\n+            int nameLength = name.length();\n+            if (nameLength == 0 || name.charAt(nameLength - 1) != '/') {\n                 this.name.append(\"/\");\n             }\n         } else {\n      * @param name This entry's new name.\n      */\n     public void setName(String name) {\n-        this.name = new StringBuffer(name);\n+        this.name = new StringBuffer(normalizeFileName(name));\n     }\n \n     /**\n         offset += DEVLEN;\n         devMinor = (int) TarUtils.parseOctal(header, offset, DEVLEN);\n     }\n+\n+    /**\n+     * Strips Windows' drive letter as well as any leading slashes,\n+     * turns path separators into forward slahes.\n+     */\n+    private static String normalizeFileName(String fileName) {\n+        String osname = System.getProperty(\"os.name\").toLowerCase(Locale.US);\n+\n+        if (osname != null) {\n+\n+            // Strip off drive letters!\n+            // REVIEW Would a better check be \"(File.separator == '\\')\"?\n+\n+            if (osname.startsWith(\"windows\")) {\n+                if (fileName.length() > 2) {\n+                    char ch1 = fileName.charAt(0);\n+                    char ch2 = fileName.charAt(1);\n+\n+                    if (ch2 == ':'\n+                        && ((ch1 >= 'a' && ch1 <= 'z')\n+                            || (ch1 >= 'A' && ch1 <= 'Z'))) {\n+                        fileName = fileName.substring(2);\n+                    }\n+                }\n+            } else if (osname.indexOf(\"netware\") > -1) {\n+                int colon = fileName.indexOf(':');\n+                if (colon != -1) {\n+                    fileName = fileName.substring(colon + 1);\n+                }\n+            }\n+        }\n+\n+        fileName = fileName.replace(File.separatorChar, '/');\n+\n+        // No absolute pathnames\n+        // Windows (and Posix?) paths can start with \"\\\\NetworkDrive\\\",\n+        // so we loop on starting /'s.\n+        while (fileName.startsWith(\"/\")) {\n+            fileName = fileName.substring(1);\n+        }\n+        return fileName;\n+    }\n }\n \n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.tar;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Locale;\n+import junit.framework.TestCase;\n+\n+public class TarArchiveEntryTest extends TestCase {\n+\n+    private static final String OS =\n+        System.getProperty(\"os.name\").toLowerCase(Locale.US);\n+    private static final String ROOT =\n+        OS.startsWith(\"windows\") || OS.startsWith(\"netware\") ? \"C:\\\\\" : \"/\";\n+\n+    /**\n+     * JIRA issue SANDBOX-284\n+     *\n+     * @see https://issues.apache.org/jira/browse/SANDBOX-284\n+     */\n+    public void testFileSystemRoot() {\n+        TarArchiveEntry t = new TarArchiveEntry(new File(ROOT));\n+        assertEquals(\"/\", t.getName());\n+    }\n+\n+    public void testTarFileWithFSRoot() throws IOException {\n+        File f = File.createTempFile(\"taetest\", \".tar\");\n+        f.deleteOnExit();\n+        TarArchiveOutputStream tout = null;\n+        TarArchiveInputStream tin = null;\n+        try {\n+            tout = new TarArchiveOutputStream(new FileOutputStream(f));\n+            TarArchiveEntry t = new TarArchiveEntry(new File(ROOT));\n+            tout.putNextEntry(t);\n+            tout.closeEntry();\n+            t = new TarArchiveEntry(new File(new File(ROOT), \"foo.txt\"));\n+            t.setSize(6);\n+            tout.putNextEntry(t);\n+            tout.write(new byte[] {'h', 'e', 'l', 'l', 'o', ' '});\n+            tout.closeEntry();\n+            t = new TarArchiveEntry(new File(new File(ROOT), \"bar.txt\")\n+                                    .getAbsolutePath());\n+            t.setSize(5);\n+            tout.putNextEntry(t);\n+            tout.write(new byte[] {'w', 'o', 'r', 'l', 'd'});\n+            tout.closeEntry();\n+            t = new TarArchiveEntry(\"dummy\");\n+            t.setName(new File(new File(ROOT), \"baz.txt\").getAbsolutePath());\n+            t.setSize(1);\n+            tout.putNextEntry(t);\n+            tout.write(new byte[] {'!'});\n+            tout.closeEntry();\n+            tout.close();\n+            tout = null;\n+\n+            tin = new TarArchiveInputStream(new FileInputStream(f));\n+            t = tin.getNextTarEntry();\n+            assertEquals(\"/\", t.getName());\n+            t = tin.getNextTarEntry();\n+            assertEquals(\"foo.txt\", t.getName());\n+            t = tin.getNextTarEntry();\n+            assertEquals(\"bar.txt\", t.getName());\n+            t = tin.getNextTarEntry();\n+            assertEquals(\"baz.txt\", t.getName());\n+        } finally {\n+            if (tin != null) {\n+                tin.close();\n+            }\n+            if (tout != null) {\n+                tout.close();\n+            }\n+        }\n+    }\n+}", "timestamp": 1237294402, "metainfo": ""}