{"sha": "f86a4986c5fce374da74664cd8542f7e059d119c", "log": "COMPRESS-286 tell LZMAInputStream the amount of data to expect  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java\n \n class AES256SHA256Decoder extends CoderBase {\n     @Override\n-    InputStream decode(final InputStream in, final Coder coder, final byte[] passwordBytes) throws IOException {\n+    InputStream decode(final InputStream in, long uncompressedLength,\n+            final Coder coder, final byte[] passwordBytes) throws IOException {\n         return new InputStream() {\n             private boolean isInitialized = false;\n             private CipherInputStream cipherInputStream = null;\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java\n     /**\n      * @return a stream that reads from in using the configured coder and password.\n      */\n-    abstract InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException;\n+    abstract InputStream decode(final InputStream in, long uncomressedLength,\n+        final Coder coder, byte[] password) throws IOException;\n \n     /**\n      * @return a stream that writes to out using the given configuration.\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n         return CODER_MAP.get(method);\n     }\n \n-    static InputStream addDecoder(final InputStream is,\n+    static InputStream addDecoder(final InputStream is, long uncompressedLength,\n             final Coder coder, final byte[] password) throws IOException {\n         CoderBase cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));\n         if (cb == null) {\n             throw new IOException(\"Unsupported compression method \" +\n                                   Arrays.toString(coder.decompressionMethodId));\n         }\n-        return cb.decode(is, coder, password);\n+        return cb.decode(is, uncompressedLength, coder, password);\n     }\n     \n     static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,\n \n     static class CopyDecoder extends CoderBase {\n         @Override\n-        InputStream decode(final InputStream in, final Coder coder,\n-                byte[] password) throws IOException {\n+        InputStream decode(final InputStream in, long uncompressedLength,\n+                final Coder coder, byte[] password) throws IOException {\n             return in; \n         }\n         @Override\n \n     static class LZMADecoder extends CoderBase {\n         @Override\n-        InputStream decode(final InputStream in, final Coder coder,\n-                byte[] password) throws IOException {\n+        InputStream decode(final InputStream in, long uncompressedLength,\n+                final Coder coder, byte[] password) throws IOException {\n             byte propsByte = coder.properties[0];\n             long dictSize = coder.properties[1];\n             for (int i = 1; i < 4; i++) {\n             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n                 throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n             }\n-            return new LZMAInputStream(in, -1, propsByte, (int) dictSize);\n+            return new LZMAInputStream(in, uncompressedLength, propsByte, (int) dictSize);\n         }\n     }\n     \n         }\n \n         @Override\n-        InputStream decode(final InputStream in, final Coder coder,\n-                byte[] password) throws IOException {\n+        InputStream decode(final InputStream in, long uncompressedLength,\n+                final Coder coder, byte[] password) throws IOException {\n             try {\n                 return opts.getInputStream(in);\n             } catch (AssertionError e) {\n         }\n \n         @Override\n-        InputStream decode(final InputStream in, final Coder coder, final byte[] password)\n+        InputStream decode(final InputStream in, long uncompressedLength,\n+                final Coder coder, final byte[] password)\n             throws IOException {\n             return new InflaterInputStream(new DummyByteAddingInputStream(in),\n                                            new Inflater(true));\n         }\n \n         @Override\n-        InputStream decode(final InputStream in, final Coder coder, final byte[] password)\n+        InputStream decode(final InputStream in, long uncompressedLength,\n+                final Coder coder, final byte[] password)\n                 throws IOException {\n             return new BZip2CompressorInputStream(in);\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java\n     }\n \n     @Override\n-    InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {\n+    InputStream decode(final InputStream in, long uncompressedLength,\n+            final Coder coder, byte[] password) throws IOException {\n         return new DeltaOptions(getOptionsFromCoder(coder)).getInputStream(in);\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Folder.java\n         return 0;\n     }\n \n+    long getUnpackSizeForCoder(Coder coder) {\n+        if (coders != null) {\n+            for (int i = 0; i < coders.length; i++) {\n+                if (coders[i] == coder) {\n+                    return unpackSizes[i];\n+                }\n+            }\n+        }\n+        return 0;\n+    }\n+\n     @Override\n     public String toString() {\n         return \"Folder with \" + coders.length + \" coders, \" + totalInputStreams\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n     }\n \n     @Override\n-    InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {\n+    InputStream decode(final InputStream in, long uncompressedLength,\n+            final Coder coder, byte[] password) throws IOException {\n         try {\n             int dictionarySize = getDictionarySize(coder);\n             return new LZMA2InputStream(in, dictionarySize);\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n             if (coder.numInStreams != 1 || coder.numOutStreams != 1) {\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }\n-            inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);\n+            inputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),\n+                    coder, password);\n         }\n         if (folder.hasCrc) {\n             inputStreamStack = new CRC32VerifyingInputStream(inputStreamStack,\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }\n             SevenZMethod method = SevenZMethod.byId(coder.decompressionMethodId);\n-            inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);\n+            inputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),\n+                    coder, password);\n             methods.addFirst(new SevenZMethodConfiguration(method,\n                      Coders.findByMethod(method).getOptionsFromCoder(coder, inputStreamStack)));\n         }", "timestamp": 1408646359, "metainfo": ""}