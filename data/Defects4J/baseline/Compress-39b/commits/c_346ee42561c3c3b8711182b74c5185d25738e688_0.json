{"sha": "346ee42561c3c3b8711182b74c5185d25738e688", "log": "Move Archive read tests to separate class so can use suites to name the tests  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/ArchiveReadTests.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * \n+ */\n+\n+package org.apache.commons.compress;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+import org.apache.commons.compress.archivers.ArchiveException;\n+\n+/**\n+ * Test that can read various archive file examples.\n+ * \n+ * This is a very simple implementation.\n+ * \n+ * Files must be in resources/archives, and there must be a file.txt containing\n+ * the list of files in the archives.\n+ * \n+ * The class uses nested suites in order to be able to name the test after the file name,\n+ * as JUnit does not allow one to change the display name of a test.\n+ */\n+public class ArchiveReadTests extends AbstractTestCase {\n+    \n+    final static ClassLoader classLoader = ArchiveReadTests.class.getClassLoader();\n+\n+    private File file;\n+    private static ArrayList fileList = new ArrayList();\n+    \n+    public ArchiveReadTests(String name) {\n+        super(name);\n+    }\n+    \n+    private ArchiveReadTests(String name, File file){\n+        super(name);\n+        this.file = file;\n+    }\n+    \n+    public static TestSuite suite() throws IOException{\n+        TestSuite suite = new TestSuite(\"ArchiveReadTests\");\n+        File arcdir =new File(classLoader.getResource(\"archives\").getFile());\n+        assertTrue(arcdir.exists());\n+        File listing= new File(arcdir,\"files.txt\");\n+        assertTrue(\"files.txt is readable\",listing.canRead());\n+        BufferedReader br = new BufferedReader(new FileReader(listing));\n+        String line;\n+        while ((line=br.readLine())!=null){\n+            if (line.startsWith(\"#\")){\n+                continue;\n+            }\n+            String []fields = line.split(\" \");\n+            fileList.add(fields[1]);\n+        }\n+        br.close();\n+        File[]files=arcdir.listFiles();\n+        for (int i=0; i<files.length; i++){\n+            final File file = files[i];\n+            if (file.getName().endsWith(\".txt\")){\n+                continue;\n+            }\n+            // Cannot handle these tar files yet \n+            if (file.getName().equals(\"SunOS_cAEf.tar\")\n+             || file.getName().equals(\"FreeBSD_pax.tar\")\n+             || file.getName().equals(\"SunOS_cEf.tar\")){\n+                continue;\n+            }\n+            // Appears to be the only way to give the test a variable name\n+            TestSuite namedSuite = new TestSuite(file.getName());\n+            Test test = new ArchiveReadTests(\"testArchive\", file);\n+            namedSuite.addTest(test);\n+            suite.addTest(namedSuite);\n+        }        \n+        return suite;\n+    }\n+    \n+    public void testArchive() throws Exception{\n+        ArrayList expected=(ArrayList) fileList.clone();\n+        try {\n+           checkArchiveContent(file, expected);\n+        } catch (ArchiveException e) {\n+            fail(\"Problem checking \"+file);\n+        }\n+    }\n+}\n--- a/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/DetectArchiverTestCase.java\n package org.apache.commons.compress;\n \n import java.io.BufferedInputStream;\n-import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n-import java.io.FileReader;\n import java.net.URL;\n-import java.util.ArrayList;\n \n import org.apache.commons.compress.archivers.ArchiveException;\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n \n public final class DetectArchiverTestCase extends AbstractTestCase {\n+    public DetectArchiverTestCase(String name) {\n+        super(name);\n+    }\n+\n     final ClassLoader classLoader = getClass().getClassLoader();\n \n     public void testDetection() throws Exception {\n                        new File(rsc.getFile()))));\n     }\n     \n-    // TODO move into separate class and create suite with one file per test\n-    // Scan list of archives in resources/archives directory\n-    public void testArchives() throws Exception{\n-        File arcdir =new File(classLoader.getResource(\"archives\").getFile());\n-        assertTrue(arcdir.exists());\n-        File listing= new File(arcdir,\"files.txt\");\n-        assertTrue(\"files.txt is readable\",listing.canRead());\n-        BufferedReader br = new BufferedReader(new FileReader(listing));\n-        final ArrayList fileList = new ArrayList();\n-        String line;\n-        while ((line=br.readLine())!=null){\n-            if (line.startsWith(\"#\")){\n-                continue;\n-            }\n-            String []fields = line.split(\" \");\n-            fileList.add(fields[1]);\n-        }\n-        br.close();\n-        File[]files=arcdir.listFiles();\n-        for (int i=0; i<files.length; i++){\n-            final File file = files[i];\n-            if (file.getName().endsWith(\".txt\")){\n-                continue;\n-            }\n-            // Cannot handle these tar files yet \n-            if (file.getName().equals(\"SunOS_cAEf.tar\")\n-             || file.getName().equals(\"FreeBSD_pax.tar\")\n-             || file.getName().equals(\"SunOS_cEf.tar\")){\n-                continue;\n-            }\n-            ArrayList expected=(ArrayList) fileList.clone();\n-            try {\n-               checkArchiveContent(file, expected);\n-            } catch (ArchiveException e) {\n-                fail(\"Problem checking \"+file);\n-            }\n-        }\n-    }\n-\n     // Check that the empty archives created by the code are readable\n     \n     // Not possible to detect empty \"ar\" archive as it is completely empty", "timestamp": 1238578006, "metainfo": ""}