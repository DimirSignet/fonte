{"sha": "5b3bc3fa01328cdbbde6b865c4d3ff7562bc9d6f", "log": "don't parse documentation that we have no plans on using.  R=jschorr DELTA=123  (62 added, 7 deleted, 54 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=222681   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n     JSTypeExpression type;\n \n     state = State.SEARCHING_ANNOTATION;\n+    skipEOLs();\n+\n     JsDocToken token = next();\n \n-    ExtractionInfo blockInfo = extractBlockComment(token);\n-    token = blockInfo.token;\n-\n-    // If we have a block level comment, record it.\n-    if (blockInfo.string.length() > 0) {\n-      jsdocBuilder.recordBlockDescription(blockInfo.string);\n+    // Always record that we have a comment.\n+    if (jsdocBuilder.shouldParseDocumentation()) {\n+      ExtractionInfo blockInfo = extractBlockComment(token);\n+      token = blockInfo.token;\n+      if (!blockInfo.string.isEmpty()) {\n+        jsdocBuilder.recordBlockDescription(blockInfo.string);\n+      }\n+    } else {\n+      if (token != JsDocToken.ANNOTATION &&\n+          token != JsDocToken.EOC) {\n+        // Mark that there was a description, but don't bother marking\n+        // what it was.\n+        jsdocBuilder.recordBlockDescription(\"\");\n+      }\n     }\n \n     // Parse the actual JsDoc.\n \n               switch (annotation) {\n                 case AUTHOR:\n-                  ExtractionInfo authorInfo = extractSingleLineBlock();\n-                  String author = authorInfo.string;\n-\n-                  if (author.length() == 0) {\n-                    parser.addWarning(\"msg.jsdoc.authormissing\",\n+                  if (jsdocBuilder.shouldParseDocumentation()) {\n+                    ExtractionInfo authorInfo = extractSingleLineBlock();\n+                    String author = authorInfo.string;\n+\n+                    if (author.length() == 0) {\n+                      parser.addWarning(\"msg.jsdoc.authormissing\",\n                           stream.getLineno(), stream.getCharno());\n+                    } else {\n+                      jsdocBuilder.addAuthor(author);\n+                    }\n+                    token = authorInfo.token;\n                   } else {\n-                    jsdocBuilder.addAuthor(author);\n-                  }\n-\n-                  token = authorInfo.token;\n+                    token = eatTokensUntilEOL(token);\n+                  }\n                   continue retry;\n \n                 case CONSTANT:\n                   }\n \n                 case FILE_OVERVIEW:\n-                  ExtractionInfo fileOverviewInfo =\n-                      extractMultilineTextualBlock(token,\n-                                                   WhitespaceOption.TRIM);\n-\n-                  String fileOverview = fileOverviewInfo.string;\n+                  String fileOverview = \"\";\n+                  if (jsdocBuilder.shouldParseDocumentation()) {\n+                    ExtractionInfo fileOverviewInfo =\n+                        extractMultilineTextualBlock(token,\n+                            WhitespaceOption.TRIM);\n+\n+                    fileOverview = fileOverviewInfo.string;\n+\n+                    token = fileOverviewInfo.token;\n+                  } else {\n+                    token = eatTokensUntilEOL(token);\n+                  }\n \n                   if (!jsdocBuilder.recordFileOverview(fileOverview) ||\n                       fileOverviewJSDocInfo != null) {\n                     parser.addWarning(\"msg.jsdoc.fileoverview.extra\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n-                  token = fileOverviewInfo.token;\n                   continue retry;\n \n                 case LICENSE:\n                   jsdocBuilder.recordThrowType(type);\n \n                   // Find the throw's description (if applicable).\n-                  ExtractionInfo descriptionInfo =\n-                      extractMultilineTextualBlock(token);\n-\n-                  String description = descriptionInfo.string;\n-\n-                  if (description.length() > 0) {\n-                    jsdocBuilder.recordThrowDescription(type, description);\n-                  }\n-\n-                  token = descriptionInfo.token;\n+                  if (jsdocBuilder.shouldParseDocumentation()) {\n+                    ExtractionInfo descriptionInfo =\n+                        extractMultilineTextualBlock(token);\n+\n+                    String description = descriptionInfo.string;\n+\n+                    if (description.length() > 0) {\n+                      jsdocBuilder.recordThrowDescription(type, description);\n+                    }\n+\n+                    token = descriptionInfo.token;\n+                  } else {\n+                    token = eatTokensUntilEOL(token);\n+                  }\n                   continue retry;\n \n                 case PARAM:\n                   jsdocBuilder.markName(name, lineno, charno);\n \n                   // Find the parameter's description (if applicable).\n-                  ExtractionInfo paramDescriptionInfo =\n-                      extractMultilineTextualBlock(token);\n-\n-                  String paramDescription = paramDescriptionInfo.string;\n-\n-                  if (paramDescription.length() > 0) {\n-                    jsdocBuilder.recordParameterDescription(name,\n-                                                            paramDescription);\n-                  }\n-\n-                  token = paramDescriptionInfo.token;\n+                  if (jsdocBuilder.shouldParseDocumentation()) {\n+                    ExtractionInfo paramDescriptionInfo =\n+                        extractMultilineTextualBlock(token);\n+\n+                    String paramDescription = paramDescriptionInfo.string;\n+\n+                    if (paramDescription.length() > 0) {\n+                      jsdocBuilder.recordParameterDescription(name,\n+                          paramDescription);\n+                    }\n+\n+                    token = paramDescriptionInfo.token;\n+                  } else {\n+                    token = eatTokensUntilEOL(token);\n+                  }\n                   continue retry;\n \n                 case PRESERVE_TRY:\n                   continue retry;\n \n                 case SEE:\n-                  ExtractionInfo referenceInfo = extractSingleLineBlock();\n-                  String reference = referenceInfo.string;\n-\n-                  if (reference.length() == 0) {\n-                    parser.addWarning(\"msg.jsdoc.seemissing\",\n+                  if (jsdocBuilder.shouldParseDocumentation()) {\n+                    ExtractionInfo referenceInfo = extractSingleLineBlock();\n+                    String reference = referenceInfo.string;\n+\n+                    if (reference.length() == 0) {\n+                      parser.addWarning(\"msg.jsdoc.seemissing\",\n                           stream.getLineno(), stream.getCharno());\n+                    } else {\n+                      jsdocBuilder.addReference(reference);\n+                    }\n+\n+                    token = referenceInfo.token;\n                   } else {\n-                    jsdocBuilder.addReference(reference);\n-                  }\n-\n-                  token = referenceInfo.token;\n+                    token = eatTokensUntilEOL(token);\n+                  }\n                   continue retry;\n \n                 case SUPPRESS:\n                         token = current();\n \n                         // Find the return's description (if applicable).\n-                        ExtractionInfo returnDescriptionInfo =\n-                            extractMultilineTextualBlock(token);\n-\n-                        String returnDescription = returnDescriptionInfo.string;\n-\n-                        if (returnDescription.length() > 0) {\n-                          jsdocBuilder.recordReturnDescription(\n-                              returnDescription);\n+                        if (jsdocBuilder.shouldParseDocumentation()) {\n+                          ExtractionInfo returnDescriptionInfo =\n+                              extractMultilineTextualBlock(token);\n+\n+                          String returnDescription =\n+                              returnDescriptionInfo.string;\n+\n+                          if (returnDescription.length() > 0) {\n+                            jsdocBuilder.recordReturnDescription(\n+                                returnDescription);\n+                          }\n+\n+                          token = returnDescriptionInfo.token;\n+                        } else {\n+                          token = eatTokensUntilEOL(token);\n                         }\n-\n-                        token = returnDescriptionInfo.token;\n                         continue retry;\n \n                       case THIS:\n--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java\n     this.parseDocumentation = parseDocumentation;\n   }\n \n+  public boolean shouldParseDocumentation() {\n+    return parseDocumentation;\n+  }\n+\n   /**\n    * Returns whether this builder is populated with information that can be\n    * used to {@link #build} a {@link JSDocInfo} object.\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n     Node objectLitNode = varNode.getFirstChild().getFirstChild();\n     assertEquals(Token.OBJECTLIT, objectLitNode.getType());\n     assertNotNull(objectLitNode.getFirstChild().getJSDocInfo());\n+  }\n+\n+  public void testJSDocAttachment13() {\n+    Node varNode = parse(\"/** foo */ var a;\").getFirstChild();\n+    assertNotNull(varNode.getJSDocInfo());\n+  }\n+\n+  public void testJSDocAttachment14() {\n+    Node varNode = parse(\"/** */ var a;\").getFirstChild();\n+    assertNull(varNode.getJSDocInfo());\n+  }\n+\n+  public void testJSDocAttachment15() {\n+    Node varNode = parse(\"/** \\n * \\n */ var a;\").getFirstChild();\n+    assertNull(varNode.getJSDocInfo());\n   }\n \n   public void testIncorrectJSDocDoesNotAlterJSParsing1() throws Exception {", "timestamp": 1284671431, "metainfo": ""}