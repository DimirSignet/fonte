{"sha": "8d11c4a3b4e2841cd5ba7dd78a4325ef27eb6988", "log": "Applying Joanne Polsky's patch adding appendIfMissing/prependIfMissing methods to StringUtils [LANG-875]  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n  *      - Searches a String and replaces one String with another</li>\n  *  <li><b>Chomp/Chop</b>\n  *      - removes the last part of a String</li>\n+ *  <li><b>AppendIfMissing</b>\n+ *      - appends a suffix to the end of the String if not present</li>\n+ *  <li><b>PrependIfMissing</b>\n+ *      - prepends a prefix to the start of the String if not present</li>\n  *  <li><b>LeftPad/RightPad/Center/Repeat</b>\n  *      - pads a String</li>\n  *  <li><b>UpperCase/LowerCase/SwapCase/Capitalize/Uncapitalize</b>\n     }\n \n     /**\n+     * Appends the suffix to the end of the string if the string does not\n+     * already end in the suffix.\n+     *\n+     * @param str The string.\n+     * @param suffix The suffix to append to the end of the string.\n+     * @param ignoreCase Indicates whether the compare should ignore case.\n+     * @param suffixes Additional suffixes that are valid terminators (optional).\n+     *\n+     * @return A new String if suffix was appened, the same string otherwise.\n+     */\n+    private static String appendIfMissing(final String str, final CharSequence suffix, final boolean ignoreCase, final CharSequence... suffixes) {\n+        if (str == null || isEmpty(suffix) || endsWith(str, suffix, ignoreCase)) {\n+            return str;\n+        }\n+        if (suffixes != null && suffixes.length > 0) {\n+            for (final CharSequence s : suffixes) {\n+                if (isEmpty(s) || endsWith(str, s, ignoreCase)) {\n+                    return str;\n+                }\n+            }\n+        }\n+        return str + suffix.toString();\n+    }\n+\n+    /**\n+     * Appends the suffix to the end of the string if the string does not\n+     * already end with any the suffixes.\n+     *\n+     * <pre>\n+     * StringUtils.appendIfMissing(null, null) = null\n+     * StringUtils.appendIfMissing(\"abc\", null) = \"abc\"\n+     * StringUtils.appendIfMissing(\"\", \"xyz\") = \"xyz\"\n+     * StringUtils.appendIfMissing(\"abc\", \"xyz\") = \"abcxyz\"\n+     * StringUtils.appendIfMissing(\"abcxyz\", \"xyz\") = \"abcxyz\"\n+     * StringUtils.appendIfMissing(\"abcXYZ\", \"xyz\") = \"abcXYZxyz\"\n+     * </pre>\n+     * <p>With additional suffixes,</p>\n+     * <pre>\n+     * StringUtils.appendIfMissing(null, null, null) = null\n+     * StringUtils.appendIfMissing(\"abc\", null, null) = \"abc\"\n+     * StringUtils.appendIfMissing(\"\", \"xyz\", null) = \"xyz\"\n+     * StringUtils.appendIfMissing(\"abc\", \"xyz\", \"\") = \"abc\"\n+     * StringUtils.appendIfMissing(\"abc\", \"xyz\", \"mno\") = \"abcxyz\"\n+     * StringUtils.appendIfMissing(\"abcxyz\", \"xyz\", \"mno\") = \"abcxyz\"\n+     * StringUtils.appendIfMissing(\"abcmno\", \"xyz\", \"mno\") = \"abcmno\"\n+     * StringUtils.appendIfMissing(\"abcXYZ\", \"xyz\", \"mno\") = \"abcXYZxyz\"\n+     * StringUtils.appendIfMissing(\"abcMNO\", \"xyz\", \"mno\") = \"abcMNOxyz\"\n+     * </pre>\n+     *\n+     * @param str The string.\n+     * @param suffix The suffix to append to the end of the string.\n+     * @param suffixes Additional suffixes that are valid terminators.\n+     *\n+     * @return A new String if suffix was appened, the same string otherwise.\n+     *\n+     * @since 3.1\n+     */\n+    public static String appendIfMissing(final String str, final CharSequence suffix, final CharSequence... suffixes) {\n+        return appendIfMissing(str, suffix, false, suffixes);\n+    }\n+\n+    /**\n+     * Appends the suffix to the end of the string if the string does not\n+     * already end, case insensitive, with any of the suffixes.\n+     *\n+     * <pre>\n+     * StringUtils.appendIfMissingIgnoreCase(null, null) = null\n+     * StringUtils.appendIfMissingIgnoreCase(\"abc\", null) = \"abc\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"\", \"xyz\") = \"xyz\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\") = \"abcxyz\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"abcxyz\", \"xyz\") = \"abcxyz\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"abcXYZ\", \"xyz\") = \"abcXYZ\"\n+     * </pre>\n+     * <p>With additional suffixes,</p>\n+     * <pre>\n+     * StringUtils.appendIfMissingIgnoreCase(null, null, null) = null\n+     * StringUtils.appendIfMissingIgnoreCase(\"abc\", null, null) = \"abc\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"\", \"xyz\", null) = \"xyz\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\", \"\") = \"a\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"abc\", \"xyz\", \"mno\") = \"axyz\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"abcxyz\", \"xyz\", \"mno\") = \"abcxyz\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"abcmno\", \"xyz\", \"mno\") = \"abcmno\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"abcXYZ\", \"xyz\", \"mno\") = \"abcXYZ\"\n+     * StringUtils.appendIfMissingIgnoreCase(\"abcMNO\", \"xyz\", \"mno\") = \"abcMNO\"\n+     * </pre>\n+     *\n+     * @param str The string.\n+     * @param suffix The suffix to append to the end of the string.\n+     * @param suffixes Additional suffixes that are valid terminators.\n+     *\n+     * @return A new String if suffix was appened, the same string otherwise.\n+     *\n+     * @since 3.1\n+     */\n+    public static String appendIfMissingIgnoreCase(final String str, final CharSequence suffix, final CharSequence... suffixes) {\n+        return appendIfMissing(str, suffix, true, suffixes);\n+    }\n+\n+    /**\n+     * Prepends the prefix to the start of the string if the string does not\n+     * already start with any of the prefixes.\n+     *\n+     * @param str The string.\n+     * @param prefix The prefix to prepend to the start of the string.\n+     * @param ignoreCase Indicates whether the compare should ignore case.\n+     * @param prefixes Additional prefixes that are valid (optional).\n+     *\n+     * @return A new String if prefix was prepended, the same string otherwise.\n+     */\n+    private static String prependIfMissing(final String str, final CharSequence prefix, final boolean ignoreCase, final CharSequence... prefixes) {\n+        if (str == null || isEmpty(prefix) || startsWith(str, prefix, ignoreCase)) {\n+            return str;\n+        }\n+        if (prefixes != null && prefixes.length > 0) {\n+            for (final CharSequence p : prefixes) {\n+                if (isEmpty(p) || startsWith(str, p, ignoreCase)) {\n+                    return str;\n+                }\n+            }\n+        }\n+        return prefix.toString() + str;\n+    }\n+\n+    /**\n+     * Prepends the prefix to the start of the string if the string does not\n+     * already start with any of the prefixes.\n+     *\n+     * <pre>\n+     * StringUtils.prependIfMissing(null, null) = null\n+     * StringUtils.prependIfMissing(\"abc\", null) = \"abc\"\n+     * StringUtils.prependIfMissing(\"\", \"xyz\") = \"xyz\"\n+     * StringUtils.prependIfMissing(\"abc\", \"xyz\") = \"xyzabc\"\n+     * StringUtils.prependIfMissing(\"xyzabc\", \"xyz\") = \"xyzabc\"\n+     * StringUtils.prependIfMissing(\"XYZabc\", \"xyz\") = \"xyzXYZabc\"\n+     * </pre>\n+     * <p>With additional prefixes,</p>\n+     * <pre>\n+     * StringUtils.prependIfMissing(null, null, null) = null\n+     * StringUtils.prependIfMissing(\"abc\", null, null) = \"abc\"\n+     * StringUtils.prependIfMissing(\"\", \"xyz\", null) = \"xyz\"\n+     * StringUtils.prependIfMissing(\"abc\", \"xyz\", \"\") = \"abc\"\n+     * StringUtils.prependIfMissing(\"abc\", \"xyz\", \"mno\") = \"xyzabc\"\n+     * StringUtils.prependIfMissing(\"xyzabc\", \"xyz\", \"mno\") = \"xyzabc\"\n+     * StringUtils.prependIfMissing(\"mnoabc\", \"xyz\", \"mno\") = \"mnoabc\"\n+     * StringUtils.prependIfMissing(\"XYZabc\", \"xyz\", \"mno\") = \"xyzXYZabc\"\n+     * StringUtils.prependIfMissing(\"MNOabc\", \"xyz\", \"mno\") = \"xyzMNOabc\"\n+     * </pre>\n+     *\n+     * @param str The string.\n+     * @param prefix The prefix to prepend to the start of the string.\n+     * @param prefixes Additional prefixes that are valid.\n+     *\n+     * @return A new String if prefix was prepended, the same string otherwise.\n+     *\n+     * @since 3.1\n+     */\n+    public static String prependIfMissing(final String str, final CharSequence prefix, final CharSequence... prefixes) {\n+        return prependIfMissing(str, prefix, false, prefixes);\n+    }\n+\n+    /**\n+     * Prepends the prefix to the start of the string if the string does not\n+     * already start, case insensitive, with any of the prefixes.\n+     *\n+     * <pre>\n+     * StringUtils.prependIfMissingIgnoreCase(null, null) = null\n+     * StringUtils.prependIfMissingIgnoreCase(\"abc\", null) = \"abc\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"\", \"xyz\") = \"xyz\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\") = \"xyzabc\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"xyzabc\", \"xyz\") = \"xyzabc\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"XYZabc\", \"xyz\") = \"XYZabc\"\n+     * </pre>\n+     * <p>With additional prefixes,</p>\n+     * <pre>\n+     * StringUtils.prependIfMissingIgnoreCase(null, null, null) = null\n+     * StringUtils.prependIfMissingIgnoreCase(\"abc\", null, null) = \"abc\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"\", \"xyz\", null) = \"xyz\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\", \"\") = \"abc\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"abc\", \"xyz\", \"mno\") = \"xyzabc\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"xyzabc\", \"xyz\", \"mno\") = \"xyzabc\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"mnoabc\", \"xyz\", \"mno\") = \"mnoabc\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"XYZabc\", \"xyz\", \"mno\") = \"XYZabc\"\n+     * StringUtils.prependIfMissingIgnoreCase(\"MNOabc\", \"xyz\", \"mno\") = \"MNOabc\"\n+     * </pre>\n+     *\n+     * @param str The string.\n+     * @param prefix The prefix to prepend to the start of the string.\n+     * @param prefixes Additional prefixes that are valid (optional).\n+     *\n+     * @return A new String if prefix was prepended, the same string otherwise.\n+     *\n+     * @since 3.1\n+     */\n+    public static String prependIfMissingIgnoreCase(final String str, final CharSequence prefix, final CharSequence... prefixes) {\n+        return prependIfMissing(str, prefix, true, prefixes);\n+    }\n+\n+    /**\n      * Converts a <code>byte[]</code> to a String using the specified character encoding.\n      * \n      * @param bytes\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n         assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.unescapeHtml3(\"\\uDBFF\\uDFFD\"));\n         assertEquals(\"\\uDBFF\\uDFFD\", StringEscapeUtils.unescapeHtml4(\"\\uDBFF\\uDFFD\"));\n     }\n+\n+    /**\n+     * Tests {@code appendIfMissing}.\n+     */\n+    @Test\n+    public void testAppendIfMissing() {\n+        assertEquals(\"appendIfMissing(null,null)\", null, StringUtils.appendIfMissing(null,null));\n+        assertEquals(\"appendIfMissing(abc,null)\", \"abc\", StringUtils.appendIfMissing(\"abc\",null));\n+        assertEquals(\"appendIfMissing(\\\"\\\",xyz)\", \"xyz\", StringUtils.appendIfMissing(\"\",\"xyz\"));\n+        assertEquals(\"appendIfMissing(abc,xyz)\", \"abcxyz\", StringUtils.appendIfMissing(\"abc\",\"xyz\"));\n+        assertEquals(\"appendIfMissing(abcxyz,xyz)\", \"abcxyz\", StringUtils.appendIfMissing(\"abcxyz\",\"xyz\"));\n+        assertEquals(\"appendIfMissing(aXYZ,xyz)\", \"aXYZxyz\", StringUtils.appendIfMissing(\"aXYZ\",\"xyz\"));\n+\n+        assertEquals(\"appendIfMissing(null,null,null)\", null, StringUtils.appendIfMissing(null,null,null));\n+        assertEquals(\"appendIfMissing(abc,null,null)\", \"abc\", StringUtils.appendIfMissing(\"abc\",null,null));\n+        assertEquals(\"appendIfMissing(\\\"\\\",xyz,null))\", \"xyz\", StringUtils.appendIfMissing(\"\",\"xyz\",null));\n+        assertEquals(\"appendIfMissing(abc,xyz,\\\"\\\")\", \"abc\", StringUtils.appendIfMissing(\"abc\",\"xyz\",\"\"));\n+        assertEquals(\"appendIfMissing(abc,xyz,mno)\", \"abcxyz\", StringUtils.appendIfMissing(\"abc\",\"xyz\",\"mno\"));\n+        assertEquals(\"appendIfMissing(abcxyz,xyz,mno)\", \"abcxyz\", StringUtils.appendIfMissing(\"abcxyz\",\"xyz\",\"mno\"));\n+        assertEquals(\"appendIfMissing(abcmno,xyz,mno)\", \"abcmno\", StringUtils.appendIfMissing(\"abcmno\",\"xyz\",\"mno\"));\n+        assertEquals(\"appendIfMissing(abcXYZ,xyz,mno)\", \"abcXYZxyz\", StringUtils.appendIfMissing(\"abcXYZ\",\"xyz\",\"mno\"));\n+        assertEquals(\"appendIfMissing(abcMNO,xyz,mno)\", \"abcMNOxyz\", StringUtils.appendIfMissing(\"abcMNO\",\"xyz\",\"mno\"));\n+    }\n+\n+    /**\n+     * Tests {@code appendIfMissingIgnoreCase}.\n+     */\n+    @Test\n+    public void testAppendIfMissingIgnoreCase() {\n+        assertEquals(\"appendIfMissingIgnoreCase(null,null)\", null, StringUtils.appendIfMissingIgnoreCase(null,null));\n+        assertEquals(\"appendIfMissingIgnoreCase(abc,null)\", \"abc\", StringUtils.appendIfMissingIgnoreCase(\"abc\",null));\n+        assertEquals(\"appendIfMissingIgnoreCase(\\\"\\\",xyz)\", \"xyz\", StringUtils.appendIfMissingIgnoreCase(\"\",\"xyz\"));\n+        assertEquals(\"appendIfMissingIgnoreCase(abc,xyz)\", \"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abc\",\"xyz\"));\n+        assertEquals(\"appendIfMissingIgnoreCase(abcxyz,xyz)\", \"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abcxyz\",\"xyz\"));\n+        assertEquals(\"appendIfMissingIgnoreCase(abcXYZ,xyz)\", \"abcXYZ\", StringUtils.appendIfMissingIgnoreCase(\"abcXYZ\",\"xyz\"));\n+\n+        assertEquals(\"appendIfMissingIgnoreCase(null,null,null)\", null, StringUtils.appendIfMissingIgnoreCase(null,null,null));\n+        assertEquals(\"appendIfMissingIgnoreCase(abc,null,null)\", \"abc\", StringUtils.appendIfMissingIgnoreCase(\"abc\",null,null));\n+        assertEquals(\"appendIfMissingIgnoreCase(\\\"\\\",xyz,null)\", \"xyz\", StringUtils.appendIfMissingIgnoreCase(\"\",\"xyz\",null));\n+        assertEquals(\"appendIfMissingIgnoreCase(abc,xyz,\\\"\\\")\", \"abc\", StringUtils.appendIfMissingIgnoreCase(\"abc\",\"xyz\",\"\"));\n+        assertEquals(\"appendIfMissingIgnoreCase(abc,xyz,mno)\", \"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abc\",\"xyz\",\"mno\"));\n+        assertEquals(\"appendIfMissingIgnoreCase(abcxyz,xyz,mno)\", \"abcxyz\", StringUtils.appendIfMissingIgnoreCase(\"abcxyz\",\"xyz\",\"mno\"));       \n+        assertEquals(\"appendIfMissingIgnoreCase(abcmno,xyz,mno)\", \"abcmno\", StringUtils.appendIfMissingIgnoreCase(\"abcmno\",\"xyz\",\"mno\"));       \n+        assertEquals(\"appendIfMissingIgnoreCase(abcXYZ,xyz,mno)\", \"abcXYZ\", StringUtils.appendIfMissingIgnoreCase(\"abcXYZ\",\"xyz\",\"mno\"));\n+        assertEquals(\"appendIfMissingIgnoreCase(abcMNO,xyz,mno)\", \"abcMNO\", StringUtils.appendIfMissingIgnoreCase(\"abcMNO\",\"xyz\",\"mno\"));\n+    }\n+\n+    /**\n+     * Tests {@code prependIfMissing}.\n+     */\n+    @Test\n+    public void testPrependIfMissing() {\n+        assertEquals(\"prependIfMissing(null,null)\", null, StringUtils.prependIfMissing(null,null));\n+        assertEquals(\"prependIfMissing(abc,null)\", \"abc\", StringUtils.prependIfMissing(\"abc\",null));\n+        assertEquals(\"prependIfMissing(\\\"\\\",xyz)\", \"xyz\", StringUtils.prependIfMissing(\"\",\"xyz\"));\n+        assertEquals(\"prependIfMissing(abc,xyz)\", \"xyzabc\", StringUtils.prependIfMissing(\"abc\",\"xyz\"));\n+        assertEquals(\"prependIfMissing(xyzabc,xyz)\", \"xyzabc\", StringUtils.prependIfMissing(\"xyzabc\",\"xyz\"));\n+        assertEquals(\"prependIfMissing(XYZabc,xyz)\", \"xyzXYZabc\", StringUtils.prependIfMissing(\"XYZabc\",\"xyz\"));\n+\n+        assertEquals(\"prependIfMissing(null,null null)\", null, StringUtils.prependIfMissing(null,null,null));\n+        assertEquals(\"prependIfMissing(abc,null,null)\", \"abc\", StringUtils.prependIfMissing(\"abc\",null,null));\n+        assertEquals(\"prependIfMissing(\\\"\\\",xyz,null)\", \"xyz\", StringUtils.prependIfMissing(\"\",\"xyz\",null));\n+        assertEquals(\"prependIfMissing(abc,xyz,\\\"\\\")\",\"abc\", StringUtils.prependIfMissing(\"abc\",\"xyz\",\"\"));\n+        assertEquals(\"prependIfMissing(abc,xyz,mno)\",\"xyzabc\", StringUtils.prependIfMissing(\"abc\",\"xyz\",\"mno\"));\n+        assertEquals(\"prependIfMissing(xyzabc,xyz,mno)\", \"xyzabc\", StringUtils.prependIfMissing(\"xyzabc\",\"xyz\",\"mno\"));\n+        assertEquals(\"prependIfMissing(mnoabc,xyz,mno)\", \"mnoabc\", StringUtils.prependIfMissing(\"mnoabc\",\"xyz\",\"mno\"));\n+        assertEquals(\"prependIfMissing(XYZabc,xyz,mno)\", \"xyzXYZabc\", StringUtils.prependIfMissing(\"XYZabc\",\"xyz\",\"mno\"));\n+        assertEquals(\"prependIfMissing(MNOabc,xyz,mno)\", \"xyzMNOabc\", StringUtils.prependIfMissing(\"MNOabc\",\"xyz\",\"mno\"));\n+    }\n+\n+    /**\n+     * Tests {@code prependIfMissingIgnoreCase}.\n+     */\n+    @Test\n+    public void testPrependIfMissingIgnoreCase() {\n+        assertEquals(\"prependIfMissingIgnoreCase(null,null)\", null, StringUtils.prependIfMissingIgnoreCase(null,null));\n+        assertEquals(\"prependIfMissingIgnoreCase(abc,null)\", \"abc\", StringUtils.prependIfMissingIgnoreCase(\"abc\",null));\n+        assertEquals(\"prependIfMissingIgnoreCase(\\\"\\\",xyz)\", \"xyz\", StringUtils.prependIfMissingIgnoreCase(\"\",\"xyz\"));\n+        assertEquals(\"prependIfMissingIgnoreCase(abc,xyz)\", \"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"abc\",\"xyz\"));\n+        assertEquals(\"prependIfMissingIgnoreCase(xyzabc,xyz)\", \"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"xyzabc\",\"xyz\"));\n+        assertEquals(\"prependIfMissingIgnoreCase(XYZabc,xyz)\", \"XYZabc\", StringUtils.prependIfMissingIgnoreCase(\"XYZabc\",\"xyz\"));\n+\n+        assertEquals(\"prependIfMissingIgnoreCase(null,null null)\", null, StringUtils.prependIfMissingIgnoreCase(null,null,null));\n+        assertEquals(\"prependIfMissingIgnoreCase(abc,null,null)\", \"abc\", StringUtils.prependIfMissingIgnoreCase(\"abc\",null,null));\n+        assertEquals(\"prependIfMissingIgnoreCase(\\\"\\\",xyz,null)\", \"xyz\", StringUtils.prependIfMissingIgnoreCase(\"\",\"xyz\",null));\n+        assertEquals(\"prependIfMissingIgnoreCase(abc,xyz,\\\"\\\")\",\"abc\", StringUtils.prependIfMissingIgnoreCase(\"abc\",\"xyz\",\"\"));\n+        assertEquals(\"prependIfMissingIgnoreCase(abc,xyz,mno)\",\"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"abc\",\"xyz\",\"mno\"));\n+        assertEquals(\"prependIfMissingIgnoreCase(xyzabc,xyz,mno)\", \"xyzabc\", StringUtils.prependIfMissingIgnoreCase(\"xyzabc\",\"xyz\",\"mno\"));\n+        assertEquals(\"prependIfMissingIgnoreCase(mnoabc,xyz,mno)\", \"mnoabc\", StringUtils.prependIfMissingIgnoreCase(\"mnoabc\",\"xyz\",\"mno\"));\n+        assertEquals(\"prependIfMissingIgnoreCase(XYZabc,xyz,mno)\", \"XYZabc\", StringUtils.prependIfMissingIgnoreCase(\"XYZabc\",\"xyz\",\"mno\"));\n+        assertEquals(\"prependIfMissingIgnoreCase(MNOabc,xyz,mno)\", \"MNOabc\", StringUtils.prependIfMissingIgnoreCase(\"MNOabc\",\"xyz\",\"mno\"));\n+    }\n }", "timestamp": 1365755242, "metainfo": ""}