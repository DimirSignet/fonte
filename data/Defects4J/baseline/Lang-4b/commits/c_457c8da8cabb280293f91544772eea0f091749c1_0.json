{"sha": "457c8da8cabb280293f91544772eea0f091749c1", "log": "Applying my patch from LANG-469 - adding a lastOrdinalIndexOf method to complement the existing ordinalIndexOf method  ", "commit": "\n--- a/src/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/java/org/apache/commons/lang3/StringUtils.java\n      * StringUtils.ordinalIndexOf(\"aabaabaa\", \"\", 2)   = 0\n      * </pre>\n      *\n+     * <p>Note that 'head(String str, int n)' may be implemented as: </p>\n+     *\n+     * <pre>\n+     *   str.substring(0, lastOrdinalIndexOf(str, \"\\n\", n))\n+     * </pre>\n+     *\n      * @param str  the String to check, may be null\n      * @param searchStr  the String to find, may be null\n      * @param ordinal  the n-th <code>searchStr</code> to find\n      * @since 2.1\n      */\n     public static int ordinalIndexOf(String str, String searchStr, int ordinal) {\n+        return ordinalIndexOf(str, searchStr, ordinal, false);\n+    }\n+\n+    // Shared code between ordinalIndexOf(String,String,int) and lastOrdinalIndexOf(String,String,int)\n+    private static int ordinalIndexOf(String str, String searchStr, int ordinal, boolean lastIndex) {\n         if (str == null || searchStr == null || ordinal <= 0) {\n             return INDEX_NOT_FOUND;\n         }\n         if (searchStr.length() == 0) {\n-            return 0;\n+            return lastIndex ? str.length() : 0;\n         }\n         int found = 0;\n-        int index = INDEX_NOT_FOUND;\n+        int index = lastIndex ? str.length() : INDEX_NOT_FOUND;\n         do {\n-            index = str.indexOf(searchStr, index + 1);\n+            if(lastIndex) {\n+                index = str.lastIndexOf(searchStr, index - 1);\n+            } else {\n+                index = str.indexOf(searchStr, index + 1);\n+            }\n             if (index < 0) {\n                 return index;\n             }\n             return -1;\n         }\n         return str.lastIndexOf(searchStr);\n+    }\n+\n+    /**\n+     * <p>Finds the n-th last index within a String, handling <code>null</code>.\n+     * This method uses {@link String#lastIndexOf(String)}.</p>\n+     *\n+     * <p>A <code>null</code> String will return <code>-1</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.lastOrdinalIndexOf(null, *, *)          = -1\n+     * StringUtils.lastOrdinalIndexOf(*, null, *)          = -1\n+     * StringUtils.lastOrdinalIndexOf(\"\", \"\", *)           = 0\n+     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1)  = 7\n+     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2)  = 6\n+     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1)  = 5\n+     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2)  = 2\n+     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1) = 4\n+     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2) = 1\n+     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1)   = 8\n+     * StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2)   = 8\n+     * </pre>\n+     *\n+     * <p>Note that 'tail(String str, int n)' may be implemented as: </p>\n+     *\n+     * <pre>\n+     *   str.substring(lastOrdinalIndexOf(str, \"\\n\", n) + 1)\n+     * </pre>\n+     *\n+     * @param str  the String to check, may be null\n+     * @param searchStr  the String to find, may be null\n+     * @param ordinal  the n-th last <code>searchStr</code> to find\n+     * @return the n-th last index of the search String,\n+     *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n+     * @since 3.0\n+     */\n+    public static int lastOrdinalIndexOf(String str, String searchStr, int ordinal) {\n+        return ordinalIndexOf(str, searchStr, ordinal, true);\n     }\n \n     /**\n         int strOffset = str.length() - suffix.length();\n         return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());\n     }\n-\n }\n--- a/src/test/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n         assertEquals(7, StringUtils.lastIndexOf(\"aabaabaa\", \"a\"));\n         assertEquals(5, StringUtils.lastIndexOf(\"aabaabaa\", \"b\"));\n         assertEquals(4, StringUtils.lastIndexOf(\"aabaabaa\", \"ab\"));\n+    }\n+\n+    public void testLastOrdinalIndexOf() {\n+        assertEquals(-1, StringUtils.lastOrdinalIndexOf(null, \"*\", 42) );\n+        assertEquals(-1, StringUtils.lastOrdinalIndexOf(\"*\", null, 42) );\n+        assertEquals(0, StringUtils.lastOrdinalIndexOf(\"\", \"\", 42) );\n+        assertEquals(7, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 1) );\n+        assertEquals(6, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"a\", 2) );\n+        assertEquals(5, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 1) );\n+        assertEquals(2, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"b\", 2) );\n+        assertEquals(4, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 1) );\n+        assertEquals(1, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"ab\", 2) );\n+        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 1) );\n+        assertEquals(8, StringUtils.lastOrdinalIndexOf(\"aabaabaa\", \"\", 2) );\n     }\n \n     public void testLastIndexOf_StringInt() {", "timestamp": 1260948750, "metainfo": ""}