{"sha": "a4a455053e7e4a77320efd6db0814f4de82d754d", "log": "LANG-818 FastDateFormat's \"z\" pattern does not respect timezone of Calendar instances passed to format()  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java\n      * <p>Inner class to output a time zone name.</p>\n      */\n     private static class TimeZoneNameRule implements Rule {\n-        private final TimeZone mTimeZone;\n+        private final Locale mLocale;\n+        private final int mStyle;\n         private final String mStandard;\n         private final String mDaylight;\n \n          * @param style the style\n          */\n         TimeZoneNameRule(TimeZone timeZone, Locale locale, int style) {\n-            mTimeZone = timeZone;\n-\n+            mLocale = locale;\n+            mStyle = style;\n+            \n             mStandard = getTimeZoneDisplay(timeZone, false, style, locale);\n             mDaylight = getTimeZoneDisplay(timeZone, true, style, locale);\n         }\n          */\n         @Override\n         public int estimateLength() {\n+            // We have no access to the Calendar object that will be passed to\n+            // appendTo so base estimate on the TimeZone passed to the\n+            // constructor\n             return Math.max(mStandard.length(), mDaylight.length());\n         }\n \n          */\n         @Override\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n-            if (mTimeZone.useDaylightTime() && calendar.get(Calendar.DST_OFFSET) != 0) {\n-                buffer.append(mDaylight);\n+            TimeZone zone = calendar.getTimeZone();\n+            if (zone.useDaylightTime()\n+                    && calendar.get(Calendar.DST_OFFSET) != 0) {\n+                buffer.append(getTimeZoneDisplay(zone, true, mStyle, mLocale));\n             } else {\n-                buffer.append(mStandard);\n+                buffer.append(getTimeZoneDisplay(zone, false, mStyle, mLocale));\n             }\n         }\n     }\n--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java\n  */\n package org.apache.commons.lang3.time;\n \n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n         DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK);\n         assertEquals(NEW_YORK, printer.getTimeZone());\n     }\n+    \n+    @Test\n+    public void testCalendarTimezoneRespected() {\n+        String[] availableZones = TimeZone.getAvailableIDs();\n+        TimeZone currentZone = TimeZone.getDefault();\n+        \n+        TimeZone anotherZone = null;\n+        for (String zone : availableZones) {\n+            if (!zone.equals(currentZone.getID())) {\n+                anotherZone = TimeZone.getTimeZone(zone);\n+            }\n+        }\n+        \n+        assertNotNull(\"Cannot find another timezone\", anotherZone);\n+        \n+        final String pattern = \"h:mma z\";\n+        final Calendar cal = Calendar.getInstance(anotherZone);\n+        \n+        SimpleDateFormat sdf = new SimpleDateFormat(pattern);\n+        sdf.setTimeZone(anotherZone);\n+        String expectedValue = sdf.format(cal.getTime());\n+        String actualValue = FastDateFormat.getInstance(pattern).format(cal);\n+        assertEquals(expectedValue, actualValue);\n+    }\n }", "timestamp": 1348750579, "metainfo": ""}