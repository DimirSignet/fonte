{"sha": "4cb6f0485e94c513debf6dbf92e8a01b746a8f2e", "log": "Convert to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.lang.reflect.Modifier;\n import java.util.HashMap;\n \n-import junit.framework.TestCase;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.SerializationUtils}.\n  *\n  * @version $Id$\n  */\n-public class SerializationUtilsTest extends TestCase {\n+public class SerializationUtilsTest {\n \n   static final String CLASS_NOT_FOUND_MESSAGE = \"ClassNotFoundSerialization.readObject fake exception\";\n     protected static final String SERIALIZE_IO_EXCEPTION_MESSAGE = \"Anonymous OutputStream I/O exception\";\n     private Integer iInteger;\n     private HashMap<Object, Object> iMap;\n \n-    public SerializationUtilsTest(String name) {\n-        super(name);\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-\n+    @Before\n+    public void setUp() {\n         iString = \"foo\";\n         iInteger = Integer.valueOf(7);\n         iMap = new HashMap<Object, Object>();\n     }\n \n     //-----------------------------------------------------------------------\n+\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new SerializationUtils());\n         Constructor<?>[] cons = SerializationUtils.class.getDeclaredConstructors();\n         assertEquals(false, Modifier.isFinal(SerializationUtils.class.getModifiers()));\n     }\n     \n+    @Test\n     public void testException() {\n         SerializationException serEx;\n         Exception ex = new Exception();\n     }\n     \n     //-----------------------------------------------------------------------\n+\n+    @Test\n     public void testSerializeStream() throws Exception {\n         ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n         SerializationUtils.serialize(iMap, streamTest);\n         }\n     }\n \n+    @Test\n     public void testSerializeStreamUnserializable() throws Exception {\n         ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n         try {\n         fail();\n     }\n \n+    @Test\n     public void testSerializeStreamNullObj() throws Exception {\n         ByteArrayOutputStream streamTest = new ByteArrayOutputStream();\n         SerializationUtils.serialize(null, streamTest);\n         }\n     }\n \n+    @Test\n     public void testSerializeStreamObjNull() throws Exception {\n         try {\n             SerializationUtils.serialize(iMap, null);\n         fail();\n     }\n \n+    @Test\n     public void testSerializeStreamNullNull() throws Exception {\n         try {\n             SerializationUtils.serialize(null, null);\n         fail();\n     }\n     \n+    @Test\n     public void testSerializeIOException() throws Exception {\n         // forces an IOException when the ObjectOutputStream is created, to test not closing the stream\n         // in the finally block\n \n     //-----------------------------------------------------------------------\n \n+    @Test\n     public void testDeserializeStream() throws Exception {\n         ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n         assertEquals(iMap, testMap);\n     }\n \n+    @Test\n     public void testDeserializeStreamOfNull() throws Exception {\n         ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n         assertNull(test);\n     }\n \n+    @Test\n     public void testDeserializeStreamNull() throws Exception {\n         try {\n             SerializationUtils.deserialize((InputStream) null);\n         fail();\n     }\n \n+    @Test\n     public void testDeserializeStreamBadStream() throws Exception {\n         try {\n             SerializationUtils.deserialize(new ByteArrayInputStream(new byte[0]));\n         fail();\n     }\n \n+    @Test\n     public void testDeserializeStreamClassNotFound() throws Exception {\n         ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n     \n     //-----------------------------------------------------------------------\n \n+    @Test\n     public void testSerializeBytes() throws Exception {\n         byte[] testBytes = SerializationUtils.serialize(iMap);\n \n         }\n     }\n \n+    @Test\n     public void testSerializeBytesUnserializable() throws Exception {\n         try {\n             iMap.put(new Object(), new Object());\n         fail();\n     }\n \n+    @Test\n     public void testSerializeBytesNull() throws Exception {\n         byte[] testBytes = SerializationUtils.serialize(null);\n \n \n     //-----------------------------------------------------------------------\n \n+    @Test\n     public void testDeserializeBytes() throws Exception {\n         ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n         assertEquals(iMap, testMap);\n     }\n \n+    @Test\n     public void testDeserializeBytesOfNull() throws Exception {\n         ByteArrayOutputStream streamReal = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(streamReal);\n         assertNull(test);\n     }\n \n+    @Test\n     public void testDeserializeBytesNull() throws Exception {\n         try {\n             SerializationUtils.deserialize((byte[]) null);\n         fail();\n     }\n \n+    @Test\n     public void testDeserializeBytesBadStream() throws Exception {\n         try {\n             SerializationUtils.deserialize(new byte[0]);\n \n     //-----------------------------------------------------------------------\n \n+    @Test\n     public void testClone() throws Exception {\n         Object test = SerializationUtils.clone(iMap);\n         assertNotNull(test);\n         assertEquals(iMap, testMap);\n     }\n \n+    @Test\n     public void testCloneNull() throws Exception {\n         Object test = SerializationUtils.clone(null);\n         assertNull(test);\n     }\n \n+    @Test\n     public void testCloneUnserializable() throws Exception {\n         try {\n             iMap.put(new Object(), new Object());\n         fail();\n     }\n     \n+    @Test\n     public void testPrimitiveTypeClassSerialization() {\n         Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class,\n                 boolean.class, char.class, void.class };", "timestamp": 1335272135, "metainfo": ""}