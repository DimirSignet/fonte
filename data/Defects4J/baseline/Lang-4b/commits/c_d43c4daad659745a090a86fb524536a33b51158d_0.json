{"sha": "d43c4daad659745a090a86fb524536a33b51158d", "log": "Add comments for [LANG-798] Use generics in SerializationUtils.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n     // Deserialize\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Deserializes an {@code Object} from the specified stream.</p>\n-     *\n-     * <p>The stream will be closed once the object is written. This\n-     * avoids the need for a finally clause, and maybe also exception\n-     * handling, in the application code.</p>\n-     *\n-     * <p>The stream passed in is not buffered internally within this method.\n-     * This is the responsibility of your application if desired.</p>\n-     *\n-     * @param inputStream  the serialized object input stream, must not be null\n+     * <p>\n+     * Deserializes an {@code Object} from the specified stream.\n+     * </p>\n+     * \n+     * <p>\n+     * The stream will be closed once the object is written. This avoids the need for a finally clause, and maybe also\n+     * exception handling, in the application code.\n+     * </p>\n+     * \n+     * <p>\n+     * The stream passed in is not buffered internally within this method. This is the responsibility of your\n+     * application if desired.\n+     * </p>\n+     * \n+     * <p>\n+     * If the call site incorrectly types the return value, a {@link ClassCastException} is thrown from the call site.\n+     * Without Generics in this declaration, the call site must type cast and can cause the same ClassCastException.\n+     * Note that in both cases, the ClassCastException is in the call site, not in this method.\n+     * </p>\n+     * \n+     * @param inputStream\n+     *            the serialized object input stream, must not be null\n      * @return the deserialized object\n-     * @throws IllegalArgumentException if {@code inputStream} is {@code null}\n-     * @throws SerializationException (runtime) if the serialization fails\n+     * @throws IllegalArgumentException\n+     *             if {@code inputStream} is {@code null}\n+     * @throws SerializationException\n+     *             (runtime) if the serialization fails\n      */\n     @SuppressWarnings(\"unchecked\")\n     // Don't warn about \"(T) deserialize\" because we want the avoid type casting call sites.\n-    // If the call site incorrectly types the return value, a ClassCastException is thrown.\n-    // Without Generics in this declaration, the call site must type cast and can cause the same ClassCastException.\n     public static <T> T deserialize(InputStream inputStream) {\n         if (inputStream == null) {\n             throw new IllegalArgumentException(\"The InputStream must not be null\");\n     }\n \n     /**\n-     * <p>Deserializes a single {@code Object} from an array of bytes.</p>\n-     *\n-     * @param objectData  the serialized object, must not be null\n+     * <p>\n+     * Deserializes a single {@code Object} from an array of bytes.\n+     * </p>\n+     * \n+     * <p>\n+     * If the call site incorrectly types the return value, a {@link ClassCastException} is thrown from the call site.\n+     * Without Generics in this declaration, the call site must type cast and can cause the same ClassCastException.\n+     * Note that in both cases, the ClassCastException is in the call site, not in this method.\n+     * </p>\n+     * \n+     * @param objectData\n+     *            the serialized object, must not be null\n      * @return the deserialized object\n-     * @throws IllegalArgumentException if {@code objectData} is {@code null}\n-     * @throws SerializationException (runtime) if the serialization fails\n+     * @throws IllegalArgumentException\n+     *             if {@code objectData} is {@code null}\n+     * @throws SerializationException\n+     *             (runtime) if the serialization fails\n      */\n     @SuppressWarnings(\"unchecked\")\n     // Don't warn about \"(T) deserialize\" because we want the avoid type casting call sites.\n-    // If the call site incorrectly types the return value, a ClassCastException is thrown.\n-    // Without Generics in this declaration, the call site must type cast and can cause the same ClassCastException.\n     public static <T> T deserialize(byte[] objectData) {\n         if (objectData == null) {\n             throw new IllegalArgumentException(\"The byte[] must not be null\");", "timestamp": 1333745825, "metainfo": ""}