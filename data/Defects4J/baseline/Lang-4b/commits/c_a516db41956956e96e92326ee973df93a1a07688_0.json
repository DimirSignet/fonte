{"sha": "a516db41956956e96e92326ee973df93a1a07688", "log": "Use lowercase presentation for hex values as it is done in the JDK. Use JDK functionality where available.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Conversion.java\n+++ b/src/main/java/org/apache/commons/lang3/Conversion.java\n      * @return an int equals to <code>hexDigit</code>\n      */\n     public static int hexDigitToInt(char hexDigit) {\n-        switch (hexDigit) {\n-        case '0':\n-            return 0;\n-        case '1':\n-            return 1;\n-        case '2':\n-            return 2;\n-        case '3':\n-            return 3;\n-        case '4':\n-            return 4;\n-        case '5':\n-            return 5;\n-        case '6':\n-            return 6;\n-        case '7':\n-            return 7;\n-        case '8':\n-            return 8;\n-        case '9':\n-            return 9;\n-        case 'a':// fall through\n-        case 'A':\n-            return 10;\n-        case 'b':// fall through\n-        case 'B':\n-            return 11;\n-        case 'c':// fall through\n-        case 'C':\n-            return 12;\n-        case 'd':// fall through\n-        case 'D':\n-            return 13;\n-        case 'e':// fall through\n-        case 'E':\n-            return 14;\n-        case 'f':// fall through\n-        case 'F':\n-            return 15;\n-        default:\n+        final int digit = Character.digit(hexDigit, 16);\n+        if (digit < 0) { \n             throw new IllegalArgumentException(\"Cannot interpret '\"\n                 + hexDigit\n                 + \"' as a hexadecimal digit\");\n         }\n+        return digit;\n     }\n \n     /**\n         if (src.length > srcPos + 3 && src[srcPos + 3]) {\n             if (src.length > srcPos + 2 && src[srcPos + 2]) {\n                 if (src.length > srcPos + 1 && src[srcPos + 1]) {\n-                    if (src[srcPos]) return 'F';\n-                    else return 'E';\n+                    if (src[srcPos]) return 'f';\n+                    else return 'e';\n                 } else {\n-                    if (src[srcPos]) return 'D';\n-                    else return 'C';\n+                    if (src[srcPos]) return 'd';\n+                    else return 'c';\n                 }\n             } else {\n                 if (src.length > srcPos + 1 && src[srcPos + 1]) {\n-                    if (src[srcPos]) return 'B';\n-                    else return 'A';\n+                    if (src[srcPos]) return 'b';\n+                    else return 'a';\n                 } else {\n                     if (src[srcPos]) return '9';\n                     else return '8';\n         if (src[srcPos + 3]) {\n             if (src[srcPos + 2]) {\n                 if (src[srcPos + 1]) {\n-                    if (src[srcPos]) return 'F';\n+                    if (src[srcPos]) return 'f';\n                     else return '7';\n                 } else {\n-                    if (src[srcPos]) return 'B';\n+                    if (src[srcPos]) return 'b';\n                     else return '3';\n                 }\n             } else {\n                 if (src[srcPos + 1]) {\n-                    if (src[srcPos]) return 'D';\n+                    if (src[srcPos]) return 'd';\n                     else return '5';\n                 } else {\n                     if (src[srcPos]) return '9';\n         } else {\n             if (src[srcPos + 2]) {\n                 if (src[srcPos + 1]) {\n-                    if (src[srcPos]) return 'E';\n+                    if (src[srcPos]) return 'e';\n                     else return '6';\n                 } else {\n-                    if (src[srcPos]) return 'A';\n+                    if (src[srcPos]) return 'a';\n                     else return '2';\n                 }\n             } else {\n                 if (src[srcPos + 1]) {\n-                    if (src[srcPos]) return 'C';\n+                    if (src[srcPos]) return 'c';\n                     else return '4';\n                 } else {\n                     if (src[srcPos]) return '8';\n         if (src[srcPos]) {\n             if (src.length > srcPos + 1 && src[srcPos + 1]) {\n                 if (src.length > srcPos + 2 && src[srcPos + 2]) {\n-                    if (src.length > srcPos + 3 && src[srcPos + 3]) return 'F';\n-                    else return 'E';\n+                    if (src.length > srcPos + 3 && src[srcPos + 3]) return 'f';\n+                    else return 'e';\n                 } else {\n-                    if (src.length > srcPos + 3 && src[srcPos + 3]) return 'D';\n-                    else return 'C';\n+                    if (src.length > srcPos + 3 && src[srcPos + 3]) return 'd';\n+                    else return 'c';\n                 }\n             } else {\n                 if (src.length > srcPos + 2 && src[srcPos + 2]) {\n-                    if (src.length > srcPos + 3 && src[srcPos + 3]) return 'B';\n-                    else return 'A';\n+                    if (src.length > srcPos + 3 && src[srcPos + 3]) return 'b';\n+                    else return 'a';\n                 } else {\n                     if (src.length > srcPos + 3 && src[srcPos + 3]) return '9';\n                     else return '8';\n      * @return a hexadecimal digit representing the 4 lsb of <code>nibble</code>\n      */\n     public static char intToHexDigit(int nibble) {\n-        switch (nibble) {\n-        case 0x0:\n-            return '0';\n-        case 0x1:\n-            return '1';\n-        case 0x2:\n-            return '2';\n-        case 0x3:\n-            return '3';\n-        case 0x4:\n-            return '4';\n-        case 0x5:\n-            return '5';\n-        case 0x6:\n-            return '6';\n-        case 0x7:\n-            return '7';\n-        case 0x8:\n-            return '8';\n-        case 0x9:\n-            return '9';\n-        case 0xA:\n-            return 'A';\n-        case 0xB:\n-            return 'B';\n-        case 0xC:\n-            return 'C';\n-        case 0xD:\n-            return 'D';\n-        case 0xE:\n-            return 'E';\n-        case 0xF:\n-            return 'F';\n-        default:\n+        char c = Character.forDigit(nibble, 16);\n+        if (c == Character.MIN_VALUE) {\n             throw new IllegalArgumentException(\"nibble value not between 0 and 15: \" + nibble);\n         }\n+        return c;\n     }\n \n     /**\n         case 0x2:\n             return '4';\n         case 0x3:\n-            return 'C';\n+            return 'c';\n         case 0x4:\n             return '2';\n         case 0x5:\n-            return 'A';\n+            return 'a';\n         case 0x6:\n             return '6';\n         case 0x7:\n-            return 'E';\n+            return 'e';\n         case 0x8:\n             return '1';\n         case 0x9:\n         case 0xA:\n             return '5';\n         case 0xB:\n-            return 'D';\n+            return 'd';\n         case 0xC:\n             return '3';\n         case 0xD:\n-            return 'B';\n+            return 'b';\n         case 0xE:\n             return '7';\n         case 0xF:\n-            return 'F';\n+            return 'f';\n         default:\n             throw new IllegalArgumentException(\"nibble value not between 0 and 15: \" + nibble);\n         }\n--- a/src/test/java/org/apache/commons/lang3/ConversionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ConversionTest.java\n         assertEquals(14, Conversion.hexDigitToInt('e'));\n         assertEquals(15, Conversion.hexDigitToInt('F'));\n         assertEquals(15, Conversion.hexDigitToInt('f'));\n+        try {\n+            Conversion.hexDigitToInt('G');\n+            fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n+        } catch (final IllegalArgumentException e) {\n+            // OK\n+        }\n     }\n \n     /**\n         assertEquals(0x7, Conversion.hexDigitM0ToInt('e'));\n         assertEquals(0xF, Conversion.hexDigitM0ToInt('F'));\n         assertEquals(0xF, Conversion.hexDigitM0ToInt('f'));\n+        try {\n+            Conversion.hexDigitM0ToInt('G');\n+            fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n+        } catch (final IllegalArgumentException e) {\n+            // OK\n+        }\n     }\n \n     /**\n             new boolean[]{true, true, true, true}, Conversion.hexDigitToBools('F'));\n         assertBoolArrayEquals(\n             new boolean[]{true, true, true, true}, Conversion.hexDigitToBools('f'));\n+        try {\n+            Conversion.hexDigitToBools('G');\n+            fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n+        } catch (final IllegalArgumentException e) {\n+            // OK\n+        }\n     }\n \n     /**\n             new boolean[]{true, true, true, true}, Conversion.hexDigitM0ToBools('F'));\n         assertBoolArrayEquals(\n             new boolean[]{true, true, true, true}, Conversion.hexDigitM0ToBools('f'));\n+        try {\n+            Conversion.hexDigitM0ToBools('G');\n+            fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n+        } catch (final IllegalArgumentException e) {\n+            // OK\n+        }\n     }\n \n     /**\n         assertEquals('7', Conversion.boolsToHexDigit(new boolean[]{true, true, true, false}));\n         assertEquals('8', Conversion.boolsToHexDigit(new boolean[]{false, false, false, true}));\n         assertEquals('9', Conversion.boolsToHexDigit(new boolean[]{true, false, false, true}));\n-        assertEquals('A', Conversion.boolsToHexDigit(new boolean[]{false, true, false, true}));\n-        assertEquals('B', Conversion.boolsToHexDigit(new boolean[]{true, true, false, true}));\n-        assertEquals('C', Conversion.boolsToHexDigit(new boolean[]{false, false, true, true}));\n-        assertEquals('D', Conversion.boolsToHexDigit(new boolean[]{true, false, true, true}));\n-        assertEquals('E', Conversion.boolsToHexDigit(new boolean[]{false, true, true, true}));\n-        assertEquals('F', Conversion.boolsToHexDigit(new boolean[]{true, true, true, true}));\n+        assertEquals('a', Conversion.boolsToHexDigit(new boolean[]{false, true, false, true}));\n+        assertEquals('b', Conversion.boolsToHexDigit(new boolean[]{true, true, false, true}));\n+        assertEquals('c', Conversion.boolsToHexDigit(new boolean[]{false, false, true, true}));\n+        assertEquals('d', Conversion.boolsToHexDigit(new boolean[]{true, false, true, true}));\n+        assertEquals('e', Conversion.boolsToHexDigit(new boolean[]{false, true, true, true}));\n+        assertEquals('f', Conversion.boolsToHexDigit(new boolean[]{true, true, true, true}));\n+        assertEquals('1', Conversion.boolsToHexDigit(new boolean[]{true}));\n+        assertEquals('f', Conversion.boolsToHexDigit(new boolean[]{true, true, true, true, true}));\n+        try {\n+            assertEquals('0', Conversion.boolsToHexDigit(new boolean[]{}));\n+            fail(\"Thrown \" + ArrayIndexOutOfBoundsException.class.getName() + \" expected\");\n+        } catch (final ArrayIndexOutOfBoundsException e) {\n+            // OK\n+        }\n     }\n \n     /**\n         assertEquals('5', Conversion.boolsToHexDigit(longArray, 0));\n         assertEquals('2', Conversion.boolsToHexDigit(longArray, 1));\n         assertEquals('9', Conversion.boolsToHexDigit(longArray, 2));\n-        assertEquals('C', Conversion.boolsToHexDigit(longArray, 3));\n+        assertEquals('c', Conversion.boolsToHexDigit(longArray, 3));\n         assertEquals('6', Conversion.boolsToHexDigit(longArray, 4));\n         assertEquals('3', Conversion.boolsToHexDigit(longArray, 5));\n         assertEquals('1', Conversion.boolsToHexDigit(longArray, 6));\n         assertEquals(\n             '9', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, false, false, true}));\n         assertEquals(\n-            'A', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, false, true, false}));\n-        assertEquals(\n-            'B', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, false, true, true}));\n-        assertEquals(\n-            'C', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, false, false}));\n-        assertEquals(\n-            'D', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, false, true}));\n-        assertEquals(\n-            'E', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, true, false}));\n-        assertEquals(\n-            'F', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, true, true}));\n+            'a', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, false, true, false}));\n+        assertEquals(\n+            'b', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, false, true, true}));\n+        assertEquals(\n+            'c', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, false, false}));\n+        assertEquals(\n+            'd', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, false, true}));\n+        assertEquals(\n+            'e', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, true, false}));\n+        assertEquals(\n+            'f', Conversion.boolsToHexDigitM0_4bits(new boolean[]{true, true, true, true}));\n     }\n \n     /**\n         // assertEquals('3', Conversion.boolsToHexDigitM0(shortArray,1));\n         // assertEquals('1', Conversion.boolsToHexDigitM0(shortArray,2));\n         boolean[] shortArray = new boolean[]{true, true, false, true};\n-        assertEquals('D', Conversion.boolsToHexDigitM0_4bits(shortArray, 0));\n+        assertEquals('d', Conversion.boolsToHexDigitM0_4bits(shortArray, 0));\n         boolean[] longArray = new boolean[]{true, false, true, false, false, true, true};\n-        assertEquals('A', Conversion.boolsToHexDigitM0_4bits(longArray, 0));\n+        assertEquals('a', Conversion.boolsToHexDigitM0_4bits(longArray, 0));\n         assertEquals('4', Conversion.boolsToHexDigitM0_4bits(longArray, 1));\n         assertEquals('9', Conversion.boolsToHexDigitM0_4bits(longArray, 2));\n         assertEquals('3', Conversion.boolsToHexDigitM0_4bits(longArray, 3));\n         // assertEquals('1', Conversion.boolsToHexDigitM0(longArray,6));\n         boolean[] maxLengthArray = new boolean[]{\n             true, false, true, false, false, true, true, true};\n-        assertEquals('A', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 0));\n+        assertEquals('a', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 0));\n         assertEquals('4', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 1));\n         assertEquals('9', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 2));\n         assertEquals('3', Conversion.boolsToHexDigitM0_4bits(maxLengthArray, 3));\n         // assertEquals('1', Conversion.boolsToHexDigitM0(longArray,7));\n         boolean[] javaDocCheck = new boolean[]{\n             true, false, false, true, true, false, true, false};\n-        assertEquals('D', Conversion.boolsToHexDigitM0_4bits(javaDocCheck, 3));\n+        assertEquals('d', Conversion.boolsToHexDigitM0_4bits(javaDocCheck, 3));\n \n     }\n \n         assertEquals(\n             '9', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, false, false, true}));\n         assertEquals(\n-            'A', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, false, true, false}));\n-        assertEquals(\n-            'B', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, false, true, true}));\n-        assertEquals(\n-            'C', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, false, false}));\n-        assertEquals(\n-            'D', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, false, true}));\n-        assertEquals(\n-            'E', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, true, false}));\n-        assertEquals('F', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, true, true}));\n+            'a', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, false, true, false}));\n+        assertEquals(\n+            'b', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, false, true, true}));\n+        assertEquals(\n+            'c', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, false, false}));\n+        assertEquals(\n+            'd', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, false, true}));\n+        assertEquals(\n+            'e', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, true, false}));\n+        assertEquals('f', Conversion.boolsBeM0ToHexDigit(new boolean[]{true, true, true, true}));\n         assertEquals(\n             '4',\n             Conversion.boolsBeM0ToHexDigit(new boolean[]{\n         assertEquals('5', Conversion.boolsBeM0ToHexDigit(shortArray2, 0));\n         assertEquals('2', Conversion.boolsBeM0ToHexDigit(shortArray2, 1));\n         assertEquals('9', Conversion.boolsBeM0ToHexDigit(shortArray2, 2));\n-        assertEquals('C', Conversion.boolsBeM0ToHexDigit(shortArray2, 3));\n-        assertEquals('E', Conversion.boolsBeM0ToHexDigit(shortArray2, 4));\n+        assertEquals('c', Conversion.boolsBeM0ToHexDigit(shortArray2, 3));\n+        assertEquals('e', Conversion.boolsBeM0ToHexDigit(shortArray2, 4));\n         assertEquals('7', Conversion.boolsBeM0ToHexDigit(shortArray2, 5));\n         assertEquals('3', Conversion.boolsBeM0ToHexDigit(shortArray2, 6));\n         assertEquals('1', Conversion.boolsBeM0ToHexDigit(shortArray2, 7));\n         assertEquals('5', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 0));\n         assertEquals('2', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 1));\n         assertEquals('9', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 2));\n-        assertEquals('C', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 3));\n-        assertEquals('E', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 4));\n+        assertEquals('c', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 3));\n+        assertEquals('e', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 4));\n         assertEquals('7', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 5));\n-        assertEquals('B', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 6));\n+        assertEquals('b', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 6));\n         assertEquals('5', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 7));\n \n-        assertEquals('A', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 8));\n+        assertEquals('a', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 8));\n         assertEquals('5', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 9));\n         assertEquals('2', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 10));\n         assertEquals('9', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 11));\n-        assertEquals('C', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 12));\n+        assertEquals('c', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 12));\n         assertEquals('6', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 13));\n         assertEquals('3', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 14));\n         assertEquals('1', Conversion.boolsBeM0ToHexDigit(multiBytesArray, 15));\n         assertEquals('7', Conversion.intToHexDigit(7));\n         assertEquals('8', Conversion.intToHexDigit(8));\n         assertEquals('9', Conversion.intToHexDigit(9));\n-        assertEquals('A', Conversion.intToHexDigit(10));\n-        assertEquals('B', Conversion.intToHexDigit(11));\n-        assertEquals('C', Conversion.intToHexDigit(12));\n-        assertEquals('D', Conversion.intToHexDigit(13));\n-        assertEquals('E', Conversion.intToHexDigit(14));\n-        assertEquals('F', Conversion.intToHexDigit(15));\n+        assertEquals('a', Conversion.intToHexDigit(10));\n+        assertEquals('b', Conversion.intToHexDigit(11));\n+        assertEquals('c', Conversion.intToHexDigit(12));\n+        assertEquals('d', Conversion.intToHexDigit(13));\n+        assertEquals('e', Conversion.intToHexDigit(14));\n+        assertEquals('f', Conversion.intToHexDigit(15));\n+        try {\n+            Conversion.intToHexDigit(16);\n+            fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n+        } catch (final IllegalArgumentException e) {\n+            // OK\n+        }\n     }\n \n     /**\n         assertEquals('0', Conversion.intToHexDigitM0(0));\n         assertEquals('8', Conversion.intToHexDigitM0(1));\n         assertEquals('4', Conversion.intToHexDigitM0(2));\n-        assertEquals('C', Conversion.intToHexDigitM0(3));\n+        assertEquals('c', Conversion.intToHexDigitM0(3));\n         assertEquals('2', Conversion.intToHexDigitM0(4));\n-        assertEquals('A', Conversion.intToHexDigitM0(5));\n+        assertEquals('a', Conversion.intToHexDigitM0(5));\n         assertEquals('6', Conversion.intToHexDigitM0(6));\n-        assertEquals('E', Conversion.intToHexDigitM0(7));\n+        assertEquals('e', Conversion.intToHexDigitM0(7));\n         assertEquals('1', Conversion.intToHexDigitM0(8));\n         assertEquals('9', Conversion.intToHexDigitM0(9));\n         assertEquals('5', Conversion.intToHexDigitM0(10));\n-        assertEquals('D', Conversion.intToHexDigitM0(11));\n+        assertEquals('d', Conversion.intToHexDigitM0(11));\n         assertEquals('3', Conversion.intToHexDigitM0(12));\n-        assertEquals('B', Conversion.intToHexDigitM0(13));\n+        assertEquals('b', Conversion.intToHexDigitM0(13));\n         assertEquals('7', Conversion.intToHexDigitM0(14));\n-        assertEquals('F', Conversion.intToHexDigitM0(15));\n+        assertEquals('f', Conversion.intToHexDigitM0(15));\n+        try {\n+            Conversion.intToHexDigitM0(16);\n+            fail(\"Thrown \" + IllegalArgumentException.class.getName() + \" expected\");\n+        } catch (final IllegalArgumentException e) {\n+            // OK\n+        }\n     }\n \n     static String dbgPrint(boolean[] src) {\n         assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 100, \"\", 0, 0));\n         assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 0, \"\", 100, 0));\n         assertEquals(\n-            \"FFFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 0));\n-        assertEquals(\n-            \"3FFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDE3L, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 1));\n-        assertEquals(\n-            \"FEFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 2));\n-        assertEquals(\n-            \"FEDCFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 4));\n-        assertEquals(\n-            \"FEDCBA098765432FFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 15));\n-        assertEquals(\n-            \"FEDCBA0987654321FFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 16));\n-        assertEquals(\n-            \"FFF3FFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDE3L, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 1));\n-        assertEquals(\n-            \"FFFFEFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 2));\n-        assertEquals(\n-            \"FFFFEDCFFFFFFFFFFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 4));\n-        assertEquals(\n-            \"FFFFEDCBA098765432FFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 15));\n-        assertEquals(\n-            \"FFFFEDCBA0987654321FFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 16));\n-        assertEquals(\n-            \"7FFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 1, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 1));\n-        assertEquals(\n-            \"BFFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 2, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 1));\n-        assertEquals(\n-            \"FFFDB975121FCA86420FFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 3, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 16));\n-        // assertEquals(\"FFFFFFFFFFFFFFFFFFFFFFFF\",Conversion.longToHexs(0x1234567890ABCDEFL,4,\"FFFFFFFFFFFFFFFFFFFFFFFF\",3,16));//rejected\n+            \"ffffffffffffffffffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 0));\n+        assertEquals(\n+            \"3fffffffffffffffffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDE3L, 0, \"ffffffffffffffffffffffff\", 0, 1));\n+        assertEquals(\n+            \"feffffffffffffffffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 2));\n+        assertEquals(\n+            \"fedcffffffffffffffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 4));\n+        assertEquals(\n+            \"fedcba098765432fffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 15));\n+        assertEquals(\n+            \"fedcba0987654321ffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 0, 16));\n+        assertEquals(\n+            \"fff3ffffffffffffffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDE3L, 0, \"ffffffffffffffffffffffff\", 3, 1));\n+        assertEquals(\n+            \"ffffefffffffffffffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 2));\n+        assertEquals(\n+            \"ffffedcfffffffffffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 4));\n+        assertEquals(\n+            \"ffffedcba098765432ffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 15));\n+        assertEquals(\n+            \"ffffedcba0987654321fffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 0, \"ffffffffffffffffffffffff\", 3, 16));\n+        assertEquals(\n+            \"7fffffffffffffffffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 1, \"ffffffffffffffffffffffff\", 0, 1));\n+        assertEquals(\n+            \"bfffffffffffffffffffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 2, \"ffffffffffffffffffffffff\", 0, 1));\n+        assertEquals(\n+            \"fffdb975121fca86420fffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 3, \"ffffffffffffffffffffffff\", 3, 16));\n+        // assertEquals(\"ffffffffffffffffffffffff\",Conversion.longToHexs(0x1234567890ABCDEFL,4,\"ffffffffffffffffffffffff\",3,16));//rejected\n         // by assertion\n         assertEquals(\n-            \"FFFEDCBA0987654321FFFFFF\",\n-            Conversion.longToHexs(0x1234567890ABCDEFL, 4, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 15));\n+            \"fffedcba0987654321ffffff\",\n+            Conversion.longToHexs(0x1234567890ABCDEFL, 4, \"ffffffffffffffffffffffff\", 3, 15));\n     }\n \n     /**\n         assertEquals(\"\", Conversion.intToHexs(0x00000000, 100, \"\", 0, 0));\n         assertEquals(\"\", Conversion.intToHexs(0x00000000, 0, \"\", 100, 0));\n         assertEquals(\n-            \"FFFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 0));\n-        assertEquals(\n-            \"3FFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDE3, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 1));\n-        assertEquals(\n-            \"FEFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 2));\n-        assertEquals(\n-            \"FEDCFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 4));\n-        assertEquals(\n-            \"FEDCBA0FFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 7));\n-        assertEquals(\n-            \"FEDCBA09FFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 8));\n-        assertEquals(\n-            \"FFF3FFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDE3, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 1));\n-        assertEquals(\n-            \"FFFFEFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 2));\n-        assertEquals(\n-            \"FFFFEDCFFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 4));\n-        assertEquals(\n-            \"FFFFEDCBA0FFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 7));\n-        assertEquals(\n-            \"FFFFEDCBA09FFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 8));\n-        assertEquals(\n-            \"7FFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 1, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 1));\n-        assertEquals(\n-            \"BFFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 2, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 1));\n-        assertEquals(\n-            \"FFFDB97512FFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 3, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 8));\n-        // assertEquals(\"FFFFFFFFFFFFFFFFFFFFFFFF\",Conversion.intToHexs(0x90ABCDEF,\n-        // 4,\"FFFFFFFFFFFFFFFFFFFFFFFF\",3,8));//rejected by assertion\n-        assertEquals(\n-            \"FFFEDCBA09FFFFFFFFFFFFFF\",\n-            Conversion.intToHexs(0x90ABCDEF, 4, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 7));\n+            \"ffffffffffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 0));\n+        assertEquals(\n+            \"3fffffffffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDE3, 0, \"ffffffffffffffffffffffff\", 0, 1));\n+        assertEquals(\n+            \"feffffffffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 2));\n+        assertEquals(\n+            \"fedcffffffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 4));\n+        assertEquals(\n+            \"fedcba0fffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 7));\n+        assertEquals(\n+            \"fedcba09ffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 0, 8));\n+        assertEquals(\n+            \"fff3ffffffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDE3, 0, \"ffffffffffffffffffffffff\", 3, 1));\n+        assertEquals(\n+            \"ffffefffffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 2));\n+        assertEquals(\n+            \"ffffedcfffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 4));\n+        assertEquals(\n+            \"ffffedcba0ffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 7));\n+        assertEquals(\n+            \"ffffedcba09fffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 0, \"ffffffffffffffffffffffff\", 3, 8));\n+        assertEquals(\n+            \"7fffffffffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 1, \"ffffffffffffffffffffffff\", 0, 1));\n+        assertEquals(\n+            \"bfffffffffffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 2, \"ffffffffffffffffffffffff\", 0, 1));\n+        assertEquals(\n+            \"fffdb97512ffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 3, \"ffffffffffffffffffffffff\", 3, 8));\n+        // assertEquals(\"ffffffffffffffffffffffff\",Conversion.intToHexs(0x90ABCDEF,\n+        // 4,\"ffffffffffffffffffffffff\",3,8));//rejected by assertion\n+        assertEquals(\n+            \"fffedcba09ffffffffffffff\",\n+            Conversion.intToHexs(0x90ABCDEF, 4, \"ffffffffffffffffffffffff\", 3, 7));\n     }\n \n     /**\n         assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 100, \"\", 0, 0));\n         assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 0, \"\", 100, 0));\n         assertEquals(\n-            \"FFFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 0));\n-        assertEquals(\n-            \"3FFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDE3, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 1));\n-        assertEquals(\n-            \"FEFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 2));\n-        assertEquals(\n-            \"FEDFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 3));\n-        assertEquals(\n-            \"FEDCFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 4));\n-        assertEquals(\n-            \"FFF3FFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDE3, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 1));\n-        assertEquals(\n-            \"FFFFEFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDEF, 0, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 2));\n-        assertEquals(\n-            \"7FFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDEF, 1, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 1));\n-        assertEquals(\n-            \"BFFFFFFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDEF, 2, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 0, 1));\n-        assertEquals(\n-            \"FFFDB9FFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDEF, 3, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 4));\n-        // assertEquals(\"FFFFFFFFFFFFFFFFFFFFFFFF\",Conversion.shortToHexs((short)0xCDEF,\n-        // 4,\"FFFFFFFFFFFFFFFFFFFFFFFF\",3,4));//rejected by assertion\n-        assertEquals(\n-            \"FFFEDCFFFFFFFFFFFFFFFFFF\",\n-            Conversion.shortToHexs((short)0xCDEF, 4, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 3));\n+            \"ffffffffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 0));\n+        assertEquals(\n+            \"3fffffffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDE3, 0, \"ffffffffffffffffffffffff\", 0, 1));\n+        assertEquals(\n+            \"feffffffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 2));\n+        assertEquals(\n+            \"fedfffffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 3));\n+        assertEquals(\n+            \"fedcffffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 0, 4));\n+        assertEquals(\n+            \"fff3ffffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDE3, 0, \"ffffffffffffffffffffffff\", 3, 1));\n+        assertEquals(\n+            \"ffffefffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDEF, 0, \"ffffffffffffffffffffffff\", 3, 2));\n+        assertEquals(\n+            \"7fffffffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDEF, 1, \"ffffffffffffffffffffffff\", 0, 1));\n+        assertEquals(\n+            \"bfffffffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDEF, 2, \"ffffffffffffffffffffffff\", 0, 1));\n+        assertEquals(\n+            \"fffdb9ffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDEF, 3, \"ffffffffffffffffffffffff\", 3, 4));\n+        // assertEquals(\"ffffffffffffffffffffffff\",Conversion.shortToHexs((short)0xCDEF,\n+        // 4,\"ffffffffffffffffffffffff\",3,4));//rejected by assertion\n+        assertEquals(\n+            \"fffedcffffffffffffffffff\",\n+            Conversion.shortToHexs((short)0xCDEF, 4, \"ffffffffffffffffffffffff\", 3, 3));\n     }\n \n     /**\n         assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 100, \"\", 0, 0));\n         assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 0, \"\", 100, 0));\n         assertEquals(\"00000\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 0, 0));\n-        assertEquals(\"F0000\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 0, 1));\n-        assertEquals(\"FE000\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 0, 2));\n-        assertEquals(\"000F0\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 3, 1));\n-        assertEquals(\"000FE\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 3, 2));\n+        assertEquals(\"f0000\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 0, 1));\n+        assertEquals(\"fe000\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 0, 2));\n+        assertEquals(\"000f0\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 3, 1));\n+        assertEquals(\"000fe\", Conversion.byteToHexs((byte)0xEF, 0, \"00000\", 3, 2));\n         assertEquals(\"70000\", Conversion.byteToHexs((byte)0xEF, 1, \"00000\", 0, 1));\n-        assertEquals(\"B0000\", Conversion.byteToHexs((byte)0xEF, 2, \"00000\", 0, 1));\n-        assertEquals(\"000DF\", Conversion.byteToHexs((byte)0xEF, 3, \"00000\", 3, 2));\n+        assertEquals(\"b0000\", Conversion.byteToHexs((byte)0xEF, 2, \"00000\", 0, 1));\n+        assertEquals(\"000df\", Conversion.byteToHexs((byte)0xEF, 3, \"00000\", 3, 2));\n         // assertEquals(\"00000\",Conversion.byteToHexs((byte)0xEF, 4,\"00000\",3,2));//rejected by\n         // assertion\n-        assertEquals(\"000E0\", Conversion.byteToHexs((byte)0xEF, 4, \"00000\", 3, 1));\n+        assertEquals(\"000e0\", Conversion.byteToHexs((byte)0xEF, 4, \"00000\", 3, 1));\n     }\n \n     /**", "timestamp": 1349201573, "metainfo": ""}