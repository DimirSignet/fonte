{"sha": "b219cb01d051252ed0998f7783cd51b68252db28", "log": "Moving away from testing with java.awt code because on OS X it kicks off a Java UI window, also causing Gump to fail when running headless. See: http://mail-archives.apache.org/mod_mbox/commons-dev/201011.mbox/%3C87lj4p1ekq.fsf@v35516.1blu.de%3E and its replies  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n \n package org.apache.commons.lang3.event;\n \n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n+import java.beans.PropertyVetoException;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.VetoableChangeListener;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.ObjectOutputStream;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n \n import junit.framework.TestCase;\n {\n     public void testAddNullListener()\n     {\n-        EventListenerSupport<ActionListener> listenerSupport = EventListenerSupport.create(ActionListener.class);\n+        EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n         try\n         {\n             listenerSupport.addListener(null);\n \n     public void testRemoveNullListener()\n     {\n-        EventListenerSupport<ActionListener> listenerSupport = EventListenerSupport.create(ActionListener.class);\n+        EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n         try\n         {\n             listenerSupport.removeListener(null);\n         }\n     }\n \n-    public void testEventDispatchOrder()\n-    {\n-        EventListenerSupport<ActionListener> listenerSupport = EventListenerSupport.create(ActionListener.class);\n-        final List<ActionListener> calledListeners = new ArrayList<ActionListener>();\n-\n-        final ActionListener listener1 = createListener(calledListeners);\n-        final ActionListener listener2 = createListener(calledListeners);\n+    public void testEventDispatchOrder() throws PropertyVetoException\n+    {\n+        EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n+        final List<VetoableChangeListener> calledListeners = new ArrayList<VetoableChangeListener>();\n+\n+        final VetoableChangeListener listener1 = createListener(calledListeners);\n+        final VetoableChangeListener listener2 = createListener(calledListeners);\n         listenerSupport.addListener(listener1);\n         listenerSupport.addListener(listener2);\n-        listenerSupport.fire().actionPerformed(new ActionEvent(\"Hello\", 0, \"Hello\"));\n+        listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), \"Day\", 4, 5));\n         assertEquals(calledListeners.size(), 2);\n         assertSame(calledListeners.get(0), listener1);\n         assertSame(calledListeners.get(1), listener2);\n         }\n     }\n \n-    public void testRemoveListenerDuringEvent()\n-    {\n-        final EventListenerSupport<ActionListener> listenerSupport = EventListenerSupport.create(ActionListener.class);\n+    public void testRemoveListenerDuringEvent() throws PropertyVetoException\n+    {\n+        final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n         for (int i = 0; i < 10; ++i)\n         {\n             addDeregisterListener(listenerSupport);\n         }\n         assertEquals(listenerSupport.getListenerCount(), 10);\n-        listenerSupport.fire().actionPerformed(new ActionEvent(\"Hello\", 0, \"Hello\"));\n+        listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), \"Day\", 4, 5));\n         assertEquals(listenerSupport.getListenerCount(), 0);\n     }\n \n     public void testGetListeners() {\n-        final EventListenerSupport<ActionListener> listenerSupport = EventListenerSupport.create(ActionListener.class);\n-\n-        ActionListener[] listeners = listenerSupport.getListeners();\n+        final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n+\n+        VetoableChangeListener[] listeners = listenerSupport.getListeners();\n         assertEquals(0, listeners.length);\n-        assertEquals(ActionListener.class, listeners.getClass().getComponentType());\n-        ActionListener[] empty = listeners;\n+        assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());\n+        VetoableChangeListener[] empty = listeners;\n         //for fun, show that the same empty instance is used \n         assertSame(empty, listenerSupport.getListeners());\n \n-        ActionListener listener1 = EasyMock.createNiceMock(ActionListener.class);\n+        VetoableChangeListener listener1 = EasyMock.createNiceMock(VetoableChangeListener.class);\n         listenerSupport.addListener(listener1);\n         assertEquals(1, listenerSupport.getListeners().length);\n-        ActionListener listener2 = EasyMock.createNiceMock(ActionListener.class);\n+        VetoableChangeListener listener2 = EasyMock.createNiceMock(VetoableChangeListener.class);\n         listenerSupport.addListener(listener2);\n         assertEquals(2, listenerSupport.getListeners().length);\n         listenerSupport.removeListener(listener1);\n         assertSame(empty, listenerSupport.getListeners());\n     }\n \n-    public void testSerialization() throws IOException, ClassNotFoundException {\n-        EventListenerSupport<ActionListener> listenerSupport = EventListenerSupport.create(ActionListener.class);\n-        listenerSupport.addListener(new ActionListener() {\n+    public void testSerialization() throws IOException, ClassNotFoundException, PropertyVetoException {\n+        EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n+        listenerSupport.addListener(new VetoableChangeListener() {\n             \n-            public void actionPerformed(ActionEvent e) {\n+            public void vetoableChange(PropertyChangeEvent e) {\n             }\n         });\n-        listenerSupport.addListener(EasyMock.createNiceMock(ActionListener.class));\n+        listenerSupport.addListener(EasyMock.createNiceMock(VetoableChangeListener.class));\n \n         //serialize:\n         ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n \n         //deserialize:\n         @SuppressWarnings(\"unchecked\")\n-        EventListenerSupport<ActionListener> deserializedListenerSupport = (EventListenerSupport<ActionListener>) new ObjectInputStream(\n+        EventListenerSupport<VetoableChangeListener> deserializedListenerSupport = (EventListenerSupport<VetoableChangeListener>) new ObjectInputStream(\n                 new ByteArrayInputStream(outputStream.toByteArray())).readObject();\n \n         //make sure we get a listener array back, of the correct component type, and that it contains only the serializable mock\n-        ActionListener[] listeners = deserializedListenerSupport.getListeners();\n-        assertEquals(ActionListener.class, listeners.getClass().getComponentType());\n+        VetoableChangeListener[] listeners = deserializedListenerSupport.getListeners();\n+        assertEquals(VetoableChangeListener.class, listeners.getClass().getComponentType());\n         assertEquals(1, listeners.length);\n \n         //now verify that the mock still receives events; we can infer that the proxy was correctly reconstituted\n-        ActionListener listener = listeners[0];\n-        ActionEvent evt = new ActionEvent(new Object(), 666, \"sit\");\n-        listener.actionPerformed(evt);\n+        VetoableChangeListener listener = listeners[0];\n+        PropertyChangeEvent evt = new PropertyChangeEvent(new Date(), \"Day\", 7, 9);\n+        listener.vetoableChange(evt);\n         EasyMock.replay(listener);\n-        deserializedListenerSupport.fire().actionPerformed(evt);\n+        deserializedListenerSupport.fire().vetoableChange(evt);\n         EasyMock.verify(listener);\n \n         //remove listener and verify we get an empty array of listeners\n         assertEquals(0, deserializedListenerSupport.getListeners().length);\n     }\n \n-    public void testSubclassInvocationHandling() {\n+    public void testSubclassInvocationHandling() throws PropertyVetoException {\n \n         @SuppressWarnings(\"serial\")\n-        EventListenerSupport<ActionListener> eventListenerSupport = new EventListenerSupport<ActionListener>(\n-                ActionListener.class) {\n+        EventListenerSupport<VetoableChangeListener> eventListenerSupport = new EventListenerSupport<VetoableChangeListener>(\n+                VetoableChangeListener.class) {\n             protected java.lang.reflect.InvocationHandler createInvocationHandler() {\n                 return new ProxyInvocationHandler() {\n                     /**\n                     @Override\n                     public Object invoke(Object proxy, Method method, Object[] args)\n                             throws Throwable {\n-                        return \"actionPerformed\".equals(method.getName())\n-                                && \"ignore\".equals(((ActionEvent) args[0]).getActionCommand()) ? null\n+                        return \"vetoableChange\".equals(method.getName())\n+                                && \"Hour\".equals(((PropertyChangeEvent) args[0]).getPropertyName()) ? null\n                                 : super.invoke(proxy, method, args);\n                     }\n                 };\n             };\n         };\n \n-        ActionListener listener = EasyMock.createNiceMock(ActionListener.class);\n+        VetoableChangeListener listener = EasyMock.createNiceMock(VetoableChangeListener.class);\n         eventListenerSupport.addListener(listener);\n-        Object source = new Object();\n-        ActionEvent ignore = new ActionEvent(source, 0, \"ignore\");\n-        ActionEvent respond = new ActionEvent(source, 1, \"respond\");\n-        listener.actionPerformed(respond);\n+        Object source = new Date();\n+        PropertyChangeEvent ignore = new PropertyChangeEvent(source, \"Hour\", 5, 6);\n+        PropertyChangeEvent respond = new PropertyChangeEvent(source, \"Day\", 6, 7);\n+        listener.vetoableChange(respond);\n         EasyMock.replay(listener);\n-        eventListenerSupport.fire().actionPerformed(ignore);\n-        eventListenerSupport.fire().actionPerformed(respond);\n+        eventListenerSupport.fire().vetoableChange(ignore);\n+        eventListenerSupport.fire().vetoableChange(respond);\n         EasyMock.verify(listener);\n     }\n \n-    private void addDeregisterListener(final EventListenerSupport<ActionListener> listenerSupport)\n-    {\n-        listenerSupport.addListener(new ActionListener()\n-        {\n-            public void actionPerformed(ActionEvent e)\n+    private void addDeregisterListener(final EventListenerSupport<VetoableChangeListener> listenerSupport)\n+    {\n+        listenerSupport.addListener(new VetoableChangeListener()\n+        {\n+            public void vetoableChange(PropertyChangeEvent e)\n             {\n                 listenerSupport.removeListener(this);\n             }\n         });\n     }\n \n-    private ActionListener createListener(final List<ActionListener> calledListeners)\n-    {\n-        return new ActionListener()\n-        {\n-            public void actionPerformed(ActionEvent e)\n+    private VetoableChangeListener createListener(final List<VetoableChangeListener> calledListeners)\n+    {\n+        return new VetoableChangeListener()\n+        {\n+            public void vetoableChange(PropertyChangeEvent e)\n             {\n                 calledListeners.add(this);\n             }\n--- a/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n  */\n package org.apache.commons.lang3.event;\n \n-import java.awt.event.ActionEvent;\n-import java.awt.event.ActionListener;\n+import javax.naming.event.ObjectChangeListener;\n import java.beans.PropertyChangeEvent;\n import java.beans.PropertyChangeListener;\n import java.beans.VetoableChangeListener;\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n+import java.util.Date;\n import java.util.Map;\n import java.util.TreeMap;\n \n     {\n         final PropertyChangeSource src = new PropertyChangeSource();\n         EventCountingInvociationHandler handler = new EventCountingInvociationHandler();\n-        ActionListener listener = handler.createListener(ActionListener.class);\n+        ObjectChangeListener listener = handler.createListener(ObjectChangeListener.class);\n         try\n         {\n-            EventUtils.addEventListener(src, ActionListener.class, listener);\n+            EventUtils.addEventListener(src, ObjectChangeListener.class, listener);\n             fail(\"Should not be allowed to add a listener to an object that doesn't support it.\");\n         }\n         catch (IllegalArgumentException e)\n         {\n-            assertEquals(\"Class \" + src.getClass().getName() + \" does not have a public add\" + ActionListener.class.getSimpleName() + \" method which takes a parameter of type \" + ActionListener.class.getName() + \".\", e.getMessage());\n+            assertEquals(\"Class \" + src.getClass().getName() + \" does not have a public add\" + ObjectChangeListener.class.getSimpleName() + \" method which takes a parameter of type \" + ObjectChangeListener.class.getName() + \".\", e.getMessage());\n         }\n     }\n \n         final ExceptionEventSource src = new ExceptionEventSource();\n         try\n         {\n-            EventUtils.addEventListener(src, ActionListener.class, new ActionListener()\n+            EventUtils.addEventListener(src, PropertyChangeListener.class, new PropertyChangeListener()\n             {\n-                public void actionPerformed(ActionEvent e)\n+                public void propertyChange(PropertyChangeEvent e)\n                 {\n                     // Do nothing!\n                 }\n         final EventCounter counter = new EventCounter();\n         EventUtils.bindEventsToMethod(counter, \"eventOccurred\", src, MultipleEventListener.class, \"event1\");\n         assertEquals(0, counter.getCount());\n-        src.listeners.fire().event1(new ActionEvent(src, ActionEvent.ACTION_PERFORMED, \"event1\"));\n-        assertEquals(1, counter.getCount());\n-        src.listeners.fire().event2(new ActionEvent(src, ActionEvent.ACTION_PERFORMED, \"event2\"));\n+        src.listeners.fire().event1(new PropertyChangeEvent(new Date(), \"Day\", 0, 1));\n+        assertEquals(1, counter.getCount());\n+        src.listeners.fire().event2(new PropertyChangeEvent(new Date(), \"Day\", 1, 2));\n         assertEquals(1, counter.getCount());\n     }\n \n     public static interface MultipleEventListener\n     {\n-        public void event1(ActionEvent e);\n-\n-        public void event2(ActionEvent e);\n+        public void event1(PropertyChangeEvent e);\n+\n+        public void event2(PropertyChangeEvent e);\n     }\n \n     public static class EventCounter\n \n     public static class ExceptionEventSource\n     {\n-        public void addActionListener(ActionListener listener)\n+        public void addPropertyChangeListener(PropertyChangeListener listener)\n         {\n             throw new RuntimeException();\n         }", "timestamp": 1291187896, "metainfo": ""}