{"sha": "d3931874702f875d6af3088d719da58a3c16e710", "log": "Changing the way we handle listener list.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n+++ b/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n+import java.util.LinkedList;\n import java.util.List;\n-import java.util.concurrent.CopyOnWriteArrayList;\n \n /**\n  * An EventListenerSupport object can be used to manage a list of event listeners of a particular type.\n  */\n public class EventListenerSupport<L>\n {\n-    private final List<L> listeners;\n+    private final List<L> listeners = new LinkedList<L>();\n     private final L proxy;\n \n     /**\n      */\n     public EventListenerSupport(Class<L> listenerInterface, ClassLoader classLoader)\n     {\n-        listeners = new CopyOnWriteArrayList<L>();\n         proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader, new Class[]{listenerInterface},\n                 new ProxyInvocationHandler()));\n     }", "timestamp": 1279800247, "metainfo": ""}