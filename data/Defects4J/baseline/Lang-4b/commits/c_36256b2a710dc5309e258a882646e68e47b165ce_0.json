{"sha": "36256b2a710dc5309e258a882646e68e47b165ce", "log": "Improve and fix javadoc.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Conversion.java\n+++ b/src/main/java/org/apache/commons/lang3/Conversion.java\n \n     /**\n      * <p>\n-     * Converts a hexadecimal digit into binary using the default (Lsb0) bit ordering.\n+     * Converts a hexadecimal digit into binary (represented as boolean array) using the default (Lsb0) bit ordering.\n      * </p>\n      * <p>\n      * '1' is converted as follow: (1, 0, 0, 0)\n \n     /**\n      * <p>\n-     * Converts a hexadecimal digit into binary using the Msb0 bit ordering.\n+     * Converts a hexadecimal digit into binary (represented as boolean array) using the Msb0 bit ordering.\n      * </p>\n      * <p>\n      * '1' is converted as follow: (0, 0, 0, 1)\n \n     /**\n      * <p>\n-     * Converts a boolean array to a hexadecimal digit using the default (Lsb0) bit ordering.\n+     * Converts binary (represented as boolean array) to a hexadecimal digit using the default (Lsb0) bit ordering.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '1'\n      * </p>\n      * \n-     * @param src the boolean array to convert\n+     * @param src the binary to convert\n      * @return a hexadecimal digit representing the selected bits\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n \n     /**\n      * <p>\n-     * Converts a boolean array to a hexadecimal digit using the default (Lsb0) bit ordering.\n+     * Converts binary (represented as boolean array) to a hexadecimal digit using the default (Lsb0) bit ordering.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '1'\n      * </p>\n      * \n-     * @param src the boolean array to convert\n+     * @param src the binary to convert\n      * @param srcPos the position of the lsb to start the conversion\n      * @return a hexadecimal digit representing the selected bits\n      * @throws IllegalArgumentException if {@code src} is empty\n \n     /**\n      * <p>\n-     * Converts a boolean array to a hexadecimal digit using the Msb0 bit ordering.\n+     * Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit ordering.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '8'\n      * </p>\n      * \n-     * @param src the boolean array to convert\n+     * @param src the binary to convert\n      * @return a hexadecimal digit representing the selected bits\n      * @throws IllegalArgumentException if {@code src} is empty, {@code src.length < 4} or\n      *             {@code src.length > 8}\n \n     /**\n      * <p>\n-     * Converts a boolean array to a hexadecimal digit using the Msb0 bit ordering.\n+     * Converts binary (represented as boolean array) to a hexadecimal digit using the Msb0 bit ordering.\n      * </p>\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '8' (1,0,0,1,1,0,1,0) with srcPos = 3 is converted\n      * to 'D'\n      * </p>\n      * \n-     * @param src the boolean array to convert\n+     * @param src the binary to convert\n      * @param srcPos the position of the lsb to start the conversion\n      * @return a hexadecimal digit representing the selected bits\n      * @throws IllegalArgumentException if {@code src} is empty, {@code src.length > 8} or\n \n     /**\n      * <p>\n-     * Converts the first 4 bits of a boolean array in big endian Msb0 bit ordering to a\n+     * Converts the first 4 bits of a binary (represented as boolean array) in big endian Msb0 bit ordering to a\n      * hexadecimal digit.\n      * </p>\n      * <p>\n      * to '4'\n      * </p>\n      * \n-     * @param src the boolean array to convert\n+     * @param src the binary to convert\n      * @return a hexadecimal digit representing the selected bits\n      * @throws IllegalArgumentException if {@code src} is empty\n      * @throws NullPointerException if {@code src} is {@code null}\n \n     /**\n      * <p>\n-     * Converts a part of a boolean array in big endian Msb0 bit ordering to a hexadecimal\n+     * Converts a binary (represented as boolean array) in big endian Msb0 bit ordering to a hexadecimal\n      * digit.\n      * </p>\n      * <p>\n      * 0,0,0,1,0,1,0,0) with srcPos = 2 is converted to '5'\n      * </p>\n      * \n-     * @param src the boolean array to convert\n+     * @param src the binary to convert\n      * @param srcPos the position of the lsb to start the conversion\n      * @return a hexadecimal digit representing the selected bits\n      * @throws IllegalArgumentException if {@code src} is empty\n      * 10 returns 'A' and so on...\n      * </p>\n      * \n-     * @param nibble the int to convert\n+     * @param nibble the 4 bits to convert\n      * @return a hexadecimal digit representing the 4 lsb of {@code nibble}\n      * @throws IllegalArgumentException if {@code nibble < 0} or {@code nibble > 15}\n      */\n      * 10 returns '5' and so on...\n      * </p>\n      * \n-     * @param nibble the int to convert\n+     * @param nibble the 4 bits to convert\n      * @return a hexadecimal digit representing the 4 lsb of {@code nibble}\n      * @throws IllegalArgumentException if {@code nibble < 0} or {@code nibble > 15}\n      */\n      * bit ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the short array to convert\n      * @param srcPos the position in {@code src}, in short unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination long\n      * bit ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the short array to convert\n      * @param srcPos the position in {@code src}, in short unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination int\n      * bit ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the byte array to convert\n      * @param srcPos the position in {@code src}, in byte unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination long\n      * ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the byte array to convert\n      * @param srcPos the position in {@code src}, in byte unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination int\n      * bit ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the byte array to convert\n      * @param srcPos the position in {@code src}, in byte unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination short\n      * bit ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the hex string to convert\n      * @param srcPos the position in {@code src}, in Char unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination long\n      * ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the hex string to convert\n      * @param srcPos the position in {@code src}, in Char unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination int\n      * bit ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the hex string to convert\n      * @param srcPos the position in {@code src}, in Char unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination short\n      * bit ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the hex string to convert\n      * @param srcPos the position in {@code src}, in Char unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination byte\n \n     /**\n      * <p>\n-     * Converts an array of boolean into a long using the default (little endian, Lsb0) byte and\n-     * bit ordering.\n-     * </p>\n-     * \n-     * @param src the int array to convert\n+     * Converts binary (represented as boolean array) into a long using the default (little endian, Lsb0) byte and\n+     * bit ordering.\n+     * </p>\n+     * \n+     * @param src the binary to convert\n      * @param srcPos the position in {@code src}, in boolean unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination long\n \n     /**\n      * <p>\n-     * Converts an array of boolean into a int using the default (little endian, Lsb0) byte and\n-     * bit ordering.\n-     * </p>\n-     * \n-     * @param src the int array to convert\n+     * Converts binary (represented as boolean array) into a int using the default (little endian, Lsb0) byte and\n+     * bit ordering.\n+     * </p>\n+     * \n+     * @param src the binary to convert\n      * @param srcPos the position in {@code src}, in boolean unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination int\n \n     /**\n      * <p>\n-     * Converts an array of boolean into a short using the default (little endian, Lsb0) byte\n+     * Converts binary (represented as boolean array) into a short using the default (little endian, Lsb0) byte\n      * and bit ordering.\n      * </p>\n      * \n-     * @param src the int array to convert\n+     * @param src the binary to convert\n      * @param srcPos the position in {@code src}, in boolean unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination short\n \n     /**\n      * <p>\n-     * Converts an array of boolean into a byte using the default (little endian, Lsb0) byte and\n-     * bit ordering.\n-     * </p>\n-     * \n-     * @param src the int array to convert\n+     * Converts binary (represented as boolean array) into a byte using the default (little endian, Lsb0) byte and\n+     * bit ordering.\n+     * </p>\n+     * \n+     * @param src the binary to convert\n      * @param srcPos the position in {@code src}, in boolean unit, from where to start the\n      *            conversion\n      * @param dstInit initial value of the destination byte\n      * bit ordering.\n      * </p>\n      * \n-     * @param src the source byte array\n+     * @param src the byte array to convert\n      * @param srcPos the position in {@code src} where to copy the result from\n      * @return a UUID\n      * @throws NullPointerException if {@code src} is {@code null}", "timestamp": 1349302869, "metainfo": ""}