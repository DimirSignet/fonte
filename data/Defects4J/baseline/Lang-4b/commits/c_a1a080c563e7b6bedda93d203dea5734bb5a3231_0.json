{"sha": "a1a080c563e7b6bedda93d203dea5734bb5a3231", "log": "and adding an overloaded method for uncapitalize to maintain symmetry   ", "commit": "\n--- a/src/java/org/apache/commons/lang/WordUtils.java\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n  * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: WordUtils.java,v 1.11 2004/06/03 03:40:28 bayard Exp $\n+ * @version $Id: WordUtils.java,v 1.12 2004/06/03 03:49:47 bayard Exp $\n  */\n public class WordUtils {\n \n      * @see #capitalize(String)\n      */\n     public static String uncapitalize(String str) {\n-        int strLen;\n-        if (str == null || (strLen = str.length()) == 0) {\n+        return uncapitalize(str, null);\n+    }\n+\n+    public static String uncapitalize(String str, char[] delimiters) {\n+        if (str == null || str.length() == 0) {\n             return str;\n         }\n+        int strLen = str.length();\n+\n+        int delimitersLen = 0;\n+        if(delimiters != null) {\n+            delimitersLen = delimiters.length;\n+        }\n+\n         StringBuffer buffer = new StringBuffer(strLen);\n-        boolean whitespace = true;\n+        boolean uncapitalizeNext = true;\n         for (int i = 0; i < strLen; i++) {\n             char ch = str.charAt(i);\n-            if (Character.isWhitespace(ch)) {\n+\n+            boolean isDelimiter = false;\n+            if(delimiters == null) {\n+                isDelimiter = Character.isWhitespace(ch);\n+            } else {\n+                for(int j=0; j < delimitersLen; j++) {\n+                    if(ch == delimiters[j]) {\n+                        isDelimiter = true;\n+                        break;\n+                    }\n+                }\n+            }\n+\n+            if (isDelimiter) {\n                 buffer.append(ch);\n-                whitespace = true;\n-            } else if (whitespace) {\n+                uncapitalizeNext = true;\n+            } else if (uncapitalizeNext) {\n                 buffer.append(Character.toLowerCase(ch));\n-                whitespace = false;\n+                uncapitalizeNext = false;\n             } else {\n                 buffer.append(ch);\n             }\n--- a/src/test/org/apache/commons/lang/WordUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/WordUtilsTest.java\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Henri Yandell\n  * @author Stephen Colebourne\n- * @version $Id: WordUtilsTest.java,v 1.6 2004/06/03 03:40:28 bayard Exp $\n+ * @version $Id: WordUtilsTest.java,v 1.7 2004/06/03 03:49:47 bayard Exp $\n  */\n public class WordUtilsTest extends TestCase {\n \n         assertEquals(\"i aM hERE 123\", WordUtils.uncapitalize(\"I AM HERE 123\") );\n     }\n     \n+    public void testUncapitalizeWithDelimiters_String() {\n+        assertEquals(null, WordUtils.uncapitalize(null, null));\n+        assertEquals(\"\", WordUtils.uncapitalize(\"\", new char[0]));\n+        assertEquals(\"  \", WordUtils.uncapitalize(\"  \", new char[0]));\n+        \n+        char[] chars = new char[] { '-', '+', ' ', '@' };\n+        assertEquals(\"i\", WordUtils.uncapitalize(\"I\", chars) );\n+        assertEquals(\"i\", WordUtils.uncapitalize(\"i\", chars) );\n+        assertEquals(\"i am-here+123\", WordUtils.uncapitalize(\"i am-here+123\", chars) );\n+        assertEquals(\"i+am here-123\", WordUtils.uncapitalize(\"I+Am Here-123\", chars) );\n+        assertEquals(\"i-am+hERE 123\", WordUtils.uncapitalize(\"i-am+HERE 123\", chars) );\n+        assertEquals(\"i aM-hERE+123\", WordUtils.uncapitalize(\"I AM-HERE+123\", chars) );\n+    }\n+    \n     public void testSwapCase_String() {\n         assertEquals(null, WordUtils.swapCase(null));\n         assertEquals(\"\", WordUtils.swapCase(\"\"));", "timestamp": 1086234587, "metainfo": ""}