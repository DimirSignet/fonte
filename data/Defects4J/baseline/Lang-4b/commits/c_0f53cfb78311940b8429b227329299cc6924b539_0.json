{"sha": "0f53cfb78311940b8429b227329299cc6924b539", "log": "Add missing @Override markers  ", "commit": "\n--- a/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/BooleanUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/CharRangeTest.java\n+++ b/src/test/org/apache/commons/lang/CharRangeTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/CharSetTest.java\n+++ b/src/test/org/apache/commons/lang/CharSetTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/CharSetUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/CharSetUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/CharUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/CharUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/EntitiesPerformanceTest.java\n+++ b/src/test/org/apache/commons/lang/EntitiesPerformanceTest.java\n         return suite;\n     }\n \n+    @Override\n     public void setUp() {\n         if (stringWithUnicode == null) {\n             StringBuffer buf = new StringBuffer(STRING_LENGTH);\n--- a/src/test/org/apache/commons/lang/EntitiesTest.java\n+++ b/src/test/org/apache/commons/lang/EntitiesTest.java\n \n     Entities entities;\n \n+    @Override\n     public void setUp()\n     {\n         entities = new Entities();\n--- a/src/test/org/apache/commons/lang/LocaleUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/LocaleUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     public void setUp() throws Exception {\n         super.setUp();\n \n--- a/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n     /**\n      * Set up instance variables required by this test case.\n      */\n+    @Override\n     public void setUp() {\n     }\n     \n     /**\n      * Tear down instance variables required by this test case.\n      */\n+    @Override\n     public void tearDown() {\n     }\n     \n         double sumSq = 0.0d;\n         double dev = 0.0d;\n         for (int i = 0; i < observed.length; i++) {\n-            dev = (double) (observed[i] - expected[i]);\n-            sumSq += dev * dev / (double) expected[i];\n+            dev = (observed[i] - expected[i]);\n+            sumSq += dev * dev / expected[i];\n         }\n         return sumSq;\n     }           \n--- a/src/test/org/apache/commons/lang/SerializationUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SerializationUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n \n         iMap.put(\"BAR\", iInteger);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n         // forces an IOException when the ObjectOutputStream is created, to test not closing the stream\n         // in the finally block\n         OutputStream streamTest = new OutputStream() {\n+            @Override\n             public void write(int arg0) throws IOException {\n                 throw new IOException(SERIALIZE_IO_EXCEPTION_MESSAGE);\n             }\n--- a/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsEqualsIndexOfTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/StringUtilsIsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsIsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/SystemUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/SystemUtilsTest.java\n         return OS_NAME.startsWith(osNamePrefix) && OS_VERSION.startsWith(osVersionPrefix);\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/ValidateTest.java\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n         public TestObject(int a) {\n             this.a = a;\n         }\n+        @Override\n         public boolean equals(Object o) {\n             if (o == this) {\n                 return true;\n             super(a);\n             this.b = b;\n         }\n+        @Override\n         public boolean equals(Object o) {\n             if (o == this) {\n                 return true;\n--- a/src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n--- a/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n         public TestObject(int a) {\n             this.a = a;\n         }\n+        @Override\n         public boolean equals(Object o) {\n             if (o == null) { return false; }\n             if (o == this) { return true; }\n             super(a);\n             this.b = b;\n         }\n+        @Override\n         public boolean equals(Object o) {\n             if (o == null) { return false; }\n             if (o == this) { return true; }\n             this.a = a;\n         }\n \n+        @Override\n         public boolean equals(Object o) {\n             if (o == this)\n                 return true;\n             this.b = b;\n         }\n \n+        @Override\n         public boolean equals(Object o) {\n             if (o == this)\n                 return true;\n--- a/src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/HashCodeBuilderAndEqualsBuilderTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n--- a/src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n--- a/src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ShortPrefixToStringStyleTest.java\n     private final Integer base = new Integer(5);\n     private final String baseStr = \"Integer\";\n     \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.SHORT_PREFIX_STYLE);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n--- a/src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.SIMPLE_STYLE);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n         ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n--- a/src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         ToStringBuilder.setDefaultStyle(STYLE);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n         ToStringBuilder.setDefaultStyle(STYLE);\n--- a/src/test/org/apache/commons/lang/builder/ToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringStyleTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n--- a/src/test/org/apache/commons/lang/exception/ExceptionUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTest.java\n         return new TestSuite(ExceptionUtilsTest.class);\n     }\n \n+    @Override\n     public void setUp() {\n         withoutCause = createExceptionWithoutCause();\n         nested = new NestableException(withoutCause);\n         cyclicCause = new ExceptionWithCause(a);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         withoutCause = null;\n         nested = null;\n             setCause(cause);\n         }\n \n+        @Override\n         public Throwable getCause() {\n             return cause;\n         }\n--- a/src/test/org/apache/commons/lang/exception/NestableDelegateTest.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableDelegateTest.java\n     /**\n      * Set up instance variables required by this test case.\n      */\n+    @Override\n     public void setUp()\n     {\n         lineSeparator = System.getProperty(\"line.separator\");\n     /**\n      * Tear down instance variables required by this test case.\n      */\n+    @Override\n     public void tearDown()\n     {\n         lineSeparator = null;\n     /**\n      * @see Nestable#getCause()\n      */\n+    @Override\n     public Throwable getCause()\n     {\n         return cause;\n     /**\n      * @see Nestable#getCause()\n      */\n+    @Override\n     public Throwable getCause()\n     {\n         return cause;\n      * Returns the hard-coded string \"ThrowableNestable exception\" for this\n      * test.\n      */\n+    @Override\n     public String getMessage()\n     {\n         return \"ThrowableNestable exception\";\n     /**\n      * @see Nestable#getCause()\n      */\n+    @Override\n     public Throwable getCause()\n     {\n         return cause;\n      * Empty method to satisfy the implemented interface. Does nothing\n      * in this test.\n      */\n+    @Override\n     public void printStackTrace(PrintWriter out)\n     {\n     }\n      * For this test, returns \"ThrowableNestable exception (\" appended to the\n      * message of the cause specified in the constructor.\n      */\n+    @Override\n     public String getMessage()\n     {\n         return \"ThrowableNestedNestable exception (\" + cause.getMessage() + \")\";\n     /**\n      * @see Nestable#getCause()\n      */\n+    @Override\n     public Throwable getCause()\n     {\n         return cause;\n      * For this test, writes the string\n      * \"ThrowableNestedNestable stack trace place-holder\" to the print writer.\n      */\n+    @Override\n     public void printStackTrace(PrintWriter out)\n     {\n         out.println(\"ThrowableNestedNestable stack trace place-holder\");\n--- a/src/test/org/apache/commons/lang/exception/NestableErrorTest.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableErrorTest.java\n     /**\n      * Sets up instance variables required by this test case.\n      */\n+    @Override\n     public void setUp()\n     {\n     }\n     /**\n      * Tears down instance variables required by this test case.\n      */\n+    @Override\n     public void tearDown()\n     {\n     }\n     /**\n      * @see AbstractNestableTest#getNestable()\n      */\n+    @Override\n     public Nestable getNestable()\n     {\n         return new NestableError();\n     /**\n      * @see AbstractNestableTest#getNestable(Nestable)\n      */\n+    @Override\n     public Nestable getNestable(Nestable n)\n     {\n         return new NestableError((Throwable) n);\n     /**\n      * @see AbstractNestableTest#getNestable(String)\n      */\n+    @Override\n     public Nestable getNestable(String msg)\n     {\n         return new NestableError(msg);\n     /**\n      * @see AbstractNestableTest#getNestable(Throwable)\n      */\n+    @Override\n     public Nestable getNestable(Throwable t)\n     {\n         return new NestableError(t);\n     /**\n      * @see AbstractNestableTest#getNestable(String, Throwable)\n      */\n+    @Override\n     public Nestable getNestable(String msg, Throwable t)\n     {\n         return new NestableError(msg, t);\n     /**\n      * @see AbstractNestableTest#getNestable(String, Nestable)\n      */\n+    @Override\n     public Nestable getNestable(String msg, Nestable n)\n     {\n         return new NestableError(msg, (Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester1(Throwable)\n      */\n+    @Override\n     public Nestable getTester1(Throwable t)\n     {\n         return new NestableErrorTester1(t);\n     /**\n      * @see AbstractNestableTest#getTester1(Nestable)\n      */\n+    @Override\n     public Nestable getTester1(Nestable n)\n     {\n         return new NestableErrorTester1((Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester1(String, Throwable)\n      */\n+    @Override\n     public Nestable getTester1(String msg, Throwable t)\n     {\n         return new NestableErrorTester1(msg, t);\n     /**\n      * @see AbstractNestableTest#getTester1(String, Nestable)\n      */\n+    @Override\n     public Nestable getTester1(String msg, Nestable n)\n     {\n         return new NestableErrorTester1(msg, (Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester1Class()\n      */\n+    @Override\n     public Class getTester1Class()\n     {\n         return NestableErrorTester1.class;\n     /**\n      * @see AbstractNestableTest#getTester2(String, Throwable)\n      */\n+    @Override\n     public Nestable getTester2(String msg, Throwable t)\n     {\n         return new NestableErrorTester2(msg, t);\n     /**\n      * @see AbstractNestableTest#getTester2(String, Nestable)\n      */\n+    @Override\n     public Nestable getTester2(String msg, Nestable n)\n     {\n         return new NestableErrorTester2(msg, (Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester2Class()\n      */\n+    @Override\n     public Class getTester2Class()\n     {\n         return NestableErrorTester2.class;\n     /**\n      * @see AbstractNestableTest#getThrowable(String)\n      */\n+    @Override\n     public Throwable getThrowable(String msg)\n     {\n         return new EOFException(msg);\n     /**\n      * @see AbstractNestableTest#getThrowableClass()\n      */\n+    @Override\n     public Class getThrowableClass()\n     {\n         return EOFException.class;\n     /**\n      * @see AbstractNestableTest#getBaseThrowableClass()\n      */\n+    @Override\n     public Class getBaseThrowableClass()\n     {\n         return Error.class;\n--- a/src/test/org/apache/commons/lang/exception/NestableExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableExceptionTest.java\n     /**\n      * Sets up instance variables required by this test case.\n      */\n+    @Override\n     public void setUp()\n     {\n     }\n     /**\n      * Tears down instance variables required by this test case.\n      */\n+    @Override\n     public void tearDown()\n     {\n     }\n     /**\n      * @see AbstractNestableTest#getNestable()\n      */\n+    @Override\n     public Nestable getNestable()\n     {\n         return new NestableException();\n     /**\n      * @see AbstractNestableTest#getNestable(Nestable)\n      */\n+    @Override\n     public Nestable getNestable(Nestable n)\n     {\n         return new NestableException((Throwable) n);\n     /**\n      * @see AbstractNestableTest#getNestable(String)\n      */\n+    @Override\n     public Nestable getNestable(String msg)\n     {\n         return new NestableException(msg);\n     /**\n      * @see AbstractNestableTest#getNestable(Throwable)\n      */\n+    @Override\n     public Nestable getNestable(Throwable t)\n     {\n         return new NestableException(t);\n     /**\n      * @see AbstractNestableTest#getNestable(String, Throwable)\n      */\n+    @Override\n     public Nestable getNestable(String msg, Throwable t)\n     {\n         return new NestableException(msg, t);\n     /**\n      * @see AbstractNestableTest#getNestable(String, Nestable)\n      */\n+    @Override\n     public Nestable getNestable(String msg, Nestable n)\n     {\n         return new NestableException(msg, (Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester1(Throwable)\n      */\n+    @Override\n     public Nestable getTester1(Throwable t)\n     {\n         return new NestableExceptionTester1(t);\n     /**\n      * @see AbstractNestableTest#getTester1(Nestable)\n      */\n+    @Override\n     public Nestable getTester1(Nestable n)\n     {\n         return new NestableExceptionTester1((Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester1(String, Throwable)\n      */\n+    @Override\n     public Nestable getTester1(String msg, Throwable t)\n     {\n         return new NestableExceptionTester1(msg, t);\n     /**\n      * @see AbstractNestableTest#getTester1(String, Nestable)\n      */\n+    @Override\n     public Nestable getTester1(String msg, Nestable n)\n     {\n         return new NestableExceptionTester1(msg, (Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester1Class()\n      */\n+    @Override\n     public Class getTester1Class()\n     {\n         return NestableExceptionTester1.class;\n     /**\n      * @see AbstractNestableTest#getTester2(String, Throwable)\n      */\n+    @Override\n     public Nestable getTester2(String msg, Throwable t)\n     {\n         return new NestableExceptionTester2(msg, t);\n     /**\n      * @see AbstractNestableTest#getTester2(String, Nestable)\n      */\n+    @Override\n     public Nestable getTester2(String msg, Nestable n)\n     {\n         return new NestableExceptionTester2(msg, (Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester2Class()\n      */\n+    @Override\n     public Class getTester2Class()\n     {\n         return NestableExceptionTester2.class;\n     /**\n      * @see AbstractNestableTest#getThrowable(String)\n      */\n+    @Override\n     public Throwable getThrowable(String msg)\n     {\n         return new EOFException(msg);\n     /**\n      * @see AbstractNestableTest#getThrowableClass()\n      */\n+    @Override\n     public Class getThrowableClass()\n     {\n         return EOFException.class;\n     /**\n      * @see AbstractNestableTest#getBaseThrowableClass()\n      */\n+    @Override\n     public Class getBaseThrowableClass()\n     {\n         return Exception.class;\n--- a/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTest.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableRuntimeExceptionTest.java\n     /**\n      * Sets up instance variables required by this test case.\n      */\n+    @Override\n     public void setUp()\n     {\n     }\n     /**\n      * Tears down instance variables required by this test case.\n      */\n+    @Override\n     public void tearDown()\n     {\n     }\n     /**\n      * @see AbstractNestableTest#getNestable()\n      */\n+    @Override\n     public Nestable getNestable()\n     {\n         return new NestableRuntimeException();\n     /**\n      * @see AbstractNestableTest#getNestable(Nestable)\n      */\n+    @Override\n     public Nestable getNestable(Nestable n)\n     {\n         return new NestableRuntimeException((Throwable) n);\n     /**\n      * @see AbstractNestableTest#getNestable(String)\n      */\n+    @Override\n     public Nestable getNestable(String msg)\n     {\n         return new NestableRuntimeException(msg);\n     /**\n      * @see AbstractNestableTest#getNestable(Throwable)\n      */\n+    @Override\n     public Nestable getNestable(Throwable t)\n     {\n         return new NestableRuntimeException(t);\n     /**\n      * @see AbstractNestableTest#getNestable(String, Throwable)\n      */\n+    @Override\n     public Nestable getNestable(String msg, Throwable t)\n     {\n         return new NestableRuntimeException(msg, t);\n     /**\n      * @see AbstractNestableTest#getNestable(String, Nestable)\n      */\n+    @Override\n     public Nestable getNestable(String msg, Nestable n)\n     {\n         return new NestableRuntimeException(msg, (Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester1(Throwable)\n      */\n+    @Override\n     public Nestable getTester1(Throwable t)\n     {\n         return new NestableRuntimeExceptionTester1(t);\n     /**\n      * @see AbstractNestableTest#getTester1(Nestable)\n      */\n+    @Override\n     public Nestable getTester1(Nestable n)\n     {\n         return new NestableRuntimeExceptionTester1((Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester1(String, Throwable)\n      */\n+    @Override\n     public Nestable getTester1(String msg, Throwable t)\n     {\n         return new NestableRuntimeExceptionTester1(msg, t);\n     /**\n      * @see AbstractNestableTest#getTester1(String, Nestable)\n      */\n+    @Override\n     public Nestable getTester1(String msg, Nestable n)\n     {\n         return new NestableRuntimeExceptionTester1(msg, (Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester1Class()\n      */\n+    @Override\n     public Class getTester1Class()\n     {\n         return NestableRuntimeExceptionTester1.class;\n     /**\n      * @see AbstractNestableTest#getTester2(String, Throwable)\n      */\n+    @Override\n     public Nestable getTester2(String msg, Throwable t)\n     {\n         return new NestableRuntimeExceptionTester2(msg, t);\n     /**\n      * @see AbstractNestableTest#getTester2(String, Nestable)\n      */\n+    @Override\n     public Nestable getTester2(String msg, Nestable n)\n     {\n         return new NestableRuntimeExceptionTester2(msg, (Throwable) n);\n     /**\n      * @see AbstractNestableTest#getTester2Class()\n      */\n+    @Override\n     public Class getTester2Class()\n     {\n         return NestableRuntimeExceptionTester2.class;\n     /**\n      * @see AbstractNestableTest#getThrowable(String)\n      */\n+    @Override\n     public Throwable getThrowable(String msg)\n     {\n         return new EOFException(msg);\n     /**\n      * @see AbstractNestableTest#getThrowableClass()\n      */\n+    @Override\n     public Class getThrowableClass()\n     {\n         return EOFException.class;\n     /**\n      * @see AbstractNestableTest#getBaseThrowableClass()\n      */\n+    @Override\n     public Class getBaseThrowableClass()\n     {\n         return RuntimeException.class;\n--- a/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n     protected Float float21;\n     \n     private static class InnerNumber extends Number {\n+        @Override\n         public double doubleValue() {\n             return 12d;\n         }\n+        @Override\n         public float floatValue() {\n             return 12f;\n         }\n+        @Override\n         public int intValue() {\n             return 12;\n         }\n+        @Override\n         public long longValue() {\n             return 12L;\n         }\n         super(name);\n     }\n \n+    @Override\n     public void setUp() {\n         five = new Integer(5);\n         ten = new Integer(10);\n--- a/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n         return suite;\n     }\n     \n+    @Override\n     public void setUp() {\n         super.setUp();\n         tenToTwenty = new DoubleRange(double10, double20);\n         otherRange = new NumberRange(ten, twenty);\n     }\n \n+    @Override\n     protected Range createRange(Integer integer1, Integer integer2) {\n         return new DoubleRange(integer1, integer2);\n     }\n+    @Override\n     protected Range createRange(Integer integer) {\n         return new NumberRange(integer);\n     }\n         assertEquals(false, tenToTwenty.containsNumber(float21));\n     }\n \n+    @Override\n     public void testToString() {\n         String str = tenToTwenty.toString();\n         assertEquals(\"Range[10.0,20.0]\", str);\n--- a/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n         return suite;\n     }\n     \n+    @Override\n     public void setUp() {\n         super.setUp();\n         tenToTwenty = new FloatRange(float10, float20);\n         otherRange = new NumberRange(ten, twenty);\n     }\n \n+    @Override\n     protected Range createRange(Integer integer1, Integer integer2) {\n         return new FloatRange(integer1, integer2);\n     }\n+    @Override\n     protected Range createRange(Integer integer) {\n         return new NumberRange(integer);\n     }\n         assertEquals(false, tenToTwenty.containsNumber(float21));\n     }\n \n+    @Override\n     public void testToString() {\n         String str = tenToTwenty.toString();\n         assertEquals(\"Range[10.0,20.0]\", str);\n--- a/src/test/org/apache/commons/lang/math/FractionTest.java\n+++ b/src/test/org/apache/commons/lang/math/FractionTest.java\n         return suite;\n     }\n     \n+    @Override\n     public void setUp() {\n     }\n \n--- a/src/test/org/apache/commons/lang/math/IntRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/IntRangeTest.java\n         return suite;\n     }\n     \n+    @Override\n     public void setUp() {\n         super.setUp();\n         tenToTwenty = new IntRange(ten, twenty);\n         otherRange = new NumberRange(ten, twenty);\n     }\n \n+    @Override\n     protected Range createRange(Integer integer1, Integer integer2) {\n         return new IntRange(integer1, integer2);\n     }\n+    @Override\n     protected Range createRange(Integer integer) {\n         return new NumberRange(integer);\n     }\n--- a/src/test/org/apache/commons/lang/math/LongRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/LongRangeTest.java\n         return suite;\n     }\n     \n+    @Override\n     public void setUp() {\n         super.setUp();\n         tenToTwenty = new LongRange(long10, long20);\n         otherRange = new NumberRange(ten, twenty);\n     }\n \n+    @Override\n     protected Range createRange(Integer integer1, Integer integer2) {\n         return new LongRange(integer1, integer2);\n     }\n+    @Override\n     protected Range createRange(Integer integer) {\n         return new NumberRange(integer);\n     }\n--- a/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberRangeTest.java\n         }\n     }\n \n+    @Override\n     protected Range createRange(Integer integer) {\n         return new NumberRange(integer);\n     }\n \n     // --------------------------------------------------------------------------\n \n+    @Override\n     protected Range createRange(Integer integer1, Integer integer2) {\n         return new NumberRange(integer1, integer2);\n     }\n \n+    @Override\n     public void setUp() {\n         super.setUp();\n         tenToTwenty = new NumberRange(ten, twenty);\n--- a/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/RandomUtilsTest.java\n         super(name);\n     }\n     \n+    @Override\n     public void setUp() {\n     }\n     \n--- a/src/test/org/apache/commons/lang/math/RangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/RangeTest.java\n             this.max = max;\n         }\n \n+        @Override\n         public boolean containsNumber(Number number) {\n             if (number.byteValue() >= min && number.byteValue() <= max) {\n                 return true;\n             return false;\n         }\n \n+        @Override\n         public Number getMaximumNumber() {\n             return new Byte(max);\n         }\n \n+        @Override\n         public Number getMinimumNumber() {\n             return new Byte(min);\n         }\n         super(name);\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/reflect/ConstructorUtilsTest.java\n             toString = \"(Object)\";\n         }\n \n+        @Override\n         public String toString() {\n             return toString;\n         }\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         classCache.clear();\n--- a/src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/reflect/FieldUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         StaticContainer.reset();\n--- a/src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/reflect/MethodUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         testBean = new TestBean();\n--- a/src/test/org/apache/commons/lang/text/CompositeFormatTest.java\n+++ b/src/test/org/apache/commons/lang/text/CompositeFormatTest.java\n     public void testCompositeFormat() {\n \n         Format parser = new Format() {\n+            @Override\n             public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                 throw new UnsupportedOperationException(\"Not implemented\");\n             }\n \n+            @Override\n             public Object parseObject(String source, ParsePosition pos) {\n                 return null;    // do nothing\n             }\n         };\n \n         Format formatter = new Format() {\n+            @Override\n             public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n                 return null;    // do nothing\n             }\n \n+            @Override\n             public Object parseObject(String source, ParsePosition pos) {\n                 throw new UnsupportedOperationException(\"Not implemented\");\n             }\n--- a/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java\n+++ b/src/test/org/apache/commons/lang/text/ExtendedMessageFormatTest.java\n         super(name);\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         registry.put(\"lower\", new LowerCaseFormatFactory());\n         registry.put(\"upper\", new UpperCaseFormatFactory());\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n      * {@link Format} implementation which converts to lower case.\n      */\n     private static class LowerCaseFormat extends Format {\n+        @Override\n         public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n             return toAppendTo.append(((String)obj).toLowerCase());\n         }\n+        @Override\n         public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}\n     }\n \n      * {@link Format} implementation which converts to upper case.\n      */\n     private static class UpperCaseFormat extends Format {\n+        @Override\n         public StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos) {\n             return toAppendTo.append(((String)obj).toUpperCase());\n         }\n+        @Override\n         public Object parseObject(String source, ParsePosition pos) {throw new UnsupportedOperationException();}\n     }\n \n--- a/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderAppendInsertTest.java\n     private static final String SEP = SystemUtils.LINE_SEPARATOR;\n \n     /** Test subclass of Object, with a toString method. */\n-    private static Object FOO = new Object() {\n+    private static final Object FOO = new Object() {\n         @Override\n         public String toString() {\n             return \"foo\";\n         sb.appendln((Object) null);\n         assertEquals(\"\" + SEP, sb.toString());\n \n-        sb.appendln((Object) FOO);\n+        sb.appendln(FOO);\n         assertEquals(SEP + \"foo\" + SEP, sb.toString());\n \n         sb.appendln(new Integer(6));\n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n     }\n \n     static final StrMatcher A_NUMBER_MATCHER = new StrMatcher() {\n+        @Override\n         public int isMatch(char[] buffer, int pos, int bufferStart, int bufferEnd) {\n             if (buffer[pos] == 'A') {\n                 pos++;\n--- a/src/test/org/apache/commons/lang/text/StrLookupTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrLookupTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/text/StrSubstitutorTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrSubstitutorTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n         values = new HashMap();\n         values.put(\"target\", \"lazy dog\");\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n         values = null;\n         Map map = new HashMap();\n         map.put(\"name\", \"commons\");\n         StrSubstitutor sub = new StrSubstitutor(map) {\n+            @Override\n             protected String resolveVariable(String variableName, StrBuilder buf, int startPos, int endPos) {\n                 assertEquals(\"name\", variableName);\n                 assertSame(builder, buf);\n--- a/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n      */\n     public void testCloneNotSupportedException() {\n         Object notCloned = (new StrTokenizer() {\n+            @Override\n             Object cloneReset() throws CloneNotSupportedException {\n                 throw new CloneNotSupportedException(\"test\");\n             }\n     //-----------------------------------------------------------------------\n     public void testTokenizeSubclassInputChange() {\n         StrTokenizer tkn = new StrTokenizer(\"a b c d e\") {\n+            @Override\n             protected List tokenize(char[] chars, int offset, int count) {\n                 return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\n             }\n     //-----------------------------------------------------------------------\n     public void testTokenizeSubclassOutputChange() {\n         StrTokenizer tkn = new StrTokenizer(\"a b c\") {\n+            @Override\n             protected List tokenize(char[] chars, int offset, int count) {\n                 List list = super.tokenize(chars, offset, count);\n                 Collections.reverse(list);\n--- a/src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsFragmentTest.java\n \tprivate Date aDate;\n \tprivate Calendar aCalendar;\n \n-\tprotected void setUp() {\n+\t@Override\n+    protected void setUp() {\n \t\taCalendar = Calendar.getInstance();\n \t\taCalendar.set(2005, months, days, hours, minutes, seconds);\n \t\taCalendar.set(Calendar.MILLISECOND, millis);\n--- a/src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsRoundingTest.java\n \tCalendar januaryOneCalendar;\n \tFastDateFormat fdf = DateFormatUtils.ISO_DATETIME_FORMAT;\n \n-\tprotected void setUp() throws Exception {\n+\t@Override\n+    protected void setUp() throws Exception {\n \t\tsuper.setUp();\n \t\tdateTimeParser = new SimpleDateFormat(\"MMM dd, yyyy H:mm:ss.SSS\", Locale.ENGLISH);\n \t\t\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n \n         TimeZone.setDefault(defaultZone);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n+++ b/src/test/org/apache/commons/lang/time/FastDateFormatTest.java\n         return suite;\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }", "timestamp": 1237039222, "metainfo": ""}