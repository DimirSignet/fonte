{"sha": "c6fc9e0e0b9e21b8e802435aeb0be334c00ea24d", "log": "javadoc refactoring + many @code tags  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n /**\n  * <p>Helper methods for working with {@link Annotation} instances.</p>\n  *\n- * <p>This contains various utility methods that make working with annotations simpler.</p>\n+ * <p>This class contains various utility methods that make working with\n+ * annotations simpler.</p>\n+ *\n+ * <p>{@link Annotation} instances are always proxy objects; unfortunately\n+ * dynamic proxies cannot be depended upon to know how to implement certain\n+ * methods in the same manner as would be done by \"natural\" {@link Annotation}s.\n+ * The methods presented in this class can be used to avoid that possibility. It\n+ * is of course also possible for dynamic proxies to actually delegate their\n+ * e.g. {@link Annotation#equals(Object)}/{@link Annotation#hashCode()}/\n+ * {@link Annotation#toString()} implementations to {@link AnnotationUtils}.</p>\n  *\n  * <p>#ThreadSafe#</p>\n  *\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Checks if two annotations are equal.</p>\n-     *\n-     * <p>Dynamically created {@link Annotation} instances are always proxy\n-     * objects which cannot be depended upon to know how to implement\n-     * {@link Annotation#equals(Object)} correctly.</p>\n-     *\n-     * @param a1 the first Annotation to compare, null returns false unless both are null\n-     * @param a2 the second Annotation to compare, null returns false unless both are null\n-     * @return true if the two annotations are equal or both null\n+     * <p>Checks if two annotations are equal using the criteria for equality\n+     * presented in the {@link Annotation#equals(Object)} API docs. Additionally\n+     * if the <code>javax.enterprise.util.Nonbinding</code> annotation is found\n+     * on the classpath, its implications will be respected:\n+     * <code>Nonbinding</code> members will contribute nothing to the equality\n+     * calculation.</p>\n+     *\n+     * @param a1 the first Annotation to compare, {@code null} returns\n+     * {@code false} unless both are {@code null}\n+     * @param a2 the second Annotation to compare, {@code null} returns\n+     * {@code false} unless both are {@code null}\n+     * @return {@code true} if the two annotations are {@code equal} or both\n+     * {@code null}\n      */\n     public static boolean equals(Annotation a1, Annotation a2) {\n         if (a1 == a2) {\n     /**\n      * <p>Generate a hash code for the given annotation.</p>\n      *\n-     * <p>Dynamically created {@link Annotation} instances are always proxy\n-     * objects which cannot be depended upon to know how to implement\n-     * {@link Annotation#hashCode()} correctly.</p>\n-     *\n-     * @param a the Annotation for a hash code calculation is desired, not null\n+     * @param a the Annotation for a hash code calculation is desired, not\n+     * {@code null}\n      * @return the calculated hash code\n-     * @throws RuntimeException if IllegalAccessException or InvocationTargetException\n-     * or any other Exception is thrown during annotation access\n-     * @throws IllegalStateException if an annotation method invocation returns {@code null}\n+     * @throws RuntimeException if an {@code Exception} is encountered during\n+     * annotation member access\n+     * @throws IllegalStateException if an annotation method invocation returns\n+     * {@code null}\n      */\n     public static int hashCode(Annotation a) {\n         int result = 0;\n      * {@link Annotation#toString()}.</p>\n      *\n      * @param a the annotation of which a string representation is desired\n-     * @return the standard string representation of an annotation, not null\n+     * @return the standard string representation of an annotation, not\n+     * {@code null}\n      */\n     public static String toString(final Annotation a) {\n         ToStringBuilder builder = new ToStringBuilder(a, TO_STRING_STYLE);\n      * <p>Checks if the specified type is permitted as an annotation member.</p>\n      *\n      * <p>The Java language specification only permits certain types to be used\n-     * in annotations. These include {@link String}, {@link Class}, primitive types,\n-     * {@link Annotation}, {@link Enum}, and arrays of these types.</p>\n-     *\n-     * @param type the type to check, null returns false\n-     * @return true if the type is a valid type to use in an annotation\n+     * in annotations. These include {@link String}, {@link Class}, primitive\n+     * types, {@link Annotation}, {@link Enum}, and single-dimensional arrays of\n+     * these types.</p>\n+     *\n+     * @param type the type to check, {@code null}\n+     * @return {@code true} if the type is a valid type to use in an annotation\n      */\n     public static boolean isValidAnnotationMemberType(Class<?> type) {\n         if (type == null) {\n      *\n      * @param componentType the component type of the array\n      * @param o the array\n-     * @return a hash code for this array\n+     * @return a hash code for the specified array\n      */\n     private static int arrayMemberHash(Class<?> componentType, Object o) {\n         if (componentType.equals(Byte.TYPE)) {\n     }\n \n     /**\n-     * Helper method to look for the CDI Nonbinding annotation on an Annotation member.\n+     * Helper method to look for the CDI {@code Nonbinding} annotation on an\n+     * {@link Annotation} member.\n      * @param accessor the accessor method to check\n-     * @return whether the Nonbinding annotation was found\n+     * @return whether the {@code Nonbinding} annotation was found\n      */\n     private static boolean isNonbindingMember(Method accessor) {\n         return NONBINDING_ANNOTATION_TYPE != null", "timestamp": 1300721385, "metainfo": ""}