{"sha": "44df22c5f6e2fb929c145c21b3723a82e266e0bd", "log": "<action issue=\"LANG-858\" type=\"fix\">StringEscapeUtils.escapeJava() and escapeEcmaScript() do not output the escaped surrogate pairs that are Java parsable</action>  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n import org.apache.commons.lang3.text.translate.AggregateTranslator;\n import org.apache.commons.lang3.text.translate.CharSequenceTranslator;\n import org.apache.commons.lang3.text.translate.EntityArrays;\n+import org.apache.commons.lang3.text.translate.JavaUnicodeEscaper;\n import org.apache.commons.lang3.text.translate.LookupTranslator;\n import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;\n import org.apache.commons.lang3.text.translate.OctalUnescaper;\n           }).with(\n             new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE())\n           ).with(\n-            UnicodeEscaper.outsideOf(32, 0x7f) \n+            JavaUnicodeEscaper.outsideOf(32, 0x7f) \n         );\n \n     /**\n                             {\"/\", \"\\\\/\"}\n                       }),\n             new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE()),\n-            UnicodeEscaper.outsideOf(32, 0x7f) \n+            JavaUnicodeEscaper.outsideOf(32, 0x7f) \n         );\n             \n     /**\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/JavaUnicodeEscaper.java\n+package org.apache.commons.lang3.text.translate;\n+\n+/**\n+ * Translates codepoints to their Unicode escaped value suitable for Java source.\n+ * \n+ * @since 3.2\n+ * @version $Id$\n+ */\n+public class JavaUnicodeEscaper extends UnicodeEscaper {\n+\n+    /**\n+     * <p>\n+     * Constructs a <code>JavaUnicodeEscaper</code> above the specified value (exclusive).\n+     * </p>\n+     * \n+     * @param codepoint\n+     *            above which to escape\n+     * @return the newly created {@code UnicodeEscaper} instance\n+     */\n+    public static JavaUnicodeEscaper above(int codepoint) {\n+        return outsideOf(0, codepoint);\n+    }\n+\n+    /**\n+     * <p>\n+     * Constructs a <code>JavaUnicodeEscaper</code> below the specified value (exclusive).\n+     * </p>\n+     * \n+     * @param codepoint\n+     *            below which to escape\n+     * @return the newly created {@code UnicodeEscaper} instance\n+     */\n+    public static JavaUnicodeEscaper below(int codepoint) {\n+        return outsideOf(codepoint, Integer.MAX_VALUE);\n+    }\n+\n+    /**\n+     * <p>\n+     * Constructs a <code>JavaUnicodeEscaper</code> between the specified values (inclusive).\n+     * </p>\n+     * \n+     * @param codepointLow\n+     *            above which to escape\n+     * @param codepointHigh\n+     *            below which to escape\n+     * @return the newly created {@code UnicodeEscaper} instance\n+     */\n+    public static JavaUnicodeEscaper between(int codepointLow, int codepointHigh) {\n+        return new JavaUnicodeEscaper(codepointLow, codepointHigh, true);\n+    }\n+\n+    /**\n+     * <p>\n+     * Constructs a <code>JavaUnicodeEscaper</code> outside of the specified values (exclusive).\n+     * </p>\n+     * \n+     * @param codepointLow\n+     *            below which to escape\n+     * @param codepointHigh\n+     *            above which to escape\n+     * @return the newly created {@code UnicodeEscaper} instance\n+     */\n+    public static JavaUnicodeEscaper outsideOf(int codepointLow, int codepointHigh) {\n+        return new JavaUnicodeEscaper(codepointLow, codepointHigh, false);\n+    }\n+\n+    /**\n+     * <p>\n+     * Constructs a <code>JavaUnicodeEscaper</code> for the specified range. This is the underlying method for the\n+     * other constructors/builders. The <code>below</code> and <code>above</code> boundaries are inclusive when\n+     * <code>between</code> is <code>true</code> and exclusive when it is <code>false</code>.\n+     * </p>\n+     * \n+     * @param below\n+     *            int value representing the lowest codepoint boundary\n+     * @param above\n+     *            int value representing the highest codepoint boundary\n+     * @param between\n+     *            whether to escape between the boundaries or outside them\n+     */\n+    public JavaUnicodeEscaper(int below, int above, boolean between) {\n+        super(below, above, between);\n+    }\n+\n+    /**\n+     * Converts the given codepoint to a hex string of the form {@code \"\\\\uXXXX\\\\uXXXX\"}\n+     * \n+     * @param codePoint\n+     *            a Unicode code point\n+     */\n+    protected String toUtf16Escape(int codepoint) {\n+        char[] surrogatePair = Character.toChars(codepoint);\n+        return \"\\\\u\" + hex(surrogatePair[0]) + \"\\\\u\" + hex(surrogatePair[1]);\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java\n      * @param above int value representing the highest codepoint boundary\n      * @param between whether to escape between the boundaries or outside them\n      */\n-    private UnicodeEscaper(int below, int above, boolean between) {\n+    protected UnicodeEscaper(int below, int above, boolean between) {\n         this.below = below;\n         this.above = above;\n         this.between = between;\n      */\n     @Override\n     public boolean translate(int codepoint, Writer out) throws IOException {\n-        if(between) {\n+        if (between) {\n             if (codepoint < below || codepoint > above) {\n                 return false;\n             }\n \n         // TODO: Handle potential + sign per various Unicode escape implementations\n         if (codepoint > 0xffff) {\n-            // TODO: Figure out what to do. Output as two Unicodes?\n-            //       Does this make this a Java-specific output class?\n-            out.write(\"\\\\u\" + hex(codepoint));\n+            out.write(toUtf16Escape(codepoint));\n         } else if (codepoint > 0xfff) {\n             out.write(\"\\\\u\" + hex(codepoint));\n         } else if (codepoint > 0xff) {\n         }\n         return true;\n     }\n+\n+    protected String toUtf16Escape(int codepoint) {\n+        return \"\\\\u\" + hex(codepoint);\n+    }\n }\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n      * @throws Exception\n      */\n     @Test\n-    @Ignore\n     public void testEscapeSurrogatePairsLang858() throws Exception {\n         assertEquals(\"\\\\uDBFF\\\\uDFFD\", StringEscapeUtils.escapeJava(\"\\uDBFF\\uDFFD\"));       //fail LANG-858\n         assertEquals(\"\\\\uDBFF\\\\uDFFD\", StringEscapeUtils.escapeEcmaScript(\"\\uDBFF\\uDFFD\")); //fail LANG-858", "timestamp": 1353722180, "metainfo": ""}