{"sha": "8a08c1140c3dd8c553629c3bee026b187f6171e2", "log": "Add tests to try and break createNumber exponent handling  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n         // LANG-693\n         assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                     .createNumber(\"\" + Double.MAX_VALUE));\n-        \n+\n         // LANG-822\n         // ensure that the underlying negative number would create a BigDecimal\n         final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n     @Test(expected=NumberFormatException.class)\n     // Check that the code fails to create a valid number when preceeded by -- rather than -\n     public void testCreateNumberFailure_1() {\n-        NumberUtils.createNumber(\"--1.1E-700F\");        \n+        NumberUtils.createNumber(\"--1.1E-700F\");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when both e and E are present (with decimal)\n+    public void testCreateNumberFailure_2() {\n+        NumberUtils.createNumber(\"-1.1E+0-7e00\");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when both e and E are present (no decimal)\n+    public void testCreateNumberFailure_3() {\n+        NumberUtils.createNumber(\"-11E+0-7e00\");\n+    }\n+\n+    @Test(expected=NumberFormatException.class)\n+    // Check that the code fails to create a valid number when both e and E are present (no decimal)\n+    public void testCreateNumberFailure_4() {\n+        NumberUtils.createNumber(\"1eE+00001\");\n     }\n \n     // Tests to show when magnitude causes switch to next Number type\n         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber(\"1.7976931348623157e+308\"));\n         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal)\n         assertEquals(new BigDecimal(\"1.7976931348623159e+308\"), NumberUtils.createNumber(\"1.7976931348623159e+308\"));\n-        \n+\n         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber(\"0x12345678\"));\n         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber(\"0x123456789\"));\n ", "timestamp": 1364401796, "metainfo": ""}