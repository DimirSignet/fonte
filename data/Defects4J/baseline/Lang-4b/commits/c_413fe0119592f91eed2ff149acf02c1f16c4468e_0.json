{"sha": "413fe0119592f91eed2ff149acf02c1f16c4468e", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n       super();\n     }\n \n-    \n+\n     // N.B. Cannot use {@code} to enclose text which includes {}, but <code></code> is OK\n-    \n+\n \n     // Basic methods handling multi-dimensional arrays\n     //-----------------------------------------------------------------------\n     String[] array = ArrayUtils.toArray(\"1\", \"2\");\n     String[] emptyArray = ArrayUtils.&lt;String&gt;toArray();\n      * </pre>\n-     * \n+     *\n      * <p>The method is typically used in scenarios, where the caller itself uses generic types\n      * that have to be combined into an array.</p>\n-     * \n+     *\n      * <p>Note, this method makes only sense to provide arguments of the same type so that the\n      * compiler can deduce the type of the array itself. While it is possible to select the\n      * type explicitly like in\n     public static <T> T[] toArray(final T... items) {\n         return items;\n     }\n-    \n+\n     // Clone\n     //-----------------------------------------------------------------------\n     /**\n      *\n      * <p>This method returns {@code null} for a {@code null} input array.</p>\n      *\n+     * @param <T> the component type of the array\n      * @param array  the array to shallow clone, may be {@code null}\n      * @return the cloned array, {@code null} if {@code null} input\n      */\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * reference to an empty one.</p>\n      *\n      * <p>This method returns an empty array for a {@code null} input array.</p>\n-     * \n-     * <p>As a memory optimizing technique an empty array passed in will be overridden with \n+     *\n+     * <p>As a memory optimizing technique an empty array passed in will be overridden with\n      * the empty {@code public static} references in this class.</p>\n      *\n      * @param array  the array to check for {@code null} or empty\n      * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);\n      * </pre>\n      *\n+     * @param <T> the component type of the array\n      * @param array  the array\n      * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n      *      is promoted to 0, overvalue (&gt;array.length) results\n     /**\n      * <p>Checks if an array of Objects is not empty or not {@code null}.</p>\n      *\n+     * @param <T> the component type of the array\n      * @param array  the array to test\n      * @return {@code true} if the array is not empty or not {@code null}\n      * @since 2.5\n      * ArrayUtils.addAll([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n      * </pre>\n      *\n+     * @param <T> the component type of the array\n      * @param array1  the first array whose elements are added to the new array, may be {@code null}\n      * @param array2  the second array whose elements are added to the new array, may be {@code null}\n      * @return The new array, {@code null} if both arrays are {@code null}.\n              */\n             final Class<?> type2 = array2.getClass().getComponentType();\n             if (!type1.isAssignableFrom(type2)){\n-                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"+type1.getName(), ase);\n+                throw new IllegalArgumentException(\"Cannot store \"+type2.getName()+\" in an array of \"\n+                        +type1.getName(), ase);\n             }\n             throw ase; // No, so rethrow original\n         }\n      * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n      * </pre>\n      *\n+     * @param <T> the component type of the array\n      * @param array  the array to \"add\" the element to, may be {@code null}\n      * @param element  the object to add, may be {@code null}\n      * @return A new array containing the existing elements plus the new element\n         } else if (element != null) {\n             type = element.getClass();\n         } else {\n-            throw new IllegalArgumentException(\"Arguments cannot both be null\");            \n+            throw new IllegalArgumentException(\"Arguments cannot both be null\");\n         }\n         @SuppressWarnings(\"unchecked\") // type must be T\n         T[] newArray = (T[]) copyArrayGrow1(array, type);\n      * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n      * </pre>\n      *\n+     * @param <T> the component type of the array\n      * @param array  the array to add the element to, may be {@code null}\n      * @param index  the position of the new object\n      * @param element  the object to add\n         } else if (element != null) {\n             clss = element.getClass();\n         } else {\n-            throw new IllegalArgumentException(\"Array and element cannot both be null\");            \n+            throw new IllegalArgumentException(\"Array and element cannot both be null\");\n         }\n         @SuppressWarnings(\"unchecked\") // the add method creates an array of type clss, which is type T\n         final T[] newArray = (T[]) add(array, index, element, clss);\n      * ArrayUtils.remove([\"a\", \"b\", \"c\"], 1) = [\"a\", \"c\"]\n      * </pre>\n      *\n+     * @param <T> the component type of the array\n      * @param array  the array to remove the element from, may not be {@code null}\n      * @param index  the position of the element to be removed\n      * @return A new array containing the existing elements except the element\n      * ArrayUtils.removeElement([\"a\", \"b\", \"a\"], \"a\") = [\"b\", \"a\"]\n      * </pre>\n      *\n+     * @param <T> the component type of the array\n      * @param array  the array to remove the element from, may be {@code null}\n      * @param element  the element to be removed\n      * @return A new array containing the existing elements except the first", "timestamp": 1300481463, "metainfo": ""}