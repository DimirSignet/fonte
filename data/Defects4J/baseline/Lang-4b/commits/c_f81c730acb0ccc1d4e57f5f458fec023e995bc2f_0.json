{"sha": "f81c730acb0ccc1d4e57f5f458fec023e995bc2f", "log": "Genericize  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n      * @return this, to enable chaining\n      * @since 2.3\n      */\n-    public StrBuilder appendAll(Collection coll) {\n+    public StrBuilder appendAll(Collection<?> coll) {\n         if (coll != null && coll.size() > 0) {\n-            Iterator it = coll.iterator();\n+            Iterator<?> it = coll.iterator();\n             while (it.hasNext()) {\n                 append(it.next());\n             }\n      * @return this, to enable chaining\n      * @since 2.3\n      */\n-    public StrBuilder appendAll(Iterator it) {\n+    public StrBuilder appendAll(Iterator<?> it) {\n         if (it != null) {\n             while (it.hasNext()) {\n                 append(it.next());\n      * @param separator  the separator to use, null means no separator\n      * @return this, to enable chaining\n      */\n-    public StrBuilder appendWithSeparators(Collection coll, String separator) {\n+    public StrBuilder appendWithSeparators(Collection<?> coll, String separator) {\n         if (coll != null && coll.size() > 0) {\n             separator = (separator == null ? \"\" : separator);\n-            Iterator it = coll.iterator();\n+            Iterator<?> it = coll.iterator();\n             while (it.hasNext()) {\n                 append(it.next());\n                 if (it.hasNext()) {\n      * @param separator  the separator to use, null means no separator\n      * @return this, to enable chaining\n      */\n-    public StrBuilder appendWithSeparators(Iterator it, String separator) {\n+    public StrBuilder appendWithSeparators(Iterator<?> it, String separator) {\n         if (it != null) {\n             separator = (separator == null ? \"\" : separator);\n             while (it.hasNext()) {\n      * @return this, to enable chaining\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n+    @SuppressWarnings(\"null\") // str cannot be null\n     public StrBuilder insert(int index, String str) {\n         validateIndex(index);\n         if (str == null) {\n             ensureCapacity(newSize);\n             System.arraycopy(buffer, index, buffer, index + strLen, size - index);\n             size = newSize;\n-            str.getChars(0, strLen, buffer, index);\n+            str.getChars(0, strLen, buffer, index); // str cannot be null here\n         }\n         return this;\n     }\n \n         /** {@inheritDoc} */\n         @Override\n-        protected List tokenize(char[] chars, int offset, int count) {\n+        protected List<String> tokenize(char[] chars, int offset, int count) {\n             if (chars == null) {\n                 return super.tokenize(StrBuilder.this.buffer, 0, StrBuilder.this.size());\n             } else {\n--- a/src/java/org/apache/commons/lang/text/StrTokenizer.java\n+++ b/src/java/org/apache/commons/lang/text/StrTokenizer.java\n      *\n      * @return the tokens as a String array\n      */\n-    public List getTokenList() {\n+    public List<String> getTokenList() {\n         checkTokenized();\n-        List list = new ArrayList(tokens.length);\n+        List<String> list = new ArrayList<String>(tokens.length);\n         for (int i = 0; i < tokens.length; i++) {\n             list.add(tokens[i]);\n         }\n         if (tokens == null) {\n             if (chars == null) {\n                 // still call tokenize as subclass may do some work\n-                List split = tokenize(null, 0, 0);\n-                tokens = (String[]) split.toArray(new String[split.size()]);\n+                List<String> split = tokenize(null, 0, 0);\n+                tokens = split.toArray(new String[split.size()]);\n             } else {\n-                List split = tokenize(chars, 0, chars.length);\n-                tokens = (String[]) split.toArray(new String[split.size()]);\n+                List<String> split = tokenize(chars, 0, chars.length);\n+                tokens = split.toArray(new String[split.size()]);\n             }\n         }\n     }\n      * @param count  the number of characters to tokenize, must be valid\n      * @return the modifiable list of String tokens, unmodifiable if null array or zero count\n      */\n-    protected List tokenize(char[] chars, int offset, int count) {\n+    protected List<String> tokenize(char[] chars, int offset, int count) {\n         if (chars == null || count == 0) {\n-            return Collections.EMPTY_LIST;\n+            return Collections.emptyList();\n         }\n         StrBuilder buf = new StrBuilder();\n-        List tokens = new ArrayList();\n+        List<String> tokens = new ArrayList<String>();\n         int pos = offset;\n         \n         // loop around the entire buffer\n      * @param list  the list to add to\n      * @param tok  the token to add\n      */\n-    private void addToken(List list, String tok) {\n+    private void addToken(List<String> list, String tok) {\n         if (tok == null || tok.length() == 0) {\n             if (isIgnoreEmptyTokens()) {\n                 return;\n      * @return the starting position of the next field (the character\n      *  immediately after the delimiter), or -1 if end of string found\n      */\n-    private int readNextToken(char[] chars, int start, int len, StrBuilder workArea, List tokens) {\n+    private int readNextToken(char[] chars, int start, int len, StrBuilder workArea, List<String> tokens) {\n         // skip all leading whitespace, unless it is the\n         // field delimiter or the quote character\n         while (start < len) {\n      *  then the length of string\n      */\n     private int readWithQuotes(char[] chars, int start, int len, StrBuilder workArea, \n-                               List tokens, int quoteStart, int quoteLen) \n+                               List<String> tokens, int quoteStart, int quoteLen) \n     {\n         // Loop until we've found the end of the quoted\n         // string or the end of the input", "timestamp": 1237134454, "metainfo": ""}