{"sha": "f4fed389adbda6169169ecc1576b746d3cd84738", "log": "LANG-275 - StringUtils substringsBetween, implemented by Dave Meikle  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n      *\n      * <p>A <code>null</code> input String returns <code>null</code>.\n      * A <code>null</code> open/close returns <code>null</code> (no match).\n-     * An empty (\"\") open/close returns an empty string.</p>\n-     *\n-     * <pre>\n+     * An empty (\"\") open and close returns an empty string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.substringBetween(\"wx[b]yz\", \"[\", \"]\") = \"b\"\n      * StringUtils.substringBetween(null, *, *)          = null\n+     * StringUtils.substringBetween(*, null, *)          = null\n+     * StringUtils.substringBetween(*, *, null)          = null\n      * StringUtils.substringBetween(\"\", \"\", \"\")          = \"\"\n-     * StringUtils.substringBetween(\"\", \"\", \"tag\")       = null\n-     * StringUtils.substringBetween(\"\", \"tag\", \"tag\")    = null\n-     * StringUtils.substringBetween(\"yabcz\", null, null) = null\n+     * StringUtils.substringBetween(\"\", \"\", \"]\")         = null\n+     * StringUtils.substringBetween(\"\", \"[\", \"]\")        = null\n      * StringUtils.substringBetween(\"yabcz\", \"\", \"\")     = \"\"\n      * StringUtils.substringBetween(\"yabcz\", \"y\", \"z\")   = \"abc\"\n      * StringUtils.substringBetween(\"yabczyabcz\", \"y\", \"z\")   = \"abc\"\n             }\n         }\n         return null;\n+    }\n+\n+    /**\n+     * <p>Searches a String for substrings delimited by a start and end tag,\n+     * returning all matching substrings in an array.</p>\n+     *\n+     * <p>A <code>null</code> input String returns <code>null</code>.\n+     * A <code>null</code> open/close returns <code>null</code> (no match).\n+     * An empty (\"\") open/close returns <code>null</code> (no match).</p>\n+     *\n+     * <pre>\n+     * StringUtils.substringsBetween(\"[a][b][c]\", \"[\", \"]\") = [\"a\",\"b\",\"c\"]\n+     * StringUtils.substringsBetween(null, *, *)            = null\n+     * StringUtils.substringsBetween(*, null, *)            = null\n+     * StringUtils.substringsBetween(*, *, null)            = null\n+     * StringUtils.substringsBetween(\"\", \"[\", \"]\")          = []\n+     * </pre>\n+     *\n+     * @param str  the String containing the substrings, null returns null, empty returns empty\n+     * @param open  the String identifying the start of the substring, empty returns null\n+     * @param close  the String identifying the end of the substring, empty returns null\n+     * @return a String Array of substrings, or <code>null</code> if no match\n+     * @since 2.3\n+     */\n+    public static String[] substringsBetween(String str, String open, String close) {\n+        if (str == null || isEmpty(open) || isEmpty(close)) {\n+            return null;\n+        }\n+        int strLen = str.length();\n+        if (strLen == 0) {\n+            return ArrayUtils.EMPTY_STRING_ARRAY;\n+        }\n+        int closeLen = close.length();\n+        int openLen = open.length();\n+        List list = new ArrayList();\n+        int pos = 0;\n+        while (pos < (strLen - closeLen)) {\n+            int start = str.indexOf(open, pos);\n+            if (start < 0) {\n+                break;\n+            }\n+            start += openLen;\n+            int end = str.indexOf(close, start);\n+            if (end < 0) {\n+                break;\n+            }\n+            list.add(str.substring(start, end));\n+            pos = end + closeLen;\n+        }\n+        if (list.size() > 0) {\n+            return (String[]) list.toArray(new String [list.size()]);\n+        } else {\n+            return null;\n+        }\n     }\n \n     // Nested extraction\n--- a/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsSubstringTest.java\n     public void testSubstringBetween_StringStringString() {\n         assertEquals(null, StringUtils.substringBetween(null, \"\", \"\"));\n         assertEquals(\"\", StringUtils.substringBetween(\"\", \"\", \"\"));\n+        assertEquals(\"\", StringUtils.substringBetween(\"foo\", \"\", \"\"));\n+        assertEquals(null, StringUtils.substringBetween(\"foo\", \"\", \"]\"));\n+        assertEquals(null, StringUtils.substringBetween(\"foo\", \"[\", \"]\"));\n         assertEquals(\"\", StringUtils.substringBetween(\"    \", \" \", \"  \"));\n         assertEquals(\"bar\", StringUtils.substringBetween(\"<foo>bar</foo>\", \"<foo>\", \"</foo>\") );\n+    }\n+\n+   /**\n+     * Tests the substringsBetween method that returns an String Array of substrings.\n+     */\n+    public void testSubstringsBetween_StringStringString() {\n+\n+        String[] results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", \"]\");\n+        assertEquals(3, results.length);\n+        assertEquals(\"one\", results[0]);\n+        assertEquals(\"two\", results[1]);\n+        assertEquals(\"three\", results[2]);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], three\", \"[\", \"]\");\n+        assertEquals(2, results.length);\n+        assertEquals(\"one\", results[0]);\n+        assertEquals(\"two\", results[1]);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], three]\", \"[\", \"]\");\n+        assertEquals(2, results.length);\n+        assertEquals(\"one\", results[0]);\n+        assertEquals(\"two\", results[1]);\n+\n+        results = StringUtils.substringsBetween(\"[one], two], three]\", \"[\", \"]\");\n+        assertEquals(1, results.length);\n+        assertEquals(\"one\", results[0]);\n+\n+        results = StringUtils.substringsBetween(\"one], two], [three]\", \"[\", \"]\");\n+        assertEquals(1, results.length);\n+        assertEquals(\"three\", results[0]);\n+\n+        // 'ab hello ba' will match, but 'ab non ba' won't\n+        // this is because the 'a' is shared between the two and can't be matched twice\n+        results = StringUtils.substringsBetween(\"aabhellobabnonba\", \"ab\", \"ba\");\n+        assertEquals(1, results.length);\n+        assertEquals(\"hello\", results[0]);\n+\n+        results = StringUtils.substringsBetween(\"one, two, three\", \"[\", \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"[one, two, three\", \"[\", \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"one, two, three]\", \"[\", \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"[\", null);\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], [three]\", null, \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"[one], [two], [three]\", \"\", \"\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(null, \"[\", \"]\");\n+        assertNull(results);\n+\n+        results = StringUtils.substringsBetween(\"\", \"[\", \"]\");\n+        assertEquals(0, results.length);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1167873630, "metainfo": ""}