{"sha": "d057d0037ee7c9867ed4ad6d394ba3c8ef95f0fc", "log": "Fix some raw types  ", "commit": "\n--- a/src/test/org/apache/commons/lang/text/StrLookupTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrLookupTest.java\n     }\n \n     public void testMapLookup() {\n-        Map map = new HashMap();\n+        Map<String, Object> map = new HashMap<String, Object>();\n         map.put(\"key\", \"value\");\n         map.put(\"number\", new Integer(2));\n         assertEquals(\"value\", StrLookup.mapLookup(map).lookup(\"key\"));\n     }\n \n     public void testMapLookup_nullMap() {\n-        Map map = null;\n+        Map<String, ?> map = null;\n         assertEquals(null, StrLookup.mapLookup(map).lookup(null));\n         assertEquals(null, StrLookup.mapLookup(map).lookup(\"\"));\n         assertEquals(null, StrLookup.mapLookup(map).lookup(\"any\"));\n--- a/src/test/org/apache/commons/lang/text/StrSubstitutorTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrSubstitutorTest.java\n  */\n public class StrSubstitutorTest extends TestCase {\n \n-    private Map values;\n+    private Map<String, String> values;\n \n     /**\n      * Main method.\n     @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n-        values = new HashMap();\n+        values = new HashMap<String, String>();\n         values.put(\"animal\", \"quick brown fox\");\n         values.put(\"target\", \"lazy dog\");\n     }\n      * The cycle should be detected and cause an exception to be thrown.\n      */\n     public void testCyclicReplacement() {\n-        Map map = new HashMap();\n+        Map<String, String> map = new HashMap<String, String>();\n         map.put(\"animal\", \"${critter}\");\n         map.put(\"target\", \"${pet}\");\n         map.put(\"pet\", \"${petCharacteristic} dog\");\n      */\n     public void testResolveVariable() {\n         final StrBuilder builder = new StrBuilder(\"Hi ${name}!\");\n-        Map map = new HashMap();\n+        Map<String, Object> map = new HashMap<String, Object>();\n         map.put(\"name\", \"commons\");\n         StrSubstitutor sub = new StrSubstitutor(map) {\n             @Override\n      * Tests constructor.\n      */\n     public void testConstructorMapPrefixSuffix() {\n-        Map map = new HashMap();\n+        Map<String, String> map = new HashMap<String, String>();\n         map.put(\"name\", \"commons\");\n         StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\");\n         assertEquals(\"Hi < commons\", sub.replace(\"Hi $< <name>\"));\n      * Tests constructor.\n      */\n     public void testConstructorMapFull() {\n-        Map map = new HashMap();\n+        Map<String, String> map = new HashMap<String, String>();\n         map.put(\"name\", \"commons\");\n         StrSubstitutor sub = new StrSubstitutor(map, \"<\", \">\", '!');\n         assertEquals(\"Hi < commons\", sub.replace(\"Hi !< <name>\"));\n      * Tests static.\n      */\n     public void testStaticReplace() {\n-        Map map = new HashMap();\n+        Map<String, String> map = new HashMap<String, String>();\n         map.put(\"name\", \"commons\");\n         assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi ${name}!\", map));\n     }\n      * Tests static.\n      */\n     public void testStaticReplacePrefixSuffix() {\n-        Map map = new HashMap();\n+        Map<String, String> map = new HashMap<String, String>();\n         map.put(\"name\", \"commons\");\n         assertEquals(\"Hi commons!\", StrSubstitutor.replace(\"Hi <name>!\", map, \"<\", \">\"));\n     }\n         }\n         \n         // replace using object\n-        MutableObject obj = new MutableObject(replaceTemplate);  // toString returns template\n+        MutableObject<String> obj = new MutableObject<String>(replaceTemplate);  // toString returns template\n         assertEquals(expectedResult, sub.replace(obj));\n         \n         // replace in StringBuffer\n--- a/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrTokenizerTest.java\n         String input = \"a  b c\";\n         StrTokenizer tok = new StrTokenizer(input);\n         String[] array = tok.getTokenArray();\n-        List list = tok.getTokenList();\n+        List<?> list = tok.getTokenList();\n         \n         assertEquals(Arrays.asList(array), list);\n         assertEquals(3, list.size());\n     public void testTokenizeSubclassInputChange() {\n         StrTokenizer tkn = new StrTokenizer(\"a b c d e\") {\n             @Override\n-            protected List tokenize(char[] chars, int offset, int count) {\n+            protected List<String> tokenize(char[] chars, int offset, int count) {\n                 return super.tokenize(\"w x y z\".toCharArray(), 2, 5);\n             }\n         };\n     public void testTokenizeSubclassOutputChange() {\n         StrTokenizer tkn = new StrTokenizer(\"a b c\") {\n             @Override\n-            protected List tokenize(char[] chars, int offset, int count) {\n-                List list = super.tokenize(chars, offset, count);\n+            protected List<String> tokenize(char[] chars, int offset, int count) {\n+                List<String> list = super.tokenize(chars, offset, count);\n                 Collections.reverse(list);\n                 return list;\n             }", "timestamp": 1256468935, "metainfo": ""}