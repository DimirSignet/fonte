{"sha": "622b818f5dd5a2edd47ed5bf5cb8edc079a67521", "log": "JUnit4 allows use of expected exceptions  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/BackgroundInitializerTest.java\n     /**\n      * Tests calling get() before start(). This should cause an exception.\n      */\n-    @Test\n+    @Test(expected=IllegalStateException.class)\n     public void testGetBeforeStart() throws ConcurrentException {\n         BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl();\n-        try {\n-            init.get();\n-            fail(\"Could call get() before start()!\");\n-        } catch (IllegalStateException istex) {\n-            // ok\n-        }\n+        init.get();\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventListenerSupportTest.java\n  */\n public class EventListenerSupportTest \n {\n-    @Test\n+    @Test(expected=NullPointerException.class)\n     public void testAddNullListener()\n     {\n         EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n-        try\n-        {\n-            listenerSupport.addListener(null);\n-            fail(\"Should not be able to add a null listener.\");\n-        }\n-        catch (NullPointerException e)\n-        {\n-\n-        }\n-    }\n-\n-    @Test\n+        listenerSupport.addListener(null);\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n     public void testRemoveNullListener()\n     {\n         EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class);\n-        try\n-        {\n-            listenerSupport.removeListener(null);\n-            fail(\"Should not be able to remove a null listener.\");\n-        }\n-        catch (NullPointerException e)\n-        {\n-\n-        }\n+        listenerSupport.removeListener(null);\n     }\n \n     @Test\n         assertSame(calledListeners.get(1), listener2);\n     }\n \n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void testCreateWithNonInterfaceParameter()\n     {\n-        try\n-        {\n-            EventListenerSupport.create(String.class);\n-            fail(\"Should not be able to create using non-interface class.\");\n-        }\n-        catch (IllegalArgumentException e)\n-        {\n-\n-        }\n-    }\n-\n-    @Test\n+        EventListenerSupport.create(String.class);\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n     public void testCreateWithNullParameter()\n     {\n-        try\n-        {\n-            EventListenerSupport.create(null);\n-            fail(\"Should not be able to create using null class.\");\n-        }\n-        catch (NullPointerException e)\n-        {\n-\n-        }\n+        EventListenerSupport.create(null);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n         assertFalse(match);\n     }\n \n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void testRemoveCommonFrames_ListList() throws Exception {\n-        try {\n-            ExceptionUtils.removeCommonFrames(null, null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-        }\n+        ExceptionUtils.removeCommonFrames(null, null);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/math/FractionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/FractionTest.java\n         }\n     }\n \n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void testFactory_String() {\n-        try {\n-            Fraction.getFraction(null);\n-            fail(\"expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {}\n+        Fraction.getFraction(null);\n     }\n     \n     \n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java\n         mutBool.setValue(true);\n         assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));\n         assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));\n-\n-        try {\n-            mutBool.compareTo(null);\n-            fail();\n-        } catch (NullPointerException ex) {\n-        }\n+    }\n+    \n+    @Test(expected=NullPointerException.class)\n+    public void testCompareToNull() {\n+        final MutableBoolean mutBool = new MutableBoolean(false);\n+        mutBool.compareTo(null);\n     }\n \n     // ----------------------------------------------------------------\n         assertTrue(new MutableBoolean(Boolean.TRUE).booleanValue());\n         assertFalse(new MutableBoolean(Boolean.FALSE).booleanValue());\n \n-        try {\n-            new MutableBoolean(null);\n-            fail();\n-        } catch (NullPointerException ex) {\n-        }\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testConstructorNull() {\n+        new MutableBoolean(null);\n     }\n \n     @Test\n         mutBool.setValue(true);\n         assertTrue(mutBool.booleanValue());\n \n-        try {\n-            mutBool.setValue(null);\n-            fail();\n-        } catch (NullPointerException ex) {\n-        }\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testSetNull() {\n+        final MutableBoolean mutBool = new MutableBoolean(false);\n+        mutBool.setValue(null);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n \n         assertEquals((byte) 2, new MutableByte(\"2\").byteValue());\n \n-        try {\n-            new MutableByte((Number)null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testConstructorNull() {\n+        new MutableByte((Number)null);\n     }\n \n     @Test\n         mutNum.setValue(new MutableByte((byte) 3));\n         assertEquals((byte) 3, mutNum.byteValue());\n         assertEquals(Byte.valueOf((byte) 3), mutNum.getValue());\n-        try {\n-            mutNum.setValue(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testSetNull() {\n+        final MutableByte mutNum = new MutableByte((byte) 0);\n+        mutNum.setValue(null);\n     }\n \n     @Test\n         assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0)));\n         assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1)));\n         assertEquals((byte) -1, mutNum.compareTo(new MutableByte((byte) 1)));\n-        try {\n-            mutNum.compareTo(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testCompareToNull() {\n+        final MutableByte mutNum = new MutableByte((byte) 0);\n+        mutNum.compareTo(null);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n         \n         assertEquals(2d, new MutableDouble(\"2.0\").doubleValue(), 0.0001d);\n \n-        try {\n-            new MutableDouble((Number)null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testConstructorNull() {\n+        new MutableDouble((Number)null);\n     }\n \n     @Test\n         mutNum.setValue(new MutableDouble(3d));\n         assertEquals(3d, mutNum.doubleValue(), 0.0001d);\n         assertEquals(Double.valueOf(3d), mutNum.getValue());\n-        try {\n-            mutNum.setValue(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testSetNull() {\n+        final MutableDouble mutNum = new MutableDouble(0d);\n+        mutNum.setValue(null);\n     }\n \n     @Test\n         assertEquals(0, mutNum.compareTo(new MutableDouble(0d)));\n         assertEquals(+1, mutNum.compareTo(new MutableDouble(-1d)));\n         assertEquals(-1, mutNum.compareTo(new MutableDouble(1d)));\n-        try {\n-            mutNum.compareTo(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testCompareToNull() {\n+        final MutableDouble mutNum = new MutableDouble(0d);\n+        mutNum.compareTo(null);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n \n         assertEquals(2f, new MutableFloat(\"2.0\").floatValue(), 0.0001f);\n \n-        try {\n-            new MutableFloat((Number)null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testConstructorNull() {\n+        new MutableFloat((Number)null);\n     }\n \n     @Test\n         mutNum.setValue(new MutableFloat(3f));\n         assertEquals(3f, mutNum.floatValue(), 0.0001f);\n         assertEquals(Float.valueOf(3f), mutNum.getValue());\n-        try {\n-            mutNum.setValue(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testSetNull() {\n+        final MutableFloat mutNum = new MutableFloat(0f);\n+        mutNum.setValue(null);\n     }\n \n     @Test\n         assertEquals(0, mutNum.compareTo(new MutableFloat(0f)));\n         assertEquals(+1, mutNum.compareTo(new MutableFloat(-1f)));\n         assertEquals(-1, mutNum.compareTo(new MutableFloat(1f)));\n-        try {\n-            mutNum.compareTo(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testCompareToNull() {\n+        final MutableFloat mutNum = new MutableFloat(0f);\n+        mutNum.compareTo(null);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n \n         assertEquals(2, new MutableInt(\"2\").intValue());\n \n-        try {\n-            new MutableInt((Number)null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testConstructorNull() {\n+        new MutableInt((Number)null);\n     }\n \n     @Test\n         mutNum.setValue(new MutableLong(3));\n         assertEquals(3, mutNum.intValue());\n         assertEquals(Integer.valueOf(3), mutNum.getValue());\n-        try {\n-            mutNum.setValue(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testSetNull() {\n+        final MutableInt mutNum = new MutableInt(0);\n+        mutNum.setValue(null);\n     }\n \n     @Test\n         assertEquals(0, mutNum.compareTo(new MutableInt(0)));\n         assertEquals(+1, mutNum.compareTo(new MutableInt(-1)));\n         assertEquals(-1, mutNum.compareTo(new MutableInt(1)));\n-        try {\n-            mutNum.compareTo(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testCompareToNull() {\n+        final MutableInt mutNum = new MutableInt(0);\n+        mutNum.compareTo(null);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n \n         assertEquals(2, new MutableLong(\"2\").longValue());\n \n-        try {\n-            new MutableLong((Number)null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testConstructorNull() {\n+        new MutableLong((Number)null);\n     }\n \n     @Test\n         mutNum.setValue(new MutableLong(3));\n         assertEquals(3, mutNum.longValue());\n         assertEquals(Long.valueOf(3), mutNum.getValue());\n-        try {\n-            mutNum.setValue(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testSetNull() {\n+        final MutableLong mutNum = new MutableLong(0);\n+        mutNum.setValue(null);\n     }\n \n     @Test\n         assertEquals(0, mutNum.compareTo(new MutableLong(0)));\n         assertEquals(+1, mutNum.compareTo(new MutableLong(-1)));\n         assertEquals(-1, mutNum.compareTo(new MutableLong(1)));\n-        try {\n-            mutNum.compareTo(null);\n-            fail();\n-        } catch (NullPointerException ex) {}\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void testCompareToNull() {\n+        final MutableLong mutNum = new MutableLong(0);\n+        mutNum.compareTo(null);\n     }\n \n     @Test", "timestamp": 1348159017, "metainfo": ""}