{"sha": "141af07e352d6b0262fc403d63396a7d07884a21", "log": "[LANG-722] Add BooleanUtils.and/or varargs methods to complement xor  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n         return bool ? trueString : falseString;\n     }\n \n-    // xor methods\n+    // logical operations\n     // ----------------------------------------------------------------------\n     /**\n+     * <p>Performs an and on a set of booleans.</p>\n+     *\n+     * <pre>\n+     *   BooleanUtils.and(true, true)         = true\n+     *   BooleanUtils.and(false, false)       = false\n+     *   BooleanUtils.and(true, false)        = false\n+     *   BooleanUtils.and(true, true, false)  = false\n+     *   BooleanUtils.and(true, true, true)   = true\n+     * </pre>\n+     *\n+     * @param array  an array of {@code boolean}s\n+     * @return {@code true} if the and is successful.\n+     * @throws IllegalArgumentException if {@code array} is {@code null}\n+     * @throws IllegalArgumentException if {@code array} is empty.\n+     */\n+    public static boolean and(boolean... array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        }\n+        if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array is empty\");\n+        }\n+        for (boolean element : array) {\n+            if (!element) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * <p>Performs an and on an array of Booleans.</p>\n+     *\n+     * <pre>\n+     *   BooleanUtils.and(Boolean.TRUE, Boolean.TRUE)                 = Boolean.TRUE\n+     *   BooleanUtils.and(Boolean.FALSE, Boolean.FALSE)               = Boolean.FALSE\n+     *   BooleanUtils.and(Boolean.TRUE, Boolean.FALSE)                = Boolean.FALSE\n+     *   BooleanUtils.and(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE)   = Boolean.TRUE\n+     *   BooleanUtils.and(Boolean.FALSE, Boolean.FALSE, Boolean.TRUE) = Boolean.FALSE\n+     *   BooleanUtils.and(Boolean.TRUE, Boolean.FALSE, Boolean.TRUE)  = Boolean.FALSE\n+     * </pre>\n+     *\n+     * @param array  an array of {@code Boolean}s\n+     * @return {@code true} if the and is successful.\n+     * @throws IllegalArgumentException if {@code array} is {@code null}\n+     * @throws IllegalArgumentException if {@code array} is empty.\n+     * @throws IllegalArgumentException if {@code array} contains a {@code null}\n+     */\n+    public static Boolean and(Boolean... array) {\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        }\n+        if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array is empty\");\n+        }\n+        try {\n+            boolean[] primitive = ArrayUtils.toPrimitive(array);\n+            return and(primitive) ? Boolean.TRUE : Boolean.FALSE;\n+        } catch (NullPointerException ex) {\n+            throw new IllegalArgumentException(\"The array must not contain any null elements\");\n+        }\n+    }\n+\n+    /**\n+     * <p>Performs an or on a set of booleans.</p>\n+     *\n+     * <pre>\n+     *   BooleanUtils.or(true, true)          = true\n+     *   BooleanUtils.or(false, false)        = false\n+     *   BooleanUtils.or(true, false)         = true\n+     *   BooleanUtils.or(true, true, false)   = true\n+     *   BooleanUtils.or(true, true, true)    = true\n+     *   BooleanUtils.or(false, false, false) = false\n+     * </pre>\n+     *\n+     * @param array  an array of {@code boolean}s\n+     * @return {@code true} if the or is successful.\n+     * @throws IllegalArgumentException if {@code array} is {@code null}\n+     * @throws IllegalArgumentException if {@code array} is empty.\n+     */\n+    public static boolean or(boolean... array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        }\n+        if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array is empty\");\n+        }\n+        for (boolean element : array) {\n+            if (element) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    /**\n+     * <p>Performs an or on an array of Booleans.</p>\n+     *\n+     * <pre>\n+     *   BooleanUtils.or(Boolean.TRUE, Boolean.TRUE)                  = Boolean.TRUE\n+     *   BooleanUtils.or(Boolean.FALSE, Boolean.FALSE)                = Boolean.FALSE\n+     *   BooleanUtils.or(Boolean.TRUE, Boolean.FALSE)                 = Boolean.TRUE\n+     *   BooleanUtils.or(Boolean.TRUE, Boolean.TRUE, Boolean.TRUE)    = Boolean.TRUE\n+     *   BooleanUtils.or(Boolean.FALSE, Boolean.FALSE, Boolean.TRUE)  = Boolean.TRUE\n+     *   BooleanUtils.or(Boolean.TRUE, Boolean.FALSE, Boolean.TRUE)   = Boolean.TRUE\n+     *   BooleanUtils.or(Boolean.FALSE, Boolean.FALSE, Boolean.FALSE) = Boolean.FALSE\n+     * </pre>\n+     *\n+     * @param array  an array of {@code Boolean}s\n+     * @return {@code true} if the or is successful.\n+     * @throws IllegalArgumentException if {@code array} is {@code null}\n+     * @throws IllegalArgumentException if {@code array} is empty.\n+     * @throws IllegalArgumentException if {@code array} contains a {@code null}\n+     */\n+    public static Boolean or(Boolean... array) {\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        }\n+        if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array is empty\");\n+        }\n+        try {\n+            boolean[] primitive = ArrayUtils.toPrimitive(array);\n+            return or(primitive) ? Boolean.TRUE : Boolean.FALSE;\n+        } catch (NullPointerException ex) {\n+            throw new IllegalArgumentException(\"The array must not contain any null elements\");\n+        }\n+    }\n+    \n+    /**\n      * <p>Performs an xor on a set of booleans.</p>\n      *\n      * <pre>\n-     *   BooleanUtils.xor(new boolean[] { true, true })   = false\n-     *   BooleanUtils.xor(new boolean[] { false, false }) = false\n-     *   BooleanUtils.xor(new boolean[] { true, false })  = true\n+     *   BooleanUtils.xor(true, true)   = false\n+     *   BooleanUtils.xor(false, false) = false\n+     *   BooleanUtils.xor(true, false)  = true\n+     *   BooleanUtils.xor(true, true)   = false\n+     *   BooleanUtils.xor(false, false) = false\n+     *   BooleanUtils.xor(true, false)  = true\n      * </pre>\n      *\n      * @param array  an array of {@code boolean}s\n         if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array is empty\");\n         }\n-\n+        \n         // Loops through array, comparing each item\n         int trueCount = 0;\n         for (boolean element : array) {\n                 }\n             }\n         }\n-\n+        \n         // Returns true if there was exactly 1 true item\n         return trueCount == 1;\n     }\n-\n+    \n     /**\n      * <p>Performs an xor on an array of Booleans.</p>\n      *\n         if (array.length == 0) {\n             throw new IllegalArgumentException(\"Array is empty\");\n         }\n-        boolean[] primitive = null;\n         try {\n-            primitive = ArrayUtils.toPrimitive(array);\n+            boolean[] primitive = ArrayUtils.toPrimitive(array);\n+            return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;\n         } catch (NullPointerException ex) {\n             throw new IllegalArgumentException(\"The array must not contain any null elements\");\n         }\n-        return xor(primitive) ? Boolean.TRUE : Boolean.FALSE;\n-    }\n-\n+    }\n+    \n }\n--- a/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n                 .booleanValue());\n     }\n \n+    //  testAnd\n+    //  -----------------------------------------------------------------------\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAnd_primitive_nullInput() {\n+        BooleanUtils.and((boolean[]) null);\n+    }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAnd_primitive_emptyInput() {\n+        BooleanUtils.and(new boolean[] {});\n+    }\n+    \n+    @Test\n+    public void testAnd_primitive_validInput_2items() {\n+        assertTrue(\n+            \"False result for (true, true)\",\n+            BooleanUtils.and(new boolean[] { true, true }));\n+        \n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.and(new boolean[] { false, false }));\n+        \n+        assertTrue(\n+            \"True result for (true, false)\",\n+            ! BooleanUtils.and(new boolean[] { true, false }));\n+        \n+        assertTrue(\n+            \"True result for (false, true)\",\n+            ! BooleanUtils.and(new boolean[] { false, true }));\n+    }\n+    \n+    @Test\n+    public void testAnd_primitive_validInput_3items() {\n+        assertTrue(\n+            \"True result for (false, false, true)\",\n+            ! BooleanUtils.and(new boolean[] { false, false, true }));\n+        \n+        assertTrue(\n+            \"True result for (false, true, false)\",\n+            ! BooleanUtils.and(new boolean[] { false, true, false }));\n+        \n+        assertTrue(\n+            \"True result for (true, false, false)\",\n+            ! BooleanUtils.and(new boolean[] { true, false, false }));\n+        \n+        assertTrue(\n+            \"False result for (true, true, true)\",\n+            BooleanUtils.and(new boolean[] { true, true, true }));\n+        \n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.and(new boolean[] { false, false, false }));\n+        \n+        assertTrue(\n+            \"True result for (true, true, false)\",\n+            ! BooleanUtils.and(new boolean[] { true, true, false }));\n+        \n+        assertTrue(\n+            \"True result for (true, false, true)\",\n+            ! BooleanUtils.and(new boolean[] { true, false, true }));\n+        \n+        assertTrue(\n+            \"True result for (false, true, true)\",\n+            ! BooleanUtils.and(new boolean[] { false, true, true }));\n+    }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAnd_object_nullInput() {\n+        BooleanUtils.and((Boolean[]) null);\n+    }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAnd_object_emptyInput() {\n+        BooleanUtils.and(new Boolean[] {});\n+    }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testAnd_object_nullElementInput() {\n+        BooleanUtils.and(new Boolean[] {null});\n+    }\n+    \n+    @Test\n+    public void testAnd_object_validInput_2items() {\n+        assertTrue(\n+            \"False result for (true, true)\",\n+            BooleanUtils\n+            .and(new Boolean[] { Boolean.TRUE, Boolean.TRUE })\n+            .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils\n+            .and(new Boolean[] { Boolean.FALSE, Boolean.FALSE })\n+            .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (true, false)\",\n+            ! BooleanUtils\n+            .and(new Boolean[] { Boolean.TRUE, Boolean.FALSE })\n+            .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (false, true)\",\n+            ! BooleanUtils\n+            .and(new Boolean[] { Boolean.FALSE, Boolean.TRUE })\n+            .booleanValue());\n+    }\n+    \n+    @Test\n+    public void testAnd_object_validInput_3items() {\n+        assertTrue(\n+            \"True result for (false, false, true)\",\n+            ! BooleanUtils\n+            .and(\n+                new Boolean[] {\n+                    Boolean.FALSE,\n+                    Boolean.FALSE,\n+                    Boolean.TRUE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (false, true, false)\",\n+            ! BooleanUtils\n+            .and(\n+                new Boolean[] {\n+                    Boolean.FALSE,\n+                    Boolean.TRUE,\n+                    Boolean.FALSE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (true, false, false)\",\n+            ! BooleanUtils\n+            .and(\n+                new Boolean[] {\n+                    Boolean.TRUE,\n+                    Boolean.FALSE,\n+                    Boolean.FALSE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"False result for (true, true, true)\",\n+            BooleanUtils\n+            .and(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })\n+            .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.and(\n+                new Boolean[] {\n+                    Boolean.FALSE,\n+                    Boolean.FALSE,\n+                    Boolean.FALSE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (true, true, false)\",\n+            ! BooleanUtils.and(\n+                new Boolean[] {\n+                    Boolean.TRUE,\n+                    Boolean.TRUE,\n+                    Boolean.FALSE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (true, false, true)\",\n+            ! BooleanUtils.and(\n+                new Boolean[] {\n+                    Boolean.TRUE,\n+                    Boolean.FALSE,\n+                    Boolean.TRUE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (false, true, true)\",\n+            ! BooleanUtils.and(\n+                new Boolean[] {\n+                    Boolean.FALSE,\n+                    Boolean.TRUE,\n+                    Boolean.TRUE })\n+                    .booleanValue());\n+    }\n+    \n+    //  testOr\n+    //  -----------------------------------------------------------------------\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testOr_primitive_nullInput() {\n+        BooleanUtils.or((boolean[]) null);\n+    }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testOr_primitive_emptyInput() {\n+        BooleanUtils.or(new boolean[] {});\n+    }\n+    \n+    @Test\n+    public void testOr_primitive_validInput_2items() {\n+        assertTrue(\n+            \"False result for (true, true)\",\n+            BooleanUtils.or(new boolean[] { true, true }));\n+        \n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.or(new boolean[] { false, false }));\n+        \n+        assertTrue(\n+            \"False result for (true, false)\",\n+            BooleanUtils.or(new boolean[] { true, false }));\n+        \n+        assertTrue(\n+            \"False result for (false, true)\",\n+            BooleanUtils.or(new boolean[] { false, true }));\n+    }\n+    \n+    @Test\n+    public void testOr_primitive_validInput_3items() {\n+        assertTrue(\n+            \"False result for (false, false, true)\",\n+            BooleanUtils.or(new boolean[] { false, false, true }));\n+        \n+        assertTrue(\n+            \"False result for (false, true, false)\",\n+            BooleanUtils.or(new boolean[] { false, true, false }));\n+        \n+        assertTrue(\n+            \"False result for (true, false, false)\",\n+            BooleanUtils.or(new boolean[] { true, false, false }));\n+        \n+        assertTrue(\n+            \"False result for (true, true, true)\",\n+            BooleanUtils.or(new boolean[] { true, true, true }));\n+        \n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.or(new boolean[] { false, false, false }));\n+        \n+        assertTrue(\n+            \"False result for (true, true, false)\",\n+            BooleanUtils.or(new boolean[] { true, true, false }));\n+        \n+        assertTrue(\n+            \"False result for (true, false, true)\",\n+            BooleanUtils.or(new boolean[] { true, false, true }));\n+        \n+        assertTrue(\n+            \"False result for (false, true, true)\",\n+            BooleanUtils.or(new boolean[] { false, true, true }));\n+    \n+    }\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testOr_object_nullInput() {\n+        BooleanUtils.or((Boolean[]) null);\n+    }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testOr_object_emptyInput() {\n+        BooleanUtils.or(new Boolean[] {});\n+    }\n+    \n+    @Test(expected = IllegalArgumentException.class)\n+    public void testOr_object_nullElementInput() {\n+        BooleanUtils.or(new Boolean[] {null});\n+    }\n+    \n+    @Test\n+    public void testOr_object_validInput_2items() {\n+        assertTrue(\n+            \"False result for (true, true)\",\n+            BooleanUtils\n+            .or(new Boolean[] { Boolean.TRUE, Boolean.TRUE })\n+            .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils\n+            .or(new Boolean[] { Boolean.FALSE, Boolean.FALSE })\n+            .booleanValue());\n+        \n+        assertTrue(\n+            \"False result for (true, false)\",\n+            BooleanUtils\n+            .or(new Boolean[] { Boolean.TRUE, Boolean.FALSE })\n+            .booleanValue());\n+        \n+        assertTrue(\n+            \"False result for (false, true)\",\n+            BooleanUtils\n+            .or(new Boolean[] { Boolean.FALSE, Boolean.TRUE })\n+            .booleanValue());\n+    }\n+    \n+    @Test\n+    public void testOr_object_validInput_3items() {\n+        assertTrue(\n+            \"False result for (false, false, true)\",\n+            BooleanUtils\n+            .or(\n+                new Boolean[] {\n+                    Boolean.FALSE,\n+                    Boolean.FALSE,\n+                    Boolean.TRUE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"False result for (false, true, false)\",\n+            BooleanUtils\n+            .or(\n+                new Boolean[] {\n+                    Boolean.FALSE,\n+                    Boolean.TRUE,\n+                    Boolean.FALSE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"False result for (true, false, false)\",\n+            BooleanUtils\n+            .or(\n+                new Boolean[] {\n+                    Boolean.TRUE,\n+                    Boolean.FALSE,\n+                    Boolean.FALSE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"False result for (true, true, true)\",\n+            BooleanUtils\n+            .or(new Boolean[] { Boolean.TRUE, Boolean.TRUE, Boolean.TRUE })\n+            .booleanValue());\n+        \n+        assertTrue(\n+            \"True result for (false, false)\",\n+            ! BooleanUtils.or(\n+                new Boolean[] {\n+                    Boolean.FALSE,\n+                    Boolean.FALSE,\n+                    Boolean.FALSE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"False result for (true, true, false)\",\n+            BooleanUtils.or(\n+                new Boolean[] {\n+                    Boolean.TRUE,\n+                    Boolean.TRUE,\n+                    Boolean.FALSE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"False result for (true, false, true)\",\n+            BooleanUtils.or(\n+                new Boolean[] {\n+                    Boolean.TRUE,\n+                    Boolean.FALSE,\n+                    Boolean.TRUE })\n+                    .booleanValue());\n+        \n+        assertTrue(\n+            \"False result for (false, true, true)\",\n+            BooleanUtils.or(\n+                new Boolean[] {\n+                    Boolean.FALSE,\n+                    Boolean.TRUE,\n+                    Boolean.TRUE })\n+                    .booleanValue());\n+    }\n+    \n }", "timestamp": 1310866754, "metainfo": ""}