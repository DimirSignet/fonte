{"sha": "2397e5b0735e0cef362070c0b85c2ec0f63273d5", "log": "LANG-747 NumberUtils does not handle Long Hex numbers  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n     /**\n      * <p>Turns a string value into a java.lang.Number.</p>\n      *\n-     * <p>First, the value is examined for a type qualifier on the end\n-     * (<code>'f','F','d','D','l','L'</code>).  If it is found, it starts \n+     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n+     * will be interpreted as a hexadecimal integer - or long, if the number of digits after the 0x\n+     * prefix is more than 8.\n+     * Values with leading <code>0</code>'s will not be interpreted as octal.</p>\n+     *\n+     * <p>Then, the value is examined for a type qualifier on the end, i.e. one of\n+     * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts \n      * trying to create successively larger types from the type specified\n      * until one is found that can represent the value.</p>\n      *\n      * and then try successively larger types from <code>Integer</code> to\n      * <code>BigInteger</code> and from <code>Float</code> to\n      * <code>BigDecimal</code>.</p>\n-     *\n-     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it\n-     * will be interpreted as a hexadecimal integer.  Values with leading\n-     * <code>0</code>'s will not be interpreted as octal.</p>\n      *\n      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>\n      *\n             return null;\n         }\n         if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n+            int hexDigits = str.length() - 2; // drop 0x\n+            if (str.startsWith(\"-\")) { // drop -\n+                hexDigits--;\n+            }\n+            if (hexDigits > 8) { // too many for an int\n+                return createLong(str);\n+            }\n             return createInteger(str);\n         }   \n         char lastChar = str.charAt(str.length() - 1);", "timestamp": 1347484218, "metainfo": ""}