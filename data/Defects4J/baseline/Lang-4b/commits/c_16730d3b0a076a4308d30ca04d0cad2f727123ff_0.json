{"sha": "16730d3b0a076a4308d30ca04d0cad2f727123ff", "log": "- Added javadoc package.html - Removed all \"implements java.io.Serializable\" since java.lang.Number already declares it. - New Javadoc for equals(Object) methods to match Number subclasses, in particular to provide more details for Float and Double. - equals(Object) methods now use /type/Value() calls instead of \".value\" direct references (similar impl to Number subclasses).   ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/Mutable.java\n+++ b/src/java/org/apache/commons/lang/mutable/Mutable.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.mutable;\n \n /**\n- * Defines an object that allows mutable access to a value.\n+ * Provides mutable access to a value.\n  * <p>\n- * <code>Mutable</code> is used as a generic interface to the implementations\n- * in this package.\n+ * <code>Mutable</code> is used as a generic interface to the implementations in this package.\n  * <p>\n- * A typical use case would be to enable a primitive or string to be passed\n- * to a method and allow that method to effectively change the value of the\n- * primitive/string. Another use case is to store a frequently changing\n- * primitive in a collection (for example a total in a map) without needing\n- * to create new Integer/Long wrapper objects.\n- *\n+ * A typical use case would be to enable a primitive or string to be passed to a method and allow that method to\n+ * effectively change the value of the primitive/string. Another use case is to store a frequently changing primitive in\n+ * a collection (for example a total in a map) without needing to create new Integer/Long wrapper objects.\n+ * \n  * @author Matthew Hawthorne\n  * @since 2.1\n- * @version $Id: Mutable.java,v 1.2 2004/07/05 22:12:22 scolebourne Exp $\n+ * @version $Id: Mutable.java,v 1.3 2004/10/08 19:45:46 ggregory Exp $\n  */\n public interface Mutable {\n \n     /**\n      * Gets the value of this mutable.\n-     *\n+     * \n      * @return the stored value\n      */\n     Object getValue();\n \n     /**\n      * Sets the value of this mutable.\n-     *\n-     * @param value  the value to store\n-     * @throws NullPointerException if the object is null and null is invalid\n-     * @throws ClassCastException if the type is invalid\n+     * \n+     * @param value\n+     *            the value to store\n+     * @throws NullPointerException\n+     *             if the object is null and null is invalid\n+     * @throws ClassCastException\n+     *             if the type is invalid\n      */\n     void setValue(Object value);\n \n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.mutable;\n \n-import java.io.Serializable;\n-\n /**\n- * A mutable <code>byte</code>.\n+ * A mutable <code>byte</code> wrapper.\n  * \n+ * @see Byte\n  * @since 2.1\n- * @version $Id: MutableByte.java,v 1.5 2004/10/01 17:12:29 ggregory Exp $\n+ * @version $Id: MutableByte.java,v 1.6 2004/10/08 19:45:46 ggregory Exp $\n  */\n-public class MutableByte extends Number\n-        implements Comparable, Mutable, Serializable {\n+public class MutableByte extends Number implements Comparable, Mutable {\n \n     /** Serialization lock. */\n     private static final long serialVersionUID = -1585823265L;\n     /**\n      * Constructs a new MutableByte with the specified value.\n      * \n-     * @param value a value.\n+     * @param value\n+     *            a value.\n      */\n     public MutableByte(byte value) {\n         super();\n     /**\n      * Constructs a new MutableByte with the specified value.\n      * \n-     * @param value a value.\n-     * @throws NullPointerException if the object is null\n+     * @param value\n+     *            a value.\n+     * @throws NullPointerException\n+     *             if the object is null\n      */\n     public MutableByte(Number value) {\n         super();\n     /**\n      * Sets the value.\n      * \n-     * @param value  the value to set\n+     * @param value\n+     *            the value to set\n      */\n     public void setValue(byte value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value  the value to set\n-     * @throws NullPointerException if the object is null\n-     * @throws ClassCastException if the type is invalid\n+     * @param value\n+     *            the value to set\n+     * @throws NullPointerException\n+     *             if the object is null\n+     * @throws ClassCastException\n+     *             if the type is not a {@link Number}\n      */\n     public void setValue(Object value) {\n         setValue(((Number) value).byteValue());\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Checks if this object equals the specified object.\n-     * <p>\n-     * The object must be a MutableByte with the same value to be equal.\n-     *\n-     * @param obj  the object to compare to\n-     * @return true if equal\n+     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n+     * is not <code>null</code> and is a <code>MutableByte</code> object that contains the same <code>byte</code>\n+     * value as this object.\n+     * \n+     * @param obj\n+     *            the object to compare with.\n+     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableByte) {\n-            return (value == ((MutableByte) obj).value);\n+            return value == ((MutableByte) obj).byteValue();\n         }\n         return false;\n     }\n \n     /**\n      * Returns a suitable hashcode for this mutable.\n-     *\n+     * \n      * @return a suitable hashcode\n      */\n     public int hashCode() {\n \n     /**\n      * Compares this mutable to another in ascending order.\n-     *\n-     * @param obj  the mutable to compare to\n+     * \n+     * @param obj\n+     *            the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n+     * @throws ClassCastException if the argument is not a MutableByte\n      */\n     public int compareTo(Object obj) {\n         MutableByte other = (MutableByte) obj;\n \n     /**\n      * Returns the String value of this mutable.\n-     *\n+     * \n      * @return the mutable value as a string\n      */\n     public String toString() {\n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.mutable;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.lang.math.NumberUtils;\n \n /**\n- * A mutable <code>double</code>.\n- * \n+ * A mutable <code>double</code> wrapper.\n+ * \n+ * @see Double\n  * @since 2.1\n- * @version $Id: MutableDouble.java,v 1.4 2004/07/07 23:50:28 scolebourne Exp $\n+ * @version $Id: MutableDouble.java,v 1.5 2004/10/08 19:45:46 ggregory Exp $\n  */\n-public class MutableDouble extends Number\n-        implements Comparable, Mutable, Serializable {\n+public class MutableDouble extends Number implements Comparable, Mutable {\n \n     /** Serialization lock. */\n     private static final long serialVersionUID = 1587163916L;\n     /**\n      * Constructs a new MutableDouble with the specified value.\n      * \n-     * @param value a value.\n+     * @param value\n+     *            a value.\n      */\n     public MutableDouble(double value) {\n         super();\n     /**\n      * Constructs a new MutableDouble with the specified value.\n      * \n-     * @param value a value.\n-     * @throws NullPointerException if the object is null\n+     * @param value\n+     *            a value.\n+     * @throws NullPointerException\n+     *             if the object is null\n      */\n     public MutableDouble(Number value) {\n         super();\n     /**\n      * Sets the value.\n      * \n-     * @param value  the value to set\n+     * @param value\n+     *            the value to set\n      */\n     public void setValue(double value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value  the value to set\n-     * @throws NullPointerException if the object is null\n-     * @throws ClassCastException if the type is invalid\n+     * @param value\n+     *            the value to set\n+     * @throws NullPointerException\n+     *             if the object is null\n+     * @throws ClassCastException\n+     *             if the type is not a {@link Number}\n      */\n     public void setValue(Object value) {\n         setValue(((Number) value).doubleValue());\n \n     /**\n      * Checks whether the double value is the special NaN value.\n-     *\n+     * \n      * @return true if NaN\n      */\n     public boolean isNaN() {\n \n     /**\n      * Checks whether the double value is infinite.\n-     *\n+     * \n      * @return true if infinite\n      */\n     public boolean isInfinite() {\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Checks if this object equals the specified object.\n+     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n+     * is not <code>null</code> and is a <code>Double</code> object that represents a double that has the identical\n+     * bit pattern to the bit pattern of the double represented by this object. For this purpose, two\n+     * <code>double</code> values are considered to be the same if and only if the method\n+     * {@link Double#doubleToLongBits(double)}returns the same long value when applied to each.\n      * <p>\n-     * The object must be a MutableDouble with the same value to be equal.\n-     *\n-     * @param obj  the object to compare to\n-     * @return true if equal\n+     * Note that in most cases, for two instances of class <code>Double</code>,<code>d1</code> and <code>d2</code>,\n+     * the value of <code>d1.equals(d2)</code> is <code>true</code> if and only if <blockquote>\n+     * \n+     * <pre>\n+     *   d1.doubleValue()&nbsp;== d2.doubleValue()\n+     * </pre>\n+     * \n+     * </blockquote>\n+     * <p>\n+     * also has the value <code>true</code>. However, there are two exceptions:\n+     * <ul>\n+     * <li>If <code>d1</code> and <code>d2</code> both represent <code>Double.NaN</code>, then the\n+     * <code>equals</code> method returns <code>true</code>, even though <code>Double.NaN==Double.NaN</code> has\n+     * the value <code>false</code>.\n+     * <li>If <code>d1</code> represents <code>+0.0</code> while <code>d2</code> represents <code>-0.0</code>,\n+     * or vice versa, the <code>equal</code> test has the value <code>false</code>, even though\n+     * <code>+0.0==-0.0</code> has the value <code>true</code>. This allows hashtables to operate properly.\n+     * </ul>\n+     * \n+     * @param obj\n+     *            the object to compare with.\n+     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     public boolean equals(Object obj) {\n-        if (obj instanceof MutableDouble) {\n-            double other = ((MutableDouble) obj).value;\n-            return (Double.doubleToLongBits(other) == Double.doubleToLongBits(value));\n-        }\n-        return false;\n+        return (obj instanceof MutableDouble)\n+            && (Double.doubleToLongBits(((MutableDouble) obj).value) == Double.doubleToLongBits(value));\n     }\n \n     /**\n      * Returns a suitable hashcode for this mutable.\n-     *\n+     * \n      * @return a suitable hashcode\n      */\n     public int hashCode() {\n         long bits = Double.doubleToLongBits(value);\n-        return (int)(bits ^ (bits >>> 32));\n+        return (int) (bits ^ (bits >>> 32));\n     }\n \n     /**\n      * Compares this mutable to another in ascending order.\n-     *\n-     * @param obj  the mutable to compare to\n+     * \n+     * @param obj\n+     *            the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n+     * @throws ClassCastException if the argument is not a MutableDouble\n      */\n     public int compareTo(Object obj) {\n         MutableDouble other = (MutableDouble) obj;\n \n     /**\n      * Returns the String value of this mutable.\n-     *\n+     * \n      * @return the mutable value as a string\n      */\n     public String toString() {\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.mutable;\n \n-import java.io.Serializable;\n-\n import org.apache.commons.lang.math.NumberUtils;\n \n /**\n- * A mutable <code>float</code>.\n- * \n+ * A mutable <code>float</code> wrapper.\n+ * \n+ * @see Float\n  * @since 2.1\n- * @version $Id: MutableFloat.java,v 1.5 2004/10/01 17:12:29 ggregory Exp $\n+ * @version $Id: MutableFloat.java,v 1.6 2004/10/08 19:45:46 ggregory Exp $\n  */\n-public class MutableFloat extends Number\n-        implements Comparable, Mutable, Serializable {\n+public class MutableFloat extends Number implements Comparable, Mutable {\n \n     /** Serialization lock. */\n     private static final long serialVersionUID = 5787169186L;\n     /**\n      * Constructs a new MutableFloat with the specified value.\n      * \n-     * @param value a value.\n+     * @param value\n+     *            a value.\n      */\n     public MutableFloat(float value) {\n         super();\n     /**\n      * Constructs a new MutableFloat with the specified value.\n      * \n-     * @param value a value.\n-     * @throws NullPointerException if the object is null\n+     * @param value\n+     *            a value.\n+     * @throws NullPointerException\n+     *             if the object is null\n      */\n     public MutableFloat(Number value) {\n         super();\n     /**\n      * Sets the value.\n      * \n-     * @param value  the value to set\n+     * @param value\n+     *            the value to set\n      */\n     public void setValue(float value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value  the value to set\n-     * @throws NullPointerException if the object is null\n-     * @throws ClassCastException if the type is invalid\n+     * @param value\n+     *            the value to set\n+     * @throws NullPointerException\n+     *             if the object is null\n+     * @throws ClassCastException\n+     *             if the type is not a {@link Number}\n      */\n     public void setValue(Object value) {\n         setValue(((Number) value).floatValue());\n \n     /**\n      * Checks whether the float value is the special NaN value.\n-     *\n+     * \n      * @return true if NaN\n      */\n     public boolean isNaN() {\n \n     /**\n      * Checks whether the float value is infinite.\n-     *\n+     * \n      * @return true if infinite\n      */\n     public boolean isInfinite() {\n         return Float.isInfinite(value);\n+    }\n+\n+    /**\n+     * Compares this object against some other object. The result is <code>true</code> if and only if the argument is\n+     * not <code>null</code> and is a <code>Float</code> object that represents a <code>float</code> that has the\n+     * identical bit pattern to the bit pattern of the <code>float</code> represented by this object. For this\n+     * purpose, two float values are considered to be the same if and only if the method\n+     * {@link Float#floatToIntBits(float)}returns the same int value when applied to each.\n+     * <p>\n+     * Note that in most cases, for two instances of class <code>Float</code>,<code>f1</code> and <code>f2</code>,\n+     * the value of <code>f1.equals(f2)</code> is <code>true</code> if and only if <blockquote>\n+     * \n+     * <pre>\n+     *   f1.floatValue() == f2.floatValue()\n+     * </pre>\n+     * \n+     * </blockquote>\n+     * <p>\n+     * also has the value <code>true</code>. However, there are two exceptions:\n+     * <ul>\n+     * <li>If <code>f1</code> and <code>f2</code> both represent <code>Float.NaN</code>, then the\n+     * <code>equals</code> method returns <code>true</code>, even though <code>Float.NaN==Float.NaN</code> has\n+     * the value <code>false</code>.\n+     * <li>If <code>f1</code> represents <code>+0.0f</code> while <code>f2</code> represents <code>-0.0f</code>,\n+     * or vice versa, the <code>equal</code> test has the value <code>false</code>, even though\n+     * <code>0.0f==-0.0f</code> has the value <code>true</code>.\n+     * </ul>\n+     * This definition allows hashtables to operate properly.\n+     * \n+     * @param obj\n+     *            the object to be compared\n+     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n+     * @throws ClassCastException if the argument is not a MutableFloat\n+     * @see java.lang.Float#floatToIntBits(float)\n+     */\n+    public boolean equals(Object obj) {\n+        return (obj instanceof MutableFloat)\n+            && (Float.floatToIntBits(((MutableFloat) obj).value) == Float.floatToIntBits(value));\n     }\n \n     //-----------------------------------------------------------------------\n      * Checks if this object equals the specified object.\n      * <p>\n      * The object must be a MutableFloat with the same value to be equal.\n-     *\n-     * @param obj  the object to compare to\n+     * \n+     * @param obj\n+     *            the object to compare to\n      * @return true if equal\n      */\n-    public boolean equals(Object obj) {\n-        if (obj instanceof MutableFloat) {\n-            float other = ((MutableFloat) obj).value;\n-            return (Float.floatToIntBits(other) == Float.floatToIntBits(value));\n-        }\n-        return false;\n-    }\n-\n+    //    public boolean equals(Object obj) {\n+    //        if (obj instanceof MutableFloat) {\n+    //            float other = ((MutableFloat) obj).value;\n+    //            return (Float.floatToIntBits(other) == Float.floatToIntBits(value));\n+    //        }\n+    //        return false;\n+    //    }\n     /**\n      * Returns a suitable hashcode for this mutable.\n-     *\n+     * \n      * @return a suitable hashcode\n      */\n     public int hashCode() {\n \n     /**\n      * Compares this mutable to another in ascending order.\n-     *\n-     * @param obj  the mutable to compare to\n+     * \n+     * @param obj\n+     *            the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n      */\n     public int compareTo(Object obj) {\n \n     /**\n      * Returns the String value of this mutable.\n-     *\n+     * \n      * @return the mutable value as a string\n      */\n     public String toString() {\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.mutable;\n \n-import java.io.Serializable;\n-\n /**\n- * A mutable <code>int</code>.\n+ * A mutable <code>int</code> wrapper.\n  * \n+ * @see Integer\n  * @since 2.1\n- * @version $Id: MutableInt.java,v 1.3 2004/10/01 17:12:29 ggregory Exp $\n+ * @version $Id: MutableInt.java,v 1.4 2004/10/08 19:45:46 ggregory Exp $\n  */\n-public class MutableInt extends Number\n-        implements Comparable, Mutable, Serializable {\n+public class MutableInt extends Number implements Comparable, Mutable {\n \n     /** Serialization lock. */\n     private static final long serialVersionUID = 512176391864L;\n     /**\n      * Constructs a new MutableInt with the specified value.\n      * \n-     * @param value a value.\n+     * @param value\n+     *                  a value.\n      */\n     public MutableInt(int value) {\n         super();\n     /**\n      * Constructs a new MutableInt with the specified value.\n      * \n-     * @param value a value.\n-     * @throws NullPointerException if the object is null\n+     * @param value\n+     *                  a value.\n+     * @throws NullPointerException\n+     *                  if the object is null\n      */\n     public MutableInt(Number value) {\n         super();\n     /**\n      * Sets the value.\n      * \n-     * @param value  the value to set\n+     * @param value\n+     *                  the value to set\n      */\n     public void setValue(int value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value  the value to set\n-     * @throws NullPointerException if the object is null\n-     * @throws ClassCastException if the type is invalid\n+     * @param value\n+     *                  the value to set\n+     * @throws NullPointerException\n+     *                  if the object is null\n+     * @throws ClassCastException\n+     *                  if the type is not a {@link Number}\n      */\n     public void setValue(Object value) {\n         setValue(((Number) value).intValue());\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Checks if this object equals the specified object.\n-     * <p>\n-     * The object must be a MutableInt with the same value to be equal.\n-     *\n-     * @param obj  the object to compare to\n-     * @return true if equal\n+     * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is\n+     * not <code>null</code> and is an <code>MutableInt</code> object that contains the same <code>int</code> value\n+     * as this object.\n+     * \n+     * @param obj\n+     *                  the object to compare with.\n+     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableInt) {\n-            return (value == ((MutableInt) obj).value);\n+            return (value == ((MutableInt) obj).intValue());\n         }\n         return false;\n     }\n \n     /**\n      * Returns a suitable hashcode for this mutable.\n-     *\n+     * \n      * @return a suitable hashcode\n      */\n     public int hashCode() {\n \n     /**\n      * Compares this mutable to another in ascending order.\n-     *\n-     * @param obj  the mutable to compare to\n+     * \n+     * @param obj\n+     *                  the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n+     * @throws ClassCastException if the argument is not a MutableInt\n      */\n     public int compareTo(Object obj) {\n         MutableInt other = (MutableInt) obj;\n \n     /**\n      * Returns the String value of this mutable.\n-     *\n+     * \n      * @return the mutable value as a string\n      */\n     public String toString() {\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.mutable;\n \n-import java.io.Serializable;\n-\n /**\n- * A mutable <code>long</code>.\n+ * A mutable <code>long</code> wrapper.\n  * \n+ * @see Long\n  * @since 2.1\n- * @version $Id: MutableLong.java,v 1.5 2004/10/01 17:12:29 ggregory Exp $\n+ * @version $Id: MutableLong.java,v 1.6 2004/10/08 19:45:46 ggregory Exp $\n  */\n-public class MutableLong extends Number\n-        implements Comparable, Mutable, Serializable {\n+public class MutableLong extends Number implements Comparable, Mutable {\n \n     /** Serialization lock. */\n     private static final long serialVersionUID = 62986528375L;\n     /**\n      * Constructs a new MutableLong with the specified value.\n      * \n-     * @param value a value.\n+     * @param value\n+     *            a value.\n      */\n     public MutableLong(long value) {\n         super();\n     /**\n      * Constructs a new MutableLong with the specified value.\n      * \n-     * @param value a value.\n-     * @throws NullPointerException if the object is null\n+     * @param value\n+     *            a value.\n+     * @throws NullPointerException\n+     *             if the object is null\n      */\n     public MutableLong(Number value) {\n         super();\n     /**\n      * Sets the value.\n      * \n-     * @param value  the value to set\n+     * @param value\n+     *            the value to set\n      */\n     public void setValue(long value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value  the value to set\n-     * @throws NullPointerException if the object is null\n-     * @throws ClassCastException if the type is invalid\n+     * @param value\n+     *            the value to set\n+     * @throws NullPointerException\n+     *             if the object is null\n+     * @throws ClassCastException\n+     *             if the type is not a {@link Number}\n      */\n     public void setValue(Object value) {\n         setValue(((Number) value).longValue());\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Checks if this object equals the specified object.\n-     * <p>\n-     * The object must be a MutableLong with the same value to be equal.\n-     *\n-     * @param obj  the object to compare to\n-     * @return true if equal\n+     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n+     * is not <code>null</code> and is a <code>MutableLong</code> object that contains the same <code>long</code>\n+     * value as this object.\n+     * \n+     * @param obj\n+     *            the object to compare with.\n+     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableLong) {\n-            return (value == ((MutableLong) obj).value);\n+            return value == ((MutableLong) obj).longValue();\n         }\n         return false;\n     }\n \n     /**\n      * Returns a suitable hashcode for this mutable.\n-     *\n+     * \n      * @return a suitable hashcode\n      */\n     public int hashCode() {\n-        return (int)(value ^ (value >>> 32));\n+        return (int) (value ^ (value >>> 32));\n     }\n \n     /**\n      * Compares this mutable to another in ascending order.\n-     *\n-     * @param obj  the mutable to compare to\n+     * \n+     * @param obj\n+     *            the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n+     * @throws ClassCastException if the argument is not a MutableLong\n      */\n     public int compareTo(Object obj) {\n         MutableLong other = (MutableLong) obj;\n \n     /**\n      * Returns the String value of this mutable.\n-     *\n+     * \n      * @return the mutable value as a string\n      */\n     public String toString() {\n--- a/src/java/org/apache/commons/lang/mutable/MutableObject.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableObject.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.mutable;\n \n import java.io.Serializable;\n \n /**\n- * A mutable <code>Object</code>.\n+ * A mutable <code>Object</code> wrapper.\n  * \n  * @since 2.1\n- * @version $Id: MutableObject.java,v 1.2 2004/09/01 17:42:56 ggregory Exp $\n+ * @version $Id: MutableObject.java,v 1.3 2004/10/08 19:45:46 ggregory Exp $\n  */\n-public class MutableObject\n-        implements Mutable, Serializable {\n+public class MutableObject implements Mutable, Serializable {\n \n     /** Serialization lock. */\n     private static final long serialVersionUID = 86241875189L;\n     /**\n      * Constructs a new MutableObject with the specified value.\n      * \n-     * @param value a value.\n+     * @param value\n+     *            a value.\n      */\n     public MutableObject(Object value) {\n         super();\n     /**\n      * Sets the value.\n      * \n-     * @param value  the value to set\n+     * @param value\n+     *            the value to set\n      */\n     public void setValue(Object value) {\n         this.value = value;\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Checks if this object equals the specified object.\n-     * <p>\n-     * The object must be a MutableObject with an equal value to be equal.\n-     *\n-     * @param obj  the object to compare to\n-     * @return true if equal\n+     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n+     * is not <code>null</code> and is a <code>MutableObject</code> object that contains the same <code>Object</code>\n+     * value as this object.\n+     * \n+     * @param obj\n+     *            the object to compare with.\n+     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n+     * @throws ClassCastException if the argument is not a MutableObject\n      */\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableObject) {\n \n     /**\n      * Returns a suitable hashcode for this mutable.\n-     *\n+     * \n      * @return a suitable hashcode\n      */\n     public int hashCode() {\n \n     /**\n      * Returns the String value of this mutable.\n-     *\n+     * \n      * @return the mutable value as a string\n      */\n     public String toString() {\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.mutable;\n \n-import java.io.Serializable;\n-\n /**\n- * A mutable <code>short</code>.\n+ * A mutable <code>short</code> wrapper.\n  * \n+ * @see Short\n  * @since 2.1\n- * @version $Id: MutableShort.java,v 1.5 2004/10/01 17:12:29 ggregory Exp $\n+ * @version $Id: MutableShort.java,v 1.6 2004/10/08 19:45:46 ggregory Exp $\n  */\n-public class MutableShort extends Number\n-        implements Comparable, Mutable, Serializable {\n+public class MutableShort extends Number implements Comparable, Mutable {\n \n     /** Serialization lock. */\n     private static final long serialVersionUID = -2135791679L;\n     /**\n      * Constructs a new MutableShort with the specified value.\n      * \n-     * @param value a value.\n+     * @param value\n+     *                  a value.\n      */\n     public MutableShort(short value) {\n         super();\n     /**\n      * Constructs a new MutableShort with the specified value.\n      * \n-     * @param value a value.\n-     * @throws NullPointerException if the object is null\n+     * @param value\n+     *                  a value.\n+     * @throws NullPointerException\n+     *                  if the object is null\n      */\n     public MutableShort(Number value) {\n         super();\n     /**\n      * Sets the value.\n      * \n-     * @param value  the value to set\n+     * @param value\n+     *                  the value to set\n      */\n     public void setValue(short value) {\n         this.value = value;\n     /**\n      * Sets the value from any Number instance.\n      * \n-     * @param value  the value to set\n-     * @throws NullPointerException if the object is null\n-     * @throws ClassCastException if the type is invalid\n+     * @param value\n+     *                  the value to set\n+     * @throws NullPointerException\n+     *                  if the object is null\n+     * @throws ClassCastException\n+     *                  if the type is not a {@link Number}\n      */\n     public void setValue(Object value) {\n         setValue(((Number) value).shortValue());\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Checks if this object equals the specified object.\n-     * <p>\n-     * The object must be a MutableShort with the same value to be equal.\n-     *\n-     * @param obj  the object to compare to\n-     * @return true if equal\n+     * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n+     * is not <code>null</code> and is a <code>MutableShort</code> object that contains the same <code>short</code>\n+     * value as this object.\n+     * \n+     * @param obj\n+     *                  the object to compare with.\n+     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n      */\n     public boolean equals(Object obj) {\n         if (obj instanceof MutableShort) {\n-            return (value == ((MutableShort) obj).value);\n+            return (value == ((MutableShort) obj).shortValue());\n         }\n         return false;\n     }\n \n     /**\n      * Returns a suitable hashcode for this mutable.\n-     *\n+     * \n      * @return a suitable hashcode\n      */\n     public int hashCode() {\n \n     /**\n      * Compares this mutable to another in ascending order.\n-     *\n-     * @param obj  the mutable to compare to\n+     * \n+     * @param obj\n+     *                  the mutable to compare to\n      * @return negative if this is less, zero if equal, positive if greater\n+     * @throws ClassCastException if the argument is not a MutableShort\n      */\n     public int compareTo(Object obj) {\n         MutableShort other = (MutableShort) obj;\n \n     /**\n      * Returns the String value of this mutable.\n-     *\n+     * \n      * @return the mutable value as a string\n      */\n     public String toString() {", "timestamp": 1097264746, "metainfo": ""}