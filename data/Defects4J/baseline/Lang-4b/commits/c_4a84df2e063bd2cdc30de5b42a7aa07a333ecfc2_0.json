{"sha": "4a84df2e063bd2cdc30de5b42a7aa07a333ecfc2", "log": "Simplifying the unaccent code to no longer support Java 5  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n import java.io.UnsupportedEncodingException;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.text.Normalizer;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Iterator;\n      * <p>For instance, '&agrave;' will be replaced by 'a'.</p>\n      * <p>Note that ligatures will be left as is.</p>\n      *\n-     * <p>This method will use the first available implementation of:\n-     * Java 6's {@link java.text.Normalizer}, Java 1.3&ndash;1.5's {@code sun.text.Normalizer}</p>\n-     *\n      * <pre>\n      * StringUtils.stripAccents(null)                = null\n      * StringUtils.stripAccents(\"\")                  = \"\"\n         if(input == null) {\n             return null;\n         }\n-        try {\n-            String result = null;\n-            if (InitStripAccents.java6NormalizeMethod != null) {\n-                result = removeAccentsJava6(input);\n-            } else if (InitStripAccents.sunDecomposeMethod != null) {\n-                result = removeAccentsSUN(input);\n-            } else {\n-                throw new UnsupportedOperationException(\n-                    \"The stripAccents(CharSequence) method requires at least\"\n-                        +\" Java6, but got: \"+InitStripAccents.java6Exception\n-                        +\"; or a Sun JVM: \"+InitStripAccents.sunException);\n-            }\n-            // Note that none of the above methods correctly remove ligatures...\n-            return result;\n-        } catch(IllegalArgumentException iae) {\n-            throw new RuntimeException(\"IllegalArgumentException occurred\", iae);\n-        } catch(IllegalAccessException iae) {\n-            throw new RuntimeException(\"IllegalAccessException occurred\", iae);\n-        } catch(InvocationTargetException ite) {\n-            throw new RuntimeException(\"InvocationTargetException occurred\", ite);\n-        } catch(SecurityException se) {\n-            throw new RuntimeException(\"SecurityException occurred\", se);\n-        }\n-    }\n-\n-    /**\n-     * Use {@code java.text.Normalizer#normalize(CharSequence, Normalizer.Form)}\n-     * (but be careful, this class exists in Java 1.3, with an entirely different meaning!)\n-     *\n-     * @param text the text to be processed\n-     * @return the processed string\n-     * @throws IllegalAccessException may be thrown by a reflection call\n-     * @throws InvocationTargetException if a reflection call throws an exception\n-     * @throws IllegalStateException if the {@code Normalizer} class is not available\n-     */\n-    private static String removeAccentsJava6(CharSequence text)\n-        throws IllegalAccessException, InvocationTargetException {\n-        /*\n-        String decomposed = java.text.Normalizer.normalize(CharSequence, Normalizer.Form.NFD);\n-        return java6Pattern.matcher(decomposed).replaceAll(\"\");//$NON-NLS-1$\n-        */\n-        if (InitStripAccents.java6NormalizeMethod == null || InitStripAccents.java6NormalizerFormNFD == null) {\n-            throw new IllegalStateException(\"java.text.Normalizer is not available\", InitStripAccents.java6Exception);\n-        }\n-        String result;\n-        result = (String) InitStripAccents.java6NormalizeMethod.invoke(null, new Object[] {text, InitStripAccents.java6NormalizerFormNFD});\n-        result = InitStripAccents.java6Pattern.matcher(result).replaceAll(\"\");//$NON-NLS-1$\n-        return result;\n-    }\n-\n-    /**\n-     * Use {@code sun.text.Normalizer#decompose(String, boolean, int)}\n-     *\n-     * @param text the text to be processed\n-     * @return the processed string\n-     * @throws IllegalAccessException may be thrown by a reflection call\n-     * @throws InvocationTargetException if a reflection call throws an exception\n-     * @throws IllegalStateException if the {@code Normalizer} class is not available\n-     */\n-    private static String removeAccentsSUN(CharSequence text)\n-        throws IllegalAccessException, InvocationTargetException {\n-        /*\n-        String decomposed = sun.text.Normalizer.decompose(text, false, 0);\n-        return sunPattern.matcher(decomposed).replaceAll(\"\");//$NON-NLS-1$\n-        */\n-        if (InitStripAccents.sunDecomposeMethod == null) {\n-            throw new IllegalStateException(\"sun.text.Normalizer is not available\", InitStripAccents.sunException);\n-        }\n-        String result;\n-        result = (String) InitStripAccents.sunDecomposeMethod.invoke(null, new Object[] {text, Boolean.FALSE, Integer.valueOf(0)});\n-        result = InitStripAccents.sunPattern.matcher(result).replaceAll(\"\");//$NON-NLS-1$\n-        return result;\n-    }\n-\n-    // IOD container for stripAccent() initialisation\n-    private static class InitStripAccents {\n-        // SUN internal, Java 1.3 -> Java 5\n-        private static final Throwable sunException;\n-        private static final Method  sunDecomposeMethod;\n-        private static final Pattern sunPattern = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");//$NON-NLS-1$\n-        // Java 6+\n-        private static final Throwable java6Exception;\n-        private static final Method  java6NormalizeMethod;\n-        private static final Object  java6NormalizerFormNFD;\n-        private static final Pattern java6Pattern = sunPattern;\n-    \n-        static {\n-            // Set up defaults for final static fields\n-            Object _java6NormalizerFormNFD = null;\n-            Method _java6NormalizeMethod = null;\n-            Method _sunDecomposeMethod = null;\n-            Throwable _java6Exception = null;\n-            Throwable _sunException = null;\n-            try {\n-                // java.text.Normalizer.normalize(CharSequence, Normalizer.Form.NFD);\n-                // Be careful not to get Java 1.3 java.text.Normalizer!\n-                Class<?> normalizerFormClass = Thread.currentThread().getContextClassLoader()\n-                    .loadClass(\"java.text.Normalizer$Form\");//$NON-NLS-1$\n-                _java6NormalizerFormNFD = normalizerFormClass.getField(\"NFD\").get(null);//$NON-NLS-1$\n-                Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n-                    .loadClass(\"java.text.Normalizer\");//$NON-NLS-1$\n-                _java6NormalizeMethod = normalizerClass.getMethod(\"normalize\",//$NON-NLS-1$\n-                        new Class[] {CharSequence.class, normalizerFormClass});//$NON-NLS-1$\n-            } catch (Exception e1) {\n-                // Only check for Sun method if Java 6 method is not available\n-                _java6Exception = e1;\n-                try {\n-                    // sun.text.Normalizer.decompose(text, false, 0);\n-                    Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n-                        .loadClass(\"sun.text.Normalizer\");//$NON-NLS-1$\n-                    _sunDecomposeMethod = normalizerClass.getMethod(\"decompose\",//$NON-NLS-1$\n-                            new Class[] {String.class, Boolean.TYPE, Integer.TYPE});//$NON-NLS-1$\n-                } catch (Exception e2) {\n-                    _sunException = e2;\n-                }\n-            }\n-    \n-            // Set up final static fields\n-            java6Exception = _java6Exception;\n-            java6NormalizerFormNFD = _java6NormalizerFormNFD;\n-            java6NormalizeMethod = _java6NormalizeMethod;\n-            sunException = _sunException;\n-            sunDecomposeMethod = _sunDecomposeMethod;\n-        }\n+        Pattern pattern = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");//$NON-NLS-1$\n+        String decomposed = Normalizer.normalize(input, Normalizer.Form.NFD);\n+        // Note that this doesn't correctly remove ligatures...\n+        return pattern.matcher(decomposed).replaceAll(\"\");//$NON-NLS-1$\n     }\n \n     // Equals", "timestamp": 1330854321, "metainfo": ""}