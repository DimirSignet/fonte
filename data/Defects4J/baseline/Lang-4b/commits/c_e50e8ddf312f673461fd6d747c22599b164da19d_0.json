{"sha": "e50e8ddf312f673461fd6d747c22599b164da19d", "log": "<action issue=\"LANG-835\" type=\"add\">StrBuilder should support StringBuilder as an input parameter</action>  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n         } \n         return append(seq.toString(), startIndex, length);\n     }\n-\n+    \n     /**\n      * Appends a string to this string builder.\n      * Appending null will call {@link #appendNull()}.\n         }\n         return this;\n     }\n+   \n \n     /**\n      * Appends part of a string to this string builder.\n      * @return this, to enable chaining\n      */\n     public StrBuilder append(StringBuffer str, int startIndex, int length) {\n+        if (str == null) {\n+            return appendNull();\n+        }\n+        if (startIndex < 0 || startIndex > str.length()) {\n+            throw new StringIndexOutOfBoundsException(\"startIndex must be valid\");\n+        }\n+        if (length < 0 || (startIndex + length) > str.length()) {\n+            throw new StringIndexOutOfBoundsException(\"length must be valid\");\n+        }\n+        if (length > 0) {\n+            int len = length();\n+            ensureCapacity(len + length);\n+            str.getChars(startIndex, startIndex + length, buffer, len);\n+            size += length;\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * Appends a StringBuilder to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str the StringBuilder to append\n+     * @return this, to enable chaining\n+     * @since 3.2\n+     */\n+    public StrBuilder append(StringBuilder str) {\n+        if (str == null) {\n+            return appendNull();\n+        }\n+        int strLen = str.length();\n+        if (strLen > 0) {\n+            int len = length();\n+            ensureCapacity(len + strLen);\n+            str.getChars(0, strLen, buffer, len);\n+            size += strLen;\n+        }\n+        return this;\n+    }\n+    \n+    /**\n+     * Appends part of a StringBuilder to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str the StringBuilder to append\n+     * @param startIndex the start index, inclusive, must be valid\n+     * @param length the length to append, must be valid\n+     * @return this, to enable chaining\n+     * @since 3.2\n+     */\n+    public StrBuilder append(StringBuilder str, int startIndex, int length) {\n         if (str == null) {\n             return appendNull();\n         }\n      */\n     public StrBuilder appendln(StringBuffer str) {\n         return append(str).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends a string builder followed by a new line to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string builder to append\n+     * @return this, to enable chaining\n+     * @since 3.2\n+     */\n+    public StrBuilder appendln(StringBuilder str) {\n+        return append(str).appendNewLine();\n+    }\n+\n+    /**\n+     * Appends part of a string builder followed by a new line to this string builder.\n+     * Appending null will call {@link #appendNull()}.\n+     *\n+     * @param str  the string builder to append\n+     * @param startIndex  the start index, inclusive, must be valid\n+     * @param length  the length to append, must be valid\n+     * @return this, to enable chaining\n+     * @since 3.2\n+     */\n+    public StrBuilder appendln(StringBuilder str, int startIndex, int length) {\n+        return append(str, startIndex, length).appendNewLine();\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java\n         sb.append(new StringBuilder(\"bld\")); // Check it supports StringBuilder\n         assertEquals(\"foobazyesSeqbld\", sb.toString());\n     }\n-\n-    //-----------------------------------------------------------------------\n-    @Test\n-    public void testAppend_String() {\n+    \n+    //-----------------------------------------------------------------------\n+    @Test\n+    public void testAppend_StringBuilder() {\n         StrBuilder sb = new StrBuilder();\n         sb.setNullText(\"NULL\").append((String) null);\n         assertEquals(\"NULL\", sb.toString());\n \n         sb = new StrBuilder();\n+        sb.append(new StringBuilder(\"foo\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuilder(\"\"));\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuilder(\"bar\"));\n+        assertEquals(\"foobar\", sb.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n+    public void testAppend_String() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((String) null);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n         sb.append(\"foo\");\n         assertEquals(\"foo\", sb.toString());\n \n         assertEquals(\"foobar\", sb.toString());\n \n         sb.append( (CharSequence)\"abcbardef\", 4, 3);\n+        assertEquals(\"foobarard\", sb.toString());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    @Test\n+    public void testAppend_StringBuilder_int_int() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"NULL\").append((String) null, 0, 1);\n+        assertEquals(\"NULL\", sb.toString());\n+\n+        sb = new StrBuilder();\n+        sb.append(new StringBuilder(\"foo\"), 0, 3);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new StringBuilder(\"bar\"), -1, 1);\n+            fail(\"append(StringBuilder, -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuilder(\"bar\"), 3, 1);\n+            fail(\"append(StringBuilder, 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuilder(\"bar\"), 1, -1);\n+            fail(\"append(StringBuilder,, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuilder(\"bar\"), 1, 3);\n+            fail(\"append(StringBuilder, 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuilder(\"bar\"), -1, 3);\n+            fail(\"append(StringBuilder, -1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new StringBuilder(\"bar\"), 4, 0);\n+            fail(\"append(StringBuilder, 4, 0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(new StringBuilder(\"bar\"), 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new StringBuilder(\"abcbardef\"), 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+\n+        sb.append( new StringBuilder(\"abcbardef\"), 4, 3);\n         assertEquals(\"foobarard\", sb.toString());\n     }\n \n \n     //-----------------------------------------------------------------------\n     @Test\n+    public void testAppendln_StringBuilder() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(StringBuilder str) {\n+                count[0]++;\n+                return super.append(str);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StringBuilder(\"foo\"));\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n     public void testAppendln_StringBuffer_int_int() {\n         final int[] count = new int[2];\n         StrBuilder sb = new StrBuilder() {\n             }\n         };\n         sb.appendln(new StringBuffer(\"foo\"), 0, 3);\n+        assertEquals(\"foo\" + SEP, sb.toString());\n+        assertEquals(1, count[0]);\n+        assertEquals(1, count[1]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    @Test\n+    public void testAppendln_StringBuilder_int_int() {\n+        final int[] count = new int[2];\n+        StrBuilder sb = new StrBuilder() {\n+            @Override\n+            public StrBuilder append(StringBuilder str, int startIndex, int length) {\n+                count[0]++;\n+                return super.append(str, startIndex, length);\n+            }\n+            @Override\n+            public StrBuilder appendNewLine() {\n+                count[1]++;\n+                return super.appendNewLine();\n+            }\n+        };\n+        sb.appendln(new StringBuilder(\"foo\"), 0, 3);\n         assertEquals(\"foo\" + SEP, sb.toString());\n         assertEquals(1, count[0]);\n         assertEquals(1, count[1]);", "timestamp": 1353942240, "metainfo": ""}