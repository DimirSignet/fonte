{"sha": "3d2406c4138516ad7478b13c185487dcc66d1176", "log": "LANG-405 rename method from truncateMiddle() to abbreviateMiddle()  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n         }\n         return \"...\" + str.substring(str.length() - (maxWidth - 3));\n     }\n+    \n+    /**\n+     * <p>Abbreviates a String to the length passed, replacing the middle characters with the supplied\n+     * replacement String.</p>\n+     *\n+     * <p>This abbreviation only occurs if the following criteria is met:\n+     * <ul>\n+     * <li>Neither the String for abbreviation nor the replacement String are null or empty </li>\n+     * <li>The length to truncate to is less than the length of the supplied String</li>\n+     * <li>The length to truncate to is greater than 0</li>\n+     * <li>The abbreviated String will have enough room for the length supplied replacement String\n+     * and the first and last characters of the supplied String for truncation</li>\n+     * </ul>\n+     * Otherwise, the returned String will be the same as the supplied String for abbreviation.\n+     * </p>\n+     *\n+     * <pre>\n+     * StringUtils.abbreviateMiddle(null, null, 0)      = null\n+     * StringUtils.abbreviateMiddle(\"abc\", null, 0)      = \"abc\"\n+     * StringUtils.abbreviateMiddle(\"abc\", \".\", 0)      = \"abc\"\n+     * StringUtils.abbreviateMiddle(\"abc\", \".\", 3)      = \"abc\"\n+     * StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4)     = \"ab.f\"\n+     * </pre>\n+     *\n+     * @param str  the String to abbreviate, may be null\n+     * @param middle the String to replace the middle characters with, may be null\n+     * @param length the length to abbreviate <code>str</code> to.\n+     * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.\n+     */\n+    public static String abbreviateMiddle(String str, String middle, int length) {\n+        if (isEmpty(str) || isEmpty(middle)) {\n+            return str;\n+        }\n+      \n+        if (length >= str.length() || length < (middle.length()+2)) {\n+            return str;\n+        }\n+\n+        int targetSting = length-middle.length();\n+        int startOffset = targetSting/2+targetSting%2;\n+        int endOffset = str.length()-targetSting/2;\n+        \n+        StringBuilder builder = new StringBuilder(length);\n+        builder.append(str.substring(0,startOffset));\n+        builder.append(middle);\n+        builder.append(str.substring(endOffset));\n+        \n+        return builder.toString();\n+    }\n \n     // Difference\n     //-----------------------------------------------------------------------\n         int strOffset = str.length() - suffix.length();\n         return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());\n     }\n-    \n-    /**\n-     * <p>Truncates a String to the length passed, replacing the middle characters with the supplied\n-     * replacement String.</p>\n-     *\n-     * <p>This truncation only occurs if the following criteria is met:\n-     * <ul>\n-     * <li>Neither the String for truncation nor the replacement String are null or empty </li>\n-     * <li>The length to truncate to is less than the length of the supplied String</li>\n-     * <li>The length to truncate to is greater than 0</li>\n-     * <li>The truncated String will have enough room for the length supplied replacement String\n-     * and the first and last characters of the supplied String for truncation</li>\n-     * </ul>\n-     * Otherwise, the returned String will be the same as the supplied String for truncation.\n-     * </p>\n-     *\n-     * <pre>\n-     * StringUtils.truncateMiddle(null, null, 0)      = null\n-     * StringUtils.truncateMiddle(\"abc\", null, 0)      = \"abc\"\n-     * StringUtils.truncateMiddle(\"abc\", \".\", 0)      = \"abc\"\n-     * StringUtils.truncateMiddle(\"abc\", \".\", 3)      = \"abc\"\n-     * StringUtils.truncateMiddle(\"abcdef\", \".\", 4)     = \"ab.f\"\n-     * </pre>\n-     *\n-     * @param str  the String to truncate, may be null\n-     * @param middle the String to replace the middle characters with, may be null\n-     * @param length the length to truncate <code>str</code> to.\n-     * @return the truncated String if the above criteria is met, or the original String supplied for truncation.\n-     */\n-    public static String truncateMiddle(String str, String middle, int length) {\n-        if (isEmpty(str) || isEmpty(middle)) {\n-            return str;\n-        }\n-      \n-        if (length >= str.length() || length < (middle.length()+2)) {\n-            return str;\n-        }\n-\n-        int targetSting = length-middle.length();\n-        int startOffset = targetSting/2+targetSting%2;\n-        int endOffset = str.length()-targetSting/2;\n-        \n-        StringBuilder builder = new StringBuilder(length);\n-        builder.append(str.substring(0,startOffset));\n-        builder.append(middle);\n-        builder.append(str.substring(endOffset));\n-        \n-        return builder.toString();\n-    }\n }\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n         assertEquals(message, expected, actual);\n     }\n \n+    public void testAbbreviateMiddle() {\n+        // javadoc examples\n+        assertNull( StringUtils.abbreviateMiddle(null, null, 0) );\n+        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", null, 0) );\n+        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 0) );\n+        assertEquals( \"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 3) );\n+        assertEquals( \"ab.f\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 4) );\n+\n+        // JIRA issue (LANG-405) example (slightly different than actual expected result)\n+        assertEquals( \n+            \"A very long text with un...f the text is complete.\",\n+            StringUtils.abbreviateMiddle(\n+                \"A very long text with unimportant stuff in the middle but interesting start and \" +\n+                \"end to see if the text is complete.\", \"...\", 50) );\n+\n+        // Test a much longer text :)\n+        String longText = \"Start text\" + StringUtils.repeat(\"x\", 10000) + \"Close text\";\n+        assertEquals( \n+            \"Start text->Close text\",\n+            StringUtils.abbreviateMiddle( longText, \"->\", 22 ) );\n+\n+        // Test negative length\n+        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", -1));\n+\n+        // Test boundaries\n+        // Fails to change anything as method ensures first and last char are kept\n+        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 1));\n+        assertEquals(\"abc\", StringUtils.abbreviateMiddle(\"abc\", \".\", 2));\n+\n+        // Test length of n=1\n+        assertEquals(\"a\", StringUtils.abbreviateMiddle(\"a\", \".\", 1));\n+\n+        // Test smallest length that can lead to success\n+        assertEquals(\"a.d\", StringUtils.abbreviateMiddle(\"abcd\", \".\", 3));\n+\n+        // More from LANG-405\n+        assertEquals(\"a..f\", StringUtils.abbreviateMiddle(\"abcdef\", \"..\", 4));\n+        assertEquals(\"ab.ef\", StringUtils.abbreviateMiddle(\"abcdef\", \".\", 5));\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testDifference_StringString() {\n         assertEquals(null, StringUtils.difference(null, null));\n         // StringUtils.remove(\"queued\", 'z') = \"queued\"\n         assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n     }\n-\n-    public void testTruncateMiddle() {\n-        // javadoc examples\n-        assertNull( StringUtils.truncateMiddle(null, null, 0) );\n-        assertEquals( \"abc\", StringUtils.truncateMiddle(\"abc\", null, 0) );\n-        assertEquals( \"abc\", StringUtils.truncateMiddle(\"abc\", \".\", 0) );\n-        assertEquals( \"abc\", StringUtils.truncateMiddle(\"abc\", \".\", 3) );\n-        assertEquals( \"ab.f\", StringUtils.truncateMiddle(\"abcdef\", \".\", 4) );\n-\n-        // JIRA issue (LANG-405) example (slightly different than actual expected result)\n-        assertEquals( \n-            \"A very long text with un...f the text is complete.\",\n-            StringUtils.truncateMiddle(\n-                \"A very long text with unimportant stuff in the middle but interesting start and \" +\n-                \"end to see if the text is complete.\", \"...\", 50) );\n-\n-        // Test a much longer text :)\n-        String longText = \"Start text\" + StringUtils.repeat(\"x\", 10000) + \"Close text\";\n-        assertEquals( \n-            \"Start text->Close text\",\n-            StringUtils.truncateMiddle( longText, \"->\", 22 ) );\n-\n-        // Test negative length\n-        assertEquals(\"abc\", StringUtils.truncateMiddle(\"abc\", \".\", -1));\n-\n-        // Test boundaries\n-        // Fails to change anything as method ensures first and last char are kept\n-        assertEquals(\"abc\", StringUtils.truncateMiddle(\"abc\", \".\", 1));\n-        assertEquals(\"abc\", StringUtils.truncateMiddle(\"abc\", \".\", 2));\n-\n-        // Test length of n=1\n-        assertEquals(\"a\", StringUtils.truncateMiddle(\"a\", \".\", 1));\n-\n-        // Test smallest length that can lead to success\n-        assertEquals(\"a.d\", StringUtils.truncateMiddle(\"abcd\", \".\", 3));\n-\n-        // More from LANG-405\n-        assertEquals(\"a..f\", StringUtils.truncateMiddle(\"abcdef\", \"..\", 4));\n-        assertEquals(\"ab.ef\", StringUtils.truncateMiddle(\"abcdef\", \".\", 5));\n-    }\n     \n     public void testDifferenceAt_StringArray(){        \n         assertEquals(-1, StringUtils.indexOfDifference(null));", "timestamp": 1264098135, "metainfo": ""}