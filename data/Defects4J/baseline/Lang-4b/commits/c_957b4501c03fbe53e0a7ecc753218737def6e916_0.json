{"sha": "957b4501c03fbe53e0a7ecc753218737def6e916", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * <p>\n  * Assists in implementing {@link Object#toString()} methods using reflection.\n  * </p>\n- * \n+ *\n  * <p>\n  * This class uses reflection to determine the fields to append. Because these fields are usually private, the class\n  * uses {@link java.lang.reflect.AccessibleObject#setAccessible(java.lang.reflect.AccessibleObject[], boolean)} to\n  * change the visibility of the fields. This will fail under a security manager, unless the appropriate permissions are\n  * set up correctly.\n  * </p>\n- * \n+ *\n  * <p>\n  * A typical invocation for this method would look like:\n  * </p>\n- * \n+ *\n  * <pre>\n  * public String toString() {\n  *   return ReflectionToStringBuilder.toString(this);\n  * }</pre>\n- * \n- * \n- * \n+ *\n+ *\n+ *\n  * <p>\n  * You can also use the builder to debug 3rd party objects:\n  * </p>\n- * \n+ *\n  * <pre>\n  * System.out.println(\"An object: \" + ReflectionToStringBuilder.toString(anObject));</pre>\n- * \n- * \n- * \n+ *\n+ *\n+ *\n  * <p>\n  * A subclass can control field output by overriding the methods:\n  * <ul>\n  * For example, this method does <i>not</i> include the <code>password</code> field in the returned\n  * <code>String</code>:\n  * </p>\n- * \n+ *\n  * <pre>\n  * public String toString() {\n  *     return (new ReflectionToStringBuilder(this) {\n  *         }\n  *     }).toString();\n  * }</pre>\n- * \n- * \n- * \n+ *\n+ *\n+ *\n  * <p>\n  * The exact format of the <code>toString</code> is determined by the {@link ToStringStyle} passed into the\n  * constructor.\n  * </p>\n- * \n+ *\n  * @author Apache Software Foundation\n  * @author Gary Gregory\n  * @author Pete Gieser\n      * <p>\n      * Builds a <code>toString</code> value using the default <code>ToStringStyle</code> through reflection.\n      * </p>\n-     * \n+     *\n      * <p>\n      * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n      * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.\n      * </p>\n-     * \n+     *\n      * <p>\n      * Transient members will be not be included, as they are likely derived. Static fields will not be included.\n      * Superclass fields will be appended.\n      * </p>\n-     * \n+     *\n      * @param object\n      *            the Object to be output\n      * @return the String result\n      * <p>\n      * Builds a <code>toString</code> value through reflection.\n      * </p>\n-     * \n+     *\n      * <p>\n      * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n      * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.\n      * </p>\n-     * \n+     *\n      * <p>\n      * Transient members will be not be included, as they are likely derived. Static fields will not be included.\n      * Superclass fields will be appended.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n      * </p>\n-     * \n+     *\n      * @param object\n      *            the Object to be output\n      * @param style\n      * <p>\n      * Builds a <code>toString</code> value through reflection.\n      * </p>\n-     * \n+     *\n      * <p>\n      * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n      * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the <code>outputTransients</code> is <code>true</code>, transient members will be output, otherwise they\n      * are ignored, as they are likely derived fields, and not part of the value of the Object.\n      * </p>\n-     * \n+     *\n      * <p>\n      * Static fields will not be included. Superclass fields will be appended.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n      * </p>\n-     * \n+     *\n      * @param object\n      *            the Object to be output\n      * @param style\n      * <p>\n      * Builds a <code>toString</code> value through reflection.\n      * </p>\n-     * \n+     *\n      * <p>\n      * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n      * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the <code>outputTransients</code> is <code>true</code>, transient fields will be output, otherwise they\n      * are ignored, as they are likely derived fields, and not part of the value of the Object.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the <code>outputStatics</code> is <code>true</code>, static fields will be output, otherwise they are\n      * ignored.\n      * </p>\n-     * \n+     *\n      * <p>\n      * Static fields will not be included. Superclass fields will be appended.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n      * </p>\n-     * \n+     *\n      * @param object\n      *            the Object to be output\n      * @param style\n      * <p>\n      * Builds a <code>toString</code> value through reflection.\n      * </p>\n-     * \n+     *\n      * <p>\n      * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n      * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n      * also not as efficient as testing explicitly.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the <code>outputTransients</code> is <code>true</code>, transient fields will be output, otherwise they\n      * are ignored, as they are likely derived fields, and not part of the value of the Object.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the <code>outputStatics</code> is <code>true</code>, static fields will be output, otherwise they are\n      * ignored.\n      * </p>\n-     * \n+     *\n      * <p>\n      * Superclass fields will be appended up to and including the specified superclass. A null superclass is treated as\n      * <code>java.lang.Object</code>.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n      * </p>\n-     * \n+     *\n+     * @param <T>\n+     *            the type of the object\n      * @param object\n      *            the Object to be output\n      * @param style\n \n     /**\n      * Builds a String for a toString method excluding the given field name.\n-     * \n+     *\n      * @param object\n      *            The object to \"toString\".\n      * @param excludeFieldName\n \n     /**\n      * Builds a String for a toString method excluding the given field names.\n-     * \n+     *\n      * @param object\n      *            The object to \"toString\".\n      * @param excludeFieldNames\n \n     /**\n      * Converts the given Collection into an array of Strings. The returned array does not contain <code>null</code>\n-     * entries. Note that {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element \n+     * entries. Note that {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} if an array element\n      * is <code>null</code>.\n-     * \n+     *\n      * @param collection\n      *            The collection to convert\n      * @return A new array of Strings.\n \n     /**\n      * Returns a new array of Strings without null elements. Internal method used to normalize exclude lists\n-     * (arrays and collections). Note that {@link Arrays#sort(Object[])} will throw an {@link NullPointerException} \n+     * (arrays and collections). Note that {@link Arrays#sort(Object[])} will throw an {@link NullPointerException}\n      * if an array element is <code>null</code>.\n-     * \n+     *\n      * @param array\n      *            The array to check\n      * @return The given array or a new array without null.\n         }\n         return list.toArray(ArrayUtils.EMPTY_STRING_ARRAY);\n     }\n-    \n+\n \n     /**\n      * Builds a String for a toString method excluding the given field names.\n-     * \n+     *\n      * @param object\n      *            The object to \"toString\".\n      * @param excludeFieldNames\n      * <p>\n      * Constructor.\n      * </p>\n-     * \n+     *\n      * <p>\n      * This constructor outputs using the default style set with <code>setDefaultStyle</code>.\n      * </p>\n-     * \n+     *\n      * @param object\n      *            the Object to build a <code>toString</code> for, must not be <code>null</code>\n      * @throws IllegalArgumentException\n      * <p>\n      * Constructor.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the style is <code>null</code>, the default style is used.\n      * </p>\n-     * \n+     *\n      * @param object\n      *            the Object to build a <code>toString</code> for, must not be <code>null</code>\n      * @param style\n      * <p>\n      * Constructor.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the style is <code>null</code>, the default style is used.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If the buffer is <code>null</code>, a new one is created.\n      * </p>\n-     * \n+     *\n      * @param object\n      *            the Object to build a <code>toString</code> for\n      * @param style\n \n     /**\n      * Constructor.\n-     * \n+     *\n+     * @param <T>\n+     *            the type of the object\n      * @param object\n      *            the Object to build a <code>toString</code> for\n      * @param style\n      * <li>Static fields are appended only if {@link #isAppendStatics()} returns <code>true</code>.\n      * <li>Inner class fields are not appened.</li>\n      * </ul>\n-     * \n+     *\n      * @param field\n      *            The Field to test.\n      * @return Whether or not to append the given <code>Field</code>.\n      * <p>\n      * Appends the fields and values defined by the given object of the given Class.\n      * </p>\n-     * \n+     *\n      * <p>\n      * If a cycle is detected as an object is &quot;toString()'ed&quot;, such an object is rendered as if\n      * <code>Object.toString()</code> had been called and not implemented by the object.\n      * </p>\n-     * \n+     *\n      * @param clazz\n      *            The class of object parameter\n      */\n      * <p>\n      * Gets the last super class to stop appending fields for.\n      * </p>\n-     * \n+     *\n      * @return The last super class to stop appending fields for.\n      */\n     public Class<?> getUpToClass() {\n      * <p>\n      * Calls <code>java.lang.reflect.Field.get(Object)</code>.\n      * </p>\n-     * \n+     *\n      * @param field\n      *            The Field to query.\n      * @return The Object from the given Field.\n-     * \n+     *\n      * @throws IllegalArgumentException\n      *             see {@link java.lang.reflect.Field#get(Object)}\n      * @throws IllegalAccessException\n      *             see {@link java.lang.reflect.Field#get(Object)}\n-     * \n+     *\n      * @see java.lang.reflect.Field#get(Object)\n      */\n     protected Object getValue(Field field) throws IllegalArgumentException, IllegalAccessException {\n      * <p>\n      * Gets whether or not to append static fields.\n      * </p>\n-     * \n+     *\n      * @return Whether or not to append static fields.\n      * @since 2.1\n      */\n      * <p>\n      * Gets whether or not to append transient fields.\n      * </p>\n-     * \n+     *\n      * @return Whether or not to append transient fields.\n      */\n     public boolean isAppendTransients() {\n      * <p>\n      * Append to the <code>toString</code> an <code>Object</code> array.\n      * </p>\n-     * \n+     *\n      * @param array\n      *            the array to add to the <code>toString</code>\n      * @return this\n      * <p>\n      * Sets whether or not to append static fields.\n      * </p>\n-     * \n+     *\n      * @param appendStatics\n      *            Whether or not to append static fields.\n      * @since 2.1\n      * <p>\n      * Sets whether or not to append transient fields.\n      * </p>\n-     * \n+     *\n      * @param appendTransients\n      *            Whether or not to append transient fields.\n      */\n \n     /**\n      * Sets the field names to exclude.\n-     * \n+     *\n      * @param excludeFieldNamesParam\n      *            The excludeFieldNames to excluding from toString or <code>null</code>.\n      * @return <code>this</code>\n      * <p>\n      * Sets the last super class to stop appending fields for.\n      * </p>\n-     * \n+     *\n      * @param clazz\n      *            The last super class to stop appending fields for.\n      */\n      * <p>\n      * Gets the String built by this builder.\n      * </p>\n-     * \n+     *\n      * @return the built string\n      */\n     @Override", "timestamp": 1300552975, "metainfo": ""}