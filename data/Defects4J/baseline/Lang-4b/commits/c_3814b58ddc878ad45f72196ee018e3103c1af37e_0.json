{"sha": "3814b58ddc878ad45f72196ee018e3103c1af37e", "log": "Add @since 2.0 tags based on http://www.apache.org/~bayard/commons-lang-2.0/Commons-Lang-1.0.1-to-2.0/missingSinces.txt   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.103 2003/08/19 00:11:20 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.104 2003/08/21 05:57:21 ggregory Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     \n     /**\n      * The empty String <code>\"\"</code>.\n+     * @since 2.0\n      */\n     public static final String EMPTY = \"\";\n     \n      *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if the String is null, empty or whitespace\n+     * @since 2.0\n      */\n     public static boolean isBlank(String str) {\n         int strLen;\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if the String is \n      *  not empty and not null and not whitespace\n+     * @since 2.0\n      */\n     public static boolean isNotBlank(String str) {\n         int strLen;\n      * @param str  the String to be trimmed, may be null\n      * @return the trimmed String, \n      *  <code>null</code> if only chars &lt;= 32, empty or null String input\n+     * @since 2.0\n      */\n     public static String trimToNull(String str) {\n         String ts = trim(str);\n      *  \n      * @param str  the String to be trimmed, may be null\n      * @return the trimmed String, or an empty String if <code>null</code> input\n+     * @since 2.0\n      */\n     public static String trimToEmpty(String str) {\n         return (str == null ? EMPTY : str.trim());\n      * @param str  the String to be stripped, may be null\n      * @return the stripped String, \n      *  <code>null</code> if whitespace, empty or null String input\n+     * @since 2.0\n      */\n     public static String stripToNull(String str) {\n         if (str == null) {\n      *  \n      * @param str  the String to be stripped, may be null\n      * @return the trimmed String, or an empty String if <code>null</code> input\n+     * @since 2.0\n      */\n     public static String stripToEmpty(String str) {\n         return (str == null ? EMPTY : strip(str, null));\n      * @param searchChar  the character to find\n      * @return the first index of the search character, \n      *  -1 if no match or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static int indexOf(String str, char searchChar) {\n         if (str == null || str.length() == 0) {\n      * @param startPos  the start position, negative treated as zero\n      * @return the first index of the search character, \n      *  -1 if no match or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static int indexOf(String str, char searchChar, int startPos) {\n         if (str == null || str.length() == 0) {\n      * @param searchStr  the String to find, may be null\n      * @return the first index of the search String,\n      *  -1 if no match or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static int indexOf(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n      * @param startPos  the start position, negative treated as zero\n      * @return the first index of the search String,\n      *  -1 if no match or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static int indexOf(String str, String searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n      * @param searchChar  the character to find\n      * @return the last index of the search character, \n      *  -1 if no match or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static int lastIndexOf(String str, char searchChar) {\n         if (str == null || str.length() == 0) {\n      * @param startPos  the start position\n      * @return the last index of the search character, \n      *  -1 if no match or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static int lastIndexOf(String str, char searchChar, int startPos) {\n         if (str == null || str.length() == 0) {\n      * @param searchStr  the String to find, may be null\n      * @return the last index of the search String,\n      *  -1 if no match or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static int lastIndexOf(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n      * @param startPos  the start position, negative treated as zero\n      * @return the first index of the search String,\n      *  -1 if no match or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static int lastIndexOf(String str, String searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n      * @param searchChar  the character to find\n      * @return true if the String contains the search character, \n      *  false if not or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static boolean contains(String str, char searchChar) {\n         if (str == null || str.length() == 0) {\n      * @param searchStr  the String to find, may be null\n      * @return true if the String contains the search character, \n      *  false if not or <code>null</code> string input\n+     * @since 2.0\n      */\n     public static boolean contains(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n+     * @since 2.0\n      */\n      public static int indexOfAny(String str, char[] searchChars) {\n          if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n+     * @since 2.0\n      */\n     public static int indexOfAny(String str, String searchChars) {\n         if (str == null || str.length() == 0 || searchChars == null || searchChars.length() == 0) {\n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n+     * @since 2.0\n      */\n      public static int indexOfAnyBut(String str, char[] searchChars) {\n          if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {\n      * @param str  the String to check, may be null\n      * @param searchChars  the chars to search for, may be null\n      * @return the index of any of the chars, -1 if no match or null input\n+     * @since 2.0\n      */\n     public static int indexOfAnyBut(String str, String searchChars) {\n         if (str == null || str.length() == 0 || searchChars == null || searchChars.length() == 0) {\n      * @param str  the String to check, may be null\n      * @param validChars  a String of valid chars, may be null\n      * @return true if it only contains valid chars and is non-null\n+     * @since 2.0\n      */\n     public static boolean containsOnly(String str, String validChars) {\n         if (str == null || validChars == null) {\n      * @param str  the String to check, may be null\n      * @param invalidChars  an array of invalid chars, may be null\n      * @return true if it contains none of the invalid chars, or is null\n+     * @since 2.0\n      */\n     public static boolean containsNone(String str, char[] invalidChars) {\n         if (str == null || invalidChars == null) {\n      * @param str  the String to check, may be null\n      * @param invalidChars  a String of invalid chars, may be null\n      * @return true if it contains none of the invalid chars, or is null\n+     * @since 2.0\n      */\n     public static boolean containsNone(String str, String invalidChars) {\n         if (str == null || invalidChars == null) {\n      * @param separator  the String to search for, may be null\n      * @return the substring before the first occurance of the separator,\n      *  <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String substringBefore(String str, String separator) {\n         if (str == null || separator == null || str.length() == 0) {\n      * @param separator  the String to search for, may be null\n      * @return the substring after the first occurance of the separator,\n      *  <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String substringAfter(String str, String separator) {\n         if (str == null || str.length() == 0) {\n      * @param separator  the String to search for, may be null\n      * @return the substring before the last occurance of the separator,\n      *  <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String substringBeforeLast(String str, String separator) {\n         if (str == null || separator == null || str.length() == 0 || separator.length() == 0) {\n      * @param separator  the String to search for, may be null\n      * @return the substring after the last occurance of the separator,\n      *  <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String substringAfterLast(String str, String separator) {\n         if (str == null || str.length() == 0) {\n      * @param str  the String containing the substring, may be null\n      * @param tag  the String before and after the substring, may be null\n      * @return the substring, <code>null</code> if no match\n+     * @since 2.0\n      */\n     public static String substringBetween(String str, String tag) {\n         return substringBetween(str, tag, tag);\n      * @param open  the String before the substring, may be null\n      * @param close  the String after the substring, may be null\n      * @return the substring, <code>null</code> if no match\n+     * @since 2.0\n      */\n     public static String substringBetween(String str, String open, String close) {\n         if (str == null || open == null || close == null) {\n      * @param separatorChar  the character used as the delimiter,\n      *  <code>null</code> splits on whitespace\n      * @return an array of parsed Strings, <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String[] split(String str, char separatorChar) {\n         // Performance tuned for 2.0 (JDK1.4)\n      * \n      * @param array  the array of values to join together, may be null\n      * @return the joined String, <code>null</code> if null array input\n+     * @since 2.0\n      */\n     public static String join(Object[] array) {\n         return join(array, null);\n      * @param array  the array of values to join together, may be null\n      * @param separator  the separator character to use\n      * @return the joined String, <code>null</code> if null array input\n+     * @since 2.0\n      */\n     public static String join(Object[] array, char separator) {\n         if (array == null) {\n      * @param iterator  the <code>Iterator</code> of values to join together, may be null\n      * @param separator  the separator character to use\n      * @return the joined String, <code>null</code> if null iterator input\n+     * @since 2.0\n      */\n     public static String join(Iterator iterator, char separator) {\n         if (iterator == null) {\n      * @param searchChar  the character to search for, may be null\n      * @param replaceChar  the character to replace, may be null\n      * @return modified String, <code>null</code> if null string input\n+     * @since 2.0\n      */\n     public static String replaceChars(String str, char searchChar, char replaceChar) {\n         if (str == null) {\n      * @param searchChars  a set of characters to search for, may be null\n      * @param replaceChars  a set of characters to replace, may be null\n      * @return modified String, <code>null</code> if null string input\n+     * @since 2.0\n      */\n     public static String replaceChars(String str, String searchChars, String replaceChars) {\n         if (str == null || str.length() == 0 || searchChars == null || searchChars.length()== 0) {\n      * @param start  the position to start overlaying at\n      * @param end  the position to stop overlaying before\n      * @return overlayed String, <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String overlay(String str, String overlay, int start, int end) {\n         if (str == null) {\n      * @param padChar  the character to pad with\n      * @return right padded String or original String if no padding is necessary,\n      *  <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String rightPad(String str, int size, char padChar) {\n         if (str == null) {\n      * @param padChar  the character to pad with\n      * @return left padded String or original String if no padding is necessary,\n      *  <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String leftPad(String str, int size, char padChar) {\n         if (str == null) {\n      * @param size  the int size of new String, negative treated as zero\n      * @param padChar  the character to pad the new String with\n      * @return centered String, <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String center(String str, int size, char padChar) {\n         if (str == null || size <= 0) {\n      * @return the capitalized String, <code>null</code> if null String input\n      * @see WordUtils#capitalize(String)\n      * @see #uncapitalize(String)\n+     * @since 2.0\n      */\n     public static String capitalize(String str) {\n         int strLen;\n      * @return the uncapitalized String, <code>null</code> if null String input\n      * @see WordUtils#uncapitalize(String)\n      * @see #capitalize(String)\n+     * @since 2.0\n      */\n     public static String uncapitalize(String str) {\n         int strLen;\n      *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if only contains whitespace, and is non-null\n+     * @since 2.0\n      */\n     public static boolean isWhitespace(String str) {\n         if (str == null) {\n      * @param str  the String to reverse, may be null\n      * @param separatorChar  the separator character to use\n      * @return the reversed String, <code>null</code> if null String input\n+     * @since 2.0\n      */\n     public static String reverseDelimited(String str, char separatorChar) {\n         if (str == null) {\n      * @param maxWidth  maximum length of result String, must be at least 4\n      * @return abbreviated String, <code>null</code> if null String input\n      * @throws IllegalArgumentException if the width is too small\n+     * @since 2.0\n      */\n     public static String abbreviate(String str, int maxWidth) {\n         return abbreviate(str, 0, maxWidth);\n      * @param maxWidth  maximum length of result String, must be at least 4\n      * @return abbreviated String, <code>null</code> if null String input\n      * @throws IllegalArgumentException if the width is too small\n+     * @since 2.0\n      */\n     public static String abbreviate(String str, int offset, int maxWidth) {\n         if (str == null) {\n      * @param str2  the second String, may be null\n      * @return the portion of str2 where it differs from str1; returns the \n      * empty String if they are equal\n+     * @since 2.0\n      */\n     public static String difference(String str1, String str2) {\n         if (str1 == null) {\n      * @param str1  the first String, may be null\n      * @param str2  the second String, may be null\n      * @return the index where str2 and str1 begin to differ; -1 if they are equal\n+     * @since 2.0\n      */\n     public static int differenceAt(String str1, String str2) {\n         if (str1 == str2) {", "timestamp": 1061445441, "metainfo": ""}