{"sha": "5564fb57cf13dac2f052ceb3a7039a5d156fbe8d", "log": "Adding NOPMD tags for various empty catch blocks  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n                 if (out != null) {\n                     out.close();\n                 }\n-            } catch (IOException ex) {\n+            } catch (IOException ex) { // NOPMD\n                 // ignore close exception\n             }\n         }\n                 if (in != null) {\n                     in.close();\n                 }\n-            } catch (IOException ex) {\n+            } catch (IOException ex) { // NOPMD\n                 // ignore close exception\n             }\n         }\n--- a/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n         Method method = null;\n         try {\n             method = throwable.getClass().getMethod(methodName, (Class[]) null);\n-        } catch (NoSuchMethodException ignored) {\n+        } catch (NoSuchMethodException ignored) { // NOPMD\n             // exception ignored\n-        } catch (SecurityException ignored) {\n+        } catch (SecurityException ignored) { // NOPMD\n             // exception ignored\n         }\n \n         if (method != null && Throwable.class.isAssignableFrom(method.getReturnType())) {\n             try {\n                 return (Throwable) method.invoke(throwable, ArrayUtils.EMPTY_OBJECT_ARRAY);\n-            } catch (IllegalAccessException ignored) {\n+            } catch (IllegalAccessException ignored) { // NOPMD\n                 // exception ignored\n-            } catch (IllegalArgumentException ignored) {\n+            } catch (IllegalArgumentException ignored) { // NOPMD\n                 // exception ignored\n-            } catch (InvocationTargetException ignored) {\n+            } catch (InvocationTargetException ignored) { // NOPMD\n                 // exception ignored\n             }\n         }\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n                         && (numeric.charAt(0) == '-' && isDigits(numeric.substring(1)) || isDigits(numeric))) {\n                         try {\n                             return createLong(numeric);\n-                        } catch (NumberFormatException nfe) {\n-                            //Too big for a long\n+                        } catch (NumberFormatException nfe) { // NOPMD\n+                            // Too big for a long\n                         }\n                         return createBigInteger(numeric);\n \n                             return f;\n                         }\n \n-                    } catch (NumberFormatException nfe) {\n+                    } catch (NumberFormatException nfe) { // NOPMD\n                         // ignore the bad number\n                     }\n                     //$FALL-THROUGH$\n                         if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {\n                             return d;\n                         }\n-                    } catch (NumberFormatException nfe) {\n+                    } catch (NumberFormatException nfe) { // NOPMD\n                         // ignore the bad number\n                     }\n                     try {\n                         return createBigDecimal(numeric);\n-                    } catch (NumberFormatException e) {\n+                    } catch (NumberFormatException e) { // NOPMD\n                         // ignore the bad number\n                     }\n                     //$FALL-THROUGH$\n                 //Must be an int,long,bigint\n                 try {\n                     return createInteger(str);\n-                } catch (NumberFormatException nfe) {\n+                } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n                 try {\n                     return createLong(str);\n-                } catch (NumberFormatException nfe) {\n+                } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n                 return createBigInteger(str);\n                     if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n                         return f;\n                     }\n-                } catch (NumberFormatException nfe) {\n+                } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n                 try {\n                     if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n                         return d;\n                     }\n-                } catch (NumberFormatException nfe) {\n+                } catch (NumberFormatException nfe) { // NOPMD\n                     // ignore the bad number\n                 }\n \n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n             Constructor<T> ctor = cls.getConstructor(parameterTypes);\n             MemberUtils.setAccessibleWorkaround(ctor);\n             return ctor;\n-        } catch (NoSuchMethodException e) { /* SWALLOW */\n+        } catch (NoSuchMethodException e) { // NOPMD - Swallow\n         }\n         Constructor<T> result = null;\n         /*\n--- a/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java\n                     }\n                 }\n                 return field;\n-            } catch (NoSuchFieldException ex) {\n+            } catch (NoSuchFieldException ex) { // NOPMD\n                 // ignore\n             }\n         }\n                                     + \"; a matching field exists on two or more implemented interfaces.\");\n                 }\n                 match = test;\n-            } catch (NoSuchFieldException ex) {\n+            } catch (NoSuchFieldException ex) { // NOPMD\n                 // ignore\n             }\n         }\n                 }\n             }\n             return field;\n-        } catch (NoSuchFieldException e) {\n+        } catch (NoSuchFieldException e) { // NOPMD\n+            // ignore\n         }\n         return null;\n     }\n--- a/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java\n                 && isPackageAccess(m.getDeclaringClass().getModifiers())) {\n             try {\n                 o.setAccessible(true);\n-            } catch (SecurityException e) {\n+            } catch (SecurityException e) { // NOPMD\n                 // ignore in favor of subsequent IllegalAccessException\n             }\n         }\n--- a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n                 try {\n                     method = interfaces[i].getDeclaredMethod(methodName,\n                             parameterTypes);\n-                } catch (NoSuchMethodException e) {\n+                } catch (NoSuchMethodException e) { // NOPMD\n                     /*\n                      * Swallow, if no method is found after the loop then this\n                      * method returns null.\n             Method method = cls.getMethod(methodName, parameterTypes);\n             MemberUtils.setAccessibleWorkaround(method);\n             return method;\n-        } catch (NoSuchMethodException e) { /* SWALLOW */\n+        } catch (NoSuchMethodException e) { /* SWALLOW - NOPMD */\n         }\n         // search through all methods\n         Method bestMatch = null;\n--- a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n             if ((c == START_FMT || c == END_FE) && result.length() > 0) {\n                 try {\n                     return Integer.parseInt(result.toString());\n-                } catch (NumberFormatException e) {\n+                } catch (NumberFormatException e) { // NOPMD\n                     // we've already ensured only digits, so unless something\n                     // outlandishly large was specified we should be okay.\n                 }", "timestamp": 1302151173, "metainfo": ""}