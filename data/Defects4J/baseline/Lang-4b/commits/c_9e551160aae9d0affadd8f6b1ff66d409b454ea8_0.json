{"sha": "9e551160aae9d0affadd8f6b1ff66d409b454ea8", "log": "Applying Robert Scholte's patch to Travis Reeder's request for a DateUtils.ceiling(...) method to complete truncate(...) and round(...) in LANG-434  ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n  * \n  * <p>DateUtils contains a lot of common methods considering manipulations\n  * of Dates or Calendars. Some methods require some extra explanation.\n- * The truncate and round methods could be considered the Math.floor(),\n+ * The truncate, ceiling and round methods could be considered the Math.floor(),\n  * Math.ceil() or Math.round versions for dates\n  * This way date-fields will be ignored in bottom-up order.\n  * As a complement to these methods we've introduced some fragment-methods.\n      * A month range, the week starting on Monday.\n      */\n     public final static int RANGE_MONTH_MONDAY = 6;\n+    \n+    /**\n+     * Constant marker for truncating \n+     * @since 3.0\n+     */\n+    public final static int MODIFY_TRUNCATE = 0;\n+\n+    /**\n+     * Constant marker for rounding\n+     * @since 3.0\n+     */\n+    public final static int MODIFY_ROUND = 1;\n+    \n+    /**\n+     * Constant marker for ceiling\n+     * @since 3.0\n+     */\n+    public final static int MODIFY_CEILING= 2;\n+    \n \n     /**\n      * <p><code>DateUtils</code> instances should NOT be constructed in\n         }\n         Calendar gval = Calendar.getInstance();\n         gval.setTime(date);\n-        modify(gval, field, true);\n+        modify(gval, field, MODIFY_ROUND);\n         return gval.getTime();\n     }\n \n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n         Calendar rounded = (Calendar) date.clone();\n-        modify(rounded, field, true);\n+        modify(rounded, field, MODIFY_ROUND);\n         return rounded;\n     }\n \n         }\n         Calendar gval = Calendar.getInstance();\n         gval.setTime(date);\n-        modify(gval, field, false);\n+        modify(gval, field, MODIFY_TRUNCATE);\n         return gval.getTime();\n     }\n \n             throw new IllegalArgumentException(\"The date must not be null\");\n         }\n         Calendar truncated = (Calendar) date.clone();\n-        modify(truncated, field, false);\n+        modify(truncated, field, MODIFY_TRUNCATE);\n         return truncated;\n     }\n \n             throw new ClassCastException(\"Could not truncate \" + date);\n         }\n     }\n+    \n+  //-----------------------------------------------------------------------\n+    /**\n+     * <p>Ceil this date, leaving the field specified as the most\n+     * significant field.</p>\n+     *\n+     * <p>For example, if you had the datetime of 28 Mar 2002\n+     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n+     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n+     * return 1 Mar 2002 0:00:00.000.</p>\n+     * \n+     * @param date  the date to work with\n+     * @param field  the field from <code>Calendar</code>\n+     *  or <code>SEMI_MONTH</code>\n+     * @return the rounded date\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ArithmeticException if the year is over 280 million\n+     */\n+    public static Date ceiling(Date date, int field) {\n+        if (date == null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        Calendar gval = Calendar.getInstance();\n+        gval.setTime(date);\n+        modify(gval, field, MODIFY_CEILING);\n+        return gval.getTime();\n+    }\n+\n+    /**\n+     * <p>Ceil this date, leaving the field specified as the most\n+     * significant field.</p>\n+     *\n+     * <p>For example, if you had the datetime of 28 Mar 2002\n+     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n+     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n+     * return 1 Mar 2002 0:00:00.000.</p>\n+     * \n+     * @param date  the date to work with\n+     * @param field  the field from <code>Calendar</code>\n+     *  or <code>SEMI_MONTH</code>\n+     * @return the rounded date (a different object)\n+     * @throws IllegalArgumentException if the date is <code>null</code>\n+     * @throws ArithmeticException if the year is over 280 million\n+     */\n+    public static Calendar ceiling(Calendar date, int field) {\n+        if (date == null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        Calendar ceiled = (Calendar) date.clone();\n+        modify(ceiled, field, MODIFY_CEILING);\n+        return ceiled;\n+    }\n+\n+    /**\n+     * <p>Ceil this date, leaving the field specified as the most\n+     * significant field.</p>\n+     *\n+     * <p>For example, if you had the datetime of 28 Mar 2002\n+     * 13:45:01.231, if you passed with HOUR, it would return 28 Mar\n+     * 2002 13:00:00.000.  If this was passed with MONTH, it would\n+     * return 1 Mar 2002 0:00:00.000.</p>\n+     * \n+     * @param date  the date to work with, either <code>Date</code>\n+     *  or <code>Calendar</code>\n+     * @param field  the field from <code>Calendar</code>\n+     *  or <code>SEMI_MONTH</code>\n+     * @return the rounded date\n+     * @throws IllegalArgumentException if the date\n+     *  is <code>null</code>\n+     * @throws ClassCastException if the object type is not a\n+     *  <code>Date</code> or <code>Calendar</code>\n+     * @throws ArithmeticException if the year is over 280 million\n+     */\n+    public static Date ceiling(Object date, int field) {\n+        if (date == null) {\n+            throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        if (date instanceof Date) {\n+            return ceiling((Date) date, field);\n+        } else if (date instanceof Calendar) {\n+            return ceiling((Calendar) date, field).getTime();\n+        } else {\n+            throw new ClassCastException(\"Could not find ceiling of for type: \" + date.getClass());\n+        }\n+    }\n \n     //-----------------------------------------------------------------------\n     /**\n      * \n      * @param val  the calendar\n      * @param field  the field constant\n-     * @param round  true to round, false to truncate\n+     * @param modType  type to truncate, round or ceiling\n      * @throws ArithmeticException if the year is over 280 million\n      */\n-    private static void modify(Calendar val, int field, boolean round) {\n+    private static void modify(Calendar val, int field, int modType) {\n         if (val.get(Calendar.YEAR) > 280000000) {\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n \n         // truncate milliseconds\n         int millisecs = val.get(Calendar.MILLISECOND);\n-        if (!round || millisecs < 500) {\n+        if (MODIFY_TRUNCATE == modType || millisecs < 500) {\n             time = time - millisecs;\n         }\n         if (field == Calendar.SECOND) {\n \n         // truncate seconds\n         int seconds = val.get(Calendar.SECOND);\n-        if (!done && (!round || seconds < 30)) {\n+        if (!done && (MODIFY_TRUNCATE == modType || seconds < 30)) {\n             time = time - (seconds * 1000L);\n         }\n         if (field == Calendar.MINUTE) {\n \n         // truncate minutes\n         int minutes = val.get(Calendar.MINUTE);\n-        if (!done && (!round || minutes < 30)) {\n+        if (!done && (MODIFY_TRUNCATE == modType || minutes < 30)) {\n             time = time - (minutes * 60000L);\n         }\n \n             for (int j = 0; j < fields[i].length; j++) {\n                 if (fields[i][j] == field) {\n                     //This is our field... we stop looping\n-                    if (round && roundUp) {\n+                    if (modType == MODIFY_CEILING || (modType == MODIFY_ROUND && roundUp)) {\n                         if (field == DateUtils.SEMI_MONTH) {\n                             //This is a special case that's hard to generalize\n                             //If the date is 1, we round up to 16, otherwise\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n                 dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n                 DateUtils.round((Object) calAmPm4, Calendar.AM_PM));\n         \n-        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n+        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 / LANG-13\n         // Test rounding across the beginning of daylight saving time\n         TimeZone.setDefault(zone);\n         dateTimeParser.setTimeZone(zone);\n         // restore default time zone\n         TimeZone.setDefault(defaultZone);\n     }\n+    \n+    /**\n+     * Tests various values with the ceiling method\n+     */\n+    public void testCeil() throws Exception {\n+    \t// tests public static Date ceiling(Date date, int field)\n+    \tassertEquals(\"ceiling year-1 failed\",\n+                dateParser.parse(\"January 1, 2003\"),\n+                DateUtils.ceiling(date1, Calendar.YEAR));\n+        assertEquals(\"ceiling year-2 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.ceiling(date2, Calendar.YEAR));\n+        assertEquals(\"ceiling month-1 failed\",\n+                dateParser.parse(\"March 1, 2002\"),\n+                DateUtils.ceiling(date1, Calendar.MONTH));\n+        assertEquals(\"ceiling month-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.ceiling(date2, Calendar.MONTH));\n+        assertEquals(\"ceiling semimonth-1 failed\",\n+                dateParser.parse(\"February 16, 2002\"),\n+                DateUtils.ceiling(date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"ceiling semimonth-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.ceiling(date2, DateUtils.SEMI_MONTH));\n+        assertEquals(\"ceiling date-1 failed\",\n+                dateParser.parse(\"February 13, 2002\"),\n+                DateUtils.ceiling(date1, Calendar.DATE));\n+        assertEquals(\"ceiling date-2 failed\",\n+                dateParser.parse(\"November 19, 2001\"),\n+                DateUtils.ceiling(date2, Calendar.DATE));\n+        assertEquals(\"ceiling hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n+                DateUtils.ceiling(date1, Calendar.HOUR));\n+        assertEquals(\"ceiling hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n+                DateUtils.ceiling(date2, Calendar.HOUR));\n+        assertEquals(\"ceiling minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n+                DateUtils.ceiling(date1, Calendar.MINUTE));\n+        assertEquals(\"ceiling minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n+                DateUtils.ceiling(date2, Calendar.MINUTE));\n+        assertEquals(\"ceiling second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.ceiling(date1, Calendar.SECOND));\n+        assertEquals(\"ceiling second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n+                DateUtils.ceiling(date2, Calendar.SECOND));\n+        assertEquals(\"ceiling ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling(dateAmPm1, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling(dateAmPm2, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-3 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling(dateAmPm3, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-4 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling(dateAmPm4, Calendar.AM_PM));\n+        \n+     // tests public static Date ceiling(Object date, int field)\n+        assertEquals(\"ceiling year-1 failed\",\n+                dateParser.parse(\"January 1, 2003\"),\n+                DateUtils.ceiling((Object) date1, Calendar.YEAR));\n+        assertEquals(\"ceiling year-2 failed\",\n+                dateParser.parse(\"January 1, 2002\"),\n+                DateUtils.ceiling((Object) date2, Calendar.YEAR));\n+        assertEquals(\"ceiling month-1 failed\",\n+                dateParser.parse(\"March 1, 2002\"),\n+                DateUtils.ceiling((Object) date1, Calendar.MONTH));\n+        assertEquals(\"ceiling month-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.ceiling((Object) date2, Calendar.MONTH));\n+        assertEquals(\"ceiling semimonth-1 failed\",\n+                dateParser.parse(\"February 16, 2002\"),\n+                DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH));\n+        assertEquals(\"ceiling semimonth-2 failed\",\n+                dateParser.parse(\"December 1, 2001\"),\n+                DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH));\n+        assertEquals(\"ceiling date-1 failed\",\n+                dateParser.parse(\"February 13, 2002\"),\n+                DateUtils.ceiling((Object) date1, Calendar.DATE));\n+        assertEquals(\"ceiling date-2 failed\",\n+                dateParser.parse(\"November 19, 2001\"),\n+                DateUtils.ceiling((Object) date2, Calendar.DATE));\n+        assertEquals(\"ceiling hour-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 13:00:00.000\"),\n+                DateUtils.ceiling((Object) date1, Calendar.HOUR));\n+        assertEquals(\"ceiling hour-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 2:00:00.000\"),\n+                DateUtils.ceiling((Object) date2, Calendar.HOUR));\n+        assertEquals(\"ceiling minute-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:35:00.000\"),\n+                DateUtils.ceiling((Object) date1, Calendar.MINUTE));\n+        assertEquals(\"ceiling minute-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:24:00.000\"),\n+                DateUtils.ceiling((Object) date2, Calendar.MINUTE));\n+        assertEquals(\"ceiling second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.ceiling((Object) date1, Calendar.SECOND));\n+        assertEquals(\"ceiling second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n+                DateUtils.ceiling((Object) date2, Calendar.SECOND));\n+        assertEquals(\"ceiling ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-3 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-4 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM));\n+        \n+        assertEquals(\"ceiling calendar second-1 failed\",\n+                dateTimeParser.parse(\"February 12, 2002 12:34:57.000\"),\n+                DateUtils.ceiling((Object) cal1, Calendar.SECOND));\n+        assertEquals(\"ceiling calendar second-2 failed\",\n+                dateTimeParser.parse(\"November 18, 2001 1:23:12.000\"),\n+                DateUtils.ceiling((Object) cal2, Calendar.SECOND));\n+        \n+        assertEquals(\"ceiling ampm-1 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-2 failed\",\n+                dateTimeParser.parse(\"February 3, 2002 12:00:00.000\"),\n+                DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-3 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM));\n+        assertEquals(\"ceiling ampm-4 failed\",\n+                dateTimeParser.parse(\"February 4, 2002 00:00:00.000\"),\n+                DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM));\n+\n+        try {\n+            DateUtils.ceiling((Date) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.ceiling((Calendar) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.ceiling((Object) null, Calendar.SECOND);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateUtils.ceiling(\"\", Calendar.SECOND);\n+            fail();\n+        } catch (ClassCastException ex) {}\n+        try {\n+            DateUtils.ceiling(date1, -9999);\n+            fail();\n+        } catch(IllegalArgumentException ex) {}\n+\n+        \n+        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n+        // Test ceiling across the beginning of daylight saving time\n+    \tTimeZone.setDefault(zone);\n+        dateTimeParser.setTimeZone(zone);\n+\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling(date4, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling((Object) cal4, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling(date5, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling((Object) cal5, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling(date6, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling((Object) cal6, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling(date7, Calendar.DATE));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 31, 2003 00:00:00.000\"),\n+                DateUtils.ceiling((Object) cal7, Calendar.DATE));\n+        \n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"ceiling MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY));\n+        if (SystemUtils.isJavaVersionAtLeast(1.4f)) {\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                    DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                    DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY));\n+            assertEquals(\"ceiling MET date across DST change-over\",\n+                    dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                    DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY));\n+        } else {\n+            this.warn(\"WARNING: Some date ceiling tests not run since the current version is \" + SystemUtils.JAVA_VERSION);\n+        }\n+    \tTimeZone.setDefault(defaultZone);\n+        dateTimeParser.setTimeZone(defaultZone);\n+        \n+     // Bug 31395, large dates\n+        Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis\n+        GregorianCalendar endCal = new GregorianCalendar();\n+        endCal.setTime(endOfTime);\n+        try {\n+            DateUtils.ceiling(endCal, Calendar.DATE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        endCal.set(Calendar.YEAR, 280000001);\n+        try {\n+            DateUtils.ceiling(endCal, Calendar.DATE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        endCal.set(Calendar.YEAR, 280000000);\n+        Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE);\n+        assertEquals(0, cal.get(Calendar.HOUR));\n+    }\n \n     /**\n      * Tests the iterator exceptions", "timestamp": 1248031264, "metainfo": ""}