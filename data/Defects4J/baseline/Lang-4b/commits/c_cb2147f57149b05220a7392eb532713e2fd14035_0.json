{"sha": "cb2147f57149b05220a7392eb532713e2fd14035", "log": "Eliminate varargs warnings  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n         assertFalse(ClassUtils.isAssignable(null, array2));\n         assertTrue(ClassUtils.isAssignable(null, array0));\n         assertTrue(ClassUtils.isAssignable(array0, array0));\n-        assertTrue(ClassUtils.isAssignable(array0, null));\n+        assertTrue(ClassUtils.isAssignable(array0, (Class<?>[]) null)); // test both types of ...\n+        assertTrue(ClassUtils.isAssignable(array0, (Class<?>) null));   // ... varargs invocation\n         assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null));\n \n         assertFalse(ClassUtils.isAssignable(array1, array1s));\n \n     public void testPrimitivesToWrappers() {\n         // test null\n-        assertNull(\"null -> null\",\n-            ClassUtils.primitivesToWrappers(null));\n+        assertNull(\"null -> null\", ClassUtils.primitivesToWrappers((Class<?>[]) null)); // test both types of ...\n+        assertNull(\"null -> null\", ClassUtils.primitivesToWrappers((Class<?>) null));   // ... varargs invocation\n         // test empty array\n         assertEquals(\"empty -> empty\",\n                 ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.primitivesToWrappers(ArrayUtils.EMPTY_CLASS_ARRAY));\n     }\n \n     public void testWrappersToPrimitivesNull() {\n-        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives(null));\n+        // Test both types of varargs invocation\n+        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives((Class<?>[]) null));\n+        assertNull(\"Wrong result for null input\", ClassUtils.wrappersToPrimitives((Class<?>) null));\n     }\n \n     public void testWrappersToPrimitivesEmpty() {\n     }\n \n     public void testToClass_object() {\n-        assertNull(ClassUtils.toClass(null));\n+        // Test both types of varargs invocation\n+        assertNull(ClassUtils.toClass((Object[]) null));\n+        assertNull(ClassUtils.toClass((Object) null));\n \n         assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));\n \n         assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class },\n-                ClassUtils.toClass(new Object[] { \"Test\", 1, 99d })));\n+                ClassUtils.toClass(new Object[] { \"Test\", Integer.valueOf(1), Double.valueOf(99d) })));\n \n         assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class },\n-                ClassUtils.toClass(new Object[] { \"Test\", null, 99d })));\n+                ClassUtils.toClass(new Object[] { \"Test\", null, Double.valueOf(99d) })));\n     }\n \n     public void test_getShortCanonicalName_Object() {\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n     }\n \n     public void testLastIndexOfAny_StringStringArray() {\n-        assertEquals(-1, StringUtils.lastIndexOfAny(null, null));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ...\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\n-        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, null));\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ...\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation\n         assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n     }\n \n     public void testJoin_Objectarray() {\n-        assertEquals(null, StringUtils.join(null));\n+        // Test both types of varargs invocation\n+        assertEquals(null, StringUtils.join((Object[]) null));\n+        assertEquals(null, StringUtils.join((Object) null));\n         assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n         assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n         assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n         String[] fooDots = new String[] { \"..\"+FOO+\"..\", \"..\"+FOO, FOO+\"..\" };\n         String[] foo = new String[] { FOO, FOO, FOO };\n \n-        assertEquals(null, StringUtils.stripAll(null));\n+        // Test both varargs invocations\n+        assertEquals(null, StringUtils.stripAll((String[]) null));\n+        assertEquals(null, StringUtils.stripAll((String) null));\n         assertArrayEquals(empty, StringUtils.stripAll(empty));\n         assertArrayEquals(foo, StringUtils.stripAll(fooSpace));\n         ", "timestamp": 1307277881, "metainfo": ""}