{"sha": "b434e9614d5bacf99166c71beb6bf9c452a04f64", "log": "Add subarray methods for primitive types Change subarray for Objects to return same type as input from Ashwin S   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Array;\n import java.util.HashMap;\n import java.util.Map;\n \n import org.apache.commons.lang.builder.ToStringStyle;\n \n /**\n- * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and primitive wrapper arrays\n- * (like <code>Integer[]</code>).</p>\n+ * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and\n+ * primitive wrapper arrays (like <code>Integer[]</code>).</p>\n  * \n  * <p>This class tries to handle <code>null</code> input gracefully.\n  * An exception will not be thrown for a <code>null</code>\n  * @author Gary Gregory\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.28 2003/11/30 13:36:08 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.29 2003/12/05 23:37:18 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n     /**\n      * <p>Produces a new array containing the elements between\n      * the start and end indices.</p>\n-     * \n+     *\n      * <p>The start index is inclusive, the end index exclusive.\n-     * Null array input produces null output.\n-     * The result is always an <code>Object[]</code> instance</p>\n+     * Null array input produces null output.</p>\n+     *\n+     * <p>The component type of the subarray is always the same as\n+     * that of the input array. Thus, if the input is an array of type\n+     * <code>Date</code>, the following usage is envisaged:</p>\n+     *\n+     * <pre>\n+     * Date[] someDates = (Date[])ArrayUtils.subarray(allDates, 2, 5);\n+     * </pre>\n      *\n      * @param array  the array\n-     * @param startIndex  the starting index. Undervalue (&lt;0)\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n      *      is promoted to 0, overvalue (&gt;array.length) results\n      *      in an empty array.\n-     * @param endIndex  elements upto endIndex-1 are present in the\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n      *      returned subarray. Undervalue (&lt; startIndex) produces\n      *      empty array, overvalue (&gt;array.length) is demoted to\n      *      array length.\n      */\n-    public static Object[] subArray(Object[] array, int startIndexInclusive, int endIndexExclusive) {\n+    public static Object[] subarray(Object[] array, int startIndexInclusive, int endIndexExclusive) {\n         if (array == null) {\n             return null;\n         }\n             endIndexExclusive = array.length;\n         }\n         int newSize = endIndexExclusive - startIndexInclusive;\n+        Class type = array.getClass().getComponentType();\n         if (newSize <= 0) {\n-            return EMPTY_OBJECT_ARRAY;\n-        }\n-        Object[] subArray = new Object[newSize];\n-        System.arraycopy(array, startIndexInclusive, subArray, 0, newSize);\n-        return subArray;\n+            return (Object[]) Array.newInstance(type, 0);\n+        }\n+        Object[] subarray = (Object[]) Array.newInstance(type, newSize);\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>long</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     */\n+    public static long[] subarray(long[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_LONG_ARRAY;\n+        }\n+\n+        long[] subarray = new long[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>int</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     */\n+    public static int[] subarray(int[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_INT_ARRAY;\n+        }\n+\n+        int[] subarray = new int[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>short</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     */\n+    public static short[] subarray(short[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_SHORT_ARRAY;\n+        }\n+\n+        short[] subarray = new short[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>char</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     */\n+    public static char[] subarray(char[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_CHAR_ARRAY;\n+        }\n+\n+        char[] subarray = new char[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>byte</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     */\n+    public static byte[] subarray(byte[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+\n+        byte[] subarray = new byte[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>double</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     */\n+    public static double[] subarray(double[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        }\n+\n+        double[] subarray = new double[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>float</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     */\n+    public static float[] subarray(float[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_FLOAT_ARRAY;\n+        }\n+\n+        float[] subarray = new float[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n+    }\n+\n+    /**\n+     * <p>Produces a new <code>boolean</code> array containing the elements\n+     * between the start and end indices.</p>\n+     *\n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.</p>\n+     *\n+     * @param array  the array\n+     * @param startIndexInclusive  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndexExclusive  elements up to endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     */\n+    public static boolean[] subarray(boolean[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_BOOLEAN_ARRAY;\n+        }\n+\n+        boolean[] subarray = new boolean[newSize];\n+        System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n+        return subarray;\n     }\n \n     // Is same length\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.Arrays;\n+import java.util.Date;\n import java.util.Map;\n \n import junit.framework.Test;\n  * @author Matthew Hawthorne\n  * @author Tim O'Brien\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n- * @version $Id: ArrayUtilsTest.java,v 1.17 2003/11/30 13:36:08 scolebourne Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.18 2003/12/05 23:37:18 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n \n     //-----------------------------------------------------------------------\n \n-    public void testSubArray() {\n-        Object[] inarray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n+    public void testSubarrayObject() {\n+        Object[] nullArray = null;\n+        Object[] objectArray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n \n         assertEquals(\"0 start, mid end\", \"abcd\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, 0, 4)));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4)));\n         assertEquals(\"0 start, length end\", \"abcdef\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, 0, inarray.length)));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length)));\n         assertEquals(\"mid start, mid end\", \"bcd\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, 1, 4)));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4)));\n         assertEquals(\"mid start, length end\", \"bcdef\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, 1, inarray.length)));\n-\n-        assertNull(\"null input\", ArrayUtils.subArray(null, 0, 3));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length)));\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n         assertEquals(\"empty array\", \"\",\n-            StringUtils.join(ArrayUtils.subArray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)));\n+            StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)));\n         assertEquals(\"start > end\", \"\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, 4, 2)));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2)));\n         assertEquals(\"start == end\", \"\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, 3, 3)));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3)));\n         assertEquals(\"start undershoot, normal end\", \"abcd\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, -2, 4)));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4)));\n         assertEquals(\"start overshoot, any end\", \"\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, 33, 4)));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4)));\n         assertEquals(\"normal start, end overshoot\", \"cdef\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, 2, 33)));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33)));\n         assertEquals(\"start undershoot, end overshoot\", \"abcdef\",\n-            StringUtils.join(ArrayUtils.subArray(inarray, -2, 12)));\n+            StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12)));\n             \n-        // object-level tests\n-        assertSame(\"empty array, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n-            ArrayUtils.subArray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2));\n-        assertSame(\"start > end, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n-            ArrayUtils.subArray(inarray, 4, 1));\n-        assertSame(\"start > end, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n-            ArrayUtils.subArray(inarray, 33, 1));\n-        assertSame(\"start == end, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n-            ArrayUtils.subArray(inarray, 3, 3));\n-        assertSame(\"start overshoot, any end, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n-            ArrayUtils.subArray(inarray, 8733, 4));\n-    }\n-\n+        // array type tests\n+        Date[] dateArray = { new java.sql.Date(new Date().getTime()),\n+            new Date(), new Date(), new Date(), new Date() };\n+\n+        assertSame(\"Object type\", Object.class,\n+            ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType());\n+        assertSame(\"java.util.Date type\", java.util.Date.class,\n+            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());\n+        assertNotSame(\"java.sql.Date type\", java.sql.Date.class,\n+            ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType());\n+        try {\n+            Object dummy = (java.sql.Date[])ArrayUtils.subarray(dateArray, 1,3);\n+            fail(\"Invalid downcast\");\n+        } catch (ClassCastException e) {}\n+    }\n+\n+    public void testSubarrayLong() {\n+        long[] nullArray = null;\n+        long[] array = { 999910, 999911, 999912, 999913, 999914, 999915 };\n+        long[] leftSubarray     = { 999910, 999911, 999912, 999913 };\n+        long[] midSubarray      = { 999911, 999912, 999913, 999914 };\n+        long[] rightSubarray    = { 999912, 999913, 999914, 999915 };\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_LONG_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_LONG_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_LONG_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_LONG_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_LONG_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"long type\", long.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayInt() {\n+        int[] nullArray = null;\n+        int[] array = { 10, 11, 12, 13, 14, 15 };\n+        int[] leftSubarray  = { 10, 11, 12, 13 };\n+        int[] midSubarray   = { 11, 12, 13, 14 };\n+        int[] rightSubarray = { 12, 13, 14, 15 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_INT_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_INT_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_INT_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_INT_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_INT_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"int type\", int.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayShort() {\n+        short[] nullArray = null;\n+        short[] array = { 10, 11, 12, 13, 14, 15 };\n+        short[] leftSubarray    = { 10, 11, 12, 13 };\n+        short[] midSubarray     = { 11, 12, 13, 14 };\n+        short[] rightSubarray   = { 12, 13, 14, 15 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_SHORT_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_SHORT_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_SHORT_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_SHORT_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"short type\", short.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrChar() {\n+        char[] nullArray = null;\n+        char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' };\n+        char[] leftSubarray     = { 'a', 'b', 'c', 'd', };\n+        char[] midSubarray      = { 'b', 'c', 'd', 'e', };\n+        char[] rightSubarray    = { 'c', 'd', 'e', 'f', };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_CHAR_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_CHAR_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_CHAR_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_CHAR_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"char type\", char.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayByte() {\n+        byte[] nullArray = null;\n+        byte[] array = { 10, 11, 12, 13, 14, 15 };\n+        byte[] leftSubarray     = { 10, 11, 12, 13 };\n+        byte[] midSubarray      = { 11, 12, 13, 14 };\n+        byte[] rightSubarray = { 12, 13, 14, 15 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_BYTE_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_BYTE_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_BYTE_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_BYTE_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_BYTE_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"byte type\", byte.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayDouble() {\n+        double[] nullArray = null;\n+        double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 };\n+        double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, };\n+        double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, };\n+        double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_DOUBLE_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"double type\", double.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayFloat() {\n+        float[] nullArray = null;\n+        float[] array = { 10, 11, 12, 13, 14, 15 };\n+        float[] leftSubarray    = { 10, 11, 12, 13 };\n+        float[] midSubarray     = { 11, 12, 13, 14 };\n+        float[] rightSubarray   = { 12, 13, 14, 15 };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_FLOAT_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_FLOAT_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"float type\", float.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+\n+    public void testSubarrayBoolean() {\n+        boolean[] nullArray = null;\n+        boolean[] array = { true, true, false, true, false, true };\n+        boolean[] leftSubarray  = { true, true, false, true  };\n+        boolean[] midSubarray   = { true, false, true, false };\n+        boolean[] rightSubarray = { false, true, false, true };\n+\n+\n+        assertTrue(\"0 start, mid end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, 0, 4)));\n+\n+        assertTrue(\"0 start, length end\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, 0, array.length)));\n+\n+        assertTrue(\"mid start, mid end\",\n+            ArrayUtils.isEquals(midSubarray,\n+                ArrayUtils.subarray(array, 1, 5)));\n+\n+        assertTrue(\"mid start, length end\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, array.length)));\n+\n+\n+        assertNull(\"null input\", ArrayUtils.subarray(nullArray, 0, 3));\n+\n+        assertEquals(\"empty array\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+            ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));\n+\n+        assertEquals(\"start > end\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+            ArrayUtils.subarray(array, 4, 2));\n+\n+        assertEquals(\"start == end\", ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+            ArrayUtils.subarray(array, 3, 3));\n+\n+        assertTrue(\"start undershoot, normal end\",\n+            ArrayUtils.isEquals(leftSubarray,\n+                ArrayUtils.subarray(array, -2, 4)));\n+\n+        assertEquals(\"start overshoot, any end\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(array, 33, 4));\n+\n+        assertTrue(\"normal start, end overshoot\",\n+            ArrayUtils.isEquals(rightSubarray,\n+                ArrayUtils.subarray(array, 2, 33)));\n+\n+        assertTrue(\"start undershoot, end overshoot\",\n+            ArrayUtils.isEquals(array,\n+                ArrayUtils.subarray(array, -2, 12)));\n+\n+        // empty-return tests\n+\n+        assertSame(\"empty array, object test\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2));\n+\n+        assertSame(\"start > end, object test\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(array, 4, 1));\n+\n+        assertSame(\"start == end, object test\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(array, 3, 3));\n+\n+        assertSame(\"start overshoot, any end, object test\",\n+            ArrayUtils.EMPTY_BOOLEAN_ARRAY,\n+                ArrayUtils.subarray(array, 8733, 4));\n+\n+        // array type tests\n+\n+        assertSame(\"boolean type\", boolean.class,\n+            ArrayUtils.subarray(array, 2, 4).getClass().getComponentType());\n+\n+    }\n+    \n     //-----------------------------------------------------------------------\n     public void testSameLength() {\n         Object[] nullArray = null;", "timestamp": 1070667438, "metainfo": ""}