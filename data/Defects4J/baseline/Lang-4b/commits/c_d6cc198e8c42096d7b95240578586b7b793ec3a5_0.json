{"sha": "d6cc198e8c42096d7b95240578586b7b793ec3a5", "log": "Simplify tests by using @Test(expected)  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n-import static org.junit.Assert.fail;\n-\n import org.junit.Test;\n \n /**\n \n     // -----------------------------------------------------------------------\n \n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void testConstructorEx1() {\n-        try {\n-            new HashCodeBuilder(0, 0);\n-\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test\n+        new HashCodeBuilder(0, 0);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n     public void testConstructorEx2() {\n-        try {\n-            new HashCodeBuilder(2, 2);\n-\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+        new HashCodeBuilder(2, 2);\n     }\n \n     static class TestObject {\n                 123456, 7890, 0), true));\n     }\n \n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void testReflectionHierarchyHashCodeEx1() {\n-        try {\n-            HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test\n+        HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n     public void testReflectionHierarchyHashCodeEx2() {\n-        try {\n-            HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test\n+        HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n     public void testReflectionHashCodeEx1() {\n-        try {\n-            HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test\n+        HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n     public void testReflectionHashCodeEx2() {\n-        try {\n-            HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test\n+        HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n     public void testReflectionHashCodeEx3() {\n-        try {\n-            HashCodeBuilder.reflectionHashCode(13, 19, null, true);\n-        } catch (IllegalArgumentException ex) {\n-            return;\n-        }\n-        fail();\n+        HashCodeBuilder.reflectionHashCode(13, 19, null, true);\n     }\n \n     @Test", "timestamp": 1338418091, "metainfo": ""}