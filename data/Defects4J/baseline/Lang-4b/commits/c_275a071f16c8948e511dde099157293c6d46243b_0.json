{"sha": "275a071f16c8948e511dde099157293c6d46243b", "log": "Applying my patch from LANG-478 - moving StopWatch to using nanoTime under the hood.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/StopWatch.java\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n  */\n public class StopWatch {\n \n+    private static final long NANO_2_MILLIS = 1000000L;\n+\n     // running states\n     private static final int STATE_UNSTARTED = 0;\n \n      * The start time.\n      */\n     private long startTime;\n+\n+    /**\n+     * The start time in Millis - nanoTime is only for elapsed time so we \n+     * need to also store the currentTimeMillis to maintain the old \n+     * getStartTime API.\n+     */\n+    private long startTimeMillis;\n \n     /**\n      * The stop time.\n         if (this.runningState != STATE_UNSTARTED) {\n             throw new IllegalStateException(\"Stopwatch already started. \");\n         }\n-        this.startTime = System.currentTimeMillis();\n+        this.startTime = System.nanoTime();\n+        this.startTimeMillis = System.currentTimeMillis();\n         this.runningState = STATE_RUNNING;\n     }\n \n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n         if (this.runningState == STATE_RUNNING) {\n-            this.stopTime = System.currentTimeMillis();\n+            this.stopTime = System.nanoTime();\n         }\n         this.runningState = STATE_STOPPED;\n     }\n         if (this.runningState != STATE_RUNNING) {\n             throw new IllegalStateException(\"Stopwatch is not running. \");\n         }\n-        this.stopTime = System.currentTimeMillis();\n+        this.stopTime = System.nanoTime();\n         this.splitState = STATE_SPLIT;\n     }\n \n         if (this.runningState != STATE_RUNNING) {\n             throw new IllegalStateException(\"Stopwatch must be running to suspend. \");\n         }\n-        this.stopTime = System.currentTimeMillis();\n+        this.stopTime = System.nanoTime();\n         this.runningState = STATE_SUSPENDED;\n     }\n \n         if (this.runningState != STATE_SUSPENDED) {\n             throw new IllegalStateException(\"Stopwatch must be suspended to resume. \");\n         }\n-        this.startTime += (System.currentTimeMillis() - this.stopTime);\n+        this.startTime += (System.nanoTime() - this.stopTime);\n         this.runningState = STATE_RUNNING;\n     }\n \n      * @return the time in milliseconds\n      */\n     public long getTime() {\n+        return getNanoTime() / NANO_2_MILLIS;\n+    }\n+    /**\n+     * <p>\n+     * Get the time on the stopwatch in nanoseconds.\n+     * </p>\n+     * \n+     * <p>\n+     * This is either the time between the start and the moment this method is called, or the amount of time between\n+     * start and stop.\n+     * </p>\n+     * \n+     * @return the time in nanoseconds\n+     * @since 3.0\n+     */\n+    public long getNanoTime() {\n         if (this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {\n             return this.stopTime - this.startTime;\n         } else if (this.runningState == STATE_UNSTARTED) {\n             return 0;\n         } else if (this.runningState == STATE_RUNNING) {\n-            return System.currentTimeMillis() - this.startTime;\n+            return System.nanoTime() - this.startTime;\n         }\n         throw new RuntimeException(\"Illegal running state has occured. \");\n     }\n      * @since 2.1\n      */\n     public long getSplitTime() {\n+        return getSplitNanoTime() / NANO_2_MILLIS;\n+    }\n+    /**\n+     * <p>\n+     * Get the split time on the stopwatch in nanoseconds.\n+     * </p>\n+     * \n+     * <p>\n+     * This is the time between start and latest split.\n+     * </p>\n+     * \n+     * @return the split time in nanoseconds\n+     * \n+     * @throws IllegalStateException\n+     *             if the StopWatch has not yet been split.\n+     * @since 3.0\n+     */\n+    public long getSplitNanoTime() {\n         if (this.splitState != STATE_SPLIT) {\n             throw new IllegalStateException(\"Stopwatch must be split to get the split time. \");\n         }\n         if (this.runningState == STATE_UNSTARTED) {\n             throw new IllegalStateException(\"Stopwatch has not been started\");\n         }\n-        return this.startTime;\n+        // System.nanoTime is for elapsed time\n+        return this.startTimeMillis;\n     }\n \n     /**", "timestamp": 1235942298, "metainfo": ""}