{"sha": "5543e942d357ae0e32c167544d0c2fc82e6bbd2f", "log": "Notifier is a class which makes handling an event-listener queue a lot easier. It throws the exception when the notify fails.   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/Notifier.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.ArrayList;\n+import java.util.EventObject;\n+import java.util.Iterator;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.InvocationTargetException;\n+\n+/**\n+ * A utility which takes much of the pain out of the Event/Listener \n+ * system. It handles the collection, and the loop-notification.\n+ * Reflection is used for the actual notification call.\n+ *\n+ * Alternate strategies are usable. For example this class currently \n+ * does not enforce a particular interface, which means it cannot \n+ * cache that method. Doing this probably makes a lot of sense.\n+ */\n+public class Notifier {\n+\n+    private ArrayList listeners = new ArrayList();\n+    private Method listenerMethod;\n+    private String methodName;\n+    private Class clss;\n+\n+    public Notifier() {\n+    }\n+\n+    public Notifier(Class listener) {\n+        this.clss = clss;\n+        // now we check methods, if only one of them, then \n+        // let's set it\n+        Method[] meths = clss.getDeclaredMethods();\n+        if(meths.length == 0) {\n+            this.listenerMethod = meths[0];\n+        }\n+    }\n+\n+    /**\n+     * Set the name of the method to call upon the listeners.\n+     */\n+    public void setListenerMethod(String name) {\n+        this.methodName = name;\n+        if(this.clss != null) {\n+            try {\n+                // then we get the Method object\n+                this.listenerMethod = this.clss.getDeclaredMethod(name, new Class[] { EventObject.class} );\n+            } catch(NoSuchMethodException nsme) {\n+//                nsme.printStackTrace();\n+                throw new IllegalArgumentException(\"Method not on Class. \");\n+            }\n+        }\n+    }\n+\n+    public void addListener(Object not) {\n+        this.listeners.add(not);\n+    }\n+\n+    public void removeListener(Object not) {\n+        this.listeners.remove(not);\n+    }\n+\n+    public ArrayList getListeners() {\n+        ArrayList cloned = new ArrayList();\n+        cloned.addAll(listeners);\n+        return cloned;\n+    }\n+\n+    /**\n+     * Convenience method for when a listener has a single method.\n+     * Currently this method needs to be called, but it's possible \n+     * that by providing the interface class, it can be assumed as \n+     * to what the listening method is.\n+     */\n+    public void notify(EventObject event) throws NotifierException {\n+        if(this.clss == null) {\n+            notify(this.methodName, event);\n+        } else {\n+            notify(this.listenerMethod, event);\n+        }\n+    }\n+\n+    /**\n+     * Notify the listeners of a certain event, to a certain method.\n+     * This is usable when a Listener has more than one method and \n+     * a single Notifier wants to be shared.\n+     */\n+    public void notify(Method listenerMethod, EventObject event) throws NotifierException {\n+        Iterator itr = getListeners().iterator();\n+        while(itr.hasNext()) {\n+            try {\n+                Object listener = itr.next();\n+                listenerMethod.invoke( listener, new Object[] { event } );\n+            } catch(SecurityException se) {\n+                throw new NotifierException(se);\n+            } catch(IllegalAccessException iae) {\n+                throw new NotifierException(iae);\n+            } catch(IllegalArgumentException iae) {\n+                throw new NotifierException(iae);\n+            } catch(InvocationTargetException ite) {\n+                throw new NotifierException(ite);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Notify the listeners of a certain event, to a certain method.\n+     * This is usable when a Listener has more than one method and \n+     * a single Notifier wants to be shared.\n+     */\n+    public void notify(String methodName, EventObject event) throws NotifierException {\n+        Iterator itr = getListeners().iterator();\n+        while(itr.hasNext()) {\n+            try {\n+                Object listener = itr.next();\n+                Class clss = listener.getClass();\n+                Method method = clss.getMethod(methodName, new Class[] { event.getClass() } );\n+                method.invoke( listener, new Object[] { event } );\n+            } catch(SecurityException se) {\n+                throw new NotifierException(se);\n+            } catch(NoSuchMethodException nsme) {\n+                throw new NotifierException(nsme);\n+            } catch(IllegalAccessException iae) {\n+                throw new NotifierException(iae);\n+            } catch(IllegalArgumentException iae) {\n+                throw new NotifierException(iae);\n+            } catch(InvocationTargetException ite) {\n+                throw new NotifierException(ite);\n+            }\n+        }\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/NotifierException.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import org.apache.commons.lang.exception.NestableException;\n+\n+/**\n+ * Exception thrown when something goes wrong in notifying.\n+ *\n+ * @author <a href=\"mailto:bayard@apache.org\">Henri Yandell</a>\n+ * @version $Id: NotifierException.java,v 1.1 2002/11/12 03:01:05 bayard Exp $\n+ */\n+public class NotifierException extends NestableException {\n+\n+    /**\n+     * Constructs a new <code>NotifierException</code> without specified\n+     * detail message.\n+     */\n+    public NotifierException() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new <code>NotifierException</code> with specified\n+     * detail message.\n+     *\n+     * @param msg  the error message.\n+     */\n+    public NotifierException(String msg) {\n+        super(msg);\n+    }\n+\n+    /**\n+     * Constructs a new <code>NotifierException</code> with specified\n+     * nested <code>Throwable</code> root cause.\n+     *\n+     * @param rootCause  the exception or error that caused this exception\n+     *                   to be thrown.\n+     */\n+    public NotifierException(Throwable rootCause) {\n+        super(rootCause);\n+    }\n+\n+    /**\n+     * Constructs a new <code>NotifierException</code> with specified\n+     * detail message and nested <code>Throwable</code> root cause.\n+     *\n+     * @param msg        the error message.\n+     * @param rootCause  the exception or error that caused this exception\n+     *                   to be thrown.\n+     */\n+    public NotifierException(String msg, Throwable rootCause) {\n+        super(msg, rootCause);\n+    }\n+\n+}", "timestamp": 1037070065, "metainfo": ""}