{"sha": "66f30d384010331b2c5a1726452c56149f335507", "log": "Adding NOPMD tags  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/builder/StandardToStringStyle.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/StandardToStringStyle.java\n      * @return the current useClassName flag\n      */\n     @Override\n-    public boolean isUseClassName() {\n+    public boolean isUseClassName() { // NOPMD as this is implementing the abstract class\n         return super.isUseClassName();\n     }\n \n      * @param useClassName  the new useClassName flag\n      */\n     @Override\n-    public void setUseClassName(boolean useClassName) {\n+    public void setUseClassName(boolean useClassName) { // NOPMD as this is implementing the abstract class\n         super.setUseClassName(useClassName);\n     }\n \n      * @since 2.0\n      */\n     @Override\n-    public boolean isUseShortClassName() {\n+    public boolean isUseShortClassName() { // NOPMD as this is implementing the abstract class\n         return super.isUseShortClassName();\n     }\n \n      * @since 2.0\n      */\n     @Override\n-    public void setUseShortClassName(boolean useShortClassName) {\n+    public void setUseShortClassName(boolean useShortClassName) { // NOPMD as this is implementing the abstract class\n         super.setUseShortClassName(useShortClassName);\n     }\n \n      * @return the current useIdentityHashCode flag\n      */\n     @Override\n-    public boolean isUseIdentityHashCode() {\n+    public boolean isUseIdentityHashCode() { // NOPMD as this is implementing the abstract class\n         return super.isUseIdentityHashCode();\n     }\n \n      * @param useIdentityHashCode  the new useIdentityHashCode flag\n      */\n     @Override\n-    public void setUseIdentityHashCode(boolean useIdentityHashCode) {\n+    public void setUseIdentityHashCode(boolean useIdentityHashCode) { // NOPMD as this is implementing the abstract class\n         super.setUseIdentityHashCode(useIdentityHashCode);\n     }\n \n      * @return the current useFieldNames flag\n      */\n     @Override\n-    public boolean isUseFieldNames() {\n+    public boolean isUseFieldNames() { // NOPMD as this is implementing the abstract class\n         return super.isUseFieldNames();\n     }\n \n      * @param useFieldNames  the new useFieldNames flag\n      */\n     @Override\n-    public void setUseFieldNames(boolean useFieldNames) {\n+    public void setUseFieldNames(boolean useFieldNames) { // NOPMD as this is implementing the abstract class\n         super.setUseFieldNames(useFieldNames);\n     }\n \n      * @return the current defaultFullDetail flag\n      */\n     @Override\n-    public boolean isDefaultFullDetail() {\n+    public boolean isDefaultFullDetail() { // NOPMD as this is implementing the abstract class\n         return super.isDefaultFullDetail();\n     }\n \n      * @param defaultFullDetail  the new defaultFullDetail flag\n      */\n     @Override\n-    public void setDefaultFullDetail(boolean defaultFullDetail) {\n+    public void setDefaultFullDetail(boolean defaultFullDetail) { // NOPMD as this is implementing the abstract class\n         super.setDefaultFullDetail(defaultFullDetail);\n     }\n \n      * @return the current array content detail setting\n      */\n     @Override\n-    public boolean isArrayContentDetail() {\n+    public boolean isArrayContentDetail() { // NOPMD as this is implementing the abstract class\n         return super.isArrayContentDetail();\n     }\n     \n      * @param arrayContentDetail  the new arrayContentDetail flag\n      */\n     @Override\n-    public void setArrayContentDetail(boolean arrayContentDetail) {\n+    public void setArrayContentDetail(boolean arrayContentDetail) { // NOPMD as this is implementing the abstract class\n         super.setArrayContentDetail(arrayContentDetail);\n     }\n \n      * @return the current array start text\n      */\n     @Override\n-    public String getArrayStart() {\n+    public String getArrayStart() { // NOPMD as this is implementing the abstract class\n         return super.getArrayStart();\n     }\n \n      * @param arrayStart  the new array start text\n      */\n     @Override\n-    public void setArrayStart(String arrayStart) {\n+    public void setArrayStart(String arrayStart) { // NOPMD as this is implementing the abstract class\n         super.setArrayStart(arrayStart);\n     }\n \n      * @return the current array end text\n      */\n     @Override\n-    public String getArrayEnd() {\n+    public String getArrayEnd() { // NOPMD as this is implementing the abstract class\n         return super.getArrayEnd();\n     }\n \n      * @param arrayEnd  the new array end text\n      */\n     @Override\n-    public void setArrayEnd(String arrayEnd) {\n+    public void setArrayEnd(String arrayEnd) { // NOPMD as this is implementing the abstract class\n         super.setArrayEnd(arrayEnd);\n     }\n \n      * @return the current array separator text\n      */\n     @Override\n-    public String getArraySeparator() {\n+    public String getArraySeparator() { // NOPMD as this is implementing the abstract class\n         return super.getArraySeparator();\n     }\n \n      * @param arraySeparator  the new array separator text\n      */\n     @Override\n-    public void setArraySeparator(String arraySeparator) {\n+    public void setArraySeparator(String arraySeparator) { // NOPMD as this is implementing the abstract class\n         super.setArraySeparator(arraySeparator);\n     }\n \n      * @return the current content start text\n      */\n     @Override\n-    public String getContentStart() {\n+    public String getContentStart() { // NOPMD as this is implementing the abstract class\n         return super.getContentStart();\n     }\n \n      * @param contentStart  the new content start text\n      */\n     @Override\n-    public void setContentStart(String contentStart) {\n+    public void setContentStart(String contentStart) { // NOPMD as this is implementing the abstract class\n         super.setContentStart(contentStart);\n     }\n \n      * @return the current content end text\n      */\n     @Override\n-    public String getContentEnd() {\n+    public String getContentEnd() { // NOPMD as this is implementing the abstract class\n         return super.getContentEnd();\n     }\n \n      * @param contentEnd  the new content end text\n      */\n     @Override\n-    public void setContentEnd(String contentEnd) {\n+    public void setContentEnd(String contentEnd) { // NOPMD as this is implementing the abstract class\n         super.setContentEnd(contentEnd);\n     }\n \n      * @return the current field name value separator text\n      */\n     @Override\n-    public String getFieldNameValueSeparator() {\n+    public String getFieldNameValueSeparator() { // NOPMD as this is implementing the abstract class\n         return super.getFieldNameValueSeparator();\n     }\n \n      * @param fieldNameValueSeparator  the new field name value separator text\n      */\n     @Override\n-    public void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n+    public void setFieldNameValueSeparator(String fieldNameValueSeparator) { // NOPMD as this is implementing the abstract class\n         super.setFieldNameValueSeparator(fieldNameValueSeparator);\n     }\n \n      * @return the current field separator text\n      */\n     @Override\n-    public String getFieldSeparator() {\n+    public String getFieldSeparator() { // NOPMD as this is implementing the abstract class\n         return super.getFieldSeparator();\n     }\n \n      * @param fieldSeparator  the new field separator text\n      */\n     @Override\n-    public void setFieldSeparator(String fieldSeparator) {\n+    public void setFieldSeparator(String fieldSeparator) { // NOPMD as this is implementing the abstract class\n         super.setFieldSeparator(fieldSeparator);\n     }\n \n      * @since 2.0\n      */\n     @Override\n-    public boolean isFieldSeparatorAtStart() {\n+    public boolean isFieldSeparatorAtStart() { // NOPMD as this is implementing the abstract class\n         return super.isFieldSeparatorAtStart();\n     }\n \n      * @since 2.0\n      */\n     @Override\n-    public void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n+    public void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) { // NOPMD as this is implementing the abstract class\n         super.setFieldSeparatorAtStart(fieldSeparatorAtStart);\n     }\n \n      * @since 2.0\n      */\n     @Override\n-    public boolean isFieldSeparatorAtEnd() {\n+    public boolean isFieldSeparatorAtEnd() { // NOPMD as this is implementing the abstract class\n         return super.isFieldSeparatorAtEnd();\n     }\n \n      * @since 2.0\n      */\n     @Override\n-    public void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n+    public void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) { // NOPMD as this is implementing the abstract class\n         super.setFieldSeparatorAtEnd(fieldSeparatorAtEnd);\n     }\n \n      * @return the current text to output when <code>null</code> found\n      */\n     @Override\n-    public String getNullText() {\n+    public String getNullText() { // NOPMD as this is implementing the abstract class\n         return super.getNullText();\n     }\n \n      * @param nullText  the new text to output when <code>null</code> found\n      */\n     @Override\n-    public void setNullText(String nullText) {\n+    public void setNullText(String nullText) { // NOPMD as this is implementing the abstract class\n         super.setNullText(nullText);\n     }\n \n      * @return the current start of size text\n      */\n     @Override\n-    public String getSizeStartText() {\n+    public String getSizeStartText() { // NOPMD as this is implementing the abstract class\n         return super.getSizeStartText();\n     }\n \n      * @param sizeStartText  the new start of size text\n      */\n     @Override\n-    public void setSizeStartText(String sizeStartText) {\n+    public void setSizeStartText(String sizeStartText) { // NOPMD as this is implementing the abstract class\n         super.setSizeStartText(sizeStartText);\n     }\n \n      * @return the current end of size text\n      */\n     @Override\n-    public String getSizeEndText() {\n+    public String getSizeEndText() { // NOPMD as this is implementing the abstract class\n         return super.getSizeEndText();\n     }\n \n      * @param sizeEndText  the new end of size text\n      */\n     @Override\n-    public void setSizeEndText(String sizeEndText) {\n+    public void setSizeEndText(String sizeEndText) { // NOPMD as this is implementing the abstract class\n         super.setSizeEndText(sizeEndText);\n     }\n \n      * @return the current start of summary text\n      */\n     @Override\n-    public String getSummaryObjectStartText() {\n+    public String getSummaryObjectStartText() { // NOPMD as this is implementing the abstract class\n         return super.getSummaryObjectStartText();\n     }\n \n      * @param summaryObjectStartText  the new start of summary text\n      */\n     @Override\n-    public void setSummaryObjectStartText(String summaryObjectStartText) {\n+    public void setSummaryObjectStartText(String summaryObjectStartText) { // NOPMD as this is implementing the abstract class\n         super.setSummaryObjectStartText(summaryObjectStartText);\n     }\n \n      * @return the current end of summary text\n      */\n     @Override\n-    public String getSummaryObjectEndText() {\n+    public String getSummaryObjectEndText() { // NOPMD as this is implementing the abstract class\n         return super.getSummaryObjectEndText();\n     }\n \n      * @param summaryObjectEndText  the new end of summary text\n      */\n     @Override\n-    public void setSummaryObjectEndText(String summaryObjectEndText) {\n+    public void setSummaryObjectEndText(String summaryObjectEndText) { // NOPMD as this is implementing the abstract class\n         super.setSummaryObjectEndText(summaryObjectEndText);\n     }\n ", "timestamp": 1302152514, "metainfo": ""}