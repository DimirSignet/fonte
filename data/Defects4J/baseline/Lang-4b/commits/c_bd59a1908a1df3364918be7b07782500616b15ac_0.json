{"sha": "bd59a1908a1df3364918be7b07782500616b15ac", "log": "[LANG-788] SerializationUtils throws ClassNotFoundException when cloning primitive classes  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n import java.io.ObjectStreamClass;\n import java.io.OutputStream;\n import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * <p>Assists with the serialization process and performs additional functionality based\n      * class here is a workaround, see the JIRA issue LANG-626. </p>\n      */\n      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n+        private static final Map<String, Class<?>> primitiveTypes = \n+                new HashMap<String, Class<?>>();\n         private ClassLoader classLoader;\n-\n+        \n         /**\n          * Constructor.\n          * @param in The <code>InputStream</code>.\n         public ClassLoaderAwareObjectInputStream(InputStream in, ClassLoader classLoader) throws IOException {\n             super(in);\n             this.classLoader = classLoader;\n+\n+            primitiveTypes.put(\"byte\", byte.class);\n+            primitiveTypes.put(\"short\", short.class);\n+            primitiveTypes.put(\"int\", int.class);\n+            primitiveTypes.put(\"long\", long.class);\n+            primitiveTypes.put(\"float\", float.class);\n+            primitiveTypes.put(\"double\", double.class);\n+            primitiveTypes.put(\"boolean\", boolean.class);\n+            primitiveTypes.put(\"char\", char.class);\n+            primitiveTypes.put(\"void\", void.class);\n         }\n \n         /**\n             try {\n                 return Class.forName(name, false, classLoader);\n             } catch (ClassNotFoundException ex) {\n-                return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+                try {\n+                    return Class.forName(name, false, Thread.currentThread().getContextClassLoader());\n+                } catch (ClassNotFoundException cnfe) {\n+                    Class<?> cls = primitiveTypes.get(name);\n+                    if (cls != null)\n+                        return cls;\n+                    else\n+                        throw cnfe;\n+                }\n             }\n         }\n \n--- a/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java\n         }\n         fail();\n     }\n+    \n+    public void testPrimitiveTypeClassSerialization() {\n+        Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class,\n+                boolean.class, char.class, void.class };\n+\n+        for (Class<?> primitiveType : primitiveTypes) {\n+            Class<?> clone = SerializationUtils.clone(primitiveType);\n+            assertEquals(primitiveType, clone);\n+        }\n+    }\n \n }\n ", "timestamp": 1330526341, "metainfo": ""}