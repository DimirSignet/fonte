{"sha": "bb1671667d9085fb76bd06af7f7ad91d2c1c8389", "log": "Adding Niall's fix for LANG-59 - an edge case in date truncation - and his enhancement  for the unit test that was there.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/time/DateUtils.java\n+++ b/src/java/org/apache/commons/lang/time/DateUtils.java\n             throw new ArithmeticException(\"Calendar value too large for accurate calculations\");\n         }\n         \n+        if (field == Calendar.MILLISECOND) {\n+            return;\n+        }\n+\n+        // ----------------- Fix for LANG-59 ---------------------- START ---------------\n+        // see http://issues.apache.org/jira/browse/LANG-59\n+        //\n+        // Manually truncate milliseconds, seconds and minutes, rather than using\n+        // Calendar methods.\n+\n+        Date date = val.getTime();\n+        long time = date.getTime();\n+        boolean done = false;\n+\n+        // truncate milliseconds\n+        int millisecs = val.get(Calendar.MILLISECOND);\n+        if (!round || millisecs < 500) {\n+            time = time - millisecs;\n+            if (field == Calendar.SECOND) {\n+                done = true;\n+            }\n+        }\n+\n+        // truncate seconds\n+        int seconds = val.get(Calendar.SECOND);\n+        if (!done && (!round || seconds < 30)) {\n+            time = time - (seconds * 1000L);\n+            if (field == Calendar.MINUTE) {\n+                done = true;\n+            }\n+        }\n+\n+        // truncate minutes\n+        int minutes = val.get(Calendar.MINUTE);\n+        if (!done && (!round || minutes < 30)) {\n+            time = time - (minutes * 60000L);\n+        }\n+\n+        // reset time\n+        if (date.getTime() != time) {\n+            date.setTime(time);\n+            val.setTime(date);\n+        }\n+        // ----------------- Fix for LANG-59 ----------------------- END ----------------\n+\n         boolean roundUp = false;\n         for (int i = 0; i < fields.length; i++) {\n             for (int j = 0; j < fields[i].length; j++) {\n                 roundUp = offset > ((max - min) / 2);\n             }\n             //We need to remove this field\n-            val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+            if (offset != 0) {\n+                val.set(fields[i][0], val.get(fields[i][0]) - offset);\n+            }\n         }\n         throw new IllegalArgumentException(\"The field \" + field + \" is not supported\");\n \n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n     }\n \n     /**\n+     * Tests for LANG-59\n+     *\n+     * see http://issues.apache.org/jira/browse/LANG-59\n+     */\n+    public void testTruncateLang59() throws Exception {\n+\n+        // Set TimeZone to Mountain Time\n+        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n+        TimeZone.setDefault(MST_MDT);\n+        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n+        format.setTimeZone(MST_MDT);\n+\n+        Date oct31_01MDT = new Date(1099206000000L); \n+\n+        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n+        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n+        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n+        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n+\n+        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));\n+        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));\n+        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));\n+        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));\n+        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));\n+\n+        // ------- Demonstrate Problem -------\n+        Calendar gval = Calendar.getInstance();\n+        gval.setTime(new Date(oct31_01MDT.getTime()));\n+        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n+        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);\n+\n+        // ---------- Test Truncate ----------\n+        assertEquals(\"Truncate Calendar.MILLISECOND\",\n+                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n+\n+        assertEquals(\"Truncate Calendar.SECOND\",\n+                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));\n+\n+        assertEquals(\"Truncate Calendar.MINUTE\",\n+                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));\n+\n+        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n+                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n+\n+        assertEquals(\"Truncate Calendar.HOUR\",\n+                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));\n+\n+        assertEquals(\"Truncate Calendar.DATE\",\n+                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));\n+\n+\n+        // ---------- Test Round (down) ----------\n+        assertEquals(\"Round Calendar.MILLISECOND\",\n+                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));\n+\n+        assertEquals(\"Round Calendar.SECOND\",\n+                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));\n+\n+        assertEquals(\"Round Calendar.MINUTE\",\n+                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));\n+\n+        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n+                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));\n+\n+        assertEquals(\"Round Calendar.HOUR\",\n+                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));\n+\n+        assertEquals(\"Round Calendar.DATE\",\n+                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));\n+\n+        // restore default time zone\n+        TimeZone.setDefault(defaultZone);\n+    }\n+\n+    /**\n      * Tests the iterator exceptions\n      */\n     public void testIteratorEx() throws Exception {\n                 dateParser.parse(\"December 2, 2001\"));\n     }\n \n-    // Tests LANG-59\n-    public void testLang59() throws Exception {\n-        // truncate 2004-10-31 01:00:00 MDT\n-        Date oct31_01MDT = new Date(1099206000000L);\n-        Date result = DateUtils.truncate(oct31_01MDT, Calendar.HOUR_OF_DAY);\n-        assertEquals(oct31_01MDT, result); \n-    }\n-\n     /**\n      * This checks that this is a 7 element iterator of Calendar objects\n      * that are dates (no time), and exactly 1 day spaced after each other.", "timestamp": 1153460827, "metainfo": ""}