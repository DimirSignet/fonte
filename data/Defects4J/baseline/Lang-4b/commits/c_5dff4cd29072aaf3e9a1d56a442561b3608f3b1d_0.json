{"sha": "5dff4cd29072aaf3e9a1d56a442561b3608f3b1d", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n /**\n  * <p>FastDateFormat is a fast and thread-safe version of\n  * {@link java.text.SimpleDateFormat}.</p>\n- * \n+ *\n  * <p>This class can be used as a direct replacement to\n  * <code>SimpleDateFormat</code> in most formatting situations.\n  * This class is especially useful in multi-threaded server environments.\n     // Note that Integer.toString() is not called, the conversion is simply\n     // taking the value and adding (mathematically) the ASCII value for '0'.\n     // So, don't change this code! It works and is very fast.\n-    \n+\n     /**\n      * Required for serialization support.\n-     * \n+     *\n      * @see java.io.Serializable\n      */\n     private static final long serialVersionUID = 1L;\n      * SHORT locale dependent date or time style.\n      */\n     public static final int SHORT = DateFormat.SHORT;\n-    \n+\n     //@GuardedBy(\"this\")\n     private static String cDefaultPattern; // lazily initialised by getInstance()\n \n-    private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);\n+    private static final Map<FastDateFormat, FastDateFormat> cInstanceCache =\n+        new HashMap<FastDateFormat, FastDateFormat>(7);\n     private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);\n     private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n     private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);\n     /**\n      * <p>Gets a formatter instance using the default pattern in the\n      * default locale.</p>\n-     * \n+     *\n      * @return a date/time formatter\n      */\n     public static FastDateFormat getInstance() {\n     /**\n      * <p>Gets a formatter instance using the specified pattern in the\n      * default locale.</p>\n-     * \n+     *\n      * @param pattern  {@link java.text.SimpleDateFormat} compatible\n      *  pattern\n      * @return a pattern based date/time formatter\n     /**\n      * <p>Gets a formatter instance using the specified pattern and\n      * time zone.</p>\n-     * \n+     *\n      * @param pattern  {@link java.text.SimpleDateFormat} compatible\n      *  pattern\n      * @param timeZone  optional time zone, overrides time zone of\n     /**\n      * <p>Gets a formatter instance using the specified pattern and\n      * locale.</p>\n-     * \n+     *\n      * @param pattern  {@link java.text.SimpleDateFormat} compatible\n      *  pattern\n      * @param locale  optional locale, overrides system locale\n     /**\n      * <p>Gets a formatter instance using the specified pattern, time zone\n      * and locale.</p>\n-     * \n+     *\n      * @param pattern  {@link java.text.SimpleDateFormat} compatible\n      *  pattern\n      * @param timeZone  optional time zone, overrides time zone of\n     /**\n      * <p>Gets a date formatter instance using the specified style in the\n      * default time zone and locale.</p>\n-     * \n+     *\n      * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n      * @return a localized standard date formatter\n      * @throws IllegalArgumentException if the Locale has no date\n     /**\n      * <p>Gets a date formatter instance using the specified style and\n      * locale in the default time zone.</p>\n-     * \n+     *\n      * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n      * @param locale  optional locale, overrides system locale\n      * @return a localized standard date formatter\n     /**\n      * <p>Gets a date formatter instance using the specified style and\n      * time zone in the default locale.</p>\n-     * \n+     *\n      * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeZone  optional time zone, overrides time zone of\n      *  formatted date\n     /**\n      * <p>Gets a date formatter instance using the specified style, time\n      * zone and locale.</p>\n-     * \n+     *\n      * @param style  date style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeZone  optional time zone, overrides time zone of\n      *  formatted date\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n                 cDateInstanceCache.put(key, format);\n-                \n+\n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n             }\n     /**\n      * <p>Gets a time formatter instance using the specified style in the\n      * default time zone and locale.</p>\n-     * \n+     *\n      * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n      * @return a localized standard time formatter\n      * @throws IllegalArgumentException if the Locale has no time\n     /**\n      * <p>Gets a time formatter instance using the specified style and\n      * locale in the default time zone.</p>\n-     * \n+     *\n      * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n      * @param locale  optional locale, overrides system locale\n      * @return a localized standard time formatter\n     public static FastDateFormat getTimeInstance(int style, Locale locale) {\n         return getTimeInstance(style, null, locale);\n     }\n-    \n+\n     /**\n      * <p>Gets a time formatter instance using the specified style and\n      * time zone in the default locale.</p>\n-     * \n+     *\n      * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeZone  optional time zone, overrides time zone of\n      *  formatted time\n     public static FastDateFormat getTimeInstance(int style, TimeZone timeZone) {\n         return getTimeInstance(style, timeZone, null);\n     }\n-    \n+\n     /**\n      * <p>Gets a time formatter instance using the specified style, time\n      * zone and locale.</p>\n-     * \n+     *\n      * @param style  time style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeZone  optional time zone, overrides time zone of\n      *  formatted time\n                 String pattern = formatter.toPattern();\n                 format = getInstance(pattern, timeZone, locale);\n                 cTimeInstanceCache.put(key, format);\n-            \n+\n             } catch (ClassCastException ex) {\n                 throw new IllegalArgumentException(\"No date pattern for locale: \" + locale);\n             }\n     /**\n      * <p>Gets a date/time formatter instance using the specified style\n      * in the default time zone and locale.</p>\n-     * \n+     *\n      * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n      * @return a localized standard date/time formatter\n             int dateStyle, int timeStyle) {\n         return getDateTimeInstance(dateStyle, timeStyle, null, null);\n     }\n-    \n+\n     /**\n      * <p>Gets a date/time formatter instance using the specified style and\n      * locale in the default time zone.</p>\n-     * \n+     *\n      * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n      * @param locale  optional locale, overrides system locale\n             int dateStyle, int timeStyle, Locale locale) {\n         return getDateTimeInstance(dateStyle, timeStyle, null, locale);\n     }\n-    \n+\n     /**\n      * <p>Gets a date/time formatter instance using the specified style and\n      * time zone in the default locale.</p>\n-     * \n+     *\n      * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeZone  optional time zone, overrides time zone of\n     public static FastDateFormat getDateTimeInstance(\n             int dateStyle, int timeStyle, TimeZone timeZone) {\n         return getDateTimeInstance(dateStyle, timeStyle, timeZone, null);\n-    }    \n+    }\n     /**\n      * <p>Gets a date/time formatter instance using the specified style,\n      * time zone and locale.</p>\n-     * \n+     *\n      * @param dateStyle  date style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeStyle  time style: FULL, LONG, MEDIUM, or SHORT\n      * @param timeZone  optional time zone, overrides time zone of\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets the time zone display name, using a cache for performance.</p>\n-     * \n+     *\n      * @param tz  the zone to query\n      * @param daylight  true if daylight savings\n      * @param style  the style to use <code>TimeZone.LONG</code>\n \n     /**\n      * <p>Gets the default pattern.</p>\n-     * \n+     *\n      * @return the default pattern\n      */\n     private static synchronized String getDefaultPattern() {\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Constructs a new FastDateFormat.</p>\n-     * \n+     *\n      * @param pattern  {@link java.text.SimpleDateFormat} compatible\n      *  pattern\n      * @param timeZone  time zone to use, <code>null</code> means use\n             throw new IllegalArgumentException(\"The pattern must not be null\");\n         }\n         mPattern = pattern;\n-        \n+\n         mTimeZoneForced = (timeZone != null);\n         if (timeZone == null) {\n             timeZone = TimeZone.getDefault();\n         }\n         mTimeZone = timeZone;\n-        \n+\n         mLocaleForced = (locale != null);\n         if (locale == null) {\n             locale = Locale.getDefault();\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Returns a list of Rules given a pattern.</p>\n-     * \n+     *\n      * @return a <code>List</code> of Rule objects\n      * @throws IllegalArgumentException if pattern is invalid\n      */\n \n     /**\n      * <p>Performs the parsing of tokens.</p>\n-     * \n+     *\n      * @param pattern  the pattern\n      * @param indexRef  index references\n      * @return parsed token\n \n     /**\n      * <p>Gets an appropriate rule for the padding required.</p>\n-     * \n+     *\n      * @param field  the field to get a rule for\n      * @param padding  the padding required\n      * @return a new rule with the correct padding\n     /**\n      * <p>Formats a <code>Date</code>, <code>Calendar</code> or\n      * <code>Long</code> (milliseconds) object.</p>\n-     * \n+     *\n      * @param obj  the object to format\n      * @param toAppendTo  the buffer to append to\n      * @param pos  the position - ignored\n \n     /**\n      * <p>Formats a millisecond <code>long</code> value.</p>\n-     * \n+     *\n      * @param millis  the millisecond value to format\n      * @return the formatted string\n      * @since 2.1\n \n     /**\n      * <p>Formats a <code>Date</code> object.</p>\n-     * \n+     *\n      * @param date  the date to format\n      * @return the formatted string\n      */\n \n     /**\n      * <p>Formats a <code>Calendar</code> object.</p>\n-     * \n+     *\n      * @param calendar  the calendar to format\n      * @return the formatted string\n      */\n     /**\n      * <p>Formats a milliseond <code>long</code> value into the\n      * supplied <code>StringBuffer</code>.</p>\n-     * \n+     *\n      * @param millis  the millisecond value to format\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n     /**\n      * <p>Formats a <code>Date</code> object into the\n      * supplied <code>StringBuffer</code>.</p>\n-     * \n+     *\n      * @param date  the date to format\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n     /**\n      * <p>Formats a <code>Calendar</code> object into the\n      * supplied <code>StringBuffer</code>.</p>\n-     * \n+     *\n      * @param calendar  the calendar to format\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n     /**\n      * <p>Performs the formatting by applying the rules to the\n      * specified calendar.</p>\n-     * \n+     *\n      * @param calendar  the calendar to format\n      * @param buf  the buffer to format into\n      * @return the specified string buffer\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Parsing is not supported.</p>\n-     * \n+     *\n      * @param source  the string to parse\n      * @param pos  the parsing position\n      * @return <code>null</code> as not supported\n         pos.setErrorIndex(0);\n         return null;\n     }\n-    \n+\n     // Accessors\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets the pattern used by this formatter.</p>\n-     * \n+     *\n      * @return the pattern, {@link java.text.SimpleDateFormat} compatible\n      */\n     public String getPattern() {\n      * If a <code>Calendar</code> is passed in to be formatted, the\n      * time zone on that may be used depending on\n      * {@link #getTimeZoneOverridesCalendar()}.</p>\n-     * \n+     *\n      * @return the time zone\n      */\n     public TimeZone getTimeZone() {\n     /**\n      * <p>Returns <code>true</code> if the time zone of the\n      * calendar overrides the time zone of the formatter.</p>\n-     * \n+     *\n      * @return <code>true</code> if time zone of formatter\n      *  overridden for calendars\n      */\n \n     /**\n      * <p>Gets the locale used by this formatter.</p>\n-     * \n+     *\n      * @return the locale\n      */\n     public Locale getLocale() {\n      *\n      * <p>The actual formatted length will almost always be less than or\n      * equal to this amount.</p>\n-     * \n+     *\n      * @return the maximum formatted length\n      */\n     public int getMaxLengthEstimate() {\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Compares two objects for equality.</p>\n-     * \n+     *\n      * @param obj  the object to compare to\n      * @return <code>true</code> if equal\n      */\n \n     /**\n      * <p>Returns a hashcode compatible with equals.</p>\n-     * \n+     *\n      * @return a hashcode compatible with equals\n      */\n     @Override\n \n     /**\n      * <p>Gets a debugging string version of this formatter.</p>\n-     * \n+     *\n      * @return a debugging string\n      */\n     @Override\n     // Serializing\n     //-----------------------------------------------------------------------\n     /**\n-     * Create the object after serialization. This implementation reinitializes the \n+     * Create the object after serialization. This implementation reinitializes the\n      * transient properties.\n      *\n      * @param in ObjectInputStream from which the object is being deserialized.\n         in.defaultReadObject();\n         init();\n     }\n-    \n+\n     // Rules\n     //-----------------------------------------------------------------------\n     /**\n     private interface Rule {\n         /**\n          * Returns the estimated lentgh of the result.\n-         * \n+         *\n          * @return the estimated length\n          */\n         int estimateLength();\n-        \n+\n         /**\n          * Appends the value of the specified calendar to the output buffer based on the rule implementation.\n-         * \n+         *\n          * @param buffer the output buffer\n          * @param calendar calendar to be appended\n          */\n     private interface NumberRule extends Rule {\n         /**\n          * Appends the specified value to the output buffer based on the rule implementation.\n-         * \n+         *\n          * @param buffer the output buffer\n          * @param value the value to be appended\n          */\n         /**\n          * Constructs a new instance of <code>CharacterLiteral</code>\n          * to hold the specified value.\n-         * \n+         *\n          * @param value the character literal\n          */\n         CharacterLiteral(char value) {\n         /**\n          * Constructs a new instance of <code>StringLiteral</code>\n          * to hold the specified value.\n-         * \n+         *\n          * @param value the string literal\n          */\n         StringLiteral(String value) {\n         /**\n          * Constructs an instance of <code>TextField</code>\n          * with the specified field and values.\n-         * \n+         *\n          * @param field the field\n          * @param values the field values\n          */\n \n         /**\n          * Constructs an instance of <code>UnpadedNumberField</code> with the specified field.\n-         * \n+         *\n          * @param field the field\n          */\n         UnpaddedNumberField(int field) {\n \n         /**\n          * Constructs an instance of <code>PaddedNumberField</code>.\n-         * \n+         *\n          * @param field the field\n          * @param size size of the output field\n          */\n \n         /**\n          * Constructs an instance of <code>TwoDigitNumberField</code> with the specified field.\n-         * \n+         *\n          * @param field the field\n          */\n         TwoDigitNumberField(int field) {\n         /**\n          * Constructs an instance of <code>TwelveHourField</code> with the specified\n          * <code>NumberRule</code>.\n-         * \n+         *\n          * @param rule the rule\n          */\n         TwelveHourField(NumberRule rule) {\n         /**\n          * Constructs an instance of <code>TwentyFourHourField</code> with the specified\n          * <code>NumberRule</code>.\n-         * \n+         *\n          * @param rule the rule\n          */\n         TwentyFourHourField(NumberRule rule) {\n \n         /**\n          * Constructs an instance of <code>TimeZoneNameRule</code> with the specified properties.\n-         * \n+         *\n          * @param timeZone the time zone\n          * @param timeZoneForced if <code>true</code> the time zone is forced into standard and daylight\n          * @param locale the locale\n     private static class TimeZoneNumberRule implements Rule {\n         static final TimeZoneNumberRule INSTANCE_COLON = new TimeZoneNumberRule(true);\n         static final TimeZoneNumberRule INSTANCE_NO_COLON = new TimeZoneNumberRule(false);\n-        \n+\n         final boolean mColon;\n-        \n+\n         /**\n          * Constructs an instance of <code>TimeZoneNumberRule</code> with the specified properties.\n-         * \n+         *\n          * @param colon add colon between HH and MM in the output if <code>true</code>\n          */\n         TimeZoneNumberRule(boolean colon) {\n          */\n         public void appendTo(StringBuffer buffer, Calendar calendar) {\n             int offset = calendar.get(Calendar.ZONE_OFFSET) + calendar.get(Calendar.DST_OFFSET);\n-            \n+\n             if (offset < 0) {\n                 buffer.append('-');\n                 offset = -offset;\n             } else {\n                 buffer.append('+');\n             }\n-            \n+\n             int hours = offset / (60 * 60 * 1000);\n             buffer.append((char)(hours / 10 + '0'));\n             buffer.append((char)(hours % 10 + '0'));\n-            \n+\n             if (mColon) {\n                 buffer.append(':');\n             }\n-            \n+\n             int minutes = offset / (60 * 1000) - 60 * hours;\n             buffer.append((char)(minutes / 10 + '0'));\n             buffer.append((char)(minutes % 10 + '0'));\n-        }            \n+        }\n     }\n \n     // ----------------------------------------------------------------------\n \n         /**\n          * Constructs an instance of <code>TimeZoneDisplayKey</code> with the specified properties.\n-         *  \n+         *\n          * @param timeZone the time zone\n          * @param daylight adjust the style for daylight saving time if <code>true</code>\n          * @param style the timezone style", "timestamp": 1300480381, "metainfo": ""}