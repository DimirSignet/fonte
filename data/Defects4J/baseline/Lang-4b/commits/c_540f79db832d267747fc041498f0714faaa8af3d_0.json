{"sha": "540f79db832d267747fc041498f0714faaa8af3d", "log": "default autoboxing for Class[] depending on RT Java version + more tests  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n      * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n+     * <p><strong>Since Lang 3.0,</strong> this method will default behavior for\n+     * calculating assignability between primitive and wrapper types <em>corresponding\n+     * to the running Java version</em>; i.e. autoboxing will be the default\n+     * behavior in VMs running Java versions >= 1.5.</p>\n+     *\n      * @param classArray  the array of Classes to check, may be <code>null</code>\n      * @param toClassArray  the array of Classes to try to assign into, may be <code>null</code>\n      * @return <code>true</code> if assignment possible\n      */\n-    //TODO when we bump the major version we should default autoboxing to true on platforms >= 1.5\n     public static boolean isAssignable(Class<?>[] classArray, Class<?>[] toClassArray) {\n-        return isAssignable(classArray, toClassArray, false);\n+        return isAssignable(classArray, toClassArray, SystemUtils.isJavaVersionAtLeast(1.5f));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n \n import junit.framework.TestCase;\n \n-\n-\n /**\n  * Unit tests {@link org.apache.commons.lang3.ClassUtils}.\n  *\n         Class<?>[] array1 = new Class[] {Object.class};\n         Class<?>[] array1s = new Class[] {String.class};\n         Class<?>[] array0 = new Class[] {};\n+        Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\n+        Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\n \n         assertFalse(ClassUtils.isAssignable(array1, array2));\n         assertFalse(ClassUtils.isAssignable(null, array2));\n         assertFalse(ClassUtils.isAssignable(array1, array1s));\n         assertTrue(ClassUtils.isAssignable(array1s, array1s));\n         assertTrue(ClassUtils.isAssignable(array1s, array1));\n+\n+        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n+\n+        assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, arrayWrappers));\n+        assertEquals(autoboxing, ClassUtils.isAssignable(arrayWrappers, arrayPrimitives));\n+        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1));\n+        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1));\n+        assertEquals(autoboxing, ClassUtils.isAssignable(arrayPrimitives, array2));\n+        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2));\n+    }\n+\n+    public void test_isAssignable_ClassArray_ClassArray_Autoboxing() throws Exception {\n+        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n+        Class<?>[] array1 = new Class[] {Object.class};\n+        Class<?>[] array1s = new Class[] {String.class};\n+        Class<?>[] array0 = new Class[] {};\n+        Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\n+        Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\n+\n+        assertFalse(ClassUtils.isAssignable(array1, array2, true));\n+        assertFalse(ClassUtils.isAssignable(null, array2, true));\n+        assertTrue(ClassUtils.isAssignable(null, array0, true));\n+        assertTrue(ClassUtils.isAssignable(array0, array0, true));\n+        assertTrue(ClassUtils.isAssignable(array0, null, true));\n+        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, true));\n+\n+        assertFalse(ClassUtils.isAssignable(array1, array1s, true));\n+        assertTrue(ClassUtils.isAssignable(array1s, array1s, true));\n+        assertTrue(ClassUtils.isAssignable(array1s, array1, true));\n+\n+        assertTrue(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, true));\n+        assertTrue(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, true));\n+        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, true));\n+        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, true));\n+        assertTrue(ClassUtils.isAssignable(arrayPrimitives, array2, true));\n+        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, true));\n+    }\n+\n+    public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception {\n+        Class<?>[] array2 = new Class[] {Object.class, Object.class};\n+        Class<?>[] array1 = new Class[] {Object.class};\n+        Class<?>[] array1s = new Class[] {String.class};\n+        Class<?>[] array0 = new Class[] {};\n+        Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE };\n+        Class<?>[] arrayWrappers = { Integer.class, Boolean.class };\n+\n+        assertFalse(ClassUtils.isAssignable(array1, array2, false));\n+        assertFalse(ClassUtils.isAssignable(null, array2, false));\n+        assertTrue(ClassUtils.isAssignable(null, array0, false));\n+        assertTrue(ClassUtils.isAssignable(array0, array0, false));\n+        assertTrue(ClassUtils.isAssignable(array0, null, false));\n+        assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false));\n+\n+        assertFalse(ClassUtils.isAssignable(array1, array1s, false));\n+        assertTrue(ClassUtils.isAssignable(array1s, array1s, false));\n+        assertTrue(ClassUtils.isAssignable(array1s, array1, false));\n+\n+        assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false));\n+        assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false));\n+        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false));\n+        assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false));\n+        assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false));\n+        assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false));\n     }\n \n     public void test_isAssignable() throws Exception {\n         boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n \n         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class));\n+        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class));\n         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n+        assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class));\n         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE));\n         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class));\n         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class));\n+        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class));\n         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n+        assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class));\n         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class));\n     }\n         assertTrue(ClassUtils.isAssignable(String.class, String.class, true));\n         assertFalse(ClassUtils.isAssignable(Object.class, String.class, true));\n         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.class, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Object.class, true));\n         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Integer.class, Object.class, true));\n         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, true));\n         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, true));\n         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, true));\n         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n+        assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, true));\n         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, true));\n         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, true));\n+    }\n+\n+    public void test_isAssignable_NoAutoboxing() throws Exception {\n+        assertFalse(ClassUtils.isAssignable((Class<?>) null, null, false));\n+        assertFalse(ClassUtils.isAssignable(String.class, null, false));\n+\n+        assertTrue(ClassUtils.isAssignable(null, Object.class, false));\n+        assertTrue(ClassUtils.isAssignable(null, Integer.class, false));\n+        assertFalse(ClassUtils.isAssignable(null, Integer.TYPE, false));\n+        assertTrue(ClassUtils.isAssignable(String.class, Object.class, false));\n+        assertTrue(ClassUtils.isAssignable(String.class, String.class, false));\n+        assertFalse(ClassUtils.isAssignable(Object.class, String.class, false));\n+        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Integer.class, false));\n+        assertFalse(ClassUtils.isAssignable(Integer.TYPE, Object.class, false));\n+        assertFalse(ClassUtils.isAssignable(Integer.class, Integer.TYPE, false));\n+        assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE, false));\n+        assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class, false));\n+        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, false));\n+        assertFalse(ClassUtils.isAssignable(Boolean.TYPE, Object.class, false));\n+        assertFalse(ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, false));\n+        assertTrue(ClassUtils.isAssignable(Boolean.class, Object.class, false));\n+        assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE, false));\n+        assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class, false));\n     }\n \n     public void test_isAssignable_Widening() throws Exception {\n         assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.TYPE, Float.TYPE));\n         assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.TYPE, Double.TYPE));\n         assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE));\n+    }\n+\n+    public void test_isAssignable_DefaultUnboxing_Widening() throws Exception {\n+        boolean autoboxing = SystemUtils.isJavaVersionAtLeast(1.5f);\n+\n+        // test byte conversions\n+        assertFalse(\"byte -> char\", ClassUtils.isAssignable(Byte.class, Character.TYPE));\n+        assertEquals(\"byte -> byte\", autoboxing, ClassUtils.isAssignable(Byte.class, Byte.TYPE));\n+        assertEquals(\"byte -> short\", autoboxing, ClassUtils.isAssignable(Byte.class, Short.TYPE));\n+        assertEquals(\"byte -> int\", autoboxing, ClassUtils.isAssignable(Byte.class, Integer.TYPE));\n+        assertEquals(\"byte -> long\", autoboxing, ClassUtils.isAssignable(Byte.class, Long.TYPE));\n+        assertEquals(\"byte -> float\", autoboxing, ClassUtils.isAssignable(Byte.class, Float.TYPE));\n+        assertEquals(\"byte -> double\", autoboxing, ClassUtils.isAssignable(Byte.class, Double.TYPE));\n+        assertFalse(\"byte -> boolean\", ClassUtils.isAssignable(Byte.class, Boolean.TYPE));\n+\n+        // test short conversions\n+        assertFalse(\"short -> char\", ClassUtils.isAssignable(Short.class, Character.TYPE));\n+        assertFalse(\"short -> byte\", ClassUtils.isAssignable(Short.class, Byte.TYPE));\n+        assertEquals(\"short -> short\", autoboxing, ClassUtils.isAssignable(Short.class, Short.TYPE));\n+        assertEquals(\"short -> int\", autoboxing, ClassUtils.isAssignable(Short.class, Integer.TYPE));\n+        assertEquals(\"short -> long\", autoboxing, ClassUtils.isAssignable(Short.class, Long.TYPE));\n+        assertEquals(\"short -> float\", autoboxing, ClassUtils.isAssignable(Short.class, Float.TYPE));\n+        assertEquals(\"short -> double\", autoboxing, ClassUtils.isAssignable(Short.class, Double.TYPE));\n+        assertFalse(\"short -> boolean\", ClassUtils.isAssignable(Short.class, Boolean.TYPE));\n+\n+        // test char conversions\n+        assertEquals(\"char -> char\", autoboxing, ClassUtils.isAssignable(Character.class, Character.TYPE));\n+        assertFalse(\"char -> byte\", ClassUtils.isAssignable(Character.class, Byte.TYPE));\n+        assertFalse(\"char -> short\", ClassUtils.isAssignable(Character.class, Short.TYPE));\n+        assertEquals(\"char -> int\", autoboxing, ClassUtils.isAssignable(Character.class, Integer.TYPE));\n+        assertEquals(\"char -> long\", autoboxing, ClassUtils.isAssignable(Character.class, Long.TYPE));\n+        assertEquals(\"char -> float\", autoboxing, ClassUtils.isAssignable(Character.class, Float.TYPE));\n+        assertEquals(\"char -> double\", autoboxing, ClassUtils.isAssignable(Character.class, Double.TYPE));\n+        assertFalse(\"char -> boolean\", ClassUtils.isAssignable(Character.class, Boolean.TYPE));\n+\n+        // test int conversions\n+        assertFalse(\"int -> char\", ClassUtils.isAssignable(Integer.class, Character.TYPE));\n+        assertFalse(\"int -> byte\", ClassUtils.isAssignable(Integer.class, Byte.TYPE));\n+        assertFalse(\"int -> short\", ClassUtils.isAssignable(Integer.class, Short.TYPE));\n+        assertEquals(\"int -> int\", autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE));\n+        assertEquals(\"int -> long\", autoboxing, ClassUtils.isAssignable(Integer.class, Long.TYPE));\n+        assertEquals(\"int -> float\", autoboxing, ClassUtils.isAssignable(Integer.class, Float.TYPE));\n+        assertEquals(\"int -> double\", autoboxing, ClassUtils.isAssignable(Integer.class, Double.TYPE));\n+        assertFalse(\"int -> boolean\", ClassUtils.isAssignable(Integer.class, Boolean.TYPE));\n+\n+        // test long conversions\n+        assertFalse(\"long -> char\", ClassUtils.isAssignable(Long.class, Character.TYPE));\n+        assertFalse(\"long -> byte\", ClassUtils.isAssignable(Long.class, Byte.TYPE));\n+        assertFalse(\"long -> short\", ClassUtils.isAssignable(Long.class, Short.TYPE));\n+        assertFalse(\"long -> int\", ClassUtils.isAssignable(Long.class, Integer.TYPE));\n+        assertEquals(\"long -> long\", autoboxing, ClassUtils.isAssignable(Long.class, Long.TYPE));\n+        assertEquals(\"long -> float\", autoboxing, ClassUtils.isAssignable(Long.class, Float.TYPE));\n+        assertEquals(\"long -> double\", autoboxing, ClassUtils.isAssignable(Long.class, Double.TYPE));\n+        assertFalse(\"long -> boolean\", ClassUtils.isAssignable(Long.class, Boolean.TYPE));\n+\n+        // test float conversions\n+        assertFalse(\"float -> char\", ClassUtils.isAssignable(Float.class, Character.TYPE));\n+        assertFalse(\"float -> byte\", ClassUtils.isAssignable(Float.class, Byte.TYPE));\n+        assertFalse(\"float -> short\", ClassUtils.isAssignable(Float.class, Short.TYPE));\n+        assertFalse(\"float -> int\", ClassUtils.isAssignable(Float.class, Integer.TYPE));\n+        assertFalse(\"float -> long\", ClassUtils.isAssignable(Float.class, Long.TYPE));\n+        assertEquals(\"float -> float\", autoboxing, ClassUtils.isAssignable(Float.class, Float.TYPE));\n+        assertEquals(\"float -> double\", autoboxing, ClassUtils.isAssignable(Float.class, Double.TYPE));\n+        assertFalse(\"float -> boolean\", ClassUtils.isAssignable(Float.class, Boolean.TYPE));\n+\n+        // test double conversions\n+        assertFalse(\"double -> char\", ClassUtils.isAssignable(Double.class, Character.TYPE));\n+        assertFalse(\"double -> byte\", ClassUtils.isAssignable(Double.class, Byte.TYPE));\n+        assertFalse(\"double -> short\", ClassUtils.isAssignable(Double.class, Short.TYPE));\n+        assertFalse(\"double -> int\", ClassUtils.isAssignable(Double.class, Integer.TYPE));\n+        assertFalse(\"double -> long\", ClassUtils.isAssignable(Double.class, Long.TYPE));\n+        assertFalse(\"double -> float\", ClassUtils.isAssignable(Double.class, Float.TYPE));\n+        assertEquals(\"double -> double\", autoboxing, ClassUtils.isAssignable(Double.class, Double.TYPE));\n+        assertFalse(\"double -> boolean\", ClassUtils.isAssignable(Double.class, Boolean.TYPE));\n+\n+        // test boolean conversions\n+        assertFalse(\"boolean -> char\", ClassUtils.isAssignable(Boolean.class, Character.TYPE));\n+        assertFalse(\"boolean -> byte\", ClassUtils.isAssignable(Boolean.class, Byte.TYPE));\n+        assertFalse(\"boolean -> short\", ClassUtils.isAssignable(Boolean.class, Short.TYPE));\n+        assertFalse(\"boolean -> int\", ClassUtils.isAssignable(Boolean.class, Integer.TYPE));\n+        assertFalse(\"boolean -> long\", ClassUtils.isAssignable(Boolean.class, Long.TYPE));\n+        assertFalse(\"boolean -> float\", ClassUtils.isAssignable(Boolean.class, Float.TYPE));\n+        assertFalse(\"boolean -> double\", ClassUtils.isAssignable(Boolean.class, Double.TYPE));\n+        assertEquals(\"boolean -> boolean\", autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE));\n     }\n \n     public void test_isAssignable_Unboxing_Widening() throws Exception {", "timestamp": 1265141247, "metainfo": ""}