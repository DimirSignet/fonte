{"sha": "4d0c6efe0aa3a44e78955500e1d18bca94746be2", "log": "JUnit 3 --> JUnit 4  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Conversion.java\n+++ b/src/main/java/org/apache/commons/lang3/Conversion.java\n \n     /**\n      * <p>\n-     * Converta a part of a boolean array in big endian Msb0 bit ordering to a hexadecimal\n+     * Converts a part of a boolean array in big endian Msb0 bit ordering to a hexadecimal\n      * digit.\n      * </p>\n      * <p>\n--- a/src/test/java/org/apache/commons/lang3/ConversionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ConversionTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.fail;\n \n import java.lang.Throwable;\n-import java.lang.reflect.Method;\n-\n-import org.junit.Assert;\n+\n import org.junit.Test;\n \n \n  * \n  * @version $Id$\n  */\n-\n public class ConversionTest {\n \n-    private static void assertArrayEquals(boolean[] expected, boolean[] actual) {\n-        assertEquals(expected.length, actual.length);\n-        for (int i = 0; i < expected.length; i++ ) {\n-            try {\n-                assertEquals(expected[i], actual[i]);\n-            } catch (Throwable e) {\n-                String msg = \"Mismatch at index \"\n-                    + i\n-                    + \" between:\\n\"\n-                    + dbgPrint(expected)\n-                    + \" and\\n\"\n-                    + dbgPrint(actual);\n-                fail(msg + \"\\n\" + e.getMessage());\n-            }\n-        }\n-    }\n-\n-    /**\n-     * convert an hexadecimal digit into an int using the default (Lsb0) bit ordering.\n-     * <p>\n-     * '1' is converted to 1\n-     */\n-    @Test\n-    public void testHexDigitToInt() throws Exception {\n+    /**\n+     * Tests {@link Conversion#hexDigitToInt(char)}.\n+     */\n+    @Test\n+    public void testHexDigitToInt() {\n         assertEquals(0, Conversion.hexDigitToInt('0'));\n         assertEquals(1, Conversion.hexDigitToInt('1'));\n         assertEquals(2, Conversion.hexDigitToInt('2'));\n     }\n \n     /**\n-     * convert an hexadecimal digit into an int using the Msb0 bit ordering.\n-     * <p>\n-     * '1' is converted to 8\n-     * \n-     */\n-    @Test\n-    public void testHexDigitM0ToInt() throws Exception {\n+     * Tests {@link Conversion#hexDigitM0ToInt(char)}.\n+     */\n+    @Test\n+    public void testHexDigitM0ToInt() {\n         assertEquals(0x0, Conversion.hexDigitM0ToInt('0'));\n         assertEquals(0x8, Conversion.hexDigitM0ToInt('1'));\n         assertEquals(0x4, Conversion.hexDigitM0ToInt('2'));\n     }\n \n     /**\n-     * convert an hexadecimal digit into binary using the default (Lsb0) bit ordering.\n-     * <p>\n-     * '1' is converted as follow: (1, 0, 0, 0)\n-     * \n-     */\n-    @Test\n-    public void testHexDigitToBools() throws Exception {\n-        assertArrayEquals(\n+     * Tests {@link Conversion#hexDigitToBools(char)}.\n+     */\n+    @Test\n+    public void testHexDigitToBools() {\n+        assertBoolArrayEquals(\n             new boolean[]{false, false, false, false}, Conversion.hexDigitToBools('0'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, false, false}, Conversion.hexDigitToBools('1'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, false, false}, Conversion.hexDigitToBools('2'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, false, false}, Conversion.hexDigitToBools('3'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, false, true, false}, Conversion.hexDigitToBools('4'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, true, false}, Conversion.hexDigitToBools('5'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, true, false}, Conversion.hexDigitToBools('6'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, true, false}, Conversion.hexDigitToBools('7'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, false, false, true}, Conversion.hexDigitToBools('8'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, false, true}, Conversion.hexDigitToBools('9'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, false, true}, Conversion.hexDigitToBools('A'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, false, true}, Conversion.hexDigitToBools('a'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, false, true}, Conversion.hexDigitToBools('B'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, false, true}, Conversion.hexDigitToBools('b'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, false, true, true}, Conversion.hexDigitToBools('C'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, false, true, true}, Conversion.hexDigitToBools('c'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, true, true}, Conversion.hexDigitToBools('D'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, true, true}, Conversion.hexDigitToBools('d'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, true, true}, Conversion.hexDigitToBools('E'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, true, true}, Conversion.hexDigitToBools('e'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, true, true}, Conversion.hexDigitToBools('F'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, true, true}, Conversion.hexDigitToBools('f'));\n     }\n \n-    @Test\n-    public void testHexDigitM0ToBools() throws Exception {\n-        assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#hexDigitM0ToBools(char)}.\n+     */\n+    @Test\n+    public void testHexDigitM0ToBools() {\n+        assertBoolArrayEquals(\n             new boolean[]{false, false, false, false}, Conversion.hexDigitM0ToBools('0'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, false, false, true}, Conversion.hexDigitM0ToBools('1'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, false, true, false}, Conversion.hexDigitM0ToBools('2'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, false, true, true}, Conversion.hexDigitM0ToBools('3'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, false, false}, Conversion.hexDigitM0ToBools('4'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, false, true}, Conversion.hexDigitM0ToBools('5'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, true, false}, Conversion.hexDigitM0ToBools('6'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{false, true, true, true}, Conversion.hexDigitM0ToBools('7'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, false, false}, Conversion.hexDigitM0ToBools('8'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, false, true}, Conversion.hexDigitM0ToBools('9'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, true, false}, Conversion.hexDigitM0ToBools('A'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, true, false}, Conversion.hexDigitM0ToBools('a'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, true, true}, Conversion.hexDigitM0ToBools('B'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, false, true, true}, Conversion.hexDigitM0ToBools('b'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, false, false}, Conversion.hexDigitM0ToBools('C'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, false, false}, Conversion.hexDigitM0ToBools('c'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, false, true}, Conversion.hexDigitM0ToBools('D'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, false, true}, Conversion.hexDigitM0ToBools('d'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, true, false}, Conversion.hexDigitM0ToBools('E'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, true, false}, Conversion.hexDigitM0ToBools('e'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, true, true}, Conversion.hexDigitM0ToBools('F'));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{true, true, true, true}, Conversion.hexDigitM0ToBools('f'));\n     }\n \n     /**\n-     * Convert a boolean array to an hexadecimal digit using the default (Lsb0) bit ordering.\n-     * <p>\n-     * (1, 0, 0, 0) is converted as follow: '1'\n-     */\n-    @Test\n-    public void testBoolsToHexDigit() throws Exception {\n+     * Tests {@link Conversion#boolsToHexDigit(boolean[])}.\n+     */\n+    @Test\n+    public void testBoolsToHexDigit() {\n         assertEquals('0', Conversion.boolsToHexDigit(new boolean[]{false, false, false, false}));\n         assertEquals('1', Conversion.boolsToHexDigit(new boolean[]{true, false, false, false}));\n         assertEquals('2', Conversion.boolsToHexDigit(new boolean[]{false, true, false, false}));\n     }\n \n     /**\n-     * Convert a boolean array to an hexadecimal digit using the default (Lsb0) bit ordering.\n-     * <p>\n-     * (1, 0, 0, 0) is converted as follow: '1'\n-     * \n-     */\n-    @Test\n-    public void testBoolsToHexDigit_2args() throws Exception {\n+     * Tests {@link Conversion#boolsBeM0ToHexDigit(boolean[], int)}.\n+     */\n+    @Test\n+    public void testBoolsToHexDigit_2args() {\n         boolean[] shortArray = new boolean[]{false, true, true};\n         assertEquals('6', Conversion.boolsToHexDigit(shortArray, 0));\n         assertEquals('3', Conversion.boolsToHexDigit(shortArray, 1));\n     }\n \n     /**\n-     * Convert a boolean array to an hexadecimal digit using the Msb0 bit ordering.\n-     * <p>\n-     * (1, 0, 0, 0) is converted as follow: '8'\n-     * \n-     */\n-    @Test\n-    public void testBoolsToHexDigitM0_bits() throws Exception {\n+     * Tests {@link Conversion#boolsToHexDigitM0_4bits(boolean[])}.\n+     */\n+    @Test\n+    public void testBoolsToHexDigitM0_bits() {\n         assertEquals(\n             '0', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, false, false, false}));\n         assertEquals(\n     }\n \n     /**\n-     * Convert a boolean array to an hexadecimal digit using the Msb0 bit ordering.\n-     * <p>\n-     * (1, 0, 0, 0) is converted as follow: '8' (1,0,0,1,1,0,1,0) with srcPos = 3 is converted\n-     * to 'D'\n-     * \n-     */\n-    @Test\n-    public void testBoolsToHexDigitM0_4bits_2args() throws Exception {\n+     * Tests {@link Conversion#boolsToHexDigitM0_4bits(boolean[], int)}.\n+     */\n+    @Test\n+    public void testBoolsToHexDigitM0_4bits_2args() {\n         // boolean[] shortArray = new boolean[]{true,true,false};\n         // assertEquals('6', Conversion.boolsToHexDigitM0(shortArray,0));\n         // assertEquals('3', Conversion.boolsToHexDigitM0(shortArray,1));\n     }\n \n     /**\n-     * Convert the first 4 bits of a boolean array in big endian Msb0 bit ordering to an\n-     * hexadecimal digit.\n-     * <p>\n-     * (1, 0, 0, 0) is converted as follow: '8' (1,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0) is converted\n-     * to '4'\n-     */\n-    @Test\n-    public void testBoolsBeM0ToHexDigit() throws Exception {\n+     * Tests {@link Conversion#boolsToHexDigit(boolean[])}.\n+     */\n+    @Test\n+    public void testBoolsBeM0ToHexDigit() {\n         assertEquals(\n             '0', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, false, false, false}));\n         assertEquals(\n     }\n \n     /**\n-     * Convert a part of a boolean array in big endian Msb0 bit ordering to an hexadecimal\n-     * digit.\n-     * <p>\n-     * (1, 0, 0, 0) with srcPos = 0 is converted as follow: '8' (1,0,0,0,0,0,0,0,\n-     * 0,0,0,1,0,1,0,0) with srcPos = 2 is converted to '5'\n-     */\n-    @Test\n-    public void testBoolsBeM0ToHexDigit_2args() throws Exception {\n+     * Tests {@link Conversion#boolsToHexDigit(boolean[], int)}.\n+     */\n+    @Test\n+    public void testBoolsBeM0ToHexDigit_2args() {\n         assertEquals(\n             '5',\n             Conversion.boolsBeM0ToHexDigit(new boolean[]{\n     }\n \n     /**\n-     * Convert the 4 lsb of an int to an hexadecimal digit.\n-     * <p>\n-     * 0 returns '0'\n-     * <p>\n-     * 1 returns '1'\n-     * <p>\n-     * 10 returns 'A' and so on...\n-     */\n-    @Test\n-    public void testIntToHexDigit() throws Exception {\n+     * Tests {@link Conversion#intToHexDigit(int)}.\n+     */\n+    @Test\n+    public void testIntToHexDigit() {\n         assertEquals('0', Conversion.intToHexDigit(0));\n         assertEquals('1', Conversion.intToHexDigit(1));\n         assertEquals('2', Conversion.intToHexDigit(2));\n     }\n \n     /**\n-     * Convert the 4 lsb of an int to an hexadecimal digit encoded using the Msb0 bit ordering.\n-     * <p>\n-     * 0 returns '0'\n-     * <p>\n-     * 1 returns '8'\n-     * <p>\n-     * 10 returns '5' and so on...\n-     */\n-    @Test\n-    public void testIntToHexDigitM0() throws Exception {\n+     * Tests {@link Conversion#intToHexDigitM0(int)}.\n+     */\n+    @Test\n+    public void testIntToHexDigitM0() {\n         assertEquals('0', Conversion.intToHexDigitM0(0));\n         assertEquals('8', Conversion.intToHexDigitM0(1));\n         assertEquals('4', Conversion.intToHexDigitM0(2));\n         assertEquals('F', Conversion.intToHexDigitM0(15));\n     }\n \n-    private static String dbgPrint(boolean[] src) {\n+    static String dbgPrint(boolean[] src) {\n         StringBuilder sb = new StringBuilder();\n         for (boolean e : src) {\n             if (e) sb.append(\"1,\");\n         return out.substring(0, out.length() - 1);\n     }\n \n-    @Test\n-    public void testIntsToLong() throws Exception {\n+    // org.junit.Assert(boolean[], boolean[]) does not exist in JUnit 4.2\n+    static void assertBoolArrayEquals(boolean[] expected, boolean[] actual) {\n+        assertEquals(expected.length, actual.length);\n+        for (int i = 0; i < expected.length; i++ ) {\n+            try {\n+                assertEquals(expected[i], actual[i]);\n+            } catch (Throwable e) {\n+                String msg = \"Mismatch at index \"\n+                    + i\n+                    + \" between:\\n\"\n+                    + dbgPrint(expected)\n+                    + \" and\\n\"\n+                    + dbgPrint(actual);\n+                fail(msg + \"\\n\" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Tests {@link Conversion#intsToLong(int[], int, long, int, int)}.\n+     */\n+    @Test\n+    public void testIntsToLong() {\n         int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000};\n         assertEquals(0x0000000000000000L, Conversion.intsToLong(src, 0, 0L, 0, 0));\n         assertEquals(0x0000000000000000L, Conversion.intsToLong(src, 1, 0L, 0, 0));\n         // assertEquals(0x0F12345678000000L,Conversion.intsToLong(src,1,0x123456789ABCDEF0L,32,2));\n     }\n \n-    @Test\n-    public void testShortsToLong() throws Exception {\n+    public void todoTestShortsToLong() {\n         // TODO: implement this test. This is somehow low priority since intsToLong and\n         // bytesToLong are tested\n     }\n \n-    @Test\n-    public void testBytesToLong() throws Exception {\n+    /**\n+     * Tests {@link Conversion#bytesToLong(byte[], int, long, int, int)}.\n+     */\n+    @Test\n+    public void testBytesToLong() {\n         byte[] src = new byte[]{\n             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,\n             (byte)0x56, (byte)0x78};\n         // assertEquals(0x123456789A7856F0L,Conversion.bytesToLong(src,7,0x123456789ABCDEF0L,8,2));\n     }\n \n-    @Test\n-    public void testShortsToInt() throws Exception {\n+    /**\n+     * Tests {@link Conversion#shortsToInt(short[], int, int, int, int)}.\n+     */\n+    @Test\n+    public void testShortsToInt() {\n         short[] src = new short[]{\n             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800};\n         assertEquals(0x00000000, Conversion.shortsToInt(src, 0, 0, 0, 0));\n \n     }\n \n-    @Test\n-    public void testBytesToInt() throws Exception {\n+    /**\n+     * Tests {@link Conversion#bytesToInt(byte[], int, int, int, int)}.\n+     */\n+    @Test\n+    public void testBytesToInt() {\n         byte[] src = new byte[]{\n             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,\n             (byte)0x56, (byte)0x78};\n         // assertEquals(0x56341278,Conversion.bytesToInt(src, 5, 0x01234567, 8, 4));\n     }\n \n-    @Test\n-    public void testBytesToShort() throws Exception {\n+    /**\n+     * Tests {@link Conversion#bytesToShort(byte[], int, short, int, int)}.\n+     */\n+    @Test\n+    public void testBytesToShort() {\n         byte[] src = new byte[]{\n             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,\n             (byte)0x56, (byte)0x78};\n         // assertEquals((short)0x5678,Conversion.bytesToShort(src, 7, (short) 0x0123, 8, 2));\n     }\n \n-    @Test\n-    public void testHexsToLong() throws Exception {\n+    /**\n+     * Tests {@link Conversion#hexsToLong(String, int, long, int, int)}.\n+     */\n+    @Test\n+    public void testHexsToLong() {\n         String src = \"CDF1F0C10F12345678\";\n         assertEquals(0x0000000000000000L, Conversion.hexsToLong(src, 0, 0L, 0, 0));\n         assertEquals(0x000000000000000CL, Conversion.hexsToLong(src, 0, 0L, 0, 1));\n             0x1234567876BCDEF0L, Conversion.hexsToLong(src, 15, 0x123456798ABCDEF0L, 24, 3));\n     }\n \n-    @Test\n-    public void testHexsToInt() throws Exception {\n+    /**\n+     * Tests {@link Conversion#hexsToInt(String, int, int, int, int)}.\n+     */\n+    @Test\n+    public void testHexsToInt() {\n         String src = \"CDF1F0C10F12345678\";\n         assertEquals(0x00000000, Conversion.hexsToInt(src, 0, 0, 0, 0));\n         assertEquals(0x0000000C, Conversion.hexsToInt(src, 0, 0, 0, 1));\n         assertEquals(0x87645679, Conversion.hexsToInt(src, 15, 0x12345679, 20, 3));\n     }\n \n-    @Test\n-    public void testHexsToShort() throws Exception {\n+    /**\n+     * Tests {@link Conversion#hexsToShort(String, int, short, int, int)}.\n+     */\n+    @Test\n+    public void testHexsToShort() {\n         String src = \"CDF1F0C10F12345678\";\n         assertEquals((short)0x0000, Conversion.hexsToShort(src, 0, (short)0, 0, 0));\n         assertEquals((short)0x000C, Conversion.hexsToShort(src, 0, (short)0, 0, 1));\n         assertEquals((short)0x8764, Conversion.hexsToShort(src, 15, (short)0x1234, 4, 3));\n     }\n \n-    @Test\n-    public void testHexsToByte() throws Exception {\n+    /**\n+     * Tests {@link Conversion#hexsToByte(String, int, byte, int, int)}.\n+     */\n+    @Test\n+    public void testHexsToByte() {\n         String src = \"CDF1F0C10F12345678\";\n         assertEquals((byte)0x00, Conversion.hexsToByte(src, 0, (byte)0, 0, 0));\n         assertEquals((byte)0x0C, Conversion.hexsToByte(src, 0, (byte)0, 0, 1));\n         assertEquals((byte)0x84, Conversion.hexsToByte(src, 17, (byte)0x34, 4, 1));\n     }\n \n-    @Test\n-    public void testBoolsToLong() throws Exception {\n+    /**\n+     * Tests {@link Conversion#boolsToLong(boolean[], int, long, int, int)}.\n+     */\n+    @Test\n+    public void testBoolsToLong() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             false, true, true, true, false, false, false, false, false, false, false, true,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n-            true, false, true, true, true, false, false, false, false, true};// conversion of\n-                                                                             // \"CDF1F0C10F12345678\"\n-                                                                             // by hexsToBools\n-\n+            true, false, true, true, true, false, false, false, false, true};\n+        // conversion of \"CDF1F0C10F12345678\" by hexsToBools\n         assertEquals(0x0000000000000000L, Conversion.boolsToLong(src, 0, 0L, 0, 0));\n         assertEquals(0x000000000000000CL, Conversion.boolsToLong(src, 0, 0L, 0, 1 * 4));\n         assertEquals(0x000000001C0F1FDCL, Conversion.boolsToLong(src, 0, 0L, 0, 8 * 4));\n             Conversion.boolsToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4));\n     }\n \n-    @Test\n-    public void testBoolsToInt() throws Exception {\n+    /**\n+     * Tests {@link Conversion#boolsToInt(boolean[], int, int, int, int)}.\n+     */\n+    @Test\n+    public void testBoolsToInt() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             false, true, true, true, false, false, false, false, false, false, false, true,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n-            true, false, true, true, true, false, false, false, false, true};// conversion of\n-                                                                             // \"CDF1F0C10F12345678\"\n-                                                                             // by hexsToBools\n+            true, false, true, true, true, false, false, false, false, true};\n+        // conversion of \"CDF1F0C10F12345678\" by hexsToBools\n         assertEquals(0x00000000, Conversion.boolsToInt(src, 0 * 4, 0, 0, 0 * 4));\n         assertEquals(0x0000000C, Conversion.boolsToInt(src, 0 * 4, 0, 0, 1 * 4));\n         assertEquals(0x1C0F1FDC, Conversion.boolsToInt(src, 0 * 4, 0, 0, 8 * 4));\n         assertEquals(0x87645679, Conversion.boolsToInt(src, 15 * 4, 0x12345679, 20, 3 * 4));\n     }\n \n-    @Test\n-    public void testBoolsToShort() throws Exception {\n+    /**\n+     * Tests {@link Conversion#boolsToShort(boolean[], int, short, int, int)}.\n+     */\n+    @Test\n+    public void testBoolsToShort() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             false, true, true, true, false, false, false, false, false, false, false, true,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n-            true, false, true, true, true, false, false, false, false, true};// conversion of\n-                                                                             // \"CDF1F0C10F12345678\"\n-                                                                             // by hexsToBools\n+            true, false, true, true, true, false, false, false, false, true};\n+        // conversion of \"CDF1F0C10F12345678\" by hexsToBools\n         assertEquals((short)0x0000, Conversion.boolsToShort(src, 0 * 4, (short)0, 0, 0 * 4));\n         assertEquals((short)0x000C, Conversion.boolsToShort(src, 0 * 4, (short)0, 0, 1 * 4));\n         assertEquals((short)0x1FDC, Conversion.boolsToShort(src, 0 * 4, (short)0, 0, 4 * 4));\n             (short)0x8764, Conversion.boolsToShort(src, 15 * 4, (short)0x1234, 4, 3 * 4));\n     }\n \n-    @Test\n-    public void testBoolsToByte() throws Exception {\n+    /**\n+     * Tests {@link Conversion#boolsToByte(boolean[], int, byte, int, int)}.\n+     */\n+    @Test\n+    public void testBoolsToByte() {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             false, false, false, true, true, true, true, false, false, false, false, false,\n             false, true, true, true, false, false, false, false, false, false, false, true,\n             true, true, true, true, false, false, false, false, true, false, false, true, true,\n             false, false, false, false, true, false, true, false, true, false, false, true,\n-            true, false, true, true, true, false, false, false, false, true};// conversion of\n-                                                                             // \"CDF1F0C10F12345678\"\n-                                                                             // by hexsToBools\n+            true, false, true, true, true, false, false, false, false, true};\n+        // conversion of \"CDF1F0C10F12345678\" by hexsToBools\n         assertEquals((byte)0x00, Conversion.boolsToByte(src, 0 * 4, (byte)0, 0, 0 * 4));\n         assertEquals((byte)0x0C, Conversion.boolsToByte(src, 0 * 4, (byte)0, 0, 1 * 4));\n         assertEquals((byte)0xDC, Conversion.boolsToByte(src, 0 * 4, (byte)0, 0, 2 * 4));\n         assertEquals((byte)0x84, Conversion.boolsToByte(src, 17 * 4, (byte)0x34, 4, 1 * 4));\n     }\n \n-    @Test\n-    public void testLongToInts() throws Exception {\n-        Assert.assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#longToInts(long, int, int[], int, int)}.\n+     */\n+    @Test\n+    public void testLongToInts() {\n+        assertArrayEquals(\n             new int[]{}, Conversion.longToInts(0x0000000000000000L, 0, new int[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{}, Conversion.longToInts(0x0000000000000000L, 100, new int[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{}, Conversion.longToInts(0x0000000000000000L, 0, new int[]{}, 100, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 2));\n         // assertArrayEquals(new\n         // assertArrayEquals(new\n         // int[]{0xFFFFFFFF,0x90ABCDEF,0x12345678,0x90ABCDEF},Conversion.longToInts(0x1234567890ABCDEFL,\n         // 0,new int[]{-1,-1,-1,-1},1,3));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 3, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 1, new int[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 2, new int[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 3, new int[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 4, new int[]{-1, -1, -1, -1}, 2, 1));\n-        // Assert.assertArrayEquals(new\n+        // assertArrayEquals(new\n         // int[]{0x4855E6F7,0x091A2B3C,0x4855E6F7,0x091A2B3C},Conversion.longToInts(0x1234567890ABCDEFL,\n         // 1,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new int[]{0x091A2B3C},\n             Conversion.longToInts(0x1234567890ABCDEFL, 33, new int[]{0}, 0, 1));\n     }\n \n-    @Test\n-    public void testLongToShorts() throws Exception {\n-        Assert.assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#longToShorts(long, int, short[], int, int)}.\n+     */\n+    @Test\n+    public void testLongToShorts() {\n+        assertArrayEquals(\n             new short[]{}, Conversion.longToShorts(0x0000000000000000L, 0, new short[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{},\n             Conversion.longToShorts(0x0000000000000000L, 100, new short[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{},\n             Conversion.longToShorts(0x0000000000000000L, 0, new short[]{}, 100, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0x90AB, (short)0xFFFF, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 3));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0x1234},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 4));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xCDEF, (short)0x90AB, (short)0x5678},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 1, 3));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0x90AB},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xCDEF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 3, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xE6F7, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xF37B, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 2, new short[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x79BD, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 3, new short[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xBCDE, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 4, new short[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xE6F7, (short)0x4855, (short)0x2B3C, (short)0x091A},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 0, 4));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0x2B3C},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1));\n     }\n \n-    @Test\n-    public void testIntToShorts() throws Exception {\n-        Assert.assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#intToShorts(int, int, short[], int, int)}.\n+     */\n+    @Test\n+    public void testIntToShorts() {\n+        assertArrayEquals(\n             new short[]{}, Conversion.intToShorts(0x00000000, 0, new short[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{}, Conversion.intToShorts(0x00000000, 100, new short[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{}, Conversion.intToShorts(0x00000000, 0, new short[]{}, 100, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0x5678, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0x5678, (short)0x1234, (short)0xFFFF, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 2));\n-        // Assert.assertArrayEquals(new\n+        // assertArrayEquals(new\n         // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0xFFFF},Conversion.intToShorts(0x12345678,\n         // 0,new short[]{-1,-1,-1,-1},0,3));//rejected by assertion\n-        // Assert.assertArrayEquals(new\n+        // assertArrayEquals(new\n         // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0x1234},Conversion.intToShorts(0x12345678,\n         // 0,new short[]{-1,-1,-1,-1},0,4));\n-        // Assert.assertArrayEquals(new\n+        // assertArrayEquals(new\n         // short[]{(short)0xFFFF,(short)0x5678,(short)0x1234,(short)0x5678},Conversion.intToShorts(0x12345678,\n         // 0,new short[]{-1,-1,-1,-1},1,3));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0x1234},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0x5678},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 3, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x2B3C, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 1, new short[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x159E, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 2, new short[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x8ACF, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 3, new short[]{-1, -1, -1, -1}, 2, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x4567, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 4, new short[]{-1, -1, -1, -1}, 2, 1));\n-        // Assert.assertArrayEquals(new\n+        // assertArrayEquals(new\n         // short[]{(short)0xE6F7,(short)0x4855,(short)0x2B3C,(short)0x091A},Conversion.intToShorts(0x12345678,\n         // 1,new short[]{-1,-1,-1,-1},0,4));//rejected by assertion\n-        // Assert.assertArrayEquals(new short[]{(short)0x2B3C},Conversion.intToShorts(0x12345678,33,new\n+        // assertArrayEquals(new short[]{(short)0x2B3C},Conversion.intToShorts(0x12345678,33,new\n         // short[]{0},0,1));//rejected by assertion\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new short[]{(short)0x091A},\n             Conversion.intToShorts(0x12345678, 17, new short[]{0}, 0, 1));\n     }\n \n-    @Test\n-    public void testLongToBytes() throws Exception {\n-        Assert.assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#longToBytes(long, int, byte[], int, int)}.\n+     */\n+    @Test\n+    public void testLongToBytes() {\n+        assertArrayEquals(\n             new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 0, new byte[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 100, new byte[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 0, new byte[]{}, 100, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56,\n                 (byte)0x34, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56,\n                 (byte)0x34, (byte)0x12, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0x12},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 1, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 2, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85,\n                 (byte)0xC4, (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 5, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));\n-        // Assert.assertArrayEquals(new\n+        // assertArrayEquals(new\n         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToBytes(0x1234567890ABCDEFL,13,new\n         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xC4,\n                 (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00, (byte)0xFF},\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));\n     }\n \n-    @Test\n-    public void testIntToBytes() throws Exception {\n-        Assert.assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#intToBytes(int, int, byte[], int, int)}.\n+     */\n+    @Test\n+    public void testIntToBytes() {\n+        assertArrayEquals(\n             new byte[]{}, Conversion.intToBytes(0x00000000, 0, new byte[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{}, Conversion.intToBytes(0x00000000, 100, new byte[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{}, Conversion.intToBytes(0x00000000, 0, new byte[]{}, 100, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 1, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 2, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85,\n                 (byte)0xFC, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 5, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));\n-        // Assert.assertArrayEquals(new\n+        // assertArrayEquals(new\n         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xFC,(byte)0x00,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.intToBytes(0x90ABCDEF,13,new\n         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,4));//rejected by assertion\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xFC,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 3));\n     }\n \n-    @Test\n-    public void testShortToBytes() throws Exception {\n-        Assert.assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#shortToBytes(short, int, byte[], int, int)}.\n+     */\n+    @Test\n+    public void testShortToBytes() {\n+        assertArrayEquals(\n             new byte[]{}, Conversion.shortToBytes((short)0x0000, 0, new byte[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{}, Conversion.shortToBytes((short)0x0000, 100, new byte[]{}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{}, Conversion.shortToBytes((short)0x0000, 0, new byte[]{}, 100, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 0));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 3, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 3, 2));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 1, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 2, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0xFE, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 5, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1}, 3, 2));\n-        // Assert.assertArrayEquals(new\n+        // assertArrayEquals(new\n         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.shortToBytes((short)0xCDEF,13,new\n         // byte[]{-1, 0,-1,-1,-1,-1,-1},3,2));//rejected by assertion\n-        Assert.assertArrayEquals(\n+        assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0xFE, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 13, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1}, 3, 1));\n     }\n \n-    @Test\n-    public void testLongToHexs() throws Exception {\n+    /**\n+     * Tests {@link Conversion#longToHexs(long, int, String, int, int)}.\n+     */\n+    @Test\n+    public void testLongToHexs() {\n         assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 0, \"\", 0, 0));\n         assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 100, \"\", 0, 0));\n         assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 0, \"\", 100, 0));\n             Conversion.longToHexs(0x1234567890ABCDEFL, 4, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 15));\n     }\n \n-    @Test\n-    public void testIntToHexs() throws Exception {\n+    /**\n+     * Tests {@link Conversion#intToHexs(int, int, String, int, int)}.\n+     */\n+    @Test\n+    public void testIntToHexs() {\n         assertEquals(\"\", Conversion.intToHexs(0x00000000, 0, \"\", 0, 0));\n         assertEquals(\"\", Conversion.intToHexs(0x00000000, 100, \"\", 0, 0));\n         assertEquals(\"\", Conversion.intToHexs(0x00000000, 0, \"\", 100, 0));\n             Conversion.intToHexs(0x90ABCDEF, 4, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 7));\n     }\n \n-    @Test\n-    public void testShortToHexs() throws Exception {\n+    /**\n+     * Tests {@link Conversion#shortToHexs(short, int, String, int, int)}.\n+     */\n+    @Test\n+    public void testShortToHexs() {\n         assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 0, \"\", 0, 0));\n         assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 100, \"\", 0, 0));\n         assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 0, \"\", 100, 0));\n             Conversion.shortToHexs((short)0xCDEF, 4, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 3));\n     }\n \n-    @Test\n-    public void testByteToHexs() throws Exception {\n+    /**\n+     * Tests {@link Conversion#byteToHexs(byte, int, String, int, int)}.\n+     */\n+    @Test\n+    public void testByteToHexs() {\n         assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 0, \"\", 0, 0));\n         assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 100, \"\", 0, 0));\n         assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 0, \"\", 100, 0));\n         assertEquals(\"000E0\", Conversion.byteToHexs((byte)0xEF, 4, \"00000\", 3, 1));\n     }\n \n-    @Test\n-    public void testLongToBools() throws Exception {\n-        assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#longToBools(long, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testLongToBools() {\n+        assertBoolArrayEquals(\n             new boolean[]{},\n             Conversion.longToBools(0x0000000000000000L, 0, new boolean[]{}, 0, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{},\n             Conversion.longToBools(0x0000000000000000L, 100, new boolean[]{}, 0, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{},\n             Conversion.longToBools(0x0000000000000000L, 0, new boolean[]{}, 100, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[69],\n             Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0));\n \n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n             Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n             Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n             Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 false, false, false, true, false, true, true, false, false, false, true, false,\n                 false, true, false, false, false, false, false, false, false, false},\n             Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 false, false, false, true, false, true, true, false, false, false, true, false,\n                 false, true, false, false, false, false, false, false, false, false},\n             Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false},\n             Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, true, true, true, false, true, true, true, true, false,\n                 true, true, false, false, true, true, true, true, false, true, false, true,\n                 false, true, false, false, false, true, false, true, true, false, false, false,\n                 true, false, false, true, false, false, false, false, false, false},\n             Conversion.longToBools(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, true, true, true, true, false, true, true, false,\n                 false, true, true, true, true, false, true, false, true, false, true, false,\n                 false, true, false, true, true, false, false, false, true, false, false, true,\n                 false, false, false, false, false, false, false, false, false},\n             Conversion.longToBools(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, true, true, true, true, false, true, true, false, false,\n                 true, true, true, true, false, true, false, true, false, true, false, false,\n                 false, false, false, false, false, false, false, false, false},\n             Conversion.longToBools(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62));\n \n-        // assertArrayEquals(new boolean[]{false,false,false, true, true, false, true, true,\n+        // assertBoolArrayEquals(new boolean[]{false,false,false, true, true, false, true, true,\n         // true, true, false, true, true, false, false, true, true, true, true, false, true,\n         // false, true, false, true, false, false, false, false, true, false, false, true,\n         // false, false, false, true, true, true, true, false, false, true, true, false, true,\n         // false, false, true, false, false, false\n         // ,false,false,false,false},Conversion.longToBools(0x1234567890ABCDEFL, 2,new\n         // boolean[69], 3, 63));//rejected by assertion\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, false, true, true, false, true, true, true, true, false, true,\n                 true, false, false, true, true, true, true, false, true, false, true, false,\n             Conversion.longToBools(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));\n     }\n \n-    @Test\n-    public void testIntToBools() throws Exception {\n-        assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#intToBools(int, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testIntToBools() {\n+        assertBoolArrayEquals(\n             new boolean[]{}, Conversion.intToBools(0x00000000, 0, new boolean[]{}, 0, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{}, Conversion.intToBools(0x00000000, 100, new boolean[]{}, 0, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{}, Conversion.intToBools(0x00000000, 0, new boolean[]{}, 100, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[69], Conversion.intToBools(0x90ABCDEF, 0, new boolean[69], 0, 0));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             true, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 1));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             true, true, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 2));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             true, true, true, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 3));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 false, false, false, false, true, false, false, false, false, false, false,\n                 false, false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 31));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, true, true, false, true, false, true, false, true,\n                 false, false, false, false, true, false, false, true, false, false, false,\n                 false, false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 0, 32));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             false, false, true, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false, false, false, false, false, false, false, false, false, false, false, false,\n             false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 2, 1));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, true, true, true, false, true, true, true, true, false,\n                 true, true, false, false, true, true, true, true, false, true, false, true,\n                 false, true, false, false, false, false, true, false, false, true, false,\n                 false, false}, Conversion.intToBools(0x90ABCDEF, 0, new boolean[37], 2, 32));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, true, true, true, true, false, true, true, false,\n                 false, true, true, true, true, false, true, false, true, false, true, false,\n                 false, false, false, true, false, false, true, false, false, false, false,\n                 false, false}, Conversion.intToBools(0x90ABCDEF, 1, new boolean[37], 0, 31));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, true, true, true, true, false, true, true, false, false,\n                 true, true, true, true, false, true, false, true, false, true, false, false,\n                 false, false, true, false, false, true, false, false, false, false, false,\n                 false, false}, Conversion.intToBools(0x90ABCDEF, 2, new boolean[37], 0, 30));\n-        // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,\n+        // assertBoolArrayEquals(new boolean[]{false, false, false, true, true, false, true,\n+        // true,\n         // true, true, false, true, true, false, false, true, true, true, true, false, true,\n         // false, true, false, true, false, false, false, false, true, false, false, false,\n         // false, false, false, false},Conversion.intToBools(0x90ABCDEF, 2,new boolean[37],\n         // 3,31));//rejected by assertion\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, false, true, true, false, true, true, true, true, false, true,\n                 true, false, false, true, true, true, true, false, true, false, true, false,\n                 false, false}, Conversion.intToBools(0x90ABCDEF, 2, new boolean[37], 3, 30));\n     }\n \n-    @Test\n-    public void testShortToBools() throws Exception {\n-        assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#shortToBools(short, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testShortToBools() {\n+        assertBoolArrayEquals(\n             new boolean[]{}, Conversion.shortToBools((short)0x0000, 0, new boolean[]{}, 0, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{}, Conversion.shortToBools((short)0x0000, 100, new boolean[]{}, 0, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{}, Conversion.shortToBools((short)0x0000, 0, new boolean[]{}, 100, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[69], Conversion.shortToBools((short)0xCDEF, 0, new boolean[69], 0, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, false, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n             Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 1));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n             Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 2));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n             Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 3));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, false, false, false, false, false, false},\n             Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 15));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, true, false, true, true, true, true, false, true, true,\n                 false, false, true, true, false, false, false, false, false},\n             Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 0, 16));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, false, false, false, false, false, false, false, false,\n                 false, false, false, false, false, false, false, false, false, false},\n             Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 2, 1));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, true, true, true, true, false, true, true, true, true, false,\n                 true, true, false, false, true, true, false, false, false},\n             Conversion.shortToBools((short)0xCDEF, 0, new boolean[21], 2, 16));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, true, false, true, true, true, true, false, true, true, false,\n                 false, true, true, false, false, false, false, false, false},\n             Conversion.shortToBools((short)0xCDEF, 1, new boolean[21], 0, 15));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 true, true, false, true, true, true, true, false, true, true, false, false,\n                 true, true, false, false, false, false, false, false, false},\n         // true, true, false, true, true, false, false, true, false, false, false, false,\n         // false},Conversion.shortToBools((short)0xCDEF, 2,new boolean[21], 3,15));//rejected by\n         // assertion\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{\n                 false, false, false, true, true, false, true, true, true, true, false, true,\n                 true, false, false, true, true, false, false, false, false},\n             Conversion.shortToBools((short)0xCDEF, 2, new boolean[21], 3, 14));\n     }\n \n-    @Test\n-    public void testByteToBools() throws Exception {\n-        assertArrayEquals(\n+    /**\n+     * Tests {@link Conversion#byteToBools(byte, int, boolean[], int, int)}.\n+     */\n+    @Test\n+    public void testByteToBools() {\n+        assertBoolArrayEquals(\n             new boolean[]{}, Conversion.byteToBools((byte)0x00, 0, new boolean[]{}, 0, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{}, Conversion.byteToBools((byte)0x00, 100, new boolean[]{}, 0, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[]{}, Conversion.byteToBools((byte)0x00, 0, new boolean[]{}, 100, 0));\n-        assertArrayEquals(\n+        assertBoolArrayEquals(\n             new boolean[69], Conversion.byteToBools((byte)0xEF, 0, new boolean[69], 0, 0));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             true, false, false, false, false, false, false, false, false, false, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 1));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             true, false, false, false, false, false, false, false, false, false, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 2));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             true, false, true, false, false, false, false, false, false, false, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 3));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             true, false, true, false, true, false, false, false, false, false, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 7));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             true, false, true, false, true, false, false, true, false, false, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 0, 8));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             false, false, true, false, false, false, false, false, false, false, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 2, 1));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             false, false, true, false, true, false, true, false, false, true, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 0, new boolean[13], 2, 8));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             false, true, false, true, false, false, true, false, false, false, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 1, new boolean[13], 0, 7));\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             true, false, true, false, false, true, false, false, false, false, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 2, new boolean[13], 0, 6));\n         // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true,\n         // false, false, false, false, false},Conversion.byteToBools((byte)0x95, 2,new\n         // boolean[13], 3, 7));//rejected by assertion\n-        assertArrayEquals(new boolean[]{\n+        assertBoolArrayEquals(new boolean[]{\n             false, false, false, true, false, true, false, false, true, false, false, false,\n             false}, Conversion.byteToBools((byte)0x95, 2, new boolean[13], 3, 6));\n     }\n-\n-    private boolean hasMethod(String methodName) {\n-        Method[] methods = this.getClass().getMethods();\n-        for (Method m : methods) {\n-            if (m.getName().equals(methodName)) return true;\n-        }\n-        return false;\n-    }\n-\n-    @Test\n-    public void testTestsToCheckImplemented() throws Exception {\n-        if (!hasMethod(\"testIntsToLong\")) fail(\"test testIntsToLong not implemented\");\n-        if (!hasMethod(\"testShortsToLong\")) fail(\"test testShortsToLong not implemented\");\n-        if (!hasMethod(\"testShortsToInt\")) fail(\"test testShortsToInt not implemented\");\n-        if (!hasMethod(\"testBytesToLong\")) fail(\"test testBytesToLong not implemented\");\n-        if (!hasMethod(\"testBytesToInt\")) fail(\"test testBytesToInt not implemented\");\n-        if (!hasMethod(\"testBytesToShort\")) fail(\"test testBytesToShort not implemented\");\n-        if (!hasMethod(\"testHexsToLong\")) fail(\"test testHexsToLong not implemented\");\n-        if (!hasMethod(\"testHexsToInt\")) fail(\"test testHexsToInt not implemented\");\n-        if (!hasMethod(\"testHexsToShort\")) fail(\"test testHexsToShort not implemented\");\n-        if (!hasMethod(\"testHexsToByte\")) fail(\"test testHexsToByte not implemented\");\n-        if (!hasMethod(\"testBoolsToLong\")) fail(\"test testBoolsToLong not implemented\");\n-        if (!hasMethod(\"testBoolsToInt\")) fail(\"test testBoolsToInt not implemented\");\n-        if (!hasMethod(\"testBoolsToShort\")) fail(\"test testBoolsToShort not implemented\");\n-        if (!hasMethod(\"testBoolsToByte\")) fail(\"test testBoolsToByte not implemented\");\n-        if (!hasMethod(\"testLongToInts\")) fail(\"test testLongToInts not implemented\");\n-        if (!hasMethod(\"testLongToShorts\")) fail(\"test testLongToShorts not implemented\");\n-        if (!hasMethod(\"testIntToShorts\")) fail(\"test testIntToShorts not implemented\");\n-        if (!hasMethod(\"testLongToBytes\")) fail(\"test testLongToBytes not implemented\");\n-        if (!hasMethod(\"testIntToBytes\")) fail(\"test testIntToBytes not implemented\");\n-        if (!hasMethod(\"testShortToBytes\")) fail(\"test testShortToBytes not implemented\");\n-        if (!hasMethod(\"testLongToHexs\")) fail(\"test testLongToHexs not implemented\");\n-        if (!hasMethod(\"testIntToHexs\")) fail(\"test testIntToHexs not implemented\");\n-        if (!hasMethod(\"testShortToHexs\")) fail(\"test testShortToHexs not implemented\");\n-        if (!hasMethod(\"testByteToHexs\")) fail(\"test testByteToHexs not implemented\");\n-        if (!hasMethod(\"testLongToBools\")) fail(\"test testLongToBools not implemented\");\n-        if (!hasMethod(\"testIntToBools\")) fail(\"test testIntToBools not implemented\");\n-        if (!hasMethod(\"testShortToBools\")) fail(\"test testShortToBools not implemented\");\n-        if (!hasMethod(\"testByteToBools\")) fail(\"test testByteToBools not implemented\");\n-    }\n-\n }", "timestamp": 1348780134, "metainfo": ""}