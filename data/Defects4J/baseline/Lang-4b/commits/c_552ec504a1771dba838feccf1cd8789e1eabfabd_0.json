{"sha": "552ec504a1771dba838feccf1cd8789e1eabfabd", "log": "Better code coverage from Nathan Beyer [nbeyer@kc.rr.com].  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/StrBuilder.java\n+++ b/src/java/org/apache/commons/lang/text/StrBuilder.java\n \n import java.util.Collection;\n import java.util.Iterator;\n+\n+import org.apache.commons.lang.ArrayUtils;\n \n /**\n  * Builds a string from consituant parts providing a more flexible and powerful API\n      * @return a new array that represents the contents of the builder\n      */\n     public char[] toCharArray() {\n+        if (size == 0) {\n+            return ArrayUtils.EMPTY_CHAR_ARRAY;\n+        }\n         char chars[] = new char[size];\n         System.arraycopy(buf, 0, chars, 0, size);\n         return chars;\n      * @param endIndex  the end index, exclusive, must be valid except\n      *  that if too large it is treated as end of string\n      * @return a new array that holds part of the contents of the builder\n+     * \n+     * @throws StringIndexOutOfBoundsException when <code>startIndex</code> is less than 0;\n+     *                   when <code>startIndex</code> is greater than <code>endIndex</code> (if <code>endIndex</code>\n+     *                   is larger than {@link #size() }, then it is massaged to equal {@link #size()} before the validation).\n      */\n     public char[] toCharArray(int startIndex, int endIndex) {\n         endIndex = validateRange(startIndex, endIndex);\n-        char chars[] = new char[size];\n-        System.arraycopy(buf, startIndex, chars, 0, endIndex - startIndex);\n+        int len = endIndex - startIndex;\n+        if (len == 0) {\n+            return ArrayUtils.EMPTY_CHAR_ARRAY;\n+        }\n+        char chars[] = new char[len];\n+        System.arraycopy(buf, startIndex, chars, 0, len);\n         return chars;\n     }\n \n--- a/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n         assertEquals(\"foo,null,baz\", sb.toString());\n     }\n \n-    //-----------------------------------------------------------------------\n-    public void testCharArray() {\n-        // TODO\n-    }\n-\n     public void testInsert() {\n \n         StrBuilder sb = new StrBuilder();\n         assertEquals(\"foonullbarbaz\", sb.toString());\n     }\n \n+    public void testToCharArray ( ) {\n+        \n+        StrBuilder sb = new StrBuilder();\n+        \n+        char[] a = sb.toCharArray();\n+        assertNotNull (\"toCharArray() result is null\", a);\n+        assertEquals (\"toCharArray() result is too large\", 0, a.length);\n+        \n+        sb.append(\"junit\");\n+        a = sb.toCharArray();\n+        assertEquals (\"toCharArray() result incorrect length\",5, a.length);\n+        assertTrue (\"toCharArray() result does not match\",Arrays.equals(\"junit\".toCharArray(), a));\n+    }\n+    \n+    public void testToCharArrayIntInt() {\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"junit\");\n+        char[] a = sb.toCharArray(0, 20); //too large test\n+        assertEquals (\"toCharArray(int,int) result incorrect length\",5, a.length);\n+        assertTrue (\"toCharArray(int,int) result does not match\",Arrays.equals(\"junit\".toCharArray(), a));\n+        \n+        a = sb.toCharArray(0, 4);\n+        assertEquals (\"toCharArray(int,int) result incorrect length\",4, a.length);\n+        assertTrue (\"toCharArray(int,int) result does not match\",Arrays.equals(\"juni\".toCharArray(), a));\n+        \n+        a = sb.toCharArray(0, 4);\n+        assertEquals (\"toCharArray(int,int) result incorrect length\",4, a.length);\n+        assertTrue (\"toCharArray(int,int) result does not match\",Arrays.equals(\"juni\".toCharArray(), a));\n+        \n+        a = sb.toCharArray(0,1);\n+        assertNotNull (\"toCharArray(int,int) result is null\", a);\n+        \n+        try {\n+            sb.toCharArray(-1, 5);\n+            fail (\"no string index out of bound on -1\");\n+        }\n+        catch (StringIndexOutOfBoundsException e) {}\n+\n+        try {\n+            sb.toCharArray(6, 5);\n+            fail (\"no string index out of bound on -1\");\n+        }\n+        catch (StringIndexOutOfBoundsException e) {}\n+    }\n+    \n+    public void testGetChars ( ) {\n+        \n+        StrBuilder sb = new StrBuilder();\n+        \n+        char[] input = new char[10];\n+        char[] a = sb.getChars(input);\n+        assertSame (input, a);\n+        assertTrue(Arrays.equals(new char[10], a));\n+        \n+        sb.append(\"junit\");\n+        a = sb.getChars(input);\n+        assertSame(input, a);\n+        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a));\n+        \n+        a = sb.getChars(null);\n+        assertNotSame(input,a);\n+        assertEquals(5,a.length);\n+        assertTrue(Arrays.equals(\"junit\".toCharArray(),a));\n+        \n+        input = new char[5];\n+        a = sb.getChars(input);\n+        assertSame(input, a);\n+        \n+        input = new char[4];\n+        a = sb.getChars(input);\n+        assertNotSame(input, a);\n+    }\n+    \n+    public void testGetCharsIntIntCharArrayInt( ) {\n+        \n+        StrBuilder sb = new StrBuilder();\n+               \n+        sb.append(\"junit\");\n+        char[] a = new char[5];\n+        sb.getChars(0,5,a,0);\n+        assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a));\n+        \n+        a = new char[5];\n+        sb.getChars(0,2,a,3);\n+        assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a));\n+        \n+        try {\n+            sb.getChars(-1,0,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (StringIndexOutOfBoundsException e) {\n+        }\n+        \n+        try {\n+            sb.getChars(0,-1,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (StringIndexOutOfBoundsException e) {\n+        }\n+        \n+        try {\n+            sb.getChars(0,20,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (StringIndexOutOfBoundsException e) {\n+        }\n+        \n+        try {\n+            sb.getChars(4,2,a,0);\n+            fail(\"no exception\");\n+        }\n+        catch (StringIndexOutOfBoundsException e) {\n+        }\n+    }\n+    \n+    public void testAppendStringBuffer() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb = sb.append(new StringBuffer());\n+        assertNotNull(sb);\n+        \n+        sb = sb.append(new StringBuffer(\"junit\"));\n+        \n+        assertEquals (\"junit\", sb.toString());\n+    }\n+    \n+    public void testAppendStrBuilder() {\n+        StrBuilder sb = new StrBuilder();\n+        \n+        sb = sb.append((StrBuilder)null);\n+        assertNotNull(sb);\n+        \n+        sb = sb.append(new StrBuilder());\n+        assertNotNull(sb);\n+        assertEquals(\"\", sb.toString());\n+    }\n+    \n+    public void toStringBuffer() {\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals (new StringBuffer().toString(), sb.toStringBuffer().toString());\n+        \n+        sb.append(\"junit\");\n+        assertEquals(new StringBuffer(\"junit\").toString(), sb.toStringBuffer().toString());\n+    }\n }", "timestamp": 1122772621, "metainfo": ""}