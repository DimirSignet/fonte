{"sha": "48b3b2db1f1fa5ba90d7d7783ad1a494c245a318", "log": "Port @since tags from 2.x branch  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static Object[] nullToEmpty(Object[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static String[] nullToEmpty(String[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static long[] nullToEmpty(long[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static int[] nullToEmpty(int[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static short[] nullToEmpty(short[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static char[] nullToEmpty(char[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static byte[] nullToEmpty(byte[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static double[] nullToEmpty(double[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static float[] nullToEmpty(float[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static boolean[] nullToEmpty(boolean[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static Long[] nullToEmpty(Long[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static Integer[] nullToEmpty(Integer[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static Short[] nullToEmpty(Short[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static Character[] nullToEmpty(Character[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static Byte[] nullToEmpty(Byte[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static Double[] nullToEmpty(Double[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static Float[] nullToEmpty(Float[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to check for <code>null</code> or empty\n      * @return the same array, <code>public static</code> empty array if <code>null</code> or empty input\n+     * @since 2.5\n      */\n     public static Boolean[] nullToEmpty(Boolean[] array) {\n         if (array == null || array.length == 0) {\n      *\n      * @param array  the array to test\n      * @return <code>true</code> if the array is not empty or not <code>null</code>\n-     *\n+     * @since 2.5\n      */\n      public static <T> boolean isNotEmpty(T[] array) {\n          return (array != null && array.length != 0);\n      *\n      * @param array  the array to test\n      * @return <code>true</code> if the array is not empty or not <code>null</code>\n-     *\n+     * @since 2.5\n      */\n     public static boolean isNotEmpty(long[] array) {\n         return (array != null && array.length != 0);\n      *\n      * @param array  the array to test\n      * @return <code>true</code> if the array is not empty or not <code>null</code>\n-     *\n+     * @since 2.5\n      */\n     public static boolean isNotEmpty(int[] array) {\n         return (array != null && array.length != 0);\n      *\n      * @param array  the array to test\n      * @return <code>true</code> if the array is not empty or not <code>null</code>\n-     *\n+     * @since 2.5\n      */\n     public static boolean isNotEmpty(short[] array) {\n         return (array != null && array.length != 0);\n      *\n      * @param array  the array to test\n      * @return <code>true</code> if the array is not empty or not <code>null</code>\n-     *\n+     * @since 2.5\n      */\n     public static boolean isNotEmpty(char[] array) {\n         return (array != null && array.length != 0);\n      *\n      * @param array  the array to test\n      * @return <code>true</code> if the array is not empty or not <code>null</code>\n-     *\n+     * @since 2.5\n      */\n     public static boolean isNotEmpty(byte[] array) {\n         return (array != null && array.length != 0);\n      *\n      * @param array  the array to test\n      * @return <code>true</code> if the array is not empty or not <code>null</code>\n-     *\n+     * @since 2.5\n      */\n     public static boolean isNotEmpty(double[] array) {\n         return (array != null && array.length != 0);\n      *\n      * @param array  the array to test\n      * @return <code>true</code> if the array is not empty or not <code>null</code>\n-     *\n+     * @since 2.5\n      */\n     public static boolean isNotEmpty(float[] array) {\n         return (array != null && array.length != 0);\n      *\n      * @param array  the array to test\n      * @return <code>true</code> if the array is not empty or not <code>null</code>\n-     *\n+     * @since 2.5\n      */\n     public static boolean isNotEmpty(boolean[] array) {\n         return (array != null && array.length != 0);\n--- a/src/main/java/org/apache/commons/lang3/CharRange.java\n+++ b/src/main/java/org/apache/commons/lang3/CharRange.java\n      * @param ch  only character in this range\n      * @return the new CharRange object\n      * @see CharRange#CharRange(char, char, boolean)\n+     * @since 2.5\n      */\n     public static CharRange is(char ch) {\n         return new CharRange(ch, ch, false);\n      * @param ch  only character in this range\n      * @return the new CharRange object\n      * @see CharRange#CharRange(char, char, boolean)\n+     * @since 2.5\n      */\n     public static CharRange isNot(char ch) {\n         return new CharRange(ch, ch, true);\n      * @param end  last character, inclusive, in this range\n      * @return the new CharRange object\n      * @see CharRange#CharRange(char, char, boolean)\n+     * @since 2.5\n      */\n     public static CharRange isIn(char start, char end) {\n         return new CharRange(start, end, false);\n      * @param end  last character, inclusive, in this range\n      * @return the new CharRange object\n      * @see CharRange#CharRange(char, char, boolean)\n+     * @since 2.5\n      */\n     public static CharRange isNotIn(char start, char end) {\n         return new CharRange(start, end, true);\n      * <p>Returns an iterator which can be used to walk through the characters described by this range.</p>\n      *\n      * @return an iterator to the chars represented by this range\n+     * @since 2.5\n      */\n     public Iterator<Character> iterator() {\n         return new CharacterIterator(this);\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      * @param searchStr  the String to find, may be null\n      * @return the first index of the search String,\n      *  -1 if no match or <code>null</code> string input\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public static int indexOfIgnoreCase(String str, String searchStr) {\n         return indexOfIgnoreCase(str, searchStr, 0);\n      * @param startPos  the start position, negative treated as zero\n      * @return the first index of the search String,\n      *  -1 if no match or <code>null</code> string input\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public static int indexOfIgnoreCase(String str, String searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n      * @param ordinal  the n-th last <code>searchStr</code> to find\n      * @return the n-th last index of the search String,\n      *  <code>-1</code> (<code>INDEX_NOT_FOUND</code>) if no match or <code>null</code> string input\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public static int lastOrdinalIndexOf(String str, String searchStr, int ordinal) {\n         return ordinalIndexOf(str, searchStr, ordinal, true);\n      * @param searchStr  the String to find, may be null\n      * @return the first index of the search String,\n      *  -1 if no match or <code>null</code> string input\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public static int lastIndexOfIgnoreCase(String str, String searchStr) {\n         if (str == null || searchStr == null) {\n      * @param startPos  the start position\n      * @return the first index of the search String,\n      *  -1 if no match or <code>null</code> string input\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public static int lastIndexOfIgnoreCase(String str, String searchStr, int startPos) {\n         if (str == null || searchStr == null) {\n      * @param repeat  number of times to repeat str, negative treated as zero\n      * @return a new String consisting of the original String repeated,\n      *  <code>null</code> if null String input\n+     * @since 2.5\n      */\n     public static String repeat(String str, int repeat) {\n         // Performance tuned for 2.0 (JDK1.4)\n      * @param str  the String to upper case, may be null\n      * @param locale  the locale that defines the case transformation rules, must not be null\n      * @return the upper cased String, <code>null</code> if null String input\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public static String upperCase(String str, Locale locale) {\n         if (str == null) {\n      * @param str  the String to lower case, may be null\n      * @param locale  the locale that defines the case transformation rules, must not be null\n      * @return the lower cased String, <code>null</code> if null String input\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public static String lowerCase(String str, Locale locale) {\n         if (str == null) {\n      *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if only contains lowercase characters, and is non-null\n+     * @since 2.5\n      */\n     public static boolean isAllLowerCase(String str) {\n         if (str == null || isEmpty(str)) {\n      *\n      * @param str  the String to check, may be null\n      * @return <code>true</code> if only contains uppercase characters, and is non-null\n+     * @since 2.5\n      */\n     public static boolean isAllUpperCase(String str) {\n         if (str == null || isEmpty(str)) {\n      * @param middle the String to replace the middle characters with, may be null\n      * @param length the length to abbreviate <code>str</code> to.\n      * @return the abbreviated String if the above criteria is met, or the original String supplied for abbreviation.\n+     * @since 2.5\n      */\n     public static String abbreviateMiddle(String str, String middle, int length) {\n         if (isEmpty(str) || isEmpty(middle)) {\n      * @param searchStrings the Strings to find, may be null or empty\n      * @return <code>true</code> if the String starts with any of the the prefixes, case insensitive, or\n      *  both <code>null</code>\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public static boolean startsWithAny(String string, String[] searchStrings) {\n         if (isEmpty(string) || ArrayUtils.isEmpty(searchStrings)) {\n--- a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n \n     /**\n      * Reset the EqualsBuilder so you can use the same object again\n+     * @since 2.5\n      */\n     public void reset() {\n         this.isEquals = true;\n--- a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n      * HashCodeBuilder itself is.\n      * \n      * @return <code>hashCode</code> based on the fields appended\n+     * @since 2.5\n      */\n     @Override\n     public int hashCode() {\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n      * @param str  the string to convert, may be null\n      * @return the byte represented by the string, or <code>zero</code> if\n      *  conversion fails\n+     * @since 2.5\n      */\n     public static byte toByte(String str) {\n         return toByte(str, (byte) 0);\n      * @param str  the string to convert, may be null\n      * @param defaultValue  the default value\n      * @return the byte represented by the string, or the default if conversion fails\n+     * @since 2.5\n      */\n     public static byte toByte(String str, byte defaultValue) {\n         if(str == null) {\n      * @param str  the string to convert, may be null\n      * @return the short represented by the string, or <code>zero</code> if\n      *  conversion fails\n+     * @since 2.5\n      */\n     public static short toShort(String str) {\n         return toShort(str, (short) 0);\n      * @param str  the string to convert, may be null\n      * @param defaultValue  the default value\n      * @return the short represented by the string, or the default if conversion fails\n+     * @since 2.5\n      */\n     public static short toShort(String str, short defaultValue) {\n         if(str == null) {\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableBoolean.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableBoolean.java\n      * Checks if the current value is <code>true</code>.\n      * \n      * @return <code>true</code> if the current value is <code>true</code>\n+     * @since 2.5\n      */\n     public boolean isTrue() {\n         return value == true;\n      * Checks if the current value is <code>false</code>.\n      * \n      * @return <code>true</code> if the current value is <code>false</code>\n+     * @since 2.5\n      */\n     public boolean isFalse() {\n         return value == false;\n      * Gets this mutable as an instance of Boolean.\n      *\n      * @return a Boolean instance containing the value from this mutable, never null\n+     * @since 2.5\n      */\n     public Boolean toBoolean() {\n         return Boolean.valueOf(booleanValue());\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableByte.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableByte.java\n      * \n      * @param value  the string to parse, not null\n      * @throws NumberFormatException if the string cannot be parsed into a byte\n+     * @since 2.5\n      */\n     public MutableByte(String value) throws NumberFormatException {\n         super();\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java\n      * \n      * @param value  the string to parse, not null\n      * @throws NumberFormatException if the string cannot be parsed into a double\n+     * @since 2.5\n      */\n     public MutableDouble(String value) throws NumberFormatException {\n         super();\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java\n      * \n      * @param value  the string to parse, not null\n      * @throws NumberFormatException if the string cannot be parsed into a float\n+     * @since 2.5\n      */\n     public MutableFloat(String value) throws NumberFormatException {\n         super();\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java\n      * \n      * @param value  the string to parse, not null\n      * @throws NumberFormatException if the string cannot be parsed into an int\n+     * @since 2.5\n      */\n     public MutableInt(String value) throws NumberFormatException {\n         super();\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java\n      * \n      * @param value  the string to parse, not null\n      * @throws NumberFormatException if the string cannot be parsed into a long\n+     * @since 2.5\n      */\n     public MutableLong(String value) throws NumberFormatException {\n         super();\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java\n      * \n      * @param value  the string to parse, not null\n      * @throws NumberFormatException if the string cannot be parsed into a short\n+     * @since 2.5\n      */\n     public MutableShort(String value) throws NumberFormatException {\n         super();\n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n  * @author Jan Sorensen\n  * @author Robert Burrell Donkin\n  * @author Rodney Waldhoff\n- * @since 3.0\n+ * @since 2.5\n  * @version $Id$\n  */\n public class ConstructorUtils {\n--- a/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/FieldUtils.java\n  *\n  * @author Apache Software Foundation\n  * @author Matt Benson\n- * @since 3.0\n+ * @since 2.5\n  * @version $Id$\n  */\n public class FieldUtils {\n--- a/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/MemberUtils.java\n  * @author Apache Software Foundation\n  * @author Steve Cohen\n  * @author Matt Benson\n- * @since 3.0\n+ * @since 2.5\n  * @version $Id$\n  */\n abstract class MemberUtils {\n--- a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java\n  * @author Jan Sorensen\n  * @author Robert Burrell Donkin\n  * @author Matt Benson\n- * @since 3.0\n+ * @since 2.5\n  * @version $Id$\n  */\n public class MethodUtils {\n--- a/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n      * @param standard the separator if builder is not empty, null means no separator\n      * @param defaultIfEmpty the separator if builder is empty, null means no separator\n      * @return this, to enable chaining\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public StrBuilder appendSeparator(String standard, String defaultIfEmpty) {\n         String str = isEmpty() ? defaultIfEmpty : standard;\n      * @param standard the separator if builder is not empty\n      * @param defaultIfEmpty the separator if builder is empty\n      * @return this, to enable chaining\n-     * @since 3.0\n+     * @since 2.5\n      */\n     public StrBuilder appendSeparator(char standard, char defaultIfEmpty) {\n         if (size() > 0) {\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n      * @return the parsed date\n      * @throws IllegalArgumentException if the date string or pattern array is null\n      * @throws ParseException if none of the date patterns were suitable\n+     * @since 2.5\n      */\n     public static Date parseDateStrictly(String str, String[] parsePatterns) throws ParseException {\n         return parseDateWithLeniency(str, parsePatterns, false);\n      * @return the rounded date\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws ArithmeticException if the year is over 280 million\n+     * @since 2.5\n      */\n     public static Date ceiling(Date date, int field) {\n         if (date == null) {\n      * @return the rounded date (a different object)\n      * @throws IllegalArgumentException if the date is <code>null</code>\n      * @throws ArithmeticException if the year is over 280 million\n+     * @since 2.5\n      */\n     public static Calendar ceiling(Calendar date, int field) {\n         if (date == null) {\n      * @throws ClassCastException if the object type is not a\n      *  <code>Date</code> or <code>Calendar</code>\n      * @throws ArithmeticException if the year is over 280 million\n+     * @since 2.5\n      */\n     public static Date ceiling(Object date, int field) {\n         if (date == null) {", "timestamp": 1267061293, "metainfo": ""}