{"sha": "19858f58bc450f06cbb401c6bb8657c078049dd0", "log": "Extra tests suggested by Clover   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/Fraction.java\n+++ b/src/java/org/apache/commons/lang/math/Fraction.java\n  * @author Stephen Colebourne\n  * @author Tim O'Brien\n  * @since 2.0\n- * @version $Id: Fraction.java,v 1.7 2003/08/04 01:20:47 scolebourne Exp $\n+ * @version $Id: Fraction.java,v 1.8 2003/08/04 02:01:53 scolebourne Exp $\n  */\n public final class Fraction extends Number implements Serializable, Comparable {\n \n             denominator = -denominator;\n         }\n         int gcd = greatestCommonDenominator(Math.abs(numerator), denominator);\n-        if (gcd == 0) {\n-            return new Fraction(numerator, denominator);\n-        }\n         return new Fraction(numerator / gcd, denominator / gcd);\n     }\n \n      */\n     public Fraction reduce() {\n         int gcd = greatestCommonDenominator(Math.abs(numerator), denominator);\n-        if (gcd == 0) {\n-            return this;\n-        }\n         return Fraction.getFraction(numerator / gcd, denominator / gcd);\n     }\n \n      *\n      * @param number1  a positive number\n      * @param number2  a positive number\n-     * @return the greatest common denominator\n+     * @return the greatest common denominator, never zero\n      */\n     private static int greatestCommonDenominator(int number1, int number2) {\n         int remainder = number1 % number2;\n--- a/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/AbstractRangeTest.java\n  * Test cases for the {@link Range} classes.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: AbstractRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n+ * @version $Id: AbstractRangeTest.java,v 1.4 2003/08/04 02:01:53 scolebourne Exp $\n  */\n public abstract class AbstractRangeTest extends TestCase {\n \n     //--------------------------------------------------------------------------\n \n     public void testContainsRange() {\n+        assertEquals(false, tenToTwenty.containsRange(null));\n         assertEquals(false, tenToTwenty.containsRange(createRange(five, five)));\n         assertEquals(false, tenToTwenty.containsRange(createRange(five, ten)));\n         assertEquals(false, tenToTwenty.containsRange(createRange(five, twelve)));\n     }\n \n     public void testOverlapsRange() {\n+        assertEquals(false, tenToTwenty.overlapsRange(null));\n         assertEquals(false, tenToTwenty.overlapsRange(createRange(five, five)));\n         assertEquals(true, tenToTwenty.overlapsRange(createRange(five, ten)));\n         assertEquals(true, tenToTwenty.overlapsRange(createRange(five, twelve)));\n         assertEquals(false, tenToTwenty.equals(createRange(five, ten)));\n         assertEquals(false, tenToTwenty.equals(createRange(ten)));\n \n+        assertEquals(true, tenToTwenty.equals(tenToTwenty));\n         assertEquals(true, tenToTwenty.equals(createRange(ten, twenty)));\n         assertEquals(true, tenToTwenty.equals(createRange(twenty, ten)));\n         \n     }\n     \n     public void testToString() {\n-        assertEquals(\"Range[10,20]\", tenToTwenty.toString());\n+        String str = tenToTwenty.toString();\n+        assertEquals(\"Range[10,20]\", str);\n+        assertSame(str, tenToTwenty.toString());\n         assertEquals(\"Range[-20,-10]\", createRange(new Integer(-20), new Integer(-10)).toString());\n     }\n \n--- a/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/DoubleRangeTest.java\n  * Test cases for the {@link DoubleRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: DoubleRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n+ * @version $Id: DoubleRangeTest.java,v 1.4 2003/08/04 02:01:53 scolebourne Exp $\n  */\n public final class DoubleRangeTest extends AbstractRangeTest {\n \n     }\n \n     public void testToString() {\n-        assertEquals(\"Range[10.0,20.0]\", tenToTwenty.toString());\n+        String str = tenToTwenty.toString();\n+        assertEquals(\"Range[10.0,20.0]\", str);\n+        assertSame(str, tenToTwenty.toString());\n         assertEquals(\"Range[-20.0,-10.0]\", createRange(new Integer(-20), new Integer(-10)).toString());\n     }\n     \n--- a/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/FloatRangeTest.java\n  * Test cases for the {@link FloatRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: FloatRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n+ * @version $Id: FloatRangeTest.java,v 1.4 2003/08/04 02:01:53 scolebourne Exp $\n  */\n public final class FloatRangeTest extends AbstractRangeTest {\n \n     }\n \n     public void testToString() {\n-        assertEquals(\"Range[10.0,20.0]\", tenToTwenty.toString());\n+        String str = tenToTwenty.toString();\n+        assertEquals(\"Range[10.0,20.0]\", str);\n+        assertSame(str, tenToTwenty.toString());\n         assertEquals(\"Range[-20.0,-10.0]\", createRange(new Integer(-20), new Integer(-10)).toString());\n     }\n     \n--- a/src/test/org/apache/commons/lang/math/FractionTest.java\n+++ b/src/test/org/apache/commons/lang/math/FractionTest.java\n  * Test cases for the {@link Fraction} classes.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: FractionTest.java,v 1.2 2002/12/22 21:18:51 scolebourne Exp $\n+ * @version $Id: FractionTest.java,v 1.3 2003/08/04 02:01:53 scolebourne Exp $\n  */\n public class FractionTest extends TestCase {\n     \n         assertEquals(7, f.getNumerator());\n         assertEquals(5, f.getDenominator());\n         \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(4, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(-4, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n+        f1 = Fraction.getFraction(0, 5);\n+        f2 = Fraction.getFraction(-4, 5);\n+        f = f1.subtract(f2);\n+        assertEquals(4, f.getNumerator());\n+        assertEquals(5, f.getDenominator());\n+        \n         f1 = Fraction.getFraction(3, 5);\n         f2 = Fraction.getFraction(1, 2);\n         f = f1.subtract(f2);\n         Fraction f = null;\n \n         f = Fraction.getFraction(3, 5);\n-        assertEquals(\"3/5\", f.toString());\n+        String str = f.toString();\n+        assertEquals(\"3/5\", str);\n+        assertSame(str, f.toString());\n         \n         f = Fraction.getFraction(7, 5);\n         assertEquals(\"7/5\", f.toString());        \n         Fraction f = null;\n \n         f = Fraction.getFraction(3, 5);\n-        assertEquals(\"3/5\", f.toProperString());        \n+        String str = f.toProperString();\n+        assertEquals(\"3/5\", str);\n+        assertSame(str, f.toProperString());\n         \n         f = Fraction.getFraction(7, 5);\n         assertEquals(\"1 2/5\", f.toProperString());        \n--- a/src/test/org/apache/commons/lang/math/IntRangeTest.java\n+++ b/src/test/org/apache/commons/lang/math/IntRangeTest.java\n  * Test cases for the {@link IntRange} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: IntRangeTest.java,v 1.3 2003/08/04 01:14:02 scolebourne Exp $\n+ * @version $Id: IntRangeTest.java,v 1.4 2003/08/04 02:01:53 scolebourne Exp $\n  */\n public final class IntRangeTest extends AbstractRangeTest {\n \n         assertSame(five, nr.getMinimumNumber());\n         assertEquals(ten, nr.getMaximumNumber());\n         \n+        // test non Integer, for full coverage\n+        Long fiveL = new Long(5L);\n+        Long tenL = new Long(10L);\n+        assertEquals(five, nr.getMinimumNumber());\n+        assertEquals(ten, nr.getMaximumNumber());\n+        \n         // not null\n         try {\n             new IntRange(five, null);\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n  */\n package org.apache.commons.lang.math;\n \n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n- * @version $Id: NumberUtilsTest.java,v 1.5 2003/07/26 19:12:30 ggregory Exp $\n+ * @version $Id: NumberUtilsTest.java,v 1.6 2003/08/04 02:01:53 scolebourne Exp $\n  */\n public class NumberUtilsTest extends TestCase {\n \n         return suite;\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new NumberUtils());\n+        Constructor[] cons = NumberUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(NumberUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(NumberUtils.class.getModifiers()));\n+    }\n+    \n     //---------------------------------------------------------------------\n \n     /**\n             6,\n             NumberUtils.min(new long[] { 6, 9 }));\n \n-        assertEquals(\n-            \"min(long[]) failed for array length 5\",\n-            -10,\n-            NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new long[] { -5, 0, -10, 5, 10 }));\n     }\n \n     public void testMinInt() {\n             6,\n             NumberUtils.min(new int[] { 6, 9 }));\n \n-        assertEquals(\n-            \"min(int[]) failed for array length 5\",\n-            -10,\n-            NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 }));\n     }\n \n     public void testMinShort() {\n             6,\n             NumberUtils.min(new short[] { 6, 9 }));\n \n-        assertEquals(\n-            \"min(short[]) failed for array length 5\",\n-            -10,\n-            NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 }));\n     }\n \n     public void testMinDouble() {\n             -10.45,\n             NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),\n             0);\n+        assertEquals(-10, NumberUtils.min(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n+        assertEquals(-10, NumberUtils.min(new double[] { -5, 0, -10, 5, 10 }), 0.0001);\n     }\n \n     public void testMinFloat() {\n             -10.6f,\n             NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),\n             0);\n+        assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n+        assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f);\n     }\n \n     public void testMaxLong() {\n             \"max(long[]) failed for array length 5\",\n             10,\n             NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 }));\n     }\n \n     public void testMaxInt() {\n             \"max(int[]) failed for array length 5\",\n             10,\n             NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 }));\n     }\n \n     public void testMaxShort() {\n             \"max(short[]) failed for array length 5\",\n             10,\n             NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n+        assertEquals(10, NumberUtils.max(new short[] { -5, 0, 10, 5, -10 }));\n     }\n \n     public void testMaxDouble() {\n             10.4f,\n             NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n             0);\n+        assertEquals(10, NumberUtils.max(new double[] { -10, -5, 0, 5, 10 }), 0.0001);\n+        assertEquals(10, NumberUtils.max(new double[] { -5, 0, 10, 5, -10 }), 0.0001);\n     }\n  \n     public void testMaxFloat() {\n             10.4f,\n             NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n             0);\n+        assertEquals(10, NumberUtils.max(new float[] { -10, -5, 0, 5, 10 }), 0.0001f);\n+        assertEquals(10, NumberUtils.max(new float[] { -5, 0, 10, 5, -10 }), 0.0001f);\n     }\n \n     public void testMinimumLong() {\n         short low = 1234;\n         short mid = 1234 + 1;\n         short high = 1234 + 2;\n-        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(low, mid, high));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(mid, low, high));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(mid, high, low));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(low, mid, low));\n+        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, high));\n+        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, low, high));\n+        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(mid, high, low));\n+        assertEquals(\"minimum(short,short,short) 1 failed\", low, NumberUtils.min(low, mid, low));\n     }\n \n     public void testMinimumByte() {\n         byte low = 123;\n         byte mid = 123 + 1;\n         byte high = 123 + 2;\n-        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(low, mid, high));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(mid, low, high));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(mid, high, low));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", low, NumberUtils.min(low, mid, low));\n+        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, high));\n+        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, low, high));\n+        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(mid, high, low));\n+        assertEquals(\"minimum(byte,byte,byte) 1 failed\", low, NumberUtils.min(low, mid, low));\n+    }\n+\n+    public void testMinimumDouble() {\n+        double low = 12.3;\n+        double mid = 12.3 + 1;\n+        double high = 12.3 + 2;\n+        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001);\n+        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001);\n+        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001);\n+        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001);\n+        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001);\n+    }\n+\n+    public void testMinimumFloat() {\n+        float low = 12.3f;\n+        float mid = 12.3f + 1;\n+        float high = 12.3f + 2;\n+        assertEquals(low, NumberUtils.min(low, mid, high), 0.0001f);\n+        assertEquals(low, NumberUtils.min(mid, low, high), 0.0001f);\n+        assertEquals(low, NumberUtils.min(mid, high, low), 0.0001f);\n+        assertEquals(low, NumberUtils.min(low, mid, low), 0.0001f);\n+        assertEquals(mid, NumberUtils.min(high, mid, high), 0.0001f);\n     }\n \n     public void testMaximumLong() {\n         short low = 1234;\n         short mid = 1234 + 1;\n         short high = 1234 + 2;\n-        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(low, mid, high));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(mid, low, high));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(mid, high, low));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(high, mid, high));\n+        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(low, mid, high));\n+        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, low, high));\n+        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(mid, high, low));\n+        assertEquals(\"maximum(short,short,short) 1 failed\", high, NumberUtils.max(high, mid, high));\n     }\n \n     public void testMaximumByte() {\n         byte low = 123;\n         byte mid = 123 + 1;\n         byte high = 123 + 2;\n-        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(low, mid, high));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(mid, low, high));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(mid, high, low));\n-        assertEquals(\"minimum(int,int,int) 1 failed\", high, NumberUtils.max(high, mid, high));\n+        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(low, mid, high));\n+        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, low, high));\n+        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(mid, high, low));\n+        assertEquals(\"maximum(byte,byte,byte) 1 failed\", high, NumberUtils.max(high, mid, high));\n+    }\n+\n+    public void testMaximumDouble() {\n+        double low = 12.3;\n+        double mid = 12.3 + 1;\n+        double high = 12.3 + 2;\n+        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001);\n+        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001);\n+        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001);\n+        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001);\n+        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001);\n+    }\n+\n+    public void testMaximumFloat() {\n+        float low = 12.3f;\n+        float mid = 12.3f + 1;\n+        float high = 12.3f + 2;\n+        assertEquals(high, NumberUtils.max(low, mid, high), 0.0001f);\n+        assertEquals(high, NumberUtils.max(mid, low, high), 0.0001f);\n+        assertEquals(high, NumberUtils.max(mid, high, low), 0.0001f);\n+        assertEquals(mid, NumberUtils.max(low, mid, low), 0.0001f);\n+        assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\n     }\n \n     public void testCompareDouble() {", "timestamp": 1059962513, "metainfo": ""}