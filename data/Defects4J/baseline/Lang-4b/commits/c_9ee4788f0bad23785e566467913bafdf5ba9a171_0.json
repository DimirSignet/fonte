{"sha": "9ee4788f0bad23785e566467913bafdf5ba9a171", "log": "Avoid unnecessary conversions. Use StringBuilder instead of StringBuffer.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Conversion.java\n+++ b/src/main/java/org/apache/commons/lang3/Conversion.java\n         case 0xF:\n             return 'F';\n         default:\n-            throw new java.lang.IllegalArgumentException(\"nibble value not between 0 and 15: \"\n+            throw new IllegalArgumentException(\"nibble value not between 0 and 15: \"\n                 + nibble);\n         }\n     }\n         case 0xF:\n             return 'F';\n         default:\n-            throw new java.lang.IllegalArgumentException(\"nibble value not between 0 and 15: \"\n+            throw new IllegalArgumentException(\"nibble value not between 0 and 15: \"\n                 + nibble);\n         }\n     }\n         int shift = 0;\n         for (int i = 0; i < nShorts; i++ ) {\n             shift = i * 16 + dstPos;\n-            long bits = ((0xffffL & src[i + srcPos]) << shift);\n-            long mask = (0xffffL << shift);\n-            out = ((out & ~mask) | bits);\n+            long bits = (0xffffL & src[i + srcPos]) << shift;\n+            long mask = 0xffffL << shift;\n+            out = (out & ~mask) | bits;\n         }\n         if (shift >= 64)\n             throw new IllegalArgumentException(\n         int shift = 0;\n         for (int i = 0; i < nShorts; i++ ) {\n             shift = i * 16 + dstPos;\n-            int bits = ((0xffff & src[i + srcPos]) << shift);\n-            int mask = (0xffff << shift);\n-            out = ((out & ~mask) | bits);\n+            int bits = (0xffff & src[i + srcPos]) << shift;\n+            int mask = 0xffff << shift;\n+            out = (out & ~mask) | bits;\n         }\n         if (shift >= 32)\n             throw new IllegalArgumentException(\n         int shift = 0;\n         for (int i = 0; i < nBytes; i++ ) {\n             shift = i * 8 + dstPos;\n-            long bits = ((0xffL & src[i + srcPos]) << shift);\n-            long mask = (0xffL << shift);\n-            out = ((out & ~mask) | bits);\n+            long bits = (0xffL & src[i + srcPos]) << shift;\n+            long mask = 0xffL << shift;\n+            out = (out & ~mask) | bits;\n         }\n         if (shift >= 64)\n             throw new IllegalArgumentException(\n         int shift = 0;\n         for (int i = 0; i < nBytes; i++ ) {\n             shift = i * 8 + dstPos;\n-            int bits = ((0xff & src[i + srcPos]) << shift);\n-            int mask = (0xff << shift);\n-            out = ((out & ~mask) | bits);\n+            int bits = (0xff & src[i + srcPos]) << shift;\n+            int mask = 0xff << shift;\n+            out = (out & ~mask) | bits;\n         }\n         if (shift >= 32)\n             throw new IllegalArgumentException(\n         int shift = 0;\n         for (int i = 0; i < nBytes; i++ ) {\n             shift = i * 8 + dstPos;\n-            short bits = (short)(((short)(0xff & src[i + srcPos])) << shift);\n-            short mask = (short)(((short)0xff) << shift);\n+            int bits = (0xff & src[i + srcPos]) << shift;\n+            int mask = 0xff << shift;\n             out = (short)((out & ~mask) | bits);\n         }\n         if (shift >= 16)\n         int shift = 0;\n         for (int i = 0; i < nHexs; i++ ) {\n             shift = i * 4 + dstPos;\n-            long bits = ((0xfL & hexDigitToInt(src.charAt(i + srcPos))) << shift);\n-            long mask = (0xfL << shift);\n-            out = ((out & ~mask) | bits);\n+            long bits = (0xfL & hexDigitToInt(src.charAt(i + srcPos))) << shift;\n+            long mask = 0xfL << shift;\n+            out = (out & ~mask) | bits;\n         }\n         if (shift >= 64)\n             throw new IllegalArgumentException(\n         int shift = 0;\n         for (int i = 0; i < nHexs; i++ ) {\n             shift = i * 4 + dstPos;\n-            int bits = ((0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift);\n-            int mask = (0xf << shift);\n-            out = ((out & ~mask) | bits);\n+            int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;\n+            int mask = 0xf << shift;\n+            out = (out & ~mask) | bits;\n         }\n         if (shift >= 32)\n             throw new IllegalArgumentException(\n         int shift = 0;\n         for (int i = 0; i < nHexs; i++ ) {\n             shift = i * 4 + dstPos;\n-            short bits = (short)(((short)(0xf & hexDigitToInt(src.charAt(i + srcPos)))) << shift);\n-            short mask = (short)(((short)0xf) << shift);\n+            int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;\n+            int mask = 0xf << shift;\n             out = (short)((out & ~mask) | bits);\n         }\n         if (shift >= 16)\n         int shift = 0;\n         for (int i = 0; i < nHexs; i++ ) {\n             shift = i * 4 + dstPos;\n-            byte bits = (byte)(((byte)(0xf & hexDigitToInt(src.charAt(i + srcPos)))) << shift);\n-            byte mask = (byte)(((byte)0xf) << shift);\n+            int bits = (0xf & hexDigitToInt(src.charAt(i + srcPos))) << shift;\n+            int mask = 0xf << shift;\n             out = (byte)((out & ~mask) | bits);\n         }\n         if (shift >= 8)\n         int shift = 0;\n         for (int i = 0; i < nBools; i++ ) {\n             shift = i * 1 + dstPos;\n-            long bits = ((0x1L & ((src[i + srcPos]) ? 1 : 0)) << shift);\n-            long mask = (0x1L << shift);\n-            out = ((out & ~mask) | bits);\n+            long bits = (0x1L & ((src[i + srcPos]) ? 1 : 0)) << shift;\n+            long mask = 0x1L << shift;\n+            out = (out & ~mask) | bits;\n         }\n         if (shift >= 64)\n             throw new IllegalArgumentException(\n         int shift = 0;\n         for (int i = 0; i < nBools; i++ ) {\n             shift = i * 1 + dstPos;\n-            int bits = ((0x1 & ((src[i + srcPos]) ? 1 : 0)) << shift);\n-            int mask = (0x1 << shift);\n-            out = ((out & ~mask) | bits);\n+            int bits = (0x1 & ((src[i + srcPos]) ? 1 : 0)) << shift;\n+            int mask = 0x1 << shift;\n+            out = (out & ~mask) | bits;\n         }\n         if (shift >= 32)\n             throw new IllegalArgumentException(\n         int shift = 0;\n         for (int i = 0; i < nBools; i++ ) {\n             shift = i * 1 + dstPos;\n-            short bits = (short)(((short)(0x1 & ((src[i + srcPos]) ? 1 : 0))) << shift);\n-            short mask = (short)(((short)0x1) << shift);\n+            int bits = (0x1 & ((src[i + srcPos]) ? 1 : 0)) << shift;\n+            int mask = 0x1 << shift;\n             out = (short)((out & ~mask) | bits);\n         }\n         if (shift >= 16)\n         int shift = 0;\n         for (int i = 0; i < nBools; i++ ) {\n             shift = i * 1 + dstPos;\n-            byte bits = (byte)(((byte)(0x1 & ((src[i + srcPos]) ? 1 : 0))) << shift);\n-            byte mask = (byte)(((byte)0x1) << shift);\n+            int bits = (0x1 & ((src[i + srcPos]) ? 1 : 0)) << shift;\n+            int mask = 0x1 << shift;\n             out = (byte)((out & ~mask) | bits);\n         }\n         if (shift >= 8)\n         assert ((nInts - 1) * 32 < 64 - srcPos);\n         for (int i = 0; i < nInts; i++ ) {\n             shift = i * 32 + srcPos;\n-            Long bits = (long)(0xffffffff & (src >> shift));\n-            dst[dstPos + i] = bits.intValue();\n+            dst[dstPos + i] = (int)(0xffffffff & (src >> shift));\n         }\n         return dst;\n     }\n         assert ((nShorts - 1) * 16 < 64 - srcPos);\n         for (int i = 0; i < nShorts; i++ ) {\n             shift = i * 16 + srcPos;\n-            Long bits = (long)(0xffff & (src >> shift));\n-            dst[dstPos + i] = bits.shortValue();\n+            dst[dstPos + i] = (short)(0xffff & (src >> shift));\n         }\n         return dst;\n     }\n         assert ((nShorts - 1) * 16 < 32 - srcPos);\n         for (int i = 0; i < nShorts; i++ ) {\n             shift = i * 16 + srcPos;\n-            Integer bits = (int)(0xffff & (src >> shift));\n-            dst[dstPos + i] = bits.shortValue();\n+            dst[dstPos + i] = (short)(0xffff & (src >> shift));\n         }\n         return dst;\n     }\n         assert ((nBytes - 1) * 8 < 64 - srcPos);\n         for (int i = 0; i < nBytes; i++ ) {\n             shift = i * 8 + srcPos;\n-            Long bits = (long)(0xff & (src >> shift));\n-            dst[dstPos + i] = bits.byteValue();\n+            dst[dstPos + i] = (byte)(0xff & (src >> shift));\n         }\n         return dst;\n     }\n         assert ((nBytes - 1) * 8 < 32 - srcPos);\n         for (int i = 0; i < nBytes; i++ ) {\n             shift = i * 8 + srcPos;\n-            Integer bits = (int)(0xff & (src >> shift));\n-            dst[dstPos + i] = bits.byteValue();\n+            dst[dstPos + i] = (byte)(0xff & (src >> shift));\n         }\n         return dst;\n     }\n         assert ((nBytes - 1) * 8 < 16 - srcPos);\n         for (int i = 0; i < nBytes; i++ ) {\n             shift = i * 8 + srcPos;\n-            Short bits = (short)(0xff & (src >> shift));\n-            dst[dstPos + i] = bits.byteValue();\n+            dst[dstPos + i] = (byte)(0xff & (src >> shift));\n         }\n         return dst;\n     }\n      */\n     public static String longToHexs(long src, int srcPos, String dstInit, int dstPos, int nHexs) {\n         if (0 == nHexs) return dstInit;\n-        StringBuffer sb = new StringBuffer(dstInit);\n+        StringBuilder sb = new StringBuilder(dstInit);\n         int shift = 0;\n         assert ((nHexs - 1) * 4 < 64 - srcPos);\n         for (int i = 0; i < nHexs; i++ ) {\n      */\n     public static String intToHexs(int src, int srcPos, String dstInit, int dstPos, int nHexs) {\n         if (0 == nHexs) return dstInit;\n-        StringBuffer sb = new StringBuffer(dstInit);\n+        StringBuilder sb = new StringBuilder(dstInit);\n         int shift = 0;\n         assert ((nHexs - 1) * 4 < 32 - srcPos);\n         for (int i = 0; i < nHexs; i++ ) {\n     public static String shortToHexs(short src, int srcPos, String dstInit, int dstPos,\n         int nHexs) {\n         if (0 == nHexs) return dstInit;\n-        StringBuffer sb = new StringBuffer(dstInit);\n+        StringBuilder sb = new StringBuilder(dstInit);\n         int shift = 0;\n         assert ((nHexs - 1) * 4 < 16 - srcPos);\n         for (int i = 0; i < nHexs; i++ ) {\n      */\n     public static String byteToHexs(byte src, int srcPos, String dstInit, int dstPos, int nHexs) {\n         if (0 == nHexs) return dstInit;\n-        StringBuffer sb = new StringBuffer(dstInit);\n+        StringBuilder sb = new StringBuilder(dstInit);\n         int shift = 0;\n         assert ((nHexs - 1) * 4 < 8 - srcPos);\n         for (int i = 0; i < nHexs; i++ ) {\n         assert ((nBools - 1) * 1 < 64 - srcPos);\n         for (int i = 0; i < nBools; i++ ) {\n             shift = i * 1 + srcPos;\n-            Long bits = (long)(0x1 & (src >> shift));\n-            dst[dstPos + i] = (bits != 0);\n+            dst[dstPos + i] = ((0x1 & (src >> shift)) != 0);\n         }\n         return dst;\n     }\n         assert ((nBools - 1) * 1 < 32 - srcPos);\n         for (int i = 0; i < nBools; i++ ) {\n             shift = i * 1 + srcPos;\n-            Integer bits = (int)(0x1 & (src >> shift));\n-            dst[dstPos + i] = (bits != 0);\n+            dst[dstPos + i] = ((0x1 & (src >> shift)) != 0);\n         }\n         return dst;\n     }\n         assert ((nBools - 1) * 1 < 16 - srcPos);\n         for (int i = 0; i < nBools; i++ ) {\n             shift = i * 1 + srcPos;\n-            Short bits = (short)(0x1 & (src >> shift));\n-            dst[dstPos + i] = (bits != 0);\n+            dst[dstPos + i] = ((0x1 & (src >> shift)) != 0);\n         }\n         return dst;\n     }\n         assert ((nBools - 1) * 1 < 8 - srcPos);\n         for (int i = 0; i < nBools; i++ ) {\n             shift = i * 1 + srcPos;\n-            Byte bits = (byte)(0x1 & (src >> shift));\n-            dst[dstPos + i] = (bits != 0);\n+            dst[dstPos + i] = ((0x1 & (src >> shift)) != 0);\n         }\n         return dst;\n     }\n-\n }", "timestamp": 1348783855, "metainfo": ""}