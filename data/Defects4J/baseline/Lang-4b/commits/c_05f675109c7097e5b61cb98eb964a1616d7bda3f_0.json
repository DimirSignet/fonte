{"sha": "05f675109c7097e5b61cb98eb964a1616d7bda3f", "log": "Now we are using JUnit4, can use expected=throwable.class for simple failure checks Note: not suitable for cases where an earlier statement can generate the same exception.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.fail;\n \n import java.math.BigInteger;\n \n         assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0);\n     }\n \n-    @Test\n+    @Test(expected=NullPointerException.class)\n     public void testReflectionCompareEx1() {\n         TestObject o1 = new TestObject(4);\n-        try {\n-            CompareToBuilder.reflectionCompare(o1, null);\n-        } catch (NullPointerException ex) {\n-            return;\n-        }\n-        fail();\n-    }\n-\n-    @Test\n+        CompareToBuilder.reflectionCompare(o1, null);\n+    }\n+\n+    @Test(expected=ClassCastException.class)\n     public void testReflectionCompareEx2() {\n         TestObject o1 = new TestObject(4);\n         Object o2 = new Object();\n-        try {\n-            CompareToBuilder.reflectionCompare(o1, o2);\n-            fail();\n-        } catch (ClassCastException ex) {}\n+        CompareToBuilder.reflectionCompare(o1, o2);\n     }\n \n     @Test\n         assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0);\n     }\n \n-    @Test\n+    @Test(expected=ClassCastException.class)\n     public void testObjectEx2() {\n         TestObject o1 = new TestObject(4);\n         Object o2 = new Object();\n-        try {\n-            new CompareToBuilder().append(o1, o2);\n-            fail();\n-        } catch (ClassCastException ex) {}\n+        new CompareToBuilder().append(o1, o2);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n-import static org.junit.Assert.fail;\n-\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n     /**\n      * Tests ReflectionToStringBuilder setUpToClass().\n      */\n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void test_setUpToClass_invalid() {\n         Integer val = Integer.valueOf(5);\n         ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n         try {\n             test.setUpToClass(String.class);\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-            // expected\n         } finally {\n             test.toString();\n         }\n--- a/src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/CallableBackgroundInitializerTest.java\n package org.apache.commons.lang3.concurrent;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n \n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n      * Tries to create an instance without a Callable. This should cause an\n      * exception.\n      */\n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void testInitNullCallable() {\n-        try {\n-            new CallableBackgroundInitializer<Object>(null);\n-            fail(\"Could create instance without a Callable!\");\n-        } catch (IllegalArgumentException iex) {\n-            // ok\n-        }\n+        new CallableBackgroundInitializer<Object>(null);\n     }\n \n     /**\n      * Tries to pass a null Callable to the constructor that takes an executor.\n      * This should cause an exception.\n      */\n-    @Test\n+    @Test(expected=IllegalArgumentException.class)\n     public void testInitExecutorNullCallable() {\n         ExecutorService exec = Executors.newSingleThreadExecutor();\n-        try {\n-            new CallableBackgroundInitializer<Integer>(null, exec);\n-            fail(\"Could create instance without a Callable!\");\n-        } catch (IllegalArgumentException iex) {\n-            // ok\n-        }\n+        new CallableBackgroundInitializer<Integer>(null, exec);\n     }\n \n     /**", "timestamp": 1348014713, "metainfo": ""}