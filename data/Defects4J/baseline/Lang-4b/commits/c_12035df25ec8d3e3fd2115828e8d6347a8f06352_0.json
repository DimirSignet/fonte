{"sha": "12035df25ec8d3e3fd2115828e8d6347a8f06352", "log": "Added escape/unescapeJson methods per Maurizio Cucchiara's patch in LANG-797  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n             new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE()),\n             JavaUnicodeEscaper.outsideOf(32, 0x7f) \n         );\n-            \n+\n+    /**\n+     * Translator object for escaping Json.\n+     *\n+     * While {@link #escapeJson(String)} is the expected method of use, this\n+     * object allows the Json escaping functionality to be used\n+     * as the foundation for a custom translator.\n+     *\n+     * @since 3.2\n+     */\n+    public static final CharSequenceTranslator ESCAPE_JSON =\n+        new AggregateTranslator(\n+            new LookupTranslator(\n+                      new String[][] {\n+                            {\"\\\"\", \"\\\\\\\"\"},\n+                            {\"\\\\\", \"\\\\\\\\\"},\n+                            {\"/\", \"\\\\/\"}\n+                      }),\n+            new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE()),\n+            JavaUnicodeEscaper.outsideOf(32, 0x7f)\n+        );\n+\n     /**\n      * Translator object for escaping XML.\n      * \n     public static final CharSequenceTranslator UNESCAPE_ECMASCRIPT = UNESCAPE_JAVA;\n \n     /**\n+     * Translator object for unescaping escaped Json.\n+     *\n+     * While {@link #unescapeJson(String)} is the expected method of use, this\n+     * object allows the Json unescaping functionality to be used\n+     * as the foundation for a custom translator.\n+     *\n+     * @since 3.2\n+     */\n+    public static final CharSequenceTranslator UNESCAPE_JSON = UNESCAPE_JAVA;\n+\n+    /**\n      * Translator object for unescaping escaped HTML 3.0. \n      * \n      * While {@link #unescapeHtml3(String)} is the expected method of use, this \n     }\n \n     /**\n+     * <p>Escapes the characters in a {@code String} using Json String rules.</p>\n+     * <p>Escapes any values it finds into their Json String form.\n+     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n+     *\n+     * <p>So a tab becomes the characters {@code '\\\\'} and\n+     * {@code 't'}.</p>\n+     *\n+     * <p>The only difference between Java strings and Json strings\n+     * is that in Json, forward-slash (/) is escaped.</p>\n+     *\n+     * <p>See http://www.ietf.org/rfc/rfc4627.txt for further details. </p>\n+     *\n+     * <p>Example:\n+     * <pre>\n+     * input string: He didn't say, \"Stop!\"\n+     * output string: He didn't say, \\\"Stop!\\\"\n+     * </pre>\n+     * </p>\n+     *\n+     * @param input  String to escape values in, may be null\n+     * @return String with escaped values, {@code null} if null string input\n+     *\n+     * @since 3.2\n+     */\n+    public static final String escapeJson(final String input) {\n+        return ESCAPE_JSON.translate(input);\n+    }\n+\n+    /**\n      * <p>Unescapes any Java literals found in the {@code String}.\n      * For example, it will turn a sequence of {@code '\\'} and\n      * {@code 'n'} into a newline character, unless the {@code '\\'}\n      */\n     public static final String unescapeEcmaScript(final String input) {\n         return UNESCAPE_ECMASCRIPT.translate(input);\n+    }\n+\n+    /**\n+     * <p>Unescapes any Json literals found in the {@code String}.</p>\n+     *\n+     * <p>For example, it will turn a sequence of {@code '\\'} and {@code 'n'}\n+     * into a newline character, unless the {@code '\\'} is preceded by another\n+     * {@code '\\'}.</p>\n+     *\n+     * @see #unescapeJava(String)\n+     * @param input  the {@code String} to unescape, may be null\n+     * @return A new unescaped {@code String}, {@code null} if null string input\n+     *\n+     * @since 3.2\n+     */\n+    public static final String unescapeJson(final String input) {\n+        return UNESCAPE_JSON.translate(input);\n     }\n \n     // HTML and XML\n--- a/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringEscapeUtilsTest.java\n         final String escaped = StringEscapeUtils.escapeXml(input);\n         assertEquals(input, escaped);\n     }\n+\n+    @Test\n+    public void testEscapeJson() {\n+        assertEquals(null, StringEscapeUtils.escapeJson(null));\n+        try {\n+            StringEscapeUtils.ESCAPE_JSON.translate(null, null);\n+            fail();\n+        } catch (final IOException ex) {\n+            fail();\n+        } catch (final IllegalArgumentException ex) {\n+        }\n+        try {\n+            StringEscapeUtils.ESCAPE_JSON.translate(\"\", null);\n+            fail();\n+        } catch (final IOException ex) {\n+            fail();\n+        } catch (final IllegalArgumentException ex) {\n+        }\n+\n+        assertEquals(\"He didn't say, \\\\\\\"stop!\\\\\\\"\", StringEscapeUtils.escapeJson(\"He didn't say, \\\"stop!\\\"\"));\n+\n+        String expected = \"\\\\\\\"foo\\\\\\\" isn't \\\\\\\"bar\\\\\\\". specials: \\\\b\\\\r\\\\n\\\\f\\\\t\\\\\\\\\\\\/\";\n+        String input =\"\\\"foo\\\" isn't \\\"bar\\\". specials: \\b\\r\\n\\f\\t\\\\/\";\n+\n+        assertEquals(expected, StringEscapeUtils.escapeJson(input));\n+    }\n+\n }", "timestamp": 1365755942, "metainfo": ""}