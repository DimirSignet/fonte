{"sha": "f2d2e4a08fa148041ba7d2f922d0a157454aff04", "log": "Added isWhitespace, isTrue and uncapitaliseAllWords methods and tests.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:rand_mcneely@yahoo.com\">Rand McNeely</a>\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com\">Fredrik Westermarck</a>\n- * @version $Id: StringUtils.java,v 1.20 2002/10/27 19:42:04 bayard Exp $\n+ * @version $Id: StringUtils.java,v 1.21 2002/10/28 04:33:29 bayard Exp $\n  */\n public class StringUtils {\n \n         return buffer.toString();\n     }\n \n+    /**\n+     * Uncapitalise all the words in a string. Uses\n+     * Character.isWhitespace\n+     * as a separator between words. Null will return null.\n+     *\n+     * @param str  the string to uncapitalise\n+     * @return uncapitalised string\n+     */\n+    public static String uncapitaliseAllWords(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        int sz = str.length();\n+        StringBuffer buffer = new StringBuffer(sz);\n+        boolean space = true;\n+        for (int i = 0; i < sz; i++) {\n+            char ch = str.charAt(i);\n+            if (Character.isWhitespace(ch)) {\n+                buffer.append(ch);\n+                space = true;\n+            } else if (space) {\n+                buffer.append(Character.toLowerCase(ch));\n+                space = false;\n+            } else {\n+                buffer.append(ch);\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n     // Nested extraction\n     //--------------------------------------------------------------------------\n     \n     }\n \n     /**\n+     * Checks if the String contains only whitespace.\n+     * <code>null</code> will return <code>false</code>.  The empty String\n+     * will return <code>true</code>.\n+     * \n+     * @param str the String to check\n+     * @return true if only contains whitespace, and is non-null\n+     */\n+    public static boolean isWhitespace(String str) {\n+        if (str == null) {\n+            return false;\n+        }\n+        int sz = str.length();\n+        for (int i = 0; i < sz; i++) {\n+            if ((Character.isWhitespace(str.charAt(i)) == false) ) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    /**\n      * Checks if the String contains only unicode letters and space (' ').\n      * <code>null</code> will return <code>false</code>.  The empty String\n      * will return <code>true</code>.\n             }\n         }\n         return true;\n+    }\n+\n+    /**\n+     * Checks if the String contains a 'true' value. These are defined \n+     * as the words 'true', 'on' and 'yes'.\n+     *\n+     * @param str the String to check\n+     * @return true if the string is 'true|on|yes'\n+     */\n+    public static boolean isTrue(String str) {\n+        if(\"true\".equals(str)) {\n+            return true;\n+        } else\n+        if(\"on\".equals(str)) {\n+            return true;\n+        } else\n+        if(\"yes\".equals(str)) {\n+            return true;\n+        }\n+        return false;\n     }\n \n     // Defaults\n--- a/src/test/org/apache/commons/lang/StringUtilsIsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsIsTest.java\n  * Unit tests {@link org.apache.commons.lang.StringUtils} - Substring methods\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: StringUtilsIsTest.java,v 1.1 2002/07/19 03:35:55 bayard Exp $\n+ * @version $Id: StringUtilsIsTest.java,v 1.2 2002/10/28 04:33:29 bayard Exp $\n  */\n public class StringUtilsIsTest extends TestCase {\n \n         assertEquals(true, StringUtils.isAlphanumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n         assertEquals(false, StringUtils.isAlphanumeric(\"_\"));\n         assertEquals(false, StringUtils.isAlphanumeric(\"hkHKHik*khbkuh\"));\n+    }\n+\n+    public void testIsWhitespace() {\n+        assertEquals(false, StringUtils.isWhitespace(null));\n+        assertEquals(true, StringUtils.isWhitespace(\"\"));\n+        assertEquals(true, StringUtils.isWhitespace(\" \"));\n+        assertEquals(true, StringUtils.isWhitespace(\"\\t \\n \\t\"));\n+        assertEquals(false, StringUtils.isWhitespace(\"\\t aa\\n \\t\"));\n+        assertEquals(true, StringUtils.isWhitespace(\" \"));\n+        assertEquals(false, StringUtils.isWhitespace(\" a \"));\n+        assertEquals(false, StringUtils.isWhitespace(\"a  \"));\n+        assertEquals(false, StringUtils.isWhitespace(\"  a\"));\n+        assertEquals(false, StringUtils.isWhitespace(\"aba\"));\n+    }\n+\n+    public void testIsTrue() {\n+        assertEquals(false, StringUtils.isTrue(null));\n+        assertEquals(false, StringUtils.isTrue(\"\"));\n+        assertEquals(false, StringUtils.isTrue(\"off\"));\n+        assertEquals(false, StringUtils.isTrue(\"oof\"));\n+        assertEquals(true, StringUtils.isTrue(\"true\"));\n+        assertEquals(true, StringUtils.isTrue(\"yes\"));\n+        assertEquals(true, StringUtils.isTrue(\"on\"));\n     }\n \n     public void testIsAlphaspace() {\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n- * @version $Id: StringUtilsTest.java,v 1.5 2002/09/19 07:02:30 bayard Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.6 2002/10/28 04:33:29 bayard Exp $\n  */\n public class StringUtilsTest extends TestCase\n {\n                      FOO, StringUtils.uncapitalise(CAP_FOO) );\n         assertEquals(\"uncapitalise(empty-string) failed\",\n                      \"\", StringUtils.uncapitalise(\"\") );\n+        assertEquals(\"uncapitaliseAllWords(String) failed\",\n+                     SENTENCE, StringUtils.uncapitaliseAllWords(\"Foo Bar Baz\") );\n+        assertEquals(\"uncapitaliseAllWords(empty-string) failed\",\n+                     \"\", StringUtils.uncapitaliseAllWords(\"\") );\n \n         assertEquals(\"upperCase(String) failed\",\n                      \"FOO TEST THING\", StringUtils.upperCase(\"fOo test THING\") );", "timestamp": 1035779609, "metainfo": ""}