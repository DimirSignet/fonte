{"sha": "5d27970afea0583069368de30d09b511bfb28a3f", "log": "Statements unnecessarily nested within else clauses.   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n \n             }\n+        }\n+        //User doesn't have a preference on the return type, so let's start\n+        //small and go from there...\n+        if (expPos > -1 && expPos < str.length() - 1) {\n+            exp = str.substring(expPos + 1, str.length());\n         } else {\n-            //User doesn't have a preference on the return type, so let's start\n-            //small and go from there...\n-            if (expPos > -1 && expPos < str.length() - 1) {\n-                exp = str.substring(expPos + 1, str.length());\n-            } else {\n-                exp = null;\n-            }\n-            if (dec == null && exp == null) {\n-                //Must be an int,long,bigint\n-                try {\n-                    return createInteger(str);\n-                } catch (final NumberFormatException nfe) { // NOPMD\n-                    // ignore the bad number\n-                }\n-                try {\n-                    return createLong(str);\n-                } catch (final NumberFormatException nfe) { // NOPMD\n-                    // ignore the bad number\n-                }\n-                return createBigInteger(str);\n-\n-            } else {\n-                //Must be a float,double,BigDec\n-                final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n-                try {\n-                    final Float f = createFloat(str);\n-                    if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n-                        return f;\n-                    }\n-                } catch (final NumberFormatException nfe) { // NOPMD\n-                    // ignore the bad number\n-                }\n-                try {\n-                    final Double d = createDouble(str);\n-                    if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n-                        return d;\n-                    }\n-                } catch (final NumberFormatException nfe) { // NOPMD\n-                    // ignore the bad number\n-                }\n-\n-                return createBigDecimal(str);\n-\n-            }\n-        }\n+            exp = null;\n+        }\n+        if (dec == null && exp == null) {\n+            //Must be an int,long,bigint\n+            try {\n+                return createInteger(str);\n+            } catch (final NumberFormatException nfe) { // NOPMD\n+                // ignore the bad number\n+            }\n+            try {\n+                return createLong(str);\n+            } catch (final NumberFormatException nfe) { // NOPMD\n+                // ignore the bad number\n+            }\n+            return createBigInteger(str);\n+\n+        }\n+        //Must be a float,double,BigDec\n+        final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);\n+        try {\n+            final Float f = createFloat(str);\n+            if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {\n+                return f;\n+            }\n+        } catch (final NumberFormatException nfe) { // NOPMD\n+            // ignore the bad number\n+        }\n+        try {\n+            final Double d = createDouble(str);\n+            if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {\n+                return d;\n+            }\n+        } catch (final NumberFormatException nfe) { // NOPMD\n+            // ignore the bad number\n+        }\n+\n+        return createBigDecimal(str);\n     }\n \n     /**", "timestamp": 1364389465, "metainfo": ""}