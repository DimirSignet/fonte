{"sha": "257cfe0c3399f00d07931541a88a7082b2c2fe1e", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * <p>Operations on {@code Object}.</p>\n- * \n+ *\n  * <p>This class tries to handle {@code null} input gracefully.\n  * An exception will generally not be thrown for a {@code null} input.\n  * Each method documents its behaviour in more detail.</p>\n      * <p>This instance is Serializable.</p>\n      */\n     public static final Null NULL = new Null();\n-    \n+\n     /**\n      * <p>{@code ObjectUtils} instances should NOT be constructed in\n      * standard programming. Instead, the static methods on the class should\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Returns a default value if the object passed is {@code null}.</p>\n-     * \n+     *\n      * <pre>\n      * ObjectUtils.defaultIfNull(null, null)      = null\n      * ObjectUtils.defaultIfNull(null, \"\")        = \"\"\n      * ObjectUtils.defaultIfNull(Boolean.TRUE, *) = Boolean.TRUE\n      * </pre>\n      *\n+     * @param <T> the type of the object\n      * @param object  the {@code Object} to test, may be {@code null}\n      * @param defaultValue  the default value to return, may be {@code null}\n      * @return {@code object} if it is not {@code null}, defaultValue otherwise\n      * <p>Returns the first value in the array which is not {@code null}.\n      * If all the values are {@code null} or the array is {@code null}\n      * or empty then {@code null} is returned.</p>\n-     * \n+     *\n      * <pre>\n      * ObjectUtils.firstNonNull(null, null)      = null\n      * ObjectUtils.firstNonNull(null, \"\")        = \"\"\n      * ObjectUtils.firstNonNull()                = null\n      * </pre>\n      *\n+     * @param <T> the component type of the array\n      * @param values  the values to test, may be {@code null} or empty\n      * @return the first value from {@code values} which is not {@code null},\n      *  or {@code null} if there are no non-null values\n     /**\n      * <p>Gets the {@code toString} of an {@code Object} returning\n      * an empty string (\"\") if {@code null} input.</p>\n-     * \n+     *\n      * <pre>\n      * ObjectUtils.toString(null)         = \"\"\n      * ObjectUtils.toString(\"\")           = \"\"\n      * ObjectUtils.toString(\"bat\")        = \"bat\"\n      * ObjectUtils.toString(Boolean.TRUE) = \"true\"\n      * </pre>\n-     * \n+     *\n      * @see StringUtils#defaultString(String)\n      * @see String#valueOf(Object)\n      * @param obj  the Object to {@code toString}, may be null\n     /**\n      * <p>Gets the {@code toString} of an {@code Object} returning\n      * a specified text if {@code null} input.</p>\n-     * \n+     *\n      * <pre>\n      * ObjectUtils.toString(null, null)           = null\n      * ObjectUtils.toString(null, \"null\")         = \"null\"\n      * ObjectUtils.toString(\"bat\", \"null\")        = \"bat\"\n      * ObjectUtils.toString(Boolean.TRUE, \"null\") = \"true\"\n      * </pre>\n-     * \n+     *\n      * @see StringUtils#defaultString(String,String)\n      * @see String#valueOf(Object)\n      * @param obj  the Object to {@code toString}, may be null\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Null safe comparison of Comparables.</p>\n-     * \n+     *\n+     * @param <T> type of the values processed by this method\n      * @param values the set of comparable values, may be null\n      * @return\n      *  <ul>\n \n     /**\n      * <p>Null safe comparison of Comparables.</p>\n-     * \n+     *\n+     * @param <T> type of the values processed by this method\n      * @param values the set of comparable values, may be null\n      * @return\n      *  <ul>\n     /**\n      * <p>Null safe comparison of Comparables.\n      * {@code null} is assumed to be less than a non-{@code null} value.</p>\n-     * \n+     *\n+     * @param <T> type of the values processed by this method\n      * @param c1  the first comparable, may be null\n      * @param c2  the second comparable, may be null\n      * @return a negative value if c1 < c2, zero if c1 = c2\n \n     /**\n      * <p>Null safe comparison of Comparables.</p>\n-     * \n+     *\n+     * @param <T> type of the values processed by this method\n      * @param c1  the first comparable, may be null\n      * @param c2  the second comparable, may be null\n      * @param nullGreater if true {@code null} is considered greater\n         }\n         return c1.compareTo(c2);\n     }\n-    \n+\n     /**\n      * <p>Clone an object.</p>\n-     * \n+     *\n      * @param <T> the type of the object\n      * @param obj  the object to clone, null returns null\n      * @return the clone if the object implements {@link Cloneable} otherwise {@code null}\n \n     /**\n      * <p>Clone an object if possible.</p>\n-     * \n+     *\n      * <p>This method is similar to {@link #clone(Object)}, but will return the provided\n      * instance as the return value instead of {@code null} if the instance\n      * is not cloneable. This is more convenient if the caller uses different\n      * implementations (e.g. of a service) and some of the implementations do not allow concurrent\n      * processing or have state. In such cases the implementation can simply provide a proper\n      * clone implementation and the caller's code does not have to change.</p>\n-     * \n+     *\n      * @param <T> the type of the object\n      * @param obj  the object to clone, null returns null\n      * @return the clone if the object implements {@link Cloneable} otherwise the object itself\n     public static class Null implements Serializable {\n         /**\n          * Required for serialization support. Declare serialization compatibility with Commons Lang 1.0\n-         * \n+         *\n          * @see java.io.Serializable\n          */\n         private static final long serialVersionUID = 7092611880189329093L;\n-        \n+\n         /**\n          * Restricted constructor - singleton.\n          */\n         Null() {\n             super();\n         }\n-        \n+\n         /**\n          * <p>Ensure singleton.</p>\n-         * \n+         *\n          * @return the singleton value\n          */\n         private Object readResolve() {", "timestamp": 1300550466, "metainfo": ""}