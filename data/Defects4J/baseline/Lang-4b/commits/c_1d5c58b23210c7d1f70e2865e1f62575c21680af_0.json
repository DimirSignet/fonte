{"sha": "1d5c58b23210c7d1f70e2865e1f62575c21680af", "log": "Vararging constructor methods; much like the method ones were in MethodUtils. LANG-396  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/ConstructorUtils.java\n     }\n \n     /**\n-     * <p>Convenience method returning new instance of <code>klazz</code> using a single argument constructor.\n-     * The formal parameter type is inferred from the actual values of <code>arg</code>.\n+     * <p>Returns new instance of <code>klazz</code> created using the actual arguments <code>args</code>.\n+     * The formal parameter types are inferred from the actual values of <code>args</code>.\n      * See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>\n      *\n      * <p>The signatures should be assignment compatible.</p>\n      *\n      * @param cls the class to be constructed.\n-     * @param arg the actual argument\n+     * @param args actual argument array\n      * @return new instance of <code>klazz</code>\n      *\n      * @throws NoSuchMethodException If the constructor cannot be found\n      *\n      * @see #invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n      */\n-    public static <T> T invokeConstructor(Class<T> cls, Object arg)\n-            throws NoSuchMethodException, IllegalAccessException,\n-            InvocationTargetException, InstantiationException {\n-        return invokeConstructor(cls, new Object[] { arg });\n-    }\n-\n-    /**\n-     * <p>Returns new instance of <code>klazz</code> created using the actual arguments <code>args</code>.\n-     * The formal parameter types are inferred from the actual values of <code>args</code>.\n-     * See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>\n-     *\n-     * <p>The signatures should be assignment compatible.</p>\n-     *\n-     * @param cls the class to be constructed.\n-     * @param args actual argument array\n-     * @return new instance of <code>klazz</code>\n-     *\n-     * @throws NoSuchMethodException If the constructor cannot be found\n-     * @throws IllegalAccessException If an error occurs accessing the constructor\n-     * @throws InvocationTargetException If an error occurs invoking the constructor\n-     * @throws InstantiationException If an error occurs instantiating the class\n-     *\n-     * @see #invokeConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n-     */\n-    public static <T> T invokeConstructor(Class<T> cls, Object[] args)\n+    public static <T> T invokeConstructor(Class<T> cls, Object... args)\n             throws NoSuchMethodException, IllegalAccessException,\n             InvocationTargetException, InstantiationException {\n         if (null == args) {\n     }\n \n     /**\n-     * <p>Convenience method returning new instance of <code>klazz</code> using a single argument constructor.\n-     * The formal parameter type is inferred from the actual values of <code>arg</code>.\n+     * <p>Returns new instance of <code>klazz</code> created using the actual arguments <code>args</code>.\n+     * The formal parameter types are inferred from the actual values of <code>args</code>.\n      * See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>\n      *\n      * <p>The signatures should match exactly.</p>\n      *\n      * @param cls the class to be constructed.\n-     * @param arg the actual argument\n+     * @param args actual argument array\n      * @return new instance of <code>klazz</code>\n      *\n      * @throws NoSuchMethodException If the constructor cannot be found\n      *\n      * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n      */\n-    public static <T> T invokeExactConstructor(Class<T> cls, Object arg)\n-            throws NoSuchMethodException, IllegalAccessException,\n-            InvocationTargetException, InstantiationException {\n-        return invokeExactConstructor(cls, new Object[] { arg });\n-    }\n-\n-    /**\n-     * <p>Returns new instance of <code>klazz</code> created using the actual arguments <code>args</code>.\n-     * The formal parameter types are inferred from the actual values of <code>args</code>.\n-     * See {@link #invokeExactConstructor(Class, Object[], Class[])} for more details.</p>\n-     *\n-     * <p>The signatures should match exactly.</p>\n-     *\n-     * @param cls the class to be constructed.\n-     * @param args actual argument array\n-     * @return new instance of <code>klazz</code>\n-     *\n-     * @throws NoSuchMethodException If the constructor cannot be found\n-     * @throws IllegalAccessException If an error occurs accessing the constructor\n-     * @throws InvocationTargetException If an error occurs invoking the constructor\n-     * @throws InstantiationException If an error occurs instantiating the class\n-     *\n-     * @see #invokeExactConstructor(java.lang.Class, java.lang.Object[], java.lang.Class[])\n-     */\n-    public static <T> T invokeExactConstructor(Class<T> cls, Object[] args)\n+    public static <T> T invokeExactConstructor(Class<T> cls, Object... args)\n             throws NoSuchMethodException, IllegalAccessException,\n             InvocationTargetException, InstantiationException {\n         if (null == args) {\n                             + cls.getName());\n         }\n         return ctor.newInstance(args);\n-    }\n-\n-    /**\n-     * Returns a constructor with single argument.\n-     * @param cls the class to be constructed\n-     * @param parameterType The constructor parameter type\n-     * @return null if matching accessible constructor can not be found.\n-     * @see Class#getConstructor\n-     * @see #getAccessibleConstructor(java.lang.reflect.Constructor)\n-     */\n-    public static <T> Constructor<T> getAccessibleConstructor(Class<T> cls,\n-            Class<?> parameterType) {\n-        return getAccessibleConstructor(cls, new Class[] { parameterType });\n     }\n \n     /**\n      * @see #getAccessibleConstructor(java.lang.reflect.Constructor)\n      */\n     public static <T> Constructor<T> getAccessibleConstructor(Class<T> cls,\n-            Class<?>[] parameterTypes) {\n+            Class<?>... parameterTypes) {\n         try {\n             return getAccessibleConstructor(cls.getConstructor(parameterTypes));\n         } catch (NoSuchMethodException e) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Constructor<T> getMatchingAccessibleConstructor(Class<T> cls,\n-            Class<?>[] parameterTypes) {\n+            Class<?>... parameterTypes) {\n         // see if we can find the constructor directly\n         // most of the time this works and it's much faster\n         try {", "timestamp": 1269238948, "metainfo": ""}