{"sha": "0eb4d5af811a581aba26eab11a350cbf5c82fc74", "log": "Use JUnit4 methods where possible  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ConversionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ConversionTest.java\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n-import junit.framework.TestCase;\n+\n import java.lang.Throwable;\n import java.lang.reflect.Method;\n \n+import org.junit.Assert;\n import org.junit.Test;\n \n \n  */\n \n public class ConversionTest {\n+\n+    private static void assertArrayEquals(boolean[] expected, boolean[] actual) {\n+        assertEquals(expected.length, actual.length);\n+        for (int i = 0; i < expected.length; i++ ) {\n+            try {\n+                assertEquals(expected[i], actual[i]);\n+            } catch (Throwable e) {\n+                String msg = \"Mismatch at index \"\n+                    + i\n+                    + \" between:\\n\"\n+                    + dbgPrint(expected)\n+                    + \" and\\n\"\n+                    + dbgPrint(actual);\n+                fail(msg + \"\\n\" + e.getMessage());\n+            }\n+        }\n+    }\n \n     /**\n      * convert an hexadecimal digit into an int using the default (Lsb0) bit ordering.\n             new boolean[]{true, true, true, true}, Conversion.hexDigitToBools('F'));\n         assertArrayEquals(\n             new boolean[]{true, true, true, true}, Conversion.hexDigitToBools('f'));\n-    }\n-\n-    /**\n-     * Convert an hexadecimal digit into binary using the Msb0 bit ordering.\n-     * <p>\n-     * '1' is converted as follow: (0, 0, 0, 1)\n-     * \n-     * @param hexDigit the hexadecimal digit to convert\n-     * @return a boolean array with the binary representation of <code>hexDigit</code>\n-     */\n-    public static boolean[] hexDigitM0ToBools(char hexDigit) {\n-        switch (hexDigit) {\n-        case '0':\n-            return new boolean[]{false, false, false, false};\n-        case '1':\n-            return new boolean[]{false, false, false, true};\n-        case '2':\n-            return new boolean[]{false, false, true, false};\n-        case '3':\n-            return new boolean[]{false, false, true, true};\n-        case '4':\n-            return new boolean[]{false, true, false, false};\n-        case '5':\n-            return new boolean[]{false, true, false, true};\n-        case '6':\n-            return new boolean[]{false, true, true, false};\n-        case '7':\n-            return new boolean[]{false, true, true, true};\n-        case '8':\n-            return new boolean[]{true, false, false, false};\n-        case '9':\n-            return new boolean[]{true, false, false, true};\n-        case 'a':// fall through\n-        case 'A':\n-            return new boolean[]{true, false, true, false};\n-        case 'b':// fall through\n-        case 'B':\n-            return new boolean[]{true, false, true, true};\n-        case 'c':// fall through\n-        case 'C':\n-            return new boolean[]{true, true, false, false};\n-        case 'd':// fall through\n-        case 'D':\n-            return new boolean[]{true, true, false, true};\n-        case 'e':// fall through\n-        case 'E':\n-            return new boolean[]{true, true, true, false};\n-        case 'f':// fall through\n-        case 'F':\n-            return new boolean[]{true, true, true, true};\n-        default:\n-            throw new IllegalArgumentException(\"Cannot interpret '\"\n-                + hexDigit\n-                + \"' as an hexadecimal digit\");\n-        }\n     }\n \n     @Test\n         assertEquals('F', Conversion.intToHexDigitM0(15));\n     }\n \n-    static String dbgPrint(long[] src) {\n-        StringBuilder sb = new StringBuilder();\n-        for (long e : src) {\n-            sb.append(\"0x\").append(Long.toHexString(e)).append(',');\n-        }\n-        String out = sb.toString();\n-        return out.substring(0, out.length() - 1);\n-    }\n-\n-    static void assertArrayEquals(long[] expected, long[] actual) {\n-        assertEquals(expected.length, actual.length);\n-        for (int i = 0; i < expected.length; i++ ) {\n-            try {\n-                assertEquals(expected[i], actual[i]);\n-            } catch (Throwable e) {\n-                String msg = \"Mismatch at index \"\n-                    + i\n-                    + \" between:\\n\"\n-                    + dbgPrint(expected)\n-                    + \" and\\n\"\n-                    + dbgPrint(actual);\n-                TestCase.fail(msg + \"\\n\" + e.getMessage());\n-            }\n-        }\n-    }\n-\n-    static String dbgPrint(int[] src) {\n-        StringBuilder sb = new StringBuilder();\n-        for (int e : src) {\n-            sb.append(\"0x\").append(Long.toHexString(e)).append(',');\n-        }\n-        String out = sb.toString();\n-        return out.substring(0, out.length() - 1);\n-    }\n-\n-    static void assertArrayEquals(int[] expected, int[] actual) {\n-        assertEquals(expected.length, actual.length);\n-        for (int i = 0; i < expected.length; i++ ) {\n-            try {\n-                assertEquals(expected[i], actual[i]);\n-            } catch (Throwable e) {\n-                String msg = \"Mismatch at index \"\n-                    + i\n-                    + \" between:\\n\"\n-                    + dbgPrint(expected)\n-                    + \" and\\n\"\n-                    + dbgPrint(actual);\n-                TestCase.fail(msg + \"\\n\" + e.getMessage());\n-            }\n-        }\n-    }\n-\n-    static String dbgPrint(short[] src) {\n-        StringBuilder sb = new StringBuilder();\n-        for (short e : src) {\n-            sb.append(\"0x\").append(Long.toHexString(e)).append(',');\n-        }\n-        String out = sb.toString();\n-        return out.substring(0, out.length() - 1);\n-    }\n-\n-    static void assertArrayEquals(short[] expected, short[] actual) {\n-        assertEquals(expected.length, actual.length);\n-        for (int i = 0; i < expected.length; i++ ) {\n-            try {\n-                assertEquals(expected[i], actual[i]);\n-            } catch (Throwable e) {\n-                String msg = \"Mismatch at index \"\n-                    + i\n-                    + \" between:\\n\"\n-                    + dbgPrint(expected)\n-                    + \" and\\n\"\n-                    + dbgPrint(actual);\n-                TestCase.fail(msg + \"\\n\" + e.getMessage());\n-            }\n-        }\n-    }\n-\n-    static String dbgPrint(byte[] src) {\n-        StringBuilder sb = new StringBuilder();\n-        for (byte e : src) {\n-            sb.append(\"0x\").append(Long.toHexString(e)).append(',');\n-        }\n-        String out = sb.toString();\n-        return out.substring(0, out.length() - 1);\n-    }\n-\n-    static void assertArrayEquals(byte[] expected, byte[] actual) {\n-        assertEquals(expected.length, actual.length);\n-        for (int i = 0; i < expected.length; i++ ) {\n-            try {\n-                assertEquals(expected[i], actual[i]);\n-            } catch (Throwable e) {\n-                String msg = \"Mismatch at index \"\n-                    + i\n-                    + \" between:\\n\"\n-                    + dbgPrint(expected)\n-                    + \" and\\n\"\n-                    + dbgPrint(actual);\n-                TestCase.fail(msg + \"\\n\" + e.getMessage());\n-            }\n-        }\n-    }\n-\n-    static String dbgPrint(boolean[] src) {\n+    private static String dbgPrint(boolean[] src) {\n         StringBuilder sb = new StringBuilder();\n         for (boolean e : src) {\n             if (e) sb.append(\"1,\");\n         }\n         String out = sb.toString();\n         return out.substring(0, out.length() - 1);\n-    }\n-\n-    static void assertArrayEquals(boolean[] expected, boolean[] actual) {\n-        assertEquals(expected.length, actual.length);\n-        for (int i = 0; i < expected.length; i++ ) {\n-            try {\n-                assertEquals(expected[i], actual[i]);\n-            } catch (Throwable e) {\n-                String msg = \"Mismatch at index \"\n-                    + i\n-                    + \" between:\\n\"\n-                    + dbgPrint(expected)\n-                    + \" and\\n\"\n-                    + dbgPrint(actual);\n-                TestCase.fail(msg + \"\\n\" + e.getMessage());\n-            }\n-        }\n     }\n \n     @Test\n \n     @Test\n     public void testLongToInts() throws Exception {\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{}, Conversion.longToInts(0x0000000000000000L, 0, new int[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{}, Conversion.longToInts(0x0000000000000000L, 100, new int[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{}, Conversion.longToInts(0x0000000000000000L, 0, new int[]{}, 100, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 2));\n         // assertArrayEquals(new\n         // assertArrayEquals(new\n         // int[]{0xFFFFFFFF,0x90ABCDEF,0x12345678,0x90ABCDEF},Conversion.longToInts(0x1234567890ABCDEFL,\n         // 0,new int[]{-1,-1,-1,-1},1,3));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 3, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 1, new int[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 2, new int[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 3, new int[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF},\n             Conversion.longToInts(0x1234567890ABCDEFL, 4, new int[]{-1, -1, -1, -1}, 2, 1));\n-        // assertArrayEquals(new\n+        // Assert.assertArrayEquals(new\n         // int[]{0x4855E6F7,0x091A2B3C,0x4855E6F7,0x091A2B3C},Conversion.longToInts(0x1234567890ABCDEFL,\n         // 1,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new int[]{0x091A2B3C},\n             Conversion.longToInts(0x1234567890ABCDEFL, 33, new int[]{0}, 0, 1));\n     }\n \n     @Test\n     public void testLongToShorts() throws Exception {\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{}, Conversion.longToShorts(0x0000000000000000L, 0, new short[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{},\n             Conversion.longToShorts(0x0000000000000000L, 100, new short[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{},\n             Conversion.longToShorts(0x0000000000000000L, 0, new short[]{}, 100, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0x90AB, (short)0xFFFF, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 3));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0x1234},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 4));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xCDEF, (short)0x90AB, (short)0x5678},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 1, 3));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0x90AB},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xCDEF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 3, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xE6F7, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xF37B, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 2, new short[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x79BD, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 3, new short[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xBCDE, (short)0xFFFF},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 4, new short[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xE6F7, (short)0x4855, (short)0x2B3C, (short)0x091A},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 0, 4));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0x2B3C},\n             Conversion.longToShorts(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1));\n     }\n \n     @Test\n     public void testIntToShorts() throws Exception {\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{}, Conversion.intToShorts(0x00000000, 0, new short[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{}, Conversion.intToShorts(0x00000000, 100, new short[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{}, Conversion.intToShorts(0x00000000, 0, new short[]{}, 100, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0x5678, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0x5678, (short)0x1234, (short)0xFFFF, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 2));\n-        // assertArrayEquals(new\n+        // Assert.assertArrayEquals(new\n         // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0xFFFF},Conversion.intToShorts(0x12345678,\n         // 0,new short[]{-1,-1,-1,-1},0,3));//rejected by assertion\n-        // assertArrayEquals(new\n+        // Assert.assertArrayEquals(new\n         // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0x1234},Conversion.intToShorts(0x12345678,\n         // 0,new short[]{-1,-1,-1,-1},0,4));\n-        // assertArrayEquals(new\n+        // Assert.assertArrayEquals(new\n         // short[]{(short)0xFFFF,(short)0x5678,(short)0x1234,(short)0x5678},Conversion.intToShorts(0x12345678,\n         // 0,new short[]{-1,-1,-1,-1},1,3));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0x1234},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0x5678},\n             Conversion.intToShorts(0x12345678, 0, new short[]{-1, -1, -1, -1}, 3, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x2B3C, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 1, new short[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x159E, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 2, new short[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x8ACF, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 3, new short[]{-1, -1, -1, -1}, 2, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x4567, (short)0xFFFF},\n             Conversion.intToShorts(0x12345678, 4, new short[]{-1, -1, -1, -1}, 2, 1));\n-        // assertArrayEquals(new\n+        // Assert.assertArrayEquals(new\n         // short[]{(short)0xE6F7,(short)0x4855,(short)0x2B3C,(short)0x091A},Conversion.intToShorts(0x12345678,\n         // 1,new short[]{-1,-1,-1,-1},0,4));//rejected by assertion\n-        // assertArrayEquals(new short[]{(short)0x2B3C},Conversion.intToShorts(0x12345678,33,new\n+        // Assert.assertArrayEquals(new short[]{(short)0x2B3C},Conversion.intToShorts(0x12345678,33,new\n         // short[]{0},0,1));//rejected by assertion\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new short[]{(short)0x091A},\n             Conversion.intToShorts(0x12345678, 17, new short[]{0}, 0, 1));\n     }\n \n     @Test\n     public void testLongToBytes() throws Exception {\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 0, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 100, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 0, new byte[]{}, 100, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56,\n                 (byte)0x34, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56,\n                 (byte)0x34, (byte)0x12, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0x12},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 1, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 2, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85,\n                 (byte)0xC4, (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00},\n             Conversion.longToBytes(0x1234567890ABCDEFL, 5, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8));\n-        // assertArrayEquals(new\n+        // Assert.assertArrayEquals(new\n         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToBytes(0x1234567890ABCDEFL,13,new\n         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xC4,\n                 (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00, (byte)0xFF},\n \n     @Test\n     public void testIntToBytes() throws Exception {\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{}, Conversion.intToBytes(0x00000000, 0, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{}, Conversion.intToBytes(0x00000000, 100, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{}, Conversion.intToBytes(0x00000000, 0, new byte[]{}, 100, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB,\n                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 1, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 2, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85,\n                 (byte)0xFC, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n             Conversion.intToBytes(0x90ABCDEF, 5, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4));\n-        // assertArrayEquals(new\n+        // Assert.assertArrayEquals(new\n         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xFC,(byte)0x00,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.intToBytes(0x90ABCDEF,13,new\n         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,4));//rejected by assertion\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xFC,\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF},\n \n     @Test\n     public void testShortToBytes() throws Exception {\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{}, Conversion.shortToBytes((short)0x0000, 0, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{}, Conversion.shortToBytes((short)0x0000, 100, new byte[]{}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{}, Conversion.shortToBytes((short)0x0000, 0, new byte[]{}, 100, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 0));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 3, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 0, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 3, 2));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 1, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 2, new byte[]{\n                 -1, -1, -1, -1, -1, -1, -1}, 0, 1));\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0xFE, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 5, new byte[]{\n                 -1, 0, -1, -1, -1, -1, -1}, 3, 2));\n-        // assertArrayEquals(new\n+        // Assert.assertArrayEquals(new\n         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.shortToBytes((short)0xCDEF,13,new\n         // byte[]{-1, 0,-1,-1,-1,-1,-1},3,2));//rejected by assertion\n-        assertArrayEquals(\n+        Assert.assertArrayEquals(\n             new byte[]{\n                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0xFE, (byte)0xFF, (byte)0xFF,\n                 (byte)0xFF}, Conversion.shortToBytes((short)0xCDEF, 13, new byte[]{\n             false}, Conversion.byteToBools((byte)0x95, 2, new boolean[13], 3, 6));\n     }\n \n-    boolean hasMethod(String methodName) {\n+    private boolean hasMethod(String methodName) {\n         Method[] methods = this.getClass().getMethods();\n         for (Method m : methods) {\n             if (m.getName().equals(methodName)) return true;", "timestamp": 1348779602, "metainfo": ""}