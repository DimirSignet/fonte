{"sha": "37a040aa2b563e46095cea48cb3950534c511bba", "log": "Simplify boolean tests and avoid boxing  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n \n     @Test\n     public void testContains_Char() {\n-        assertEquals(false, StringUtils.contains(null, ' '));\n-        assertEquals(false, StringUtils.contains(\"\", ' '));\n-        assertEquals(false, StringUtils.contains(\"\", null));\n-        assertEquals(false, StringUtils.contains(null, null));\n-        assertEquals(true, StringUtils.contains(\"abc\", 'a'));\n-        assertEquals(true, StringUtils.contains(\"abc\", 'b'));\n-        assertEquals(true, StringUtils.contains(\"abc\", 'c'));\n-        assertEquals(false, StringUtils.contains(\"abc\", 'z'));\n+        assertFalse(StringUtils.contains(null, ' '));\n+        assertFalse(StringUtils.contains(\"\", ' '));\n+        assertFalse(StringUtils.contains(\"\", null));\n+        assertFalse(StringUtils.contains(null, null));\n+        assertTrue(StringUtils.contains(\"abc\", 'a'));\n+        assertTrue(StringUtils.contains(\"abc\", 'b'));\n+        assertTrue(StringUtils.contains(\"abc\", 'c'));\n+        assertFalse(StringUtils.contains(\"abc\", 'z'));\n     }\n \n     @Test\n     public void testContains_String() {\n-        assertEquals(false, StringUtils.contains(null, null));\n-        assertEquals(false, StringUtils.contains(null, \"\"));\n-        assertEquals(false, StringUtils.contains(null, \"a\"));\n-        assertEquals(false, StringUtils.contains(\"\", null));\n-        assertEquals(true, StringUtils.contains(\"\", \"\"));\n-        assertEquals(false, StringUtils.contains(\"\", \"a\"));\n-        assertEquals(true, StringUtils.contains(\"abc\", \"a\"));\n-        assertEquals(true, StringUtils.contains(\"abc\", \"b\"));\n-        assertEquals(true, StringUtils.contains(\"abc\", \"c\"));\n-        assertEquals(true, StringUtils.contains(\"abc\", \"abc\"));\n-        assertEquals(false, StringUtils.contains(\"abc\", \"z\"));\n+        assertFalse(StringUtils.contains(null, null));\n+        assertFalse(StringUtils.contains(null, \"\"));\n+        assertFalse(StringUtils.contains(null, \"a\"));\n+        assertFalse(StringUtils.contains(\"\", null));\n+        assertTrue(StringUtils.contains(\"\", \"\"));\n+        assertFalse(StringUtils.contains(\"\", \"a\"));\n+        assertTrue(StringUtils.contains(\"abc\", \"a\"));\n+        assertTrue(StringUtils.contains(\"abc\", \"b\"));\n+        assertTrue(StringUtils.contains(\"abc\", \"c\"));\n+        assertTrue(StringUtils.contains(\"abc\", \"abc\"));\n+        assertFalse(StringUtils.contains(\"abc\", \"z\"));\n     }\n \n     /**\n     @Test\n     public void testContains_StringWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n-        assertEquals(false, StringUtils.contains(CharUSuppCharHigh, CharU20001));\n-        assertEquals(false, StringUtils.contains(CharUSuppCharLow, CharU20001));\n-        assertEquals(false, StringUtils.contains(CharU20001, CharUSuppCharHigh));\n+        assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001));\n+        assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001));\n+        assertFalse(StringUtils.contains(CharU20001, CharUSuppCharHigh));\n         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n-        assertEquals(true, StringUtils.contains(CharU20001, CharUSuppCharLow));\n-        assertEquals(true, StringUtils.contains(CharU20001 + CharUSuppCharLow + \"a\", \"a\"));\n-        assertEquals(true, StringUtils.contains(CharU20001 + CharUSuppCharHigh + \"a\", \"a\"));\n+        assertTrue(StringUtils.contains(CharU20001, CharUSuppCharLow));\n+        assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + \"a\", \"a\"));\n+        assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + \"a\", \"a\"));\n     }\n \n     /**\n      */\n     @Test\n     public void testContains_StringWithSupplementaryChars() {\n-        assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20000));\n-        assertEquals(true, StringUtils.contains(CharU20000 + CharU20001, CharU20001));\n-        assertEquals(true, StringUtils.contains(CharU20000, CharU20000));\n-        assertEquals(false, StringUtils.contains(CharU20000, CharU20001));\n+        assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20000));\n+        assertTrue(StringUtils.contains(CharU20000 + CharU20001, CharU20001));\n+        assertTrue(StringUtils.contains(CharU20000, CharU20000));\n+        assertFalse(StringUtils.contains(CharU20000, CharU20001));\n     }\n \n     @Test\n     @Test\n     public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n-        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\n-        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));\n+        assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));\n+        assertFalse(StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));\n         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n-        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\n-        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));\n+        assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));\n+        assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));\n         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n-        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));\n+        assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));\n     }\n \n     /**\n      */\n     @Test\n     public void testContainsAny_StringCharArrayWithSupplementaryChars() {\n-        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n-        assertEquals(true, StringUtils.containsAny(\"a\" + CharU20000 + CharU20001, \"a\".toCharArray()));\n-        assertEquals(true, StringUtils.containsAny(CharU20000 + \"a\" + CharU20001, \"a\".toCharArray()));\n-        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001 + \"a\", \"a\".toCharArray()));\n-        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n-        assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));\n+        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));\n+        assertTrue(StringUtils.containsAny(\"a\" + CharU20000 + CharU20001, \"a\".toCharArray()));\n+        assertTrue(StringUtils.containsAny(CharU20000 + \"a\" + CharU20001, \"a\".toCharArray()));\n+        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001 + \"a\", \"a\".toCharArray()));\n+        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));\n+        assertTrue(StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));\n         // Sanity check:\n         assertEquals(-1, CharU20000.indexOf(CharU20001));\n         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n         // Test:\n-        assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));\n-        assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));\n+        assertFalse(StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));\n+        assertFalse(StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));\n     }\n \n     @Test\n     @Test\n     public void testContainsAny_StringWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n-        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n+        assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001));\n         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n-        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));\n-        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\n+        assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001));\n+        assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh));\n         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n-        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));\n+        assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow));\n     }\n \n     /**\n      */\n     @Test\n     public void testContainsAny_StringWithSupplementaryChars() {\n-        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));\n-        assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));\n-        assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));\n+        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));\n+        assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));\n+        assertTrue(StringUtils.containsAny(CharU20000, CharU20000));\n         // Sanity check:\n         assertEquals(-1, CharU20000.indexOf(CharU20001));\n         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n         // Test:\n-        assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));\n-        assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));\n+        assertFalse(StringUtils.containsAny(CharU20000, CharU20001));\n+        assertFalse(StringUtils.containsAny(CharU20001, CharU20000));\n     }\n \n     @Test\n         char[] chars2= {'.'};\n         char[] chars3= {'c', 'd'};\n         char[] emptyChars = new char[0];\n-        assertEquals(true, StringUtils.containsNone(null, (char[]) null));\n-        assertEquals(true, StringUtils.containsNone(\"\", (char[]) null));\n-        assertEquals(true, StringUtils.containsNone(null, emptyChars));\n-        assertEquals(true, StringUtils.containsNone(str1, emptyChars));\n-        assertEquals(true, StringUtils.containsNone(\"\", emptyChars));\n-        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n-        assertEquals(true, StringUtils.containsNone(str1, chars1));\n-        assertEquals(true, StringUtils.containsNone(str1, chars2));\n-        assertEquals(true, StringUtils.containsNone(str1, chars3));\n-        assertEquals(false, StringUtils.containsNone(str2, chars1));\n-        assertEquals(true, StringUtils.containsNone(str2, chars2));\n-        assertEquals(true, StringUtils.containsNone(str2, chars3));\n-        assertEquals(false, StringUtils.containsNone(str3, chars1));\n-        assertEquals(false, StringUtils.containsNone(str3, chars2));\n-        assertEquals(true, StringUtils.containsNone(str3, chars3));\n+        assertTrue(StringUtils.containsNone(null, (char[]) null));\n+        assertTrue(StringUtils.containsNone(\"\", (char[]) null));\n+        assertTrue(StringUtils.containsNone(null, emptyChars));\n+        assertTrue(StringUtils.containsNone(str1, emptyChars));\n+        assertTrue(StringUtils.containsNone(\"\", emptyChars));\n+        assertTrue(StringUtils.containsNone(\"\", chars1));\n+        assertTrue(StringUtils.containsNone(str1, chars1));\n+        assertTrue(StringUtils.containsNone(str1, chars2));\n+        assertTrue(StringUtils.containsNone(str1, chars3));\n+        assertFalse(StringUtils.containsNone(str2, chars1));\n+        assertTrue(StringUtils.containsNone(str2, chars2));\n+        assertTrue(StringUtils.containsNone(str2, chars3));\n+        assertFalse(StringUtils.containsNone(str3, chars1));\n+        assertFalse(StringUtils.containsNone(str3, chars2));\n+        assertTrue(StringUtils.containsNone(str3, chars3));\n     }\n \n     /**\n     @Test\n     public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n-        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n+        assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));\n         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n-        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n+        assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));\n         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n-        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\n+        assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));\n         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n-        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\n+        assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));\n     }\n \n     /**\n      */\n     @Test\n     public void testContainsNone_CharArrayWithSupplementaryChars() {\n-        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n-        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n-        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n+        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));\n+        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));\n+        assertFalse(StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));\n         // Sanity check:\n         assertEquals(-1, CharU20000.indexOf(CharU20001));\n         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n         // Test:\n-        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n-        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n+        assertTrue(StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));\n+        assertTrue(StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));\n     }\n \n     @Test\n         String chars1= \"b\";\n         String chars2= \".\";\n         String chars3= \"cd\";\n-        assertEquals(true, StringUtils.containsNone(null, (String) null));\n-        assertEquals(true, StringUtils.containsNone(\"\", (String) null));\n-        assertEquals(true, StringUtils.containsNone(null, \"\"));\n-        assertEquals(true, StringUtils.containsNone(str1, \"\"));\n-        assertEquals(true, StringUtils.containsNone(\"\", \"\"));\n-        assertEquals(true, StringUtils.containsNone(\"\", chars1));\n-        assertEquals(true, StringUtils.containsNone(str1, chars1));\n-        assertEquals(true, StringUtils.containsNone(str1, chars2));\n-        assertEquals(true, StringUtils.containsNone(str1, chars3));\n-        assertEquals(false, StringUtils.containsNone(str2, chars1));\n-        assertEquals(true, StringUtils.containsNone(str2, chars2));\n-        assertEquals(true, StringUtils.containsNone(str2, chars3));\n-        assertEquals(false, StringUtils.containsNone(str3, chars1));\n-        assertEquals(false, StringUtils.containsNone(str3, chars2));\n-        assertEquals(true, StringUtils.containsNone(str3, chars3));\n+        assertTrue(StringUtils.containsNone(null, (String) null));\n+        assertTrue(StringUtils.containsNone(\"\", (String) null));\n+        assertTrue(StringUtils.containsNone(null, \"\"));\n+        assertTrue(StringUtils.containsNone(str1, \"\"));\n+        assertTrue(StringUtils.containsNone(\"\", \"\"));\n+        assertTrue(StringUtils.containsNone(\"\", chars1));\n+        assertTrue(StringUtils.containsNone(str1, chars1));\n+        assertTrue(StringUtils.containsNone(str1, chars2));\n+        assertTrue(StringUtils.containsNone(str1, chars3));\n+        assertFalse(StringUtils.containsNone(str2, chars1));\n+        assertTrue(StringUtils.containsNone(str2, chars2));\n+        assertTrue(StringUtils.containsNone(str2, chars3));\n+        assertFalse(StringUtils.containsNone(str3, chars1));\n+        assertFalse(StringUtils.containsNone(str3, chars2));\n+        assertTrue(StringUtils.containsNone(str3, chars3));\n     }\n \n     /**\n     @Test\n     public void testContainsNone_StringWithBadSupplementaryChars() {\n         // Test edge case: 1/2 of a (broken) supplementary char\n-        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n+        assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001));\n         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));\n-        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n+        assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001));\n         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));\n-        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\n+        assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh));\n         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));\n-        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));\n+        assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow));\n     }\n \n     /**\n      */\n     @Test\n     public void testContainsNone_StringWithSupplementaryChars() {\n-        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n-        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n-        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));\n+        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));\n+        assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));\n+        assertFalse(StringUtils.containsNone(CharU20000, CharU20000));\n         // Sanity check:\n         assertEquals(-1, CharU20000.indexOf(CharU20001));\n         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));\n         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));\n         // Test:\n-        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));\n-        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));\n+        assertTrue(StringUtils.containsNone(CharU20000, CharU20001));\n+        assertTrue(StringUtils.containsNone(CharU20001, CharU20000));\n     }\n \n     @Test\n         char[] chars2= {'a'};\n         char[] chars3= {'a', 'b'};\n         char[] emptyChars = new char[0];\n-        assertEquals(false, StringUtils.containsOnly(null, (char[]) null));\n-        assertEquals(false, StringUtils.containsOnly(\"\", (char[]) null));\n-        assertEquals(false, StringUtils.containsOnly(null, emptyChars));\n-        assertEquals(false, StringUtils.containsOnly(str1, emptyChars));\n-        assertEquals(true, StringUtils.containsOnly(\"\", emptyChars));\n-        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n-        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n-        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n-        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n-        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n-        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n-        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n-        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n-        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n-        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n+        assertFalse(StringUtils.containsOnly(null, (char[]) null));\n+        assertFalse(StringUtils.containsOnly(\"\", (char[]) null));\n+        assertFalse(StringUtils.containsOnly(null, emptyChars));\n+        assertFalse(StringUtils.containsOnly(str1, emptyChars));\n+        assertTrue(StringUtils.containsOnly(\"\", emptyChars));\n+        assertTrue(StringUtils.containsOnly(\"\", chars1));\n+        assertFalse(StringUtils.containsOnly(str1, chars1));\n+        assertTrue(StringUtils.containsOnly(str1, chars2));\n+        assertTrue(StringUtils.containsOnly(str1, chars3));\n+        assertTrue(StringUtils.containsOnly(str2, chars1));\n+        assertFalse(StringUtils.containsOnly(str2, chars2));\n+        assertTrue(StringUtils.containsOnly(str2, chars3));\n+        assertFalse(StringUtils.containsOnly(str3, chars1));\n+        assertFalse(StringUtils.containsOnly(str3, chars2));\n+        assertTrue(StringUtils.containsOnly(str3, chars3));\n     }\n \n     @Test\n         String chars1= \"b\";\n         String chars2= \"a\";\n         String chars3= \"ab\";\n-        assertEquals(false, StringUtils.containsOnly(null, (String) null));\n-        assertEquals(false, StringUtils.containsOnly(\"\", (String) null));\n-        assertEquals(false, StringUtils.containsOnly(null, \"\"));\n-        assertEquals(false, StringUtils.containsOnly(str1, \"\"));\n-        assertEquals(true, StringUtils.containsOnly(\"\", \"\"));\n-        assertEquals(true, StringUtils.containsOnly(\"\", chars1));\n-        assertEquals(false, StringUtils.containsOnly(str1, chars1));\n-        assertEquals(true, StringUtils.containsOnly(str1, chars2));\n-        assertEquals(true, StringUtils.containsOnly(str1, chars3));\n-        assertEquals(true, StringUtils.containsOnly(str2, chars1));\n-        assertEquals(false, StringUtils.containsOnly(str2, chars2));\n-        assertEquals(true, StringUtils.containsOnly(str2, chars3));\n-        assertEquals(false, StringUtils.containsOnly(str3, chars1));\n-        assertEquals(false, StringUtils.containsOnly(str3, chars2));\n-        assertEquals(true, StringUtils.containsOnly(str3, chars3));\n+        assertFalse(StringUtils.containsOnly(null, (String) null));\n+        assertFalse(StringUtils.containsOnly(\"\", (String) null));\n+        assertFalse(StringUtils.containsOnly(null, \"\"));\n+        assertFalse(StringUtils.containsOnly(str1, \"\"));\n+        assertTrue(StringUtils.containsOnly(\"\", \"\"));\n+        assertTrue(StringUtils.containsOnly(\"\", chars1));\n+        assertFalse(StringUtils.containsOnly(str1, chars1));\n+        assertTrue(StringUtils.containsOnly(str1, chars2));\n+        assertTrue(StringUtils.containsOnly(str1, chars3));\n+        assertTrue(StringUtils.containsOnly(str2, chars1));\n+        assertFalse(StringUtils.containsOnly(str2, chars2));\n+        assertTrue(StringUtils.containsOnly(str2, chars3));\n+        assertFalse(StringUtils.containsOnly(str3, chars1));\n+        assertFalse(StringUtils.containsOnly(str3, chars2));\n+        assertTrue(StringUtils.containsOnly(str3, chars3));\n     }\n \n     @Test\n \n     @Test\n     public void testEqualsIgnoreCase() {\n-        assertEquals(true, StringUtils.equalsIgnoreCase(null, null));\n-        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, FOO));\n-        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));\n-        assertEquals(true, StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));\n-        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, BAR));\n-        assertEquals(false, StringUtils.equalsIgnoreCase(FOO, null));\n-        assertEquals(false, StringUtils.equalsIgnoreCase(null, FOO));\n-        assertEquals(true, StringUtils.equalsIgnoreCase(\"\",\"\"));\n-        assertEquals(false, StringUtils.equalsIgnoreCase(\"abcd\",\"abcd \"));\n+        assertTrue(StringUtils.equalsIgnoreCase(null, null));\n+        assertTrue(StringUtils.equalsIgnoreCase(FOO, FOO));\n+        assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'o', 'o' })));\n+        assertTrue(StringUtils.equalsIgnoreCase(FOO, new String(new char[] { 'f', 'O', 'O' })));\n+        assertFalse(StringUtils.equalsIgnoreCase(FOO, BAR));\n+        assertFalse(StringUtils.equalsIgnoreCase(FOO, null));\n+        assertFalse(StringUtils.equalsIgnoreCase(null, FOO));\n+        assertTrue(StringUtils.equalsIgnoreCase(\"\",\"\"));\n+        assertFalse(StringUtils.equalsIgnoreCase(\"abcd\",\"abcd \"));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java\n  */\n package org.apache.commons.lang3;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n \n import org.junit.Test;\n \n \n     @Test\n     public void testIsAlpha() {\n-        assertEquals(false, StringUtils.isAlpha(null));\n-        assertEquals(false, StringUtils.isAlpha(\"\"));\n-        assertEquals(false, StringUtils.isAlpha(\" \"));\n-        assertEquals(true, StringUtils.isAlpha(\"a\"));\n-        assertEquals(true, StringUtils.isAlpha(\"A\"));\n-        assertEquals(true, StringUtils.isAlpha(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n-        assertEquals(false, StringUtils.isAlpha(\"ham kso\"));\n-        assertEquals(false, StringUtils.isAlpha(\"1\"));\n-        assertEquals(false, StringUtils.isAlpha(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n-        assertEquals(false, StringUtils.isAlpha(\"_\"));\n-        assertEquals(false, StringUtils.isAlpha(\"hkHKHik*khbkuh\"));\n+        assertFalse(StringUtils.isAlpha(null));\n+        assertFalse(StringUtils.isAlpha(\"\"));\n+        assertFalse(StringUtils.isAlpha(\" \"));\n+        assertTrue(StringUtils.isAlpha(\"a\"));\n+        assertTrue(StringUtils.isAlpha(\"A\"));\n+        assertTrue(StringUtils.isAlpha(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertFalse(StringUtils.isAlpha(\"ham kso\"));\n+        assertFalse(StringUtils.isAlpha(\"1\"));\n+        assertFalse(StringUtils.isAlpha(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertFalse(StringUtils.isAlpha(\"_\"));\n+        assertFalse(StringUtils.isAlpha(\"hkHKHik*khbkuh\"));\n     }\n \n     @Test\n     public void testIsAlphanumeric() {\n-        assertEquals(false, StringUtils.isAlphanumeric(null));\n-        assertEquals(false, StringUtils.isAlphanumeric(\"\"));\n-        assertEquals(false, StringUtils.isAlphanumeric(\" \"));\n-        assertEquals(true, StringUtils.isAlphanumeric(\"a\"));\n-        assertEquals(true, StringUtils.isAlphanumeric(\"A\"));\n-        assertEquals(true, StringUtils.isAlphanumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n-        assertEquals(false, StringUtils.isAlphanumeric(\"ham kso\"));\n-        assertEquals(true, StringUtils.isAlphanumeric(\"1\"));\n-        assertEquals(true, StringUtils.isAlphanumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n-        assertEquals(false, StringUtils.isAlphanumeric(\"_\"));\n-        assertEquals(false, StringUtils.isAlphanumeric(\"hkHKHik*khbkuh\"));\n+        assertFalse(StringUtils.isAlphanumeric(null));\n+        assertFalse(StringUtils.isAlphanumeric(\"\"));\n+        assertFalse(StringUtils.isAlphanumeric(\" \"));\n+        assertTrue(StringUtils.isAlphanumeric(\"a\"));\n+        assertTrue(StringUtils.isAlphanumeric(\"A\"));\n+        assertTrue(StringUtils.isAlphanumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertFalse(StringUtils.isAlphanumeric(\"ham kso\"));\n+        assertTrue(StringUtils.isAlphanumeric(\"1\"));\n+        assertTrue(StringUtils.isAlphanumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertFalse(StringUtils.isAlphanumeric(\"_\"));\n+        assertFalse(StringUtils.isAlphanumeric(\"hkHKHik*khbkuh\"));\n     }\n \n     @Test\n     public void testIsWhitespace() {\n-        assertEquals(false, StringUtils.isWhitespace(null));\n-        assertEquals(true, StringUtils.isWhitespace(\"\"));\n-        assertEquals(true, StringUtils.isWhitespace(\" \"));\n-        assertEquals(true, StringUtils.isWhitespace(\"\\t \\n \\t\"));\n-        assertEquals(false, StringUtils.isWhitespace(\"\\t aa\\n \\t\"));\n-        assertEquals(true, StringUtils.isWhitespace(\" \"));\n-        assertEquals(false, StringUtils.isWhitespace(\" a \"));\n-        assertEquals(false, StringUtils.isWhitespace(\"a  \"));\n-        assertEquals(false, StringUtils.isWhitespace(\"  a\"));\n-        assertEquals(false, StringUtils.isWhitespace(\"aba\"));\n-        assertEquals(true, StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));\n-        assertEquals(false, StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));\n+        assertFalse(StringUtils.isWhitespace(null));\n+        assertTrue(StringUtils.isWhitespace(\"\"));\n+        assertTrue(StringUtils.isWhitespace(\" \"));\n+        assertTrue(StringUtils.isWhitespace(\"\\t \\n \\t\"));\n+        assertFalse(StringUtils.isWhitespace(\"\\t aa\\n \\t\"));\n+        assertTrue(StringUtils.isWhitespace(\" \"));\n+        assertFalse(StringUtils.isWhitespace(\" a \"));\n+        assertFalse(StringUtils.isWhitespace(\"a  \"));\n+        assertFalse(StringUtils.isWhitespace(\"  a\"));\n+        assertFalse(StringUtils.isWhitespace(\"aba\"));\n+        assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE));\n+        assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE));\n     }\n \n     @Test\n     public void testIsAlphaspace() {\n-        assertEquals(false, StringUtils.isAlphaSpace(null));\n-        assertEquals(true, StringUtils.isAlphaSpace(\"\"));\n-        assertEquals(true, StringUtils.isAlphaSpace(\" \"));\n-        assertEquals(true, StringUtils.isAlphaSpace(\"a\"));\n-        assertEquals(true, StringUtils.isAlphaSpace(\"A\"));\n-        assertEquals(true, StringUtils.isAlphaSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n-        assertEquals(true, StringUtils.isAlphaSpace(\"ham kso\"));\n-        assertEquals(false, StringUtils.isAlphaSpace(\"1\"));\n-        assertEquals(false, StringUtils.isAlphaSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n-        assertEquals(false, StringUtils.isAlphaSpace(\"_\"));\n-        assertEquals(false, StringUtils.isAlphaSpace(\"hkHKHik*khbkuh\"));\n+        assertFalse(StringUtils.isAlphaSpace(null));\n+        assertTrue(StringUtils.isAlphaSpace(\"\"));\n+        assertTrue(StringUtils.isAlphaSpace(\" \"));\n+        assertTrue(StringUtils.isAlphaSpace(\"a\"));\n+        assertTrue(StringUtils.isAlphaSpace(\"A\"));\n+        assertTrue(StringUtils.isAlphaSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertTrue(StringUtils.isAlphaSpace(\"ham kso\"));\n+        assertFalse(StringUtils.isAlphaSpace(\"1\"));\n+        assertFalse(StringUtils.isAlphaSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertFalse(StringUtils.isAlphaSpace(\"_\"));\n+        assertFalse(StringUtils.isAlphaSpace(\"hkHKHik*khbkuh\"));\n     }\n \n     @Test\n     public void testIsAlphanumericSpace() {\n-        assertEquals(false, StringUtils.isAlphanumericSpace(null));\n-        assertEquals(true, StringUtils.isAlphanumericSpace(\"\"));\n-        assertEquals(true, StringUtils.isAlphanumericSpace(\" \"));\n-        assertEquals(true, StringUtils.isAlphanumericSpace(\"a\"));\n-        assertEquals(true, StringUtils.isAlphanumericSpace(\"A\"));\n-        assertEquals(true, StringUtils.isAlphanumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n-        assertEquals(true, StringUtils.isAlphanumericSpace(\"ham kso\"));\n-        assertEquals(true, StringUtils.isAlphanumericSpace(\"1\"));\n-        assertEquals(true, StringUtils.isAlphanumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n-        assertEquals(false, StringUtils.isAlphanumericSpace(\"_\"));\n-        assertEquals(false, StringUtils.isAlphanumericSpace(\"hkHKHik*khbkuh\"));\n+        assertFalse(StringUtils.isAlphanumericSpace(null));\n+        assertTrue(StringUtils.isAlphanumericSpace(\"\"));\n+        assertTrue(StringUtils.isAlphanumericSpace(\" \"));\n+        assertTrue(StringUtils.isAlphanumericSpace(\"a\"));\n+        assertTrue(StringUtils.isAlphanumericSpace(\"A\"));\n+        assertTrue(StringUtils.isAlphanumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertTrue(StringUtils.isAlphanumericSpace(\"ham kso\"));\n+        assertTrue(StringUtils.isAlphanumericSpace(\"1\"));\n+        assertTrue(StringUtils.isAlphanumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertFalse(StringUtils.isAlphanumericSpace(\"_\"));\n+        assertFalse(StringUtils.isAlphanumericSpace(\"hkHKHik*khbkuh\"));\n     }\n \n     @Test\n     public void testIsAsciiPrintable_String() {\n-        assertEquals(false, StringUtils.isAsciiPrintable(null));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\" \"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"a\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"A\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"1\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"Ceki\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"!ab2c~\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"1000\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"10 00\"));\n-        assertEquals(false, StringUtils.isAsciiPrintable(\"10\\t00\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"10.00\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"10,00\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"!ab-c~\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u0020\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u0021\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"\\u007e\"));\n-        assertEquals(false, StringUtils.isAsciiPrintable(\"\\u007f\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"G?lc?\"));\n-        assertEquals(true, StringUtils.isAsciiPrintable(\"=?iso-8859-1?Q?G=FClc=FC?=\"));\n-        assertEquals(false, StringUtils.isAsciiPrintable(\"G\\u00fclc\\u00fc\"));\n+        assertFalse(StringUtils.isAsciiPrintable(null));\n+        assertTrue(StringUtils.isAsciiPrintable(\"\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\" \"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"a\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"A\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"1\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"Ceki\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"!ab2c~\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"1000\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"10 00\"));\n+        assertFalse(StringUtils.isAsciiPrintable(\"10\\t00\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"10.00\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"10,00\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"!ab-c~\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"\\u0020\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"\\u0021\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"\\u007e\"));\n+        assertFalse(StringUtils.isAsciiPrintable(\"\\u007f\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"G?lc?\"));\n+        assertTrue(StringUtils.isAsciiPrintable(\"=?iso-8859-1?Q?G=FClc=FC?=\"));\n+        assertFalse(StringUtils.isAsciiPrintable(\"G\\u00fclc\\u00fc\"));\n     }\n   \n     @Test\n     public void testIsNumeric() {\n-        assertEquals(false, StringUtils.isNumeric(null));\n-        assertEquals(false, StringUtils.isNumeric(\"\"));\n-        assertEquals(false, StringUtils.isNumeric(\" \"));\n-        assertEquals(false, StringUtils.isNumeric(\"a\"));\n-        assertEquals(false, StringUtils.isNumeric(\"A\"));\n-        assertEquals(false, StringUtils.isNumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n-        assertEquals(false, StringUtils.isNumeric(\"ham kso\"));\n-        assertEquals(true, StringUtils.isNumeric(\"1\"));\n-        assertEquals(true, StringUtils.isNumeric(\"1000\"));\n-        assertEquals(false, StringUtils.isNumeric(\"2.3\"));\n-        assertEquals(false, StringUtils.isNumeric(\"10 00\"));\n-        assertEquals(false, StringUtils.isNumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n-        assertEquals(false, StringUtils.isNumeric(\"_\"));\n-        assertEquals(false, StringUtils.isNumeric(\"hkHKHik*khbkuh\"));\n-        assertEquals(false, StringUtils.isNumeric(\"+123\"));\n-        assertEquals(false, StringUtils.isNumeric(\"-123\"));\n+        assertFalse(StringUtils.isNumeric(null));\n+        assertFalse(StringUtils.isNumeric(\"\"));\n+        assertFalse(StringUtils.isNumeric(\" \"));\n+        assertFalse(StringUtils.isNumeric(\"a\"));\n+        assertFalse(StringUtils.isNumeric(\"A\"));\n+        assertFalse(StringUtils.isNumeric(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertFalse(StringUtils.isNumeric(\"ham kso\"));\n+        assertTrue(StringUtils.isNumeric(\"1\"));\n+        assertTrue(StringUtils.isNumeric(\"1000\"));\n+        assertFalse(StringUtils.isNumeric(\"2.3\"));\n+        assertFalse(StringUtils.isNumeric(\"10 00\"));\n+        assertFalse(StringUtils.isNumeric(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertFalse(StringUtils.isNumeric(\"_\"));\n+        assertFalse(StringUtils.isNumeric(\"hkHKHik*khbkuh\"));\n+        assertFalse(StringUtils.isNumeric(\"+123\"));\n+        assertFalse(StringUtils.isNumeric(\"-123\"));\n     }\n \n     @Test\n     public void testIsNumericSpace() {\n-        assertEquals(false, StringUtils.isNumericSpace(null));\n-        assertEquals(true, StringUtils.isNumericSpace(\"\"));\n-        assertEquals(true, StringUtils.isNumericSpace(\" \"));\n-        assertEquals(false, StringUtils.isNumericSpace(\"a\"));\n-        assertEquals(false, StringUtils.isNumericSpace(\"A\"));\n-        assertEquals(false, StringUtils.isNumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n-        assertEquals(false, StringUtils.isNumericSpace(\"ham kso\"));\n-        assertEquals(true, StringUtils.isNumericSpace(\"1\"));\n-        assertEquals(true, StringUtils.isNumericSpace(\"1000\"));\n-        assertEquals(false, StringUtils.isNumericSpace(\"2.3\"));\n-        assertEquals(true, StringUtils.isNumericSpace(\"10 00\"));\n-        assertEquals(false, StringUtils.isNumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n-        assertEquals(false, StringUtils.isNumericSpace(\"_\"));\n-        assertEquals(false, StringUtils.isNumericSpace(\"hkHKHik*khbkuh\"));\n+        assertFalse(StringUtils.isNumericSpace(null));\n+        assertTrue(StringUtils.isNumericSpace(\"\"));\n+        assertTrue(StringUtils.isNumericSpace(\" \"));\n+        assertFalse(StringUtils.isNumericSpace(\"a\"));\n+        assertFalse(StringUtils.isNumericSpace(\"A\"));\n+        assertFalse(StringUtils.isNumericSpace(\"kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl\"));\n+        assertFalse(StringUtils.isNumericSpace(\"ham kso\"));\n+        assertTrue(StringUtils.isNumericSpace(\"1\"));\n+        assertTrue(StringUtils.isNumericSpace(\"1000\"));\n+        assertFalse(StringUtils.isNumericSpace(\"2.3\"));\n+        assertTrue(StringUtils.isNumericSpace(\"10 00\"));\n+        assertFalse(StringUtils.isNumericSpace(\"hkHKHik6iUGHKJgU7tUJgKJGI87GIkug\"));\n+        assertFalse(StringUtils.isNumericSpace(\"_\"));\n+        assertFalse(StringUtils.isNumericSpace(\"hkHKHik*khbkuh\"));\n     }\n \n }\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n \n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n import org.junit.Test;\n \n     //-----------------------------------------------------------------------\n     @Test\n     public void testIsEmpty() {\n-        assertEquals(true, StringUtils.isEmpty(null));\n-        assertEquals(true, StringUtils.isEmpty(\"\"));\n-        assertEquals(false, StringUtils.isEmpty(\" \"));\n-        assertEquals(false, StringUtils.isEmpty(\"foo\"));\n-        assertEquals(false, StringUtils.isEmpty(\"  foo  \"));\n+        assertTrue(StringUtils.isEmpty(null));\n+        assertTrue(StringUtils.isEmpty(\"\"));\n+        assertFalse(StringUtils.isEmpty(\" \"));\n+        assertFalse(StringUtils.isEmpty(\"foo\"));\n+        assertFalse(StringUtils.isEmpty(\"  foo  \"));\n     }\n \n     @Test\n     public void testIsNotEmpty() {\n-        assertEquals(false, StringUtils.isNotEmpty(null));\n-        assertEquals(false, StringUtils.isNotEmpty(\"\"));\n-        assertEquals(true, StringUtils.isNotEmpty(\" \"));\n-        assertEquals(true, StringUtils.isNotEmpty(\"foo\"));\n-        assertEquals(true, StringUtils.isNotEmpty(\"  foo  \"));\n+        assertFalse(StringUtils.isNotEmpty(null));\n+        assertFalse(StringUtils.isNotEmpty(\"\"));\n+        assertTrue(StringUtils.isNotEmpty(\" \"));\n+        assertTrue(StringUtils.isNotEmpty(\"foo\"));\n+        assertTrue(StringUtils.isNotEmpty(\"  foo  \"));\n     }\n \n     @Test\n     public void testIsBlank() {\n-        assertEquals(true, StringUtils.isBlank(null));\n-        assertEquals(true, StringUtils.isBlank(\"\"));\n-        assertEquals(true, StringUtils.isBlank(StringUtilsTest.WHITESPACE));\n-        assertEquals(false, StringUtils.isBlank(\"foo\"));\n-        assertEquals(false, StringUtils.isBlank(\"  foo  \"));\n+        assertTrue(StringUtils.isBlank(null));\n+        assertTrue(StringUtils.isBlank(\"\"));\n+        assertTrue(StringUtils.isBlank(StringUtilsTest.WHITESPACE));\n+        assertFalse(StringUtils.isBlank(\"foo\"));\n+        assertFalse(StringUtils.isBlank(\"  foo  \"));\n     }\n \n     @Test\n     public void testIsNotBlank() {\n-        assertEquals(false, StringUtils.isNotBlank(null));\n-        assertEquals(false, StringUtils.isNotBlank(\"\"));\n-        assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n-        assertEquals(true, StringUtils.isNotBlank(\"foo\"));\n-        assertEquals(true, StringUtils.isNotBlank(\"  foo  \"));\n+        assertFalse(StringUtils.isNotBlank(null));\n+        assertFalse(StringUtils.isNotBlank(\"\"));\n+        assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n+        assertTrue(StringUtils.isNotBlank(\"foo\"));\n+        assertTrue(StringUtils.isNotBlank(\"  foo  \"));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n         assertNotNull(new SystemUtils());\n         Constructor<?>[] cons = SystemUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(SystemUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(SystemUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(SystemUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(SystemUtils.class.getModifiers()));\n     }\n \n     /**\n     public void testIS_JAVA() {\n         String javaVersion = System.getProperty(\"java.version\");\n         if (javaVersion == null) {\n-            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n+            assertFalse(SystemUtils.IS_JAVA_1_1);\n+            assertFalse(SystemUtils.IS_JAVA_1_2);\n+            assertFalse(SystemUtils.IS_JAVA_1_3);\n+            assertFalse(SystemUtils.IS_JAVA_1_4);\n+            assertFalse(SystemUtils.IS_JAVA_1_5);\n+            assertFalse(SystemUtils.IS_JAVA_1_6);\n+            assertFalse(SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.1\")) {\n-            assertEquals(true, SystemUtils.IS_JAVA_1_1);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n+            assertTrue(SystemUtils.IS_JAVA_1_1);\n+            assertFalse(SystemUtils.IS_JAVA_1_2);\n+            assertFalse(SystemUtils.IS_JAVA_1_3);\n+            assertFalse(SystemUtils.IS_JAVA_1_4);\n+            assertFalse(SystemUtils.IS_JAVA_1_5);\n+            assertFalse(SystemUtils.IS_JAVA_1_6);\n+            assertFalse(SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.2\")) {\n-            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n-            assertEquals(true, SystemUtils.IS_JAVA_1_2);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n+            assertFalse(SystemUtils.IS_JAVA_1_1);\n+            assertTrue(SystemUtils.IS_JAVA_1_2);\n+            assertFalse(SystemUtils.IS_JAVA_1_3);\n+            assertFalse(SystemUtils.IS_JAVA_1_4);\n+            assertFalse(SystemUtils.IS_JAVA_1_5);\n+            assertFalse(SystemUtils.IS_JAVA_1_6);\n+            assertFalse(SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.3\")) {\n-            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n-            assertEquals(true, SystemUtils.IS_JAVA_1_3);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n+            assertFalse(SystemUtils.IS_JAVA_1_1);\n+            assertFalse(SystemUtils.IS_JAVA_1_2);\n+            assertTrue(SystemUtils.IS_JAVA_1_3);\n+            assertFalse(SystemUtils.IS_JAVA_1_4);\n+            assertFalse(SystemUtils.IS_JAVA_1_5);\n+            assertFalse(SystemUtils.IS_JAVA_1_6);\n+            assertFalse(SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.4\")) {\n-            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n-            assertEquals(true, SystemUtils.IS_JAVA_1_4);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n+            assertFalse(SystemUtils.IS_JAVA_1_1);\n+            assertFalse(SystemUtils.IS_JAVA_1_2);\n+            assertFalse(SystemUtils.IS_JAVA_1_3);\n+            assertTrue(SystemUtils.IS_JAVA_1_4);\n+            assertFalse(SystemUtils.IS_JAVA_1_5);\n+            assertFalse(SystemUtils.IS_JAVA_1_6);\n+            assertFalse(SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.5\")) {\n-            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n-            assertEquals(true, SystemUtils.IS_JAVA_1_5);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_6);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n+            assertFalse(SystemUtils.IS_JAVA_1_1);\n+            assertFalse(SystemUtils.IS_JAVA_1_2);\n+            assertFalse(SystemUtils.IS_JAVA_1_3);\n+            assertFalse(SystemUtils.IS_JAVA_1_4);\n+            assertTrue(SystemUtils.IS_JAVA_1_5);\n+            assertFalse(SystemUtils.IS_JAVA_1_6);\n+            assertFalse(SystemUtils.IS_JAVA_1_7);\n         } else if (javaVersion.startsWith(\"1.6\")) {\n-            assertEquals(false, SystemUtils.IS_JAVA_1_1);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_2);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_3);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_4);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_5);\n-            assertEquals(true, SystemUtils.IS_JAVA_1_6);\n-            assertEquals(false, SystemUtils.IS_JAVA_1_7);\n+            assertFalse(SystemUtils.IS_JAVA_1_1);\n+            assertFalse(SystemUtils.IS_JAVA_1_2);\n+            assertFalse(SystemUtils.IS_JAVA_1_3);\n+            assertFalse(SystemUtils.IS_JAVA_1_4);\n+            assertFalse(SystemUtils.IS_JAVA_1_5);\n+            assertTrue(SystemUtils.IS_JAVA_1_6);\n+            assertFalse(SystemUtils.IS_JAVA_1_7);\n         } else {\n             System.out.println(\"Can't test IS_JAVA value\");\n         }\n     public void testIS_OS() {\n         String osName = System.getProperty(\"os.name\");\n         if (osName == null) {\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n-            assertEquals(false, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_SOLARIS);\n-            assertEquals(false, SystemUtils.IS_OS_LINUX);\n-            assertEquals(false, SystemUtils.IS_OS_MAC_OSX);\n+            assertFalse(SystemUtils.IS_OS_WINDOWS);\n+            assertFalse(SystemUtils.IS_OS_UNIX);\n+            assertFalse(SystemUtils.IS_OS_SOLARIS);\n+            assertFalse(SystemUtils.IS_OS_LINUX);\n+            assertFalse(SystemUtils.IS_OS_MAC_OSX);\n         } else if (osName.startsWith(\"Windows\")) {\n-            assertEquals(false, SystemUtils.IS_OS_UNIX);\n-            assertEquals(true, SystemUtils.IS_OS_WINDOWS);\n+            assertFalse(SystemUtils.IS_OS_UNIX);\n+            assertTrue(SystemUtils.IS_OS_WINDOWS);\n         } else if (osName.startsWith(\"Solaris\")) {\n-            assertEquals(true, SystemUtils.IS_OS_SOLARIS);\n-            assertEquals(true, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+            assertTrue(SystemUtils.IS_OS_SOLARIS);\n+            assertTrue(SystemUtils.IS_OS_UNIX);\n+            assertFalse(SystemUtils.IS_OS_WINDOWS);\n         } else if (osName.toLowerCase(Locale.ENGLISH).startsWith(\"linux\")) {\n-            assertEquals(true, SystemUtils.IS_OS_LINUX);\n-            assertEquals(true, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+            assertTrue(SystemUtils.IS_OS_LINUX);\n+            assertTrue(SystemUtils.IS_OS_UNIX);\n+            assertFalse(SystemUtils.IS_OS_WINDOWS);\n         } else if (osName.startsWith(\"Mac OS X\")) {\n-            assertEquals(true, SystemUtils.IS_OS_MAC_OSX);\n-            assertEquals(true, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+            assertTrue(SystemUtils.IS_OS_MAC_OSX);\n+            assertTrue(SystemUtils.IS_OS_UNIX);\n+            assertFalse(SystemUtils.IS_OS_WINDOWS);\n         } else if (osName.startsWith(\"OS/2\")) {\n-            assertEquals(true, SystemUtils.IS_OS_OS2);\n-            assertEquals(false, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+            assertTrue(SystemUtils.IS_OS_OS2);\n+            assertFalse(SystemUtils.IS_OS_UNIX);\n+            assertFalse(SystemUtils.IS_OS_WINDOWS);\n         } else if (osName.startsWith(\"SunOS\")) {\n-            assertEquals(true, SystemUtils.IS_OS_SUN_OS);\n-            assertEquals(true, SystemUtils.IS_OS_UNIX);\n-            assertEquals(false, SystemUtils.IS_OS_WINDOWS);\n+            assertTrue(SystemUtils.IS_OS_SUN_OS);\n+            assertTrue(SystemUtils.IS_OS_UNIX);\n+            assertFalse(SystemUtils.IS_OS_WINDOWS);\n         } else {\n             System.out.println(\"Can't test IS_OS value\");\n         }\n     @Test\n     public void testJavaVersionMatches() {\n         String javaVersion = null;\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.0\";\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.1\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.2\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.3.0\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.3.1\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.4.0\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.4.1\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.4.2\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.5.0\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.6.0\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n         javaVersion = \"1.7.0\";\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n-        assertEquals(false, SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n-        assertEquals(true, SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.0\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.1\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.2\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.3\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.4\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.5\"));\n+        assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, \"1.6\"));\n+        assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, \"1.7\"));\n     }\n \n     @Test\n     public void testOSMatchesName() {\n         String osName = null;\n-        assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+        assertFalse(SystemUtils.isOSNameMatch(osName, \"Windows\"));\n         osName = \"\";\n-        assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+        assertFalse(SystemUtils.isOSNameMatch(osName, \"Windows\"));\n         osName = \"Windows 95\";\n-        assertEquals(true, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+        assertTrue(SystemUtils.isOSNameMatch(osName, \"Windows\"));\n         osName = \"Windows NT\";\n-        assertEquals(true, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+        assertTrue(SystemUtils.isOSNameMatch(osName, \"Windows\"));\n         osName = \"OS/2\";\n-        assertEquals(false, SystemUtils.isOSNameMatch(osName, \"Windows\"));\n+        assertFalse(SystemUtils.isOSNameMatch(osName, \"Windows\"));\n     }\n \n     @Test\n     public void testOSMatchesNameAndVersion() {\n         String osName = null;\n         String osVersion = null;\n-        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        assertFalse(SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n         osName = \"\";\n         osVersion = \"\";\n-        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        assertFalse(SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n         osName = \"Windows 95\";\n         osVersion = \"4.0\";\n-        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        assertFalse(SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n         osName = \"Windows 95\";\n         osVersion = \"4.1\";\n-        assertEquals(true, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        assertTrue(SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n         osName = \"Windows 98\";\n         osVersion = \"4.1\";\n-        assertEquals(true, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        assertTrue(SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n         osName = \"Windows NT\";\n         osVersion = \"4.0\";\n-        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        assertFalse(SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n         osName = \"OS/2\";\n         osVersion = \"4.0\";\n-        assertEquals(false, SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n+        assertFalse(SystemUtils.isOSMatch(osName, osVersion, \"Windows 9\", \"4.1\"));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/ValidateTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ValidateTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.lang.reflect.Constructor;\n         assertNotNull(new Validate());\n         Constructor<?>[] cons = Validate.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(Validate.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(Validate.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(Validate.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(Validate.class.getModifiers()));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n         assertNotNull(new ExceptionUtils());\n         Constructor<?>[] cons = ExceptionUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(ExceptionUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(ExceptionUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(ExceptionUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(ExceptionUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n                 break;\n             }\n         }\n-        assertEquals(true, match);\n+        assertTrue(match);\n         \n         stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause);\n         match = false;\n                 break;\n             }\n         }\n-        assertEquals(false, match);\n+        assertFalse(match);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/math/FractionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/FractionTest.java\n         Fraction f2 = null;\n         \n         f1 = Fraction.getFraction(3, 5);\n-        assertEquals(false, f1.equals(null));\n-        assertEquals(false, f1.equals(new Object()));\n-        assertEquals(false, f1.equals(Integer.valueOf(6)));\n+        assertFalse(f1.equals(null));\n+        assertFalse(f1.equals(new Object()));\n+        assertFalse(f1.equals(Integer.valueOf(6)));\n         \n         f1 = Fraction.getFraction(3, 5);\n         f2 = Fraction.getFraction(2, 5);\n-        assertEquals(false, f1.equals(f2));\n-        assertEquals(true, f1.equals(f1));\n-        assertEquals(true, f2.equals(f2));\n+        assertFalse(f1.equals(f2));\n+        assertTrue(f1.equals(f1));\n+        assertTrue(f2.equals(f2));\n         \n         f2 = Fraction.getFraction(3, 5);\n-        assertEquals(true, f1.equals(f2));\n+        assertTrue(f1.equals(f2));\n         \n         f2 = Fraction.getFraction(6, 10);\n-        assertEquals(false, f1.equals(f2));\n+        assertFalse(f1.equals(f2));\n     }\n     \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n         final MutableByte mutNumB = new MutableByte((byte) 0);\n         final MutableByte mutNumC = new MutableByte((byte) 1);\n \n-        assertEquals(true, mutNumA.equals(mutNumA));\n-        assertEquals(true, mutNumA.equals(mutNumB));\n-        assertEquals(true, mutNumB.equals(mutNumA));\n-        assertEquals(true, mutNumB.equals(mutNumB));\n-        assertEquals(false, mutNumA.equals(mutNumC));\n-        assertEquals(false, mutNumB.equals(mutNumC));\n-        assertEquals(true, mutNumC.equals(mutNumC));\n-        assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(Byte.valueOf((byte) 0)));\n-        assertEquals(false, mutNumA.equals(\"0\"));\n+        assertTrue(mutNumA.equals(mutNumA));\n+        assertTrue(mutNumA.equals(mutNumB));\n+        assertTrue(mutNumB.equals(mutNumA));\n+        assertTrue(mutNumB.equals(mutNumB));\n+        assertFalse(mutNumA.equals(mutNumC));\n+        assertFalse(mutNumB.equals(mutNumC));\n+        assertTrue(mutNumC.equals(mutNumC));\n+        assertFalse(mutNumA.equals(null));\n+        assertFalse(mutNumA.equals(Byte.valueOf((byte) 0)));\n+        assertFalse(mutNumA.equals(\"0\"));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableDoubleTest.java\n     @Test\n     public void testNanInfinite() {\n         MutableDouble mutNum = new MutableDouble(Double.NaN);\n-        assertEquals(true, mutNum.isNaN());\n+        assertTrue(mutNum.isNaN());\n         \n         mutNum = new MutableDouble(Double.POSITIVE_INFINITY);\n-        assertEquals(true, mutNum.isInfinite());\n+        assertTrue(mutNum.isInfinite());\n         \n         mutNum = new MutableDouble(Double.NEGATIVE_INFINITY);\n-        assertEquals(true, mutNum.isInfinite());\n+        assertTrue(mutNum.isInfinite());\n     }\n \n     @Test\n         final MutableDouble mutNumB = new MutableDouble(0d);\n         final MutableDouble mutNumC = new MutableDouble(1d);\n \n-        assertEquals(true, mutNumA.equals(mutNumA));\n-        assertEquals(true, mutNumA.equals(mutNumB));\n-        assertEquals(true, mutNumB.equals(mutNumA));\n-        assertEquals(true, mutNumB.equals(mutNumB));\n-        assertEquals(false, mutNumA.equals(mutNumC));\n-        assertEquals(false, mutNumB.equals(mutNumC));\n-        assertEquals(true, mutNumC.equals(mutNumC));\n-        assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(Double.valueOf(0d)));\n-        assertEquals(false, mutNumA.equals(\"0\"));\n+        assertTrue(mutNumA.equals(mutNumA));\n+        assertTrue(mutNumA.equals(mutNumB));\n+        assertTrue(mutNumB.equals(mutNumA));\n+        assertTrue(mutNumB.equals(mutNumB));\n+        assertFalse(mutNumA.equals(mutNumC));\n+        assertFalse(mutNumB.equals(mutNumC));\n+        assertTrue(mutNumC.equals(mutNumC));\n+        assertFalse(mutNumA.equals(null));\n+        assertFalse(mutNumA.equals(Double.valueOf(0d)));\n+        assertFalse(mutNumA.equals(\"0\"));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableFloatTest.java\n     @Test\n     public void testNanInfinite() {\n         MutableFloat mutNum = new MutableFloat(Float.NaN);\n-        assertEquals(true, mutNum.isNaN());\n+        assertTrue(mutNum.isNaN());\n         \n         mutNum = new MutableFloat(Float.POSITIVE_INFINITY);\n-        assertEquals(true, mutNum.isInfinite());\n+        assertTrue(mutNum.isInfinite());\n         \n         mutNum = new MutableFloat(Float.NEGATIVE_INFINITY);\n-        assertEquals(true, mutNum.isInfinite());\n+        assertTrue(mutNum.isInfinite());\n     }\n \n     @Test\n         final MutableFloat mutNumB = new MutableFloat(0f);\n         final MutableFloat mutNumC = new MutableFloat(1f);\n \n-        assertEquals(true, mutNumA.equals(mutNumA));\n-        assertEquals(true, mutNumA.equals(mutNumB));\n-        assertEquals(true, mutNumB.equals(mutNumA));\n-        assertEquals(true, mutNumB.equals(mutNumB));\n-        assertEquals(false, mutNumA.equals(mutNumC));\n-        assertEquals(false, mutNumB.equals(mutNumC));\n-        assertEquals(true, mutNumC.equals(mutNumC));\n-        assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(Float.valueOf(0f)));\n-        assertEquals(false, mutNumA.equals(\"0\"));\n+        assertTrue(mutNumA.equals(mutNumA));\n+        assertTrue(mutNumA.equals(mutNumB));\n+        assertTrue(mutNumB.equals(mutNumA));\n+        assertTrue(mutNumB.equals(mutNumB));\n+        assertFalse(mutNumA.equals(mutNumC));\n+        assertFalse(mutNumB.equals(mutNumC));\n+        assertTrue(mutNumC.equals(mutNumC));\n+        assertFalse(mutNumA.equals(null));\n+        assertFalse(mutNumA.equals(Float.valueOf(0f)));\n+        assertFalse(mutNumA.equals(\"0\"));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n      * @param numC must not equal numA; must not equal numC.\n      */\n     void testEquals(final Number numA, final Number numB, final Number numC) {\n-        assertEquals(true, numA.equals(numA));\n-        assertEquals(true, numA.equals(numB));\n-        assertEquals(true, numB.equals(numA));\n-        assertEquals(true, numB.equals(numB));\n-        assertEquals(false, numA.equals(numC));\n-        assertEquals(false, numB.equals(numC));\n-        assertEquals(true, numC.equals(numC));\n-        assertEquals(false, numA.equals(null));\n-        assertEquals(false, numA.equals(Integer.valueOf(0)));\n-        assertEquals(false, numA.equals(\"0\"));\n+        assertTrue(numA.equals(numA));\n+        assertTrue(numA.equals(numB));\n+        assertTrue(numB.equals(numA));\n+        assertTrue(numB.equals(numB));\n+        assertFalse(numA.equals(numC));\n+        assertFalse(numB.equals(numC));\n+        assertTrue(numC.equals(numC));\n+        assertFalse(numA.equals(null));\n+        assertFalse(numA.equals(Integer.valueOf(0)));\n+        assertFalse(numA.equals(\"0\"));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableLongTest.java\n         final MutableLong mutNumB = new MutableLong(0);\n         final MutableLong mutNumC = new MutableLong(1);\n \n-        assertEquals(true, mutNumA.equals(mutNumA));\n-        assertEquals(true, mutNumA.equals(mutNumB));\n-        assertEquals(true, mutNumB.equals(mutNumA));\n-        assertEquals(true, mutNumB.equals(mutNumB));\n-        assertEquals(false, mutNumA.equals(mutNumC));\n-        assertEquals(false, mutNumB.equals(mutNumC));\n-        assertEquals(true, mutNumC.equals(mutNumC));\n-        assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(Long.valueOf(0)));\n-        assertEquals(false, mutNumA.equals(\"0\"));\n+        assertTrue(mutNumA.equals(mutNumA));\n+        assertTrue(mutNumA.equals(mutNumB));\n+        assertTrue(mutNumB.equals(mutNumA));\n+        assertTrue(mutNumB.equals(mutNumB));\n+        assertFalse(mutNumA.equals(mutNumC));\n+        assertFalse(mutNumB.equals(mutNumC));\n+        assertTrue(mutNumC.equals(mutNumC));\n+        assertFalse(mutNumA.equals(null));\n+        assertFalse(mutNumA.equals(Long.valueOf(0)));\n+        assertFalse(mutNumA.equals(\"0\"));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n         final MutableObject<String> mutNumC = new MutableObject<String>(\"BETA\");\n         final MutableObject<String> mutNumD = new MutableObject<String>(null);\n \n-        assertEquals(true, mutNumA.equals(mutNumA));\n-        assertEquals(true, mutNumA.equals(mutNumB));\n-        assertEquals(true, mutNumB.equals(mutNumA));\n-        assertEquals(true, mutNumB.equals(mutNumB));\n-        assertEquals(false, mutNumA.equals(mutNumC));\n-        assertEquals(false, mutNumB.equals(mutNumC));\n-        assertEquals(true, mutNumC.equals(mutNumC));\n-        assertEquals(false, mutNumA.equals(mutNumD));\n-        assertEquals(true, mutNumD.equals(mutNumD));\n+        assertTrue(mutNumA.equals(mutNumA));\n+        assertTrue(mutNumA.equals(mutNumB));\n+        assertTrue(mutNumB.equals(mutNumA));\n+        assertTrue(mutNumB.equals(mutNumB));\n+        assertFalse(mutNumA.equals(mutNumC));\n+        assertFalse(mutNumB.equals(mutNumC));\n+        assertTrue(mutNumC.equals(mutNumC));\n+        assertFalse(mutNumA.equals(mutNumD));\n+        assertTrue(mutNumD.equals(mutNumD));\n         \n-        assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(new Object()));\n-        assertEquals(false, mutNumA.equals(\"0\"));\n+        assertFalse(mutNumA.equals(null));\n+        assertFalse(mutNumA.equals(new Object()));\n+        assertFalse(mutNumA.equals(\"0\"));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java\n         final MutableShort mutNumB = new MutableShort((short) 0);\n         final MutableShort mutNumC = new MutableShort((short) 1);\n \n-        assertEquals(true, mutNumA.equals(mutNumA));\n-        assertEquals(true, mutNumA.equals(mutNumB));\n-        assertEquals(true, mutNumB.equals(mutNumA));\n-        assertEquals(true, mutNumB.equals(mutNumB));\n-        assertEquals(false, mutNumA.equals(mutNumC));\n-        assertEquals(false, mutNumB.equals(mutNumC));\n-        assertEquals(true, mutNumC.equals(mutNumC));\n-        assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(Short.valueOf((short) 0)));\n-        assertEquals(false, mutNumA.equals(\"0\"));\n+        assertTrue(mutNumA.equals(mutNumA));\n+        assertTrue(mutNumA.equals(mutNumB));\n+        assertTrue(mutNumB.equals(mutNumA));\n+        assertTrue(mutNumB.equals(mutNumB));\n+        assertFalse(mutNumA.equals(mutNumC));\n+        assertFalse(mutNumB.equals(mutNumC));\n+        assertTrue(mutNumC.equals(mutNumC));\n+        assertFalse(mutNumA.equals(null));\n+        assertFalse(mutNumA.equals(Short.valueOf((short) 0)));\n+        assertFalse(mutNumA.equals(\"0\"));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java\n     public void testEnsureCapacity() {\n         StrBuilder sb = new StrBuilder();\n         sb.ensureCapacity(2);\n-        assertEquals(true, sb.capacity() >= 2);\n+        assertTrue(sb.capacity() >= 2);\n         \n         sb.ensureCapacity(-1);\n-        assertEquals(true, sb.capacity() >= 0);\n+        assertTrue(sb.capacity() >= 0);\n         \n         sb.append(\"HelloWorld\");\n         sb.ensureCapacity(40);\n-        assertEquals(true, sb.capacity() >= 40);\n+        assertTrue(sb.capacity() >= 40);\n     }\n \n     @Test\n     @Test\n     public void testIsEmpty() {\n         StrBuilder sb = new StrBuilder();\n-        assertEquals(true, sb.isEmpty());\n+        assertTrue(sb.isEmpty());\n         \n         sb.append(\"Hello\");\n-        assertEquals(false, sb.isEmpty());\n+        assertFalse(sb.isEmpty());\n         \n         sb.clear();\n-        assertEquals(true, sb.isEmpty());\n+        assertTrue(sb.isEmpty());\n     }\n \n     @Test\n         sb.append(\"Hello\");\n         sb.clear();\n         assertEquals(0, sb.length());\n-        assertEquals(true, sb.buffer.length >= 5);\n+        assertTrue(sb.buffer.length >= 5);\n     }\n \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContains_char() {\n         StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n-        assertEquals(true, sb.contains('a'));\n-        assertEquals(true, sb.contains('o'));\n-        assertEquals(true, sb.contains('z'));\n-        assertEquals(false, sb.contains('1'));\n+        assertTrue(sb.contains('a'));\n+        assertTrue(sb.contains('o'));\n+        assertTrue(sb.contains('z'));\n+        assertFalse(sb.contains('1'));\n     }\n \n     @Test\n     public void testContains_String() {\n         StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n-        assertEquals(true, sb.contains(\"a\"));\n-        assertEquals(true, sb.contains(\"pq\"));\n-        assertEquals(true, sb.contains(\"z\"));\n-        assertEquals(false, sb.contains(\"zyx\"));\n-        assertEquals(false, sb.contains((String) null));\n+        assertTrue(sb.contains(\"a\"));\n+        assertTrue(sb.contains(\"pq\"));\n+        assertTrue(sb.contains(\"z\"));\n+        assertFalse(sb.contains(\"zyx\"));\n+        assertFalse(sb.contains((String) null));\n     }\n \n     @Test\n     public void testContains_StrMatcher() {\n         StrBuilder sb = new StrBuilder(\"abcdefghijklmnopqrstuvwxyz\");\n-        assertEquals(true, sb.contains(StrMatcher.charMatcher('a')));\n-        assertEquals(true, sb.contains(StrMatcher.stringMatcher(\"pq\")));\n-        assertEquals(true, sb.contains(StrMatcher.charMatcher('z')));\n-        assertEquals(false, sb.contains(StrMatcher.stringMatcher(\"zy\")));\n-        assertEquals(false, sb.contains((StrMatcher) null));\n+        assertTrue(sb.contains(StrMatcher.charMatcher('a')));\n+        assertTrue(sb.contains(StrMatcher.stringMatcher(\"pq\")));\n+        assertTrue(sb.contains(StrMatcher.charMatcher('z')));\n+        assertFalse(sb.contains(StrMatcher.stringMatcher(\"zy\")));\n+        assertFalse(sb.contains((StrMatcher) null));\n \n         sb = new StrBuilder();\n-        assertEquals(false, sb.contains(A_NUMBER_MATCHER));\n+        assertFalse(sb.contains(A_NUMBER_MATCHER));\n         sb.append(\"B A1 C\");\n-        assertEquals(true, sb.contains(A_NUMBER_MATCHER));\n+        assertTrue(sb.contains(A_NUMBER_MATCHER));\n     }\n \n     // -----------------------------------------------------------------------\n     public void testAsReader() throws Exception {\n         StrBuilder sb = new StrBuilder(\"some text\");\n         Reader reader = sb.asReader();\n-        assertEquals(true, reader.ready());\n+        assertTrue(reader.ready());\n         char[] buf = new char[40];\n         assertEquals(9, reader.read(buf));\n         assertEquals(\"some text\", new String(buf, 0, 9));\n         \n         assertEquals(-1, reader.read());\n-        assertEquals(false, reader.ready());\n+        assertFalse(reader.ready());\n         assertEquals(0, reader.skip(2));\n         assertEquals(0, reader.skip(-1));\n         \n-        assertEquals(true, reader.markSupported());\n+        assertTrue(reader.markSupported());\n         reader = sb.asReader();\n         assertEquals('s', reader.read());\n         reader.mark(-1);\n         assertEquals(2, reader.skip(2));\n         assertEquals(' ', reader.read());\n         \n-        assertEquals(true, reader.ready());\n+        assertTrue(reader.ready());\n         reader.close();\n-        assertEquals(true, reader.ready());\n+        assertTrue(reader.ready());\n         \n         reader = sb.asReader();\n         array = new char[3];\n     public void testEqualsIgnoreCase() {\n         StrBuilder sb1 = new StrBuilder();\n         StrBuilder sb2 = new StrBuilder();\n-        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n-        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n-        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n+        assertTrue(sb1.equalsIgnoreCase(sb1));\n+        assertTrue(sb1.equalsIgnoreCase(sb2));\n+        assertTrue(sb2.equalsIgnoreCase(sb2));\n         \n         sb1.append(\"abc\");\n-        assertEquals(false, sb1.equalsIgnoreCase(sb2));\n+        assertFalse(sb1.equalsIgnoreCase(sb2));\n         \n         sb2.append(\"ABC\");\n-        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+        assertTrue(sb1.equalsIgnoreCase(sb2));\n         \n         sb2.clear().append(\"abc\");\n-        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n-        assertEquals(true, sb1.equalsIgnoreCase(sb1));\n-        assertEquals(true, sb2.equalsIgnoreCase(sb2));\n+        assertTrue(sb1.equalsIgnoreCase(sb2));\n+        assertTrue(sb1.equalsIgnoreCase(sb1));\n+        assertTrue(sb2.equalsIgnoreCase(sb2));\n         \n         sb2.clear().append(\"aBc\");\n-        assertEquals(true, sb1.equalsIgnoreCase(sb2));\n+        assertTrue(sb1.equalsIgnoreCase(sb2));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testEquals() {\n         StrBuilder sb1 = new StrBuilder();\n         StrBuilder sb2 = new StrBuilder();\n-        assertEquals(true, sb1.equals(sb2));\n-        assertEquals(true, sb1.equals(sb1));\n-        assertEquals(true, sb2.equals(sb2));\n-        assertEquals(true, sb1.equals((Object) sb2));\n+        assertTrue(sb1.equals(sb2));\n+        assertTrue(sb1.equals(sb1));\n+        assertTrue(sb2.equals(sb2));\n+        assertTrue(sb1.equals((Object) sb2));\n         \n         sb1.append(\"abc\");\n-        assertEquals(false, sb1.equals(sb2));\n-        assertEquals(false, sb1.equals((Object) sb2));\n+        assertFalse(sb1.equals(sb2));\n+        assertFalse(sb1.equals((Object) sb2));\n         \n         sb2.append(\"ABC\");\n-        assertEquals(false, sb1.equals(sb2));\n-        assertEquals(false, sb1.equals((Object) sb2));\n+        assertFalse(sb1.equals(sb2));\n+        assertFalse(sb1.equals((Object) sb2));\n         \n         sb2.clear().append(\"abc\");\n-        assertEquals(true, sb1.equals(sb2));\n-        assertEquals(true, sb1.equals((Object) sb2));\n-        \n-        assertEquals(false, sb1.equals(Integer.valueOf(1)));\n-        assertEquals(false, sb1.equals(\"abc\"));\n+        assertTrue(sb1.equals(sb2));\n+        assertTrue(sb1.equals((Object) sb2));\n+        \n+        assertFalse(sb1.equals(Integer.valueOf(1)));\n+        assertFalse(sb1.equals(\"abc\"));\n     }\n \n     //-----------------------------------------------------------------------\n         sb.append(\"abc\");\n         int hc2a = sb.hashCode();\n         int hc2b = sb.hashCode();\n-        assertEquals(true, hc2a != 0);\n+        assertTrue(hc2a != 0);\n         assertEquals(hc2a, hc2b);\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrSubstitutorTest.java\n     @Test\n     public void testGetSetPrefix() {\n         StrSubstitutor sub = new StrSubstitutor();\n-        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n+        assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n         sub.setVariablePrefix('<');\n-        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher);\n+        assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher);\n \n         sub.setVariablePrefix(\"<<\");\n-        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n+        assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n         try {\n             sub.setVariablePrefix((String) null);\n             fail();\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n-        assertEquals(true, sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n+        assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher);\n \n         StrMatcher matcher = StrMatcher.commaMatcher();\n         sub.setVariablePrefixMatcher(matcher);\n     @Test\n     public void testGetSetSuffix() {\n         StrSubstitutor sub = new StrSubstitutor();\n-        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n+        assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n         sub.setVariableSuffix('<');\n-        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher);\n+        assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher);\n \n         sub.setVariableSuffix(\"<<\");\n-        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n+        assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n         try {\n             sub.setVariableSuffix((String) null);\n             fail();\n         } catch (IllegalArgumentException ex) {\n             // expected\n         }\n-        assertEquals(true, sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n+        assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher);\n \n         StrMatcher matcher = StrMatcher.commaMatcher();\n         sub.setVariableSuffixMatcher(matcher);\n \n         // replace in StringBuffer\n         buf = new StringBuffer(replaceTemplate);\n-        assertEquals(true, sub.replaceIn(buf));\n+        assertTrue(sub.replaceIn(buf));\n         assertEquals(expectedResult, buf.toString());\n         if (substring) {\n             buf = new StringBuffer(replaceTemplate);\n-            assertEquals(true, sub.replaceIn(buf, 1, buf.length() - 2));\n+            assertTrue(sub.replaceIn(buf, 1, buf.length() - 2));\n             assertEquals(expectedResult, buf.toString());  // expect full result as remainder is untouched\n         }\n \n         // replace in StrBuilder\n         bld = new StrBuilder(replaceTemplate);\n-        assertEquals(true, sub.replaceIn(bld));\n+        assertTrue(sub.replaceIn(bld));\n         assertEquals(expectedResult, bld.toString());\n         if (substring) {\n             bld = new StrBuilder(replaceTemplate);\n-            assertEquals(true, sub.replaceIn(bld, 1, bld.length() - 2));\n+            assertTrue(sub.replaceIn(bld, 1, bld.length() - 2));\n             assertEquals(expectedResult, bld.toString());  // expect full result as remainder is untouched\n         }\n     }\n             assertEquals(null, sub.replace((StrBuilder) null));\n             assertEquals(null, sub.replace((StrBuilder) null, 0, 100));\n             assertEquals(null, sub.replace((Object) null));\n-            assertEquals(false, sub.replaceIn((StringBuffer) null));\n-            assertEquals(false, sub.replaceIn((StringBuffer) null, 0, 100));\n-            assertEquals(false, sub.replaceIn((StrBuilder) null));\n-            assertEquals(false, sub.replaceIn((StrBuilder) null, 0, 100));\n+            assertFalse(sub.replaceIn((StringBuffer) null));\n+            assertFalse(sub.replaceIn((StringBuffer) null, 0, 100));\n+            assertFalse(sub.replaceIn((StrBuilder) null));\n+            assertFalse(sub.replaceIn((StrBuilder) null, 0, 100));\n         } else {\n             assertEquals(replaceTemplate, sub.replace(replaceTemplate));\n             StrBuilder bld = new StrBuilder(replaceTemplate);\n-            assertEquals(false, sub.replaceIn(bld));\n+            assertFalse(sub.replaceIn(bld));\n             assertEquals(replaceTemplate, bld.toString());\n         }\n     }\n--- a/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrTokenizerTest.java\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\\u0001\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"\\\"b\\\"\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b'\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         String input = \"a:b:c\";\n         StrTokenizer tok = new StrTokenizer(input, ',');\n         assertEquals(\"a:b:c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(null, tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(null, tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         tok.setEmptyTokenAsNull(true);\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b'c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b c\", tok.next());\n         assertEquals(\"d\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"bxc\", tok.next());\n         assertEquals(\"d\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         tok.setQuoteMatcher(StrMatcher.quoteMatcher());\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\\\"c:d\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"There's a reason here\", tok.next());\n         assertEquals(\"b\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(null, tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(null, tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(null, tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"bc\", tok.next());\n         assertEquals(null, tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"bc\", tok.next());\n         assertEquals(null, tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"  bc  \", tok.next());\n         assertEquals(\"  \", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     @Test\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"bIGNOREcd\", tok.next());\n         assertEquals(null, tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n \n     void testEmpty(StrTokenizer tokenizer) {\n         this.checkClone(tokenizer);\n-        assertEquals(false, tokenizer.hasNext());\n-        assertEquals(false, tokenizer.hasPrevious());\n+        assertFalse(tokenizer.hasNext());\n+        assertFalse(tokenizer.hasPrevious());\n         assertEquals(null, tokenizer.nextToken());\n         assertEquals(0, tokenizer.size());\n         try {\n         StrTokenizer tok = new StrTokenizer(\"a b\");\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer(\"\");\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer((String) null);\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer(\"\", ' ');\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer((String) null, ' ');\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer(\"\", ' ', '\"');\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer((String) null, ' ', '\"');\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n         StrTokenizer tok = new StrTokenizer(\"a b\".toCharArray());\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer(new char[0]);\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer((char[]) null);\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(1, tok.getDelimiterMatcher().isMatch(\" \".toCharArray(), 0, 0, 1));\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer(new char[0], ' ');\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer((char[]) null, ' ');\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(1, tok.getQuoteMatcher().isMatch(\"\\\"\".toCharArray(), 0, 0, 1));\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer(new char[0], ' ', '\"');\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok = new StrTokenizer((char[]) null, ' ', '\"');\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok.reset();\n         assertEquals(\"a\", tok.next());\n         assertEquals(\"b\", tok.next());\n         assertEquals(\"c\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n         tok.reset(\"d e\");\n         assertEquals(\"d\", tok.next());\n         assertEquals(\"e\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok.reset((String) null);\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n         char[] array = new char[] {'a', 'b', 'c'};\n         tok.reset(array);\n         assertEquals(\"abc\", tok.next());\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n         \n         tok.reset((char[]) null);\n-        assertEquals(false, tok.hasNext());\n+        assertFalse(tok.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n     @Test\n     public void testIteration() {\n         StrTokenizer tkn = new StrTokenizer(\"a b c\");\n-        assertEquals(false, tkn.hasPrevious());\n+        assertFalse(tkn.hasPrevious());\n         try {\n             tkn.previous();\n             fail();\n         } catch (NoSuchElementException ex) {}\n-        assertEquals(true, tkn.hasNext());\n+        assertTrue(tkn.hasNext());\n         \n         assertEquals(\"a\", tkn.next());\n         try {\n             tkn.add(\"y\");\n             fail();\n         } catch (UnsupportedOperationException ex) {}\n-        assertEquals(true, tkn.hasPrevious());\n-        assertEquals(true, tkn.hasNext());\n+        assertTrue(tkn.hasPrevious());\n+        assertTrue(tkn.hasNext());\n         \n         assertEquals(\"b\", tkn.next());\n-        assertEquals(true, tkn.hasPrevious());\n-        assertEquals(true, tkn.hasNext());\n+        assertTrue(tkn.hasPrevious());\n+        assertTrue(tkn.hasNext());\n         \n         assertEquals(\"c\", tkn.next());\n-        assertEquals(true, tkn.hasPrevious());\n-        assertEquals(false, tkn.hasNext());\n+        assertTrue(tkn.hasPrevious());\n+        assertFalse(tkn.hasNext());\n         \n         try {\n             tkn.next();\n             fail();\n         } catch (NoSuchElementException ex) {}\n-        assertEquals(true, tkn.hasPrevious());\n-        assertEquals(false, tkn.hasNext());\n+        assertTrue(tkn.hasPrevious());\n+        assertFalse(tkn.hasNext());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/WordUtilsTest.java\n package org.apache.commons.lang3.text;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n         assertNotNull(new WordUtils());\n         Constructor<?>[] cons = WordUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(WordUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(WordUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(WordUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(WordUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n         assertNotNull(new DateFormatUtils());\n         Constructor<?>[] cons = DateFormatUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(DateFormatUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(DateFormatUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(DateFormatUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(DateFormatUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateUtilsTest.java\n         assertNotNull(new DateUtils());\n         Constructor<?>[] cons = DateUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(DateUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(DateUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(DateUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(DateUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n     public void testIsSameDay_Date() {\n         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n-        assertEquals(true, DateUtils.isSameDay(date1, date2));\n+        assertTrue(DateUtils.isSameDay(date1, date2));\n         date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n-        assertEquals(false, DateUtils.isSameDay(date1, date2));\n+        assertFalse(DateUtils.isSameDay(date1, date2));\n         date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n-        assertEquals(true, DateUtils.isSameDay(date1, date2));\n+        assertTrue(DateUtils.isSameDay(date1, date2));\n         date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n-        assertEquals(false, DateUtils.isSameDay(date1, date2));\n+        assertFalse(DateUtils.isSameDay(date1, date2));\n         try {\n             DateUtils.isSameDay((Date) null, (Date) null);\n             fail();\n     public void testIsSameDay_Cal() {\n         GregorianCalendar cal1 = new GregorianCalendar(2004, 6, 9, 13, 45);\n         GregorianCalendar cal2 = new GregorianCalendar(2004, 6, 9, 13, 45);\n-        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n+        assertTrue(DateUtils.isSameDay(cal1, cal2));\n         cal2.add(Calendar.DAY_OF_YEAR, 1);\n-        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n+        assertFalse(DateUtils.isSameDay(cal1, cal2));\n         cal1.add(Calendar.DAY_OF_YEAR, 1);\n-        assertEquals(true, DateUtils.isSameDay(cal1, cal2));\n+        assertTrue(DateUtils.isSameDay(cal1, cal2));\n         cal2.add(Calendar.YEAR, 1);\n-        assertEquals(false, DateUtils.isSameDay(cal1, cal2));\n+        assertFalse(DateUtils.isSameDay(cal1, cal2));\n         try {\n             DateUtils.isSameDay((Calendar) null, (Calendar) null);\n             fail();\n     public void testIsSameInstant_Date() {\n         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime();\n-        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n+        assertTrue(DateUtils.isSameInstant(date1, date2));\n         date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n-        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n+        assertFalse(DateUtils.isSameInstant(date1, date2));\n         date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime();\n-        assertEquals(true, DateUtils.isSameInstant(date1, date2));\n+        assertTrue(DateUtils.isSameInstant(date1, date2));\n         date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime();\n-        assertEquals(false, DateUtils.isSameInstant(date1, date2));\n+        assertFalse(DateUtils.isSameInstant(date1, date2));\n         try {\n             DateUtils.isSameInstant((Date) null, (Date) null);\n             fail();\n         cal1.set(Calendar.MILLISECOND, 0);\n         cal2.set(2004, 6, 9, 13, 45, 0);\n         cal2.set(Calendar.MILLISECOND, 0);\n-        assertEquals(false, DateUtils.isSameInstant(cal1, cal2));\n+        assertFalse(DateUtils.isSameInstant(cal1, cal2));\n         \n         cal2.set(2004, 6, 9, 11, 45, 0);\n-        assertEquals(true, DateUtils.isSameInstant(cal1, cal2));\n+        assertTrue(DateUtils.isSameInstant(cal1, cal2));\n         try {\n             DateUtils.isSameInstant((Calendar) null, (Calendar) null);\n             fail();\n         cal1.set(Calendar.MILLISECOND, 0);\n         cal2.set(2004, 6, 9, 13, 45, 0);\n         cal2.set(Calendar.MILLISECOND, 0);\n-        assertEquals(true, DateUtils.isSameLocalTime(cal1, cal2));\n+        assertTrue(DateUtils.isSameLocalTime(cal1, cal2));\n \n         Calendar cal3 = Calendar.getInstance();\n         Calendar cal4 = Calendar.getInstance();\n         assertFalse(\"LANG-677\", DateUtils.isSameLocalTime(cal3, cal4));\n         \n         cal2.set(2004, 6, 9, 11, 45, 0);\n-        assertEquals(false, DateUtils.isSameLocalTime(cal1, cal2));\n+        assertFalse(DateUtils.isSameLocalTime(cal1, cal2));\n         try {\n             DateUtils.isSameLocalTime((Calendar) null, (Calendar) null);\n             fail();\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n         assertNotNull(new DurationFormatUtils());\n         Constructor<?>[] cons = DurationFormatUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(DurationFormatUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(DurationFormatUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(DurationFormatUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(DurationFormatUtils.class.getModifiers()));\n     }\n \n     // -----------------------------------------------------------------------", "timestamp": 1348018162, "metainfo": ""}