{"sha": "76fcabe0452294e2d58249d67741540a8154e9a0", "log": "Removed deprecated constructors from ReflectionToStringBuilder [LANG-438]  ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n     }\n \n     /**\n-     * <p>\n-     * Builds a <code>toString</code> value through reflection.\n-     * </p>\n-     * \n-     * <p>\n-     * It uses <code>AccessibleObject.setAccessible</code> to gain access to private fields. This means that it will\n-     * throw a security exception if run under a security manager, if the permissions are not set up correctly. It is\n-     * also not as efficient as testing explicitly.\n-     * </p>\n-     * \n-     * <p>\n-     * If the <code>outputTransients</code> is <code>true</code>, transient members will be output, otherwise they\n-     * are ignored, as they are likely derived fields, and not part of the value of the Object.\n-     * </p>\n-     * \n-     * <p>\n-     * Static fields will not be included. Superclass fields will be appended up to and including the specified\n-     * superclass. A null superclass is treated as <code>java.lang.Object</code>.\n-     * </p>\n-     * \n-     * <p>\n-     * If the style is <code>null</code>, the default <code>ToStringStyle</code> is used.\n-     * </p>\n-     * \n-     * @deprecated Use {@link #toString(Object,ToStringStyle,boolean,boolean,Class)}\n-     * \n-     * @param object\n-     *            the Object to be output\n-     * @param style\n-     *            the style of the <code>toString</code> to create, may be <code>null</code>\n-     * @param outputTransients\n-     *            whether to include transient fields\n-     * @param reflectUpToClass\n-     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n-     * @return the String result\n-     * @throws IllegalArgumentException\n-     *             if the Object is <code>null</code>\n-     * @since 2.0\n-     */\n-    public static String toString(Object object, ToStringStyle style, \n-                                  boolean outputTransients, Class reflectUpToClass) \n-    {\n-        return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients).toString();\n-    }\n-\n-    /**\n      * Builds a String for a toString method excluding the given field name.\n      * \n      * @param object\n      */\n     public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n         super(object, style, buffer);\n-    }\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @deprecated Use {@link #ReflectionToStringBuilder(Object,ToStringStyle,StringBuffer,Class,boolean,boolean)}.\n-     * \n-     * @param object\n-     *            the Object to build a <code>toString</code> for\n-     * @param style\n-     *            the style of the <code>toString</code> to create, may be <code>null</code>\n-     * @param buffer\n-     *            the <code>StringBuffer</code> to populate, may be <code>null</code>\n-     * @param reflectUpToClass\n-     *            the superclass to reflect up to (inclusive), may be <code>null</code>\n-     * @param outputTransients\n-     *            whether to include transient fields\n-     */\n-    public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer, Class reflectUpToClass,\n-            boolean outputTransients) {\n-        super(object, style, buffer);\n-        this.setUpToClass(reflectUpToClass);\n-        this.setAppendTransients(outputTransients);\n     }\n \n     /**", "timestamp": 1237048456, "metainfo": ""}