{"sha": "7dc851ac614cfff388ccef4abbcd854c33356a55", "log": "LANG-744 StringUtils throws java.security.AccessControlException on Google App Engine Change static code to catch and save Exception; only report failure if no method is available  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n         }\n         try {\n             String result = null;\n-            if (java6Available) {\n+            if (java6NormalizeMethod != null) {\n                 result = removeAccentsJava6(input);\n-            } else if (sunAvailable) {\n+            } else if (sunDecomposeMethod != null) {\n                 result = removeAccentsSUN(input);\n             } else {\n                 throw new UnsupportedOperationException(\n-                    \"The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM\");\n+                    \"The stripAccents(CharSequence) method requires at least Java 1.6 or a Sun JVM\",\n+                    new UnsupportedOperationException(java6Exception));\n             }\n             // Note that none of the above methods correctly remove ligatures...\n             return result;\n         String decomposed = java.text.Normalizer.normalize(CharSequence, Normalizer.Form.NFD);\n         return java6Pattern.matcher(decomposed).replaceAll(\"\");//$NON-NLS-1$\n         */\n-        if (!java6Available || java6NormalizerFormNFD == null) {\n-            throw new IllegalStateException(\"java.text.Normalizer is not available\");\n+        if (java6NormalizeMethod == null || java6NormalizerFormNFD == null) {\n+            throw new IllegalStateException(\"java.text.Normalizer is not available\", java6Exception);\n         }\n         String result;\n         result = (String) java6NormalizeMethod.invoke(null, new Object[] {text, java6NormalizerFormNFD});\n         String decomposed = sun.text.Normalizer.decompose(text, false, 0);\n         return sunPattern.matcher(decomposed).replaceAll(\"\");//$NON-NLS-1$\n         */\n-        if (! sunAvailable) {\n-            throw new IllegalStateException(\"sun.text.Normalizer is not available\");\n+        if (sunDecomposeMethod == null) {\n+            throw new IllegalStateException(\"sun.text.Normalizer is not available\", sunException);\n         }\n         String result;\n         result = (String) sunDecomposeMethod.invoke(null, new Object[] {text, Boolean.FALSE, Integer.valueOf(0)});\n     }\n \n     // SUN internal, Java 1.3 -> Java 5\n-    private static boolean sunAvailable = false;\n-    private static Method  sunDecomposeMethod = null;\n+    private static final Throwable sunException;\n+    private static final Method  sunDecomposeMethod;\n     private static final Pattern sunPattern = Pattern.compile(\"\\\\p{InCombiningDiacriticalMarks}+\");//$NON-NLS-1$\n     // Java 6+\n-    private static boolean java6Available = false;\n-    private static Method  java6NormalizeMethod = null;\n-    private static Object  java6NormalizerFormNFD = null;\n+    private static final Throwable java6Exception;\n+    private static final Method  java6NormalizeMethod;\n+    private static final Object  java6NormalizerFormNFD;\n     private static final Pattern java6Pattern = sunPattern;\n \n     static {\n+        // Set up defaults for final static fields\n+        Object _java6NormalizerFormNFD = null;\n+        Method _java6NormalizeMethod = null;\n+        Method _sunDecomposeMethod = null;\n+        Throwable _java6Exception = null;\n+        Throwable _sunException = null;\n         try {\n             // java.text.Normalizer.normalize(CharSequence, Normalizer.Form.NFD);\n             // Be careful not to get Java 1.3 java.text.Normalizer!\n             Class<?> normalizerFormClass = Thread.currentThread().getContextClassLoader()\n                 .loadClass(\"java.text.Normalizer$Form\");//$NON-NLS-1$\n-            java6NormalizerFormNFD = normalizerFormClass.getField(\"NFD\").get(null);//$NON-NLS-1$\n+            _java6NormalizerFormNFD = normalizerFormClass.getField(\"NFD\").get(null);//$NON-NLS-1$\n             Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n                 .loadClass(\"java.text.Normalizer\");//$NON-NLS-1$\n-            java6NormalizeMethod = normalizerClass.getMethod(\"normalize\",\n+            _java6NormalizeMethod = normalizerClass.getMethod(\"normalize\",//$NON-NLS-1$\n                     new Class[] {CharSequence.class, normalizerFormClass});//$NON-NLS-1$\n-            java6Available = true;\n-        } catch (ClassNotFoundException e) {\n-            java6Available = false;\n-        } catch (NoSuchFieldException e) {\n-            java6Available = false;\n-        } catch (IllegalAccessException e) {\n-            java6Available = false;\n-        } catch (NoSuchMethodException e) {\n-            java6Available = false;\n-        }\n-\n-        try {\n-            // sun.text.Normalizer.decompose(text, false, 0);\n-            Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n-                .loadClass(\"sun.text.Normalizer\");//$NON-NLS-1$\n-            sunDecomposeMethod = normalizerClass.getMethod(\"decompose\",\n-                    new Class[] {String.class, Boolean.TYPE, Integer.TYPE});//$NON-NLS-1$\n-            sunAvailable = true;\n-        } catch (ClassNotFoundException e) {\n-            sunAvailable = false;\n-        } catch (NoSuchMethodException e) {\n-            sunAvailable = false;\n-        } catch (java.security.AccessControlException e) {\n-            // LANG-744 - thrown when under a SecurityManager\n-            // we are not allowed to access this class\n-            System.err.println(\"Caught a AccessControlException loading sun.text.Normalizer. \" + \n-                               \"Adjust your security manager if you want to use the stripAccents method. \");\n-            sunAvailable = false;\n-        }\n+        } catch (Exception e1) {\n+            // Only check for Sun method if Java 6 method is not available\n+            _java6Exception = e1;\n+            try {\n+                // sun.text.Normalizer.decompose(text, false, 0);\n+                Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()\n+                    .loadClass(\"sun.text.Normalizer\");//$NON-NLS-1$\n+                _sunDecomposeMethod = normalizerClass.getMethod(\"decompose\",//$NON-NLS-1$\n+                        new Class[] {String.class, Boolean.TYPE, Integer.TYPE});//$NON-NLS-1$\n+            } catch (Exception e2) {\n+                _sunException = e2;\n+            }\n+        }\n+\n+        // Set up final static fields\n+        java6Exception = _java6Exception;\n+        java6NormalizerFormNFD = _java6NormalizerFormNFD;\n+        java6NormalizeMethod = _java6NormalizeMethod;\n+        sunException = _sunException;\n+        sunDecomposeMethod = _sunDecomposeMethod;\n     }\n \n     // Equals", "timestamp": 1315322207, "metainfo": ""}