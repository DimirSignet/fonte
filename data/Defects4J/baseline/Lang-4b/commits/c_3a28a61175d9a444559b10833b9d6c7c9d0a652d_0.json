{"sha": "3a28a61175d9a444559b10833b9d6c7c9d0a652d", "log": "Add final modifier to private fields.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java\n      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {\n         private static final Map<String, Class<?>> primitiveTypes = \n                 new HashMap<String, Class<?>>();\n-        private ClassLoader classLoader;\n+        private final ClassLoader classLoader;\n         \n         /**\n          * Constructor.\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n     // other object be an instance of CustomCharSequence, even though, as char sequences,\n     // `seq` may equal the other object.\n     private static class CustomCharSequence implements CharSequence {\n-        private CharSequence seq;\n+        private final CharSequence seq;\n \n         public CustomCharSequence(CharSequence seq) {\n             this.seq = seq;\n--- a/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n \n     static class TestTTLeafObject extends TestTTSubObject {\n         @SuppressWarnings(\"unused\")\n-        private int leafValue;\n+        private final int leafValue;\n         public TestTTLeafObject(int a, int t, int tt, int leafValue) {\n             super(a, t, tt);\n             this.leafValue = leafValue;\n     }\n     \n     public static class TestACanEqualB {\n-        private int a;\n+        private final int a;\n \n         public TestACanEqualB(int a) {\n             this.a = a;\n     }\n \n     public static class TestBCanEqualA {\n-        private int b;\n+        private final int b;\n \n         public TestBCanEqualA(int b) {\n             this.b = b;\n \n     static class TestObjectWithMultipleFields {\n         @SuppressWarnings(\"unused\")\n-        private TestObject one;\n+        private final TestObject one;\n         @SuppressWarnings(\"unused\")\n-        private TestObject two;\n+        private final TestObject two;\n         @SuppressWarnings(\"unused\")\n-        private TestObject three;\n+        private final TestObject three;\n \n         public TestObjectWithMultipleFields(int one, int two, int three) {\n             this.one = new TestObject(one);\n         @SuppressWarnings(\"unused\")\n         private TestObjectReference reference;\n         @SuppressWarnings(\"unused\")\n-        private TestObject one;\n+        private final TestObject one;\n \n         public TestObjectReference(int one) {\n             this.one = new TestObject(one);\n--- a/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderExcludeTest.java\n \n     class TestFixture {\n         @SuppressWarnings(\"unused\")\n-        private String secretField = SECRET_VALUE;\n+        private final String secretField = SECRET_VALUE;\n \n         @SuppressWarnings(\"unused\")\n-        private String showField = NOT_SECRET_VALUE;\n+        private final String showField = NOT_SECRET_VALUE;\n     }\n \n     private static final String NOT_SECRET_FIELD = \"showField\";\n--- a/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderMutateInspectConcurrencyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderMutateInspectConcurrencyTest.java\n     class TestFixture {\n         final private LinkedList<Integer> listField = new LinkedList<Integer>();\n         final private Random random = new Random();\n-        private int N = 100;\n+        private final int N = 100;\n \n         public TestFixture() {\n             synchronized (this) {\n--- a/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n \n     static class ReflectionTestFixtureA {\n         @SuppressWarnings(\"unused\")\n-        private char a='a';\n+        private final char a='a';\n         @SuppressWarnings(\"unused\")\n         private transient char transientA='t';\n     }\n \n     static class ReflectionTestFixtureB extends ReflectionTestFixtureA {\n         @SuppressWarnings(\"unused\")\n-        private char b='b';\n+        private final char b='b';\n         @SuppressWarnings(\"unused\")\n         private transient char transientB='t';\n     }\n \n     private static class SelfInstanceVarReflectionTestFixture {\n         @SuppressWarnings(\"unused\")\n-        private SelfInstanceVarReflectionTestFixture typeIsSelf;\n+        private final SelfInstanceVarReflectionTestFixture typeIsSelf;\n \n         public SelfInstanceVarReflectionTestFixture() {\n             this.typeIsSelf = this;\n \n     private static class SelfInstanceTwoVarsReflectionTestFixture {\n         @SuppressWarnings(\"unused\")\n-        private SelfInstanceTwoVarsReflectionTestFixture typeIsSelf;\n-        private String otherType = \"The Other Type\";\n+        private final SelfInstanceTwoVarsReflectionTestFixture typeIsSelf;\n+        private final String otherType = \"The Other Type\";\n \n         public SelfInstanceTwoVarsReflectionTestFixture() {\n             this.typeIsSelf = this;\n--- a/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n \n     private static class EventCountingInvociationHandler implements InvocationHandler\n     {\n-        private Map<String, Integer> eventCounts = new TreeMap<String, Integer>();\n+        private final Map<String, Integer> eventCounts = new TreeMap<String, Integer>();\n \n         public <L> L createListener(Class<L> listenerType)\n         {\n \n     public static class MultipleEventSource\n     {\n-        private EventListenerSupport<MultipleEventListener> listeners = EventListenerSupport.create(MultipleEventListener.class);\n+        private final EventListenerSupport<MultipleEventListener> listeners = EventListenerSupport.create(MultipleEventListener.class);\n \n         public void addMultipleEventListener(MultipleEventListener listener)\n         {\n \n     public static class PropertyChangeSource\n     {\n-        private EventListenerSupport<PropertyChangeListener> listeners = EventListenerSupport.create(PropertyChangeListener.class);\n+        private final EventListenerSupport<PropertyChangeListener> listeners = EventListenerSupport.create(PropertyChangeListener.class);\n \n         private String property;\n \n--- a/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/ConstructorUtilsTest.java\n  */\n public class ConstructorUtilsTest {\n     public static class TestBean {\n-        private String toString;\n+        private final String toString;\n \n         public TestBean() {\n             toString = \"()\";\n         }\n     }\n \n-    private Map<Class<?>, Class<?>[]> classCache;\n+    private final Map<Class<?>, Class<?>[]> classCache;\n \n     public ConstructorUtilsTest() {\n         classCache = new HashMap<Class<?>, Class<?>[]>();\n--- a/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n     private PublicChild publicChild;\n     private PubliclyShadowedChild publiclyShadowedChild;\n     private PrivatelyShadowedChild privatelyShadowedChild;\n-    private Class<?> parentClass = PublicChild.class.getSuperclass();\n+    private final Class<?> parentClass = PublicChild.class.getSuperclass();\n \n     @Before\n     public void setUp() {\n--- a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n     }\n \n     private TestBean testBean;\n-    private Map<Class<?>, Class<?>[]> classCache = new HashMap<Class<?>, Class<?>[]>();\n+    private final Map<Class<?>, Class<?>[]> classCache = new HashMap<Class<?>, Class<?>[]>();\n \n     @Before\n     public void setUp() throws Exception {\n--- a/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/Parent.java\n     protected boolean b = false;\n     int i = 0;\n     @SuppressWarnings(\"unused\")\n-    private double d = 0.0;\n+    private final double d = 0.0;\n }\n--- a/src/test/java/org/apache/commons/lang3/reflect/testbed/PrivatelyShadowedChild.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/testbed/PrivatelyShadowedChild.java\n  */\n @SuppressWarnings({ \"unused\", \"hiding\" }) // deliberate re-use of variable names\n public class PrivatelyShadowedChild extends Parent {\n-    private String s = \"ss\";\n-    private boolean b = true;\n-    private int i = 1;\n-    private double d = 1.0;\n+    private final String s = \"ss\";\n+    private final boolean b = true;\n+    private final int i = 1;\n+    private final double d = 1.0;\n }", "timestamp": 1358838341, "metainfo": ""}