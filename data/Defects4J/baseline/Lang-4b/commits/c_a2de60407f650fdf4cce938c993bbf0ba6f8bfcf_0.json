{"sha": "a2de60407f650fdf4cce938c993bbf0ba6f8bfcf", "log": "LANG-854 NumberUtils#createNumber - does not allow for hex numbers to be larger than Long  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n         }\n         if (StringUtils.isBlank(str)) {\n             throw new NumberFormatException(\"A blank string is not a valid number\");\n-        }  \n-        if (str.startsWith(\"0x\") || str.startsWith(\"-0x\") || str.startsWith(\"0X\") || str.startsWith(\"-0X\")) {\n-            int hexDigits = str.length() - 2; // drop 0x\n-            if (str.startsWith(\"-\")) { // drop -\n-                hexDigits--;\n+        }\n+        // Need to deal with all possible hex prefixes here\n+        final String[] hex_prefixes = {\"0x\", \"0X\", \"-0x\", \"-0X\", \"#\", \"-#\"};\n+        int pfxLen = 0;\n+        for(String pfx : hex_prefixes) {\n+            if (str.startsWith(pfx)) {\n+                pfxLen += pfx.length();\n+                break;\n+            }\n+        }\n+        if (pfxLen > 0) {\n+            int hexDigits = str.length() - pfxLen;\n+            if (hexDigits > 16) { // too many for Long\n+                return createBigInteger(str);\n             }\n             if (hexDigits > 8) { // too many for an int\n                 return createLong(str);\n             }\n             return createInteger(str);\n-        }   \n+        }\n         char lastChar = str.charAt(str.length() - 1);\n         String mant;\n         String dec;\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n         assertEquals(Double.class,     NumberUtils.createNumber(\"1.7976931348623157e+308\").getClass());\n         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal)\n         assertEquals(BigDecimal.class, NumberUtils.createNumber(\"1.7976931348623159e+308\").getClass());\n+        \n+        assertEquals(Integer.class, NumberUtils.createNumber(\"0x12345678\").getClass());\n+        assertEquals(Long.class,    NumberUtils.createNumber(\"0x123456789\").getClass());\n+\n+        assertEquals(Long.class,       NumberUtils.createNumber(\"0x7fffffffffffffff\").getClass());\n+        assertEquals(BigInteger.class, NumberUtils.createNumber(\"0x7fffffffffffffff0\").getClass());\n+\n+        assertEquals(Long.class,       NumberUtils.createNumber(\"#7fffffffffffffff\").getClass());\n+        assertEquals(BigInteger.class, NumberUtils.createNumber(\"#7fffffffffffffff0\").getClass());\n+\n+        assertEquals(Integer.class, NumberUtils.createNumber(\"017777777777\").getClass()); // 31 bits\n+        assertEquals(Long.class,    NumberUtils.createNumber(\"037777777777\").getClass()); // 32 bits\n+\n+        assertEquals(Long.class,       NumberUtils.createNumber(\"0777777777777777777777\").getClass()); // 63 bits\n+        assertEquals(BigInteger.class, NumberUtils.createNumber(\"01777777777777777777777\").getClass());// 64 bits\n     }\n \n     @Test", "timestamp": 1352770780, "metainfo": ""}