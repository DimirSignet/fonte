{"sha": "6fb311d431b2918c39cccce93c0425f36ef87a39", "log": "Add description and tests about the perils of nested enums bug 23374   ", "commit": "\n--- a/src/java/org/apache/commons/lang/enum/Enum.java\n+++ b/src/java/org/apache/commons/lang/enum/Enum.java\n  * </pre>\n  * <p>The code above will work on JDK 1.2. If JDK1.3 and later is used,\n  * the subclasses may be defined as anonymous.</p>\n- *\n+ * \n+ * <h4>Nested class Enums</h4>\n+ *\n+ * <p>Care must be taken with class loading when defining a static nested class\n+ * for enums. The static nested class can be loaded without the surrounding outer\n+ * class being loaded. This can result in an empty list/map/iterator being returned.\n+ * One solution is to define a static block that references the outer class where\n+ * the constants are defined. For example:</p>\n+ *\n+ * <pre>\n+ * public final class Outer {\n+ *   public static final BWEnum BLACK = new BWEnum(\"Black\");\n+ *   public static final BWEnum WHITE = new BWEnum(\"White\");\n+ *\n+ *   // static nested enum class\n+ *   public static final class BWEnum extends Enum {\n+ * \n+ *     static {\n+ *       // explicitly reference BWEnum class to force constants to load\n+ *       Object obj = Outer.BLACK;\n+ *     }\n+ * \n+ *     // ... other methods omitted\n+ *   }\n+ * }\n+ * </pre>\n+ * \n+ * <p>Although the above solves the problem, it is not recommended. The best solution\n+ * is to define the constants in the enum class, and hold references in the outer class:\n+ *\n+ * <pre>\n+ * public final class Outer {\n+ *   public static final BWEnum BLACK = BWEnum.BLACK;\n+ *   public static final BWEnum WHITE = BWEnum.WHITE;\n+ *\n+ *   // static nested enum class\n+ *   public static final class BWEnum extends Enum {\n+ *     // only define constants in enum classes - private if desired\n+ *     private static final BWEnum BLACK = new BWEnum(\"Black\");\n+ *     private static final BWEnum WHITE = new BWEnum(\"White\");\n+ * \n+ *     // ... other methods omitted\n+ *   }\n+ * }\n+ * </pre>\n+ * \n+ * <p>For more details, see the 'Nested' test cases.\n+ * \n  * @author Apache Avalon project\n  * @author Stephen Colebourne\n  * @author Chris Webb\n  * @author Mike Bowler\n  * @since 1.0\n- * @version $Id: Enum.java,v 1.22 2003/09/07 14:32:34 psteitz Exp $\n+ * @version $Id: Enum.java,v 1.23 2003/11/29 15:03:54 scolebourne Exp $\n  */\n public abstract class Enum implements Comparable, Serializable {\n \n--- a/src/test/org/apache/commons/lang/enum/EnumTest.java\n+++ b/src/test/org/apache/commons/lang/enum/EnumTest.java\n  */\n package org.apache.commons.lang.enum;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n  * Test cases for the {@link Enum} class.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: EnumTest.java,v 1.11 2003/08/18 02:22:27 bayard Exp $\n+ * @version $Id: EnumTest.java,v 1.12 2003/11/29 15:03:54 scolebourne Exp $\n  */\n \n public final class EnumTest extends TestCase {\n     }\n \n     public void testList() {\n-        List list = ColorEnum.getEnumList();\n+        List list = new ArrayList(ColorEnum.getEnumList());\n         \n         assertNotNull(list);\n         \n     }\n \n     public void testMap() {\n-        Map map = ColorEnum.getEnumMap();\n+        Map map = new HashMap(ColorEnum.getEnumMap());\n         \n         assertNotNull(map);\n-        \n-        assertEquals( map.keySet().size(),\n-        \t\t\t\tColorEnum.getEnumList().size());\n-        \n         assertTrue(map.containsValue(ColorEnum.RED));\n         assertTrue(map.containsValue(ColorEnum.GREEN));\n         assertTrue(map.containsValue(ColorEnum.BLUE));\n         assertSame(ColorEnum.RED, map.get(\"Red\"));\n         assertSame(ColorEnum.GREEN, map.get(\"Green\"));\n         assertSame(ColorEnum.BLUE, map.get(\"Blue\"));\n+        assertEquals( map.keySet().size(),\n+                        ColorEnum.getEnumList().size());\n     }\n \n     public void testGet() {\n         assertSame(Extended3Enum.DELTA, map.get(\"Delta\"));\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testNested() {\n+        List list = new ArrayList(Nest.ColorEnum.getEnumList());\n+        assertEquals(3, list.size());  // all is well\n+        Iterator it = list.iterator();\n+        assertSame(Nest.ColorEnum.RED, it.next());\n+        assertSame(Nest.ColorEnum.GREEN, it.next());\n+        assertSame(Nest.ColorEnum.BLUE, it.next());\n+        // This nesting works because the enum constants are defined in the SAME\n+        // class as the getEnumList(). It just acts as a normal enum.\n+    }\n+\n+    public void testNestedBroken() {\n+        List list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n+        assertEquals(0, list.size());  // no enums!!! \n+        // this is BROKEN because the enum constants are defined in a DIFFERENT\n+        // class from getEnumList(). Once NestBroken class is referenced,\n+        // and thus class loaded with its enum constants, the getEnumList works:\n+        new NestBroken();\n+        list = new ArrayList(NestBroken.ColorEnum.getEnumList());\n+        assertEquals(3, list.size());  // all is well!!!\n+        Iterator it = list.iterator();\n+        assertSame(NestBroken.RED, it.next());\n+        assertSame(NestBroken.GREEN, it.next());\n+        assertSame(NestBroken.BLUE, it.next());\n+    }\n+\n+    public void testNestedLinked() {\n+        List list = new ArrayList(NestLinked.ColorEnum.getEnumList());\n+        assertEquals(3, list.size());  // all is well\n+        Iterator it = list.iterator();\n+        assertSame(NestLinked.RED, it.next());\n+        assertSame(NestLinked.GREEN, it.next());\n+        assertSame(NestLinked.BLUE, it.next());\n+        // This nesting works because a static block in the enum class forces a\n+        // class load of the outer class which defines the enum constants.\n+    }\n+\n+    public void testNestedReferenced() {\n+        List list = new ArrayList(NestReferenced.ColorEnum.getEnumList());\n+        assertEquals(3, list.size());  // all is well\n+        Iterator it = list.iterator();\n+        assertSame(NestReferenced.RED, it.next());\n+        assertSame(NestReferenced.GREEN, it.next());\n+        assertSame(NestReferenced.BLUE, it.next());\n+        // This nesting works because the enum constants are actually defined in\n+        // the SAME class as the getEnumList(). The references in the outer class\n+        // are just extra references.\n+    }\n+\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/Nest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration demonstrating a normal simple nesting case.\n+ * All is well here as the nested enum class is really no different\n+ * to any other class.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: Nest.java,v 1.1 2003/11/29 15:03:54 scolebourne Exp $\n+ */\n+\n+public final class Nest {\n+    \n+    public Nest() {\n+        super();\n+    }\n+    \n+    public static final class ColorEnum extends Enum {\n+        public static final ColorEnum RED = new ColorEnum(\"Red\");\n+        public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+        public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+\n+        private ColorEnum(String color) {\n+            super(color);\n+        }\n+\n+        public static ColorEnum getEnum(String color) {\n+            return (ColorEnum) getEnum(ColorEnum.class, color);\n+        }\n+\n+        public static Map getEnumMap() {\n+            return getEnumMap(ColorEnum.class);\n+        }\n+\n+        public static List getEnumList() {\n+            return getEnumList(ColorEnum.class);\n+        }\n+\n+        public static Iterator iterator() {\n+            return iterator(ColorEnum.class);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/NestBroken.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration which demonstrates how to break the enum system.\n+ * <p>\n+ * The class loader sees the two classes here as independent - the enum\n+ * class is nested, not an inner class. Calling getEnumList() on ColorEnum\n+ * will return an empty list, unless and until the NestBroken class is\n+ * referenced.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: NestBroken.java,v 1.1 2003/11/29 15:03:54 scolebourne Exp $\n+ */\n+\n+public final class NestBroken {\n+    \n+    public static final ColorEnum RED = new ColorEnum(\"Red\");\n+    public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+    public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+    \n+    public NestBroken() {\n+        super();\n+    }\n+    \n+    public static final class ColorEnum extends Enum {\n+\n+        private ColorEnum(String color) {\n+            super(color);\n+        }\n+\n+        public static ColorEnum getEnum(String color) {\n+            return (ColorEnum) getEnum(ColorEnum.class, color);\n+        }\n+\n+        public static Map getEnumMap() {\n+            return getEnumMap(ColorEnum.class);\n+        }\n+\n+        public static List getEnumList() {\n+            return getEnumList(ColorEnum.class);\n+        }\n+\n+        public static Iterator iterator() {\n+            return iterator(ColorEnum.class);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/NestLinked.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration which demonstrates how to define the constants in a\n+ * different class to the Enum. The extra <code>static{}</code> block is\n+ * needed to ensure that the enum constants are created before the\n+ * static methods on the ColorEnum are used.\n+ * <p>\n+ * The class loader sees the two classes here as independent - the enum\n+ * class is nested, not an inner class. The static block thus forces the\n+ * class load of the outer class, which is needed to initialise the enums.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: NestLinked.java,v 1.1 2003/11/29 15:03:54 scolebourne Exp $\n+ */\n+\n+public final class NestLinked {\n+    \n+    public static final ColorEnum RED = new ColorEnum(\"Red\");\n+    public static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+    public static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+    \n+    public NestLinked() {\n+        super();\n+    }\n+    \n+    public static final class ColorEnum extends Enum {\n+\n+        static {\n+            // Explicitly reference the class where the enums are defined\n+            Object obj = NestLinked.RED;\n+        }\n+        \n+        private ColorEnum(String color) {\n+            super(color);\n+        }\n+\n+        public static ColorEnum getEnum(String color) {\n+            return (ColorEnum) getEnum(ColorEnum.class, color);\n+        }\n+\n+        public static Map getEnumMap() {\n+            return getEnumMap(ColorEnum.class);\n+        }\n+\n+        public static List getEnumList() {\n+            return getEnumList(ColorEnum.class);\n+        }\n+\n+        public static Iterator iterator() {\n+            return iterator(ColorEnum.class);\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/enum/NestReferenced.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.enum;\n+\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Color enumeration which demonstrates how to provide a view of the constants\n+ * in a different class to the Enum. This technique is the safest, however it\n+ * is obviously inconvenient as it involves defining two sets of constants.\n+ * See NestedLinked for an alternative.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: NestReferenced.java,v 1.1 2003/11/29 15:03:54 scolebourne Exp $\n+ */\n+\n+public final class NestReferenced {\n+    \n+    public static final ColorEnum RED = ColorEnum.RED;\n+    public static final ColorEnum GREEN = ColorEnum.GREEN;\n+    public static final ColorEnum BLUE = ColorEnum.BLUE;\n+    \n+    public NestReferenced() {\n+        super();\n+    }\n+    \n+    public static final class ColorEnum extends Enum {\n+\n+        // must be defined here, not just in outer class\n+        private static final ColorEnum RED = new ColorEnum(\"Red\");\n+        private static final ColorEnum GREEN = new ColorEnum(\"Green\");\n+        private static final ColorEnum BLUE = new ColorEnum(\"Blue\");\n+        \n+        private ColorEnum(String color) {\n+            super(color);\n+        }\n+\n+        public static ColorEnum getEnum(String color) {\n+            return (ColorEnum) getEnum(ColorEnum.class, color);\n+        }\n+\n+        public static Map getEnumMap() {\n+            return getEnumMap(ColorEnum.class);\n+        }\n+\n+        public static List getEnumList() {\n+            return getEnumList(ColorEnum.class);\n+        }\n+\n+        public static Iterator iterator() {\n+            return iterator(ColorEnum.class);\n+        }\n+    }\n+}", "timestamp": 1070118234, "metainfo": ""}