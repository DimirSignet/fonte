{"sha": "d57e725e24a69b884a8f15b2968a7b4165423a9d", "log": "More tests; era seems to cause issues, so check this separately  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/FastDateParserTest.java\n  * @since 3.2\n  */\n public class FastDateParserTest {\n+    private static final String SHORT_FORMAT = \"G/y/M/d/a/E/Z\";\n+    private static final String LONG_FORMAT = \"GGGG/yyyy/MMMM/dddd/aaaa/EEEE/ZZZZ\";\n+    private static final String SHORT_FORMAT_NOERA = \"y/M/d/a/E/Z\";\n+    private static final String LONG_FORMAT_NOERA = \"yyyy/MMMM/dddd/aaaa/EEEE/ZZZZ\";\n     private static final String yMdHmsSZ = \"yyyy-MM-dd'T'HH:mm:ss.SSS Z\";\n     private static final String DMY_DOT = \"dd.MM.yyyy\";\n     private static final String YMD_SLASH = \"yyyy/MM/dd\";\n     private static final String MDY_SLASH = \"MM/DD/yyyy\";\n     private static final TimeZone REYKJAVIK = TimeZone.getTimeZone(\"Atlantic/Reykjavik\");\n     private static final TimeZone NEW_YORK = TimeZone.getTimeZone(\"America/New_York\");\n+    private static final TimeZone GMT = TimeZone.getTimeZone(\"GMT\");\n     private static final Locale SWEDEN = new Locale(\"sv\", \"SE\");\n \n     DateParser getInstance(String format) {\n         assertEquals(cal.getTime(), k.parse(\"2010-08-01 12:33:20\"));\n         assertEquals(cal.getTime(), H.parse(\"2010-08-01 12:33:20\"));\n     }\n-    \n-    @Test\n-    public void testLocales_Long_AD() throws Exception {\n-                \n+\n+    @Test\n+    // Check that all Locales can parse their own formats\n+    public void testParses() throws Exception {\n+        Calendar cal = Calendar.getInstance(GMT); // fails for non-GMT\n         for(Locale locale : Locale.getAvailableLocales()) {\n-            Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);\n             cal.clear();\n             cal.set(2003, 1, 10);\n+            Date in = cal.getTime();\n+            SimpleDateFormat sdf = new SimpleDateFormat(LONG_FORMAT, locale);\n+            String fmt = sdf.format(in);\n+            Date out = sdf.parse(fmt);\n+            assertEquals(locale.toString(), in, out);\n+        }\n+    }\n+\n+    @Test\n+    public void testLocales_Long_AD() throws Exception {\n+        testLocales(LONG_FORMAT, false);\n+    }\n+\n+    @Test\n+    public void testLocales_Long_BC() throws Exception {\n+        testLocales(LONG_FORMAT, true);\n+    }\n+\n+    @Test\n+    public void testLocales_Short_AD() throws Exception {\n+        testLocales(SHORT_FORMAT, false);\n+    }\n+\n+    @Test\n+    public void testLocales_Short_BC() throws Exception {\n+        testLocales(SHORT_FORMAT, true);\n+    }\n+\n+    @Test\n+    public void testLocales_LongNoEra_AD() throws Exception {\n+        testLocales(LONG_FORMAT_NOERA, false);\n+    }\n+\n+    @Test\n+    public void testLocales_LongNoEra_BC() throws Exception {\n+        testLocales(LONG_FORMAT_NOERA, true);\n+    }\n+\n+    @Test\n+    public void testLocales_ShortNoEra_AD() throws Exception {\n+        testLocales(SHORT_FORMAT_NOERA, false);\n+    }\n+\n+    @Test\n+    public void testLocales_ShortNoEra_BC() throws Exception {\n+        testLocales(SHORT_FORMAT_NOERA, true);\n+    }\n+\n+    private void testLocales(String format, boolean eraBC) throws Exception {\n+                \n+        Calendar cal= Calendar.getInstance(GMT);\n+        cal.clear();\n+        cal.set(2003, 1, 10);\n+        if (eraBC) {\n+            cal.set(Calendar.ERA, GregorianCalendar.BC);\n+        }\n+        for(Locale locale : Locale.getAvailableLocales()) {\n+            SimpleDateFormat sdf = new SimpleDateFormat(format, locale);\n+            DateParser fdf = getInstance(format, locale);\n \n             try {\n-                String longFormat= \"GGGG/yyyy/MMMM/dddd/aaaa/EEEE/ZZZZ\";\n-                SimpleDateFormat sdf = new SimpleDateFormat(longFormat, locale);\n-                DateParser fdf = getInstance(longFormat, locale);\n-                checkParse(cal, sdf, fdf);\n+                checkParse(locale, cal, sdf, fdf);\n+            } catch(ParseException ex) {\n+                // TODO: why do ja_JP_JP, hi_IN, th_TH, and th_TH_TH fail?\n+                System.out.println(\"Locale \"+locale+ \" failed with \"+format+\" era \"+(eraBC?\"BC\":\"AD\")+\"\\n\" + trimMessage(ex.toString()));\n             }\n-            catch(ParseException ex) {\n-                // TODO: why do ja_JP_JP, hi_IN, th_TH, and th_TH_TH fail?\n-                System.out.println(\"Long AD Locale \"+locale+ \" failed\\n\" + ex.toString());\n-            }\n-        }\n-    }\n-\n-    @Test\n-    public void testLocales_Long_BC() throws Exception {\n-                \n-        for(Locale locale : Locale.getAvailableLocales()) {\n-            Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);\n-            cal.clear();\n-            cal.set(2003, 1, 10);\n-            cal.set(Calendar.ERA, GregorianCalendar.BC);\n-\n-            try {\n-                String longFormat= \"GGGG/yyyy/MMMM/dddd/aaaa/EEEE/ZZZZ\";\n-                SimpleDateFormat sdf = new SimpleDateFormat(longFormat, locale);\n-                DateParser fdf = getInstance(longFormat, locale);               \n-                checkParse(cal, sdf, fdf);\n-            }\n-            catch(ParseException ex) {\n-                // TODO: why do ja_JP_JP, hi_IN, th_TH, and th_TH_TH fail?\n-                System.out.println(\"Long BC Locale \"+locale+ \" failed\\n\" + ex.toString());\n-            }\n-        }\n-    }\n-\n-    @Test\n-    public void testLocales_Short_BC() throws Exception {\n-                \n-        for(Locale locale : Locale.getAvailableLocales()) {\n-            Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);\n-            cal.clear();\n-            cal.set(2003, 1, 10);\n-            cal.set(Calendar.ERA, GregorianCalendar.BC);                        \n-\n-            try {\n-                String shortFormat= \"G/y/M/d/a/E/Z\";\n-                SimpleDateFormat sdf = new SimpleDateFormat(shortFormat, locale);\n-                DateParser fdf = getInstance(shortFormat, locale);\n-                checkParse(cal, sdf, fdf);\n-            }\n-            catch(ParseException ex) {\n-                // TODO: why do ja_JP_JP, hi_IN, th_TH, and th_TH_TH fail?\n-                System.out.println(\"Short BC Locale \"+locale+ \" failed\\n\" + ex.toString());\n-            }\n-        }\n-    }\n-\n-    @Test\n-    public void testLocales_Short_AD() throws Exception {\n-                \n-        for(Locale locale : Locale.getAvailableLocales()) {\n-            Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US);\n-            cal.clear();\n-            cal.set(2003, 1, 10);\n-            cal.set(Calendar.ERA, GregorianCalendar.AD);\n-\n-            try {\n-                String shortFormat= \"G/y/M/d/a/E/Z\";\n-                SimpleDateFormat sdf = new SimpleDateFormat(shortFormat, locale);\n-                DateParser fdf = getInstance(shortFormat, locale);              \n-                checkParse(cal, sdf, fdf);\n-            }\n-            catch(ParseException ex) {\n-                // TODO: why do ja_JP_JP, hi_IN, th_TH, and th_TH_TH fail?\n-                System.out.println(\"Short_AD Locale \"+locale+ \" failed\\n\" + ex.toString());\n-            }\n-        }\n-    }\n-\n-    private void checkParse(Calendar cal, SimpleDateFormat sdf, DateParser fdf) throws ParseException {\n+        }\n+    }\n+\n+    private String trimMessage(String msg) {\n+        if (msg.length() < 100) {\n+            return msg;\n+        }\n+        int gmt = msg.indexOf(\"(GMT\");\n+        if (gmt > 0) {\n+            return msg.substring(0, gmt+4)+\"...)\";\n+        }\n+        return msg.substring(0, 100)+\"...\";\n+    }\n+\n+    private void checkParse(Locale locale, Calendar cal, SimpleDateFormat sdf, DateParser fdf) throws ParseException {\n         String formattedDate= sdf.format(cal.getTime());                \n         Date expectedTime = sdf.parse(formattedDate);\n         Date actualTime = fdf.parse(formattedDate);\n-        assertEquals(expectedTime, actualTime);\n+        assertEquals(locale.toString()+\" \"+formattedDate,expectedTime, actualTime);\n     }\n     \n     @Test\n \n     @Test\n     public void testLang538() throws ParseException {\n-        DateParser parser = getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", TimeZone.getTimeZone(\"GMT\"));\n+        DateParser parser = getInstance(\"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", GMT);\n         \n         Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT-8\"));\n         cal.clear();", "timestamp": 1348534271, "metainfo": ""}