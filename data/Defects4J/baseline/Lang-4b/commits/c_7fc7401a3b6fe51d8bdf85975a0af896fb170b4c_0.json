{"sha": "7fc7401a3b6fe51d8bdf85975a0af896fb170b4c", "log": "Port to JUnit 4. Not 100% done.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n         assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"b\"));\n         assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"i\"));\n         assertNull(FieldUtils.getField(PrivatelyShadowedChild.class, \"d\"));\n-        \n-        try {\n-            FieldUtils.getField(null, \"none\");\n-            fail(\"null class should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-\n-        try {\n-            FieldUtils.getField(PublicChild.class, null);\n-            fail(\"null field name should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-    }\n-\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testGetFieldIllegalArgumentException1() {\n+        FieldUtils.getField(null, \"none\");\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testGetFieldIllegalArgumentException2() {\n+        FieldUtils.getField(PublicChild.class, null);\n+    }\n+    \n     @Test\n     public void testGetFieldForceAccess() {\n         assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, \"VALUE\", true).getDeclaringClass());\n                 .getDeclaringClass());\n         assertEquals(PrivatelyShadowedChild.class, FieldUtils.getField(PrivatelyShadowedChild.class, \"d\", true)\n                 .getDeclaringClass());\n-        \n-        try {\n-            FieldUtils.getField(null, \"none\", true);\n-            fail(\"null class should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-\n-        try {\n-            FieldUtils.getField(PublicChild.class, null, true);\n-            fail(\"null field name should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-    }\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testGetFieldForceAccessIllegalArgumentException1() {\n+        FieldUtils.getField(null, \"none\", true);\n+    }\n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testGetFieldForceAccessIllegalArgumentException2() {\n+        FieldUtils.getField(PublicChild.class, null, true);\n+    }    \n \n     @Test\n     public void testGetDeclaredField() {\n         assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"b\"));\n         assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"i\"));\n         assertNull(FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\"));\n-        \n-        try {\n-            FieldUtils.getDeclaredField(null, \"none\");\n-            fail(\"null class should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-\n-        try {\n-            FieldUtils.getDeclaredField(PublicChild.class, null);\n-            fail(\"null field name should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-    }\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testGetDeclaredFieldAccessIllegalArgumentException1() {\n+        FieldUtils.getDeclaredField(null, \"none\");\n+    }    \n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testGetDeclaredFieldAccessIllegalArgumentException2() {\n+        FieldUtils.getDeclaredField(PublicChild.class, null);\n+    }    \n \n     @Test\n     public void testGetDeclaredFieldForceAccess() {\n                 .getDeclaringClass());\n         assertEquals(PrivatelyShadowedChild.class, FieldUtils.getDeclaredField(PrivatelyShadowedChild.class, \"d\", true)\n                 .getDeclaringClass());\n-        \n-        try {\n-            FieldUtils.getDeclaredField(null, \"none\", true);\n-            fail(\"null class should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-\n-        try {\n-            FieldUtils.getDeclaredField(PublicChild.class, null, true);\n-            fail(\"null field name should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-    }\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testGetDeclaredFieldForceAccessIllegalArgumentException1() {\n+        FieldUtils.getDeclaredField(null, \"none\", true);\n+    }    \n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testGetDeclaredFieldForceAccessIllegalArgumentException2() {\n+        FieldUtils.getDeclaredField(PublicChild.class, null, true);\n+    }    \n \n     @Test\n     public void testReadStaticField() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n-        \n-        try {\n-            FieldUtils.readStaticField(null);\n-            fail(\"null field should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-\n-        try {\n-            Field nonStaticField = FieldUtils.getField(PublicChild.class, \"s\");\n-            assumeNotNull(nonStaticField);\n-            FieldUtils.readStaticField(nonStaticField);\n-            fail(\"non-static field should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-        \n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testReadStaticFieldIllegalArgumentException1() throws Exception {\n+         FieldUtils.readStaticField(null);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testReadStaticFieldIllegalArgumentException2() throws Exception {\n+        assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n+        Field nonStaticField = FieldUtils.getField(PublicChild.class, \"s\");\n+        assumeNotNull(nonStaticField);\n+        FieldUtils.readStaticField(nonStaticField);\n     }\n \n     @Test\n     public void testReadStaticFieldForceAccess() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, \"VALUE\")));\n-        \n-        try {\n-            FieldUtils.readStaticField(null, true);\n-            fail(\"null field should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n-        \n-        try {\n-            Field nonStaticField = FieldUtils.getField(PublicChild.class, \"s\", true);\n-            assumeNotNull(nonStaticField);\n-            FieldUtils.readStaticField(nonStaticField);\n-            fail(\"non-static field should cause an IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            // expected\n-        }\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testReadStaticFieldForceAccessIllegalArgumentException1() throws Exception {\n+        FieldUtils.readStaticField(null, true);\n+    }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testReadStaticFieldForceAccessIllegalArgumentException2() throws Exception {\n+        Field nonStaticField = FieldUtils.getField(PublicChild.class, \"s\", true);\n+        assumeNotNull(nonStaticField);\n+        FieldUtils.readStaticField(nonStaticField);\n     }\n \n     @Test", "timestamp": 1309791780, "metainfo": ""}