{"sha": "1933cbb9abece28eceb96e06bc609b92668c92dd", "log": "Simplify boolean tests and avoid boxing  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n         assertNotNull(new ArrayUtils());\n         Constructor<?>[] cons = ArrayUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(ArrayUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(ArrayUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(ArrayUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(ArrayUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     private void assertIsEquals(Object array1, Object array2, Object array3) {\n-        assertEquals(true, ArrayUtils.isEquals(array1, array1));\n-        assertEquals(true, ArrayUtils.isEquals(array2, array2));\n-        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n-        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n-        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n-        assertEquals(false, ArrayUtils.isEquals(array1, array3));\n-        assertEquals(false, ArrayUtils.isEquals(array3, array1));\n-        assertEquals(false, ArrayUtils.isEquals(array1, array2));\n-        assertEquals(false, ArrayUtils.isEquals(array2, array1));\n+        assertTrue(ArrayUtils.isEquals(array1, array1));\n+        assertTrue(ArrayUtils.isEquals(array2, array2));\n+        assertTrue(ArrayUtils.isEquals(array3, array3));\n+        assertFalse(ArrayUtils.isEquals(array1, array2));\n+        assertFalse(ArrayUtils.isEquals(array2, array1));\n+        assertFalse(ArrayUtils.isEquals(array1, array3));\n+        assertFalse(ArrayUtils.isEquals(array3, array1));\n+        assertFalse(ArrayUtils.isEquals(array1, array2));\n+        assertFalse(ArrayUtils.isEquals(array2, array1));\n     }\n \n     @Test\n \n         Object[] array3 = new Object[]{new String(new char[]{'A', 'B'})};\n         Object[] array4 = new Object[]{\"AB\"};\n-        assertEquals(true, ArrayUtils.isEquals(array3, array3));\n-        assertEquals(true, ArrayUtils.isEquals(array3, array4));\n-\n-        assertEquals(true, ArrayUtils.isEquals(null, null));\n-        assertEquals(false, ArrayUtils.isEquals(null, array4));\n+        assertTrue(ArrayUtils.isEquals(array3, array3));\n+        assertTrue(ArrayUtils.isEquals(array3, array4));\n+\n+        assertTrue(ArrayUtils.isEquals(null, null));\n+        assertFalse(ArrayUtils.isEquals(null, array4));\n     }\n     \n     //-----------------------------------------------------------------------\n         Object[] oneArray = new Object[] {\"pick\"};\n         Object[] twoArray = new Object[] {\"pick\", \"stick\"};\n         \n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n-        \n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n-        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n-        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n \n     @Test\n         boolean[] oneArray = new boolean[] {true};\n         boolean[] twoArray = new boolean[] {true, false};\n         \n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n-        \n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n-        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n-        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n     @Test\n         long[] oneArray = new long[] {0L};\n         long[] twoArray = new long[] {0L, 76L};\n         \n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n-        \n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n-        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n-        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n     @Test\n         int[] oneArray = new int[] {4};\n         int[] twoArray = new int[] {5, 7};\n         \n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n-        \n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n-        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n-        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n     @Test\n         short[] oneArray = new short[] {4};\n         short[] twoArray = new short[] {6, 8};\n         \n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n-        \n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n-        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n-        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n     @Test\n         char[] oneArray = new char[] {'f'};\n         char[] twoArray = new char[] {'d', 't'};\n         \n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n-        \n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n-        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n-        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n     @Test\n         byte[] oneArray = new byte[] {3};\n         byte[] twoArray = new byte[] {4, 6};\n         \n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n-        \n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n-        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n-        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n     @Test\n         double[] oneArray = new double[] {1.3d};\n         double[] twoArray = new double[] {4.5d, 6.3d};\n         \n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n-        \n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n-        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n-        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n     @Test\n         float[] oneArray = new float[] {2.5f};\n         float[] twoArray = new float[] {6.4f, 5.8f};\n         \n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(nullArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(nullArray, twoArray));\n-        \n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, nullArray));\n-        assertEquals(true, ArrayUtils.isSameLength(emptyArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(emptyArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, emptyArray));\n-        assertEquals(true, ArrayUtils.isSameLength(oneArray, oneArray));\n-        assertEquals(false, ArrayUtils.isSameLength(oneArray, twoArray));\n-        \n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, nullArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, emptyArray));\n-        assertEquals(false, ArrayUtils.isSameLength(twoArray, oneArray));\n-        assertEquals(true, ArrayUtils.isSameLength(twoArray, twoArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(nullArray, twoArray));\n+        \n+        assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray));\n+        assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(oneArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray));\n+        assertTrue(ArrayUtils.isSameLength(oneArray, oneArray));\n+        assertFalse(ArrayUtils.isSameLength(oneArray, twoArray));\n+        \n+        assertFalse(ArrayUtils.isSameLength(twoArray, nullArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray));\n+        assertFalse(ArrayUtils.isSameLength(twoArray, oneArray));\n+        assertTrue(ArrayUtils.isSameLength(twoArray, twoArray));\n     }\n     \n     //-----------------------------------------------------------------------\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         \n-        assertEquals(true, ArrayUtils.isSameType(new Object[0], new Object[0]));\n-        assertEquals(false, ArrayUtils.isSameType(new String[0], new Object[0]));\n-        assertEquals(true, ArrayUtils.isSameType(new String[0][0], new String[0][0]));\n-        assertEquals(false, ArrayUtils.isSameType(new String[0], new String[0][0]));\n-        assertEquals(false, ArrayUtils.isSameType(new String[0][0], new String[0]));\n+        assertTrue(ArrayUtils.isSameType(new Object[0], new Object[0]));\n+        assertFalse(ArrayUtils.isSameType(new String[0], new Object[0]));\n+        assertTrue(ArrayUtils.isSameType(new String[0][0], new String[0][0]));\n+        assertFalse(ArrayUtils.isSameType(new String[0], new String[0][0]));\n+        assertFalse(ArrayUtils.isSameType(new String[0][0], new String[0]));\n     }\n     \n     //-----------------------------------------------------------------------\n     public void testReverseBoolean() {\n         boolean[] array = new boolean[] {false, false, true};\n         ArrayUtils.reverse(array);\n-        assertEquals(array[0], true);\n-        assertEquals(array[1], false);\n-        assertEquals(array[2], false);\n+        assertTrue(array[0]);\n+        assertFalse(array[1]);\n+        assertFalse(array[2]);\n \n         array = null;\n         ArrayUtils.reverse(array);\n     @Test\n     public void testContains() {\n         Object[] array = new Object[] { \"0\", \"1\", \"2\", \"3\", null, \"0\" };\n-        assertEquals(false, ArrayUtils.contains(null, null));\n-        assertEquals(false, ArrayUtils.contains(null, \"1\"));\n-        assertEquals(true, ArrayUtils.contains(array, \"0\"));\n-        assertEquals(true, ArrayUtils.contains(array, \"1\"));\n-        assertEquals(true, ArrayUtils.contains(array, \"2\"));\n-        assertEquals(true, ArrayUtils.contains(array, \"3\"));\n-        assertEquals(true, ArrayUtils.contains(array, null));\n-        assertEquals(false, ArrayUtils.contains(array, \"notInArray\"));\n+        assertFalse(ArrayUtils.contains(null, null));\n+        assertFalse(ArrayUtils.contains(null, \"1\"));\n+        assertTrue(ArrayUtils.contains(array, \"0\"));\n+        assertTrue(ArrayUtils.contains(array, \"1\"));\n+        assertTrue(ArrayUtils.contains(array, \"2\"));\n+        assertTrue(ArrayUtils.contains(array, \"3\"));\n+        assertTrue(ArrayUtils.contains(array, null));\n+        assertFalse(ArrayUtils.contains(array, \"notInArray\"));\n     }\n     \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContainsLong() {\n         long[] array = null;\n-        assertEquals(false, ArrayUtils.contains(array, 1));\n+        assertFalse(ArrayUtils.contains(array, 1));\n         array = new long[] { 0, 1, 2, 3, 0 };\n-        assertEquals(true, ArrayUtils.contains(array, 0));\n-        assertEquals(true, ArrayUtils.contains(array, 1));\n-        assertEquals(true, ArrayUtils.contains(array, 2));\n-        assertEquals(true, ArrayUtils.contains(array, 3));\n-        assertEquals(false, ArrayUtils.contains(array, 99));\n+        assertTrue(ArrayUtils.contains(array, 0));\n+        assertTrue(ArrayUtils.contains(array, 1));\n+        assertTrue(ArrayUtils.contains(array, 2));\n+        assertTrue(ArrayUtils.contains(array, 3));\n+        assertFalse(ArrayUtils.contains(array, 99));\n     }\n     \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContainsInt() {\n         int[] array = null;\n-        assertEquals(false, ArrayUtils.contains(array, 1));\n+        assertFalse(ArrayUtils.contains(array, 1));\n         array = new int[] { 0, 1, 2, 3, 0 };\n-        assertEquals(true, ArrayUtils.contains(array, 0));\n-        assertEquals(true, ArrayUtils.contains(array, 1));\n-        assertEquals(true, ArrayUtils.contains(array, 2));\n-        assertEquals(true, ArrayUtils.contains(array, 3));\n-        assertEquals(false, ArrayUtils.contains(array, 99));\n+        assertTrue(ArrayUtils.contains(array, 0));\n+        assertTrue(ArrayUtils.contains(array, 1));\n+        assertTrue(ArrayUtils.contains(array, 2));\n+        assertTrue(ArrayUtils.contains(array, 3));\n+        assertFalse(ArrayUtils.contains(array, 99));\n     }\n     \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContainsShort() {\n         short[] array = null;\n-        assertEquals(false, ArrayUtils.contains(array, (short) 1));\n+        assertFalse(ArrayUtils.contains(array, (short) 1));\n         array = new short[] { 0, 1, 2, 3, 0 };\n-        assertEquals(true, ArrayUtils.contains(array, (short) 0));\n-        assertEquals(true, ArrayUtils.contains(array, (short) 1));\n-        assertEquals(true, ArrayUtils.contains(array, (short) 2));\n-        assertEquals(true, ArrayUtils.contains(array, (short) 3));\n-        assertEquals(false, ArrayUtils.contains(array, (short) 99));\n+        assertTrue(ArrayUtils.contains(array, (short) 0));\n+        assertTrue(ArrayUtils.contains(array, (short) 1));\n+        assertTrue(ArrayUtils.contains(array, (short) 2));\n+        assertTrue(ArrayUtils.contains(array, (short) 3));\n+        assertFalse(ArrayUtils.contains(array, (short) 99));\n     }\n     \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContainsChar() {\n         char[] array = null;\n-        assertEquals(false, ArrayUtils.contains(array, 'b'));\n+        assertFalse(ArrayUtils.contains(array, 'b'));\n         array = new char[] { 'a', 'b', 'c', 'd', 'a' };\n-        assertEquals(true, ArrayUtils.contains(array, 'a'));\n-        assertEquals(true, ArrayUtils.contains(array, 'b'));\n-        assertEquals(true, ArrayUtils.contains(array, 'c'));\n-        assertEquals(true, ArrayUtils.contains(array, 'd'));\n-        assertEquals(false, ArrayUtils.contains(array, 'e'));\n+        assertTrue(ArrayUtils.contains(array, 'a'));\n+        assertTrue(ArrayUtils.contains(array, 'b'));\n+        assertTrue(ArrayUtils.contains(array, 'c'));\n+        assertTrue(ArrayUtils.contains(array, 'd'));\n+        assertFalse(ArrayUtils.contains(array, 'e'));\n     }\n     \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContainsByte() {\n         byte[] array = null;\n-        assertEquals(false, ArrayUtils.contains(array, (byte) 1));\n+        assertFalse(ArrayUtils.contains(array, (byte) 1));\n         array = new byte[] { 0, 1, 2, 3, 0 };\n-        assertEquals(true, ArrayUtils.contains(array, (byte) 0));\n-        assertEquals(true, ArrayUtils.contains(array, (byte) 1));\n-        assertEquals(true, ArrayUtils.contains(array, (byte) 2));\n-        assertEquals(true, ArrayUtils.contains(array, (byte) 3));\n-        assertEquals(false, ArrayUtils.contains(array, (byte) 99));\n+        assertTrue(ArrayUtils.contains(array, (byte) 0));\n+        assertTrue(ArrayUtils.contains(array, (byte) 1));\n+        assertTrue(ArrayUtils.contains(array, (byte) 2));\n+        assertTrue(ArrayUtils.contains(array, (byte) 3));\n+        assertFalse(ArrayUtils.contains(array, (byte) 99));\n     }\n     \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContainsDouble() {\n         double[] array = null;\n-        assertEquals(false, ArrayUtils.contains(array, (double) 1));\n+        assertFalse(ArrayUtils.contains(array, (double) 1));\n         array = new double[] { 0, 1, 2, 3, 0 };\n-        assertEquals(true, ArrayUtils.contains(array, (double) 0));\n-        assertEquals(true, ArrayUtils.contains(array, (double) 1));\n-        assertEquals(true, ArrayUtils.contains(array, (double) 2));\n-        assertEquals(true, ArrayUtils.contains(array, (double) 3));\n-        assertEquals(false, ArrayUtils.contains(array, (double) 99));\n+        assertTrue(ArrayUtils.contains(array, (double) 0));\n+        assertTrue(ArrayUtils.contains(array, (double) 1));\n+        assertTrue(ArrayUtils.contains(array, (double) 2));\n+        assertTrue(ArrayUtils.contains(array, (double) 3));\n+        assertFalse(ArrayUtils.contains(array, (double) 99));\n     }\n \n     @SuppressWarnings(\"cast\")\n     @Test\n     public void testContainsDoubleTolerance() {\n         double[] array = null;\n-        assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));\n+        assertFalse(ArrayUtils.contains(array, (double) 1, (double) 0));\n         array = new double[] { 0, 1, 2, 3, 0 };\n-        assertEquals(false, ArrayUtils.contains(array, (double) 4.0, (double) 0.33));\n-        assertEquals(false, ArrayUtils.contains(array, (double) 2.5, (double) 0.49));\n-        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.50));\n-        assertEquals(true, ArrayUtils.contains(array, (double) 2.5, (double) 0.51));\n+        assertFalse(ArrayUtils.contains(array, (double) 4.0, (double) 0.33));\n+        assertFalse(ArrayUtils.contains(array, (double) 2.5, (double) 0.49));\n+        assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.50));\n+        assertTrue(ArrayUtils.contains(array, (double) 2.5, (double) 0.51));\n     }\n     \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContainsFloat() {\n         float[] array = null;\n-        assertEquals(false, ArrayUtils.contains(array, (float) 1));\n+        assertFalse(ArrayUtils.contains(array, (float) 1));\n         array = new float[] { 0, 1, 2, 3, 0 };\n-        assertEquals(true, ArrayUtils.contains(array, (float) 0));\n-        assertEquals(true, ArrayUtils.contains(array, (float) 1));\n-        assertEquals(true, ArrayUtils.contains(array, (float) 2));\n-        assertEquals(true, ArrayUtils.contains(array, (float) 3));\n-        assertEquals(false, ArrayUtils.contains(array, (float) 99));\n+        assertTrue(ArrayUtils.contains(array, (float) 0));\n+        assertTrue(ArrayUtils.contains(array, (float) 1));\n+        assertTrue(ArrayUtils.contains(array, (float) 2));\n+        assertTrue(ArrayUtils.contains(array, (float) 3));\n+        assertFalse(ArrayUtils.contains(array, (float) 99));\n     }\n     \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContainsBoolean() {\n         boolean[] array = null;\n-        assertEquals(false, ArrayUtils.contains(array, true));\n+        assertFalse(ArrayUtils.contains(array, true));\n         array = new boolean[] { true, false, true };\n-        assertEquals(true, ArrayUtils.contains(array, true));\n-        assertEquals(true, ArrayUtils.contains(array, false));\n+        assertTrue(ArrayUtils.contains(array, true));\n+        assertTrue(ArrayUtils.contains(array, false));\n         array = new boolean[] { true, true };\n-        assertEquals(true, ArrayUtils.contains(array, true));\n-        assertEquals(false, ArrayUtils.contains(array, false));\n+        assertTrue(ArrayUtils.contains(array, true));\n+        assertFalse(ArrayUtils.contains(array, false));\n     }\n     \n     // testToPrimitive/Object for boolean\n     public void testIsEmptyObject() {\n         Object[] emptyArray = new Object[] {};\n         Object[] notEmptyArray = new Object[] { new String(\"Value\") };\n-        assertEquals(true, ArrayUtils.isEmpty((Object[])null));\n-        assertEquals(true, ArrayUtils.isEmpty(emptyArray));\n-        assertEquals(false, ArrayUtils.isEmpty(notEmptyArray));\n+        assertTrue(ArrayUtils.isEmpty((Object[])null));\n+        assertTrue(ArrayUtils.isEmpty(emptyArray));\n+        assertFalse(ArrayUtils.isEmpty(notEmptyArray));\n     }\n \n     /**\n     public void testIsEmptyPrimitives() {\n         long[] emptyLongArray = new long[] {};\n         long[] notEmptyLongArray = new long[] { 1L };\n-        assertEquals(true, ArrayUtils.isEmpty((long[])null));\n-        assertEquals(true, ArrayUtils.isEmpty(emptyLongArray));\n-        assertEquals(false, ArrayUtils.isEmpty(notEmptyLongArray));\n+        assertTrue(ArrayUtils.isEmpty((long[])null));\n+        assertTrue(ArrayUtils.isEmpty(emptyLongArray));\n+        assertFalse(ArrayUtils.isEmpty(notEmptyLongArray));\n \n         int[] emptyIntArray = new int[] {};\n         int[] notEmptyIntArray = new int[] { 1 };\n-        assertEquals(true, ArrayUtils.isEmpty((int[])null));\n-        assertEquals(true, ArrayUtils.isEmpty(emptyIntArray));\n-        assertEquals(false, ArrayUtils.isEmpty(notEmptyIntArray));\n+        assertTrue(ArrayUtils.isEmpty((int[])null));\n+        assertTrue(ArrayUtils.isEmpty(emptyIntArray));\n+        assertFalse(ArrayUtils.isEmpty(notEmptyIntArray));\n \n         short[] emptyShortArray = new short[] {};\n         short[] notEmptyShortArray = new short[] { 1 };\n-        assertEquals(true, ArrayUtils.isEmpty((short[])null));\n-        assertEquals(true, ArrayUtils.isEmpty(emptyShortArray));\n-        assertEquals(false, ArrayUtils.isEmpty(notEmptyShortArray));\n+        assertTrue(ArrayUtils.isEmpty((short[])null));\n+        assertTrue(ArrayUtils.isEmpty(emptyShortArray));\n+        assertFalse(ArrayUtils.isEmpty(notEmptyShortArray));\n \n         char[] emptyCharArray = new char[] {};\n         char[] notEmptyCharArray = new char[] { 1 };\n-        assertEquals(true, ArrayUtils.isEmpty((char[])null));\n-        assertEquals(true, ArrayUtils.isEmpty(emptyCharArray));\n-        assertEquals(false, ArrayUtils.isEmpty(notEmptyCharArray));\n+        assertTrue(ArrayUtils.isEmpty((char[])null));\n+        assertTrue(ArrayUtils.isEmpty(emptyCharArray));\n+        assertFalse(ArrayUtils.isEmpty(notEmptyCharArray));\n \n         byte[] emptyByteArray = new byte[] {};\n         byte[] notEmptyByteArray = new byte[] { 1 };\n-        assertEquals(true, ArrayUtils.isEmpty((byte[])null));\n-        assertEquals(true, ArrayUtils.isEmpty(emptyByteArray));\n-        assertEquals(false, ArrayUtils.isEmpty(notEmptyByteArray));\n+        assertTrue(ArrayUtils.isEmpty((byte[])null));\n+        assertTrue(ArrayUtils.isEmpty(emptyByteArray));\n+        assertFalse(ArrayUtils.isEmpty(notEmptyByteArray));\n \n         double[] emptyDoubleArray = new double[] {};\n         double[] notEmptyDoubleArray = new double[] { 1.0 };\n-        assertEquals(true, ArrayUtils.isEmpty((double[])null));\n-        assertEquals(true, ArrayUtils.isEmpty(emptyDoubleArray));\n-        assertEquals(false, ArrayUtils.isEmpty(notEmptyDoubleArray));\n+        assertTrue(ArrayUtils.isEmpty((double[])null));\n+        assertTrue(ArrayUtils.isEmpty(emptyDoubleArray));\n+        assertFalse(ArrayUtils.isEmpty(notEmptyDoubleArray));\n \n         float[] emptyFloatArray = new float[] {};\n         float[] notEmptyFloatArray = new float[] { 1.0F };\n-        assertEquals(true, ArrayUtils.isEmpty((float[])null));\n-        assertEquals(true, ArrayUtils.isEmpty(emptyFloatArray));\n-        assertEquals(false, ArrayUtils.isEmpty(notEmptyFloatArray));\n+        assertTrue(ArrayUtils.isEmpty((float[])null));\n+        assertTrue(ArrayUtils.isEmpty(emptyFloatArray));\n+        assertFalse(ArrayUtils.isEmpty(notEmptyFloatArray));\n \n         boolean[] emptyBooleanArray = new boolean[] {};\n         boolean[] notEmptyBooleanArray = new boolean[] { true };\n-        assertEquals(true, ArrayUtils.isEmpty((boolean[])null));\n-        assertEquals(true, ArrayUtils.isEmpty(emptyBooleanArray));\n-        assertEquals(false, ArrayUtils.isEmpty(notEmptyBooleanArray));\n+        assertTrue(ArrayUtils.isEmpty((boolean[])null));\n+        assertTrue(ArrayUtils.isEmpty(emptyBooleanArray));\n+        assertFalse(ArrayUtils.isEmpty(notEmptyBooleanArray));\n     }\n     \n    /**\n--- a/src/test/java/org/apache/commons/lang3/BitFieldTest.java\n+++ b/src/test/java/org/apache/commons/lang3/BitFieldTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n \n import org.junit.Test;\n         assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false));\n         byte clearedBit = new BitField(0x40).setByteBoolean((byte) - 63, false);\n \n-        assertEquals(false, new BitField(0x40).isSet(clearedBit));\n+        assertFalse(new BitField(0x40).isSet(clearedBit));\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n     @Test\n     public void testClass() {\n         // class changed to non-public in 3.0\n-        assertEquals(false, Modifier.isPublic(CharRange.class.getModifiers()));\n-        assertEquals(true, Modifier.isFinal(CharRange.class.getModifiers()));\n+        assertFalse(Modifier.isPublic(CharRange.class.getModifiers()));\n+        assertTrue(Modifier.isFinal(CharRange.class.getModifiers()));\n     }\n \n     //-----------------------------------------------------------------------\n         CharRange rangea = CharRange.is('a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('a', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n+        assertFalse(rangea.isNegated());\n         assertEquals(\"a\", rangea.toString());\n     }\n \n         CharRange rangea = CharRange.isNot('a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('a', rangea.getEnd());\n-        assertEquals(true, rangea.isNegated());\n+        assertTrue(rangea.isNegated());\n         assertEquals(\"^a\", rangea.toString());\n     }\n \n         CharRange rangea = CharRange.isIn('a', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('a', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n+        assertFalse(rangea.isNegated());\n         assertEquals(\"a\", rangea.toString());\n     }\n \n         CharRange rangea = CharRange.isIn('a', 'e');\n         assertEquals('a', rangea.getStart());\n         assertEquals('e', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n+        assertFalse(rangea.isNegated());\n         assertEquals(\"a-e\", rangea.toString());\n     }\n \n         CharRange rangea = CharRange.isIn('e', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('e', rangea.getEnd());\n-        assertEquals(false, rangea.isNegated());\n+        assertFalse(rangea.isNegated());\n         assertEquals(\"a-e\", rangea.toString());\n     }\n \n         CharRange rangea = CharRange.isNotIn('a', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('a', rangea.getEnd());\n-        assertEquals(true, rangea.isNegated());\n+        assertTrue(rangea.isNegated());\n         assertEquals(\"^a\", rangea.toString());\n     }\n \n         CharRange rangea = CharRange.isNotIn('a', 'e');\n         assertEquals('a', rangea.getStart());\n         assertEquals('e', rangea.getEnd());\n-        assertEquals(true, rangea.isNegated());\n+        assertTrue(rangea.isNegated());\n         assertEquals(\"^a-e\", rangea.toString());\n     }\n \n         CharRange rangea = CharRange.isNotIn('e', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals('e', rangea.getEnd());\n-        assertEquals(true, rangea.isNegated());\n+        assertTrue(rangea.isNegated());\n         assertEquals(\"^a-e\", rangea.toString());\n     }\n \n         CharRange rangeae = CharRange.isIn('a', 'e');\n         CharRange rangenotbf = CharRange.isIn('b', 'f');\n \n-        assertEquals(false, rangea.equals(null));\n-\n-        assertEquals(true, rangea.equals(rangea));\n-        assertEquals(true, rangea.equals(CharRange.is('a')));\n-        assertEquals(true, rangeae.equals(rangeae));\n-        assertEquals(true, rangeae.equals(CharRange.isIn('a', 'e')));\n-        assertEquals(true, rangenotbf.equals(rangenotbf));\n-        assertEquals(true, rangenotbf.equals(CharRange.isIn('b', 'f')));\n-\n-        assertEquals(false, rangea.equals(rangeae));\n-        assertEquals(false, rangea.equals(rangenotbf));\n-        assertEquals(false, rangeae.equals(rangea));\n-        assertEquals(false, rangeae.equals(rangenotbf));\n-        assertEquals(false, rangenotbf.equals(rangea));\n-        assertEquals(false, rangenotbf.equals(rangeae));\n+        assertFalse(rangea.equals(null));\n+\n+        assertTrue(rangea.equals(rangea));\n+        assertTrue(rangea.equals(CharRange.is('a')));\n+        assertTrue(rangeae.equals(rangeae));\n+        assertTrue(rangeae.equals(CharRange.isIn('a', 'e')));\n+        assertTrue(rangenotbf.equals(rangenotbf));\n+        assertTrue(rangenotbf.equals(CharRange.isIn('b', 'f')));\n+\n+        assertFalse(rangea.equals(rangeae));\n+        assertFalse(rangea.equals(rangenotbf));\n+        assertFalse(rangeae.equals(rangea));\n+        assertFalse(rangeae.equals(rangenotbf));\n+        assertFalse(rangenotbf.equals(rangea));\n+        assertFalse(rangenotbf.equals(rangeae));\n     }\n \n     @Test\n         assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());\n         assertEquals(true, rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());\n \n-        assertEquals(false, rangea.hashCode() == rangeae.hashCode());\n-        assertEquals(false, rangea.hashCode() == rangenotbf.hashCode());\n-        assertEquals(false, rangeae.hashCode() == rangea.hashCode());\n-        assertEquals(false, rangeae.hashCode() == rangenotbf.hashCode());\n-        assertEquals(false, rangenotbf.hashCode() == rangea.hashCode());\n-        assertEquals(false, rangenotbf.hashCode() == rangeae.hashCode());\n+        assertFalse(rangea.hashCode() == rangeae.hashCode());\n+        assertFalse(rangea.hashCode() == rangenotbf.hashCode());\n+        assertFalse(rangeae.hashCode() == rangea.hashCode());\n+        assertFalse(rangeae.hashCode() == rangenotbf.hashCode());\n+        assertFalse(rangenotbf.hashCode() == rangea.hashCode());\n+        assertFalse(rangenotbf.hashCode() == rangeae.hashCode());\n     }\n \n     //-----------------------------------------------------------------------\n     @Test\n     public void testContains_Char() {\n         CharRange range = CharRange.is('c');\n-        assertEquals(false, range.contains('b'));\n-        assertEquals(true, range.contains('c'));\n-        assertEquals(false, range.contains('d'));\n-        assertEquals(false, range.contains('e'));\n+        assertFalse(range.contains('b'));\n+        assertTrue(range.contains('c'));\n+        assertFalse(range.contains('d'));\n+        assertFalse(range.contains('e'));\n \n         range = CharRange.isIn('c', 'd');\n-        assertEquals(false, range.contains('b'));\n-        assertEquals(true, range.contains('c'));\n-        assertEquals(true, range.contains('d'));\n-        assertEquals(false, range.contains('e'));\n+        assertFalse(range.contains('b'));\n+        assertTrue(range.contains('c'));\n+        assertTrue(range.contains('d'));\n+        assertFalse(range.contains('e'));\n \n         range = CharRange.isIn('d', 'c');\n-        assertEquals(false, range.contains('b'));\n-        assertEquals(true, range.contains('c'));\n-        assertEquals(true, range.contains('d'));\n-        assertEquals(false, range.contains('e'));\n+        assertFalse(range.contains('b'));\n+        assertTrue(range.contains('c'));\n+        assertTrue(range.contains('d'));\n+        assertFalse(range.contains('e'));\n \n         range = CharRange.isNotIn('c', 'd');\n-        assertEquals(true, range.contains('b'));\n-        assertEquals(false, range.contains('c'));\n-        assertEquals(false, range.contains('d'));\n-        assertEquals(true, range.contains('e'));\n-        assertEquals(true, range.contains((char) 0));\n-        assertEquals(true, range.contains(Character.MAX_VALUE));\n+        assertTrue(range.contains('b'));\n+        assertFalse(range.contains('c'));\n+        assertFalse(range.contains('d'));\n+        assertTrue(range.contains('e'));\n+        assertTrue(range.contains((char) 0));\n+        assertTrue(range.contains(Character.MAX_VALUE));\n     }\n \n     //-----------------------------------------------------------------------\n         CharRange ae = CharRange.isIn('a', 'e');\n \n         // normal/normal\n-        assertEquals(false, c.contains(b));\n-        assertEquals(true, c.contains(c));\n-        assertEquals(true, c.contains(c2));\n-        assertEquals(false, c.contains(d));\n-\n-        assertEquals(false, c.contains(cd));\n-        assertEquals(false, c.contains(bd));\n-        assertEquals(false, c.contains(bc));\n-        assertEquals(false, c.contains(ab));\n-        assertEquals(false, c.contains(de));\n-\n-        assertEquals(true, cd.contains(c));\n-        assertEquals(true, bd.contains(c));\n-        assertEquals(true, bc.contains(c));\n-        assertEquals(false, ab.contains(c));\n-        assertEquals(false, de.contains(c));\n-\n-        assertEquals(true, ae.contains(b));\n-        assertEquals(true, ae.contains(ab));\n-        assertEquals(true, ae.contains(bc));\n-        assertEquals(true, ae.contains(cd));\n-        assertEquals(true, ae.contains(de));\n+        assertFalse(c.contains(b));\n+        assertTrue(c.contains(c));\n+        assertTrue(c.contains(c2));\n+        assertFalse(c.contains(d));\n+\n+        assertFalse(c.contains(cd));\n+        assertFalse(c.contains(bd));\n+        assertFalse(c.contains(bc));\n+        assertFalse(c.contains(ab));\n+        assertFalse(c.contains(de));\n+\n+        assertTrue(cd.contains(c));\n+        assertTrue(bd.contains(c));\n+        assertTrue(bc.contains(c));\n+        assertFalse(ab.contains(c));\n+        assertFalse(de.contains(c));\n+\n+        assertTrue(ae.contains(b));\n+        assertTrue(ae.contains(ab));\n+        assertTrue(ae.contains(bc));\n+        assertTrue(ae.contains(cd));\n+        assertTrue(ae.contains(de));\n \n         CharRange notb = CharRange.isNot('b');\n         CharRange notc = CharRange.isNot('c');\n         CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE);\n \n         // normal/negated\n-        assertEquals(false, c.contains(notc));\n-        assertEquals(false, c.contains(notbd));\n-        assertEquals(true, all.contains(notc));\n-        assertEquals(true, all.contains(notbd));\n-        assertEquals(false, allbutfirst.contains(notc));\n-        assertEquals(false, allbutfirst.contains(notbd));\n+        assertFalse(c.contains(notc));\n+        assertFalse(c.contains(notbd));\n+        assertTrue(all.contains(notc));\n+        assertTrue(all.contains(notbd));\n+        assertFalse(allbutfirst.contains(notc));\n+        assertFalse(allbutfirst.contains(notbd));\n \n         // negated/normal\n-        assertEquals(true, notc.contains(a));\n-        assertEquals(true, notc.contains(b));\n-        assertEquals(false, notc.contains(c));\n-        assertEquals(true, notc.contains(d));\n-        assertEquals(true, notc.contains(e));\n-\n-        assertEquals(true, notc.contains(ab));\n-        assertEquals(false, notc.contains(bc));\n-        assertEquals(false, notc.contains(bd));\n-        assertEquals(false, notc.contains(cd));\n-        assertEquals(true, notc.contains(de));\n-        assertEquals(false, notc.contains(ae));\n-        assertEquals(false, notc.contains(all));\n-        assertEquals(false, notc.contains(allbutfirst));\n-\n-        assertEquals(true, notbd.contains(a));\n-        assertEquals(false, notbd.contains(b));\n-        assertEquals(false, notbd.contains(c));\n-        assertEquals(false, notbd.contains(d));\n-        assertEquals(true, notbd.contains(e));\n-\n-        assertEquals(true, notcd.contains(ab));\n-        assertEquals(false, notcd.contains(bc));\n-        assertEquals(false, notcd.contains(bd));\n-        assertEquals(false, notcd.contains(cd));\n-        assertEquals(false, notcd.contains(de));\n-        assertEquals(false, notcd.contains(ae));\n-        assertEquals(true, notcd.contains(ef));\n-        assertEquals(false, notcd.contains(all));\n-        assertEquals(false, notcd.contains(allbutfirst));\n+        assertTrue(notc.contains(a));\n+        assertTrue(notc.contains(b));\n+        assertFalse(notc.contains(c));\n+        assertTrue(notc.contains(d));\n+        assertTrue(notc.contains(e));\n+\n+        assertTrue(notc.contains(ab));\n+        assertFalse(notc.contains(bc));\n+        assertFalse(notc.contains(bd));\n+        assertFalse(notc.contains(cd));\n+        assertTrue(notc.contains(de));\n+        assertFalse(notc.contains(ae));\n+        assertFalse(notc.contains(all));\n+        assertFalse(notc.contains(allbutfirst));\n+\n+        assertTrue(notbd.contains(a));\n+        assertFalse(notbd.contains(b));\n+        assertFalse(notbd.contains(c));\n+        assertFalse(notbd.contains(d));\n+        assertTrue(notbd.contains(e));\n+\n+        assertTrue(notcd.contains(ab));\n+        assertFalse(notcd.contains(bc));\n+        assertFalse(notcd.contains(bd));\n+        assertFalse(notcd.contains(cd));\n+        assertFalse(notcd.contains(de));\n+        assertFalse(notcd.contains(ae));\n+        assertTrue(notcd.contains(ef));\n+        assertFalse(notcd.contains(all));\n+        assertFalse(notcd.contains(allbutfirst));\n \n         // negated/negated\n-        assertEquals(false, notc.contains(notb));\n-        assertEquals(true, notc.contains(notc));\n-        assertEquals(false, notc.contains(notd));\n-\n-        assertEquals(false, notc.contains(notab));\n-        assertEquals(true, notc.contains(notbc));\n-        assertEquals(true, notc.contains(notbd));\n-        assertEquals(true, notc.contains(notcd));\n-        assertEquals(false, notc.contains(notde));\n-\n-        assertEquals(false, notbd.contains(notb));\n-        assertEquals(false, notbd.contains(notc));\n-        assertEquals(false, notbd.contains(notd));\n-\n-        assertEquals(false, notbd.contains(notab));\n-        assertEquals(false, notbd.contains(notbc));\n-        assertEquals(true, notbd.contains(notbd));\n-        assertEquals(false, notbd.contains(notcd));\n-        assertEquals(false, notbd.contains(notde));\n-        assertEquals(true, notbd.contains(notae));\n+        assertFalse(notc.contains(notb));\n+        assertTrue(notc.contains(notc));\n+        assertFalse(notc.contains(notd));\n+\n+        assertFalse(notc.contains(notab));\n+        assertTrue(notc.contains(notbc));\n+        assertTrue(notc.contains(notbd));\n+        assertTrue(notc.contains(notcd));\n+        assertFalse(notc.contains(notde));\n+\n+        assertFalse(notbd.contains(notb));\n+        assertFalse(notbd.contains(notc));\n+        assertFalse(notbd.contains(notd));\n+\n+        assertFalse(notbd.contains(notab));\n+        assertFalse(notbd.contains(notbc));\n+        assertTrue(notbd.contains(notbd));\n+        assertFalse(notbd.contains(notcd));\n+        assertFalse(notbd.contains(notde));\n+        assertTrue(notbd.contains(notae));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharSequenceUtilsTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n         assertNotNull(new CharSequenceUtils());\n         Constructor<?>[] cons = CharSequenceUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(CharSequenceUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(CharSequenceUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(CharSequenceUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(CharSequenceUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/CharSetTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharSetTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n \n import java.lang.reflect.Modifier;\n \n     //-----------------------------------------------------------------------\n     @Test\n     public void testClass() {\n-        assertEquals(true, Modifier.isPublic(CharSet.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(CharSet.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(CharSet.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(CharSet.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n         set = CharSet.getInstance(\"abc\");\n         array = set.getCharRanges();\n         assertEquals(3, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\n         \n         set = CharSet.getInstance(\"a-ce-f\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'c')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'c')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n         \n         set = CharSet.getInstance(\"ae-f\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n         \n         set = CharSet.getInstance(\"e-fa\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n         \n         set = CharSet.getInstance(\"ae-fm-pz\");\n         array = set.getCharRanges();\n         assertEquals(4, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('m', 'p')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('z')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('e', 'f')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('m', 'p')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('z')));\n     }\n     \n     @Test\n         set = CharSet.getInstance(\"^abc\");\n         array = set.getCharRanges();\n         assertEquals(3, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\n         \n         set = CharSet.getInstance(\"b^ac\");\n         array = set.getCharRanges();\n         assertEquals(3, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\n         \n         set = CharSet.getInstance(\"db^ac\");\n         array = set.getCharRanges();\n         assertEquals(4, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('d')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('d')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('c')));\n         \n         set = CharSet.getInstance(\"^b^a\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('b')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('b')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a')));\n         \n         set = CharSet.getInstance(\"b^a-c^z\");\n         array = set.getCharRanges();\n         assertEquals(3, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('a', 'c')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('z')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('b')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('z')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('b')));\n     }\n \n     @Test\n         set = CharSet.getInstance(\"-\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"--\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"---\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"----\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"-a\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\n         \n         set = CharSet.getInstance(\"a-\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('-')));\n         \n         set = CharSet.getInstance(\"a--\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', '-')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-')));\n         \n         set = CharSet.getInstance(\"--a\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('-', 'a')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a')));\n     }\n     \n     @Test\n         set = CharSet.getInstance(\"^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n         \n         set = CharSet.getInstance(\"^^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n         \n         set = CharSet.getInstance(\"^^^\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n         \n         set = CharSet.getInstance(\"^^^^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\" x2\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\" x2\n         \n         set = CharSet.getInstance(\"a^\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('a'))); // \"a\"\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); // \"a\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('^'))); // \"^\"\n         \n         set = CharSet.getInstance(\"^a-\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('a'))); // \"^a\"\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); // \"^a\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n         \n         set = CharSet.getInstance(\"^^-c\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); // \"^^-c\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('^', 'c'))); // \"^^-c\"\n         \n         set = CharSet.getInstance(\"^c-^\");\n         array = set.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n         \n         set = CharSet.getInstance(\"^c-^d\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('d'))); // \"d\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('c', '^'))); // \"^c-^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); // \"d\"\n         \n         set = CharSet.getInstance(\"^^-\");\n         array = set.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNot('^'))); // \"^^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); // \"-\"\n     }\n     \n     @Test\n         \n         set = CharSet.getInstance(\"a-^c\");\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', '^'))); // \"a-^\"\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n-        assertEquals(false, set.contains('b'));\n-        assertEquals(true, set.contains('^'));  \n-        assertEquals(true, set.contains('_')); // between ^ and a\n-        assertEquals(true, set.contains('c'));  \n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '^'))); // \"a-^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n+        assertFalse(set.contains('b'));\n+        assertTrue(set.contains('^'));  \n+        assertTrue(set.contains('_')); // between ^ and a\n+        assertTrue(set.contains('c'));  \n         \n         set = CharSet.getInstance(\"^a-^c\");\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); // \"^a-^\"\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n-        assertEquals(true, set.contains('b'));\n-        assertEquals(false, set.contains('^'));  \n-        assertEquals(false, set.contains('_')); // between ^ and a\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', '^'))); // \"^a-^\"\n+        assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); // \"c\"\n+        assertTrue(set.contains('b'));\n+        assertFalse(set.contains('^'));  \n+        assertFalse(set.contains('_')); // between ^ and a\n         \n         set = CharSet.getInstance(\"a- ^-- \"); //contains everything\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', ' '))); // \"a- \"\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); // \"^-- \"\n-        assertEquals(true, set.contains('#'));\n-        assertEquals(true, set.contains('^'));\n-        assertEquals(true, set.contains('a'));\n-        assertEquals(true, set.contains('*'));\n-        assertEquals(true, set.contains('A'));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', ' '))); // \"a- \"\n+        assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('-', ' '))); // \"^-- \"\n+        assertTrue(set.contains('#'));\n+        assertTrue(set.contains('^'));\n+        assertTrue(set.contains('a'));\n+        assertTrue(set.contains('*'));\n+        assertTrue(set.contains('A'));\n         \n         set = CharSet.getInstance(\"^-b\");\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"^-b\"\n-        assertEquals(true, set.contains('b'));\n-        assertEquals(true, set.contains('_')); // between ^ and a\n-        assertEquals(false, set.contains('A'));\n-        assertEquals(true, set.contains('^')); \n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"^-b\"\n+        assertTrue(set.contains('b'));\n+        assertTrue(set.contains('_')); // between ^ and a\n+        assertFalse(set.contains('A'));\n+        assertTrue(set.contains('^')); \n         \n         set = CharSet.getInstance(\"b-^\");\n         array = set.getCharRanges();\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"b-^\"\n-        assertEquals(true, set.contains('b'));\n-        assertEquals(true, set.contains('^'));\n-        assertEquals(true, set.contains('a')); // between ^ and b\n-        assertEquals(false, set.contains('c')); \n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('^','b'))); // \"b-^\"\n+        assertTrue(set.contains('b'));\n+        assertTrue(set.contains('^'));\n+        assertTrue(set.contains('a')); // between ^ and b\n+        assertFalse(set.contains('c')); \n     }\n         \n     //-----------------------------------------------------------------------    \n         CharSet notatoc = CharSet.getInstance(\"^a-c\");\n         CharSet notatoc2 = CharSet.getInstance(\"^a-c\");\n         \n-        assertEquals(false, abc.equals(null));\n-        \n-        assertEquals(true, abc.equals(abc));\n-        assertEquals(true, abc.equals(abc2));\n-        assertEquals(false, abc.equals(atoc));\n-        assertEquals(false, abc.equals(notatoc));\n-        \n-        assertEquals(false, atoc.equals(abc));\n-        assertEquals(true, atoc.equals(atoc));\n-        assertEquals(true, atoc.equals(atoc2));\n-        assertEquals(false, atoc.equals(notatoc));\n-        \n-        assertEquals(false, notatoc.equals(abc));\n-        assertEquals(false, notatoc.equals(atoc));\n-        assertEquals(true, notatoc.equals(notatoc));\n-        assertEquals(true, notatoc.equals(notatoc2));\n+        assertFalse(abc.equals(null));\n+        \n+        assertTrue(abc.equals(abc));\n+        assertTrue(abc.equals(abc2));\n+        assertFalse(abc.equals(atoc));\n+        assertFalse(abc.equals(notatoc));\n+        \n+        assertFalse(atoc.equals(abc));\n+        assertTrue(atoc.equals(atoc));\n+        assertTrue(atoc.equals(atoc2));\n+        assertFalse(atoc.equals(notatoc));\n+        \n+        assertFalse(notatoc.equals(abc));\n+        assertFalse(notatoc.equals(atoc));\n+        assertTrue(notatoc.equals(notatoc));\n+        assertTrue(notatoc.equals(notatoc2));\n     }\n             \n     @Test\n         CharSet bd = CharSet.getInstance(\"bd\");\n         CharSet notbtod = CharSet.getInstance(\"^b-d\");\n         \n-        assertEquals(false, btod.contains('a'));\n-        assertEquals(true, btod.contains('b'));\n-        assertEquals(true, btod.contains('c'));\n-        assertEquals(true, btod.contains('d'));\n-        assertEquals(false, btod.contains('e'));\n-        \n-        assertEquals(false, bcd.contains('a'));\n-        assertEquals(true, bcd.contains('b'));\n-        assertEquals(true, bcd.contains('c'));\n-        assertEquals(true, bcd.contains('d'));\n-        assertEquals(false, bcd.contains('e'));\n-        \n-        assertEquals(false, bd.contains('a'));\n-        assertEquals(true, bd.contains('b'));\n-        assertEquals(false, bd.contains('c'));\n-        assertEquals(true, bd.contains('d'));\n-        assertEquals(false, bd.contains('e'));\n-        \n-        assertEquals(true, notbtod.contains('a'));\n-        assertEquals(false, notbtod.contains('b'));\n-        assertEquals(false, notbtod.contains('c'));\n-        assertEquals(false, notbtod.contains('d'));\n-        assertEquals(true, notbtod.contains('e'));\n-        \n-        assertEquals(false, dtob.contains('a'));\n-        assertEquals(true, dtob.contains('b'));\n-        assertEquals(true, dtob.contains('c'));\n-        assertEquals(true, dtob.contains('d'));\n-        assertEquals(false, dtob.contains('e'));\n+        assertFalse(btod.contains('a'));\n+        assertTrue(btod.contains('b'));\n+        assertTrue(btod.contains('c'));\n+        assertTrue(btod.contains('d'));\n+        assertFalse(btod.contains('e'));\n+        \n+        assertFalse(bcd.contains('a'));\n+        assertTrue(bcd.contains('b'));\n+        assertTrue(bcd.contains('c'));\n+        assertTrue(bcd.contains('d'));\n+        assertFalse(bcd.contains('e'));\n+        \n+        assertFalse(bd.contains('a'));\n+        assertTrue(bd.contains('b'));\n+        assertFalse(bd.contains('c'));\n+        assertTrue(bd.contains('d'));\n+        assertFalse(bd.contains('e'));\n+        \n+        assertTrue(notbtod.contains('a'));\n+        assertFalse(notbtod.contains('b'));\n+        assertFalse(notbtod.contains('c'));\n+        assertFalse(notbtod.contains('d'));\n+        assertTrue(notbtod.contains('e'));\n+        \n+        assertFalse(dtob.contains('a'));\n+        assertTrue(dtob.contains('b'));\n+        assertTrue(dtob.contains('c'));\n+        assertTrue(dtob.contains('d'));\n+        assertFalse(dtob.contains('e'));\n       \n         CharRange[] array = dtob.getCharRanges();\n         assertEquals(\"[b-d]\", dtob.toString());\n         \n         array = CharSet.ASCII_ALPHA.getCharRanges();\n         assertEquals(2, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n         \n         array = CharSet.ASCII_ALPHA_LOWER.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', 'z')));\n         \n         array = CharSet.ASCII_ALPHA_UPPER.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('A', 'Z')));\n         \n         array = CharSet.ASCII_NUMERIC.getCharRanges();\n         assertEquals(1, array.length);\n-        assertEquals(true, ArrayUtils.contains(array, CharRange.isIn('0', '9')));\n+        assertTrue(ArrayUtils.contains(array, CharRange.isIn('0', '9')));\n     }\n     \n }\n--- a/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharSetUtilsTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n         assertNotNull(new CharSetUtils());\n         Constructor<?>[] cons = CharSetUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(CharSetUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(CharSetUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(CharSetUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(CharSetUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n         assertNotNull(new ClassUtils());\n         Constructor<?>[] cons = ClassUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(ClassUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(ClassUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(ClassUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(ClassUtils.class.getModifiers()));\n     }\n \n     // -------------------------------------------------------------------------\n     // -------------------------------------------------------------------------\n     @Test\n     public void test_isInnerClass_Class() {\n-        assertEquals(true, ClassUtils.isInnerClass(Inner.class));\n-        assertEquals(true, ClassUtils.isInnerClass(Map.Entry.class));\n-        assertEquals(true, ClassUtils.isInnerClass(new Cloneable() {\n+        assertTrue(ClassUtils.isInnerClass(Inner.class));\n+        assertTrue(ClassUtils.isInnerClass(Map.Entry.class));\n+        assertTrue(ClassUtils.isInnerClass(new Cloneable() {\n         }.getClass()));\n-        assertEquals(false, ClassUtils.isInnerClass(this.getClass()));\n-        assertEquals(false, ClassUtils.isInnerClass(String.class));\n-        assertEquals(false, ClassUtils.isInnerClass(null));\n+        assertFalse(ClassUtils.isInnerClass(this.getClass()));\n+        assertFalse(ClassUtils.isInnerClass(String.class));\n+        assertFalse(ClassUtils.isInnerClass(null));\n     }\n \n     // -------------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java\n \n import static org.apache.commons.lang3.JavaVersion.JAVA_1_4;\n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertSame;\n import static org.junit.Assert.assertTrue;\n         assertNotNull(new LocaleUtils());\n         Constructor<?>[] cons = LocaleUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(LocaleUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(LocaleUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(LocaleUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(LocaleUtils.class.getModifiers()));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n         // bytecode to see if the literals were folded into the\n         // class, or if the bytecode kept the method call.\n \n-        assertEquals(\"CONST(boolean)\", true, ObjectUtils.CONST(true));\n+        assertTrue(\"CONST(boolean)\", ObjectUtils.CONST(true));\n         assertEquals(\"CONST(byte)\", (byte) 3, ObjectUtils.CONST((byte) 3));\n         assertEquals(\"CONST(char)\", (char) 3, ObjectUtils.CONST((char) 3));\n         assertEquals(\"CONST(short)\", (short) 3, ObjectUtils.CONST((short) 3));\n         double MAGIC_DOUBLE = ObjectUtils.CONST(1.0);\n         String MAGIC_STRING = ObjectUtils.CONST(\"abc\");\n \n-        assertEquals(true, MAGIC_FLAG);\n+        assertTrue(MAGIC_FLAG);\n         assertEquals(127, MAGIC_BYTE1);\n         assertEquals(127, MAGIC_BYTE2);\n         assertEquals('a', MAGIC_CHAR);\n--- a/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n         assertNotNull(new RandomStringUtils());\n         Constructor<?>[] cons = RandomStringUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(RandomStringUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(RandomStringUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(RandomStringUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(RandomStringUtils.class.getModifiers()));\n     }\n     \n     //-----------------------------------------------------------------------\n         r1 = RandomStringUtils.randomAlphabetic(50);\n         assertEquals(\"randomAlphabetic(50)\", 50, r1.length());\n         for(int i = 0; i < r1.length(); i++) {\n-            assertEquals(\"r1 contains alphabetic\", true, Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)));\n+            assertTrue(\"r1 contains alphabetic\", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i)));\n         }\n         r2 = RandomStringUtils.randomAlphabetic(50);\n         assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n         r1 = RandomStringUtils.randomAlphanumeric(50);\n         assertEquals(\"randomAlphanumeric(50)\", 50, r1.length());\n         for(int i = 0; i < r1.length(); i++) {\n-            assertEquals(\"r1 contains alphanumeric\", true, Character.isLetterOrDigit(r1.charAt(i)));\n+            assertTrue(\"r1 contains alphanumeric\", Character.isLetterOrDigit(r1.charAt(i)));\n         }\n         r2 = RandomStringUtils.randomAlphabetic(50);\n         assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n         r1 = RandomStringUtils.randomNumeric(50);\n         assertEquals(\"randomNumeric(50)\", 50, r1.length());\n         for(int i = 0; i < r1.length(); i++) {\n-            assertEquals(\"r1 contains numeric\", true, Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)));\n+            assertTrue(\"r1 contains numeric\", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i)));\n         }\n         r2 = RandomStringUtils.randomNumeric(50);\n         assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n--- a/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java\n package org.apache.commons.lang3;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertSame;\n         assertNotNull(new SerializationUtils());\n         Constructor<?>[] cons = SerializationUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(SerializationUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(SerializationUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(SerializationUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(SerializationUtils.class.getModifiers()));\n     }\n     \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n package org.apache.commons.lang3.event;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.beans.PropertyChangeEvent;\n         assertNotNull(new EventUtils());\n         Constructor<?>[] cons = EventUtils.class.getDeclaredConstructors();\n         assertEquals(1, cons.length);\n-        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n-        assertEquals(true, Modifier.isPublic(EventUtils.class.getModifiers()));\n-        assertEquals(false, Modifier.isFinal(EventUtils.class.getModifiers()));\n+        assertTrue(Modifier.isPublic(cons[0].getModifiers()));\n+        assertTrue(Modifier.isPublic(EventUtils.class.getModifiers()));\n+        assertFalse(Modifier.isFinal(EventUtils.class.getModifiers()));\n     }\n     \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java\n  */\n public class ContextedRuntimeExceptionTest extends AbstractExceptionContextTest<ContextedRuntimeException> {\n     \n+    @Override\n     @Before\n     public void setUp() throws Exception {\n         exceptionContext = new ContextedRuntimeException(new Exception(TEST_MESSAGE));\n--- a/src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/DefaultExceptionContextTest.java\n  */\n public class DefaultExceptionContextTest extends AbstractExceptionContextTest<DefaultExceptionContext> {\n     \n+    @Override\n     @Before\n     public void setUp() throws Exception {\n         exceptionContext = new DefaultExceptionContext();\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableBooleanTest.java\n     // ----------------------------------------------------------------\n     @Test\n     public void testConstructors() {\n-        assertEquals(false, new MutableBoolean().booleanValue());\n+        assertFalse(new MutableBoolean().booleanValue());\n \n-        assertEquals(true, new MutableBoolean(true).booleanValue());\n-        assertEquals(false, new MutableBoolean(false).booleanValue());\n+        assertTrue(new MutableBoolean(true).booleanValue());\n+        assertFalse(new MutableBoolean(false).booleanValue());\n \n-        assertEquals(true, new MutableBoolean(Boolean.TRUE).booleanValue());\n-        assertEquals(false, new MutableBoolean(Boolean.FALSE).booleanValue());\n+        assertTrue(new MutableBoolean(Boolean.TRUE).booleanValue());\n+        assertFalse(new MutableBoolean(Boolean.FALSE).booleanValue());\n \n         try {\n             new MutableBoolean(null);\n         final MutableBoolean mutBoolB = new MutableBoolean(false);\n         final MutableBoolean mutBoolC = new MutableBoolean(true);\n \n-        assertEquals(true, mutBoolA.equals(mutBoolA));\n-        assertEquals(true, mutBoolA.equals(mutBoolB));\n-        assertEquals(true, mutBoolB.equals(mutBoolA));\n-        assertEquals(true, mutBoolB.equals(mutBoolB));\n-        assertEquals(false, mutBoolA.equals(mutBoolC));\n-        assertEquals(false, mutBoolB.equals(mutBoolC));\n-        assertEquals(true, mutBoolC.equals(mutBoolC));\n-        assertEquals(false, mutBoolA.equals(null));\n-        assertEquals(false, mutBoolA.equals(Boolean.FALSE));\n-        assertEquals(false, mutBoolA.equals(\"false\"));\n+        assertTrue(mutBoolA.equals(mutBoolA));\n+        assertTrue(mutBoolA.equals(mutBoolB));\n+        assertTrue(mutBoolB.equals(mutBoolA));\n+        assertTrue(mutBoolB.equals(mutBoolB));\n+        assertFalse(mutBoolA.equals(mutBoolC));\n+        assertFalse(mutBoolB.equals(mutBoolC));\n+        assertTrue(mutBoolC.equals(mutBoolC));\n+        assertFalse(mutBoolA.equals(null));\n+        assertFalse(mutBoolA.equals(Boolean.FALSE));\n+        assertFalse(mutBoolA.equals(\"false\"));\n     }\n \n     @Test\n     public void testGetSet() {\n-        assertEquals(false, new MutableBoolean().booleanValue());\n+        assertFalse(new MutableBoolean().booleanValue());\n         assertEquals(Boolean.FALSE, new MutableBoolean().getValue());\n         \n         final MutableBoolean mutBool = new MutableBoolean(false);\n         assertEquals(Boolean.FALSE, mutBool.toBoolean());\n-        assertEquals(false, mutBool.booleanValue());\n-        assertEquals(true, mutBool.isFalse());\n-        assertEquals(false, mutBool.isTrue());\n+        assertFalse(mutBool.booleanValue());\n+        assertTrue(mutBool.isFalse());\n+        assertFalse(mutBool.isTrue());\n \n         mutBool.setValue(Boolean.TRUE);\n         assertEquals(Boolean.TRUE, mutBool.toBoolean());\n-        assertEquals(true, mutBool.booleanValue());\n-        assertEquals(false, mutBool.isFalse());\n-        assertEquals(true, mutBool.isTrue());\n+        assertTrue(mutBool.booleanValue());\n+        assertFalse(mutBool.isFalse());\n+        assertTrue(mutBool.isTrue());\n \n         mutBool.setValue(false);\n-        assertEquals(false, mutBool.booleanValue());\n+        assertFalse(mutBool.booleanValue());\n \n         mutBool.setValue(true);\n-        assertEquals(true, mutBool.booleanValue());\n+        assertTrue(mutBool.booleanValue());\n \n         try {\n             mutBool.setValue(null);\n         final MutableBoolean mutBoolB = new MutableBoolean(false);\n         final MutableBoolean mutBoolC = new MutableBoolean(true);\n \n-        assertEquals(true, mutBoolA.hashCode() == mutBoolA.hashCode());\n-        assertEquals(true, mutBoolA.hashCode() == mutBoolB.hashCode());\n-        assertEquals(false, mutBoolA.hashCode() == mutBoolC.hashCode());\n-        assertEquals(true, mutBoolA.hashCode() == Boolean.FALSE.hashCode());\n-        assertEquals(true, mutBoolC.hashCode() == Boolean.TRUE.hashCode());\n+        assertEquals(mutBoolA.hashCode(), mutBoolA.hashCode());\n+        assertEquals(mutBoolA.hashCode(), mutBoolB.hashCode());\n+        assertFalse(mutBoolA.hashCode() == mutBoolC.hashCode());\n+        assertEquals(mutBoolA.hashCode(), Boolean.FALSE.hashCode());\n+        assertEquals(mutBoolC.hashCode(), Boolean.TRUE.hashCode());\n     }\n \n     @Test", "timestamp": 1348016884, "metainfo": ""}