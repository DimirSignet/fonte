{"sha": "2542098feb312f16d0b48d8b77122a4ddebdc1df", "log": "Fix various boxing errors  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Object[]) null));\n         // Test valid array handling\n-        Object[] original = new Object[] {true, false};\n+        Object[] original = new Object[] {Boolean.TRUE, Boolean.FALSE};\n         assertEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         Object[] empty = new Object[]{};\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Long[]) null));\n         // Test valid array handling\n+        @SuppressWarnings(\"boxing\")\n         Long[] original = new Long[] {1L, 2L};\n         assertEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n         // Test null handling\n         assertEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null));\n         // Test valid array handling\n+        @SuppressWarnings(\"boxing\")\n         Short[] original = new Short[] {1, 2};\n         assertEquals(original, ArrayUtils.nullToEmpty(original));\n         // Test empty array handling\n--- a/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/CompareToBuilderTest.java\n  */\n package org.apache.commons.lang3.builder;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n     public void testObjectBuild() {\n         TestObject o1 = new TestObject(4);\n         TestObject o2 = new TestObject(4);\n-        assertTrue(new CompareToBuilder().append(o1, o1).build() == 0);\n-        assertTrue(new CompareToBuilder().append(o1, o2).build() == 0);\n+        assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build());\n+        assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build());\n         o2.setA(5);\n-        assertTrue(new CompareToBuilder().append(o1, o2).build() < 0);\n-        assertTrue(new CompareToBuilder().append(o2, o1).build() > 0);\n-        \n-        assertTrue(new CompareToBuilder().append(o1, null).build() > 0);\n-        assertTrue(new CompareToBuilder().append((Object) null, (Object) null).build() == 0);\n-        assertTrue(new CompareToBuilder().append(null, o1).build() < 0);\n+        assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0);\n+        assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0);\n+        \n+        assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0);\n+        assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).build());\n+        assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0);\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/BasicThreadFactoryTest.java\n         BasicThreadFactory factory = builder.wrappedFactory(wrapped).daemon(\n                 flag).build();\n         assertSame(\"Wrong thread\", t, factory.newThread(r));\n-        assertEquals(\"Wrong daemon flag\", flag, t.isDaemon());\n+        assertTrue(\"Wrong daemon flag\", flag == t.isDaemon());\n         EasyMock.verify(wrapped, r);\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java\n      * @param expected the expected result\n      */\n     private void checkEquals(Object obj, boolean expected) {\n-        assertEquals(\"Wrong result of equals\", expected, init.equals(obj));\n+        assertTrue(\"Wrong result of equals\", expected == init.equals(obj));\n         if (obj != null) {\n-            assertEquals(\"Not symmetric\", expected, obj.equals(init));\n+            assertTrue(\"Not symmetric\", expected == obj.equals(init));\n             if (expected) {\n                 assertEquals(\"Different hash codes\", init.hashCode(),\n                         obj.hashCode());\n--- a/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/tuple/MutableTripleTest.java\n         triple.setRight(Boolean.FALSE);\n         assertEquals(42, triple.getLeft().intValue());\n         assertEquals(\"bar\", triple.getMiddle());\n-        assertFalse(triple.getRight());\n+        assertEquals(Boolean.FALSE, triple.getRight());\n     }\n \n     @Test\n         MutableTriple<Integer, String, Boolean> triple = MutableTriple.of(0, \"foo\", Boolean.TRUE);\n         assertEquals(0, triple.getLeft().intValue());\n         assertEquals(\"foo\", triple.getMiddle());\n-        assertTrue(triple.getRight());\n+        assertEquals(Boolean.TRUE, triple.getRight());\n         MutableTriple<Object, String, String> triple2 = MutableTriple.of(null, \"bar\", \"hello\");\n         assertNull(triple2.getLeft());\n         assertEquals(\"bar\", triple2.getMiddle());\n--- a/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/tuple/TripleTest.java\n         assertEquals(0, ((ImmutableTriple<Integer, String, Boolean>) triple).left.intValue());\n         assertEquals(\"foo\", ((ImmutableTriple<Integer, String, Boolean>) triple).middle);\n         assertEquals(Boolean.TRUE, ((ImmutableTriple<Integer, String, Boolean>) triple).right);\n-        Triple<Object, String, Long> triple2 = Triple.of(null, \"bar\", 200L);\n+        Triple<Object, String, Long> triple2 = Triple.of(null, \"bar\", Long.valueOf(200L));\n         assertTrue(triple2 instanceof ImmutableTriple<?, ?, ?>);\n         assertNull(((ImmutableTriple<Object, String, Long>) triple2).left);\n         assertEquals(\"bar\", ((ImmutableTriple<Object, String, Long>) triple2).middle);", "timestamp": 1322393975, "metainfo": ""}