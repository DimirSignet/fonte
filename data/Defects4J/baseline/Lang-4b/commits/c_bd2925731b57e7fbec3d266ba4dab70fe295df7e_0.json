{"sha": "bd2925731b57e7fbec3d266ba4dab70fe295df7e", "log": "Removed the ability to modify the static store of cause method names. If that feature is wanted, it's easy for the user to pass in their own list, or use the newly added getDefaultCauseMethodNames and modify that before calling. This removes the need for synchronization code. LANG-491  ", "commit": "\n--- a/src/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang3/exception/ExceptionUtils.java\n  * @since 1.0\n  * @version $Id$\n  */\n-//@ThreadSafe\n public class ExceptionUtils {\n     \n     /**\n      */\n     static final String WRAPPED_MARKER = \" [wrapped] \";\n \n-    // Lock object for CAUSE_METHOD_NAMES\n-    private static final Object CAUSE_METHOD_NAMES_LOCK = new Object();\n-    \n     /**\n      * <p>The names of methods commonly used to access a wrapped exception.</p>\n      */\n-//    @GuardedBy(\"CAUSE_METHOD_NAMES_LOCK\")\n-    private static String[] CAUSE_METHOD_NAMES = {\n+    private static final String[] CAUSE_METHOD_NAMES = {\n         \"getCause\",\n         \"getNextException\",\n         \"getTargetException\",\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Adds to the list of method names used in the search for <code>Throwable</code>\n-     * objects.</p>\n-     * \n-     * @param methodName  the methodName to add to the list, <code>null</code>\n-     *  and empty strings are ignored\n-     * @since 2.0\n-     */\n-    public static void addCauseMethodName(String methodName) {\n-        if (StringUtils.isNotEmpty(methodName) && !isCauseMethodName(methodName)) {            \n-            List<String> list = getCauseMethodNameList();\n-            if (list.add(methodName)) {\n-                synchronized(CAUSE_METHOD_NAMES_LOCK) {\n-                    CAUSE_METHOD_NAMES = toArray(list);\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * <p>Removes from the list of method names used in the search for <code>Throwable</code>\n-     * objects.</p>\n-     * \n-     * @param methodName  the methodName to remove from the list, <code>null</code>\n-     *  and empty strings are ignored\n-     * @since 2.1\n-     */\n-    public static void removeCauseMethodName(String methodName) {\n-        if (StringUtils.isNotEmpty(methodName)) {\n-            List<String> list = getCauseMethodNameList();\n-            if (list.remove(methodName)) {\n-                synchronized(CAUSE_METHOD_NAMES_LOCK) {\n-                    CAUSE_METHOD_NAMES = toArray(list);\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n      * Returns the given list as a <code>String[]</code>.\n      * @param list a list to transform.\n      * @return the given list as a <code>String[]</code>.\n     }\n \n     /**\n-     * Returns {@link #CAUSE_METHOD_NAMES} as a List.\n-     *\n-     * @return {@link #CAUSE_METHOD_NAMES} as a List.\n-     */\n-    private static ArrayList<String> getCauseMethodNameList() {\n-        synchronized(CAUSE_METHOD_NAMES_LOCK) {\n-            return new ArrayList<String>(Arrays.asList(CAUSE_METHOD_NAMES));\n-        }\n-    }\n-\n-    /**\n-     * <p>Tests if the list of method names used in the search for <code>Throwable</code>\n-     * objects include the given name.</p>\n-     * \n-     * @param methodName  the methodName to search in the list.\n-     * @return if the list of method names used in the search for <code>Throwable</code>\n-     *  objects include the given name.\n-     * @since 2.1\n-     */\n-    public static boolean isCauseMethodName(String methodName) {\n-        synchronized(CAUSE_METHOD_NAMES_LOCK) {\n-            return ArrayUtils.indexOf(CAUSE_METHOD_NAMES, methodName) >= 0;\n-        }\n+     * <p>Returns the default names used when searching for the cause of an exception.</p>\n+     *\n+     * <p>This may be modified and used in the overloaded getCause(Throwable, String[]) method.</p>\n+     *\n+     * @return cloned array of the default method names\n+     * @since 3.0\n+     */\n+    public static String[] getDefaultCauseMethodNames() {\n+        return ArrayUtils.clone(CAUSE_METHOD_NAMES);\n     }\n \n     //-----------------------------------------------------------------------\n      * @since 1.0\n      */\n     public static Throwable getCause(Throwable throwable) {\n-        synchronized(CAUSE_METHOD_NAMES_LOCK) {\n-            return getCause(throwable, CAUSE_METHOD_NAMES);\n-        }\n+        return getCause(throwable, CAUSE_METHOD_NAMES);\n     }\n \n     /**\n         }\n \n         if (methodNames == null) {\n-            synchronized(CAUSE_METHOD_NAMES_LOCK) {\n-                methodNames = CAUSE_METHOD_NAMES;\n-            }\n+            methodNames = CAUSE_METHOD_NAMES;\n         }\n \n         for (int i = 0; i < methodNames.length; i++) {\n--- a/src/test/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n+++ b/src/test/org/apache/commons/lang3/exception/ExceptionUtilsTest.java\n     }\n     \n     //-----------------------------------------------------------------------\n-    \n-    public void testCauseMethodNameOps() {\n-        this.testCauseMethodNameOps(null);\n-        this.testCauseMethodNameOps(\"\");\n-        this.testCauseMethodNameOps(\" \");\n-        this.testCauseMethodNameOps(\"\\t\\r\\n\\t\");\n-        this.testCauseMethodNameOps(\"testMethodName\");\n-    }\n-    \n-    void testCauseMethodNameOps(String name) {\n-        String methodName = \"testMethodName\";\n-        try {\n-            Assert.assertFalse(ExceptionUtils.isCauseMethodName(methodName));\n-            ExceptionUtils.addCauseMethodName(methodName);            \n-            ExceptionUtils.addCauseMethodName(methodName);            \n-            Assert.assertTrue(ExceptionUtils.isCauseMethodName(methodName));\n-        } finally {\n-            ExceptionUtils.removeCauseMethodName(methodName);\n-            Assert.assertFalse(\n-                    \"The method name \" + methodName + \" should not be in the array\", \n-                    ExceptionUtils.isCauseMethodName(methodName));\n-        }\n-    }\n-    \n     public void testGetCause_Throwable() {\n         assertSame(null, ExceptionUtils.getCause(null));\n         assertSame(null, ExceptionUtils.getCause(withoutCause));", "timestamp": 1262411937, "metainfo": ""}