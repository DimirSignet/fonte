{"sha": "0765e3b8913100dd1f8163aa597d6e233137d162", "log": "StringBuffer => StringBuilder where being used as a local-only buffer  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n+++ b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java\n     private int readArgumentIndex(String pattern, ParsePosition pos) {\n         int start = pos.getIndex();\n         seekNonWs(pattern, pos);\n-        StringBuffer result = new StringBuffer();\n+        StringBuilder result = new StringBuilder();\n         boolean error = false;\n         for (; !error && pos.getIndex() < pattern.length(); next(pos)) {\n             char c = pattern.charAt(pos.getIndex());\n--- a/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DurationFormatUtils.java\n      */\n     static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds,\n             int milliseconds, boolean padWithZeros) {\n-        StringBuffer buffer = new StringBuffer();\n+        StringBuilder buffer = new StringBuilder();\n         boolean lastOutputSeconds = false;\n         int sz = tokens.length;\n         for (int i = 0; i < sz; i++) {\n             Token token = tokens[i];\n             Object value = token.getValue();\n             int count = token.getCount();\n-            if (value instanceof StringBuffer) {\n+            if (value instanceof StringBuilder) {\n                 buffer.append(value.toString());\n             } else {\n                 if (value == y) {\n         ArrayList<Token> list = new ArrayList<Token>(array.length);\n \n         boolean inLiteral = false;\n-        StringBuffer buffer = null;\n+        // Although the buffer is stored in a Token, the Tokens are only\n+        // used internally, so cannot be accessed by other threads\n+        StringBuilder buffer = null;\n         Token previous = null;\n         int sz = array.length;\n         for(int i=0; i<sz; i++) {\n                       buffer = null;\n                       inLiteral = false;\n                   } else {\n-                      buffer = new StringBuffer();\n+                      buffer = new StringBuilder();\n                       list.add(new Token(buffer));\n                       inLiteral = true;\n                   }\n                 case 'S'  : value = S; break;\n                 default   : \n                   if(buffer == null) {\n-                      buffer = new StringBuffer();\n+                      buffer = new StringBuilder();\n                       list.add(new Token(buffer));\n                   }\n                   buffer.append(ch);\n                 if (this.count != tok2.count) {\n                     return false;\n                 }\n-                if (this.value instanceof StringBuffer) {\n+                if (this.value instanceof StringBuilder) {\n                     return this.value.toString().equals(tok2.value.toString());\n                 } else if (this.value instanceof Number) {\n                     return this.value.equals(tok2.value);\n--- a/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n                 nf = NumberFormat.getCurrencyInstance(locale);\n                 emf = new ExtendedMessageFormat(pattern, locale, registry);\n             }\n-            StringBuffer expected = new StringBuffer();\n+            StringBuilder expected = new StringBuilder();\n             expected.append(\"Name: \");\n             expected.append(args[0].toString().toUpperCase());\n             expected.append(\" DOB: \");\n      * @param locale Locale\n      */\n     private void checkBuiltInFormat(String pattern, Map<String, ?> registry, Object[] args, Locale locale) {\n-        StringBuffer buffer = new StringBuffer();\n+        StringBuilder buffer = new StringBuilder();\n         buffer.append(\"Pattern=[\");\n         buffer.append(pattern);\n         buffer.append(\"], locale=[\");\n--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java\n         Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n         c.set(2005,0,1,12,0,0);\n         c.setTimeZone(TimeZone.getDefault());\n-        StringBuffer buffer = new StringBuffer ();\n+        StringBuilder buffer = new StringBuilder ();\n         int year = c.get(Calendar.YEAR);\n         int month = c.get(Calendar.MONTH) + 1;\n         int day = c.get(Calendar.DAY_OF_MONTH);\n         Calendar c = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\n         c.set(2005,0,1,12,0,0);\n         c.setTimeZone(TimeZone.getDefault());\n-        StringBuffer buffer = new StringBuffer ();\n+        StringBuilder buffer = new StringBuilder ();\n         int year = c.get(Calendar.YEAR);\n         int month = c.get(Calendar.MONTH) + 1;\n         int day = c.get(Calendar.DAY_OF_MONTH);\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n         // tests the ISO8601-like\n         assertArrayEquals(new DurationFormatUtils.Token[]{\n             new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n-            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\":\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.m, 2),\n-            new DurationFormatUtils.Token(new StringBuffer(\":\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\":\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.s, 2),\n-            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\".\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx(\"H:mm:ss.SSS\"));\n \n         // test the iso extended format\n         assertArrayEquals(new DurationFormatUtils.Token[]{\n-            new DurationFormatUtils.Token(new StringBuffer(\"P\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\"P\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.y, 4),\n-            new DurationFormatUtils.Token(new StringBuffer(\"Y\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\"Y\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.M, 1),\n-            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\"M\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.d, 1),\n-            new DurationFormatUtils.Token(new StringBuffer(\"DT\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\"DT\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.H, 1),\n-            new DurationFormatUtils.Token(new StringBuffer(\"H\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\"H\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.m, 1),\n-            new DurationFormatUtils.Token(new StringBuffer(\"M\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\"M\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.s, 1),\n-            new DurationFormatUtils.Token(new StringBuffer(\".\"), 1),\n+            new DurationFormatUtils.Token(new StringBuilder(\".\"), 1),\n             new DurationFormatUtils.Token(DurationFormatUtils.S, 1),\n-            new DurationFormatUtils.Token(new StringBuffer(\"S\"), 1)}, DurationFormatUtils\n+            new DurationFormatUtils.Token(new StringBuilder(\"S\"), 1)}, DurationFormatUtils\n                 .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN));\n \n         // test failures in equals", "timestamp": 1348766472, "metainfo": ""}