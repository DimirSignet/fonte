{"sha": "07e3d91d8caf2b06b6782ea25d80b57e51338e8d", "log": "Resolving LANG-428 - Changing StringUtils.isAlpha, isAlphanumeric and isNumeric to return false when passed an empty String. Documenting this in the changes report and in the upgrade article. Also fixing a Javadoc c+p error in isNumericSpace and isAlphanumericSpace.   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      * <p>Checks if the CharSequence contains only unicode letters.</p>\n      *\n      * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n+     * An empty CharSequence (length()=0) will return <code>false</code>.</p>\n      *\n      * <pre>\n      * StringUtils.isAlpha(null)   = false\n-     * StringUtils.isAlpha(\"\")     = true\n+     * StringUtils.isAlpha(\"\")     = false\n      * StringUtils.isAlpha(\"  \")   = false\n      * StringUtils.isAlpha(\"abc\")  = true\n      * StringUtils.isAlpha(\"ab2c\") = false\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains letters, and is non-null\n      * @since 3.0 Changed signature from isAlpha(String) to isAlpha(CharSequence)\n+     * @since 3.0 Changed \"\" to return false and not true\n      */\n     public static boolean isAlpha(CharSequence cs) {\n-        if (cs == null) {\n+        if (cs == null || cs.length() == 0) {\n             return false;\n         }\n         int sz = cs.length();\n      * <p>Checks if the CharSequence contains only unicode letters or digits.</p>\n      *\n      * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n+     * An empty CharSequence (length()=0) will return <code>false</code>.</p>\n      *\n      * <pre>\n      * StringUtils.isAlphanumeric(null)   = false\n-     * StringUtils.isAlphanumeric(\"\")     = true\n+     * StringUtils.isAlphanumeric(\"\")     = false\n      * StringUtils.isAlphanumeric(\"  \")   = false\n      * StringUtils.isAlphanumeric(\"abc\")  = true\n      * StringUtils.isAlphanumeric(\"ab c\") = false\n      * @return <code>true</code> if only contains letters or digits,\n      *  and is non-null\n      * @since 3.0 Changed signature from isAlphanumeric(String) to isAlphanumeric(CharSequence)\n+     * @since 3.0 Changed \"\" to return false and not true\n      */\n     public static boolean isAlphanumeric(CharSequence cs) {\n-        if (cs == null) {\n+        if (cs == null || cs.length() == 0) {\n             return false;\n         }\n         int sz = cs.length();\n      * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.isAlphanumeric(null)   = false\n-     * StringUtils.isAlphanumeric(\"\")     = true\n-     * StringUtils.isAlphanumeric(\"  \")   = true\n-     * StringUtils.isAlphanumeric(\"abc\")  = true\n-     * StringUtils.isAlphanumeric(\"ab c\") = true\n-     * StringUtils.isAlphanumeric(\"ab2c\") = true\n-     * StringUtils.isAlphanumeric(\"ab-c\") = false\n+     * StringUtils.isAlphanumericSpace(null)   = false\n+     * StringUtils.isAlphanumericSpace(\"\")     = true\n+     * StringUtils.isAlphanumericSpace(\"  \")   = true\n+     * StringUtils.isAlphanumericSpace(\"abc\")  = true\n+     * StringUtils.isAlphanumericSpace(\"ab c\") = true\n+     * StringUtils.isAlphanumericSpace(\"ab2c\") = true\n+     * StringUtils.isAlphanumericSpace(\"ab-c\") = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n      * A decimal point is not a unicode digit and returns false.</p>\n      *\n      * <p><code>null</code> will return <code>false</code>.\n-     * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n+     * An empty CharSequence (length()=0) will return <code>false</code>.</p>\n      *\n      * <pre>\n      * StringUtils.isNumeric(null)   = false\n-     * StringUtils.isNumeric(\"\")     = true\n+     * StringUtils.isNumeric(\"\")     = false\n      * StringUtils.isNumeric(\"  \")   = false\n      * StringUtils.isNumeric(\"123\")  = true\n      * StringUtils.isNumeric(\"12 3\") = false\n      * @param cs  the CharSequence to check, may be null\n      * @return <code>true</code> if only contains digits, and is non-null\n      * @since 3.0 Changed signature from isNumeric(String) to isNumeric(CharSequence)\n+     * @since 3.0 Changed \"\" to return false and not true\n      */\n     public static boolean isNumeric(CharSequence cs) {\n-        if (cs == null) {\n+        if (cs == null || cs.length() == 0) {\n             return false;\n         }\n         int sz = cs.length();\n      * An empty CharSequence (length()=0) will return <code>true</code>.</p>\n      *\n      * <pre>\n-     * StringUtils.isNumeric(null)   = false\n-     * StringUtils.isNumeric(\"\")     = true\n-     * StringUtils.isNumeric(\"  \")   = true\n-     * StringUtils.isNumeric(\"123\")  = true\n-     * StringUtils.isNumeric(\"12 3\") = true\n-     * StringUtils.isNumeric(\"ab2c\") = false\n-     * StringUtils.isNumeric(\"12-3\") = false\n-     * StringUtils.isNumeric(\"12.3\") = false\n+     * StringUtils.isNumericSpace(null)   = false\n+     * StringUtils.isNumericSpace(\"\")     = true\n+     * StringUtils.isNumericSpace(\"  \")   = true\n+     * StringUtils.isNumericSpace(\"123\")  = true\n+     * StringUtils.isNumericSpace(\"12 3\") = true\n+     * StringUtils.isNumericSpace(\"ab2c\") = false\n+     * StringUtils.isNumericSpace(\"12-3\") = false\n+     * StringUtils.isNumericSpace(\"12.3\") = false\n      * </pre>\n      *\n      * @param cs  the CharSequence to check, may be null\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsIsTest.java\n \n     public void testIsAlpha() {\n         assertEquals(false, StringUtils.isAlpha(null));\n-        assertEquals(true, StringUtils.isAlpha(\"\"));\n+        assertEquals(false, StringUtils.isAlpha(\"\"));\n         assertEquals(false, StringUtils.isAlpha(\" \"));\n         assertEquals(true, StringUtils.isAlpha(\"a\"));\n         assertEquals(true, StringUtils.isAlpha(\"A\"));\n \n     public void testIsAlphanumeric() {\n         assertEquals(false, StringUtils.isAlphanumeric(null));\n-        assertEquals(true, StringUtils.isAlphanumeric(\"\"));\n+        assertEquals(false, StringUtils.isAlphanumeric(\"\"));\n         assertEquals(false, StringUtils.isAlphanumeric(\" \"));\n         assertEquals(true, StringUtils.isAlphanumeric(\"a\"));\n         assertEquals(true, StringUtils.isAlphanumeric(\"A\"));\n   \n     public void testIsNumeric() {\n         assertEquals(false, StringUtils.isNumeric(null));\n-        assertEquals(true, StringUtils.isNumeric(\"\"));\n+        assertEquals(false, StringUtils.isNumeric(\"\"));\n         assertEquals(false, StringUtils.isNumeric(\" \"));\n         assertEquals(false, StringUtils.isNumeric(\"a\"));\n         assertEquals(false, StringUtils.isNumeric(\"A\"));", "timestamp": 1298961101, "metainfo": ""}