{"sha": "7dc242246099edc384f98499d6876e9b9171ea00", "log": "Enrich ClasUtils tests for inner types.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n         assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\n         assertEquals(\"String\", ClassUtils.getShortClassName(\"hello\", \"<null>\"));\n         assertEquals(\"<null>\", ClassUtils.getShortClassName(null, \"<null>\"));\n+\n+        // Inner types\n+        class Named extends Object {};\n+        assertEquals(\"ClassUtilsTest.1\", ClassUtils.getShortClassName(new Object(){}, \"<null>\"));\n+        assertEquals(\"ClassUtilsTest.1Named\", ClassUtils.getShortClassName(new Named(), \"<null>\"));\n+        assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(new Inner(), \"<null>\"));\n     }\n \n     public void test_getShortClassName_Class() {\n         assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));\n         assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\n         assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\n+        \n+        // Inner types\n+        class Named extends Object {};\n+        assertEquals(\"ClassUtilsTest.2\", ClassUtils.getShortClassName(new Object(){}.getClass()));\n+        assertEquals(\"ClassUtilsTest.2Named\", ClassUtils.getShortClassName(Named.class));\n+        assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortClassName(Inner.class));\n     }\n \n \n         assertEquals(\"String[][]\", ClassUtils.getSimpleName(String[][].class));\n         assertEquals(\"String[][][]\", ClassUtils.getSimpleName(String[][][].class));\n         assertEquals(\"String[][][][]\", ClassUtils.getSimpleName(String[][][][].class));\n+        \n+        // On-the-fly types\n+        class Named extends Object {};\n+        assertEquals(\"\", ClassUtils.getSimpleName(new Object(){}.getClass()));\n+        assertEquals(\"Named\", ClassUtils.getSimpleName(Named.class));\n     }\n \n     public void test_getSimpleName_Object() {\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));\n+        \n+        // On-the-fly types\n+        class Named extends Object {};\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(new Object(){}.getClass()));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageName(Named.class));\n     }\n \n     public void test_getPackageName_String() {\n         assertEquals(null, result.get(1));\n         assertEquals(Object.class, result.get(2));\n \n-        @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n+        @SuppressWarnings(\"unchecked\") // test what happens when non-generic code adds wrong type of element\n         List<Object> olist = (List<Object>)(List<?>)list;\n         olist.add(new Object());\n         try {\n         assertEquals(null, result.get(1));\n         assertEquals(\"java.lang.Object\", result.get(2));\n \n-        @SuppressWarnings(\"unchecked\") // test what happens when non-gneric code adds wrong type of element\n+        @SuppressWarnings(\"unchecked\") // test what happens when non-generic code adds wrong type of element\n         List<Object> olist = (List<Object>)(List<?>)list;\n         olist.add(new Object());\n         try {\n         assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(new ClassUtils[0][0], \"<null>\"));\n         assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(new int[0], \"<null>\"));\n         assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(new int[0][0], \"<null>\"));\n+\n+        // Inner types\n+        class Named extends Object {};\n+        assertEquals(\"ClassUtilsTest.6\", ClassUtils.getShortCanonicalName(new Object(){}, \"<null>\"));\n+        assertEquals(\"ClassUtilsTest.5Named\", ClassUtils.getShortCanonicalName(new Named(), \"<null>\"));\n+        assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortCanonicalName(new Inner(), \"<null>\"));\n     }\n \n     public void test_getShortCanonicalName_Class() {\n         assertEquals(\"ClassUtils[][]\", ClassUtils.getShortCanonicalName(ClassUtils[][].class));\n         assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(int[].class));\n         assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(int[][].class));\n+        \n+        // Inner types\n+        class Named extends Object {};\n+        assertEquals(\"ClassUtilsTest.7\", ClassUtils.getShortCanonicalName(new Object(){}.getClass()));\n+        assertEquals(\"ClassUtilsTest.6Named\", ClassUtils.getShortCanonicalName(Named.class));\n+        assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortCanonicalName(Inner.class));\n     }\n \n     public void test_getShortCanonicalName_String() {\n         assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"[[I\"));\n         assertEquals(\"int[]\", ClassUtils.getShortCanonicalName(\"int[]\"));\n         assertEquals(\"int[][]\", ClassUtils.getShortCanonicalName(\"int[][]\"));\n+        \n+        // Inner types\n+        assertEquals(\"ClassUtilsTest.6\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$6\"));\n+        assertEquals(\"ClassUtilsTest.5Named\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$5Named\"));\n+        assertEquals(\"ClassUtilsTest.Inner\", ClassUtils.getShortCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$Inner\"));\n     }\n \n     public void test_getPackageCanonicalName_Object() {\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], \"<null>\"));\n         assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0], \"<null>\"));\n         assertEquals(\"\", ClassUtils.getPackageCanonicalName(new int[0][0], \"<null>\"));\n+        \n+        // Inner types\n+        class Named extends Object {};\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new Object(){}, \"<null>\"));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new Named(), \"<null>\"));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new Inner(), \"<null>\"));\n     }\n \n     public void test_getPackageCanonicalName_Class() {\n         assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(ClassUtils[][].class));\n         assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[].class));\n         assertEquals(\"\", ClassUtils.getPackageCanonicalName(int[][].class));\n+        \n+        // Inner types\n+        class Named extends Object {};\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(new Object(){}.getClass()));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(Named.class));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(Inner.class));\n     }\n \n     public void test_getPackageCanonicalName_String() {\n         assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"[[I\"));\n         assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[]\"));\n         assertEquals(\"\", ClassUtils.getPackageCanonicalName(\"int[][]\"));\n+        \n+        // Inner types\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$6\"));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$5Named\"));\n+        assertEquals(\"org.apache.commons.lang3\", ClassUtils.getPackageCanonicalName(\"org.apache.commons.lang3.ClassUtilsTest$Inner\"));\n     }\n \n }", "timestamp": 1309819773, "metainfo": ""}