{"sha": "c9d786a4fe2639581047d878a64bab6fb24f1ab3", "log": "LANG-805 RandomStringUtils.random(count, 0, 0, false, false, universe, random) always throws java.lang.ArrayIndexOutOfBoundsException  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java\n      * @param end  the position in set of chars to end before\n      * @param letters  only allow letters?\n      * @param numbers  only allow numbers?\n-     * @param chars  the set of chars to choose randoms from.\n+     * @param chars  the set of chars to choose randoms from, must not be empty.\n      *  If {@code null}, then it will use the set of all chars.\n      * @param random  a source of randomness.\n      * @return the random string\n      * @throws ArrayIndexOutOfBoundsException if there are not\n      *  {@code (end - start) + 1} characters in the set array.\n-     * @throws IllegalArgumentException if {@code count} &lt; 0.\n+     * @throws IllegalArgumentException if {@code count} &lt; 0 or the provided chars array is empty.\n      * @since 2.0\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers,\n         } else if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n+        if (chars != null && chars.length == 0) {\n+            throw new IllegalArgumentException(\"The chars array must not be empty\");\n+        }\n+\n         if (start == 0 && end == 0) {\n-            end = 'z' + 1;\n-            start = ' ';\n-            if (!letters && !numbers) {\n-                start = 0;\n-                end = Integer.MAX_VALUE;\n+            if (chars != null) {\n+                end = chars.length;\n+            } else {\n+                if (!letters && !numbers) {\n+                    end = Integer.MAX_VALUE;\n+                } else {\n+                    end = 'z' + 1;\n+                    start = ' ';                \n+                }\n             }\n         }\n \n      * specified.</p>\n      *\n      * <p>Characters will be chosen from the set of characters\n-     * specified.</p>\n+     * specified by the string, must not be empty. \n+     * If null, the set of all characters is used.</p>\n      *\n      * @param count  the length of random string to create\n      * @param chars  the String containing the set of characters to use,\n-     *  may be null\n-     * @return the random string\n-     * @throws IllegalArgumentException if {@code count} &lt; 0.\n+     *  may be null, but must not be empty\n+     * @return the random string\n+     * @throws IllegalArgumentException if {@code count} &lt; 0 or the string is empty.\n      */\n     public static String random(int count, String chars) {\n         if (chars == null) {\n--- a/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/RandomStringUtilsTest.java\n \n         r1 = RandomStringUtils.random(0);\n         assertEquals(\"random(0).equals(\\\"\\\")\", \"\", r1);\n-\n-    }\n+    }\n+\n+    public void testLANG805() {\n+        long seed = System.currentTimeMillis();\n+        assertEquals(\"aaa\", RandomStringUtils.random(3,0,0,false,false,new char[]{'a'},new Random(seed)));\n+    }\n+\n     public void testExceptions() {\n+        final char[] DUMMY = new char[]{'a'}; // valid char array\n         try {\n             RandomStringUtils.random(-1);\n             fail();\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            RandomStringUtils.random(-1, new char[0]);\n+            RandomStringUtils.random(-1, DUMMY);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n+            RandomStringUtils.random(-1, (String)null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n             RandomStringUtils.random(-1, 'a', 'z', false, false);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0]);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0], new Random());\n+            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }", "timestamp": 1339253914, "metainfo": ""}