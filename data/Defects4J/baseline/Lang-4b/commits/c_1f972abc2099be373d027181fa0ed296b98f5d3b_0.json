{"sha": "1f972abc2099be373d027181fa0ed296b98f5d3b", "log": "Port to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderTest.java\n \n package org.apache.commons.lang3.builder;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.builder.HashCodeBuilder}.\n  * \n  * @version $Id$\n  */\n-public class HashCodeBuilderTest extends TestCase {\n+public class HashCodeBuilderTest {\n \n     /**\n      * A reflection test fixture.\n         }\n     }\n \n-    public HashCodeBuilderTest(String name) {\n-        super(name);\n-    }\n-\n     // -----------------------------------------------------------------------\n \n+    @Test\n     public void testConstructorEx1() {\n         try {\n             new HashCodeBuilder(0, 0);\n         fail();\n     }\n \n+    @Test\n     public void testConstructorEx2() {\n         try {\n             new HashCodeBuilder(2, 2);\n         }\n     }\n \n+    @Test\n     public void testReflectionHashCode() {\n         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));\n         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));\n     }\n \n+    @Test\n     public void testReflectionHierarchyHashCode() {\n         assertEquals(17 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0)));\n         assertEquals(17 * 37 * 37 * 37, HashCodeBuilder.reflectionHashCode(new TestSubObject(0, 0, 0), true));\n                 123456, 7890, 0), true));\n     }\n \n+    @Test\n     public void testReflectionHierarchyHashCodeEx1() {\n         try {\n             HashCodeBuilder.reflectionHashCode(0, 0, new TestSubObject(0, 0, 0), true);\n         fail();\n     }\n \n+    @Test\n     public void testReflectionHierarchyHashCodeEx2() {\n         try {\n             HashCodeBuilder.reflectionHashCode(2, 2, new TestSubObject(0, 0, 0), true);\n         fail();\n     }\n \n+    @Test\n     public void testReflectionHashCodeEx1() {\n         try {\n             HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true);\n         fail();\n     }\n \n+    @Test\n     public void testReflectionHashCodeEx2() {\n         try {\n             HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true);\n         fail();\n     }\n \n+    @Test\n     public void testReflectionHashCodeEx3() {\n         try {\n             HashCodeBuilder.reflectionHashCode(13, 19, null, true);\n         fail();\n     }\n \n+    @Test\n     public void testSuper() {\n         Object obj = new Object();\n         assertEquals(17 * 37 + (19 * 41 + obj.hashCode()), new HashCodeBuilder(17, 37).appendSuper(\n                 new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode());\n     }\n \n+    @Test\n     public void testObject() {\n         Object obj = null;\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n         assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n     \n+    @Test\n     public void testObjectBuild() {\n         Object obj = null;\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).build().intValue());\n         assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).build().intValue());\n     }\n \n+    @Test\n     @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n     public void testLong() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());\n                 (long) 123456789L).toHashCode());\n     }\n \n+    @Test\n     @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n     public void testInt() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());\n         assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());\n     }\n \n+    @Test\n     public void testShort() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());\n         assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());\n     }\n \n+    @Test\n     public void testChar() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());\n         assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());\n     }\n \n+    @Test\n     public void testByte() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());\n         assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());\n     }\n \n+    @Test\n     @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n     public void testDouble() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());\n         assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());\n     }\n \n+    @Test\n     @SuppressWarnings(\"cast\") // cast is not really needed, keep for consistency\n     public void testFloat() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());\n         assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());\n     }\n \n+    @Test\n     public void testBoolean() {\n         assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());\n         assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());\n     }\n \n+    @Test\n     public void testObjectArray() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());\n         Object[] obj = new Object[2];\n                 .toHashCode());\n     }\n \n+    @Test\n     public void testObjectArrayAsObject() {\n         Object[] obj = new Object[2];\n         assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n                 (Object) obj).toHashCode());\n     }\n \n+    @Test\n     public void testLongArray() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());\n         long[] obj = new long[2];\n         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @Test\n     public void testLongArrayAsObject() {\n         long[] obj = new long[2];\n         assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n     }\n \n+    @Test\n     public void testIntArray() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());\n         int[] obj = new int[2];\n         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @Test\n     public void testIntArrayAsObject() {\n         int[] obj = new int[2];\n         assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n     }\n \n+    @Test\n     public void testShortArray() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());\n         short[] obj = new short[2];\n         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @Test\n     public void testShortArrayAsObject() {\n         short[] obj = new short[2];\n         assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n     }\n \n+    @Test\n     public void testCharArray() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());\n         char[] obj = new char[2];\n         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @Test\n     public void testCharArrayAsObject() {\n         char[] obj = new char[2];\n         assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n     }\n \n+    @Test\n     public void testByteArray() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());\n         byte[] obj = new byte[2];\n         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @Test\n     public void testByteArrayAsObject() {\n         byte[] obj = new byte[2];\n         assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n     }\n \n+    @Test\n     public void testDoubleArray() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());\n         double[] obj = new double[2];\n         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @Test\n     public void testDoubleArrayAsObject() {\n         double[] obj = new double[2];\n         assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n     }\n \n+    @Test\n     public void testFloatArray() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());\n         float[] obj = new float[2];\n         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @Test\n     public void testFloatArrayAsObject() {\n         float[] obj = new float[2];\n         assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n     }\n \n+    @Test\n     public void testBooleanArray() {\n         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());\n         boolean[] obj = new boolean[2];\n         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @Test\n     public void testBooleanArrayAsObject() {\n         boolean[] obj = new boolean[2];\n         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n     }\n \n+    @Test\n     public void testBooleanMultiArray() {\n         boolean[][] obj = new boolean[2][];\n         assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n         assertEquals((((17 * 37 + 0) * 37 + 1) * 37 + 1), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n     }\n \n+    @Test\n     public void testReflectionHashCodeExcludeFields() throws Exception {\n         TestObjectWithMultipleFields x = new TestObjectWithMultipleFields(1, 2, 3);\n \n     /**\n      * Test Objects pointing to each other.\n      */\n+    @Test\n     public void testReflectionObjectCycle() {\n         ReflectionTestCycleA a = new ReflectionTestCycleA();\n         ReflectionTestCycleB b = new ReflectionTestCycleB();\n     /**\n      * Ensures LANG-520 remains true\n      */\n+    @Test\n     public void testToHashCodeEqualsHashCode() {\n         HashCodeBuilder hcb = new HashCodeBuilder(17, 37).append(new Object()).append('a');\n         assertEquals(\"hashCode() is no longer returning the same value as toHashCode() - see LANG-520\", ", "timestamp": 1318949996, "metainfo": ""}