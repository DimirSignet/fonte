{"sha": "934bfda1de1319419ed77a546b7430909da224f5", "log": "Additional varargs tests  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n     }\n \n     public void testToClass_object() {\n-//        assertNull(ClassUtils.toClass(null));\n-        assertNull(ClassUtils.toClass((Object[]) null)); // explicit cast\n+//        assertNull(ClassUtils.toClass(null)); // generates warning\n+        assertNull(ClassUtils.toClass((Object[]) null)); // equivalent explicit cast\n+        \n+        // Additional varargs tests\n+        assertTrue(\"empty -> empty\", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass()));\n+        Class<?>[] castNull = ClassUtils.toClass((Object) null); // == new Object[]{null}\n+        assertTrue(\"(Object)null -> [null]\", Arrays.equals(new Object[]{null}, castNull));\n \n         assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY));\n \n--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n     public void testLastIndexOfAny_StringStringArray() {\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ...\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation\n+        assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY));\n         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ...\n         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation\n+        assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg\n         assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY));\n         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0]));\n         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0]));\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n     }\n \n     public void testJoin_Objectarray() {\n-//        assertEquals(null, StringUtils.join(null));\n-        assertEquals(null, StringUtils.join((Object[]) null)); // explicit cast\n+//        assertEquals(null, StringUtils.join(null)); // generates warning\n+        assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast\n+        // test additional varargs calls\n+        assertEquals(\"\", StringUtils.join()); // empty array\n+        assertEquals(\"\", StringUtils.join((Object) null)); // => new Object[]{null}\n+\n         assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n         assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n         assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTrimEmptyTest.java\n         String[] fooDots = new String[] { \"..\"+FOO+\"..\", \"..\"+FOO, FOO+\"..\" };\n         String[] foo = new String[] { FOO, FOO, FOO };\n \n-//        assertEquals(null, StringUtils.stripAll(null));\n-        assertEquals(null, StringUtils.stripAll((String[]) null)); // explicit cast\n+//        assertEquals(null, StringUtils.stripAll(null)); // generates warning\n+        assertEquals(null, StringUtils.stripAll((String[]) null)); // equivalent explicit cast\n+        // Additional varargs tests\n+        assertArrayEquals(empty, StringUtils.stripAll()); // empty array\n+        assertArrayEquals(new String[]{null}, StringUtils.stripAll((String) null)); // == new String[]{null}\n+\n         assertArrayEquals(empty, StringUtils.stripAll(empty));\n         assertArrayEquals(foo, StringUtils.stripAll(fooSpace));\n         ", "timestamp": 1307407850, "metainfo": ""}