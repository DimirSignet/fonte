{"sha": "346e68cfd40cbae1f5edf8eef7566c2a8f0b18aa", "log": "Make autoboxing explicit  ", "commit": "\n--- a/src/java/org/apache/commons/lang3/Validate.java\n+++ b/src/java/org/apache/commons/lang3/Validate.java\n      */\n     public static void isTrue(boolean expression, String message, long value) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(String.format(message, value));\n+            throw new IllegalArgumentException(String.format(message, Long.valueOf(value)));\n         }\n     }\n \n      */\n     public static void isTrue(boolean expression, String message, double value) {\n         if (expression == false) {\n-            throw new IllegalArgumentException(String.format(message, value));\n+            throw new IllegalArgumentException(String.format(message, new Double(value)));\n         }\n     }\n \n         Validate.notNull(array);\n         for (int i = 0; i < array.length; i++) {\n             if (array[i] == null) {\n-                Object[] values2 = ArrayUtils.add(values, i);\n+                Object[] values2 = ArrayUtils.add(values, Integer.valueOf(i));\n                 throw new IllegalArgumentException(String.format(message, values2));\n             }\n         }\n         int i = 0;\n         for (Iterator<?> it = iterable.iterator(); it.hasNext(); i++) {\n             if (it.next() == null) {\n-                Object[] values2 = ArrayUtils.addAll(values, i);\n+                Object[] values2 = ArrayUtils.addAll(values, Integer.valueOf(i));\n                 throw new IllegalArgumentException(String.format(message, values2));\n             }\n         }\n      * @see #validIndex(Object[], int, String, Object...)\n      */\n     public static <T> T[] validIndex(T[] array, int index) {\n-        return validIndex(array, index, DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE, index);\n+        return validIndex(array, index, DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE, Integer.valueOf(index));\n     }\n \n     // validIndex collection\n      * @see #validIndex(Collection, int, String, Object...)\n      */\n     public static <T extends Collection<?>> T validIndex(T collection, int index) {\n-        return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE, index);\n+        return validIndex(collection, index, DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE, Integer.valueOf(index));\n     }\n \n     // validIndex string\n      * @see #validIndex(CharSequence, int, String, Object...)\n      */\n     public static <T extends CharSequence> T validIndex(T chars, int index) {\n-        return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE, index);\n+        return validIndex(chars, index, DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE, Integer.valueOf(index));\n     }\n \n }", "timestamp": 1260799891, "metainfo": ""}