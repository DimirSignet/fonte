{"sha": "5500962aa3004333f3cd1d9de06e03d4eb9a4e19", "log": "junit4ify EnumUtilsTest  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.*;\n+\n import java.util.EnumSet;\n import java.util.List;\n import java.util.Map;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * \n  * @version $Id$\n  */\n-public class EnumUtilsTest extends TestCase {\n+public class EnumUtilsTest {\n \n+    @Test\n     public void testConstructable() {\n         // enforce public constructor\n         new EnumUtils();\n     }\n \n+    @Test\n     public void test_getEnumMap() {\n         Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class);\n         assertEquals( \"getEnumMap not created correctly\", \"{RED=RED, AMBER=AMBER, GREEN=GREEN}\", test.toString());\n         assertEquals(false, test.containsKey(\"PURPLE\"));\n     }\n \n+    @Test\n     public void test_getEnumList() {\n         List<Traffic> test = EnumUtils.getEnumList(Traffic.class);\n         assertEquals(3, test.size());\n         assertEquals(Traffic.GREEN, test.get(2));\n     }\n \n+    @Test\n     public void test_isEnum() {\n         assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"RED\"));\n         assertEquals(true, EnumUtils.isValidEnum(Traffic.class, \"AMBER\"));\n         assertEquals(false, EnumUtils.isValidEnum(Traffic.class, null));\n     }\n \n+    @Test(expected=NullPointerException.class)\n     public void test_isEnum_nullClass() {\n-        try {\n-            EnumUtils.isValidEnum((Class<Traffic>) null, \"PURPLE\");\n-            fail();\n-        } catch (NullPointerException ex) {\n-            // ok\n-        }\n+        EnumUtils.isValidEnum((Class<Traffic>) null, \"PURPLE\");\n     }\n \n+    @Test\n     public void test_getEnum() {\n         assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, \"RED\"));\n         assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, \"AMBER\"));\n         assertEquals(null, EnumUtils.getEnum(Traffic.class, null));\n     }\n \n+    @Test(expected=NullPointerException.class)\n     public void test_getEnum_nullClass() {\n-        try {\n-            EnumUtils.getEnum((Class<Traffic>) null, \"PURPLE\");\n-            fail();\n-        } catch (NullPointerException ex) {\n-            // ok\n-        }\n+        EnumUtils.getEnum((Class<Traffic>) null, \"PURPLE\");\n     }\n \n+    @Test(expected=IllegalArgumentException.class)\n     public void test_generateBitVector_nullClass() {\n-        try {\n-            EnumUtils.generateBitVector(null, EnumSet.of(Traffic.RED));\n-        } catch (IllegalArgumentException ex) {\n-            // ok\n-        }\n+        EnumUtils.generateBitVector(null, EnumSet.of(Traffic.RED));\n     }\n \n+    @Test(expected=IllegalArgumentException.class)\n     public void test_generateBitVector_longClass() {\n-        try {\n-            EnumUtils.generateBitVector(TooMany.class, EnumSet.of(TooMany.A1));\n-        } catch (IllegalArgumentException ex) {\n-            // ok\n-        }\n+        EnumUtils.generateBitVector(TooMany.class, EnumSet.of(TooMany.A1));\n     }\n \n+    @Test\n     public void test_generateBitVector() {\n         assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, null));\n         assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class)));\n         assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)));\n     }\n \n+    @Test(expected=IllegalArgumentException.class)\n     public void test_processBitVector_nullClass() {\n         final Class<Traffic> empty = null;\n-        try {\n-            EnumUtils.processBitVector(empty, 0L);\n-        } catch (IllegalArgumentException ex) {\n-            // ok\n-        }\n+        EnumUtils.processBitVector(empty, 0L);\n     }\n \n+    @Test(expected=IllegalArgumentException.class)\n     public void test_processBitVector_longClass() {\n-        try {\n-            EnumUtils.processBitVector(TooMany.class, 0L);\n-        } catch (IllegalArgumentException ex) {\n-            // ok\n-        }\n+        EnumUtils.processBitVector(TooMany.class, 0L);\n     }\n \n+    @Test\n     public void test_processBitVector() {\n         assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L));\n         assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L));\n     RED, AMBER, GREEN\n }\n \n-enum TooMany{\n+enum TooMany {\n     A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,\n-    A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1;\n-\n+    A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,\n+    A2,B2,C2,D2,E2,F2,G2,H2,I2,J2,K2,L2,M2;\n }", "timestamp": 1311274485, "metainfo": ""}