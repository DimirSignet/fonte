{"sha": "373a6daa11880f17fdcec1a0654365615207adfc", "log": "Convert to JUNit4  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/ConversionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ConversionTest.java\n  *******************************************************************************/\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n import junit.framework.TestCase;\n import java.lang.Throwable;\n import java.lang.reflect.Method;\n+\n+import org.junit.Test;\n \n \n /**\n  * @version $Id$\n  */\n \n-public class ConversionTest extends TestCase {\n+public class ConversionTest {\n \n     /**\n      * convert an hexadecimal digit into an int using the default (Lsb0) bit ordering.\n      * <p>\n      * '1' is converted to 1\n      */\n+    @Test\n     public void testHexDigitToInt() throws Exception {\n         assertEquals(0, Conversion.hexDigitToInt('0'));\n         assertEquals(1, Conversion.hexDigitToInt('1'));\n      * '1' is converted to 8\n      * \n      */\n+    @Test\n     public void testHexDigitM0ToInt() throws Exception {\n         assertEquals(0x0, Conversion.hexDigitM0ToInt('0'));\n         assertEquals(0x8, Conversion.hexDigitM0ToInt('1'));\n      * '1' is converted as follow: (1, 0, 0, 0)\n      * \n      */\n+    @Test\n     public void testHexDigitToBools() throws Exception {\n         assertArrayEquals(\n             new boolean[]{false, false, false, false}, Conversion.hexDigitToBools('0'));\n         }\n     }\n \n+    @Test\n     public void testHexDigitM0ToBools() throws Exception {\n         assertArrayEquals(\n             new boolean[]{false, false, false, false}, Conversion.hexDigitM0ToBools('0'));\n      * <p>\n      * (1, 0, 0, 0) is converted as follow: '1'\n      */\n+    @Test\n     public void testBoolsToHexDigit() throws Exception {\n         assertEquals('0', Conversion.boolsToHexDigit(new boolean[]{false, false, false, false}));\n         assertEquals('1', Conversion.boolsToHexDigit(new boolean[]{true, false, false, false}));\n      * (1, 0, 0, 0) is converted as follow: '1'\n      * \n      */\n+    @Test\n     public void testBoolsToHexDigit_2args() throws Exception {\n         boolean[] shortArray = new boolean[]{false, true, true};\n         assertEquals('6', Conversion.boolsToHexDigit(shortArray, 0));\n      * (1, 0, 0, 0) is converted as follow: '8'\n      * \n      */\n+    @Test\n     public void testBoolsToHexDigitM0_bits() throws Exception {\n         assertEquals(\n             '0', Conversion.boolsToHexDigitM0_4bits(new boolean[]{false, false, false, false}));\n      * to 'D'\n      * \n      */\n+    @Test\n     public void testBoolsToHexDigitM0_4bits_2args() throws Exception {\n         // boolean[] shortArray = new boolean[]{true,true,false};\n         // assertEquals('6', Conversion.boolsToHexDigitM0(shortArray,0));\n      * (1, 0, 0, 0) is converted as follow: '8' (1,0,0,0,0,0,0,0, 0,0,0,0,0,1,0,0) is converted\n      * to '4'\n      */\n+    @Test\n     public void testBoolsBeM0ToHexDigit() throws Exception {\n         assertEquals(\n             '0', Conversion.boolsBeM0ToHexDigit(new boolean[]{false, false, false, false}));\n      * (1, 0, 0, 0) with srcPos = 0 is converted as follow: '8' (1,0,0,0,0,0,0,0,\n      * 0,0,0,1,0,1,0,0) with srcPos = 2 is converted to '5'\n      */\n+    @Test\n     public void testBoolsBeM0ToHexDigit_2args() throws Exception {\n         assertEquals(\n             '5',\n      * <p>\n      * 10 returns 'A' and so on...\n      */\n+    @Test\n     public void testIntToHexDigit() throws Exception {\n         assertEquals('0', Conversion.intToHexDigit(0));\n         assertEquals('1', Conversion.intToHexDigit(1));\n      * <p>\n      * 10 returns '5' and so on...\n      */\n+    @Test\n     public void testIntToHexDigitM0() throws Exception {\n         assertEquals('0', Conversion.intToHexDigitM0(0));\n         assertEquals('8', Conversion.intToHexDigitM0(1));\n         }\n     }\n \n+    @Test\n     public void testIntsToLong() throws Exception {\n         int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000};\n         assertEquals(0x0000000000000000L, Conversion.intsToLong(src, 0, 0L, 0, 0));\n         // assertEquals(0x0F12345678000000L,Conversion.intsToLong(src,1,0x123456789ABCDEF0L,32,2));\n     }\n \n+    @Test\n     public void testShortsToLong() throws Exception {\n         // TODO: implement this test. This is somehow low priority since intsToLong and\n         // bytesToLong are tested\n     }\n \n+    @Test\n     public void testBytesToLong() throws Exception {\n         byte[] src = new byte[]{\n             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,\n         // assertEquals(0x123456789A7856F0L,Conversion.bytesToLong(src,7,0x123456789ABCDEF0L,8,2));\n     }\n \n+    @Test\n     public void testShortsToInt() throws Exception {\n         short[] src = new short[]{\n             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800};\n \n     }\n \n+    @Test\n     public void testBytesToInt() throws Exception {\n         byte[] src = new byte[]{\n             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,\n         // assertEquals(0x56341278,Conversion.bytesToInt(src, 5, 0x01234567, 8, 4));\n     }\n \n+    @Test\n     public void testBytesToShort() throws Exception {\n         byte[] src = new byte[]{\n             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34,\n         // assertEquals((short)0x5678,Conversion.bytesToShort(src, 7, (short) 0x0123, 8, 2));\n     }\n \n+    @Test\n     public void testHexsToLong() throws Exception {\n         String src = \"CDF1F0C10F12345678\";\n         assertEquals(0x0000000000000000L, Conversion.hexsToLong(src, 0, 0L, 0, 0));\n             0x1234567876BCDEF0L, Conversion.hexsToLong(src, 15, 0x123456798ABCDEF0L, 24, 3));\n     }\n \n+    @Test\n     public void testHexsToInt() throws Exception {\n         String src = \"CDF1F0C10F12345678\";\n         assertEquals(0x00000000, Conversion.hexsToInt(src, 0, 0, 0, 0));\n         assertEquals(0x87645679, Conversion.hexsToInt(src, 15, 0x12345679, 20, 3));\n     }\n \n+    @Test\n     public void testHexsToShort() throws Exception {\n         String src = \"CDF1F0C10F12345678\";\n         assertEquals((short)0x0000, Conversion.hexsToShort(src, 0, (short)0, 0, 0));\n         assertEquals((short)0x8764, Conversion.hexsToShort(src, 15, (short)0x1234, 4, 3));\n     }\n \n+    @Test\n     public void testHexsToByte() throws Exception {\n         String src = \"CDF1F0C10F12345678\";\n         assertEquals((byte)0x00, Conversion.hexsToByte(src, 0, (byte)0, 0, 0));\n         assertEquals((byte)0x84, Conversion.hexsToByte(src, 17, (byte)0x34, 4, 1));\n     }\n \n+    @Test\n     public void testBoolsToLong() throws Exception {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             Conversion.boolsToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4));\n     }\n \n+    @Test\n     public void testBoolsToInt() throws Exception {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n         assertEquals(0x87645679, Conversion.boolsToInt(src, 15 * 4, 0x12345679, 20, 3 * 4));\n     }\n \n+    @Test\n     public void testBoolsToShort() throws Exception {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n             (short)0x8764, Conversion.boolsToShort(src, 15 * 4, (short)0x1234, 4, 3 * 4));\n     }\n \n+    @Test\n     public void testBoolsToByte() throws Exception {\n         boolean[] src = new boolean[]{\n             false, false, true, true, true, false, true, true, true, true, true, true, true,\n         assertEquals((byte)0x84, Conversion.boolsToByte(src, 17 * 4, (byte)0x34, 4, 1 * 4));\n     }\n \n+    @Test\n     public void testLongToInts() throws Exception {\n         assertArrayEquals(\n             new int[]{}, Conversion.longToInts(0x0000000000000000L, 0, new int[]{}, 0, 0));\n             Conversion.longToInts(0x1234567890ABCDEFL, 33, new int[]{0}, 0, 1));\n     }\n \n+    @Test\n     public void testLongToShorts() throws Exception {\n         assertArrayEquals(\n             new short[]{}, Conversion.longToShorts(0x0000000000000000L, 0, new short[]{}, 0, 0));\n             Conversion.longToShorts(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1));\n     }\n \n+    @Test\n     public void testIntToShorts() throws Exception {\n         assertArrayEquals(\n             new short[]{}, Conversion.intToShorts(0x00000000, 0, new short[]{}, 0, 0));\n             Conversion.intToShorts(0x12345678, 17, new short[]{0}, 0, 1));\n     }\n \n+    @Test\n     public void testLongToBytes() throws Exception {\n         assertArrayEquals(\n             new byte[]{}, Conversion.longToBytes(0x0000000000000000L, 0, new byte[]{}, 0, 0));\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7));\n     }\n \n+    @Test\n     public void testIntToBytes() throws Exception {\n         assertArrayEquals(\n             new byte[]{}, Conversion.intToBytes(0x00000000, 0, new byte[]{}, 0, 0));\n                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 3));\n     }\n \n+    @Test\n     public void testShortToBytes() throws Exception {\n         assertArrayEquals(\n             new byte[]{}, Conversion.shortToBytes((short)0x0000, 0, new byte[]{}, 0, 0));\n                 -1, 0, -1, -1, -1, -1, -1}, 3, 1));\n     }\n \n+    @Test\n     public void testLongToHexs() throws Exception {\n         assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 0, \"\", 0, 0));\n         assertEquals(\"\", Conversion.longToHexs(0x0000000000000000L, 100, \"\", 0, 0));\n             Conversion.longToHexs(0x1234567890ABCDEFL, 4, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 15));\n     }\n \n+    @Test\n     public void testIntToHexs() throws Exception {\n         assertEquals(\"\", Conversion.intToHexs(0x00000000, 0, \"\", 0, 0));\n         assertEquals(\"\", Conversion.intToHexs(0x00000000, 100, \"\", 0, 0));\n             Conversion.intToHexs(0x90ABCDEF, 4, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 7));\n     }\n \n+    @Test\n     public void testShortToHexs() throws Exception {\n         assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 0, \"\", 0, 0));\n         assertEquals(\"\", Conversion.shortToHexs((short)0x0000, 100, \"\", 0, 0));\n             Conversion.shortToHexs((short)0xCDEF, 4, \"FFFFFFFFFFFFFFFFFFFFFFFF\", 3, 3));\n     }\n \n+    @Test\n     public void testByteToHexs() throws Exception {\n         assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 0, \"\", 0, 0));\n         assertEquals(\"\", Conversion.byteToHexs((byte)0x00, 100, \"\", 0, 0));\n         assertEquals(\"000E0\", Conversion.byteToHexs((byte)0xEF, 4, \"00000\", 3, 1));\n     }\n \n+    @Test\n     public void testLongToBools() throws Exception {\n         assertArrayEquals(\n             new boolean[]{},\n             Conversion.longToBools(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62));\n     }\n \n+    @Test\n     public void testIntToBools() throws Exception {\n         assertArrayEquals(\n             new boolean[]{}, Conversion.intToBools(0x00000000, 0, new boolean[]{}, 0, 0));\n                 false, false}, Conversion.intToBools(0x90ABCDEF, 2, new boolean[37], 3, 30));\n     }\n \n+    @Test\n     public void testShortToBools() throws Exception {\n         assertArrayEquals(\n             new boolean[]{}, Conversion.shortToBools((short)0x0000, 0, new boolean[]{}, 0, 0));\n             Conversion.shortToBools((short)0xCDEF, 2, new boolean[21], 3, 14));\n     }\n \n+    @Test\n     public void testByteToBools() throws Exception {\n         assertArrayEquals(\n             new boolean[]{}, Conversion.byteToBools((byte)0x00, 0, new boolean[]{}, 0, 0));\n         return false;\n     }\n \n+    @Test\n     public void testTestsToCheckImplemented() throws Exception {\n         if (!hasMethod(\"testIntsToLong\")) fail(\"test testIntsToLong not implemented\");\n         if (!hasMethod(\"testShortsToLong\")) fail(\"test testShortsToLong not implemented\");", "timestamp": 1348777475, "metainfo": ""}