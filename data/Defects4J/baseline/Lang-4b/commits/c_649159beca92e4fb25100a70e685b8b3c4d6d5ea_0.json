{"sha": "649159beca92e4fb25100a70e685b8b3c4d6d5ea", "log": "LANG-508 Fix tests broken by r885195  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n     private static final String DEFAULT_NOT_EMPTY_COLLECTION_EXCEPTION_MESSAGE = \"The validated collection is empty\";\n     private static final String DEFAULT_NOT_EMPTY_MAP_EXCEPTION_MESSAGE = \"The validated map is empty\";\n     private static final String DEFAULT_VALID_INDEX_ARRAY_EXCEPTION_MESSAGE = \"The validated array index is invalid: %d\";\n-    private static final String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE = \"The validated character sequence is invalid: %d\";\n+    private static final String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EXCEPTION_MESSAGE = \"The validated character sequence index is invalid: %d\";\n     private static final String DEFAULT_VALID_INDEX_COLLECTION_EXCEPTION_MESSAGE = \"The validated collection index is invalid: %d\";\n \n     /**\n--- a/src/test/org/apache/commons/lang/ValidateTest.java\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n             Validate.isTrue(false, \"MSG\", new Integer(6));\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            assertEquals(\"MSG6\", ex.getMessage());\n+            assertEquals(\"MSG\", ex.getMessage());\n         }\n     }\n \n             Validate.isTrue(false, \"MSG\", 7);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            assertEquals(\"MSG7\", ex.getMessage());\n+            assertEquals(\"MSG\", ex.getMessage());\n         }\n     }\n \n             Validate.isTrue(false, \"MSG\", 7.4d);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            assertEquals(\"MSG7.4\", ex.getMessage());\n+            assertEquals(\"MSG\", ex.getMessage());\n         }\n     }\n \n         Validate.notNull(new Object());\n         try {\n             Validate.notNull(null);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         \n         Validate.notNull(new Object(), \"MSG\");\n         try {\n             Validate.notNull(null, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         \n         Validate.notEmpty(new Object[] {null});\n         try {\n             Validate.notEmpty((Object[]) null);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"The validated array is empty\", ex.getMessage());\n         }\n         try {\n         Validate.notEmpty(new Object[] {null}, \"MSG\");\n         try {\n             Validate.notEmpty((Object[]) null, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         try {\n         Collection<Integer> coll = new ArrayList<Integer>();\n         try {\n             Validate.notEmpty((Collection<?>) null);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"The validated collection is empty\", ex.getMessage());\n         }\n         try {\n         Collection<Integer> coll = new ArrayList<Integer>();\n         try {\n             Validate.notEmpty((Collection<?>) null, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         try {\n         Map<String, Integer> map = new HashMap<String, Integer>();\n         try {\n             Validate.notEmpty((Map<?, ?>) null);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"The validated map is empty\", ex.getMessage());\n         }\n         try {\n         Map<String, Integer> map = new HashMap<String, Integer>();\n         try {\n             Validate.notEmpty((Map<?, ?>) null, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         try {\n         Validate.notEmpty(\"hjl\");\n         try {\n             Validate.notEmpty((String) null);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"The validated string is empty\", ex.getMessage());\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n+            assertEquals(\"The validated character sequence is empty\", ex.getMessage());\n         }\n         try {\n             Validate.notEmpty(\"\");\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n-            assertEquals(\"The validated string is empty\", ex.getMessage());\n+            assertEquals(\"The validated character sequence is empty\", ex.getMessage());\n         }\n         \n         String str = \"Hi\";\n         Validate.notEmpty(\"a\", \"MSG\");\n         try {\n             Validate.notEmpty((String) null, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n         try {\n         try {\n             //when\n             Validate.notBlank(string);\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException e) {\n+            //then\n+            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankMsgNullStringShouldThrow() {\n+        //given\n+        String string = null;\n+\n+        try {\n+            //when\n+            Validate.notBlank(string, \"Message\");\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException e) {\n+            //then\n+            assertEquals(\"Message\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankEmptyStringShouldThrow() {\n+        //given\n+        String string = \"\";\n+\n+        try {\n+            //when\n+            Validate.notBlank(string);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             //then\n-            assertEquals(\"The validated string is blank\", e.getMessage());\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testNotBlankMsgNullStringShouldThrow() {\n-        //given\n-        String string = null;\n+            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankBlankStringWithWhitespacesShouldThrow() {\n+        //given\n+        String string = \"   \";\n \n         try {\n             //when\n-            Validate.notBlank(string, \"Message\");\n+            Validate.notBlank(string);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             //then\n-            assertEquals(\"Message\", e.getMessage());\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testNotBlankEmptyStringShouldThrow() {\n-        //given\n-        String string = \"\";\n+            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNotBlankBlankStringWithNewlinesShouldThrow() {\n+        //given\n+        String string = \" \\n \\t \\r \\n \";\n \n         try {\n             //when\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             //then\n-            assertEquals(\"The validated string is blank\", e.getMessage());\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testNotBlankBlankStringWithWhitespacesShouldThrow() {\n-        //given\n-        String string = \"   \";\n-\n-        try {\n-            //when\n-            Validate.notBlank(string);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            //then\n-            assertEquals(\"The validated string is blank\", e.getMessage());\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testNotBlankBlankStringWithNewlinesShouldThrow() {\n-        //given\n-        String string = \" \\n \\t \\r \\n \";\n-\n-        try {\n-            //when\n-            Validate.notBlank(string);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException e) {\n-            //then\n-            assertEquals(\"The validated string is blank\", e.getMessage());\n+            assertEquals(\"The validated character sequence is blank\", e.getMessage());\n         }\n     }\n \n         Validate.noNullElements(array);\n         try {\n             Validate.noNullElements((Object[]) null);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         array[1] = null;\n         Validate.noNullElements(array, \"MSG\");\n         try {\n             Validate.noNullElements((Object[]) null, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         array[1] = null;\n         Validate.noNullElements(coll);\n         try {\n             Validate.noNullElements((Collection<?>) null);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         coll.set(1, null);\n         Validate.noNullElements(coll, \"MSG\");\n         try {\n             Validate.noNullElements((Collection<?>) null, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting NullPointerException\");\n+        } catch (NullPointerException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n         coll.set(1, null);\n         Validate.validIndex(array, 1, \"Broken: \");\n         try {\n             Validate.validIndex(array, -1, \"Broken: \");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"Broken: -1\", ex.getMessage());\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n         }\n         try {\n             Validate.validIndex(array, 2, \"Broken: \");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"Broken: 2\", ex.getMessage());\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n         }\n         \n         String[] strArray = new String[] {\"Hi\"};\n         Validate.validIndex(array, 1);\n         try {\n             Validate.validIndex(array, -1);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n             assertEquals(\"The validated array index is invalid: -1\", ex.getMessage());\n         }\n         try {\n             Validate.validIndex(array, 2);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n             assertEquals(\"The validated array index is invalid: 2\", ex.getMessage());\n         }\n         \n         Validate.validIndex(coll, 1, \"Broken: \");\n         try {\n             Validate.validIndex(coll, -1, \"Broken: \");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"Broken: -1\", ex.getMessage());\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n         }\n         try {\n             Validate.validIndex(coll, 2, \"Broken: \");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"Broken: 2\", ex.getMessage());\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n         }\n         \n         List<String> strColl = Arrays.asList(new String[] {\"Hi\"});\n         Validate.validIndex(coll, 1);\n         try {\n             Validate.validIndex(coll, -1);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n             assertEquals(\"The validated collection index is invalid: -1\", ex.getMessage());\n         }\n         try {\n             Validate.validIndex(coll, 2);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n             assertEquals(\"The validated collection index is invalid: 2\", ex.getMessage());\n         }\n         \n         Validate.validIndex(str, 1, \"Broken: \");\n         try {\n             Validate.validIndex(str, -1, \"Broken: \");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"Broken: -1\", ex.getMessage());\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n         }\n         try {\n             Validate.validIndex(str, 2, \"Broken: \");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"Broken: 2\", ex.getMessage());\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"Broken: \", ex.getMessage());\n         }\n         \n         String input = \"Hi\";\n         Validate.validIndex(str, 1);\n         try {\n             Validate.validIndex(str, -1);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"The validated string index is invalid: -1\", ex.getMessage());\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"The validated character sequence index is invalid: -1\", ex.getMessage());\n         }\n         try {\n             Validate.validIndex(str, 2);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"The validated string index is invalid: 2\", ex.getMessage());\n+            fail(\"Expecting IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException ex) {\n+            assertEquals(\"The validated character sequence index is invalid: 2\", ex.getMessage());\n         }\n         \n         String input = \"Hi\";", "timestamp": 1259699260, "metainfo": ""}