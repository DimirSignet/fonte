{"sha": "08441b1e83853e8eb7bc7511fe66640ff3046c44", "log": "Update null handling in ExceptionUtils   ", "commit": "\n--- a/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/ExceptionUtilsTestCase.java\n  */\n package org.apache.commons.lang.exception;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.lang.reflect.InvocationTargetException;\n+import java.sql.SQLException;\n+\n+import org.apache.commons.lang.SystemUtils;\n \n import junit.framework.Test;\n import junit.framework.TestSuite;\n  * Tests {@link org.apache.commons.lang.exception.ExceptionUtils}.\n  *\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n- * @aithor <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @author Stephen Colebourne\n  * @since 1.0\n  */\n-public class ExceptionUtilsTestCase extends junit.framework.TestCase\n-{\n+public class ExceptionUtilsTestCase extends junit.framework.TestCase {\n+    \n     private NestableException nested;\n     private Throwable withCause;\n     private Throwable withoutCause;\n \n-    public ExceptionUtilsTestCase(String name)\n-    {\n+    public ExceptionUtilsTestCase(String name) {\n         super(name);\n     }\n-    \n-    public static Test suite()\n-    {\n+\n+    public static Test suite() {\n         return new TestSuite(ExceptionUtilsTestCase.class);\n     }\n \n-    public void setUp()\n-    {\n+    public void setUp() {\n         withoutCause = createExceptionWithoutCause();\n         nested = new NestableException(withoutCause);\n         withCause = new ExceptionWithCause(nested);\n     }\n-    \n-    private Throwable createExceptionWithoutCause(){\n+\n+    //-----------------------------------------------------------------------\n+    private Throwable createExceptionWithoutCause() {\n         try {\n             throw new ExceptionWithoutCause();\n-        }\n-        catch (Throwable t){\n+        } catch (Throwable t) {\n             return t;\n         }\n     }\n \n-    private Throwable createExceptionWithCause(){\n+    private Throwable createExceptionWithCause() {\n         try {\n             try {\n                 throw new ExceptionWithCause(createExceptionWithoutCause());\n-            }\n-            catch (Throwable t){\n+            } catch (Throwable t) {\n                 throw new ExceptionWithCause(t);\n             }\n-        }\n-        catch (Throwable t){\n+        } catch (Throwable t) {\n             return t;\n         }\n-    } \n-    \n-    public void testGetCause()\n-    {\n-        assertNull(ExceptionUtils.getCause(withoutCause));\n-        assertTrue(ExceptionUtils.getCause(nested) == withoutCause);\n-        assertTrue(ExceptionUtils.getCause(withCause) == nested);\n-    }\n-\n-    public void testGetRootCause()\n-    {\n-        assertNull(ExceptionUtils.getRootCause(withoutCause));\n-        assertTrue(ExceptionUtils.getRootCause(withCause) == withoutCause);\n-        assertTrue(ExceptionUtils.getRootCause(withCause) == withoutCause);\n-    }\n-\n-    public void testGetThrowableCount()\n-    {\n-        assertEquals(ExceptionUtils.getThrowableCount(null), 0);\n-    }\n-\n-    public void testPrintThrowables()\n-        throws Exception\n-    {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetCause_Throwable() {\n+        assertSame(null, ExceptionUtils.getCause(null));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause));\n+        assertSame(withoutCause, ExceptionUtils.getCause(nested));\n+        assertSame(nested, ExceptionUtils.getCause(withCause));\n+    }\n+\n+    public void testGetCause_ThrowableArray() {\n+        assertSame(null, ExceptionUtils.getCause(null, null));\n+        assertSame(null, ExceptionUtils.getCause(null, new String[0]));\n+\n+        // match because known type        \n+        assertSame(withoutCause, ExceptionUtils.getCause(nested, null));\n+        assertSame(withoutCause, ExceptionUtils.getCause(nested, new String[0]));\n+        assertSame(withoutCause, ExceptionUtils.getCause(nested, new String[] {\"getCause\"}));\n+        \n+        // not known type, so match on supplied method names\n+        assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names\n+        assertSame(null, ExceptionUtils.getCause(withCause, new String[0]));\n+        assertSame(null, ExceptionUtils.getCause(withCause, new String[] {null}));\n+        assertSame(nested, ExceptionUtils.getCause(withCause, new String[] {\"getCause\"}));\n+        \n+        // not known type, so match on supplied method names\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, null));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0]));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {null}));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getCause\"}));\n+        assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {\"getTargetException\"}));\n+    }\n+\n+    public void testGetRootCause_Throwable() {\n+        assertSame(null, ExceptionUtils.getRootCause(null));\n+        assertSame(null, ExceptionUtils.getRootCause(withoutCause));\n+        assertSame(withoutCause, ExceptionUtils.getRootCause(nested));\n+        assertSame(withoutCause, ExceptionUtils.getRootCause(withCause));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsThrowableNested() {\n+        if (SystemUtils.isJavaVersionAtLeast(140)) {\n+            assertEquals(true, ExceptionUtils.isThrowableNested());\n+        } else {\n+            assertEquals(false, ExceptionUtils.isThrowableNested());\n+        }\n+    }\n+    \n+    public void testIsNestedThrowable_Throwable() {\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(new SQLException()));\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(new InvocationTargetException(new Exception())));\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(new NestableRuntimeException()));\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(withCause));\n+        assertEquals(true, ExceptionUtils.isNestedThrowable(nested));\n+        if (SystemUtils.isJavaVersionAtLeast(140)) {\n+            assertEquals(true, ExceptionUtils.isNestedThrowable(withoutCause));\n+            assertEquals(true, ExceptionUtils.isNestedThrowable(new Throwable()));\n+        } else {\n+            assertEquals(false, ExceptionUtils.isNestedThrowable(withoutCause));\n+            assertEquals(false, ExceptionUtils.isNestedThrowable(new Throwable()));\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetThrowableCount_Throwable() {\n+        assertEquals(0, ExceptionUtils.getThrowableCount(null));\n+        assertEquals(1, ExceptionUtils.getThrowableCount(withoutCause));\n+        assertEquals(2, ExceptionUtils.getThrowableCount(nested));\n+        assertEquals(3, ExceptionUtils.getThrowableCount(withCause));\n+    }\n+\n+    public void testGetThrowables_Throwable() {\n+        assertEquals(0, ExceptionUtils.getThrowables(null).length);\n+        assertEquals(1, ExceptionUtils.getThrowables(withoutCause).length);\n+        assertSame(withoutCause, ExceptionUtils.getThrowables(withoutCause)[0]);\n+        \n+        assertEquals(2, ExceptionUtils.getThrowables(nested).length);\n+        assertSame(nested, ExceptionUtils.getThrowables(nested)[0]);\n+        assertSame(withoutCause, ExceptionUtils.getThrowables(nested)[1]);\n+        \n+        assertEquals(3, ExceptionUtils.getThrowables(withCause).length);\n+        assertSame(withCause, ExceptionUtils.getThrowables(withCause)[0]);\n+        assertSame(nested, ExceptionUtils.getThrowables(withCause)[1]);\n+        assertSame(withoutCause, ExceptionUtils.getThrowables(withCause)[2]);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIndexOf_ThrowableClass() {\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class));\n+        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class));\n+    }\n+\n+    public void testIndexOf_ThrowableClassInt() {\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0));\n+        \n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0));\n+        assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0));\n+\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1));\n+        assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1));\n+        assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrintRootCauseStackTrace_Throwable() throws Exception {\n+        ExceptionUtils.printRootCauseStackTrace(null);\n+        // could pipe system.err to a known stream, but not much point as\n+        // internally this method calls stram method anyway\n+    }\n+    \n+    public void testPrintRootCauseStackTrace_ThrowableStream() throws Exception {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream(1024);\n+        ExceptionUtils.printRootCauseStackTrace(null, (PrintStream) null);\n+        ExceptionUtils.printRootCauseStackTrace(null, new PrintStream(out));\n+        assertEquals(0, out.toString().length());\n+        \n+        out = new ByteArrayOutputStream(1024);\n+        try {\n+            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintStream) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        \n+        out = new ByteArrayOutputStream(1024);\n+        Throwable withCause = createExceptionWithCause();\n+        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintStream(out));\n+        String stackTrace = out.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n+        \n+        out = new ByteArrayOutputStream(1024);\n+        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintStream(out));\n+        stackTrace = out.toString();\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n+    }\n+\n+    public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception {\n         StringWriter writer = new StringWriter(1024);\n+        ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null);\n+        ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer));\n+        assertEquals(0, writer.getBuffer().length());\n+        \n+        writer = new StringWriter(1024);\n+        try {\n+            ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        \n+        writer = new StringWriter(1024);\n         Throwable withCause = createExceptionWithCause();\n-        ExceptionUtils.printRootCauseStackTrace(withCause, \n-            new PrintWriter(writer));\n+        ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer));\n         String stackTrace = writer.toString();\n-        assertTrue(\"printRootCauseStackTrace(Throwable, PrintWriter) failed\",\n-                   stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1);\n+        \n         writer = new StringWriter(1024);\n-        ExceptionUtils.printRootCauseStackTrace(withoutCause, \n-            new PrintWriter(writer));\n+        ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer));\n         stackTrace = writer.toString();\n-        assertTrue(\"printRootCauseStackTrace(Throwable, PrintWriter) failed\",\n-                   stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n-    }\n-\n-    public void testIsNestedThrowable() {\n-        assertTrue(\"SQLException not nested\", \n-                   ExceptionUtils.isNestedThrowable(new java.sql.SQLException() ) );\n-        assertTrue(\"InvocationTargetException not nested\", \n-                   ExceptionUtils.isNestedThrowable(new java.lang.reflect.InvocationTargetException( new Exception() ) ) );\n-        assertTrue(\"NestableRuntimeException not nested\", \n-                   ExceptionUtils.isNestedThrowable(new NestableRuntimeException() ) );\n-                   \n-        // TODO: Come up with a way to test if java.lang.Throwable is nested.\n-        // bearing in mind that in JDK 1.4 it is, and in 1.3 and previous \n-        // it isn't.\n-    }\n-    \n+        assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetRootCauseStackTrace_Throwable() throws Exception {\n+        assertEquals(0, ExceptionUtils.getRootCauseStackTrace(null).length);\n+        \n+        Throwable withCause = createExceptionWithCause();\n+        String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(withCause);\n+        boolean match = false;\n+        for (int i = 0; i < stackTrace.length; i++) {\n+            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n+                match = true;\n+                break;\n+            }\n+        }\n+        assertEquals(true, match);\n+        \n+        stackTrace = ExceptionUtils.getRootCauseStackTrace(withoutCause);\n+        match = false;\n+        for (int i = 0; i < stackTrace.length; i++) {\n+            if (stackTrace[i].startsWith(ExceptionUtils.WRAPPED_MARKER)) {\n+                match = true;\n+                break;\n+            }\n+        }\n+        assertEquals(false, match);\n+    }\n+\n+    public void testRemoveCommonFrames_ListList() throws Exception {\n+        try {\n+            ExceptionUtils.removeCommonFrames(null, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+    }\n+    \n+    //-----------------------------------------------------------------------\n     /**\n      * Provides a method with a well known chained/nested exception\n      * name which matches the full signature (e.g. has a return value\n      * of <code>Throwable</code>.\n      */\n-    private static class ExceptionWithCause extends Exception\n-    {\n+    private static class ExceptionWithCause extends Exception {\n         private Throwable cause;\n \n-        public ExceptionWithCause(Throwable cause)\n-        {\n+        public ExceptionWithCause(Throwable cause) {\n             this.cause = cause;\n         }\n \n-        public Throwable getCause()\n-        {\n+        public Throwable getCause() {\n             return cause;\n         }\n     }\n      * name which does not match the full signature (e.g. lacks a\n      * return value of <code>Throwable</code>.\n      */\n-    private static class ExceptionWithoutCause extends Exception\n-    {\n-        public void getTargetException()\n-        {\n-        }\n-    }\n+    private static class ExceptionWithoutCause extends Exception {\n+        public void getTargetException() {\n+        }\n+    }\n+    \n }", "timestamp": 1059225081, "metainfo": ""}