{"sha": "fe350b295390aa165b79b1ec09a4261367cb7526", "log": "LANG-881 Enhance test so it also checks the exact values  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n     @Test\n     public void testCreateNumberMagnitude() {\n         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type\n-        assertEquals(Float.class,  NumberUtils.createNumber(\"3.4028235e+38\").getClass());\n-        assertEquals(Double.class, NumberUtils.createNumber(\"3.4028236e+38\").getClass());\n+        assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber(\"3.4028235e+38\"));\n+        assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber(\"3.4028236e+38\"));\n \n         // Test Double.MAX_VALUE\n-        assertEquals(Double.class,     NumberUtils.createNumber(\"1.7976931348623157e+308\").getClass());\n+        assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber(\"1.7976931348623157e+308\"));\n         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal)\n-        assertEquals(BigDecimal.class, NumberUtils.createNumber(\"1.7976931348623159e+308\").getClass());\n+        assertEquals(new BigDecimal(\"1.7976931348623159e+308\"), NumberUtils.createNumber(\"1.7976931348623159e+308\"));\n         \n-        assertEquals(Integer.class, NumberUtils.createNumber(\"0x12345678\").getClass());\n-        assertEquals(Long.class,    NumberUtils.createNumber(\"0x123456789\").getClass());\n-\n-        assertEquals(Long.class,       NumberUtils.createNumber(\"0x7fffffffffffffff\").getClass());\n-        assertEquals(BigInteger.class, NumberUtils.createNumber(\"0x7fffffffffffffff0\").getClass());\n-\n-        assertEquals(Long.class,       NumberUtils.createNumber(\"#7fffffffffffffff\").getClass());\n-        assertEquals(BigInteger.class, NumberUtils.createNumber(\"#7fffffffffffffff0\").getClass());\n-\n-        assertEquals(Integer.class, NumberUtils.createNumber(\"017777777777\").getClass()); // 31 bits\n-        assertEquals(Long.class,    NumberUtils.createNumber(\"037777777777\").getClass()); // 32 bits\n-\n-        assertEquals(Long.class,       NumberUtils.createNumber(\"0777777777777777777777\").getClass()); // 63 bits\n-        assertEquals(BigInteger.class, NumberUtils.createNumber(\"01777777777777777777777\").getClass());// 64 bits\n+        assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber(\"0x12345678\"));\n+        assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber(\"0x123456789\"));\n+\n+        assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber(\"0x7fffffffffffffff\"));\n+        // Does not appear to be a way to create a literal BigInteger of this magnitude\n+        assertEquals(new BigInteger(\"7fffffffffffffff0\",16), NumberUtils.createNumber(\"0x7fffffffffffffff0\"));\n+\n+        assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber(\"#7fffffffffffffff\"));\n+        assertEquals(new BigInteger(\"7fffffffffffffff0\",16), NumberUtils.createNumber(\"#7fffffffffffffff0\"));\n+\n+        assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber(\"017777777777\")); // 31 bits\n+        assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber(\"037777777777\")); // 32 bits\n+\n+        assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber(\"0777777777777777777777\")); // 63 bits\n+        assertEquals(new BigInteger(\"1777777777777777777777\",8), NumberUtils.createNumber(\"01777777777777777777777\"));// 64 bits\n     }\n \n     @Test", "timestamp": 1364398344, "metainfo": ""}