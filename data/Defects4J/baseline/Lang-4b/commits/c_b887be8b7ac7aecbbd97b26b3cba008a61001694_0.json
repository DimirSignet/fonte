{"sha": "b887be8b7ac7aecbbd97b26b3cba008a61001694", "log": "Copying from Collections to Lang  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/compare/NullComparator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.ComparatorUtils;\n+\n+/**\n+ * A Comparator that will compare nulls to be either lower or higher than\n+ * other objects.\n+ *\n+ * @since Commons Collections 2.0\n+ * @version $Revision$ $Date$ \n+ *\n+ * @author Michael A. Smith\n+ */\n+public class NullComparator<E> implements Comparator<E>, Serializable {\n+\n+    /** Serialization version. */\n+    private static final long serialVersionUID = -5820772575483504339L;\n+\n+    /**\n+     *  The comparator to use when comparing two non-<code>null</code> objects.\n+     **/\n+    private final Comparator<E> nonNullComparator;\n+\n+    /**\n+     *  Specifies whether a <code>null</code> are compared as higher than\n+     *  non-<code>null</code> objects.\n+     **/\n+    private final boolean nullsAreHigh;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Construct an instance that sorts <code>null</code> higher than any\n+     *  non-<code>null</code> object it is compared with. When comparing two\n+     *  non-<code>null</code> objects, the {@link ComparableComparator} is\n+     *  used.\n+     **/\n+    @SuppressWarnings(\"unchecked\")\n+    public NullComparator() {\n+        this(ComparatorUtils.NATURAL_COMPARATOR, true);\n+    }\n+\n+    /**\n+     *  Construct an instance that sorts <code>null</code> higher than any\n+     *  non-<code>null</code> object it is compared with.  When comparing two\n+     *  non-<code>null</code> objects, the specified {@link Comparator} is\n+     *  used.\n+     *\n+     *  @param nonNullComparator the comparator to use when comparing two\n+     *  non-<code>null</code> objects.  This argument cannot be\n+     *  <code>null</code>\n+     *\n+     *  @exception NullPointerException if <code>nonNullComparator</code> is\n+     *  <code>null</code>\n+     **/\n+    public NullComparator(Comparator<E> nonNullComparator) {\n+        this(nonNullComparator, true);\n+    }\n+\n+    /**\n+     *  Construct an instance that sorts <code>null</code> higher or lower than\n+     *  any non-<code>null</code> object it is compared with.  When comparing\n+     *  two non-<code>null</code> objects, the {@link ComparableComparator} is\n+     *  used.\n+     *\n+     *  @param nullsAreHigh a <code>true</code> value indicates that\n+     *  <code>null</code> should be compared as higher than a\n+     *  non-<code>null</code> object.  A <code>false</code> value indicates\n+     *  that <code>null</code> should be compared as lower than a\n+     *  non-<code>null</code> object.\n+     **/\n+    @SuppressWarnings(\"unchecked\")\n+    public NullComparator(boolean nullsAreHigh) {\n+        this(ComparatorUtils.NATURAL_COMPARATOR, nullsAreHigh);\n+    }\n+    \n+    /**\n+     *  Construct an instance that sorts <code>null</code> higher or lower than\n+     *  any non-<code>null</code> object it is compared with.  When comparing\n+     *  two non-<code>null</code> objects, the specified {@link Comparator} is\n+     *  used.\n+     *\n+     *  @param nonNullComparator the comparator to use when comparing two\n+     *  non-<code>null</code> objects. This argument cannot be\n+     *  <code>null</code>\n+     *\n+     *  @param nullsAreHigh a <code>true</code> value indicates that\n+     *  <code>null</code> should be compared as higher than a\n+     *  non-<code>null</code> object.  A <code>false</code> value indicates\n+     *  that <code>null</code> should be compared as lower than a\n+     *  non-<code>null</code> object.\n+     *\n+     *  @exception NullPointerException if <code>nonNullComparator</code> is\n+     *  <code>null</code>\n+     **/\n+    public NullComparator(Comparator<E> nonNullComparator, boolean nullsAreHigh) {\n+        this.nonNullComparator = nonNullComparator;\n+        this.nullsAreHigh = nullsAreHigh;\n+        \n+        if (nonNullComparator == null) {\n+            throw new NullPointerException(\"null nonNullComparator\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Perform a comparison between two objects.  If both objects are\n+     *  <code>null</code>, a <code>0</code> value is returned.  If one object\n+     *  is <code>null</code> and the other is not, the result is determined on\n+     *  whether the Comparator was constructed to have nulls as higher or lower\n+     *  than other objects.  If neither object is <code>null</code>, an\n+     *  underlying comparator specified in the constructor (or the default) is\n+     *  used to compare the non-<code>null</code> objects.\n+     *\n+     *  @param o1  the first object to compare\n+     *  @param o2  the object to compare it to.\n+     *  @return <code>-1</code> if <code>o1</code> is \"lower\" than (less than,\n+     *  before, etc.) <code>o2</code>; <code>1</code> if <code>o1</code> is\n+     *  \"higher\" than (greater than, after, etc.) <code>o2</code>; or\n+     *  <code>0</code> if <code>o1</code> and <code>o2</code> are equal.\n+     **/\n+    public int compare(E o1, E o2) {\n+        if(o1 == o2) { return 0; }\n+        if(o1 == null) { return (this.nullsAreHigh ? 1 : -1); }\n+        if(o2 == null) { return (this.nullsAreHigh ? -1 : 1); }\n+        return this.nonNullComparator.compare(o1, o2);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     *  Implement a hash code for this comparator that is consistent with\n+     *  {@link #equals(Object)}.\n+     *\n+     *  @return a hash code for this comparator.\n+     **/\n+    @Override\n+    public int hashCode() {\n+        return (nullsAreHigh ? -1 : 1) * nonNullComparator.hashCode();\n+    }\n+\n+    /**\n+     *  Determines whether the specified object represents a comparator that is\n+     *  equal to this comparator.\n+     *\n+     *  @param obj  the object to compare this comparator with.\n+     *\n+     *  @return <code>true</code> if the specified object is a NullComparator\n+     *  with equivalent <code>null</code> comparison behavior\n+     *  (i.e. <code>null</code> high or low) and with equivalent underlying\n+     *  non-<code>null</code> object comparators.\n+     **/\n+    @Override\n+    public boolean equals(Object obj) {\n+        if(obj == null) { return false; }\n+        if(obj == this) { return true; }\n+        if(!obj.getClass().equals(this.getClass())) { return false; }\n+\n+        NullComparator<?> other = (NullComparator<?>) obj;\n+\n+        return ((this.nullsAreHigh == other.nullsAreHigh) &&\n+                (this.nonNullComparator.equals(other.nonNullComparator)));\n+    }\n+\n+}", "timestamp": 1312780276, "metainfo": ""}