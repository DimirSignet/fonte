{"sha": "bd131d48274bd7453aee646ef1efecf14ca36988", "log": "LANG-594: Add truncatedEquals and truncatedCompareTo  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/time/DateUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @author Robert Scholte\n+ * @author Paul Benedict\n  * @since 2.0\n  * @version $Id$\n  */\n     }\n     \n     /**\n+     * Determines if two calendars are equal up to no more than the specified \n+     * most significant field.\n+     * \n+     * @param cal1 the first calendar, not <code>null</code>\n+     * @param cal2 the second calendar, not <code>null</code>\n+     * @param field the field from <code>Calendar</code>\n+     * @return <code>true</code> if equal; otherwise <code>false</code>\n+     * @throws IllegalArgumentException if any argument is <code>null</code>\n+     * @see #truncate(Calendar, int)\n+     * @see #truncatedEquals(Date, Date, int)\n+     * @since 3.0\n+     */\n+    public static boolean truncatedEquals(Calendar cal1, Calendar cal2, int field) {\n+        return truncatedCompareTo(cal1, cal2, field) == 0;\n+    }\n+\n+    /**\n+     * Determines if two dates are equal up to no more than the specified \n+     * most significant field.\n+     * \n+     * @param date1 the first date, not <code>null</code>\n+     * @param date2 the second date, not <code>null</code>\n+     * @param field the field from <code>Calendar</code>\n+     * @return <code>true</code> if equal; otherwise <code>false</code>\n+     * @throws IllegalArgumentException if any argument is <code>null</code>\n+     * @see #truncate(Date, int)\n+     * @see #truncatedEquals(Calendar, Calendar, int)\n+     * @since 3.0\n+     */\n+    public static boolean truncatedEquals(Date date1, Date date2, int field) {\n+        return truncatedCompareTo(date1, date2, field) == 0;\n+    }\n+\n+    /**\n+     * Determines how two calendars compare up to no more than the specified \n+     * most significant field.\n+     * \n+     * @param cal1 the first calendar, not <code>null</code>\n+     * @param cal2 the second calendar, not <code>null</code>\n+     * @param field the field from <code>Calendar</code>\n+     * @return a negative integer, zero, or a positive integer as the first \n+     * calendar is less than, equal to, or greater than the second.\n+     * @throws IllegalArgumentException if any argument is <code>null</code>\n+     * @see #truncate(Calendar, int)\n+     * @see #truncatedCompareTo(Date, Date, int)\n+     * @since 3.0\n+     */\n+    public static int truncatedCompareTo(Calendar cal1, Calendar cal2, int field) {\n+        Calendar truncatedCal1 = truncate(cal1, field);\n+        Calendar truncatedCal2 = truncate(cal2, field);\n+        return truncatedCal1.compareTo(truncatedCal2);\n+    }\n+\n+    /**\n+     * Determines how two dates compare up to no more than the specified \n+     * most significant field.\n+     * \n+     * @param date1 the first date, not <code>null</code>\n+     * @param date2 the second date, not <code>null</code>\n+     * @param field the field from <code>Calendar</code>\n+     * @return a negative integer, zero, or a positive integer as the first \n+     * date is less than, equal to, or greater than the second.\n+     * @throws IllegalArgumentException if any argument is <code>null</code>\n+     * @see #truncate(Calendar, int)\n+     * @see #truncatedCompareTo(Date, Date, int)\n+     * @since 3.0\n+     */\n+    public static int truncatedCompareTo(Date date1, Date date2, int field) {\n+        Date truncatedDate1 = truncate(date1, field);\n+        Date truncatedDate2 = truncate(date2, field);\n+        return truncatedDate1.compareTo(truncatedDate2);\n+    }\n+    \n+    /**\n      * Returns the number of millis of a datefield, if this is a constant value\n      * \n      * @param unit A Calendar field which is a valid unit for a fragment", "timestamp": 1267241383, "metainfo": ""}