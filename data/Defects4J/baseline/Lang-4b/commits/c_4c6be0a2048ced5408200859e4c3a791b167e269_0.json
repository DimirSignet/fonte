{"sha": "4c6be0a2048ced5408200859e4c3a791b167e269", "log": "Fixing urls to point to new oracle pages and not old, sometimes broken, sun urls  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharEncoding.java\n+++ b/src/main/java/org/apache/commons/lang3/CharEncoding.java\n /**\n  * <p>Character encoding names required of every implementation of the Java platform.</p>\n  *\n- * <p>According to <a href=\"http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n+ * <p>According to <a href=\"http://docs.oracle.com/javase/1.3/docs/api/java/lang/package-summary.html#charenc\">JRE character\n  * encoding names</a>:</p>\n  *\n  * <p><cite>Every implementation of the Java platform is required to support the following character encodings.\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n      * specified {@code Class} parameter can be converted to the type\n      * represented by this {@code Class} object via an identity conversion\n      * widening primitive or widening reference conversion. See\n-     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n+     * <em><a href=\"http://docs.oracle.com/javase/specs/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n      * <p><strong>Since Lang 3.0,</strong> this method will default behavior for\n      * specified {@code Class} parameter can be converted to the type\n      * represented by this {@code Class} object via an identity conversion\n      * widening primitive or widening reference conversion. See\n-     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n+     * <em><a href=\"http://docs.oracle.com/javase/specs/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n      * @param classArray  the array of Classes to check, may be {@code null}\n      * specified {@code Class} parameter can be converted to the type\n      * represented by this {@code Class} object via an identity conversion\n      * widening primitive or widening reference conversion. See\n-     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n+     * <em><a href=\"http://docs.oracle.com/javase/specs/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n      * <p><strong>Since Lang 3.0,</strong> this method will default behavior for\n      * specified {@code Class} parameter can be converted to the type\n      * represented by this {@code Class} object via an identity conversion\n      * widening primitive or widening reference conversion. See\n-     * <em><a href=\"http://java.sun.com/docs/books/jls/\">The Java Language Specification</a></em>,\n+     * <em><a href=\"http://docs.oracle.com/javase/specs/\">The Java Language Specification</a></em>,\n      * sections 5.1.1, 5.1.2 and 5.1.4 for details.</p>\n      *\n      * @param cls  the Class to check, may be null\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n  * </ul>\n  *\n  * <p>All exceptions messages are\n- * <a href=\"http://java.sun.com/j2se/1.5.0/docs/api/java/util/Formatter.html#syntax\">format strings</a>\n+ * <a href=\"http://docs.oracle.com/javase/1.5.0/docs/api/java/util/Formatter.html#syntax\">format strings</a>\n  * as defined by the Java platform. For example:</p>\n  *\n  * <pre>\n--- a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n  *\n  * <p> This class provides methods to build a good equals method for any\n  * class. It follows rules laid out in\n- * <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a>\n+ * <a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\">Effective Java</a>\n  * , by Joshua Bloch. In particular the rule for comparing <code>doubles</code>,\n  * <code>floats</code>, and arrays can be tricky. Also, making sure that\n  * <code>equals()</code> and <code>hashCode()</code> are consistent can be\n--- a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n  *\n  * <p>\n  * This class enables a good <code>hashCode</code> method to be built for any class. It follows the rules laid out in\n- * the book <a href=\"http://java.sun.com/docs/books/effective/index.html\">Effective Java</a> by Joshua Bloch. Writing a\n+ * the book <a href=\"http://www.oracle.com/technetwork/java/effectivejava-136174.html\">Effective Java</a> by Joshua Bloch. Writing a\n  * good <code>hashCode</code> method is actually quite difficult. This class aims to simplify the process.\n  * </p>\n  *\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\n     private static final String BAR = \"bar\";\n     /**\n      * Supplementary character U+20000\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     private static final String CharU20000 = \"\\uD840\\uDC00\";\n     /**\n      * Supplementary character U+20001\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     private static final String CharU20001 = \"\\uD840\\uDC01\";\n     /**\n      * Incomplete supplementary character U+20000, high surrogate only.\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     private static final String CharUSuppCharHigh = \"\\uDC00\";\n \n     /**\n      * Incomplete supplementary character U+20000, low surrogate only.\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     private static final String CharUSuppCharLow = \"\\uD840\";\n \n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContains_StringWithBadSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContains_StringWithSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContainsAny_StringCharArrayWithBadSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContainsAny_StringCharArrayWithSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContainsAny_StringWithBadSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContainsAny_StringWithSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContainsNone_CharArrayWithBadSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContainsNone_CharArrayWithSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContainsNone_StringWithBadSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testContainsNone_StringWithSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testIndexOfAny_StringCharArrayWithSupplementaryChars() {\n     }\n \n     /**\n-     * See http://java.sun.com/developer/technicalArticles/Intl/Supplementary/\n+     * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html\n      */\n     @Test\n     public void testIndexOfAny_StringStringWithSupplementaryChars() {", "timestamp": 1363937823, "metainfo": ""}