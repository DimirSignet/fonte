{"sha": "48986173cfb47ad3e6478ffd97e59b4eab7899e5", "log": "add TODOs  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n      * @since 3.0\n      */\n     public static void matchesPattern(CharSequence input, String pattern) {\n+        // TODO when breaking BC, consider returning input\n         if (Pattern.matches(pattern, input) == false) {\n             throw new IllegalArgumentException(String.format(DEFAULT_MATCHES_PATTERN_EX, input, pattern));\n         }\n      * @since 3.0\n      */\n     public static void matchesPattern(CharSequence input, String pattern, String message, Object... values) {\n+        // TODO when breaking BC, consider returning input\n         if (Pattern.matches(pattern, input) == false) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n      * @since 3.0\n      */\n     public static <T> void inclusiveBetween(T start, T end, Comparable<T> value) {\n+        // TODO when breaking BC, consider returning value\n         if (value.compareTo(start) < 0 || value.compareTo(end) > 0) {\n             throw new IllegalArgumentException(String.format(DEFAULT_INCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\n         }\n      * @since 3.0\n      */\n     public static <T> void inclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values) {\n+        // TODO when breaking BC, consider returning value\n         if (value.compareTo(start) < 0 || value.compareTo(end) > 0) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n      * @since 3.0\n      */\n     public static <T> void exclusiveBetween(T start, T end, Comparable<T> value) {\n+        // TODO when breaking BC, consider returning value\n         if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0) {\n             throw new IllegalArgumentException(String.format(DEFAULT_EXCLUSIVE_BETWEEN_EX_MESSAGE, value, start, end));\n         }\n      * @since 3.0\n      */\n     public static <T> void exclusiveBetween(T start, T end, Comparable<T> value, String message, Object... values) {\n+        // TODO when breaking BC, consider returning value\n         if (value.compareTo(start) <= 0 || value.compareTo(end) >= 0) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n      * @since 3.0\n      */\n     public static void isInstanceOf(Class<?> type, Object obj) {\n+        // TODO when breaking BC, consider returning obj\n         if (type.isInstance(obj) == false) {\n             throw new IllegalArgumentException(String.format(DEFAULT_IS_INSTANCE_OF_EX_MESSAGE, type.getName(),\n                     obj == null ? \"null\" : obj.getClass().getName()));\n      * @since 3.0\n      */\n     public static void isInstanceOf(Class<?> type, Object obj, String message, Object... values) {\n+        // TODO when breaking BC, consider returning obj\n         if (type.isInstance(obj) == false) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n      * @since 3.0\n      */\n     public static void isAssignableFrom(Class<?> superType, Class<?> type) {\n+        // TODO when breaking BC, consider returning type\n         if (superType.isAssignableFrom(type) == false) {\n             throw new IllegalArgumentException(String.format(DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, type == null ? \"null\" : type.getName(),\n                     superType.getName()));\n      * @see #isAssignableFrom(Class, Class)\n      */\n     public static void isAssignableFrom(Class<?> superType, Class<?> type, String message, Object... values) {\n+        // TODO when breaking BC, consider returning type\n         if (superType.isAssignableFrom(type) == false) {\n             throw new IllegalArgumentException(String.format(message, values));\n         }", "timestamp": 1331838056, "metainfo": ""}