{"sha": "f9ff103398abe8fcb53449186a4429328772229e", "log": "Apply generics  ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n      *  with <code>lhs</code>\n      * @since 2.0\n      */\n-    public CompareToBuilder append(Object lhs, Object rhs, Comparator comparator) {\n+    @SuppressWarnings(\"unchecked\")\n+    public CompareToBuilder append(Object lhs, Object rhs, Comparator<?> comparator) {\n         if (comparison != 0) {\n             return this;\n         }\n             if (comparator == null) {\n                 comparison = ((Comparable) lhs).compareTo(rhs);\n             } else {\n-                comparison = comparator.compare(lhs, rhs);\n+                comparison = ((Comparator) comparator).compare(lhs, rhs);\n             }\n         }\n         return this;\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n         try {\n             register(object);\n             Field[] fields = clazz.getDeclaredFields();\n-            List<String> excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.EMPTY_LIST;\n+            List<String> excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();\n             AccessibleObject.setAccessible(fields, true);\n             for (Field field : fields) {\n                 if (!excludedFieldList.contains(field.getName())\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n         register(value);\n \n         try {\n-            if (value instanceof Collection) {\n+            if (value instanceof Collection<?>) {\n                 if (detail) {\n-                    appendDetail(buffer, fieldName, (Collection) value);\n+                    appendDetail(buffer, fieldName, (Collection<?>) value);\n                 } else {\n-                    appendSummarySize(buffer, fieldName, ((Collection) value).size());\n+                    appendSummarySize(buffer, fieldName, ((Collection<?>) value).size());\n                 }\n     \n-            } else if (value instanceof Map) {\n+            } else if (value instanceof Map<?, ?>) {\n                 if (detail) {\n-                    appendDetail(buffer, fieldName, (Map) value);\n+                    appendDetail(buffer, fieldName, (Map<?, ?>) value);\n                 } else {\n-                    appendSummarySize(buffer, fieldName, ((Map) value).size());\n+                    appendSummarySize(buffer, fieldName, ((Map<?, ?>) value).size());\n                 }\n     \n             } else if (value instanceof long[]) {\n      * @param coll  the <code>Collection</code> to add to the\n      *  <code>toString</code>, not <code>null</code>\n      */\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Collection coll) {\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Collection<?> coll) {\n         buffer.append(coll);\n     }\n \n      * @param map  the <code>Map</code> to add to the <code>toString</code>,\n      *  not <code>null</code>\n      */\n-    protected void appendDetail(StringBuffer buffer, String fieldName, Map map) {\n+    protected void appendDetail(StringBuffer buffer, String fieldName, Map<?, ?> map) {\n         buffer.append(map);\n     }\n \n      * @param cls  the <code>Class</code> to get the short name of\n      * @return the short name\n      */\n-    protected String getShortClassName(Class cls) {\n+    protected String getShortClassName(Class<?> cls) {\n         return ClassUtils.getShortClassName(cls);\n     }\n \n--- a/src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java\n \n     //-----------------------------------------------------------------------\n \n-    static class TestObject implements Comparable {\n+    static class TestObject implements Comparable<TestObject> {\n         private int a;\n         public TestObject(int a) {\n             this.a = a;\n         public int getA() {\n             return a;\n         }\n-        public int compareTo(Object o) {\n-            TestObject rhs = (TestObject) o;\n+        public int compareTo(TestObject rhs) {\n             return (a < rhs.a) ? -1 : (a > rhs.a) ? +1 : 0;\n         }\n     }", "timestamp": 1256386135, "metainfo": ""}