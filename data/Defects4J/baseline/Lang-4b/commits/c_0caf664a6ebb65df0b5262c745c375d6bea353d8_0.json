{"sha": "0caf664a6ebb65df0b5262c745c375d6bea353d8", "log": "Port to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/CharUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.CharUtils}.\n  *\n  * @version $Id$\n  */\n-public class CharUtilsTest extends TestCase {\n+public class CharUtilsTest {\n \n     private static final Character CHARACTER_A = new Character('A');\n     private static final Character CHARACTER_B = new Character('B');\n     private static final char CHAR_COPY = '\\u00a9';\n     \n-    public CharUtilsTest(String name) {\n-        super(name);\n-    }\n-\n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new CharUtils());\n         Constructor<?>[] cons = CharUtils.class.getDeclaredConstructors();\n         assertEquals(false, Modifier.isFinal(BooleanUtils.class.getModifiers()));\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testToCharacterObject_char() {\n         assertEquals(new Character('a'), CharUtils.toCharacterObject('a'));\n         assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a'));\n         }\n     }\n     \n+    @Test\n     public void testToCharacterObject_String() {\n         assertEquals(null, CharUtils.toCharacterObject(null));\n         assertEquals(null, CharUtils.toCharacterObject(\"\"));\n         assertSame(CharUtils.toCharacterObject(\"a\"), CharUtils.toCharacterObject('a'));\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testToChar_Character() {\n         assertEquals('A', CharUtils.toChar(CHARACTER_A));\n         assertEquals('B', CharUtils.toChar(CHARACTER_B));\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    @Test\n     public void testToChar_Character_char() {\n         assertEquals('A', CharUtils.toChar(CHARACTER_A, 'X'));\n         assertEquals('B', CharUtils.toChar(CHARACTER_B, 'X'));\n         assertEquals('X', CharUtils.toChar((Character) null, 'X'));\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testToChar_String() {\n         assertEquals('A', CharUtils.toChar(\"A\"));\n         assertEquals('B', CharUtils.toChar(\"BA\"));\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    @Test\n     public void testToChar_String_char() {\n         assertEquals('A', CharUtils.toChar(\"A\", 'X'));\n         assertEquals('B', CharUtils.toChar(\"BA\", 'X'));\n         assertEquals('X', CharUtils.toChar((String) null, 'X'));\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testToIntValue_char() {\n         assertEquals(0, CharUtils.toIntValue('0'));\n         assertEquals(1, CharUtils.toIntValue('1'));\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    @Test\n     public void testToIntValue_char_int() {\n         assertEquals(0, CharUtils.toIntValue('0', -1));\n         assertEquals(3, CharUtils.toIntValue('3', -1));\n         assertEquals(-1, CharUtils.toIntValue('a', -1));\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testToIntValue_Character() {\n         assertEquals(0, CharUtils.toIntValue(new Character('0')));\n         assertEquals(3, CharUtils.toIntValue(new Character('3')));\n         } catch (IllegalArgumentException ex) {}\n     }\n     \n+    @Test\n     public void testToIntValue_Character_int() {\n         assertEquals(0, CharUtils.toIntValue(new Character('0'), -1));\n         assertEquals(3, CharUtils.toIntValue(new Character('3'), -1));\n         assertEquals(-1, CharUtils.toIntValue(null, -1));\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testToString_char() {\n         assertEquals(\"a\", CharUtils.toString('a'));\n         assertSame(CharUtils.toString('a'), CharUtils.toString('a'));\n         }\n     }\n     \n+    @Test\n     public void testToString_Character() {\n         assertEquals(null, CharUtils.toString(null));\n         assertEquals(\"A\", CharUtils.toString(CHARACTER_A));\n         assertSame(CharUtils.toString(CHARACTER_A), CharUtils.toString(CHARACTER_A));\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testToUnicodeEscaped_char() {\n         assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped('A'));\n        \n         assertEquals(\"\\\\u1001\", CharUtils.unicodeEscaped((char) 0x1001));\n     }\n     \n+    @Test\n     public void testToUnicodeEscaped_Character() {\n         assertEquals(null, CharUtils.unicodeEscaped(null));\n         assertEquals(\"\\\\u0041\", CharUtils.unicodeEscaped(CHARACTER_A));\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testIsAscii_char() {\n         assertEquals(true, CharUtils.isAscii('a'));\n         assertEquals(true, CharUtils.isAscii('A'));\n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testIsAsciiPrintable_char() {\n         assertEquals(true, CharUtils.isAsciiPrintable('a'));\n         assertEquals(true, CharUtils.isAsciiPrintable('A'));\n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testIsAsciiControl_char() {\n         assertEquals(false, CharUtils.isAsciiControl('a'));\n         assertEquals(false, CharUtils.isAsciiControl('A'));\n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testIsAsciiAlpha_char() {\n         assertEquals(true, CharUtils.isAsciiAlpha('a'));\n         assertEquals(true, CharUtils.isAsciiAlpha('A'));\n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testIsAsciiAlphaUpper_char() {\n         assertEquals(false, CharUtils.isAsciiAlphaUpper('a'));\n         assertEquals(true, CharUtils.isAsciiAlphaUpper('A'));\n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testIsAsciiAlphaLower_char() {\n         assertEquals(true, CharUtils.isAsciiAlphaLower('a'));\n         assertEquals(false, CharUtils.isAsciiAlphaLower('A'));\n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testIsAsciiNumeric_char() {\n         assertEquals(false, CharUtils.isAsciiNumeric('a'));\n         assertEquals(false, CharUtils.isAsciiNumeric('A'));\n         }\n     }\n     \n-    //-----------------------------------------------------------------------\n+    @Test\n     public void testIsAsciiAlphanumeric_char() {\n         assertEquals(true, CharUtils.isAsciiAlphanumeric('a'));\n         assertEquals(true, CharUtils.isAsciiAlphanumeric('A'));", "timestamp": 1313503492, "metainfo": ""}