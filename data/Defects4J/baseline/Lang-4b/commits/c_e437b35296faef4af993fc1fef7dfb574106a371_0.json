{"sha": "e437b35296faef4af993fc1fef7dfb574106a371", "log": "No need to check for Java 1.3+ any more  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n  */\n package org.apache.commons.lang3.math;\n \n-import static org.apache.commons.lang3.JavaVersion.JAVA_1_3;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n \n-import org.apache.commons.lang3.SystemUtils;\n import org.junit.Test;\n \n /**\n         assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                 .createNumber(\"12345678901234567890L\"));\n \n-        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n-        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n-            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n+        assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                     .createNumber(\"1.1E-700F\"));\n-        }\n+\n         assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                 .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));\n         assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils", "timestamp": 1364399809, "metainfo": ""}