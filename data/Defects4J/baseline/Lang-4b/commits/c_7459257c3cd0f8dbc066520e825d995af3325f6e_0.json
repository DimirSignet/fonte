{"sha": "7459257c3cd0f8dbc066520e825d995af3325f6e", "log": "Add HashCodeUtils - a utility to build good hashCodes   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/HashCodeUtils.java\n+package org.apache.commons.lang;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+/**\n+ * <code>HashCode</code> generation routines.\n+ * <p>\n+ * This class enables a good hashcode to be built for any class. It follows\n+ * the rules laid out in the book Effective Java, by Joshua Bloch. Writing a \n+ * good hashCode is actually quite difficult. This class aims to simplify the \n+ * process.\n+ * <p>\n+ * All relevant fields from the object should be included in the hashCode. Derived\n+ * fields may be excluded. In general, any field used in the equals method must be\n+ * used in the hashCode method. \n+ * <p>\n+ * To use this class write code as follows:\n+ * <code>\n+ * public class Person {\n+ *   String name;\n+ *   int age;\n+ *   boolean isSmoker;\n+ * \n+ *   ...\n+ * \n+ *   public int hashCode() {\n+ *     int total = 17;  // you pick a random, non-zero, odd number\n+ *     total = HashCodeUtils.buildHashCode(total, name);\n+ *     total = HashCodeUtils.buildHashCode(total, age);\n+ *     total = HashCodeUtils.buildHashCode(total, isSmoker);\n+ *     return total;\n+ *   }\n+ * }\n+ * </code>\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: HashCodeUtils.java,v 1.1 2002/08/10 12:12:49 scolebourne Exp $\n+ */\n+public class HashCodeUtils {\n+    \n+    // According to Bloch, its a random odd prime\n+    private static final int CONSTANT = 37;\n+    \n+    /**\n+     * Prevent construction of HashCodeUtils instances\n+     */\n+    private HashCodeUtils() {\n+    }\n+\n+    /**\n+     * Build a hashCode for an Object.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param object  the object to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, Object object) {\n+        if (object == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            return totalSoFar * CONSTANT + object.hashCode();\n+        }\n+    }\n+\n+    /**\n+     * Build a hashCode for a long.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param value  the long to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, long value) {\n+        return totalSoFar * CONSTANT + ((int) (value ^ (value >> 32)));\n+    }\n+\n+    /**\n+     * Build a hashCode for an int.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param value  the int to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, int value) {\n+        return totalSoFar * CONSTANT + value;\n+    }\n+\n+    /**\n+     * Build a hashCode for a short.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param value  the short to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, short value) {\n+        return totalSoFar * CONSTANT + (int) value;\n+    }\n+\n+    /**\n+     * Build a hashCode for a char.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param value  the char to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, char value) {\n+        return totalSoFar * CONSTANT + (int) value;\n+    }\n+\n+    /**\n+     * Build a hashCode for a byte.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param value  the byte to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, byte value) {\n+        return totalSoFar * CONSTANT + (int) value;\n+    }\n+\n+    /**\n+     * Build a hashCode for a double.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param value  the double to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, double value) {\n+        return buildHashCode(totalSoFar, Double.doubleToLongBits(value));\n+    }\n+\n+    /**\n+     * Build a hashCode for a float.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param value  the float to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, float value) {\n+        return totalSoFar * CONSTANT + Float.floatToIntBits(value);\n+    }\n+\n+    /**\n+     * Build a hashCode for a long.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param value  the long to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, boolean value) {\n+        return totalSoFar * CONSTANT + (value ? 0 : 1);\n+    }\n+\n+    /**\n+     * Build a hashCode for an Object array.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param array  the array to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, Object[] array) {\n+        if (array == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                totalSoFar = buildHashCode(totalSoFar, array[i]);\n+            }\n+            return totalSoFar;\n+        }\n+    }\n+\n+    /**\n+     * Build a hashCode for a long array.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param array  the array to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, long[] array) {\n+        if (array == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                totalSoFar = buildHashCode(totalSoFar, array[i]);\n+            }\n+            return totalSoFar;\n+        }\n+    }\n+\n+    /**\n+     * Build a hashCode for an int array.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param array  the array to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, int[] array) {\n+        if (array == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                totalSoFar = buildHashCode(totalSoFar, array[i]);\n+            }\n+            return totalSoFar;\n+        }\n+    }\n+\n+    /**\n+     * Build a hashCode for a short array.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param array  the array to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, short[] array) {\n+        if (array == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                totalSoFar = buildHashCode(totalSoFar, array[i]);\n+            }\n+            return totalSoFar;\n+        }\n+    }\n+\n+    /**\n+     * Build a hashCode for a char array.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param array  the array to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, char[] array) {\n+        if (array == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                totalSoFar = buildHashCode(totalSoFar, array[i]);\n+            }\n+            return totalSoFar;\n+        }\n+    }\n+\n+    /**\n+     * Build a hashCode for a byte array.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param array  the array to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, byte[] array) {\n+        if (array == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                totalSoFar = buildHashCode(totalSoFar, array[i]);\n+            }\n+            return totalSoFar;\n+        }\n+    }\n+\n+    /**\n+     * Build a hashCode for a double array.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param array  the array to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, double[] array) {\n+        if (array == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                totalSoFar = buildHashCode(totalSoFar, array[i]);\n+            }\n+            return totalSoFar;\n+        }\n+    }\n+\n+    /**\n+     * Build a hashCode for a float array.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param array  the array to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, float[] array) {\n+        if (array == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                totalSoFar = buildHashCode(totalSoFar, array[i]);\n+            }\n+            return totalSoFar;\n+        }\n+    }\n+\n+    /**\n+     * Build a hashCode for a boolean array.\n+     *\n+     * @param totalSoFar  the hashCode total so far\n+     * @param array  the array to add to the hashCode\n+     * @return updated totalSoFar\n+     */\n+    public static int buildHashCode(int totalSoFar, boolean[] array) {\n+        if (array == null) {\n+            return totalSoFar * CONSTANT;\n+        } else {\n+            for (int i = 0; i < array.length; i++) {\n+                totalSoFar = buildHashCode(totalSoFar, array[i]);\n+            }\n+            return totalSoFar;\n+        }\n+    }\n+\n+}", "timestamp": 1028981569, "metainfo": ""}