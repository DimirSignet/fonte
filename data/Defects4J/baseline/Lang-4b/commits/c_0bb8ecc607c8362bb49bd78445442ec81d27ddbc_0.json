{"sha": "0bb8ecc607c8362bb49bd78445442ec81d27ddbc", "log": "[LANG-841] Add StringUtils API to call String.replaceAll in DOTALL a.k.a. single-line mode.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n     }\n \n     /**\n+     * Replaces each substring of the source String that matches the given regular expression with the given\n+     * replacement using the {@link Pattern#DOTALL} option. DOTALL is also know as single-line mode in Perl. This call\n+     * is also equivalent to:\n+     * <ul>\n+     * <li>{@code source.replaceAll(&quot;(?s)&quot; + regex, replacement)}</li>\n+     * <li>{@code Pattern.compile(regex, Pattern.DOTALL).matcher(source).replaceAll(replacement)}</li>\n+     * </ul>\n+     * \n+     * @param source\n+     *            the source string\n+     * @param regex\n+     *            the regular expression to which this string is to be matched\n+     * @param replacement\n+     *            the string to be substituted for each match\n+     * @return The resulting {@code String}\n+     * @see String#replaceAll(String, String)\n+     * @see Pattern#DOTALL\n+     * @since 3.2\n+     */\n+    public static String replacePattern(String source, String regex, String replacement) {\n+        return Pattern.compile(regex, Pattern.DOTALL).matcher(source).replaceAll(replacement);\n+    }\n+\n+    /**\n+     * Removes each substring of the source String that matches the given regular expression using the DOTALL option.\n+     * \n+     * @param source\n+     *            the source string\n+     * @param regex\n+     *            the regular expression to which this string is to be matched\n+     * @return The resulting {@code String}\n+     * @see String#replaceAll(String, String)\n+     * @see Pattern#DOTALL\n+     * @since 3.2\n+     */\n+    public static String removePattern(String source, String regex) {\n+        return replacePattern(source, regex, StringUtils.EMPTY);\n+    }\n+\n+    /**\n      * <p>Replaces all occurrences of a String within another String.</p>\n      *\n      * <p>A {@code null} reference passed to this method is a no-op.</p>\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n         assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\n         assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\n         assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n+    }\n+    \n+    @Test\n+    public void testReplacePattern() {\n+        assertEquals(\"X\", StringUtils.replacePattern(\"<A>\\nxy\\n</A>\", \"<A>.*</A>\", \"X\"));\n+    }\n+    \n+    @Test\n+    public void testRemovePattern() {\n+        assertEquals(\"\", StringUtils.removePattern(\"<A>x\\\\ny</A>\", \"<A>.*</A>\"));\n     }\n     \n     @Test", "timestamp": 1349820428, "metainfo": ""}