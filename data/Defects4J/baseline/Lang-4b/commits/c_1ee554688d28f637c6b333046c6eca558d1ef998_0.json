{"sha": "1ee554688d28f637c6b333046c6eca558d1ef998", "log": "[LANG-756] Add APIs ClassUtils.isPrimitiveWrapper(Class<?>) and isPrimitiveOrWrapper(Class<?>)  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n             }\n         }\n         return true;\n+    }\n+\n+    /**\n+     * Returns whether the given {@code type} is a primitive or primitive wrapper ({@link Boolean}, {@link Byte}, {@link Character},\n+     * {@link Short}, {@link Integer}, {@link Long}, {@link Double}, {@link Float}).\n+     * \n+     * @param type\n+     *            The class to query or null.\n+     * @return true if the given {@code type} is a primitive or primitive wrapper ({@link Boolean}, {@link Byte}, {@link Character},\n+     *         {@link Short}, {@link Integer}, {@link Long}, {@link Double}, {@link Float}).\n+     * @since 3.0.2\n+     */\n+    public static boolean isPrimitiveOrWrapper(Class<?> type) {\n+        if (type == null) {\n+            return false;\n+        }\n+        return type.isPrimitive() || isPrimitiveWrapper(type);\n+    }\n+\n+    /**\n+     * Returns whether the given {@code type} is a primitive wrapper ({@link Boolean}, {@link Byte}, {@link Character}, {@link Short},\n+     * {@link Integer}, {@link Long}, {@link Double}, {@link Float}).\n+     * \n+     * @param type\n+     *            The class to query or null.\n+     * @return true if the given {@code type} is a primitive wrapper ({@link Boolean}, {@link Byte}, {@link Character}, {@link Short},\n+     *         {@link Integer}, {@link Long}, {@link Double}, {@link Float}).\n+     * @since 3.0.2\n+     */\n+    public static boolean isPrimitiveWrapper(Class<?> type) {\n+        return wrapperPrimitiveMap.containsKey(type);\n     }\n \n     /**\n             }\n         }\n     }\n+\n }\n--- a/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java\n         assertTrue(\"boolean -> boolean\", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true));\n     }\n \n+    public void testIsPrimitiveOrWrapper() {\n+\n+        // test primitive wrapper classes\n+        assertTrue(\"Boolean.class\", ClassUtils.isPrimitiveOrWrapper(Boolean.class));\n+        assertTrue(\"Byte.class\", ClassUtils.isPrimitiveOrWrapper(Byte.class));\n+        assertTrue(\"Character.class\", ClassUtils.isPrimitiveOrWrapper(Character.class));\n+        assertTrue(\"Short.class\", ClassUtils.isPrimitiveOrWrapper(Short.class));\n+        assertTrue(\"Integer.class\", ClassUtils.isPrimitiveOrWrapper(Integer.class));\n+        assertTrue(\"Long.class\", ClassUtils.isPrimitiveOrWrapper(Long.class));\n+        assertTrue(\"Double.class\", ClassUtils.isPrimitiveOrWrapper(Double.class));\n+        assertTrue(\"Float.class\", ClassUtils.isPrimitiveOrWrapper(Float.class));\n+        \n+        // test primitive classes\n+        assertTrue(\"boolean\", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE));\n+        assertTrue(\"byte\", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE));\n+        assertTrue(\"char\", ClassUtils.isPrimitiveOrWrapper(Character.TYPE));\n+        assertTrue(\"short\", ClassUtils.isPrimitiveOrWrapper(Short.TYPE));\n+        assertTrue(\"int\", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE));\n+        assertTrue(\"long\", ClassUtils.isPrimitiveOrWrapper(Long.TYPE));\n+        assertTrue(\"double\", ClassUtils.isPrimitiveOrWrapper(Double.TYPE));\n+        assertTrue(\"float\", ClassUtils.isPrimitiveOrWrapper(Float.TYPE));\n+        assertTrue(\"Void.TYPE\", ClassUtils.isPrimitiveOrWrapper(Void.TYPE));\n+        \n+        // others\n+        assertFalse(\"null\", ClassUtils.isPrimitiveOrWrapper(null));\n+        assertFalse(\"Void.class\", ClassUtils.isPrimitiveOrWrapper(Void.class));\n+        assertFalse(\"String.class\", ClassUtils.isPrimitiveOrWrapper(String.class));\n+        assertFalse(\"this.getClass()\", ClassUtils.isPrimitiveOrWrapper(this.getClass()));\n+    }\n+    \n+    public void testIsPrimitiveWrapper() {\n+\n+        // test primitive wrapper classes\n+        assertTrue(\"Boolean.class\", ClassUtils.isPrimitiveWrapper(Boolean.class));\n+        assertTrue(\"Byte.class\", ClassUtils.isPrimitiveWrapper(Byte.class));\n+        assertTrue(\"Character.class\", ClassUtils.isPrimitiveWrapper(Character.class));\n+        assertTrue(\"Short.class\", ClassUtils.isPrimitiveWrapper(Short.class));\n+        assertTrue(\"Integer.class\", ClassUtils.isPrimitiveWrapper(Integer.class));\n+        assertTrue(\"Long.class\", ClassUtils.isPrimitiveWrapper(Long.class));\n+        assertTrue(\"Double.class\", ClassUtils.isPrimitiveWrapper(Double.class));\n+        assertTrue(\"Float.class\", ClassUtils.isPrimitiveWrapper(Float.class));\n+        \n+        // test primitive classes\n+        assertFalse(\"boolean\", ClassUtils.isPrimitiveWrapper(Boolean.TYPE));\n+        assertFalse(\"byte\", ClassUtils.isPrimitiveWrapper(Byte.TYPE));\n+        assertFalse(\"char\", ClassUtils.isPrimitiveWrapper(Character.TYPE));\n+        assertFalse(\"short\", ClassUtils.isPrimitiveWrapper(Short.TYPE));\n+        assertFalse(\"int\", ClassUtils.isPrimitiveWrapper(Integer.TYPE));\n+        assertFalse(\"long\", ClassUtils.isPrimitiveWrapper(Long.TYPE));\n+        assertFalse(\"double\", ClassUtils.isPrimitiveWrapper(Double.TYPE));\n+        assertFalse(\"float\", ClassUtils.isPrimitiveWrapper(Float.TYPE));\n+        \n+        // others\n+        assertFalse(\"null\", ClassUtils.isPrimitiveWrapper(null));\n+        assertFalse(\"Void.class\", ClassUtils.isPrimitiveWrapper(Void.class));\n+        assertFalse(\"Void.TYPE\", ClassUtils.isPrimitiveWrapper(Void.TYPE));\n+        assertFalse(\"String.class\", ClassUtils.isPrimitiveWrapper(String.class));\n+        assertFalse(\"this.getClass()\", ClassUtils.isPrimitiveWrapper(this.getClass()));\n+    }\n+    \n     public void testPrimitiveToWrapper() {\n \n         // test primitive classes", "timestamp": 1316738865, "metainfo": ""}