{"sha": "bbebb35b5f2aed08c0b174010d67d39c1f557dfd", "log": "trivial: remove trailing white spaces  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n \n     /**\n      * <p>Gets the class name minus the package name from a {@code Class}.</p>\n-     * \n-     * <p>Consider using the Java 5 API {@link Class#getSimpleName()} instead. \n-     * The one known difference is that this code will return {@code \"Map.Entry\"} while \n+     *\n+     * <p>Consider using the Java 5 API {@link Class#getSimpleName()} instead.\n+     * The one known difference is that this code will return {@code \"Map.Entry\"} while\n      * the {@code java.lang.Class} variant will simply return {@code \"Entry\"}. </p>\n      *\n      * @param cls  the class to get the short name for.\n      *\n      * <p>The string passed in is assumed to be a class name - it is not checked.</p>\n \n-     * <p>Note that this method differs from Class.getSimpleName() in that this will \n-     * return {@code \"Map.Entry\"} whilst the {@code java.lang.Class} variant will simply \n+     * <p>Note that this method differs from Class.getSimpleName() in that this will\n+     * return {@code \"Map.Entry\"} whilst the {@code java.lang.Class} variant will simply\n      * return {@code \"Entry\"}. </p>\n      *\n      * @param className  the className to get the short name for\n      * @return the class name of the class without the package name or an empty string\n      */\n-    public static String getShortClassName(String className) {   \n+    public static String getShortClassName(String className) {\n         if (StringUtils.isEmpty(className)) {\n             return StringUtils.EMPTY;\n         }\n     /**\n      * Returns whether the given {@code type} is a primitive or primitive wrapper ({@link Boolean}, {@link Byte}, {@link Character},\n      * {@link Short}, {@link Integer}, {@link Long}, {@link Double}, {@link Float}).\n-     * \n+     *\n      * @param type\n      *            The class to query or null.\n      * @return true if the given {@code type} is a primitive or primitive wrapper ({@link Boolean}, {@link Byte}, {@link Character},\n     /**\n      * Returns whether the given {@code type} is a primitive wrapper ({@link Boolean}, {@link Byte}, {@link Character}, {@link Short},\n      * {@link Integer}, {@link Long}, {@link Double}, {@link Float}).\n-     * \n+     *\n      * @param type\n      *            The class to query or null.\n      * @return true if the given {@code type} is a primitive wrapper ({@link Boolean}, {@link Byte}, {@link Character}, {@link Short},", "timestamp": 1363179023, "metainfo": ""}