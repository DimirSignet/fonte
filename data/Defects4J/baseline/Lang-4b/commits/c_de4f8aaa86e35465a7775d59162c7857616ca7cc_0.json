{"sha": "de4f8aaa86e35465a7775d59162c7857616ca7cc", "log": "Removing NumberUtils.compare(float,float) and NumberUtils.compare(double,double). These are now foud in Float and Double respectively. Keeping the unit tests, but pointing to the JDK methods as a regression. LANG-492  ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/CompareToBuilder.java\n         if (comparison != 0) {\n             return this;\n         }\n-        comparison = NumberUtils.compare(lhs, rhs);\n+        comparison = Double.compare(lhs, rhs);\n         return this;\n     }\n \n         if (comparison != 0) {\n             return this;\n         }\n-        comparison = NumberUtils.compare(lhs, rhs);\n+        comparison = Float.compare(lhs, rhs);\n         return this;\n     }\n \n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Compares two <code>doubles</code> for order.</p>\n-     *\n-     * <p>This method is more comprehensive than the standard Java greater\n-     * than, less than and equals operators.</p>\n-     * <ul>\n-     *  <li>It returns <code>-1</code> if the first value is less than the second.</li>\n-     *  <li>It returns <code>+1</code> if the first value is greater than the second.</li>\n-     *  <li>It returns <code>0</code> if the values are equal.</li>\n-     * </ul>\n-     *\n-     * <p>\n-     * The ordering is as follows, largest to smallest:\n-     * <ul>\n-     *  <li>NaN\n-     *  <li>Positive infinity\n-     *  <li>Maximum double\n-     *  <li>Normal positive numbers\n-     *  <li>+0.0\n-     *  <li>-0.0\n-     *  <li>Normal negative numbers\n-     *  <li>Minimum double (<code>-Double.MAX_VALUE</code>)\n-     *  <li>Negative infinity\n-     * </ul>\n-     * </p>\n-     *\n-     * <p>Comparing <code>NaN</code> with <code>NaN</code> will\n-     * return <code>0</code>.</p>\n-     * \n-     * @param lhs  the first <code>double</code>\n-     * @param rhs  the second <code>double</code>\n-     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n-     *  <code>0</code> if equal to rhs\n-     */\n-    public static int compare(double lhs, double rhs) {\n-        if (lhs < rhs) {\n-            return -1;\n-        }\n-        if (lhs > rhs) {\n-            return +1;\n-        }\n-        // Need to compare bits to handle 0.0 == -0.0 being true\n-        // compare should put -0.0 < +0.0\n-        // Two NaNs are also == for compare purposes\n-        // where NaN == NaN is false\n-        long lhsBits = Double.doubleToLongBits(lhs);\n-        long rhsBits = Double.doubleToLongBits(rhs);\n-        if (lhsBits == rhsBits) {\n-            return 0;\n-        }\n-        // Something exotic! A comparison to NaN or 0.0 vs -0.0\n-        // Fortunately NaN's long is > than everything else\n-        // Also negzeros bits < poszero\n-        // NAN: 9221120237041090560\n-        // MAX: 9218868437227405311\n-        // NEGZERO: -9223372036854775808\n-        if (lhsBits < rhsBits) {\n-            return -1;\n-        } else {\n-            return +1;\n-        }\n-    }\n-    \n-    /**\n-     * <p>Compares two floats for order.</p>\n-     *\n-     * <p>This method is more comprehensive than the standard Java greater than,\n-     * less than and equals operators.</p>\n-     * <ul>\n-     *  <li>It returns <code>-1</code> if the first value is less than the second.\n-     *  <li>It returns <code>+1</code> if the first value is greater than the second.\n-     *  <li>It returns <code>0</code> if the values are equal.\n-     * </ul>\n-     *\n-     * <p> The ordering is as follows, largest to smallest:\n-     * <ul>\n-     * <li>NaN\n-     * <li>Positive infinity\n-     * <li>Maximum float\n-     * <li>Normal positive numbers\n-     * <li>+0.0\n-     * <li>-0.0\n-     * <li>Normal negative numbers\n-     * <li>Minimum float (<code>-Float.MAX_VALUE</code>)\n-     * <li>Negative infinity\n-     * </ul>\n-     *\n-     * <p>Comparing <code>NaN</code> with <code>NaN</code> will return\n-     * <code>0</code>.</p>\n-     * \n-     * @param lhs  the first <code>float</code>\n-     * @param rhs  the second <code>float</code>\n-     * @return <code>-1</code> if lhs is less, <code>+1</code> if greater,\n-     *  <code>0</code> if equal to rhs\n-     */\n-    public static int compare(float lhs, float rhs) {\n-        if (lhs < rhs) {\n-            return -1;\n-        }\n-        if (lhs > rhs) {\n-            return +1;\n-        }\n-        //Need to compare bits to handle 0.0 == -0.0 being true\n-        // compare should put -0.0 < +0.0\n-        // Two NaNs are also == for compare purposes\n-        // where NaN == NaN is false\n-        int lhsBits = Float.floatToIntBits(lhs);\n-        int rhsBits = Float.floatToIntBits(rhs);\n-        if (lhsBits == rhsBits) {\n-            return 0;\n-        }\n-        //Something exotic! A comparison to NaN or 0.0 vs -0.0\n-        //Fortunately NaN's int is > than everything else\n-        //Also negzeros bits < poszero\n-        //NAN: 2143289344\n-        //MAX: 2139095039\n-        //NEGZERO: -2147483648\n-        if (lhsBits < rhsBits) {\n-            return -1;\n-        } else {\n-            return +1;\n-        }\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    /**\n      * <p>Checks whether the <code>String</code> contains only\n      * digit characters.</p>\n      *\n--- a/src/java/org/apache/commons/lang/math/Range.java\n+++ b/src/java/org/apache/commons/lang/math/Range.java\n      *  range by <code>double</code> comparison\n      */\n     public boolean containsDouble(double value) {\n-        int compareMin = NumberUtils.compare(getMinimumDouble(), value);\n-        int compareMax = NumberUtils.compare(getMaximumDouble(), value);\n+        int compareMin = Double.compare(getMinimumDouble(), value);\n+        int compareMax = Double.compare(getMaximumDouble(), value);\n         return compareMin <= 0 && compareMax >= 0;\n     }\n \n      *  range by <code>float</code> comparison\n      */\n     public boolean containsFloat(float value) {\n-        int compareMin = NumberUtils.compare(getMinimumFloat(), value);\n-        int compareMax = NumberUtils.compare(getMaximumFloat(), value);\n+        int compareMin = Float.compare(getMinimumFloat(), value);\n+        int compareMax = Float.compare(getMaximumFloat(), value);\n         return compareMin <= 0 && compareMax >= 0;\n     }\n \n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n     public int compareTo(Object obj) {\n         MutableDouble other = (MutableDouble) obj;\n         double anotherVal = other.value;\n-        return NumberUtils.compare(value, anotherVal);\n+        return Double.compare(value, anotherVal);\n     }\n \n     /**\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n     public int compareTo(Object obj) {\n         MutableFloat other = (MutableFloat) obj;\n         float anotherVal = other.value;\n-        return NumberUtils.compare(value, anotherVal);\n+        return Float.compare(value, anotherVal);\n     }\n \n     /**\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n         assertEquals(high, NumberUtils.max(high, mid, high), 0.0001f);\n     }\n \n+    // Testing JDK against old Lang functionality\n     public void testCompareDouble() {\n-        assertTrue(NumberUtils.compare(Double.NaN, Double.NaN) == 0);\n-        assertTrue(NumberUtils.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n-        assertTrue(NumberUtils.compare(Double.NaN, Double.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Double.NaN, 1.2d) == +1);\n-        assertTrue(NumberUtils.compare(Double.NaN, 0.0d) == +1);\n-        assertTrue(NumberUtils.compare(Double.NaN, -0.0d) == +1);\n-        assertTrue(NumberUtils.compare(Double.NaN, -1.2d) == +1);\n-        assertTrue(NumberUtils.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n-        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n-        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n-        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n-        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n-        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n-        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NaN) == -1);\n-        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n-        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 1.2d) == +1);\n-        assertTrue(NumberUtils.compare(Double.MAX_VALUE, 0.0d) == +1);\n-        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -0.0d) == +1);\n-        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -1.2d) == +1);\n-        assertTrue(NumberUtils.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(1.2d, Double.NaN) == -1);\n-        assertTrue(NumberUtils.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(1.2d, Double.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(1.2d, 1.2d) == 0);\n-        assertTrue(NumberUtils.compare(1.2d, 0.0d) == +1);\n-        assertTrue(NumberUtils.compare(1.2d, -0.0d) == +1);\n-        assertTrue(NumberUtils.compare(1.2d, -1.2d) == +1);\n-        assertTrue(NumberUtils.compare(1.2d, -Double.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(0.0d, Double.NaN) == -1);\n-        assertTrue(NumberUtils.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(0.0d, Double.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(0.0d, 1.2d) == -1);\n-        assertTrue(NumberUtils.compare(0.0d, 0.0d) == 0);\n-        assertTrue(NumberUtils.compare(0.0d, -0.0d) == +1);\n-        assertTrue(NumberUtils.compare(0.0d, -1.2d) == +1);\n-        assertTrue(NumberUtils.compare(0.0d, -Double.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(-0.0d, Double.NaN) == -1);\n-        assertTrue(NumberUtils.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(-0.0d, Double.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(-0.0d, 1.2d) == -1);\n-        assertTrue(NumberUtils.compare(-0.0d, 0.0d) == -1);\n-        assertTrue(NumberUtils.compare(-0.0d, -0.0d) == 0);\n-        assertTrue(NumberUtils.compare(-0.0d, -1.2d) == +1);\n-        assertTrue(NumberUtils.compare(-0.0d, -Double.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(-1.2d, Double.NaN) == -1);\n-        assertTrue(NumberUtils.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(-1.2d, Double.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(-1.2d, 1.2d) == -1);\n-        assertTrue(NumberUtils.compare(-1.2d, 0.0d) == -1);\n-        assertTrue(NumberUtils.compare(-1.2d, -0.0d) == -1);\n-        assertTrue(NumberUtils.compare(-1.2d, -1.2d) == 0);\n-        assertTrue(NumberUtils.compare(-1.2d, -Double.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n-        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 1.2d) == -1);\n-        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, 0.0d) == -1);\n-        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -0.0d) == -1);\n-        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -1.2d) == -1);\n-        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n-        assertTrue(NumberUtils.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n-        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n-        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n-        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n-        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n-        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n+        assertTrue(Double.compare(Double.NaN, Double.NaN) == 0);\n+        assertTrue(Double.compare(Double.NaN, Double.POSITIVE_INFINITY) == +1);\n+        assertTrue(Double.compare(Double.NaN, Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.NaN, 1.2d) == +1);\n+        assertTrue(Double.compare(Double.NaN, 0.0d) == +1);\n+        assertTrue(Double.compare(Double.NaN, -0.0d) == +1);\n+        assertTrue(Double.compare(Double.NaN, -1.2d) == +1);\n+        assertTrue(Double.compare(Double.NaN, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.NaN, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NaN) == -1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY) == 0);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 1.2d) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, 0.0d) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -0.0d) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -1.2d) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(Double.MAX_VALUE, Double.NaN) == -1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, Double.MAX_VALUE) == 0);\n+        assertTrue(Double.compare(Double.MAX_VALUE, 1.2d) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, 0.0d) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, -0.0d) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, -1.2d) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(1.2d, Double.NaN) == -1);\n+        assertTrue(Double.compare(1.2d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(1.2d, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(1.2d, 1.2d) == 0);\n+        assertTrue(Double.compare(1.2d, 0.0d) == +1);\n+        assertTrue(Double.compare(1.2d, -0.0d) == +1);\n+        assertTrue(Double.compare(1.2d, -1.2d) == +1);\n+        assertTrue(Double.compare(1.2d, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(1.2d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(0.0d, Double.NaN) == -1);\n+        assertTrue(Double.compare(0.0d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(0.0d, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(0.0d, 1.2d) == -1);\n+        assertTrue(Double.compare(0.0d, 0.0d) == 0);\n+        assertTrue(Double.compare(0.0d, -0.0d) == +1);\n+        assertTrue(Double.compare(0.0d, -1.2d) == +1);\n+        assertTrue(Double.compare(0.0d, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(0.0d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(-0.0d, Double.NaN) == -1);\n+        assertTrue(Double.compare(-0.0d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(-0.0d, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(-0.0d, 1.2d) == -1);\n+        assertTrue(Double.compare(-0.0d, 0.0d) == -1);\n+        assertTrue(Double.compare(-0.0d, -0.0d) == 0);\n+        assertTrue(Double.compare(-0.0d, -1.2d) == +1);\n+        assertTrue(Double.compare(-0.0d, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(-0.0d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(-1.2d, Double.NaN) == -1);\n+        assertTrue(Double.compare(-1.2d, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(-1.2d, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(-1.2d, 1.2d) == -1);\n+        assertTrue(Double.compare(-1.2d, 0.0d) == -1);\n+        assertTrue(Double.compare(-1.2d, -0.0d) == -1);\n+        assertTrue(Double.compare(-1.2d, -1.2d) == 0);\n+        assertTrue(Double.compare(-1.2d, -Double.MAX_VALUE) == +1);\n+        assertTrue(Double.compare(-1.2d, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NaN) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, 1.2d) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, 0.0d) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, -0.0d) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, -1.2d) == -1);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, -Double.MAX_VALUE) == 0);\n+        assertTrue(Double.compare(-Double.MAX_VALUE, Double.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NaN) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 1.2d) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, 0.0d) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -0.0d) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -1.2d) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, -Double.MAX_VALUE) == -1);\n+        assertTrue(Double.compare(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY) == 0);\n     }\n \n     public void testCompareFloat() {\n-        assertTrue(NumberUtils.compare(Float.NaN, Float.NaN) == 0);\n-        assertTrue(NumberUtils.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n-        assertTrue(NumberUtils.compare(Float.NaN, Float.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Float.NaN, 1.2f) == +1);\n-        assertTrue(NumberUtils.compare(Float.NaN, 0.0f) == +1);\n-        assertTrue(NumberUtils.compare(Float.NaN, -0.0f) == +1);\n-        assertTrue(NumberUtils.compare(Float.NaN, -1.2f) == +1);\n-        assertTrue(NumberUtils.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n-        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n-        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n-        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n-        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n-        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n-        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NaN) == -1);\n-        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n-        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 1.2f) == +1);\n-        assertTrue(NumberUtils.compare(Float.MAX_VALUE, 0.0f) == +1);\n-        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -0.0f) == +1);\n-        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -1.2f) == +1);\n-        assertTrue(NumberUtils.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(1.2f, Float.NaN) == -1);\n-        assertTrue(NumberUtils.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(1.2f, Float.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(1.2f, 1.2f) == 0);\n-        assertTrue(NumberUtils.compare(1.2f, 0.0f) == +1);\n-        assertTrue(NumberUtils.compare(1.2f, -0.0f) == +1);\n-        assertTrue(NumberUtils.compare(1.2f, -1.2f) == +1);\n-        assertTrue(NumberUtils.compare(1.2f, -Float.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(0.0f, Float.NaN) == -1);\n-        assertTrue(NumberUtils.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(0.0f, Float.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(0.0f, 1.2f) == -1);\n-        assertTrue(NumberUtils.compare(0.0f, 0.0f) == 0);\n-        assertTrue(NumberUtils.compare(0.0f, -0.0f) == +1);\n-        assertTrue(NumberUtils.compare(0.0f, -1.2f) == +1);\n-        assertTrue(NumberUtils.compare(0.0f, -Float.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(-0.0f, Float.NaN) == -1);\n-        assertTrue(NumberUtils.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(-0.0f, Float.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(-0.0f, 1.2f) == -1);\n-        assertTrue(NumberUtils.compare(-0.0f, 0.0f) == -1);\n-        assertTrue(NumberUtils.compare(-0.0f, -0.0f) == 0);\n-        assertTrue(NumberUtils.compare(-0.0f, -1.2f) == +1);\n-        assertTrue(NumberUtils.compare(-0.0f, -Float.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(-1.2f, Float.NaN) == -1);\n-        assertTrue(NumberUtils.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(-1.2f, Float.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(-1.2f, 1.2f) == -1);\n-        assertTrue(NumberUtils.compare(-1.2f, 0.0f) == -1);\n-        assertTrue(NumberUtils.compare(-1.2f, -0.0f) == -1);\n-        assertTrue(NumberUtils.compare(-1.2f, -1.2f) == 0);\n-        assertTrue(NumberUtils.compare(-1.2f, -Float.MAX_VALUE) == +1);\n-        assertTrue(NumberUtils.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n-        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 1.2f) == -1);\n-        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, 0.0f) == -1);\n-        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -0.0f) == -1);\n-        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -1.2f) == -1);\n-        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n-        assertTrue(NumberUtils.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n-        \n-        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n-        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n-        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n-        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n-        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n-        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n-        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n-        assertTrue(NumberUtils.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n+        assertTrue(Float.compare(Float.NaN, Float.NaN) == 0);\n+        assertTrue(Float.compare(Float.NaN, Float.POSITIVE_INFINITY) == +1);\n+        assertTrue(Float.compare(Float.NaN, Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.NaN, 1.2f) == +1);\n+        assertTrue(Float.compare(Float.NaN, 0.0f) == +1);\n+        assertTrue(Float.compare(Float.NaN, -0.0f) == +1);\n+        assertTrue(Float.compare(Float.NaN, -1.2f) == +1);\n+        assertTrue(Float.compare(Float.NaN, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.NaN, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NaN) == -1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.POSITIVE_INFINITY) == 0);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 1.2f) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, 0.0f) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -0.0f) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -1.2f) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.POSITIVE_INFINITY, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(Float.MAX_VALUE, Float.NaN) == -1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, Float.MAX_VALUE) == 0);\n+        assertTrue(Float.compare(Float.MAX_VALUE, 1.2f) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, 0.0f) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, -0.0f) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, -1.2f) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(1.2f, Float.NaN) == -1);\n+        assertTrue(Float.compare(1.2f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(1.2f, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(1.2f, 1.2f) == 0);\n+        assertTrue(Float.compare(1.2f, 0.0f) == +1);\n+        assertTrue(Float.compare(1.2f, -0.0f) == +1);\n+        assertTrue(Float.compare(1.2f, -1.2f) == +1);\n+        assertTrue(Float.compare(1.2f, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(1.2f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(0.0f, Float.NaN) == -1);\n+        assertTrue(Float.compare(0.0f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(0.0f, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(0.0f, 1.2f) == -1);\n+        assertTrue(Float.compare(0.0f, 0.0f) == 0);\n+        assertTrue(Float.compare(0.0f, -0.0f) == +1);\n+        assertTrue(Float.compare(0.0f, -1.2f) == +1);\n+        assertTrue(Float.compare(0.0f, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(0.0f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(-0.0f, Float.NaN) == -1);\n+        assertTrue(Float.compare(-0.0f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(-0.0f, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(-0.0f, 1.2f) == -1);\n+        assertTrue(Float.compare(-0.0f, 0.0f) == -1);\n+        assertTrue(Float.compare(-0.0f, -0.0f) == 0);\n+        assertTrue(Float.compare(-0.0f, -1.2f) == +1);\n+        assertTrue(Float.compare(-0.0f, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(-0.0f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(-1.2f, Float.NaN) == -1);\n+        assertTrue(Float.compare(-1.2f, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(-1.2f, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(-1.2f, 1.2f) == -1);\n+        assertTrue(Float.compare(-1.2f, 0.0f) == -1);\n+        assertTrue(Float.compare(-1.2f, -0.0f) == -1);\n+        assertTrue(Float.compare(-1.2f, -1.2f) == 0);\n+        assertTrue(Float.compare(-1.2f, -Float.MAX_VALUE) == +1);\n+        assertTrue(Float.compare(-1.2f, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NaN) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, 1.2f) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, 0.0f) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, -0.0f) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, -1.2f) == -1);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, -Float.MAX_VALUE) == 0);\n+        assertTrue(Float.compare(-Float.MAX_VALUE, Float.NEGATIVE_INFINITY) == +1);\n+        \n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NaN) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.POSITIVE_INFINITY) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 1.2f) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, 0.0f) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -0.0f) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -1.2f) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, -Float.MAX_VALUE) == -1);\n+        assertTrue(Float.compare(Float.NEGATIVE_INFINITY, Float.NEGATIVE_INFINITY) == 0);\n     }\n \n     public void testIsDigits() {", "timestamp": 1241071396, "metainfo": ""}