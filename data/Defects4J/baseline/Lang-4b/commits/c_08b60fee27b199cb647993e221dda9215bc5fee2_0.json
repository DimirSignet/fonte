{"sha": "08b60fee27b199cb647993e221dda9215bc5fee2", "log": "created   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/exception/NestableErrorTestCase.java\n+package org.apache.commons.lang.exception;\n+\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Tests the org.apache.commons.lang.exception.NestableError class.\n+ *\n+ * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n+ * @version $Id: NestableErrorTestCase.java,v 1.1 2002/09/11 18:17:23 stevencaswell Exp $\n+ */\n+public class NestableErrorTestCase extends AbstractNestableTestCase\n+{\n+    \n+    /**\n+     * Construct a new instance of\n+     * <code>NestableErrorTestCase</code>.\n+     *\n+     * @param name test case name\n+     */\n+    public NestableErrorTestCase(String name)\n+    {\n+        super(name);\n+    }\n+\n+    /**\n+     * Sets up instance variables required by this test case.\n+     */\n+    public void setUp()\n+    {\n+    }\n+\n+    /**\n+     * Returns the test suite\n+     *\n+     * @return the test suite\n+     */\n+    public static Test suite()\n+    {\n+        return new TestSuite(ANestableExceptionTestCase.class);\n+    }\n+    \n+    /**\n+     * Tears down instance variables required by this test case.\n+     */\n+    public void tearDown()\n+    {\n+    }\n+\n+    /**\n+     * Command line entry point for running the test suite.\n+     */\n+    public static void main(String args[])\n+    {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * @see AbstractNestableTestCase#getNestable()\n+     */\n+    public Nestable getNestable()\n+    {\n+        return new NestableError();\n+    }    \n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(Nestable)\n+     */\n+    public Nestable getNestable(Nestable n)\n+    {\n+        return new NestableError((Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String)\n+     */\n+    public Nestable getNestable(String msg)\n+    {\n+        return new NestableError(msg);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(Throwable)\n+     */\n+    public Nestable getNestable(Throwable t)\n+    {\n+        return new NestableError(t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String, Throwable)\n+     */\n+    public Nestable getNestable(String msg, Throwable t)\n+    {\n+        return new NestableError(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getNestable(String, Nestable)\n+     */\n+    public Nestable getNestable(String msg, Nestable n)\n+    {\n+        return new NestableError(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(Throwable)\n+     */\n+    public Nestable getTester1(Throwable t)\n+    {\n+        return new NestableErrorTester1(t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(Nestable)\n+     */\n+    public Nestable getTester1(Nestable n)\n+    {\n+        return new NestableErrorTester1((Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(String, Throwable)\n+     */\n+    public Nestable getTester1(String msg, Throwable t)\n+    {\n+        return new NestableErrorTester1(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1(String, Nestable)\n+     */\n+    public Nestable getTester1(String msg, Nestable n)\n+    {\n+        return new NestableErrorTester1(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester1Class()\n+     */\n+    public Class getTester1Class()\n+    {\n+        return NestableErrorTester1.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2(String, Throwable)\n+     */\n+    public Nestable getTester2(String msg, Throwable t)\n+    {\n+        return new NestableErrorTester2(msg, t);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2(String, Nestable)\n+     */\n+    public Nestable getTester2(String msg, Nestable n)\n+    {\n+        return new NestableErrorTester2(msg, (Throwable) n);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getTester2Class()\n+     */\n+    public Class getTester2Class()\n+    {\n+        return NestableErrorTester2.class;\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getThrowable(String)\n+     */\n+    public Throwable getThrowable(String msg)\n+    {\n+        return new Error(msg);\n+    }\n+    \n+    /**\n+     * @see AbstractNestableTestCase#getThrowableClass()\n+     */\n+    public Class getThrowableClass()\n+    {\n+        return Error.class;\n+    }\n+    \n+}\n+\n+class NestableErrorTester1 extends NestableError\n+{\n+    public NestableErrorTester1()\n+    {\n+        super();\n+    }\n+\n+    public NestableErrorTester1(String reason, Throwable cause)\n+    {\n+        super(reason, cause);\n+    }\n+    \n+    public NestableErrorTester1(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableErrorTester1(Throwable cause)\n+    {\n+        super(cause);\n+    }\n+    \n+}\n+\n+class NestableErrorTester2 extends NestableError\n+{\n+    public NestableErrorTester2()\n+    {\n+        super();\n+    }\n+    \n+    public NestableErrorTester2(String reason, Throwable cause)\n+    {\n+        super(reason, cause);\n+    }\n+    \n+    public NestableErrorTester2(String reason)\n+    {\n+        super(reason);\n+    }\n+    \n+    public NestableErrorTester2(Throwable cause)\n+    {\n+        super(cause);\n+    }\n+    \n+}", "timestamp": 1031768243, "metainfo": ""}