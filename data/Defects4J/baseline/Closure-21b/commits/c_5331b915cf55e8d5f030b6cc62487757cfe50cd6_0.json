{"sha": "5331b915cf55e8d5f030b6cc62487757cfe50cd6", "log": "Add public setters for CompilerOptions that should be private  R=acleung DELTA=72  (59 added, 0 deleted, 13 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2757   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n  * @author nicksantos@google.com (Nick Santos)\n  */\n public class CompilerOptions implements Serializable, Cloneable {\n+  // TODO(nicksantos): All public properties of this class should be made\n+  // package-private, and have a public setter.\n+\n   private static final long serialVersionUID = 7L;\n \n   /**\n   /** Checks that all symbols are defined */\n   public boolean checkSymbols;\n \n+  public CheckLevel checkShadowVars;\n+\n   /**\n    * Checks that all variables with the @noshadow attribute are\n    * never shadowed.\n    */\n-  public CheckLevel checkShadowVars;\n+  public void setCheckShadowVars(CheckLevel level) {\n+    this.checkShadowVars = level;\n+  }\n+\n+  public CheckLevel aggressiveVarCheck;\n \n   /** Checks for suspicious variable definitions and undefined variables */\n-  public CheckLevel aggressiveVarCheck;\n+  public void setAggressiveVarCheck(CheckLevel level) {\n+    this.aggressiveVarCheck = level;\n+  }\n+\n+  public CheckLevel checkFunctions;\n \n   /** Checks function arity */\n-  public CheckLevel checkFunctions;\n+  public void setCheckFunctions(CheckLevel level) {\n+    this.checkFunctions = level;\n+  }\n+\n+  public CheckLevel checkMethods;\n \n   /** Checks method arity */\n-  public CheckLevel checkMethods;\n+  public void setCheckMethods(CheckLevel level) {\n+    this.checkMethods = level;\n+  }\n \n   /** Makes sure no duplicate messages */\n   public boolean checkDuplicateMessages;\n   /** Checks for inexistant property calls */\n   public boolean checkTypedPropertyCalls;\n \n+  public CheckLevel reportMissingOverride;\n+\n   /**\n    * Flags a warning if a property is missing the @override annotation, but it\n    * overrides a base class property.\n    */\n-  public CheckLevel reportMissingOverride;\n+  public void setReportMissingOverride(CheckLevel level) {\n+    this.reportMissingOverride = level;\n+  }\n+\n+  public CheckLevel reportUnknownTypes;\n \n   /** Flags a warning for every node whose type could not be determined. */\n-  public CheckLevel reportUnknownTypes;\n+  public void setReportUnknownTypes(CheckLevel level) {\n+    this.reportUnknownTypes = level;\n+  }\n \n   /** Checks for missing goog.require() calls **/\n   public CheckLevel checkRequires;\n \n+  public void setCheckRequires(CheckLevel level) {\n+    this.checkRequires = level;\n+  }\n+\n+  public CheckLevel checkProvides;\n+\n   /** Checks for missing goog.provides() calls **/\n-  public CheckLevel checkProvides;\n+  public void setCheckProvides(CheckLevel level) {\n+    this.checkProvides = level;\n+  }\n+\n+  public CheckLevel checkGlobalNamesLevel;\n \n   /**\n    * Checks the integrity of references to qualified global names.\n    * (e.g. \"a.b\")\n    */\n-  public CheckLevel checkGlobalNamesLevel;\n+  public void setCheckGlobalNamesLevel(CheckLevel level) {\n+    this.checkGlobalNamesLevel = level;\n+  }\n+\n+  public CheckLevel brokenClosureRequiresLevel;\n \n   /** Sets the check level for bad Closure require calls. */\n-  public CheckLevel brokenClosureRequiresLevel;\n+  public void setBrokenClosureRequiresLevel(CheckLevel level) {\n+    this.brokenClosureRequiresLevel = level;\n+  }\n+\n+  public CheckLevel checkGlobalThisLevel;\n \n   /**\n    * Checks for certain uses of the {@code this} keyword that are considered\n    * If this is off, but collapseProperties is on, then the compiler will\n    * usually ignore you and run this check anyways.\n    */\n-  public CheckLevel checkGlobalThisLevel;\n+  public void setCheckGlobalThisLevel(CheckLevel level) {\n+    this.checkGlobalThisLevel = level;\n+  }\n+\n+  public CheckLevel checkMissingGetCssNameLevel;\n \n   /**\n    * Checks that certain string literals only appear in strings used as\n    * goog.getCssName arguments.\n    */\n-  public CheckLevel checkMissingGetCssNameLevel;\n+  public void setCheckMissingGetCssNameLevel(CheckLevel level) {\n+    this.checkMissingGetCssNameLevel = level;\n+  }\n \n   /**\n    * Regex of string literals that may only appear in goog.getCssName arguments.\n   /** Removes code that will never execute */\n   public boolean removeDeadCode;\n \n+  public CheckLevel checkUnreachableCode;\n+\n   /** Checks for unreachable code */\n-  public CheckLevel checkUnreachableCode;\n+  public void setCheckUnreachableCode(CheckLevel level) {\n+    this.checkUnreachableCode = level;\n+  }\n+\n+  public CheckLevel checkMissingReturn;\n \n   /** Checks for missing return statements */\n-  public CheckLevel checkMissingReturn;\n+  public void setCheckMissingReturn(CheckLevel level) {\n+    this.checkMissingReturn = level;\n+  }\n \n   /** Extracts common prototype member declarations */\n   public boolean extractPrototypeMemberDeclarations;", "timestamp": 1311630584, "metainfo": ""}