{"sha": "d366b6e3e5ef9f0f23f64154f19908e3e0d123f5", "log": "print optionality of arguments.   R=tylerg DELTA=54  (22 added, 7 deleted, 25 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4076   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/FunctionType.java\n+++ b/src/com/google/javascript/rhino/jstype/FunctionType.java\n         b.append(\", \");\n       }\n       Node p = call.parameters.getFirstChild();\n-      if (p.isVarArgs()) {\n-        appendVarArgsString(b, p.getJSType());\n-      } else {\n-        b.append(p.getJSType().toString());\n-      }\n+      appendArgString(b, p);\n+\n       p = p.getNext();\n       while (p != null) {\n         b.append(\", \");\n-        if (p.isVarArgs()) {\n-          appendVarArgsString(b, p.getJSType());\n-        } else {\n-          b.append(p.getJSType().toString());\n-        }\n+        appendArgString(b, p);\n         p = p.getNext();\n       }\n     }\n \n     setPrettyPrint(true);\n     return b.toString();\n+  }\n+\n+  private void appendArgString(StringBuilder b, Node p) {\n+    if (p.isVarArgs()) {\n+      appendVarArgsString(b, p.getJSType());\n+    } else if (p.isOptionalArg()) {\n+      appendOptionalArgString(b, p.getJSType());\n+    } else {\n+      b.append(p.getJSType().toString());\n+    }\n   }\n \n   /** Gets the string representation of a var args param. */\n           registry.getNativeType(JSTypeNative.VOID_TYPE));\n     }\n     builder.append(\"...[\").append(paramType.toString()).append(\"]\");\n+  }\n+\n+  /** Gets the string representation of an optional param. */\n+  private void appendOptionalArgString(\n+      StringBuilder builder, JSType paramType) {\n+    if (paramType.isUnionType()) {\n+      // Remove the optionalness from the var arg.\n+      paramType = paramType.toMaybeUnionType().getRestrictedUnion(\n+          registry.getNativeType(JSTypeNative.VOID_TYPE));\n+    }\n+    builder.append(paramType).append(\"=\");\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionTypeBuilderTest.java\n         + \"function String(opt_str) {}\\n\",\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n-        + \"found   : function (new:String, *): number\\n\"\n+        + \"found   : function (new:String, *=): number\\n\"\n         + \"expected: function (new:String, *): string\");\n   }\n \n         + \"function String(opt_str, opt_nothing) {}\\n\",\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n-        + \"found   : function (new:String, ?, ?): string\\n\"\n+        + \"found   : function (new:String, ?=, ?=): string\\n\"\n         + \"expected: function (new:String, *): string\");\n   }\n \n         + \"function String(opt_str) {}\\n\",\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type String\\n\"\n-        + \"found   : function (new:String, ?): string\\n\"\n+        + \"found   : function (new:String, ?=): string\\n\"\n         + \"expected: function (new:String, *): string\");\n   }\n \n         \"/** @constructor */function Function(opt_str) {}\\n\",\n         \"\", FunctionTypeBuilder.TYPE_REDEFINITION,\n         \"attempted re-definition of type Function\\n\"\n-        + \"found   : function (new:Function, ?): ?\\n\"\n+        + \"found   : function (new:Function, ?=): ?\\n\"\n         + \"expected: function (new:Function, ...[*]): ?\");\n   }\n \n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n     testFunctionType(\n         \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function f(opt_a) {}\",\n-        \"function ((number|undefined)): string\");\n+        \"function (number=): string\");\n   }\n \n   public void testFunctionArguments3() throws Exception {\n     testFunctionType(\n         \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function f(a,opt_a) {}\",\n-        \"function (?, (number|undefined)): string\");\n+        \"function (?, number=): string\");\n   }\n \n   public void testFunctionArguments5() throws Exception {\n   public void testFunctionInference6() throws Exception {\n     testFunctionType(\n         \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n-        \"function (this:Date, ?): string\");\n+        \"function (this:Date, ?=): string\");\n   }\n \n   public void testFunctionInference7() throws Exception {\n   public void testIn4() throws Exception {\n     testTypes(\"Date in Object\",\n         \"left side of 'in'\\n\" +\n-        \"found   : function (new:Date, ?, ?, ?, ?, ?, ?, ?): string\\n\" +\n+        \"found   : function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string\\n\" +\n         \"required: string\");\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n     testFunctionType(\n         \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function f(opt_a) {}\",\n-        \"function ((number|undefined)): string\");\n+        \"function (number=): string\");\n   }\n \n   public void testFunctionArguments3() throws Exception {\n     testFunctionType(\n         \"/** @param {number} opt_a\\n@return {string} */\" +\n         \"function f(a,opt_a) {}\",\n-        \"function (?, (number|undefined)): string\");\n+        \"function (?, number=): string\");\n   }\n \n   public void testFunctionArguments5() throws Exception {\n   public void testFunctionInference6() throws Exception {\n     testFunctionType(\n         \"/** @this Date\\n@return {string} */function f(opt_a) {}\",\n-        \"function (this:Date, ?): string\");\n+        \"function (this:Date, ?=): string\");\n   }\n \n   public void testFunctionInference7() throws Exception {\n   public void testIn4() throws Exception {\n     testTypes(\"Date in Object\",\n         \"left side of 'in'\\n\" +\n-        \"found   : function (new:Date, ?, ?, ?, ?, ?, ?, ?): string\\n\" +\n+        \"found   : function (new:Date, ?=, ?=, ?=, ?=, ?=, ?=, ?=): string\\n\" +\n         \"required: string\");\n   }\n \n         \"/** @param {number} x */ function f(x) {}\" +\n         \"f(this.Object);\",\n         \"actual parameter 1 of f does not match formal parameter\\n\" +\n-        \"found   : function (new:Object, *): ?\\n\" +\n+        \"found   : function (new:Object, *=): ?\\n\" +\n         \"required: number\");\n   }\n \n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n     // The type of apply() on a function instance is resolved dynamically,\n     // since apply varies with the type of the function it's called on.\n     assertEquals(\n-        \"function ((Object|null|undefined), (Object|null|undefined)): ?\",\n+        \"function ((Object|null)=, (Object|null)=): ?\",\n         f.getPropertyType(\"apply\").toString());\n \n     // The type of apply() on the function prototype just takes what it was\n \n     Var v = globalScope.getVar(\"Object\");\n     FunctionType obj = (FunctionType) v.getType();\n-    assertEquals(\"function (new:Object, *): ?\", obj.toString());\n+    assertEquals(\"function (new:Object, *=): ?\", obj.toString());\n     assertNotNull(v.getNode());\n     assertNotNull(v.input);\n   }\n--- a/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/FunctionTypeTest.java\n         .withReturnType(BOOLEAN_TYPE).build();\n \n     assertEquals(\n-        \"function ((Date|null|undefined), string, number):\" +\n+        \"function ((Date|null|undefined), string=, number=):\" +\n         \" function (...[?]): boolean\",\n         fn.getPropertyType(\"bind\").toString());\n   }", "timestamp": 1326410465, "metainfo": ""}