{"sha": "51aa75f20bd176f1b358f250043fff44ac1feba8", "log": "When sorting sources, make sure we properly handle degenerate cases around deps files and 1-file compiles.  R=acleung DELTA=68  (53 added, 2 deleted, 13 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4569   ", "commit": "\n--- a/src/com/google/javascript/jscomp/JSModuleGraph.java\n+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java\n \n       for (String entryPoint : depOptions.getEntryPoints()) {\n         entryPointInputs.add(sorter.getInputProviding(entryPoint));\n+      }\n+\n+      CompilerInput baseJs = sorter.maybeGetInputProviding(\"goog\");\n+      if (baseJs != null) {\n+        entryPointInputs.add(baseJs);\n       }\n     } else {\n       entryPointInputs.addAll(inputs);\n--- a/src/com/google/javascript/jscomp/deps/JsFileParser.java\n+++ b/src/com/google/javascript/jscomp/deps/JsFileParser.java\n \n   /** Pattern for matching goog.provide(*) and goog.require(*). */\n   private static final Pattern GOOG_PROVIDE_REQUIRE_PATTERN = Pattern.compile(\n-      \"(?:^|;)\\\\s*goog\\\\.(provide|require)\\\\s*\\\\((.*?)\\\\)\");\n+      \"(?:^|;)\\\\s*goog\\\\.(provide|require|addDependency)\\\\s*\\\\((.*?)\\\\)\");\n \n   /** The first non-comment line of base.js */\n   private static final String BASE_JS_START = \"var COMPILED = false;\";\n     // Quick sanity check that will catch most cases. This is a performance\n     // win for people with a lot of JS.\n     if (line.indexOf(\"provide\") != -1 ||\n-        line.indexOf(\"require\") != -1) {\n+        line.indexOf(\"require\") != -1 ||\n+        line.indexOf(\"addDependency\") != -1) {\n       // Iterate over the provides/requires.\n       googMatcher.reset(line);\n       while (googMatcher.find()) {\n         }\n \n         // See if it's a require or provide.\n-        boolean isRequire = googMatcher.group(1).charAt(0) == 'r';\n-        // Parse the param.\n-        String arg = parseJsString(googMatcher.group(2));\n+        char firstChar = googMatcher.group(1).charAt(0);\n+        boolean isProvide = firstChar == 'p';\n+        boolean isRequire = firstChar == 'r';\n \n-        // Add the dependency.\n-        if (isRequire) {\n-          // goog is always implicit.\n-          // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n-          // Remove this later.\n-          if (!\"goog\".equals(arg)) {\n-            requires.add(arg);\n+        if (isProvide || isRequire) {\n+          // Parse the param.\n+          String arg = parseJsString(googMatcher.group(2));\n+\n+          // Add the dependency.\n+          if (isRequire) {\n+            // goog is always implicit.\n+            // TODO(nicksantos): I'm pretty sure we don't need this anymore.\n+            // Remove this later.\n+            if (!\"goog\".equals(arg)) {\n+              requires.add(arg);\n+            }\n+          } else {\n+            provides.add(arg);\n           }\n-        } else {\n-          provides.add(arg);\n         }\n       }\n     } else if (includeGoogBase && line.startsWith(BASE_JS_START) &&\n--- a/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n+++ b/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n       return provideMap.get(symbol);\n     }\n     throw new MissingProvideException(symbol);\n+  }\n+\n+  /**\n+   * Return the input that gives us the given symbol, or null.\n+   */\n+  public INPUT maybeGetInputProviding(String symbol)\n+      throws MissingProvideException {\n+    return provideMap.get(symbol);\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n          });\n   }\n \n+  public void testSourceSortingOn3() {\n+    args.add(\"--manage_closure_dependencies=true\");\n+    test(new String[] {\n+          \"goog.addDependency('sym', [], []);\\nvar x = 3;\",\n+          \"var COMPILED = false;\",\n+         },\n+         new String[] {\n+          \"var COMPILED = !1;\",\n+          \"var x = 3;\"\n+         });\n+  }\n+\n   public void testSourceSortingCircularDeps1() {\n     args.add(\"--manage_closure_dependencies=true\");\n     test(new String[] {\n            \"var beer = {};\",\n            \"\",\n            \"var scotch = {}, x = 3;\",\n+         });\n+  }\n+\n+  public void testSourcePruningOn7() {\n+    args.add(\"--manage_closure_dependencies=true\");\n+    test(new String[] {\n+          \"var COMPILED = false;\",\n+         },\n+         new String[] {\n+          \"var COMPILED = !1;\",\n          });\n   }\n \n           \"goog.provide('beer');\\ngoog.require('hops');\\nvar beerProvided = 1;\",\n           \"goog.provide('hops'); var hopsProvided = 1;\",\n           \"goog.provide('scotch'); var scotchProvided = 1;\",\n-          \"var includeFileWithoutProvides = 1;\",\n+          \"goog.require('scotch');\\nvar includeFileWithoutProvides = 1;\",\n           \"/** This is base.js */\\nvar COMPILED = false;\",\n          },\n          new String[] {\n--- a/test/com/google/javascript/jscomp/deps/JsFileParserTest.java\n+++ b/test/com/google/javascript/jscomp/deps/JsFileParserTest.java\n     assertDeps(expected, result);\n   }\n \n+  public void testIncludeGoog4() {\n+    String contents = \"goog.addDependency('foo', [], []);\\n\";\n+\n+    DependencyInfo expected = new SimpleDependencyInfo(CLOSURE_PATH, SRC_PATH,\n+        ImmutableList.<String>of(), ImmutableList.of(\"goog\"));\n+    DependencyInfo result = parser.setIncludeGoogBase(true).parseFile(\n+        SRC_PATH, CLOSURE_PATH, contents);\n+    assertDeps(expected, result);\n+  }\n+\n   /** Asserts the deps match without errors */\n   private void assertDeps(DependencyInfo expected, DependencyInfo actual) {\n     assertEquals(expected, actual);", "timestamp": 1334853318, "metainfo": ""}