{"sha": "4e3493aab403c46d316bd317ebbaa469ec77ae10", "log": "Handle another case of an incomplete function definition in ide-mode.  R=fabbott DELTA=38  (35 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4378   ", "commit": "\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n \n       lp.setCharno(position2charno(lparenCharno));\n       for (AstNode param : functionNode.getParams()) {\n-        lp.addChildToBack(transform(param));\n+        Node paramNode = transform(param);\n+        // When in ideMode Rhino can generate a param list with only a single\n+        // ErrorNode. This is transformed into an EMPTY node. Drop this node in\n+        // ideMode to keep the AST in a valid state.\n+        if (paramNode.isName()) {\n+          lp.addChildToBack(paramNode);\n+        } else {\n+          // We expect this in ideMode or when there is an error handling\n+          // destructuring parameter assignments which aren't supported\n+          // (an error has already been reported).\n+          Preconditions.checkState(\n+              config.isIdeMode\n+              || paramNode.isObjectLit()\n+              || paramNode.isArrayLit());\n+        }\n       }\n       node.addChildToBack(lp);\n \n--- a/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n+++ b/test/com/google/javascript/jscomp/CommandLineRunnerTest.java\n   //////////////////////////////////////////////////////////////////////////////\n   // Integration tests\n \n-  public void testIssue70() {\n+  public void testIssue70a() {\n     test(\"function foo({}) {}\", RhinoErrorReporter.PARSE_ERROR);\n+  }\n+\n+  public void testIssue70b() {\n+    test(\"function foo([]) {}\", RhinoErrorReporter.PARSE_ERROR);\n   }\n \n   public void testIssue81() {\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n         \"\");\n   }\n \n-  public void testIncompleteFunction() {\n+  public void testIncompleteFunction1() {\n     CompilerOptions options = createCompilerOptions();\n     options.ideMode = true;\n     DiagnosticType[] warnings = new DiagnosticType[]{\n     test(options,\n         new String[] { \"var foo = {bar: function(e) }\" },\n         new String[] { \"var foo = {bar: function(e){}};\" },\n+        warnings\n+    );\n+  }\n+\n+  public void testIncompleteFunction2() {\n+    CompilerOptions options = createCompilerOptions();\n+    options.ideMode = true;\n+    DiagnosticType[] warnings = new DiagnosticType[]{\n+        RhinoErrorReporter.PARSE_ERROR,\n+        RhinoErrorReporter.PARSE_ERROR,\n+        RhinoErrorReporter.PARSE_ERROR,\n+        RhinoErrorReporter.PARSE_ERROR,\n+        RhinoErrorReporter.PARSE_ERROR,\n+        RhinoErrorReporter.PARSE_ERROR};\n+    test(options,\n+        new String[] { \"function hi\" },\n+        new String[] { \"function hi() {}\" },\n         warnings\n     );\n   }", "timestamp": 1331855281, "metainfo": ""}