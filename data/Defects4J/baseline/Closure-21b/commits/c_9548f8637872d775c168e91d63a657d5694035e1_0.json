{"sha": "9548f8637872d775c168e91d63a657d5694035e1", "log": "Fix folding of String-to-undefined comparisons  R=acleung DELTA=125  (69 added, 49 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=18   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n         } else if (!rightLiteral) {\n           return n;\n         } else {\n-          boolean nullRight = (Token.NULL == right.getType());\n-          boolean equivalent = undefinedRight || nullRight;\n-          switch (op) {\n-            case Token.EQ:\n-              // undefined is only equal to\n-              result = equivalent;\n-              break;\n-            case Token.NE:\n-              result = !equivalent;\n-              break;\n-            case Token.SHEQ:\n-              result = undefinedRight;\n-              break;\n-            case Token.SHNE:\n-              result = !undefinedRight;\n-              break;\n-            case Token.LT:\n-            case Token.GT:\n-            case Token.LE:\n-            case Token.GE:\n-              result = false;\n-              break;\n-            default:\n-              return n;\n-          }\n+          result = compareToUndefined(right, op);\n         }\n         break;\n \n       case Token.NULL:\n         if (undefinedRight) {\n-          result = (op == Token.EQ);\n+          result = compareToUndefined(left, op);\n           break;\n         }\n         // fall through\n       case Token.TRUE:\n       case Token.FALSE:\n         if (undefinedRight) {\n-          result = false;\n+          result = compareToUndefined(left, op);\n           break;\n         }\n         // fall through\n \n       case Token.STRING:\n         if (undefinedRight) {\n-          result = false;\n+          result = compareToUndefined(left, op);\n           break;\n         }\n         if (Token.STRING != right.getType()) {\n \n       case Token.NUMBER:\n         if (undefinedRight) {\n-          result = false;\n+          result = compareToUndefined(left, op);\n           break;\n         }\n         if (Token.NUMBER != right.getType()) {\n         if (rightLiteral) {\n           boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n           if (undefinedLeft) {\n-            boolean nullRight = (Token.NULL == right.getType());\n-            boolean equivalent = undefinedRight || nullRight;\n-            switch (op) {\n-              case Token.EQ:\n-                // undefined is only equal to\n-                result = equivalent;\n-                break;\n-              case Token.NE:\n-                result = !equivalent;\n-                break;\n-              case Token.SHEQ:\n-                result = undefinedRight;\n-                break;\n-              case Token.SHNE:\n-                result = !undefinedRight;\n-                break;\n-              case Token.LT:\n-              case Token.GT:\n-              case Token.LE:\n-              case Token.GE:\n-                result = false;\n-                break;\n-              default:\n-                return n;\n-            }\n+            result = compareToUndefined(right, op);\n             break;\n           }\n         }\n     reportCodeChange();\n \n     return newNode;\n+  }\n+\n+  /**\n+   * @param value The value to compare to \"undefined\"\n+   * @param op The boolean op to compare with\n+   * @return Whether the boolean op is true or false\n+   */\n+  private boolean compareToUndefined(Node value, int op) {\n+    boolean result;\n+\n+    boolean valueUndefined = ((Token.NAME == value.getType()\n+        && value.getString().equals(\"undefined\"))\n+        || (Token.VOID == value.getType()\n+            && NodeUtil.isLiteralValue(value.getFirstChild(), false)));\n+    boolean valueNull = (Token.NULL == value.getType());\n+    boolean equivalent = valueUndefined || valueNull;\n+    switch (op) {\n+      case Token.EQ:\n+        // undefined is only equal to null or an undefined value\n+        result = equivalent;\n+        break;\n+      case Token.NE:\n+        result = !equivalent;\n+        break;\n+      case Token.SHEQ:\n+        result = valueUndefined;\n+        break;\n+      case Token.SHNE:\n+        result = !valueUndefined;\n+        break;\n+      case Token.LT:\n+      case Token.GT:\n+      case Token.LE:\n+      case Token.GE:\n+        result = false;\n+        break;\n+      default:\n+        throw new IllegalStateException(\"unexpected.\");\n+    }\n+\n+    return result;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n     scTest.test(js, expected);\n   }\n \n-  public void testUndefinedComparison() {\n+  public void testUndefinedComparison1() {\n     fold(\"undefined == undefined\", \"true\");\n     fold(\"undefined == null\", \"true\");\n     fold(\"undefined == void 0\", \"true\");\n     foldSame(\"this == undefined\");\n     foldSame(\"x == undefined\");\n   }\n+\n+  public void testUndefinedComparison2() {\n+    fold(\"\\\"123\\\" !== void 0\", \"true\");\n+    fold(\"\\\"123\\\" === void 0\", \"false\");\n+\n+    fold(\"void 0 !== \\\"123\\\"\", \"true\");\n+    fold(\"void 0 === \\\"123\\\"\", \"false\");\n+  }\n+\n+  public void testUndefinedComparison3() {\n+    fold(\"\\\"123\\\" !== undefined\", \"true\");\n+    fold(\"\\\"123\\\" === undefined\", \"false\");\n+\n+    fold(\"undefined !== \\\"123\\\"\", \"true\");\n+    fold(\"undefined === \\\"123\\\"\", \"false\");\n+  }\n+\n+  public void testUndefinedComparison4() {\n+    fold(\"1 !== void 0\", \"true\");\n+    fold(\"1 === void 0\", \"false\");\n+\n+    fold(\"null !== void 0\", \"true\");\n+    fold(\"null === void 0\", \"false\");\n+\n+    fold(\"undefined !== void 0\", \"false\");\n+    fold(\"undefined === void 0\", \"true\");\n+  }\n+\n \n   public void testUnaryOps() {\n     // These cases are handled by PeepholeRemoveDeadCode.\n   public void testFoldAdd1() {\n     foldSame(\"x=false+1\");\n   }\n-\n }", "timestamp": 1291079658, "metainfo": ""}