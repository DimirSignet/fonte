{"sha": "e06576603234f87e930d4753f82d797a26f74e07", "log": "Improve APIs for dealing with line numbers and source offsets  R=acleung DELTA=117  (80 added, 35 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4633   ", "commit": "\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n import java.io.Serializable;\n import java.io.StringReader;\n import java.nio.charset.Charset;\n+import java.util.Arrays;\n \n /**\n  * An abstract representation of a source file that provides access to\n   // Source Line Information\n   private int[] lineOffsets = null;\n \n-  // Remember the offset for the previous line query.  If the next line\n-  // is after this point, we can start scanning at the previous offset rather\n-  // than starting at the beginning of the file.\n-  private int lastOffset;\n-  private int lastLine;\n-\n   private String code = null;\n \n   /**\n       throw new IllegalArgumentException(\"a source must have a name\");\n     }\n     this.fileName = fileName;\n-    // Starting point: offset 0 is at line 1.\n-    this.lastOffset = 0;\n-    this.lastLine = 1;\n   }\n \n   @Override\n   public int getLineOffset(int lineno) {\n-    if (lineOffsets == null) {\n-      findLineOffsets();\n-    }\n+    findLineOffsets();\n     if (lineno < 1 || lineno > lineOffsets.length) {\n       throw new IllegalArgumentException(\n           \"Expected line number between 1 and \" + lineOffsets.length +\n \n   /** @return The number of lines in this source file. */\n   int getNumLines() {\n-    if (lineOffsets == null) {\n-      findLineOffsets();\n-    }\n+    findLineOffsets();\n     return lineOffsets.length;\n   }\n \n+\n   private void findLineOffsets() {\n+    if (lineOffsets != null) {\n+      return;\n+    }\n     try {\n       String[] sourceLines = getCode().split(\"\\n\");\n       lineOffsets = new int[sourceLines.length];\n     isExternFile = newVal;\n   }\n \n+  @Override\n+  public int getLineOfOffset(int offset) {\n+    findLineOffsets();\n+    int search = Arrays.binarySearch(lineOffsets, offset);\n+    if (search >= 0) {\n+      return search + 1; // lines are 1-based.\n+    } else {\n+      int insertionPoint = -1 * (search + 1);\n+      return Math.min(insertionPoint - 1, lineOffsets.length - 1) + 1;\n+    }\n+  }\n+\n+  @Override\n+  public int getColumnOfOffset(int offset) {\n+    int line = getLineOfOffset(offset);\n+    return offset - lineOffsets[line - 1];\n+  }\n+\n   /**\n    * Gets the source line for the indicated line number.\n    *\n    *     or if there was an IO exception.\n    */\n   public String getLine(int lineNumber) {\n+    findLineOffsets();\n+    if (lineNumber > lineOffsets.length) {\n+      return null;\n+    }\n+\n+    if (lineNumber < 1) {\n+      lineNumber = 1;\n+    }\n+\n+    int pos = lineOffsets[lineNumber - 1];\n     String js = \"\";\n     try {\n       // NOTE(nicksantos): Right now, this is optimized for few warnings.\n     } catch (IOException e) {\n       return null;\n     }\n-\n-    int pos = 0;\n-    int startLine = 1;\n-\n-    // If we've saved a previous offset and it's for a line less than the\n-    // one we're searching for, then start at that point.\n-    if (lineNumber >= lastLine) {\n-      pos = lastOffset;\n-      startLine = lastLine;\n-    }\n-\n-    for (int n = startLine; n < lineNumber; n++) {\n-      int nextpos = js.indexOf('\\n', pos);\n-      if (nextpos == -1) {\n-        return null;\n-      }\n-      pos = nextpos + 1;\n-    }\n-\n-    // Remember this offset for the next search we do.\n-    lastOffset = pos;\n-    lastLine = lineNumber;\n \n     if (js.indexOf('\\n', pos) == -1) {\n       // If next new line cannot be found, there are two cases\n--- a/src/com/google/javascript/rhino/jstype/SimpleSourceFile.java\n+++ b/src/com/google/javascript/rhino/jstype/SimpleSourceFile.java\n   }\n \n   @Override\n+  public int getColumnOfOffset(int offset) {\n+    return 0;\n+  }\n+\n+  @Override\n+  public int getLineOfOffset(int offset) {\n+    return 1;\n+  }\n+\n+  @Override\n   public int getLineOffset(int line) {\n     if (line < 1) {\n       throw new IllegalStateException(\n--- a/src/com/google/javascript/rhino/jstype/StaticSourceFile.java\n+++ b/src/com/google/javascript/rhino/jstype/StaticSourceFile.java\n    *         the number of lines in the source.\n    */\n   int getLineOffset(int lineNumber);\n+\n+  /**\n+   * Gets the 1-based line number of the given source offset.\n+   *\n+   * @param offset An absolute file offset.\n+   * @return The 1-based line number of that offset. The behavior is\n+   *     undefined if this offset does not exist in the source file.\n+   */\n+  int getLineOfOffset(int offset);\n+\n+  /**\n+   * Gets the 0-based column number of the given source offset.\n+   *\n+   * @param offset An absolute file offset.\n+   * @return The 0-based column number of that offset. The behavior is\n+   *     undefined if this offset does not exist in the source file.\n+   */\n+  int getColumnOfOffset(int offset);\n }", "timestamp": 1335556770, "metainfo": ""}