{"sha": "15715d80e789a07ff9600cb14c2d3afa3b951214", "log": "Make GlobalNamespace references implement StaticReference  R=acleung DELTA=37  (24 added, 1 deleted, 12 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2365   ", "commit": "\n--- a/src/com/google/javascript/jscomp/GlobalNamespace.java\n+++ b/src/com/google/javascript/jscomp/GlobalNamespace.java\n import com.google.javascript.rhino.Token;\n import com.google.javascript.rhino.TokenStream;\n import com.google.javascript.rhino.jstype.JSType;\n+import com.google.javascript.rhino.jstype.StaticReference;\n import com.google.javascript.rhino.jstype.StaticScope;\n import com.google.javascript.rhino.jstype.StaticSlot;\n+import com.google.javascript.rhino.jstype.StaticSourceFile;\n \n import java.util.ArrayList;\n import java.util.HashMap;\n       Name nameObj = getOrCreateName(name);\n       nameObj.type = type;\n \n-      Ref set = new Ref(t, n, Ref.Type.SET_FROM_GLOBAL,\n+      Ref set = new Ref(t, n, nameObj, Ref.Type.SET_FROM_GLOBAL,\n           currentPreOrderIndex++);\n       nameObj.addRef(set);\n \n       if (isNestedAssign(parent)) {\n         // This assignment is both a set and a get that creates an alias.\n-        Ref get = new Ref(t, n, Ref.Type.ALIASING_GET,\n+        Ref get = new Ref(t, n, nameObj, Ref.Type.ALIASING_GET,\n             currentPreOrderIndex++);\n         nameObj.addRef(get);\n         Ref.markTwins(set, get);\n                             String name) {\n       if (maybeHandlePrototypePrefix(t, n, parent, name)) return;\n \n-      Name node = getOrCreateName(name);\n-      Ref set = new Ref(t, n, Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n-      node.addRef(set);\n+      Name nameObj = getOrCreateName(name);\n+      Ref set = new Ref(t, n, nameObj,\n+          Ref.Type.SET_FROM_LOCAL, currentPreOrderIndex++);\n+      nameObj.addRef(set);\n \n       if (isNestedAssign(parent)) {\n         // This assignment is both a set and a get that creates an alias.\n-        Ref get = new Ref(t, n, Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n-        node.addRef(get);\n+        Ref get = new Ref(t, n, nameObj,\n+            Ref.Type.ALIASING_GET, currentPreOrderIndex++);\n+        nameObj.addRef(get);\n         Ref.markTwins(set, get);\n       }\n     }\n      */\n     void handleGet(NodeTraversal t, Node n, Node parent,\n         String name, Ref.Type type) {\n-      Name node = getOrCreateName(name);\n+      Name nameObj = getOrCreateName(name);\n \n       // No need to look up additional ancestors, since they won't be used.\n-      node.addRef(new Ref(t, n, type, currentPreOrderIndex++));\n+      nameObj.addRef(new Ref(t, n, nameObj, type, currentPreOrderIndex++));\n     }\n \n     /**\n    * A global name reference. Contains references to the relevant parse tree\n    * node and its ancestors that may be affected.\n    */\n-  static class Ref {\n+  static class Ref implements StaticReference {\n     enum Type {\n       SET_FROM_GLOBAL,\n       SET_FROM_LOCAL,\n     }\n \n     Node node;\n+    final CompilerInput source;\n+    final Name name;\n     final Type type;\n-    final CompilerInput source;\n     final Scope scope;\n     final int preOrderIndex;\n \n     /**\n      * Creates a reference at the current node.\n      */\n-    Ref(NodeTraversal t, Node name, Type type, int index) {\n-      this.node = name;\n+    Ref(NodeTraversal t, Node node, Name name, Type type, int index) {\n+      this.node = node;\n+      this.name = name;\n       this.source = t.getInput();\n       this.type = type;\n       this.scope = t.getScope();\n \n     private Ref(Ref original, Type type, int index) {\n       this.node = original.node;\n+      this.name = original.name;\n       this.source = original.source;\n       this.type = type;\n       this.scope = original.scope;\n       this.type = type;\n       this.source = null;\n       this.scope = null;\n+      this.name = null;\n       this.preOrderIndex = index;\n+    }\n+\n+    @Override\n+    public Node getNode() {\n+      return node;\n+    }\n+\n+    @Override\n+    public StaticSourceFile getSourceFile() {\n+      return source;\n+    }\n+\n+    @Override\n+    public StaticSlot<JSType> getSymbol() {\n+      return name;\n     }\n \n     JSModule getModule() {", "timestamp": 1308586429, "metainfo": ""}