{"sha": "9f0375c73c77ef134000d980a32f46f6085db042", "log": "Automated g4 rollback   *** Reason for rollback ***  Breaks some tests  *** Original change description ***  Fix type checking for the === and !== relationship.  R=johnlenz DELTA=70  (18 added, 42 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4927   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n         break;\n \n       case Token.EQ:\n-      case Token.NE:\n+      case Token.NE: {\n+        leftType = getJSType(n.getFirstChild());\n+        rightType = getJSType(n.getLastChild());\n+\n+        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n+        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n+        TernaryValue result =\n+            leftTypeRestricted.testForEquality(rightTypeRestricted);\n+        if (result != TernaryValue.UNKNOWN) {\n+          if (n.isNE()) {\n+            result = result.not();\n+          }\n+          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n+              rightType.toString(), result.toString());\n+        }\n+        ensureTyped(t, n, BOOLEAN_TYPE);\n+        break;\n+      }\n+\n       case Token.SHEQ:\n       case Token.SHNE: {\n         leftType = getJSType(n.getFirstChild());\n         rightType = getJSType(n.getLastChild());\n \n-        // We do not want to warn about explicit comparisons to VOID. People\n-        // often do this if they think their type annotations screwed up.\n-        //\n-        // We do want to warn about cases where people compare things like\n-        // (Array|null) == (Function|null)\n-        // because it probably means they screwed up.\n-        //\n-        // This heuristic here is not perfect, but should catch cases we\n-        // care about without too many false negatives.\n         JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n         JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n-\n-        TernaryValue result = TernaryValue.UNKNOWN;\n-        if (n.getType() == Token.EQ || n.getType() == Token.NE) {\n-          result = leftTypeRestricted.testForEquality(\n-              rightTypeRestricted);\n-          if (n.isNE()) {\n-            result = result.not();\n-          }\n-        } else {\n-          // SHEQ or SHNE\n-          if (!leftTypeRestricted.canTestForShallowEqualityWith(\n-                  rightTypeRestricted)) {\n-            result = n.getType() == Token.SHEQ ?\n-                TernaryValue.FALSE : TernaryValue.TRUE;\n-          }\n-        }\n-\n-        if (result != TernaryValue.UNKNOWN) {\n-          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n-              rightType.toString(), result.toString());\n+        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n+                rightTypeRestricted)) {\n+          report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n+              rightType.toString());\n         }\n         ensureTyped(t, n, BOOLEAN_TYPE);\n         break;\n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n    * ECMA-262 specification.<p>\n    */\n   public final boolean canTestForShallowEqualityWith(JSType that) {\n-    if (isEmptyType() || that.isEmptyType()) {\n-      return isSubtype(that) || that.isSubtype(this);\n-    }\n-    return !getGreatestSubtype(that).isEmptyType();\n+    return this.isSubtype(that) || that.isSubtype(this);\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n     testTypes(\"/**@type number*/var a;\" +\n         \"/**@type !Date */var b;\" +\n         \"if (a!==b) {}\",\n-        \"condition always evaluates to true\\n\" +\n+        \"condition always evaluates to the same value\\n\" +\n         \"left : number\\n\" +\n         \"right: Date\");\n   }\n         \"  function g() { x = 'y'; } g(); \" +\n         \"  return x === 3;\" +\n         \"}\",\n-        \"condition always evaluates to false\\n\" +\n+        \"condition always evaluates to the same value\\n\" +\n         \"left : (null|string|undefined)\\n\" +\n         \"right: number\");\n   }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n     testTypes(\"/**@type number*/var a;\" +\n         \"/**@type !Date */var b;\" +\n         \"if (a!==b) {}\",\n-        \"condition always evaluates to true\\n\" +\n+        \"condition always evaluates to the same value\\n\" +\n         \"left : number\\n\" +\n         \"right: Date\");\n   }\n         \"condition always evaluates to false\\n\" +\n         \"left : function (): undefined\\n\" +\n         \"right: boolean\");\n-  }\n-\n-  public void testComparison14() throws Exception {\n-    testTypes(\"/** @type {function((Array|string), Object): number} */\" +\n-        \"function f(x, y) { return x === y; }\",\n-        \"inconsistent return type\\n\" +\n-        \"found   : boolean\\n\" +\n-        \"required: number\");\n   }\n \n   public void testDeleteOperator1() throws Exception {\n         \"  function g() { x = 'y'; } g(); \" +\n         \"  return x === 3;\" +\n         \"}\",\n-        \"condition always evaluates to false\\n\" +\n+        \"condition always evaluates to the same value\\n\" +\n         \"left : (null|string)\\n\" +\n         \"right: number\");\n   }\n--- a/test/com/google/javascript/rhino/jstype/UnionTypeTest.java\n+++ b/test/com/google/javascript/rhino/jstype/UnionTypeTest.java\n     ProxyObjectType type = new ProxyObjectType(registry, OBJECT_TYPE);\n     assertTrue(type == type.collapseUnion());\n   }\n-\n-  public void testShallowEquality() {\n-    assertTrue(\n-        registry.createUnionType(ARRAY_TYPE, STRING_TYPE)\n-        .canTestForShallowEqualityWith(OBJECT_TYPE));\n-  }\n }", "timestamp": 1338589431, "metainfo": ""}