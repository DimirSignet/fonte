{"sha": "de195d17e438e13ab7d26f8f9550ba98ff7b47cb", "log": "Remove more unused Token ids.  R=nicksantos DELTA=192  (7 added, 98 deleted, 87 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3675   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ControlFlowGraph.java\n+++ b/src/com/google/javascript/jscomp/ControlFlowGraph.java\n       case Token.BLOCK:\n       case Token.SCRIPT:\n       case Token.TRY:\n-      case Token.FINALLY:\n         return true;\n       case Token.FUNCTION:\n         // A function node represents the start of a function where the name\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n         return Token.ASSIGN_MOD;\n       case com.google.javascript.jscomp.mozilla.rhino.Token.HOOK:\n         return Token.HOOK;\n-      case com.google.javascript.jscomp.mozilla.rhino.Token.COLON:\n-        return Token.COLON;\n       case com.google.javascript.jscomp.mozilla.rhino.Token.OR:\n         return Token.OR;\n       case com.google.javascript.jscomp.mozilla.rhino.Token.AND:\n         return Token.FUNCTION;\n       case com.google.javascript.jscomp.mozilla.rhino.Token.IF:\n         return Token.IF;\n-      case com.google.javascript.jscomp.mozilla.rhino.Token.ELSE:\n-        return Token.ELSE;\n       case com.google.javascript.jscomp.mozilla.rhino.Token.SWITCH:\n         return Token.SWITCH;\n       case com.google.javascript.jscomp.mozilla.rhino.Token.CASE:\n         return Token.WITH;\n       case com.google.javascript.jscomp.mozilla.rhino.Token.CATCH:\n         return Token.CATCH;\n-      case com.google.javascript.jscomp.mozilla.rhino.Token.FINALLY:\n-        return Token.FINALLY;\n       case com.google.javascript.jscomp.mozilla.rhino.Token.VOID:\n         return Token.VOID;\n       case com.google.javascript.jscomp.mozilla.rhino.Token.EMPTY:\n--- a/src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java\n+++ b/src/com/google/javascript/jscomp/parsing/TypeSafeDispatcher.java\n       case Token.DEFAULT:\n         return processSwitchCase((SwitchCase) node);\n       case Token.CATCH:\n-      case Token.FINALLY:\n         return processCatchClause((CatchClause) node);\n       case Token.COLON:\n         return processObjectProperty((ObjectProperty) node);\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n       case Token.ASSIGN_DIV:      return \"assign_div\";\n       case Token.ASSIGN_MOD:      return \"assign_mod\";\n       case Token.HOOK:            return \"hook\";\n-      case Token.COLON:           return \"colon\";\n       case Token.OR:              return \"or\";\n       case Token.AND:             return \"and\";\n       case Token.INC:             return \"inc\";\n       case Token.DEC:             return \"dec\";\n-      case Token.DOT:             return \"dot\";\n       case Token.FUNCTION:        return \"function\";\n       case Token.IF:              return \"if\";\n-      case Token.ELSE:            return \"else\";\n       case Token.SWITCH:          return \"switch\";\n       case Token.CASE:            return \"case\";\n       case Token.DEFAULT:         return \"default\";\n       case Token.VAR:             return \"var\";\n       case Token.WITH:            return \"with\";\n       case Token.CATCH:           return \"catch\";\n-      case Token.FINALLY:         return \"finally\";\n-      case Token.RESERVED:        return \"reserved\";\n       case Token.NOT:             return \"not\";\n       case Token.VOID:            return \"void\";\n       case Token.BLOCK:           return \"block\";\n--- a/src/com/google/javascript/rhino/Token.java\n+++ b/src/com/google/javascript/rhino/Token.java\n         ASSIGN_DIV     = 96,  // /=\n         ASSIGN_MOD     = 97,  // %=\n \n-        FIRST_ASSIGN   = ASSIGN,\n-        LAST_ASSIGN    = ASSIGN_MOD,\n-\n         HOOK           = 98, // conditional (?:)\n-        COLON          = 99,\n         OR             = 100, // logical or (||)\n         AND            = 101, // logical and (&&)\n         INC            = 102, // increment/decrement (++ --)\n         DEC            = 103,\n-        DOT            = 104, // member operator (.)\n         FUNCTION       = 105, // function keyword\n         IF             = 108, // if keyword\n-        ELSE           = 109, // else keyword\n         SWITCH         = 110, // switch keyword\n         CASE           = 111, // case keyword\n         DEFAULT        = 112, // default keyword\n         VAR            = 118, // var keyword\n         WITH           = 119, // with keyword\n         CATCH          = 120, // catch keyword\n-        FINALLY        = 121, // finally keyword\n         VOID           = 122, // void keyword\n-        RESERVED       = 123, // reserved keywords\n \n         EMPTY          = 124,\n \n \n         // JSCompiler introduced tokens\n         LABEL_NAME     = 153,\n-\n-        LAST_TOKEN     = 153,\n \n         // JSDoc-only tokens\n         ANNOTATION     = 300,\n         BANG           = 306,\n         EQUALS         = 307,\n         LB             = 308,  // left brackets\n-        LC             = 309;  // left curly braces\n+        LC             = 309,  // left curly braces\n+        COLON          = 310;\n \n   public static String name(int token) {\n         switch (token) {\n           case AND:             return \"AND\";\n           case INC:             return \"INC\";\n           case DEC:             return \"DEC\";\n-          case DOT:             return \"DOT\";\n           case FUNCTION:        return \"FUNCTION\";\n           case IF:              return \"IF\";\n-          case ELSE:            return \"ELSE\";\n           case SWITCH:          return \"SWITCH\";\n           case CASE:            return \"CASE\";\n           case DEFAULT:         return \"DEFAULT\";\n           case VAR:             return \"VAR\";\n           case WITH:            return \"WITH\";\n           case CATCH:           return \"CATCH\";\n-          case FINALLY:         return \"FINALLY\";\n           case EMPTY:           return \"EMPTY\";\n           case BLOCK:           return \"BLOCK\";\n           case LABEL:           return \"LABEL\";\n--- a/src/com/google/javascript/rhino/TokenStream.java\n+++ b/src/com/google/javascript/rhino/TokenStream.java\n  */\n \n public class TokenStream {\n-    public static boolean isKeyword(String s) {\n-        return Token.ERROR != stringToKeyword(s);\n-    }\n-\n-    private static int stringToKeyword(String name) {\n-// #string_id_map#\n-// The following assumes that Token.EOF == 0\n-        final int\n-            Id_break         = Token.BREAK,\n-            Id_case          = Token.CASE,\n-            Id_continue      = Token.CONTINUE,\n-            Id_default       = Token.DEFAULT,\n-            Id_delete        = Token.DELPROP,\n-            Id_do            = Token.DO,\n-            Id_else          = Token.ELSE,\n-            Id_false         = Token.FALSE,\n-            Id_for           = Token.FOR,\n-            Id_function      = Token.FUNCTION,\n-            Id_if            = Token.IF,\n-            Id_in            = Token.IN,\n-            Id_new           = Token.NEW,\n-            Id_null          = Token.NULL,\n-            Id_return        = Token.RETURN,\n-            Id_switch        = Token.SWITCH,\n-            Id_this          = Token.THIS,\n-            Id_true          = Token.TRUE,\n-            Id_typeof        = Token.TYPEOF,\n-            Id_var           = Token.VAR,\n-            Id_void          = Token.VOID,\n-            Id_while         = Token.WHILE,\n-            Id_with          = Token.WITH,\n-\n-            // the following are #ifdef RESERVE_JAVA_KEYWORDS in jsscan.c\n-            Id_abstract      = Token.RESERVED,\n-            Id_boolean       = Token.RESERVED,\n-            Id_byte          = Token.RESERVED,\n-            Id_catch         = Token.CATCH,\n-            Id_char          = Token.RESERVED,\n-            Id_class         = Token.RESERVED,\n-            Id_const         = Token.CONST,\n-            Id_debugger      = Token.DEBUGGER,\n-            Id_double        = Token.RESERVED,\n-            Id_enum          = Token.RESERVED,\n-            Id_export        = Token.RESERVED,\n-            Id_extends       = Token.RESERVED,\n-            Id_final         = Token.RESERVED,\n-            Id_finally       = Token.FINALLY,\n-            Id_float         = Token.RESERVED,\n-            Id_goto          = Token.RESERVED,\n-            Id_implements    = Token.RESERVED,\n-            Id_import        = Token.RESERVED,\n-            Id_instanceof    = Token.INSTANCEOF,\n-            Id_int           = Token.RESERVED,\n-            Id_interface     = Token.RESERVED,\n-            Id_long          = Token.RESERVED,\n-            Id_native        = Token.RESERVED,\n-            Id_package       = Token.RESERVED,\n-            Id_private       = Token.RESERVED,\n-            Id_protected     = Token.RESERVED,\n-            Id_public        = Token.RESERVED,\n-            Id_short         = Token.RESERVED,\n-            Id_static        = Token.RESERVED,\n-            Id_super         = Token.RESERVED,\n-            Id_synchronized  = Token.RESERVED,\n-            Id_throw         = Token.THROW,\n-            Id_throws        = Token.RESERVED,\n-            Id_transient     = Token.RESERVED,\n-            Id_try           = Token.TRY,\n-            Id_volatile      = Token.RESERVED;\n-\n-        int id;\n+    public static boolean isKeyword(String name) {\n+        boolean id = false;\n         String s = name;\n-// #generated# Last update: 2001-06-01 17:45:01 CEST\n-        L0: { id = 0; String X = null; int c;\n-            L: switch (s.length()) {\n+        complete: {\n+            String X = null;\n+            int c;\n+            partial: switch (s.length()) {\n             case 2: c=s.charAt(1);\n-                if (c=='f') { if (s.charAt(0)=='i') {id=Id_if; break L0;} }\n-                else if (c=='n') { if (s.charAt(0)=='i') {id=Id_in; break L0;} }\n-                else if (c=='o') { if (s.charAt(0)=='d') {id=Id_do; break L0;} }\n-                break L;\n+                if (c=='f') {\n+                  if (s.charAt(0)=='i') {id=true; break complete;}\n+                } else if (c=='n') {\n+                  if (s.charAt(0)=='i') {id=true; break complete;}\n+                } else if (c=='o') {\n+                  if (s.charAt(0)=='d') {id=true; break complete;}\n+                }\n+                break partial;\n             case 3: switch (s.charAt(0)) {\n                 case 'f':\n                   if (s.charAt(2)=='r' && s.charAt(1)=='o') {\n-                    id=Id_for; break L0;\n-                  } break L;\n+                    id=true; break complete;\n+                  } break partial;\n                 case 'i':\n                   if (s.charAt(2)=='t' && s.charAt(1)=='n') {\n-                    id=Id_int; break L0;\n-                  } break L;\n+                    id=true; break complete;\n+                  } break partial;\n                 case 'n':\n                   if (s.charAt(2)=='w' && s.charAt(1)=='e') {\n-                    id=Id_new; break L0;\n-                  } break L;\n+                    id=true; break complete;\n+                  } break partial;\n                 case 't':\n                   if (s.charAt(2)=='y' && s.charAt(1)=='r') {\n-                    id=Id_try; break L0;\n-                  } break L;\n+                    id=true; break complete;\n+                  } break partial;\n                 case 'v':\n                   if (s.charAt(2)=='r' && s.charAt(1)=='a') {\n-                    id=Id_var; break L0;\n-                  } break L;\n-                } break L;\n+                    id=true; break complete;\n+                  } break partial;\n+                } break partial;\n             case 4: switch (s.charAt(0)) {\n-                case 'b': X=\"byte\";id=Id_byte; break L;\n+                case 'b': X=\"byte\";id=true; break partial;\n                 case 'c': c=s.charAt(3);\n                     if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='a') {\n-                            id=Id_case; break L0;} }\n+                            id=true; break complete;} }\n                     else if (c=='r') {\n                       if (s.charAt(2)=='a' && s.charAt(1)=='h') {\n-                        id=Id_char; break L0;\n+                        id=true; break complete;\n                       }\n                     }\n-                    break L;\n+                    break partial;\n                 case 'e': c=s.charAt(3);\n                     if (c=='e') { if (s.charAt(2)=='s' && s.charAt(1)=='l') {\n-                            id=Id_else; break L0;} }\n+                            id=true; break complete;} }\n                     else if (c=='m') {\n                       if (s.charAt(2)=='u' && s.charAt(1)=='n') {\n-                            id=Id_enum; break L0;} }\n-                    break L;\n-                case 'g': X=\"goto\";id=Id_goto; break L;\n-                case 'l': X=\"long\";id=Id_long; break L;\n-                case 'n': X=\"null\";id=Id_null; break L;\n+                            id=true; break complete;} }\n+                    break partial;\n+                case 'g': X=\"goto\";id=true; break partial;\n+                case 'l': X=\"long\";id=true; break partial;\n+                case 'n': X=\"null\";id=true; break partial;\n                 case 't': c=s.charAt(3);\n                     if (c=='e') { if (s.charAt(2)=='u' && s.charAt(1)=='r') {\n-                            id=Id_true; break L0;} }\n+                            id=true; break complete;} }\n                     else if (c=='s') {\n                       if (s.charAt(2)=='i' && s.charAt(1)=='h') {\n-                            id=Id_this; break L0;} }\n-                    break L;\n-                case 'v': X=\"void\";id=Id_void; break L;\n-                case 'w': X=\"with\";id=Id_with; break L;\n-                } break L;\n+                            id=true; break complete;} }\n+                    break partial;\n+                case 'v': X=\"void\";id=true; break partial;\n+                case 'w': X=\"with\";id=true; break partial;\n+                } break partial;\n             case 5: switch (s.charAt(2)) {\n-                case 'a': X=\"class\";id=Id_class; break L;\n-                case 'e': X=\"break\";id=Id_break; break L;\n-                case 'i': X=\"while\";id=Id_while; break L;\n-                case 'l': X=\"false\";id=Id_false; break L;\n+                case 'a': X=\"class\";id=true; break partial;\n+                case 'e': X=\"break\";id=true; break partial;\n+                case 'i': X=\"while\";id=true; break partial;\n+                case 'l': X=\"false\";id=true; break partial;\n                 case 'n': c=s.charAt(0);\n-                    if (c=='c') { X=\"const\";id=Id_const; }\n-                    else if (c=='f') { X=\"final\";id=Id_final; }\n-                    break L;\n+                    if (c=='c') { X=\"const\";id=true; }\n+                    else if (c=='f') { X=\"final\";id=true; }\n+                    break partial;\n                 case 'o': c=s.charAt(0);\n-                    if (c=='f') { X=\"float\";id=Id_float; }\n-                    else if (c=='s') { X=\"short\";id=Id_short; }\n-                    break L;\n-                case 'p': X=\"super\";id=Id_super; break L;\n-                case 'r': X=\"throw\";id=Id_throw; break L;\n-                case 't': X=\"catch\";id=Id_catch; break L;\n-                } break L;\n+                    if (c=='f') { X=\"float\";id=true; }\n+                    else if (c=='s') { X=\"short\";id=true; }\n+                    break partial;\n+                case 'p': X=\"super\";id=true; break partial;\n+                case 'r': X=\"throw\";id=true; break partial;\n+                case 't': X=\"catch\";id=true; break partial;\n+                } break partial;\n             case 6: switch (s.charAt(1)) {\n-                case 'a': X=\"native\";id=Id_native; break L;\n+                case 'a': X=\"native\";id=true; break partial;\n                 case 'e': c=s.charAt(0);\n-                    if (c=='d') { X=\"delete\";id=Id_delete; }\n-                    else if (c=='r') { X=\"return\";id=Id_return; }\n-                    break L;\n-                case 'h': X=\"throws\";id=Id_throws; break L;\n-                case 'm': X=\"import\";id=Id_import; break L;\n-                case 'o': X=\"double\";id=Id_double; break L;\n-                case 't': X=\"static\";id=Id_static; break L;\n-                case 'u': X=\"public\";id=Id_public; break L;\n-                case 'w': X=\"switch\";id=Id_switch; break L;\n-                case 'x': X=\"export\";id=Id_export; break L;\n-                case 'y': X=\"typeof\";id=Id_typeof; break L;\n-                } break L;\n+                    if (c=='d') { X=\"delete\";id=true; }\n+                    else if (c=='r') { X=\"return\";id=true; }\n+                    break partial;\n+                case 'h': X=\"throws\";id=true; break partial;\n+                case 'm': X=\"import\";id=true; break partial;\n+                case 'o': X=\"double\";id=true; break partial;\n+                case 't': X=\"static\";id=true; break partial;\n+                case 'u': X=\"public\";id=true; break partial;\n+                case 'w': X=\"switch\";id=true; break partial;\n+                case 'x': X=\"export\";id=true; break partial;\n+                case 'y': X=\"typeof\";id=true; break partial;\n+                } break partial;\n             case 7: switch (s.charAt(1)) {\n-                case 'a': X=\"package\";id=Id_package; break L;\n-                case 'e': X=\"default\";id=Id_default; break L;\n-                case 'i': X=\"finally\";id=Id_finally; break L;\n-                case 'o': X=\"boolean\";id=Id_boolean; break L;\n-                case 'r': X=\"private\";id=Id_private; break L;\n-                case 'x': X=\"extends\";id=Id_extends; break L;\n-                } break L;\n+                case 'a': X=\"package\";id=true; break partial;\n+                case 'e': X=\"default\";id=true; break partial;\n+                case 'i': X=\"finally\";id=true; break partial;\n+                case 'o': X=\"boolean\";id=true; break partial;\n+                case 'r': X=\"private\";id=true; break partial;\n+                case 'x': X=\"extends\";id=true; break partial;\n+                } break partial;\n             case 8: switch (s.charAt(0)) {\n-                case 'a': X=\"abstract\";id=Id_abstract; break L;\n-                case 'c': X=\"continue\";id=Id_continue; break L;\n-                case 'd': X=\"debugger\";id=Id_debugger; break L;\n-                case 'f': X=\"function\";id=Id_function; break L;\n-                case 'v': X=\"volatile\";id=Id_volatile; break L;\n-                } break L;\n+                case 'a': X=\"abstract\";id=true; break partial;\n+                case 'c': X=\"continue\";id=true; break partial;\n+                case 'd': X=\"debugger\";id=true; break partial;\n+                case 'f': X=\"function\";id=true; break partial;\n+                case 'v': X=\"volatile\";id=true; break partial;\n+                } break partial;\n             case 9: c=s.charAt(0);\n-                if (c=='i') { X=\"interface\";id=Id_interface; }\n-                else if (c=='p') { X=\"protected\";id=Id_protected; }\n-                else if (c=='t') { X=\"transient\";id=Id_transient; }\n-                break L;\n+                if (c=='i') { X=\"interface\";id=true; }\n+                else if (c=='p') { X=\"protected\";id=true; }\n+                else if (c=='t') { X=\"transient\";id=true; }\n+                break partial;\n             case 10: c=s.charAt(1);\n-                if (c=='m') { X=\"implements\";id=Id_implements; }\n-                else if (c=='n') { X=\"instanceof\";id=Id_instanceof; }\n-                break L;\n-            case 12: X=\"synchronized\";id=Id_synchronized; break L;\n+                if (c=='m') { X=\"implements\";id=true; }\n+                else if (c=='n') { X=\"instanceof\";id=true; }\n+                break partial;\n+            case 12: X=\"synchronized\";id=true; break partial;\n             }\n-            if (X!=null && X!=s && !X.equals(s)) id = 0;\n+            // patial match validate the entire string the one possiblity\n+            if (X!=null && X!=s && !X.equals(s)) return false;\n         }\n-// #/generated#\n-// #/string_id_map#\n-        if (id == 0) { return Token.ERROR; }\n-        return id & 0xff;\n+        return id;\n     }\n \n     public static boolean isJSIdentifier(String s) {", "timestamp": 1320879508, "metainfo": ""}