{"sha": "4fe98319ed6ad9110a0722bfb39efacf181bbba1", "log": "fix up the function type de-duping logic with tests i should have written in the first place  R=tylerg DELTA=36  (32 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3483   ", "commit": "\n--- a/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionTypeBuilder.java\n \n import java.io.Serializable;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n \n     if (specialCaseType != null) {\n       return ImmutableList.of(specialCaseType);\n     }\n-    return alternates;\n+    return Collections.unmodifiableList(alternates);\n   }\n \n   /**\n         // Look through the alternates we've got so far,\n         // and check if any of them are duplicates of\n         // one another.\n-        int i = 0;\n+        int currentIndex = 0;\n         Iterator<JSType> it = alternates.iterator();\n         while (it.hasNext()) {\n           JSType current = it.next();\n             } else if (current.isSubtype(alternate)) {\n               // Alternate makes current obsolete\n               it.remove();\n-              if (i == functionTypePosition) {\n+\n+              if (currentIndex == functionTypePosition) {\n                 functionTypePosition = -1;\n+              } else if (currentIndex < functionTypePosition) {\n+                functionTypePosition--;\n+                currentIndex--;\n               }\n             }\n           }\n-          i++;\n+          currentIndex++;\n         }\n \n         if (alternate.isFunctionType()) {\n--- a/test/com/google/javascript/rhino/jstype/UnionTypeBuilderTest.java\n+++ b/test/com/google/javascript/rhino/jstype/UnionTypeBuilderTest.java\n     assertUnion(\"(Object|string)\", STRING_OBJECT_TYPE, stringAndObject);\n   }\n \n+  public void testRemovalOfDupes2() {\n+    JSType union =\n+        registry.createUnionType(\n+            EVAL_ERROR_TYPE,\n+            createFunctionWithReturn(ERROR_TYPE),\n+            ERROR_TYPE,\n+            createFunctionWithReturn(EVAL_ERROR_TYPE));\n+    assertEquals(\"(Error|function (): Error)\", union.toString());\n+  }\n+\n+  public void testRemovalOfDupes3() {\n+    JSType union =\n+        registry.createUnionType(\n+            ERROR_TYPE,\n+            createFunctionWithReturn(EVAL_ERROR_TYPE),\n+            EVAL_ERROR_TYPE,\n+            createFunctionWithReturn(ERROR_TYPE));\n+    assertEquals(\"(Error|function (): Error)\", union.toString());\n+  }\n+\n   public void assertUnion(String expected, JSType ... types) {\n     UnionTypeBuilder builder = new UnionTypeBuilder(registry);\n     for (JSType type : types) {\n     }\n     assertEquals(expected, builder.build().toString());\n   }\n+\n+  public FunctionType createFunctionWithReturn(JSType type) {\n+    return new FunctionBuilder(registry)\n+        .withParamsNode(registry.createParameters())\n+        .withReturnType(type)\n+        .build();\n+  }\n }", "timestamp": 1318867683, "metainfo": ""}