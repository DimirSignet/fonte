{"sha": "b2202accb3307ad0cd1d1af88fb7ad9463f4b3e3", "log": "don't emit a warning if 'x' doesn't resolve to a type in the expression 'x.prototype.bar'.  R=johnlenz DELTA=23  (21 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=221401   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n       // then we should not give it a @this type.\n       String ownerTypeName = owner.getQualifiedName();\n       ObjectType ownerType = ObjectType.cast(\n-          typeRegistry.getType(\n+          typeRegistry.getForgivingType(\n               scope, ownerTypeName, sourceName,\n               owner.getLineno(), owner.getCharno()));\n       if (ownerType != null) {\n--- a/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n+++ b/src/com/google/javascript/rhino/jstype/JSTypeRegistry.java\n   }\n \n   /**\n+   * Try to resolve a type name, but forgive the user and don't emit\n+   * a warning if this doesn't resolve.\n+   */\n+  public JSType getForgivingType(StaticScope<JSType> scope, String jsTypeName,\n+      String sourceName, int lineno, int charno) {\n+    JSType type = getType(\n+        scope, jsTypeName, sourceName, lineno, charno);\n+    type.forgiveUnknownNames();\n+    return type;\n+  }\n+\n+  /**\n    * Looks up a type by name. To allow for forward references to types, an\n    * unrecognized string has to be bound to a NamedType object that will be\n    * resolved later.\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"function foo(x) { return x.index; }\");\n   }\n \n-  public void testScopedConstructors() throws Exception {\n+  public void testScopedConstructors1() throws Exception {\n     testTypes(\n         \"function foo1() { \" +\n         \"  /** @constructor */ function Bar() { \" +\n         \"inconsistent return type\\n\" +\n         \"found   : string\\n\" +\n         \"required: number\");\n+  }\n+\n+  public void testScopedConstructors2() throws Exception {\n+    testTypes(\n+        \"/** @param {Function} f */\" +\n+        \"function foo1(f) { \" +\n+        \"  /** @param {Function} g */\" +\n+        \"  f.prototype.bar = function(g) {};\" +\n+        \"}\");\n   }\n \n   public void testQualifiedNameInference1() throws Exception {", "timestamp": 1284600316, "metainfo": ""}