{"sha": "5a7b057e7326d4c710ce4d087c05a39d29778078", "log": "Guava now includes some of the Strings methods that were missing when we initially open sourced.  R=nicksantos DELTA=55  (5 added, 43 deleted, 7 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3861   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n import com.google.common.base.Joiner;\n import com.google.common.base.Preconditions;\n import com.google.common.base.Supplier;\n+import com.google.common.base.Strings;\n import com.google.common.base.Throwables;\n import com.google.common.io.Files;\n import com.google.common.collect.ImmutableList;\n   /** Expansion function for source map. */\n   @VisibleForTesting\n   String expandSourceMapPath(B options, JSModule forModule) {\n-    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n+    if (Strings.isNullOrEmpty(options.sourceMapOutputPath)) {\n       return null;\n     }\n     return expandCommandLinePath(options.sourceMapOutputPath, forModule);\n    */\n   private void outputSourceMap(B options, String associatedName)\n       throws IOException {\n-    if (Strings.isEmpty(options.sourceMapOutputPath)) {\n+    if (Strings.isNullOrEmpty(options.sourceMapOutputPath)) {\n       return;\n     }\n \n--- a/src/com/google/javascript/jscomp/AliasExternals.java\n+++ b/src/com/google/javascript/jscomp/AliasExternals.java\n \n import javax.annotation.Nullable;\n import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n     this.compiler = compiler;\n     this.moduleGraph = moduleGraph;\n \n-    if (!Strings.isEmpty(unaliasableGlobals) &&\n-        !Strings.isEmpty(aliasableGlobals)) {\n+    if (!Strings.isNullOrEmpty(unaliasableGlobals) &&\n+        !Strings.isNullOrEmpty(aliasableGlobals)) {\n       throw new IllegalArgumentException(\n           \"Cannot pass in both unaliasable and aliasable globals; you must \" +\n           \"choose one or the other.\");\n     }\n \n-    if (!Strings.isEmpty(unaliasableGlobals)) {\n+    if (!Strings.isNullOrEmpty(unaliasableGlobals)) {\n       this.unaliasableGlobals.addAll(\n           Arrays.asList(unaliasableGlobals.split(\",\")));\n     }\n \n-    if (!Strings.isEmpty(aliasableGlobals)) {\n+    if (!Strings.isNullOrEmpty(aliasableGlobals)) {\n       this.aliasableGlobals.addAll(Arrays.asList(aliasableGlobals.split(\",\")));\n     }\n \n--- a/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/LightweightMessageFormatter.java\n import static com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt.LINE;\n \n import com.google.common.base.Preconditions;\n+import com.google.common.base.Strings;\n import com.google.javascript.jscomp.CheckLevel;\n import com.google.javascript.jscomp.SourceExcerptProvider.ExcerptFormatter;\n import com.google.javascript.jscomp.SourceExcerptProvider.SourceExcerpt;\n--- a/src/com/google/javascript/jscomp/Strings.java\n+++ b/src/com/google/javascript/jscomp/Strings.java\n \n package com.google.javascript.jscomp;\n \n-import javax.annotation.Nullable;\n-\n /**\n  * Guava code that will eventually be open-sourced properly. Package-private\n  * until they're able to do that. A lot of these methods are discouraged\n class Strings {\n   private Strings() {} // All static\n \n-  /**\n-   * Returns {@code true} if the given string is either null or the empty string\n-   * (\"\").\n-   *\n-   * @param string the string reference to check\n-   * @return {@code true} if {@code string} is either null or the empty string\n-   */\n-  static boolean isEmpty(@Nullable String string) {\n-    return string == null || string.isEmpty();\n-  }\n-\n-  /**\n-   * Returns the given string if it is non-null; the empty string otherwise.\n-   *\n-   * @param string the string to test and possibly return\n-   * @return {@code string} itself if it is non-null; {@code \"\"} if it is null\n-   */\n-  static String makeSafe(@Nullable String string) {\n-    return (string == null) ? \"\" : string;\n-  }\n-\n-  /**\n-   * Returns a string consisting of the input string concatenated a given number\n-   * of times. For example, {@code repeat(\"hey\", 3)} returns the string {@code\n-   * \"heyheyhey\"}.\n-   *\n-   * @param string any non-null string\n-   * @param count the number of times to repeat it; a nonnegative integer\n-   * @return a string containing {@code string} repeated {@code count} times\n-   *     (the empty string if {@code count} is zero)\n-   * @throws IllegalArgumentException if {@code count} is negative\n-   */\n-  static String repeat(String string, int count) {\n-    // If this multiplication overflows, a NegativeArraySizeException or\n-    // OutOfMemoryError is not far behind\n-    StringBuilder builder = new StringBuilder(string.length() * count);\n-    for (int i = 0; i < count; i++) {\n-      builder.append(string);\n-    }\n-    return builder.toString();\n-  }\n   /**\n    * If this given string is of length {@code maxLength} or less, it will\n    * be returned as-is.\n--- a/src/com/google/javascript/jscomp/VerboseMessageFormatter.java\n+++ b/src/com/google/javascript/jscomp/VerboseMessageFormatter.java\n  * limitations under the License.\n  */\n package com.google.javascript.jscomp;\n+\n+import com.google.common.base.Strings;\n \n import com.google.javascript.jscomp.CheckLevel;\n \n       lineSource = sourceRegion.getSourceExcerpt();\n     }\n     return String.format(\"%s at %s line %s %s\", description,\n-        (Strings.isEmpty(sourceName) ? \"(unknown source)\" : sourceName),\n+        (Strings.isNullOrEmpty(sourceName) ? \"(unknown source)\" : sourceName),\n         ((lineNumber < 0) ? String.valueOf(lineNumber) : \"(unknown line)\"),\n         ((lineSource != null) ? \":\\n\\n\" + lineSource : \".\"));\n   }", "timestamp": 1322007386, "metainfo": ""}