{"sha": "535699c745b234bc1c89a4e298b523d6fda9d6dd", "log": "Cleanup a bunch of Eclipse code warnings.  R=nicksantos DELTA=136  (19 added, 99 deleted, 18 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4714   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodingConvention.java\n+++ b/src/com/google/javascript/jscomp/CodingConvention.java\n    * returns information on the cast. By default, always returns null. Meant\n    * to be overridden by subclasses.\n    *\n-   * @param t The node traversal.\n    * @param callNode A CALL node.\n    */\n   public ObjectLiteralCast getObjectLiteralCast(Node callNode);\n--- a/src/com/google/javascript/jscomp/CompilerOptions.java\n+++ b/src/com/google/javascript/jscomp/CompilerOptions.java\n public class CompilerOptions implements Serializable, Cloneable {\n \n   // Unused. For people using reflection to circumvent access control.\n+  @SuppressWarnings(\"unused\")\n   private boolean manageClosureDependencies = false;\n \n   // A common enum for compiler passes that can run either globally or locally.\n--- a/src/com/google/javascript/jscomp/ErrorManager.java\n+++ b/src/com/google/javascript/jscomp/ErrorManager.java\n    * @param level the reporting level\n    * @param error the error to report\n    */\n+  @Override\n   void report(CheckLevel level, JSError error);\n \n   /**\n--- a/src/com/google/javascript/jscomp/JSModuleGraph.java\n+++ b/src/com/google/javascript/jscomp/JSModuleGraph.java\n   }\n \n   /**\n-   * A module depth comparator that considers a deeper module to be\n-   * \"greater than\" a shallower module. Uses module names to\n-   * consistently break ties.\n-   */\n-  private class DepthComparator implements Comparator<JSModule> {\n-    @Override\n-    public int compare(JSModule m1, JSModule m2) {\n-      return depthCompare(m1, m2);\n-    }\n-  }\n-\n-  /**\n    * A module depth comparator that considers a deeper module to be \"less than\"\n    * a shallower module. Uses module names to consistently break ties.\n    */\n--- a/src/com/google/javascript/jscomp/TransformAMDToCJSModule.java\n+++ b/src/com/google/javascript/jscomp/TransformAMDToCJSModule.java\n \n /**\n  * Rewrites an AMD module https://github.com/amdjs/amdjs-api/wiki/AMD to a\n- * Common JS module. See {@link ProcessCommonJSModule} for follow up processing\n+ * Common JS module. See {@link ProcessCommonJSModules} for follow up processing\n  * step.\n  */\n class TransformAMDToCJSModule implements CompilerPass {\n--- a/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n+++ b/src/com/google/javascript/jscomp/deps/SortedDependencies.java\n   /**\n    * Return the input that gives us the given symbol, or null.\n    */\n-  public INPUT maybeGetInputProviding(String symbol)\n-      throws MissingProvideException {\n+  public INPUT maybeGetInputProviding(String symbol) {\n     return provideMap.get(symbol);\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n     return nativeType;\n   }\n \n+  @Override\n   void setOwnerFunction(FunctionType type) {\n     Preconditions.checkState(ownerFunction == null || type == null);\n     ownerFunction = type;\n--- a/test/com/google/javascript/jscomp/TransformAMDToCJSModuleTest.java\n+++ b/test/com/google/javascript/jscomp/TransformAMDToCJSModuleTest.java\n package com.google.javascript.jscomp;\n \n /**\n- * Unit tests for {@link TransformAMDToCJSModules}\n+ * Unit tests for {@link TransformAMDToCJSModule}\n  */\n public class TransformAMDToCJSModuleTest extends CompilerTestCase {\n \n--- a/test/com/google/javascript/jscomp/deps/JsFileLineParserTest.java\n+++ b/test/com/google/javascript/jscomp/deps/JsFileLineParserTest.java\n       super(errorManager);\n     }\n \n+    @Override\n     boolean parseLine(String line) {\n       sb.append(line);\n       return true;\n     }\n \n+    @Override\n     public String toString() {\n       return sb.toString();\n     }", "timestamp": 1336521237, "metainfo": ""}