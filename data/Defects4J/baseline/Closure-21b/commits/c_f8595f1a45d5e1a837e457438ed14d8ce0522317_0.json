{"sha": "f8595f1a45d5e1a837e457438ed14d8ce0522317", "log": "add a more robust failsafe mode, try #2 i have to copy around the error-demoting property  R=acleung DELTA=59  (35 added, 14 deleted, 10 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4360   ", "commit": "\n--- a/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n+++ b/src/com/google/javascript/jscomp/ComposeWarningsGuard.java\n \n   private final Comparator<WarningsGuard> guardComparator =\n       new GuardComparator(orderOfAddition);\n+  private boolean demoteErrors = false;\n \n   private static class GuardComparator\n       implements Comparator<WarningsGuard>, Serializable {\n \n   void addGuard(WarningsGuard guard) {\n     if (guard instanceof ComposeWarningsGuard) {\n+      ComposeWarningsGuard composeGuard = (ComposeWarningsGuard) guard;\n+      if (composeGuard.demoteErrors) {\n+        this.demoteErrors = composeGuard.demoteErrors;\n+      }\n+\n       // Reverse the guards, so that they have the same order in the result.\n-      addGuards(((ComposeWarningsGuard) guard).guards.descendingSet());\n+      addGuards(composeGuard.guards.descendingSet());\n     } else {\n       numberOfAdds++;\n       orderOfAddition.put(guard, numberOfAdds);\n     for (WarningsGuard guard : guards) {\n       CheckLevel newLevel = guard.level(error);\n       if (newLevel != null) {\n+        if (demoteErrors && newLevel == CheckLevel.ERROR) {\n+          return CheckLevel.WARNING;\n+        }\n         return newLevel;\n       }\n     }\n    */\n   ComposeWarningsGuard makeEmergencyFailSafeGuard() {\n     ComposeWarningsGuard safeGuard = new ComposeWarningsGuard();\n+    safeGuard.demoteErrors = true;\n     for (WarningsGuard guard : guards.descendingSet()) {\n-      if (guard instanceof StrictWarningsGuard) {\n-        continue;\n-      } else if (guard instanceof DiagnosticGroupWarningsGuard) {\n-        DiagnosticGroupWarningsGuard dgGuard =\n-            (DiagnosticGroupWarningsGuard) guard;\n-        if (dgGuard.level == CheckLevel.ERROR) {\n-          safeGuard.addGuard(\n-              new DiagnosticGroupWarningsGuard(\n-                  dgGuard.group, CheckLevel.WARNING));\n-        } else {\n-        safeGuard.addGuard(guard);\n-        }\n-      } else {\n-        safeGuard.addGuard(guard);\n-      }\n+      safeGuard.addGuard(guard);\n     }\n     return safeGuard;\n   }\n--- a/test/com/google/javascript/jscomp/IntegrationTest.java\n+++ b/test/com/google/javascript/jscomp/IntegrationTest.java\n         \"var x = {};\");\n   }\n \n+  public void testStrictWarningsGuard() throws Exception {\n+    CompilerOptions options = createCompilerOptions();\n+    options.checkTypes = true;\n+    options.addWarningsGuard(new StrictWarningsGuard());\n+\n+    Compiler compiler = compile(options,\n+        \"/** @return {number} */ function f() { return true; }\");\n+    assertEquals(1, compiler.getErrors().length);\n+    assertEquals(0, compiler.getWarnings().length);\n+  }\n+\n+  public void testStrictWarningsGuardEmergencyMode() throws Exception {\n+    CompilerOptions options = createCompilerOptions();\n+    options.checkTypes = true;\n+    options.addWarningsGuard(new StrictWarningsGuard());\n+    options.useEmergencyFailSafe();\n+\n+    Compiler compiler = compile(options,\n+        \"/** @return {number} */ function f() { return true; }\");\n+    assertEquals(0, compiler.getErrors().length);\n+    assertEquals(1, compiler.getWarnings().length);\n+  }\n+\n   private void testSame(CompilerOptions options, String original) {\n     testSame(options, new String[] { original });\n   }", "timestamp": 1331673617, "metainfo": ""}