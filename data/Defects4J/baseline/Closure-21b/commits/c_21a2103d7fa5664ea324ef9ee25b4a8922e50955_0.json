{"sha": "21a2103d7fa5664ea324ef9ee25b4a8922e50955", "log": "Don't remove nodes out of traversal order. Fixes issue 311.  R=nicksantos DELTA=69  (44 added, 22 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=227   ", "commit": "\n--- a/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n+++ b/src/com/google/javascript/jscomp/UnreachableCodeElimination.java\n       return n;\n     }\n \n-    // If the parent is null, this mean whatever node it was there is now\n-    // useless and it has been removed by other logics in this pass. That node\n-    // while no longer exists in the AST, is still in the CFG because we\n-    // never update the graph as nodes are removed.\n-    if (n.getParent() == null) {\n-      List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\n-      if (outEdges.size() == 1) {\n-        return tryRemoveUnconditionalBranching(\n-          outEdges.get(0).getDestination().getValue());\n-      }\n-    }\n-\n     switch (n.getType()) {\n-      case Token.BLOCK:\n-        if (n.hasChildren()) {\n-          Node first = n.getFirstChild();\n-          return tryRemoveUnconditionalBranching(first);\n-        } else {\n-          return tryRemoveUnconditionalBranching(\n-            ControlFlowAnalysis.computeFollowNode(n));\n-        }\n       case Token.RETURN:\n         if (n.hasChildren()) {\n           break;\n         // branches to that same node. It is safe to remove it.\n         List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();\n         if (outEdges.size() == 1 &&\n-\n             // If there is a next node, there is no chance this jump is useless.\n             (n.getNext() == null || n.getNext().getType() == Token.FUNCTION)) {\n+\n           Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);\n-          Node fallThrough = tryRemoveUnconditionalBranching(\n-            ControlFlowAnalysis.computeFollowNode(n));\n+          Node fallThrough = computeFollowing(n);\n           Node nextCfgNode = outEdges.get(0).getDestination().getValue();\n           if (nextCfgNode == fallThrough) {\n             removeDeadExprStatementSafely(n);\n         }\n     }\n     return n;\n+  }\n+\n+  private Node computeFollowing(Node n) {\n+    Node next = ControlFlowAnalysis.computeFollowNode(n);\n+    while (next != null && next.getType() == Token.BLOCK) {\n+      if (next.hasChildren()) {\n+        next = next.getFirstChild();\n+      } else {\n+        next = computeFollowing(next);\n+      }\n+    }\n+    return next;\n   }\n \n   private void removeDeadExprStatementSafely(Node n) {\n--- a/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java\n+++ b/test/com/google/javascript/jscomp/UnreachableCodeEliminationTest.java\n \n   public void testCascadedRemovalOfUnlessUnconditonalJumps() {\n     test(\"switch (a) { case 'a': break; case 'b': break; case 'c': break }\",\n+         \"switch (a) { case 'a': break; case 'b': case 'c': }\");\n+    // Only one break removed per pass.\n+    test(\"switch (a) { case 'a': break; case 'b': case 'c': }\",\n          \"switch (a) { case 'a': case 'b': case 'c': }\");\n+\n     test(\"function foo() {\" +\n-         \"  switch (a) { case 'a':return; case 'b':return; case 'c':return }}\",\n-         \"function foo() { switch (a) { case 'a': case 'b': case 'c': }}\");\n+      \"  switch (a) { case 'a':return; case 'b':return; case 'c':return }}\",\n+      \"function foo() { switch (a) { case 'a':return; case 'b': case 'c': }}\");\n+    test(\"function foo() {\" +\n+      \"  switch (a) { case 'a':return; case 'b': case 'c': }}\",\n+      \"function foo() { switch (a) { case 'a': case 'b': case 'c': }}\");\n+\n     testSame(\"function foo() {\" +\n              \"switch (a) { case 'a':return 2; case 'b':return 1}}\");\n   }\n+\n+  public void testIssue311() {\n+    test(\"function a(b) {\\n\" +\n+         \"  switch (b.v) {\\n\" +\n+         \"    case 'SWITCH':\\n\" +\n+         \"      if (b.i >= 0) {\\n\" +\n+         \"        return b.o;\\n\" +\n+         \"      } else {\\n\" +\n+         \"        return;\\n\" +\n+         \"      }\\n\" +\n+         \"      break;\\n\" +\n+         \"  }\\n\" +\n+         \"}\",\n+         \"function a(b) {\\n\" +\n+         \"  switch (b.v) {\\n\" +\n+         \"    case 'SWITCH':\\n\" +\n+         \"      if (b.i >= 0) {\\n\" +\n+         \"        return b.o;\\n\" +\n+         \"      } else {\\n\" +\n+         \"      }\\n\" +\n+         \"  }\\n\" +\n+         \"}\");\n+  }\n }", "timestamp": 1294434554, "metainfo": ""}