{"sha": "1a7ba5cb0111dd3ed9afd9691cab39b3c341e408", "log": "Modify normalization to distinguish function expression names from parameters and local variables. Fixes issue 539.  R=nicksantos DELTA=246  (61 added, 11 deleted, 174 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=3615   ", "commit": "\n--- a/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n+++ b/src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java\n class MakeDeclaredNamesUnique\n     implements NodeTraversal.ScopedCallback {\n \n+  // Arguments is special cased to handle cases where a local name shadows\n+  // the arguments declaration.\n   public static final String ARGUMENTS = \"arguments\";\n+\n+  // The name stack is similiar to how we model scopes but handles some\n+  // additional cases that are not handled by the current Scope object.\n+  // Specifically, a Scope currently has only two concepts of scope (global,\n+  // and function local).  But there are in reality a couple of additional\n+  // case to worry about:\n+  //   catch expressions\n+  //   function expressions names\n+  // Both belong to a scope by themselves.\n   private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();\n   private final Renamer rootRenamer;\n \n       renamer = nameStack.peek().forChildScope();\n     }\n \n-    if (declarationRoot.getType() == Token.FUNCTION) {\n-      // Add the function parameters\n-      Node fnParams = declarationRoot.getFirstChild().getNext();\n-      for (Node c = fnParams.getFirstChild(); c != null; c = c.getNext()) {\n-        String name = c.getString();\n-        renamer.addDeclaredName(name);\n-      }\n-\n-      // Add the function body declarations\n-      Node functionBody = declarationRoot.getLastChild();\n-      findDeclaredNames(functionBody, null, renamer);\n-    } else {\n+    if (declarationRoot.getType() != Token.FUNCTION) {\n       // Add the block declarations\n       findDeclaredNames(declarationRoot, null, renamer);\n     }\n               && !NodeUtil.isFunctionDeclaration(n)) {\n             renamer.addDeclaredName(name);\n           }\n+\n+          nameStack.push(renamer);\n+        }\n+        break;\n+\n+      case Token.LP: {\n+          Renamer renamer = nameStack.peek().forChildScope();\n+\n+          // Add the function parameters\n+          for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n+            String name = c.getString();\n+            renamer.addDeclaredName(name);\n+          }\n+\n+          // Add the function body declarations\n+          Node functionBody = n.getNext();\n+          findDeclaredNames(functionBody, null, renamer);\n \n           nameStack.push(renamer);\n         }\n         break;\n \n       case Token.FUNCTION:\n+        // Remove the function body scope\n+        nameStack.pop();\n         // Remove function recursive name (if any).\n         nameStack.pop();\n+        break;\n+\n+      case Token.LP:\n+        // Note: The parameters and function body variables live in the\n+        // same scope, we introduce the scope when in the \"shouldTraverse\"\n+        // visit of LP, but remove it when when we exit the function above.\n         break;\n \n       case Token.CATCH:\n--- a/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionInjectorTest.java\n         \"function foo(a){return a;}; \" +\n         \"function x() { foo(x++); }\",\n         \"function foo(a){return a;}; \" +\n-        \"function x() {{var a$$inline_1=x++;\" +\n-            \"a$$inline_1}}\",\n+        \"function x() {{var a$$inline_0=x++;\" +\n+            \"a$$inline_0}}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){return a+a;}; foo(x++);\",\n         \"function foo(a){return a+a;}; \" +\n-            \"{var a$$inline_1=x++;\" +\n-            \" a$$inline_1+\" +\n-            \"a$$inline_1;}\",\n+            \"{var a$$inline_0=x++;\" +\n+            \" a$$inline_0+\" +\n+            \"a$$inline_0;}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){return a+a;}; foo(new Date());\",\n         \"function foo(a){return a+a;}; \" +\n-            \"{var a$$inline_1=new Date();\" +\n-            \" a$$inline_1+\" +\n-            \"a$$inline_1;}\",\n+            \"{var a$$inline_0=new Date();\" +\n+            \" a$$inline_0+\" +\n+            \"a$$inline_0;}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){return a+a;}; foo(function(){});\",\n         \"function foo(a){return a+a;}; \" +\n-            \"{var a$$inline_1=function(){};\" +\n-            \" a$$inline_1+\" +\n-            \"a$$inline_1;}\",\n+            \"{var a$$inline_0=function(){};\" +\n+            \" a$$inline_0+\" +\n+            \"a$$inline_0;}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){return true;}; foo(goo());\",\n         \"function foo(a){return true;};\" +\n-            \"{var a$$inline_1=goo();true}\",\n+            \"{var a$$inline_0=goo();true}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n         \"function foo(a){var b;return a;}; \" +\n             \"function x() { foo(goo()); }\",\n             \"function foo(a){var b;return a;}; \" +\n-            \"function x() {{var a$$inline_2=goo();\" +\n-                \"var b$$inline_3;a$$inline_2}}\",\n+            \"function x() {{var a$$inline_0=goo();\" +\n+                \"var b$$inline_1;a$$inline_0}}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n         \"var x = 1; var y = 2;\" +\n         \"function foo(a,b){x = b; y = a;}; \" +\n         \"function bar() {\" +\n-           \"{var a$$inline_2=x;\" +\n+           \"{var a$$inline_0=x;\" +\n             \"x = y;\" +\n-            \"y = a$$inline_2;}\" +\n+            \"y = a$$inline_0;}\" +\n         \"}\",\n         \"foo\", INLINE_BLOCK);\n   }\n         \"var x = 1; var y = 2;\" +\n         \"function foo(a,b){y = a; x = b;}; \" +\n         \"function bar() {\" +\n-           \"{var b$$inline_3=y;\" +\n+           \"{var b$$inline_1=y;\" +\n             \"y = x;\" +\n-            \"x = b$$inline_3;}\" +\n+            \"x = b$$inline_1;}\" +\n         \"}\",\n         \"foo\", INLINE_BLOCK);\n   }\n         \"for(;1;){ foo(1); }\",\n         \"function foo(a){var b;return a;}; \" +\n         \"for(;1;){ {\" +\n-            \"var b$$inline_3=void 0;1}}\",\n+            \"var b$$inline_1=void 0;1}}\",\n         \"foo\", INLINE_BLOCK);\n \n     helperInlineReferenceToFunction(\n         \"do{ foo(1); } while(1)\",\n         \"function foo(a){var b;return a;}; \" +\n         \"do{ {\" +\n-            \"var b$$inline_3=void 0;1}}while(1)\",\n+            \"var b$$inline_1=void 0;1}}while(1)\",\n         \"foo\", INLINE_BLOCK);\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){for(var b in c)return a;}; \" +\n         \"for(;1;){ foo(1); }\",\n         \"function foo(a){var b;for(b in c)return a;}; \" +\n-        \"for(;1;){ {JSCompiler_inline_label_foo_4:{\" +\n-            \"var b$$inline_3=void 0;for(b$$inline_3 in c){\" +\n-              \"1;break JSCompiler_inline_label_foo_4\" +\n+        \"for(;1;){ {JSCompiler_inline_label_foo_2:{\" +\n+            \"var b$$inline_1=void 0;for(b$$inline_1 in c){\" +\n+              \"1;break JSCompiler_inline_label_foo_2\" +\n             \"}}}}\",\n         \"foo\", INLINE_BLOCK);\n   }\n     helperInlineReferenceToFunction(\n         \"function foo(){function x() {var a; return true;} return x}; foo();\",\n         \"function foo(){function x(){var a;return true}return x};\" +\n-            \"{var x$$inline_1 = function(){\" +\n-            \"var a$$inline_2;return true};x$$inline_1}\",\n+            \"{var x$$inline_0 = function(){\" +\n+            \"var a$$inline_1;return true};x$$inline_0}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n   public void testBug1897706() {\n     helperInlineReferenceToFunction(\n         \"function foo(a){}; foo(x())\",\n-        \"function foo(a){}; {var a$$inline_1=x()}\",\n+        \"function foo(a){}; {var a$$inline_0=x()}\",\n         \"foo\", INLINE_BLOCK);\n \n     helperInlineReferenceToFunction(\n         \"function foo(a){bar()}; foo(x())\",\n-        \"function foo(a){bar()}; {var a$$inline_1=x();bar()}\",\n+        \"function foo(a){bar()}; {var a$$inline_0=x();bar()}\",\n         \"foo\", INLINE_BLOCK);\n \n     helperInlineReferenceToFunction(\n         \"function foo(a,b){bar()}; foo(x(),y())\",\n         \"function foo(a,b){bar()};\" +\n-        \"{var a$$inline_2=x();var b$$inline_3=y();bar()}\",\n+        \"{var a$$inline_0=x();var b$$inline_1=y();bar()}\",\n         \"foo\", INLINE_BLOCK);\n   }\n \n--- a/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java\n+++ b/test/com/google/javascript/jscomp/FunctionToBlockMutatorTest.java\n     helperMutate(\n         \"function foo(a){return a;}; \" +\n         \"function x() { foo(x++); }\",\n-        \"{var a$$inline_1 = x++; a$$inline_1}\",\n+        \"{var a$$inline_0 = x++; a$$inline_0}\",\n         \"foo\", null);\n   }\n \n     // Parameter has side-effects.\n     helperMutate(\n         \"function foo(a){return a+a;}; foo(x++);\",\n-        \"{var a$$inline_1 = x++;\" +\n-            \"a$$inline_1 + a$$inline_1;}\",\n+        \"{var a$$inline_0 = x++;\" +\n+            \"a$$inline_0 + a$$inline_0;}\",\n         \"foo\", null);\n   }\n \n   public void testMutateInitializeUninitializedVars1() {\n     helperMutate(\n         \"function foo(a){var b;return a;}; foo(1);\",\n-        \"{var b$$inline_3=void 0;1}\",\n+        \"{var b$$inline_1=void 0;1}\",\n         \"foo\", null, false, true);\n   }\n \n   public void testMutateInitializeUninitializedVars2() {\n     helperMutate(\n         \"function foo(a){for(var b in c)return a;}; foo(1);\",\n-        \"{JSCompiler_inline_label_foo_4:\" +\n+        \"{JSCompiler_inline_label_foo_2:\" +\n           \"{\" +\n-            \"for(var b$$inline_3 in c){\" +\n-                \"1;break JSCompiler_inline_label_foo_4\" +\n+            \"for(var b$$inline_1 in c){\" +\n+                \"1;break JSCompiler_inline_label_foo_2\" +\n              \"}\" +\n           \"}\" +\n         \"}\",\n     boolean callInLoop = false;\n     helperMutate(\n         \"function foo(a){var B = bar(); a;}; foo(1);\",\n-        \"{var B$$inline_3=bar(); 1;}\",\n+        \"{var B$$inline_1=bar(); 1;}\",\n         \"foo\", null, false, callInLoop);\n     // ... in a loop, the constant-ness is removed.\n     // TODO(johnlenz): update this test to look for the const annotation.\n     callInLoop = true;\n     helperMutate(\n         \"function foo(a){var B = bar(); a;}; foo(1);\",\n-        \"{var B$$inline_3 = bar(); 1;}\",\n+        \"{var B$$inline_1 = bar(); 1;}\",\n         \"foo\", null, false, callInLoop);\n   }\n \n      // expressions\n      helperMutate(\n         \"function foo(a){function g(){}}; foo(1);\",\n-        \"{var g$$inline_3=function(){};}\",\n+        \"{var g$$inline_1=function(){};}\",\n         \"foo\", null);\n   }\n \n--- a/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n+++ b/test/com/google/javascript/jscomp/InlineFunctionsTest.java\n     // don't inline if the input parameter is modified.\n     test(\"function INC(x){return x++}\" +\n          \"var y=INC(i)\",\n-         \"var y;{var x$$inline_1=i;\" +\n-         \"y=x$$inline_1++}\");\n+         \"var y;{var x$$inline_0=i;\" +\n+         \"y=x$$inline_0++}\");\n   }\n \n   public void testInlineFunctions10() {\n     test(\"function INC(x){return x++}\" +\n          \"var y=INC(i);y=INC(i)\",\n          \"var y;\" +\n-         \"{var x$$inline_1=i;\" +\n-         \"y=x$$inline_1++}\" +\n-         \"{var x$$inline_4=i;\" +\n-         \"y=x$$inline_4++}\");\n+         \"{var x$$inline_0=i;\" +\n+         \"y=x$$inline_0++}\" +\n+         \"{var x$$inline_2=i;\" +\n+         \"y=x$$inline_2++}\");\n   }\n \n   public void testInlineFunctions11() {\n     // inline as block if the input parameter has side-effects.\n     test(\"function f(x){return x}\" +\n          \"var y=f(i++)\",\n-         \"var y;{var x$$inline_1=i++;y=x$$inline_1}\");\n+         \"var y;{var x$$inline_0=i++;y=x$$inline_0}\");\n   }\n \n   public void testInlineFunctions14() {\n          \"var JSCompiler_temp_const$$0 = c;\\n\" +\n          \"{\\n\" +\n          \"var JSCompiler_inline_result$$1;\\n\" +\n-         \"var x$$inline_3;\\n\" +\n+         \"var x$$inline_2;\\n\" +\n          \"JSCompiler_inline_result$$1 = \" +\n-         \"    function(a$$inline_4){ return a$$inline_4+1 };\\n\" +\n+         \"    function(a$$inline_3){ return a$$inline_3+1 };\\n\" +\n          \"}\" +\n          \"var d=JSCompiler_temp_const$$0 + JSCompiler_inline_result$$1\");\n   }\n          \"  var JSCompiler_temp_const$$0 = c;\\n\" +\n          \"  {\\n\" +\n          \"  var JSCompiler_inline_result$$1;\\n\" +\n-         \"  var x$$inline_3;\\n\" +\n+         \"  var x$$inline_2;\\n\" +\n          \"  JSCompiler_inline_result$$1 = \" +\n-         \"      function(a$$inline_4) {return a$$inline_4+1};\\n\" +\n+         \"      function(a$$inline_3) {return a$$inline_3+1};\\n\" +\n          \"  }\\n\" +\n          \"  var d = JSCompiler_temp_const$$0+JSCompiler_inline_result$$1\\n\" +\n          \"}\");\n     test(\n         \"function foo(b){return window.bar(function(){c(b)})}\" +\n         \"var d=foo(e)\",\n-        \"var d;{var b$$inline_1=e;\" +\n-        \"d=window.bar(function(){c(b$$inline_1)})}\");\n+        \"var d;{var b$$inline_0=e;\" +\n+        \"d=window.bar(function(){c(b$$inline_0)})}\");\n   }\n \n   public void testInlineFunctions16b() {\n          \"function bar(d){return plex(d)}\" +\n          \"var d=foo(1,2)\",\n \n-         \"var d;{JSCompiler_inline_label_plex_2:{\" +\n+         \"var d;{JSCompiler_inline_label_plex_1:{\" +\n          \"if(1+2){\" +\n-         \"d=0;break JSCompiler_inline_label_plex_2}\" +\n+         \"d=0;break JSCompiler_inline_label_plex_1}\" +\n          \"else{\" +\n-         \"d=1;break JSCompiler_inline_label_plex_2}d=void 0}}\");\n+         \"d=1;break JSCompiler_inline_label_plex_1}d=void 0}}\");\n   }\n \n   public void testInlineFunctions23() {\n          \"function foo(a, b){return bar(a+b)}\" +\n          \"var d=foo(1,2)\",\n \n-         \"var d;{JSCompiler_inline_label_complex_2:{\" +\n+         \"var d;{JSCompiler_inline_label_complex_1:{\" +\n          \"if(1+2){\" +\n-         \"d=0;break JSCompiler_inline_label_complex_2\" +\n+         \"d=0;break JSCompiler_inline_label_complex_1\" +\n          \"}else{\" +\n-         \"d=1;break JSCompiler_inline_label_complex_2\" +\n+         \"d=1;break JSCompiler_inline_label_complex_1\" +\n          \"}d=void 0}}\");\n   }\n \n         \"foo(2,3,x())\",\n \n         \"1+2+1+2+4+5+6+7+8+9+1+2+3+10;\" +\n-        \"{var JSCompiler_inline_anon_param_4=x();\" +\n+        \"{var JSCompiler_inline_anon_param_2=x();\" +\n         \"2+3+2+3+4+5+6+7+8+9+1+2+3+10}\");\n   }\n \n   public void testNoInlineIfParametersModified1() {\n     // Assignment\n     test(\"function f(x){return x=1}f(undefined)\",\n-         \"{var x$$inline_1=undefined;\" +\n-         \"x$$inline_1=1}\");\n+         \"{var x$$inline_0=undefined;\" +\n+         \"x$$inline_0=1}\");\n   }\n \n   public void testNoInlineIfParametersModified2() {\n     test(\"function f(x){return (x)=1;}f(2)\",\n-         \"{var x$$inline_1=2;\" +\n-         \"x$$inline_1=1}\");\n+         \"{var x$$inline_0=2;\" +\n+         \"x$$inline_0=1}\");\n   }\n \n   public void testNoInlineIfParametersModified3() {\n     // Assignment variant.\n     test(\"function f(x){return x*=2}f(2)\",\n-         \"{var x$$inline_1=2;\" +\n-         \"x$$inline_1*=2}\");\n+         \"{var x$$inline_0=2;\" +\n+         \"x$$inline_0*=2}\");\n   }\n \n   public void testNoInlineIfParametersModified4() {\n     // Assignment in if.\n     test(\"function f(x){return x?(x=2):0}f(2)\",\n-         \"{var x$$inline_1=2;\" +\n-         \"x$$inline_1?(\" +\n-         \"x$$inline_1=2):0}\");\n+         \"{var x$$inline_0=2;\" +\n+         \"x$$inline_0?(\" +\n+         \"x$$inline_0=2):0}\");\n   }\n \n   public void testNoInlineIfParametersModified5() {\n     // Assignment in if, multiple params\n     test(\"function f(x,y){return x?(y=2):0}f(2,undefined)\",\n-         \"{var y$$inline_3=undefined;2?(\" +\n-         \"y$$inline_3=2):0}\");\n+         \"{var y$$inline_1=undefined;2?(\" +\n+         \"y$$inline_1=2):0}\");\n   }\n \n   public void testNoInlineIfParametersModified6() {\n     test(\"function f(x,y){return x?(y=2):0}f(2)\",\n-         \"{var y$$inline_3=void 0;2?(\" +\n-         \"y$$inline_3=2):0}\");\n+         \"{var y$$inline_1=void 0;2?(\" +\n+         \"y$$inline_1=2):0}\");\n   }\n \n   public void testNoInlineIfParametersModified7() {\n     // Increment\n     test(\"function f(a){return++a<++a}f(1)\",\n-         \"{var a$$inline_1=1;\" +\n-         \"++a$$inline_1<\" +\n-         \"++a$$inline_1}\");\n+         \"{var a$$inline_0=1;\" +\n+         \"++a$$inline_0<\" +\n+         \"++a$$inline_0}\");\n   }\n \n   public void testNoInlineIfParametersModified8() {\n \n   public void testInlineNeverMutateConstants() {\n     test(\"function f(x){return x=1}f(undefined)\",\n-         \"{var x$$inline_1=undefined;\" +\n-         \"x$$inline_1=1}\");\n+         \"{var x$$inline_0=undefined;\" +\n+         \"x$$inline_0=1}\");\n   }\n \n   public void testInlineNeverOverrideNewValues() {\n     test(\"function f(a){return++a<++a}f(1)\",\n-        \"{var a$$inline_1=1;\" +\n-        \"++a$$inline_1<++a$$inline_1}\");\n+        \"{var a$$inline_0=1;\" +\n+        \"++a$$inline_0<++a$$inline_0}\");\n   }\n \n   public void testInlineMutableArgsReferencedOnce() {\n \n   public void testInlineBlockMutableArgs1() {\n     test(\"function foo(x){x+x}foo([])\",\n-         \"{var x$$inline_1=[];\" +\n-         \"x$$inline_1+x$$inline_1}\");\n+         \"{var x$$inline_0=[];\" +\n+         \"x$$inline_0+x$$inline_0}\");\n   }\n \n   public void testInlineBlockMutableArgs2() {\n     test(\"function foo(x){x+x}foo(new Date)\",\n-         \"{var x$$inline_1=new Date;\" +\n-         \"x$$inline_1+x$$inline_1}\");\n+         \"{var x$$inline_0=new Date;\" +\n+         \"x$$inline_0+x$$inline_0}\");\n   }\n \n   public void testInlineBlockMutableArgs3() {\n     test(\"function foo(x){x+x}foo(true&&new Date)\",\n-         \"{var x$$inline_1=true&&new Date;\" +\n-         \"x$$inline_1+x$$inline_1}\");\n+         \"{var x$$inline_0=true&&new Date;\" +\n+         \"x$$inline_0+x$$inline_0}\");\n   }\n \n   public void testInlineBlockMutableArgs4() {\n     test(\"function foo(x){x+x}foo({})\",\n-         \"{var x$$inline_1={};\" +\n-         \"x$$inline_1+x$$inline_1}\");\n+         \"{var x$$inline_0={};\" +\n+         \"x$$inline_0+x$$inline_0}\");\n   }\n \n   public void testShadowVariables1() {\n          \"bar();\",\n \n          \"var a=0;\" +\n-         \"{var a$$inline_1=3+4}\");\n+         \"{var a$$inline_0=3+4}\");\n   }\n \n   public void testShadowVariables2() {\n         \"function _bar(){a=foo()}\",\n \n         \"var a=0;\" +\n-        \"function _bar(){{var a$$inline_1=2;\" +\n-        \"a=3+a$$inline_1}}\");\n+        \"function _bar(){{var a$$inline_0=2;\" +\n+        \"a=3+a$$inline_0}}\");\n   }\n \n   public void testShadowVariables4() {\n         \"function _bar(a){a=foo(4)}\",\n \n         \"var a=0;function _bar(a$$2){{\" +\n-        \"var a$$inline_1=4;\" +\n-        \"a$$2=3+a$$inline_1}}\");\n+        \"var a$$inline_0=4;\" +\n+        \"a$$2=3+a$$inline_0}}\");\n   }\n \n   public void testShadowVariables7() {\n          \"function foo(){return a}\" +\n          \"(function(){var a=5;(function(){foo()})()})()\",\n          \"var a=3;\" +\n-         \"{var a$$inline_1=5;{a}}\"\n+         \"{var a$$inline_0=5;{a}}\"\n          );\n \n     assumeMinimumCapture = true;\n          \"function foo(){return a}\" +\n          \"(function(){var a=5;(function(){foo()})()})()\",\n          \"var a=3;\" +\n-         \"{var a$$inline_2=5;{a}}\"\n+         \"{var a$$inline_1=5;{a}}\"\n          );\n   }\n \n          \"function foo(){return a}\" +\n          \"(function(){var a=5;(function(){foo()})()})()\",\n          \"var a=3;\" +\n-         \"{var a$$inline_1=5;{a}}\"\n+         \"{var a$$inline_0=5;{a}}\"\n          );\n \n     assumeMinimumCapture = true;\n          \"function foo(){return a}\" +\n          \"(function(){var a=5;(function(){foo()})()})()\",\n          \"var a=3;\" +\n-         \"{var a$$inline_2=5;{a}}\"\n+         \"{var a$$inline_1=5;{a}}\"\n          );\n \n   }\n \n         \"var a=0;\" +\n         \"function _goo(){var a$$2=2;var x;\" +\n-        \"{var a$$inline_1=3;x=a+a}}\");\n+        \"{var a$$inline_0=3;x=a+a}}\");\n   }\n \n   public void testCostBasedInlining1() {\n     test(\"function f(a){return 1 + a + a;}\" +\n          \"var a = f(f(1));\",\n          \"var a;\" +\n-         \"{var a$$inline_1=1+1+1;\" +\n-         \"a=1+a$$inline_1+a$$inline_1}\");\n+         \"{var a$$inline_0=1+1+1;\" +\n+         \"a=1+a$$inline_0+a$$inline_0}\");\n   }\n \n   public void testCostBasedInlining10() {\n     test(\"function f(a){return a + a;}\" +\n          \"var a = f(f(1))\",\n          \"var a;\" +\n-         \"{var a$$inline_1=1+1;\" +\n-         \"a=a$$inline_1+a$$inline_1}\");\n+         \"{var a$$inline_0=1+1;\" +\n+         \"a=a$$inline_0+a$$inline_0}\");\n   }\n \n   public void testCostBasedInlining12() {\n \n     // But do inline into functions\n     test(\"function f(){a();b();var z=1+1}function _foo(){f()}\",\n-         \"function _foo(){{a();b();var z$$inline_1=1+1}}\");\n+         \"function _foo(){{a();b();var z$$inline_0=1+1}}\");\n \n   }\n \n   public void testComplexInline7() {\n     test(\"function f(x,y){if (x) return y(); else return true;}\" +\n          \"var b=1;z=f(1,b)\",\n-         \"var b=1;{JSCompiler_inline_label_f_4:{if(1){z=b();\" +\n-         \"break JSCompiler_inline_label_f_4}else{z=true;\" +\n-         \"break JSCompiler_inline_label_f_4}z=void 0}}\");\n+         \"var b=1;{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n+         \"break JSCompiler_inline_label_f_2}else{z=true;\" +\n+         \"break JSCompiler_inline_label_f_2}z=void 0}}\");\n   }\n \n   public void testComplexInline8() {\n     test(\"function f(x,y){if (x) return y(); else return true;}\" +\n          \"var b=1;var z=f(1,b)\",\n          \"var b=1;var z;\" +\n-         \"{JSCompiler_inline_label_f_4:{if(1){z=b();\" +\n-         \"break JSCompiler_inline_label_f_4\" +\n+         \"{JSCompiler_inline_label_f_2:{if(1){z=b();\" +\n+         \"break JSCompiler_inline_label_f_2\" +\n          \"}else{\" +\n-         \"z=true;break JSCompiler_inline_label_f_4}z=void 0}}\");\n+         \"z=true;break JSCompiler_inline_label_f_2}z=void 0}}\");\n   }\n \n   public void testComplexInlineVars8() {\n   public void testComplexSample() {\n     String result = \"\" +\n       \"{{\" +\n-      \"var styleSheet$$inline_9=null;\" +\n+      \"var styleSheet$$inline_2=null;\" +\n       \"if(goog$userAgent$IE)\" +\n-        \"styleSheet$$inline_9=0;\" +\n+        \"styleSheet$$inline_2=0;\" +\n       \"else \" +\n-        \"var head$$inline_10=0;\" +\n+        \"var head$$inline_3=0;\" +\n       \"{\" +\n-        \"var element$$inline_11=\" +\n-            \"styleSheet$$inline_9;\" +\n-        \"var stylesString$$inline_12=a;\" +\n+        \"var element$$inline_4=\" +\n+            \"styleSheet$$inline_2;\" +\n+        \"var stylesString$$inline_5=a;\" +\n         \"if(goog$userAgent$IE)\" +\n-          \"element$$inline_11.cssText=\" +\n-              \"stylesString$$inline_12;\" +\n+          \"element$$inline_4.cssText=\" +\n+              \"stylesString$$inline_5;\" +\n         \"else \" +\n         \"{\" +\n-          \"var propToSet$$inline_13=\" +\n+          \"var propToSet$$inline_6=\" +\n               \"\\\"innerText\\\";\" +\n-          \"element$$inline_11[\" +\n-              \"propToSet$$inline_13]=\" +\n-                  \"stylesString$$inline_12\" +\n+          \"element$$inline_4[\" +\n+              \"propToSet$$inline_6]=\" +\n+                  \"stylesString$$inline_5\" +\n         \"}\" +\n       \"}\" +\n-      \"styleSheet$$inline_9\" +\n+      \"styleSheet$$inline_2\" +\n       \"}}\";\n \n     test(\"var foo = function(stylesString, opt_element) { \" +\n \n     test(\"(function(){\" +\n          \"var f = function(a){call(function(){return a})};f()})()\",\n-         \"{{var a$$inline_1=void 0;call(function(){return a$$inline_1})}}\");\n+         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n   }\n \n   public void testComplexFunctionWithFunctionDefinition2a() {\n \n     test(\"(function(){\" +\n          \"var f = function(a){call(function(){return a})};f()})()\",\n-         \"{{var a$$inline_1=void 0;call(function(){return a$$inline_1})}}\");\n+         \"{{var a$$inline_0=void 0;call(function(){return a$$inline_0})}}\");\n   }\n \n   public void testComplexFunctionWithFunctionDefinition3() {\n     assumeMinimumCapture = true;\n \n     test(\"function f(){var a; call(function(){return a})}f()\",\n-         \"{var a$$inline_1;call(function(){return a$$inline_1})}\");\n+         \"{var a$$inline_0;call(function(){return a$$inline_0})}\");\n \n   }\n \n         \");\",\n         \"{\" +\n         \"var JSCompiler_inline_result$$0;\" +\n-        \"var ret$$inline_2={};\\n\" +\n-        \"ret$$inline_2[ONE]='a';\\n\" +\n-        \"ret$$inline_2[TWO]='b';\\n\" +\n-        \"JSCompiler_inline_result$$0 = ret$$inline_2;\\n\" +\n+        \"var ret$$inline_1={};\\n\" +\n+        \"ret$$inline_1[ONE]='a';\\n\" +\n+        \"ret$$inline_1[TWO]='b';\\n\" +\n+        \"JSCompiler_inline_result$$0 = ret$$inline_1;\\n\" +\n         \"}\" +\n         \"{\" +\n         \"descriptions_=JSCompiler_inline_result$$0;\" +\n         \"((function(){var a; return function(){foo()}})())();\",\n \n         \"{var JSCompiler_inline_result$$0;\" +\n-        \"var a$$inline_2;\" +\n+        \"var a$$inline_1;\" +\n         \"JSCompiler_inline_result$$0=function(){foo()};}\" +\n         \"JSCompiler_inline_result$$0()\");\n \n   public void testFunctionExpressionOmega() {\n     // ... with unused recursive name.\n     test(\"(function (f){f(f)})(function(f){f(f)})\",\n-         \"{var f$$inline_1=function(f$$1){f$$1(f$$1)};\" +\n-          \"{{f$$inline_1(f$$inline_1)}}}\");\n+         \"{var f$$inline_0=function(f$$1){f$$1(f$$1)};\" +\n+          \"{{f$$inline_0(f$$inline_0)}}}\");\n   }\n \n   public void testLocalFunctionInlining1() {\n     assumeStrictThis = true;\n     // In strict mode, \"this\" is never coerced so we can use the provided value.\n     test(\"function f(a){a=1;this} f.call();\",\n-         \"{var a$$inline_1=void 0; a$$inline_1=1; void 0;}\");\n+         \"{var a$$inline_0=void 0; a$$inline_0=1; void 0;}\");\n     test(\"function f(a){a=1;this} f.call(x, x);\",\n-         \"{var a$$inline_1=x; a$$inline_1=1; x;}\");\n+         \"{var a$$inline_0=x; a$$inline_0=1; x;}\");\n   }\n \n   // http://en.wikipedia.org/wiki/Fixed_point_combinator#Y_combinator\n         \"factorial(5)\\n\",\n         \"var factorial;\\n\" +\n         \"{\\n\" +\n-        \"var M$$inline_6 = function(f$$2) {\\n\" +\n+        \"var M$$inline_4 = function(f$$2) {\\n\" +\n         \"  return function(n){if(n===0)return 1;else return n*f$$2(n-1)}\\n\" +\n         \"};\\n\" +\n         \"{\\n\" +\n-        \"var f$$inline_1=function(f$$inline_9){\\n\" +\n-        \"  return M$$inline_6(\\n\" +\n-        \"    function(arg$$inline_10){\\n\" +\n-        \"      return f$$inline_9(f$$inline_9)(arg$$inline_10)\\n\" +\n+        \"var f$$inline_0=function(f$$inline_7){\\n\" +\n+        \"  return M$$inline_4(\\n\" +\n+        \"    function(arg$$inline_8){\\n\" +\n+        \"      return f$$inline_7(f$$inline_7)(arg$$inline_8)\\n\" +\n         \"     })\\n\" +\n         \"};\\n\" +\n-        \"factorial=M$$inline_6(\\n\" +\n-        \"  function(arg$$inline_2){\\n\" +\n-        \"    return f$$inline_1(f$$inline_1)(arg$$inline_2)\\n\" +\n+        \"factorial=M$$inline_4(\\n\" +\n+        \"  function(arg$$inline_1){\\n\" +\n+        \"    return f$$inline_0(f$$inline_0)(arg$$inline_1)\\n\" +\n         \"});\\n\" +\n         \"}\\n\" +\n         \"}\" +\n         \"  var JSCompiler_temp_const$$0 = goog.Uri;\" +\n         \"  {\" +\n         \"  var JSCompiler_inline_result$$1;\" +\n-        \"  var self$$inline_3 = self$$2;\" +\n-        \"  if (!self$$inline_3.domServices_) {\" +\n-        \"    self$$inline_3.domServices_ = goog$component$DomServices.get(\" +\n-        \"        self$$inline_3.appContext_);\" +\n+        \"  var self$$inline_2 = self$$2;\" +\n+        \"  if (!self$$inline_2.domServices_) {\" +\n+        \"    self$$inline_2.domServices_ = goog$component$DomServices.get(\" +\n+        \"        self$$inline_2.appContext_);\" +\n         \"  }\" +\n-        \"  JSCompiler_inline_result$$1=self$$inline_3.domServices_;\" +\n+        \"  JSCompiler_inline_result$$1=self$$inline_2.domServices_;\" +\n         \"  }\" +\n         \"  var myUrl = new JSCompiler_temp_const$$0(\" +\n         \"      JSCompiler_inline_result$$1.getDomHelper().\" +\n         \"    $(this).data('checkboxes');\\n\" +\n         \"  }\\n\" +\n         \"})(jQuery)\",\n-        \"{var $$$inline_3=jQuery;\\n\" +\n-        \"$$$inline_3.fn.multicheck=function(options$$inline_7){\\n\" +\n-        \"  {options$$inline_7.checkboxes=\" +\n-            \"$$$inline_3(this).siblings(\\\":checkbox\\\");\\n\" +\n-        \"  {$$$inline_3(this).data(\\\"checkboxes\\\")}\" +\n+        \"{var $$$inline_0=jQuery;\\n\" +\n+        \"$$$inline_0.fn.multicheck=function(options$$inline_4){\\n\" +\n+        \"  {options$$inline_4.checkboxes=\" +\n+            \"$$$inline_0(this).siblings(\\\":checkbox\\\");\\n\" +\n+        \"  {$$$inline_0(this).data(\\\"checkboxes\\\")}\" +\n         \"  }\\n\" +\n         \"}\\n\" +\n         \"}\");\n   public void testAnonymous1() {\n     assumeMinimumCapture = false;\n     test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n-         \"{var a$$inline_2=10;\" +\n-         \"{var b$$inline_3=a$$inline_2;\" +\n-         \"a$$inline_2++;alert(b$$inline_3)}}\");\n+         \"{var a$$inline_0=10;\" +\n+         \"{var b$$inline_1=a$$inline_0;\" +\n+         \"a$$inline_0++;alert(b$$inline_1)}}\");\n \n     assumeMinimumCapture = true;\n     test(\"(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();\",\n-        \"{var a$$inline_4=10;\" +\n-        \"{var b$$inline_1=a$$inline_4;\" +\n-        \"a$$inline_4++;alert(b$$inline_1)}}\");\n+        \"{var a$$inline_2=10;\" +\n+        \"{var b$$inline_0=a$$inline_2;\" +\n+        \"a$$inline_2++;alert(b$$inline_0)}}\");\n   }\n \n   public void testAnonymous2() {\n \n     assumeMinimumCapture = true;\n     test(\"(function(){var a=10;(function(){arguments;})()})();\",\n-         \"{var a$$inline_1=10;(function(){arguments;})();}\");\n+         \"{var a$$inline_0=10;(function(){arguments;})();}\");\n \n     test(\"(function(){(function(){arguments;})()})();\",\n         \"{(function(){arguments;})()}\");\n         \"function _testLocalVariableInLoop_(){\\n\" +\n         \"  var result=0;\\n\" +\n         \"  {\" +\n-        \"  var arr$$inline_4=[1,2,3,4,5];\\n\" +\n-        \"  var i$$inline_5=0;\\n\" +\n-        \"  var l$$inline_6=arr$$inline_4.length;\\n\" +\n-        \"  for(;i$$inline_5<l$$inline_6;i$$inline_5++){\\n\" +\n-        \"    var j$$inline_7=arr$$inline_4[i$$inline_5];\\n\" +\n+        \"  var arr$$inline_0=[1,2,3,4,5];\\n\" +\n+        \"  var i$$inline_1=0;\\n\" +\n+        \"  var l$$inline_2=arr$$inline_0.length;\\n\" +\n+        \"  for(;i$$inline_1<l$$inline_2;i$$inline_1++){\\n\" +\n+        \"    var j$$inline_3=arr$$inline_0[i$$inline_1];\\n\" +\n         \"    (function(){\\n\" +\n-        \"       var k$$inline_8=j$$inline_7;\\n\" +\n-        \"       setTimeout(function(){result+=k$$inline_8},5*i$$inline_5)\\n\" +\n+        \"       var k$$inline_4=j$$inline_3;\\n\" +\n+        \"       setTimeout(function(){result+=k$$inline_4},5*i$$inline_1)\\n\" +\n         \"     })()\\n\" +\n         \"  }\\n\" +\n         \"  }\\n\" +\n         \"function _testLocalVariable_(){\\n\" +\n         \"  var result=0;\\n\" +\n         \"  {\\n\" +\n-        \"  var j$$inline_4=[i];\\n\" +\n+        \"  var j$$inline_2=[i];\\n\" +\n         \"  {\\n\" +\n-        \"  var j$$inline_1=j$$inline_4;\\n\" +  // this temp is needed.\n-        \"  setTimeout(function(){result+=j$$inline_1},5*i);\\n\" +\n+        \"  var j$$inline_0=j$$inline_2;\\n\" +  // this temp is needed.\n+        \"  setTimeout(function(){result+=j$$inline_0},5*i);\\n\" +\n         \"  }\\n\" +\n-        \"  j$$inline_4=null\\n\" + // because this value can be modified later.\n+        \"  j$$inline_2=null\\n\" + // because this value can be modified later.\n         \"  }\\n\" +\n         \"}\");\n   }\n--- a/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n+++ b/test/com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java\n     useDefaultRenamer = false;\n   }\n \n-  public void testWithInversion(String original, String expected) {\n+  private void testWithInversion(String original, String expected) {\n     invert = false;\n     test(original, expected);\n     invert = true;\n     invert = false;\n   }\n \n-  public void testSameWithInversion(String externs, String original) {\n+  private void testSameWithInversion(String externs, String original) {\n     invert = false;\n     testSame(externs, original, null);\n     invert = true;\n     invert = false;\n   }\n \n-  public void testSameWithInversion(String original) {\n+  private void testSameWithInversion(String original) {\n     testSameWithInversion(\"\", original);\n   }\n \n     return \"function f(){\" + s + \"}\";\n   }\n \n-  public void testInFunction(String original, String expected) {\n+  private void testInFunction(String original, String expected) {\n     test(wrapInFunction(original), wrapInFunction(expected));\n   }\n \n-  public void testSameInFunction(String original) {\n+  private void testSameInFunction(String original) {\n     testSame(wrapInFunction(original));\n   }\n \n     testInFunction(\n         \"try { } catch(e) {e; try { } catch(e$$1) {e$$1;} };var e$$2\",\n         \"try { } catch(e) {e; try { } catch(e$$0) {e$$0;} };var e$$1\");\n+  }\n+\n+  public void testMakeLocalNamesUniqueWithContext5() {\n+    // Set the test type\n+    this.useDefaultRenamer = true;\n+\n+    testWithInversion(\n+        \"function f(){var f; f = 1}\",\n+        \"function f(){var f$$1; f$$1 = 1}\");\n+    testWithInversion(\n+        \"function f(f){f = 1}\",\n+        \"function f(f$$1){f$$1 = 1}\");\n+    testWithInversion(\n+        \"function f(f){var f; f = 1}\",\n+        \"function f(f$$1){var f$$1; f$$1 = 1}\");\n+\n+    test(\n+        \"var fn = function f(){var f; f = 1}\",\n+        \"var fn = function f(){var f$$1; f$$1 = 1}\");\n+    test(\n+        \"var fn = function f(f){f = 1}\",\n+        \"var fn = function f(f$$1){f$$1 = 1}\");\n+    test(\n+        \"var fn = function f(f){var f; f = 1}\",\n+        \"var fn = function f(f$$1){var f$$1; f$$1 = 1}\");\n   }\n \n   public void testArguments() {", "timestamp": 1320354649, "metainfo": ""}