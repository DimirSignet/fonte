{"sha": "15518dc31fc68aa27a53cfa84932171fba90b80d", "log": "Make Node more resistant against bad line numbers. The \"real\" SourceFile implementation throws exceptions on bad line numbers, so the test implementation should too.  R=johnlenz DELTA=49  (46 added, 0 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4246   ", "commit": "\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n \n   public int getSourceOffset() {\n     StaticSourceFile file = getStaticSourceFile();\n-    int lineOffset = file == null ?\n-        Integer.MIN_VALUE : file.getLineOffset(getLineno());\n-    return lineOffset + getCharno();\n+    if (file == null) {\n+      return -1;\n+    }\n+    int lineno = getLineno();\n+    if (lineno == -1) {\n+      return -1;\n+    }\n+    return file.getLineOffset(lineno) + getCharno();\n   }\n \n   public int getSourcePosition() {\n--- a/src/com/google/javascript/rhino/jstype/SimpleSourceFile.java\n+++ b/src/com/google/javascript/rhino/jstype/SimpleSourceFile.java\n \n   @Override\n   public int getLineOffset(int line) {\n+    if (line < 1) {\n+      throw new IllegalStateException(\n+          \"Should not call getLineOffset with line number \" + line);\n+    }\n     return Integer.MIN_VALUE;\n   }\n \n--- a/test/com/google/javascript/rhino/NodeTest.java\n+++ b/test/com/google/javascript/rhino/NodeTest.java\n     assertEquals(\"bar.js\", lhs.getSourceFileName());\n   }\n \n+  public void testInvalidSourceOffset() {\n+    Node string = Node.newString(\"a\");\n+\n+    string.setSourceEncodedPosition(-1);\n+    assertTrue(string.getSourceOffset() < 0);\n+\n+    string.setSourceFileForTesting(\"foo.js\");\n+    assertTrue(string.getSourceOffset() < 0);\n+  }\n+\n   private static Node getVarRef(String name) {\n     return Node.newString(Token.NAME, name);\n   }", "timestamp": 1329943082, "metainfo": ""}