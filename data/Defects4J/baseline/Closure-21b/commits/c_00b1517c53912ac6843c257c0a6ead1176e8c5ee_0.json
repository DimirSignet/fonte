{"sha": "00b1517c53912ac6843c257c0a6ead1176e8c5ee", "log": "When inferring a function type, there may be formal parameters that do not appear in the function literal Fixes issue 368  Tested: yes  R=johnlenz DELTA=47  (37 added, 6 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4126   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n               oldParam.isVarArgs() ||\n               oldParam.isOptionalArg();\n \n-          // The subclass method might right its var_args as individual\n+          // The subclass method might write its var_args as individual\n           // arguments.\n           if (currentParam.getNext() != null && newParam.isVarArgs()) {\n             newParam.setVarArgs(false);\n               codingConvention.isVarArgsParameter(currentParam));\n         }\n       }\n+\n+      // Clone any remaining params that aren't in the function literal.\n+      while (oldParams.hasNext()) {\n+        paramBuilder.newParameterFromNode(oldParams.next());\n+      }\n+\n       parametersNode = paramBuilder.build();\n     }\n     return this;\n         Sets.<String>newHashSet() :\n         Sets.newHashSet(info.getParameterNames());\n     boolean foundTemplateType = false;\n+    boolean isVarArgs = false;\n     for (Node arg : argsParent.children()) {\n       String argumentName = arg.getString();\n       allJsDocParams.remove(argumentName);\n       // type from JSDocInfo\n       JSType parameterType = null;\n       boolean isOptionalParam = isOptionalParameter(arg, info);\n-      boolean isVarArgs = isVarArgsParameter(arg, info);\n+      isVarArgs = isVarArgsParameter(arg, info);\n+\n       if (info != null && info.hasParameterType(argumentName)) {\n         parameterType =\n             info.getParameterType(argumentName).evaluate(scope, typeRegistry);\n           isVarArgs);\n \n       if (oldParameterType != null) {\n+        oldParameterType = oldParameterType.getNext();\n+      }\n+    }\n+\n+    // Copy over any old parameters that aren't in the param list.\n+    if (!isVarArgs) {\n+      while (oldParameterType != null && !isVarArgs) {\n+        builder.newParameterFromNode(oldParameterType);\n         oldParameterType = oldParameterType.getNext();\n       }\n     }\n--- a/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/LooseTypeCheckTest.java\n         \"/** @constructor \\n * @extends {F} */ \" +\n         \"function G() {}\" +\n         \"/** @override */ G.prototype.foo = function() { };\" +\n-        \"(new G()).foo(1);\",\n-        \"Function G.prototype.foo: called with 1 argument(s). \" +\n-        \"Function requires at least 0 argument(s) \" +\n-        \"and no more than 0 argument(s).\");\n+        \"(new G()).foo(1);\");\n   }\n \n   public void testMethodInference7() throws Exception {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"/** @constructor \\n * @extends {F} */ \" +\n         \"function G() {}\" +\n         \"/** @override */ G.prototype.foo = function() { };\" +\n-        \"(new G()).foo(1);\",\n-        \"Function G.prototype.foo: called with 1 argument(s). \" +\n-        \"Function requires at least 0 argument(s) \" +\n-        \"and no more than 0 argument(s).\");\n+        \"(new G()).foo(1);\");\n   }\n \n   public void testMethodInference7() throws Exception {\n         \"var s = 'hello';\" +\n         \"alert(s.toLowerCase.indexOf('1'));\",\n         \"Property indexOf never defined on String.prototype.toLowerCase\");\n+  }\n+\n+  public void testIssue368() throws Exception {\n+    testTypes(\n+        \"/** @constructor */ function Foo(){}\" +\n+        \"/**\\n\" +\n+        \" * @param {number} one\\n\" +\n+        \" * @param {string} two\\n\" +\n+        \" */\\n\" +\n+        \"Foo.prototype.add = function(one, two) {};\" +\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @extends {Foo}\\n\" +\n+        \" */\\n\" +\n+        \"function Bar(){}\" +\n+        \"/** @override */\\n\" +\n+        \"Bar.prototype.add = function(ignored) {};\" +\n+        \"(new Bar()).add(1, 2);\",\n+        \"actual parameter 2 of Bar.prototype.add does not match formal parameter\\n\" +\n+        \"found   : number\\n\" +\n+        \"required: string\");\n   }\n \n   public void testIssue380() throws Exception {", "timestamp": 1327361803, "metainfo": ""}