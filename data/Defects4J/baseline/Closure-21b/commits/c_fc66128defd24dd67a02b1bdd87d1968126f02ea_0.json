{"sha": "fc66128defd24dd67a02b1bdd87d1968126f02ea", "log": "Fold \"undefined\" to \"void 0\". Fold side-effect free \"void ...\" expressions to \"void 0\".  R=acleung DELTA=54  (52 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=544   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java\n         tryReduceOperandsForOp(subtree);\n         return tryFoldUnaryOperator(subtree);\n \n+      case Token.VOID:\n+        return tryReduceVoid(subtree);\n+\n       default:\n         tryReduceOperandsForOp(subtree);\n         return tryFoldBinaryOperator(subtree);\n       default:\n         return subtree;\n     }\n+  }\n+\n+  private Node tryReduceVoid(Node n) {\n+    Node child = n.getFirstChild();\n+    if (child.getType() != Token.NUMBER || child.getDouble() != 0.0) {\n+      if (!mayHaveSideEffects(n)) {\n+        n.replaceChild(child, Node.newNumber(0));\n+        reportCodeChange();\n+      }\n+    }\n+    return n;\n   }\n \n   private void tryReduceOperandsForOp(Node n) {\n--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java\n       case Token.CALL:\n         return tryFoldLiteralConstructor(node);\n \n+      case Token.NAME:\n+        return tryReplaceUndefined(node);\n+\n       default:\n         return node; //Nothing changed\n     }\n+  }\n+\n+  /**\n+   * Use \"void 0\" in place of \"undefined\"\n+   */\n+  private Node tryReplaceUndefined(Node n) {\n+    // TODO(johnlenz): consider doing this as a normalization.\n+    if (isASTNormalized()\n+        && NodeUtil.isUndefined(n)\n+        && !NodeUtil.isLhs(n, n.getParent())) {\n+      Node replacement = NodeUtil.newUndefinedNode(n);\n+      n.getParent().replaceChild(n, replacement);\n+      reportCodeChange();\n+      return replacement;\n+    }\n+    return n;\n   }\n \n   /**\n--- a/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java\n   public void testFoldMixed() {\n     fold(\"''+[1]\", \"'1'\");\n     foldSame(\"false+[]\"); // would like: \"\\\"false\\\"\"\n+  }\n+\n+  public void testFoldVoid() {\n+    foldSame(\"void 0\");\n+    fold(\"void 1\", \"void 0\");\n+    fold(\"void x\", \"void 0\");\n+    fold(\"void x()\", \"void x()\");\n   }\n \n   private static final List<String> LITERAL_OPERANDS =\n--- a/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n+++ b/test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java\n     foldSame(\"x = Array('a', 1, 2, 'bc', 3, {}, 'abc')\");\n     foldSame(\"x = new Array(Array(1, '2', 3, '4'))\");\n     foldSame(\"x = Array(Array(1, '2', 3, '4'))\");\n-    foldSame(\"x = new Array(Object(), Array(\\\"abc\\\", Object(), Array(Array())))\");\n-    foldSame(\"x = new Array(Object(), Array(\\\"abc\\\", Object(), Array(Array())))\");\n+    foldSame(\"x = new Array(\" +\n+        \"Object(), Array(\\\"abc\\\", Object(), Array(Array())))\");\n+    foldSame(\"x = new Array(\" +\n+        \"Object(), Array(\\\"abc\\\", Object(), Array(Array())))\");\n   }\n \n   public void testMinimizeExprCondition() {\n     fold(\"if (f) { f.bonchange(); }\", \"f && f.bonchange();\");\n     foldSame(\"if (f) { f['x'](); }\");\n   }\n+\n+  public void testUndefined() {\n+    foldSame(\"var x = undefined\");\n+    foldSame(\"function (f) {var undefined=2;var x = undefined;}\");\n+    this.enableNormalize();\n+    fold(\"var x = undefined\", \"var x=void 0\");\n+    foldSame(\n+        \"var undefined = 1;\" +\n+        \"function f() {var undefined=2;var x = undefined;}\");\n+  }\n }", "timestamp": 1297891463, "metainfo": ""}