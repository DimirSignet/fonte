{"sha": "336a54f3a39bcd967bac5f9db949c0937143a68a", "log": "Move getSourceOffset into Nodes  R=tylerg DELTA=147  (99 added, 45 deleted, 3 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2832   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerInput.java\n+++ b/src/com/google/javascript/jscomp/CompilerInput.java\n   // The AST.\n   private final SourceAst ast;\n \n-  // Source Line Information\n-  private int[] lineOffsets = null;\n-\n   // Provided and required symbols.\n   private final Set<String> provides = Sets.newHashSet();\n   private final Set<String> requires = Sets.newHashSet();\n   @Override\n   public void setSourceFile(SourceFile file) {\n     ast.setSourceFile(file);\n-    lineOffsets = null;\n   }\n \n   /** Returns the SourceAst object on which this input is based. */\n     ast.getSourceFile().setIsExtern(isExtern);\n   }\n \n-  /**\n-   * @param lineno the line of the input to get the absolute offset of.\n-   * @return the absolute offset of the start of the provided line.\n-   * @throws IllegalArgumentException if lineno is less than 1 or greater than\n-   *         the number of lines in the source.\n-   */\n+  @Override\n   public int getLineOffset(int lineno) {\n-    if (lineOffsets == null) {\n-      findLineOffsets();\n-    }\n-    if (lineno < 1 || lineno > lineOffsets.length) {\n-      throw new IllegalArgumentException(\n-          \"Expected line number between 1 and \" + lineOffsets.length);\n-    }\n-    return lineOffsets[lineno - 1];\n+    return ast.getSourceFile().getLineOffset(lineno);\n   }\n \n   /** @return The number of lines in this input. */\n   public int getNumLines() {\n-    if (lineOffsets == null) {\n-      findLineOffsets();\n-    }\n-    return lineOffsets.length;\n-  }\n-\n-  private void findLineOffsets() {\n-    try {\n-      String[] sourceLines = ast.getSourceFile().getCode().split(\"\\n\");\n-      lineOffsets = new int[sourceLines.length];\n-      for (int ii = 1; ii < sourceLines.length; ++ii) {\n-        lineOffsets[ii] =\n-            lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;\n-      }\n-    } catch (IOException e) {\n-      lineOffsets = new int[1];\n-      lineOffsets[0] = 0;\n-    }\n+    return ast.getSourceFile().getNumLines();\n   }\n \n   @Override\n--- a/src/com/google/javascript/jscomp/SourceFile.java\n+++ b/src/com/google/javascript/jscomp/SourceFile.java\n   // from a Jar, it could be the path to the Jar.\n   private String originalPath = null;\n \n+  // Source Line Information\n+  private int[] lineOffsets = null;\n+\n   // Remember the offset for the previous line query.  If the next line\n   // is after this point, we can start scanning at the previous offset rather\n   // than starting at the beginning of the file.\n     this.lastOffset = 0;\n     this.lastLine = 1;\n   }\n+\n+  @Override\n+  public int getLineOffset(int lineno) {\n+    if (lineOffsets == null) {\n+      findLineOffsets();\n+    }\n+    if (lineno < 1 || lineno > lineOffsets.length) {\n+      throw new IllegalArgumentException(\n+          \"Expected line number between 1 and \" + lineOffsets.length);\n+    }\n+    return lineOffsets[lineno - 1];\n+  }\n+\n+  /** @return The number of lines in this source file. */\n+  int getNumLines() {\n+    if (lineOffsets == null) {\n+      findLineOffsets();\n+    }\n+    return lineOffsets.length;\n+  }\n+\n+  private void findLineOffsets() {\n+    try {\n+      String[] sourceLines = getCode().split(\"\\n\");\n+      lineOffsets = new int[sourceLines.length];\n+      for (int ii = 1; ii < sourceLines.length; ++ii) {\n+        lineOffsets[ii] =\n+            lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;\n+      }\n+    } catch (IOException e) {\n+      lineOffsets = new int[1];\n+      lineOffsets[0] = 0;\n+    }\n+  }\n+\n \n   //////////////////////////////////////////////////////////////////////////////\n   // Implementation\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n \n     Arrays.sort(keys);\n     return keys;\n-  }\n-\n-  public int getLineno() {\n-    return extractLineno(sourcePosition);\n-  }\n-\n-  public int getCharno() {\n-    return extractCharno(sourcePosition);\n-  }\n-\n-  public int getSourcePosition() {\n-    return sourcePosition;\n   }\n \n   /** Can only be called when <tt>getType() == TokenStream.NUMBER</tt> */\n \n   public void setLength(int length) {\n     putIntProp(LENGTH, length);\n+  }\n+\n+  public int getLineno() {\n+    return extractLineno(sourcePosition);\n+  }\n+\n+  public int getCharno() {\n+    return extractCharno(sourcePosition);\n+  }\n+\n+  public int getSourceOffset() {\n+    StaticSourceFile file = getStaticSourceFile();\n+    int lineOffset = file == null ?\n+        Integer.MIN_VALUE : file.getLineOffset(getLineno());\n+    return lineOffset + getCharno();\n+  }\n+\n+  public int getSourcePosition() {\n+    return sourcePosition;\n   }\n \n   public void setLineno(int lineno) {\n--- a/src/com/google/javascript/rhino/jstype/SimpleSourceFile.java\n+++ b/src/com/google/javascript/rhino/jstype/SimpleSourceFile.java\n   }\n \n   @Override\n+  public int getLineOffset(int line) {\n+    return Integer.MIN_VALUE;\n+  }\n+\n+  @Override\n   public String toString() {\n     return name;\n   }\n--- a/src/com/google/javascript/rhino/jstype/StaticSourceFile.java\n+++ b/src/com/google/javascript/rhino/jstype/StaticSourceFile.java\n    * Returns whether this is an externs file.\n    */\n   boolean isExtern();\n+\n+  /**\n+   * Returns the offset of the given line number relative to the file start.\n+   * Line number should be 1-based.\n+   *\n+   * If the source file doesn't have line information, it should return\n+   * Integer.MIN_VALUE. The negative offsets will make it more obvious\n+   * what happened.\n+   *\n+   * @param lineNumber the line of the input to get the absolute offset of.\n+   * @return the absolute offset of the start of the provided line.\n+   * @throws IllegalArgumentException if lineno is less than 1 or greater than\n+   *         the number of lines in the source.\n+   */\n+  int getLineOffset(int lineNumber);\n }", "timestamp": 1311958962, "metainfo": ""}