{"sha": "c698f56dd397f1e373d9e1d7d977223d04068301", "log": "add some more special handling for goog.object.reflect.  R=johnlenz DELTA=14  (10 added, 0 deleted, 4 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=214393   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n \n   private FlowScope traverseObjectLiteral(Node n, FlowScope scope) {\n     ObjectType objectType = (ObjectType) n.getJSType();\n+\n+    // Object literals can be reflected on other types.\n+    // See CodingConvention#getObjectLiteralCase and goog.object.reflect.\n+    // Ignore these types of literals.\n+    if (objectType.hasReferenceName()) {\n+      return scope;\n+    }\n+\n     for (Node name = n.getFirstChild(); name != null;\n          name = name.getNext().getNext()) {\n       Node value = name.getNext();\n--- a/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n+++ b/test/com/google/javascript/jscomp/TypedScopeCreatorTest.java\n \n   public void testObjectLiteralCast() {\n     testSame(\"/** @constructor */ A.B = function() {}\\n\" +\n-             \"goog.reflect.object(A.B, {})\");\n+             \"A.B.prototype.isEnabled = true;\\n\" +\n+             \"goog.reflect.object(A.B, {isEnabled: 3})\\n\" +\n+             \"var x = (new A.B()).isEnabled;\");\n \n     assertEquals(\"A.B\",\n-                 globalScope.getRootNode().getLastChild().getFirstChild().\n-                 getLastChild().getFirstChild().getLastChild().getJSType().\n-                 toString());\n+        findTokenType(Token.OBJECTLIT, globalScope).toString());\n+    assertEquals(\"boolean\",\n+        findNameType(\"x\", globalScope).toString());\n   }\n \n   public void testBadObjectLiteralCast1() {", "timestamp": 1284180788, "metainfo": ""}