{"sha": "e2bd9c4adbc03c7b9fe16fa3494cc897bd90e233", "log": "added minor functionality to get number of lines  R=johnlenz,nicksantos DELTA=41  (31 added, 9 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=2251   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CompilerInput.java\n+++ b/src/com/google/javascript/jscomp/CompilerInput.java\n    */\n   public int getLineOffset(int lineno) {\n     if (lineOffsets == null) {\n-      try {\n-        String[] sourceLines = ast.getSourceFile().getCode().split(\"\\n\");\n-        lineOffsets = new int[sourceLines.length];\n-        for (int ii = 1; ii < sourceLines.length; ++ii) {\n-          lineOffsets[ii] =\n-              lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;\n-        }\n-      } catch (IOException e) {\n-        return 0;\n-      }\n+      findLineOffsets();\n     }\n     if (lineno < 1 || lineno > lineOffsets.length) {\n       throw new IllegalArgumentException(\n     }\n     return lineOffsets[lineno - 1];\n   }\n+\n+  /** @return The number of lines in this input. */\n+  public int getNumLines() {\n+    if (lineOffsets == null) {\n+      findLineOffsets();\n+    }\n+    return lineOffsets.length;\n+  }\n+\n+  private void findLineOffsets() {\n+    try {\n+      String[] sourceLines = ast.getSourceFile().getCode().split(\"\\n\");\n+      lineOffsets = new int[sourceLines.length];\n+      for (int ii = 1; ii < sourceLines.length; ++ii) {\n+        lineOffsets[ii] =\n+            lineOffsets[ii - 1] + sourceLines[ii - 1].length() + 1;\n+      }\n+    } catch (IOException e) {\n+      lineOffsets = new int[1];\n+      lineOffsets[0] = 0;\n+    }\n+  }\n+\n }", "timestamp": 1307744320, "metainfo": ""}