{"sha": "2e904fcdc3bc09e3bff557fcfca383ba7e450095", "log": "Fix some bugs in 'new' inference: - traverse children before the parent - do backwards inference on params, like we do for CALL Fixes issue 729  R=johnlenz DELTA=34  (27 added, 6 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4831   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n   }\n \n   private FlowScope traverseNew(Node n, FlowScope scope) {\n+    scope = traverseChildren(n, scope);\n+\n     Node constructor = n.getFirstChild();\n-    scope = traverse(constructor, scope);\n-\n     JSType constructorType = constructor.getJSType();\n     JSType type = null;\n     if (constructorType != null) {\n         }\n         if (ct != null && ct.isConstructor()) {\n           type = ct.getInstanceType();\n+          backwardsInferenceFromCallSite(n, ct);\n         }\n       }\n     }\n     n.setJSType(type);\n-\n-    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n-      scope = traverse(arg, scope);\n-    }\n     return scope;\n   }\n \n--- a/test/com/google/javascript/jscomp/TypeInferenceTest.java\n+++ b/test/com/google/javascript/jscomp/TypeInferenceTest.java\n import com.google.javascript.rhino.jstype.JSTypeNative;\n import com.google.javascript.rhino.jstype.JSTypeRegistry;\n import com.google.javascript.rhino.jstype.StaticSlot;\n+import com.google.javascript.rhino.testing.Asserts;\n \n import junit.framework.TestCase;\n \n   }\n \n   private void verify(String name, JSType type) {\n-    assertEquals(type, getType(name));\n+    Asserts.assertTypeEquals(type, getType(name));\n   }\n \n   private void verify(String name, JSTypeNative type) {\n             registry.getNativeType(BOOLEAN_TYPE),\n             ImmutableList.<JSType>of() /* params */));\n   }\n+\n+  public void testBackwardsInferenceCall() {\n+    inFunction(\n+        \"/** @param {{foo: (number|undefined)}} x */\" +\n+        \"function f(x) {}\" +\n+        \"var y = {};\" +\n+        \"f(y);\");\n+\n+    assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());\n+  }\n+\n+  public void testBackwardsInferenceNew() {\n+    inFunction(\n+        \"/**\\n\" +\n+        \" * @constructor\\n\" +\n+        \" * @param {{foo: (number|undefined)}} x\\n\" +\n+        \" */\" +\n+        \"function F(x) {}\" +\n+        \"var y = {};\" +\n+        \"new F(y);\");\n+\n+    assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());\n+  }\n }", "timestamp": 1337385524, "metainfo": ""}