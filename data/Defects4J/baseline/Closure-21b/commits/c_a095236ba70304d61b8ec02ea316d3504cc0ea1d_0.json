{"sha": "a095236ba70304d61b8ec02ea316d3504cc0ea1d", "log": "Store finer grain side-effect information on call nodes, also gather and a store call \"result locality\" information on call nodes.  R=nicksantos DELTA=243  (210 added, 0 deleted, 33 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=249459   ", "commit": "\n--- a/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java\n+++ b/src/com/google/javascript/jscomp/MarkNoSideEffectCalls.java\n         }\n       }\n \n-      node.setIsNoSideEffectsCall();\n+      node.setSideEffectFlags(Node.NO_SIDE_EFFECTS);\n     }\n   }\n }\n--- a/src/com/google/javascript/jscomp/NodeUtil.java\n+++ b/src/com/google/javascript/jscomp/NodeUtil.java\n     }\n \n     return true;\n+  }\n+\n+  /**\n+   * @return Whether the call has a local result.\n+   */\n+  static boolean callHasLocalResult(Node n) {\n+    Preconditions.checkState(n.getType() == Token.CALL);\n+    return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;\n   }\n \n   /**\n--- a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\n+++ b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java\n       Node name = callNode.getFirstChild();\n       Collection<Definition> defs =\n           getCallableDefinitions(definitionProvider, name);\n-      boolean hasSideEffects = true;\n-      if (defs != null) {\n-        hasSideEffects = false;\n+      // Default to side effects, non-local results\n+      SideEffectFlags flags = new SideEffectFlags();\n+      if (defs == null) {\n+        flags.setMutatesGlobalState();\n+        flags.setThrows();\n+        flags.setReturnsTainted();\n+      } else {\n+        flags.clearAllFlags();\n         for (Definition def : defs) {\n           FunctionInformation functionInfo =\n               functionSideEffectMap.get(def.getRValue());\n           Preconditions.checkNotNull(functionInfo);\n-\n-          if ((NodeUtil.isCall(callNode)\n-                  && functionInfo.mayHaveSideEffects())\n-               || (NodeUtil.isNew(callNode)\n-                      && (functionInfo.mutatesGlobalState()\n-                          || functionInfo.functionThrows()))) {\n-            hasSideEffects = true;\n+          // TODO(johnlenz): set the arguments separately from the\n+          // global state flag.\n+          if (functionInfo.mutatesGlobalState()) {\n+            flags.setMutatesGlobalState();\n+          }\n+\n+          if (functionInfo.functionThrows) {\n+            flags.setThrows();\n+          }\n+\n+          if (!NodeUtil.isNew(callNode)) {\n+            if (functionInfo.taintsThis) {\n+              flags.setMutatesThis();\n+            }\n+          }\n+\n+          if (functionInfo.taintsReturn) {\n+            flags.setReturnsTainted();\n+          }\n+\n+          if (flags.areAllFlagsSet()) {\n             break;\n           }\n         }\n       if (NodeUtil.isCall(callNode)) {\n         Preconditions.checkState(compiler != null);\n         if (!NodeUtil.functionCallHasSideEffects(callNode, compiler)) {\n-          hasSideEffects = false;\n+          flags.clearSideEffectFlags();\n         }\n       } else if (NodeUtil.isNew(callNode)) {\n         // Handle known cases now (Object, Date, RegExp, etc)\n         if (!NodeUtil.constructorCallHasSideEffects(callNode)) {\n-          hasSideEffects = false;\n-        }\n-      }\n-\n-      if (!hasSideEffects) {\n-        callNode.setIsNoSideEffectsCall();\n-      }\n+          flags.clearSideEffectFlags();\n+        }\n+      }\n+\n+      callNode.setSideEffectFlags(flags.valueOf());\n+    }\n+  }\n+\n+  private static class SideEffectFlags {\n+    private int value = Node.SIDE_EFFECTS_ALL;\n+\n+    int valueOf() {\n+      return value;\n+    }\n+\n+    /** All side-effect occur and the returned results are non-local. */\n+    void setAllFlags() {\n+      value = Node.SIDE_EFFECTS_ALL;\n+    }\n+\n+    /** No side-effects occur and the returned results are local. */\n+    void clearAllFlags() {\n+      value = Node.NO_SIDE_EFFECTS | Node.FLAG_LOCAL_RESULTS;\n+    }\n+\n+    boolean areAllFlagsSet() {\n+      return value == Node.SIDE_EFFECTS_ALL;\n+    }\n+\n+    /**\n+     * Preserve the return result flag, but clear the others:\n+     *   no global state change, no throws, no this change, no arguments change\n+     */\n+    void clearSideEffectFlags() {\n+      value |= Node.NO_SIDE_EFFECTS;\n+    }\n+\n+    void setMutatesGlobalState() {\n+      // Modify global means everything must be assumed to be modified.\n+      removeFlag(Node.FLAG_GLOBAL_STATE_UNMODIFIED);\n+      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);\n+      removeFlag(Node.FLAG_THIS_UNMODIFIED);\n+    }\n+\n+    void setThrows() {\n+      removeFlag(Node.FLAG_NO_THROWS);\n+    }\n+\n+    void setMutatesThis() {\n+      removeFlag(Node.FLAG_THIS_UNMODIFIED);\n+    }\n+\n+    void setMutatesArguments() {\n+      removeFlag(Node.FLAG_ARGUMENTS_UNMODIFIED);\n+    }\n+\n+    void setReturnsTainted() {\n+      removeFlag(Node.FLAG_LOCAL_RESULTS);\n+    }\n+\n+    private void removeFlag(int flag) {\n+      value &= ~flag;\n     }\n   }\n \n         return;\n       }\n \n-      if (!NodeUtil.nodeTypeMayHaveSideEffects(node)) {\n+      if (!NodeUtil.nodeTypeMayHaveSideEffects(node)\n+          && node.getType() != Token.RETURN) {\n         return;\n       }\n \n             case Token.THROW:\n               visitThrow(sideEffectInfo);\n               break;\n+            case Token.RETURN:\n+              if (node.hasChildren()\n+                  && !isKnownLocalValue(node.getFirstChild())) {\n+                sideEffectInfo.setTaintsReturn();\n+              }\n+              break;\n             default:\n               throw new IllegalArgumentException(\n                   \"Unhandled side effect node type \" +\n     private boolean taintsGlobalState = false;\n     private boolean taintsThis = false;\n     private boolean taintsUnknown = false;\n+    private boolean taintsReturn = false;\n \n     FunctionInformation(boolean extern) {\n       this.extern = extern;\n     }\n \n     /**\n+     * Marks the function as having non-local return result.\n+     */\n+    void setTaintsReturn() {\n+      taintsReturn = true;\n+      checkInvariant();\n+    }\n+\n+\n+    /**\n      * Returns true if function mutates global state.\n      */\n     boolean mutatesGlobalState() {\n--- a/src/com/google/javascript/rhino/Node.java\n+++ b/src/com/google/javascript/rhino/Node.java\n       ORIGINALNAME_PROP  = 39,    // The original name of the node, before\n                                   // renaming.\n       BRACELESS_TYPE     = 40,    // The type syntax without curly braces.\n-      NO_SIDE_EFFECTS_CALL = 41,  // Function or constructor call has no\n-                                  // side effects.\n+      SIDE_EFFECT_FLAGS  = 41,    // Function or constructor call side effect\n+                                  // flags\n       // Coding convention props\n       IS_CONSTANT_NAME   = 42,    // The variable or property is constant.\n       IS_OPTIONAL_PARAM  = 43,    // The parameter is optional.\n         case SYNTHETIC_BLOCK_PROP: return \"synthetic\";\n         case EMPTY_BLOCK: return \"empty_block\";\n         case ORIGINALNAME_PROP: return \"originalname\";\n-        case NO_SIDE_EFFECTS_CALL: return \"no_side_effects_call\";\n+        case SIDE_EFFECT_FLAGS: return \"side_effect_flags\";\n \n         case IS_CONSTANT_NAME:   return \"is_constant_name\";\n         case IS_OPTIONAL_PARAM:  return \"is_optional_param\";\n     return getBooleanProp(EMPTY_BLOCK);\n   }\n \n-  /**\n-   * Marks this function or constructor call node as having no side effects.\n+  // There are four values of interest:\n+  //   global state changes\n+  //   this state changes\n+  //   arguments state changes\n+  //   whether the call throws an exception\n+  //   locality of the result\n+  // We want a value of 0 to mean \"global state changes and\n+  // unknown locality of result\".\n+\n+  final public static int FLAG_GLOBAL_STATE_UNMODIFIED = 1;\n+  final public static int FLAG_THIS_UNMODIFIED = 2;\n+  final public static int FLAG_ARGUMENTS_UNMODIFIED = 4;\n+  final public static int FLAG_NO_THROWS = 8;\n+  final public static int FLAG_LOCAL_RESULTS = 16;\n+\n+  final public static int SIDE_EFFECTS_FLAGS_MASK = 31;\n+\n+  final public static int SIDE_EFFECTS_ALL = 0;\n+  final public static int NO_SIDE_EFFECTS =\n+    FLAG_GLOBAL_STATE_UNMODIFIED\n+    | FLAG_THIS_UNMODIFIED\n+    | FLAG_ARGUMENTS_UNMODIFIED\n+    | FLAG_NO_THROWS;\n+\n+\n+  /**\n+   * Marks this function or constructor call's side effect flags.\n    * This property is only meaningful for {@link Token#CALL} and\n    * {@link Token#NEW} nodes.\n    */\n-  public void setIsNoSideEffectsCall() {\n+  public void setSideEffectFlags(int flags) {\n     Preconditions.checkArgument(\n        getType() == Token.CALL || getType() == Token.NEW,\n        \"setIsNoSideEffectsCall only supports CALL and NEW nodes, got \" +\n        Token.name(getType()));\n \n-    putBooleanProp(NO_SIDE_EFFECTS_CALL, true);\n+    putIntProp(SIDE_EFFECT_FLAGS, flags);\n+  }\n+\n+  /**\n+   * Returns the side effects flags for this node.\n+   */\n+  public int getSideEffectFlags() {\n+    return getIntProp(SIDE_EFFECT_FLAGS);\n   }\n \n   /**\n    * has no side effects.\n    */\n   public boolean isNoSideEffectsCall() {\n-    return getBooleanProp(NO_SIDE_EFFECTS_CALL);\n-  }\n-\n-  /**\n-   * This should only be called for STRING nodes created in object lits.\n+    return areBitFlagsSet(getSideEffectFlags(), NO_SIDE_EFFECTS);\n+  }\n+\n+  /**\n+   * Returns true if this node is a function or constructor call that\n+   * returns a primitive or a local object (an object that has no other\n+   * references).\n+   */\n+  public boolean isLocalResultCall() {\n+    return areBitFlagsSet(getSideEffectFlags(), FLAG_LOCAL_RESULTS);\n+  }\n+\n+  /**\n+   * returns true if all the flags are set in value.\n+   */\n+  private boolean areBitFlagsSet(int value, int flags) {\n+    return (value & flags) == flags;\n+  }\n+\n+  /**\n+   * This should only be called for STRING nodes children of OBJECTLIT.\n    */\n   public boolean isQuotedString() {\n     return false;\n   }\n \n   /**\n-   * This should only be called for STRING nodes created in object lits.\n+   * This should only be called for STRING nodes children of OBJECTLIT.\n    */\n   public void setQuotedString() {\n     Kit.codeBug();\n--- a/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java\n+++ b/test/com/google/javascript/jscomp/PureFunctionIdentifierTest.java\n  */\n public class PureFunctionIdentifierTest extends CompilerTestCase {\n   List<String> noSideEffectCalls = Lists.newArrayList();\n+  List<String> localResultCalls = Lists.newArrayList();\n \n   boolean regExpHaveSideEffects = true;\n \n   protected void tearDown() throws Exception {\n     super.tearDown();\n     noSideEffectCalls.clear();\n+    localResultCalls.clear();\n     boolean regExpHaveSideEffects = true;\n   }\n \n         prefix + \"return externObj.foo\" + suffix, expected);\n   }\n \n+  public void testResultLocalitySimple() throws Exception {\n+    String prefix = \"var g; function f(){\";\n+    String suffix = \"} f()\";\n+    List<String> expected = ImmutableList.of(\"f\");\n+    List<String> notExpected = ImmutableList.of();\n+\n+    // no return\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"\" + suffix, expected);\n+    // simple return expressions\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"return 1\" + suffix, expected);\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"return 1 + 2\" + suffix, expected);\n+\n+    // global result\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"return g\" + suffix, notExpected);\n+\n+    // multiple returns\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"return 1; return 2\" + suffix, expected);\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"return 1; return g\" + suffix, notExpected);\n+\n+\n+    // local var, not yet.\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"var a = 1; return a\" + suffix, notExpected);\n+\n+    // mutate local var, not yet.\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"var a = 1; a = 2; return a\" + suffix, notExpected);\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"var a = 1; a = 2; return a + 1\" + suffix, expected);\n+\n+    // read from obj literal\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"return {foo : 1}.foo\" + suffix,\n+        notExpected);\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"var a = {foo : 1}; return a.foo\" + suffix,\n+        notExpected);\n+\n+    // read from extern\n+    checkLocalityOfMarkedCalls(\n+        prefix + \"return externObj\" + suffix, notExpected);\n+    checkLocalityOfMarkedCalls(\n+        \"function inner(x) { x.foo = 3; }\" /* to suppress missing property */ +\n+        prefix + \"return externObj.foo\" + suffix, notExpected);\n+  }\n+\n   public void testExternCalls() throws Exception {\n     String prefix = \"function f(){\";\n     String suffix = \"} f()\";\n     noSideEffectCalls.clear();\n   }\n \n+  void checkLocalityOfMarkedCalls(String source, List<String> expected) {\n+    testSame(source);\n+    assertEquals(expected, localResultCalls);\n+    localResultCalls.clear();\n+  }\n+\n   @Override\n   protected CompilerPass getProcessor(Compiler compiler) {\n     return new NoSideEffectCallEnumerator(compiler);\n       } else if (n.getType() == Token.CALL) {\n         if (!NodeUtil.functionCallHasSideEffects(n)) {\n           noSideEffectCalls.add(generateNameString(n.getFirstChild()));\n+        }\n+        if (NodeUtil.callHasLocalResult(n)) {\n+          localResultCalls.add(generateNameString(n.getFirstChild()));\n         }\n       }\n     }", "timestamp": 1285286590, "metainfo": ""}