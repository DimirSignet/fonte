{"sha": "a3ed6caf81e25d0cff2f84ba7f7dd80dab9e8086", "log": "Fix an edge case in goog.provide handling.  Also, add a type annotation to the dom apis.    ", "commit": "\n--- a/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n+++ b/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java\n       // Make sure it has the proper prefixes.\n       maybeProvidePrefixes(parent, parent.getParent(), name);\n     } else {\n-      // Remove this provide (from a previous pass) since we have an\n+      // Remove this provide if it came from a previous pass since we have an\n       // replacement already.\n-      parent.getParent().removeChild(parent);\n+      if (isNamespacePlaceholder(parent)) {\n+        parent.getParent().removeChild(parent);\n+      }\n     }\n   }\n \n       name.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n     }\n \n+    Preconditions.checkState(isNamespacePlaceholder(decl));\n     return decl;\n   }\n \n             NodeUtil.newQualifiedNameNode(namespace, node, namespace),\n             new Node(Token.OBJECTLIT)));\n     decl.putBooleanProp(Node.IS_NAMESPACE, true);\n+    Preconditions.checkState(isNamespacePlaceholder(decl));\n     return decl;\n   }\n \n      * definition.\n      */\n     void maybeRemove() {\n-      if ((providedNode != null) && (replacementCandidate != null)) {\n+      if ((providedNode != null)\n+          && (replacementCandidate != null)\n+          && isNamespacePlaceholder(providedNode)) {\n         providedParent.removeChild(providedNode);\n         compiler.reportCodeChange();\n \n     }\n   }\n \n+  /**\n+   * @return Whether the node is namespace placeholder.\n+   */\n+  private static boolean isNamespacePlaceholder(Node n) {\n+    if (!n.getBooleanProp(Node.IS_NAMESPACE)) {\n+      return false;\n+    }\n+\n+    Node value = null;\n+    if (n.getType() == Token.EXPR_RESULT) {\n+      Node assign = n.getFirstChild();\n+      value = assign.getLastChild();\n+    } else if (n.getType() == Token.VAR) {\n+      Node name = n.getFirstChild();\n+      value = name.getFirstChild();\n+    }\n+\n+    return value != null\n+      && value.getType() == Token.OBJECTLIT\n+      && !value.hasChildren();\n+  }\n+\n   // -------------------------------------------------------------------------\n \n   /**\n--- a/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n+++ b/test/com/google/javascript/jscomp/ProcessClosurePrimitivesTest.java\n          \"var a={};a.A={};a.B={};\");\n   }\n \n+  // Provide a name before the definition of the class providing the\n+  // parent namespace.\n+  public void testProvideOrder1() {\n+    additionalEndCode = \"\";\n+    addAdditionalNamespace = false;\n+    // TODO(johnlenz):  This test confirms that the constructor (a.b) isn't\n+    // improperly removed, but this result isn't really what we want as the\n+    // reassign of a.b removes the definition of \"a.b.c\".\n+    test(\"goog.provide('a.b');\" +\n+         \"goog.provide('a.b.c');\" +\n+         \"a.b.c;\" +\n+         \"a.b = function(x,y) {};\",\n+         \"var a = {};\" +\n+         \"a.b = {};\" +\n+         \"a.b.c = {};\" +\n+         \"a.b.c;\" +\n+         \"a.b = function(x,y) {};\");\n+  }\n+\n+  // Provide a name after the definition of the class providing the\n+  // parent namespace.\n+  public void testProvideOrder2() {\n+    additionalEndCode = \"\";\n+    addAdditionalNamespace = false;\n+    // TODO(johnlenz):  This test confirms that the constructor (a.b) isn't\n+    // improperly removed, but this result isn't really what we want as\n+    // namespace placeholders for a.b and a.b.c remain.\n+    test(\"goog.provide('a.b');\" +\n+         \"goog.provide('a.b.c');\" +\n+         \"a.b = function(x,y) {};\" +\n+         \"a.b.c;\",\n+         \"var a = {};\" +\n+         \"a.b = {};\" +\n+         \"a.b.c = {};\" +\n+         \"a.b = function(x,y) {};\" +\n+         \"a.b.c;\");\n+  }\n+\n+  // Provide a name after the definition of the class providing the\n+  // parent namespace.\n+  public void testProvideOrder3() {\n+    additionalEndCode = \"\";\n+    addAdditionalNamespace = false;\n+    // This tests a cleanly provided name, below a function namespace.\n+    test(\"goog.provide('a.b');\" +\n+         \"a.b = function(x,y) {};\" +\n+         \"goog.provide('a.b.c');\" +\n+         \"a.b.c;\",\n+         \"var a = {};\" +\n+         \"a.b = function(x,y) {};\" +\n+         \"a.b.c = {};\" +\n+         \"a.b.c;\");\n+  }\n+\n+  public void testProvideOrder4() {\n+    additionalEndCode = \"\";\n+    addAdditionalNamespace = false;\n+    // This tests a cleanly provided name, below a function namespace.\n+    test(\"goog.provide('goog.a');\" +\n+         \"goog.provide('goog.a.b');\" +\n+         \"if (x) {\" +\n+         \"  goog.a.b = 1;\" +\n+         \"} else {\" +\n+         \"  goog.a.b = 2;\" +\n+         \"}\",\n+\n+         \"goog.a={};\" +\n+         \"if(x)\" +\n+         \"  goog.a.b=1;\" +\n+         \"else\" +\n+         \"  goog.a.b=2;\");\n+  }  \n+\n   public void testInvalidProvide() {\n     test(\"goog.provide('a.class');\", null, INVALID_PROVIDE_ERROR);\n   }", "timestamp": 1263333218, "metainfo": ""}