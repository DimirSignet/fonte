{"sha": "22784dc96c391b01692ce686eb93b9aa0ef74ede", "log": "push reverse-inference into the type system fixes issue 669  R=johnlenz DELTA=77  (62 added, 13 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=4306   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypeInference.java\n+++ b/src/com/google/javascript/jscomp/TypeInference.java\n \n     ObjectType constraintObj =\n         ObjectType.cast(constraint.restrictByNotNullOrUndefined());\n-    if (constraintObj != null && constraintObj.isRecordType()) {\n-      ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());\n-      if (objType != null) {\n-        for (String prop : constraintObj.getOwnPropertyNames()) {\n-          JSType propType = constraintObj.getPropertyType(prop);\n-          if (!objType.isPropertyTypeDeclared(prop)) {\n-            JSType typeToInfer = propType;\n-            if (!objType.hasProperty(prop)) {\n-              typeToInfer =\n-                  getNativeType(VOID_TYPE).getLeastSupertype(propType);\n-            }\n-            objType.defineInferredProperty(prop, typeToInfer, null);\n-          }\n-        }\n-      }\n+    if (constraintObj != null) {\n+      type.matchConstraint(constraintObj);\n     }\n   }\n \n--- a/src/com/google/javascript/rhino/jstype/JSType.java\n+++ b/src/com/google/javascript/rhino/jstype/JSType.java\n    *     annotations. Otherwise, it's for warnings.\n    */\n   abstract String toStringHelper(boolean forAnnotations);\n+\n+  /**\n+   * Modify this type so that it matches the specified type.\n+   *\n+   * This is useful for reverse type-inference, where we want to\n+   * infer that an object literal matches its contraint (much like\n+   * how the java compiler does reverse-inference to figure out generics).\n+   */\n+  public void matchConstraint(ObjectType contraint) {}\n }\n--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java\n     }\n     return this;\n   }\n+\n+  @Override\n+  public void matchConstraint(ObjectType constraintObj) {\n+    // Handle the case where the constraint object is a record type.\n+    //\n+    // param constraintObj {{prop: (number|undefined)}}\n+    // function f(constraintObj) {}\n+    // f({});\n+    //\n+    // We want to modify the object literal to match the constraint, by\n+    // taking any each property on the record and trying to match\n+    // properties on this object.\n+    if (constraintObj.isRecordType()) {\n+      for (String prop : constraintObj.getOwnPropertyNames()) {\n+        JSType propType = constraintObj.getPropertyType(prop);\n+        if (!isPropertyTypeDeclared(prop)) {\n+          JSType typeToInfer = propType;\n+          if (!hasProperty(prop)) {\n+            typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)\n+                .getLeastSupertype(propType);\n+          }\n+          defineInferredProperty(prop, typeToInfer, null);\n+        }\n+      }\n+    }\n+  }\n }\n--- a/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n+++ b/src/com/google/javascript/rhino/jstype/ProxyObjectType.java\n     }\n     return this;\n   }\n+\n+  @Override\n+  public void matchConstraint(ObjectType contraint) {\n+    referencedType.matchConstraint(contraint);\n+  }\n }\n--- a/src/com/google/javascript/rhino/jstype/UnionType.java\n+++ b/src/com/google/javascript/rhino/jstype/UnionType.java\n     }\n     return currentCommonSuper;\n   }\n+\n+  @Override\n+  public void matchConstraint(ObjectType constraintObj) {\n+    for (JSType alternate : alternates) {\n+      alternate.matchConstraint(constraintObj);\n+    }\n+  }\n }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"Function MyClass.prototype.fn: called with 0 argument(s). \" +\n         \"Function requires at least 1 argument(s) \" +\n         \"and no more than 1 argument(s).\");\n+  }\n+\n+  public void testIssue669() throws Exception {\n+    testTypes(\n+        \"/** @return {{prop1: (Object|undefined)}} */\" +\n+         \"function f(a) {\" +\n+         \"  var results;\" +\n+         \"  if (a) {\" +\n+         \"    results = {};\" +\n+         \"    results.prop1 = {a: 3};\" +\n+         \"  } else {\" +\n+         \"    results = {prop2: 3};\" +\n+         \"  }\" +\n+         \"  return results;\" +\n+         \"}\");\n   }\n \n   /**", "timestamp": 1330620384, "metainfo": ""}