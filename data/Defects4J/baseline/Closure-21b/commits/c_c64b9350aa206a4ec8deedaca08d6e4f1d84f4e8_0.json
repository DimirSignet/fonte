{"sha": "c64b9350aa206a4ec8deedaca08d6e4f1d84f4e8", "log": "fix bad inference of function member properties declared in the constructor.  R=johnlenz DELTA=20  (15 added, 0 deleted, 5 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1169981   ", "commit": "\n--- a/src/com/google/javascript/jscomp/TypedScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/TypedScopeCreator.java\n      *     or {@code null} if this is a stub declaration.\n      */\n     private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n-        Node n, Node rhsValue) {\n+        Node n, @Nullable Node rhsValue) {\n       if (info != null && info.hasType()) {\n         return getDeclaredTypeInAnnotation(t, n, info);\n       } else if (info != null && info.hasEnumParameterType()) {\n           Node child = n.getFirstChild();\n           switch (child.getType()) {\n             case Token.ASSIGN:\n-              maybeCollectMember(t, child.getFirstChild(), child);\n+              maybeCollectMember(t, child.getFirstChild(), child,\n+                  child.getLastChild());\n               break;\n             case Token.GETPROP:\n-              maybeCollectMember(t, child, child);\n+              maybeCollectMember(t, child, child, null);\n               break;\n           }\n         }\n       }\n \n       private void maybeCollectMember(NodeTraversal t,\n-          Node member, Node nodeWithJsDocInfo) {\n+          Node member, Node nodeWithJsDocInfo, @Nullable Node value) {\n         JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();\n \n         // Do nothing if there is no JSDoc type info, or\n         }\n \n         member.getFirstChild().setJSType(thisType);\n-        JSType jsType = getDeclaredTypeInAnnotation(t, member, info);\n+        JSType jsType = getDeclaredGetPropType(t, info, member, value);\n         Node name = member.getLastChild();\n         if (jsType != null &&\n             (name.getType() == Token.NAME || name.getType() == Token.STRING)) {\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"inconsistent return type\\n\" +\n         \"found   : number\\n\" +\n         \"required: string\");\n+  }\n+\n+  public void testThis11() throws Exception {\n+    testTypes(\n+        \"/** @param {number} x */ function f(x) {}\" +\n+        \"/** @constructor */ function Ctor() {\" +\n+        \"  /** @this {Date} */\" +\n+        \"  this.method = function() {\" +\n+        \"    f(this);\" +\n+        \"  };\" +\n+        \"}\",\n+        \"actual parameter 1 of f does not match formal parameter\\n\" +\n+        \"found   : Date\\n\" +\n+        \"required: number\");\n   }\n \n   public void testGlobalThis1() throws Exception {", "timestamp": 1289353381, "metainfo": ""}