{"sha": "5df44dbae571f8b3fb6a9ed27fda7bb4e0230d04", "log": "all non-covered parts of the code are now covered. 100% coverage for a package, while not in itself a great thing, feels damn good   ", "commit": "\n--- a/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableByteTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n+ * @version $Id: MutableByteTest.java,v 1.3 2004/12/26 02:35:47 bayard Exp $\n  * @see MutableByte\n  */\n public class MutableByteTest extends TestCase {\n         } catch (ClassCastException ex) {}\n     }\n \n+    public void testPrimitiveValues() {\n+        MutableByte mutNum = new MutableByte( (byte) 1 );\n+        \n+        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n+        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableByte((byte) 0).toString());\n         assertEquals(\"10\", new MutableByte((byte) 10).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableDoubleTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n+ * @version $Id: MutableDoubleTest.java,v 1.3 2004/12/26 02:35:47 bayard Exp $\n  * @see MutableDouble\n  */\n public class MutableDoubleTest extends TestCase {\n         } catch (ClassCastException ex) {}\n     }\n \n+    public void testPrimitiveValues() {\n+        MutableDouble mutNum = new MutableDouble(1.7);\n+        \n+        assertEquals( 1.7F, mutNum.floatValue(), 0 );\n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0.0\", new MutableDouble(0d).toString());\n         assertEquals(\"10.0\", new MutableDouble(10d).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableFloatTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n+ * @version $Id: MutableFloatTest.java,v 1.3 2004/12/26 02:35:47 bayard Exp $\n  * @see MutableFloat\n  */\n public class MutableFloatTest extends TestCase {\n         } catch (ClassCastException ex) {}\n     }\n \n+    public void testPrimitiveValues() {\n+        MutableFloat mutNum = new MutableFloat(1.7F);\n+        \n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1.7, mutNum.doubleValue(), 0.00001 );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0.0\", new MutableFloat(0f).toString());\n         assertEquals(\"10.0\", new MutableFloat(10f).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableIntTest.java,v 1.1 2004/07/07 23:50:28 scolebourne Exp $\n+ * @version $Id: MutableIntTest.java,v 1.2 2004/12/26 02:35:47 bayard Exp $\n  * @see MutableInt\n  */\n public class MutableIntTest extends TestCase {\n         } catch (ClassCastException ex) {}\n     }\n \n+    public void testPrimitiveValues() {\n+        MutableInt mutNum = new MutableInt(1);\n+        \n+        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n+        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableInt(0).toString());\n         assertEquals(\"10\", new MutableInt(10).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableLongTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n+ * @version $Id: MutableLongTest.java,v 1.3 2004/12/26 02:35:47 bayard Exp $\n  * @see MutableLong\n  */\n public class MutableLongTest extends TestCase {\n         } catch (ClassCastException ex) {}\n     }\n \n+    public void testPrimitiveValues() {\n+        MutableLong mutNum = new MutableLong(1L);\n+\n+        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n+        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableLong(0).toString());\n         assertEquals(\"10\", new MutableLong(10).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableObjectTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableObjectTest.java\n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableObjectTest.java,v 1.1 2004/07/08 00:02:35 scolebourne Exp $\n+ * @version $Id: MutableObjectTest.java,v 1.2 2004/12/26 02:35:47 bayard Exp $\n  * @see MutableShort\n  */\n public class MutableObjectTest extends TestCase {\n     public void testToString() {\n         assertEquals(\"HI\", new MutableObject(\"HI\").toString());\n         assertEquals(\"10.0\", new MutableObject(new Double(10)).toString());\n+        assertEquals(\"null\", new MutableObject(null).toString());\n     }\n \n }\n--- a/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n /**\n  * JUnit tests.\n  * \n- * @version $Id: MutableShortTest.java,v 1.2 2004/07/07 23:50:28 scolebourne Exp $\n+ * @version $Id: MutableShortTest.java,v 1.3 2004/12/26 02:35:47 bayard Exp $\n  * @see MutableShort\n  */\n public class MutableShortTest extends TestCase {\n         } catch (ClassCastException ex) {}\n     }\n \n+    public void testPrimitiveValues() {\n+        MutableShort mutNum = new MutableShort( (short) 1 );\n+        \n+        assertEquals( 1.0F, mutNum.floatValue(), 0 );\n+        assertEquals( 1.0, mutNum.doubleValue(), 0 );\n+        assertEquals( 1, mutNum.intValue() );\n+        assertEquals( 1L, mutNum.longValue() );\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableShort((short) 0).toString());\n         assertEquals(\"10\", new MutableShort((short) 10).toString());", "timestamp": 1104028547, "metainfo": ""}