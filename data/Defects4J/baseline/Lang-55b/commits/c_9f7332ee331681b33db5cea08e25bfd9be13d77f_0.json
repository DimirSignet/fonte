{"sha": "9f7332ee331681b33db5cea08e25bfd9be13d77f", "log": "Added new method to allow work-arounds for Java bug 4071957; as specified in issue 34351  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  */\n package org.apache.commons.lang;\n \n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Iterator;\n         return getClass(loader, className, initialize );\n     }\n \n+    \n+    /**\n+     * <p>Returns the desired Method much like <code>Class.getMethod</code>, however \n+     * it ensures that the returned Method is from a public class or interface and not \n+     * from an anonymous inner class. This means that the Method is invokable and \n+     * doesn't fall foul of Java bug \n+     * <a href=\"http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957\">4071957</a>).\n+     *\n+     *  <code><pre>Set set = Collections.unmodifiableSet(...);\n+     *  Method method = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n+     *  Object result = method.invoke(set, new Object[]);</pre></code>\n+     * </p>\n+     */\n+    public static Method getPublicMethod(Class cls, String methodName, Class parameterTypes[]) \n+        throws SecurityException, NoSuchMethodException \n+    {\n+        \n+        Method declaredMethod = cls.getMethod(methodName, parameterTypes);\n+ \n+        if (Modifier.isPublic(declaredMethod.getDeclaringClass().getModifiers())) {\n+            return declaredMethod;\n+        }\n+\n+        List candidateClasses = new ArrayList();\n+        candidateClasses.addAll(getAllInterfaces(cls));\n+        candidateClasses.addAll(getAllSuperclasses(cls));\n+\n+        for (Iterator iter=candidateClasses.iterator(); iter.hasNext(); ) {\n+            Class candidateClass = (Class) iter.next();\n+            if (!Modifier.isPublic(candidateClass.getModifiers())) {\n+                continue;\n+            }\n+            Method candidateMethod;\n+            try {\n+                candidateMethod = candidateClass.getMethod(methodName, parameterTypes);\n+            } catch (NoSuchMethodException e) {\n+                continue;\n+            }\n+            if (Modifier.isPublic(candidateMethod.getDeclaringClass().getModifiers())) {\n+                return candidateMethod;\n+            }\n+        }\n+        \n+        String message = \"Can't find an public method for \" + methodName + \" \" + ArrayUtils.toString(parameterTypes); \n+        throw new NoSuchMethodException(message);\n+    }\n+\n     /**\n      * Converts a class name to a JLS stle class name.\n      *\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n package org.apache.commons.lang;\n \n import java.lang.reflect.Constructor;\n+import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.Collections;\n \n import junit.framework.Test;\n import junit.framework.TestCase;\n         return URLClassLoader.newInstance(urlScl.getURLs(), null);\n     }\n \n+    // Show the Java bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4071957\n+    // We may have to delete this if a JDK fixes the bug.\n+    public void testShowJavaBug() throws Exception {\n+        // Tests with Collections$UnmodifiableSet\n+        Set set = Collections.unmodifiableSet(new HashSet());\n+        Method isEmptyMethod = set.getClass().getMethod(\"isEmpty\",  new Class[0]);\n+        try {\n+            isEmptyMethod.invoke(set, new Object[0]);\n+            fail(\"Failed to throw IllegalAccessException as expected\");\n+        } catch(IllegalAccessException iae) {\n+            // expected\n+        }\n+    }\n+\n+    public void testGetPublicMethod() throws Exception {\n+        // Tests with Collections$UnmodifiableSet\n+        Set set = Collections.unmodifiableSet(new HashSet());\n+        Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), \"isEmpty\",  new Class[0]);\n+            assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers()));\n+ \n+        try {\n+            isEmptyMethod.invoke(set, new Object[0]);\n+        } catch(java.lang.IllegalAccessException iae) {\n+            fail(\"Should not have thrown IllegalAccessException\");\n+        }\n+               \n+        // Tests with a public Class\n+        Method toStringMethod = ClassUtils.getPublicMethod(Object.class, \"toString\",  new Class[0]);\n+            assertEquals(Object.class.getMethod(\"toString\", new Class[0]), toStringMethod);\n+    }\n+ \n }", "timestamp": 1145428214, "metainfo": ""}