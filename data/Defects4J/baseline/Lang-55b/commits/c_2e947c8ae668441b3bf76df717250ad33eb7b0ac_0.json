{"sha": "2e947c8ae668441b3bf76df717250ad33eb7b0ac", "log": "Minor performance tweaks, and some extra tests   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.63 2003/07/18 23:57:43 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.64 2003/07/19 00:22:50 scolebourne Exp $\n  */\n public class StringUtils {\n \n      * StringUtils.rightPad(\"bat\", -1, \"yz\") = \"bat\"\n      * StringUtils.rightPad(\"bat\", 1, null)  = IllegalArgumentException\n      * StringUtils.rightPad(\"bat\", 1, \"\")    = IllegalArgumentException\n+     * StringUtils.rightPad(null, 1, \"\")     = IllegalArgumentException\n      * </pre>\n      *\n      * @param str  the String to pad out, may be null\n      * @throws IllegalArgumentException if padStr is the empty String or null\n      */\n     public static String rightPad(String str, int size, String padStr) {\n-        if (str == null) {\n-            return null;\n-        }\n         int padLen;\n         if (padStr == null || (padLen = padStr.length()) == 0) {\n             throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n+        }\n+        if (str == null) {\n+            return null;\n         }\n         int strLen = str.length();\n         int pads = size - strLen;\n      * StringUtils.leftPad(\"bat\", -1, \"yz\") = \"bat\"\n      * StringUtils.leftPad(\"bat\", 1, null)  = IllegalArgumentException\n      * StringUtils.leftPad(\"bat\", 1, \"\")    = IllegalArgumentException\n+     * StringUtils.leftPad(null, 1, \"\")     = IllegalArgumentException\n      * </pre>\n      *\n      * @param str  the String to pad out, may be null\n      * @throws IllegalArgumentException if padStr is the empty String or null\n      */\n     public static String leftPad(String str, int size, String padStr) {\n-        if (str == null) {\n-            return null;\n-        }\n         int padLen;\n         if (padStr == null || (padLen = padStr.length()) == 0) {\n             throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n+        }\n+        if (str == null) {\n+            return null;\n         }\n         int strLen = str.length();\n         int pads = size - strLen;\n      * <pre>\n      * StringUtils.center(null, -1)  = null\n      * StringUtils.center(null, 4)   = null\n+     * StringUtils.center(\"ab\", -1)  = \"ab\"\n      * StringUtils.center(\"\", 4)     = \"    \"\n      * StringUtils.center(\"ab\", 4)   = \" ab \"\n      * StringUtils.center(\"abcd\", 2) = \"abcd\"\n      * @return centered String, <code>null</code> if null String input\n      */\n     public static String center(String str, int size) {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (size < 0) {\n-            size = 0;\n-        }\n-        int sz = str.length();\n-        int p = size - sz;\n-        if (p < 1) {\n+        if (str == null || size <= 0) {\n             return str;\n         }\n-        str = leftPad(str, sz + p / 2, ' ');\n+        int strLen = str.length();\n+        int pads = size - strLen;\n+        if (pads <= 0) {\n+            return str;\n+        }\n+        str = leftPad(str, strLen + pads / 2, ' ');\n         str = rightPad(str, size, ' ');\n         return str;\n     }\n      *\n      * <pre>\n      * StringUtils.center(null, -1, \" \")  = null\n+     * StringUtils.center(\"ab\", -1, \" \")  = \"ab\"\n      * StringUtils.center(null, 4, \" \")   = null\n      * StringUtils.center(\"\", 4, \" \")     = \"    \"\n      * StringUtils.center(\"ab\", 4, \" \")   = \" ab\"\n      * StringUtils.center(\"a\", 4, \"yz\")    = \"yayz\"\n      * StringUtils.center(\"abc\", 4, null) = IllegalArgumentException\n      * StringUtils.center(\"abc\", 4, \"\")   = IllegalArgumentException\n+     * StringUtils.center(null, 4, \"\")    = IllegalArgumentException\n      * </pre>\n      * \n      * @param str  the String to center, may be null\n      * @throws IllegalArgumentException if padStr is <code>null</code> or empty\n      */\n     public static String center(String str, int size, String padStr) {\n-        if (str == null) {\n-            return null;\n-        }\n         if (padStr == null || padStr.length() == 0) {\n             throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n         }\n-        if (size < 0) {\n-            size = 0;\n-        }\n-        int sz = str.length();\n-        int p = size - sz;\n-        if (p < 1) {\n+        if (str == null || size <= 0) {\n             return str;\n         }\n-        str = leftPad(str, sz + p / 2, padStr);\n+        int strLen = str.length();\n+        int pads = size - strLen;\n+        if (pads <= 0) {\n+            return str;\n+        }\n+        str = leftPad(str, strLen + pads / 2, padStr);\n         str = rightPad(str, size, padStr);\n         return str;\n     }\n      * @return the stripped String, <code>null</code> if null String input\n      */\n     public static String stripStart(String str, String stripChars) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int sz = str.length();\n-        if (sz == 0) {\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n             return str;\n         }\n- \n         int start = 0;\n         if (stripChars == null) {\n-            while ((start != sz) && Character.isWhitespace(str.charAt(start))) {\n+            while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {\n                 start++;\n             }\n         } else {\n-            while ((start != sz) && (stripChars.indexOf(str.charAt(start)) != -1)) {\n+            while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {\n                 start++;\n             }\n         }\n      * @return the stripped String, <code>null</code> if null String input\n      */\n     public static String stripEnd(String str, String stripChars) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int end = str.length();\n-        if (end == 0) {\n+        int end;\n+        if (str == null || (end = str.length()) == 0) {\n             return str;\n         }\n  \n      * @return the stripped Strings, <code>null</code> if null array input\n      */\n     public static String[] stripAll(String[] strs, String stripChars) {\n-        if ((strs == null) || (strs.length == 0)) {\n+        int strsLen;\n+        if (strs == null || (strsLen = strs.length) == 0) {\n             return strs;\n         }\n-        int sz = strs.length;\n-        String[] newArr = new String[sz];\n-        for (int i = 0; i < sz; i++) {\n+        String[] newArr = new String[strsLen];\n+        for (int i = 0; i < strsLen; i++) {\n             newArr[i] = strip(strs[i], stripChars);\n         }\n         return newArr;\n      * @return the capitalised String, <code>null</code> if null String input\n      */\n     public static String capitalise(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return \"\";\n-        }\n-        return new StringBuffer(str.length())\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n+        }\n+        return new StringBuffer(strLen)\n             .append(Character.toTitleCase(str.charAt(0)))\n             .append(str.substring(1))\n             .toString();\n      * @return the uncapitalised String, <code>null</code> if null String input\n      */\n     public static String uncapitalise(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        if (str.length() == 0) {\n-            return \"\";\n-        }\n-        return new StringBuffer(str.length())\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n+        }\n+        return new StringBuffer(strLen)\n             .append(Character.toLowerCase(str.charAt(0)))\n             .append(str.substring(1))\n             .toString();\n      * @return the changed String, <code>null</code> if null String input\n      */\n     public static String swapCase(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int sz = str.length();\n-        StringBuffer buffer = new StringBuffer(sz);\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n+        }\n+        StringBuffer buffer = new StringBuffer(strLen);\n \n         boolean whitespace = true;\n         char ch = 0;\n         char tmp = 0;\n \n-        for (int i = 0; i < sz; i++) {\n+        for (int i = 0; i < strLen; i++) {\n             ch = str.charAt(i);\n             if (Character.isUpperCase(ch)) {\n                 tmp = Character.toLowerCase(ch);\n      *\n      * <pre>\n      * StringUtils.capitaliseAllWords(null)        = null\n+     * StringUtils.capitaliseAllWords(\"\")          = \"\"\n      * StringUtils.capitaliseAllWords(\"i am FINE\") = \"I Am FINE\"\n      * </pre>\n      * \n      * @return capitalised String, <code>null</code> if null String input\n      */\n     public static String capitaliseAllWords(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int sz = str.length();\n-        StringBuffer buffer = new StringBuffer(sz);\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n+        }\n+        StringBuffer buffer = new StringBuffer(strLen);\n         boolean whitespace = true;\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n+        char[] strChars = str.toCharArray();\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = strChars[i];\n             if (Character.isWhitespace(ch)) {\n                 buffer.append(ch);\n                 whitespace = true;\n      *\n      * <pre>\n      * StringUtils.uncapitaliseAllWords(null)        = null\n+     * StringUtils.uncapitaliseAllWords(\"\")          = \"\"\n      * StringUtils.uncapitaliseAllWords(\"I Am FINE\") = \"i am fINE\"\n      * </pre>\n      * \n      * @return uncapitalised String, <code>null</code> if null String input\n      */\n     public static String uncapitaliseAllWords(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int sz = str.length();\n-        StringBuffer buffer = new StringBuffer(sz);\n-        boolean space = true;\n-        for (int i = 0; i < sz; i++) {\n-            char ch = str.charAt(i);\n+        int strLen;\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n+        }\n+        StringBuffer buffer = new StringBuffer(strLen);\n+        boolean whitespace = true;\n+        char[] strChars = str.toCharArray();\n+        for (int i = 0; i < strLen; i++) {\n+            char ch = strChars[i];\n             if (Character.isWhitespace(ch)) {\n                 buffer.append(ch);\n-                space = true;\n-            } else if (space) {\n+                whitespace = true;\n+            } else if (whitespace) {\n                 buffer.append(Character.toLowerCase(ch));\n-                space = false;\n+                whitespace = false;\n             } else {\n                 buffer.append(ch);\n             }\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n- * @version $Id: StringUtilsTest.java,v 1.27 2003/07/18 23:57:43 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.28 2003/07/19 00:22:50 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n \n     public void testCenter() {\n         assertEquals(null, StringUtils.center(null, -1));\n         assertEquals(null, StringUtils.center(null, 4));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 0));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", -1));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 1));\n         assertEquals(\"    \", StringUtils.center(\"\", 4));\n         assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n         assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n \n         assertEquals(null, StringUtils.center(null, -1, \" \"));\n         assertEquals(null, StringUtils.center(null, 4, \" \"));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 0, \" \"));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", -1, \" \"));\n+        assertEquals(\"ab\", StringUtils.center(\"ab\", 1, \" \"));\n         assertEquals(\"    \", StringUtils.center(\"\", 4, \" \"));\n         assertEquals(\" ab \", StringUtils.center(\"ab\", 4, \" \"));\n         assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n         assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n         assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n         assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n+        try {\n+            StringUtils.center(null, 4, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n         try {\n             StringUtils.center(\"abc\", 4, null);\n             fail();\n         assertEquals(\"123456-+~\", StringUtils.rightPad (\"123456\", 9, \"-+~\") );\n         assertEquals(\"123456-+\", StringUtils.rightPad (\"123456\", 8, \"-+~\") );\n         try {\n+            StringUtils.rightPad(null, 6, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n             StringUtils.rightPad(\"123456\", 6, null);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         assertEquals(\"-+-+1234\", StringUtils.leftPad(\"1234\", 8, \"-+\") );\n         assertEquals(\"-+~123456\", StringUtils.leftPad(\"123456\", 9, \"-+~\") );\n         assertEquals(\"-+123456\", StringUtils.leftPad(\"123456\", 8, \"-+~\") );\n+        try {\n+            StringUtils.leftPad(null, 6, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n         try {\n             StringUtils.leftPad(\"123456\", 6, null);\n             fail();", "timestamp": 1058574170, "metainfo": ""}