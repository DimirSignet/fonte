{"sha": "8c53ff05360997f520a7f11af1123ba68c296f52", "log": "Add  replaceChars()  to StringUtils Deprecate  translate()  on CharSetUtils   ", "commit": "\n--- a/src/java/org/apache/commons/lang/CharSetUtils.java\n+++ b/src/java/org/apache/commons/lang/CharSetUtils.java\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.16 2003/07/30 22:17:00 scolebourne Exp $\n+ * @version $Id: CharSetUtils.java,v 1.17 2003/07/31 20:38:26 scolebourne Exp $\n  */\n public class CharSetUtils {\n \n      * @throws NullPointerException if <code>with</code> or <code>repl</code> \n      *  is <code>null</code>\n      * @throws ArrayIndexOutOfBoundsException if <code>with</code> is empty (\"\")\n+     * @deprecated Use {@link StringUtils#replaceChars(String, String, String)}.\n+     *             Method will be removed in Commons Lang 3.0.\n      */\n     public static String translate(String str, String searchChars, String replaceChars) {\n         if (str == null || str.length() == 0) {\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.82 2003/07/30 22:17:49 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.83 2003/07/31 20:38:26 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n         buf.append(text.substring(start));\n         return buf.toString();\n     }\n+    \n+    // Replace, character based\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * <p>Replaces all occurrances of a character in a String with another.\n+     * This is a null-safe version of {@link String#replace(char, char)}.</p>\n+     *\n+     * <p>A <code>null</code> string input returns <code>null</code>.\n+     * An empty (\"\") string input returns an empty string.</p>\n+     * \n+     * <pre>\n+     * StringUtils.replaceChars(null, *, *)        = null\n+     * StringUtils.replaceChars(\"\", *, *)          = \"\"\n+     * StringUtils.replaceChars(\"abcba\", 'b', 'y') = \"aycya\"\n+     * StringUtils.replaceChars(\"abcba\", 'z', 'y') = \"abcba\"\n+     * </pre>\n+     * \n+     * @param str  String to replace characters in, may be null\n+     * @param searchChar  the character to search for, may be null\n+     * @param replaceChar  the character to replace, may be null\n+     * @return modified String, <code>null</code> if null string input\n+     */\n+    public static String replaceChars(String str, char searchChar, char replaceChar) {\n+        if (str == null) {\n+            return null;\n+        }\n+        return str.replace(searchChar, replaceChar);\n+    }\n+    \n+    /**\n+     * <p>Replaces multiple characters in a String in one go.\n+     * This method can also be used to delete characters.</p>\n+     *\n+     * <p>For example:<br />\n+     * <code>replaceChars(&quot;hello&quot;, &quot;ho&quot;, &quot;jy&quot;) = jelly</code>.</p>\n+     * \n+     * <p>A <code>null</code> string input returns <code>null</code>.\n+     * An empty (\"\") string input returns an empty string.\n+     * A null or empty set of search characters returns the input string.</p>\n+     * \n+     * <p>The length of the search characters should normally equal the length\n+     * of the replace characters.\n+     * If the search characters is longer, then the extra search characters\n+     * are deleted.\n+     * If the search characters is shorter, then the extra replace characters\n+     * are ignored.</p>\n+     * \n+     * <pre>\n+     * StringUtils.replaceChars(null, *, *)           = null\n+     * StringUtils.replaceChars(\"\", *, *)             = \"\"\n+     * StringUtils.replaceChars(\"abc\", null, *)       = \"abc\"\n+     * StringUtils.replaceChars(\"abc\", \"\", *)         = \"abc\"\n+     * StringUtils.replaceChars(\"abc\", \"b\", null)     = \"ac\"\n+     * StringUtils.replaceChars(\"abc\", \"b\", \"\")       = \"ac\"\n+     * StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\")  = \"ayzya\"\n+     * StringUtils.replaceChars(\"abcba\", \"bc\", \"y\")   = \"ayya\"\n+     * StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\") = \"ayzya\"\n+     * </pre>\n+     * \n+     * @param str  String to replace characters in, may be null\n+     * @param searchChars  a set of characters to search for, may be null\n+     * @param replaceChars  a set of characters to replace, may be null\n+     * @return modified String, <code>null</code> if null string input\n+     */\n+    public static String replaceChars(String str, String searchChars, String replaceChars) {\n+        if (str == null || str.length() == 0 || searchChars == null || searchChars.length()== 0) {\n+            return str;\n+        }\n+        char[] chars = str.toCharArray();\n+        int len = chars.length;\n+        boolean modified = false;\n+        for (int i = 0, isize = searchChars.length(); i < isize; i++) {\n+            char searchChar = searchChars.charAt(i);\n+            if (replaceChars == null || i >= replaceChars.length()) {\n+                // delete\n+                int pos = 0;\n+                for (int j = 0; j < len; j++) {\n+                    if (chars[j] != searchChar) {\n+                        chars[pos++] = chars[j];\n+                    } else {\n+                        modified = true;\n+                    }\n+                }\n+                len = pos;\n+            } else {\n+                // replace\n+                for (int j = 0; j < len; j++) {\n+                    if (chars[j] == searchChar) {\n+                        chars[j] = replaceChars.charAt(i);\n+                        modified = true;\n+                    }\n+                }\n+            }\n+        }\n+        if (modified == false) {\n+            return str;\n+        }\n+        return new String(chars, 0, len);\n+    }\n+\n+    // Overlay\n+    //-----------------------------------------------------------------------\n \n     /**\n      * <p>Overlays part of a String with another String.</p>\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.40 2003/07/30 22:21:39 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.41 2003/07/31 20:38:26 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n     }\n \n+    public void testReplaceChars_StringCharChar() {\n+        assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\n+        assertEquals(\"azcza\", StringUtils.replaceChars(\"abcba\", 'b', 'z'));\n+        assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\n+    }\n+    \n+    public void testReplaceChars_StringStringString() {\n+        assertEquals(\"jelly\", StringUtils.replaceChars(\"hello\", \"ho\", \"jy\"));\n+\n+        assertEquals(null, StringUtils.replaceChars(null, null, null));\n+        assertEquals(null, StringUtils.replaceChars(null, \"\", null));\n+        assertEquals(null, StringUtils.replaceChars(null, \"a\", null));\n+        assertEquals(null, StringUtils.replaceChars(null, null, \"\"));\n+        assertEquals(null, StringUtils.replaceChars(null, null, \"x\"));\n+        \n+        assertEquals(\"\", StringUtils.replaceChars(\"\", null, null));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", \"\", null));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", \"a\", null));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"\"));\n+        assertEquals(\"\", StringUtils.replaceChars(\"\", null, \"x\"));\n+\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, null));\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"\"));\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", null, \"x\"));\n+        \n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", null));\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"\"));\n+        assertEquals(\"abc\", StringUtils.replaceChars(\"abc\", \"\", \"x\"));\n+        \n+        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", null));\n+        assertEquals(\"ac\", StringUtils.replaceChars(\"abc\", \"b\", \"\"));\n+        assertEquals(\"axc\", StringUtils.replaceChars(\"abc\", \"b\", \"x\"));\n+        \n+        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yz\"));\n+        assertEquals(\"ayya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"y\"));\n+        assertEquals(\"ayzya\", StringUtils.replaceChars(\"abcba\", \"bc\", \"yzx\"));\n+        \n+        assertSame(\"abcba\", StringUtils.replaceChars(\"abcba\", \"z\", \"w\"));\n+    }\n+    \n     public void testOverlayString() {\n         assertEquals(\"overlayString(String, String, int, int) failed\",\n                      \"foo foor baz\", StringUtils.overlayString(SENTENCE, FOO, 4, 6) );", "timestamp": 1059683906, "metainfo": ""}