{"sha": "cac97555b1af54b2e8d8390c2ccc8621b36928cf", "log": "Javadoc only. Provide more uniform comments.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n import org.apache.commons.lang.exception.NestableRuntimeException;\n \n /**\n- * <p>Common <code>String</code> escaping routines.</p>\n+ * <p>Escapes and unescapes <code>String</code>s for Java, Java Script, HTML, and XML.\n  *\n  * <p>Originally from\n  * <a href=\"http://jakarta.apache.org/turbine/\">Turbine</a> and the\n  * @author <a href=\"mailto:cybertiger@cyberiantiger.org\">Antony Riley</a>\n  * @author Helge Tesgaard\n  * @author <a href=\"sean@boohai.com\">Sean Brown</a>\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: StringEscapeUtils.java,v 1.9 2003/04/16 16:31:45 bayard Exp $\n+ * @version $Id: StringEscapeUtils.java,v 1.10 2003/05/16 19:00:07 ggregory Exp $\n  */\n public class StringEscapeUtils {\n \n     /**\n-     * The entity set to use when escaping and unescaping HTML\n+     * The entity set to use when escaping and unescaping HTML.\n      */\n     protected static Entities DEFAULT_ENTITIES = Entities.HTML40;\n \n     /**\n      * <p><code>StringEscapeUtils</code> instances should NOT be constructed in\n-     * standard programming. Instead, the class should be used as\n-     * <code>StringEscapeUtils.escapeJava(\"foo\");</code>.</p>\n+     * standard programming.</p> \n+     * <p>Instead, the class should be used as:</p>\n+     * <pre>StringEscapeUtils.escapeJava(\"foo\");</pre>\n      *\n      * <p>This constructor is public to permit tools that require a JavaBean\n      * instance to operate.</p>\n     // Java and JavaScript\n     //--------------------------------------------------------------------------\n     /**\n-     * <p>Escapes any values it finds into their Java String form.\n-     * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n+     * <p>Escapes the characters in a <code>String</code> using Java String rules.</p>\n+     * <p>Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n      *\n      * <p>So a tab becomes the characters <code>'\\\\'</code> and\n      * <code>'t'</code>.</p>\n     }\n \n     /**\n+     * <p>Escapes the characters in a <code>String</code> using Java String rules to a <code>Writer</code>.</p>\n+     * \n      * @see #escapeJava(java.lang.String)\n      * @param out Writer to write escaped string into\n      * @param str String to escape values in\n     }\n \n     /**\n+     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules.</p>\n      * <p>Escapes any values it finds into their JavaScript String form.\n      * Deals correctly with quotes and control-chars (tab, backslash, cr, ff, etc.) </p>\n      *\n     }\n \n     /**\n+     * <p>Escapes the characters in a <code>String</code> using JavaScript String rules to a <code>Writer</code>.</p>\n+     * \n      * @see #escapeJavaScript(java.lang.String)\n      * @param out Writer to write escaped string into\n      * @param str String to escape values in\n         }\n     }\n \n+    /**\n+     * Returns an upper case hexadecimal <code>String</code> for the given character.\n+     * \n+     * @param ch The character to convert.\n+     * @return An upper case hexadecimal <code>String</code>\n+     */\n     private static String hex(char ch) {\n         return Integer.toHexString(ch).toUpperCase();\n     }\n \n     /**\n-     * Unescapes any Java literals found in the String. For example,\n-     * it will turn a sequence of '\\' and 'n' into a newline character,\n+     * Unescapes any Java literals found in the <code>String</code>. \n+     * For example, it will turn a sequence of '\\' and 'n' into a newline character,\n      * unless the '\\' is preceded by another '\\'.\n+     * \n+     * @param str The <code>String</code> to unescape.\n+     * @return A new unescaped <code>String</code>.\n      */\n     public static String unescapeJava(String str) {\n         try {\n         }\n     }\n \n+    /**\n+     * Unescapes any Java literals found in the <code>String</code> to a <code>Writer</code>. \n+     * For example, it will turn a sequence of '\\' and 'n' into a newline character,\n+     * unless the '\\' is preceded by another '\\'.\n+     * \n+     * @param out The <code>Writer</code> used to output unescaped characters.\n+     * @param str The <code>String</code> to unescape.\n+     */\n     public static void unescapeJava(Writer out, String str) throws IOException {\n         int sz = str.length();\n         StringBuffer unicode = new StringBuffer(4);\n         }\n     }\n \n+    /**\n+     * @see #unescapeJava(String)\n+     */\n     public static String unescapeJavaScript(String str) {\n         return unescapeJava(str);\n     }\n \n+    /**\n+     * @see #unescapeJava(Writer,String)\n+     */\n     public static void unescapeJavaScript(Writer out, String str) throws IOException {\n         unescapeJava(out, str);\n     }\n     //--------------------------------------------------------------------------\n \n     /**\n-     * <p>Turns funky characters into HTML entity equivalents.</p>\n+     * <p>Escapes the characters in a <code>String</code> using HTML entities.</p>\n      * <p>\n      * For example: <tt>\"bread\" & \"butter\"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n      * </p>\n      * <p>Supports all known HTML 4.0 entities, including funky accents.\n      * </p>\n-     * <p>\n-     * See <a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">WebMonkey</a>\n-     * <a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2</a>\n-     * <a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html</a>HTML 4.0</a>\n-     * <a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\"</a>Character references</a>\n-     * <a href=\"http://www.w3.org/TR/html401/charset.html#code-position</a>HTML 4.0: code positions</a>\n-     * </p>\n+     * \n+     * @param str The <code>String</code> to escape\n+     * @return A new escaped <code>String</code>.\n+     * \n      * @see Entities\n      * @see #unescapeHtml(String)\n+     * @see </br><a href=\"http://hotwired.lycos.com/webmonkey/reference/special_characters/\">ISO Entities</a>\n+     * @see </br><a href=\"http://www.w3.org/TR/REC-html32#latin1\">HTML 3.2 Character Entities for ISO Latin-1</a>\n+     * @see </br><a href=\"http://www.w3.org/TR/REC-html40/sgml/entities.html\">HTML 4.0 Character entity references</a>\n+     * @see </br><a href=\"http://www.w3.org/TR/html401/charset.html#h-5.3\">HTML 4.01 Character References</a>\n+     * @see </br><a href=\"http://www.w3.org/TR/html401/charset.html#code-position\">HTML 4.01 Code positions</a>\n      **/\n     public static String escapeHtml(String str) {\n         return escapeEntities(str, Entities.HTML40);\n     }\n \n     /**\n-     * <p>Given a string containing entity escapes, returns a string\n+     * <p>Unescapes a string containing entity escapes to a string\n      * containing the actual Unicode characters corresponding to the\n-     * escapes.  Supports HTML 4.0 entities.</p>\n+     * escapes. Supports HTML 4.0 entities.</p>\n      * <p>For example, the string \"&amp;lt;Fran&ccedilla;ais&amp;gt;\"\n      * will become \"<Fran\\u00E7ais>\"</p>\n      * <p>If an entity is unrecognized, it is left alone, and inserted\n      * verbatim into the result string. e.g. \"&amp;gt;&amp;zzzz;x\" will\n      * become \"&gt;&amp;zzzz;x\".</p>\n      *\n+     * @param str The <code>String</code> to unescape\n+     * @return A new unescaped <code>String</code>.\n      * @see #escapeHtml(String)\n      **/\n     public static String unescapeHtml(String str) {\n     }\n \n     /**\n-     * <p>Turns funky characters into XML entity equivalents.</p>\n+     * <p>Escapes the characters in a <code>String</code> using XML entities.</p>\n      * <p>\n      * For example: <tt>\"bread\" & \"butter\"</tt> =>\n      * <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.\n      * Supports only the four basic XML entities (gt, lt, quot, amp).\n      * Does not support DTDs or external entities.\n      * </p>\n+     * @param str The <code>String</code> to escape\n+     * @return A new escaped <code>String</code>.\n      * @see #unescapeXml(java.lang.String)\n      **/\n     public static String escapeXml(String str) {\n     }\n \n     /**\n-     * <p>Given a string containing XML entity escapes, returns a string\n+     * <p>Unescapes a string containing XML entity escapes to a string\n      * containing the actual Unicode characters corresponding to the\n      * escapes.\n      * </p>\n      * Does not support DTDs or external entities.\n      * </p>\n      *\n+     * @param str The <code>String</code> to unescape\n+     * @return A new unescaped <code>String</code>.\n      * @see #escapeXml(String)\n      **/\n     public static String unescapeXml(String str) {\n         return unescapeEntities(str, Entities.XML);\n     }\n \n+    /**\n+     * Escapes the characters in a <code>String</code> using the the given <code>Entities</code>.\n+     * \n+     * @param str The <code>String</code> to escape.\n+     * @param entities The <code>Entities</code> to escape the <code>String</code> with.\n+     * @return A new escaped <code>String</code>.\n+     */\n     private static String escapeEntities(String str, Entities entities) {\n         StringBuffer buf = new StringBuffer(str.length() * 2);\n         int i;", "timestamp": 1053111607, "metainfo": ""}