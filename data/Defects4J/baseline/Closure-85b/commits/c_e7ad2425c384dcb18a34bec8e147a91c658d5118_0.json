{"sha": "e7ad2425c384dcb18a34bec8e147a91c658d5118", "log": "Be a bit better about constructors defined in local scopes on global objects.  R=johnlenz DELTA=74  (72 added, 0 deleted, 2 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=29   ", "commit": "\n--- a/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n+++ b/src/com/google/javascript/jscomp/FunctionTypeBuilder.java\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Sets;\n+import com.google.javascript.jscomp.Scope.Var;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.JSTypeExpression;\n import com.google.javascript.rhino.Node;\n       fnType = getOrCreateConstructor();\n     } else if (isInterface) {\n       fnType = typeRegistry.createInterfaceType(fnName, sourceNode);\n-      if (scope.isGlobal() && !fnName.isEmpty()) {\n+      if (getScopeDeclaredIn().isGlobal() && !fnName.isEmpty()) {\n         typeRegistry.declareType(fnName, fnType.getInstanceType());\n       }\n       maybeSetBaseType(fnType);\n \n     maybeSetBaseType(fnType);\n \n-    if (scope.isGlobal() && !fnName.isEmpty()) {\n+    if (getScopeDeclaredIn().isGlobal() && !fnName.isEmpty()) {\n       typeRegistry.declareType(fnName, fnType.getInstanceType());\n     }\n     return fnType;\n         info.isConstructor() ||\n         info.isInterface();\n   }\n+\n+  /**\n+   * The scope that we should declare this function in, if it needs\n+   * to be declared in a scope. Notice that TypedScopeCreator takes\n+   * care of most scope-declaring.\n+   */\n+  private Scope getScopeDeclaredIn() {\n+    int dotIndex = fnName.indexOf(\".\");\n+    if (dotIndex != -1) {\n+      String rootVarName = fnName.substring(0, dotIndex);\n+      Var rootVar = scope.getVar(rootVarName);\n+      if (rootVar != null) {\n+        return rootVar.getScope();\n+      }\n+    }\n+    return scope;\n+  }\n }\n--- a/test/com/google/javascript/jscomp/TypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/TypeCheckTest.java\n         \"actual parameter 1 of ns.foo does not match formal parameter\\n\" +\n         \"found   : boolean\\n\" +\n         \"required: number\");\n+  }\n+\n+  public void testQualifiedNameInference7() throws Exception {\n+    testTypes(\n+        \"var ns = {}; \" +\n+        \"(function() { \" +\n+        \"  /** @constructor \\n * @param {number} x */ \" +\n+        \"  ns.Foo = function(x) {};\" +\n+        \"  /** @param {ns.Foo} x */ function f(x) {}\" +\n+        \"  f(new ns.Foo(true));\" +\n+        \"})();\",\n+        \"actual parameter 1 of ns.Foo does not match formal parameter\\n\" +\n+        \"found   : boolean\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testQualifiedNameInference8() throws Exception {\n+    testTypes(\n+        \"var ns = {}; \" +\n+        \"(function() { \" +\n+        \"  /** @constructor \\n * @param {number} x */ \" +\n+        \"  ns.Foo = function(x) {};\" +\n+        \"})();\" +\n+        \"/** @param {ns.Foo} x */ function f(x) {}\" +\n+        \"f(new ns.Foo(true));\",\n+        \"Parse error. Unknown type ns.Foo\");\n+  }\n+\n+  public void testQualifiedNameInference9() throws Exception {\n+    testTypes(\n+        \"var ns = {}; \" +\n+        \"ns.ns2 = {}; \" +\n+        \"(function() { \" +\n+        \"  /** @constructor \\n * @param {number} x */ \" +\n+        \"  ns.ns2.Foo = function(x) {};\" +\n+        \"  /** @param {ns.ns2.Foo} x */ function f(x) {}\" +\n+        \"  f(new ns.ns2.Foo(true));\" +\n+        \"})();\",\n+        \"actual parameter 1 of ns.ns2.Foo does not match formal parameter\\n\" +\n+        \"found   : boolean\\n\" +\n+        \"required: number\");\n+  }\n+\n+  public void testQualifiedNameInference10() throws Exception {\n+    testTypes(\n+        \"var ns = {}; \" +\n+        \"ns.ns2 = {}; \" +\n+        \"(function() { \" +\n+        \"  /** @interface */ \" +\n+        \"  ns.ns2.Foo = function() {};\" +\n+        \"  /** @constructor \\n * @implements {ns.ns2.Foo} */ \" +\n+        \"  function F() {}\" +\n+        \"  (new F());\" +\n+        \"})();\");\n   }\n \n   public void testSheqRefinedScope() throws Exception {", "timestamp": 1291165949, "metainfo": ""}