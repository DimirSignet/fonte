{"sha": "91d0d35fba40aac9316db9e2f8aa94cd3a3b6c2e", "log": "Change on 2010/07/09 07:45:34 by nicksantos  \tPreserve const annotations on variables run through run-time \ttype checking.  \tR=moedinger \tDELTA=15  (10 added, 4 deleted, 1 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=50004   ", "commit": "\n--- a/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n+++ b/src/com/google/javascript/jscomp/RuntimeTypeCheck.java\n         }\n \n         Node checkNode = createCheckTypeCallNode(\n-            paramType.getJSType(), paramName.getString());\n+            paramType.getJSType(), paramName.cloneTree());\n \n         if (checkNode == null) {\n           // We don't know how to check this parameter type.\n \n       n.replaceChild(retValue, checkNode);\n       compiler.reportCodeChange();\n-    }\n-\n-    private Node createCheckTypeCallNode(JSType type, String varName) {\n-      return createCheckTypeCallNode(type, Node.newString(Token.NAME, varName));\n     }\n \n     /**\n--- a/test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java\n+++ b/test/com/google/javascript/jscomp/RuntimeTypeCheckTest.java\n     testChecks(\"/** @param {number} i */ function f(i) {}\",\n         \"function f(i) {\" +\n         \"  jscomp.typecheck.checkType(i, \" +\n+        \"      [jscomp.typecheck.valueChecker('number')]);\" +\n+        \"}\");\n+  }\n+\n+  public void testConstValue() {\n+    // User a variable that's immutable by the google coding convention,\n+    // to ensure the immutable annotations are preserved.\n+    testChecks(\"/** @param {number} CONST */ function f(CONST) {}\",\n+        \"function f(CONST) {\" +\n+        \"  jscomp.typecheck.checkType(CONST, \" +\n         \"      [jscomp.typecheck.valueChecker('number')]);\" +\n         \"}\");\n   }", "timestamp": 1278693101, "metainfo": ""}