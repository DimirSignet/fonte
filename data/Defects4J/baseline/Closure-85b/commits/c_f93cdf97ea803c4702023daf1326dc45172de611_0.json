{"sha": "f93cdf97ea803c4702023daf1326dc45172de611", "log": "Minor parse time performance improvement (profiling was showing ~500ms spent traversing the obj lit keys).  This changes the order from O(keys^2) to O(keys).  R=nicksantos DELTA=47  (29 added, 5 deleted, 13 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=216974   ", "commit": "\n--- a/src/com/google/javascript/jscomp/PrepareAst.java\n+++ b/src/com/google/javascript/jscomp/PrepareAst.java\n           break;\n \n         case Token.OBJECTLIT:\n-          normalizeObjectLitJsDocs(n);\n-          break;\n-      }\n+          visitObjectLiteral(n);\n+          break;\n+      }\n+    }\n+\n+    private void visitObjectLiteral(Node objlit) {\n+      Preconditions.checkState(objlit.getType() == Token.OBJECTLIT);\n+      for (Node key = objlit.getFirstChild();\n+           key != null; key = key.getNext().getNext()) {\n+        Node value = key.getNext();\n+        visitObjectLiteralKey(objlit, key, value);\n+      }\n+    }\n+\n+    /**\n+     * Prepare the object literal keys.\n+     */\n+    private void visitObjectLiteralKey(Node objlit, Node key, Node value) {\n+      normalizeObjectLitJsDocs(objlit, key, value);\n+      annotateObjLitConstants(objlit, key, value);\n     }\n \n     /**\n      * But in few narrow cases (in particular, function literals), it's\n      * a lot easier for us if the doc is attached to the value.\n      */\n-    private void normalizeObjectLitJsDocs(Node n) {\n-      Preconditions.checkState(n.getType() == Token.OBJECTLIT);\n-      for (Node key = n.getFirstChild();\n-           key != null; key = key.getNext().getNext()) {\n-        Node value = key.getNext();\n-        if (key.getJSDocInfo() != null &&\n-            key.getNext().getType() == Token.FUNCTION) {\n-          value.setJSDocInfo(key.getJSDocInfo());\n-        }\n-      }\n-    }\n-\n-    /**\n-     * Mark names that are constants by convention.\n+    private void normalizeObjectLitJsDocs(Node objlit, Node key, Node value) {\n+      Preconditions.checkState(objlit.getType() == Token.OBJECTLIT);\n+      if (key.getJSDocInfo() != null &&\n+          value.getType() == Token.FUNCTION) {\n+        value.setJSDocInfo(key.getJSDocInfo());\n+      }\n+    }\n+\n+    /**\n+     * Mark names and properties that are constants by convention.\n      */\n     private void annotateConstants(Node n, Node parent) {\n       Preconditions.checkState(\n       // may be a variable reference: The right side of a GETPROP\n       // or an OBJECTLIT key.\n       if (n.getType() != Token.STRING\n-          || parent.getType() == Token.OBJECTLIT\n           || parent.getType() == Token.GETPROP) {\n         if (NodeUtil.isConstantByConvention(convention, n, parent)) {\n           n.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n+        }\n+      }\n+    }\n+\n+    /**\n+     * Mark objlit names that are constants by convention.\n+     */\n+    private void annotateObjLitConstants(Node objlit, Node key, Node value) {\n+      if (key.getType() == Token.NAME || key.getType() == Token.STRING) {\n+        String name = key.getString();\n+        if (convention.isConstantKey(name)) {\n+          key.putBooleanProp(Node.IS_CONSTANT_NAME, true);\n         }\n       }\n     }", "timestamp": 1284505497, "metainfo": ""}