{"sha": "e94b5cc0f19b45dbd6fb65ea365f67d038e815ef", "log": "Automated g4 rollback. breaks things.  R=acleung DELTA=91  (3 added, 77 deleted, 11 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=1232147   ", "commit": "\n--- a/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n+++ b/src/com/google/javascript/jscomp/AbstractCommandLineRunner.java\n   }\n \n   /**\n-   * Runs the Compiler and calls exit() with the exit status of the\n-   * compiler. By default, exit() is just System.exit().\n+   * Runs the Compiler and calls System.exit() with the exit status of the\n+   * compiler.\n    */\n   final public void run() {\n-    int exitCode = 0;\n+    int result = 0;\n     int runs = 1;\n-    Throwable error = null;\n     if (config.computePhaseOrdering) {\n       runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;\n       PhaseOptimizer.randomizeLoops();\n     }\n     try {\n-      for (int i = 0; i < runs && exitCode == 0; i++) {\n+      for (int i = 0; i < runs && result == 0; i++) {\n         runTimeStats.recordStartRun();\n-        exitCode = doRun();\n+        result = doRun();\n         runTimeStats.recordEndRun();\n       }\n+    } catch (AbstractCommandLineRunner.FlagUsageException e) {\n+      System.err.println(e.getMessage());\n+      result = -1;\n     } catch (Throwable t) {\n-      error = t;\n-    }\n-    exit(runTimeStats, error, exitCode);\n-  }\n-\n-  /**\n-   * Exits the current process. Prints out any \"process\" statistics\n-   * that the user might need to know about.\n-   */\n-  void exit(RunTimeStats runTimeStats, Throwable error, int exitCode) {\n-    if (error instanceof AbstractCommandLineRunner.FlagUsageException) {\n-      System.err.println(error.getMessage());\n-      exitCode = 2;\n-    } else if (error != null) {\n-      error.printStackTrace();\n-      exitCode = 37;\n+      t.printStackTrace();\n+      result = -2;\n     }\n \n     if (config.computePhaseOrdering) {\n     }\n \n     if (testMode) {\n-      exitCodeReceiverForTesting.apply(exitCode);\n+      exitCodeReceiverForTesting.apply(result);\n     } else {\n-      System.exit(exitCode);\n+      System.exit(result);\n     }\n   }\n \n     out.append(\"\\n\");\n   }\n \n-  class RunTimeStats {\n+  private class RunTimeStats {\n     private long bestRunTime = Long.MAX_VALUE;\n     private long worstRunTime = Long.MIN_VALUE;\n-    long lastStartTime = 0;\n+    private long lastStartTime = 0;\n     private List<List<String>> loopedPassesInBestRun = null;\n \n     /**", "timestamp": 1290127404, "metainfo": ""}