{"sha": "6d8fd424925b186d720112e4f14e6898386a66b0", "log": "Fix the CATCH tree structure.  R=johnlenz,dhans DELTA=341  (5 added, 116 deleted, 220 changed)   Revision created by MOE tool push_codebase. MOE_MIGRATION=211729   ", "commit": "\n--- a/src/com/google/javascript/jscomp/CodeGenerator.java\n+++ b/src/com/google/javascript/jscomp/CodeGenerator.java\n       }\n \n       case Token.CATCH:\n-        Preconditions.checkState(childCount == 3);\n-        if (first.getNext().getType() != Token.EMPTY) {\n-          throw new Error(\"Catch conditions not suppored because I think\" +\n-                          \" that it may be a netscape only feature.\");\n-        }\n-\n+        Preconditions.checkState(childCount == 2);\n         add(\"catch(\");\n         add(first);\n         add(\")\");\n--- a/src/com/google/javascript/jscomp/NodeTraversal.java\n+++ b/src/com/google/javascript/jscomp/NodeTraversal.java\n     if (!callback.shouldTraverse(this, n, parent)) return;\n \n     switch (type) {\n-      case Token.CATCH:\n-        Preconditions.checkState(n.getChildCount() == 3);\n-        Preconditions.checkState(n.getFirstChild().getType() == Token.NAME);\n-        // the first child is the catch var and the third child\n-        // is the code block\n-        traverseBranch(n.getFirstChild(), n);\n-        traverseBranch(n.getFirstChild().getNext().getNext(), n);\n-        break;\n-\n       case Token.FUNCTION:\n         traverseFunction(n, parent);\n         break;\n--- a/src/com/google/javascript/jscomp/SyntacticScopeCreator.java\n+++ b/src/com/google/javascript/jscomp/SyntacticScopeCreator.java\n         return;   // should not examine function's children\n \n       case Token.CATCH:\n-        Preconditions.checkState(n.getChildCount() == 3);\n+        Preconditions.checkState(n.getChildCount() == 2);\n         Preconditions.checkState(n.getFirstChild().getType() == Token.NAME);\n         // the first child is the catch var and the third child\n         // is the code block\n \n         final Node var = n.getFirstChild();\n-        final Node block = var.getNext().getNext();\n+        final Node block = var.getNext();\n \n         declareVar(var.getString(), var, n, parent, null, n);\n         scanVars(block, n);\n--- a/src/com/google/javascript/jscomp/parsing/IRFactory.java\n+++ b/src/com/google/javascript/jscomp/parsing/IRFactory.java\n       AstNode catchVar = clauseNode.getVarName();\n       Node node = newNode(Token.CATCH, transform(catchVar));\n       if (clauseNode.getCatchCondition() != null) {\n-        node.addChildToBack(transform(clauseNode.getCatchCondition()));\n-      } else {\n-        Node catchCondition = newNode(Token.EMPTY);\n-        // Old Rhino used the position of the catchVar as the position\n-        // for the (nonexistent) error being caught.\n-        catchCondition.setLineno(catchVar.getLineno());\n-        int clauseAbsolutePosition =\n-            position2charno(catchVar.getAbsolutePosition());\n-        catchCondition.setCharno(clauseAbsolutePosition);\n-        node.addChildToBack(catchCondition);\n+        errorReporter.error(\n+            \"Catch clauses are not supported\",\n+            sourceName,\n+            clauseNode.getCatchCondition().getLineno(), \"\", 0);\n       }\n       node.addChildToBack(transformBlock(clauseNode.getBody()));\n       return node;\n--- a/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java\n+++ b/test/com/google/javascript/jscomp/ControlFlowAnalysisTest.java\n \n   public void testSimpleCatch() {\n     String src = \"try{ throw x; x(); x['stuff']; x.x; x} catch (e) { e() }\";\n-    String expected = \"digraph AST {\\n\" +\n-      \"  node [color=lightblue2, style=filled];\\n\" +\n-      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n-      \"  node1 [label=\\\"TRY\\\"];\\n\" +\n-      \"  node0 -> node1 [weight=1];\\n\" +\n-      \"  node2 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node1 -> node2 [weight=1];\\n\" +\n-      \"  node3 [label=\\\"THROW\\\"];\\n\" +\n-      \"  node2 -> node3 [weight=1];\\n\" +\n-      \"  node4 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node3 -> node4 [weight=1];\\n\" +\n-      \"  node5 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node3 -> node5 \" +\n-      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node6 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n-      \"  node2 -> node6 [weight=1];\\n\" +\n-      \"  node7 [label=\\\"CALL\\\"];\\n\" +\n-      \"  node6 -> node7 [weight=1];\\n\" +\n-      \"  node8 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node7 -> node8 [weight=1];\\n\" +\n-      \"  node9 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n-      \"  node6 -> node5 \" +\n-      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node6 -> node9 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node2 -> node9 [weight=1];\\n\" +\n-      \"  node10 [label=\\\"GETELEM\\\"];\\n\" +\n-      \"  node9 -> node10 [weight=1];\\n\" +\n-      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node10 -> node11 [weight=1];\\n\" +\n-      \"  node12 [label=\\\"STRING\\\"];\\n\" +\n-      \"  node10 -> node12 [weight=1];\\n\" +\n-      \"  node13 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n-      \"  node9 -> node13 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node9 -> node5 \" +\n-      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node2 -> node13 [weight=1];\\n\" +\n-      \"  node14 [label=\\\"GETPROP\\\"];\\n\" +\n-      \"  node13 -> node14 [weight=1];\\n\" +\n-      \"  node15 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node14 -> node15 [weight=1];\\n\" +\n-      \"  node16 [label=\\\"STRING\\\"];\\n\" +\n-      \"  node14 -> node16 [weight=1];\\n\" +\n-      \"  node17 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n-      \"  node13 -> node17 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node13 -> node5 \" +\n-      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node2 -> node17 [weight=1];\\n\" +\n-      \"  node18 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node17 -> node18 [weight=1];\\n\" +\n-      \"  node17 -> RETURN \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node2 -> node3 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node1 -> node5 [weight=1];\\n\" +\n-      \"  node19 [label=\\\"CATCH\\\"];\\n\" +\n-      \"  node5 -> node19 [weight=1];\\n\" +\n-      \"  node20 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node19 -> node20 [weight=1];\\n\" +\n-      \"  node21 [label=\\\"EMPTY\\\"];\\n\" +\n-      \"  node19 -> node21 [weight=1];\\n\" +\n-      \"  node22 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node19 -> node22 [weight=1];\\n\" +\n-      \"  node23 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n-      \"  node22 -> node23 [weight=1];\\n\" +\n-      \"  node24 [label=\\\"CALL\\\"];\\n\" +\n-      \"  node23 -> node24 [weight=1];\\n\" +\n-      \"  node25 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node24 -> node25 [weight=1];\\n\" +\n-      \"  node23 -> RETURN \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node22 -> node23 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node19 -> node22 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node5 -> node19 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node1 -> node2 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node0 -> node1 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"}\\n\";\n+    String expected = \"digraph AST {\\n\"\n+        + \"  node [color=lightblue2, style=filled];\\n\"\n+        + \"  node0 [label=\\\"SCRIPT\\\"];\\n\"\n+        + \"  node1 [label=\\\"TRY\\\"];\\n\"\n+        + \"  node0 -> node1 [weight=1];\\n\"\n+        + \"  node2 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node1 -> node2 [weight=1];\\n\"\n+        + \"  node3 [label=\\\"THROW\\\"];\\n\"\n+        + \"  node2 -> node3 [weight=1];\\n\"\n+        + \"  node4 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node3 -> node4 [weight=1];\\n\"\n+        + \"  node5 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node3 -> node5 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node6 [label=\\\"EXPR_RESULT\\\"];\\n\"\n+        + \"  node2 -> node6 [weight=1];\\n\"\n+        + \"  node7 [label=\\\"CALL\\\"];\\n\"\n+        + \"  node6 -> node7 [weight=1];\\n\"\n+        + \"  node8 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node7 -> node8 [weight=1];\\n\"\n+        + \"  node9 [label=\\\"EXPR_RESULT\\\"];\\n\"\n+        + \"  node6 -> node5 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node6 -> node9 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> node9 [weight=1];\\n\"\n+        + \"  node10 [label=\\\"GETELEM\\\"];\\n\"\n+        + \"  node9 -> node10 [weight=1];\\n\"\n+        + \"  node11 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node10 -> node11 [weight=1];\\n\"\n+        + \"  node12 [label=\\\"STRING\\\"];\\n\"\n+        + \"  node10 -> node12 [weight=1];\\n\"\n+        + \"  node13 [label=\\\"EXPR_RESULT\\\"];\\n\"\n+        + \"  node9 -> node13 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node9 -> node5 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> node13 [weight=1];\\n\"\n+        + \"  node14 [label=\\\"GETPROP\\\"];\\n\"\n+        + \"  node13 -> node14 [weight=1];\\n\"\n+        + \"  node15 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node14 -> node15 [weight=1];\\n\"\n+        + \"  node16 [label=\\\"STRING\\\"];\\n\"\n+        + \"  node14 -> node16 [weight=1];\\n\"\n+        + \"  node17 [label=\\\"EXPR_RESULT\\\"];\\n\"\n+        + \"  node13 -> node17 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node13 -> node5 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> node17 [weight=1];\\n\"\n+        + \"  node18 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node17 -> node18 [weight=1];\\n\"\n+        + \"  node17 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> node3 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node5 [weight=1];\\n\"\n+        + \"  node19 [label=\\\"CATCH\\\"];\\n\"\n+        + \"  node5 -> node19 [weight=1];\\n\"\n+        + \"  node20 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node19 -> node20 [weight=1];\\n\"\n+        + \"  node21 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node19 -> node21 [weight=1];\\n\"\n+        + \"  node22 [label=\\\"EXPR_RESULT\\\"];\\n\"\n+        + \"  node21 -> node22 [weight=1];\\n\"\n+        + \"  node23 [label=\\\"CALL\\\"];\\n\"\n+        + \"  node22 -> node23 [weight=1];\\n\"\n+        + \"  node24 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node23 -> node24 [weight=1];\\n\"\n+        + \"  node22 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node21 -> node22 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node19 -> node21 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node5 -> node19 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node2 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"}\\n\";\n     testCfg(src, expected);\n   }\n \n   public void testFunctionWithinTry() {\n     // Make sure we don't search for the handler outside of the function.\n     String src = \"try { function f() {throw 1;} } catch (e) { }\";\n-    String expected = \"digraph AST {\\n\" +\n-      \"  node [color=lightblue2, style=filled];\\n\" +\n-      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n-      \"  node1 [label=\\\"TRY\\\"];\\n\" +\n-      \"  node0 -> node1 [weight=1];\\n\" +\n-      \"  node2 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node1 -> node2 [weight=1];\\n\" +\n-      \"  node3 [label=\\\"FUNCTION\\\"];\\n\" +\n-      \"  node2 -> node3 [weight=1];\\n\" +\n-      \"  node4 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node3 -> node4 [weight=1];\\n\" +\n-      \"  node5 [label=\\\"LP\\\"];\\n\" +\n-      \"  node3 -> node5 [weight=1];\\n\" +\n-      \"  node6 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node3 -> node6 [weight=1];\\n\" +\n-      \"  node7 [label=\\\"THROW\\\"];\\n\" +\n-      \"  node6 -> node7 [weight=1];\\n\" +\n-      \"  node8 [label=\\\"NUMBER\\\"];\\n\" +\n-      \"  node7 -> node8 [weight=1];\\n\" +\n-      \"  node6 -> node7 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node3 -> node6 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node2 -> RETURN \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node9 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node1 -> node9 [weight=1];\\n\" +\n-      \"  node10 [label=\\\"CATCH\\\"];\\n\" +\n-      \"  node9 -> node10 [weight=1];\\n\" +\n-      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node10 -> node11 [weight=1];\\n\" +\n-      \"  node12 [label=\\\"EMPTY\\\"];\\n\" +\n-      \"  node10 -> node12 [weight=1];\\n\" +\n-      \"  node13 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node10 -> node13 [weight=1];\\n\" +\n-      \"  node13 -> RETURN \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node10 -> node13 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node9 -> node10 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node1 -> node2 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node0 -> node1 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-    \"}\\n\";\n+    String expected = \"digraph AST {\\n\"\n+        + \"  node [color=lightblue2, style=filled];\\n\"\n+        + \"  node0 [label=\\\"SCRIPT\\\"];\\n\"\n+        + \"  node1 [label=\\\"TRY\\\"];\\n\"\n+        + \"  node0 -> node1 [weight=1];\\n\"\n+        + \"  node2 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node1 -> node2 [weight=1];\\n\"\n+        + \"  node3 [label=\\\"FUNCTION\\\"];\\n\"\n+        + \"  node2 -> node3 [weight=1];\\n\"\n+        + \"  node4 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node3 -> node4 [weight=1];\\n\"\n+        + \"  node5 [label=\\\"LP\\\"];\\n\"\n+        + \"  node3 -> node5 [weight=1];\\n\"\n+        + \"  node6 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node3 -> node6 [weight=1];\\n\"\n+        + \"  node7 [label=\\\"THROW\\\"];\\n\"\n+        + \"  node6 -> node7 [weight=1];\\n\"\n+        + \"  node8 [label=\\\"NUMBER\\\"];\\n\"\n+        + \"  node7 -> node8 [weight=1];\\n\"\n+        + \"  node6 -> node7 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node6 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node9 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node1 -> node9 [weight=1];\\n\"\n+        + \"  node10 [label=\\\"CATCH\\\"];\\n\"\n+        + \"  node9 -> node10 [weight=1];\\n\"\n+        + \"  node11 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node10 -> node11 [weight=1];\\n\"\n+        + \"  node12 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node10 -> node12 [weight=1];\\n\"\n+        + \"  node12 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node10 -> node12 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node9 -> node10 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node2 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"}\\n\";\n     testCfg(src, expected);\n   }\n \n   public void testNestedCatch() {\n     // Make sure we are going to the right handler.\n     String src = \"try{try{throw 1;}catch(e){throw 2}}catch(f){}\";\n-    String expected = \"digraph AST {\\n\" +\n-      \"  node [color=lightblue2, style=filled];\\n\" +\n-      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n-      \"  node1 [label=\\\"TRY\\\"];\\n\" +\n-      \"  node0 -> node1 [weight=1];\\n\" +\n-      \"  node2 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node1 -> node2 [weight=1];\\n\" +\n-      \"  node3 [label=\\\"TRY\\\"];\\n\" +\n-      \"  node2 -> node3 [weight=1];\\n\" +\n-      \"  node4 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node3 -> node4 [weight=1];\\n\" +\n-      \"  node5 [label=\\\"THROW\\\"];\\n\" +\n-      \"  node4 -> node5 [weight=1];\\n\" +\n-      \"  node6 [label=\\\"NUMBER\\\"];\\n\" +\n-      \"  node5 -> node6 [weight=1];\\n\" +\n-      \"  node7 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node5 -> node7 \" +\n-      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node4 -> node5 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node3 -> node7 [weight=1];\\n\" +\n-      \"  node8 [label=\\\"CATCH\\\"];\\n\" +\n-      \"  node7 -> node8 [weight=1];\\n\" +\n-      \"  node9 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node8 -> node9 [weight=1];\\n\" +\n-      \"  node10 [label=\\\"EMPTY\\\"];\\n\" +\n-      \"  node8 -> node10 [weight=1];\\n\" +\n-      \"  node11 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node8 -> node11 [weight=1];\\n\" +\n-      \"  node12 [label=\\\"THROW\\\"];\\n\" +\n-      \"  node11 -> node12 [weight=1];\\n\" +\n-      \"  node13 [label=\\\"NUMBER\\\"];\\n\" +\n-      \"  node12 -> node13 [weight=1];\\n\" +\n-      \"  node14 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node12 -> node14 \" +\n-      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node11 -> node12 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node8 -> node11 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node7 -> node8 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node3 -> node4 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node2 -> node3 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node1 -> node14 [weight=1];\\n\" +\n-      \"  node15 [label=\\\"CATCH\\\"];\\n\" +\n-      \"  node14 -> node15 [weight=1];\\n\" +\n-      \"  node16 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node15 -> node16 [weight=1];\\n\" +\n-      \"  node17 [label=\\\"EMPTY\\\"];\\n\" +\n-      \"  node15 -> node17 [weight=1];\\n\" +\n-      \"  node18 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node15 -> node18 [weight=1];\\n\" +\n-      \"  node18 -> RETURN \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node15 -> node18 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node14 -> node15 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node1 -> node2 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node0 -> node1 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"}\\n\";\n+    String expected = \"digraph AST {\\n\"\n+        + \"  node [color=lightblue2, style=filled];\\n\"\n+        + \"  node0 [label=\\\"SCRIPT\\\"];\\n\"\n+        + \"  node1 [label=\\\"TRY\\\"];\\n\"\n+        + \"  node0 -> node1 [weight=1];\\n\"\n+        + \"  node2 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node1 -> node2 [weight=1];\\n\"\n+        + \"  node3 [label=\\\"TRY\\\"];\\n\"\n+        + \"  node2 -> node3 [weight=1];\\n\"\n+        + \"  node4 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node3 -> node4 [weight=1];\\n\"\n+        + \"  node5 [label=\\\"THROW\\\"];\\n\"\n+        + \"  node4 -> node5 [weight=1];\\n\"\n+        + \"  node6 [label=\\\"NUMBER\\\"];\\n\"\n+        + \"  node5 -> node6 [weight=1];\\n\"\n+        + \"  node7 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node5 -> node7 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node4 -> node5 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node7 [weight=1];\\n\"\n+        + \"  node8 [label=\\\"CATCH\\\"];\\n\"\n+        + \"  node7 -> node8 [weight=1];\\n\"\n+        + \"  node9 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node8 -> node9 [weight=1];\\n\"\n+        + \"  node10 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node8 -> node10 [weight=1];\\n\"\n+        + \"  node11 [label=\\\"THROW\\\"];\\n\"\n+        + \"  node10 -> node11 [weight=1];\\n\"\n+        + \"  node12 [label=\\\"NUMBER\\\"];\\n\"\n+        + \"  node11 -> node12 [weight=1];\\n\"\n+        + \"  node13 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node11 -> node13 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node10 -> node11 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node8 -> node10 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node7 -> node8 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node4 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> node3 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node13 [weight=1];\\n\"\n+        + \"  node14 [label=\\\"CATCH\\\"];\\n\"\n+        + \"  node13 -> node14 [weight=1];\\n\"\n+        + \"  node15 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node14 -> node15 [weight=1];\\n\"\n+        + \"  node16 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node14 -> node16 [weight=1];\\n\"\n+        + \"  node16 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node14 -> node16 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node13 -> node14 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node2 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"}\\n\";\n     testCfg(src, expected);\n   }\n \n   public void testSimpleCatchFinally() {\n     // Make sure we are going to the right handler.\n     String src = \"try{ if(a){throw 1}else{a} } catch(e){a}finally{a}\";\n-    String expected = \"digraph AST {\\n\" +\n-      \"  node [color=lightblue2, style=filled];\\n\" +\n-      \"  node0 [label=\\\"SCRIPT\\\"];\\n\" +\n-      \"  node1 [label=\\\"TRY\\\"];\\n\" +\n-      \"  node0 -> node1 [weight=1];\\n\" +\n-      \"  node2 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node1 -> node2 [weight=1];\\n\" +\n-      \"  node3 [label=\\\"IF\\\"];\\n\" +\n-      \"  node2 -> node3 [weight=1];\\n\" +\n-      \"  node4 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node3 -> node4 [weight=1];\\n\" +\n-      \"  node5 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node3 -> node5 [weight=1];\\n\" +\n-      \"  node6 [label=\\\"THROW\\\"];\\n\" +\n-      \"  node5 -> node6 [weight=1];\\n\" +\n-      \"  node7 [label=\\\"NUMBER\\\"];\\n\" +\n-      \"  node6 -> node7 [weight=1];\\n\" +\n-      \"  node8 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node6 -> node8 \" +\n-      \"[label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node5 -> node6 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node9 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node3 -> node9 [weight=1];\\n\" +\n-      \"  node10 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n-      \"  node9 -> node10 [weight=1];\\n\" +\n-      \"  node11 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node10 -> node11 [weight=1];\\n\" +\n-      \"  node12 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node10 -> node12 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node9 -> node10 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node3 -> node5 \" +\n-      \"[label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node3 -> node9 \" +\n-      \"[label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node2 -> node3 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node1 -> node8 [weight=1];\\n\" +\n-      \"  node13 [label=\\\"CATCH\\\"];\\n\" +\n-      \"  node8 -> node13 [weight=1];\\n\" +\n-      \"  node14 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node13 -> node14 [weight=1];\\n\" +\n-      \"  node15 [label=\\\"EMPTY\\\"];\\n\" +\n-      \"  node13 -> node15 [weight=1];\\n\" +\n-      \"  node16 [label=\\\"BLOCK\\\"];\\n\" +\n-      \"  node13 -> node16 [weight=1];\\n\" +\n-      \"  node17 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n-      \"  node16 -> node17 [weight=1];\\n\" +\n-      \"  node18 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node17 -> node18 [weight=1];\\n\" +\n-      \"  node17 -> node12 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node16 -> node17 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node13 -> node16 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node8 -> node13 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node1 -> node12 [weight=1];\\n\" +\n-      \"  node19 [label=\\\"EXPR_RESULT\\\"];\\n\" +\n-      \"  node12 -> node19 [weight=1];\\n\" +\n-      \"  node20 [label=\\\"NAME\\\"];\\n\" +\n-      \"  node19 -> node20 [weight=1];\\n\" +\n-      \"  node19 -> RETURN \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node12 -> node19 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node1 -> node2 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"  node0 -> node1 \" +\n-      \"[label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\" +\n-      \"}\\n\";\n+    String expected = \"digraph AST {\\n\"\n+        + \"  node [color=lightblue2, style=filled];\\n\"\n+        + \"  node0 [label=\\\"SCRIPT\\\"];\\n\"\n+        + \"  node1 [label=\\\"TRY\\\"];\\n\"\n+        + \"  node0 -> node1 [weight=1];\\n\"\n+        + \"  node2 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node1 -> node2 [weight=1];\\n\"\n+        + \"  node3 [label=\\\"IF\\\"];\\n\"\n+        + \"  node2 -> node3 [weight=1];\\n\"\n+        + \"  node4 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node3 -> node4 [weight=1];\\n\"\n+        + \"  node5 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node3 -> node5 [weight=1];\\n\"\n+        + \"  node6 [label=\\\"THROW\\\"];\\n\"\n+        + \"  node5 -> node6 [weight=1];\\n\"\n+        + \"  node7 [label=\\\"NUMBER\\\"];\\n\"\n+        + \"  node6 -> node7 [weight=1];\\n\"\n+        + \"  node8 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node6 -> node8 [label=\\\"ON_EX\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node5 -> node6 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node9 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node3 -> node9 [weight=1];\\n\"\n+        + \"  node10 [label=\\\"EXPR_RESULT\\\"];\\n\"\n+        + \"  node9 -> node10 [weight=1];\\n\"\n+        + \"  node11 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node10 -> node11 [weight=1];\\n\"\n+        + \"  node12 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node10 -> node12 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node9 -> node10 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node5 [label=\\\"ON_TRUE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node3 -> node9 [label=\\\"ON_FALSE\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node2 -> node3 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node8 [weight=1];\\n\"\n+        + \"  node13 [label=\\\"CATCH\\\"];\\n\"\n+        + \"  node8 -> node13 [weight=1];\\n\"\n+        + \"  node14 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node13 -> node14 [weight=1];\\n\"\n+        + \"  node15 [label=\\\"BLOCK\\\"];\\n\"\n+        + \"  node13 -> node15 [weight=1];\\n\"\n+        + \"  node16 [label=\\\"EXPR_RESULT\\\"];\\n\"\n+        + \"  node15 -> node16 [weight=1];\\n\"\n+        + \"  node17 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node16 -> node17 [weight=1];\\n\"\n+        + \"  node16 -> node12 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node15 -> node16 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node13 -> node15 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node8 -> node13 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node12 [weight=1];\\n\"\n+        + \"  node18 [label=\\\"EXPR_RESULT\\\"];\\n\"\n+        + \"  node12 -> node18 [weight=1];\\n\"\n+        + \"  node19 [label=\\\"NAME\\\"];\\n\"\n+        + \"  node18 -> node19 [weight=1];\\n\"\n+        + \"  node18 -> RETURN [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node12 -> node18 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node1 -> node2 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"  node0 -> node1 [label=\\\"UNCOND\\\", fontcolor=\\\"red\\\", weight=0.01, color=\\\"red\\\"];\\n\"\n+        + \"}\\n\";\n     testCfg(src, expected);\n   }\n \n       int expectedType = nodeTypes.get(i);\n       int actualType = cfgNodes.get(i).getValue().getType();\n       assertEquals(\n-          \"Node type mismatch at \" + i + \".\\n\" +\n+          \"node type mismatch at \" + i + \".\\n\" +\n           \"found   : \" + Token.name(actualType) + \"\\n\" +\n           \"required: \" + Token.name(expectedType) + \"\\n\",\n           expectedType, actualType);\n--- a/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/IRFactoryTest.java\n     parse(\"new A(b, c)\");\n   }\n \n-  public void testTry() {\n-    parse(\"try { a(); } catch (e) { b(); }\");\n-  }\n-\n-  public void testTry2() {\n-    parse(\"try { a(); } finally { b(); }\");\n-  }\n-\n-  public void testTry3() {\n-    parse(\"try { a(); } catch (e) { b(); } finally { c(); }\");\n-  }\n-\n-  public void testTry4() {\n-    parse(\"try { a(); }\" +\n-        \"catch (e if e == 'b') { b(); } \" +\n-        \"catch (e if e == 'c') { c(); }\");\n-  }\n-\n-  public void testTry5() {\n-    parse(\"try { a(); }\" +\n-        \"catch (e if e == 'b') { b(); } \" +\n-        \"catch (e if e == 'c') { c(); } \" +\n-        \"catch (e) { d(); } \" +\n-        \"finally { f(); }\");\n-  }\n-\n   public void testFunction() {\n     parse(\"function f() {}\");\n   }\n     Node catchBlock = tryBlock.getNext();\n     Node catchStmt = catchBlock.getFirstChild();\n     Node exceptionVar = catchStmt.getFirstChild();\n-    Node catchCondition = exceptionVar.getNext();\n-    Node exceptionBlock = catchCondition.getNext();\n+    Node exceptionBlock = exceptionVar.getNext();\n     Node varDecl = exceptionBlock.getFirstChild();\n-\n \n     assertNodePosition(1, 0, tryStmt);\n     assertNodePosition(1, 4, tryBlock);\n     assertNodePosition(3, 0, catchBlock);\n     assertNodePosition(3, 2, catchStmt);\n     assertNodePosition(3, 9, exceptionVar);\n-    assertNodePosition(3, 9, catchCondition);\n     assertNodePosition(3, 13, exceptionBlock);\n     assertNodePosition(4, 2, varDecl);\n   }\n--- a/test/com/google/javascript/jscomp/parsing/ParserTest.java\n+++ b/test/com/google/javascript/jscomp/parsing/ParserTest.java\n \n   public void testTrailingCommaWarning7() {\n     parseError(\"var a = {,};\", BAD_PROPERTY_MESSAGE);\n+  }\n+\n+  public void testCatchClauseForbidden() {\n+    parseError(\"try { } catch (e if true) {}\",\n+        \"Catch clauses are not supported\");\n   }\n \n   public void testConstForbidden() {", "timestamp": 1284068994, "metainfo": ""}