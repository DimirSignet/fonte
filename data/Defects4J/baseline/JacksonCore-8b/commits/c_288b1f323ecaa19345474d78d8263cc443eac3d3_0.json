{"sha": "288b1f323ecaa19345474d78d8263cc443eac3d3", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/io/IOContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/IOContext.java\n \n     public void releaseConcatBuffer(char[] buf) {\n         if (buf != null) {\n+            // 14-Jan-2014, tatu: Let's actually allow upgrade of the original buffer.\n             _verifyRelease(buf, _concatCBuffer);\n             _concatCBuffer = null;\n             _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER, buf);\n \n     public void releaseNameCopyBuffer(char[] buf) {\n         if (buf != null) {\n+            // 14-Jan-2014, tatu: Let's actually allow upgrade of the original buffer.\n             _verifyRelease(buf, _nameCopyBuffer);\n             _nameCopyBuffer = null;\n             _bufferRecycler.releaseCharBuffer(BufferRecycler.CHAR_NAME_COPY_BUFFER, buf);\n      */\n \n     protected void _verifyAlloc(Object buffer) {\n-        if (buffer != null) {\n-            throw new IllegalStateException(\"Trying to call same allocXxx() method second time\");\n-        }\n-    }\n-\n-    protected void _verifyRelease(Object toRelease, Object src) {\n-        if (toRelease != src) {\n-            throw new IllegalArgumentException(\"Trying to release buffer not owned by the context\");\n-        }\n-    }\n+        if (buffer != null) { throw new IllegalStateException(\"Trying to call same allocXxx() method second time\"); }\n+    }\n+\n+    protected void _verifyRelease(byte[] toRelease, byte[] src) {\n+        if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }\n+    }\n+\n+    protected void _verifyRelease(char[] toRelease, char[] src) {\n+        if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }\n+    }\n+\n+    private IllegalArgumentException wrongBuf() { return new IllegalArgumentException(\"Trying to release buffer not owned by the context\"); }\n }", "timestamp": 1389762203, "metainfo": ""}