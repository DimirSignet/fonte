{"sha": "01ba05385ab00e34e0104f5f346c4a858df9e883", "log": "Change legal byte value range from [-128,127] to [-128,255], for better interoperability with platforms that consider bytes unsigned.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     implements Closeable, Versioned\n {\n     private final static int MIN_BYTE_I = (int) Byte.MIN_VALUE;\n-    private final static int MAX_BYTE_I = (int) Byte.MAX_VALUE;\n+    // as per [JACKSON-804], allow range up to and including 255\n+    private final static int MAX_BYTE_I = (int) 255;\n \n     private final static int MIN_SHORT_I = (int) Short.MIN_VALUE;\n     private final static int MAX_SHORT_I = (int) Short.MAX_VALUE;\n     {\n         int value = getIntValue();\n         // So far so good: but does it fit?\n+        // [JACKSON-804]: Let's actually allow range of [-128, 255], as those are uniquely mapped\n+        //  (instead of just signed range of [-128, 127])\n         if (value < MIN_BYTE_I || value > MAX_BYTE_I) {\n             throw _constructError(\"Numeric value (\"+getText()+\") out of range of Java byte\");\n         }\n--- a/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n      *<p>\n      * Note: this token is never returned by regular JSON readers, but\n      * only by readers that expose other kinds of source (like\n-     * {@link JsonNode}-based JSON trees, Maps, Lists and such).\n+     * <code>JsonNode</code>-based JSON trees, Maps, Lists and such).\n      */\n     VALUE_EMBEDDED_OBJECT(null),\n \n--- a/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n+++ b/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n     public abstract JsonToken asToken();\n \n     /**\n-     * If this node is a numeric type (as per {@link #isNumber}),\n+     * If this node is a numeric type (as per {@link JsonToken#isNumeric}),\n      * returns native type that node uses to store the numeric value;\n      * otherwise returns null.\n      * ", "timestamp": 1331346065, "metainfo": ""}