{"sha": "2ceee765f720eeb316f4283070342ecbb3cc49cc", "log": "Try to reproduce #142; fix a minor problem with error reporting", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n         }\n         // [JACKSON-69]: allow unquoted names if feature enabled:\n         if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {\n-            _reportUnexpectedChar(ch, \"was expecting double-quote to start field name\");\n+            char c = (char) _decodeCharForError(ch);\n+            _reportUnexpectedChar(c, \"was expecting double-quote to start field name\");\n         }\n         /* Also: note that although we use a different table here,\n          * it does NOT handle UTF-8 decoding. It'll just pass those\n \n     protected int _decodeCharForError(int firstByte) throws IOException\n     {\n-        int c = firstByte;\n-        if (c < 0) { // if >= 0, is ascii and fine as is\n+        int c = firstByte & 0xFF;\n+        if (c > 0x7F) { // if >= 0, is ascii and fine as is\n             int needed;\n             \n             // Ok; if we end here, we got multi-byte combination\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n         _testIntern(true, false, \"b\");\n     }\n \n+    public void testHandlingOfInvalidSpaceBytes() throws Exception\n+    {\n+        _testHandlingOfInvalidSpace(true);\n+    }\n+    \n+    public void testHandlingOfInvalidSpaceChars() throws Exception\n+    {\n+        _testHandlingOfInvalidSpace(false);\n+    }\n+\n+    // [#142]\n+    private void _testHandlingOfInvalidSpace(boolean useStream) throws Exception\n+    {\n+        JsonFactory f = new JsonFactory();\n+        final String JSON = \"{ \\u00A0 \\\"a\\\":1}\";\n+        JsonParser jp = useStream ?\n+                createParserUsingStream(f, JSON, \"UTF-8\") : createParserUsingReader(f, JSON);\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        try {\n+            jp.nextToken();\n+            fail(\"Should have failed\");\n+        } catch (JsonParseException e) {\n+            verifyException(e, \"unexpected character\");\n+            // and correct error code\n+            verifyException(e, \"code 160\");\n+        }\n+        jp.close();\n+    }\n+    \n     public void testInterningWithReaders() throws Exception\n     {\n         _testIntern(false, true, \"c\");", "timestamp": 1402369857, "metainfo": ""}