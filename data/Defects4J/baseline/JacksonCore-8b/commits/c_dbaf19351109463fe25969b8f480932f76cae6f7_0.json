{"sha": "dbaf19351109463fe25969b8f480932f76cae6f7", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n           * @since 2.3\n           */\n          STRICT_DUPLICATE_DETECTION(false),\n-            ;\n+\n+         /**\n+          * Feature that determines what to do if the underlying data format requires knowledge\n+          * of all properties to decode (usually via a Schema), and if no definition is\n+          * found for a property that input content contains.\n+          * Typically most textual data formats do NOT require schema information (although\n+          * some do, such as CSV), whereas many binary data formats do require definitions\n+          * (such as Avro, protobuf), although not all (Smile, CBOR, BSON and MessagePack do not).\n+          * Further note that some formats that do require schema information will not be able\n+          * to ignore undefined properties: for example, Avro is fully positional and there is\n+          * no possibility of undefined data. This leaves formats like Protobuf that have identifiers\n+          * that may or may not map; and as such Protobuf format does make use of this feature.\n+          *<p>\n+          * Note that support for this feature is implemented by individual data format\n+          * module, if (and only if) it makes sense for the format in question. For JSON,\n+          * for example, this feature has no effect as properties need not be pre-defined.\n+          *<p>\n+          * Feature is disabled by default, meaning that if the underlying data format\n+          * requires knowledge of all properties to output, attempts to read an unknown\n+          * property will result in a {@link JsonProcessingException}\n+          *\n+          * @since 2.6\n+          */\n+         IGNORE_UNDEFINED(false)\n+         ;\n \n         /**\n          * Whether feature is enabled or disabled by default.", "timestamp": 1423974636, "metainfo": ""}