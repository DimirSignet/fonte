{"sha": "074c5065ba8bed9ebfc8afc84a1e4e7401b67ebf", "log": "complete fixes to make dynamic enable/disable of dup detection work completely", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n     /**********************************************************\n      */\n \n+\n+    @Override public final boolean isEnabled(Feature f) { return (_features & f.getMask()) != 0; }\n+    @Override public int getFeatureMask() { return _features; }\n+\n+    //public JsonGenerator configure(Feature f, boolean state) { }\n+    \n     @Override\n     public JsonGenerator enable(Feature f) {\n         final int mask = f.getMask();\n                 _cfgNumbersAsStrings = true;\n             } else if (f == Feature.ESCAPE_NON_ASCII) {\n                 setHighestNonEscapedChar(127);\n-                /*\n             } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {\n-            */\n-                // !!! TODO\n+                if (_writeContext.getDupDetector() == null) { // but only if disabled currently\n+                    _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));\n+                }\n             }\n         }\n         return this;\n                 _cfgNumbersAsStrings = false;\n             } else if (f == Feature.ESCAPE_NON_ASCII) {\n                 setHighestNonEscapedChar(0);\n-                /*\n             } else if (f == Feature.STRICT_DUPLICATE_DETECTION) {\n-                // !!! TODO\n-                 */\n+                _writeContext = _writeContext.withDupDetector(null);\n             }\n         }\n         return this;\n     }\n-\n-    //public JsonGenerator configure(Feature f, boolean state) { }\n-\n-    @Override public final boolean isEnabled(Feature f) { return (_features & f.getMask()) != 0; }\n-    @Override public int getFeatureMask() { return _features; }\n \n     @Override public JsonGenerator setFeatureMask(int newMask) {\n         int changed = newMask ^ _features;\n                     setHighestNonEscapedChar(0);\n                 }\n             }\n-            /*\n             if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(changed)) {\n-                // !!! TODO\n-            }\n-            */\n+                if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newMask)) { // enabling\n+                    if (_writeContext.getDupDetector() == null) { // but only if disabled currently\n+                        _writeContext = _writeContext.withDupDetector(DupDetector.rootDetector(this));\n+                    }\n+                } else { // disabling\n+                    _writeContext = _writeContext.withDupDetector(null);\n+                }\n+            }\n         }\n         return this;\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n     }\n     \n     @Override\n-    public JsonParser setFeatureMask(int mask) {\n-        int changes = (_features ^ mask);\n+    public JsonParser setFeatureMask(int newMask) {\n+        int changes = (_features ^ newMask);\n         if (changes != 0) {\n-            _features = mask;\n-            if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(mask)) { // enabling\n+            _features = newMask;\n+            if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(newMask)) { // enabling\n                 if (_parsingContext.getDupDetector() == null) { // but only if disabled currently\n                     _parsingContext = _parsingContext.withDupDetector(DupDetector.rootDetector(this));\n                 }\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n         _dups = dups;\n         return this;\n     }\n-    \n+\n     /*\n     /**********************************************************\n     /* Factory methods\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonWriteContext.java\n \n     // // // Optional duplicate detection\n \n-    protected final DupDetector _dups;\n+    protected DupDetector _dups;\n     \n     /*\n     /**********************************************************\n         if (_dups != null) { _dups.reset(); }\n         return this;\n     }\n+\n+    public JsonWriteContext withDupDetector(DupDetector dups) {\n+System.err.println(\" Set DupDet -> \"+dups);\n+        _dups = dups;\n+        return this;\n+    }\n     \n-    // // // Factory methods\n+    /*\n+    /**********************************************************\n+    /* Factory methods\n+    /**********************************************************\n+     */\n \n     /**\n      * @deprecated Since 2.3; use method that takes argument\n \n     @Override public final JsonWriteContext getParent() { return _parent; }\n     @Override public final String getCurrentName() { return _currentName; }\n+\n+    public DupDetector getDupDetector() {\n+        return _dups;\n+    }\n     \n     // // // API sub-classes are to implement\n \n--- a/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorDupHandling.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestGeneratorDupHandling.java\n         }\n \n         // but not when checking\n-        JsonGenerator g;\n+        JsonGenerator g1;\n \n         if (lazySetting) {\n-            g = _generator(f, useStream);            \n-            g.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+            g1 = _generator(f, useStream);            \n+            g1.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n         } else {\n             f.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n-            g = _generator(f, useStream);            \n+            g1 = _generator(f, useStream);            \n         }\n         try {\n-            _writeSimple0(g, \"a\");\n+            _writeSimple0(g1, \"a\");\n             fail(\"Should have gotten exception\");\n         } catch (JsonGenerationException e) {\n             verifyException(e, \"duplicate field 'a'\");\n         }\n \n+        JsonGenerator g2;\n         if (lazySetting) {\n-            g = _generator(f, useStream);            \n-            g.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n+            g2 = _generator(f, useStream);            \n+            g2.enable(JsonGenerator.Feature.STRICT_DUPLICATE_DETECTION);\n         } else {\n-            g = _generator(f, useStream);            \n+            g2 = _generator(f, useStream);            \n         }\n         try {\n-            _writeSimple1( _generator(f, useStream), \"x\");\n+            _writeSimple1(g2, \"x\");\n             fail(\"Should have gotten exception\");\n         } catch (JsonGenerationException e) {\n             verifyException(e, \"duplicate field 'x'\");", "timestamp": 1415590056, "metainfo": ""}