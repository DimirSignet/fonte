{"sha": "1317cf8c0adddb5f7cd4711366bed5550586cb4d", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n     // as it seems to give fewest collisions for us\n     // (see [http://www.cse.yorku.ca/~oz/hash.html] for details)\n     private final static int MULT = 33;\n+    private final static int MULT2 = 65599;\n+    private final static int MULT3 = 31;\n     \n     public final int calcHash(int firstQuad)\n     {\n          * add seed bit later in the game, and switch plus/xor around,\n          * use different shift lengths.\n          */\n-        int hash = quads[0];\n-        hash ^= (hash >>> 9);\n-        hash += ((quads[1] + _hashSeed) * MULT);\n-        hash ^= (hash >>> 15);\n-        hash ^= (quads[2] * MULT);\n+        int hash = quads[0] ^ _hashSeed;\n+        hash += (hash >>> 9);\n+        hash *= MULT;\n+        int x = quads[1];\n+        hash += quads[1];\n+        hash *= MULT2;\n+        hash += (hash >>> 15);\n+        hash ^= quads[2];\n         hash += (hash >>> 17);\n         \n         for (int i = 3; i < qlen; ++i) {\n-            hash = (hash * MULT) + (quads[i] + 1);\n+            hash = (hash * MULT3) ^ quads[i];\n             // for longer entries, mess a bit in-between too\n-            hash ^= (hash >>> 3);\n-        }\n-\n+            hash += (hash >>> 3);\n+            hash ^= (hash << 7);\n+        }\n         // and finally shuffle some more once done\n         hash += (hash >>> 15); // to get high-order bits to mix more\n-        hash ^= (hash >>> 9); // as well as lowest 2 bytes\n+        hash ^= (hash << 9); // as well as lowest 2 bytes\n         return hash;\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n //System.out.printf(\"Byte stuff: collisions %d, max-coll %d\\n\", symbols.collisionCount(), symbols.maxCollisionLength());\n     \n         // Fewer collisions than with chars, but still quite a few\n-        assertEquals(1702, symbols.collisionCount());\n+        assertEquals(1686, symbols.collisionCount());\n         // but not super long collision chains:\n         assertEquals(9, symbols.maxCollisionLength());\n     }", "timestamp": 1342252727, "metainfo": ""}