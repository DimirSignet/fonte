{"sha": "12879ae9fd664af23a48724f3254a21c95bfe569", "log": "Add `TreeCodec` interface", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n+++ b/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n  * defined in the \"jackson-databind\".\n  */\n public abstract class ObjectCodec\n+    extends TreeCodec // since 2.3\n {\n     protected ObjectCodec() { }\n \n         throws IOException, JsonProcessingException;\n \n     /**\n-     * Method to deserialize JSON content as tree expressed\n-     * using set of {@link TreeNode} instances. Returns\n-     * root of the resulting tree (where root can consist\n-     * of just a single node if the current event is a\n-     * value event, not container).\n-     */\n-    public abstract <T extends TreeNode> T readTree(JsonParser jp)\n-        throws IOException, JsonProcessingException;\n-\n-    /**\n      * Method for reading sequence of Objects from parser stream,\n      * all with same specified value type.\n      */\n \n     /*\n     /**********************************************************\n-    /* API for Tree Model handling\n+    /* TreeCodec pass-through methods\n     /**********************************************************\n      */\n \n     /**\n+     * Method to deserialize JSON content as tree expressed\n+     * using set of {@link TreeNode} instances. Returns\n+     * root of the resulting tree (where root can consist\n+     * of just a single node if the current event is a\n+     * value event, not container).\n+     */\n+    @Override\n+    public abstract <T extends TreeNode> T readTree(JsonParser jp)\n+        throws IOException, JsonProcessingException;\n+    \n+    @Override\n+    public abstract void writeTree(JsonGenerator jg, TreeNode tree)\n+        throws IOException, JsonProcessingException;\n+    \n+    /**\n      * Method for construct root level Object nodes\n      * for Tree Model instances.\n      */\n+    @Override\n     public abstract TreeNode createObjectNode();\n \n     /**\n      * Method for construct root level Array nodes\n      * for Tree Model instances.\n      */\n+    @Override\n     public abstract TreeNode createArrayNode();\n \n     /**\n      * contents of a JSON tree, as if it was external serialized\n      * JSON content.\n      */\n+    @Override\n     public abstract JsonParser treeAsTokens(TreeNode n);\n \n+    /*\n+    /**********************************************************\n+    /* Extended tree conversions beyond TreeCodec\n+    /**********************************************************\n+     */\n+    \n     /**\n      * Convenience method for converting given JSON tree into instance of specified\n      * value type. This is equivalent to first constructing a {@link JsonParser} to\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/core/TreeCodec.java\n+package com.fasterxml.jackson.core;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Interface that defines objects that can read and write\n+ * {@link TreeNode} instances using Streaming API.\n+ * \n+ * @since 2.3\n+ */\n+public abstract class TreeCodec\n+{\n+    public abstract <T extends TreeNode> T readTree(JsonParser jp)\n+        throws IOException, JsonProcessingException;\n+\n+    public abstract void writeTree(JsonGenerator jg, TreeNode tree)\n+        throws IOException, JsonProcessingException;\n+\n+    public abstract TreeNode createArrayNode();\n+    public abstract TreeNode createObjectNode();\n+\n+    public abstract JsonParser treeAsTokens(TreeNode node);\n+}\n--- a/src/test/java/com/fasterxml/jackson/core/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/core/TestVersions.java\n package com.fasterxml.jackson.core;\n \n-import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.json.*;\n import com.fasterxml.jackson.core.io.IOContext;\n import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;", "timestamp": 1378527396, "metainfo": ""}