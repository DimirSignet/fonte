{"sha": "240c45594272f674bcb6cec26d682f582b40fda0", "log": "Yet more fixes to JsonPointer handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n         final int end = input.length();\n \n         // first char is the contextual slash, skip\n-        for (int i = 1; i < end; ++i) {\n-            char c = input.charAt(i++);\n+        for (int i = 1; i < end; ) {\n+            char c = input.charAt(i);\n             if (c == '/') { // common case, got a segment\n-                return new JsonPointer(input, input.substring(1, i-1),\n+                return new JsonPointer(input, input.substring(1, i),\n                         _parseTail(input.substring(i)));\n             }\n+            ++i;\n             // quoting is different; offline this case\n             if (c == '~' && i < end) { // possibly, quote\n                 return _parseQuotedTail(input, i);\n         }\n         _appendEscape(sb, input.charAt(i++));\n         while (i < end) {\n-            char c = input.charAt(i++);\n+            char c = input.charAt(i);\n             if (c == '/') { // end is nigh!\n                 return new JsonPointer(input, sb.toString(),\n-                        _parseTail(input.substring(i)));\n-            }\n+                        _parseTail(input.substring(i))); // need to push back slash\n+            }\n+            ++i;\n             if (c == '~' && i < end) {\n-                _appendEscape(sb, c);\n+                _appendEscape(sb, input.charAt(i++));\n                 continue;\n             }\n             sb.append(c);\n     {\n         if (c == '0') {\n             c = '~';\n-        } else if ( c == '1') {\n+        } else if (c == '1') {\n             c = '/';\n         } else {\n             sb.append('~');\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/TestExceptions.java\n+package com.fasterxml.jackson.core;\n+\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+public class TestExceptions extends BaseTest\n+{\n+    // For [Issue#10]\n+    public void testOriginalMesssage()\n+    {\n+        JsonProcessingException exc = new JsonParseException(\"Foobar\", JsonLocation.NA);\n+        String msg = exc.getMessage();\n+        String orig = exc.getOriginalMessage();\n+        assertEquals(\"Foobar\", orig);\n+        assertTrue(msg.length() > orig.length());\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/TestJDKSerializability.java\n+package com.fasterxml.jackson.core;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.Base64Variant;\n+import com.fasterxml.jackson.core.Base64Variants;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.PrettyPrinter;\n+import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+/**\n+ * Unit tests for [Issue#31] (https://github.com/FasterXML/jackson-core/issues/31)\n+ */\n+public class TestJDKSerializability extends BaseTest\n+{\n+    public void testJsonFactorySerializable() throws Exception\n+    {\n+        JsonFactory f = new JsonFactory();\n+        String origJson = \"{\\\"simple\\\":[1,true,{}]}\";\n+        assertEquals(origJson, _copyJson(f, origJson, false));\n+\n+        // Ok: freeze dry factory, thaw, and try to use again:\n+        byte[] frozen = jdkSerialize(f);\n+        JsonFactory f2 = jdkDeserialize(frozen);\n+        assertNotNull(f2);\n+        assertEquals(origJson, _copyJson(f2, origJson, false));\n+\n+        // Let's also try byte-based variant, for fun...\n+        assertEquals(origJson, _copyJson(f2, origJson, true));\n+    }\n+\n+    public void testBase64Variant() throws Exception\n+    {\n+        Base64Variant orig = Base64Variants.PEM;\n+        byte[] stuff = jdkSerialize(orig);\n+        Base64Variant back = jdkDeserialize(stuff);\n+        assertSame(orig, back);\n+    }\n+\n+    public void testPrettyPrinter() throws Exception\n+    {\n+        PrettyPrinter p = new DefaultPrettyPrinter();\n+        byte[] stuff = jdkSerialize(p);\n+        PrettyPrinter back = jdkDeserialize(stuff);\n+        // what should we test?\n+        assertNotNull(back);\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    protected byte[] jdkSerialize(Object o) throws IOException\n+    {\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream(1000);\n+        ObjectOutputStream obOut = new ObjectOutputStream(bytes);\n+        obOut.writeObject(o);\n+        obOut.close();\n+        return bytes.toByteArray();\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected <T> T jdkDeserialize(byte[] raw) throws IOException\n+    {\n+        ObjectInputStream objIn = new ObjectInputStream(new ByteArrayInputStream(raw));\n+        try {\n+            return (T) objIn.readObject();\n+        } catch (ClassNotFoundException e) {\n+            fail(\"Missing class: \"+e.getMessage());\n+            return null;\n+        } finally {\n+            objIn.close();\n+        }\n+    }\n+    \n+    @SuppressWarnings(\"resource\")\n+    protected String _copyJson(JsonFactory f, String json, boolean useBytes) throws IOException\n+    {\n+        if (useBytes) {\n+            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            JsonGenerator jg = f.createGenerator(bytes);\n+            _copyJson(f, json, jg);\n+            return bytes.toString(\"UTF-8\");\n+        }\n+        StringWriter sw = new StringWriter();\n+        JsonGenerator jg = f.createGenerator(sw);\n+        _copyJson(f, json, jg);\n+        return sw.toString();\n+    }\n+        \n+    protected void _copyJson(JsonFactory f, String json, JsonGenerator jg) throws IOException\n+    {\n+        JsonParser jp = f.createParser(json);\n+        while (jp.nextToken() != null) {\n+            jg.copyCurrentEvent(jp);\n+        }\n+        jp.close();\n+        jg.close();\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java\n+package com.fasterxml.jackson.core;\n+\n+import com.fasterxml.jackson.test.BaseTest;\n+\n+public class TestJsonPointer extends BaseTest\n+{\n+    public void testSimplePath() throws Exception\n+    {\n+        final String INPUT = \"/Image/15/name\";\n+\n+        JsonPointer ptr = JsonPointer.compile(INPUT);\n+        assertFalse(ptr.matches());\n+        assertEquals(-1, ptr.getMatchingIndex());\n+        assertEquals(\"Image\", ptr.getMatchingProperty());\n+        assertEquals(INPUT, ptr.toString());\n+\n+        ptr = ptr.tail();\n+        assertNotNull(ptr);\n+        assertFalse(ptr.matches());\n+        assertEquals(15, ptr.getMatchingIndex());\n+        assertEquals(\"15\", ptr.getMatchingProperty());\n+        assertEquals(\"/15/name\", ptr.toString());\n+\n+        ptr = ptr.tail();\n+        assertNotNull(ptr);\n+        assertFalse(ptr.matches());\n+        assertEquals(-1, ptr.getMatchingIndex());\n+        assertEquals(\"name\", ptr.getMatchingProperty());\n+        assertEquals(\"/name\", ptr.toString());\n+\n+        // done!\n+        ptr = ptr.tail();\n+        assertTrue(ptr.matches());\n+        assertNull(ptr.tail());\n+        assertEquals(\"\", ptr.getMatchingProperty());\n+        assertEquals(-1, ptr.getMatchingIndex());\n+    }\n+\n+    public void testQuotedPath() throws Exception\n+    {\n+        final String INPUT = \"/w~1out/til~0de/a~1b\";\n+\n+        JsonPointer ptr = JsonPointer.compile(INPUT);\n+        assertFalse(ptr.matches());\n+        assertEquals(-1, ptr.getMatchingIndex());\n+        assertEquals(\"w/out\", ptr.getMatchingProperty());\n+        assertEquals(INPUT, ptr.toString());\n+\n+        ptr = ptr.tail();\n+        assertNotNull(ptr);\n+        assertFalse(ptr.matches());\n+        assertEquals(-1, ptr.getMatchingIndex());\n+        assertEquals(\"til~de\", ptr.getMatchingProperty());\n+        assertEquals(\"/til~0de/a~1b\", ptr.toString());\n+\n+        ptr = ptr.tail();\n+        assertNotNull(ptr);\n+        assertFalse(ptr.matches());\n+        assertEquals(-1, ptr.getMatchingIndex());\n+        assertEquals(\"a/b\", ptr.getMatchingProperty());\n+        assertEquals(\"/a~1b\", ptr.toString());\n+        \n+        // done!\n+        ptr = ptr.tail();\n+        assertTrue(ptr.matches());\n+        assertNull(ptr.tail());\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/TestVersions.java\n+package com.fasterxml.jackson.core;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.json.*;\n+import com.fasterxml.jackson.core.io.IOContext;\n+import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;\n+import com.fasterxml.jackson.core.util.BufferRecycler;\n+\n+/**\n+ * Tests to verify [JACKSON-278]\n+ */\n+public class TestVersions extends com.fasterxml.jackson.test.BaseTest\n+{\n+    public void testCoreVersions() throws Exception\n+    {\n+        assertVersion(new JsonFactory().version());\n+        JsonParser jp = new ReaderBasedJsonParser(getIOContext(), 0, null, null,\n+                CharsToNameCanonicalizer.createRoot());\n+        assertVersion(jp.version());\n+        jp.close();\n+        JsonGenerator jgen = new WriterBasedJsonGenerator(getIOContext(), 0, null, null);\n+        assertVersion(jgen.version());\n+        jgen.close();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+    \n+    private void assertVersion(Version v)\n+    {\n+        assertEquals(PackageVersion.VERSION, v);\n+    }\n+\n+    private IOContext getIOContext() {\n+        return new IOContext(new BufferRecycler(), null, false);\n+    }\n+}\n+", "timestamp": 1378268090, "metainfo": ""}