{"sha": "9b59c3b330da58616d45cc3e23ae171276db0f91", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.io.CharacterEscapes;\n-import com.fasterxml.jackson.core.io.SerializedString;\n \n /**\n  * Base class that defines public API for writing JSON content.\n          * accurately represent (as mantissa is only 51 bit wide).\n          *<p>\n          * Feature is disabled by default.\n-         *\n-         * @since 1.3\n          */\n         WRITE_NUMBERS_AS_STRINGS(false),\n \n          * party libraries).\n          *<p>\n          * Feature is enabled by default.\n-         * \n-         * @since 1.7\n          */\n         FLUSH_PASSED_TO_STREAM(true),\n         \n          * using format-specific escapes (for JSON, backslash escapes),\n          * if format uses escaping mechanisms (which is generally true\n          * for textual formats but not for binary formats).\n-         * \n-         * @since 1.8\n          */\n         ESCAPE_NON_ASCII(false)\n         \n      * Default implementation simple uses unprocessed name container in\n      * serialized String; implementations are strongly encouraged to make\n      * use of more efficient methods argument object has.\n-     * \n-     * @since 1.6\n-     */\n-    public void writeFieldName(SerializedString name)\n-        throws IOException, JsonGenerationException\n-    {\n-        writeFieldName(name.getValue());\n-    }\n-\n-    /**\n-     * Method similar to {@link #writeFieldName(String)}, main difference\n-     * being that it may perform better as some of processing (such as\n-     * quoting of certain characters, or encoding into external encoding\n-     * if supported by generator) can be done just once and reused for\n-     * later calls.\n-     *<p>\n-     * Default implementation simple uses unprocessed name container in\n-     * serialized String; implementations are strongly encouraged to make\n-     * use of more efficient methods argument object has.\n-     * \n-     * @since 1.7\n-     */\n-    public void writeFieldName(SerializableString name)\n-        throws IOException, JsonGenerationException\n-    {\n-        writeFieldName(name.getValue());\n-    }\n+     */\n+    public abstract void writeFieldName(SerializableString name)\n+        throws IOException, JsonGenerationException;\n \n     /*\n     /**********************************************************\n      * Default implementation just calls {@link #writeString(String)};\n      * sub-classes should override it with more efficient implementation\n      * if possible.\n-     * \n-     * @since 1.7\n-     */\n-    public void writeString(SerializableString text)\n-        throws IOException, JsonGenerationException\n-    {\n-        writeString(text.getValue());\n-    }\n+     */\n+    public abstract void writeString(SerializableString text)\n+        throws IOException, JsonGenerationException;\n \n     /**\n      * Method similar to {@link #writeString(String)} but that takes as\n      * If so, implementation may instead choose to throw a\n      * {@link UnsupportedOperationException} due to ineffectiveness\n      * of having to decode input.\n-     * \n-     * @since 1.7\n      */\n     public abstract void writeRawUTF8String(byte[] text, int offset, int length)\n         throws IOException, JsonGenerationException;\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n     /**********************************************************\n      */\n \n+    public void writeFieldName(SerializableString name) throws IOException, JsonGenerationException {\n+        writeFieldName(name.getValue());\n+    }\n+    \n     //public abstract void writeString(String text) throws IOException, JsonGenerationException;\n \n     //public abstract void writeString(char[] text, int offset, int len) throws IOException, JsonGenerationException;\n     //public abstract void writeRaw(char[] text, int offset, int len) throws IOException, JsonGenerationException;\n \n     @Override\n-    public void writeRawValue(String text)\n-        throws IOException, JsonGenerationException\n+    public void writeString(SerializableString text) throws IOException, JsonGenerationException {\n+        writeString(text.getValue());\n+    }\n+    \n+    @Override\n+    public void writeRawValue(String text) throws IOException, JsonGenerationException\n     {\n         _verifyValueWrite(\"write raw value\");\n         writeRaw(text);\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.base.GeneratorBase;\n-import com.fasterxml.jackson.core.io.CharTypes;\n-import com.fasterxml.jackson.core.io.CharacterEscapes;\n-import com.fasterxml.jackson.core.io.IOContext;\n-import com.fasterxml.jackson.core.io.NumberOutput;\n-import com.fasterxml.jackson.core.io.SerializedString;\n+import com.fasterxml.jackson.core.io.*;\n import com.fasterxml.jackson.core.util.VersionUtil;\n \n public class UTF8JsonGenerator\n     /**\n      * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n      * it creates.\n-     * \n-     * @since 1.8\n      */\n     @Override\n     public CharacterEscapes getCharacterEscapes() {\n             return;\n         }\n         if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) { // need comma\n-            if (_outputTail >= _outputEnd) {\n-                _flushBuffer();\n-            }\n-            _outputBuffer[_outputTail++] = BYTE_COMMA;\n-        }\n-        _writeFieldName(name);\n-    }\n-    \n-    @Override\n-    public final void writeFieldName(SerializedString name)\n-        throws IOException, JsonGenerationException\n-    {\n-        // Object is a value, need to verify it's allowed\n-        int status = _writeContext.writeFieldName(name.getValue());\n-        if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n-            _reportError(\"Can not write a field name, expecting a value\");\n-        }\n-        if (_cfgPrettyPrinter != null) {\n-            _writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));\n-            return;\n-        }\n-        if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {\n             if (_outputTail >= _outputEnd) {\n                 _flushBuffer();\n             }\n     protected final void _writeFieldName(SerializableString name)\n         throws IOException, JsonGenerationException\n     {\n-        byte[] raw = name.asQuotedUTF8();\n         if (!isEnabled(Feature.QUOTE_FIELD_NAMES)) {\n-            _writeBytes(raw);\n+            int len = name.appendQuotedUTF8(_outputBuffer, _outputTail); // different quoting (escaping)\n+            if (len < 0) {\n+                _writeBytes(name.asQuotedUTF8());\n+            } else {\n+                _outputTail += len;\n+            }\n             return;\n         }\n         if (_outputTail >= _outputEnd) {\n             _flushBuffer();\n         }\n         _outputBuffer[_outputTail++] = BYTE_QUOTE;\n-\n-        // Can do it all in buffer?\n-        final int len = raw.length;\n-        if ((_outputTail + len + 1) < _outputEnd) { // yup\n-            System.arraycopy(raw, 0, _outputBuffer, _outputTail, len);\n+        int len = name.appendQuotedUTF8(_outputBuffer, _outputTail);\n+        if (len < 0) { // couldn't append, bit longer processing\n+            _writeBytes(name.asQuotedUTF8());\n+        } else {\n             _outputTail += len;\n-            _outputBuffer[_outputTail++] = BYTE_QUOTE;\n-        } else {\n-            _writeBytes(raw);\n-            if (_outputTail >= _outputEnd) {\n-                _flushBuffer();\n-            }\n-            _outputBuffer[_outputTail++] = BYTE_QUOTE;\n-        }\n+        }\n+        if (_outputTail >= _outputEnd) {\n+            _flushBuffer();\n+        }\n+        _outputBuffer[_outputTail++] = BYTE_QUOTE;\n     }    \n     \n     /**\n         }\n         _outputBuffer[_outputTail++] = BYTE_QUOTE;\n     }\n-\n+    \n     private final void _writeLongString(String text)\n         throws IOException, JsonGenerationException\n     {\n             _flushBuffer();\n         }\n         _outputBuffer[_outputTail++] = BYTE_QUOTE;\n-        _writeBytes(text.asQuotedUTF8());\n+        int len = text.appendQuotedUTF8(_outputBuffer, _outputTail);\n+        if (len < 0) {\n+            _writeBytes(text.asQuotedUTF8());\n+        } else {\n+            _outputTail += len;\n+        }\n         if (_outputTail >= _outputEnd) {\n             _flushBuffer();\n         }\n     /**********************************************************\n     /* Internal methods, low-level writing, text segment\n     /* with additional escaping (ASCII or such)\n-    /* (since 1.8; see [JACKSON-102])\n     /**********************************************************\n      */\n \n     /**\n      * Same as <code>_writeStringSegment2(char[], ...)</code., but with\n      * additional escaping for high-range code points\n-     * \n-     * @since 1.8\n      */\n     private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end)\n         throws IOException, JsonGenerationException\n     /**\n      * Same as <code>_writeStringSegmentASCII2(char[], ...)</code., but with\n      * additional checking for completely custom escapes\n-     * \n-     * @since 1.8\n      */\n     private final void _writeCustomStringSegment2(final char[] cbuf, int offset, final int end)\n         throws IOException, JsonGenerationException\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n     {\n         writeFieldName(fieldName);\n         writeString(value);\n-    }\n-    \n-    @Override\n-    public final void writeFieldName(SerializedString name)\n-        throws IOException, JsonGenerationException\n-    {\n-        // Object is a value, need to verify it's allowed\n-        int status = _writeContext.writeFieldName(name.getValue());\n-        if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n-            _reportError(\"Can not write a field name, expecting a value\");\n-        }\n-        _writeFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));\n     }\n \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.io.SerializedString;\n \n public class JsonGeneratorDelegate extends JsonGenerator\n {\n     }\n \n     @Override\n-    public void writeFieldName(SerializedString name)\n-        throws IOException, JsonGenerationException\n-    {\n-        delegate.writeFieldName(name);\n-    }\n-\n-    @Override\n     public void writeFieldName(SerializableString name)\n         throws IOException, JsonGenerationException\n     {", "timestamp": 1326868100, "metainfo": ""}