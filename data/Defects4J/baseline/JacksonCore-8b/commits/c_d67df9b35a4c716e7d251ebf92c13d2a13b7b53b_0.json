{"sha": "d67df9b35a4c716e7d251ebf92c13d2a13b7b53b", "log": "Work on resolving [JACKSON-851], problems with ObjectWriter, DefaultPrettyPrinter, state", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java\n  * Pretty printers are used to add white space in output JSON content,\n  * to make results more human readable. Usually this means things like adding\n  * linefeeds and indentation.\n+ *<p>\n+ * Note: since Jackson 2.1, stateful implementations MUST implement\n+ * {@link com.fasterxml.jackson.core.util.Instantiatable} interface,\n+ * to allow for constructing  per-generation instances and avoid\n+ * state corruption (see [JACKSON-851] for details).\n+ * Stateless implementations need not do this; but those are less common.\n  */\n public interface PrettyPrinter\n {\n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n  * used, which will use an instance of this class for operation.\n  */\n public class DefaultPrettyPrinter\n-    implements PrettyPrinter\n+    implements PrettyPrinter, Instantiatable<DefaultPrettyPrinter>\n {\n     /**\n      * Interface that defines objects that can produce indentation used\n \n     public DefaultPrettyPrinter() { }\n \n+    public DefaultPrettyPrinter(DefaultPrettyPrinter base) {\n+        _arrayIndenter = base._arrayIndenter;\n+        _objectIndenter = base._objectIndenter;\n+        _spacesInObjectEntries = base._spacesInObjectEntries;\n+        _nesting = base._nesting;\n+    }\n+    \n     public void indentArraysWith(Indenter i)\n     {\n         _arrayIndenter = (i == null) ? new NopIndenter() : i;\n \n     public void spacesInObjectEntries(boolean b) { _spacesInObjectEntries = b; }\n \n+    /*\n+    /**********************************************************\n+    /* Instantiatable impl\n+    /**********************************************************\n+     */\n+    \n+    // @Override\n+    public DefaultPrettyPrinter createInstance() {\n+        return new DefaultPrettyPrinter(this);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* PrettyPrinter impl\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/core/util/Instantiatable.java\n+package com.fasterxml.jackson.core.util;\n+\n+/**\n+ * Add-on interface used to indicate things that may be \"blueprint\" objects\n+ * which can not be used as is, but are used for creating usable per-process\n+ * (serialization, deserialization) instances, using\n+ * {@link #createInstance} method.\n+ *<p>\n+ * Note that some implementations may choose to implement {@link #createInstance}\n+ * by simply returning 'this': this is acceptable if instances are stateless.\n+ * \n+ * @see DefaultPrettyPrinter\n+ * \n+ * @since 2.1\n+ */\n+public interface Instantiatable<T>\n+{\n+    /**\n+     * Method called to ensure that we have a non-blueprint object to use;\n+     * it is either this object (if stateless), or a newly created object\n+     * with separate state.\n+     */\n+    public T createInstance();\n+}\n--- a/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java\n  * configurability which may be useful for actual use: for example,\n  * it is possible to redefine separator used between root-level\n  * values (default is single space; can be changed to line-feed).\n+ *<p>\n+ * Note: does NOT implement {@link Instantiatable} since this is\n+ * a stateless implementation; that is, a single instance can be\n+ * shared between threads.\n  */\n public class MinimalPrettyPrinter\n     implements PrettyPrinter", "timestamp": 1343889166, "metainfo": ""}