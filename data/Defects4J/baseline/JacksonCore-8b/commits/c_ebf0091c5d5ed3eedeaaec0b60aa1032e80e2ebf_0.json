{"sha": "ebf0091c5d5ed3eedeaaec0b60aa1032e80e2ebf", "log": "Refactor BufferRecycler for sub-classing", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/BufferRecycler.java\n     public final static int CHAR_TEXT_BUFFER = 2; // Text content from input\n     public final static int CHAR_NAME_COPY_BUFFER = 3; // Temporary buffer for getting name characters\n \n+    // Buffer lengths, defined in 2.4 (smaller before that)\n+    \n     private final static int[] BYTE_BUFFER_LENGTHS = new int[] { 8000, 8000, 2000, 2000 };\n     private final static int[] CHAR_BUFFER_LENGTHS = new int[] { 4000, 4000, 200, 200 };\n     \n-    final protected byte[][] _byteBuffers = new byte[4][];\n-    final protected char[][] _charBuffers = new char[4][];\n+    final protected byte[][] _byteBuffers;\n+    final protected char[][] _charBuffers;\n \n-    public BufferRecycler() { }\n+    /*\n+    /**********************************************************\n+    /* Construction\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Default constructor used for creating instances of this default\n+     * implementation.\n+     */\n+    public BufferRecycler() {\n+        this(4, 4);\n+    }\n \n+    /**\n+     * Alternate constructor to be used by sub-classes, to allow customization\n+     * of number of low-level buffers in use.\n+     * \n+     * @since 2.4\n+     */\n+    protected BufferRecycler(int bbCount, int cbCount) {\n+        _byteBuffers = new byte[bbCount][];\n+        _charBuffers = new char[cbCount][];\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, byte buffers\n+    /**********************************************************\n+     */\n+    \n     /**\n      * @param ix One of <code>READ_IO_BUFFER</code> constants.\n      */\n-    public final byte[] allocByteBuffer(int ix)\n-    {\n+    public final byte[] allocByteBuffer(int ix) {\n+        return allocByteBuffer(ix, 0);\n+    }\n+\n+    public byte[] allocByteBuffer(int ix, int minSize) {\n+        final int DEF_SIZE = charBufferLength(ix);\n+        if (minSize < DEF_SIZE) {\n+            minSize = DEF_SIZE;\n+        }\n         byte[] buffer = _byteBuffers[ix];\n-        if (buffer == null) {\n-            buffer = balloc(BYTE_BUFFER_LENGTHS[ix]);\n+        if (buffer == null || buffer.length < minSize) {\n+            buffer = balloc(byteBufferLength(ix));\n         } else {\n             _byteBuffers[ix] = null;\n         }\n         _byteBuffers[ix] = buffer;\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Public API, char buffers\n+    /**********************************************************\n+     */\n+    \n     public final char[] allocCharBuffer(int ix) {\n         return allocCharBuffer(ix, 0);\n     }\n-\n-    public final char[] allocCharBuffer(int ix, int minSize)\n-    {\n-        final int DEF_SIZE = CHAR_BUFFER_LENGTHS[ix];\n+    \n+    public char[] allocCharBuffer(int ix, int minSize) {\n+        final int DEF_SIZE = charBufferLength(ix);\n         if (minSize < DEF_SIZE) {\n             minSize = DEF_SIZE;\n         }\n         return buffer;\n     }\n \n-    public final void releaseCharBuffer(int ix, char[] buffer) {\n+    public void releaseCharBuffer(int ix, char[] buffer) {\n         _charBuffers[ix] = buffer;\n     }\n \n+    /*\n+    /**********************************************************\n+    /* Overridable helper methods\n+    /**********************************************************\n+     */\n+\n+    protected int byteBufferLength(int ix) {\n+        return BYTE_BUFFER_LENGTHS[ix];\n+    }\n+\n+    protected int charBufferLength(int ix) {\n+        return CHAR_BUFFER_LENGTHS[ix];\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Actual allocations separated for easier debugging/profiling\n     /**********************************************************\n      */\n \n-    private byte[] balloc(int size) { return new byte[size]; }\n-    private char[] calloc(int size) { return new char[size]; }\n+    protected byte[] balloc(int size) { return new byte[size]; }\n+    protected char[] calloc(int size) { return new char[size]; }\n }", "timestamp": 1389670339, "metainfo": ""}