{"sha": "06c510ade7c80d657b57da1d488a41caaa30958d", "log": "Bit more boost for reader-based parser too, ditching more lookup tables", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n \n         // Nope: do we then expect a comma?\n         if (_parsingContext.expectComma()) {\n-            if (i != INT_COMMA) {\n-                _reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n-            }\n             i = _skipComma(i);\n         }\n \n     \n     private final int _skipComma(int i) throws IOException\n     {\n-        final int[] codes = _icWS;\n-        main_loop:\n+        if (i != INT_COMMA) {\n+            _reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");\n+        }\n         while (_inputPtr < _inputEnd) {\n             i = (int) _inputBuffer[_inputPtr++];\n-            if (i >= 64) {\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH || i == INT_HASH) {\n+                    --_inputPtr;\n+                    return _skipAfterComma2();\n+                }\n                 return i;\n             }\n-            switch (codes[i]) {\n-            case 0:\n+            if (i < INT_SPACE) {\n+                if (i == INT_LF) {\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n+                } else if (i == INT_CR) {\n+                    _skipCR();\n+                } else if (i != INT_TAB) {\n+                    _throwInvalidSpace(i);\n+                }\n+            }\n+        }\n+        return _skipAfterComma2();\n+    }\n+\n+    private final int _skipAfterComma2() throws IOException\n+    {\n+        while (_inputPtr < _inputEnd || loadMore()) {\n+            int i = (int) _inputBuffer[_inputPtr++];\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH) {\n+                    _skipComment();\n+                    continue;\n+                }\n+                if (i == INT_HASH) {\n+                    if (_skipYAMLComment()) {\n+                        continue;\n+                    }\n+                }\n                 return i;\n-            case 1:\n-                continue;\n-            case '\\n':\n-                ++_currInputRow;\n-                _currInputRowStart = _inputPtr;\n-                break;\n-            case '\\r':\n-                _skipCR();\n-                break;\n-            default: // comments, bad whitespace, don't handle here\n-                --_inputPtr;\n-                break main_loop;\n-            }\n-        }\n-        return _skipAfterComma();\n-    }\n-\n-    private final int _skipAfterComma() throws IOException\n+            }\n+            if (i < INT_SPACE) {\n+                if (i == INT_LF) {\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n+                } else if (i == INT_CR) {\n+                    _skipCR();\n+                } else if (i != INT_TAB) {\n+                    _throwInvalidSpace(i);\n+                }\n+            }\n+        }\n+        throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");\n+    }\n+    \n+    private final int _skipWSOrEnd() throws IOException\n     {\n         final int[] codes = _icWS;\n-        while (_inputPtr < _inputEnd || loadMore()) {\n+        while (_inputPtr < _inputEnd) {\n             int i = (int) _inputBuffer[_inputPtr++];\n             if (i >= 64) {\n                 return i;\n                 break;\n             }\n         }\n-        throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");\n-    }\n-    \n-    private final int _skipWSOrEnd() throws IOException\n+        return _skipWSOrEnd2();\n+    }\n+\n+    private int _skipWSOrEnd2() throws IOException\n     {\n         final int[] codes = _icWS;\n-        while (_inputPtr < _inputEnd) {\n+        while (true) {\n+            if (_inputPtr >= _inputEnd) {\n+                if (!loadMore()) {\n+                    // We ran out of input...\n+                    _handleEOF();\n+                    return -1;\n+                }\n+            }\n             int i = (int) _inputBuffer[_inputPtr++];\n             if (i >= 64) {\n                 return i;\n                 break;\n             }\n         }\n-        return _skipWSOrEnd2();\n-    }\n-\n-    private int _skipWSOrEnd2() throws IOException\n-    {\n-        final int[] codes = _icWS;\n-        while (true) {\n-            if (_inputPtr >= _inputEnd) {\n-                if (!loadMore()) {\n-                    // We ran out of input...\n-                    _handleEOF();\n-                    return -1;\n-                }\n-            }\n-            int i = (int) _inputBuffer[_inputPtr++];\n-            if (i >= 64) {\n-                return i;\n-            }\n-            switch (codes[i]) {\n-            case -1:\n-                _throwInvalidSpace(i);\n-            case 0:\n-                return i;\n-            case 1:\n-                continue;\n-            case '\\n':\n-                ++_currInputRow;\n-                _currInputRowStart = _inputPtr;\n-                break;\n-            case '\\r':\n-                _skipCR();\n-                break;\n-            case '/':\n-                _skipComment();\n-                break;\n-            case '#':\n-                if (!_skipYAMLComment()) {\n-                    return i;\n-                }\n-                break;\n-            }\n-        }\n     }\n     \n     private void _skipComment() throws IOException", "timestamp": 1398966986, "metainfo": ""}