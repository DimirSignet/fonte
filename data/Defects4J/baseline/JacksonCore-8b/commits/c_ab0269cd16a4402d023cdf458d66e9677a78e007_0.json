{"sha": "ab0269cd16a4402d023cdf458d66e9677a78e007", "log": "Fix [Issue#34]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n                 }\n             }\n         }\n-        _isNextTokenNameNo(i);\n-        return false;\n+        return _isNextTokenNameMaybe(i, str);\n     }\n \n     private void _isNextTokenNameYes()\n         _nextToken = _handleUnexpectedValue(i);\n     }\n     \n-    private void _isNextTokenNameNo(int i)\n-            throws IOException, JsonParseException\n+    private boolean _isNextTokenNameMaybe(int i, SerializableString str)\n+        throws IOException, JsonParseException\n     {\n         // // // and this is back to standard nextToken()\n             \n         Name n = _parseFieldName(i);\n-        _parsingContext.setCurrentName(n.getName());\n+        final boolean match;\n+        {\n+            String nameStr = n.getName();\n+            _parsingContext.setCurrentName(nameStr);\n+            match = nameStr.equals(str.getValue());\n+        }\n         _currToken = JsonToken.FIELD_NAME;\n         i = _skipWS();\n         if (i != INT_COLON) {\n         if (i == INT_QUOTE) {\n             _tokenIncomplete = true;\n             _nextToken = JsonToken.VALUE_STRING;\n-            return;\n-        }        \n+            return match;\n+        }\n         JsonToken t;\n \n         switch (i) {\n             t = _handleUnexpectedValue(i);\n         }\n         _nextToken = t;\n+        return match;\n     }\n \n     @Override\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n public class TestNextXxx\n     extends com.fasterxml.jackson.test.BaseTest\n {\n+    /*\n+    /********************************************************\n+    /* Wrappers to test InputStream vs Reader\n+    /********************************************************\n+     */\n+    \n     // [JACKSON-653]\n     public void testIsNextTokenName() throws Exception\n     {\n         _testIsNextTokenName2(false);\n         _testIsNextTokenName2(true);\n     }\n+\n+    // [Issue#34]\n+    public void testIssue34() throws Exception\n+    {\n+        _testIssue34(false);\n+        _testIssue34(true);\n+    }\n+\n+    /*\n+    /********************************************************\n+    /* Actual test code\n+    /********************************************************\n+     */\n \n     private void _testIsNextTokenName1(boolean useStream) throws Exception\n     {\n \n         jp.close();\n     }\n-    \n+\n+    private void _testIssue34(boolean useStream) throws Exception\n+    {\n+        final int TESTROUNDS = 223;\n+        final String DOC_PART = \"{ \\\"fieldName\\\": 1 }\";\n+        \n+        // build the big document to trigger issue\n+        StringBuilder sb = new StringBuilder(2000);\n+        for (int i = 0; i < TESTROUNDS; ++i) {\n+            sb.append(DOC_PART);\n+        }\n+        final String DOC = sb.toString();\n+        \n+        SerializableString fieldName = new SerializedString(\"fieldName\");\n+        JsonFactory jf = new JsonFactory();\n+        JsonParser parser = useStream ?\n+            jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : jf.createJsonParser(new StringReader(DOC));\n+\n+        for (int i = 0; i < TESTROUNDS - 1; i++) {\n+            assertEquals(JsonToken.START_OBJECT, parser.nextToken());\n+\n+            // These will succeed\n+            assertTrue(parser.nextFieldName(fieldName));\n+\n+            parser.nextLongValue(-1);\n+            assertEquals(JsonToken.END_OBJECT, parser.nextToken());\n+        }\n+\n+        assertEquals(JsonToken.START_OBJECT, parser.nextToken());\n+\n+        // This will fail\n+        assertTrue(parser.nextFieldName(fieldName));\n+    }\n }", "timestamp": 1350764350, "metainfo": ""}