{"sha": "5a6fe9775b750ecc92e6d3c8331e03d1143f1c42", "log": "further simplification", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n import java.util.concurrent.atomic.AtomicLong;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.JsonParser.NumberType;\n import com.fasterxml.jackson.core.json.JsonWriteContext;\n import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n import com.fasterxml.jackson.core.util.VersionUtil;\n             }\n             break;\n         case VALUE_NUMBER_INT:\n-            switch (jp.getNumberType()) {\n-            case INT:\n-                writeNumber(jp.getIntValue());\n-                break;\n-            case BIG_INTEGER:\n-                writeNumber(jp.getBigIntegerValue());\n-                break;\n-            default:\n-                writeNumber(jp.getLongValue());\n+            {\n+                NumberType n = jp.getNumberType();\n+                if (n == NumberType.INT) {\n+                    writeNumber(jp.getIntValue());\n+                } else if (n == NumberType.BIG_INTEGER) {\n+                    writeNumber(jp.getBigIntegerValue());\n+                } else {\n+                    writeNumber(jp.getLongValue());\n+                }\n             }\n             break;\n         case VALUE_NUMBER_FLOAT:\n-            switch (jp.getNumberType()) {\n-            case BIG_DECIMAL:\n-                writeNumber(jp.getDecimalValue());\n-                break;\n-            case FLOAT:\n-                writeNumber(jp.getFloatValue());\n-                break;\n-            default:\n-                writeNumber(jp.getDoubleValue());\n+            {\n+                NumberType n = jp.getNumberType();\n+                if (n == NumberType.BIG_DECIMAL) {\n+                    writeNumber(jp.getDecimalValue());\n+                } else if (n == NumberType.FLOAT) {\n+                    writeNumber(jp.getFloatValue());\n+                } else {\n+                    writeNumber(jp.getDoubleValue());\n+                }\n             }\n             break;\n         case VALUE_TRUE:\n         throws IOException, JsonProcessingException\n     {\n         JsonToken t = jp.getCurrentToken();\n-\n         // Let's handle field-name separately first\n         if (t == JsonToken.FIELD_NAME) {\n             writeFieldName(jp.getCurrentName());\n             t = jp.nextToken();\n             // fall-through to copy the associated value\n         }\n-\n-        switch (t) {\n-        case START_ARRAY:\n+        if (t == JsonToken.START_OBJECT) {\n+            writeStartObject();\n+            while (jp.nextToken() != JsonToken.END_OBJECT) {\n+                copyCurrentStructure(jp);\n+            }\n+            writeEndObject();\n+        } else if (t == JsonToken.START_ARRAY) {\n             writeStartArray();\n             while (jp.nextToken() != JsonToken.END_ARRAY) {\n                 copyCurrentStructure(jp);\n             }\n             writeEndArray();\n-            break;\n-        case START_OBJECT:\n-            writeStartObject();\n-            while (jp.nextToken() != JsonToken.END_OBJECT) {\n-                copyCurrentStructure(jp);\n-            }\n-            writeEndObject();\n-            break;\n-        default: // others are simple:\n+        } else {\n             copyCurrentEvent(jp);\n         }\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Package methods for this, sub-classes", "timestamp": 1379798498, "metainfo": ""}