{"sha": "45466132203e3d62d797a080d9597228015d2370", "log": "Fixes to #49 implementation", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n import java.util.regex.Pattern;\n \n import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.Versioned;\n \n /**\n  * Functionality for supporting exposing of component {@link Version}s.\n      */\n     public static Version packageVersionFor(Class<?> cls)\n     {\n+    \tClass<?> versionInfoClass = null;\n         try {\n             Package p = cls.getPackage();\n             String versionInfoClassName =\n                     .append(\".\")\n                     .append(PACKAGE_VERSION_CLASS_NAME)\n                     .toString();\n-            Class<?> versionInfoClass = Class.forName(\n-                versionInfoClassName, true, cls.getClassLoader());\n-            return (Version)versionInfoClass.getField(PACKAGE_VERSION_FIELD).get(null);\n+            versionInfoClass = Class.forName(versionInfoClassName, true, cls.getClassLoader());\n+        } catch (Exception e) { // ok to be missing (not good, acceptable)\n+            return null;\n+        }\n+        if (versionInfoClass == null) {\n+        \treturn null;\n+        }\n+        // However, if class exists, it better work correctly, no swallowing exceptions\n+        Object v;\n+        try {\n+        \tv = versionInfoClass.newInstance();\n+        } catch (RuntimeException e) {\n+        \tthrow e;\n         } catch (Exception e) {\n-            return null;\n-        }\n+        \tthrow new IllegalArgumentException(\"Failed to instantiate \"+versionInfoClass.getName()\n+        \t\t\t+\" to find version information, problem: \"+e.getMessage(), e);\n+        }\n+        if (!(v instanceof Versioned)) {\n+        \tthrow new IllegalArgumentException(\"Bad version class \"+versionInfoClass.getName()\n+        \t\t\t+\": does not implement \"+Versioned.class.getName());\n+        }\n+        return ((Versioned) v).version();\n     }\n \n     private static Version doReadVersion(final Reader reader)\n--- a/src/test/java/com/fasterxml/jackson/core/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/core/TestVersions.java\n  */\n public class TestVersions extends com.fasterxml.jackson.test.BaseTest\n {\n-    // 18-Nov-2010, tatu: Not a good to do this, but has to do, for now...\n-    private final static int MAJOR_VERSION = 2;\n-    private final static int MINOR_VERSION = 2;\n-    \n-    private final static String GROUP_ID = \"com.fasterxml.jackson.core\";\n-    private final static String ARTIFACT_ID = \"jackson-core\";\n-    \n     public void testCoreVersions() throws Exception\n     {\n         assertVersion(new JsonFactory().version());\n     \n     private void assertVersion(Version v)\n     {\n-        assertFalse(\"Should find version information (got \"+v+\")\", v.isUknownVersion());\n-        assertEquals(MAJOR_VERSION, v.getMajorVersion());\n-        assertEquals(MINOR_VERSION, v.getMinorVersion());\n-        // Check patch level initially, comment out for maint versions\n-//        assertEquals(0, v.getPatchLevel());\n-\n-        // also, group & artifact ids should match:\n-        assertEquals(GROUP_ID, v.getGroupId());\n-        assertEquals(ARTIFACT_ID, v.getArtifactId());\n+    \tassertEquals(PackageVersion.VERSION, v);\n     }\n \n     private IOContext getIOContext() {\n--- a/src/test/java/com/fasterxml/jackson/core/test/PackageVersion.java\n+++ b/src/test/java/com/fasterxml/jackson/core/test/PackageVersion.java\n package com.fasterxml.jackson.core.test;\n \n import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.Versioned;\n import com.fasterxml.jackson.core.util.VersionUtil;\n \n-public final class PackageVersion {\n-    public final static Version VERSION = VersionUtil.parseVersion(\n-        \"23.42.64738-foobar\", \"foobar-group\", \"foobar-artifact\");\n+/**\n+ * Helper class used for verifying that auto-generated <code>PackageVersion</code>\n+ * classes can be used for verification.\n+ */\n+public final class PackageVersion implements Versioned {\n+\t@Override\n+\tpublic Version version() {\n+\t\treturn VersionUtil.parseVersion(\n+\t            \"23.42.64738-foobar\", \"foobar-group\", \"foobar-artifact\");\n+\t}\n }", "timestamp": 1357928448, "metainfo": ""}