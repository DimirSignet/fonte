{"sha": "d721193af128b6a2e6deaf05f458c16ac6b3d856", "log": "Fix [Issue#38]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n         } else {\n             // need to skip potential leading space\n             i &= 0xFF;\n-\n+            \n             space_loop:\n             while (true) {\n                 switch (i) {\n                 case INT_SPACE:\n                 case INT_TAB:\n+                    break;\n                 case INT_CR:\n                     _skipCR();\n                     break;\n                     }\n                     break space_loop;\n                 }\n-            }\n-            if (_inputPtr >= _inputEnd) {\n-                loadMoreGuaranteed();\n-            }\n-            i = _inputBuffer[_inputPtr++] & 0xFF;\n+                if (_inputPtr >= _inputEnd) {\n+                    loadMoreGuaranteed();\n+                }\n+                i = _inputBuffer[_inputPtr++] & 0xFF;\n+            }\n             if (i != INT_COLON) {\n                 _reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");\n             }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n         _testIssue34(true);\n     }\n \n+    // [Issue#38] with nextFieldName\n+    public void testIssue38() throws Exception\n+    {\n+        _testIssue38(false);\n+        _testIssue38(true);\n+    }\n+    \n     /*\n     /********************************************************\n     /* Actual test code\n \n         // This will fail\n         assertTrue(parser.nextFieldName(fieldName));\n+        parser.close();\n+    }\n+\n+    private void _testIssue38(boolean useStream) throws Exception\n+    {\n+        final String DOC = \"{\\\"field\\\" :\\\"value\\\"}\";\n+        SerializableString fieldName = new SerializedString(\"field\");\n+        JsonFactory jf = new JsonFactory();\n+        JsonParser parser = useStream ?\n+            jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : jf.createJsonParser(new StringReader(DOC));\n+        assertEquals(JsonToken.START_OBJECT, parser.nextToken());\n+        assertTrue(parser.nextFieldName(fieldName));\n+        assertEquals(JsonToken.VALUE_STRING, parser.nextToken());\n+        assertEquals(\"value\", parser.getText());\n+        assertEquals(JsonToken.END_OBJECT, parser.nextToken());\n+        assertNull(parser.nextToken());\n+        parser.close();\n     }\n }", "timestamp": 1352414445, "metainfo": ""}