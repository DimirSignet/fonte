{"sha": "e01cbd84fbdb8e2aeb19e28b1fd2d21c43ae10ab", "log": "Try to repro #181 on 2.4 but passes as well", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n         assertEquals(doc, v.toString());\n     }\n \n+    // for [jackson-core#181]\n+    /**\n+     * Method that tries to test that number parsing works in cases where\n+     * input is split between buffer boundaries.\n+     */\n+    public void testParsingOfLongerSequencesWithNonNumeric() throws Exception\n+    {\n+        JsonFactory factory = new JsonFactory();\n+        factory.enable(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS);\n+        double[] values = new double[] {\n+                0.01, -10.5, 2.1e9, 4.0e-8,\n+                Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY\n+        };\n+        for (int i = 0; i < values.length; ++i) {\n+            int COUNT = 4096;\n+            // Don't see the failure with a multiple of 1\n+            int VCOUNT = 2 * COUNT;\n+            String arrayJson = toJsonArray(values[i], VCOUNT);\n+            StringBuilder sb = new StringBuilder(COUNT + arrayJson.length() + 20);\n+            for (int j = 0; j < COUNT; ++j) {\n+                sb.append(' ');\n+            }\n+            sb.append(arrayJson);\n+            String DOC = sb.toString();\n+            for (int input = 0; input < 2; ++input) {\n+                JsonParser jp;\n+                if (input == 0) {\n+                    jp = createParserUsingStream(factory, DOC, \"UTF-8\");\n+                } else {\n+                    jp = factory.createParser(DOC);\n+                }\n+                assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+                for (int j = 0; j < VCOUNT; ++j) {\n+                    assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n+                    assertEquals(values[i], jp.getDoubleValue());\n+                }\n+                assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+                jp.close();\n+            }\n+        }\n+    }\n+\n     /*\n     /**********************************************************\n     /* Tests for invalid access\n         }\n         jp.close();\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+\n+    private String toJsonArray(double v, int n) {\n+        StringBuilder sb = new StringBuilder().append('[').append(v);\n+        for (int i = 1; i < n; ++i) {\n+            sb.append(',').append(v);\n+        }\n+        return sb.append(']').toString();\n+    }\n }", "timestamp": 1424122531, "metainfo": ""}