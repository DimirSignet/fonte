{"sha": "4d5def10d89960f4a85b400a55f8cdc08275cf89", "log": "Remove unneeded interface method modifiers  \"public\" as well as \"abstract\" are unnecessary. Reported by IDEA.  Tested.", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/FormatSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/core/FormatSchema.java\n      * it is a short name of format itself, but it can also contain additional information\n      * in cases where data format supports multiple types of schemas.\n      */\n-    public String getSchemaType();\n+    String getSchemaType();\n }\n--- a/src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/PrettyPrinter.java\n      * to output some other suitable and nice-looking separator\n      * (tab(s), space(s), linefeed(s) or any combination thereof).\n      */\n-    public void writeRootValueSeparator(JsonGenerator jg)\n+    void writeRootValueSeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException;\n \n     // // Object handling\n      * to output a curly bracket as well, but can surround that\n      * with other (white-space) decoration.\n      */\n-    public void writeStartObject(JsonGenerator jg)\n+    void writeStartObject(JsonGenerator jg)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * @param nrOfEntries Number of direct members of the array that\n      *   have been output\n      */\n-    public void writeEndObject(JsonGenerator jg, int nrOfEntries)\n+    void writeEndObject(JsonGenerator jg, int nrOfEntries)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * to output a comma as well, but can surround that with other\n      * (white-space) decoration.\n      */\n-    public void writeObjectEntrySeparator(JsonGenerator jg)\n+    void writeObjectEntrySeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * to output a colon as well, but can surround that with other\n      * (white-space) decoration.\n      */\n-    public void writeObjectFieldValueSeparator(JsonGenerator jg)\n+    void writeObjectFieldValueSeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException;\n \n     // // // Array handling\n      * to output a bracket as well, but can surround that\n      * with other (white-space) decoration.\n      */\n-    public void writeStartArray(JsonGenerator jg)\n+    void writeStartArray(JsonGenerator jg)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * @param nrOfValues Number of direct members of the array that\n      *   have been output\n      */\n-    public void writeEndArray(JsonGenerator jg, int nrOfValues)\n+    void writeEndArray(JsonGenerator jg, int nrOfValues)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * to output a comma as well, but can surround that with other\n      * (white-space) decoration.\n      */\n-    public void writeArrayValueSeparator(JsonGenerator jg)\n+    void writeArrayValueSeparator(JsonGenerator jg)\n         throws IOException, JsonGenerationException;\n \n     /*\n      * Default handling does not output anything, but pretty-printer\n      * is free to add any white space decoration.\n      */\n-    public void beforeArrayValues(JsonGenerator jg)\n+    void beforeArrayValues(JsonGenerator jg)\n         throws IOException, JsonGenerationException;\n \n     /**\n      * Default handling does not output anything, but pretty-printer\n      * is free to add any white space decoration.\n      */\n-    public void beforeObjectEntries(JsonGenerator jg)\n+    void beforeObjectEntries(JsonGenerator jg)\n         throws IOException, JsonGenerationException;\n }\n \n--- a/src/main/java/com/fasterxml/jackson/core/SerializableString.java\n+++ b/src/main/java/com/fasterxml/jackson/core/SerializableString.java\n      * Returns unquoted String that this object represents (and offers\n      * serialized forms for)\n      */\n-    public String getValue();\n+    String getValue();\n     \n     /**\n      * Returns length of the (unquoted) String as characters.\n      *   getValue().length();\n      *</pre>\n      */\n-    public int charLength();\n+    int charLength();\n \n     \n     /*\n      * Returns JSON quoted form of the String, as character array. Result\n      * can be embedded as-is in textual JSON as property name or JSON String.\n      */\n-    public char[] asQuotedChars();\n+    char[] asQuotedChars();\n \n     /**\n      * Returns UTF-8 encoded version of unquoted String.\n      * getValue().getBytes(\"UTF-8\");\n      *</pre>\n      */\n-    public byte[] asUnquotedUTF8();\n+    byte[] asUnquotedUTF8();\n \n     /**\n      * Returns UTF-8 encoded version of JSON-quoted String.\n      * new String(asQuotedChars()).getBytes(\"UTF-8\");\n      *</pre>\n      */\n-    public byte[] asQuotedUTF8();\n+    byte[] asQuotedUTF8();\n \n     /*\n     /**********************************************************\n      * \n      * @return Number of bytes appended, if successful, otherwise -1\n      */\n-    public int appendQuotedUTF8(byte[] buffer, int offset);\n+    int appendQuotedUTF8(byte[] buffer, int offset);\n \n     /**\n      * Method that will append quoted characters of this String into given\n      * \n      * @return Number of characters appended, if successful, otherwise -1\n      */\n-    public int appendQuoted(char[] buffer, int offset);\n+    int appendQuoted(char[] buffer, int offset);\n     \n     /**\n      * Method that will append unquoted ('raw') UTF-8 bytes of this String into given\n      * \n      * @return Number of bytes appended, if successful, otherwise -1\n      */\n-    public int appendUnquotedUTF8(byte[] buffer, int offset);\n+    int appendUnquotedUTF8(byte[] buffer, int offset);\n \n     \n     /**\n      * \n      * @return Number of characters appended, if successful, otherwise -1\n      */\n-    public int appendUnquoted(char[] buffer, int offset);\n+    int appendUnquoted(char[] buffer, int offset);\n \n     /*\n     /**********************************************************\n     /**\n      * @return Number of bytes written\n      */\n-    public int writeQuotedUTF8(OutputStream out) throws IOException;\n+    int writeQuotedUTF8(OutputStream out) throws IOException;\n \n     /**\n      * @return Number of bytes written\n      */\n-    public int writeUnquotedUTF8(OutputStream out) throws IOException;\n+    int writeUnquotedUTF8(OutputStream out) throws IOException;\n \n     /**\n      * @return Number of bytes put, if successful, otherwise -1\n      */\n-    public int putQuotedUTF8(ByteBuffer buffer) throws IOException;\n+    int putQuotedUTF8(ByteBuffer buffer) throws IOException;\n \n     /**\n      * @return Number of bytes put, if successful, otherwise -1\n      */\n-    public int putUnquotedUTF8(ByteBuffer out) throws IOException;\n+    int putUnquotedUTF8(ByteBuffer out) throws IOException;\n }\n--- a/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n+++ b/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n      * stream event would produce (for most nodes there is just\n      * one token but for structured/container types multiple)\n      */\n-    public abstract JsonToken asToken();\n+    JsonToken asToken();\n \n     /**\n      * If this node is a numeric type (as per {@link JsonToken#isNumeric}),\n      * @return Type of number contained, if any; or null if node does not\n      *  contain numeric value.\n      */\n-    public abstract JsonParser.NumberType numberType();\n+    JsonParser.NumberType numberType();\n \n     /*\n     /**********************************************************\n      * {@link ObjectCodec} and then re-parsing but\n      * more efficient.\n      */\n-    public abstract JsonParser traverse();\n+    JsonParser traverse();\n \n }\n--- a/src/main/java/com/fasterxml/jackson/core/Versioned.java\n+++ b/src/main/java/com/fasterxml/jackson/core/Versioned.java\n      * returned version should never be null, but may return specific \"not available\"\n      * instance (see {@link Version} for details).\n      */\n-    public Version version();\n+    Version version();\n }\n--- a/src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java\n+++ b/src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java\n      * Since this may result in more content to be read (at least\n      * one more byte), a {@link IOException} may get thrown.\n      */\n-    public boolean hasMoreBytes() throws IOException;\n+    boolean hasMoreBytes() throws IOException;\n \n     /**\n      * Returns next byte available, if any; if no more bytes are\n      * available, will throw {@link java.io.EOFException}.\n      */\n-    public byte nextByte() throws IOException;\n+    byte nextByte() throws IOException;\n \n     /**\n      * Method that can be called to reset accessor to read from beginning\n      * of input.\n      */\n-    public void reset();\n+    void reset();\n \n     /*\n     /**********************************************************\n      * Basic implementation that reads data from given\n      * {@link InputStream} and buffers it as necessary.\n      */\n-    public class Std implements InputAccessor\n+    class Std implements InputAccessor\n     {\n         protected final InputStream _in;\n \n--- a/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/DefaultPrettyPrinter.java\n      */\n     public interface Indenter\n     {\n-        public void writeIndentation(JsonGenerator jg, int level)\n+        void writeIndentation(JsonGenerator jg, int level)\n             throws IOException, JsonGenerationException;\n \n         /**\n          * @return True if indenter is considered inline (does not add linefeeds),\n          *   false otherwise\n          */\n-        public boolean isInline();\n+        boolean isInline();\n     }\n     \n     // // // Config, indentation\n--- a/src/main/java/com/fasterxml/jackson/core/util/Instantiatable.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/Instantiatable.java\n      * it is either this object (if stateless), or a newly created object\n      * with separate state.\n      */\n-    public T createInstance();\n+    T createInstance();\n }", "timestamp": 1348914808, "metainfo": ""}