{"sha": "a12195ac3a14f30d1225d2248bf2532c95db08de", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n         _matchingPropertyName = segment;\n         _matchingElementIndex = _parseInt(segment);\n     }\n-\n+    \n     /*\n     /**********************************************************\n     /* Factory methods\n      *   expression: currently the only such expression is one that does NOT start with\n      *   a slash ('/').\n      */\n-    public static JsonPointer parse(String input)\n+    public static JsonPointer compile(String input)\n         throws IllegalArgumentException\n     {\n         // First quick checks for well-known 'empty' pointer\n         }\n         return _parseTail(input);\n     }\n+\n+    /**\n+     * Alias for {@link #compile}; added to make instances automatically\n+     * deserializable by Jackson databind.\n+     */\n+    public static JsonPointer valueOf(String input) { return compile(input); }\n \n     /*\n     \n--- a/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n+++ b/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n     Iterator<String> fieldNames();\n \n     /**\n-     * Method for traversing node using given JSON Pointer instance\n+     * Method for locating node specified by given JSON pointer instances.\n+     * Method will never return null; if no matching node exists, \n+     *   will return a node for which {@link TreeNode#isMissingNode()} returns true.\n      * \n      * @return Node that matches given JSON Pointer: if no match exists,\n-     *   will return a node for which {@link TreeNode#isMissingNode()} returns\n-     *   true.\n+     *   will return a node for which {@link TreeNode#isMissingNode()} returns true.\n      * \n      * @since 2.3\n      */\n     <T extends TreeNode> T find(JsonPointer ptr);\n+\n+    /**\n+     * Convenience method that is functionally equivalent to:\n+     *<pre>\n+     *   return find(JsonPointer.valueOf(jsonPointerExpression));\n+     *</pre>\n+     *<p>\n+     * Note that if the same expression is used often, it is preferable to construct\n+     * {@link JsonPointer} instance once and reuse it: this method will not perform\n+     * any caching of compiled expressions.\n+     * \n+     * @return Node that matches given JSON Pointer: if no match exists,\n+     *   will return a node for which {@link TreeNode#isMissingNode()} returns true.\n+     * \n+     * @since 2.3\n+     */\n+    <T extends TreeNode> T find(String jsonPointerExpression)\n+        throws IllegalArgumentException;\n     \n     /*\n     /**********************************************************", "timestamp": 1378182255, "metainfo": ""}