{"sha": "14c6899044b3f1777a0084f9d1ea96033fc2e938", "log": "Change type of type/object ids to java.lang.Object, since impls are likely to require different actual types", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      * \n      * @since 2.3\n      */\n-    public void writeObjectId(String id)\n-        throws IOException, JsonGenerationException {\n+    public void writeObjectId(Object id)\n+        throws IOException, JsonGenerationException\n+    {\n         throw new JsonGenerationException(\"No native support for writing Object Ids\");\n     }\n \n      * If output is not allowed by the data format in this position,\n      * a {@link JsonGenerationException} will be thrown.\n      */\n-    public void writeObjectRef(String id)\n+    public void writeObjectRef(Object id)\n             throws IOException, JsonGenerationException {\n         throw new JsonGenerationException(\"No native support for writing Object Ids\");\n     }\n      * \n      * @since 2.3\n      */\n-    public void writeTypeId(String id)\n+    public void writeTypeId(Object id)\n         throws IOException, JsonGenerationException {\n         throw new JsonGenerationException(\"No native support for writing Type Ids\");\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n \n     /*\n     /**********************************************************\n-    /* Public API, Native Ids (type)\n-    /**********************************************************\n-     */\n+    /* Public API, Native Ids (type, object)\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Introspection method that may be called to see if the underlying\n+     * data format supports some kind of Object Ids natively (many do not;\n+     * for example, JSON doesn't).\n+     *<p>\n+     * Default implementation returns true; overridden by data formats\n+     * that do support native Object Ids. Caller is expected to either\n+     * use a non-native notation (explicit property or such), or fail,\n+     * in case it can not use native object ids.\n+     * \n+     * @since 2.3\n+     */\n+    public boolean canReadObjectId() {\n+        return false;\n+    }\n \n     /**\n      * Introspection method that may be called to see if the underlying\n      */\n     public boolean canReadTypeId() {\n         return false;\n+    }\n+\n+    /**\n+     * Method that can be called to check whether current token\n+     * (one that was just read) has an associated Object id, and if\n+     * so, return it.\n+     * Note that while typically caller should check with {@link #canReadObjectId}\n+     * first, it is not illegal to call this method even if that method returns\n+     * true; but if so, it will return null. This may be used to simplify calling\n+     * code.\n+     *<p>\n+     * Default implementation will simply return null.\n+     * \n+     * @since 2.3\n+     */\n+    public Object getObjectId() throws IOException, JsonGenerationException {\n+        return null;\n     }\n \n     /**\n      * \n      * @since 2.3\n      */\n-    public String getTypeId() throws IOException, JsonGenerationException {\n+    public Object getTypeId() throws IOException, JsonGenerationException {\n         return null;\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n     \n     public JsonGeneratorDelegate(JsonGenerator d) {\n         delegate = d;\n-    }   \n+    }\n \n     @Override\n     public ObjectCodec getCodec() {\n     public boolean canWriteTypeId() {\n         return delegate.canWriteTypeId();\n     }\n-    \n-    @Override\n-    public void writeTypeId(String typeId)\n+\n+    @Override\n+    public boolean canWriteObjectId() {\n+        return delegate.canWriteObjectId();\n+    }\n+    \n+    @Override\n+    public void writeObjectId(Object id)\n         throws IOException, JsonGenerationException {\n-        \n-    }\n-\n+        delegate.writeObjectId(id);\n+    }\n+\n+    @Override\n+    public void writeObjectRef(Object id)\n+            throws IOException, JsonGenerationException {\n+        delegate.writeObjectRef(id);\n+    }\n+    \n+    @Override\n+    public void writeTypeId(Object id)\n+        throws IOException, JsonGenerationException {\n+        delegate.writeTypeId(id);\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Public API, write methods, serializing Java objects\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n         // NOTE: must NOT delegate this method to delegate, needs to be self-reference for chaining\n         return this;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, Native Ids (type, object)\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public boolean canReadObjectId() {\n+        return delegate.canReadObjectId();\n+    }\n+\n+    @Override\n+    public boolean canReadTypeId() {\n+        return delegate.canReadTypeId();\n+    }\n+\n+    @Override\n+    public Object getObjectId() throws IOException, JsonGenerationException {\n+        return delegate.getObjectId();\n+    }\n+\n+    @Override\n+    public Object getTypeId() throws IOException, JsonGenerationException {\n+        return delegate.getTypeId();\n+    }\n }", "timestamp": 1375753957, "metainfo": ""}