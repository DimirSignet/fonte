{"sha": "f6dc437cdaa79a118bc312ff719b7b9d3b6e3cc6", "log": "Merge branch 'master' of github.com:FasterXML/jackson-core", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n      */\n \n     /**\n-     * This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftRerefence}\n+     * This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftReference}\n      * to a {@link BufferRecycler} used to provide a low-cost\n      * buffer recycling between reader and writer instances.\n      */\n--- a/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n     final byte[] _serializedBytes;\n \n     /**\n-     * @param Textual representation for this token, if there is a\n+     * @param token representation for this token, if there is a\n      *   single static representation; null otherwise\n      */\n     JsonToken(String token)\n--- a/src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java\n     private final static int INT_0 = '0';\n     \n     /**\n-     * This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftRerefence}\n+     * This <code>ThreadLocal</code> contains a {@link java.lang.ref.SoftReference}\n      * to a {@link BufferRecycler} used to provide a low-cost\n      * buffer recycling between reader and writer instances.\n      */\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestBase64Codec.java\n         Assert.assertArrayEquals(exp, act);\n     }\n \n+    @SuppressWarnings(\"unused\")\n     public void testErrors() throws Exception\n     {\n         try {\n-            new Base64Variant(\"foobar\", \"xyz\", false, '!', 24);\n+            Base64Variant b = new Base64Variant(\"foobar\", \"xyz\", false, '!', 24);\n         } catch (IllegalArgumentException iae) {\n             verifyException(iae, \"length must be exactly\");\n         }\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParseException.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParseException.java\n public class JsonParseException\n     extends JsonProcessingException\n {\n-    @SuppressWarnings(\"hiding\")\n     final static long serialVersionUID = 123; // Stupid eclipse...\n \n     public JsonParseException(String msg, JsonLocation loc)\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n     /********************************************************\n      */\n \n-    @SuppressWarnings(\"resource\") // Eclipse is wrong here\n     private void _testEscapeAboveAscii(boolean useStream) throws Exception\n     {\n         JsonFactory f = new JsonFactory();\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java\n         }\n     }\n \n-    @SuppressWarnings(\"resource\")\n     public void testLongOverflow() throws Exception\n     {\n         BigInteger below = BigInteger.valueOf(Long.MIN_VALUE);", "timestamp": 1346900720, "metainfo": ""}