{"sha": "5ad18ff3aa05ed96bfb8dc5a41a0f6491cdd677a", "log": "Added 'JsonParser.getValueAsString()' method", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException {\n         return defaultValue;\n     }\n+\n+    /**\n+     * Method that will try to convert value of current token to a\n+     * {@link java.lang.String}.\n+     * JSON Strings map naturally; scalar values get converted to\n+     * their textual representation.\n+     * If representation can not be converted to a String value (including structured types\n+     * like Objects and Arrays and null token), default value of\n+     * <b>null</b> will be returned; no exceptions are thrown.\n+     * \n+     * @since 2.1\n+     */\n+    public String getValueAsString() throws IOException, JsonParseException {\n+        return getValueAsString(null);\n+    }\n+    \n+    /**\n+     * Method that will try to convert value of current token to a\n+     * {@link java.lang.String}.\n+     * JSON Strings map naturally; scalar values get converted to\n+     * their textual representation.\n+     * If representation can not be converted to a String value (including structured types\n+     * like Objects and Arrays and null token), specified default value\n+     * will be returned; no exceptions are thrown.\n+     * \n+     * @since 2.1\n+     */\n+    public abstract String getValueAsString(String defaultValue)\n+        throws IOException, JsonParseException;\n     \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n         return defaultValue;\n     }\n \n+    @Override\n+    public String getValueAsString(String defaultValue) throws IOException, JsonParseException\n+    {\n+        if (_currToken != JsonToken.VALUE_STRING) {\n+            if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {\n+                return defaultValue;\n+            }\n+        }\n+        return getText();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Base64 decoding\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n         }\n         return _getText2(t);\n     }\n+\n+    // // // Let's override default impls for improved performance\n+    \n+    // @since 2.1\n+    @Override\n+    public String getValueAsString() throws IOException, JsonParseException\n+    {\n+        if (_currToken == JsonToken.VALUE_STRING) {\n+            if (_tokenIncomplete) {\n+                _tokenIncomplete = false;\n+                _finishString(); // only strings can be incomplete\n+            }\n+            return _textBuffer.contentsAsString();\n+        }\n+        return super.getValueAsString(null);\n+    }\n+    \n+    // @since 2.1\n+    @Override\n+    public String getValueAsString(String defValue) throws IOException, JsonParseException\n+    {\n+        if (_currToken == JsonToken.VALUE_STRING) {\n+            if (_tokenIncomplete) {\n+                _tokenIncomplete = false;\n+                _finishString(); // only strings can be incomplete\n+            }\n+            return _textBuffer.contentsAsString();\n+        }\n+        return super.getValueAsString(defValue);\n+    }\n+    \n     \n     protected final String _getText2(JsonToken t)\n     {\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     public String getText()\n         throws IOException, JsonParseException\n     {\n-        JsonToken t = _currToken;\n-        if (t == JsonToken.VALUE_STRING) {\n+        if (_currToken == JsonToken.VALUE_STRING) {\n             if (_tokenIncomplete) {\n                 _tokenIncomplete = false;\n                 _finishString(); // only strings can be incomplete\n             }\n             return _textBuffer.contentsAsString();\n         }\n-        return _getText2(t);\n-    }\n-\n+        return _getText2(_currToken);\n+    }\n+\n+    // // // Let's override default impls for improved performance\n+    \n+    // @since 2.1\n+    @Override\n+    public String getValueAsString() throws IOException, JsonParseException\n+    {\n+        if (_currToken == JsonToken.VALUE_STRING) {\n+            if (_tokenIncomplete) {\n+                _tokenIncomplete = false;\n+                _finishString(); // only strings can be incomplete\n+            }\n+            return _textBuffer.contentsAsString();\n+        }\n+        return super.getValueAsString(null);\n+    }\n+    \n+    // @since 2.1\n+    @Override\n+    public String getValueAsString(String defValue) throws IOException, JsonParseException\n+    {\n+        if (_currToken == JsonToken.VALUE_STRING) {\n+            if (_tokenIncomplete) {\n+                _tokenIncomplete = false;\n+                _finishString(); // only strings can be incomplete\n+            }\n+            return _textBuffer.contentsAsString();\n+        }\n+        return super.getValueAsString(defValue);\n+    }\n+    \n     protected final String _getText2(JsonToken t)\n     {\n         if (t == null) {\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserDelegate.java\n \n     /*\n     /**********************************************************\n+    /* Public API, access to token information, coercion/conversion\n+    /**********************************************************\n+     */\n+    \n+    @Override\n+    public int getValueAsInt() throws IOException, JsonParseException {\n+        return delegate.getValueAsInt();\n+    }\n+    \n+    @Override\n+    public int getValueAsInt(int defaultValue) throws IOException, JsonParseException {\n+        return delegate.getValueAsInt(defaultValue);\n+    }\n+\n+    @Override\n+    public long getValueAsLong() throws IOException, JsonParseException {\n+        return delegate.getValueAsLong();\n+    }\n+    \n+    @Override\n+    public long getValueAsLong(long defaultValue) throws IOException, JsonParseException {\n+        return delegate.getValueAsLong(defaultValue);\n+    }\n+    \n+    @Override\n+    public double getValueAsDouble() throws IOException, JsonParseException {\n+        return delegate.getValueAsDouble();\n+    }\n+    \n+    @Override\n+    public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException {\n+        return delegate.getValueAsDouble(defaultValue);\n+    }\n+\n+    @Override\n+    public boolean getValueAsBoolean() throws IOException, JsonParseException {\n+        return delegate.getValueAsBoolean();\n+    }\n+\n+    @Override\n+    public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException {\n+        return delegate.getValueAsBoolean(defaultValue);\n+    }\n+\n+    @Override\n+    public String getValueAsString() throws IOException, JsonParseException {\n+        return delegate.getValueAsString();\n+    }\n+    \n+    @Override\n+    public String getValueAsString(String defaultValue) throws IOException, JsonParseException {\n+        return delegate.getValueAsString(defaultValue);\n+    }\n+    \n+    /*\n+    /**********************************************************\n     /* Public API, access to token values, other\n     /**********************************************************\n      */", "timestamp": 1348354857, "metainfo": ""}