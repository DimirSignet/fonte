{"sha": "5437738ec6ffd684332b255fed4fed78885fa068", "log": "Fixed [Issue-6], incorrect count for pretty-printer, end-object", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n         if (!_writeContext.inObject()) {\n             _reportError(\"Current context not an object but \"+_writeContext.getTypeDesc());\n         }\n-        _writeContext = _writeContext.getParent();\n         if (_cfgPrettyPrinter != null) {\n             _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());\n         } else {\n             }\n             _outputBuffer[_outputTail++] = BYTE_RCURLY;\n         }\n+        _writeContext = _writeContext.getParent();\n     }\n \n     protected final void _writeFieldName(String name)\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n         if (!_writeContext.inObject()) {\n             _reportError(\"Current context not an object but \"+_writeContext.getTypeDesc());\n         }\n-        _writeContext = _writeContext.getParent();\n         if (_cfgPrettyPrinter != null) {\n             _cfgPrettyPrinter.writeEndObject(this, _writeContext.getEntryCount());\n         } else {\n             }\n             _outputBuffer[_outputTail++] = '}';\n         }\n+        _writeContext = _writeContext.getParent();\n     }\n \n     protected void _writeFieldName(String name, boolean commaBefore)\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java\n public class TestPrettyPrinter\n     extends com.fasterxml.jackson.test.BaseTest\n {\n+    static class CountPrinter extends MinimalPrettyPrinter\n+    {\n+        @Override\n+        public void writeEndObject(JsonGenerator jg, int nrOfEntries)\n+                throws IOException, JsonGenerationException\n+        {\n+            jg.writeRaw(\"(\"+nrOfEntries+\")}\");\n+        }\n+\n+        @Override\n+        public void writeEndArray(JsonGenerator jg, int nrOfValues)\n+            throws IOException, JsonGenerationException\n+        {\n+            jg.writeRaw(\"(\"+nrOfValues+\")]\");\n+        }\n+    }\n+    \n+    public void testObjectCount() throws Exception\n+    {\n+        final String EXP = \"{\\\"x\\\":{\\\"a\\\":1,\\\"b\\\":2(2)}(1)}\";\n+        final JsonFactory jf = new JsonFactory();\n+\n+        for (int i = 0; i < 2; ++i) {\n+            boolean useBytes = (i > 0);\n+            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            StringWriter sw = new StringWriter();\n+            JsonGenerator gen = useBytes ? jf.createJsonGenerator(bytes)\n+                    : jf.createJsonGenerator(sw);\n+            gen.setPrettyPrinter(new CountPrinter());\n+            gen.writeStartObject();\n+            gen.writeFieldName(\"x\");\n+            gen.writeStartObject();\n+            gen.writeNumberField(\"a\", 1);\n+            gen.writeNumberField(\"b\", 2);\n+            gen.writeEndObject();\n+            gen.writeEndObject();\n+            gen.close();\n+\n+            String json = useBytes ? bytes.toString(\"UTF-8\") : sw.toString();\n+            assertEquals(EXP, json);\n+        }\n+    }\n+\n+    public void testArrayCount() throws Exception\n+    {\n+        final String EXP = \"[6,[1,2,9(3)](2)]\";\n+        \n+        final JsonFactory jf = new JsonFactory();\n+\n+        for (int i = 0; i < 2; ++i) {\n+            boolean useBytes = (i > 0);\n+            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+            StringWriter sw = new StringWriter();\n+            JsonGenerator gen = useBytes ? jf.createJsonGenerator(bytes)\n+                    : jf.createJsonGenerator(sw);\n+            gen.setPrettyPrinter(new CountPrinter());\n+            gen.writeStartArray();\n+            gen.writeNumber(6);\n+            gen.writeStartArray();\n+            gen.writeNumber(1);\n+            gen.writeNumber(2);\n+            gen.writeNumber(9);\n+            gen.writeEndArray();\n+            gen.writeEndArray();\n+            gen.close();\n+\n+            String json = useBytes ? bytes.toString(\"UTF-8\") : sw.toString();\n+            assertEquals(EXP, json);\n+        }\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Test methods\n+    /**********************************************************\n+     */\n+    \n     public void testSimpleDocWithDefault() throws Exception\n     {\n         StringWriter sw = new StringWriter();\n         assertEquals(-1, docStr.indexOf('\\n'));\n         assertTrue(docStr.indexOf('\\t') >= 0);\n     }\n-    \n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+\n     private String _verifyPrettyPrinter(JsonGenerator gen, StringWriter sw) throws Exception\n     {    \n         gen.writeStartArray();", "timestamp": 1339481222, "metainfo": ""}