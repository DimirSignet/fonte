{"sha": "a663c696928685e4504394412d6c131152ac29b1", "log": "Refactor JsonToken a bit, to add more type detection method, to replace need to use switch", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n      * they can not block to wait for more data to parse and\n      * must return something.\n      */\n-    NOT_AVAILABLE(null),\n+    NOT_AVAILABLE(null, '?'),\n \n     /**\n      * START_OBJECT is returned when encountering '{'\n      * which signals starting of an Object value.\n      */\n-    START_OBJECT(\"{\"),\n+    START_OBJECT(\"{\", '('),\n         \n     /**\n      * END_OBJECT is returned when encountering '}'\n      * which signals ending of an Object value\n      */\n-    END_OBJECT(\"}\"),\n+    END_OBJECT(\"}\", ')'),\n         \n     /**\n      * START_ARRAY is returned when encountering '['\n      * which signals starting of an Array value\n      */\n-    START_ARRAY(\"[\"),\n+    START_ARRAY(\"[\", '('),\n \n     /**\n      * END_ARRAY is returned when encountering ']'\n      * which signals ending of an Array value\n      */\n-    END_ARRAY(\"]\"),\n+    END_ARRAY(\"]\", ')'),\n         \n     /**\n      * FIELD_NAME is returned when a String token is encountered\n      * as a field name (same lexical value, different function)\n      */\n-    FIELD_NAME(null),\n+    FIELD_NAME(null, '?'),\n         \n     /**\n      * Placeholder token returned when the input source has a concept\n      * only by readers that expose other kinds of source (like\n      * <code>JsonNode</code>-based JSON trees, Maps, Lists and such).\n      */\n-    VALUE_EMBEDDED_OBJECT(null),\n+    VALUE_EMBEDDED_OBJECT(null, 's'),\n \n     /**\n      * VALUE_STRING is returned when a String token is encountered\n      * in value context (array element, field value, or root-level\n      * stand-alone value)\n      */\n-    VALUE_STRING(null),\n+    VALUE_STRING(null, 's'),\n \n     /**\n      * VALUE_NUMBER_INT is returned when an integer numeric token is\n      * not have floating point or exponent marker in it (consists\n      * only of an optional sign, followed by one or more digits)\n      */\n-    VALUE_NUMBER_INT(null),\n+    VALUE_NUMBER_INT(null, 'n'),\n \n     /**\n      * VALUE_NUMBER_INT is returned when a numeric token other\n      * have floating point or exponent marker in it, in addition\n      * to one or more digits.\n      */\n-    VALUE_NUMBER_FLOAT(null),\n+    VALUE_NUMBER_FLOAT(null, 'n'),\n \n     /**\n      * VALUE_TRUE is returned when encountering literal \"true\" in\n      * value context\n      */\n-    VALUE_TRUE(\"true\"),\n+    VALUE_TRUE(\"true\", 's'),\n \n     /**\n      * VALUE_FALSE is returned when encountering literal \"false\" in\n      * value context\n      */\n-    VALUE_FALSE(\"false\"),\n+    VALUE_FALSE(\"false\", 's'),\n \n     /**\n      * VALUE_NULL is returned when encountering literal \"null\" in\n      * value context\n      */\n-    VALUE_NULL(\"null\")\n+    VALUE_NULL(\"null\", 's'),\n         ;\n \n     final String _serialized;\n \n     final byte[] _serializedBytes;\n \n+    final boolean _isStructStart, _isStructEnd;\n+\n+    final boolean _isScalar;\n+\n+    final boolean _isNumber;\n+    \n     /**\n      * @param token representation for this token, if there is a\n      *   single static representation; null otherwise\n      */\n-    JsonToken(String token)\n+    JsonToken(String token, char typeChar)\n     {\n         if (token == null) {\n             _serialized = null;\n                 _serializedBytes[i] = (byte) _serializedChars[i];\n             }\n         }\n+        _isNumber = (typeChar == 'n');\n+        _isStructStart = (typeChar == '(');\n+        _isStructEnd = (typeChar == ')');\n+        _isScalar = (typeChar == 'n' || typeChar == 's');\n     }\n \n     public String asString() { return _serialized; }\n     public byte[] asByteArray() { return _serializedBytes; }\n \n     public boolean isNumeric() {\n-        return (this == VALUE_NUMBER_INT) || (this == VALUE_NUMBER_FLOAT);\n+        return _isNumber;\n     }\n \n+    /**\n+     * @since 2.3\n+     */\n+    public boolean isStructStart() {\n+        return _isStructStart;\n+    }\n+\n+    /**\n+     * @since 2.3\n+     */\n+    public boolean isStructEnd() {\n+        return _isStructEnd;\n+    }\n+    \n     /**\n      * Method that can be used to check whether this token represents\n      * a valid non-structured value. This means all tokens other than\n      * Object/Array start/end markers all field names.\n      */\n     public boolean isScalarValue() {\n-        // note: up to 1.5, VALUE_EMBEDDED_OBJECT was incorrectly considered non-scalar!\n-        return ordinal() >= VALUE_EMBEDDED_OBJECT.ordinal();\n+        return _isScalar;\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n         return t;\n     }\n \n-    @SuppressWarnings(\"incomplete-switch\")\n     @Override\n     public JsonParser skipChildren() throws IOException, JsonParseException\n     {\n                  */\n                 return this;\n             }\n-            switch (t) {\n-            case START_OBJECT:\n-            case START_ARRAY:\n+            if (t.isStructStart()) {\n                 ++open;\n-                break;\n-            case END_OBJECT:\n-            case END_ARRAY:\n+            } else if (t.isStructEnd()) {\n                 if (--open == 0) {\n                     return this;\n                 }\n-                break;\n             }\n         }\n     }\n     /**********************************************************\n      */\n \n-    @SuppressWarnings(\"incomplete-switch\")\n     @Override\n     public boolean getValueAsBoolean(boolean defaultValue) throws IOException, JsonParseException\n     {\n                     return false;\n                 }\n                 break;\n+            default:\n             }\n         }\n         return defaultValue;\n     }\n-    \n-    @SuppressWarnings(\"incomplete-switch\")\n+\n     @Override\n     public int getValueAsInt(int defaultValue) throws IOException, JsonParseException\n     {\n                         return ((Number) value).intValue();\n                     }\n                 }\n+            default:\n             }\n         }\n         return defaultValue;\n         return defaultValue;\n     }\n \n-    @SuppressWarnings(\"incomplete-switch\")\n     @Override\n     public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException\n     {\n                         return ((Number) value).doubleValue();\n                     }\n                 }\n+            default:\n             }\n         }\n         return defaultValue;", "timestamp": 1379799209, "metainfo": ""}