{"sha": "5303198c1217acee612fd655ac52847f3482dbe4", "log": "Fixing [JACKSON-889]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     {\n         // very first thing: common case, colon, value, no white space\n         int i;\n-        if (_inputPtr < _inputEnd && _inputBuffer[_inputPtr] == INT_COLON) { // fast case first\n+        if (_inputPtr < (_inputEnd-1) && _inputBuffer[_inputPtr] == INT_COLON) { // fast case first\n+            i = _inputBuffer[++_inputPtr];\n             ++_inputPtr;\n-            i = _inputBuffer[_inputPtr++];\n             if (i == INT_QUOTE) {\n                 _tokenIncomplete = true;\n                 _nextToken = JsonToken.VALUE_STRING;\n             }\n             i &= 0xFF;\n             if (i <= INT_SPACE || i == INT_SLASH) {\n-                --_inputPtr;\n+            \t--_inputPtr;\n                 i = _skipWS();\n             }\n         } else {\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java\n \n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.io.SerializedString;\n import com.fasterxml.jackson.test.BaseTest;\n \n import java.io.*;\n         assertEquals(VALUE, act);\n         jp.close();\n     }\n+\n+    // [JACKSON-889]\n+\tpublic void testNextFieldName() throws IOException\n+\t{\n+\t\tJsonFactory f = new JsonFactory();\n+\t\tSerializedString id = new SerializedString(\"id\");\n+\n+\t\tByteArrayOutputStream os = new ByteArrayOutputStream();\n+\t\tos.write('{');\n+\t\tfor (int i = 0; i < 3994; i++) {\n+\t\t\tos.write(' ');\n+\t\t}\n+\t\tos.write(\"\\\"id\\\":2\".getBytes(\"UTF-8\"));\n+\t\tos.write('}');\n+\n+\t\tJsonParser parser = f.createParser(new ByteArrayInputStream(os.toByteArray()));\n+\t\tassertEquals(parser.nextToken(), JsonToken.START_OBJECT);\n+\t\tassertTrue(parser.nextFieldName(id));\n+\t\tassertEquals(parser.nextToken(), JsonToken.VALUE_NUMBER_INT);\n+\t\tassertEquals(parser.nextToken(), JsonToken.END_OBJECT);\n+\t\tparser.close();\n+\t}\n }", "timestamp": 1360779232, "metainfo": ""}