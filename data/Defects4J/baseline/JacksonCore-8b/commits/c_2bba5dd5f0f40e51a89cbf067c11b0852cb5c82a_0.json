{"sha": "2bba5dd5f0f40e51a89cbf067c11b0852cb5c82a", "log": "Remove redundant casts", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n      * and this reuse only works within context of a single\n      * factory instance.\n      */\n-    public JsonFactory() { this((ObjectCodec) null); }\n+    public JsonFactory() { this(null); }\n \n     public JsonFactory(ObjectCodec oc) { _objectCodec = oc; }\n \n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java\n \n     public JsonGenerationException(String msg, Throwable rootCause)\n     {\n-        super(msg, (JsonLocation)null, rootCause);\n+        super(msg, null, rootCause);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n         }\n         int c = (int) _inputBuffer[_inputPtr++];\n \n-        switch ((int) c) {\n+        switch (c) {\n             // First, ones that are mapped\n         case 'b':\n             return '\\b';\n \n     protected int _decodeCharForError(int firstByte) throws IOException\n     {\n-        int c = (int) firstByte;\n+        int c = firstByte;\n         if (c < 0) { // if >= 0, is ascii and fine as is\n             int needed;\n             \n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n         final char[] result = carr(size);\n         if (_segments != null) {\n             for (int i = 0, len = _segments.size(); i < len; ++i) {\n-                char[] curr = (char[]) _segments.get(i);\n+                char[] curr = _segments.get(i);\n                 int currLen = curr.length;\n                 System.arraycopy(curr, 0, result, offset, currLen);\n                 offset += currLen;", "timestamp": 1390669581, "metainfo": ""}