{"sha": "a37f08e661a9af921aa8939babec048d48ebe2cb", "log": "One more fix for #157, this time for negative-number parsing branch (which is different from pos)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n \n         // And then figure out how far we can read without further checks\n         // for either input or output\n-        int end = _inputPtr + outBuf.length;\n+        int end = _inputPtr + outBuf.length - outPtr;\n         if (end > _inputEnd) {\n             end = _inputEnd;\n         }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n     }\n \n+    // and alternate take on for #157 (with negative num)\n+    public void testLongNumbers2() throws Exception\n+    {\n+        StringBuilder input = new StringBuilder();\n+        // test this with negative\n+        input.append('-');\n+        for (int i = 0; i < 2100; i++) {\n+            input.append(1);\n+        }\n+        final String DOC = input.toString();\n+        JsonFactory f = new JsonFactory();\n+        _testIssue160LongNumbers(f, DOC, false);\n+        _testIssue160LongNumbers(f, DOC, true);\n+    }\n+\n+    private void _testIssue160LongNumbers(JsonFactory f, String doc, boolean useStream) throws Exception\n+    {\n+        JsonParser jp = useStream\n+                ? FACTORY.createParser(doc.getBytes(\"UTF-8\"))\n+                        : FACTORY.createParser(doc);\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        BigInteger v = jp.getBigIntegerValue();\n+        assertNull(jp.nextToken());\n+        assertEquals(doc, v.toString());\n+    }\n+\n     /*\n     /**********************************************************\n     /* Tests for invalid access", "timestamp": 1413306933, "metainfo": ""}