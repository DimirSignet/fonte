{"sha": "98cb9a72694a8d65fecc5e2a59f69911f2b39d56", "log": "Add `JsonGenerator.canOmitFields()` discovery/introspection methods", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n     public FormatSchema getSchema() {\n         return null;\n     }\n-    \n-    /**\n-     * Method that can be used to verify that given schema can be used with\n-     * this generator (using {@link #setSchema}).\n-     * \n-     * @param schema Schema to check\n-     * \n-     * @return True if this generator can use given schema; false if not\n-     */\n-    public boolean canUseSchema(FormatSchema schema) {\n-        return false;\n-    }\n \n     /*\n     /**********************************************************\n      */\n     public JsonGenerator setRootValueSeparator(SerializableString sep) {\n         throw new UnsupportedOperationException();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, capability introspection methods\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method that can be used to verify that given schema can be used with\n+     * this generator (using {@link #setSchema}).\n+     * \n+     * @param schema Schema to check\n+     * \n+     * @return True if this generator can use given schema; false if not\n+     */\n+    public boolean canUseSchema(FormatSchema schema) {\n+        return false;\n+    }\n+    \n+    /**\n+     * Introspection method that may be called to see if the underlying\n+     * data format supports some kind of Object Ids natively (many do not;\n+     * for example, JSON doesn't).\n+     * This method <b>must</b> be called prior to calling\n+     * {@link #writeObjectId} or {@link #writeObjectRef}.\n+     *<p>\n+     * Default implementation returns false; overridden by data formats\n+     * that do support native Object Ids. Caller is expected to either\n+     * use a non-native notation (explicit property or such), or fail,\n+     * in case it can not use native object ids.\n+     * \n+     * @since 2.3\n+     */\n+    public boolean canWriteObjectId() {\n+        return false;\n+    }\n+\n+    /**\n+     * Introspection method that may be called to see if the underlying\n+     * data format supports some kind of Type Ids natively (many do not;\n+     * for example, JSON doesn't).\n+     * This method <b>must</b> be called prior to calling\n+     * {@link #writeTypeId}.\n+     *<p>\n+     * Default implementation returns false; overridden by data formats\n+     * that do support native Type Ids. Caller is expected to either\n+     * use a non-native notation (explicit property or such), or fail,\n+     * in case it can not use native type ids.\n+     * \n+     * @since 2.3\n+     */\n+    public boolean canWriteTypeId() {\n+        return false;\n+    }\n+\n+    /**\n+     * Introspection method to call to check whether it is ok to omit\n+     * writing of Object fields or not. Most formats do allow omission,\n+     * but certain positional formats (such as CSV) require output of\n+     * placeholders, even if no real values are to be emitted.\n+     * \n+     * @since 2.3\n+     */\n+    public boolean canOmitFields() {\n+        return true;\n     }\n \n     /*\n     /* Public API, write methods, Native Ids (type, object)\n     /**********************************************************\n      */\n-\n-    /**\n-     * Introspection method that may be called to see if the underlying\n-     * data format supports some kind of Object Ids natively (many do not;\n-     * for example, JSON doesn't).\n-     * This method <b>must</b> be called prior to calling\n-     * {@link #writeObjectId} or {@link #writeObjectRef}.\n-     *<p>\n-     * Default implementation returns false; overridden by data formats\n-     * that do support native Object Ids. Caller is expected to either\n-     * use a non-native notation (explicit property or such), or fail,\n-     * in case it can not use native object ids.\n-     * \n-     * @since 2.3\n-     */\n-    public boolean canWriteObjectId() {\n-        return false;\n-    }\n-\n-    /**\n-     * Introspection method that may be called to see if the underlying\n-     * data format supports some kind of Type Ids natively (many do not;\n-     * for example, JSON doesn't).\n-     * This method <b>must</b> be called prior to calling\n-     * {@link #writeTypeId}.\n-     *<p>\n-     * Default implementation returns false; overridden by data formats\n-     * that do support native Type Ids. Caller is expected to either\n-     * use a non-native notation (explicit property or such), or fail,\n-     * in case it can not use native type ids.\n-     * \n-     * @since 2.3\n-     */\n-    public boolean canWriteTypeId() {\n-        return false;\n-    }\n \n     /**\n      * Method that can be called to output so-called native Object Id.\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n     public FormatSchema getSchema() {\n         return delegate.getSchema();\n     }\n-    \n+\n+    @Override\n+    public Version version() {\n+        return delegate.version();\n+    }\n+\n+    @Override\n+    public Object getOutputTarget() {\n+        return delegate.getOutputTarget();\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Public API, capability introspection (since 2.3, mostly)\n+    /**********************************************************\n+     */\n+\n     @Override\n     public boolean canUseSchema(FormatSchema schema) {\n         return delegate.canUseSchema(schema);\n     }\n \n     @Override\n-    public Version version() {\n-        return delegate.version();\n-    }\n-\n-    @Override\n-    public Object getOutputTarget() {\n-        return delegate.getOutputTarget();\n+    public boolean canWriteTypeId() {\n+        return delegate.canWriteTypeId();\n+    }\n+\n+    @Override\n+    public boolean canWriteObjectId() {\n+        return delegate.canWriteObjectId();\n+    }\n+\n+    @Override\n+    public boolean canOmitFields() {\n+        return delegate.canOmitFields();\n     }\n     \n     /*\n     /* Public API, write methods, Native Ids\n     /**********************************************************\n      */\n-\n-    @Override\n-    public boolean canWriteTypeId() {\n-        return delegate.canWriteTypeId();\n-    }\n-\n-    @Override\n-    public boolean canWriteObjectId() {\n-        return delegate.canWriteObjectId();\n-    }\n     \n     @Override\n     public void writeObjectId(Object id)", "timestamp": 1376172333, "metainfo": ""}