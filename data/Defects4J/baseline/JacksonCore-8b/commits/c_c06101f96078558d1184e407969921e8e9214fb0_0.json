{"sha": "c06101f96078558d1184e407969921e8e9214fb0", "log": "Fixing warnings new Eclipse version produces...", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/TestVersions.java\n+++ b/src/test/java/com/fasterxml/jackson/core/TestVersions.java\n     private final static String GROUP_ID = \"com.fasterxml.jackson.core\";\n     private final static String ARTIFACT_ID = \"jackson-core\";\n     \n-    public void testCoreVersions()\n+    public void testCoreVersions() throws Exception\n     {\n         assertVersion(new JsonFactory().version());\n-        assertVersion(new ReaderBasedJsonParser(getIOContext(), 0, null, null,\n-                CharsToNameCanonicalizer.createRoot()).version());\n-        assertVersion(new WriterBasedJsonGenerator(getIOContext(), 0, null, null).version());\n+        JsonParser jp = new ReaderBasedJsonParser(getIOContext(), 0, null, null,\n+                CharsToNameCanonicalizer.createRoot());\n+        assertVersion(jp.version());\n+        jp.close();\n+        JsonGenerator jgen = new WriterBasedJsonGenerator(getIOContext(), 0, null, null);\n+        assertVersion(jgen.version());\n+        jgen.close();\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n     /********************************************************\n      */\n \n+    @SuppressWarnings(\"resource\") // Eclipse is wrong here\n     private void _testEscapeAboveAscii(boolean useStream) throws Exception\n     {\n         JsonFactory f = new JsonFactory();\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n             fail(\"Expected an exception for malformed value keyword\");\n         } catch (JsonParseException jex) {\n             verifyException(jex, \"Unrecognized token\");\n+        } finally {\n+            jp.close();\n         }\n     }\n \n             fail(\"Expected an exception for malformed value keyword\");\n         } catch (JsonParseException jex) {\n             verifyException(jex, \"expected a valid value\");\n+        } finally {\n+            jp.close();\n         }\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserNonStandard.java\n             assertToken(JsonToken.END_OBJECT, jp.nextToken());\n         }\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+        jp.close();\n     }\n \n     \n         assertToken(JsonToken.VALUE_NULL, jp.nextToken());\n \n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+        jp.close();\n     }\n \n     /**\n             fail(\"Expected exception\");\n         } catch (JsonParseException e) {\n             verifyException(e, \"Unexpected character ('''\");\n+        } finally {\n+            jp.close();\n         }\n \n         JSON = \"{ 'a':1 }\";\n             fail(\"Expected exception\");\n         } catch (JsonParseException e) {\n             verifyException(e, \"Unexpected character ('''\");\n+        } finally {\n+            jp.close();\n         }\n     }\n \n         assertEquals(\"\", jp.getText());\n \n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+        jp.close();\n     }\n \n     // test to verify that we implicitly allow escaping of apostrophe [JACKSON-548]\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertEquals(\"16'\", jp.getText());\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+        jp.close();\n     }\n     \n     private void _testNonStandardNameChars(boolean useStream) throws Exception\n             fail(\"Should have thrown an exception for doc <\"+JSON+\">\");\n         } catch (JsonParseException e) {\n             verifyException(e, \"unrecognized character escape\");\n+        } finally {\n+            jp.close();\n         }\n         // and then verify it's ok...\n         f.configure(JsonParser.Feature.ALLOW_BACKSLASH_ESCAPING_ANY_CHARACTER, true);\n                 : createParserUsingReader(f, JSON);\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertEquals(\"'\", jp.getText());\n+        jp.close();\n     }\n \n     private void _testLeadingZeroes(boolean useStream, boolean appendSpace) throws Exception\n             fail(\"Should have thrown an exception for doc <\"+JSON+\">\");\n         } catch (JsonParseException e) {\n             verifyException(e, \"invalid numeric value\");\n+        } finally {\n+            jp.close();\n         }\n         \n         // and then verify it's ok when enabled\n             fail(\"Expected exception\");\n         } catch (Exception e) {\n             verifyException(e, \"non-standard\");\n+        } finally {\n+            jp.close();\n         }\n \n         // we can enable it dynamically (impl detail)\n             fail(\"Expected exception\");\n         } catch (Exception e) {\n             verifyException(e, \"Non-standard token '-INF'\");\n+        } finally {\n+            jp.close();\n         }\n \n         f.configure(JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS, true);\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestParserOverrides.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserOverrides.java\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n         jp.clearCurrentToken();\n         assertNull(jp.getCurrentToken());\n+        jp.close();\n     }\n     \n \n--- a/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Generator.java\n         }\n         gen.writeString(str);\n         gen.flush();\n+        gen.close();\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestNumericValues.java\n         }\n     }\n \n+    @SuppressWarnings(\"resource\")\n     public void testLongOverflow() throws Exception\n     {\n         BigInteger below = BigInteger.valueOf(Long.MIN_VALUE);\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestParserFeatures.java\n             jp.nextToken();\n         } catch (JsonParseException je) {\n             verifyException(je, EXP_ERROR_FRAGMENT);\n+        } finally {\n+            jp.close();\n         }\n     }\n \n             fail(\"Expected exception\");\n         } catch (JsonParseException e) {\n             verifyException(e, \"Illegal unquoted character\");\n+        } finally {\n+            jp.close();\n         }\n     }\n \n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         assertEquals(VALUE, jp.getText());\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n+        jp.close();\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestScopeMatching.java\n             } catch (JsonParseException jpe) {\n                 verifyException(jpe, \"Unexpected end-of-input\");\n             }\n+            jp.close();\n         }\n     }\n \n             } catch (JsonParseException jpe) {\n                 verifyException(jpe, \"Unrecognized token\");\n             }\n+            jp.close();\n         }\n     }\n \n             } catch (JsonParseException jpe) {\n                 verifyException(jpe, \"Unexpected close marker '}': expected ']'\");\n             }\n+            jp.close();\n         }\n     }\n \n             } catch (JsonParseException jpe) {\n                 verifyException(jpe, \"Unexpected close marker ']': expected '}'\");\n             }\n+            jp.close();\n         }\n     }\n \n             } catch (JsonParseException jpe) {\n                 verifyException(jpe, \"was expecting a colon\");\n             }\n+            jp.close();\n         }\n     }\n }", "timestamp": 1345741951, "metainfo": ""}