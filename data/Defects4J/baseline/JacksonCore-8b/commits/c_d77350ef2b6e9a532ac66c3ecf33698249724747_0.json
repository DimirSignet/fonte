{"sha": "d77350ef2b6e9a532ac66c3ecf33698249724747", "log": "More clean up", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n \n     /**\n      * Method for associating a {@link ObjectCodec} (typically\n-     * a {@link org.codehaus.jackson.map.ObjectMapper}) with\n-     * this factory (and more importantly, parsers and generators\n+     * a <code>com.fasterxml.jackson.databind.ObjectMapper</code>)\n+     * with this factory (and more importantly, parsers and generators\n      * it constructs). This is needed to use data-binding methods\n      * of {@link JsonParser} and {@link JsonGenerator} instances.\n      */\n--- a/src/main/java/com/fasterxml/jackson/core/JsonNode.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonNode.java\n  * As a general design rule, most accessors (\"getters\") are included\n  * in this base class, to allow for traversing structure without\n  * type casts. Most mutators, however, need to be accessed through\n- * specific sub-classes (such as <code>org.codehaus.jackson.node.ObjectNode</code>\n- * and <code>org.codehaus.jackson.node.ArrayNode</code>).\n+ * specific sub-classes (such as <code>ObjectNode</code>\n+ * and <code>ArrayNode</code>).\n  * This seems sensible because proper type\n  * information is generally available when building or modifying\n  * trees, but less often when reading a tree (newly built from\n  * parsed JSON content).\n  *<p>\n  * Actual concrete sub-classes can be found from package\n- * {@link org.codehaus.jackson.node}, which is in 'mapper' jar\n+ * <code>com.fasterxml.jackson.databind.node</code>, which is in 'mapper' jar\n  * (whereas this class is in 'core' jar, since it is declared as\n  * nominal type for operations in {@link ObjectCodec})\n  */\n      * Method that can be used to check if the node is a wrapper\n      * for a POJO (\"Plain Old Java Object\" aka \"bean\".\n      * Returns true only for\n-     * instances of {@link org.codehaus.jackson.node.POJONode}.\n+     * instances of <code>POJONode</code>.\n      *\n      * @return True if this node wraps a POJO\n      */\n \n     /**\n      * Similar to {@link #findValues}, but will additionally convert\n-     * values into Strings, calling {@link #getValueAsText}.\n+     * values into Strings, calling {@link #asText}.\n      */\n     public final List<String> findValuesAsText(String fieldName)\n     {\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n      * or a wrapper type (like {@link java.lang.Boolean}).\n      * <b>Note</b>: method can only be called if the parser has\n      * an object codec assigned; this is true for parsers constructed\n-     * by {@link org.codehaus.jackson.map.MappingJsonFactory} but\n-     * not for {@link JsonFactory} (unless its <code>setCodec</code>\n+     * by <code>MappingJsonFactory</code> (from \"jackson-databind\" jar)\n+     * but not for {@link JsonFactory} (unless its <code>setCodec</code>\n      * method has been explicitly called).\n      *<p>\n      * This method may advance the event stream, for structured types\n--- a/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n+++ b/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n  * Java objects (POJOs aka Beans).\n  *<p>\n  * The standard implementation of this class is\n- * {@link org.codehaus.jackson.map.ObjectMapper}.\n+ * <code>com.fasterxml.jackson.databind.ObjectMapper</code>,\n+ * defined in the \"jackson-databind\".\n  */\n public abstract class ObjectCodec\n {\n--- a/src/main/java/com/fasterxml/jackson/core/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/core/package-info.java\n  *  </li>\n  *<li>{@link com.fasterxml.jackson.core.ObjectCodec} is included so that\n  *  reference to the object capable of serializing/deserializing\n- *  Objects to/from JSON (usually, {@link org.codehaus.jackson.map.ObjectMapper})\n+ *  Objects to/from JSON (usually, <code>com.fasterxml.jackson.databind.ObjectMapper</code>)\n  *  can be exposed, without adding direct dependency to implementation.\n  *  </li>\n  *</ul>\n- * </ul>\n  */\n \n package com.fasterxml.jackson.core;\n--- a/src/main/java/com/fasterxml/jackson/core/type/JavaType.java\n+++ b/src/main/java/com/fasterxml/jackson/core/type/JavaType.java\n  * and as keys for deserializers.\n  *<p>\n  * Instances can (only) be constructed by\n- * {@link org.codehaus.jackson.map.type.TypeFactory}.\n+ * <code>com.fasterxml.jackson.databind.TypeFactory</code>\n+ * (included in \"jackson-databind\")\n  */\n public abstract class JavaType\n {", "timestamp": 1324624393, "metainfo": ""}