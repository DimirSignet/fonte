{"sha": "84dc1843f7ce5f6071f701e8588e5673f49b31ac", "log": "fix a minor flaw in allocation handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n             return createParser(new StringReader(content));\n         }\n         IOContext ctxt = _createContext(content, true);\n-        char[] buf = ctxt.allocTokenBuffer();\n-        if (buf.length < strLen) { // sanity check; should never occur\n-            buf = new char[strLen];\n-        }\n+        char[] buf = ctxt.allocTokenBuffer(strLen);\n         content.getChars(0, strLen, buf, 0);\n         return _createParser(buf, 0, strLen, ctxt, true);\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/io/IOContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/IOContext.java\n         return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER));\n     }\n \n+    /**\n+     * @since 2.4\n+     */\n+    public char[] allocTokenBuffer(int minSize) {\n+        _verifyAlloc(_tokenCBuffer);\n+        return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, minSize));\n+    }\n+    \n     public char[] allocConcatBuffer() {\n         _verifyAlloc(_concatCBuffer);\n         return (_concatCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER));\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n         _objectCodec = codec;\n         _symbols = st;\n         _hashSeed = st.hashSeed();\n-        _bufferRecyclable = false;\n+        _bufferRecyclable = true;\n     }\n \n     /*\n--- a/src/test/java/perf/ManualReadPerfWithMedia.java\n+++ b/src/test/java/perf/ManualReadPerfWithMedia.java\n package perf;\n+\n+import java.io.*;\n \n import com.fasterxml.jackson.core.*;\n \n     protected void testRead1(int reps) throws Exception\n     {\n         while (--reps >= 0) {\n+//            JsonParser p = _factory.createParser(new StringReader(_json));\n             JsonParser p = _factory.createParser(_json);\n             _stream(p);\n             p.close();\n--- a/src/test/java/perf/ParserTestBase.java\n+++ b/src/test/java/perf/ParserTestBase.java\n         throws Exception\n     {\n         // guessing we have 500 byte\n-        final int REPS = (int) ((double) (8 * 1000 * 1000) / (double) expSize);\n+        final int REPS = (int) ((double) (10 * 1000 * 1000) / (double) expSize);\n \n         System.out.printf(\"Estimating %d bytes to read; will do %d repetitions\\n\",\n                 expSize, REPS);", "timestamp": 1397880477, "metainfo": ""}