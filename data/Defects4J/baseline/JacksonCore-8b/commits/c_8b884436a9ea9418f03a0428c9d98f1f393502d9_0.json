{"sha": "8b884436a9ea9418f03a0428c9d98f1f393502d9", "log": "Fix problem with dynamic enable/disable of parser dup detection", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n             }\n             return flags;\n         }\n-        \n+\n         private Feature(boolean defaultState) {\n             _mask = (1 << ordinal());\n             _defaultState = defaultState;\n         }\n-        \n+\n         public boolean enabledByDefault() { return _defaultState; }\n-        \n+\n         /**\n          * @since 2.3\n          */\n         public boolean enabledIn(int flags) { return (flags & _mask) != 0; }\n \n-        public int getMask() { return (1 << ordinal()); }\n+        public int getMask() { return _mask; }\n     }\n \n     /*\n     /**\n      * Method for checking whether specified {@link Feature} is enabled.\n      */\n-    public boolean isEnabled(Feature f) { return (_features & f.getMask()) != 0; }\n+    public boolean isEnabled(Feature f) { return f.enabledIn(_features); }\n \n     /**\n      * Bulk access method for getting state of all standard {@link Feature}s.\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.JsonParser.Feature;\n import com.fasterxml.jackson.core.io.IOContext;\n import com.fasterxml.jackson.core.io.NumberInput;\n import com.fasterxml.jackson.core.json.DupDetector;\n \n     @Override public Version version() { return PackageVersion.VERSION; }\n \n+    /*\n+    /**********************************************************\n+    /* Overrides for Feature handling\n+    /**********************************************************\n+     */\n+\n+    @Override\n+    public JsonParser enable(Feature f) {\n+        _features |= f.getMask();\n+        if (f == Feature.STRICT_DUPLICATE_DETECTION) { // enabling dup detection?\n+            if (_parsingContext.getDupDetector() == null) { // but only if disabled currently\n+                _parsingContext = _parsingContext.withDupDetector(DupDetector.rootDetector(this));\n+            }\n+        }\n+        return this;\n+    }\n+\n+    @Override\n+    public JsonParser disable(Feature f) {\n+        _features &= ~f.getMask();\n+        if (f == Feature.STRICT_DUPLICATE_DETECTION) {\n+            _parsingContext = _parsingContext.withDupDetector(null);\n+        }\n+        return this;\n+    }\n+    \n+    @Override\n+    public JsonParser setFeatureMask(int mask) {\n+        int changes = (_features ^ mask);\n+        if (changes != 0) {\n+            _features = mask;\n+            if (Feature.STRICT_DUPLICATE_DETECTION.enabledIn(mask)) { // enabling\n+                if (_parsingContext.getDupDetector() == null) { // but only if disabled currently\n+                    _parsingContext = _parsingContext.withDupDetector(DupDetector.rootDetector(this));\n+                }\n+            } else { // disabling\n+                _parsingContext = _parsingContext.withDupDetector(null);\n+            }\n+        }\n+        return this;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* JsonParser impl\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n     \n     // // // Optional duplicate detection\n \n-    protected final DupDetector _dups;\n+    protected DupDetector _dups;\n     \n     // // // Location information (minus source reference)\n \n     }\n     */\n \n-    // // // Factory methods\n+    public JsonReadContext withDupDetector(DupDetector dups) {\n+        _dups = dups;\n+        return this;\n+    }\n+    \n+    /*\n+    /**********************************************************\n+    /* Factory methods\n+    /**********************************************************\n+     */\n \n     @Deprecated // since 2.3, use variant that takes dup detector\n     public static JsonReadContext createRootContext(int lineNr, int colNr) {\n         return createRootContext(lineNr, colNr, null);\n     }\n-    \n+\n     public static JsonReadContext createRootContext(int lineNr, int colNr, DupDetector dups) {\n         return new JsonReadContext(null, dups, TYPE_ROOT, lineNr, colNr);\n     }\n         // We don't keep track of offsets at this level (only reader does)\n         long totalChars = -1L;\n         return new JsonLocation(srcRef, totalChars, _lineNr, _columnNr);\n+    }\n+\n+    public DupDetector getDupDetector() {\n+        return _dups;\n     }\n \n     /*", "timestamp": 1415589188, "metainfo": ""}