{"sha": "e2207349b19d8ca389fa720b3a35ea361a9d65d1", "log": "tiny additions to JsonPointer, test refactoring", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n  */\n public class JsonPointer\n {\n-\n     protected final static int NO_SLASH = -1;\n \n     /**\n     public boolean mayMatchProperty() { return _matchingPropertyName != null; }\n     public boolean mayMatchElement() { return _matchingElementIndex >= 0; }\n \n+    /**\n+     * Method that may be called to see if the pointer would match property\n+     * (of a JSON Object) with given name.\n+     * \n+     * @since 2.5\n+     */\n+    public boolean matchesProperty(String name) {\n+        return (_nextSegment != null) && _matchingPropertyName.equals(name);\n+    }\n+    \n     public JsonPointer matchProperty(String name) {\n         if (_nextSegment == null || !_matchingPropertyName.equals(name)) {\n             return null;\n         return _nextSegment;\n     }\n \n-    public JsonPointer matchElement (int index) {\n-        if ((index != _matchingElementIndex) || (index < 0)) {\n-            return null;\n-        }\n-        return _nextSegment;\n+    /**\n+     * Method that may be called to see if the pointer would match\n+     * array element (of a JSON Array) with given index.\n+     * \n+     * @since 2.5\n+     */\n+    public boolean matchesElement(int index) {\n+        return (index == _matchingElementIndex) && (index >= 0);\n     }\n \n     /**\n      * Accessor for getting a \"sub-pointer\", instance where current segment\n-     * has been removed and pointer includes rest of segments;\n+     * has been removed and pointer includes rest of segments.\n+     * For matching state, will return null.\n      */\n     public JsonPointer tail() {\n         return _nextSegment;\n \n     /**\n      * Accessor for getting a \"pointer\", instance from current segment to\n-     * segment before segment leaf.\n+     * segment before segment leaf. For root pointer, will return null.\n+     *\n+     * @since 2.5\n      */\n     public JsonPointer head() {\n         return _headSegment;\n--- a/src/test/java/com/fasterxml/jackson/core/base64/TestBase64Parsing.java\n+++ b/src/test/java/com/fasterxml/jackson/core/base64/TestBase64Parsing.java\n         return result;\n     }\n \n-    @SuppressWarnings(\"resource\")\n     private void _testStreaming(boolean useBytes) throws IOException\n     {\n         final int[] SIZES = new int[] {\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestValueConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestValueConversions.java\n import com.fasterxml.jackson.core.JsonParser;\n import com.fasterxml.jackson.core.JsonToken;\n \n-@SuppressWarnings(\"resource\")\n public class TestValueConversions\n     extends com.fasterxml.jackson.core.BaseTest\n {\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java\n  * Set of basic unit tests for verifying basic generator\n  * features.\n  */\n-@SuppressWarnings(\"resource\")\n public class TestGeneratorMisc\n     extends com.fasterxml.jackson.core.BaseTest\n {", "timestamp": 1417975912, "metainfo": ""}