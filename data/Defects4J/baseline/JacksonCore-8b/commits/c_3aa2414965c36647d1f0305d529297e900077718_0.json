{"sha": "3aa2414965c36647d1f0305d529297e900077718", "log": "minor writer side cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n      */\n \n     @Override\n-    public void writeFieldName(String name)  throws IOException, JsonGenerationException\n-    {\n-        int status = _writeContext.writeFieldName(name);\n+    public void writeFieldName(String name)  throws IOException\n+    {\n+        if (_cfgPrettyPrinter != null) {\n+            _writePPFieldName(name);\n+            return;\n+        }\n+        final int status = _writeContext.writeFieldName(name);\n         if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n             _reportError(\"Can not write a field name, expecting a value\");\n         }\n-        if (_cfgPrettyPrinter != null) {\n-            _writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));\n-            return;\n-        }\n         if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) { // need comma\n             if (_outputTail >= _outputEnd) {\n                 _flushBuffer();\n         _writeFieldName(name);\n     }\n \n-    protected final void _writeFieldName(String name)\n-        throws IOException, JsonGenerationException\n+    protected final void _writeFieldName(String name) throws IOException\n     {\n         /* To support [JACKSON-46], we'll do this:\n          * (Question: should quoting of spaces (etc) still be enabled?)\n     }\n     \n     @Override\n-    public void writeFieldName(SerializableString name)\n-        throws IOException, JsonGenerationException\n-    {\n-        // Object is a value, need to verify it's allowed\n-        int status = _writeContext.writeFieldName(name.getValue());\n+    public void writeFieldName(SerializableString name) throws IOException\n+    {\n+        if (_cfgPrettyPrinter != null) {\n+            _writePPFieldName(name);\n+            return;\n+        }\n+        final int status = _writeContext.writeFieldName(name.getValue());\n         if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n             _reportError(\"Can not write a field name, expecting a value\");\n-        }\n-        if (_cfgPrettyPrinter != null) {\n-            _writePPFieldName(name, (status == JsonWriteContext.STATUS_OK_AFTER_COMMA));\n-            return;\n         }\n         if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {\n             if (_outputTail >= _outputEnd) {\n      */\n \n     @Override\n-    public final void writeStartArray() throws IOException, JsonGenerationException\n+    public final void writeStartArray() throws IOException\n     {\n         _verifyValueWrite(\"start an array\");\n         _writeContext = _writeContext.createChildArrayContext();\n     }\n \n     @Override\n-    public final void writeEndArray() throws IOException, JsonGenerationException\n+    public final void writeEndArray() throws IOException\n     {\n         if (!_writeContext.inArray()) {\n             _reportError(\"Current context not an ARRAY but \"+_writeContext.getTypeDesc());\n     }\n \n     @Override\n-    public final void writeStartObject() throws IOException, JsonGenerationException\n+    public final void writeStartObject() throws IOException\n     {\n         _verifyValueWrite(\"start an object\");\n         _writeContext = _writeContext.createChildObjectContext();\n     }\n \n     @Override\n-    public final void writeEndObject() throws IOException, JsonGenerationException\n+    public final void writeEndObject() throws IOException\n     {\n         if (!_writeContext.inObject()) {\n             _reportError(\"Current context not an object but \"+_writeContext.getTypeDesc());\n      * Specialized version of <code>_writeFieldName</code>, off-lined\n      * to keep the \"fast path\" as simple (and hopefully fast) as possible.\n      */\n-    protected final void _writePPFieldName(String name, boolean commaBefore)\n-        throws IOException, JsonGenerationException\n-    {\n-        if (commaBefore) {\n+    protected final void _writePPFieldName(String name) throws IOException\n+    {\n+        int status = _writeContext.writeFieldName(name);\n+        if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n+            _reportError(\"Can not write a field name, expecting a value\");\n+        }\n+        if ((status == JsonWriteContext.STATUS_OK_AFTER_COMMA)) {\n             _cfgPrettyPrinter.writeObjectEntrySeparator(this);\n         } else {\n             _cfgPrettyPrinter.beforeObjectEntries(this);\n         }\n     }\n \n-    protected final void _writePPFieldName(SerializableString name, boolean commaBefore)\n-        throws IOException, JsonGenerationException\n-    {\n-        if (commaBefore) {\n+    protected final void _writePPFieldName(SerializableString name) throws IOException\n+    {\n+        final int status = _writeContext.writeFieldName(name.getValue());\n+        if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n+            _reportError(\"Can not write a field name, expecting a value\");\n+        }\n+        if (status == JsonWriteContext.STATUS_OK_AFTER_COMMA) {\n             _cfgPrettyPrinter.writeObjectEntrySeparator(this);\n         } else {\n             _cfgPrettyPrinter.beforeObjectEntries(this);\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n      */\n \n     @Override\n-    public void writeFieldName(String name)  throws IOException, JsonGenerationException\n+    public void writeFieldName(String name)  throws IOException\n     {\n         int status = _writeContext.writeFieldName(name);\n         if (status == JsonWriteContext.STATUS_EXPECT_VALUE) {\n     }\n \n     @Override\n-    public void writeFieldName(SerializableString name)\n-        throws IOException, JsonGenerationException\n+    public void writeFieldName(SerializableString name) throws IOException\n     {\n         // Object is a value, need to verify it's allowed\n         int status = _writeContext.writeFieldName(name.getValue());\n         _writeContext = _writeContext.getParent();\n     }\n \n-    protected void _writeFieldName(String name, boolean commaBefore)\n-        throws IOException, JsonGenerationException\n+    protected void _writeFieldName(String name, boolean commaBefore) throws IOException\n     {\n         if (_cfgPrettyPrinter != null) {\n             _writePPFieldName(name, commaBefore);\n         _outputBuffer[_outputTail++] = '\"';\n     }\n \n-    public void _writeFieldName(SerializableString name, boolean commaBefore)\n-        throws IOException, JsonGenerationException\n+    protected void _writeFieldName(SerializableString name, boolean commaBefore) throws IOException\n     {\n         if (_cfgPrettyPrinter != null) {\n             _writePPFieldName(name, commaBefore);\n      */\n \n     @Override\n-    public void writeString(String text)\n-        throws IOException, JsonGenerationException\n+    public void writeString(String text) throws IOException\n     {\n         _verifyValueWrite(\"write text value\");\n         if (text == null) {\n     }\n \n     @Override\n-    public void writeString(char[] text, int offset, int len)\n-        throws IOException, JsonGenerationException\n+    public void writeString(char[] text, int offset, int len) throws IOException\n     {\n         _verifyValueWrite(\"write text value\");\n         if (_outputTail >= _outputEnd) {\n     }\n \n     @Override\n-    public void writeString(SerializableString sstr)\n-        throws IOException, JsonGenerationException\n+    public void writeString(SerializableString sstr) throws IOException\n     {\n         _verifyValueWrite(\"write text value\");\n         if (_outputTail >= _outputEnd) {\n     }\n \n     @Override\n-    public void writeRawUTF8String(byte[] text, int offset, int length)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void writeRawUTF8String(byte[] text, int offset, int length) throws IOException {\n         // could add support for buffering if we really want it...\n         _reportUnsupportedOperation();\n     }\n \n     @Override\n-    public void writeUTF8String(byte[] text, int offset, int length)\n-        throws IOException, JsonGenerationException\n-    {\n+    public void writeUTF8String(byte[] text, int offset, int length) throws IOException {\n         // could add support for buffering if we really want it...\n         _reportUnsupportedOperation();\n     }\n      */\n \n     @Override\n-    public void writeRaw(String text)\n-        throws IOException, JsonGenerationException\n+    public void writeRaw(String text) throws IOException\n     {\n         // Nothing to check, can just output as is\n         int len = text.length();\n     }\n \n     @Override\n-    public void writeRaw(String text, int start, int len)\n-        throws IOException, JsonGenerationException\n+    public void writeRaw(String text, int start, int len) throws IOException\n     {\n         // Nothing to check, can just output as is\n         int room = _outputEnd - _outputTail;\n \n     // @since 2.1\n     @Override\n-    public void writeRaw(SerializableString text) throws IOException, JsonGenerationException {\n+    public void writeRaw(SerializableString text) throws IOException {\n         writeRaw(text.getValue());\n     }\n     \n     @Override\n-    public void writeRaw(char[] text, int offset, int len)\n-        throws IOException, JsonGenerationException\n+    public void writeRaw(char[] text, int offset, int len) throws IOException\n     {\n         // Only worth buffering if it's a short write?\n         if (len < SHORT_WRITE) {\n     }\n \n     @Override\n-    public void writeRaw(char c)\n-        throws IOException, JsonGenerationException\n+    public void writeRaw(char c) throws IOException\n     {\n         if (_outputTail >= _outputEnd) {\n             _flushBuffer();\n         _outputBuffer[_outputTail++] = c;\n     }\n \n-    private void writeRawLong(String text)\n-        throws IOException, JsonGenerationException\n+    private void writeRawLong(String text) throws IOException\n     {\n         int room = _outputEnd - _outputTail;\n         // If not, need to do it by looping", "timestamp": 1398836259, "metainfo": ""}