{"sha": "b169e5bb07707a009c87c346461f84f2d8545dde", "log": "minor improvements to int decoding", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java\n \n     final static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);\n     final static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);\n-    \n+\n     /**\n      * Fast method for parsing integers that are known to fit into\n      * regular 32-bit signed int type. This means that length is\n     public static int parseInt(char[] ch, int off, int len)\n     {\n         int num = ch[off] - '0';\n-        len += off;\n-        // This looks ugly, but appears the fastest way (as per measurements)\n-        if (++off < len) {\n-            num = (num * 10) + (ch[off] - '0');\n-            if (++off < len) {\n-                num = (num * 10) + (ch[off] - '0');\n-                if (++off < len) {\n-                    num = (num * 10) + (ch[off] - '0');\n-                    if (++off < len) {\n-                        num = (num * 10) + (ch[off] - '0');\n-                        if (++off < len) {\n-                            num = (num * 10) + (ch[off] - '0');\n-                            if (++off < len) {\n-                                num = (num * 10) + (ch[off] - '0');\n-                                if (++off < len) {\n-                                    num = (num * 10) + (ch[off] - '0');\n-                                    if (++off < len) {\n-                                        num = (num * 10) + (ch[off] - '0');\n-                                    }\n-                                }\n-                            }\n-                        }\n-                    }\n+\n+        if (len > 4) {\n+            num = (num * 10) + (ch[++off] - '0');\n+            num = (num * 10) + (ch[++off] - '0');\n+            num = (num * 10) + (ch[++off] - '0');\n+            num = (num * 10) + (ch[++off] - '0');\n+            len -= 4;\n+            if (len > 4) {\n+                num = (num * 10) + (ch[++off] - '0');\n+                num = (num * 10) + (ch[++off] - '0');\n+                num = (num * 10) + (ch[++off] - '0');\n+                num = (num * 10) + (ch[++off] - '0');\n+                len -= 4;\n+            }\n+        }\n+        if (len > 1) {\n+            num = (num * 10) + (ch[++off] - '0');\n+            if (len > 2) {\n+                num = (num * 10) + (ch[++off] - '0');\n+                if (len > 3) {\n+                    num = (num * 10) + (ch[++off] - '0');\n                 }\n             }\n         }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonGenerator.java\n         throws Exception\n     {\n         int[] VALUES = new int[] {\n-            0, 1, -9, 32, -32, 57, 13240, -9999, Integer.MAX_VALUE, Integer.MAX_VALUE\n+            0, 1, -9, 32, -32, 57, 189, 2017, -9999, 13240, 123456,\n+            1111111, 22222222, 123456789, Integer.MAX_VALUE, Integer.MAX_VALUE\n         };\n         for (int i = 0; i < VALUES.length; ++i) {\n             int VALUE = VALUES[i];", "timestamp": 1398319707, "metainfo": ""}