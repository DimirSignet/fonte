{"sha": "5cf2e6e70331140abd391a6e1ae6f3e35eedaadb", "log": "Last piece of refactoring wrt #110", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n  * Copyright (c) 2007- Tatu Saloranta, tatu.saloranta@iki.fi\n  */\n package com.fasterxml.jackson.core;\n+\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_EMBEDDED_OBJECT;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_END_ARRAY;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_END_OBJECT;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_FALSE;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_FIELD_NAME;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_NOT_AVAILABLE;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_NULL;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_NUMBER_FLOAT;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_NUMBER_INT;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_START_ARRAY;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_START_OBJECT;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_STRING;\n+import static com.fasterxml.jackson.core.JsonTokenId.ID_TRUE;\n \n import java.io.*;\n import java.math.BigDecimal;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n \n+import com.fasterxml.jackson.core.JsonParser.NumberType;\n import com.fasterxml.jackson.core.io.CharacterEscapes;\n import com.fasterxml.jackson.core.util.VersionUtil;\n \n      * parser, although it may cause parser to internally process\n      * more data (if it lazy loads contents of value events, for example)\n      */\n-    public abstract void copyCurrentEvent(JsonParser jp)\n-        throws IOException, JsonProcessingException;\n+    public void copyCurrentEvent(JsonParser jp)\n+        throws IOException, JsonProcessingException\n+    {\n+        JsonToken t = jp.getCurrentToken();\n+        // sanity check; what to do?\n+        if (t == null) {\n+            _reportError(\"No current event to copy\");\n+        }\n+        switch (t.id()) {\n+        case ID_NOT_AVAILABLE:\n+            _reportError(\"No current event to copy\");\n+        case ID_START_OBJECT:\n+            writeStartObject();\n+            break;\n+        case ID_END_OBJECT:\n+            writeEndObject();\n+            break;\n+        case ID_START_ARRAY:\n+            writeStartArray();\n+            break;\n+        case ID_END_ARRAY:\n+            writeEndArray();\n+            break;\n+        case ID_FIELD_NAME:\n+            writeFieldName(jp.getCurrentName());\n+            break;\n+        case ID_STRING:\n+            if (jp.hasTextCharacters()) {\n+                writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n+            } else {\n+                writeString(jp.getText());\n+            }\n+            break;\n+        case ID_NUMBER_INT:\n+        {\n+            NumberType n = jp.getNumberType();\n+            if (n == NumberType.INT) {\n+                writeNumber(jp.getIntValue());\n+            } else if (n == NumberType.BIG_INTEGER) {\n+                writeNumber(jp.getBigIntegerValue());\n+            } else {\n+                writeNumber(jp.getLongValue());\n+            }\n+            break;\n+        }\n+        case ID_NUMBER_FLOAT:\n+        {\n+            NumberType n = jp.getNumberType();\n+            if (n == NumberType.BIG_DECIMAL) {\n+                writeNumber(jp.getDecimalValue());\n+            } else if (n == NumberType.FLOAT) {\n+                writeNumber(jp.getFloatValue());\n+            } else {\n+                writeNumber(jp.getDoubleValue());\n+            }\n+            break;\n+        }\n+        case ID_TRUE:\n+            writeBoolean(true);\n+            break;\n+        case ID_FALSE:\n+            writeBoolean(false);\n+            break;\n+        case ID_NULL:\n+            writeNull();\n+            break;\n+        case ID_EMBEDDED_OBJECT:\n+            writeObject(jp.getEmbeddedObject());\n+            break;\n+        default:\n+            _throwInternal();\n+        }\n+    }\n \n     /**\n      * Method for copying contents of the current event\n      * the event parser already pointed to (if there were no\n      * enclosed events), or the last enclosed event copied.\n      */\n-    public abstract void copyCurrentStructure(JsonParser jp)\n-        throws IOException, JsonProcessingException;\n+    public void copyCurrentStructure(JsonParser jp)\n+        throws IOException, JsonProcessingException\n+    {\n+        JsonToken t = jp.getCurrentToken();\n+        if (t == null) {\n+            _reportError(\"No current event to copy\");\n+        }\n+        // Let's handle field-name separately first\n+        int id = t.id();\n+        if (id == ID_FIELD_NAME) {\n+            writeFieldName(jp.getCurrentName());\n+            t = jp.nextToken();\n+            id = t.id();\n+            // fall-through to copy the associated value\n+        }\n+        switch (id) {\n+        case ID_START_OBJECT:\n+            writeStartObject();\n+            while (jp.nextToken() != JsonToken.END_OBJECT) {\n+                copyCurrentStructure(jp);\n+            }\n+            writeEndObject();\n+            break;\n+        case ID_START_ARRAY:\n+            writeStartArray();\n+            while (jp.nextToken() != JsonToken.END_ARRAY) {\n+                copyCurrentStructure(jp);\n+            }\n+            writeEndArray();\n+            break;\n+        default:\n+            copyCurrentEvent(jp);\n+        }\n+    }\n \n     /*\n     /**********************************************************\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n import java.io.*;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.JsonParser.NumberType;\n import com.fasterxml.jackson.core.json.DupDetector;\n import com.fasterxml.jackson.core.json.JsonWriteContext;\n import com.fasterxml.jackson.core.util.DefaultPrettyPrinter;\n import com.fasterxml.jackson.core.util.VersionUtil;\n-\n-import static com.fasterxml.jackson.core.JsonTokenId.*;\n \n /**\n  * This base class implements part of API that a JSON generator exposes\n \n     /*\n     /**********************************************************\n-    /* Public API, copy-through methods\n-    /**********************************************************\n-     */\n-\n-    @Override\n-    public final void copyCurrentEvent(JsonParser jp)\n-        throws IOException, JsonProcessingException\n-    {\n-        JsonToken t = jp.getCurrentToken();\n-        // sanity check; what to do?\n-        if (t == null) {\n-            _reportError(\"No current event to copy\");\n-        }\n-        switch (t.id()) {\n-        case ID_NOT_AVAILABLE:\n-            _reportError(\"No current event to copy\");\n-        case ID_START_OBJECT:\n-            writeStartObject();\n-            break;\n-        case ID_END_OBJECT:\n-            writeEndObject();\n-            break;\n-        case ID_START_ARRAY:\n-            writeStartArray();\n-            break;\n-        case ID_END_ARRAY:\n-            writeEndArray();\n-            break;\n-        case ID_FIELD_NAME:\n-            writeFieldName(jp.getCurrentName());\n-            break;\n-        case ID_STRING:\n-            if (jp.hasTextCharacters()) {\n-                writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n-            } else {\n-                writeString(jp.getText());\n-            }\n-            break;\n-        case ID_NUMBER_INT:\n-        {\n-            NumberType n = jp.getNumberType();\n-            if (n == NumberType.INT) {\n-                writeNumber(jp.getIntValue());\n-            } else if (n == NumberType.BIG_INTEGER) {\n-                writeNumber(jp.getBigIntegerValue());\n-            } else {\n-                writeNumber(jp.getLongValue());\n-            }\n-            break;\n-        }\n-        case ID_NUMBER_FLOAT:\n-        {\n-            NumberType n = jp.getNumberType();\n-            if (n == NumberType.BIG_DECIMAL) {\n-                writeNumber(jp.getDecimalValue());\n-            } else if (n == NumberType.FLOAT) {\n-                writeNumber(jp.getFloatValue());\n-            } else {\n-                writeNumber(jp.getDoubleValue());\n-            }\n-            break;\n-        }\n-        case ID_TRUE:\n-            writeBoolean(true);\n-            break;\n-        case ID_FALSE:\n-            writeBoolean(false);\n-            break;\n-        case ID_NULL:\n-            writeNull();\n-            break;\n-        case ID_EMBEDDED_OBJECT:\n-            writeObject(jp.getEmbeddedObject());\n-            break;\n-        default:\n-            _throwInternal();\n-        }\n-    }\n-\n-    @Override\n-    public final void copyCurrentStructure(JsonParser jp)\n-        throws IOException, JsonProcessingException\n-    {\n-        JsonToken t = jp.getCurrentToken();\n-        if (t == null) {\n-            _reportError(\"No current event to copy\");\n-        }\n-        // Let's handle field-name separately first\n-        int id = t.id();\n-        if (id == ID_FIELD_NAME) {\n-            writeFieldName(jp.getCurrentName());\n-            t = jp.nextToken();\n-            id = t.id();\n-            // fall-through to copy the associated value\n-        }\n-        switch (id) {\n-        case ID_START_OBJECT:\n-            writeStartObject();\n-            while (jp.nextToken() != JsonToken.END_OBJECT) {\n-                copyCurrentStructure(jp);\n-            }\n-            writeEndObject();\n-            break;\n-        case ID_START_ARRAY:\n-            writeStartArray();\n-            while (jp.nextToken() != JsonToken.END_ARRAY) {\n-                copyCurrentStructure(jp);\n-            }\n-            writeEndArray();\n-            break;\n-        default:\n-            copyCurrentEvent(jp);\n-        }\n-    }\n-    \n-    /*\n-    /**********************************************************\n     /* Package methods for this, sub-classes\n     /**********************************************************\n      */\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n import java.math.BigInteger;\n \n import com.fasterxml.jackson.core.*;\n-import com.fasterxml.jackson.core.JsonParser.NumberType;\n import com.fasterxml.jackson.core.io.CharacterEscapes;\n-\n-import static com.fasterxml.jackson.core.JsonTokenId.*;\n \n public class JsonGeneratorDelegate extends JsonGenerator\n {\n     public void copyCurrentEvent(JsonParser jp) throws IOException, JsonProcessingException {\n         if (delegateCopyMethods) {\n             delegate.copyCurrentEvent(jp);\n-            return;\n-        }\n-        JsonToken t = jp.getCurrentToken();\n-        // sanity check; what to do?\n-        if (t == null) {\n-            _reportError(\"No current event to copy\");\n-        }\n-        switch (t.id()) {\n-        case ID_NOT_AVAILABLE:\n-            _reportError(\"No current event to copy\");\n-        case ID_START_OBJECT:\n-            writeStartObject();\n-            break;\n-        case ID_END_OBJECT:\n-            writeEndObject();\n-            break;\n-        case ID_START_ARRAY:\n-            writeStartArray();\n-            break;\n-        case ID_END_ARRAY:\n-            writeEndArray();\n-            break;\n-        case ID_FIELD_NAME:\n-            writeFieldName(jp.getCurrentName());\n-            break;\n-        case ID_STRING:\n-            if (jp.hasTextCharacters()) {\n-                writeString(jp.getTextCharacters(), jp.getTextOffset(), jp.getTextLength());\n-            } else {\n-                writeString(jp.getText());\n-            }\n-            break;\n-        case ID_NUMBER_INT:\n-        {\n-            NumberType n = jp.getNumberType();\n-            if (n == NumberType.INT) {\n-                writeNumber(jp.getIntValue());\n-            } else if (n == NumberType.BIG_INTEGER) {\n-                writeNumber(jp.getBigIntegerValue());\n-            } else {\n-                writeNumber(jp.getLongValue());\n-            }\n-            break;\n-        }\n-        case ID_NUMBER_FLOAT:\n-        {\n-            NumberType n = jp.getNumberType();\n-            if (n == NumberType.BIG_DECIMAL) {\n-                writeNumber(jp.getDecimalValue());\n-            } else if (n == NumberType.FLOAT) {\n-                writeNumber(jp.getFloatValue());\n-            } else {\n-                writeNumber(jp.getDoubleValue());\n-            }\n-            break;\n-        }\n-        case ID_TRUE:\n-            writeBoolean(true);\n-            break;\n-        case ID_FALSE:\n-            writeBoolean(false);\n-            break;\n-        case ID_NULL:\n-            writeNull();\n-            break;\n-        case ID_EMBEDDED_OBJECT:\n-            writeObject(jp.getEmbeddedObject());\n-            break;\n-        default:\n-            _throwInternal();\n+        } else {\n+            super.copyCurrentEvent(jp);\n         }\n     }\n \n     {\n         if (delegateCopyMethods) {\n             delegate.copyCurrentStructure(jp);\n-            return;\n-        }\n-        JsonToken t = jp.getCurrentToken();\n-        if (t == null) {\n-            _reportError(\"No current event to copy\");\n-        }\n-        // Let's handle field-name separately first\n-        int id = t.id();\n-        if (id == ID_FIELD_NAME) {\n-            writeFieldName(jp.getCurrentName());\n-            t = jp.nextToken();\n-            id = t.id();\n-            // fall-through to copy the associated value\n-        }\n-        switch (id) {\n-        case ID_START_OBJECT:\n-            writeStartObject();\n-            while (jp.nextToken() != JsonToken.END_OBJECT) {\n-                copyCurrentStructure(jp);\n-            }\n-            writeEndObject();\n-            break;\n-        case ID_START_ARRAY:\n-            writeStartArray();\n-            while (jp.nextToken() != JsonToken.END_ARRAY) {\n-                copyCurrentStructure(jp);\n-            }\n-            writeEndArray();\n-            break;\n-        default:\n-            copyCurrentEvent(jp);\n+        } else {\n+            super.copyCurrentStructure(jp);\n         }\n     }\n ", "timestamp": 1383452250, "metainfo": ""}