{"sha": "0e8fb067dc4980c868830c3e9d1bac8ec45faa72", "log": "Add and test withXxx methods   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/java/org/joda/time/Duration.java\n      * @return the new duration instance\n      */\n     public final Duration withDurationAdded(ReadableDuration durationToAdd) {\n-        return withDurationAdded(durationToAdd, 1);\n+        if (durationToAdd == null) {\n+            return this;\n+        }\n+        return withDurationAdded(durationToAdd.getMillis(), 1);\n     }\n \n     /**\n         if (durationToAdd == null || scalar == 0) {\n             return this;\n         }\n-        long add = FieldUtils.safeMultiply(durationToAdd.getMillis(), scalar);\n-        long duration = FieldUtils.safeAdd(getMillis(), add);\n-        return new Duration(duration);\n+        return withDurationAdded(durationToAdd.getMillis(), scalar);\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n      *\n      * @param startInstant  the start instant for the new interval\n      * @return an interval with the end from this interval and the specified start\n+     * @throws IllegalArgumentException if the resulting interval has end before start\n      */\n     public final Interval withStartMillis(long startInstant) {\n         if (startInstant == getStartMillis()) {\n      *\n      * @param start  the start instant for the new interval, null means now\n      * @return an interval with the end from this interval and the specified start\n+     * @throws IllegalArgumentException if the resulting interval has end before start\n      */\n     public final Interval withStartInstant(ReadableInstant start) {\n         long startMillis = DateTimeUtils.getInstantMillis(start);\n      *\n      * @param endInstant  the end instant for the new interval\n      * @return an interval with the start from this interval and the specified end\n+     * @throws IllegalArgumentException if the resulting interval has end before start\n      */\n     public final Interval withEndMillis(long endInstant) {\n         if (endInstant == getEndMillis()) {\n      *\n      * @param end  the end instant for the new interval, null means now\n      * @return an interval with the start from this interval and the specified end\n+     * @throws IllegalArgumentException if the resulting interval has end before start\n      */\n     public final Interval withEndInstant(ReadableInstant end) {\n         long endMillis = DateTimeUtils.getInstantMillis(end);\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n         assertSame(test, result);\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RD1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(8000L));\n+        assertEquals(8123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_RD2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(0L));\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithDurationAdded_RD3() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(null);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithDurationAdded_RD_int1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(8000L), 1);\n+        assertEquals(8123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_RD_int2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(8000L), 2);\n+        assertEquals(16123L, result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_RD_int3() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(8000L), -1);\n+        assertEquals((123L - 8000L), result.getMillis());\n+    }\n+\n+    public void testWithDurationAdded_RD_int4() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(0L), 1);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithDurationAdded_RD_int5() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(new Duration(8000L), 0);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithDurationAdded_RD_int6() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withDurationAdded(null, 0);\n+        assertSame(test, result);\n+    }\n+\n }\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n         assertEquals(\"2004-06-09T07:08:09.010/2005-08-13T12:14:16.018\", test.toString());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testWithStartMillis_long1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.withStartMillis(TEST_TIME1 - 1);\n+        assertEquals(TEST_TIME1 - 1, result.getStartMillis());\n+        assertEquals(TEST_TIME2, result.getEndMillis());\n+    }\n+\n+    public void testWithStartMillis_long2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.withStartMillis(TEST_TIME2 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithStartInstant_RI1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.withStartInstant(new Instant(TEST_TIME1 - 1));\n+        assertEquals(TEST_TIME1 - 1, result.getStartMillis());\n+        assertEquals(TEST_TIME2, result.getEndMillis());\n+    }\n+\n+    public void testWithStartInstant_RI2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.withStartInstant(new Instant(TEST_TIME2 + 1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithStartInstant_RI3() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.withStartInstant(null);\n+        assertEquals(TEST_TIME_NOW, result.getStartMillis());\n+        assertEquals(TEST_TIME2, result.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithEndMillis_long1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.withEndMillis(TEST_TIME2 - 1);\n+        assertEquals(TEST_TIME1, result.getStartMillis());\n+        assertEquals(TEST_TIME2 - 1, result.getEndMillis());\n+    }\n+\n+    public void testWithEndMillis_long2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.withEndMillis(TEST_TIME1 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithEndInstant_RI1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.withEndInstant(new Instant(TEST_TIME2 - 1));\n+        assertEquals(TEST_TIME1, result.getStartMillis());\n+        assertEquals(TEST_TIME2 - 1, result.getEndMillis());\n+    }\n+\n+    public void testWithEndInstant_RI2() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        try {\n+            test.withEndInstant(new Instant(TEST_TIME1 - 1));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testWithEndInstant_RI3() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.withEndInstant(null);\n+        assertEquals(TEST_TIME1, result.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, result.getEndMillis());\n+    }\n+\n }", "timestamp": 1092519478, "metainfo": ""}