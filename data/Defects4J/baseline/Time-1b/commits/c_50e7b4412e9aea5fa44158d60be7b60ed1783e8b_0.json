{"sha": "50e7b4412e9aea5fa44158d60be7b60ed1783e8b", "log": "Merge branch 'mjunginger-patch-1'", "commit": "\n--- a/src/main/java/org/joda/time/format/DateTimeFormat.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormat.java\n import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.Locale;\n import java.util.Map;\n \n     static final int TIME = 1;\n     /** Type constant for DATETIME. */\n     static final int DATETIME = 2;\n+    \n+    private static final int PATTERN_CACHE_SIZE = 500;\n \n     /** Maps patterns to formatters, patterns don't vary by locale. */\n-    private static final Map<String, DateTimeFormatter> cPatternedCache = new HashMap<String, DateTimeFormatter>(7);\n+    // Use a simple LRU Cache\n+    private static final Map<String, DateTimeFormatter> PATTERN_CACHE = new LinkedHashMap<String, DateTimeFormatter>(7){\n+        /** Introduced in 2.3 */\n+\t\tprivate static final long serialVersionUID = 23L;\n+\n+\t\t@Override\n+    \tprotected boolean removeEldestEntry(final Map.Entry<String,DateTimeFormatter> eldest) {\n+    \t\treturn size() > PATTERN_CACHE_SIZE;\n+    \t};\n+    };\n+    \n     /** Maps patterns to formatters, patterns don't vary by locale. */\n-    private static final DateTimeFormatter[] cStyleCache = new DateTimeFormatter[25];\n+    private static final DateTimeFormatter[] STYLE_CACHE = new DateTimeFormatter[25];\n \n     //-----------------------------------------------------------------------\n     /**\n      * @throws IllegalArgumentException if the pattern is invalid\n      * @see #appendPatternTo\n      */\n-    private static DateTimeFormatter createFormatterForPattern(String pattern) {\n+    private static DateTimeFormatter createFormatterForPattern(final String pattern) {\n         if (pattern == null || pattern.length() == 0) {\n             throw new IllegalArgumentException(\"Invalid pattern specification\");\n         }\n         DateTimeFormatter formatter = null;\n-        synchronized (cPatternedCache) {\n-            formatter = cPatternedCache.get(pattern);\n+        synchronized (PATTERN_CACHE) {\n+            formatter = PATTERN_CACHE.get(pattern);\n             if (formatter == null) {\n-                DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n+                final DateTimeFormatterBuilder builder = new DateTimeFormatterBuilder();\n                 parsePatternTo(builder, pattern);\n                 formatter = builder.toFormatter();\n \n-                cPatternedCache.put(pattern, formatter);\n+                PATTERN_CACHE.put(pattern, formatter);\n             }\n         }\n         return formatter;\n      * @param timeStyle  the time style\n      * @return the formatter\n      */\n-    private static DateTimeFormatter createFormatterForStyleIndex(int dateStyle, int timeStyle) {\n-        int index = ((dateStyle << 2) + dateStyle) + timeStyle;\n-        DateTimeFormatter f = null;\n-        synchronized (cStyleCache) {\n-            f = cStyleCache[index];\n-            if (f == null) {\n-                int type = DATETIME;\n-                if (dateStyle == NONE) {\n-                    type = TIME;\n-                } else if (timeStyle == NONE) {\n-                    type = DATE;\n-                }\n-                StyleFormatter llf = new StyleFormatter(\n-                        dateStyle, timeStyle, type);\n-                f = new DateTimeFormatter(llf, llf);\n-                cStyleCache[index] = f;\n-            }\n-        }\n-        return f;\n+\tprivate static DateTimeFormatter createFormatterForStyleIndex(final int dateStyle, final int timeStyle) {\n+\t\tfinal int index = ((dateStyle << 2) + dateStyle) + timeStyle;\n+\t\t// Should never happen but do a double check...\n+\t\tif (index >= STYLE_CACHE.length) {\n+\t\t\treturn createDateTimeFormatter(dateStyle, timeStyle);\n+\t\t}\n+\t\tDateTimeFormatter f = null;\n+\t\tsynchronized (STYLE_CACHE) {\n+\t\t\tf = STYLE_CACHE[index];\n+\t\t\tif (f == null) {\n+\t\t\t\tf = createDateTimeFormatter(dateStyle, timeStyle);\n+\t\t\t\tSTYLE_CACHE[index] = f;\n+\t\t\t}\n+\t\t}\n+\t\treturn f;\n+\t}\n+    \n+    /**\n+     * Creates a formatter for the specified style.\n+     * @param dateStyle  the date style\n+     * @param timeStyle  the time style\n+     * @return the formatter\n+     */\n+    private static DateTimeFormatter createDateTimeFormatter(final int dateStyle, final int timeStyle){\n+    \tint type = DATETIME;\n+        if (dateStyle == NONE) {\n+            type = TIME;\n+        } else if (timeStyle == NONE) {\n+            type = DATE;\n+        }\n+        final StyleFormatter llf = new StyleFormatter(\n+                dateStyle, timeStyle, type);\n+        return new DateTimeFormatter(llf, llf);\n     }\n \n     /**", "timestamp": 1375897042, "metainfo": ""}