{"sha": "28982faf799e6a7d06bf443327ea312d95716776", "log": "Add serialization tests   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestDateTimeZone.suite());\n         suite.addTest(TestPeriodType.suite());\n //        suite.addTest(TestParseISO.suite());\n+        \n+        suite.addTest(TestSerialization.suite());\n         return suite;\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestSerialization.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.Serializable;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.CopticChronology;\n+import org.joda.time.chrono.GJChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a Junit unit test for serialization.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestSerialization extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestSerialization.class);\n+    }\n+\n+    public TestSerialization(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSerializedInstant() throws Exception {\n+        Instant test = new Instant();\n+        loadAndCompare(test, \"Instant.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedDateTime() throws Exception {\n+        DateTime test = new DateTime();\n+        loadAndCompare(test, \"DateTime.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedMutableDateTime() throws Exception {\n+        MutableDateTime test = new MutableDateTime();\n+        loadAndCompare(test, \"MutableDateTime.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedDateMidnight() throws Exception {\n+        DateMidnight test = new DateMidnight();\n+        loadAndCompare(test, \"DateMidnight.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedYearMonthDay() throws Exception {\n+        YearMonthDay test = new YearMonthDay();\n+        loadAndCompare(test, \"YearMonthDay.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedTimeOfDay() throws Exception {\n+        TimeOfDay test = new TimeOfDay();\n+        loadAndCompare(test, \"TimeOfDay.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedDateTimeZoneUTC() throws Exception {\n+        DateTimeZone test = DateTimeZone.UTC;\n+        loadAndCompare(test, \"DateTimeZoneUTC.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedDateTimeZone() throws Exception {\n+        DateTimeZone test = PARIS;\n+        loadAndCompare(test, \"DateTimeZone.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedCopticChronology() throws Exception {\n+        CopticChronology test = CopticChronology.getInstance(LONDON);\n+        loadAndCompare(test, \"CopticChronology.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedISOChronology() throws Exception {\n+        ISOChronology test = ISOChronology.getInstance(PARIS);\n+        loadAndCompare(test, \"ISOChronology.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    public void testSerializedGJChronology() throws Exception {\n+        GJChronology test = GJChronology.getInstance(TOKYO);\n+        loadAndCompare(test, \"GJChronology.dat\");\n+        inlineCompare(test);\n+    }\n+\n+    private void loadAndCompare(Serializable test, String filename) throws Exception {\n+        FileInputStream fis = new FileInputStream(\"src/testdata/\" + filename);\n+        ObjectInputStream ois = new ObjectInputStream(fis);\n+        Object obj = ois.readObject();\n+        ois.close();\n+        assertEquals(test, obj);\n+    }\n+\n+    public void inlineCompare(Serializable test) throws Exception {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        Object obj = ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, obj);\n+    }\n+\n+//    //-----------------------------------------------------------------------\n+//    public void testStoreSerializedInstant() throws Exception {\n+//        Instant test = new Instant();\n+//        store(test, \"Instant.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateTime() throws Exception {\n+//        DateTime test = new DateTime();\n+//        store(test, \"DateTime.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedMutableDateTime() throws Exception {\n+//        MutableDateTime test = new MutableDateTime();\n+//        store(test, \"MutableDateTime.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateMidnight() throws Exception {\n+//        DateMidnight test = new DateMidnight();\n+//        store(test, \"DateMidnight.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedYearMonthDay() throws Exception {\n+//        YearMonthDay test = new YearMonthDay();\n+//        store(test, \"YearMonthDay.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedTimeOfDay() throws Exception {\n+//        TimeOfDay test = new TimeOfDay();\n+//        store(test, \"TimeOfDay.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateTimeZoneUTC() throws Exception {\n+//        DateTimeZone test = DateTimeZone.UTC;\n+//        store(test, \"DateTimeZoneUTC.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedDateTimeZone() throws Exception {\n+//        DateTimeZone test = PARIS;\n+//        store(test, \"DateTimeZone.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedCopticChronology() throws Exception {\n+//        CopticChronology test = CopticChronology.getInstance(LONDON);\n+//        store(test, \"CopticChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedISOChronology() throws Exception {\n+//        ISOChronology test = ISOChronology.getInstance(PARIS);\n+//        store(test, \"ISOChronology.dat\");\n+//    }\n+//\n+//    public void testStoreSerializedGJChronology() throws Exception {\n+//        GJChronology test = GJChronology.getInstance(TOKYO);\n+//        store(test, \"GJChronology.dat\");\n+//    }\n+//\n+//    private void store(Serializable test, String filename) throws Exception {\n+//        FileOutputStream fos = new FileOutputStream(\"src/testdata/\" + filename);\n+//        ObjectOutputStream oos = new ObjectOutputStream(fos);\n+//        oos.writeObject(test);\n+//        oos.close();\n+//    }\n+//\n+}", "timestamp": 1115676737, "metainfo": ""}