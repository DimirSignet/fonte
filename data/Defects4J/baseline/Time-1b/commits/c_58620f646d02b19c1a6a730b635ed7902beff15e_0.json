{"sha": "58620f646d02b19c1a6a730b635ed7902beff15e", "log": "Add DateTime.withEarlierOffsetAtOverlap() .withLaterOffsetAtOverlap() [3192457] Allow fine grained control of the offset during a DST overlap reported by Hood Wilson Gusso Silva  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/DateTime.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         return new DateTime(millis, getChronology().withZone(newZone));\n     }\n \n+    /**\n+     * Returns a copy of this ZonedDateTime changing the zone offset to the earlier\n+     * of the two valid offsets at a local time-line overlap.\n+     * <p>\n+     * This method only has any effect when the local time-line overlaps, such as at\n+     * an autumn daylight savings cutover. In this scenario, there are two valid offsets\n+     * for the local date-time. Calling this method will return a date-time with the\n+     * earlier of the two selected.\n+     * <p>\n+     * If this method is called when it is not an overlap, this is returned.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @return a copy of this datetime with the earliest valid offset for the local datetime\n+     */\n+    public DateTime withEarlierOffsetAtOverlap() {\n+        long newMillis = getZone().adjustOffset(getMillis(), false);\n+        return withMillis(newMillis);\n+    }\n+\n+    /**\n+     * Returns a copy of this ZonedDateTime changing the zone offset to the later\n+     * of the two valid offsets at a local time-line overlap.\n+     * <p>\n+     * This method only has any effect when the local time-line overlaps, such as at\n+     * an autumn daylight savings cutover. In this scenario, there are two valid offsets\n+     * for the local date-time. Calling this method will return a date-time with the\n+     * later of the two selected.\n+     * <p>\n+     * If this method is called when it is not an overlap, this is returned.\n+     * <p>\n+     * This instance is immutable and unaffected by this method call.\n+     *\n+     * @return a copy of this datetime with the latest valid offset for the local datetime\n+     */\n+    public DateTime withLaterOffsetAtOverlap() {\n+        long newMillis = getZone().adjustOffset(getMillis(), true);\n+        return withMillis(newMillis);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns a copy of this datetime with the specified date, retaining the time fields.\n--- a/JodaTime/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/main/java/org/joda/time/DateTimeZone.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2011 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n         }\n     }\n \n+    /**\n+     * Adjusts the offset to be the earlier or later one during an overlap.\n+     * \n+     * @param instant  the instant to adjust\n+     * @param earlierOrLater  false for earlier, true for later\n+     * @return the adjusted instant millis\n+     */\n+    public long adjustOffset(long instant, boolean earlierOrLater) {\n+        long before = convertUTCToLocal(instant - 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        long after = convertUTCToLocal(instant + 3 * DateTimeConstants.MILLIS_PER_HOUR);\n+        if (before == after) {\n+            return instant;\n+        }\n+        long local = convertUTCToLocal(instant);\n+        return convertLocalToUTC(local, false, earlierOrLater ? after : before);\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns true if this time zone has no transitions.\n             return forID(iID);\n         }\n     }\n+\n }\n--- a/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTimeZoneCutover.java\n         assertEquals(baseAfter.toString(), testAfter.toString());\n     }\n \n+    public void testBug3192457_adjustOffset() {\n+        final DateTimeZone zone = DateTimeZone.forID(\"Europe/Paris\");\n+        DateTime base = new DateTime(2007, 10, 28, 3, 15, zone);\n+        DateTime baseBefore = base.minusHours(2);\n+        DateTime baseAfter = base.minusHours(1);\n+        \n+        assertSame(base, base.withEarlierOffsetAtOverlap());\n+        assertSame(base, base.withLaterOffsetAtOverlap());\n+        assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());\n+        assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());\n+        \n+        assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());\n+        assertEquals(baseAfter, baseAfter.withLaterOffsetAtOverlap());\n+    }\n+\n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------", "timestamp": 1300148324, "metainfo": ""}