{"sha": "f1266986177fc75583e07a518734c1bf0df295bc", "log": "Merge pull request #71 from seva-ask/fixForSerializationException  Caches should not be serialized\r \r Harmless change, even though it is unnecessary in normal serialization", "commit": "\n--- a/src/main/java/org/joda/time/tz/CachedDateTimeZone.java\n+++ b/src/main/java/org/joda/time/tz/CachedDateTimeZone.java\n \n     private final DateTimeZone iZone;\n \n-    private final Info[] iInfoCache = new Info[cInfoCacheMask + 1];\n+    private final transient Info[] iInfoCache = new Info[cInfoCacheMask + 1];\n \n     private CachedDateTimeZone(DateTimeZone zone) {\n         super(zone.getID());\n--- a/src/main/java/org/joda/time/DateTimeUtils.java\n+++ b/src/main/java/org/joda/time/DateTimeUtils.java\n /**\n  * DateTimeUtils provide public utility methods for the date-time library.\n  * <p>\n- * DateTimeUtils is thread-safe although shared static variables are used.\n+ * DateTimeUtils uses shared static variables which are declared as volatile\n+ * for thread-safety. These can be changed during the lifetime of the application\n+ * however doing so is generally a bad idea.\n  *\n  * @author Stephen Colebourne\n  * @since 1.0\n--- a/src/main/java/org/joda/time/Duration.java\n+++ b/src/main/java/org/joda/time/Duration.java\n         return withDurationAdded(amount.getMillis(), -1);\n     }\n \n+    /**\n+     * Returns a new duration with this length multiplied by the \n+     * specified multiplicand.\n+     * This instance is immutable and is not altered.\n+     * <p>\n+     * If the multiplicand is one, this instance is returned.\n+     * \n+     * @param multiplicand  the multiplicand to multiply this one by\n+     * @return the new duration instance\n+     */\n+    public Duration multipliedBy(long multiplicand) {\n+        if (multiplicand == 1) {\n+            return this;\n+        }\n+        return new Duration(FieldUtils.safeMultiply(getMillis(), multiplicand));\n+    }\n+\n+    /**\n+     * Returns a new duration with this length divided by the \n+     * specified divisor.\n+     * This instance is immutable and is not altered.\n+     * <p>\n+     * If the divisor is one, this instance is returned.\n+     * \n+     * @param divisor  the divisor to divide this one by\n+     * @return the new duration instance\n+     */\n+    public Duration dividedBy(long divisor) {\n+        if (divisor == 1) {\n+            return this;\n+        }\n+        return new Duration(FieldUtils.safeDivide(getMillis(), divisor));\n+    }\n+\n+    /**\n+     * Returns a new duration with this length negated.\n+     * This instance is immutable and is not altered.\n+     * \n+     * @return the new duration instance\n+     */\n+    public Duration negated() {\n+        if (getMillis() == Long.MIN_VALUE) {\n+            throw new ArithmeticException(\"Negation of this duration would overflow\");\n+        }\n+        return new Duration(-getMillis());\n+    }\n+\n }\n--- a/src/main/java/org/joda/time/LocalDate.java\n+++ b/src/main/java/org/joda/time/LocalDate.java\n     /** The chronology to use in UTC. */\n     private final Chronology iChronology;\n     /** The cached hash code. */\n-    private transient volatile int iHash;\n+    private transient int iHash;\n \n     //-----------------------------------------------------------------------\n     /**\n--- a/src/main/java/org/joda/time/field/FieldUtils.java\n+++ b/src/main/java/org/joda/time/field/FieldUtils.java\n         }\n         return total;\n     }\n-    \n+\n+    /**\n+     * Divides the dividend by the divisor throwing an exception if \n+     * overflow occurs or the divisor is zero.\n+     * \n+     * @param dividend  the dividend\n+     * @param divisor  the divisor\n+     * @return the new total\n+     * @throws ArithmeticException if the operation overflows or the divisor is zero\n+     */\n+    public static long safeDivide(long dividend, long divisor) {\n+        if (dividend == Long.MIN_VALUE && divisor == -1L) {\n+            throw new ArithmeticException(\"Multiplication overflows a long: \" + dividend + \" / \" + divisor);\n+        }\n+        return dividend / divisor;\n+    }\n+\n     /**\n      * Casts to an int throwing an exception if overflow occurs.\n      * \n--- a/src/test/java/org/joda/time/TestDuration_Basics.java\n+++ b/src/test/java/org/joda/time/TestDuration_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testMultipliedBy_long1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.multipliedBy(2L);\n+        assertEquals(246L, result.getMillis());\n+    }\n+\n+    public void testMultipliedBy_long2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.multipliedBy(1L);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDividedBy_long1() {\n+        Duration test = new Duration(246L);\n+        Duration result = test.dividedBy(2L);\n+        assertEquals(123L, result.getMillis());\n+    }\n+\n+    public void testDividedBy_long2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.dividedBy(1L);\n+        assertSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testNegated_long1() {\n+        Duration test = new Duration(246L);\n+        Duration result = test.negated();\n+        assertEquals(-246L, result.getMillis());\n+    }\n+\n+    public void testNegated_long2() {\n+        Duration test = new Duration(-246L);\n+        Duration result = test.negated();\n+        assertEquals(246L, result.getMillis());\n+    }\n+\n+    public void testNegated_long3() {\n+        Duration test = new Duration(Long.MIN_VALUE);\n+        try {\n+            test.negated();\n+            fail();\n+        } catch(ArithmeticException e) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testWithDurationAdded_RD_int1() {\n         Duration test = new Duration(123L);\n         Duration result = test.withDurationAdded(new Duration(8000L), 1);\n--- a/src/test/java/org/joda/time/field/TestFieldUtils.java\n+++ b/src/test/java/org/joda/time/field/TestFieldUtils.java\n         } catch (ArithmeticException e) {\n         }\n     }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSafeDivideLongLong() {\n+        assertEquals(1L, FieldUtils.safeDivide(1L, 1L));\n+        \n+        assertEquals(1L, FieldUtils.safeDivide(3L, 3L));\n+        assertEquals(0L, FieldUtils.safeDivide(1L, 3L));\n+        assertEquals(3L, FieldUtils.safeDivide(3L, 1L));\n+        \n+        assertEquals(1L, FieldUtils.safeDivide(5L, 3L));\n+        assertEquals(-1L, FieldUtils.safeDivide(5L, -3L));\n+        assertEquals(-1L, FieldUtils.safeDivide(-5L, 3L));\n+        assertEquals(1L, FieldUtils.safeDivide(-5L, -3L));\n+        \n+        assertEquals(2L, FieldUtils.safeDivide(6L, 3L));\n+        assertEquals(-2L, FieldUtils.safeDivide(6L, -3L));\n+        assertEquals(-2L, FieldUtils.safeDivide(-6L, 3L));\n+        assertEquals(2L, FieldUtils.safeDivide(-6L, -3L));\n+        \n+        assertEquals(2L, FieldUtils.safeDivide(7L, 3L));\n+        assertEquals(-2L, FieldUtils.safeDivide(7L, -3L));\n+        assertEquals(-2L, FieldUtils.safeDivide(-7L, 3L));\n+        assertEquals(2L, FieldUtils.safeDivide(-7L, -3L));\n+        \n+        assertEquals(Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, 1L));\n+        assertEquals(Long.MIN_VALUE, FieldUtils.safeDivide(Long.MIN_VALUE, 1L));\n+        assertEquals(-Long.MAX_VALUE, FieldUtils.safeDivide(Long.MAX_VALUE, -1L));\n+        \n+        try {\n+            FieldUtils.safeDivide(Long.MIN_VALUE, -1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+        \n+        try {\n+            FieldUtils.safeDivide(1L, 0L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n+\n }\n-", "timestamp": 1380931493, "metainfo": ""}