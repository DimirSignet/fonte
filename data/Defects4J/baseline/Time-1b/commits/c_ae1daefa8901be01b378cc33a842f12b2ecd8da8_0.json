{"sha": "ae1daefa8901be01b378cc33a842f12b2ecd8da8", "log": "More tests   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n-        long length = (365 + 2 * 30 + 3 * 7 + 4) * DateTimeConstants.MILLIS_PER_DAY +\n-            5 * DateTimeConstants.MILLIS_PER_HOUR +\n-            6 * DateTimeConstants.MILLIS_PER_MINUTE +\n-            7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        int total = (365 + 2 * 30 + 3 * 7 + 4) * 24 + 5;\n         Duration test = new Duration(length);\n-        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString());\n+        assertEquals(\"PT\" + total + \"H6M7.008S\", test.toString());\n         \n         test = new Duration(0L);\n         assertEquals(\"PT0S\", test.toString());\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n         Interval test = new Interval(dt1, dt2);\n         \n         Period result = test.toPeriod(PeriodType.getYearWeekType());\n-        System.err.println(result);\n         assertEquals(PeriodType.getYearWeekType(), result.getPeriodType());\n         assertEquals(1, result.getYears());\n         assertEquals(0, result.getMonths());\n         assertEquals(8, result.getMillis());\n     }\n \n+    public void testToPeriod_PeriodType3() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 6, 9, 12, 14, 16, 18);\n+        Interval test = new Interval(dt1, dt2);\n+        \n+        Period result = test.toPeriod(PeriodType.getYearWeekType());\n+        assertEquals(PeriodType.getYearWeekType(), result.getPeriodType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(0, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(0, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC);\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Updates.java\n     }\n \n     public void testAdd_RInterval3() {\n-        DateTime dt1 = new DateTime(2005, 12, 18, 0, 0, 0, 8);\n-        DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        MutablePeriod test = new MutablePeriod(100L);  // All type\n-        test.add(new Interval(dt1, dt2));\n-        assertEquals(-1, test.getYears());  // add field value from interval\n-        assertEquals(-6, test.getMonths());  // add field value from interval\n-        assertEquals(-1, test.getWeeks());  // add field value from interval\n-        assertEquals(-2, test.getDays());  // add field value from interval\n-        assertEquals(0, test.getHours());  // time zone OK\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n-        assertEquals(92, test.getMillis());\n-    }\n-\n-    public void testAdd_RInterval4() {\n         MutablePeriod test = new MutablePeriod(100L, PeriodType.getPreciseYearMonthType());\n         test.add(new Interval(0L, 0L));\n         assertEquals(0, test.getYears());\n         assertEquals(100, test.getMillis());\n     }\n \n-    public void testAdd_RInterval5() {\n+    public void testAdd_RInterval4() {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 17, 0, 0, 0, 8);\n         MutablePeriod test = new MutablePeriod(100L, PeriodType.getYearMonthType());\n         assertEquals(108, test.getMillis());\n     }\n \n-    public void testAdd_RInterval6() {\n+    public void testAdd_RInterval5() {\n         MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n         test.add((ReadableInterval) null);\n         assertEquals(1, test.getYears());\n--- a/JodaTime/src/test/org/joda/time/TestPeriodType.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriodType.java\n         assertEquals(\"DayHourType\", type.getName());\n         assertEquals(\"PeriodType[DayHourType]\", type.toString());\n         assertSameAfterSerialization(type);\n-        assertSame(type, type.withChronology(null));\n+        assertSame(PeriodType.getDayHourType(), type.withChronology(null));\n         assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n-        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n+        assertEquals(PeriodType.getDayHourType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"YearDayType\", type.getName());\n         assertEquals(\"PeriodType[YearDayType]\", type.toString());\n         assertSameAfterSerialization(type);\n-        assertSame(type, type.withChronology(null));\n+        assertSame(PeriodType.getYearDayType(), type.withChronology(null));\n         assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n-        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n+        assertEquals(PeriodType.getYearDayType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"YearWeekType\", type.getName());\n         assertEquals(\"PeriodType[YearWeekType]\", type.toString());\n         assertSameAfterSerialization(type);\n-        assertSame(type, type.withChronology(null));\n+        assertSame(PeriodType.getYearWeekType(), type.withChronology(null));\n         assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n-        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n+        assertEquals(PeriodType.getYearWeekType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"YearMonthType\", type.getName());\n         assertEquals(\"PeriodType[YearMonthType]\", type.toString());\n         assertSameAfterSerialization(type);\n-        assertSame(type, type.withChronology(null));\n+        assertSame(PeriodType.getYearMonthType(), type.withChronology(null));\n         assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n-        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n+        assertEquals(PeriodType.getYearMonthType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"AllType\", type.getName());\n         assertEquals(\"PeriodType[AllType]\", type.toString());\n         assertSameAfterSerialization(type);\n-        assertSame(type, type.withChronology(null));\n+        assertSame(PeriodType.getAllType(), type.withChronology(null));\n         assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n-        assertSame(type, type.withChronology(CopticChronology.getInstanceUTC()));\n+        assertEquals(PeriodType.getAllType(CopticChronology.getInstanceUTC()), type.withChronology(CopticChronology.getInstanceUTC()));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n         assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.toDurationMillis());\n     }\n \n+    public void testToPeriod_PeriodType3() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 6, 9, 12, 14, 16, 18);\n+        Period test = new Period(dt1.getMillis(), dt2.getMillis(), PeriodType.getYearWeekType());\n+        \n+        assertEquals(PeriodType.getYearWeekType(), test.getPeriodType());\n+        assertEquals(1, test.getYears());  // tests using years and not weekyears\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testConstructor_RI_RI1() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);", "timestamp": 1092267078, "metainfo": ""}