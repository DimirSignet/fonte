{"sha": "165f427e20ecc390e6705c7649725a86bd39099d", "log": "Example usages of Joda-Time   ", "commit": "\n--- /dev/null\n+++ b/JodaTime/src/example/org/joda/example/time/Examples.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.example.time;\n+\n+import java.util.Locale;\n+\n+import org.joda.time.Instant;\n+\n+/**\n+ * Example code demonstrating how to use Joda-Time.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class Examples {\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            new Examples().run();\n+        } catch (Throwable ex) {\n+            ex.printStackTrace();\n+        }\n+    }\n+\n+    private void run() {\n+        runInstant();\n+    }\n+    \n+    private void runInstant() {\n+        System.out.println(\"Instant\");\n+        System.out.println(\"=======\");\n+        System.out.println(\"Instant stores a point in the datetime continuum as millisecs from 1970-01-01T00:00:00Z\");\n+        System.out.println(\"                       in = new Instant()\");\n+        Instant in = new Instant();\n+        System.out.println(\"Millisecond time:      in.getMillis():           \" + in.getMillis());\n+        System.out.println(\"ISO string version:    in.toString():            \" + in.toString());\n+        System.out.println(\"No chronology:         in.getChronology():       \" + in.getChronology());\n+        System.out.println(\"No time zone:          in.getDateTimeZone():     \" + in.getDateTimeZone());\n+        System.out.println(\"\");\n+        System.out.println(\"Convert to DateTime:   in.toDateTime():          \" + in.toDateTime());\n+        System.out.println(\"Convert to trusted:    in.toTrustedISODateTime():\" + in.toTrustedISODateTime());\n+        System.out.println(\"Convert to MutableDT:  in.toMutableDateTime():   \" + in.toMutableDateTime());\n+        System.out.println(\"Convert to DateOnly:   in.toDateOnly():          \" + in.toDateOnly());\n+        System.out.println(\"Convert to TimeOnly:   in.toTimeOnly():          \" + in.toTimeOnly());\n+        System.out.println(\"Convert to Date:       in.toDate():              \" + in.toDate());\n+        System.out.println(\"Convert to Calendar:   in.toCalendar(Locale.UK): \" + in.toCalendar(Locale.UK).toString().substring(0, 46));\n+        System.out.println(\"Convert to GregorianC: in.toGregorianCalendar(): \" + in.toGregorianCalendar().toString().substring(0, 46));\n+        System.out.println(\"\");\n+        System.out.println(\"                       in2 = new Instant(in.getMillis() + 10)\");\n+        Instant in2 = new Instant(in.getMillis() + 10);\n+        System.out.println(\"Equals ms and chrono:  in.equals(in2):           \" + in.equals(in2));\n+        System.out.println(\"Compare millisecond:   in.compareTo(in2):        \" + in.compareTo(in2));\n+        System.out.println(\"Compare millisecond:   in.isEqual(in2):          \" + in.isEqual(in2));\n+        System.out.println(\"Compare millisecond:   in.isAfter(in2):          \" + in.isAfter(in2));\n+        System.out.println(\"Compare millisecond:   in.isBefore(in2):         \" + in.isBefore(in2));\n+        System.out.println(\"\");\n+        System.out.println(\"Change chrono IGNORED: in.withChronology(...):   \" + in.withChronology(null));\n+        System.out.println(\"Change zone IGNORED:   in.withDateTimeZone(...): \" + in.withDateTimeZone(null));\n+        System.out.println(\"Change zone IGNORED:   in.withDateTimeZoneMoved(...):\" + in.withDateTimeZoneMoved(null));\n+        System.out.println(\"Change millis:         in.withMillis(0):         \" + in.withMillis(0L));\n+    }\n+}", "timestamp": 1081121064, "metainfo": ""}