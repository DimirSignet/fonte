{"sha": "a13f93ca6656aea3adab03a2dea0704f860679cb", "log": "Add Period plus(ReadablePeriod) minus(ReadablePeriod)  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Returns a new period with the specified period added.\n+     * <p>\n+     * Each field of the period is added separately. Thus a period of\n+     * 2 hours 30 minutes plus 3 hours 40 minutes will produce a result\n+     * of 5 hours 70 minutes.\n+     * <p>\n+     * If the period being added contains a non-zero amount for a field that\n+     * is not supported in this period then an exception is thrown.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param period  the period to add, null adds zero and returns this\n+     * @return the new updated period\n+     * @throws UnsupportedOperationException if any field is not supported\n+     * @since 1.5\n+     */\n+    public Period plus(ReadablePeriod period) {\n+        if (period == null) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, period.get(DurationFieldType.YEARS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, period.get(DurationFieldType.MONTHS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, period.get(DurationFieldType.WEEKS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, period.get(DurationFieldType.DAYS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, period.get(DurationFieldType.HOURS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, period.get(DurationFieldType.MINUTES_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, period.get(DurationFieldType.SECONDS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, period.get(DurationFieldType.MILLIS_TYPE));\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Returns a new period with the specified number of years added.\n      * <p>\n      * This period instance is immutable and unaffected by this method call.\n         }\n         int[] values = getValues();  // cloned\n         getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, millis);\n+        return new Period(values, getPeriodType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new period with the specified period subtracted.\n+     * <p>\n+     * Each field of the period is subtracted separately. Thus a period of\n+     * 3 hours 30 minutes minus 2 hours 40 minutes will produce a result\n+     * of 1 hour and -10 minutes.\n+     * <p>\n+     * If the period being added contains a non-zero amount for a field that\n+     * is not supported in this period then an exception is thrown.\n+     * <p>\n+     * This period instance is immutable and unaffected by this method call.\n+     *\n+     * @param period  the period to add, null adds zero and returns this\n+     * @return the new updated period\n+     * @throws UnsupportedOperationException if any field is not supported\n+     * @since 1.5\n+     */\n+    public Period minus(ReadablePeriod period) {\n+        if (period == null) {\n+            return this;\n+        }\n+        int[] values = getValues();  // cloned\n+        getPeriodType().addIndexedField(this, PeriodType.YEAR_INDEX, values, -period.get(DurationFieldType.YEARS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.MONTH_INDEX, values, -period.get(DurationFieldType.MONTHS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.WEEK_INDEX, values, -period.get(DurationFieldType.WEEKS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.DAY_INDEX, values, -period.get(DurationFieldType.DAYS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.HOUR_INDEX, values, -period.get(DurationFieldType.HOURS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.MINUTE_INDEX, values, -period.get(DurationFieldType.MINUTES_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.SECOND_INDEX, values, -period.get(DurationFieldType.SECONDS_TYPE));\n+        getPeriodType().addIndexedField(this, PeriodType.MILLI_INDEX, values, -period.get(DurationFieldType.MILLIS_TYPE));\n         return new Period(values, getPeriodType());\n     }\n \n--- a/JodaTime/src/java/org/joda/time/PeriodType.java\n+++ b/JodaTime/src/java/org/joda/time/PeriodType.java\n      * @param index  the index to use\n      * @param values  the array to populate\n      * @param valueToAdd  the value to add\n+     * @return true if the array is updated\n      * @throws UnsupportedOperationException if not supported\n      */\n     boolean addIndexedField(ReadablePeriod period, int index, int[] values, int valueToAdd) {\n+        if (valueToAdd == 0) {\n+            return false;\n+        }\n         int realIndex = iIndices[index];\n         if (realIndex == -1) {\n             throw new UnsupportedOperationException(\"Field is not supported\");\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n \n     //-----------------------------------------------------------------------\n     public void testPlus() {\n+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days());\n+        \n+        Period test = base.plus((ReadablePeriod) null);\n+        assertSame(base, test);\n+        \n+        test = base.plus(Period.years(10));\n+        assertEquals(11, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = base.plus(Years.years(10));\n+        assertEquals(11, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = base.plus(Period.days(10));\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(14, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = baseDaysOnly.plus(Period.years(0));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(10, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        \n+        test = baseDaysOnly.plus(baseDaysOnly);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(20, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        \n+        try {\n+            baseDaysOnly.plus(Period.years(1));\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        try {\n+            Period.days(Integer.MAX_VALUE).plus(Period.days(1));\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            Period.days(Integer.MIN_VALUE).plus(Period.days(-1));\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMinus() {\n+        Period base = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        Period baseDaysOnly = new Period(0, 0, 0, 10, 0, 0, 0, 0, PeriodType.days());\n+        \n+        Period test = base.minus((ReadablePeriod) null);\n+        assertSame(base, test);\n+        \n+        test = base.minus(Period.years(10));\n+        assertEquals(-9, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = base.minus(Years.years(10));\n+        assertEquals(-9, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = base.minus(Period.days(10));\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(-6, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        \n+        test = baseDaysOnly.minus(Period.years(0));\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(10, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        \n+        test = baseDaysOnly.minus(baseDaysOnly);\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        \n+        try {\n+            baseDaysOnly.minus(Period.years(1));\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        try {\n+            Period.days(Integer.MAX_VALUE).minus(Period.days(-1));\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+        \n+        try {\n+            Period.days(Integer.MIN_VALUE).minus(Period.days(1));\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPlusFields() {\n         Period test;\n         test = Period.years(1).plusYears(1);\n         assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);\n         } catch (UnsupportedOperationException ex) {}\n     }\n \n-    public void testPlusZero() {\n+    public void testPlusFieldsZero() {\n         Period test, result;\n         test = Period.years(1);\n         result = test.plusYears(0);\n         assertSame(test, result);\n     }\n \n-    public void testMinus() {\n+    public void testMinusFields() {\n         Period test;\n         test = Period.years(3).minusYears(1);\n         assertEquals(new Period(2, 0, 0, 0, 0, 0, 0, 0, PeriodType.standard()), test);", "timestamp": 1187953819, "metainfo": ""}