{"sha": "fe915d2cb3cfac7d8f2d2f95970d41a65012e055", "log": "Complete deprecation of DateMidnight  Fixes #41", "commit": "\n--- a/src/main/java/org/joda/time/DateMidnight.java\n+++ b/src/main/java/org/joda/time/DateMidnight.java\n /*\n- *  Copyright 2001-2011 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * @since 1.0\n  * @deprecated The time of midnight does not exist in some time zones\n  * where the daylight saving time forward shift skips the midnight hour.\n- * Use {@link LocalDate} to represent a date without a time zone\n- * and {@link DateTime#withTimeAtStartOfDay()} to get an instant at the\n+ * Use {@link LocalDate} to represent a date without a time zone.\n+ * Or use {@link DateTime} to represent a full date and time, perhaps\n+ * using {@link DateTime#withTimeAtStartOfDay()} to get an instant at the\n  * start of a day.\n  */\n @Deprecated\n--- a/src/main/java/org/joda/time/DateTime.java\n+++ b/src/main/java/org/joda/time/DateTime.java\n      * same millis and chronology.\n      * \n      * @return a DateMidnight using the same millis and chronology\n-     */\n+     * @deprecated DateMidnight is deprecated\n+     */\n+    @Deprecated\n     public DateMidnight toDateMidnight() {\n         return new DateMidnight(getMillis(), getChronology());\n     }\n--- a/src/main/java/org/joda/time/LocalDate.java\n+++ b/src/main/java/org/joda/time/LocalDate.java\n      * This instance is immutable and unaffected by this method call.\n      *\n      * @return the DateMidnight instance in the default zone\n-     */\n+     * @deprecated DateMidnight is deprecated\n+     */\n+    @Deprecated\n     public DateMidnight toDateMidnight() {\n         return toDateMidnight(null);\n     }\n      *\n      * @param zone  the zone to get the DateMidnight in, null means default zone\n      * @return the DateMidnight instance\n-     */\n+     * @deprecated DateMidnight is deprecated\n+     */\n+    @Deprecated\n     public DateMidnight toDateMidnight(DateTimeZone zone) {\n         zone = DateTimeUtils.getZone(zone);\n         Chronology chrono = getChronology().withZone(zone);\n--- a/src/test/java/org/joda/time/TestDateMidnight_Basics.java\n+++ b/src/test/java/org/joda/time/TestDateMidnight_Basics.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestDateMidnight_Basics extends TestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n         assertEquals(test.weekOfWeekyear(), test.property(DateTimeFieldType.weekOfWeekyear()));\n         assertEquals(test.property(DateTimeFieldType.millisOfSecond()), test.property(DateTimeFieldType.millisOfSecond()));\n         DateTimeFieldType bad = new DateTimeFieldType(\"bad\") {\n+            private static final long serialVersionUID = 1L;\n             public DurationFieldType getDurationType() {\n                 return DurationFieldType.weeks();\n             }\n--- a/src/test/java/org/joda/time/TestDateMidnight_Constructors.java\n+++ b/src/test/java/org/joda/time/TestDateMidnight_Constructors.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestDateMidnight_Constructors extends TestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n--- a/src/test/java/org/joda/time/TestDateMidnight_Properties.java\n+++ b/src/test/java/org/joda/time/TestDateMidnight_Properties.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  * @author Stephen Colebourne\n  * @author Mike Schrag\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestDateMidnight_Properties extends TestCase {\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n--- a/src/test/java/org/joda/time/TestDateTime_Basics.java\n+++ b/src/test/java/org/joda/time/TestDateTime_Basics.java\n         assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, null));\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testToString_DTFormatter() {\n         DateMidnight test = new DateMidnight(TEST_TIME_NOW);\n         assertEquals(\"2002 00\", test.toString(DateTimeFormat.forPattern(\"yyyy HH\")));\n--- a/src/test/java/org/joda/time/TestLocalDate_Basics.java\n+++ b/src/test/java/org/joda/time/TestLocalDate_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testToDateMidnight() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n         \n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testToDateMidnight_Zone() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n         \n         assertEquals(new DateMidnight(2005, 6, 9, COPTIC_TOKYO), test);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testToDateMidnight_nullZone() {\n         LocalDate base = new LocalDate(2005, 6, 9, COPTIC_PARIS);\n         \n--- a/src/test/java/org/joda/time/TestSerialization.java\n+++ b/src/test/java/org/joda/time/TestSerialization.java\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import org.joda.time.chrono.GregorianChronology;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.field.DelegatedDurationField;\n-import org.joda.time.field.MillisDurationField;\n import org.joda.time.field.UnsupportedDateTimeField;\n import org.joda.time.field.UnsupportedDurationField;\n \n             + 14L * DateTimeConstants.MILLIS_PER_HOUR\n             + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n \n-    private static class MockDelegatedDurationField extends DelegatedDurationField implements Serializable {\n-        private static final long serialVersionUID = 1878496002811998493L;        \n-        public MockDelegatedDurationField() {\n-            super(MillisDurationField.INSTANCE);\n-        }\n-    }\n+//    private static class MockDelegatedDurationField extends DelegatedDurationField implements Serializable {\n+//        private static final long serialVersionUID = 1878496002811998493L;        \n+//        public MockDelegatedDurationField() {\n+//            super(MillisDurationField.INSTANCE);\n+//        }\n+//    }\n \n     private DateTimeZone originalDateTimeZone = null;\n     private TimeZone originalTimeZone = null;\n         inlineCompare(test, false);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testSerializedDateMidnight() throws Exception {\n         DateMidnight test = new DateMidnight();\n         loadAndCompare(test, \"DateMidnight\", false);\n         inlineCompare(test, false);\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testSerializedDateMidnightProperty() throws Exception {\n         DateMidnight.Property test = new DateMidnight().monthOfYear();\n         loadAndCompare(test, \"DateMidnightProperty\", false);\n //        store(test, \"Duration.dat\");\n //    }\n \n-    private void store(Serializable test, String filename) throws Exception {\n-        FileOutputStream fos = new FileOutputStream(\"src/test/resources/\" + filename);\n-        ObjectOutputStream oos = new ObjectOutputStream(fos);\n-        try {\n-            oos.writeObject(test);\n-        } finally {\n-            oos.close();\n-        }\n-        oos.close();\n-    }\n+//    private void store(Serializable test, String filename) throws Exception {\n+//        FileOutputStream fos = new FileOutputStream(\"src/test/resources/\" + filename);\n+//        ObjectOutputStream oos = new ObjectOutputStream(fos);\n+//        try {\n+//            oos.writeObject(test);\n+//        } finally {\n+//            oos.close();\n+//        }\n+//        oos.close();\n+//    }\n \n }\n--- a/src/test/java/org/joda/time/TestStringConvert.java\n+++ b/src/test/java/org/joda/time/TestStringConvert.java\n /*\n- *  Copyright 2001-2010 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     }\n \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"deprecation\")\n     public void testDateMidnight() {\n         DateMidnight test = new DateMidnight(2010, 6, 30, ISOChronology.getInstance(ZONE));\n         String str = StringConvert.INSTANCE.convertToString(test);", "timestamp": 1374318357, "metainfo": ""}