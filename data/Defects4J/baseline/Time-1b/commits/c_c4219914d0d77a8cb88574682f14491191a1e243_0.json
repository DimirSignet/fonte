{"sha": "c4219914d0d77a8cb88574682f14491191a1e243", "log": "Add tests for ISO date time format   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/format/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n+        suite.addTest(TestISODateTimeFormat.suite());\n+        \n         suite.addTest(TestISOPeriodFormat.suite());\n         suite.addTest(TestPeriodFormatterBuilder.suite());\n         \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestISODateTimeFormat.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * This class is a Junit unit test for ISODateTimeFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISODateTimeFormat extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISODateTimeFormat.class);\n+    }\n+\n+    public TestISODateTimeFormat(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_date() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.getInstance().date().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.getInstance().date().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.getInstance().date().print(dt));\n+    }\n+\n+    public void testFormat_time() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30.040Z\", ISODateTimeFormat.getInstance().time().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30.040+01:00\", ISODateTimeFormat.getInstance().time().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30.040+02:00\", ISODateTimeFormat.getInstance().time().print(dt));\n+    }\n+\n+    public void testFormat_timeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30Z\", ISODateTimeFormat.getInstance().timeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30+01:00\", ISODateTimeFormat.getInstance().timeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30+02:00\", ISODateTimeFormat.getInstance().timeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_tTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"T10:20:30.040Z\", ISODateTimeFormat.getInstance().tTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"T11:20:30.040+01:00\", ISODateTimeFormat.getInstance().tTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"T12:20:30.040+02:00\", ISODateTimeFormat.getInstance().tTime().print(dt));\n+    }\n+\n+    public void testFormat_tTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"T10:20:30Z\", ISODateTimeFormat.getInstance().tTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"T11:20:30+01:00\", ISODateTimeFormat.getInstance().tTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"T12:20:30+02:00\", ISODateTimeFormat.getInstance().tTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_dateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30.040Z\", ISODateTimeFormat.getInstance().dateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30.040+01:00\", ISODateTimeFormat.getInstance().dateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30.040+02:00\", ISODateTimeFormat.getInstance().dateTime().print(dt));\n+        \n+//        dt = dt.withZone(LONDON);\n+//        assertEquals(\"2004-06-09T11:20:30.040+01:00\", ISODateTimeFormat.getInstance(PARIS).dateTime().print(dt));\n+//        \n+//        dt = dt.withZone(LONDON);\n+//        assertEquals(\"2004-06-09T12:20:30.040+02:00\", ISODateTimeFormat.getInstance().dateTime().print(dt.getMillis(), PARIS));\n+//        \n+//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, Chronology.getCoptic());\n+//        assertEquals(\"2288-02-19T10:20:30.040Z\", ISODateTimeFormat.getInstance().dateTime().print(dt));\n+//        \n+//        dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, Chronology.getCoptic());\n+//        assertEquals(\"2004-06-09T10:20:30.040Z\", ISODateTimeFormat.getInstance(Chronology.getCoptic()).dateTime().print(dt));\n+    }\n+\n+    public void testFormat_dateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30Z\", ISODateTimeFormat.getInstance().dateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30+01:00\", ISODateTimeFormat.getInstance().dateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30+02:00\", ISODateTimeFormat.getInstance().dateTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_weekDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.getInstance().weekDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.getInstance().weekDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.getInstance().weekDate().print(dt));\n+    }\n+\n+    public void testFormat_weekDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24-3T10:20:30.040Z\", ISODateTimeFormat.getInstance().weekDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24-3T11:20:30.040+01:00\", ISODateTimeFormat.getInstance().weekDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24-3T12:20:30.040+02:00\", ISODateTimeFormat.getInstance().weekDateTime().print(dt));\n+    }\n+\n+    public void testFormat_weekDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24-3T10:20:30Z\", ISODateTimeFormat.getInstance().weekDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24-3T11:20:30+01:00\", ISODateTimeFormat.getInstance().weekDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24-3T12:20:30+02:00\", ISODateTimeFormat.getInstance().weekDateTimeNoMillis().print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_basicDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"20040609\", ISODateTimeFormat.getInstance().basicDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"20040609\", ISODateTimeFormat.getInstance().basicDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"20040609\", ISODateTimeFormat.getInstance().basicDate().print(dt));\n+    }\n+\n+    public void testFormat_basicTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"102030.040Z\", ISODateTimeFormat.getInstance().basicTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"112030.040+0100\", ISODateTimeFormat.getInstance().basicTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"122030.040+0200\", ISODateTimeFormat.getInstance().basicTime().print(dt));\n+    }\n+\n+    public void testFormat_basicTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"102030Z\", ISODateTimeFormat.getInstance().basicTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"112030+0100\", ISODateTimeFormat.getInstance().basicTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"122030+0200\", ISODateTimeFormat.getInstance().basicTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_basicTTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"T102030.040Z\", ISODateTimeFormat.getInstance().basicTTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"T112030.040+0100\", ISODateTimeFormat.getInstance().basicTTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"T122030.040+0200\", ISODateTimeFormat.getInstance().basicTTime().print(dt));\n+    }\n+\n+    public void testFormat_basicTTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"T102030Z\", ISODateTimeFormat.getInstance().basicTTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"T112030+0100\", ISODateTimeFormat.getInstance().basicTTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"T122030+0200\", ISODateTimeFormat.getInstance().basicTTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_basicDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"20040609T102030.040Z\", ISODateTimeFormat.getInstance().basicDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"20040609T112030.040+0100\", ISODateTimeFormat.getInstance().basicDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"20040609T122030.040+0200\", ISODateTimeFormat.getInstance().basicDateTime().print(dt));\n+    }\n+\n+    public void testFormat_basicDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"20040609T102030Z\", ISODateTimeFormat.getInstance().basicDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"20040609T112030+0100\", ISODateTimeFormat.getInstance().basicDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"20040609T122030+0200\", ISODateTimeFormat.getInstance().basicDateTimeNoMillis().print(dt));\n+    }\n+\n+    public void testFormat_basicWeekDate() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004W243\", ISODateTimeFormat.getInstance().basicWeekDate().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004W243\", ISODateTimeFormat.getInstance().basicWeekDate().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004W243\", ISODateTimeFormat.getInstance().basicWeekDate().print(dt));\n+    }\n+\n+    public void testFormat_basicWeekDateTime() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004W243T102030.040Z\", ISODateTimeFormat.getInstance().basicWeekDateTime().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004W243T112030.040+0100\", ISODateTimeFormat.getInstance().basicWeekDateTime().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004W243T122030.040+0200\", ISODateTimeFormat.getInstance().basicWeekDateTime().print(dt));\n+    }\n+\n+    public void testFormat_basicWeekDateTimeNoMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004W243T102030Z\", ISODateTimeFormat.getInstance().basicWeekDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004W243T112030+0100\", ISODateTimeFormat.getInstance().basicWeekDateTimeNoMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004W243T122030+0200\", ISODateTimeFormat.getInstance().basicWeekDateTimeNoMillis().print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_year() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004\", ISODateTimeFormat.getInstance().year().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004\", ISODateTimeFormat.getInstance().year().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004\", ISODateTimeFormat.getInstance().year().print(dt));\n+    }\n+\n+    public void testFormat_yearMonth() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06\", ISODateTimeFormat.getInstance().yearMonth().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06\", ISODateTimeFormat.getInstance().yearMonth().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06\", ISODateTimeFormat.getInstance().yearMonth().print(dt));\n+    }\n+\n+    public void testFormat_yearMonthDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.getInstance().yearMonthDay().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.getInstance().yearMonthDay().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09\", ISODateTimeFormat.getInstance().yearMonthDay().print(dt));\n+    }\n+\n+    public void testFormat_weekyear() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004\", ISODateTimeFormat.getInstance().weekyear().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004\", ISODateTimeFormat.getInstance().weekyear().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004\", ISODateTimeFormat.getInstance().weekyear().print(dt));\n+    }\n+\n+    public void testFormat_weekyearWeek() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24\", ISODateTimeFormat.getInstance().weekyearWeek().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24\", ISODateTimeFormat.getInstance().weekyearWeek().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24\", ISODateTimeFormat.getInstance().weekyearWeek().print(dt));\n+    }\n+\n+    public void testFormat_weekyearWeekDay() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.getInstance().weekyearWeekDay().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.getInstance().weekyearWeekDay().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-W24-3\", ISODateTimeFormat.getInstance().weekyearWeekDay().print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_hour() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10\", ISODateTimeFormat.getInstance().hour().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11\", ISODateTimeFormat.getInstance().hour().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12\", ISODateTimeFormat.getInstance().hour().print(dt));\n+    }\n+\n+    public void testFormat_hourMinute() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20\", ISODateTimeFormat.getInstance().hourMinute().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20\", ISODateTimeFormat.getInstance().hourMinute().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20\", ISODateTimeFormat.getInstance().hourMinute().print(dt));\n+    }\n+\n+    public void testFormat_hourMinuteSecond() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30\", ISODateTimeFormat.getInstance().hourMinuteSecond().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30\", ISODateTimeFormat.getInstance().hourMinuteSecond().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30\", ISODateTimeFormat.getInstance().hourMinuteSecond().print(dt));\n+    }\n+\n+    public void testFormat_hourMinuteSecondMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30.040\", ISODateTimeFormat.getInstance().hourMinuteSecondMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30.040\", ISODateTimeFormat.getInstance().hourMinuteSecondMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30.040\", ISODateTimeFormat.getInstance().hourMinuteSecondMillis().print(dt));\n+    }\n+\n+    public void testFormat_hourMinuteSecondFraction() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"10:20:30.040\", ISODateTimeFormat.getInstance().hourMinuteSecondFraction().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"11:20:30.040\", ISODateTimeFormat.getInstance().hourMinuteSecondFraction().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"12:20:30.040\", ISODateTimeFormat.getInstance().hourMinuteSecondFraction().print(dt));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFormat_dateHour() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10\", ISODateTimeFormat.getInstance().dateHour().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11\", ISODateTimeFormat.getInstance().dateHour().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12\", ISODateTimeFormat.getInstance().dateHour().print(dt));\n+    }\n+\n+    public void testFormat_dateHourMinute() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20\", ISODateTimeFormat.getInstance().dateHourMinute().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20\", ISODateTimeFormat.getInstance().dateHourMinute().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20\", ISODateTimeFormat.getInstance().dateHourMinute().print(dt));\n+    }\n+\n+    public void testFormat_dateHourMinuteSecond() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30\", ISODateTimeFormat.getInstance().dateHourMinuteSecond().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30\", ISODateTimeFormat.getInstance().dateHourMinuteSecond().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30\", ISODateTimeFormat.getInstance().dateHourMinuteSecond().print(dt));\n+    }\n+\n+    public void testFormat_dateHourMinuteSecondMillis() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30.040\", ISODateTimeFormat.getInstance().dateHourMinuteSecondMillis().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30.040\", ISODateTimeFormat.getInstance().dateHourMinuteSecondMillis().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30.040\", ISODateTimeFormat.getInstance().dateHourMinuteSecondMillis().print(dt));\n+    }\n+\n+    public void testFormat_dateHourMinuteSecondFraction() {\n+        DateTime dt = new DateTime(2004, 6, 9, 10, 20, 30, 40, UTC);\n+        assertEquals(\"2004-06-09T10:20:30.040\", ISODateTimeFormat.getInstance().dateHourMinuteSecondFraction().print(dt));\n+        \n+        dt = dt.withZone(LONDON);\n+        assertEquals(\"2004-06-09T11:20:30.040\", ISODateTimeFormat.getInstance().dateHourMinuteSecondFraction().print(dt));\n+        \n+        dt = dt.withZone(PARIS);\n+        assertEquals(\"2004-06-09T12:20:30.040\", ISODateTimeFormat.getInstance().dateHourMinuteSecondFraction().print(dt));\n+    }\n+\n+}", "timestamp": 1095509591, "metainfo": ""}