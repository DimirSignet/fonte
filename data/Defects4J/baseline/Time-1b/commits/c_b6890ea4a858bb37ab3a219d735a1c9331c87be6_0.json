{"sha": "b6890ea4a858bb37ab3a219d735a1c9331c87be6", "log": "Simplify implementation   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java\n     private Chronology iChronology;\n     /** The values of each field in this partial */\n     private int[] iValues;\n-    /** A cached array of fields. */\n-    private transient DateTimeField[] iFields;\n \n     //-----------------------------------------------------------------------\n     /**\n      * Private constructor to be used by subclasses only which performs no validation.\n      * <p>\n      * Data is assigned (not cloned) to the new instance.\n-     * Thus, two BasePartials will share the same field array.\n      *\n      * @param other  the other partial to use to extract the fields and chronology\n      * @param values  the new set of values, not cloned\n         super();\n         iChronology = other.iChronology;\n         iValues = values;\n-        iFields = other.iFields;\n     }\n \n     //-----------------------------------------------------------------------\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the field at the specifed index.\n-     * \n-     * @param index  the index\n-     * @return the field\n-     * @throws IndexOutOfBoundsException if the index is invalid\n-     */\n-    public DateTimeField getField(int index) {\n-        DateTimeField[] fields = iFields;\n-        if (fields != null) {\n-            return fields[index];\n-        } else {\n-            return getField(index, getChronology());\n-        }\n-    }\n-\n-    /**\n-     * Gets an array of the fields that this partial supports.\n-     * <p>\n-     * The fields are returned largest to smallest, for example Hour, Minute, Second.\n-     *\n-     * @return the fields supported in an array that may be altered, largest to smallest\n-     */\n-    public DateTimeField[] getFields() {\n-        DateTimeField[] fields = iFields;\n-        if (fields == null) {\n-            fields = super.getFields();\n-            iFields = fields;\n-        }\n-        return (DateTimeField[]) fields.clone();\n-    }\n-\n-    /**\n      * Gets the value of the field at the specifed index.\n      * \n      * @param index  the index", "timestamp": 1094505347, "metainfo": ""}