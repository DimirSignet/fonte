{"sha": "15e0a37efcf967aaf58ffd0706545794a82eb7c6", "log": "Added overlap() method to Interval   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the interval where the this interval and that specified overlap.\n+     * \n+     * @param interval  the interval to examine, null means now\n+     * @return the overlap interval, null if no overlap\n+     * @since 1.1\n+     */\n+    public Interval overlap(ReadableInterval interval) {\n+        if (interval == null) {\n+            long now = DateTimeUtils.currentTimeMillis();\n+            interval = new Interval(now, now);\n+        }\n+        if (overlaps(interval) == false) {\n+            return null;\n+        }\n+        long start = Math.max(getStartMillis(), interval.getStartMillis());\n+        long end = Math.min(getEndMillis(), interval.getEndMillis());\n+        return new Interval(start, end);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Creates a new interval with the same start and end, but a different chronology.\n      *\n      * @param chronology  the chronology to use, null means ISO default\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testOverlap_RInterval() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(\n+                new Interval(TEST_TIME1, TEST_TIME2),\n+                test.overlap(new Interval(TEST_TIME1, TEST_TIME2)));\n+        assertEquals(\n+                new Interval(TEST_TIME1, TEST_TIME2),\n+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n+        assertEquals(\n+                new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),\n+                test.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n+        assertEquals(\n+                null,\n+                test.overlap(new Interval(TEST_TIME2, TEST_TIME2)));\n+        assertEquals(\n+                new Interval(TEST_TIME2 - 1, TEST_TIME2),\n+                test.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n+        \n+        assertEquals(\n+                new Interval(TEST_TIME1, TEST_TIME2),\n+                test.overlap(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n+        assertEquals(\n+                new Interval(TEST_TIME1, TEST_TIME2),\n+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n+        assertEquals(\n+                new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2),\n+                test.overlap(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n+        assertEquals(\n+                null,\n+                test.overlap(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n+        assertEquals(\n+                new Interval(TEST_TIME2 - 1, TEST_TIME2),\n+                test.overlap(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n+        \n+        assertEquals(\n+                null,\n+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));\n+        assertEquals(\n+                null,\n+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        assertEquals(\n+                new Interval(TEST_TIME1, TEST_TIME1 + 1),\n+                test.overlap(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        \n+        assertEquals(\n+                new Interval(TEST_TIME_NOW, TEST_TIME_NOW),\n+                test.overlap((ReadableInterval) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testIsBefore_long() {\n         Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n         ", "timestamp": 1115568512, "metainfo": ""}