{"sha": "d3ddf13c4a3fe1dfa9849d0d04eeb9f86a4bad8f", "log": "Alternate printing now selects a supported field.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DurationFormatterBuilder.java\n  *     .appendYears()\n  *     .appendSuffix(\" year\", \" years\")\n  *     .appendSeparator(\" and \")\n- *     .printZeroNever()\n+ *     .printZeroRarely()\n  *     .appendMonths()\n  *     .appendSuffix(\" month\", \" months\")\n  *     .toFormatter();\n  * @author Brian S O'Neill\n  */\n public class DurationFormatterBuilder {\n-    private static final int PRINT_ZERO_NEVER = 0;\n-    private static final int PRINT_ZERO_MAYBE = 1;\n-    private static final int PRINT_ZERO_ALWAYS = 2;\n-\n-    private String iAlternate;\n-\n-    private int iMinPrintedDigits = 1;\n+    private static final int PRINT_ZERO_RARELY = 1;\n+    private static final int PRINT_ZERO_IF_SUPPORTED = 2;\n+    private static final int PRINT_ZERO_ALWAYS = 3;\n+\n+    private boolean iFavorFirstFieldForZero;\n+\n+    private int iMinPrintedDigits;\n     private int iPrintZeroSetting;\n-    private int iMaxParsedDigits = 10;\n+    private int iMaxParsedDigits;\n     private boolean iRejectSignedValues;\n \n     private DurationFieldAffix iPrefix;\n \n-    // List of separate DurationFormatters.\n+    // List of DurationFormatters used to build a final formatter.\n     private List iFormatters;\n \n+    // List of DurationFormatters used to build an alternate formatter. The\n+    // alternate is chosen if no other fields are printed.\n+    private List iAlternateFormatters;\n+\n     public DurationFormatterBuilder() {\n-       iFormatters = new ArrayList();\n+        clear();\n     }\n \n     /**\n      */\n     public DurationFormatter toFormatter() {\n         DurationFormatter formatter = toFormatter(iFormatters);\n-        if (iAlternate != null) {\n-            formatter = new AlternateSelector(formatter, iAlternate);\n+        List altFormatters = iAlternateFormatters;\n+        if (altFormatters.size() > 0) {\n+            // Alternate is needed only if field formatters were\n+            // appended. Literals may have been appended as well.\n+            for (int i=altFormatters.size(); --i>=0; ) {\n+                if (altFormatters.get(i) instanceof FieldFormatter) {\n+                    formatter = new AlternateSelector\n+                        (formatter, altFormatters, iFavorFirstFieldForZero);\n+                    break;\n+                }\n+            }\n         }\n         return formatter;\n     }\n      * reused.\n      */\n     public void clear() {\n-        iAlternate = null;\n+        iFavorFirstFieldForZero = false;\n         iMinPrintedDigits = 1;\n-        iPrintZeroSetting = PRINT_ZERO_NEVER;\n+        iPrintZeroSetting = PRINT_ZERO_RARELY;\n         iMaxParsedDigits = 10;\n         iRejectSignedValues = false;\n         iPrefix = null;\n-        iFormatters.clear();\n+        if (iFormatters == null) {\n+            iFormatters = new ArrayList();\n+        } else {\n+            iFormatters.clear();\n+        }\n+        if (iAlternateFormatters == null) {\n+            iAlternateFormatters = new ArrayList();\n+        } else {\n+            iAlternateFormatters.clear();\n+        }\n     }\n \n     /**\n             throw new IllegalArgumentException(\"Literal must not be null\");\n         }\n         clearPrefix();\n-        iFormatters.add(new Literal(text));\n+        Literal literal = new Literal(text);\n+        iFormatters.add(literal);\n+        iAlternateFormatters.add(literal);\n         return this;\n     }\n \n     }\n \n     /**\n-     * Never print zero values for the next and following appended fields. This\n-     * is the default setting.\n-     *\n-     * @return this DurationFormatterBuilder\n-     */\n-    public DurationFormatterBuilder printZeroNever() {\n-        iPrintZeroSetting = PRINT_ZERO_NEVER;\n+     * Never print zero values for the next and following appended fields,\n+     * unless no fields would be printed. If no fields are printed, the printer\n+     * forces at most one \"printZeroRarely\" field to print a zero.\n+     * <p>\n+     * This field setting is the default.\n+     *\n+     * @return this DurationFormatterBuilder\n+     * @see #favorLastFieldForZero()\n+     * @see #favorFirstFieldForZero()\n+     */\n+    public DurationFormatterBuilder printZeroRarely() {\n+        iPrintZeroSetting = PRINT_ZERO_RARELY;\n         return this;\n     }\n \n      *\n      * @return this DurationFormatterBuilder\n      */\n-    public DurationFormatterBuilder printZeroMaybe() {\n-        iPrintZeroSetting = PRINT_ZERO_MAYBE;\n+    public DurationFormatterBuilder printZeroIfSupported() {\n+        iPrintZeroSetting = PRINT_ZERO_IF_SUPPORTED;\n         return this;\n     }\n \n     }\n \n     private void appendField(int type) {\n-        iFormatters.add(new FieldFormatter(iMinPrintedDigits, iPrintZeroSetting,\n-                                           iMaxParsedDigits, iRejectSignedValues,\n-                                           type, iPrefix, null));\n+        FieldFormatter field = new FieldFormatter\n+            (iMinPrintedDigits, iPrintZeroSetting,\n+             iMaxParsedDigits, iRejectSignedValues,\n+             type, iPrefix, null);\n+        iFormatters.add(field);\n+        if (iPrintZeroSetting == PRINT_ZERO_RARELY) {\n+            iAlternateFormatters.add(field);\n+        }\n         iPrefix = null;\n     }\n \n      * @see #appendPrefix\n      */\n     private DurationFormatterBuilder appendSuffix(DurationFieldAffix suffix) {\n-        Object f = null;\n+        final Object originalField;\n         if (iFormatters.size() > 0) {\n-            f = iFormatters.get(iFormatters.size() - 1);\n-        }\n-        if (!(f instanceof FieldFormatter)) {\n+            originalField = iFormatters.get(iFormatters.size() - 1);\n+        } else {\n+            originalField = null;\n+        }\n+\n+        if (originalField == null || !(originalField instanceof FieldFormatter)) {\n             throw new IllegalStateException(\"No field to apply suffix to\");\n         }\n+\n         clearPrefix();\n-        f = new FieldFormatter((FieldFormatter) f, suffix);\n-        iFormatters.set(iFormatters.size() - 1, f);\n+        Object newField = new FieldFormatter((FieldFormatter) originalField, suffix);\n+        iFormatters.set(iFormatters.size() - 1, newField);\n+\n+        int index = iAlternateFormatters.lastIndexOf(originalField);\n+        if (index >= 0) {\n+            iAlternateFormatters.set(index, newField);\n+        }\n+\n         return this;\n     }\n \n     }\n \n     /**\n-     * Supply alternate text to print, when no fields are emitted. During\n-     * parsing, the alternate text is compared against first. If the alternate\n-     * text matches (ignoring case), the parser finishes without attempting to\n-     * parse any specific fields.\n-     *\n-     * @return this DurationFormatterBuilder\n-     */\n-    // TODO: Drop support for alternate. Instead, show least significant field\n-    // that is supported.\n-    public DurationFormatterBuilder setAlternate(String text) {\n-        iAlternate = text;\n+     * If the printer doesn't print any field values, it forces a\n+     * \"printZeroRarely\" field to print. This setting controls which field is\n+     * selected.\n+     * <p>\n+     * It starts from the last appended field, and moves towards the first,\n+     * stopping until it finds a field that is supported by the duration being\n+     * printed. If no supported fields are found, then no fields are printed.\n+     * <p>\n+     * This setting is the default.\n+     *\n+     * @return this DurationFormatterBuilder\n+     * @see #printZeroRarely()\n+     */\n+    public DurationFormatterBuilder favorLastFieldForZero() {\n+        iFavorFirstFieldForZero = false;\n+        return this;\n+    }\n+\n+    /**\n+     * If the printer doesn't print any field values, it forces a\n+     * \"printZeroRarely\" field to print. This setting controls which field is\n+     * selected.\n+     * <p>\n+     * It starts from the first appended field, and moves towards the last,\n+     * stopping until it finds a field that is supported by the duration being\n+     * printed. If no supported fields are found, then no fields are printed.\n+     *\n+     * @return this DurationFormatterBuilder\n+     * @see #printZeroRarely()\n+     */\n+    public DurationFormatterBuilder favorFirstFieldForZero() {\n+        iFavorFirstFieldForZero = true;\n         return this;\n     }\n \n                 suffix = new CompositeAffix(field.iSuffix, suffix);\n             }\n             iSuffix = suffix;\n+        }\n+\n+        FieldFormatter(FieldFormatter field, int printZeroSetting) {\n+            iMinPrintedDigits = field.iMinPrintedDigits;\n+            iPrintZeroSetting = printZeroSetting;\n+            iMaxParsedDigits = field.iMaxParsedDigits;\n+            iRejectSignedValues = field.iRejectSignedValues;\n+            iFieldType = field.iFieldType;\n+            iPrefix = field.iPrefix;\n+            iSuffix = field.iSuffix;\n         }\n \n         public int countFieldsToPrint(ReadableDuration duration) {\n                 break;\n             }\n \n-            if (value == 0 && iPrintZeroSetting == PRINT_ZERO_NEVER) {\n+            if (value == 0 && iPrintZeroSetting == PRINT_ZERO_RARELY) {\n                 return -1;\n             }\n \n                 break;\n             }\n         }\n+\n+        int getPrintZeroSetting() {\n+            return iPrintZeroSetting;\n+        }\n     }\n \n     private static final class Literal extends AbstractDurationFormatter\n     private static final class AlternateSelector extends AbstractDurationFormatter\n         implements DurationFormatter\n     {\n-        private final DurationFormatter iFormatter;\n-        private final String iAlternate;\n-\n-        AlternateSelector(DurationFormatter formatter, String alternate) {\n-            iFormatter = formatter;\n-            iAlternate = alternate;\n+        private final DurationFormatter iPrimaryFormatter;\n+        private final DurationPrinter[] iAlternatePrinters;\n+        private final boolean iFavorFirstFieldForZero;\n+\n+        AlternateSelector(DurationFormatter primaryFormatter,\n+                          List alternatePrinters,\n+                          boolean favorFirstFieldForZero) {\n+            iPrimaryFormatter = primaryFormatter;\n+            iAlternatePrinters = (DurationPrinter[])alternatePrinters.toArray\n+                (new DurationPrinter[alternatePrinters.size()]);\n+            iFavorFirstFieldForZero = favorFirstFieldForZero;\n         }\n \n         public int countFieldsToPrint(ReadableDuration duration, int stopAt) {\n-            return iFormatter.countFieldsToPrint(duration, stopAt);\n+            int count = iPrimaryFormatter.countFieldsToPrint(duration, stopAt);\n+            if (count < 1 && stopAt >= 1) {\n+                if (chooseFieldToPrint(duration) != null) {\n+                    return 1;\n+                }\n+            }\n+            return count;\n         }\n \n         public int calculatePrintedLength(ReadableDuration duration) {\n-            if (iFormatter.countFieldsToPrint(duration, 1) > 0) {\n-                return iFormatter.calculatePrintedLength(duration);\n-            } else {\n-                return iAlternate.length();\n-            }\n+            if (iPrimaryFormatter.countFieldsToPrint(duration, 1) > 0) {\n+                return iPrimaryFormatter.calculatePrintedLength(duration);\n+            }\n+\n+            Object chosenOne = chooseFieldToPrint(duration);\n+\n+            int sum = 0;\n+            DurationPrinter[] printers = iAlternatePrinters;\n+            for (int i=printers.length; --i>=0; ) {\n+                DurationPrinter dp = printers[i];\n+                if (dp == chosenOne || !(dp instanceof FieldFormatter)) {\n+                    sum += dp.calculatePrintedLength(duration);\n+                }\n+            }\n+            return sum;\n         }\n \n         public void printTo(StringBuffer buf, ReadableDuration duration) {\n-            if (iFormatter.countFieldsToPrint(duration, 1) > 0) {\n-                iFormatter.printTo(buf, duration);\n-            } else {\n-                buf.append(iAlternate);\n+            if (iPrimaryFormatter.countFieldsToPrint(duration, 1) > 0) {\n+                iPrimaryFormatter.printTo(buf, duration);\n+                return;\n+            }\n+\n+            Object chosenOne = chooseFieldToPrint(duration);\n+            \n+            DurationPrinter[] printers = iAlternatePrinters;\n+            int len = printers.length;\n+            for (int i=0; i<len; i++) {\n+                DurationPrinter dp = printers[i];\n+                if (dp == chosenOne || !(dp instanceof FieldFormatter)) {\n+                    dp.printTo(buf, duration);\n+                }\n             }\n         }\n \n         public void printTo(Writer out, ReadableDuration duration) throws IOException {\n-            if (iFormatter.countFieldsToPrint(duration, 1) > 0) {\n-                iFormatter.printTo(out, duration);\n-            } else {\n-                out.write(iAlternate);\n+            if (iPrimaryFormatter.countFieldsToPrint(duration, 1) > 0) {\n+                iPrimaryFormatter.printTo(out, duration);\n+                return;\n+            }\n+            \n+            Object chosenOne = chooseFieldToPrint(duration);\n+\n+            DurationPrinter[] printers = iAlternatePrinters;\n+            int len = printers.length;\n+            for (int i=0; i<len; i++) {\n+                DurationPrinter dp = printers[i];\n+                if (dp == chosenOne || !(dp instanceof FieldFormatter)) {\n+                    dp.printTo(out, duration);\n+                }\n             }\n         }\n \n         public int parseInto(ReadWritableDuration duration,\n                              String durationStr, int position) {\n-            String alt = iAlternate;\n-            int altLength = alt.length();\n-            if (durationStr.regionMatches(true, position, alt, 0, altLength)) {\n-                return position + altLength;\n-            }\n-            return iFormatter.parseInto(duration, durationStr, position);\n+            return iPrimaryFormatter.parseInto(duration, durationStr, position);\n+        }\n+\n+        private FieldFormatter chooseFieldToPrint(ReadableDuration duration) {\n+            DurationType type = duration.getDurationType();\n+            DurationPrinter[] printers = iAlternatePrinters;\n+            if (iFavorFirstFieldForZero) {\n+                int len = printers.length;\n+                for (int i=0; i<len; i++) {\n+                    DurationPrinter dp = printers[i];\n+                    if (dp instanceof FieldFormatter) {\n+                        FieldFormatter ff = (FieldFormatter) dp;\n+                        if (ff.isSupported(type)) {\n+                            if (ff.getPrintZeroSetting() == PRINT_ZERO_RARELY) {\n+                                ff = new FieldFormatter(ff, PRINT_ZERO_IF_SUPPORTED);\n+                                printers[i] = ff;\n+                            }\n+                            return ff;\n+                        }\n+                    }\n+                }\n+            } else {\n+                for (int i=printers.length; --i>=0; ) {\n+                    DurationPrinter dp = printers[i];\n+                    if (dp instanceof FieldFormatter) {\n+                        FieldFormatter ff = (FieldFormatter) dp;\n+                        if (ff.isSupported(type)) {\n+                            if (ff.getPrintZeroSetting() == PRINT_ZERO_RARELY) {\n+                                ff = new FieldFormatter(ff, PRINT_ZERO_IF_SUPPORTED);\n+                                printers[i] = ff;\n+                            }\n+                            return ff;\n+                        }\n+                    }\n+                }\n+            }\n+            return null;\n         }\n     }\n ", "timestamp": 1071809629, "metainfo": ""}