{"sha": "7673aa4d9fd6c4c1ab93e09f30cbe5893a8cbf3e", "log": "Make MillisProvider public so anyone can change the clock  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeUtils.java\n     }\n \n     /**\n+     * Sets the provider of the current time to class specified.\n+     * <p>\n+     * This method changes the behaviour of {@link #currentTimeMillis()}.\n+     * Whenever the current time is queried, the specified class will be called.\n+     * \n+     * @param millisProvider  the provider of the current time to use, not null\n+     * @throws SecurityException if the application does not have sufficient security rights\n+     */\n+    public static final void setCurrentMillisProvider(MillisProvider millisProvider) throws SecurityException {\n+        if (millisProvider == null) {\n+            throw new IllegalArgumentException(\"The MillisProvider must not be null\");\n+        }\n+        checkPermission();\n+        cMillisProvider = millisProvider;\n+    }\n+\n+    /**\n      * Checks whether the provider may be changed using permission 'CurrentTime.setProvider'.\n      * \n      * @throws SecurityException if the provider may not be changed\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Base class defining a millisecond provider.\n-     */\n-    abstract static class MillisProvider {\n+     * A millisecond provider, allowing control of the system clock.\n+     * \n+     * @author Stephen Colebourne\n+     * @since 2.0 (previously private)\n+     */\n+    public static interface MillisProvider {\n+        /**\n+         * Gets the current time.\n+         * <p>\n+         * Implementations of this method must be thread-safe.\n+         * \n+         * @return the current time in milliseconds\n+         */\n+        long getMillis();\n+    }\n+\n+    /**\n+     * System millis provider.\n+     */\n+    static class SystemMillisProvider implements MillisProvider {\n         /**\n          * Gets the current time.\n          * @return the current time in millis\n          */\n-        abstract long getMillis();\n-    }\n-\n-    /**\n-     * System millis provider.\n-     */\n-    static class SystemMillisProvider extends MillisProvider {\n-        /**\n-         * Gets the current time.\n-         * @return the current time in millis\n-         */\n-        long getMillis() {\n+        public long getMillis() {\n             return System.currentTimeMillis();\n         }\n     }\n     /**\n      * Fixed millisecond provider.\n      */\n-    static class FixedMillisProvider extends MillisProvider {\n+    static class FixedMillisProvider implements MillisProvider {\n         /** The fixed millis value. */\n         private final long iMillis;\n         \n          * Gets the current time.\n          * @return the current time in millis\n          */\n-        long getMillis() {\n+        public long getMillis() {\n             return iMillis;\n         }\n     }\n     /**\n      * Offset from system millis provider.\n      */\n-    static class OffsetMillisProvider extends MillisProvider {\n+    static class OffsetMillisProvider implements MillisProvider {\n         /** The millis offset. */\n         private final long iMillis;\n         \n          * Gets the current time.\n          * @return the current time in millis\n          */\n-        long getMillis() {\n+        public long getMillis() {\n             return System.currentTimeMillis() + iMillis;\n         }\n     }\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n+import org.joda.time.DateTimeUtils.MillisProvider;\n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.BuddhistChronology;\n import org.joda.time.chrono.CopticChronology;\n import org.joda.time.chrono.ISOChronology;\n \n /**\n- * This class is a Junit unit test for Instant.\n+ * This class is a Junit unit test for DateTimeUtils.\n  *\n  * @author Stephen Colebourne\n  */\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testMillisProvider() {\n+        try {\n+            DateTimeUtils.setCurrentMillisProvider(new MillisProvider() {\n+                public long getMillis() {\n+                    return 1L;\n+                }\n+            });\n+            assertEquals(1L, DateTimeUtils.currentTimeMillis());\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    public void testMillisProvider_null() {\n+        try {\n+            DateTimeUtils.setCurrentMillisProvider(null);\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testMillisProviderSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n+        try {\n+            try {\n+                Policy.setPolicy(RESTRICT);\n+                System.setSecurityManager(new SecurityManager());\n+                DateTimeUtils.setCurrentMillisProvider(new MillisProvider() {\n+                    public long getMillis() {\n+                        return 0L;\n+                    }\n+                });\n+                fail();\n+            } catch (SecurityException ex) {\n+                // ok\n+            } finally {\n+                System.setSecurityManager(null);\n+                Policy.setPolicy(ALLOW);\n+            }\n+        } finally {\n+            DateTimeUtils.setCurrentMillisSystem();\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testGetInstantMillis_RI() {\n         Instant i = new Instant(123L);\n         assertEquals(123L, DateTimeUtils.getInstantMillis(i));", "timestamp": 1266153985, "metainfo": ""}