{"sha": "3b5d9edf4e4adb6ccca0c21faaf469b842dba4dd", "log": "Added Duration.getStandardSeconds() and Duration.toStandardSeconds()  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/java/org/joda/time/Duration.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the length of this duration in seconds assuming 1000 milliseconds\n+     * in a second.\n+     * <p>\n+     * This returns <code>getMillis() / 1000</code>.\n+     * The result is an integer division, so 2999 millis returns 2 seconds.\n+     *\n+     * @return the length of the duration in standard seconds\n+     * @since 1.6\n+     */\n+    public long getStandardSeconds() {\n+        return getMillis() / DateTimeConstants.MILLIS_PER_SECOND;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Get this duration as an immutable <code>Duration</code> object\n      * by returning <code>this</code>.\n      * \n      */\n     public Duration toDuration() {\n         return this;\n+    }\n+\n+    /**\n+     * Converts this duration to a period in seconds assuming 1000 milliseconds\n+     * in a second.\n+     * <p>\n+     * This method allows you to convert between a duration and a period.\n+     * \n+     * @return a period representing the number of standard seconds in this period, never null\n+     * @throws ArithmeticException if the number of seconds is too large to be represented\n+     * @since 1.6\n+     */\n+    public Seconds toStandardSeconds() {\n+        long seconds = getStandardSeconds();\n+        return Seconds.seconds(FieldUtils.safeToInt(seconds));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testGetStandardSeconds() {\n+        Duration test = new Duration(0L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(1L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(999L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(1000L);\n+        assertEquals(1, test.getStandardSeconds());\n+        test = new Duration(1001L);\n+        assertEquals(1, test.getStandardSeconds());\n+        test = new Duration(1999L);\n+        assertEquals(1, test.getStandardSeconds());\n+        test = new Duration(2000L);\n+        assertEquals(2, test.getStandardSeconds());\n+        test = new Duration(-1L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(-999L);\n+        assertEquals(0, test.getStandardSeconds());\n+        test = new Duration(-1000L);\n+        assertEquals(-1, test.getStandardSeconds());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testToString() {\n         long length = (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n             5L * DateTimeConstants.MILLIS_PER_HOUR +\n         assertNotSame(test, result);\n         assertEquals(test, result);\n     }\n-    \n+\n+    //-----------------------------------------------------------------------\n+    public void testToStandardSeconds() {\n+        Duration test = new Duration(0L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(1L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(999L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(1000L);\n+        assertEquals(Seconds.seconds(1), test.toStandardSeconds());\n+        test = new Duration(1001L);\n+        assertEquals(Seconds.seconds(1), test.toStandardSeconds());\n+        test = new Duration(1999L);\n+        assertEquals(Seconds.seconds(1), test.toStandardSeconds());\n+        test = new Duration(2000L);\n+        assertEquals(Seconds.seconds(2), test.toStandardSeconds());\n+        test = new Duration(-1L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(-999L);\n+        assertEquals(Seconds.seconds(0), test.toStandardSeconds());\n+        test = new Duration(-1000L);\n+        assertEquals(Seconds.seconds(-1), test.toStandardSeconds());\n+    }\n+\n+    public void testToStandardSeconds_overflow() {\n+        Duration test = new Duration(((long) Integer.MAX_VALUE) * 1000L + 1000L);\n+        try {\n+            test.toStandardSeconds();\n+            fail();\n+        } catch (ArithmeticException ex) {\n+            // expected\n+        }\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToPeriod() {\n         long length =", "timestamp": 1225150249, "metainfo": ""}