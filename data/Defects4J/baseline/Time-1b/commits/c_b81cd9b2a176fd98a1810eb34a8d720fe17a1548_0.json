{"sha": "b81cd9b2a176fd98a1810eb34a8d720fe17a1548", "log": "Removed withMillis and withChronology methods.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutableDateOnly.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateOnly.java\n     }\n \n     /**\n-     * Gets a copy of this instant with different millis.\n-     * <p>\n-     * The returned object will be a new instance of the same implementation type.\n-     * Only the millis will change, the chronology is kept.\n-     *\n-     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n-     * @return a copy of this instant with different millis\n-     */\n-    public ReadableInstant withMillis(long newMillis) {\n-        return new MutableDateOnly(newMillis, getChronology());\n-    }\n-    \n-    /**\n-     * Gets a copy of this instant with a different chronology.\n-     * <p>\n-     * The returned object will be a new instance of the same implementation type.\n-     * Only the chronology will change, the millis are kept.\n-     *\n-     * @param newChronology  the new chronology\n-     * @return a copy of this instant with a different chronology\n-     */\n-    public ReadableInstant withChronology(Chronology newChronology) {\n-        newChronology = newChronology == null ? ISOChronology.getInstanceUTC()\n-            : newChronology.withUTC();\n-        return new MutableDateOnly(getMillis(), newChronology);\n-    }\n-\n-    /**\n      * Returns the lower limiting field, dayOfYear.\n      *\n      * @return dayOfYear field\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n               hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond, chronology);\n     }\n \n-    //-----------------------------------------------------------------------\n-    /**\n-     * Gets a copy of this instant with different millis.\n-     * <p>\n-     * The returned object will be a new instance of the same implementation type.\n-     * Only the millis will change, the chronology and time zone are kept.\n-     *\n-     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n-     * @return a copy of this instant with different millis\n-     */\n-    public ReadableInstant withMillis(long newMillis) {\n-        return new MutableDateTime(newMillis, getChronology());\n-    }\n-    \n-    /**\n-     * Gets a copy of this instant with a different chronology.\n-     * <p>\n-     * The returned object will be a new instance of the same implementation type.\n-     * Only the chronology will change, the millis are kept.\n-     *\n-     * @param newChronology  the new chronology\n-     * @return a copy of this instant with a different chronology\n-     */\n-    public ReadableInstant withChronology(Chronology newChronology) {\n-        return new MutableDateTime(getMillis(), newChronology);\n-    }\n     \n     // Millis\n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/MutableTimeOnly.java\n+++ b/JodaTime/src/java/org/joda/time/MutableTimeOnly.java\n     }\n \n     /**\n-     * Gets a copy of this instant with different millis.\n-     * <p>\n-     * The returned object will be a new instance of the same implementation type.\n-     * Only the millis will change, the chronology is kept.\n-     * Immutable subclasses may return <code>this</code> if appropriate.\n-     *\n-     * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n-     * @return a copy of this instant with different millis\n-     */\n-    public ReadableInstant withMillis(long newMillis) {\n-        return new MutableTimeOnly(newMillis, getChronology());\n-    }\n-    \n-    /**\n-     * Gets a copy of this instant with a different chronology.\n-     * <p>\n-     * The returned object will be a new instance of the same implementation type.\n-     * Only the chronology will change, the millis are kept.\n-     * Immutable subclasses may return <code>this</code> if appropriate.\n-     *\n-     * @param newChronology  the new chronology\n-     * @return a copy of this instant with a different chronology\n-     */\n-    public ReadableInstant withChronology(Chronology newChronology) {\n-        newChronology = newChronology == null ? ISOChronology.getInstanceUTC()\n-            : newChronology.withUTC();\n-        return new MutableTimeOnly(getMillis(), newChronology);\n-    }\n-\n-    /**\n      * Returns the lower limiting field, null.\n      *\n      * @return null.", "timestamp": 1083078421, "metainfo": ""}