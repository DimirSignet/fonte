{"sha": "e90984dcf7c96a37978d46145da9462f6d48b7ee", "log": "Refactor to extract SkipDateTimeField   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticChronology.java\n import org.joda.time.DurationFieldType;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.field.PreciseDurationField;\n+import org.joda.time.field.SkipDateTimeField;\n \n /**\n  * Implements the Coptic calendar system, which defines every fourth year as\n             fields.years = fields.year.getDurationField();\n \n             // Coptic, like Julian, has no year zero.\n-            fields.year = new JulianChronology.NoYearZeroField(this, fields.year);\n-            fields.weekyear = new JulianChronology.NoWeekyearZeroField(this, fields.weekyear);\n+            fields.year = new SkipDateTimeField(this, fields.year);\n+            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);\n             \n             fields.era = CopticEraDateTimeField.INSTANCE;\n             fields.months = cMonthsField;\n--- a/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/JulianChronology.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeConstants;\n-import org.joda.time.DateTimeField;\n import org.joda.time.DateTimeZone;\n-import org.joda.time.field.DelegatedDateTimeField;\n-import org.joda.time.field.FieldUtils;\n+import org.joda.time.field.SkipDateTimeField;\n \n /**\n  * Implements a pure proleptic Julian calendar system, which defines every\n         if (getBase() == null) {\n             super.assemble(fields);\n             // Julian chronology has no year zero.\n-            fields.year = new NoYearZeroField(this, fields.year);\n-            fields.weekyear = new NoWeekyearZeroField(this, fields.weekyear);\n-        }\n-    }\n-\n-    static class NoYearZeroField extends DelegatedDateTimeField {\n-        private static final long serialVersionUID = -8869148464118507846L;\n-\n-        final BaseGJChronology iChronology;\n-        private transient int iMinYear;\n-\n-        NoYearZeroField(BaseGJChronology chronology, DateTimeField field) {\n-            super(field);\n-            iChronology = chronology;\n-            int min = super.getMinimumValue();\n-            if (min < 0) {\n-                iMinYear = min - 1;\n-            } else if (min == 0) {\n-                iMinYear = 1;\n-            } else {\n-                iMinYear = min;\n-            }\n-        }\n-        \n-        public int get(long millis) {\n-            int year = super.get(millis);\n-            if (year <= 0) {\n-                year--;\n-            }\n-            return year;\n-        }\n-\n-        public long set(long millis, int year) {\n-            FieldUtils.verifyValueBounds(this, year, iMinYear, getMaximumValue());\n-            return super.set(millis, adjustYearForSet(year));\n-        }\n-\n-        public int getMinimumValue() {\n-            return iMinYear;\n-        }\n-\n-        private Object readResolve() {\n-            return iChronology.year();\n-        }\n-    }\n-\n-    static class NoWeekyearZeroField extends NoYearZeroField {\n-        private static final long serialVersionUID = -5013429014495501104L;\n-\n-        NoWeekyearZeroField(BaseGJChronology chronology, DateTimeField field) {\n-            super(chronology, field);\n-        }\n-        \n-        private Object readResolve() {\n-            return iChronology.weekyear();\n+            fields.year = new SkipDateTimeField(this, fields.year);\n+            fields.weekyear = new SkipDateTimeField(this, fields.weekyear);\n         }\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/field/SkipDateTimeField.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2005 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.field;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeField;\n+\n+/**\n+ * Wraps another field such that a certain value is skipped.\n+ * <p>\n+ * This is most useful for years where you want to skip zero, so the\n+ * sequence runs ...,2,1,-1,-2,...\n+ * <p>\n+ * SkipDateTimeField is thread-safe and immutable.\n+ *\n+ * @author Brian S O'Neill\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ */\n+public final class SkipDateTimeField extends DelegatedDateTimeField {\n+\n+    /** Serialization version. */\n+    private static final long serialVersionUID = -8869148464118507846L;\n+\n+    /** The chronology to wrap. */\n+    private final Chronology iChronology;\n+    /** The value to skip. */\n+    private final int iSkip;\n+    /** The calculated minimum value. */\n+    private transient int iMinValue;\n+\n+    /**\n+     * Constructor that skips zero.\n+     * \n+     * @param chronology  the chronoogy to use\n+     * @param field  the field to skip zero on\n+     */\n+    public SkipDateTimeField(Chronology chronology, DateTimeField field) {\n+        this(chronology, field, 0);\n+    }\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param chronology  the chronoogy to use\n+     * @param field  the field to skip zero on\n+     * @param skip  the value to skip\n+     */\n+    public SkipDateTimeField(Chronology chronology, DateTimeField field, int skip) {\n+        super(field);\n+        iChronology = chronology;\n+        int min = super.getMinimumValue();\n+        if (min < skip) {\n+            iMinValue = min - 1;\n+        } else if (min == skip) {\n+            iMinValue = skip + 1;\n+        } else {\n+            iMinValue = min;\n+        }\n+        iSkip = skip;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public int get(long millis) {\n+        int value = super.get(millis);\n+        if (value <= iSkip) {\n+            value--;\n+        }\n+        return value;\n+    }\n+\n+    public long set(long millis, int value) {\n+        FieldUtils.verifyValueBounds(this, value, iMinValue, getMaximumValue());\n+        if (value <= iSkip) {\n+            if (value == iSkip) {\n+                throw new IllegalArgumentException(\"Invalid year: \" + value);\n+            }\n+            value++;\n+        }\n+        return super.set(millis, value);\n+    }\n+\n+    public int getMinimumValue() {\n+        return iMinValue;\n+    }\n+\n+    private Object readResolve() {\n+        return getType().getField(iChronology);\n+    }\n+\n+}", "timestamp": 1107628901, "metainfo": ""}