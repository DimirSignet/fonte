{"sha": "d577ec4753bfd809e277b2ad5807404b91692d6a", "log": "More tests   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n  * @author Stephen Colebourne\n  */\n public class TestDateTime_Properties extends TestCase {\n+    // Summer time:\n+    // 1968-02-18 to 1971-10-31 - +01:00 all year round!\n+    // 1972  UK  Mar 19 - Oct 29\n+    // 1973  UK  Mar 18 - Oct 28\n \n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n         assertEquals(null, test.year().getRangeDurationField());\n         assertEquals(9, test.year().getMaximumTextLength(null));\n         assertEquals(9, test.year().getMaximumShortTextLength(null));\n-    }\n-\n-    public void testPropertyGetMaxMinValuesYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         assertEquals(-292275054, test.year().getMinimumValue());\n         assertEquals(-292275054, test.year().getMinimumValueOverall());\n         assertEquals(292277023, test.year().getMaximumValue());\n         assertEquals(292277023, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyLeapYear() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertEquals(true, test.year().isLeap());\n+        assertEquals(1, test.year().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.year().getLeapDurationField());\n+        test = new DateTime(1971, 6, 9, 0, 0, 0, 0);\n+        assertEquals(false, test.year().isLeap());\n+        assertEquals(0, test.year().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.year().getLeapDurationField());\n     }\n \n     public void testPropertyAddYear() {\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testPropertyGetMonth() {\n+    public void testPropertyGetMonthOfYear() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n         assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n         assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n         assertEquals(12, test.monthOfYear().getMaximumValue());\n         assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n-    }\n-\n-    public void testPropertyGetMaxMinValuesMonth() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         assertEquals(1, test.monthOfYear().getMinimumValue());\n         assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n         assertEquals(12, test.monthOfYear().getMaximumValue());\n         assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n     }\n \n-    public void testPropertyAddMonth() {\n+    public void testPropertyLeapMonthOfYear() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertEquals(false, test.monthOfYear().isLeap());\n+        assertEquals(0, test.monthOfYear().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n+        \n+        test = new DateTime(1972, 2, 9, 0, 0, 0, 0);\n+        assertEquals(true, test.monthOfYear().isLeap());\n+        assertEquals(1, test.monthOfYear().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n+        \n+        test = new DateTime(1971, 6, 9, 0, 0, 0, 0);\n+        assertEquals(false, test.monthOfYear().isLeap());\n+        assertEquals(0, test.monthOfYear().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n+        \n+        test = new DateTime(1971, 2, 9, 0, 0, 0, 0);\n+        assertEquals(false, test.monthOfYear().isLeap());\n+        assertEquals(0, test.monthOfYear().getLeapAmount());\n+        assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddMonthOfYear() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().addToCopy(6);\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1972-02-29T00:00:00.000Z\", copy.toString());\n         \n         copy = test.monthOfYear().addToCopy(2);\n-        assertEquals(\"1972-03-31T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"1972-03-31T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.monthOfYear().addToCopy(3);\n         assertEquals(\"1972-04-30T00:00:00.000+01:00\", copy.toString());\n         \n         test = new DateTime(1971, 1, 31, 0, 0, 0, 0);\n         copy = test.monthOfYear().addToCopy(1);\n-        assertEquals(\"1971-02-28T00:00:00.000Z\", copy.toString());\n-    }\n-\n-    public void testPropertyAddWrapFieldMonth() {\n+        assertEquals(\"1971-02-28T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldMonthOfYear() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().addWrapFieldToCopy(4);\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         copy = test.monthOfYear().addWrapFieldToCopy(3);\n         assertEquals(\"1972-04-30T00:00:00.000+01:00\", copy.toString());\n         \n-        test = new DateTime(1971, 1, 31, 0, 0, 0, 0);\n+        test = new DateTime(1973, 1, 31, 0, 0, 0, 0);\n         copy = test.monthOfYear().addWrapFieldToCopy(1);\n-        assertEquals(\"1971-01-31T00:00:00.000Z\", test.toString());\n-        assertEquals(\"1971-02-28T00:00:00.000Z\", copy.toString());\n-    }\n-\n-    public void testPropertySetMonth() {\n+        assertEquals(\"1973-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"1973-02-28T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertySetMonthOfYear() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().setCopy(12);\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testPropertySetTextMonth() {\n+    public void testPropertySetTextMonthOfYear() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().setCopy(\"12\");\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n     }\n \n-    public void testPropertyCompareToMonth() {\n+    public void testPropertyCompareToMonthOfYear() {\n         DateTime test1 = new DateTime(TEST_TIME1);\n         DateTime test2 = new DateTime(TEST_TIME2);\n         assertEquals(true, test1.monthOfYear().compareTo(test2) < 0);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testPropertyGetDay() {\n+    public void testPropertyGetDayOfMonth() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n         assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n         assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n         assertEquals(30, test.dayOfMonth().getMaximumValue());\n         assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n-    }\n-\n-    public void testPropertyGetMaxMinValuesDay() {\n+        assertEquals(false, test.dayOfMonth().isLeap());\n+        assertEquals(0, test.dayOfMonth().getLeapAmount());\n+        assertEquals(null, test.dayOfMonth().getLeapDurationField());\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDayOfMonth() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         assertEquals(1, test.dayOfMonth().getMinimumValue());\n         assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n         assertEquals(28, test.dayOfMonth().getMaximumValue());\n     }\n \n-    public void testPropertyAddDay() {\n+    public void testPropertyAddDayOfMonth() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfMonth().addToCopy(9);\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1971-12-31T00:00:00.000Z\", copy.toString());\n     }\n \n-    public void testPropertyAddWrapFieldDay() {\n+    public void testPropertyAddWrapFieldDayOfMonth() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfMonth().addWrapFieldToCopy(21);\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1972-07-28T00:00:00.000+01:00\", copy.toString());\n     }\n \n-    public void testPropertySetDay() {\n+    public void testPropertySetDayOfMonth() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfMonth().setCopy(12);\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testPropertySetTextDay() {\n+    public void testPropertySetTextDayOfMonth() {\n         DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfMonth().setCopy(\"12\");\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1972-06-12T00:00:00.000+01:00\", copy.toString());\n     }\n \n-    public void testPropertyCompareToDay() {\n+    public void testPropertyCompareToDayOfMonth() {\n         DateTime test1 = new DateTime(TEST_TIME1);\n         DateTime test2 = new DateTime(TEST_TIME2);\n         assertEquals(true, test1.dayOfMonth().compareTo(test2) < 0);\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfYear() {\n+        // 31+29+31+30+31+9 = 161\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfYear(), test.dayOfYear().getField());\n+        assertEquals(\"dayOfYear\", test.dayOfYear().getName());\n+        assertEquals(\"Property[dayOfYear]\", test.dayOfYear().toString());\n+        assertSame(test, test.dayOfYear().getReadableInstant());\n+        assertSame(test, test.dayOfYear().getDateTime());\n+        assertEquals(161, test.dayOfYear().get());\n+        assertEquals(\"161\", test.dayOfYear().getAsText());\n+        assertEquals(\"161\", test.dayOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText());\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.dayOfYear().getRangeDurationField());\n+        assertEquals(3, test.dayOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.dayOfYear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.dayOfYear().isLeap());\n+        assertEquals(0, test.dayOfYear().getLeapAmount());\n+        assertEquals(null, test.dayOfYear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyGetMaxMinValuesDayOfYear() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertEquals(1, test.dayOfYear().getMinimumValue());\n+        assertEquals(1, test.dayOfYear().getMinimumValueOverall());\n+        assertEquals(366, test.dayOfYear().getMaximumValue());\n+        assertEquals(366, test.dayOfYear().getMaximumValueOverall());\n+        test = new DateTime(1970, 6, 9, 0, 0, 0, 0);\n+        assertEquals(365, test.dayOfYear().getMaximumValue());\n+        assertEquals(366, test.dayOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddDayOfYear() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfYear().addToCopy(9);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-18T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(21);\n+        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(22);\n+        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"1973-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(-8);\n+        assertEquals(\"1972-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(-9);\n+        assertEquals(\"1972-05-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"1971-12-31T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfYear() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfYear().addWrapFieldToCopy(21);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(22);\n+        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(-12);\n+        assertEquals(\"1972-05-28T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(205);\n+        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(206);\n+        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(-160);\n+        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfYear().addWrapFieldToCopy(-161);\n+        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertySetDayOfYear() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfYear().setCopy(12);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-01-12T00:00:00.000Z\", copy.toString());\n+        \n+        try {\n+            test.dayOfYear().setCopy(367);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfYear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextDayOfYear() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfYear().setCopy(\"12\");\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-01-12T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToDayOfYear() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfYear().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfYear().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfYear().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfYear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfYear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfYear().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfYear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetWeekOfWeekyear() {\n+        // 1970-01-01 = Thu\n+        // 1970-12-31 = Thu (+364 days)\n+        // 1971-12-30 = Thu (+364 days)\n+        // 1972-01-03 = Mon             W1\n+        // 1972-01-31 = Mon (+28 days)  W5\n+        // 1972-02-28 = Mon (+28 days)  W9\n+        // 1972-03-27 = Mon (+28 days)  W13\n+        // 1972-04-24 = Mon (+28 days)  W17\n+        // 1972-05-23 = Mon (+28 days)  W21\n+        // 1972-06-05 = Mon (+14 days)  W23\n+        // 1972-06-09 = Fri\n+        // 1972-12-25 = Mon             W52\n+        // 1973-01-01 = Mon             W1\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().weekOfWeekyear(), test.weekOfWeekyear().getField());\n+        assertEquals(\"weekOfWeekyear\", test.weekOfWeekyear().getName());\n+        assertEquals(\"Property[weekOfWeekyear]\", test.weekOfWeekyear().toString());\n+        assertSame(test, test.weekOfWeekyear().getReadableInstant());\n+        assertSame(test, test.weekOfWeekyear().getDateTime());\n+        assertEquals(23, test.weekOfWeekyear().get());\n+        assertEquals(\"23\", test.weekOfWeekyear().getAsText());\n+        assertEquals(\"23\", test.weekOfWeekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"23\", test.weekOfWeekyear().getAsShortText());\n+        assertEquals(\"23\", test.weekOfWeekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().weeks(), test.weekOfWeekyear().getDurationField());\n+        assertEquals(test.getChronology().weekyears(), test.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(2, test.weekOfWeekyear().getMaximumTextLength(null));\n+        assertEquals(2, test.weekOfWeekyear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.weekOfWeekyear().isLeap());\n+        assertEquals(0, test.weekOfWeekyear().getLeapAmount());\n+        assertEquals(null, test.weekOfWeekyear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyGetMaxMinValuesWeekOfWeekyear() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertEquals(1, test.weekOfWeekyear().getMinimumValue());\n+        assertEquals(1, test.weekOfWeekyear().getMinimumValueOverall());\n+        assertEquals(52, test.weekOfWeekyear().getMaximumValue());\n+        assertEquals(53, test.weekOfWeekyear().getMaximumValueOverall());\n+        test = new DateTime(1970, 6, 9, 0, 0, 0, 0);\n+        assertEquals(53, test.weekOfWeekyear().getMaximumValue());\n+        assertEquals(53, test.weekOfWeekyear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddWeekOfWeekyear() {\n+        DateTime test = new DateTime(1972, 6, 5, 0, 0, 0, 0);\n+        DateTime copy = test.weekOfWeekyear().addToCopy(1);\n+        assertEquals(\"1972-06-05T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-12T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addToCopy(29);\n+        assertEquals(\"1972-12-25T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addToCopy(30);\n+        assertEquals(\"1973-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addToCopy(-22);\n+        assertEquals(\"1972-01-03T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addToCopy(-23);\n+        assertEquals(\"1971-12-27T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldWeekOfWeekyear() {\n+        DateTime test = new DateTime(1972, 6, 5, 0, 0, 0, 0);\n+        DateTime copy = test.weekOfWeekyear().addWrapFieldToCopy(1);\n+        assertEquals(\"1972-06-05T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-12T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addWrapFieldToCopy(29);\n+        assertEquals(\"1972-12-25T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addWrapFieldToCopy(30);\n+        assertEquals(\"1972-01-03T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.weekOfWeekyear().addWrapFieldToCopy(-23);\n+        assertEquals(\"1972-12-25T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertySetWeekOfWeekyear() {\n+        DateTime test = new DateTime(1972, 6, 5, 0, 0, 0, 0);\n+        DateTime copy = test.weekOfWeekyear().setCopy(4);\n+        assertEquals(\"1972-06-05T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-01-24T00:00:00.000Z\", copy.toString());\n+        \n+        try {\n+            test.weekOfWeekyear().setCopy(53);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.weekOfWeekyear().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextWeekOfWeekyear() {\n+        DateTime test = new DateTime(1972, 6, 5, 0, 0, 0, 0);\n+        DateTime copy = test.weekOfWeekyear().setCopy(\"4\");\n+        assertEquals(\"1972-06-05T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-01-24T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToWeekOfWeekyear() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.weekOfWeekyear().compareTo(test2) < 0);\n+        assertEquals(true, test2.weekOfWeekyear().compareTo(test1) > 0);\n+        assertEquals(true, test1.weekOfWeekyear().compareTo(test1) == 0);\n+        try {\n+            test1.weekOfWeekyear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.weekOfWeekyear().compareTo(dt2) < 0);\n+        assertEquals(true, test2.weekOfWeekyear().compareTo(dt1) > 0);\n+        assertEquals(true, test1.weekOfWeekyear().compareTo(dt1) == 0);\n+        try {\n+            test1.weekOfWeekyear().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfWeek() {\n+        // 1970-01-01 = Thu\n+        // 1970-12-31 = Thu (+364 days)\n+        // 1971-12-30 = Thu (+364 days)\n+        // 1972-01-03 = Mon\n+        // 1972-01-31 = Mon (+28 days)\n+        // 1972-02-28 = Mon (+28 days)\n+        // 1972-03-27 = Mon (+28 days)\n+        // 1972-04-24 = Mon (+28 days)\n+        // 1972-05-23 = Mon (+28 days)\n+        // 1972-06-05 = Mon (+14 days)\n+        // 1972-06-09 = Fri\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n+        assertEquals(\"dayOfWeek\", test.dayOfWeek().getName());\n+        assertEquals(\"Property[dayOfWeek]\", test.dayOfWeek().toString());\n+        assertSame(test, test.dayOfWeek().getReadableInstant());\n+        assertSame(test, test.dayOfWeek().getDateTime());\n+        assertEquals(5, test.dayOfWeek().get());\n+        assertEquals(\"Friday\", test.dayOfWeek().getAsText());\n+        assertEquals(\"vendredi\", test.dayOfWeek().getAsText(Locale.FRENCH));\n+        assertEquals(\"Fri\", test.dayOfWeek().getAsShortText());\n+        assertEquals(\"ven.\", test.dayOfWeek().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField());\n+        assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField());\n+        assertEquals(9, test.dayOfWeek().getMaximumTextLength(null));\n+        assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null));\n+        assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH));\n+        assertEquals(1, test.dayOfWeek().getMinimumValue());\n+        assertEquals(1, test.dayOfWeek().getMinimumValueOverall());\n+        assertEquals(7, test.dayOfWeek().getMaximumValue());\n+        assertEquals(7, test.dayOfWeek().getMaximumValueOverall());\n+        assertEquals(false, test.dayOfWeek().isLeap());\n+        assertEquals(0, test.dayOfWeek().getLeapAmount());\n+        assertEquals(null, test.dayOfWeek().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddDayOfWeek() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfWeek().addToCopy(1);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-10T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(21);\n+        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(22);\n+        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        assertEquals(\"1973-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(-8);\n+        assertEquals(\"1972-06-01T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(-9);\n+        assertEquals(\"1972-05-31T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        assertEquals(\"1971-12-31T00:00:00.000Z\", copy.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfWeek() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfWeek().addWrapFieldToCopy(1);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-10T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addWrapFieldToCopy(3);\n+        assertEquals(\"1972-06-05T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addWrapFieldToCopy(-12);\n+        assertEquals(\"1972-06-11T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(1972, 6, 2, 0, 0, 0, 0);\n+        copy = test.dayOfWeek().addWrapFieldToCopy(3);\n+        assertEquals(\"1972-06-02T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-05-29T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertySetDayOfWeek() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfWeek().setCopy(4);\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-08T00:00:00.000+01:00\", copy.toString());\n+        \n+        try {\n+            test.dayOfWeek().setCopy(8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.dayOfWeek().setCopy(0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testPropertySetTextDayOfWeek() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfWeek().setCopy(\"4\");\n+        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"1972-06-08T00:00:00.000+01:00\", copy.toString());\n+        copy = test.dayOfWeek().setCopy(\"Mon\");\n+        assertEquals(\"1972-06-05T00:00:00.000+01:00\", copy.toString());\n+        copy = test.dayOfWeek().setCopy(\"Tuesday\");\n+        assertEquals(\"1972-06-06T00:00:00.000+01:00\", copy.toString());\n+        copy = test.dayOfWeek().setCopy(\"lundi\", Locale.FRENCH);\n+        assertEquals(\"1972-06-05T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyCompareToDayOfWeek() {\n+        DateTime test1 = new DateTime(TEST_TIME1);\n+        DateTime test2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfWeek().compareTo(test2) < 0);\n+        assertEquals(true, test2.dayOfWeek().compareTo(test1) > 0);\n+        assertEquals(true, test1.dayOfWeek().compareTo(test1) == 0);\n+        try {\n+            test1.dayOfWeek().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        DateTime dt1 = new DateTime(TEST_TIME1);\n+        DateTime dt2 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test1.dayOfWeek().compareTo(dt2) < 0);\n+        assertEquals(true, test2.dayOfWeek().compareTo(dt1) > 0);\n+        assertEquals(true, test1.dayOfWeek().compareTo(dt1) == 0);\n+        try {\n+            test1.dayOfWeek().compareTo((ReadableInstant) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n }", "timestamp": 1089455746, "metainfo": ""}