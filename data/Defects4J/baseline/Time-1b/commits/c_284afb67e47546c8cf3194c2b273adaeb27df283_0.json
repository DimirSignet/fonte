{"sha": "284afb67e47546c8cf3194c2b273adaeb27df283", "log": "Make compatible with older JDKs   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n             // Cutover is sometime in the day, so cutover fields are required\n             // for time of day.\n \n-            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond);\n-            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay);\n-            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute);\n-            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay);\n-            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour);\n-            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay);\n-            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay);\n-            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday);\n-            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay);\n+            fields.millisOfSecond = new CutoverField(julian.millisOfSecond(), fields.millisOfSecond, iCutoverMillis);\n+            fields.millisOfDay = new CutoverField(julian.millisOfDay(), fields.millisOfDay, iCutoverMillis);\n+            fields.secondOfMinute = new CutoverField(julian.secondOfMinute(), fields.secondOfMinute, iCutoverMillis);\n+            fields.secondOfDay = new CutoverField(julian.secondOfDay(), fields.secondOfDay, iCutoverMillis);\n+            fields.minuteOfHour = new CutoverField(julian.minuteOfHour(), fields.minuteOfHour, iCutoverMillis);\n+            fields.minuteOfDay = new CutoverField(julian.minuteOfDay(), fields.minuteOfDay, iCutoverMillis);\n+            fields.hourOfDay = new CutoverField(julian.hourOfDay(), fields.hourOfDay, iCutoverMillis);\n+            fields.hourOfHalfday = new CutoverField(julian.hourOfHalfday(), fields.hourOfHalfday, iCutoverMillis);\n+            fields.clockhourOfDay = new CutoverField(julian.clockhourOfDay(), fields.clockhourOfDay, iCutoverMillis);\n             fields.clockhourOfHalfday = new CutoverField(julian.clockhourOfHalfday(),\n-                                                         fields.clockhourOfHalfday);\n-            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay);\n+                                                         fields.clockhourOfHalfday, iCutoverMillis);\n+            fields.halfdayOfDay = new CutoverField(julian.halfdayOfDay(), fields.halfdayOfDay, iCutoverMillis);\n         }\n \n         // These fields just require basic cutover support.\n         {\n-            fields.era = new CutoverField(julian.era(), fields.era);\n-            fields.dayOfMonth = new CutoverField(julian.dayOfMonth(), fields.dayOfMonth);\n+            fields.era = new CutoverField(julian.era(), fields.era, iCutoverMillis);\n+            fields.dayOfMonth = new CutoverField(julian.dayOfMonth(), fields.dayOfMonth, iCutoverMillis);\n         }\n \n         // DayOfYear and weekOfWeekyear require special handling since cutover\n \n         {\n             long cutover = gregorian.year().roundCeiling(iCutoverMillis);\n-            fields.dayOfYear = new CutoverField\n-                (julian.dayOfYear(), fields.dayOfYear, cutover);\n+            fields.dayOfYear = new CutoverField(\n+                julian.dayOfYear(), fields.dayOfYear, cutover);\n         }\n \n         {\n             long cutover = gregorian.weekyear().roundCeiling(iCutoverMillis);\n-            fields.weekOfWeekyear = new CutoverField\n-                (julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n+            fields.weekOfWeekyear = new CutoverField(\n+                julian.weekOfWeekyear(), fields.weekOfWeekyear, cutover, true);\n         }\n \n         // These fields are special because they have imprecise durations. The\n         // family of addition methods need special attention. Override affected\n         // duration fields as well.\n         {\n-            fields.year = new ImpreciseCutoverField(julian.year(), fields.year);\n+            fields.year = new ImpreciseCutoverField(\n+                julian.year(), fields.year, iCutoverMillis);\n             fields.years = fields.year.getDurationField();\n-            fields.yearOfEra = new ImpreciseCutoverField\n-                (julian.yearOfEra(), fields.yearOfEra, fields.years);\n-            fields.yearOfCentury = new ImpreciseCutoverField\n-                (julian.yearOfCentury(), fields.yearOfCentury, fields.years);\n+            fields.yearOfEra = new ImpreciseCutoverField(\n+                julian.yearOfEra(), fields.yearOfEra, fields.years, iCutoverMillis);\n+            fields.yearOfCentury = new ImpreciseCutoverField(\n+                julian.yearOfCentury(), fields.yearOfCentury, fields.years, iCutoverMillis);\n             \n-            fields.centuryOfEra = new ImpreciseCutoverField\n-                (julian.centuryOfEra(), fields.centuryOfEra);\n+            fields.centuryOfEra = new ImpreciseCutoverField(\n+                julian.centuryOfEra(), fields.centuryOfEra, iCutoverMillis);\n             fields.centuries = fields.centuryOfEra.getDurationField();\n             \n-            fields.monthOfYear = new ImpreciseCutoverField\n-                (julian.monthOfYear(), fields.monthOfYear);\n+            fields.monthOfYear = new ImpreciseCutoverField(\n+                julian.monthOfYear(), fields.monthOfYear, iCutoverMillis);\n             fields.months = fields.monthOfYear.getDurationField();\n             \n-            fields.weekyear = new ImpreciseCutoverField(julian.weekyear(), fields.weekyear, true);\n-            fields.weekyearOfCentury = new ImpreciseCutoverField\n-                (julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears);\n+            fields.weekyear = new ImpreciseCutoverField(\n+                julian.weekyear(), fields.weekyear, null, iCutoverMillis, true);\n+            fields.weekyearOfCentury = new ImpreciseCutoverField(\n+                julian.weekyearOfCentury(), fields.weekyearOfCentury, fields.weekyears, iCutoverMillis);\n             fields.weekyears = fields.weekyear.getDurationField();\n         }\n     }\n         /**\n          * @param julianField field from the chronology used before the cutover instant\n          * @param gregorianField field from the chronology used at and after the cutover\n+         * @param cutoverMillis  the millis of the cutover\n          */\n-        CutoverField(DateTimeField julianField, DateTimeField gregorianField) {\n-            this(julianField, gregorianField, iCutoverMillis, false);\n+        CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\n+            this(julianField, gregorianField, cutoverMillis, false);\n         }\n \n         /**\n          * @param julianField field from the chronology used before the cutover instant\n          * @param gregorianField field from the chronology used at and after the cutover\n+         * @param cutoverMillis  the millis of the cutover\n          * @param convertByWeekyear\n          */\n-        CutoverField(DateTimeField julianField, DateTimeField gregorianField, boolean convertByWeekyear) {\n-            this(julianField, gregorianField, iCutoverMillis, convertByWeekyear);\n-        }\n-\n-        CutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\n-            this(julianField, gregorianField, cutoverMillis, false);\n-        }\n-\n         CutoverField(DateTimeField julianField, DateTimeField gregorianField,\n                      long cutoverMillis, boolean convertByWeekyear) {\n             super(gregorianField.getType());\n         /**\n          * Creates a duration field that links back to this.\n          */\n-        ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField) {\n-            this(julianField, gregorianField, null, false);\n-        }\n-\n-        /**\n-         * Creates a duration field that links back to this.\n-         */\n-        ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n-                              boolean convertByWeekyear) {\n-            this(julianField, gregorianField, null, convertByWeekyear);\n+        ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField, long cutoverMillis) {\n+            this(julianField, gregorianField, null, cutoverMillis, false);\n         }\n \n         /**\n          * @param durationField shared duration field\n          */\n         ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n-                              DurationField durationField)\n+                              DurationField durationField, long cutoverMillis)\n         {\n-            this(julianField, gregorianField, durationField, false);\n+            this(julianField, gregorianField, durationField, cutoverMillis, false);\n         }\n \n         /**\n          * @param durationField shared duration field\n          */\n         ImpreciseCutoverField(DateTimeField julianField, DateTimeField gregorianField,\n-                              DurationField durationField, boolean convertByWeekyear)\n+                              DurationField durationField,\n+                              long cutoverMillis, boolean convertByWeekyear)\n         {\n-            super(julianField, gregorianField, convertByWeekyear);\n+            super(julianField, gregorianField, cutoverMillis, convertByWeekyear);\n             if (durationField == null) {\n                 durationField = new LinkedDurationField(iDurationField, this);\n             }\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeUtils.java\n  * @author Stephen Colebourne\n  */\n public class TestDateTimeUtils extends TestCase {\n+    private static final boolean OLD_JDK;\n+    static {\n+        String str = System.getProperty(\"java.version\");\n+        boolean old = true;\n+        if (str.length() > 3 &&\n+            str.charAt(0) == '1' &&\n+            str.charAt(1) == '.' &&\n+            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+            old = false;\n+        }\n+        OLD_JDK = old;\n+    }\n+\n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n                 if (permission instanceof JodaTimePermission) {\n                     return false;\n                 }\n-                return super.implies(domain, permission);\n+                return true;\n+//                return super.implies(domain, permission);\n             }\n         };\n         ALLOW = new Policy() {\n \n     //-----------------------------------------------------------------------\n     public void testSystemMillisSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             try {\n                 Policy.setPolicy(RESTRICT);\n \n     //-----------------------------------------------------------------------\n     public void testFixedMillisSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             try {\n                 Policy.setPolicy(RESTRICT);\n \n     //-----------------------------------------------------------------------\n     public void testOffsetMillisSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             try {\n                 Policy.setPolicy(RESTRICT);\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeZone.java\n  * @author Stephen Colebourne\n  */\n public class TestDateTimeZone extends TestCase {\n+    private static final boolean OLD_JDK;\n+    static {\n+        String str = System.getProperty(\"java.version\");\n+        boolean old = true;\n+        if (str.length() > 3 &&\n+            str.charAt(0) == '1' &&\n+            str.charAt(1) == '.' &&\n+            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+            old = false;\n+        }\n+        OLD_JDK = old;\n+    }\n+    \n     // Test in 2002/03 as time zones are more well known\n     // (before the late 90's they were all over the place)\n \n                 if (permission instanceof JodaTimePermission) {\n                     return false;\n                 }\n-                return super.implies(domain, permission);\n+                return true;\n+//                return super.implies(domain, permission);\n             }\n         };\n         ALLOW = new Policy() {\n     }\n             \n     public void testDefaultSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n     \n     public void testProviderSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }        \n     \n     public void testNameProviderSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n  * @author Stephen Colebourne\n  */\n public class TestConverterManager extends TestCase {\n+    private static final boolean OLD_JDK;\n+    static {\n+        String str = System.getProperty(\"java.version\");\n+        boolean old = true;\n+        if (str.length() > 3 &&\n+            str.charAt(0) == '1' &&\n+            str.charAt(1) == '.' &&\n+            (str.charAt(2) == '4' || str.charAt(2) == '5' || str.charAt(2) == '6')) {\n+            old = false;\n+        }\n+        OLD_JDK = old;\n+    }\n \n     private static final Policy RESTRICT;\n     private static final Policy ALLOW;\n                 if (permission instanceof JodaTimePermission) {\n                     return false;\n                 }\n-                return super.implies(domain, permission);\n+                return true;\n+//                return super.implies(domain, permission);\n             }\n         };\n         ALLOW = new Policy() {\n     }\n \n     public void testAddInstantConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n \n     public void testRemoveInstantConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n \n     public void testAddPartialConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n \n     public void testRemovePartialConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n \n     public void testAddDurationConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n \n     public void testRemoveDurationConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n \n     public void testAddPeriodConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n \n     public void testRemovePeriodConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n \n     public void testAddIntervalConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());\n     }\n \n     public void testRemoveIntervalConverterSecurity() {\n+        if (OLD_JDK) {\n+            return;\n+        }\n         try {\n             Policy.setPolicy(RESTRICT);\n             System.setSecurityManager(new SecurityManager());", "timestamp": 1099742877, "metainfo": ""}