{"sha": "93c99e2910ff4238caaaad76f4f468bfa0a2ab1c", "log": "LocalDate/LocalTime conostructors did not set internal state correctly spotted via problem with Days.daysBetween from Gareth Chapman  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n         \n         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n         chronology = chronology.withUTC();\n-        chronology.dayOfMonth().roundFloor(localMillis);\n-        iLocalMillis = localMillis;\n+        iLocalMillis = chronology.dayOfMonth().roundFloor(localMillis);\n         iChronology = chronology;\n     }\n \n--- a/JodaTime/src/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalTime.java\n         \n         long localMillis = chronology.getZone().getMillisKeepLocal(DateTimeZone.UTC, instant);\n         chronology = chronology.withUTC();\n-        chronology.millisOfDay().get(localMillis);\n-        iLocalMillis = localMillis;\n+        iLocalMillis = chronology.millisOfDay().get(localMillis);\n         iChronology = chronology;\n     }\n \n--- a/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalDate_Constructors.java\n         (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n         + 12L * DateTimeConstants.MILLIS_PER_HOUR\n         + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n+    private long TEST_TIME1_ROUNDED =\n+        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n     private long TEST_TIME2 =\n         (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n         + 14L * DateTimeConstants.MILLIS_PER_HOUR\n         + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n+\n     private DateTimeZone zone = null;\n \n     public static void main(String[] args) {\n         assertEquals(1970, test.getYear());\n         assertEquals(4, test.getMonthOfYear());\n         assertEquals(6, test.getDayOfMonth());\n+        assertEquals(TEST_TIME1_ROUNDED, test.getLocalMillis());\n     }\n \n     public void testConstructor_long2_DateTimeZone() throws Throwable {\n         assertEquals(1971, test.getYear());\n         assertEquals(5, test.getMonthOfYear());\n         assertEquals(7, test.getDayOfMonth());\n+    }\n+\n+    public void testConstructor_long3_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2006, 6, 9, 0, 0, 0, 0, PARIS);\n+        DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC);\n+        \n+        LocalDate test = new LocalDate(dt.getMillis(), PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2006, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(dtUTC.getMillis(), test.getLocalMillis());\n+    }\n+\n+    public void testConstructor_long4_DateTimeZone() throws Throwable {\n+        DateTime dt = new DateTime(2006, 6, 9, 23, 59, 59, 999, PARIS);\n+        DateTime dtUTC = new DateTime(2006, 6, 9, 0, 0, 0, 0, DateTimeZone.UTC);\n+        \n+        LocalDate test = new LocalDate(dt.getMillis(), PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(2006, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(dtUTC.getMillis(), test.getLocalMillis());\n     }\n \n     public void testConstructor_long_nullDateTimeZone() throws Throwable {\n--- a/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestLocalTime_Constructors.java\n         assertEquals(4, test.getMillisOfSecond());\n     }\n \n+    public void testConstructor_long_DateTimeZone_2() throws Throwable {\n+        DateTime dt = new DateTime(2007, 6, 9, 1, 2, 3, 4, PARIS);\n+        DateTime dtUTC = new DateTime(1970, 1, 1, 1, 2, 3, 4, DateTimeZone.UTC);\n+        \n+        LocalTime test = new LocalTime(dt.getMillis(), PARIS);\n+        assertEquals(ISO_UTC, test.getChronology());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(2, test.getMinuteOfHour());\n+        assertEquals(3, test.getSecondOfMinute());\n+        assertEquals(4, test.getMillisOfSecond());\n+        assertEquals(dtUTC.getMillis(), test.getLocalMillis());\n+    }\n+\n     public void testConstructor_long_nullDateTimeZone() throws Throwable {\n         LocalTime test = new LocalTime(TEST_TIME1, (DateTimeZone) null);\n         assertEquals(ISO_UTC, test.getChronology());", "timestamp": 1168556042, "metainfo": ""}