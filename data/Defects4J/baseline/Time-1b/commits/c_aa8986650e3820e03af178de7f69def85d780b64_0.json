{"sha": "aa8986650e3820e03af178de7f69def85d780b64", "log": "Fix so that builder works even when system time zone isn't UTC.  ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/tz/DateTimeZoneBuilder.java\n          * @param transitions  the list of Transition objects\n          * @param tailZone  optional zone for getting info beyond precalculated tables\n          */\n-        static PrecalculatedZone create(String id, boolean outputID, ArrayList transitions, DSTZone tailZone) {\n+        static PrecalculatedZone create(String id, boolean outputID, ArrayList transitions,\n+                                        DSTZone tailZone) {\n             int size = transitions.size();\n             if (size == 0) {\n                 throw new IllegalArgumentException();\n                     zoneNameData = set;\n                 }\n             }\n+\n+            Chronology chrono = ISOChronology.getInstanceUTC();\n+\n             for (int i = 0; i < nameKeys.length - 1; i++) {\n                 String curNameKey = nameKeys[i];\n                 String nextNameKey = nameKeys[i + 1];\n                 long nextOffset = wallOffsets[i + 1];\n                 long curStdOffset = standardOffsets[i];\n                 long nextStdOffset = standardOffsets[i + 1];\n-                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay());\n+                Period p = new Period(trans[i], trans[i + 1], PeriodType.yearMonthDay(), chrono);\n                 if (curOffset != nextOffset &&\n                         curStdOffset == nextStdOffset &&\n                         curNameKey.equals(nextNameKey) &&\n                         curNameKey.equals(zoneNameData[4])) {\n                     \n                     System.out.println(\"Fixing duplicate name key - \" + nextNameKey);\n-                    System.out.println(\"     - \" + new DateTime(trans[i]) + \" - \" + new DateTime(trans[i + 1]));\n+                    System.out.println(\"     - \" + new DateTime(trans[i], chrono) +\n+                                       \" - \" + new DateTime(trans[i + 1], chrono));\n                     if (curOffset > nextOffset) {\n                         nameKeys[i] = (curNameKey + \"-Summer\").intern();\n                     } else if (curOffset < nextOffset) {\n                     }\n                 }\n             }\n+\n             if (tailZone != null) {\n-                if (tailZone.iStartRecurrence.getNameKey().equals(tailZone.iEndRecurrence.getNameKey())) {\n-                    System.out.println(\"Fixing duplicate recurrent name key - \" + tailZone.iStartRecurrence.getNameKey());\n+                if (tailZone.iStartRecurrence.getNameKey()\n+                    .equals(tailZone.iEndRecurrence.getNameKey())) {\n+                    System.out.println(\"Fixing duplicate recurrent name key - \" +\n+                                       tailZone.iStartRecurrence.getNameKey());\n                     if (tailZone.iStartRecurrence.getSaveMillis() > 0) {\n                         tailZone = new DSTZone(\n                             tailZone.getID(),\n                 }\n             }\n             \n-            return new PrecalculatedZone((outputID ? id : \"\"), trans, wallOffsets, standardOffsets, nameKeys, tailZone);\n+            return new PrecalculatedZone\n+                ((outputID ? id : \"\"), trans, wallOffsets, standardOffsets, nameKeys, tailZone);\n         }\n \n         // All array fields have the same length.", "timestamp": 1238078112, "metainfo": ""}