{"sha": "67778ce6f8a2d794ba876eaa95a3b5ddf720ac0b", "log": "Better thread-safety in ISODateTimeFormat  Fixes #45", "commit": "\n--- a/src/main/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/src/main/java/org/joda/time/format/ISODateTimeFormat.java\n  * @see DateTimeFormatterBuilder\n  */\n public class ISODateTimeFormat {\n-\n-    //-----------------------------------------------------------------------\n-    private static DateTimeFormatter\n-        ye,  // year element (yyyy)\n-        mye, // monthOfYear element (-MM)\n-        dme, // dayOfMonth element (-dd)\n-        we,  // weekyear element (xxxx)\n-        wwe, // weekOfWeekyear element (-ww)\n-        dwe, // dayOfWeek element (-ee)\n-        dye, // dayOfYear element (-DDD)\n-        hde, // hourOfDay element (HH)\n-        mhe, // minuteOfHour element (:mm)\n-        sme, // secondOfMinute element (:ss)\n-        fse, // fractionOfSecond element (.SSSSSSSSS)\n-        ze,  // zone offset element\n-        lte, // literal 'T' element\n-        \n-        //y,   // year (same as year element)\n-        ym,  // year month\n-        ymd, // year month day\n-\n-        //w,   // weekyear (same as weekyear element)\n-        ww,  // weekyear week\n-        wwd, // weekyear week day\n-\n-        //h,    // hour (same as hour element)\n-        hm,   // hour minute\n-        hms,  // hour minute second\n-        hmsl, // hour minute second millis\n-        hmsf, // hour minute second fraction\n-\n-        dh,    // date hour\n-        dhm,   // date hour minute\n-        dhms,  // date hour minute second\n-        dhmsl, // date hour minute second millis\n-        dhmsf, // date hour minute second fraction\n-\n-        //d,  // date (same as ymd)\n-        t,  // time\n-        tx,  // time no millis\n-        tt,  // Ttime\n-        ttx,  // Ttime no millis\n-        dt, // date time\n-        dtx, // date time no millis\n-\n-        //wd,  // week date (same as wwd)\n-        wdt, // week date time\n-        wdtx, // week date time no millis\n-\n-        od,  // ordinal date (same as yd)\n-        odt, // ordinal date time\n-        odtx, // ordinal date time no millis\n-\n-        bd,  // basic date\n-        bt,  // basic time\n-        btx,  // basic time no millis\n-        btt, // basic Ttime\n-        bttx, // basic Ttime no millis\n-        bdt, // basic date time\n-        bdtx, // basic date time no millis\n-\n-        bod,  // basic ordinal date\n-        bodt, // basic ordinal date time\n-        bodtx, // basic ordinal date time no millis\n-\n-        bwd,  // basic week date\n-        bwdt, // basic week date time\n-        bwdtx, // basic week date time no millis\n-\n-        dpe, // date parser element\n-        tpe, // time parser element\n-        dp,  // date parser\n-        ldp, // local date parser\n-        tp,  // time parser\n-        ltp, // local time parser\n-        dtp, // date time parser\n-        dotp, // date optional time parser\n-        ldotp; // local date optional time parser\n \n     /**\n      * Constructor.\n         } else if (workingFields.contains(DateTimeFieldType.dayOfWeek())) {\n             reducedPrec = dateByWeek(bld, workingFields, extended, strictISO);\n         } else if (workingFields.remove(DateTimeFieldType.year())) {\n-            bld.append(yearElement());\n+            bld.append(Constants.ye);\n             reducedPrec = true;\n         } else if (workingFields.remove(DateTimeFieldType.weekyear())) {\n-            bld.append(weekyearElement());\n+            bld.append(Constants.we);\n             reducedPrec = true;\n         }\n         boolean datePresent = (workingFields.size() < inputSize);\n         \n         boolean reducedPrec = false;\n         if (fields.remove(DateTimeFieldType.year())) {\n-            bld.append(yearElement());\n+            bld.append(Constants.ye);\n             if (fields.remove(DateTimeFieldType.monthOfYear())) {\n                 if (fields.remove(DateTimeFieldType.dayOfMonth())) {\n                     // YYYY-MM-DD/YYYYMMDD\n         \n         boolean reducedPrec = false;\n         if (fields.remove(DateTimeFieldType.year())) {\n-            bld.append(yearElement());\n+            bld.append(Constants.ye);\n             if (fields.remove(DateTimeFieldType.dayOfYear())) {\n                 // YYYY-DDD/YYYYDDD\n                 appendSeparator(bld, extended);\n         \n         boolean reducedPrec = false;\n         if (fields.remove(DateTimeFieldType.weekyear())) {\n-            bld.append(weekyearElement());\n+            bld.append(Constants.we);\n             if (fields.remove(DateTimeFieldType.weekOfWeekyear())) {\n                 appendSeparator(bld, extended);\n                 bld.appendLiteral('W');\n      * </pre>\n      */\n     public static DateTimeFormatter dateParser() {\n-        if (dp == null) {\n-            DateTimeParser tOffset = new DateTimeFormatterBuilder()\n-                .appendLiteral('T')\n-                .append(offsetElement()).toParser();\n-            dp = new DateTimeFormatterBuilder()\n-                .append(dateElementParser())\n-                .appendOptional(tOffset)\n-                .toFormatter();\n-        }\n-        return dp;\n+        return Constants.dp;\n     }\n \n     /**\n      * @since 1.3\n      */\n     public static DateTimeFormatter localDateParser() {\n-        if (ldp == null) {\n-            ldp = dateElementParser().withZoneUTC();\n-        }\n-        return ldp;\n+        return Constants.ldp;\n     }\n \n     /**\n      * </pre>\n      */\n     public static DateTimeFormatter dateElementParser() {\n-        if (dpe == null) {\n-            dpe = new DateTimeFormatterBuilder()\n-                .append(null, new DateTimeParser[] {\n-                    new DateTimeFormatterBuilder()\n-                    .append(yearElement())\n-                    .appendOptional\n-                    (new DateTimeFormatterBuilder()\n-                     .append(monthElement())\n-                     .appendOptional(dayOfMonthElement().getParser())\n-                     .toParser())\n-                    .toParser(),\n-                    new DateTimeFormatterBuilder()\n-                    .append(weekyearElement())\n-                    .append(weekElement())\n-                    .appendOptional(dayOfWeekElement().getParser())\n-                    .toParser(),\n-                    new DateTimeFormatterBuilder()\n-                    .append(yearElement())\n-                    .append(dayOfYearElement())\n-                    .toParser()\n-                })\n-                .toFormatter();\n-        }\n-        return dpe;\n+        return Constants.dpe;\n     }\n \n     /**\n      * </pre>\n      */\n     public static DateTimeFormatter timeParser() {\n-        if (tp == null) {\n-            tp = new DateTimeFormatterBuilder()\n-                .appendOptional(literalTElement().getParser())\n-                .append(timeElementParser())\n-                .appendOptional(offsetElement().getParser())\n-                .toFormatter();\n-        }\n-        return tp;\n+        return Constants.tp;\n     }\n \n     /**\n      * @since 1.3\n      */\n     public static DateTimeFormatter localTimeParser() {\n-        if (ltp == null) {\n-            ltp = new DateTimeFormatterBuilder()\n-                .appendOptional(literalTElement().getParser())\n-                .append(timeElementParser())\n-                .toFormatter().withZoneUTC();\n-        }\n-        return ltp;\n+        return Constants.ltp;\n     }\n \n     /**\n      * </pre>\n      */\n     public static DateTimeFormatter timeElementParser() {\n-        if (tpe == null) {\n-            // Decimal point can be either '.' or ','\n-            DateTimeParser decimalPoint = new DateTimeFormatterBuilder()\n-                .append(null, new DateTimeParser[] {\n-                    new DateTimeFormatterBuilder()\n-                    .appendLiteral('.')\n-                    .toParser(),\n-                    new DateTimeFormatterBuilder()\n-                    .appendLiteral(',')\n-                    .toParser()\n-                })\n-                .toParser();\n-\n-            tpe = new DateTimeFormatterBuilder()\n-                // time-element\n-                .append(hourElement())\n-                .append\n-                (null, new DateTimeParser[] {\n-                    new DateTimeFormatterBuilder()\n-                    // minute-element\n-                    .append(minuteElement())\n-                    .append\n-                    (null, new DateTimeParser[] {\n-                        new DateTimeFormatterBuilder()\n-                        // second-element\n-                        .append(secondElement())\n-                        // second fraction\n-                        .appendOptional(new DateTimeFormatterBuilder()\n-                                        .append(decimalPoint)\n-                                        .appendFractionOfSecond(1, 9)\n-                                        .toParser())\n-                        .toParser(),\n-                        // minute fraction\n-                        new DateTimeFormatterBuilder()\n-                        .append(decimalPoint)\n-                        .appendFractionOfMinute(1, 9)\n-                        .toParser(),\n-                        null\n-                    })\n-                    .toParser(),\n-                    // hour fraction\n-                    new DateTimeFormatterBuilder()\n-                    .append(decimalPoint)\n-                    .appendFractionOfHour(1, 9)\n-                    .toParser(),\n-                    null\n-                })\n-                .toFormatter();\n-        }\n-        return tpe;\n+        return Constants.tpe;\n     }\n \n     /**\n      * </pre>\n      */\n     public static DateTimeFormatter dateTimeParser() {\n-        if (dtp == null) {\n-            // This is different from the general time parser in that the 'T'\n-            // is required.\n-            DateTimeParser time = new DateTimeFormatterBuilder()\n-                .appendLiteral('T')\n-                .append(timeElementParser())\n-                .appendOptional(offsetElement().getParser())\n-                .toParser();\n-            dtp = new DateTimeFormatterBuilder()\n-                .append(null, new DateTimeParser[] {time, dateOptionalTimeParser().getParser()})\n-                .toFormatter();\n-        }\n-        return dtp;\n+        return Constants.dtp;\n     }\n \n     /**\n      * @since 1.3\n      */\n     public static DateTimeFormatter dateOptionalTimeParser() {\n-        if (dotp == null) {\n-            DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()\n-                .appendLiteral('T')\n-                .appendOptional(timeElementParser().getParser())\n-                .appendOptional(offsetElement().getParser())\n-                .toParser();\n-            dotp = new DateTimeFormatterBuilder()\n-                .append(dateElementParser())\n-                .appendOptional(timeOrOffset)\n-                .toFormatter();\n-        }\n-        return dotp;\n+        return Constants.dotp;\n     }\n \n     /**\n      * @since 1.3\n      */\n     public static DateTimeFormatter localDateOptionalTimeParser() {\n-        if (ldotp == null) {\n-            DateTimeParser time = new DateTimeFormatterBuilder()\n-                .appendLiteral('T')\n-                .append(timeElementParser())\n-                .toParser();\n-            ldotp = new DateTimeFormatterBuilder()\n-                .append(dateElementParser())\n-                .appendOptional(time)\n-                .toFormatter().withZoneUTC();\n-        }\n-        return ldotp;\n+        return Constants.ldotp;\n     }\n \n     //-----------------------------------------------------------------------\n      * @return a formatter for HH:mm:ss.SSSZZ\n      */\n     public static DateTimeFormatter time() {\n-        if (t == null) {\n-            t = new DateTimeFormatterBuilder()\n-                .append(hourMinuteSecondFraction())\n-                .append(offsetElement())\n-                .toFormatter();\n-        }\n-        return t;\n+        return Constants.t;\n     }\n \n     /**\n      * @return a formatter for HH:mm:ssZZ\n      */\n     public static DateTimeFormatter timeNoMillis() {\n-        if (tx == null) {\n-            tx = new DateTimeFormatterBuilder()\n-                .append(hourMinuteSecond())\n-                .append(offsetElement())\n-                .toFormatter();\n-        }\n-        return tx;\n+        return Constants.tx;\n     }\n \n     /**\n      * @return a formatter for 'T'HH:mm:ss.SSSZZ\n      */\n     public static DateTimeFormatter tTime() {\n-        if (tt == null) {\n-            tt = new DateTimeFormatterBuilder()\n-                .append(literalTElement())\n-                .append(time())\n-                .toFormatter();\n-        }\n-        return tt;\n+        return Constants.tt;\n     }\n \n     /**\n      * @return a formatter for 'T'HH:mm:ssZZ\n      */\n     public static DateTimeFormatter tTimeNoMillis() {\n-        if (ttx == null) {\n-            ttx = new DateTimeFormatterBuilder()\n-                .append(literalTElement())\n-                .append(timeNoMillis())\n-                .toFormatter();\n-        }\n-        return ttx;\n+        return Constants.ttx;\n     }\n \n     /**\n      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSSZZ\n      */\n     public static DateTimeFormatter dateTime() {\n-        if (dt == null) {\n-            dt = new DateTimeFormatterBuilder()\n-                .append(date())\n-                .append(tTime())\n-                .toFormatter();\n-        }\n-        return dt;\n+        return Constants.dt;\n     }\n \n     /**\n      * @return a formatter for yyyy-MM-dd'T'HH:mm:ssZZ\n      */\n     public static DateTimeFormatter dateTimeNoMillis() {\n-        if (dtx == null) {\n-            dtx = new DateTimeFormatterBuilder()\n-                .append(date())\n-                .append(tTimeNoMillis())\n-                .toFormatter();\n-        }\n-        return dtx;\n+        return Constants.dtx;\n     }\n \n     /**\n      * @since 1.1\n      */\n     public static DateTimeFormatter ordinalDate() {\n-        if (od == null) {\n-            od = new DateTimeFormatterBuilder()\n-                .append(yearElement())\n-                .append(dayOfYearElement())\n-                .toFormatter();\n-        }\n-        return od;\n+        return Constants.od;\n     }\n \n     /**\n      * @since 1.1\n      */\n     public static DateTimeFormatter ordinalDateTime() {\n-        if (odt == null) {\n-            odt = new DateTimeFormatterBuilder()\n-                .append(ordinalDate())\n-                .append(tTime())\n-                .toFormatter();\n-        }\n-        return odt;\n+        return Constants.odt;\n     }\n \n     /**\n      * @since 1.1\n      */\n     public static DateTimeFormatter ordinalDateTimeNoMillis() {\n-        if (odtx == null) {\n-            odtx = new DateTimeFormatterBuilder()\n-                .append(ordinalDate())\n-                .append(tTimeNoMillis())\n-                .toFormatter();\n-        }\n-        return odtx;\n+        return Constants.odtx;\n     }\n \n     /**\n      * @return a formatter for xxxx-'W'ww-e\n      */\n     public static DateTimeFormatter weekDate() {\n-        return weekyearWeekDay();\n+        return Constants.wwd;\n     }\n \n     /**\n      * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ss.SSSZZ\n      */\n     public static DateTimeFormatter weekDateTime() {\n-        if (wdt == null) {\n-            wdt = new DateTimeFormatterBuilder()\n-                .append(weekDate())\n-                .append(tTime())\n-                .toFormatter();\n-        }\n-        return wdt;\n+        return Constants.wdt;\n     }\n \n     /**\n      * @return a formatter for xxxx-'W'ww-e'T'HH:mm:ssZZ\n      */\n     public static DateTimeFormatter weekDateTimeNoMillis() {\n-        if (wdtx == null) {\n-            wdtx = new DateTimeFormatterBuilder()\n-                .append(weekDate())\n-                .append(tTimeNoMillis())\n-                .toFormatter();\n-        }\n-        return wdtx;\n+        return Constants.wdtx;\n     }\n \n     //-----------------------------------------------------------------------\n      * @return a formatter for yyyyMMdd\n      */\n     public static DateTimeFormatter basicDate() {\n-        if (bd == null) {\n-            bd = new DateTimeFormatterBuilder()\n-                .appendYear(4, 4)\n-                .appendFixedDecimal(DateTimeFieldType.monthOfYear(), 2)\n-                .appendFixedDecimal(DateTimeFieldType.dayOfMonth(), 2)\n-                .toFormatter();\n-        }\n-        return bd;\n+        return Constants.bd;\n     }\n \n     /**\n      * @return a formatter for HHmmss.SSSZ\n      */\n     public static DateTimeFormatter basicTime() {\n-        if (bt == null) {\n-            bt = new DateTimeFormatterBuilder()\n-                .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)\n-                .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)\n-                .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)\n-                .appendLiteral('.')\n-                .appendFractionOfSecond(3, 9)\n-                .appendTimeZoneOffset(\"Z\", false, 2, 2)\n-                .toFormatter();\n-        }\n-        return bt;\n+        return Constants.bt;\n     }\n \n     /**\n      * @return a formatter for HHmmssZ\n      */\n     public static DateTimeFormatter basicTimeNoMillis() {\n-        if (btx == null) {\n-            btx = new DateTimeFormatterBuilder()\n-                .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)\n-                .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)\n-                .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)\n-                .appendTimeZoneOffset(\"Z\", false, 2, 2)\n-                .toFormatter();\n-        }\n-        return btx;\n+        return Constants.btx;\n     }\n \n     /**\n      * @return a formatter for 'T'HHmmss.SSSZ\n      */\n     public static DateTimeFormatter basicTTime() {\n-        if (btt == null) {\n-            btt = new DateTimeFormatterBuilder()\n-                .append(literalTElement())\n-                .append(basicTime())\n-                .toFormatter();\n-        }\n-        return btt;\n+        return Constants.btt;\n     }\n \n     /**\n      * @return a formatter for 'T'HHmmssZ\n      */\n     public static DateTimeFormatter basicTTimeNoMillis() {\n-        if (bttx == null) {\n-            bttx = new DateTimeFormatterBuilder()\n-                .append(literalTElement())\n-                .append(basicTimeNoMillis())\n-                .toFormatter();\n-        }\n-        return bttx;\n+        return Constants.bttx;\n     }\n \n     /**\n      * @return a formatter for yyyyMMdd'T'HHmmss.SSSZ\n      */\n     public static DateTimeFormatter basicDateTime() {\n-        if (bdt == null) {\n-            bdt = new DateTimeFormatterBuilder()\n-                .append(basicDate())\n-                .append(basicTTime())\n-                .toFormatter();\n-        }\n-        return bdt;\n+        return Constants.bdt;\n     }\n \n     /**\n      * @return a formatter for yyyyMMdd'T'HHmmssZ\n      */\n     public static DateTimeFormatter basicDateTimeNoMillis() {\n-        if (bdtx == null) {\n-            bdtx = new DateTimeFormatterBuilder()\n-                .append(basicDate())\n-                .append(basicTTimeNoMillis())\n-                .toFormatter();\n-        }\n-        return bdtx;\n+        return Constants.bdtx;\n     }\n \n     /**\n      * @since 1.1\n      */\n     public static DateTimeFormatter basicOrdinalDate() {\n-        if (bod == null) {\n-            bod = new DateTimeFormatterBuilder()\n-                .appendYear(4, 4)\n-                .appendFixedDecimal(DateTimeFieldType.dayOfYear(), 3)\n-                .toFormatter();\n-        }\n-        return bod;\n+        return Constants.bod;\n     }\n \n     /**\n      * @since 1.1\n      */\n     public static DateTimeFormatter basicOrdinalDateTime() {\n-        if (bodt == null) {\n-            bodt = new DateTimeFormatterBuilder()\n-                .append(basicOrdinalDate())\n-                .append(basicTTime())\n-                .toFormatter();\n-        }\n-        return bodt;\n+        return Constants.bodt;\n     }\n \n     /**\n      * @since 1.1\n      */\n     public static DateTimeFormatter basicOrdinalDateTimeNoMillis() {\n-        if (bodtx == null) {\n-            bodtx = new DateTimeFormatterBuilder()\n-                .append(basicOrdinalDate())\n-                .append(basicTTimeNoMillis())\n-                .toFormatter();\n-        }\n-        return bodtx;\n+        return Constants.bodtx;\n     }\n \n     /**\n      * @return a formatter for xxxx'W'wwe\n      */\n     public static DateTimeFormatter basicWeekDate() {\n-        if (bwd == null) {\n-            bwd = new DateTimeFormatterBuilder()\n-                .appendWeekyear(4, 4)\n-                .appendLiteral('W')\n-                .appendFixedDecimal(DateTimeFieldType.weekOfWeekyear(), 2)\n-                .appendFixedDecimal(DateTimeFieldType.dayOfWeek(), 1)\n-                .toFormatter();\n-        }\n-        return bwd;\n+        return Constants.bwd;\n     }\n \n     /**\n      * @return a formatter for xxxx'W'wwe'T'HHmmss.SSSZ\n      */\n     public static DateTimeFormatter basicWeekDateTime() {\n-        if (bwdt == null) {\n-            bwdt = new DateTimeFormatterBuilder()\n-                .append(basicWeekDate())\n-                .append(basicTTime())\n-                .toFormatter();\n-        }\n-        return bwdt;\n+        return Constants.bwdt;\n     }\n \n     /**\n      * @return a formatter for xxxx'W'wwe'T'HHmmssZ\n      */\n     public static DateTimeFormatter basicWeekDateTimeNoMillis() {\n-        if (bwdtx == null) {\n-            bwdtx = new DateTimeFormatterBuilder()\n-                .append(basicWeekDate())\n-                .append(basicTTimeNoMillis())\n-                .toFormatter();\n-        }\n-        return bwdtx;\n+        return Constants.bwdtx;\n     }\n \n     //-----------------------------------------------------------------------\n      * @return a formatter for yyyy\n      */\n     public static DateTimeFormatter year() {\n-        return yearElement();\n+        return Constants.ye;\n     }\n \n     /**\n      * @return a formatter for yyyy-MM\n      */\n     public static DateTimeFormatter yearMonth() {\n-        if (ym == null) {\n-            ym = new DateTimeFormatterBuilder()\n-                .append(yearElement())\n-                .append(monthElement())\n-                .toFormatter();\n-        }\n-        return ym;\n+        return Constants.ym;\n     }\n \n     /**\n      * @return a formatter for yyyy-MM-dd\n      */\n     public static DateTimeFormatter yearMonthDay() {\n-        if (ymd == null) {\n-            ymd = new DateTimeFormatterBuilder()\n-                .append(yearElement())\n-                .append(monthElement())\n-                .append(dayOfMonthElement())\n-                .toFormatter();\n-        }\n-        return ymd;\n+        return Constants.ymd;\n     }\n \n     /**\n      * @return a formatter for xxxx\n      */\n     public static DateTimeFormatter weekyear() {\n-        return weekyearElement();\n+        return Constants.we;\n     }\n \n     /**\n      * @return a formatter for xxxx-'W'ww\n      */\n     public static DateTimeFormatter weekyearWeek() {\n-        if (ww == null) {\n-            ww = new DateTimeFormatterBuilder()\n-                .append(weekyearElement())\n-                .append(weekElement())\n-                .toFormatter();\n-        }\n-        return ww;\n+        return Constants.ww;\n     }\n \n     /**\n      * @return a formatter for xxxx-'W'ww-e\n      */\n     public static DateTimeFormatter weekyearWeekDay() {\n-        if (wwd == null) {\n-            wwd = new DateTimeFormatterBuilder()\n-                .append(weekyearElement())\n-                .append(weekElement())\n-                .append(dayOfWeekElement())\n-                .toFormatter();\n-        }\n-        return wwd;\n+        return Constants.wwd;\n     }\n \n     /**\n      * @return a formatter for HH\n      */\n     public static DateTimeFormatter hour() {\n-        return hourElement();\n+        return Constants.hde;\n     }\n \n     /**\n      * @return a formatter for HH:mm\n      */\n     public static DateTimeFormatter hourMinute() {\n-        if (hm == null) {\n-            hm = new DateTimeFormatterBuilder()\n-                .append(hourElement())\n-                .append(minuteElement())\n-                .toFormatter();\n-        }\n-        return hm;\n+        return Constants.hm;\n     }\n \n     /**\n      * @return a formatter for HH:mm:ss\n      */\n     public static DateTimeFormatter hourMinuteSecond() {\n-        if (hms == null) {\n-            hms = new DateTimeFormatterBuilder()\n-                .append(hourElement())\n-                .append(minuteElement())\n-                .append(secondElement())\n-                .toFormatter();\n-        }\n-        return hms;\n+        return Constants.hms;\n     }\n \n     /**\n      * @return a formatter for HH:mm:ss.SSS\n      */\n     public static DateTimeFormatter hourMinuteSecondMillis() {\n-        if (hmsl == null) {\n-            hmsl = new DateTimeFormatterBuilder()\n-                .append(hourElement())\n-                .append(minuteElement())\n-                .append(secondElement())\n-                .appendLiteral('.')\n-                .appendFractionOfSecond(3, 3)\n-                .toFormatter();\n-        }\n-        return hmsl;\n+        return Constants.hmsl;\n     }\n \n     /**\n      * @return a formatter for HH:mm:ss.SSS\n      */\n     public static DateTimeFormatter hourMinuteSecondFraction() {\n-        if (hmsf == null) {\n-            hmsf = new DateTimeFormatterBuilder()\n-                .append(hourElement())\n-                .append(minuteElement())\n-                .append(secondElement())\n-                .append(fractionElement())\n-                .toFormatter();\n-        }\n-        return hmsf;\n+        return Constants.hmsf;\n     }\n \n     /**\n      * @return a formatter for yyyy-MM-dd'T'HH\n      */\n     public static DateTimeFormatter dateHour() {\n-        if (dh == null) {\n-            dh = new DateTimeFormatterBuilder()\n-                .append(date())\n-                .append(literalTElement())\n-                .append(hour())\n-                .toFormatter();\n-        }\n-        return dh;\n+        return Constants.dh;\n     }\n \n     /**\n      * @return a formatter for yyyy-MM-dd'T'HH:mm\n      */\n     public static DateTimeFormatter dateHourMinute() {\n-        if (dhm == null) {\n-            dhm = new DateTimeFormatterBuilder()\n-                .append(date())\n-                .append(literalTElement())\n-                .append(hourMinute())\n-                .toFormatter();\n-        }\n-        return dhm;\n+        return Constants.dhm;\n     }\n \n     /**\n      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss\n      */\n     public static DateTimeFormatter dateHourMinuteSecond() {\n-        if (dhms == null) {\n-            dhms = new DateTimeFormatterBuilder()\n-                .append(date())\n-                .append(literalTElement())\n-                .append(hourMinuteSecond())\n-                .toFormatter();\n-        }\n-        return dhms;\n+        return Constants.dhms;\n     }\n \n     /**\n      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS\n      */\n     public static DateTimeFormatter dateHourMinuteSecondMillis() {\n-        if (dhmsl == null) {\n-            dhmsl = new DateTimeFormatterBuilder()\n-                .append(date())\n-                .append(literalTElement())\n-                .append(hourMinuteSecondMillis())\n-                .toFormatter();\n-        }\n-        return dhmsl;\n+        return Constants.dhmsl;\n     }\n \n     /**\n      * @return a formatter for yyyy-MM-dd'T'HH:mm:ss.SSS\n      */\n     public static DateTimeFormatter dateHourMinuteSecondFraction() {\n-        if (dhmsf == null) {\n-            dhmsf = new DateTimeFormatterBuilder()\n-                .append(date())\n-                .append(literalTElement())\n-                .append(hourMinuteSecondFraction())\n-                .toFormatter();\n-        }\n-        return dhmsf;\n+        return Constants.dhmsf;\n     }\n \n     //-----------------------------------------------------------------------\n-    private static DateTimeFormatter yearElement() {\n-        if (ye == null) {\n-            ye = new DateTimeFormatterBuilder()\n-                .appendYear(4, 9)\n-                .toFormatter();\n-        }\n-        return ye;\n-    }\n-\n-    private static DateTimeFormatter monthElement() {\n-        if (mye == null) {\n-            mye = new DateTimeFormatterBuilder()\n-                .appendLiteral('-')\n-                .appendMonthOfYear(2)\n-                .toFormatter();\n-        }\n-        return mye;\n-    }\n-\n-    private static DateTimeFormatter dayOfMonthElement() {\n-        if (dme == null) {\n-            dme = new DateTimeFormatterBuilder()\n-                .appendLiteral('-')\n-                .appendDayOfMonth(2)\n-                .toFormatter();\n-        }\n-        return dme;\n-    }\n-\n-    private static DateTimeFormatter weekyearElement() {\n-        if (we == null) {\n-            we = new DateTimeFormatterBuilder()\n-                .appendWeekyear(4, 9)\n-                .toFormatter();\n-        }\n-        return we;\n-    }\n-\n-    private static DateTimeFormatter weekElement() {\n-        if (wwe == null) {\n-            wwe = new DateTimeFormatterBuilder()\n-                .appendLiteral(\"-W\")\n-                .appendWeekOfWeekyear(2)\n-                .toFormatter();\n-        }\n-        return wwe;\n-    }\n-\n-    private static DateTimeFormatter dayOfWeekElement() {\n-        if (dwe == null) {\n-            dwe = new DateTimeFormatterBuilder()\n-                .appendLiteral('-')\n-                .appendDayOfWeek(1)\n-                .toFormatter();\n-        }\n-        return dwe;\n-    }\n-\n-    private static DateTimeFormatter dayOfYearElement() {\n-        if (dye == null) {\n-            dye = new DateTimeFormatterBuilder()\n-                .appendLiteral('-')\n-                .appendDayOfYear(3)\n-                .toFormatter();\n-        }\n-        return dye;\n-    }\n+    static final class Constants {\n+        private static final DateTimeFormatter\n+            ye = yearElement(),  // year element (yyyy)\n+            mye = monthElement(), // monthOfYear element (-MM)\n+            dme = dayOfMonthElement(), // dayOfMonth element (-dd)\n+            we = weekyearElement(),  // weekyear element (xxxx)\n+            wwe = weekElement(), // weekOfWeekyear element (-ww)\n+            dwe = dayOfWeekElement(), // dayOfWeek element (-ee)\n+            dye = dayOfYearElement(), // dayOfYear element (-DDD)\n+            hde = hourElement(), // hourOfDay element (HH)\n+            mhe = minuteElement(), // minuteOfHour element (:mm)\n+            sme = secondElement(), // secondOfMinute element (:ss)\n+            fse = fractionElement(), // fractionOfSecond element (.SSSSSSSSS)\n+            ze = offsetElement(),  // zone offset element\n+            lte = literalTElement(), // literal 'T' element\n+            \n+            //y,   // year (same as year element)\n+            ym = yearMonth(),  // year month\n+            ymd = yearMonthDay(), // year month day\n+\n+            //w,   // weekyear (same as weekyear element)\n+            ww = weekyearWeek(),  // weekyear week\n+            wwd = weekyearWeekDay(), // weekyear week day\n+\n+            //h,    // hour (same as hour element)\n+            hm = hourMinute(),   // hour minute\n+            hms = hourMinuteSecond(),  // hour minute second\n+            hmsl = hourMinuteSecondMillis(), // hour minute second millis\n+            hmsf = hourMinuteSecondFraction(), // hour minute second fraction\n+\n+            dh = dateHour(),    // date hour\n+            dhm = dateHourMinute(),   // date hour minute\n+            dhms = dateHourMinuteSecond(),  // date hour minute second\n+            dhmsl = dateHourMinuteSecondMillis(), // date hour minute second millis\n+            dhmsf = dateHourMinuteSecondFraction(), // date hour minute second fraction\n+\n+            //d,  // date (same as ymd)\n+            t = time(),  // time\n+            tx = timeNoMillis(),  // time no millis\n+            tt = tTime(),  // Ttime\n+            ttx = tTimeNoMillis(),  // Ttime no millis\n+            dt = dateTime(), // date time\n+            dtx = dateTimeNoMillis(), // date time no millis\n+\n+            //wd,  // week date (same as wwd)\n+            wdt = weekDateTime(), // week date time\n+            wdtx = weekDateTimeNoMillis(), // week date time no millis\n+\n+            od = ordinalDate(),  // ordinal date (same as yd)\n+            odt = ordinalDateTime(), // ordinal date time\n+            odtx = ordinalDateTimeNoMillis(), // ordinal date time no millis\n+\n+            bd = basicDate(),  // basic date\n+            bt = basicTime(),  // basic time\n+            btx = basicTimeNoMillis(),  // basic time no millis\n+            btt = basicTTime(), // basic Ttime\n+            bttx = basicTTimeNoMillis(), // basic Ttime no millis\n+            bdt = basicDateTime(), // basic date time\n+            bdtx = basicDateTimeNoMillis(), // basic date time no millis\n+\n+            bod = basicOrdinalDate(),  // basic ordinal date\n+            bodt = basicOrdinalDateTime(), // basic ordinal date time\n+            bodtx = basicOrdinalDateTimeNoMillis(), // basic ordinal date time no millis\n+\n+            bwd = basicWeekDate(),  // basic week date\n+            bwdt = basicWeekDateTime(), // basic week date time\n+            bwdtx = basicWeekDateTimeNoMillis(), // basic week date time no millis\n+\n+            dpe = dateElementParser(), // date parser element\n+            tpe = timeElementParser(), // time parser element\n+            dp = dateParser(),  // date parser\n+            ldp = localDateParser(), // local date parser\n+            tp = timeParser(),  // time parser\n+            ltp = localTimeParser(), // local time parser\n+            dtp = dateTimeParser(), // date time parser\n+            dotp = dateOptionalTimeParser(), // date optional time parser\n+            ldotp = localDateOptionalTimeParser(); // local date optional time parser\n+\n+        //-----------------------------------------------------------------------\n+        private static DateTimeFormatter dateParser() {\n+            if (dp == null) {\n+                DateTimeParser tOffset = new DateTimeFormatterBuilder()\n+                    .appendLiteral('T')\n+                    .append(offsetElement()).toParser();\n+                return new DateTimeFormatterBuilder()\n+                    .append(dateElementParser())\n+                    .appendOptional(tOffset)\n+                    .toFormatter();\n+            }\n+            return dp;\n+        }\n+\n+        private static DateTimeFormatter localDateParser() {\n+            if (ldp == null) {\n+                return dateElementParser().withZoneUTC();\n+            }\n+            return ldp;\n+        }\n+\n+        private static DateTimeFormatter dateElementParser() {\n+            if (dpe == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(null, new DateTimeParser[] {\n+                        new DateTimeFormatterBuilder()\n+                        .append(yearElement())\n+                        .appendOptional\n+                        (new DateTimeFormatterBuilder()\n+                         .append(monthElement())\n+                         .appendOptional(dayOfMonthElement().getParser())\n+                         .toParser())\n+                        .toParser(),\n+                        new DateTimeFormatterBuilder()\n+                        .append(weekyearElement())\n+                        .append(weekElement())\n+                        .appendOptional(dayOfWeekElement().getParser())\n+                        .toParser(),\n+                        new DateTimeFormatterBuilder()\n+                        .append(yearElement())\n+                        .append(dayOfYearElement())\n+                        .toParser()\n+                    })\n+                    .toFormatter();\n+            }\n+            return dpe;\n+        }\n+\n+        private static DateTimeFormatter timeParser() {\n+            if (tp == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendOptional(literalTElement().getParser())\n+                    .append(timeElementParser())\n+                    .appendOptional(offsetElement().getParser())\n+                    .toFormatter();\n+            }\n+            return tp;\n+        }\n+\n+        private static DateTimeFormatter localTimeParser() {\n+            if (ltp == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendOptional(literalTElement().getParser())\n+                    .append(timeElementParser())\n+                    .toFormatter().withZoneUTC();\n+            }\n+            return ltp;\n+        }\n+\n+        private static DateTimeFormatter timeElementParser() {\n+            if (tpe == null) {\n+                // Decimal point can be either '.' or ','\n+                DateTimeParser decimalPoint = new DateTimeFormatterBuilder()\n+                    .append(null, new DateTimeParser[] {\n+                        new DateTimeFormatterBuilder()\n+                        .appendLiteral('.')\n+                        .toParser(),\n+                        new DateTimeFormatterBuilder()\n+                        .appendLiteral(',')\n+                        .toParser()\n+                    })\n+                    .toParser();\n+\n+                return new DateTimeFormatterBuilder()\n+                    // time-element\n+                    .append(hourElement())\n+                    .append\n+                    (null, new DateTimeParser[] {\n+                        new DateTimeFormatterBuilder()\n+                        // minute-element\n+                        .append(minuteElement())\n+                        .append\n+                        (null, new DateTimeParser[] {\n+                            new DateTimeFormatterBuilder()\n+                            // second-element\n+                            .append(secondElement())\n+                            // second fraction\n+                            .appendOptional(new DateTimeFormatterBuilder()\n+                                            .append(decimalPoint)\n+                                            .appendFractionOfSecond(1, 9)\n+                                            .toParser())\n+                            .toParser(),\n+                            // minute fraction\n+                            new DateTimeFormatterBuilder()\n+                            .append(decimalPoint)\n+                            .appendFractionOfMinute(1, 9)\n+                            .toParser(),\n+                            null\n+                        })\n+                        .toParser(),\n+                        // hour fraction\n+                        new DateTimeFormatterBuilder()\n+                        .append(decimalPoint)\n+                        .appendFractionOfHour(1, 9)\n+                        .toParser(),\n+                        null\n+                    })\n+                    .toFormatter();\n+            }\n+            return tpe;\n+        }\n+\n+        private static DateTimeFormatter dateTimeParser() {\n+            if (dtp == null) {\n+                // This is different from the general time parser in that the 'T'\n+                // is required.\n+                DateTimeParser time = new DateTimeFormatterBuilder()\n+                    .appendLiteral('T')\n+                    .append(timeElementParser())\n+                    .appendOptional(offsetElement().getParser())\n+                    .toParser();\n+                return new DateTimeFormatterBuilder()\n+                    .append(null, new DateTimeParser[] {time, dateOptionalTimeParser().getParser()})\n+                    .toFormatter();\n+            }\n+            return dtp;\n+        }\n+\n+        private static DateTimeFormatter dateOptionalTimeParser() {\n+            if (dotp == null) {\n+                DateTimeParser timeOrOffset = new DateTimeFormatterBuilder()\n+                    .appendLiteral('T')\n+                    .appendOptional(timeElementParser().getParser())\n+                    .appendOptional(offsetElement().getParser())\n+                    .toParser();\n+                return new DateTimeFormatterBuilder()\n+                    .append(dateElementParser())\n+                    .appendOptional(timeOrOffset)\n+                    .toFormatter();\n+            }\n+            return dotp;\n+        }\n+\n+        private static DateTimeFormatter localDateOptionalTimeParser() {\n+            if (ldotp == null) {\n+                DateTimeParser time = new DateTimeFormatterBuilder()\n+                    .appendLiteral('T')\n+                    .append(timeElementParser())\n+                    .toParser();\n+                return new DateTimeFormatterBuilder()\n+                    .append(dateElementParser())\n+                    .appendOptional(time)\n+                    .toFormatter().withZoneUTC();\n+            }\n+            return ldotp;\n+        }\n+\n+        //-----------------------------------------------------------------------\n+        private static DateTimeFormatter time() {\n+            if (t == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(hourMinuteSecondFraction())\n+                    .append(offsetElement())\n+                    .toFormatter();\n+            }\n+            return t;\n+        }\n+\n+        private static DateTimeFormatter timeNoMillis() {\n+            if (tx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(hourMinuteSecond())\n+                    .append(offsetElement())\n+                    .toFormatter();\n+            }\n+            return tx;\n+        }\n+\n+        private static DateTimeFormatter tTime() {\n+            if (tt == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(literalTElement())\n+                    .append(time())\n+                    .toFormatter();\n+            }\n+            return tt;\n+        }\n+\n+        private static DateTimeFormatter tTimeNoMillis() {\n+            if (ttx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(literalTElement())\n+                    .append(timeNoMillis())\n+                    .toFormatter();\n+            }\n+            return ttx;\n+        }\n+\n+        private static DateTimeFormatter dateTime() {\n+            if (dt == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(date())\n+                    .append(tTime())\n+                    .toFormatter();\n+            }\n+            return dt;\n+        }\n+\n+        private static DateTimeFormatter dateTimeNoMillis() {\n+            if (dtx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(date())\n+                    .append(tTimeNoMillis())\n+                    .toFormatter();\n+            }\n+            return dtx;\n+        }\n+\n+        private static DateTimeFormatter ordinalDate() {\n+            if (od == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(yearElement())\n+                    .append(dayOfYearElement())\n+                    .toFormatter();\n+            }\n+            return od;\n+        }\n+\n+        private static DateTimeFormatter ordinalDateTime() {\n+            if (odt == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(ordinalDate())\n+                    .append(tTime())\n+                    .toFormatter();\n+            }\n+            return odt;\n+        }\n+\n+        private static DateTimeFormatter ordinalDateTimeNoMillis() {\n+            if (odtx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(ordinalDate())\n+                    .append(tTimeNoMillis())\n+                    .toFormatter();\n+            }\n+            return odtx;\n+        }\n+\n+        private static DateTimeFormatter weekDateTime() {\n+            if (wdt == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(weekDate())\n+                    .append(tTime())\n+                    .toFormatter();\n+            }\n+            return wdt;\n+        }\n+\n+        private static DateTimeFormatter weekDateTimeNoMillis() {\n+            if (wdtx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(weekDate())\n+                    .append(tTimeNoMillis())\n+                    .toFormatter();\n+            }\n+            return wdtx;\n+        }\n+\n+        //-----------------------------------------------------------------------\n+        private static DateTimeFormatter basicDate() {\n+            if (bd == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendYear(4, 4)\n+                    .appendFixedDecimal(DateTimeFieldType.monthOfYear(), 2)\n+                    .appendFixedDecimal(DateTimeFieldType.dayOfMonth(), 2)\n+                    .toFormatter();\n+            }\n+            return bd;\n+        }\n+\n+        private static DateTimeFormatter basicTime() {\n+            if (bt == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)\n+                    .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)\n+                    .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)\n+                    .appendLiteral('.')\n+                    .appendFractionOfSecond(3, 9)\n+                    .appendTimeZoneOffset(\"Z\", false, 2, 2)\n+                    .toFormatter();\n+            }\n+            return bt;\n+        }\n+\n+        private static DateTimeFormatter basicTimeNoMillis() {\n+            if (btx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendFixedDecimal(DateTimeFieldType.hourOfDay(), 2)\n+                    .appendFixedDecimal(DateTimeFieldType.minuteOfHour(), 2)\n+                    .appendFixedDecimal(DateTimeFieldType.secondOfMinute(), 2)\n+                    .appendTimeZoneOffset(\"Z\", false, 2, 2)\n+                    .toFormatter();\n+            }\n+            return btx;\n+        }\n+\n+        private static DateTimeFormatter basicTTime() {\n+            if (btt == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(literalTElement())\n+                    .append(basicTime())\n+                    .toFormatter();\n+            }\n+            return btt;\n+        }\n+\n+        private static DateTimeFormatter basicTTimeNoMillis() {\n+            if (bttx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(literalTElement())\n+                    .append(basicTimeNoMillis())\n+                    .toFormatter();\n+            }\n+            return bttx;\n+        }\n+\n+        private static DateTimeFormatter basicDateTime() {\n+            if (bdt == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(basicDate())\n+                    .append(basicTTime())\n+                    .toFormatter();\n+            }\n+            return bdt;\n+        }\n+\n+        private static DateTimeFormatter basicDateTimeNoMillis() {\n+            if (bdtx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(basicDate())\n+                    .append(basicTTimeNoMillis())\n+                    .toFormatter();\n+            }\n+            return bdtx;\n+        }\n+\n+        private static DateTimeFormatter basicOrdinalDate() {\n+            if (bod == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendYear(4, 4)\n+                    .appendFixedDecimal(DateTimeFieldType.dayOfYear(), 3)\n+                    .toFormatter();\n+            }\n+            return bod;\n+        }\n+\n+        private static DateTimeFormatter basicOrdinalDateTime() {\n+            if (bodt == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(basicOrdinalDate())\n+                    .append(basicTTime())\n+                    .toFormatter();\n+            }\n+            return bodt;\n+        }\n+\n+        private static DateTimeFormatter basicOrdinalDateTimeNoMillis() {\n+            if (bodtx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(basicOrdinalDate())\n+                    .append(basicTTimeNoMillis())\n+                    .toFormatter();\n+            }\n+            return bodtx;\n+        }\n+\n+        private static DateTimeFormatter basicWeekDate() {\n+            if (bwd == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendWeekyear(4, 4)\n+                    .appendLiteral('W')\n+                    .appendFixedDecimal(DateTimeFieldType.weekOfWeekyear(), 2)\n+                    .appendFixedDecimal(DateTimeFieldType.dayOfWeek(), 1)\n+                    .toFormatter();\n+            }\n+            return bwd;\n+        }\n+\n+        private static DateTimeFormatter basicWeekDateTime() {\n+            if (bwdt == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(basicWeekDate())\n+                    .append(basicTTime())\n+                    .toFormatter();\n+            }\n+            return bwdt;\n+        }\n+\n+        private static DateTimeFormatter basicWeekDateTimeNoMillis() {\n+            if (bwdtx == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(basicWeekDate())\n+                    .append(basicTTimeNoMillis())\n+                    .toFormatter();\n+            }\n+            return bwdtx;\n+        }\n+\n+        //-----------------------------------------------------------------------\n+        private static DateTimeFormatter yearMonth() {\n+            if (ym == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(yearElement())\n+                    .append(monthElement())\n+                    .toFormatter();\n+            }\n+            return ym;\n+        }\n+\n+        private static DateTimeFormatter yearMonthDay() {\n+            if (ymd == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(yearElement())\n+                    .append(monthElement())\n+                    .append(dayOfMonthElement())\n+                    .toFormatter();\n+            }\n+            return ymd;\n+        }\n+\n+        private static DateTimeFormatter weekyearWeek() {\n+            if (ww == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(weekyearElement())\n+                    .append(weekElement())\n+                    .toFormatter();\n+            }\n+            return ww;\n+        }\n+\n+        private static DateTimeFormatter weekyearWeekDay() {\n+            if (wwd == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(weekyearElement())\n+                    .append(weekElement())\n+                    .append(dayOfWeekElement())\n+                    .toFormatter();\n+            }\n+            return wwd;\n+        }\n+\n+        private static DateTimeFormatter hourMinute() {\n+            if (hm == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(hourElement())\n+                    .append(minuteElement())\n+                    .toFormatter();\n+            }\n+            return hm;\n+        }\n+\n+        private static DateTimeFormatter hourMinuteSecond() {\n+            if (hms == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(hourElement())\n+                    .append(minuteElement())\n+                    .append(secondElement())\n+                    .toFormatter();\n+            }\n+            return hms;\n+        }\n+\n+        private static DateTimeFormatter hourMinuteSecondMillis() {\n+            if (hmsl == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(hourElement())\n+                    .append(minuteElement())\n+                    .append(secondElement())\n+                    .appendLiteral('.')\n+                    .appendFractionOfSecond(3, 3)\n+                    .toFormatter();\n+            }\n+            return hmsl;\n+        }\n+\n+        private static DateTimeFormatter hourMinuteSecondFraction() {\n+            if (hmsf == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(hourElement())\n+                    .append(minuteElement())\n+                    .append(secondElement())\n+                    .append(fractionElement())\n+                    .toFormatter();\n+            }\n+            return hmsf;\n+        }\n+\n+        private static DateTimeFormatter dateHour() {\n+            if (dh == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(date())\n+                    .append(literalTElement())\n+                    .append(hour())\n+                    .toFormatter();\n+            }\n+            return dh;\n+        }\n+\n+        private static DateTimeFormatter dateHourMinute() {\n+            if (dhm == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(date())\n+                    .append(literalTElement())\n+                    .append(hourMinute())\n+                    .toFormatter();\n+            }\n+            return dhm;\n+        }\n+\n+        private static DateTimeFormatter dateHourMinuteSecond() {\n+            if (dhms == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(date())\n+                    .append(literalTElement())\n+                    .append(hourMinuteSecond())\n+                    .toFormatter();\n+            }\n+            return dhms;\n+        }\n+\n+        private static DateTimeFormatter dateHourMinuteSecondMillis() {\n+            if (dhmsl == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(date())\n+                    .append(literalTElement())\n+                    .append(hourMinuteSecondMillis())\n+                    .toFormatter();\n+            }\n+            return dhmsl;\n+        }\n+\n+        private static DateTimeFormatter dateHourMinuteSecondFraction() {\n+            if (dhmsf == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .append(date())\n+                    .append(literalTElement())\n+                    .append(hourMinuteSecondFraction())\n+                    .toFormatter();\n+            }\n+            return dhmsf;\n+        }\n+\n+        //-----------------------------------------------------------------------\n+        private static DateTimeFormatter yearElement() {\n+            if (ye == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendYear(4, 9)\n+                    .toFormatter();\n+            }\n+            return ye;\n+        }\n     \n-    private static DateTimeFormatter literalTElement() {\n-        if (lte == null) {\n-            lte = new DateTimeFormatterBuilder()\n-                .appendLiteral('T')\n-                .toFormatter();\n-        }\n-        return lte;\n-    }\n-\n-    private static DateTimeFormatter hourElement() {\n-        if (hde == null) {\n-            hde = new DateTimeFormatterBuilder()\n-                .appendHourOfDay(2)\n-                .toFormatter();\n-        }\n-        return hde;\n-    }\n-\n-    private static DateTimeFormatter minuteElement() {\n-        if (mhe == null) {\n-            mhe = new DateTimeFormatterBuilder()\n-                .appendLiteral(':')\n-                .appendMinuteOfHour(2)\n-                .toFormatter();\n-        }\n-        return mhe;\n-    }\n-\n-    private static DateTimeFormatter secondElement() {\n-        if (sme == null) {\n-            sme = new DateTimeFormatterBuilder()\n-                .appendLiteral(':')\n-                .appendSecondOfMinute(2)\n-                .toFormatter();\n-        }\n-        return sme;\n-    }\n-\n-    private static DateTimeFormatter fractionElement() {\n-        if (fse == null) {\n-            fse = new DateTimeFormatterBuilder()\n-                .appendLiteral('.')\n-                // Support parsing up to nanosecond precision even though\n-                // those extra digits will be dropped.\n-                .appendFractionOfSecond(3, 9)\n-                .toFormatter();\n-        }\n-        return fse;\n-    }\n-\n-    private static DateTimeFormatter offsetElement() {\n-        if (ze == null) {\n-            ze = new DateTimeFormatterBuilder()\n-                .appendTimeZoneOffset(\"Z\", true, 2, 4)\n-                .toFormatter();\n-        }\n-        return ze;\n+        private static DateTimeFormatter monthElement() {\n+            if (mye == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendLiteral('-')\n+                    .appendMonthOfYear(2)\n+                    .toFormatter();\n+            }\n+            return mye;\n+        }\n+    \n+        private static DateTimeFormatter dayOfMonthElement() {\n+            if (dme == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendLiteral('-')\n+                    .appendDayOfMonth(2)\n+                    .toFormatter();\n+            }\n+            return dme;\n+        }\n+    \n+        private static DateTimeFormatter weekyearElement() {\n+            if (we == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendWeekyear(4, 9)\n+                    .toFormatter();\n+            }\n+            return we;\n+        }\n+    \n+        private static DateTimeFormatter weekElement() {\n+            if (wwe == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendLiteral(\"-W\")\n+                    .appendWeekOfWeekyear(2)\n+                    .toFormatter();\n+            }\n+            return wwe;\n+        }\n+    \n+        private static DateTimeFormatter dayOfWeekElement() {\n+            if (dwe == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendLiteral('-')\n+                    .appendDayOfWeek(1)\n+                    .toFormatter();\n+            }\n+            return dwe;\n+        }\n+    \n+        private static DateTimeFormatter dayOfYearElement() {\n+            if (dye == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendLiteral('-')\n+                    .appendDayOfYear(3)\n+                    .toFormatter();\n+            }\n+            return dye;\n+        }\n+        \n+        private static DateTimeFormatter literalTElement() {\n+            if (lte == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendLiteral('T')\n+                    .toFormatter();\n+            }\n+            return lte;\n+        }\n+    \n+        private static DateTimeFormatter hourElement() {\n+            if (hde == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendHourOfDay(2)\n+                    .toFormatter();\n+            }\n+            return hde;\n+        }\n+    \n+        private static DateTimeFormatter minuteElement() {\n+            if (mhe == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendLiteral(':')\n+                    .appendMinuteOfHour(2)\n+                    .toFormatter();\n+            }\n+            return mhe;\n+        }\n+    \n+        private static DateTimeFormatter secondElement() {\n+            if (sme == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendLiteral(':')\n+                    .appendSecondOfMinute(2)\n+                    .toFormatter();\n+            }\n+            return sme;\n+        }\n+    \n+        private static DateTimeFormatter fractionElement() {\n+            if (fse == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendLiteral('.')\n+                    // Support parsing up to nanosecond precision even though\n+                    // those extra digits will be dropped.\n+                    .appendFractionOfSecond(3, 9)\n+                    .toFormatter();\n+            }\n+            return fse;\n+        }\n+    \n+        private static DateTimeFormatter offsetElement() {\n+            if (ze == null) {\n+                return new DateTimeFormatterBuilder()\n+                    .appendTimeZoneOffset(\"Z\", true, 2, 4)\n+                    .toFormatter();\n+            }\n+            return ze;\n+        }\n+\n     }\n \n }", "timestamp": 1375901328, "metainfo": ""}