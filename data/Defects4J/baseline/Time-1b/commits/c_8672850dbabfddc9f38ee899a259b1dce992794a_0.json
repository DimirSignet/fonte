{"sha": "8672850dbabfddc9f38ee899a259b1dce992794a", "log": "MonthDay and YearMonth should have stricter default parsing  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/MonthDay.java\n+++ b/JodaTime/src/main/java/org/joda/time/MonthDay.java\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.\n      * <p>\n      * The chronology used will be derived from the object, defaulting to ISO.\n      *\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n     public MonthDay(Object instant) {\n-        super(instant, null, ISODateTimeFormat.dateOptionalTimeParser());\n+        super(instant, null, ISODateTimeFormat.localDateParser());\n     }\n \n     /**\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.\n      * <p>\n      * The constructor uses the time zone of the chronology specified.\n      * Once the constructor is complete, all further calculations are performed\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n     public MonthDay(Object instant, Chronology chronology) {\n-        super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.dateOptionalTimeParser());\n+        super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());\n     }\n \n     /**\n--- a/JodaTime/src/main/java/org/joda/time/YearMonth.java\n+++ b/JodaTime/src/main/java/org/joda/time/YearMonth.java\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.\n      * <p>\n      * The chronology used will be derived from the object, defaulting to ISO.\n      *\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n     public YearMonth(Object instant) {\n-        super(instant, null, ISODateTimeFormat.dateOptionalTimeParser());\n+        super(instant, null, ISODateTimeFormat.localDateParser());\n     }\n \n     /**\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadableInstant, String, Calendar and Date.\n-     * The String formats are described by {@link ISODateTimeFormat#dateOptionalTimeParser()}.\n+     * The String formats are described by {@link ISODateTimeFormat#localDateParser()}.\n      * <p>\n      * The constructor uses the time zone of the chronology specified.\n      * Once the constructor is complete, all further calculations are performed\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n     public YearMonth(Object instant, Chronology chronology) {\n-        super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.dateOptionalTimeParser());\n+        super(instant, DateTimeUtils.getChronology(chronology), ISODateTimeFormat.localDateParser());\n     }\n \n     /**\n--- a/JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java\n         assertEquals(1, test.getDayOfMonth());\n     }\n \n-    public void testConstructor_ObjectString2() throws Throwable {\n-        MonthDay test = new MonthDay(\"1972-12-01T+14:00\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(11, test.getMonthOfYear());  // timezone\n-        assertEquals(30, test.getDayOfMonth());\n-    }\n-\n-    public void testConstructor_ObjectString3() throws Throwable {\n-        MonthDay test = new MonthDay(\"1972-12-03T10:20:30.040\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(12, test.getMonthOfYear());\n-        assertEquals(3, test.getDayOfMonth());\n-    }\n-\n-    public void testConstructor_ObjectString4() throws Throwable {\n-        MonthDay test = new MonthDay(\"1972-12-01T10:20:30.040+14:00\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(11, test.getMonthOfYear());  // timezone\n-        assertEquals(30, test.getDayOfMonth());\n-    }\n-\n     public void testConstructor_ObjectString5() throws Throwable {\n         MonthDay test = new MonthDay(\"10\");\n         assertEquals(ISO_UTC, test.getChronology());\n--- a/JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestYearMonth_Constructors.java\n         assertEquals(12, test.getMonthOfYear());\n     }\n \n-    public void testConstructor_ObjectString2() throws Throwable {\n-        YearMonth test = new YearMonth(\"1972-12-01T+14:00\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1972, test.getYear());\n-        assertEquals(11, test.getMonthOfYear());  // timezone\n-    }\n-\n-    public void testConstructor_ObjectString3() throws Throwable {\n-        YearMonth test = new YearMonth(\"1972-12-03T10:20:30.040\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1972, test.getYear());\n-        assertEquals(12, test.getMonthOfYear());\n-    }\n-\n-    public void testConstructor_ObjectString4() throws Throwable {\n-        YearMonth test = new YearMonth(\"1972-12-01T10:20:30.040+14:00\");\n-        assertEquals(ISO_UTC, test.getChronology());\n-        assertEquals(1972, test.getYear());\n-        assertEquals(11, test.getMonthOfYear());  // timezone\n-    }\n-\n     public void testConstructor_ObjectString5() throws Throwable {\n         YearMonth test = new YearMonth(\"10\");\n         assertEquals(ISO_UTC, test.getChronology());", "timestamp": 1289649132, "metainfo": ""}