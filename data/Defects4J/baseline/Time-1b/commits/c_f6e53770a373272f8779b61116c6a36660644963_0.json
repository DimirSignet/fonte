{"sha": "f6e53770a373272f8779b61116c6a36660644963", "log": "Added tests for FieldUtils.   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/field/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/field/TestAll.java\n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n         \n+        suite.addTest(TestFieldUtils.suite());\n+\n         suite.addTest(TestBaseDateTimeField.suite());\n         suite.addTest(TestOffsetDateTimeField.suite());\n         suite.addTest(TestPreciseDurationDateTimeField.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/field/TestFieldUtils.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.field;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * \n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestFieldUtils extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestFieldUtils.class);\n+    }\n+\n+    public TestFieldUtils(String name) {\n+        super(name);\n+    }\n+\n+    public void testSafeAddInt() {\n+        assertEquals(0, FieldUtils.safeAdd(0, 0));\n+\n+        assertEquals(5, FieldUtils.safeAdd(2, 3));\n+        assertEquals(-1, FieldUtils.safeAdd(2, -3));\n+        assertEquals(1, FieldUtils.safeAdd(-2, 3));\n+        assertEquals(-5, FieldUtils.safeAdd(-2, -3));\n+\n+        assertEquals(Integer.MAX_VALUE - 1, FieldUtils.safeAdd(Integer.MAX_VALUE, -1));\n+        assertEquals(Integer.MIN_VALUE + 1, FieldUtils.safeAdd(Integer.MIN_VALUE, 1));\n+\n+        assertEquals(-1, FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MAX_VALUE));\n+        assertEquals(-1, FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MIN_VALUE));\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MAX_VALUE, 1);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MAX_VALUE, 100);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MAX_VALUE, Integer.MAX_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MIN_VALUE, -1);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MIN_VALUE, -100);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Integer.MIN_VALUE, Integer.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n+\n+    public void testSafeAddLong() {\n+        assertEquals(0L, FieldUtils.safeAdd(0L, 0L));\n+\n+        assertEquals(5L, FieldUtils.safeAdd(2L, 3L));\n+        assertEquals(-1L, FieldUtils.safeAdd(2L, -3L));\n+        assertEquals(1L, FieldUtils.safeAdd(-2L, 3L));\n+        assertEquals(-5L, FieldUtils.safeAdd(-2L, -3L));\n+\n+        assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeAdd(Long.MAX_VALUE, -1L));\n+        assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeAdd(Long.MIN_VALUE, 1L));\n+\n+        assertEquals(-1, FieldUtils.safeAdd(Long.MIN_VALUE, Long.MAX_VALUE));\n+        assertEquals(-1, FieldUtils.safeAdd(Long.MAX_VALUE, Long.MIN_VALUE));\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MAX_VALUE, 1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MAX_VALUE, 100L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MAX_VALUE, Long.MAX_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MIN_VALUE, -1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MIN_VALUE, -100L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeAdd(Long.MIN_VALUE, Long.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n+\n+    public void testSafeSubtractLong() {\n+        assertEquals(0L, FieldUtils.safeSubtract(0L, 0L));\n+\n+        assertEquals(-1L, FieldUtils.safeSubtract(2L, 3L));\n+        assertEquals(5L, FieldUtils.safeSubtract(2L, -3L));\n+        assertEquals(-5L, FieldUtils.safeSubtract(-2L, 3L));\n+        assertEquals(1L, FieldUtils.safeSubtract(-2L, -3L));\n+\n+        assertEquals(Long.MAX_VALUE - 1, FieldUtils.safeSubtract(Long.MAX_VALUE, 1L));\n+        assertEquals(Long.MIN_VALUE + 1, FieldUtils.safeSubtract(Long.MIN_VALUE, -1L));\n+\n+        assertEquals(0, FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MIN_VALUE));\n+        assertEquals(0, FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MAX_VALUE));\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MIN_VALUE, 1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MIN_VALUE, 100L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MIN_VALUE, Long.MAX_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MAX_VALUE, -1L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MAX_VALUE, -100L);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+\n+        try {\n+            FieldUtils.safeSubtract(Long.MAX_VALUE, Long.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException e) {\n+        }\n+    }\n+}", "timestamp": 1126117566, "metainfo": ""}