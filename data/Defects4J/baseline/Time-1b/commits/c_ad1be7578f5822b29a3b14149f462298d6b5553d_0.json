{"sha": "ad1be7578f5822b29a3b14149f462298d6b5553d", "log": "Remove deprecated methods for 1.0   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Deprecated, use {@link #forID(String)}.\n-     * \n-     * @deprecated use forID(String)\n-     */\n-    public static DateTimeZone getInstance(String id) {\n-        return forID(id);\n-    }\n-\n-    /**\n-     * Deprecated, use {@link #forOffsetHours(int)}.\n-     * \n-     * @deprecated use forOffsetHours(int)\n-     */\n-    public static DateTimeZone getInstance(int hours) {\n-        return forOffsetHours(hours);\n-    }\n-\n-    /**\n-     * Deprecated, use {@link #forOffsetHoursMinutes(int, int)}.\n-     * \n-     * @deprecated use forOffsetHoursMinutes(int,int)\n-     */\n-    public static DateTimeZone getInstance(int hours, int mins) {\n-        return forOffsetHoursMinutes(hours, mins);\n-    }\n-\n-    /**\n-     * Deprecated, use {@link #forTimeZone(TimeZone)}.\n-     * \n-     * @deprecated use forTimeZone(TimeZone)\n-     */\n-    public static DateTimeZone getInstance(TimeZone jdkZone) {\n-        return forTimeZone(jdkZone);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n      * Gets the zone using a fixed offset amount.\n      * \n      * @param id  the zone id\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Deprecated, use toDateTimeToday.\n-     * \n-     * @deprecated use toDateTimeToday\n-     */\n-    public DateTime toDateTime() {\n-        return toDateTimeToday(null);\n-    }\n-\n-    /**\n-     * Deprecated, use toDateTimeToday.\n-     * \n-     * @deprecated use toDateTimeToday\n-     */\n-    public DateTime toDateTime(DateTimeZone zone) {\n-        return toDateTimeToday(zone);\n-    }\n-\n-    /**\n      * Converts this partial to a full datetime using the default time zone\n      * setting the time fields from this instance and the date fields from\n      * the current time.\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Deprecated, use toDateAtCurrentTime.\n-     * \n-     * @deprecated use toDateAtCurrentTime\n-     */\n-    public DateTime toDateTime() {\n-        return toDateTimeAtCurrentTime(null);\n-    }\n-\n-    /**\n-     * Deprecated, use toDateAtCurrentTime.\n-     * \n-     * @deprecated use toDateAtCurrentTime\n-     */\n-    public DateTime toDateTime(DateTimeZone zone) {\n-        return toDateTimeAtCurrentTime(zone);\n-    }\n-\n-    /**\n      * Converts this partial to a full datetime using the default time zone\n      * setting the date fields from this instance and the time fields from\n      * the current time.\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormat.java\n      */\n     static void appendPatternTo(DateTimeFormatterBuilder builder, String pattern) {\n         parsePatternTo(builder, pattern);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Deprecated, methods on DateTimeFormat are now static.\n-     * \n-     * @deprecated remove this call as the methods are now static\n-     */\n-    public static DateTimeFormat getInstance() {\n-        return new DateTimeFormat();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n         }\n     }\n \n-    /**\n-     * Deprecated, use withZone(zone).printTo(buf, millis).\n-     * \n-     * @deprecated use withZone(zone).printTo(buf, millis)\n-     */\n-    public void print(StringBuffer buf, long millis, DateTimeZone zone) {\n-        withChronology(null).withZone(zone).printTo(buf, millis);\n-    }\n-\n-    /**\n-     * Deprecated, use withChronology(chrono).printTo(buf, millis).\n-     * \n-     * @deprecated use withChronology(chrono).printTo(buf, millis)\n-     */\n-    public void print(StringBuffer buf, long millis, Chronology chrono) {\n-        withZone(null).withChronology(chrono).printTo(buf, millis);\n-    }\n-\n-    /**\n-     * Deprecated, use withZone(zone).printTo(out, millis).\n-     * \n-     * @deprecated use withZone(zone).printTo(out, millis)\n-     */\n-    public void print(Writer out, long millis, DateTimeZone zone) throws IOException {\n-        withChronology(null).withZone(zone).printTo(out, millis);\n-    }\n-\n-    /**\n-     * Deprecated, use withChronology(chrono).printTo(out, millis).\n-     * \n-     * @deprecated use withChronology(chrono).printTo(out, millis)\n-     */\n-    public void print(Writer out, long millis, Chronology chrono) throws IOException {\n-        withZone(null).withChronology(chrono).printTo(out, millis);\n-    }\n-\n-    /**\n-     * Deprecated, use withZone(zone).print(millis).\n-     * \n-     * @deprecated use withZone(zone).print(millis)\n-     */\n-    public String print(long millis, DateTimeZone zone) {\n-        return withChronology(null).withZone(zone).print(millis);\n-    }\n-\n-    /**\n-     * Deprecated, use withChronology(chrono).print(millis).\n-     * \n-     * @deprecated use withChronology(chrono).print(millis)\n-     */\n-    public String print(long millis, Chronology chrono) {\n-        return withZone(null).withChronology(chrono).print(millis);\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Parses a datetime from the given text, at the given position, saving the\n         }\n     }\n \n-    /**\n-     * Deprecated, use withChronology(chrono).parseMillis(str).\n-     * \n-     * @deprecated use withChronology(chrono).parseMillis(str)\n-     */\n-    public long parseMillis(String text, Chronology chrono) {\n-        return withZone(null).withChronology(chrono).parseMillis(text);\n-    }\n-\n-    /**\n-     * Deprecated, use withChronology(chrono).parseDateTime(str).\n-     * \n-     * @deprecated use withChronology(chrono).parseDateTime(str)\n-     */\n-    public DateTime parseDateTime(String text, Chronology chrono) {\n-        return withZone(null).withChronology(chrono).parseDateTime(text);\n-    }\n-\n-    /**\n-     * Deprecated, use withChronology(chrono).parseMutableDateTime(str).\n-     * \n-     * @deprecated use withChronology(chrono).parseMutableDateTime(str)\n-     */\n-    public MutableDateTime parseMutableDateTime(String text, Chronology chrono) {\n-        return withZone(null).withChronology(chrono).parseMutableDateTime(text);\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Determines the correct chronology to use.\n--- a/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISODateTimeFormat.java\n  * @see DateTimeFormatterBuilder\n  */\n public class ISODateTimeFormat {\n-\n-    /** The singleton instance. */\n-    private static final ISODateTimeFormat INSTANCE = new ISODateTimeFormat();\n-\n-    /**\n-     * Deprecated, use static methods instead.\n-     * \n-     * @deprecated remove method call, as methods are now static\n-     */\n-    public static ISODateTimeFormat getInstance() {\n-        return INSTANCE;\n-    }\n \n     //-----------------------------------------------------------------------\n     private static DateTimeFormatter\n--- a/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n  * @see PeriodFormatterBuilder\n  */\n public class ISOPeriodFormat {\n-\n-    /** @deprecated */\n-    private static final ISOPeriodFormat INSTANCE = new ISOPeriodFormat();\n \n     /** Cache of standard format. */\n     private static PeriodFormatter cStandard;\n     private static PeriodFormatter cAlternateExtendedWihWeeks;\n \n     /**\n-     * Deprecated, methods are now static.\n-     * \n-     * @deprecated use static methods\n-     */\n-    public static ISOPeriodFormat getInstance() {\n-        return INSTANCE;\n-    }\n-\n-    /**\n      * Constructor.\n      */\n     private ISOPeriodFormat() {\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormat.java\n  *  limitations under the License.\n  */\n package org.joda.time.format;\n-\n-import java.util.Locale;\n \n /**\n  * Factory that creates instances of PeriodFormatter.\n  */\n public class PeriodFormat {\n \n-    /** @deprecated */\n-    private static final PeriodFormat INSTANCE = new PeriodFormat();\n-\n     /** An english words based formatter. */\n     private static PeriodFormatter cEnglishWords;\n-\n-    /**\n-     * Deprecated, methods are now static.\n-     * \n-     * @deprecated use static methods\n-     */\n-    public static PeriodFormat getInstance() {\n-        return INSTANCE;\n-    }\n-\n-    /**\n-     * Deprecated, methods are now static.\n-     * \n-     * @deprecated use static methods\n-     */\n-    public static PeriodFormat getInstance(Locale locale) {\n-        return INSTANCE;\n-    }\n \n     /**\n      * Constructor.\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatter.java\n     }\n \n     /**\n-     * Deprecated, use withParseType(type).parsePeriod(p).\n-     *\n-     * @deprecated use withParseType(type).parsePeriod(p).\n-     */\n-    public Period parsePeriod(PeriodType type, String text) {\n-        return withParseType(type).parsePeriod(text);\n-    }\n-\n-    /**\n-     * Deprecated, use withParseType(type).parseMutablePeriod(p).\n-     *\n-     * @deprecated use withParseType(type).parseMutablePeriod(p).\n-     */\n-    public MutablePeriod parseMutablePeriod(PeriodType type, String text) {\n-        return withParseType(type).parseMutablePeriod(text);\n-    }\n-\n-    /**\n      * Checks whether parsing is supported.\n      * \n      * @throws UnsupportedOperationException if parsing is not supported", "timestamp": 1108685305, "metainfo": ""}