{"sha": "eb0cac2be7678d8c6b3c2bde3aff15eb4ca982f1", "log": "Fix for bug 954058, which caused an ExceptionInInitializerError to be thrown if the system property \"user.timezone\" specified an explicit offset.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeZone.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeZone.java\n         setProvider0(null);\n         setNameProvider0(null);\n \n+        // Because of the cyclic initializer dependencies between many of the\n+        // main classes, and because cOffsetFormatter is built from those main\n+        // classes, a user time zone with an explicit offset fails. Rather than\n+        // duplicate all the code used by DateTimeFormatterBuilder's offset\n+        // formatter, DateTimeFormatterBuilder's constructor tests if\n+        // DateTimeZone.getDefault() is null, in which case it allows the\n+        // chronology to be null. This breaks the dependency cycle and allows\n+        // cOffsetFormatter to be defined. In order for this inelegant solution\n+        // to work propery, cDefault must be left as null until after an\n+        // attempt has been made to set the user time zone.\n+\n         try {\n             try {\n                 cDefault = getInstance(System.getProperty(\"user.timezone\"));\n \n     private static synchronized DateTimeFormatter offsetFormatter() {\n         if (cOffsetFormatter == null) {\n-            cOffsetFormatter = new DateTimeFormatterBuilder(UTC)\n+            cOffsetFormatter = new DateTimeFormatterBuilder((Chronology)null, null)\n                 .appendTimeZoneOffset(null, true, 2, 4)\n                 .toFormatter();\n         }\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n      */\n     public DateTimeFormatterBuilder(Chronology chrono, Locale locale) {\n         if (chrono == null) {\n-            chrono = ISOChronology.getInstance();\n+            if (DateTimeZone.getDefault() == null) {\n+                // See DateTimeZone's static initializer for details on this\n+                // special case.\n+                iChrono = iChronoUTC = null;\n+            } else {\n+                iChrono = iChronoUTC = ISOChronology.getInstance();\n+            }\n+        } else {\n+            iChrono = chrono;\n+            iChronoUTC = chrono.withUTC();\n         }\n         if (locale == null) {\n             locale = Locale.getDefault();\n         }\n-        iChrono = chrono;\n-        iChronoUTC = chrono.withUTC();\n-        DateTimeZone zone = chrono.getZone();\n         iLocale = locale;\n         iElementPairs = new ArrayList();\n     }", "timestamp": 1084601339, "metainfo": ""}