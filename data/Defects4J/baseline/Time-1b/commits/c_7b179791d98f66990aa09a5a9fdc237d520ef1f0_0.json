{"sha": "7b179791d98f66990aa09a5a9fdc237d520ef1f0", "log": "Add MillisDuration for precise durations   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n \n     /**\n      * Creates a duration from the given millisecond duration.\n+     * <p>\n+     * The millisecond duration will be split to fields using a UTC version of\n+     * the duration type.\n      *\n      * @param duration  the duration, in milliseconds\n      * @param type  which set of fields this duration supports\n     public AbstractDuration(Object duration, DurationType type, boolean totalMillisMaster) {\n         super();\n         DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);\n-        type = (type == null ? converter.getDurationType(duration) : type);\n+        type = (type == null ? converter.getDurationType(duration, totalMillisMaster) : type);\n         type = init(type, totalMillisMaster);\n         iType = type;\n         if (type.isPrecise() && converter.isPrecise(duration)) {\n             return;\n         }\n         \n+        type = type.withChronology(type.getChronology().withUTC());\n         long startInstant = 0;\n         int years = 0, months = 0, weeks = 0, days = 0;\n         int hours = 0, minutes = 0, seconds = 0, millis = 0;\n--- a/JodaTime/src/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/java/org/joda/time/Duration.java\n \n     /**\n      * Creates a duration from the given millisecond duration using AllType.\n+     * <p>\n+     * The millisecond duration will be split to fields using a UTC version of\n+     * the duration type. This ensures that there are no odd effects caused by\n+     * time zones. The add methods will still use the time zone specific version\n+     * of the duration type.\n      *\n      * @param duration  the duration, in milliseconds\n      */\n \n     /**\n      * Creates a duration from the given millisecond duration.\n+     * <p>\n+     * The millisecond duration will be split to fields using a UTC version of\n+     * the duration type. This ensures that there are no odd effects caused by\n+     * time zones. The add methods will still use the time zone specific version\n+     * of the duration type.\n      *\n      * @param duration  the duration, in milliseconds\n      * @param type  which set of fields this duration supports\n--- a/JodaTime/src/java/org/joda/time/DurationType.java\n+++ b/JodaTime/src/java/org/joda/time/DurationType.java\n package org.joda.time;\n \n import java.io.Serializable;\n+\n+import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.MillisDurationField;\n-import org.joda.time.field.PreciseDurationField;\n import org.joda.time.field.ScaledDurationField;\n import org.joda.time.field.UnsupportedDurationField;\n-import org.joda.time.chrono.ISOChronology;\n \n /**\n  * Controls a duration implementation by specifying which duration fields are to be used.\n public abstract class DurationType implements Serializable {\n     private static final long serialVersionUID = 2274324892792009998L;\n \n+    private static final DurationType DAY_HOUR_TYPE;\n+    private static final DurationType YEAR_WEEK_TYPE;\n+    private static final DurationType YEAR_MONTH_TYPE;\n+    private static final DurationType ALL_TYPE;\n     private static final DurationType MILLIS_TYPE;\n-    private static final DurationType DAY_HOUR_TYPE;\n-    private static final DurationType ALL_TYPE;\n-    private static final DurationType YEAR_MONTH_TYPE;\n-    private static final DurationType YEAR_WEEK_TYPE;\n-    private static final DurationType AVERAGE_YEAR_MONTH_TYPE;\n     private static final DurationType PRECISE_DAY_HOUR_TYPE;\n     private static final DurationType PRECISE_YEAR_DAY_TYPE;\n     private static final DurationType PRECISE_YEAR_WEEK_TYPE;\n     private static final DurationType PRECISE_ALL_TYPE;\n \n     static {\n+        DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstance());\n+        YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstance());\n+        YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstance());\n+        ALL_TYPE = new AllType(ISOChronology.getInstance());\n         MILLIS_TYPE = new MillisType();\n-        DAY_HOUR_TYPE = new DayHourType(ISOChronology.getInstanceUTC());\n-        YEAR_MONTH_TYPE = new YearMonthType(ISOChronology.getInstanceUTC());\n-        YEAR_WEEK_TYPE = new YearWeekType(ISOChronology.getInstanceUTC());\n-        AVERAGE_YEAR_MONTH_TYPE = new AverageYearMonthType(ISOChronology.getInstanceUTC());\n-        ALL_TYPE = new AllType(ISOChronology.getInstanceUTC());\n         PRECISE_DAY_HOUR_TYPE = new PreciseDayHourType(ISOChronology.getInstanceUTC());\n         PRECISE_YEAR_DAY_TYPE = new PreciseYearDayType(ISOChronology.getInstanceUTC());\n         PRECISE_YEAR_WEEK_TYPE = new PreciseYearWeekType(ISOChronology.getInstanceUTC());\n     }\n \n     /**\n-     * Returns a DurationType using the ISOChronology of:\n+     * Returns a DurationType using the ISOChronology in current time zone of:\n      *\n      * <ul>\n      * <li>days\n      * @param chrono Chronology to use for calculations.\n      */\n     public static DurationType getDayHourType(Chronology chrono) {\n-        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n+        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n             return getDayHourType();\n         }\n         return new DayHourType(chrono);\n     }\n \n     /**\n-     * Returns a DurationType using the ISOChronology of:\n+     * Returns a DurationType using the ISOChronology in current time zone of:\n      *\n      * <ul>\n      * <li>years\n      * @param chrono Chronology to use for calculations.\n      */\n     public static DurationType getAllType(Chronology chrono) {\n-        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n+        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n             return getAllType();\n         }\n         return new AllType(chrono);\n     }\n \n     /**\n-     * Returns a DurationType using the ISOChronology of:\n+     * Returns a DurationType using the ISOChronology in current time zone of:\n      *\n      * <ul>\n      * <li>years\n      * @param chrono Chronology to use for calculations.\n      */\n     public static DurationType getYearMonthType(Chronology chrono) {\n-        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n+        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n             return getYearMonthType();\n         }\n         return new YearMonthType(chrono);\n     }\n \n     /**\n-     * Returns a DurationType using the ISOChronology of:\n+     * Returns a DurationType using the ISOChronology in current time zone of:\n      *\n      * <ul>\n      * <li>years (weekyears)\n      * @param chrono Chronology to use for calculations.\n      */\n     public static DurationType getYearWeekType(Chronology chrono) {\n-        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n+        if (chrono == null || chrono.equals(ISOChronology.getInstance())) {\n             return getYearWeekType();\n         }\n         return new YearWeekType(chrono);\n-    }\n-\n-    /**\n-     * Returns a precise DurationType using the ISOChronology of:\n-     *\n-     * <ul>\n-     * <li>years (fixed at 365.2425 days)\n-     * <li>months (fixed at 30.436875 days)\n-     * <li>days\n-     * <li>hours\n-     * <li>minutes\n-     * <li>seconds\n-     * <li>milliseconds\n-     * </ul>\n-     */\n-    public static DurationType getAverageYearMonthType() {\n-        return AVERAGE_YEAR_MONTH_TYPE;\n-    }\n-\n-    /**\n-     * Returns a DurationType, normally precise, of:\n-     *\n-     * <ul>\n-     * <li>years (fixed to chronology's average year)\n-     * <li>months (fixed to chronology's average month)\n-     * <li>days\n-     * <li>hours\n-     * <li>minutes\n-     * <li>seconds\n-     * <li>milliseconds\n-     * </ul>\n-     *\n-     * This factory method returns a DurationType that calculates using any\n-     * Chronology. For best results, the Chronology's time zone should\n-     * be UTC or have fixed offsets.\n-     *\n-     * @param chrono Chronology to use for calculations.\n-     */\n-    public static DurationType getAverageYearMonthType(Chronology chrono) {\n-        if (chrono == null || chrono.equals(ISOChronology.getInstanceUTC())) {\n-            return getAverageYearMonthType();\n-        }\n-        return new AverageYearMonthType(chrono);\n     }\n \n     /**\n         }\n \n         public Chronology getChronology() {\n-            return null;\n+            return ISOChronology.getInstanceUTC();\n         }\n \n         public DurationType withChronology(Chronology chrono) {\n         }\n     }\n \n+    private static class YearWeekType extends DayHourType {\n+        private static final long serialVersionUID = 1347170237843447098L;\n+\n+        YearWeekType(Chronology chrono) {\n+            super(chrono);\n+        }\n+\n+        public DurationType withChronology(Chronology chrono) {\n+            if (chrono == iChronology) {\n+                return this;\n+            }\n+            return DurationType.getYearWeekType(chrono);\n+        }\n+\n+        public boolean isPrecise() {\n+            return years().isPrecise()\n+                && weeks().isPrecise()\n+                && super.isPrecise();\n+        }\n+\n+        public DurationField years() {\n+            return iChronology.weekyears();\n+        }\n+\n+        public DurationField weeks() {\n+            return iChronology.weeks();\n+        }\n+\n+        private Object readResolve() {\n+            return getYearWeekType(iChronology);\n+        }\n+        \n+        public String getName() {\n+            return \"YearWeekType\";\n+        }\n+    }\n+\n+    private static class YearMonthType extends DayHourType {\n+        private static final long serialVersionUID = -1336767257680877683L;\n+\n+        YearMonthType(Chronology chrono) {\n+            super(chrono);\n+        }\n+\n+        public DurationType withChronology(Chronology chrono) {\n+            if (chrono == iChronology) {\n+                return this;\n+            }\n+            return DurationType.getYearMonthType(chrono);\n+        }\n+\n+        public boolean isPrecise() {\n+            return years().isPrecise()\n+                && months().isPrecise()\n+                && super.isPrecise();\n+        }\n+\n+        public DurationField years() {\n+            return iChronology.years();\n+        }\n+\n+        public DurationField months() {\n+            return iChronology.months();\n+        }\n+\n+        private Object readResolve() {\n+            return getYearMonthType(iChronology);\n+        }\n+        \n+        public String getName() {\n+            return \"YearMonthType\";\n+        }\n+    }\n+\n     private static class AllType extends DayHourType {\n         private static final long serialVersionUID = -359769822629866L;\n \n         \n         public String getName() {\n             return \"AllType\";\n-        }\n-    }\n-\n-    private static class YearMonthType extends DayHourType {\n-        private static final long serialVersionUID = -1336767257680877683L;\n-\n-        YearMonthType(Chronology chrono) {\n-            super(chrono);\n-        }\n-\n-        public DurationType withChronology(Chronology chrono) {\n-            if (chrono == iChronology) {\n-                return this;\n-            }\n-            return DurationType.getYearMonthType(chrono);\n-        }\n-\n-        public boolean isPrecise() {\n-            return years().isPrecise()\n-                && months().isPrecise()\n-                && super.isPrecise();\n-        }\n-\n-        public DurationField years() {\n-            return iChronology.years();\n-        }\n-\n-        public DurationField months() {\n-            return iChronology.months();\n-        }\n-\n-        private Object readResolve() {\n-            return getYearMonthType(iChronology);\n-        }\n-        \n-        public String getName() {\n-            return \"YearMonthType\";\n-        }\n-    }\n-\n-    private static class YearWeekType extends DayHourType {\n-        private static final long serialVersionUID = 1347170237843447098L;\n-\n-        YearWeekType(Chronology chrono) {\n-            super(chrono);\n-        }\n-\n-        public DurationType withChronology(Chronology chrono) {\n-            if (chrono == iChronology) {\n-                return this;\n-            }\n-            return DurationType.getYearWeekType(chrono);\n-        }\n-\n-        public boolean isPrecise() {\n-            return years().isPrecise()\n-                && weeks().isPrecise()\n-                && super.isPrecise();\n-        }\n-\n-        public DurationField years() {\n-            return iChronology.weekyears();\n-        }\n-\n-        public DurationField weeks() {\n-            return iChronology.weeks();\n-        }\n-\n-        private Object readResolve() {\n-            return getYearWeekType(iChronology);\n-        }\n-        \n-        public String getName() {\n-            return \"YearWeekType\";\n-        }\n-    }\n-\n-    private static class AverageYearMonthType extends DayHourType {\n-        private static final long serialVersionUID = -1629017135050918461L;\n-\n-        private final DurationField iYears;\n-        private final DurationField iMonths;\n-        \n-        AverageYearMonthType(Chronology chrono) {\n-            super(chrono);\n-            iYears = new PreciseDurationField(\"AverageYears\", chrono.years().getUnitMillis());\n-            iMonths = new PreciseDurationField(\"AverageMonths\", chrono.months().getUnitMillis());\n-        }\n-\n-        public DurationType withChronology(Chronology chrono) {\n-            if (chrono == iChronology) {\n-                return this;\n-            }\n-            return DurationType.getAverageYearMonthType(chrono);\n-        }\n-\n-        public DurationField years() {\n-            return iYears;\n-        }\n-\n-        public DurationField months() {\n-            return iMonths;\n-        }\n-\n-        private Object readResolve() {\n-            return getAverageYearMonthType(iChronology);\n-        }\n-        \n-        public String getName() {\n-            return \"AverageYearMonthType\";\n         }\n     }\n \n--- a/JodaTime/src/java/org/joda/time/MutableDuration.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDuration.java\n \n     /**\n      * Creates a duration from the given millisecond duration using AllType.\n+     * <p>\n+     * The millisecond duration will be split to fields using a UTC version of\n+     * the duration type. This ensures that there are no odd effects caused by\n+     * time zones. The add methods will still use the time zone specific version\n+     * of the duration type.\n      *\n      * @param duration  the duration, in milliseconds\n      */\n \n     /**\n      * Creates a duration from the given millisecond duration.\n+     * <p>\n+     * The millisecond duration will be split to fields using a UTC version of\n+     * the duration type. This ensures that there are no odd effects caused by\n+     * time zones. The add methods will still use the time zone specific version\n+     * of the duration type.\n      *\n      * @param duration  the duration, in milliseconds\n      * @param type  which set of fields this duration supports\n--- a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationType;\n import org.joda.time.chrono.ISOChronology;\n \n /**\n         return chrono;\n     }\n     \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Selects a suitable duration type for the given object.\n+     *\n+     * @param object  the object to examine, must not be null\n+     * @param totalMillisMaster  true if total millis based duration\n+     * @return the duration type, never null\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    public DurationType getDurationType(Object object, boolean totalMillisMaster) {\n+        if (totalMillisMaster) {\n+            return DurationType.getPreciseAllType();\n+        }\n+        return DurationType.getAllType();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Gets a debugging string version of this converter.\n      * \n--- a/JodaTime/src/java/org/joda/time/convert/DurationConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/DurationConverter.java\n      * Selects a suitable duration type for the given object.\n      *\n      * @param object  the object to examine, must not be null\n+     * @param totalMillisMaster  true if total millis based duration\n      * @return the duration type, never null\n      * @throws ClassCastException if the object is invalid\n      */\n-    DurationType getDurationType(Object object);\n+    DurationType getDurationType(Object object, boolean totalMillisMaster);\n \n }\n--- a/JodaTime/src/java/org/joda/time/convert/LongConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/LongConverter.java\n  */\n package org.joda.time.convert;\n \n-import org.joda.time.DurationType;\n import org.joda.time.ReadWritableDuration;\n \n /**\n         duration.setTotalMillis(((Long) object).longValue());\n     }\n \n-    /**\n-     * Returns the millis duration type.\n-     *\n-     * @param object  the object to examine, must not be null\n-     * @return the millis duration type\n-     */\n-    public DurationType getDurationType(Object object) {\n-        return DurationType.getMillisType();\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Returns Long.class.\n--- a/JodaTime/src/java/org/joda/time/convert/NullConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/NullConverter.java\n package org.joda.time.convert;\n \n import org.joda.time.DateTimeUtils;\n-import org.joda.time.DurationType;\n import org.joda.time.ReadWritableDuration;\n \n /**\n         duration.setTotalMillis(0L);\n     }\n \n-    /**\n-     * Returns null to allow the caller to determine the best type.\n-     *\n-     * @param object  the object to examine\n-     * @return null\n-     */\n-    public DurationType getDurationType(Object object) {\n-        return null;\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Returns null.\n--- a/JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ReadableDurationConverter.java\n      * Selects a suitable duration type for the given object.\n      *\n      * @param object  the object to examine, must not be null\n+     * @param totalMillisMaster  true if total millis based duration\n      * @return the duration type from the readable duration\n      * @throws NullPointerException if the object is null\n      * @throws ClassCastException if the object is an invalid type\n      */\n-    public DurationType getDurationType(Object object) {\n+    public DurationType getDurationType(Object object, boolean totalMillisMaster) {\n         return ((ReadableDuration) object).getDurationType();\n     }\n \n--- a/JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ReadableIntervalConverter.java\n  */\n package org.joda.time.convert;\n \n-import org.joda.time.DurationType;\n-import org.joda.time.ReadableInterval;\n import org.joda.time.ReadWritableDuration;\n import org.joda.time.ReadWritableInterval;\n+import org.joda.time.ReadableInterval;\n \n /**\n  * Converts intervals into durations of any requested duration type.\n     }\n \n     /**\n-     * Selects a suitable duration type for the given object.\n-     *\n-     * @param object  the interval\n-     * @return the duration type, never null\n-     */\n-    public DurationType getDurationType(Object object) {\n-        return ((ReadableInterval) object).getDuration().getDurationType();\n-    }\n-\n-    /**\n      * Sets the values of the mutable duration from the specified interval.\n      * \n      * @param writableDuration  the duration to set\n--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n \n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n-import org.joda.time.DurationType;\n import org.joda.time.ReadWritableDuration;\n import org.joda.time.ReadWritableInterval;\n import org.joda.time.ReadableDuration;\n     }\n \n     /**\n-     * Selects a suitable duration type for the given object.\n-     *\n-     * @param object  the object to examine, must not be null\n-     * @return the duration type, never null\n-     * @throws ClassCastException if the object is invalid\n-     */\n-    public DurationType getDurationType(Object object) {\n-        return DurationType.getAllType();\n-    }\n-\n-    /**\n      * Sets the value of the mutable interval from the string.\n      * \n      * @param writableInterval  the interval to set\n         char c = leftStr.charAt(0);\n         if (c == 'P' || c == 'p') {\n             startInstant = 0;\n-            duration = durationParser.parseDuration(getDurationType(leftStr), leftStr);\n+            duration = durationParser.parseDuration(getDurationType(leftStr, false), leftStr);\n         } else {\n             startInstant = dateTimeParser.parseMillis(leftStr);\n             duration = null;\n             if (duration != null) {\n                 throw new IllegalArgumentException(\"Interval composed of two durations: \" + str);\n             }\n-            duration = durationParser.parseDuration(getDurationType(rightStr), rightStr);\n+            duration = durationParser.parseDuration(getDurationType(rightStr, false), rightStr);\n             writableInterval.setStartMillis(startInstant);\n             writableInterval.setDurationAfterStart(duration);\n         } else {\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestDuration_Constructors.suite());\n         suite.addTest(TestDuration_Basics.suite());\n         \n+        suite.addTest(TestMillisDuration_Constructors.suite());\n+        \n         suite.addTest(TestMutableDuration_Constructors.suite());\n         suite.addTest(TestMutableDuration_Basics.suite());\n         suite.addTest(TestMutableDuration_Updates.suite());\n--- a/JodaTime/src/test/org/joda/time/TestDurationType.java\n+++ b/JodaTime/src/test/org/joda/time/TestDurationType.java\n         assertEquals(false, type.seconds().isSupported());\n         assertEquals(true, type.millis().isSupported());\n         assertEquals(true, type.isPrecise());\n-        assertEquals(null, type.getChronology());\n+        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n         assertEquals(true, type.equals(type));\n         assertEquals(true, type == DurationType.getMillisType());\n         assertEquals(false, type.equals(DurationType.getAllType()));\n         assertEquals(true, type.minutes().isSupported());\n         assertEquals(true, type.seconds().isSupported());\n         assertEquals(true, type.millis().isSupported());\n-        assertEquals(true, type.isPrecise());\n-        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n+        assertEquals(false, type.isPrecise());\n+        assertEquals(ISOChronology.getInstance(), type.getChronology());\n         assertEquals(true, type.equals(type));\n         assertEquals(true, type == DurationType.getDayHourType());\n         assertEquals(false, type.equals(DurationType.getAllType()));\n         assertEquals(\"DurationType[DayHourType]\", type.toString());\n         assertSameAfterSerialization(type);\n         assertSame(type, type.withChronology(null));\n-        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(type, type.withChronology(ISOChronology.getInstance()));\n         assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n     }\n \n         assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());\n         assertEquals(true, type.equals(type));\n         assertEquals(true, DurationType.getDayHourType() == DurationType.getDayHourType(null));\n-        assertEquals(true, DurationType.getDayHourType() == DurationType.getDayHourType(ISOChronology.getInstanceUTC()));\n+        assertEquals(true, DurationType.getDayHourType() == DurationType.getDayHourType(ISOChronology.getInstance()));\n         assertEquals(true, type.equals(DurationType.getDayHourType(BuddhistChronology.getInstanceUTC())));\n         assertEquals(false, type.equals(DurationType.getDayHourType()));\n         assertEquals(false, type.equals(DurationType.getAllType()));\n         assertEquals(\"DurationType[DayHourType]\", type.toString());\n         assertEqualsAfterSerialization(type);\n         assertSame(DurationType.getDayHourType(), type.withChronology(null));\n-        assertSame(DurationType.getDayHourType(), type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(DurationType.getDayHourType(), type.withChronology(ISOChronology.getInstance()));\n         assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n     }\n \n         assertEquals(true, type.seconds().isSupported());\n         assertEquals(true, type.millis().isSupported());\n         assertEquals(false, type.isPrecise());\n-        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n+        assertEquals(ISOChronology.getInstance(), type.getChronology());\n         assertEquals(true, type.equals(type));\n         assertEquals(true, type == DurationType.getYearWeekType());\n         assertEquals(false, type.equals(DurationType.getAllType()));\n         assertEquals(\"DurationType[YearWeekType]\", type.toString());\n         assertSameAfterSerialization(type);\n         assertSame(type, type.withChronology(null));\n-        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(type, type.withChronology(ISOChronology.getInstance()));\n         assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n     }\n \n         assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());\n         assertEquals(true, type.equals(type));\n         assertEquals(true, DurationType.getYearWeekType() == DurationType.getYearWeekType(null));\n-        assertEquals(true, DurationType.getYearWeekType() == DurationType.getYearWeekType(ISOChronology.getInstanceUTC()));\n+        assertEquals(true, DurationType.getYearWeekType() == DurationType.getYearWeekType(ISOChronology.getInstance()));\n         assertEquals(true, type.equals(DurationType.getYearWeekType(BuddhistChronology.getInstanceUTC())));\n         assertEquals(false, type.equals(DurationType.getYearWeekType()));\n         assertEquals(false, type.equals(DurationType.getAllType()));\n         assertEquals(\"DurationType[YearWeekType]\", type.toString());\n         assertEqualsAfterSerialization(type);\n         assertSame(DurationType.getYearWeekType(), type.withChronology(null));\n-        assertSame(DurationType.getYearWeekType(), type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(DurationType.getYearWeekType(), type.withChronology(ISOChronology.getInstance()));\n         assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n     }\n \n         assertEquals(true, type.seconds().isSupported());\n         assertEquals(true, type.millis().isSupported());\n         assertEquals(false, type.isPrecise());\n-        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n+        assertEquals(ISOChronology.getInstance(), type.getChronology());\n         assertEquals(true, type.equals(type));\n         assertEquals(true, type == DurationType.getYearMonthType());\n         assertEquals(false, type.equals(DurationType.getAllType()));\n         assertEquals(\"DurationType[YearMonthType]\", type.toString());\n         assertSameAfterSerialization(type);\n         assertSame(type, type.withChronology(null));\n-        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(type, type.withChronology(ISOChronology.getInstance()));\n         assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n     }\n \n         assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());\n         assertEquals(true, type.equals(type));\n         assertEquals(true, DurationType.getYearMonthType() == DurationType.getYearMonthType(null));\n-        assertEquals(true, DurationType.getYearMonthType() == DurationType.getYearMonthType(ISOChronology.getInstanceUTC()));\n+        assertEquals(true, DurationType.getYearMonthType() == DurationType.getYearMonthType(ISOChronology.getInstance()));\n         assertEquals(true, type.equals(DurationType.getYearMonthType(BuddhistChronology.getInstanceUTC())));\n         assertEquals(false, type.equals(DurationType.getYearMonthType()));\n         assertEquals(false, type.equals(DurationType.getAllType()));\n         assertEquals(\"DurationType[YearMonthType]\", type.toString());\n         assertEqualsAfterSerialization(type);\n         assertSame(DurationType.getYearMonthType(), type.withChronology(null));\n-        assertSame(DurationType.getYearMonthType(), type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(DurationType.getYearMonthType(), type.withChronology(ISOChronology.getInstance()));\n         assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n     }\n \n         assertEquals(true, type.seconds().isSupported());\n         assertEquals(true, type.millis().isSupported());\n         assertEquals(false, type.isPrecise());\n-        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n+        assertEquals(ISOChronology.getInstance(), type.getChronology());\n         assertEquals(true, type.equals(type));\n         assertEquals(true, type == DurationType.getAllType());\n         assertEquals(false, type.equals(DurationType.getMillisType()));\n         assertEquals(\"DurationType[AllType]\", type.toString());\n         assertSameAfterSerialization(type);\n         assertSame(type, type.withChronology(null));\n-        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(type, type.withChronology(ISOChronology.getInstance()));\n         assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n     }\n \n         assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());\n         assertEquals(true, type.equals(type));\n         assertEquals(true, DurationType.getAllType() == DurationType.getAllType(null));\n-        assertEquals(true, DurationType.getAllType() == DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        assertEquals(true, DurationType.getAllType() == DurationType.getAllType(ISOChronology.getInstance()));\n         assertEquals(true, type.equals(DurationType.getAllType(BuddhistChronology.getInstanceUTC())));\n         assertEquals(false, type.equals(DurationType.getAllType()));\n         assertEquals(false, type.equals(DurationType.getMillisType()));\n         assertEquals(\"DurationType[AllType]\", type.toString());\n         assertEqualsAfterSerialization(type);\n         assertSame(DurationType.getAllType(), type.withChronology(null));\n-        assertSame(DurationType.getAllType(), type.withChronology(ISOChronology.getInstanceUTC()));\n-        assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testAverageYearMonthType() throws Exception {\n-        DurationType type = DurationType.getAverageYearMonthType();\n-        assertEquals(true, type.years().isSupported());\n-        assertEquals(true, type.months().isSupported());\n-        assertEquals(false, type.weeks().isSupported());\n-        assertEquals(true, type.days().isSupported());\n-        assertEquals(true, type.hours().isSupported());\n-        assertEquals(true, type.minutes().isSupported());\n-        assertEquals(true, type.seconds().isSupported());\n-        assertEquals(true, type.millis().isSupported());\n-        assertEquals(true, type.isPrecise());\n-        assertEquals(ISOChronology.getInstanceUTC(), type.getChronology());\n-        assertEquals(true, type.equals(type));\n-        assertEquals(true, type == DurationType.getAverageYearMonthType());\n-        assertEquals(false, type.equals(DurationType.getAllType()));\n-        assertEquals(true, type.hashCode() == type.hashCode());\n-        assertEquals(true, type.hashCode() == DurationType.getAverageYearMonthType().hashCode());\n-        assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());\n-        assertEquals(\"AverageYearMonthType\", type.getName());\n-        assertEquals(\"DurationType[AverageYearMonthType]\", type.toString());\n-        assertSameAfterSerialization(type);\n-        assertSame(type, type.withChronology(null));\n-        assertSame(type, type.withChronology(ISOChronology.getInstanceUTC()));\n-        assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testAverageYearMonthType_Chronology() throws Exception {\n-        DurationType type = DurationType.getAverageYearMonthType(BuddhistChronology.getInstanceUTC());\n-        assertEquals(true, type.years().isSupported());\n-        assertEquals(true, type.months().isSupported());\n-        assertEquals(false, type.weeks().isSupported());\n-        assertEquals(true, type.days().isSupported());\n-        assertEquals(true, type.hours().isSupported());\n-        assertEquals(true, type.minutes().isSupported());\n-        assertEquals(true, type.seconds().isSupported());\n-        assertEquals(true, type.millis().isSupported());\n-        assertEquals(true, type.isPrecise());\n-        assertEquals(BuddhistChronology.getInstanceUTC(), type.getChronology());\n-        assertEquals(true, type.equals(type));\n-        assertEquals(true, DurationType.getAverageYearMonthType() == DurationType.getAverageYearMonthType(null));\n-        assertEquals(true, DurationType.getAverageYearMonthType() == DurationType.getAverageYearMonthType(ISOChronology.getInstanceUTC()));\n-        assertEquals(true, type.equals(DurationType.getAverageYearMonthType(BuddhistChronology.getInstanceUTC())));\n-        assertEquals(false, type.equals(DurationType.getAverageYearMonthType()));\n-        assertEquals(false, type.equals(DurationType.getAllType()));\n-        assertEquals(true, type.hashCode() == type.hashCode());\n-        assertEquals(false, type.hashCode() == DurationType.getAverageYearMonthType().hashCode());\n-        assertEquals(false, type.hashCode() == DurationType.getAllType().hashCode());\n-        assertEquals(\"AverageYearMonthType\", type.getName());\n-        assertEquals(\"DurationType[AverageYearMonthType]\", type.toString());\n-        assertEqualsAfterSerialization(type);\n-        assertSame(DurationType.getAverageYearMonthType(), type.withChronology(null));\n-        assertSame(DurationType.getAverageYearMonthType(), type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertSame(DurationType.getAllType(), type.withChronology(ISOChronology.getInstance()));\n         assertEquals(CopticChronology.getInstanceUTC(), type.withChronology(CopticChronology.getInstanceUTC()).getChronology());\n     }\n \n     public void testMaskWithChronology() throws Exception {\n         DurationType type = DurationType.getAllType().withYearsRemoved();\n         assertEquals(type, type.withChronology(null));\n-        assertEquals(type, type.withChronology(ISOChronology.getInstanceUTC()));\n+        assertEquals(type, type.withChronology(ISOChronology.getInstance()));\n         \n         DurationType type2 = type.withChronology(CopticChronology.getInstanceUTC());\n         assertEquals(CopticChronology.getInstanceUTC(), type2.getChronology());\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n         \n         assertEquals(false, test1.equals(\"Hello\"));\n         assertEquals(true, test1.equals(new MockDuration(123L)));\n-        assertEquals(false, test1.equals(new Duration(123L, DurationType.getAverageYearMonthType())));\n+        assertEquals(false, test1.equals(new Duration(123L, DurationType.getDayHourType())));\n     }\n     \n     class MockDuration extends AbstractDuration {\n     //-----------------------------------------------------------------------\n     public void testAddTo1() {\n         long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, 1);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, 2);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, 4);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, 5);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, 8);\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n         \n         Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n         long added = test.addTo(TEST_TIME_NOW, 1);\n     }\n     \n     public void testAddTo2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, -2);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo3() {\n         long expected = TEST_TIME_NOW;\n         expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n         expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n         expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n         expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n         \n-        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n         long added = test.addTo(TEST_TIME_NOW, -2);\n         assertEquals(expected, added);\n     }\n     \n-    public void testAddTo3() {\n+    public void testAddTo4() {\n         long expected = TEST_TIME_NOW;\n         Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n         long added = test.addTo(TEST_TIME_NOW, 0);\n         assertEquals(expected, added);\n     }\n     \n-    public void testAddTo4() {\n+    public void testAddTo5() {\n         long expected = TEST_TIME_NOW + 100L;\n         Duration test = new Duration(100L);\n         long added = test.addTo(TEST_TIME_NOW, 1);\n         expected = ISOChronology.getInstance().seconds().add(expected, -14);\n         expected = ISOChronology.getInstance().millis().add(expected, -16);\n         \n-        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());\n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());  // local specified so use it\n         assertEquals(expected, added);\n     }\n     \n     public void testAddToWithChronology3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so drop back to duration (UTC)\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToRI1() {\n         long expected = TEST_TIME_NOW;\n         expected = ISOChronology.getInstance().years().add(expected, 1);\n         expected = ISOChronology.getInstance().months().add(expected, 2);\n         expected = ISOChronology.getInstance().millis().add(expected, 8);\n         \n         Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 1, null);\n-        assertEquals(expected, added);\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddToRI1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, 1);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, 2);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, 4);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, 5);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, 8);\n-        \n-        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n-        Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's UTC\n+        Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)\n         assertEquals(expected, added.getMillis());\n     }\n     \n         expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n         expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n         \n-        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n-        Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's UTC\n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)\n         assertEquals(expected, added.getMillis());\n     }\n     \n         expected = ISOChronology.getInstance().seconds().add(expected, -14);\n         expected = ISOChronology.getInstance().millis().add(expected, -16);\n         \n-        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n         Instant added = test.addTo(new DateTime(), -2);  // DateTime has local time zone\n         assertEquals(expected, added.getMillis());\n     }\n     \n     public void testAddToRI4() {\n         long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, 1);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, 2);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, 4);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, 5);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, 8);\n-        \n-        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n-        Instant added = test.addTo(null, 1);  // null has no time zone, uses duration's UTC\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)\n         assertEquals(expected, added.getMillis());\n     }\n     \n         expected = ISOChronology.getInstance().seconds().add(expected, -14);\n         expected = ISOChronology.getInstance().millis().add(expected, -16);\n         \n-        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8);\n+        Duration test = new Duration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n         MutableDateTime mdt = new MutableDateTime();\n-        test.addInto(mdt, -2);\n+        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n         assertEquals(expected, mdt.getMillis());\n     }\n     \n--- a/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n     }\n \n     public void testConstructor_8int__DurationType2() throws Throwable {\n-        Duration test = new Duration(0, 0, 0, 4, 5, 6, 7, 8, DurationType.getDayHourType());\n+        Duration test = new Duration(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());\n         assertEquals(DurationType.getDayHourType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n-        assertEquals(4, test.getDays());\n+        assertEquals(0, test.getDays());\n         assertEquals(5, test.getHours());\n         assertEquals(6, test.getMinutes());\n         assertEquals(7, test.getSeconds());\n         assertEquals(8, test.getMillis());\n         assertEquals(true, test.isPrecise());\n-        assertEquals(4 * DateTimeConstants.MILLIS_PER_DAY +\n+        assertEquals(\n             5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n             7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n     }\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMillisDuration_Constructors.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for Duration.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMillisDuration_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMillisDuration_Constructors.class);\n+    }\n+\n+    public TestMillisDuration_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testZERO() throws Throwable {\n+        MillisDuration test = MillisDuration.ZERO;\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MillisDuration test = new MillisDuration(length);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_DurationType1() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MillisDuration test = new MillisDuration(length, null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType2() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MillisDuration test = new MillisDuration(length, DurationType.getMillisType());\n+        assertEquals(DurationType.getMillisType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(length, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType3() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MillisDuration test = new MillisDuration(length, DurationType.getPreciseDayHourType());\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_DurationType4() throws Throwable {\n+        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        MillisDuration test = new MillisDuration(length, DurationType.getPreciseAllType().withMillisRemoved());\n+        assertEquals(DurationType.getPreciseAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(length - 8, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (4ints)\n+     */\n+    public void testConstructor_4int1() throws Throwable {\n+        MillisDuration test = new MillisDuration(5, 6, 7, 8);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int1() throws Throwable {\n+        MillisDuration test = new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (8ints)\n+     */\n+    public void testConstructor_8int__DurationType1() throws Throwable {\n+        MillisDuration test = new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8, null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(3, test.getWeeks());\n+        assertEquals(4, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_8int__DurationType2() throws Throwable {\n+        MillisDuration test = new MillisDuration(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getPreciseDayHourType());\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_8int__DurationType3() throws Throwable {\n+        try {\n+            new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getDayHourType());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long_DurationType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_long_DurationType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getPreciseDayHourType());\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_long_long_DurationType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), DurationType.getPreciseAllType().withMillisRemoved());\n+        assertEquals(DurationType.getPreciseAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(-3, test.getYears());\n+        assertEquals(-1, test.getMonths());\n+        assertEquals(-1, test.getWeeks());\n+        assertEquals(-2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years\n+        assertEquals(0, test.getHours());\n+        assertEquals(-1, test.getMinutes());\n+        assertEquals(-1, test.getSeconds());\n+        assertEquals(-1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(TEST_TIME_NOW - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MillisDuration test = new MillisDuration(dt1, dt2);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0L, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI_DurationType1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1, dt2, null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseDayHourType());\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(31, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseAllType().withMillisRemoved());\n+        assertEquals(DurationType.getPreciseAllType().withMillisRemoved(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseAllType());\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(3, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(1, test.getWeeks());\n+        assertEquals(2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years\n+        assertEquals(0, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_RI_RI_DurationType5() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        MillisDuration test = new MillisDuration(dt1, dt2, DurationType.getPreciseAllType());\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0L, test.getTotalMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object1() throws Throwable {\n+        MillisDuration test = new MillisDuration(\"P1Y2M3D\");\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            (365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        MillisDuration test = new MillisDuration((Object) null);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        MillisDuration base = new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getPreciseDayHourType());\n+        MillisDuration test = new MillisDuration(base);\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MillisDuration base = new MillisDuration(dt1, dt2);  // AllType and precise\n+        MillisDuration test = new MillisDuration(base);\n+        assertEquals(DurationType.getPreciseAllType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(1, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(1, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(1, test.getMinutes());\n+        assertEquals(1, test.getSeconds());\n+        assertEquals(1, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object5() throws Throwable {\n+        MillisDuration base = new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getDayHourType());\n+        try {\n+            new MillisDuration(base);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object_DurationType1() throws Throwable {\n+        MillisDuration test = new MillisDuration(\"P1Y2M3D\", DurationType.getPreciseYearMonthType());\n+        assertEquals(DurationType.getPreciseYearMonthType(), test.getDurationType());\n+        assertEquals(1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(3, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(\n+            (365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object_DurationType2() throws Throwable {\n+        MillisDuration test = new MillisDuration((Object) null, DurationType.getPreciseYearMonthType());\n+        assertEquals(DurationType.getPreciseYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(0, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object_DurationType3() throws Throwable {\n+        MillisDuration test = new MillisDuration(\n+            new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getPreciseDayHourType()), DurationType.getPreciseYearMonthType());\n+        assertEquals(DurationType.getPreciseYearMonthType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());\n+    }\n+\n+    public void testConstructor_Object_DurationType4() throws Throwable {\n+        MillisDuration test = new MillisDuration(new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, DurationType.getPreciseDayHourType()), null);\n+        assertEquals(DurationType.getPreciseDayHourType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(1, test.getHours());\n+        assertEquals(2, test.getMinutes());\n+        assertEquals(3, test.getSeconds());\n+        assertEquals(4, test.getMillis());\n+        assertEquals(true, test.isPrecise());\n+        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDuration_Basics.java\n         \n         assertEquals(false, test1.equals(\"Hello\"));\n         assertEquals(true, test1.equals(new MockMutableDuration(123L)));\n-        assertEquals(false, test1.equals(new Duration(123L, DurationType.getAverageYearMonthType())));\n+        assertEquals(false, test1.equals(new Duration(123L, DurationType.getDayHourType())));\n     }\n     \n     class MockMutableDuration extends AbstractDuration {\n     //-----------------------------------------------------------------------\n     public void testAddTo1() {\n         long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, 1);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, 2);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, 4);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, 5);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, 8);\n+        expected = ISOChronology.getInstance().years().add(expected, 1);\n+        expected = ISOChronology.getInstance().months().add(expected, 2);\n+        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n+        expected = ISOChronology.getInstance().days().add(expected, 4);\n+        expected = ISOChronology.getInstance().hours().add(expected, 5);\n+        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n+        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n+        expected = ISOChronology.getInstance().millis().add(expected, 8);\n         \n         MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n         long added = test.addTo(TEST_TIME_NOW, 1);\n     }\n     \n     public void testAddTo2() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance().years().add(expected, -2);\n+        expected = ISOChronology.getInstance().months().add(expected, -4);\n+        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance().days().add(expected, -8);\n+        expected = ISOChronology.getInstance().hours().add(expected, -10);\n+        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance().millis().add(expected, -16);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, -2);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo3() {\n         long expected = TEST_TIME_NOW;\n         expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n         expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n         expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n         expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n         \n-        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n         long added = test.addTo(TEST_TIME_NOW, -2);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo4() {\n+        long expected = TEST_TIME_NOW;\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        long added = test.addTo(TEST_TIME_NOW, 0);\n+        assertEquals(expected, added);\n+    }\n+    \n+    public void testAddTo5() {\n+        long expected = TEST_TIME_NOW + 100L;\n+        MutableDuration test = new MutableDuration(100L);\n+        long added = test.addTo(TEST_TIME_NOW, 1);\n         assertEquals(expected, added);\n     }\n     \n         expected = ISOChronology.getInstance().seconds().add(expected, -14);\n         expected = ISOChronology.getInstance().millis().add(expected, -16);\n         \n-        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());  // local specified so use it\n         assertEquals(expected, added);\n     }\n     \n     public void testAddToWithChronology3() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so drop back to duration (UTC)\n+        assertEquals(expected, added);\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testAddToRI1() {\n         long expected = TEST_TIME_NOW;\n         expected = ISOChronology.getInstance().years().add(expected, 1);\n         expected = ISOChronology.getInstance().months().add(expected, 2);\n         expected = ISOChronology.getInstance().millis().add(expected, 8);\n         \n         MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 1, null);\n-        assertEquals(expected, added);\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddToRI1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, 1);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, 2);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, 4);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, 5);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, 8);\n-        \n-        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n-        Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's UTC\n+        Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)\n         assertEquals(expected, added.getMillis());\n     }\n     \n         expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n         expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n         \n-        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n-        Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's UTC\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)\n         assertEquals(expected, added.getMillis());\n     }\n     \n         expected = ISOChronology.getInstance().seconds().add(expected, -14);\n         expected = ISOChronology.getInstance().millis().add(expected, -16);\n         \n-        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n         Instant added = test.addTo(new DateTime(), -2);  // DateTime has local time zone\n         assertEquals(expected, added.getMillis());\n     }\n     \n     public void testAddToRI4() {\n         long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, 1);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, 2);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, 4);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, 5);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, 8);\n-        \n-        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n-        Instant added = test.addTo(null, 1);  // null has no time zone, uses duration's UTC\n+        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n+        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n+        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n+        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n+        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n+        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n+        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n+        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n+        \n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n+        Instant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)\n         assertEquals(expected, added.getMillis());\n     }\n     \n         expected = ISOChronology.getInstance().seconds().add(expected, -14);\n         expected = ISOChronology.getInstance().millis().add(expected, -16);\n         \n-        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutableDuration test = new MutableDuration(1, 2, 3, 4, 5, 6, 7, 8, DurationType.getAllType(ISOChronology.getInstanceUTC()));\n         MutableDateTime mdt = new MutableDateTime();\n-        test.addInto(mdt, -2);\n+        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n         assertEquals(expected, mdt.getMillis());\n     }\n     \n--- a/JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDuration_Constructors.java\n     }\n \n     public void testConstructor_8int__DurationType2() throws Throwable {\n-        MutableDuration test = new MutableDuration(0, 0, 0, 4, 5, 6, 7, 8, DurationType.getDayHourType());\n+        MutableDuration test = new MutableDuration(0, 0, 0, 0, 5, 6, 7, 8, DurationType.getDayHourType());\n         assertEquals(DurationType.getDayHourType(), test.getDurationType());\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n-        assertEquals(4, test.getDays());\n+        assertEquals(0, test.getDays());\n         assertEquals(5, test.getHours());\n         assertEquals(6, test.getMinutes());\n         assertEquals(7, test.getSeconds());\n         assertEquals(8, test.getMillis());\n         assertEquals(true, test.isPrecise());\n-        assertEquals(4 * DateTimeConstants.MILLIS_PER_DAY +\n+        assertEquals(\n             5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n             7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n     }\n--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n             public boolean isPrecise(Object object) {return false;}\n             public long getDurationMillis(Object object) {return 0;}\n             public void setInto(ReadWritableDuration duration, Object object) {}\n-            public DurationType getDurationType(Object object) {return null;}\n+            public DurationType getDurationType(Object object, boolean tmm) {return null;}\n             public Class getSupportedType() {return Boolean.class;}\n         };\n         try {\n             public boolean isPrecise(Object object) {return false;}\n             public long getDurationMillis(Object object) {return 0;}\n             public void setInto(ReadWritableDuration duration, Object object) {}\n-            public DurationType getDurationType(Object object) {return null;}\n+            public DurationType getDurationType(Object object, boolean tmm) {return null;}\n             public Class getSupportedType() {return String.class;}\n         };\n         try {\n             public boolean isPrecise(Object object) {return false;}\n             public long getDurationMillis(Object object) {return 0;}\n             public void setInto(ReadWritableDuration duration, Object object) {}\n-            public DurationType getDurationType(Object object) {return null;}\n+            public DurationType getDurationType(Object object, boolean tmm) {return null;}\n             public Class getSupportedType() {return Boolean.class;}\n         };\n         DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(c);\n--- a/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestLongConverter.java\n     }\n \n     public void testGetDurationType_Object() throws Exception {\n-        assertEquals(DurationType.getMillisType(), LongConverter.INSTANCE.getDurationType(new Long(123L)));\n+        assertEquals(DurationType.getAllType(),\n+            LongConverter.INSTANCE.getDurationType(new Long(123L), false));\n+        assertEquals(DurationType.getPreciseAllType(),\n+            LongConverter.INSTANCE.getDurationType(new Long(123L), true));\n     }\n \n     public void testIsPrecise_Object() throws Exception {\n--- a/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestNullConverter.java\n     }\n \n     public void testGetDurationType_Object() throws Exception {\n-        assertEquals(null, NullConverter.INSTANCE.getDurationType(null));\n+        assertEquals(DurationType.getAllType(),\n+            NullConverter.INSTANCE.getDurationType(null, false));\n+        assertEquals(DurationType.getPreciseAllType(),\n+            NullConverter.INSTANCE.getDurationType(null, true));\n     }\n \n     public void testIsPrecise_Object() throws Exception {\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableDurationConverter.java\n import org.joda.time.DateTimeZone;\n import org.joda.time.Duration;\n import org.joda.time.DurationType;\n+import org.joda.time.MillisDuration;\n import org.joda.time.MutableDuration;\n import org.joda.time.ReadableDuration;\n import org.joda.time.chrono.ISOChronology;\n     }\n \n     public void testGetDurationType_Object() throws Exception {\n-        assertEquals(DurationType.getMillisType(), ReadableDurationConverter.INSTANCE.getDurationType(new Duration(123L, DurationType.getMillisType())));\n-        assertEquals(DurationType.getAllType(), ReadableDurationConverter.INSTANCE.getDurationType(new Duration(1, 2, 0, 1, 0, 0, 0, 0)));\n+        assertEquals(DurationType.getMillisType(),\n+            ReadableDurationConverter.INSTANCE.getDurationType(\n+                new Duration(123L, DurationType.getMillisType()), false));\n+        assertEquals(DurationType.getAllType(),\n+            ReadableDurationConverter.INSTANCE.getDurationType(\n+                new Duration(1, 2, 0, 1, 0, 0, 0, 0), false));\n+        assertEquals(DurationType.getPreciseAllType(),\n+            ReadableDurationConverter.INSTANCE.getDurationType(\n+                new MillisDuration(1, 2, 0, 1, 0, 0, 0, 0), true));\n     }\n \n     public void testIsPrecise_Object() throws Exception {\n--- a/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestReadableIntervalConverter.java\n \n     public void testGetDurationType_Object() throws Exception {\n         Interval i = new Interval(0L, 123L);\n-        assertEquals(DurationType.getMillisType(), ReadableIntervalConverter.INSTANCE.getDurationType(i));\n+        assertEquals(DurationType.getAllType(),\n+            ReadableIntervalConverter.INSTANCE.getDurationType(i, false));\n+        assertEquals(DurationType.getPreciseAllType(),\n+            ReadableIntervalConverter.INSTANCE.getDurationType(i, true));\n     }\n \n     public void testIsPrecise_Object() throws Exception {\n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n     }\n \n     public void testGetDurationType_Object() throws Exception {\n-        assertEquals(DurationType.getAllType(), StringConverter.INSTANCE.getDurationType(\"P2Y6M9D\"));\n-        assertEquals(DurationType.getAllType(), StringConverter.INSTANCE.getDurationType(\"P2Y6W4D\"));\n+        assertEquals(DurationType.getAllType(),\n+            StringConverter.INSTANCE.getDurationType(\"P2Y6M9D\", false));\n+        assertEquals(DurationType.getPreciseAllType(),\n+            StringConverter.INSTANCE.getDurationType(\"P2Y6M9D\", true));\n     }\n \n     public void testIsPrecise_Object() throws Exception {", "timestamp": 1091398236, "metainfo": ""}