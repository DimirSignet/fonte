{"sha": "ee1c58b83ee157b446d8a8218ea6c5e864094d1d", "log": "Renamed undoChanges to restoreState; added safety code to computeMillis.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeParserBucket.java\n \n     /**\n      * Saves the state of this bucket, returning it in an opaque object. Call\n-     * undoChanges to undo any changes that were made since the state was\n+     * restoreState to undo any changes that were made since the state was\n      * saved. Calls to saveState may be nested.\n      *\n-     * @return opaque saved state, which may be passed to undoChanges\n+     * @return opaque saved state, which may be passed to restoreState\n      */\n     public Object saveState() {\n         if (iSavedState == null) {\n     }\n \n     /**\n-     * Undos any changes that were made to this bucket since the given state\n-     * was saved. Once the changes have been undone, they are lost. Any states\n-     * that were saved after saving the previous state are also lost.\n-     * <p>\n-     * The state object passed into this method is not lost, and it can be used\n-     * later to revert to that state again.\n+     * Restores the state of this bucket from a previously saved state. The\n+     * state object passed into this method is not consumed, and it can be used\n+     * later to restore to that state again.\n      *\n      * @param savedState opaque saved state, returned from saveState\n-     * @return true state object is valid and changes were undone\n-     */\n-    public boolean undoChanges(Object savedState) {\n+     * @return true state object is valid and state restored\n+     */\n+    public boolean restoreState(Object savedState) {\n         if (savedState instanceof SavedState) {\n-            if (((SavedState)savedState).revertState(this)) {\n+            if (((SavedState)savedState).restoreState(this)) {\n                 iSavedState = savedState;\n                 return true;\n             }\n     public long computeMillis() {\n         SavedField[] savedFields = iSavedFields;\n         int count = iSavedFieldsCount;\n+        if (iSavedFieldsShared) {\n+            iSavedFields = savedFields = (SavedField[])iSavedFields.clone();\n+            iSavedFieldsShared = false;\n+        }\n         sort(savedFields, count);\n \n         long millis = iMillis;\n             this.iSavedFieldsCount = DateTimeParserBucket.this.iSavedFieldsCount;\n         }\n \n-        boolean revertState(DateTimeParserBucket enclosing) {\n+        boolean restoreState(DateTimeParserBucket enclosing) {\n             if (enclosing != DateTimeParserBucket.this) {\n                 return false;\n             }", "timestamp": 1073779399, "metainfo": ""}