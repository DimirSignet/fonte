{"sha": "dc281ce23550136680863097623d8e5aa3bb576b", "log": "PartialInstant set method   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeField.java\n     /**\n      * Sets a value in the milliseconds supplied.\n      * <p>\n-     * The value of this field will be set. If the value is invalid, an\n-     * exception if thrown. Other fields are always unaffected.\n+     * The value of this field will be set.\n+     * If the value is invalid, an exception if thrown.\n+     * <p>\n+     * If setting this field would make other fields invalid, then those fields\n+     * may be changed. For example if the current date is the 31st January, and\n+     * the month is set to February, the day would be invalid. Instead, the day\n+     * would be changed to the closest value - the 28th/29th February as appropriate.\n      * \n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n      * @param value  the value to set, in the units of the field\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public abstract long set(long instant, int value);\n+\n+    /**\n+     * Sets a value using the specified partial instant.\n+     * <p>\n+     * The value of this field (specified by the index) will be set.\n+     * If the value is invalid, an exception if thrown.\n+     * <p>\n+     * If setting this field would make other fields invalid, then those fields\n+     * may be changed. For example if the current date is the 31st January, and\n+     * the month is set to February, the day would be invalid. Instead, the day\n+     * would be changed to the closest value - the 28th/29th February as appropriate.\n+     * \n+     * @param instant  the partial instant\n+     * @param fieldIndex  the index of this field in the instant\n+     * @param value  the value to set, in the units of the field\n+     * @return the updated milliseconds\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public abstract int[] set(PartialInstant instant, int fieldIndex, int value);\n \n     /**\n      * Sets a value in the milliseconds supplied from a human-readable, text\n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n     /**\n      * Sets a value in the milliseconds supplied.\n      * <p>\n-     * The value of this field will be set. If the value is invalid, an\n-     * exception if thrown. Other fields are always unaffected.\n+     * The value of this field will be set.\n+     * If the value is invalid, an exception if thrown.\n+     * <p>\n+     * If setting this field would make other fields invalid, then those fields\n+     * may be changed. For example if the current date is the 31st January, and\n+     * the month is set to February, the day would be invalid. Instead, the day\n+     * would be changed to the closest value - the 28th/29th February as appropriate.\n      * \n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to set in\n      * @param value  the value to set, in the units of the field\n      * @throws IllegalArgumentException if the value is invalid\n      */\n     public abstract long set(long instant, int value);\n+\n+    /**\n+     * Sets a value using the specified partial instant.\n+     * <p>\n+     * The value of this field (specified by the index) will be set.\n+     * If the value is invalid, an exception if thrown.\n+     * <p>\n+     * If setting this field would make other fields invalid, then those fields\n+     * may be changed. For example if the current date is the 31st January, and\n+     * the month is set to February, the day would be invalid. Instead, the day\n+     * would be changed to the closest value - the 28th/29th February as appropriate.\n+     * \n+     * @param instant  the partial instant\n+     * @param fieldIndex  the index of this field in the instant\n+     * @param value  the value to set, in the units of the field\n+     * @return the updated milliseconds\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public int[] set(PartialInstant instant, int fieldIndex, int value) {\n+        FieldUtils.verifyValueBounds(this, value, getMinimumValue(), getMaximumValue());\n+        int[] array = instant.getValues();\n+        array[fieldIndex] = value;\n+        return array;\n+    }\n \n     /**\n      * Sets a value in the milliseconds supplied from a human-readable, text\n--- a/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n         return iField.set(instant, text);\n     }\n \n+    public int[] set(PartialInstant instant, int fieldIndex, int value) {\n+        return iField.set(instant, fieldIndex, value);\n+    }\n+\n     public DurationField getDurationField() {\n         return iField.getDurationField();\n     }\n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n      *\n      * @throws UnsupportedOperationException\n      */\n+    public int[] set(PartialInstant instant, int fieldIndex, int value) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n     public long set(long instant, String text, Locale locale) {\n         throw unsupported();\n     }\n--- a/JodaTime/src/java/org/joda/time/partial/PartialInstant.java\n+++ b/JodaTime/src/java/org/joda/time/partial/PartialInstant.java\n public interface PartialInstant {\n \n     /**\n+     * Gets the number of fields that this instant supports.\n+     *\n+     * @return the number of fields supported\n+     */\n+    int getFieldSize();\n+\n+    /**\n+     * Gets the field at the specified index.\n+     *\n+     * @param index  the index to retrieve\n+     * @return the field at the specified index\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    DateTimeField getField(int index);\n+\n+    /**\n      * Gets an array of the fields that this partial instant supports.\n      * <p>\n      * The fields are returned largest to smallest, for example Hour, Minute, Second.\n      *\n-     * @return the fields supported, largest to smallest\n-     */\n-    DateTimeField[] getSupportedFields();\n+     * @return the fields supported (cloned), largest to smallest\n+     */\n+    DateTimeField[] getFields();\n+\n+    /**\n+     * Gets the value at the specified index.\n+     *\n+     * @param index  the index to retrieve\n+     * @return the value of the field at the specified index\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    int getValue(int index);\n+\n+    /**\n+     * Gets an array of the value of each of the fields that this partial instant supports.\n+     * <p>\n+     * The fields are returned largest to smallest, for example Hour, Minute, Second.\n+     * Each value corresponds to the same array index as <code>getFields()</code>\n+     *\n+     * @return the current values of each field (cloned), largest to smallest\n+     */\n+    int[] getValues();\n \n     /**\n      * Gets the chronology of the partial which is never null.\n--- a/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n     private static final long serialVersionUID = 3633353405803318660L;\n \n     /** The index of the hourOfDay field in the field array */\n-    private static final int HOUR_OF_DAY = 0;\n+    public static final int HOUR_OF_DAY = 0;\n     /** The index of the minuteOfHour field in the field array */\n-    private static final int MINUTE_OF_HOUR = 1;\n+    public static final int MINUTE_OF_HOUR = 1;\n     /** The index of the secondOfMinute field in the field array */\n-    private static final int SECOND_OF_MINUTE = 2;\n+    public static final int SECOND_OF_MINUTE = 2;\n     /** The index of the millisOfSecond field in the field array */\n-    private static final int MILLIS_OF_SECOND = 3;\n+    public static final int MILLIS_OF_SECOND = 3;\n \n     /** The chronology in use */\n     private final Chronology iChronology;\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Gets the number of fields in TimeOfDay.\n+     * \n+     * @return the field count\n+     */\n+    public int getFieldSize() {\n+        return 4;\n+    }\n+\n+    /**\n      * Gets the field at the specifed index.\n      * \n      * @param index  the index\n      * @return the field\n-     */\n-    DateTimeField getField(int index) {\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    public DateTimeField getField(int index) {\n         switch (index) {\n             case HOUR_OF_DAY:\n                 return iChronology.hourOfDay();\n             case MILLIS_OF_SECOND:\n                 return iChronology.millisOfSecond();\n             default:\n-                throw new IllegalArgumentException();\n-        }\n-    }\n-    \n+                throw new IllegalArgumentException(Integer.toString(index));\n+        }\n+    }\n+\n     /**\n      * Gets the value of the field at the specifed index.\n      * \n      * @param index  the index\n      * @return the value\n-     */\n-    int getValue(int index) {\n+     * @throws IndexOutOfBoundsException if the index is invalid\n+     */\n+    public int getValue(int index) {\n+        if (index < 0 || index > 4) {\n+            throw new IllegalArgumentException(Integer.toString(index));\n+        }\n         return iValues[index];\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Gets an array of the fields that this partial instant supports.\n      * <p>\n      * The fields are returned largest to smallest, for example Hour, Minute, Second.\n      *\n-     * @return the fields supported, largest to smallest\n-     */\n-    public DateTimeField[] getSupportedFields() {\n+     * @return the fields supported (cloned), largest to smallest\n+     */\n+    public DateTimeField[] getFields() {\n         return new DateTimeField[] {\n             iChronology.hourOfDay(),\n             iChronology.minuteOfHour(),\n             iChronology.secondOfMinute(),\n             iChronology.millisOfSecond(),\n         };\n+    }\n+\n+    /**\n+     * Gets an array of the value of each of the fields that this partial instant supports.\n+     * <p>\n+     * The fields are returned largest to smallest, for example Hour, Minute, Second.\n+     * Each value corresponds to the same array index as <code>getFields()</code>\n+     *\n+     * @return the current values of each field (cloned), largest to smallest\n+     */\n+    public int[] getValues() {\n+        return (int[]) iValues.clone();\n     }\n \n     /**\n //            return new TimeOfDay(getInstant(), newValues);\n //        }\n //\n-//        //-----------------------------------------------------------------------\n-//        /**\n-//         * Sets this field in a copy of the TimeOfDay.\n-//         * <p>\n-//         * The TimeOfDay attached to this property is unchanged by this call.\n-//         * \n-//         * @param value  the value to set the field in the copy to\n-//         * @return a copy of the TimeOfDay with the field value changed\n-//         * @throws IllegalArgumentException if the value isn't valid\n-//         */\n-//        public TimeOfDay setCopy(int value) {\n-//            int[] newValues = getField().set(getInstant(), value);\n-//            return new TimeOfDay(getInstant(), newValues);\n-//        }\n-//    \n+        //-----------------------------------------------------------------------\n+        /**\n+         * Sets this field in a copy of the TimeOfDay.\n+         * <p>\n+         * The TimeOfDay attached to this property is unchanged by this call.\n+         * \n+         * @param value  the value to set the field in the copy to\n+         * @return a copy of the TimeOfDay with the field value changed\n+         * @throws IllegalArgumentException if the value isn't valid\n+         */\n+        public TimeOfDay setCopy(int value) {\n+            int[] newValues = getField().set(iInstant, iFieldIndex, value);\n+            return new TimeOfDay(iInstant, newValues);\n+        }\n+\n //        /**\n //         * Sets this field in a copy of the TimeOfDay to a parsed text value.\n //         * <p>\n--- a/JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java\n+++ b/JodaTime/src/test/org/joda/test/time/partial/TestTimeOfDay.java\n         assertEquals(40, test.getMillisOfSecond());\n     }\n \n-    public void testGetField() {\n+    public void testGet() {\n         TimeOfDay test = new TimeOfDay();\n         assertEquals(10, test.get(ISOChronology.getInstance().hourOfDay()));\n         assertEquals(20, test.get(ISOChronology.getInstance().minuteOfHour()));\n //        } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testGetSupportedFields() {\n-        TimeOfDay test = new TimeOfDay();\n-        DateTimeField[] fields = test.getSupportedFields();\n+    public void testGetFieldSize() {\n+        TimeOfDay test = new TimeOfDay();\n+        assertEquals(4, test.getFieldSize());\n+    }\n+\n+    public void testGetField() {\n+        TimeOfDay test = new TimeOfDay();\n+        assertSame(ISOChronology.getInstance().hourOfDay(), test.getField(0));\n+        assertSame(ISOChronology.getInstance().minuteOfHour(), test.getField(1));\n+        assertSame(ISOChronology.getInstance().secondOfMinute(), test.getField(2));\n+        assertSame(ISOChronology.getInstance().millisOfSecond(), test.getField(3));\n+        try {\n+            test.getField(-1);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.getField(5);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetFields() {\n+        TimeOfDay test = new TimeOfDay();\n+        DateTimeField[] fields = test.getFields();\n         assertSame(ISOChronology.getInstance().hourOfDay(), fields[0]);\n         assertSame(ISOChronology.getInstance().minuteOfHour(), fields[1]);\n         assertSame(ISOChronology.getInstance().secondOfMinute(), fields[2]);\n         assertSame(ISOChronology.getInstance().millisOfSecond(), fields[3]);\n+    }\n+\n+    public void testGetValue() {\n+        TimeOfDay test = new TimeOfDay();\n+        assertEquals(10, test.getValue(0));\n+        assertEquals(20, test.getValue(1));\n+        assertEquals(30, test.getValue(2));\n+        assertEquals(40, test.getValue(3));\n+        try {\n+            test.getValue(-1);\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            test.getValue(5);\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetValues() {\n+        TimeOfDay test = new TimeOfDay();\n+        int[] values = test.getValues();\n+        assertEquals(10, values[0]);\n+        assertEquals(20, values[1]);\n+        assertEquals(30, values[2]);\n+        assertEquals(40, values[3]);\n     }\n \n     public void testIsSupported() {\n         assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n     }\n \n+    public void testPropertySet() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay set = test.hourOfDay().setCopy(12);\n+        assertEquals(12, set.getHourOfDay());\n+        assertEquals(20, set.getMinuteOfHour());\n+        assertEquals(30, set.getSecondOfMinute());\n+        assertEquals(40, set.getMillisOfSecond());\n+    }\n+\n }", "timestamp": 1084720310, "metainfo": ""}