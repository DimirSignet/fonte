{"sha": "d512ea4873cce39d2289940fe379aa63562a6ef3", "log": "Added withDateTimeZoneMoved method.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractInstant.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInstant.java\n     }\n \n     /**\n-     * Gets the time zone of the datetime from the chronology.\n+     * Gets the time zone of the datetime from the chronology, or null if there\n+     * isn't any chronology.\n      * \n      * @return the DateTimeZone that the datetime is using\n      */\n     }\n \n     /**\n-     * Gets a copy of this instant with a different time zone.\n+     * Gets a copy of this instant with a different time zone, preserving the\n+     * millisecond instant.\n      * <p>\n      * The returned object will be a new instance of the same implementation\n      * type. Only the time zone of the chronology will change, the millis are\n      *\n      * @param newDateTimeZone  the new time zone\n      * @return a copy of this instant with a different time zone\n+     * @see #withDateTimeZoneMoved\n      */\n     public ReadableInstant withDateTimeZone(DateTimeZone newDateTimeZone) {\n-        Chronology newChronology = getChronology();\n-        newChronology = newChronology == null ? ISOChronology.getInstance(newDateTimeZone)\n-            : newChronology.withDateTimeZone(newDateTimeZone);\n-        return withChronology(newChronology);\n+        final Chronology originalChrono = getChronology();\n+        if (originalChrono == null) {\n+            // Without an original chronology, no new time zone can be\n+            // set. Call withMillis to allow subclass to decide if a clone\n+            // should be made or not.\n+            return withMillis(getMillis());\n+        }\n+        return withChronology(originalChrono.withDateTimeZone(newDateTimeZone));\n+    }\n+\n+    /**\n+     * Gets a copy of this instant with a different time zone, preserving the\n+     * field values.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation\n+     * type. Moving the time zone alters the millisecond value of this instant\n+     * such that it is relative to the new time zone. Immutable subclasses may\n+     * return <code>this</code> if appropriate.\n+     *\n+     * @param newDateTimeZone  the new time zone\n+     * @return a copy of this instant with a different time zone\n+     * @see #withDateTimeZone\n+     */\n+    public ReadableInstant withDateTimeZoneMoved(DateTimeZone newDateTimeZone) {\n+        final long originalMillis = getMillis();\n+        final Chronology originalChrono = getChronology();\n+        final DateTimeZone originalZone;\n+        if (originalChrono == null || (originalZone = originalChrono.getDateTimeZone()) == null) {\n+            // Without an original chronology or time zone, no new time zone\n+            // can be set. Call withMillis to allow subclass to decide if a\n+            // clone should be made or not.\n+            return withMillis(originalMillis);\n+        }\n+\n+        ReadableInstant newInstant = withChronology(originalChrono.withDateTimeZone(newDateTimeZone));\n+        newDateTimeZone = newInstant.getDateTimeZone();\n+\n+        if (newDateTimeZone == null || newDateTimeZone == originalZone) {\n+            // New time zone didn't stick or didn't change. Skip millis adjustment.\n+            return newInstant;\n+        }\n+\n+        long newMillis = originalMillis + originalZone.getOffset(originalMillis);\n+        newMillis -= newDateTimeZone.getOffsetFromLocal(newMillis);\n+\n+        return newInstant.withMillis(newMillis);\n     }\n \n     // Conversion\n--- a/JodaTime/src/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/java/org/joda/time/Instant.java\n         return this;\n     }\n \n+    /**\n+     * Since Instant does not support time zones, this method always returns\n+     * <code>this</code>.\n+     *\n+     * @param newDateTimeZone  ignored\n+     * @return this\n+     */\n+    public ReadableInstant withDateTimeZoneMoved(DateTimeZone newDateTimeZone) {\n+        return this;\n+    }\n+\n     // Accessors\n     //-----------------------------------------------------------------------\n     /**\n--- a/JodaTime/src/java/org/joda/time/ReadableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadableInstant.java\n     \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of this instant with different millis.\n-     * <p>\n-     * The returned object will be a new instance of the same implementation type.\n-     * Only the millis will change, the chronology and time zone are kept.\n-     * Immutable subclasses may return <code>this</code> if appropriate.\n+     * Gets a copy of this instant with different millis, preserving the\n+     * chronology.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation\n+     * type. Only the millis will change, the chronology and time zone are\n+     * kept. Immutable implementations may return <code>this</code> if\n+     * appropriate.\n      *\n      * @param newMillis  the new millis, from 1970-01-01T00:00:00Z\n      * @return a copy of this instant with different millis\n     ReadableInstant withMillis(long newMillis);\n     \n     /**\n-     * Gets a copy of this instant with a different chronology.\n-     * <p>\n-     * The returned object will be a new instance of the same implementation type.\n-     * Only the chronology will change, the millis are kept.\n-     * Immutable subclasses may return <code>this</code> if appropriate.\n+     * Gets a copy of this instant with a different chronology, preserving the\n+     * millisecond instant.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation\n+     * type. Only the chronology will change, the millis are kept. Immutable\n+     * implementations may return <code>this</code> if appropriate.\n      *\n      * @param newChronology  the new chronology\n      * @return a copy of this instant with a different chronology\n     ReadableInstant withChronology(Chronology newChronology);\n     \n     /**\n-     * Gets a copy of this instant with a different time zone.\n+     * Gets a copy of this instant with a different time zone, preserving the\n+     * millisecond instant.\n      * <p>\n      * The returned object will be a new instance of the same implementation\n      * type. Only the time zone of the chronology will change, the millis are\n-     * kept. Immutable subclasses may return <code>this</code> if appropriate.\n+     * kept. Immutable implementations may return <code>this</code> if\n+     * appropriate.\n      *\n      * @param newDateTimeZone  the new time zone\n      * @return a copy of this instant with a different time zone\n+     * @see #withDateTimeZoneMoved\n      */\n     ReadableInstant withDateTimeZone(DateTimeZone newDateTimeZone);\n+\n+    /**\n+     * Gets a copy of this instant with a different time zone, preserving the\n+     * field values.\n+     * <p>\n+     * The returned object will be a new instance of the same implementation\n+     * type. Moving the time zone alters the millisecond value of this instant\n+     * such that it is relative to the new time zone. Immutable implementations\n+     * may return <code>this</code> if appropriate.\n+     *\n+     * @param newDateTimeZone  the new time zone\n+     * @return a copy of this instant with a different time zone\n+     * @see #withDateTimeZone\n+     */\n+    public ReadableInstant withDateTimeZoneMoved(DateTimeZone newDateTimeZone);\n \n     //-----------------------------------------------------------------------\n     /**", "timestamp": 1078636654, "metainfo": ""}