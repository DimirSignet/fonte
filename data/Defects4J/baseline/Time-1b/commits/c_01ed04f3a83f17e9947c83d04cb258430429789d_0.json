{"sha": "01ed04f3a83f17e9947c83d04cb258430429789d", "log": "Reduce logging from ZoneInfoCompiler by adding a verbose flag  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n+++ b/JodaTime/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n                         curNameKey.equals(zoneNameData[2]) &&\n                         curNameKey.equals(zoneNameData[4])) {\n                     \n-                    System.out.println(\"Fixing duplicate name key - \" + nextNameKey);\n-                    System.out.println(\"     - \" + new DateTime(trans[i], chrono) +\n-                                       \" - \" + new DateTime(trans[i + 1], chrono));\n+                    if (ZoneInfoCompiler.verbose()) {\n+                        System.out.println(\"Fixing duplicate name key - \" + nextNameKey);\n+                        System.out.println(\"     - \" + new DateTime(trans[i], chrono) +\n+                                           \" - \" + new DateTime(trans[i + 1], chrono));\n+                    }\n                     if (curOffset > nextOffset) {\n                         nameKeys[i] = (curNameKey + \"-Summer\").intern();\n                     } else if (curOffset < nextOffset) {\n             if (tailZone != null) {\n                 if (tailZone.iStartRecurrence.getNameKey()\n                     .equals(tailZone.iEndRecurrence.getNameKey())) {\n-                    System.out.println(\"Fixing duplicate recurrent name key - \" +\n-                                       tailZone.iStartRecurrence.getNameKey());\n+                    if (ZoneInfoCompiler.verbose()) {\n+                        System.out.println(\"Fixing duplicate recurrent name key - \" +\n+                                           tailZone.iStartRecurrence.getNameKey());\n+                    }\n                     if (tailZone.iStartRecurrence.getSaveMillis() > 0) {\n                         tailZone = new DSTZone(\n                             tailZone.getID(),\n--- a/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n+++ b/JodaTime/src/main/java/org/joda/time/tz/ZoneInfoCompiler.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     static Chronology cLenientISO;\n \n+    static ThreadLocal<Boolean> cVerbose = new ThreadLocal<Boolean>();\n+    static {\n+        cVerbose.set(Boolean.FALSE);\n+    }\n+\n+    /**\n+     * Gets a flag indicating that verbose logging is required.\n+     * @return true to log verbosely\n+     */\n+    public static boolean verbose() {\n+        return cVerbose.get();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     /**\n      * Launches the ZoneInfoCompiler tool.\n      *\n      * where possible options include:\n      *   -src &lt;directory&gt;    Specify where to read source files\n      *   -dst &lt;directory&gt;    Specify where to write generated files\n+     *   -verbose            Output verbosely (default false)\n      * </pre>\n      */\n     public static void main(String[] args) throws Exception {\n \n         File inputDir = null;\n         File outputDir = null;\n+        boolean verbose = false;\n \n         int i;\n         for (i=0; i<args.length; i++) {\n                     inputDir = new File(args[++i]);\n                 } else if (\"-dst\".equals(args[i])) {\n                     outputDir = new File(args[++i]);\n+                } else if (\"-verbose\".equals(args[i])) {\n+                    verbose = true;\n                 } else if (\"-?\".equals(args[i])) {\n                     printUsage();\n                     return;\n             sources[j] = inputDir == null ? new File(args[i]) : new File(inputDir, args[i]);\n         }\n \n+        cVerbose.set(verbose);\n         ZoneInfoCompiler zic = new ZoneInfoCompiler();\n         zic.compile(outputDir, sources);\n     }\n         System.out.println(\"where possible options include:\");\n         System.out.println(\"  -src <directory>    Specify where to read source files\");\n         System.out.println(\"  -dst <directory>    Specify where to write generated files\");\n+        System.out.println(\"  -verbose            Output verbosely (default false)\");\n     }\n \n     static DateTimeOfYear getStartOfYear() {\n \n         Map<String, DateTimeZone> map = new TreeMap<String, DateTimeZone>();\n \n+        System.out.println(\"Writing zoneinfo files\");\n         for (int i=0; i<iZones.size(); i++) {\n             Zone zone = iZones.get(i);\n             DateTimeZoneBuilder builder = new DateTimeZoneBuilder();\n             if (test(tz.getID(), tz)) {\n                 map.put(tz.getID(), tz);\n                 if (outputDir != null) {\n-                    System.out.println(\"Writing \" + tz.getID());\n+                    if (ZoneInfoCompiler.verbose()) {\n+                        System.out.println(\"Writing \" + tz.getID());\n+                    }\n                     File file = new File(outputDir, tz.getID());\n                     if (!file.getParentFile().exists()) {\n                         file.getParentFile().mkdirs();", "timestamp": 1282175013, "metainfo": ""}