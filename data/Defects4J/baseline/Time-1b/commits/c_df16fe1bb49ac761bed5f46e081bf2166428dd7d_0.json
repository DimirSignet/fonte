{"sha": "df16fe1bb49ac761bed5f46e081bf2166428dd7d", "log": "Add int override to withPivotYear, and tests   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatter.java\n     }\n \n     /**\n+     * Returns a new formatter that will use the specified pivot year for two\n+     * digit year parsing in preference to that stored in the parser.\n+     * <p>\n+     * This setting is useful for changing the pivot year of formats built\n+     * using a pattern - {@link DateTimeFormat#forPattern(String)}.\n+     * <p>\n+     * When parsing, this pivot year is used.\n+     * There is no effect when printing.\n+     * <p>\n+     * The pivot year enables a two digit year to be converted to a four\n+     * digit year. The pivot represents the year in the middle of the\n+     * supported range of years. Thus the full range of years that will\n+     * be built is <code>(pivot - 50) .. (pivot + 49)</code>.\n+     *\n+     * <pre>\n+     * pivot   supported range   00 is   20 is   40 is   60 is   80 is\n+     * ---------------------------------------------------------------\n+     * 1950      1900..1999      1900    1920    1940    1960    1980\n+     * 1975      1925..2024      2000    2020    1940    1960    1980\n+     * 2000      1950..2049      2000    2020    2040    1960    1980\n+     * 2025      1975..2074      2000    2020    2040    2060    1980\n+     * 2050      2000..2099      2000    2020    2040    2060    2080\n+     * </pre>\n+     *\n+     * @param pivotYear  the pivot year to use as an override when parsing\n+     * @return the new formatter\n+     * @since 1.1\n+     */\n+    public DateTimeFormatter withPivotYear(int pivotYear) {\n+        return withPivotYear(new Integer(pivotYear));\n+    }\n+\n+    /**\n      * Gets the pivot year to use as an override.\n      *\n      * @return the pivot year to use as an override\n--- a/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestDateTimeFormatter.java\n                 f.withChronology(null).withZone(NEWYORK).print(dt));\n     }\n \n-    public void testWithGetMethods() {\n+    public void testWithGetLocale() {\n         DateTimeFormatter f2 = f.withLocale(Locale.FRENCH);\n         assertEquals(Locale.FRENCH, f2.getLocale());\n         assertSame(f2, f2.withLocale(Locale.FRENCH));\n         f2 = f.withLocale(null);\n         assertEquals(null, f2.getLocale());\n         assertSame(f2, f2.withLocale(null));\n-        \n-        f2 = f.withZone(PARIS);\n+    }\n+\n+    public void testWithGetZone() {\n+        DateTimeFormatter f2 = f.withZone(PARIS);\n         assertEquals(PARIS, f2.getZone());\n         assertSame(f2, f2.withZone(PARIS));\n         \n         f2 = f.withZone(null);\n         assertEquals(null, f2.getZone());\n         assertSame(f2, f2.withZone(null));\n-        \n-        f2 = f.withChronology(BUDDHIST_PARIS);\n+    }\n+\n+    public void testWithGetChronology() {\n+        DateTimeFormatter f2 = f.withChronology(BUDDHIST_PARIS);\n         assertEquals(BUDDHIST_PARIS, f2.getChronolgy());\n         assertSame(f2, f2.withChronology(BUDDHIST_PARIS));\n         \n         f2 = f.withChronology(null);\n         assertEquals(null, f2.getChronolgy());\n         assertSame(f2, f2.withChronology(null));\n+    }\n+\n+    public void testWithGetPivotYear() {\n+        DateTimeFormatter f2 = f.withPivotYear(13);\n+        assertEquals(new Integer(13), f2.getPivotYear());\n+        assertSame(f2, f2.withPivotYear(13));\n+        \n+        f2 = f.withPivotYear(new Integer(14));\n+        assertEquals(new Integer(14), f2.getPivotYear());\n+        assertSame(f2, f2.withPivotYear(new Integer(14)));\n+        \n+        f2 = f.withPivotYear(null);\n+        assertEquals(null, f2.getPivotYear());\n+        assertSame(f2, f2.withPivotYear(null));\n     }\n \n     public void testWithGetOffsetParsedMethods() {", "timestamp": 1123107868, "metainfo": ""}