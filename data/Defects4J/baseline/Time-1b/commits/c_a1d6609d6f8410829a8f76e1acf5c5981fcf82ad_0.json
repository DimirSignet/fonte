{"sha": "a1d6609d6f8410829a8f76e1acf5c5981fcf82ad", "log": "More tests for MutableDateTime   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestMutableDateTime_Basics.suite());\n         suite.addTest(TestMutableDateTime_Sets.suite());\n         suite.addTest(TestMutableDateTime_Adds.suite());\n+        suite.addTest(TestMutableDateTime_Properties.suite());\n         \n         suite.addTest(TestDateMidnight_Constructors.suite());\n         suite.addTest(TestDateMidnight_Basics.suite());\n--- a/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n         assertEquals(false, test1.hashCode() == test3.hashCode());\n         assertEquals(false, test2.hashCode() == test3.hashCode());\n         \n+        DateTime test4 = new DateTime(TEST_TIME2);\n+        assertEquals(true, test4.equals(test3));\n+        assertEquals(true, test3.equals(test4));\n+        assertEquals(false, test4.equals(test1));\n+        assertEquals(false, test1.equals(test4));\n+        assertEquals(true, test3.hashCode() == test4.hashCode());\n+        assertEquals(false, test1.hashCode() == test4.hashCode());\n+        \n+        MutableDateTime test5 = new MutableDateTime(TEST_TIME2);\n+        test5.setRounding(ISOChronology.getInstance().millisOfSecond());\n+        assertEquals(true, test5.equals(test3));\n+        assertEquals(true, test5.equals(test4));\n+        assertEquals(true, test3.equals(test5));\n+        assertEquals(true, test4.equals(test5));\n+        assertEquals(true, test3.hashCode() == test5.hashCode());\n+        assertEquals(true, test4.hashCode() == test5.hashCode());\n+        \n         assertEquals(false, test1.equals(\"Hello\"));\n         assertEquals(true, test1.equals(new MockInstant()));\n         assertEquals(false, test1.equals(new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance())));\n         assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n     }\n \n+    public void testClone() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = (MutableDateTime) test.clone();\n+        assertEquals(true, test.equals(result));\n+        assertEquals(true, test != result);\n+    }\n+\n+    public void testCopy() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.copy();\n+        assertEquals(true, test.equals(result));\n+        assertEquals(true, test != result);\n+    }\n+\n+    public void testRounding1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay());\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+    }\n+\n+    public void testRounding2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING);\n+        assertEquals(\"2002-06-09T06:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+    }\n+\n+    public void testRounding3() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_CEILING);\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_HALF_CEILING, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_CEILING);\n+        assertEquals(\"2002-06-09T06:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testRounding4() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR);\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_HALF_FLOOR, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_FLOOR);\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testRounding5() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_EVEN);\n+        assertEquals(\"2002-06-09T05:00:00.000+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_HALF_EVEN, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test = new MutableDateTime(2002, 6, 9, 5, 30, 0, 0);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_EVEN);\n+        assertEquals(\"2002-06-09T06:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2002, 6, 9, 4, 30, 0, 0);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_HALF_EVEN);\n+        assertEquals(\"2002-06-09T04:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testRounding6() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE);\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+    }\n+\n+    public void testRounding7() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setRounding(ISOChronology.getInstance().hourOfDay(), -1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testRounding8() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+        \n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_CEILING);\n+        assertEquals(MutableDateTime.ROUND_CEILING, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test.setRounding(ISOChronology.getInstance().hourOfDay(), MutableDateTime.ROUND_NONE);\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+        \n+        test.setRounding(null, -1);\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+        \n+        test.setRounding(ISOChronology.getInstance().hourOfDay());\n+        assertEquals(MutableDateTime.ROUND_FLOOR, test.getRoundingMode());\n+        assertEquals(ISOChronology.getInstance().hourOfDay(), test.getRoundingField());\n+        \n+        test.setRounding(null);\n+        assertEquals(MutableDateTime.ROUND_NONE, test.getRoundingMode());\n+        assertEquals(null, test.getRoundingField());\n+    }\n+\n }\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Properties.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for DateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDateTime_Properties extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05 Fri\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06 Tue\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Properties.class);\n+    }\n+\n+    public TestMutableDateTime_Properties(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetEra() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().era(), test.era().getField());\n+        assertEquals(\"era\", test.era().getName());\n+        assertEquals(\"Property[era]\", test.era().toString());\n+        assertSame(test, test.era().getReadableInstant());\n+        assertEquals(1, test.era().get());\n+        assertEquals(\"AD\", test.era().getAsText());\n+        assertEquals(\"ap. J.-C.\", test.era().getAsText(Locale.FRENCH));\n+        assertEquals(\"AD\", test.era().getAsShortText());\n+        assertEquals(\"ap. J.-C.\", test.era().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().eras(), test.era().getDurationField());\n+        assertEquals(null, test.era().getRangeDurationField());\n+        assertEquals(2, test.era().getMaximumTextLength(null));\n+        assertEquals(9, test.era().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(2, test.era().getMaximumShortTextLength(null));\n+        assertEquals(9, test.era().getMaximumShortTextLength(Locale.FRENCH));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfEra() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().yearOfEra(), test.yearOfEra().getField());\n+        assertEquals(\"yearOfEra\", test.yearOfEra().getName());\n+        assertEquals(\"Property[yearOfEra]\", test.yearOfEra().toString());\n+        assertSame(test, test.yearOfEra().getReadableInstant());\n+        assertEquals(2004, test.yearOfEra().get());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField());\n+        assertEquals(null, test.yearOfEra().getRangeDurationField());\n+        assertEquals(9, test.yearOfEra().getMaximumTextLength(null));\n+        assertEquals(9, test.yearOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetCenturyOfEra() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField());\n+        assertEquals(\"centuryOfEra\", test.centuryOfEra().getName());\n+        assertEquals(\"Property[centuryOfEra]\", test.centuryOfEra().toString());\n+        assertSame(test, test.centuryOfEra().getReadableInstant());\n+        assertEquals(20, test.centuryOfEra().get());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField());\n+        assertEquals(null, test.centuryOfEra().getRangeDurationField());\n+        assertEquals(7, test.centuryOfEra().getMaximumTextLength(null));\n+        assertEquals(7, test.centuryOfEra().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYearOfCentury() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField());\n+        assertEquals(\"yearOfCentury\", test.yearOfCentury().getName());\n+        assertEquals(\"Property[yearOfCentury]\", test.yearOfCentury().toString());\n+        assertSame(test, test.yearOfCentury().getReadableInstant());\n+        assertEquals(4, test.yearOfCentury().get());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText(Locale.FRENCH));\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField());\n+        assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField());\n+        assertEquals(2, test.yearOfCentury().getMaximumTextLength(null));\n+        assertEquals(2, test.yearOfCentury().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().weekyear(), test.weekyear().getField());\n+        assertEquals(\"weekyear\", test.weekyear().getName());\n+        assertEquals(\"Property[weekyear]\", test.weekyear().toString());\n+        assertSame(test, test.weekyear().getReadableInstant());\n+        assertEquals(2004, test.weekyear().get());\n+        assertEquals(\"2004\", test.weekyear().getAsText());\n+        assertEquals(\"2004\", test.weekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.weekyear().getAsShortText());\n+        assertEquals(\"2004\", test.weekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().weekyears(), test.weekyear().getDurationField());\n+        assertEquals(null, test.weekyear().getRangeDurationField());\n+        assertEquals(9, test.weekyear().getMaximumTextLength(null));\n+        assertEquals(9, test.weekyear().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().year(), test.year().getField());\n+        assertEquals(\"year\", test.year().getName());\n+        assertEquals(\"Property[year]\", test.year().toString());\n+        assertSame(test, test.year().getReadableInstant());\n+        assertEquals(2004, test.year().get());\n+        assertEquals(\"2004\", test.year().getAsText());\n+        assertEquals(\"2004\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.year().getAsShortText());\n+        assertEquals(\"2004\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().years(), test.year().getDurationField());\n+        assertEquals(null, test.year().getRangeDurationField());\n+        assertEquals(9, test.year().getMaximumTextLength(null));\n+        assertEquals(9, test.year().getMaximumShortTextLength(null));\n+        assertEquals(-292275054, test.year().getMinimumValue());\n+        assertEquals(-292275054, test.year().getMinimumValueOverall());\n+        assertEquals(292277023, test.year().getMaximumValue());\n+        assertEquals(292277023, test.year().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.year().add(9);\n+        assertEquals(\"2013-06-09T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.year().addWrapField(9);\n+        assertEquals(\"2013-06-09T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.year().set(1960);\n+        assertEquals(\"1960-06-09T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetTextYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.year().set(\"1960\");\n+        assertEquals(\"1960-06-09T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n+        assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n+        assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n+        assertSame(test, test.monthOfYear().getReadableInstant());\n+        assertEquals(6, test.monthOfYear().get());\n+        assertEquals(\"June\", test.monthOfYear().getAsText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"Jun\", test.monthOfYear().getAsShortText());\n+        assertEquals(\"juin\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().months(), test.monthOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n+        assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n+        test = new MutableDateTime(2004, 7, 9, 0, 0, 0, 0);\n+        assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+        assertEquals(1, test.monthOfYear().getMinimumValue());\n+        assertEquals(1, test.monthOfYear().getMinimumValueOverall());\n+        assertEquals(12, test.monthOfYear().getMaximumValue());\n+        assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n+    }\n+\n+    public void testPropertyAddMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().add(6);\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().addWrapField(8);\n+        assertEquals(\"2004-02-09T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().set(12);\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetTextMonthOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().set(\"12\");\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().set(\"December\");\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.monthOfYear().set(\"Dec\");\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n+        assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n+        assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n+        assertSame(test, test.dayOfMonth().getReadableInstant());\n+        assertEquals(9, test.dayOfMonth().get());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsText(Locale.FRENCH));\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText());\n+        assertEquals(\"9\", test.dayOfMonth().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfMonth().getDurationField());\n+        assertEquals(test.getChronology().months(), test.dayOfMonth().getRangeDurationField());\n+        assertEquals(2, test.dayOfMonth().getMaximumTextLength(null));\n+        assertEquals(2, test.dayOfMonth().getMaximumShortTextLength(null));\n+        assertEquals(1, test.dayOfMonth().getMinimumValue());\n+        assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n+        assertEquals(30, test.dayOfMonth().getMaximumValue());\n+        assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n+        assertEquals(false, test.dayOfMonth().isLeap());\n+        assertEquals(0, test.dayOfMonth().getLeapAmount());\n+        assertEquals(null, test.dayOfMonth().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfMonth().add(9);\n+        assertEquals(\"2004-06-18T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfMonth().addWrapField(22);\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfMonth().set(12);\n+        assertEquals(\"2004-06-12T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetTextDayOfMonth() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfMonth().set(\"12\");\n+        assertEquals(\"2004-06-12T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfYear() {\n+        // 31+29+31+30+31+9 = 161\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfYear(), test.dayOfYear().getField());\n+        assertEquals(\"dayOfYear\", test.dayOfYear().getName());\n+        assertEquals(\"Property[dayOfYear]\", test.dayOfYear().toString());\n+        assertSame(test, test.dayOfYear().getReadableInstant());\n+        assertEquals(161, test.dayOfYear().get());\n+        assertEquals(\"161\", test.dayOfYear().getAsText());\n+        assertEquals(\"161\", test.dayOfYear().getAsText(Locale.FRENCH));\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText());\n+        assertEquals(\"161\", test.dayOfYear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfYear().getDurationField());\n+        assertEquals(test.getChronology().years(), test.dayOfYear().getRangeDurationField());\n+        assertEquals(3, test.dayOfYear().getMaximumTextLength(null));\n+        assertEquals(3, test.dayOfYear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.dayOfYear().isLeap());\n+        assertEquals(0, test.dayOfYear().getLeapAmount());\n+        assertEquals(null, test.dayOfYear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddDayOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfYear().add(9);\n+        assertEquals(\"2004-06-18T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfYear().addWrapField(206);\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetDayOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfYear().set(12);\n+        assertEquals(\"2004-01-12T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetTextDayOfYear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfYear().set(\"12\");\n+        assertEquals(\"2004-01-12T00:00:00.000Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetWeekOfWeekyear() {\n+        // 2002-01-01 = Thu\n+        // 2002-12-31 = Thu (+364 days)\n+        // 2003-12-30 = Thu (+364 days)\n+        // 2004-01-03 = Mon             W1\n+        // 2004-01-31 = Mon (+28 days)  W5\n+        // 2004-02-28 = Mon (+28 days)  W9\n+        // 2004-03-27 = Mon (+28 days)  W13\n+        // 2004-04-24 = Mon (+28 days)  W17\n+        // 2004-05-23 = Mon (+28 days)  W21\n+        // 2004-06-05 = Mon (+14 days)  W23\n+        // 2004-06-09 = Fri\n+        // 2004-12-25 = Mon             W52\n+        // 2005-01-01 = Mon             W1\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().weekOfWeekyear(), test.weekOfWeekyear().getField());\n+        assertEquals(\"weekOfWeekyear\", test.weekOfWeekyear().getName());\n+        assertEquals(\"Property[weekOfWeekyear]\", test.weekOfWeekyear().toString());\n+        assertSame(test, test.weekOfWeekyear().getReadableInstant());\n+        assertEquals(24, test.weekOfWeekyear().get());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().weeks(), test.weekOfWeekyear().getDurationField());\n+        assertEquals(test.getChronology().weekyears(), test.weekOfWeekyear().getRangeDurationField());\n+        assertEquals(2, test.weekOfWeekyear().getMaximumTextLength(null));\n+        assertEquals(2, test.weekOfWeekyear().getMaximumShortTextLength(null));\n+        assertEquals(false, test.weekOfWeekyear().isLeap());\n+        assertEquals(0, test.weekOfWeekyear().getLeapAmount());\n+        assertEquals(null, test.weekOfWeekyear().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddWeekOfWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0);\n+        test.weekOfWeekyear().add(1);\n+        assertEquals(\"2004-06-14T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldWeekOfWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0);\n+        test.weekOfWeekyear().addWrapField(30);\n+        assertEquals(\"2003-12-29T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetWeekOfWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0);\n+        test.weekOfWeekyear().set(4);\n+        assertEquals(\"2004-01-19T00:00:00.000Z\", test.toString());\n+    }\n+\n+    public void testPropertySetTextWeekOfWeekyear() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 7, 0, 0, 0, 0);\n+        test.weekOfWeekyear().set(\"4\");\n+        assertEquals(\"2004-01-19T00:00:00.000Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n+        assertEquals(\"dayOfWeek\", test.dayOfWeek().getName());\n+        assertEquals(\"Property[dayOfWeek]\", test.dayOfWeek().toString());\n+        assertSame(test, test.dayOfWeek().getReadableInstant());\n+        assertEquals(3, test.dayOfWeek().get());\n+        assertEquals(\"Wednesday\", test.dayOfWeek().getAsText());\n+        assertEquals(\"mercredi\", test.dayOfWeek().getAsText(Locale.FRENCH));\n+        assertEquals(\"Wed\", test.dayOfWeek().getAsShortText());\n+        assertEquals(\"mer.\", test.dayOfWeek().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField());\n+        assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField());\n+        assertEquals(9, test.dayOfWeek().getMaximumTextLength(null));\n+        assertEquals(8, test.dayOfWeek().getMaximumTextLength(Locale.FRENCH));\n+        assertEquals(3, test.dayOfWeek().getMaximumShortTextLength(null));\n+        assertEquals(4, test.dayOfWeek().getMaximumShortTextLength(Locale.FRENCH));\n+        assertEquals(1, test.dayOfWeek().getMinimumValue());\n+        assertEquals(1, test.dayOfWeek().getMinimumValueOverall());\n+        assertEquals(7, test.dayOfWeek().getMaximumValue());\n+        assertEquals(7, test.dayOfWeek().getMaximumValueOverall());\n+        assertEquals(false, test.dayOfWeek().isLeap());\n+        assertEquals(0, test.dayOfWeek().getLeapAmount());\n+        assertEquals(null, test.dayOfWeek().getLeapDurationField());\n+    }\n+\n+    public void testPropertyAddDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().add(1);\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddLongDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().add(1L);\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyAddWrapFieldDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);  // Wed\n+        test.dayOfWeek().addWrapField(5);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(4);\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertySetTextDayOfWeek() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(\"4\");\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(\"Mon\");\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(\"Tuesday\");\n+        assertEquals(\"2004-06-08T00:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 0, 0, 0, 0);\n+        test.dayOfWeek().set(\"lundi\", Locale.FRENCH);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().hourOfDay(), test.hourOfDay().getField());\n+        assertEquals(\"hourOfDay\", test.hourOfDay().getName());\n+        assertEquals(\"Property[hourOfDay]\", test.hourOfDay().toString());\n+        assertSame(test, test.hourOfDay().getReadableInstant());\n+        assertEquals(13, test.hourOfDay().get());\n+        assertEquals(\"13\", test.hourOfDay().getAsText());\n+        assertEquals(\"13\", test.hourOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"13\", test.hourOfDay().getAsShortText());\n+        assertEquals(\"13\", test.hourOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().hours(), test.hourOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.hourOfDay().getRangeDurationField());\n+        assertEquals(2, test.hourOfDay().getMaximumTextLength(null));\n+        assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    public void testPropertyRoundFloorHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundFloor();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRoundCeilingHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundCeiling();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRoundHalfFloorHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundHalfFloor();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1);\n+        test.hourOfDay().roundHalfFloor();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999);\n+        test.hourOfDay().roundHalfFloor();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRoundHalfCeilingHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundHalfCeiling();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1);\n+        test.hourOfDay().roundHalfCeiling();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999);\n+        test.hourOfDay().roundHalfCeiling();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRoundHalfEvenHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        test.hourOfDay().roundHalfEven();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 14, 30, 0, 0);\n+        test.hourOfDay().roundHalfEven();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 1);\n+        test.hourOfDay().roundHalfEven();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(2004, 6, 9, 13, 29, 59, 999);\n+        test.hourOfDay().roundHalfEven();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", test.toString());\n+    }\n+\n+    public void testPropertyRemainderHourOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 30, 0, 0);\n+        assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinuteOfHour() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().minuteOfHour(), test.minuteOfHour().getField());\n+        assertEquals(\"minuteOfHour\", test.minuteOfHour().getName());\n+        assertEquals(\"Property[minuteOfHour]\", test.minuteOfHour().toString());\n+        assertSame(test, test.minuteOfHour().getReadableInstant());\n+        assertEquals(23, test.minuteOfHour().get());\n+        assertEquals(\"23\", test.minuteOfHour().getAsText());\n+        assertEquals(\"23\", test.minuteOfHour().getAsText(Locale.FRENCH));\n+        assertEquals(\"23\", test.minuteOfHour().getAsShortText());\n+        assertEquals(\"23\", test.minuteOfHour().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfHour().getDurationField());\n+        assertEquals(test.getChronology().hours(), test.minuteOfHour().getRangeDurationField());\n+        assertEquals(2, test.minuteOfHour().getMaximumTextLength(null));\n+        assertEquals(2, test.minuteOfHour().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMinuteOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().minuteOfDay(), test.minuteOfDay().getField());\n+        assertEquals(\"minuteOfDay\", test.minuteOfDay().getName());\n+        assertEquals(\"Property[minuteOfDay]\", test.minuteOfDay().toString());\n+        assertSame(test, test.minuteOfDay().getReadableInstant());\n+        assertEquals(803, test.minuteOfDay().get());\n+        assertEquals(\"803\", test.minuteOfDay().getAsText());\n+        assertEquals(\"803\", test.minuteOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"803\", test.minuteOfDay().getAsShortText());\n+        assertEquals(\"803\", test.minuteOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().minutes(), test.minuteOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.minuteOfDay().getRangeDurationField());\n+        assertEquals(4, test.minuteOfDay().getMaximumTextLength(null));\n+        assertEquals(4, test.minuteOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecondOfMinute() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().secondOfMinute(), test.secondOfMinute().getField());\n+        assertEquals(\"secondOfMinute\", test.secondOfMinute().getName());\n+        assertEquals(\"Property[secondOfMinute]\", test.secondOfMinute().toString());\n+        assertSame(test, test.secondOfMinute().getReadableInstant());\n+        assertEquals(43, test.secondOfMinute().get());\n+        assertEquals(\"43\", test.secondOfMinute().getAsText());\n+        assertEquals(\"43\", test.secondOfMinute().getAsText(Locale.FRENCH));\n+        assertEquals(\"43\", test.secondOfMinute().getAsShortText());\n+        assertEquals(\"43\", test.secondOfMinute().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfMinute().getDurationField());\n+        assertEquals(test.getChronology().minutes(), test.secondOfMinute().getRangeDurationField());\n+        assertEquals(2, test.secondOfMinute().getMaximumTextLength(null));\n+        assertEquals(2, test.secondOfMinute().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetSecondOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().secondOfDay(), test.secondOfDay().getField());\n+        assertEquals(\"secondOfDay\", test.secondOfDay().getName());\n+        assertEquals(\"Property[secondOfDay]\", test.secondOfDay().toString());\n+        assertSame(test, test.secondOfDay().getReadableInstant());\n+        assertEquals(48223, test.secondOfDay().get());\n+        assertEquals(\"48223\", test.secondOfDay().getAsText());\n+        assertEquals(\"48223\", test.secondOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"48223\", test.secondOfDay().getAsShortText());\n+        assertEquals(\"48223\", test.secondOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().seconds(), test.secondOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.secondOfDay().getRangeDurationField());\n+        assertEquals(5, test.secondOfDay().getMaximumTextLength(null));\n+        assertEquals(5, test.secondOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMillisOfSecond() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().millisOfSecond(), test.millisOfSecond().getField());\n+        assertEquals(\"millisOfSecond\", test.millisOfSecond().getName());\n+        assertEquals(\"Property[millisOfSecond]\", test.millisOfSecond().toString());\n+        assertSame(test, test.millisOfSecond().getReadableInstant());\n+        assertEquals(53, test.millisOfSecond().get());\n+        assertEquals(\"53\", test.millisOfSecond().getAsText());\n+        assertEquals(\"53\", test.millisOfSecond().getAsText(Locale.FRENCH));\n+        assertEquals(\"53\", test.millisOfSecond().getAsShortText());\n+        assertEquals(\"53\", test.millisOfSecond().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfSecond().getDurationField());\n+        assertEquals(test.getChronology().seconds(), test.millisOfSecond().getRangeDurationField());\n+        assertEquals(3, test.millisOfSecond().getMaximumTextLength(null));\n+        assertEquals(3, test.millisOfSecond().getMaximumShortTextLength(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPropertyGetMillisOfDay() {\n+        MutableDateTime test = new MutableDateTime(2004, 6, 9, 13, 23, 43, 53);\n+        assertSame(test.getChronology().millisOfDay(), test.millisOfDay().getField());\n+        assertEquals(\"millisOfDay\", test.millisOfDay().getName());\n+        assertEquals(\"Property[millisOfDay]\", test.millisOfDay().toString());\n+        assertSame(test, test.millisOfDay().getReadableInstant());\n+        assertEquals(48223053, test.millisOfDay().get());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsText());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsText(Locale.FRENCH));\n+        assertEquals(\"48223053\", test.millisOfDay().getAsShortText());\n+        assertEquals(\"48223053\", test.millisOfDay().getAsShortText(Locale.FRENCH));\n+        assertEquals(test.getChronology().millis(), test.millisOfDay().getDurationField());\n+        assertEquals(test.getChronology().days(), test.millisOfDay().getRangeDurationField());\n+        assertEquals(8, test.millisOfDay().getMaximumTextLength(null));\n+        assertEquals(8, test.millisOfDay().getMaximumShortTextLength(null));\n+    }\n+\n+}", "timestamp": 1090110257, "metainfo": ""}