{"sha": "f1a00f337d1ff7d13cd549cf847426aeb9faf734", "log": "Complete the RWInterval interface   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInterval.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Sets this interval to be the same as another.\n+     * <p>\n+     * Subclasses that wish to be immutable should override this method with an\n+     * empty implementation that is protected and final. This also ensures that\n+     * all lower subclasses are also immutable.\n+     *\n+     * @param interval  the interval to copy\n+     */\n+    protected void setInterval(ReadableInterval interval) {\n+        if (interval instanceof AbstractInterval) {\n+            AbstractInterval other = (AbstractInterval) interval;\n+            iStartMillis = other.iStartMillis;\n+            iStartInstant = other.iStartInstant;\n+            iEndMillis = other.iEndMillis;\n+            iEndInstant = other.iEndInstant;\n+            iDuration = other.iDuration;\n+        } else {\n+            iStartMillis = interval.getStartMillis();\n+            iEndMillis = interval.getEndMillis();\n+        }\n+    }\n+\n+    /**\n+     * Sets this interval from two millisecond instants.\n+     * <p>\n+     * Subclasses that wish to be immutable should override this method with an\n+     * empty implementation that is protected and final. This also ensures that\n+     * all lower subclasses are also immutable.\n+     *\n+     * @param startInstant  the start of the time interval\n+     * @param endInstant  the start of the time interval\n+     */\n+    protected void setInterval(long startInstant, long endInstant) {\n+        if (startInstant != iStartMillis || endInstant != iEndMillis) {\n+            iStartMillis = startInstant;\n+            iStartInstant = null;\n+            iEndMillis = endInstant;\n+            iEndInstant = null;\n+            iDuration = null;\n+        }\n+    }\n+\n+    /**\n+     * Sets this interval from two instants.\n+     *\n+     * @param startInstant  the start of the time interval\n+     * @param endInstant  the start of the time interval\n+     */\n+    protected void setInterval(ReadableInstant startInstant, ReadableInstant endInstant) {\n+        if (startInstant == null && endInstant == null) {\n+            long now = DateTimeUtils.currentTimeMillis();\n+            setInterval(now, now);\n+        } else if (startInstant == null) {\n+            long now = DateTimeUtils.currentTimeMillis();\n+            setInterval(now, endInstant.getMillis());\n+        } else if (startInstant == null) {\n+            long now = DateTimeUtils.currentTimeMillis();\n+            setInterval(startInstant.getMillis(), now);\n+        } else {\n+            setInterval(startInstant.getMillis(), endInstant.getMillis());\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Sets the start of this time interval.\n      * <p>\n      * Subclasses that wish to be immutable should override this method with an\n--- a/JodaTime/src/java/org/joda/time/Interval.java\n+++ b/JodaTime/src/java/org/joda/time/Interval.java\n     /**\n      * Overridden to do nothing, ensuring this class and all subclasses are immutable.\n      */\n+    public void setInterval(ReadableInterval interval) {\n+    }\n+\n+    /**\n+     * Overridden to do nothing, ensuring this class and all subclasses are immutable.\n+     */\n+    public void setInterval(long startInstant, long endInstant) {\n+    }\n+\n+    /**\n+     * Overridden to do nothing, ensuring this class and all subclasses are immutable.\n+     */\n     protected final void setStartMillis(long millisInstant) {\n     }\n \n--- a/JodaTime/src/java/org/joda/time/MutableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/MutableInterval.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Sets this interval to be the same as another.\n+     *\n+     * @param interval  the interval to copy\n+     */\n+    public void setInterval(ReadableInterval interval) {\n+        super.setInterval(interval);\n+    }\n+\n+    /**\n+     * Sets this interval from two millisecond instants.\n+     *\n+     * @param startInstant  the start of the time interval\n+     * @param endInstant  the start of the time interval\n+     */\n+    public void setInterval(long startInstant, long endInstant) {\n+        super.setInterval(startInstant, endInstant);\n+    }\n+\n+    /**\n+     * Sets this interval from two instants.\n+     *\n+     * @param startInstant  the start of the time interval\n+     * @param endInstant  the start of the time interval\n+     */\n+    public void setInterval(ReadableInstant startInstant, ReadableInstant endInstant) {\n+        super.setInterval(startInstant, endInstant);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Sets the start of this time interval.\n      *\n      * @param millisInstant  the start of the time interval,\n--- a/JodaTime/src/java/org/joda/time/ReadWritableInterval.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableInterval.java\n public interface ReadWritableInterval extends ReadableInterval {\n \n     /**\n+     * Sets this interval to be the same as another.\n+     *\n+     * @param interval  the interval to copy\n+     */\n+    void setInterval(ReadableInterval interval);\n+\n+    /**\n+     * Sets this interval from two millisecond instants.\n+     *\n+     * @param startInstant  the start of the time interval\n+     * @param endInstant  the start of the time interval\n+     */\n+    void setInterval(long startInstant, long endInstant);\n+\n+    /**\n+     * Sets this interval from two instants.\n+     *\n+     * @param startInstant  the start of the time interval\n+     * @param endInstant  the start of the time interval\n+     */\n+    void setInterval(ReadableInstant startInstant, ReadableInstant endInstant);\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Sets the start of this time interval.\n      *\n      * @param millisInstant  the start of the time interval,\n      */\n     void setStartInstant(ReadableInstant instant);\n \n+    //-----------------------------------------------------------------------\n     /** \n      * Sets the end of this time interval.\n      *\n      */\n     void setEndInstant(ReadableInstant instant);\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Sets the duration of this time interval, preserving the start instant.\n      *\n      */\n     void setDurationBeforeEnd(long millisDuration);\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Sets the duration of this time interval, preserving the start instant.\n      *\n      */\n     void setDurationBeforeEnd(ReadableDuration duration);\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Sets the period of this time interval, preserving the start instant.\n      *\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Basics.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for Instant.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableInterval_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableInterval_Basics.class);\n+    }\n+\n+    public TestMutableInterval_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetMillis() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(TEST_TIME1, test.getStartMillis());\n+        assertEquals(TEST_TIME1, test.getStartInstant().getMillis());\n+        assertEquals(TEST_TIME2, test.getEndMillis());\n+        assertEquals(TEST_TIME2, test.getEndInstant().getMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());\n+    }\n+\n+    public void testGetDuration() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.getDurationMillis());\n+        assertEquals(TEST_TIME2 - TEST_TIME1, test.getDuration().getMillis());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        Interval test1 = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval test2 = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        Interval test3 = new Interval(TEST_TIME_NOW, TEST_TIME2);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        MutableInterval test4 = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test1.equals(test4));\n+        assertEquals(true, test2.equals(test4));\n+        assertEquals(false, test3.equals(test4));\n+        assertEquals(true, test4.equals(test1));\n+        assertEquals(true, test4.equals(test2));\n+        assertEquals(false, test4.equals(test3));\n+        assertEquals(true, test1.hashCode() == test4.hashCode());\n+        assertEquals(true, test2.hashCode() == test4.hashCode());\n+        assertEquals(false, test3.hashCode() == test4.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInterval()));\n+        assertEquals(false, test1.equals(new DateTime(TEST_TIME1)));\n+    }\n+    \n+    class MockInterval extends AbstractInterval {\n+        public MockInterval() {\n+            super(TEST_TIME1, TEST_TIME2);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContains_long() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test.contains(TEST_TIME1));\n+        assertEquals(false, test.contains(TEST_TIME1 - 1));\n+        assertEquals(true, test.contains(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2));\n+        assertEquals(false, test.contains(TEST_TIME2));\n+        assertEquals(true, test.contains(TEST_TIME2 - 1));\n+    }\n+\n+    public void testContainsNow() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);\n+        assertEquals(true, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);\n+        assertEquals(false, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2);\n+        assertEquals(true, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        assertEquals(false, test.containsNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);\n+        assertEquals(true, test.containsNow());\n+    }\n+\n+    public void testContains_RI() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        assertEquals(true, test.contains(new Instant(TEST_TIME1)));\n+        assertEquals(false, test.contains(new Instant(TEST_TIME1 - 1)));\n+        assertEquals(true, test.contains(new Instant(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2)));\n+        assertEquals(false, test.contains(new Instant(TEST_TIME2)));\n+        assertEquals(true, test.contains(new Instant(TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains((ReadableInstant) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testContains_RInterval() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n+        \n+        assertEquals(true, test.contains(new Interval(TEST_TIME1, TEST_TIME2 - 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 - 1)));\n+        assertEquals(true, test.contains(new Interval(TEST_TIME2 - 2, TEST_TIME2 - 1)));\n+        \n+        assertEquals(false, test.contains(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n+        assertEquals(false, test.contains(new Interval(TEST_TIME1 - 2, TEST_TIME1 - 1)));\n+        \n+        try {\n+            test.contains((ReadableInterval) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testOverlaps_RInterval() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2)));\n+        \n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1, TEST_TIME2 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME2 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 + (TEST_TIME2 - TEST_TIME1) / 2, TEST_TIME2 + 1)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME2, TEST_TIME2 + 1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME2 - 1, TEST_TIME2 + 1)));\n+        \n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 - 1)));\n+        assertEquals(false, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1)));\n+        assertEquals(true, test.overlaps(new Interval(TEST_TIME1 - 1, TEST_TIME1 + 1)));\n+        \n+        try {\n+            test.overlaps((ReadableInterval) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsBefore_long() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(false, test.isBefore(TEST_TIME1 - 1));\n+        assertEquals(false, test.isBefore(TEST_TIME1));\n+        assertEquals(false, test.isBefore(TEST_TIME1 + 1));\n+        \n+        assertEquals(false, test.isBefore(TEST_TIME2 - 1));\n+        assertEquals(true, test.isBefore(TEST_TIME2));\n+        assertEquals(true, test.isBefore(TEST_TIME2 + 1));\n+    }\n+\n+    public void testIsBeforeNow() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 - 1);\n+        assertEquals(false, test.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2);\n+        assertEquals(true, test.isBeforeNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME2 + 1);\n+        assertEquals(true, test.isBeforeNow());\n+    }\n+\n+    public void testIsBefore_RI() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 - 1)));\n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME1)));\n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME1 + 1)));\n+        \n+        assertEquals(false, test.isBefore(new Instant(TEST_TIME2 - 1)));\n+        assertEquals(true, test.isBefore(new Instant(TEST_TIME2)));\n+        assertEquals(true, test.isBefore(new Instant(TEST_TIME2 + 1)));\n+        \n+        assertEquals(false, test.isBefore(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testIsAfter_long() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.isAfter(TEST_TIME1 - 1));\n+        assertEquals(false, test.isAfter(TEST_TIME1));\n+        assertEquals(false, test.isAfter(TEST_TIME1 + 1));\n+        \n+        assertEquals(false, test.isAfter(TEST_TIME2 - 1));\n+        assertEquals(false, test.isAfter(TEST_TIME2));\n+        assertEquals(false, test.isAfter(TEST_TIME2 + 1));\n+    }\n+\n+    public void testIsAfterNow() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 - 1);\n+        assertEquals(true, test.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1);\n+        assertEquals(false, test.isAfterNow());\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME1 + 1);\n+        assertEquals(false, test.isAfterNow());\n+    }\n+\n+    public void testIsAfter_RI() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        \n+        assertEquals(true, test.isAfter(new Instant(TEST_TIME1 - 1)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME1)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME1 + 1)));\n+        \n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 - 1)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME2)));\n+        assertEquals(false, test.isAfter(new Instant(TEST_TIME2 + 1)));\n+        \n+        assertEquals(false, test.isAfter(null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInterval1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.toInterval();\n+        assertSame(test, result);\n+    }\n+\n+    public void testToInterval2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        Interval result = test.toInterval();\n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToMutableInterval1() {\n+        Interval test = new Interval(TEST_TIME1, TEST_TIME2);\n+        MutableInterval result = test.toMutableInterval();\n+        assertEquals(test, result);\n+    }\n+\n+    public void testToMutableInterval2() {\n+        MutableInterval test = new MutableInterval(TEST_TIME1, TEST_TIME2);\n+        MutableInterval result = test.toMutableInterval();\n+        assertEquals(test, result);\n+        assertNotSame(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n+        Interval test = new Interval(dt1, dt2);\n+        \n+        Period result = test.toPeriod();\n+        assertEquals(PeriodType.getAllType(), result.getPeriodType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(2, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(4, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod_PeriodType1() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n+        Interval test = new Interval(dt1, dt2);\n+        \n+        Period result = test.toPeriod(null);\n+        assertEquals(PeriodType.getAllType(), result.getPeriodType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(2, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(4, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    public void testToPeriod_PeriodType2() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18);\n+        Interval test = new Interval(dt1, dt2);\n+        \n+        Period result = test.toPeriod(PeriodType.getYearWeekType());\n+        assertEquals(PeriodType.getYearWeekType(), result.getPeriodType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(0, result.getMonths());\n+        assertEquals(9, result.getWeeks());\n+        assertEquals(2, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    public void testToPeriod_PeriodType3() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10);\n+        DateTime dt2 = new DateTime(2005, 6, 9, 12, 14, 16, 18);\n+        Interval test = new Interval(dt1, dt2);\n+        \n+        Period result = test.toPeriod(PeriodType.getYearWeekType());\n+        assertEquals(PeriodType.getYearWeekType(), result.getPeriodType());\n+        assertEquals(1, result.getYears());\n+        assertEquals(0, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(0, result.getDays());\n+        assertEquals(5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 7, 8, 9, 10, DateTimeZone.UTC);\n+        DateTime dt2 = new DateTime(2005, 8, 13, 12, 14, 16, 18, DateTimeZone.UTC);\n+        Interval test = new Interval(dt1, dt2);\n+        assertEquals(\"2004-06-09T07:08:09.010/2005-08-13T12:14:16.018\", test.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableInterval_Constructors.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.IntervalConverter;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a JUnit test for Interval.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableInterval_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableInterval_Constructors.class);\n+    }\n+\n+    public TestMutableInterval_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() throws Throwable {\n+        MutableInterval test = new MutableInterval();\n+        assertEquals(0L, test.getStartMillis());\n+        assertEquals(0L, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_long_long2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        MutableInterval test = new MutableInterval(dt1.getMillis(), dt1.getMillis());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt1.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_long_long3() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            new MutableInterval(dt1.getMillis(), dt2.getMillis());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        Instant dt1 = new Instant(new DateTime(2004, 6, 9, 0, 0, 0, 0));\n+        Instant dt2 = new Instant(new DateTime(2005, 7, 10, 1, 1, 1, 1));\n+        MutableInterval test = new MutableInterval(dt1, dt2);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertSame(dt1, test.getStartInstant());\n+        assertSame(dt2, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = new DateTime(2000, 6, 9, 0, 0, 0, 0);\n+        MutableInterval test = new MutableInterval(dt1, (ReadableInstant) null);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI5() throws Throwable {\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval((ReadableInstant) null, dt2);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI6() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        MutableInterval test = new MutableInterval(dt1, dt1);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt1.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RI7() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        try {\n+            new MutableInterval(dt1, dt2);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RP1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP2() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().days().add(result, 3);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+        assertSame(dt, test.getStartInstant());\n+    }\n+\n+    public void testConstructor_RI_RP3() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, 6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, 3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, 1);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+        assertSame(dt, test.getStartInstant());\n+    }\n+\n+    public void testConstructor_RI_RP4() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        result = ISOChronology.getInstance().millis().add(result, 23);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP5() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadableInstant) null, (ReadablePeriod) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP6() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        MutableInterval test = new MutableInterval(dt, (ReadablePeriod) null);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP7() throws Throwable {\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, 6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n+        \n+        MutableInterval test = new MutableInterval((ReadableInstant) null, dur);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP8() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        try {\n+            new MutableInterval(dt, dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RP_RI1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI2() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().days().add(result, -3);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+        assertSame(dt, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_RP_RI3() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getAllTypeUTC());\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, -6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, -3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+        assertSame(dt, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_RP_RI4() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        result = ISOChronology.getInstance().millis().add(result, -23);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI5() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadablePeriod) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI6() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        MutableInterval test = new MutableInterval((ReadablePeriod) null, dt);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI7() throws Throwable {\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, -6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, -1);\n+        \n+        MutableInterval test = new MutableInterval(dur, (ReadableInstant) null);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI8() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 0, 0, 0, 0, 0, 0, -1);\n+        try {\n+            new MutableInterval(dur, dt);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD1() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(result - TEST_TIME_NOW);\n+        \n+        MutableInterval test = new MutableInterval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD2() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadableInstant) null, (ReadableDuration) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        MutableInterval test = new MutableInterval(dt, (ReadableDuration) null);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD4() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, 6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n+        \n+        Duration dur = new Duration(result - TEST_TIME_NOW);\n+        \n+        MutableInterval test = new MutableInterval((ReadableInstant) null, dur);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD5() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(-1);\n+        try {\n+            new MutableInterval(dt, dur);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RD_RI1() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(TEST_TIME_NOW - result);\n+        \n+        MutableInterval test = new MutableInterval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI2() throws Throwable {\n+        MutableInterval test = new MutableInterval((ReadableDuration) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        MutableInterval test = new MutableInterval((ReadableDuration) null, dt);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI4() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, -6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, -1);\n+        \n+        Duration dur = new Duration(TEST_TIME_NOW - result);\n+        \n+        MutableInterval test = new MutableInterval(dur, (ReadableInstant) null);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI5() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(-1);\n+        try {\n+            new MutableInterval(dur, dt);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval test = new MutableInterval(dt1.toString() + '/' + dt2.toString());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        Duration dur = base.getDuration();\n+        Instant start = base.getStartInstant();\n+        Instant end = base.getEndInstant();\n+        \n+        MutableInterval test = new MutableInterval(base);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertSame(dur, test.getDuration());\n+        assertSame(start, test.getStartInstant());\n+        assertSame(end, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        Duration dur = base.getDuration();\n+        Instant start = base.getStartInstant();\n+        Instant end = base.getEndInstant();\n+        \n+        MutableInterval test = new MutableInterval(base);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertSame(dur, test.getDuration());\n+        assertSame(start, test.getStartInstant());\n+        assertSame(end, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        MockInterval base = new MockInterval();\n+        MutableInterval test = new MutableInterval(base);\n+        assertEquals(base.getStartMillis(), test.getStartMillis());\n+        assertEquals(base.getEndMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object5() throws Throwable {\n+        IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(\"\");\n+        IntervalConverter conv = new IntervalConverter() {\n+            public long[] getIntervalMillis(Object object) {\n+                return null;\n+            }\n+            public void setInto(ReadWritableInterval interval, Object object) {\n+                interval.setInterval(1234L, 5678L);\n+            }\n+            public Class getSupportedType() {\n+                return String.class;\n+            }\n+        };\n+        try {\n+            ConverterManager.getInstance().addIntervalConverter(conv);\n+            DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+            DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+            MutableInterval test = new MutableInterval(dt1.toString() + '/' + dt2.toString());\n+            assertEquals(1234L, test.getStartMillis());\n+            assertEquals(5678L, test.getEndMillis());\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(oldConv);\n+        }\n+    }\n+\n+    public void testConstructor_Object6() throws Throwable {\n+        IntervalConverter oldConv = ConverterManager.getInstance().getIntervalConverter(new MutableInterval(0L, 0L));\n+        IntervalConverter conv = new IntervalConverter() {\n+            public long[] getIntervalMillis(Object object) {\n+                return null;\n+            }\n+            public void setInto(ReadWritableInterval interval, Object object) {\n+                interval.setInterval(1234L, 5678L);\n+            }\n+            public Class getSupportedType() {\n+                return ReadableInterval.class;\n+            }\n+        };\n+        try {\n+            ConverterManager.getInstance().addIntervalConverter(conv);\n+            Interval base = new Interval(-1000L, 1000L);\n+            Duration dur = base.getDuration();\n+            Instant start = base.getStartInstant();\n+            Instant end = base.getEndInstant();\n+            MutableInterval test = new MutableInterval(base);\n+            assertEquals(1234L, test.getStartMillis());\n+            assertEquals(5678L, test.getEndMillis());\n+            assertNotSame(dur, test.getDuration());\n+            assertNotSame(start, test.getStartInstant());\n+            assertNotSame(end, test.getEndInstant());\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(oldConv);\n+        }\n+    }\n+\n+    class MockInterval implements ReadableInterval {\n+        public long getStartMillis() {\n+            return 1234L;\n+        }\n+        public Instant getStartInstant() {\n+            return new Instant(1234L);\n+        }\n+        public long getEndMillis() {\n+            return 5678L;\n+        }\n+        public Instant getEndInstant() {\n+            return new Instant(5678L);\n+        }\n+        public long getDurationMillis() {\n+            return (5678L - 1234L);\n+        }\n+        public Duration getDuration() {\n+            return new Duration(5678L - 1234L);\n+        }\n+        public boolean contains(long millisInstant) {\n+            return false;\n+        }\n+        public boolean containsNow() {\n+            return false;\n+        }\n+        public boolean contains(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean contains(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean overlaps(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean isBefore(long millisInstant) {\n+            return false;\n+        }\n+        public boolean isBeforeNow() {\n+            return false;\n+        }\n+        public boolean isBefore(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean isAfter(long millisInstant) {\n+            return false;\n+        }\n+        public boolean isAfterNow() {\n+            return false;\n+        }\n+        public boolean isAfter(ReadableInstant instant) {\n+            return false;\n+        }\n+        public Interval toInterval() {\n+            return null;\n+        }\n+        public MutableInterval toMutableInterval() {\n+            return null;\n+        }\n+        public Period toPeriod() {\n+            return null;\n+        }\n+        public Period toPeriod(PeriodType type) {\n+            return null;\n+        }\n+    }\n+\n+}", "timestamp": 1092478680, "metainfo": ""}