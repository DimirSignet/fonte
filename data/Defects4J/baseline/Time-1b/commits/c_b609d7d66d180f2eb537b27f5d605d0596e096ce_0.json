{"sha": "b609d7d66d180f2eb537b27f5d605d0596e096ce", "log": "Fix GJChronology to allow some leap year dates in JulianChronology to be created [3446915]", "commit": "\n--- a/src/main/java/org/joda/time/chrono/GJChronology.java\n+++ b/src/main/java/org/joda/time/chrono/GJChronology.java\n         }\n \n         // Assume date is Gregorian.\n-        long instant = iGregorianChronology.getDateTimeMillis\n-            (year, monthOfYear, dayOfMonth,\n-             hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        long instant;\n+        try {\n+            instant = iGregorianChronology.getDateTimeMillis\n+                (year, monthOfYear, dayOfMonth,\n+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+        } catch (IllegalFieldValueException ex) {\n+            if (monthOfYear != 2 || dayOfMonth != 29) {\n+                throw ex;\n+            }\n+            instant = iGregorianChronology.getDateTimeMillis\n+                (year, monthOfYear, 28,\n+                 hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);\n+            if (instant >= iCutoverMillis) {\n+                throw ex;\n+            }\n+        }\n         if (instant < iCutoverMillis) {\n             // Maybe it's Julian.\n             instant = iJulianChronology.getDateTimeMillis\n--- a/src/test/java/org/joda/time/chrono/TestGJChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestGJChronology.java\n import org.joda.time.DateTimeZone;\n import org.joda.time.DurationField;\n import org.joda.time.DurationFieldType;\n+import org.joda.time.IllegalFieldValueException;\n import org.joda.time.Instant;\n import org.joda.time.Period;\n import org.joda.time.TimeOfDay;\n         assertEquals(\"January\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsText());\n         assertEquals(\"Jan\", new YearMonthDay(\"2005-01-01\", chrono).monthOfYear().getAsShortText());\n     }\n+\n+    public void testLeapYearRulesConstruction() {\n+        // 1500 not leap in Gregorian, but is leap in Julian\n+        DateMidnight dt = new DateMidnight(1500, 2, 29, GJChronology.getInstanceUTC());\n+        assertEquals(dt.getYear(), 1500);\n+        assertEquals(dt.getMonthOfYear(), 2);\n+        assertEquals(dt.getDayOfMonth(), 29);\n+    }\n+\n+    public void testLeapYearRulesConstructionInvalid() {\n+        // 1500 not leap in Gregorian, but is leap in Julian\n+        try {\n+            new DateMidnight(1500, 2, 30, GJChronology.getInstanceUTC());\n+            fail();\n+        } catch (IllegalFieldValueException ex) {\n+            // good\n+        }\n+    }\n+\n }", "timestamp": 1323000635, "metainfo": ""}