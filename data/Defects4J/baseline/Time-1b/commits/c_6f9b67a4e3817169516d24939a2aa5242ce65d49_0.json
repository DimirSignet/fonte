{"sha": "6f9b67a4e3817169516d24939a2aa5242ce65d49", "log": "Return DateTime not Instant from add as period is date based   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/ReadablePeriod.java\n+++ b/JodaTime/src/java/org/joda/time/ReadablePeriod.java\n     long addTo(long instant, int scalar, Chronology chrono);\n \n     /**\n-     * Adds this period to the given instant, returning a new Instant.\n+     * Adds this period to the given instant, returning a new DateTime.\n      * <p>\n      * To add just once, pass in a scalar of one. To subtract once, pass\n      * in a scalar of minus one.\n      *\n      * @param instant  the instant to add the period to\n      * @param scalar  the number of times to add the period, negative to subtract\n-     * @return instant with the original value plus this period times scalar\n+     * @return datetime with the original value plus this period times scalar\n      * @throws IllegalArgumentException if the instant is null\n      * @throws ArithmeticException if the result of the calculation is too large\n      */\n-    Instant addTo(ReadableInstant instant, int scalar);\n+    DateTime addTo(ReadableInstant instant, int scalar);\n \n     /**\n      * Adds this period into the given mutable instant.\n--- a/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractPeriod.java\n import java.io.Serializable;\n \n import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.Duration;\n-import org.joda.time.Instant;\n import org.joda.time.MutablePeriod;\n import org.joda.time.Period;\n import org.joda.time.PeriodType;\n \n     /**\n      * Adds this period to the given instant using the chronology of the specified\n-     * instant (if present), returning a new Instant.\n+     * instant (if present), returning a new DateTime.\n      * <p>\n      * To add just once, pass in a scalar of one. To subtract once, pass\n      * in a scalar of minus one.\n      *\n      * @param instant  the instant to add the period to, null means now\n      * @param scalar  the number of times to add the period, negative to subtract\n-     * @return instant with the original value plus this period times scalar\n+     * @return datetime with the original value plus this period times scalar\n      * @throws ArithmeticException if the result of the calculation is too large\n      */\n-    public Instant addTo(ReadableInstant instant, int scalar) {\n+    public DateTime addTo(ReadableInstant instant, int scalar) {\n         long instantMillis = DateTimeUtils.getInstantMillis(instant);\n         Chronology chrono = DateTimeUtils.getInstantChronology(instant, null);\n-        return new Instant(addTo(instantMillis, scalar, chrono));\n+        return new DateTime(addTo(instantMillis, scalar, chrono), chrono);\n     }\n \n     /**\n--- a/JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestMutablePeriod_Basics.java\n         expected = ISOChronology.getInstance().millis().add(expected, 8);\n         \n         MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)\n+        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)\n         assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(), added.getChronology());\n     }\n     \n     public void testAddToRI2() {\n         expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n         \n         MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)\n+        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)\n         assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(), added.getChronology());\n     }\n     \n     public void testAddToRI3() {\n         expected = ISOChronology.getInstance().millis().add(expected, -16);\n         \n         MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        Instant added = test.addTo(new DateTime(), -2);  // DateTime has local time zone\n+        DateTime added = test.addTo(new DateTime(), -2);  // DateTime has local time zone\n         assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(), added.getChronology());\n     }\n     \n     public void testAddToRI4() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);\n+        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);\n+        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);\n+        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);\n+        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);\n+        \n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n+        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone\n+        assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());\n+    }\n+    \n+    public void testAddToRI5() {\n         long expected = TEST_TIME_NOW;\n         expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n         expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n         expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n         \n         MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        Instant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)\n+        DateTime added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)\n         assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(), added.getChronology());\n     }\n     \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Basics.java\n         expected = ISOChronology.getInstance().millis().add(expected, 8);\n         \n         Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n-        Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)\n+        DateTime added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)\n         assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(), added.getChronology());\n     }\n     \n     public void testAddToRI2() {\n         expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n         \n         Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)\n+        DateTime added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)\n         assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(), added.getChronology());\n     }\n     \n     public void testAddToRI3() {\n         expected = ISOChronology.getInstance().millis().add(expected, -16);\n         \n         Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        Instant added = test.addTo(new DateTime(), -2);  // DateTime has local time zone\n+        DateTime added = test.addTo(new DateTime(), -2);  // DateTime has local time zone\n         assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(), added.getChronology());\n     }\n     \n     public void testAddToRI4() {\n+        long expected = TEST_TIME_NOW;\n+        expected = ISOChronology.getInstance(PARIS).years().add(expected, -2);\n+        expected = ISOChronology.getInstance(PARIS).months().add(expected, -4);\n+        expected = ISOChronology.getInstance(PARIS).weeks().add(expected, -6);\n+        expected = ISOChronology.getInstance(PARIS).days().add(expected, -8);\n+        expected = ISOChronology.getInstance(PARIS).hours().add(expected, -10);\n+        expected = ISOChronology.getInstance(PARIS).minutes().add(expected, -12);\n+        expected = ISOChronology.getInstance(PARIS).seconds().add(expected, -14);\n+        expected = ISOChronology.getInstance(PARIS).millis().add(expected, -16);\n+        \n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n+        DateTime added = test.addTo(new DateTime(PARIS), -2);  // DateTime has PARIS time zone\n+        assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), added.getChronology());\n+    }\n+    \n+    public void testAddToRI5() {\n         long expected = TEST_TIME_NOW;\n         expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n         expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n         expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n         \n         Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        Instant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)\n+        DateTime added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)\n         assertEquals(expected, added.getMillis());\n+        assertEquals(ISOChronology.getInstance(), added.getChronology());\n     }\n     \n     //-----------------------------------------------------------------------", "timestamp": 1093128866, "metainfo": ""}