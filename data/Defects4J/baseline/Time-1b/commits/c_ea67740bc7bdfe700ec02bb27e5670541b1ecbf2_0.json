{"sha": "ea67740bc7bdfe700ec02bb27e5670541b1ecbf2", "log": "Add support for PartialInstant field add()   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeField.java\n     public abstract long add(long instant, long value);\n \n     /**\n+     * Adds a value (which may be negative) to the partial instant,\n+     * throwing an exception if the maximum size of the instant is reached.\n+     * <p>\n+     * The value will be added to this field, overflowing into larger fields\n+     * if necessary. Smaller fields should be unaffected, except where the\n+     * result would be an invalid value for a smaller field. In this case the\n+     * smaller field is adjusted to be in range.\n+     * <p>\n+     * Partial instants only contain some fields. This may result in a maximum\n+     * possible value, such as TimeOfDay being limited to 23:59:59:999. If this\n+     * limit is breached by the add an exception is thrown.\n+     * <p>\n+     * For example, in the ISO chronology:<br>\n+     * 2000-08-20 add six months is 2000-02-20<br>\n+     * 2000-08-20 add twenty months is 2000-04-20<br>\n+     * 2000-08-20 add minus nine months is 2000-11-20<br>\n+     * 2001-01-31 add one month  is 2001-02-28<br>\n+     * 2001-01-31 add two months is 2001-03-31<br>\n+     * \n+     * @param instant  the partial instant\n+     * @param fieldIndex  the index of this field in the instant\n+     * @param values  the values of the partial instant which should be updated\n+     * @param valueToAdd  the value to add, in the units of the field\n+     * @return the passed in values\n+     * @throws IllegalArgumentException if the value is invalid or the maximum instant is reached\n+     */\n+    public abstract int[] add(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd);\n+\n+    /**\n      * Adds a value (which may be negative) to the millis value,\n      * wrapping within this field.\n      * <p>\n     public abstract int getMinimumValue(PartialInstant instant);\n \n     /**\n+     * Get the minimum value for this field using the partial instant and\n+     * the specified values.\n+     * \n+     * @param instant  the partial instant to query\n+     * @param values  the values to use\n+     * @return the minimum value for this field, in the units of the field\n+     */\n+    public abstract int getMinimumValue(PartialInstant instant, int[] values);\n+\n+    /**\n      * Get the maximum allowable value for this field.\n      * \n      * @return the maximum valid value for this field, in the units of the\n      * @return the maximum value for this field, in the units of the field\n      */\n     public abstract int getMaximumValue(PartialInstant instant);\n+\n+    /**\n+     * Get the maximum value for this field using the partial instant and\n+     * the specified values.\n+     * \n+     * @param instant  the partial instant to query\n+     * @param values  the values to use\n+     * @return the maximum value for this field, in the units of the field\n+     */\n+    public abstract int getMaximumValue(PartialInstant instant, int[] values);\n \n     /**\n      * Get the maximum text value for this field.\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticDayOfMonthDateTimeField.java\n  */\n package org.joda.time.chrono;\n \n+import org.joda.time.DateTimeField;\n import org.joda.time.DurationField;\n import org.joda.time.field.PreciseDurationDateTimeField;\n import org.joda.time.partial.PartialInstant;\n         return 30;\n     }\n \n+    public int getMaximumValue(PartialInstant instant, int[] values) {\n+        DateTimeField[] fields = instant.getFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            if (fields[i] == iChronology.monthOfYear()) {\n+                int month = values[i];\n+                if (month <= 12) {\n+                    return 30;\n+                }\n+                for (int j = 0; j < fields.length; j++) {\n+                    if (fields[j] == iChronology.year()) {\n+                        int year = values[j];\n+                        return iChronology.isLeapYear(year) ? 6 : 5;\n+                    }\n+                }\n+                return 6;\n+            }\n+        }\n+        return 30;\n+    }\n+\n     /**\n      * Serialization singleton\n      */\n--- a/JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJDayOfMonthDateTimeField.java\n  */\n package org.joda.time.chrono;\n \n+import org.joda.time.DateTimeField;\n import org.joda.time.DurationField;\n import org.joda.time.field.PreciseDurationDateTimeField;\n import org.joda.time.partial.PartialInstant;\n         return 31;\n     }\n \n+    public int getMaximumValue(PartialInstant instant, int[] values) {\n+        DateTimeField[] fields = instant.getFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            if (fields[i] == iChronology.monthOfYear()) {\n+                int month = values[i];\n+                for (int j = 0; j < fields.length; j++) {\n+                    if (fields[j] == iChronology.year()) {\n+                        int year = values[j];\n+                        return iChronology.getDaysInYearMonth(year, month);\n+                    }\n+                }\n+                return iChronology.getDaysInMonthMax(month);\n+            }\n+        }\n+        return 31;\n+    }\n+\n     protected int getMaximumValueForSet(long instant, int value) {\n         return value > 28 ? getMaximumValue(instant) : 28;\n     }\n--- a/JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJDayOfYearDateTimeField.java\n  */\n package org.joda.time.chrono;\n \n+import org.joda.time.DateTimeField;\n import org.joda.time.DurationField;\n import org.joda.time.field.PreciseDurationDateTimeField;\n import org.joda.time.partial.PartialInstant;\n         return 366;\n     }\n \n+    public int getMaximumValue(PartialInstant instant, int[] values) {\n+        DateTimeField[] fields = instant.getFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            if (fields[i] == iChronology.year()) {\n+                int year = values[i];\n+                return iChronology.getDaysInYear(year);\n+            }\n+        }\n+        return 366;\n+    }\n+\n     protected int getMaximumValueForSet(long instant, int value) {\n         return value > 365 ? getMaximumValue(instant) : 365;\n     }\n--- a/JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJWeekOfWeekyearDateTimeField.java\n package org.joda.time.chrono;\n \n import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeField;\n import org.joda.time.DurationField;\n import org.joda.time.field.PreciseDurationDateTimeField;\n import org.joda.time.partial.PartialInstant;\n         return 53;\n     }\n \n+    public int getMaximumValue(PartialInstant instant, int[] values) {\n+        DateTimeField[] fields = instant.getFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            if (fields[i] == iChronology.weekyear()) {\n+                int weekyear = values[i];\n+                return iChronology.getWeeksInYear(weekyear);\n+            }\n+        }\n+        return 53;\n+    }\n+\n     protected int getMaximumValueForSet(long instant, int value) {\n         return value > 52 ? getMaximumValue(instant) : 52;\n     }\n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n     }\n \n     /**\n+     * Adds a value (which may be negative) to the partial instant,\n+     * throwing an exception if the maximum size of the instant is reached.\n+     * <p>\n+     * The value will be added to this field, overflowing into larger fields\n+     * if necessary. Smaller fields should be unaffected, except where the\n+     * result would be an invalid value for a smaller field. In this case the\n+     * smaller field is adjusted to be in range.\n+     * <p>\n+     * Partial instants only contain some fields. This may result in a maximum\n+     * possible value, such as TimeOfDay being limited to 23:59:59:999. If this\n+     * limit is breached by the add an exception is thrown.\n+     * <p>\n+     * For example, in the ISO chronology:<br>\n+     * 2000-08-20 add six months is 2000-02-20<br>\n+     * 2000-08-20 add twenty months is 2000-04-20<br>\n+     * 2000-08-20 add minus nine months is 2000-11-20<br>\n+     * 2001-01-31 add one month  is 2001-02-28<br>\n+     * 2001-01-31 add two months is 2001-03-31<br>\n+     * \n+     * @param instant  the partial instant\n+     * @param fieldIndex  the index of this field in the instant\n+     * @param values  the values of the partial instant which should be updated\n+     * @param valueToAdd  the value to add, in the units of the field\n+     * @return the passed in values\n+     * @throws IllegalArgumentException if the value is invalid or the maximum instant is reached\n+     */\n+    public int[] add(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {\n+        // there are more efficient algorithms than this (especially for time only fields)\n+        // trouble is when dealing with days and months, so we use this technique of\n+        // adding/removing one from the larger field at a time\n+        DateTimeField nextField = null;\n+        \n+        while (valueToAdd > 0) {\n+            int max = getMaximumValue(instant, values);\n+            long proposed = values[fieldIndex] + valueToAdd;\n+            if (proposed <= max) {\n+                values[fieldIndex] = (int) proposed;\n+                return values;\n+            }\n+            if (nextField == null) {\n+                if (fieldIndex == 0) {\n+                    throw new IllegalArgumentException(\"Maximum value exceeded for add\");\n+                }\n+                nextField = instant.getField(fieldIndex - 1);\n+                if (getRangeDurationField() != nextField.getDurationField()) {\n+                    throw new IllegalArgumentException(\"Fields invalid for add\");\n+                }\n+            }\n+            valueToAdd -= (max + 1) - values[fieldIndex];\n+            values = nextField.add(instant, fieldIndex - 1, values, 1);\n+            values[fieldIndex] = getMinimumValue(instant, values);\n+        }\n+        while (valueToAdd < 0) {\n+            int min = getMinimumValue(instant, values);\n+            long proposed = values[fieldIndex] + valueToAdd;\n+            if (proposed >= min) {\n+                values[fieldIndex] = (int) proposed;\n+                return values;\n+            }\n+            if (nextField == null) {\n+                if (fieldIndex == 0) {\n+                    throw new IllegalArgumentException(\"Maximum value exceeded for add\");\n+                }\n+                nextField = instant.getField(fieldIndex - 1);\n+                if (getRangeDurationField() != nextField.getDurationField()) {\n+                    throw new IllegalArgumentException(\"Fields invalid for add\");\n+                }\n+            }\n+            valueToAdd -= (min - 1) - values[fieldIndex];\n+            values = nextField.add(instant, fieldIndex - 1, values, -1);\n+            values[fieldIndex] = getMaximumValue(instant, values);\n+        }\n+        return values;\n+    }\n+\n+    /**\n      * Adds a value (which may be negative) to the instant value,\n      * wrapping within this field.\n      * <p>\n     }\n \n     /**\n-     * Get the minimum value for this field evaluated at the specified time.\n+     * Get the minimum value for this field evaluated at the specified instant.\n      * <p>\n      * This implementation returns the same as {@link #getMinimumValue()}.\n      * \n     }\n \n     /**\n+     * Get the minimum value for this field using the partial instant and\n+     * the specified values.\n+     * <p>\n+     * This implementation returns the same as {@link #getMinimumValue(PartialInstant)}.\n+     * \n+     * @param instant  the partial instant to query\n+     * @param values  the values to use\n+     * @return the minimum value for this field, in the units of the field\n+     */\n+    public int getMinimumValue(PartialInstant instant, int[] values) {\n+        return getMinimumValue(instant);\n+    }\n+\n+    /**\n      * Get the maximum allowable value for this field.\n      * \n      * @return the maximum valid value for this field, in the units of the\n     }\n \n     /**\n-     * Get the maximum value for this field evaluated at the specified time.\n+     * Get the maximum value for this field evaluated at the specified instant.\n      * <p>\n      * This implementation returns the same as {@link #getMaximumValue()}.\n      * \n      */\n     public int getMaximumValue(PartialInstant instant) {\n         return getMaximumValue();\n+    }\n+\n+    /**\n+     * Get the maximum value for this field using the partial instant and\n+     * the specified values.\n+     * <p>\n+     * This implementation returns the same as {@link #getMaximumValue(PartialInstant)}.\n+     * \n+     * @param instant  the partial instant to query\n+     * @param values  the values to use\n+     * @return the maximum value for this field, in the units of the field\n+     */\n+    public int getMaximumValue(PartialInstant instant, int[] values) {\n+        return getMaximumValue(instant);\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n         return iField.add(instant, value);\n     }\n \n+    public int[] add(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {\n+        return iField.add(instant, fieldIndex, values, valueToAdd);\n+    }\n+\n     public long addWrapped(long instant, int value) {\n         return iField.addWrapped(instant, value);\n     }\n         return iField.getMinimumValue(instant);\n     }\n \n+    public int getMinimumValue(PartialInstant instant, int[] values) {\n+        return iField.getMinimumValue(instant, values);\n+    }\n+\n     public int getMaximumValue() {\n         return iField.getMaximumValue();\n     }\n \n     public int getMaximumValue(PartialInstant instant) {\n         return iField.getMaximumValue(instant);\n+    }\n+\n+    public int getMaximumValue(PartialInstant instant, int[] values) {\n+        return iField.getMaximumValue(instant, values);\n     }\n \n     public int getMaximumTextLength(Locale locale) {\n--- a/JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java\n     }\n \n     /**\n+     * Always returns 1.\n+     * \n+     * @return the minimum value of 1\n+     */\n+    public int getMinimumValue(PartialInstant instant, int[] values) {\n+        return 1;\n+    }\n+\n+    /**\n      * Get the maximum value for the field, which is one more than the wrapped\n      * field's maximum value.\n      * \n         return getWrappedField().getMaximumValue(instant) + 1;\n     }\n \n+    /**\n+     * Get the maximum value for the field, which is one more than the wrapped\n+     * field's maximum value.\n+     * \n+     * @return the maximum value\n+     */\n+    public int getMaximumValue(PartialInstant instant, int[] values) {\n+        return getWrappedField().getMaximumValue(instant, values) + 1;\n+    }\n+\n     public long roundFloor(long instant) {\n         return getWrappedField().roundFloor(instant);\n     }\n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n      *\n      * @throws UnsupportedOperationException\n      */\n+    public int[] add(PartialInstant instant, int fieldIndex, int[] values, int valueToAdd) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n     public long addWrapped(long instant, int value) {\n         throw unsupported();\n     }\n      *\n      * @throws UnsupportedOperationException\n      */\n+    public int getMinimumValue(PartialInstant instant, int[] values) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n     public int getMaximumValue() {\n         throw unsupported();\n     }\n      * @throws UnsupportedOperationException\n      */\n     public int getMaximumValue(PartialInstant instant) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n+    public int getMaximumValue(PartialInstant instant, int[] values) {\n         throw unsupported();\n     }\n \n--- a/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n         }\n \n         //-----------------------------------------------------------------------\n-// TODO\n-//        /**\n-//         * Adds to this field in a copy of this TimeOfDay.\n-//         * <p>\n-//         * The TimeOnly attached to this property is unchanged by this call.\n-//        * Instead, a new instance is returned.\n-//         * \n-//         * @param value  the value to add to the field in the copy\n-//         * @return a copy of the TimeOnly with the field value changed\n-//         * @throws IllegalArgumentException if the value isn't valid\n-//         */\n-//        public TimeOfDay addToCopy(int value) {\n-//            int[] newValues = getField().add(getInstant(), value);\n-//            return new TimeOfDay(getInstant(), newValues);\n-//        }\n-//\n+        /**\n+         * Adds to the value of this field in a copy of this TimeOfDay.\n+         * <p>\n+         * The value will be added to this field. If the value is too large to be\n+         * added solely to this field then it will affect larger fields.\n+         * Smaller fields are unaffected.\n+         * <p>\n+         * If the result would be too large, beyond 23:59:59:999, then an\n+         * IllegalArgumentException is thrown.\n+         * <p>\n+         * The TimeOnly attached to this property is unchanged by this call.\n+         * Instead, a new instance is returned.\n+         * \n+         * @param valueToAdd  the value to add to the field in the copy\n+         * @return a copy of the TimeOnly with the field value changed\n+         * @throws IllegalArgumentException if the value isn't valid\n+         */\n+        public TimeOfDay addCopy(int valueToAdd) {\n+            int[] newValues = iInstant.getValues();\n+            getField().add(iInstant, iFieldIndex, newValues, valueToAdd);\n+            return new TimeOfDay(iInstant, newValues);\n+        }\n+\n         /**\n          * Adds to the value of this field in a copy of this TimeOfDay wrapping\n          * within this field if the maximum value is reached.\n          * <p>\n          * The value will be added to this field. If the value is too large to be\n-         * added solely to this field then it wraps. Larger fields are always\n-         * unaffected. Smaller fields should be unaffected, except where the\n-         * result would be an invalid value for a smaller field. In this case the\n-         * smaller field is adjusted to be in range.\n+         * added solely to this field then it wraps within this field.\n+         * Other fields are unaffected.\n          * <p>\n          * For example,\n          * <code>12:59:37</code> addInField one minute returns <code>12:00:37</code>.\n--- a/JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java\n+++ b/JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java\n         assertEquals(23, test.hourOfDay().getMaximumValueOverall());\n     }\n \n+    public void testPropertyAddHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().addCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addCopy(13);\n+        check(copy, 23, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().addCopy(14);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addCopy(-10);\n+        check(copy, 0, 20, 30, 40);\n+        \n+        try {\n+            test.hourOfDay().addCopy(-11);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n     public void testPropertyAddInFieldHour() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay updated = test.hourOfDay().addInFieldCopy(9);\n-        assertEquals(19, updated.getHourOfDay());\n-        assertEquals(20, updated.getMinuteOfHour());\n-        assertEquals(30, updated.getSecondOfMinute());\n-        assertEquals(40, updated.getMillisOfSecond());\n-        updated = updated.hourOfDay().addInFieldCopy(9);\n-        assertEquals(4, updated.getHourOfDay());\n-        assertEquals(20, updated.getMinuteOfHour());\n-        assertEquals(30, updated.getSecondOfMinute());\n-        assertEquals(40, updated.getMillisOfSecond());\n+        TimeOfDay copy = test.hourOfDay().addInFieldCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 19, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addInFieldCopy(0);\n+        check(copy, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addInFieldCopy(18);\n+        check(copy, 4, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addInFieldCopy(-15);\n+        check(copy, 19, 20, 30, 40);\n     }\n \n     public void testPropertySetHour() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay set = test.hourOfDay().setCopy(12);\n-        assertEquals(12, set.getHourOfDay());\n-        assertEquals(20, set.getMinuteOfHour());\n-        assertEquals(30, set.getSecondOfMinute());\n-        assertEquals(40, set.getMillisOfSecond());\n+        TimeOfDay copy = test.hourOfDay().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n     }\n \n     public void testPropertySetTextHour() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay set = test.hourOfDay().setCopy(\"12\");\n-        assertEquals(12, set.getHourOfDay());\n-        assertEquals(20, set.getMinuteOfHour());\n-        assertEquals(30, set.getSecondOfMinute());\n-        assertEquals(40, set.getMillisOfSecond());\n+        TimeOfDay copy = test.hourOfDay().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 12, 20, 30, 40);\n     }\n \n     public void testPropertyCompareToHour() {\n         assertEquals(59, test.minuteOfHour().getMaximumValueOverall());\n     }\n \n+    public void testPropertyAddMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.minuteOfHour().addCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(39);\n+        check(copy, 10, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(40);\n+        check(copy, 11, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(1 * 60 + 45);\n+        check(copy, 12, 5, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(13 * 60 + 39);\n+        check(copy, 23, 59, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().addCopy(13 * 60 + 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-9);\n+        check(copy, 10, 11, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-19);\n+        check(copy, 10, 1, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-20);\n+        check(copy, 10, 0, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-21);\n+        check(copy, 9, 59, 30, 40);\n+        \n+        copy = test.minuteOfHour().addCopy(-(10 * 60 + 20));\n+        check(copy, 0, 0, 30, 40);\n+        \n+        try {\n+            test.minuteOfHour().addCopy(-(10 * 60 + 21));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n     public void testPropertyAddInFieldMinute() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay updated = test.minuteOfHour().addInFieldCopy(9);\n-        assertEquals(10, updated.getHourOfDay());\n-        assertEquals(29, updated.getMinuteOfHour());\n-        assertEquals(30, updated.getSecondOfMinute());\n-        assertEquals(40, updated.getMillisOfSecond());\n-        updated = updated.minuteOfHour().addInFieldCopy(49);\n-        assertEquals(10, updated.getHourOfDay());\n-        assertEquals(18, updated.getMinuteOfHour());\n-        assertEquals(30, updated.getSecondOfMinute());\n-        assertEquals(40, updated.getMillisOfSecond());\n+        TimeOfDay copy = test.minuteOfHour().addInFieldCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 29, 30, 40);\n+        \n+        copy = test.minuteOfHour().addInFieldCopy(49);\n+        check(copy, 10, 9, 30, 40);\n+        \n+        copy = test.minuteOfHour().addInFieldCopy(-47);\n+        check(copy, 10, 33, 30, 40);\n     }\n \n     public void testPropertySetMinute() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay set = test.minuteOfHour().setCopy(12);\n-        assertEquals(10, set.getHourOfDay());\n-        assertEquals(12, set.getMinuteOfHour());\n-        assertEquals(30, set.getSecondOfMinute());\n-        assertEquals(40, set.getMillisOfSecond());\n+        TimeOfDay copy = test.minuteOfHour().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n     }\n \n     public void testPropertySetTextMinute() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay set = test.minuteOfHour().setCopy(\"12\");\n-        assertEquals(10, set.getHourOfDay());\n-        assertEquals(12, set.getMinuteOfHour());\n-        assertEquals(30, set.getSecondOfMinute());\n-        assertEquals(40, set.getMillisOfSecond());\n+        TimeOfDay copy = test.minuteOfHour().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 12, 30, 40);\n     }\n \n     public void testPropertyCompareToMinute() {\n         assertEquals(59, test.secondOfMinute().getMaximumValueOverall());\n     }\n \n+    public void testPropertyAddSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.secondOfMinute().addCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(29);\n+        check(copy, 10, 20, 59, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(30);\n+        check(copy, 10, 21, 0, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(39 * 60 + 29);\n+        check(copy, 10, 59, 59, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(39 * 60 + 30);\n+        check(copy, 11, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().addCopy(13 * 60 * 60 + 39 * 60 + 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(-9);\n+        check(copy, 10, 20, 21, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(-30);\n+        check(copy, 10, 20, 0, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(-31);\n+        check(copy, 10, 19, 59, 40);\n+        \n+        copy = test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n+        check(copy, 0, 0, 0, 40);\n+        \n+        try {\n+            test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n     public void testPropertyAddInFieldSecond() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay updated = test.secondOfMinute().addInFieldCopy(9);\n-        assertEquals(10, updated.getHourOfDay());\n-        assertEquals(20, updated.getMinuteOfHour());\n-        assertEquals(39, updated.getSecondOfMinute());\n-        assertEquals(40, updated.getMillisOfSecond());\n-        updated = updated.secondOfMinute().addInFieldCopy(49);\n-        assertEquals(10, updated.getHourOfDay());\n-        assertEquals(20, updated.getMinuteOfHour());\n-        assertEquals(28, updated.getSecondOfMinute());\n-        assertEquals(40, updated.getMillisOfSecond());\n+        TimeOfDay copy = test.secondOfMinute().addInFieldCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 39, 40);\n+        \n+        copy = test.secondOfMinute().addInFieldCopy(49);\n+        check(copy, 10, 20, 19, 40);\n+        \n+        copy = test.secondOfMinute().addInFieldCopy(-47);\n+        check(copy, 10, 20, 43, 40);\n     }\n \n     public void testPropertySetSecond() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay set = test.secondOfMinute().setCopy(12);\n-        assertEquals(10, set.getHourOfDay());\n-        assertEquals(20, set.getMinuteOfHour());\n-        assertEquals(12, set.getSecondOfMinute());\n-        assertEquals(40, set.getMillisOfSecond());\n+        TimeOfDay copy = test.secondOfMinute().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 12, 40);\n     }\n \n     public void testPropertySetTextSecond() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay set = test.secondOfMinute().setCopy(\"12\");\n-        assertEquals(10, set.getHourOfDay());\n-        assertEquals(20, set.getMinuteOfHour());\n-        assertEquals(12, set.getSecondOfMinute());\n-        assertEquals(40, set.getMillisOfSecond());\n+        TimeOfDay copy = test.secondOfMinute().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 12, 40);\n     }\n \n     public void testPropertyCompareToSecond() {\n         assertEquals(999, test.millisOfSecond().getMaximumValueOverall());\n     }\n \n+    public void testPropertyAddMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.millisOfSecond().addCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addCopy(959);\n+        check(copy, 10, 20, 30, 999);\n+        \n+        copy = test.millisOfSecond().addCopy(960);\n+        check(copy, 10, 20, 31, 0);\n+        \n+        copy = test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        check(copy, 23, 59, 59, 999);\n+        \n+        try {\n+            test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.millisOfSecond().addCopy(-9);\n+        check(copy, 10, 20, 30, 31);\n+        \n+        copy = test.millisOfSecond().addCopy(-40);\n+        check(copy, 10, 20, 30, 0);\n+        \n+        copy = test.millisOfSecond().addCopy(-41);\n+        check(copy, 10, 20, 29, 999);\n+        \n+        copy = test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        check(copy, 0, 0, 0, 0);\n+        \n+        try {\n+            test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n     public void testPropertyAddInFieldMilli() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay updated = test.millisOfSecond().addInFieldCopy(9);\n-        assertEquals(10, updated.getHourOfDay());\n-        assertEquals(20, updated.getMinuteOfHour());\n-        assertEquals(30, updated.getSecondOfMinute());\n-        assertEquals(49, updated.getMillisOfSecond());\n-        updated = updated.millisOfSecond().addInFieldCopy(990);\n-        assertEquals(10, updated.getHourOfDay());\n-        assertEquals(20, updated.getMinuteOfHour());\n-        assertEquals(30, updated.getSecondOfMinute());\n-        assertEquals(39, updated.getMillisOfSecond());\n+        TimeOfDay copy = test.millisOfSecond().addInFieldCopy(9);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 49);\n+        \n+        copy = test.millisOfSecond().addInFieldCopy(995);\n+        check(copy, 10, 20, 30, 35);\n+        \n+        copy = test.millisOfSecond().addInFieldCopy(-47);\n+        check(copy, 10, 20, 30, 993);\n     }\n \n     public void testPropertySetMilli() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay set = test.millisOfSecond().setCopy(12);\n-        assertEquals(10, set.getHourOfDay());\n-        assertEquals(20, set.getMinuteOfHour());\n-        assertEquals(30, set.getSecondOfMinute());\n-        assertEquals(12, set.getMillisOfSecond());\n+        TimeOfDay copy = test.millisOfSecond().setCopy(12);\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 12);\n     }\n \n     public void testPropertySetTextMilli() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay set = test.millisOfSecond().setCopy(\"12\");\n-        assertEquals(10, set.getHourOfDay());\n-        assertEquals(20, set.getMinuteOfHour());\n-        assertEquals(30, set.getSecondOfMinute());\n-        assertEquals(12, set.getMillisOfSecond());\n+        TimeOfDay copy = test.millisOfSecond().setCopy(\"12\");\n+        check(test, 10, 20, 30, 40);\n+        check(copy, 10, 20, 30, 12);\n     }\n \n     public void testPropertyCompareToMilli() {\n         } catch (IllegalArgumentException ex) {}\n     }\n \n+    //-----------------------------------------------------------------------\n+    private void check(TimeOfDay test, int hour, int min, int sec, int milli) {\n+        assertEquals(hour, test.getHourOfDay());\n+        assertEquals(min, test.getMinuteOfHour());\n+        assertEquals(sec, test.getSecondOfMinute());\n+        assertEquals(milli, test.getMillisOfSecond());\n+    }\n }", "timestamp": 1088277430, "metainfo": ""}