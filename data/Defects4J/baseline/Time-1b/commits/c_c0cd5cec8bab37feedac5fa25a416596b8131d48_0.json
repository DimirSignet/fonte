{"sha": "c0cd5cec8bab37feedac5fa25a416596b8131d48", "log": "Comment toPrinter and toParser to indicate internal nature   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Converts to a DateTimePrinter that can only print, using all the\n-     * appended elements.\n+     * Constructs a DateTimeFormatter using all the appended elements.\n      * <p>\n-     * Subsequent changes to this builder do not affect the returned formatter.\n-     *\n-     * @throws UnsupportedOperationException if printing is not supported\n-     */\n-    public DateTimePrinter toPrinter() {\n-        Object f = getFormatter();\n-        if (isPrinter(f)) {\n-            return (DateTimePrinter) f;\n-        }\n-        throw new UnsupportedOperationException(\"Printing is not supported\");\n-    }\n-\n-    /**\n-     * Converts to a DateTimeFormatter that can only parse, using all the\n-     * appended elements.\n-     * <p>\n-     * Subsequent changes to this builder do not affect the returned formatter.\n-     *\n-     * @throws UnsupportedOperationException if parsing is not supported\n-     */\n-    public DateTimeParser toParser() {\n-        Object f = getFormatter();\n-        if (isParser(f)) {\n-            return (DateTimeParser) f;\n-        }\n-        throw new UnsupportedOperationException(\"Parsing is not supported\");\n-    }\n-\n-    /**\n-     * Converts to a DateTimeFormatter that using all the appended elements.\n+     * This is the main method used by applications at the end of the build\n+     * process to create a usable formatter.\n      * <p>\n      * Subsequent changes to this builder do not affect the returned formatter.\n      * <p>\n         throw new UnsupportedOperationException(\"Both printing and parsing not supported\");\n     }\n \n+    /**\n+     * Internal method to create a DateTimePrinter instance using all the\n+     * appended elements.\n+     * <p>\n+     * Most applications will not use this method.\n+     * If you want a printer in an application, call {@link #toFormatter()}\n+     * and just use the printing API.\n+     * <p>\n+     * Subsequent changes to this builder do not affect the returned printer.\n+     *\n+     * @throws UnsupportedOperationException if printing is not supported\n+     */\n+    public DateTimePrinter toPrinter() {\n+        Object f = getFormatter();\n+        if (isPrinter(f)) {\n+            return (DateTimePrinter) f;\n+        }\n+        throw new UnsupportedOperationException(\"Printing is not supported\");\n+    }\n+\n+    /**\n+     * Internal method to create a DateTimeParser instance using all the\n+     * appended elements.\n+     * <p>\n+     * Most applications will not use this method.\n+     * If you want a parser in an application, call {@link #toFormatter()}\n+     * and just use the parsing API.\n+     * <p>\n+     * Subsequent changes to this builder do not affect the returned parser.\n+     *\n+     * @throws UnsupportedOperationException if parsing is not supported\n+     */\n+    public DateTimeParser toParser() {\n+        Object f = getFormatter();\n+        if (isParser(f)) {\n+            return (DateTimeParser) f;\n+        }\n+        throw new UnsupportedOperationException(\"Parsing is not supported\");\n+    }\n+\n     //-----------------------------------------------------------------------\n+    /**\n+     * Returns true if toFormatter can be called without throwing an\n+     * UnsupportedOperationException.\n+     * \n+     * @return true if a formatter can be built\n+     */\n+    public boolean canBuildFormatter() {\n+        return isFormatter(getFormatter());\n+    }\n+\n     /**\n      * Returns true if toPrinter can be called without throwing an\n      * UnsupportedOperationException.\n      */\n     public boolean canBuildParser() {\n         return isParser(getFormatter());\n-    }\n-\n-    /**\n-     * Returns true if toFormatter can be called without throwing an\n-     * UnsupportedOperationException.\n-     * \n-     * @return true if a formatter can be built\n-     */\n-    public boolean canBuildFormatter() {\n-        return isFormatter(getFormatter());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n         clear();\n     }\n \n-    /**\n-     * Converts to a PeriodPrinter that prints using all the appended elements.\n-     * Subsequent changes to this builder do not affect the returned printer.\n-     * \n-     * @return the newly created printer\n-     */\n-    public PeriodPrinter toPrinter() {\n-        return toFormatter().getPrinter();\n-    }\n-\n-    /**\n-     * Converts to a PeriodParser that parses using all the appended elements.\n-     * Subsequent changes to this builder do not affect the returned parser.\n-     * \n-     * @return the newly created parser\n-     */\n-    public PeriodParser toParser() {\n-        return toFormatter().getParser();\n-    }\n-\n-    /**\n-     * Converts to a PeriodFormatter that formats using all the appended elements.\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructs a PeriodFormatter using all the appended elements.\n+     * <p>\n+     * This is the main method used by applications at the end of the build\n+     * process to create a usable formatter.\n+     * <p>\n      * Subsequent changes to this builder do not affect the returned formatter.\n+     * <p>\n+     * The returned formatter may not support both printing and parsing.\n+     * The methods {@link PeriodFormatter#isPrinter()} and\n+     * {@link PeriodFormatter#isParser()} will help you determine the state\n+     * of the formatter.\n      * \n      * @return the newly created formatter\n      */\n         PeriodFormatter formatter = toFormatter(iElementPairs);\n         iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\n         return formatter;\n+    }\n+\n+    /**\n+     * Internal method to create a PeriodPrinter instance using all the\n+     * appended elements.\n+     * <p>\n+     * Most applications will not use this method.\n+     * If you want a printer in an application, call {@link #toFormatter()}\n+     * and just use the printing API.\n+     * <p>\n+     * Subsequent changes to this builder do not affect the returned printer.\n+     * \n+     * @return the newly created printer\n+     */\n+    public PeriodPrinter toPrinter() {\n+        return toFormatter().getPrinter();\n+    }\n+\n+    /**\n+     * Internal method to create a PeriodParser instance using all the\n+     * appended elements.\n+     * <p>\n+     * Most applications will not use this method.\n+     * If you want a printer in an application, call {@link #toFormatter()}\n+     * and just use the printing API.\n+     * <p>\n+     * Subsequent changes to this builder do not affect the returned parser.\n+     * \n+     * @return the newly created parser\n+     */\n+    public PeriodParser toParser() {\n+        return toFormatter().getParser();\n     }\n \n     private static PeriodFormatter toFormatter(List elementPairs) {\n         return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * Clears out all the appended elements, allowing this builder to be reused.\n      */", "timestamp": 1108510312, "metainfo": ""}