{"sha": "bf313539eee9ca9e2db6bceaadd1311b41d9c569", "log": "Add JodaConvert @FromString and @ToSTring  ", "commit": "\n--- a/JodaTime/src/main/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/main/java/org/joda/time/DateMidnight.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.io.Serializable;\n import java.util.Locale;\n \n+import org.joda.convert.FromString;\n import org.joda.time.base.BaseDateTime;\n import org.joda.time.field.AbstractReadableInstantFieldProperty;\n import org.joda.time.format.DateTimeFormatter;\n     /**\n      * Parses a {@code DateMidnight} from the specified string.\n      * <p>\n-     * This uses {@link ISODateTimeFormat#dateParser()}.\n+     * This uses {@link ISODateTimeFormat#dateTimeParser()}.\n      * \n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static DateMidnight parse(String str) {\n-        return parse(str, ISODateTimeFormat.dateParser());\n+        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());\n     }\n \n     /**\n--- a/JodaTime/src/main/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/DateTime.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.io.Serializable;\n import java.util.Locale;\n \n+import org.joda.convert.FromString;\n import org.joda.time.base.BaseDateTime;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractReadableInstantFieldProperty;\n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static DateTime parse(String str) {\n-        return parse(str, ISODateTimeFormat.dateTimeParser());\n+        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());\n     }\n \n     /**\n--- a/JodaTime/src/main/java/org/joda/time/Days.java\n+++ b/JodaTime/src/main/java/org/joda/time/Days.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.joda.time;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseSingleFieldPeriod;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n      * @return the period in days\n      * @throws IllegalArgumentException if the string format is invalid\n      */\n+    @FromString\n     public static Days parseDays(String periodStr) {\n         if (periodStr == null) {\n             return Days.ZERO;\n      *\n      * @return the value as an ISO8601 string\n      */\n+    @ToString\n     public String toString() {\n         return \"P\" + String.valueOf(getValue()) + \"D\";\n     }\n--- a/JodaTime/src/main/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/main/java/org/joda/time/Duration.java\n /*\n- *  Copyright 2001-2005,2008 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n import java.io.Serializable;\n \n+import org.joda.convert.FromString;\n import org.joda.time.base.BaseDuration;\n import org.joda.time.field.FieldUtils;\n \n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static Duration parse(String str) {\n         return new Duration(str);\n     }\n--- a/JodaTime/src/main/java/org/joda/time/Hours.java\n+++ b/JodaTime/src/main/java/org/joda/time/Hours.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.joda.time;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseSingleFieldPeriod;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n      * @return the period in hours\n      * @throws IllegalArgumentException if the string format is invalid\n      */\n+    @FromString\n     public static Hours parseHours(String periodStr) {\n         if (periodStr == null) {\n             return Hours.ZERO;\n      *\n      * @return the value as an ISO8601 string\n      */\n+    @ToString\n     public String toString() {\n         return \"PT\" + String.valueOf(getValue()) + \"H\";\n     }\n--- a/JodaTime/src/main/java/org/joda/time/Instant.java\n+++ b/JodaTime/src/main/java/org/joda/time/Instant.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n import java.io.Serializable;\n \n+import org.joda.convert.FromString;\n import org.joda.time.base.AbstractInstant;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static Instant parse(String str) {\n         return parse(str, ISODateTimeFormat.dateTimeParser());\n     }\n--- a/JodaTime/src/main/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalDate.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.util.Set;\n import java.util.TimeZone;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseLocal;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static LocalDate parse(String str) {\n         return parse(str, ISODateTimeFormat.localDateParser());\n     }\n      *\n      * @return ISO8601 time formatted string.\n      */\n+    @ToString\n     public String toString() {\n         return ISODateTimeFormat.date().print(this);\n     }\n--- a/JodaTime/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalDateTime.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.util.Locale;\n import java.util.TimeZone;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseLocal;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static LocalDateTime parse(String str) {\n         return parse(str, ISODateTimeFormat.localDateOptionalTimeParser());\n     }\n      * \n      * @return ISO8601 time formatted string.\n      */\n+    @ToString\n     public String toString() {\n         return ISODateTimeFormat.dateTime().print(this);\n     }\n--- a/JodaTime/src/main/java/org/joda/time/LocalTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/LocalTime.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.util.Locale;\n import java.util.Set;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseLocal;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.convert.ConverterManager;\n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static LocalTime parse(String str) {\n         return parse(str, ISODateTimeFormat.localTimeParser());\n     }\n      * \n      * @return ISO8601 time formatted string.\n      */\n+    @ToString\n     public String toString() {\n         return ISODateTimeFormat.time().print(this);\n     }\n--- a/JodaTime/src/main/java/org/joda/time/Minutes.java\n+++ b/JodaTime/src/main/java/org/joda/time/Minutes.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.joda.time;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseSingleFieldPeriod;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n      * @return the period in minutes\n      * @throws IllegalArgumentException if the string format is invalid\n      */\n+    @FromString\n     public static Minutes parseMinutes(String periodStr) {\n         if (periodStr == null) {\n             return Minutes.ZERO;\n      *\n      * @return the value as an ISO8601 string\n      */\n+    @ToString\n     public String toString() {\n         return \"PT\" + String.valueOf(getValue()) + \"M\";\n     }\n--- a/JodaTime/src/main/java/org/joda/time/MonthDay.java\n+++ b/JodaTime/src/main/java/org/joda/time/MonthDay.java\n import java.util.List;\n import java.util.Locale;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BasePartial;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractPartialFieldProperty;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n+import org.joda.time.format.DateTimeFormatterBuilder;\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n         DateTimeFieldType.monthOfYear(),\n         DateTimeFieldType.dayOfMonth(), };\n \n+    /** The singleton set of field types */\n+    private static final DateTimeFormatter PARSER = new DateTimeFormatterBuilder()\n+        .appendOptional(ISODateTimeFormat.localDateParser().getParser())\n+        .appendOptional(DateTimeFormat.forPattern(\"--MM-dd\").getParser()).toFormatter();\n+\n     /** The index of the monthOfYear field in the field array */\n     public static final int MONTH_OF_YEAR = 0;\n     /** The index of the day field in the field array */\n     /**\n      * Parses a {@code MonthDay} from the specified string.\n      * <p>\n-     * This uses {@link ISODateTimeFormat#localDateParser()}.\n+     * This uses {@link ISODateTimeFormat#localDateParser()} or the format {@code --MM-dd}.\n      * \n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static MonthDay parse(String str) {\n-        return parse(str, ISODateTimeFormat.localDateParser());\n+        return parse(str, PARSER);\n     }\n \n     /**\n      *\n      * @return ISO8601 time formatted string.\n      */\n+    @ToString\n     public String toString() {\n         List<DateTimeFieldType> fields = new ArrayList<DateTimeFieldType>();\n         fields.add(DateTimeFieldType.monthOfYear());\n--- a/JodaTime/src/main/java/org/joda/time/Months.java\n+++ b/JodaTime/src/main/java/org/joda/time/Months.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.joda.time;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseSingleFieldPeriod;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n      * @return the period in months\n      * @throws IllegalArgumentException if the string format is invalid\n      */\n+    @FromString\n     public static Months parseMonths(String periodStr) {\n         if (periodStr == null) {\n             return Months.ZERO;\n      *\n      * @return the value as an ISO8601 string\n      */\n+    @ToString\n     public String toString() {\n         return \"P\" + String.valueOf(getValue()) + \"M\";\n     }\n--- a/JodaTime/src/main/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/main/java/org/joda/time/MutableDateTime.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.io.Serializable;\n import java.util.Locale;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseDateTime;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractReadableInstantFieldProperty;\n  * This class uses a Chronology internally. The Chronology determines how the\n  * millisecond instant value is converted into the date time fields.\n  * The default Chronology is <code>ISOChronology</code> which is the agreed\n- * international standard and compatable with the modern Gregorian calendar.\n+ * international standard and compatible with the modern Gregorian calendar.\n  * <p>\n  * Each individual field can be accessed in two ways:\n  * <ul>\n  * <li>set numeric value\n  * <li>add to numeric value\n  * <li>add to numeric value wrapping with the field\n- * <li>get text vlaue\n+ * <li>get text value\n  * <li>get short text value\n  * <li>set text value\n  * <li>field maximum value\n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static MutableDateTime parse(String str) {\n-        return parse(str, ISODateTimeFormat.dateTimeParser());\n+        return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());\n     }\n \n     /**\n      * \n      * @return ISO8601 time formatted string.\n      */\n+    @ToString\n     public String toString() {\n         return ISODateTimeFormat.dateTime().print(this);\n     }\n--- a/JodaTime/src/main/java/org/joda/time/MutablePeriod.java\n+++ b/JodaTime/src/main/java/org/joda/time/MutablePeriod.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n import java.io.Serializable;\n \n+import org.joda.convert.FromString;\n import org.joda.time.base.BasePeriod;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static MutablePeriod parse(String str) {\n         return parse(str, ISOPeriodFormat.standard());\n     }\n--- a/JodaTime/src/main/java/org/joda/time/Period.java\n+++ b/JodaTime/src/main/java/org/joda/time/Period.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n import java.io.Serializable;\n \n+import org.joda.convert.FromString;\n import org.joda.time.base.BasePeriod;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.FieldUtils;\n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static Period parse(String str) {\n         return parse(str, ISOPeriodFormat.standard());\n     }\n--- a/JodaTime/src/main/java/org/joda/time/Seconds.java\n+++ b/JodaTime/src/main/java/org/joda/time/Seconds.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.joda.time;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseSingleFieldPeriod;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n      * @return the period in seconds\n      * @throws IllegalArgumentException if the string format is invalid\n      */\n+    @FromString\n     public static Seconds parseSeconds(String periodStr) {\n         if (periodStr == null) {\n             return Seconds.ZERO;\n      *\n      * @return the value as an ISO8601 string\n      */\n+    @ToString\n     public String toString() {\n         return \"PT\" + String.valueOf(getValue()) + \"S\";\n     }\n--- a/JodaTime/src/main/java/org/joda/time/Weeks.java\n+++ b/JodaTime/src/main/java/org/joda/time/Weeks.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.joda.time;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseSingleFieldPeriod;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n      * @return the period in weeks\n      * @throws IllegalArgumentException if the string format is invalid\n      */\n+    @FromString\n     public static Weeks parseWeeks(String periodStr) {\n         if (periodStr == null) {\n             return Weeks.ZERO;\n      *\n      * @return the value as an ISO8601 string\n      */\n+    @ToString\n     public String toString() {\n         return \"P\" + String.valueOf(getValue()) + \"W\";\n     }\n--- a/JodaTime/src/main/java/org/joda/time/YearMonth.java\n+++ b/JodaTime/src/main/java/org/joda/time/YearMonth.java\n import java.util.Date;\n import java.util.Locale;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BasePartial;\n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.field.AbstractPartialFieldProperty;\n      * @param str  the string to parse, not null\n      * @since 2.0\n      */\n+    @FromString\n     public static YearMonth parse(String str) {\n         return parse(str, ISODateTimeFormat.localDateParser());\n     }\n      *\n      * @return ISO8601 time formatted string.\n      */\n+    @ToString\n     public String toString() {\n         return ISODateTimeFormat.yearMonth().print(this);\n     }\n--- a/JodaTime/src/main/java/org/joda/time/Years.java\n+++ b/JodaTime/src/main/java/org/joda/time/Years.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.joda.time;\n \n+import org.joda.convert.FromString;\n+import org.joda.convert.ToString;\n import org.joda.time.base.BaseSingleFieldPeriod;\n import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISOPeriodFormat;\n      * @return the period in years\n      * @throws IllegalArgumentException if the string format is invalid\n      */\n+    @FromString\n     public static Years parseYears(String periodStr) {\n         if (periodStr == null) {\n             return Years.ZERO;\n      *\n      * @return the value as an ISO8601 string\n      */\n+    @ToString\n     public String toString() {\n         return \"P\" + String.valueOf(getValue()) + \"Y\";\n     }\n--- a/JodaTime/src/main/java/org/joda/time/base/AbstractDuration.java\n+++ b/JodaTime/src/main/java/org/joda/time/base/AbstractDuration.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.joda.time.base;\n \n+import org.joda.convert.ToString;\n import org.joda.time.Duration;\n import org.joda.time.Period;\n import org.joda.time.ReadableDuration;\n      *\n      * @return the value as an ISO8601 string\n      */\n+    @ToString\n     public String toString() {\n         long millis = getMillis();\n         StringBuffer buf = new StringBuffer();\n--- a/JodaTime/src/main/java/org/joda/time/base/AbstractInstant.java\n+++ b/JodaTime/src/main/java/org/joda/time/base/AbstractInstant.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n import java.util.Date;\n \n+import org.joda.convert.ToString;\n import org.joda.time.Chronology;\n import org.joda.time.DateTime;\n import org.joda.time.DateTimeField;\n      * \n      * @return ISO8601 time formatted string.\n      */\n+    @ToString\n     public String toString() {\n         return ISODateTimeFormat.dateTime().print(this);\n     }\n--- a/JodaTime/src/main/java/org/joda/time/base/AbstractPeriod.java\n+++ b/JodaTime/src/main/java/org/joda/time/base/AbstractPeriod.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  */\n package org.joda.time.base;\n \n+import org.joda.convert.ToString;\n import org.joda.time.DurationFieldType;\n import org.joda.time.MutablePeriod;\n import org.joda.time.Period;\n      *\n      * @return the value as an ISO8601 string\n      */\n+    @ToString\n     public String toString() {\n         return ISOPeriodFormat.standard().print(this);\n     }\n--- a/JodaTime/src/test/java/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestAll.java\n /*\n- *  Copyright 2001-2009 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n //        suite.addTest(TestParseISO.suite());\n         suite.addTest(TestDurationField.suite());\n         \n+        suite.addTest(TestStringConvert.suite());\n         suite.addTest(TestSerialization.suite());\n         suite.addTest(TestIllegalFieldValueException.suite());\n         return suite;\n--- a/JodaTime/src/test/java/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestDateTime_Constructors.java\n /*\n- *  Copyright 2001-2006 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     //-----------------------------------------------------------------------\n     public void testParse_noFormatter() throws Throwable {\n-        assertEquals(new DateTime(2010, 6, 30, 0, 20, ISOChronology.getInstance(LONDON)), DateTime.parse(\"2010-06-30T01:20+02:00\"));\n+        assertEquals(new DateTime(2010, 6, 30, 1, 20, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), DateTime.parse(\"2010-06-30T01:20+02:00\"));\n         assertEquals(new DateTime(2010, 1, 2, 14, 50, ISOChronology.getInstance(LONDON)), DateTime.parse(\"2010-002T14:50\"));\n     }\n \n--- a/JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestMonthDay_Constructors.java\n \n     //-----------------------------------------------------------------------\n     public void testParse_noFormatter() throws Throwable {\n+        assertEquals(new MonthDay(6, 30), MonthDay.parse(\"--06-30\"));\n+        assertEquals(new MonthDay(2, 29), MonthDay.parse(\"--02-29\"));\n         assertEquals(new MonthDay(6, 30), MonthDay.parse(\"2010-06-30\"));\n         assertEquals(new MonthDay(1, 2), MonthDay.parse(\"2010-002\"));\n     }\n--- a/JodaTime/src/test/java/org/joda/time/TestMutableDateTime_Constructors.java\n+++ b/JodaTime/src/test/java/org/joda/time/TestMutableDateTime_Constructors.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2010 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     //-----------------------------------------------------------------------\n     public void testParse_noFormatter() throws Throwable {\n-        assertEquals(new MutableDateTime(2010, 6, 30, 0, 20, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse(\"2010-06-30T01:20+02:00\"));\n+        assertEquals(new MutableDateTime(2010, 6, 30, 1, 20, 0, 0, ISOChronology.getInstance(DateTimeZone.forOffsetHours(2))), MutableDateTime.parse(\"2010-06-30T01:20+02:00\"));\n         assertEquals(new MutableDateTime(2010, 1, 2, 14, 50, 0, 0, ISOChronology.getInstance(LONDON)), MutableDateTime.parse(\"2010-002T14:50\"));\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/test/java/org/joda/time/TestStringConvert.java\n+/*\n+ *  Copyright 2001-2010 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.convert.StringConvert;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * Test string conversion.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestStringConvert extends TestCase {\n+\n+    private static final DateTimeZone ZONE = DateTimeZone.forID(\"+02:00\");\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestStringConvert.class);\n+    }\n+\n+    public TestStringConvert(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testDateMidnight() {\n+        DateMidnight test = new DateMidnight(2010, 6, 30, ISOChronology.getInstance(ZONE));\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"2010-06-30T00:00:00.000+02:00\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(DateMidnight.class, str));\n+    }\n+\n+    public void testDateTime() {\n+        DateTime test = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"2010-06-30T02:30:50.678+02:00\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(DateTime.class, str));\n+    }\n+\n+    public void testMutableDateTime() {\n+        MutableDateTime test = new MutableDateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"2010-06-30T02:30:50.678+02:00\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(MutableDateTime.class, str));\n+    }\n+\n+    public void testLocalDateTime() {\n+        LocalDateTime test = new LocalDateTime(2010, 6, 30, 2, 30);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"2010-06-30T02:30:00.000\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(LocalDateTime.class, str));\n+    }\n+\n+    public void testLocalDate() {\n+        LocalDate test = new LocalDate(2010, 6, 30);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"2010-06-30\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(LocalDate.class, str));\n+    }\n+\n+    public void testLocalTime() {\n+        LocalTime test = new LocalTime(2, 30, 50, 678);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"02:30:50.678\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(LocalTime.class, str));\n+    }\n+\n+    public void testYearMonth() {\n+        YearMonth test = new YearMonth(2010, 6);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"2010-06\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(YearMonth.class, str));\n+    }\n+\n+    public void testMonthDay() {\n+        MonthDay test = new MonthDay(6, 30);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"--06-30\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str));\n+    }\n+\n+    public void testMonthDay_leapDay() {\n+        MonthDay test = new MonthDay(2, 29);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"--02-29\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(MonthDay.class, str));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+//    public void testTimeZone() {\n+//        DateTimeZone test = DateTimeZone.forID(\"Europe/Paris\");\n+//        String str = StringConvert.INSTANCE.convertToString(test);\n+//        assertEquals(\"Europe/Paris\", str);\n+//        assertEquals(test, StringConvert.INSTANCE.convertFromString(DateTimeZone.class, str));\n+//    }\n+\n+//    public void testInterval() {\n+//        DateTime a = new DateTime(2010, 6, 30, 2, 30, 50, 678, ISOChronology.getInstance(ZONE));\n+//        DateTime b = new DateTime(2011, 9, 10, 4, 20, 40, 234, ISOChronology.getInstance(ZONE));\n+//        Interval test = new Interval(a, b);\n+//        String str = StringConvert.INSTANCE.convertToString(test);\n+//        assertEquals(\"2010-06-30T02:30:50.678+02:00/2011-09-10T04:20:40.234+02:00\", str);\n+//        assertEquals(test, StringConvert.INSTANCE.convertFromString(Interval.class, str));\n+//    }\n+\n+    public void testDuration() {\n+        Duration test = new Duration(12345678L);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"PT12345.678S\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(Duration.class, str));\n+    }\n+\n+    public void testPeriod() {\n+        Period test = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(Period.class, str));\n+    }\n+\n+    public void testMutablePeriod() {\n+        MutablePeriod test = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(MutablePeriod.class, str));\n+    }\n+\n+    public void testYears() {\n+        Years test = Years.years(5);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"P5Y\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(Years.class, str));\n+    }\n+\n+    public void testMonths() {\n+        Months test = Months.months(5);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"P5M\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(Months.class, str));\n+    }\n+\n+    public void testWeeks() {\n+        Weeks test = Weeks.weeks(5);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"P5W\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(Weeks.class, str));\n+    }\n+\n+    public void testDays() {\n+        Days test = Days.days(5);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"P5D\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(Days.class, str));\n+    }\n+\n+    public void testHours() {\n+        Hours test = Hours.hours(5);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"PT5H\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(Hours.class, str));\n+    }\n+\n+    public void testMinutes() {\n+        Minutes test = Minutes.minutes(5);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"PT5M\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(Minutes.class, str));\n+    }\n+\n+    public void testSeconds() {\n+        Seconds test = Seconds.seconds(5);\n+        String str = StringConvert.INSTANCE.convertToString(test);\n+        assertEquals(\"PT5S\", str);\n+        assertEquals(test, StringConvert.INSTANCE.convertFromString(Seconds.class, str));\n+    }\n+\n+}", "timestamp": 1291075436, "metainfo": ""}