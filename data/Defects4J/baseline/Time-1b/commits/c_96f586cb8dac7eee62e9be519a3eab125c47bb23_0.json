{"sha": "96f586cb8dac7eee62e9be519a3eab125c47bb23", "log": "Ensure there is a max/min valid offset in DateTimeZone  Fixes #43", "commit": "\n--- a/src/main/java/org/joda/time/DateTimeZone.java\n+++ b/src/main/java/org/joda/time/DateTimeZone.java\n import org.joda.convert.ToString;\n import org.joda.time.chrono.BaseChronology;\n import org.joda.time.field.FieldUtils;\n-import org.joda.time.format.DateTimeFormat;\n import org.joda.time.format.DateTimeFormatter;\n import org.joda.time.format.DateTimeFormatterBuilder;\n import org.joda.time.format.FormatUtils;\n \n     /** The time zone for Universal Coordinated Time */\n     public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);\n+    /** Maximum offset. */\n+    private static final int MAX_MILLIS = (86400 * 1000) - 1;\n \n     /** The instance that is providing time zones. */\n     private static Provider cProvider;\n      * <p>\n      * This factory is a convenient way of constructing zones with a fixed offset.\n      * \n-     * @param hoursOffset  the offset in hours from UTC\n+     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n      * @return the DateTimeZone object for the offset\n      * @throws IllegalArgumentException if the offset is too large or too small\n      */\n      * The minutes value is always positive and in the range 0 to 59.\n      * If constructed with the values (-2, 30), the resulting zone is '-02:30'.\n      * \n-     * @param hoursOffset  the offset in hours from UTC\n+     * @param hoursOffset  the offset in hours from UTC, from -23 to +23\n      * @param minutesOffset  the offset in minutes from UTC, must be between 0 and 59 inclusive\n      * @return the DateTimeZone object for the offset\n      * @throws IllegalArgumentException if the offset or minute is too large or too small\n         if (hoursOffset == 0 && minutesOffset == 0) {\n             return DateTimeZone.UTC;\n         }\n+        if (hoursOffset < -23 || hoursOffset > 23) {\n+            throw new IllegalArgumentException(\"Hours out of range: \" + hoursOffset);\n+        }\n         if (minutesOffset < 0 || minutesOffset > 59) {\n             throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);\n         }\n         int offset = 0;\n         try {\n-            int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);\n+            int hoursInMinutes = hoursOffset * 60;\n             if (hoursInMinutes < 0) {\n-                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);\n+                minutesOffset = hoursInMinutes - minutesOffset;\n             } else {\n-                minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);\n+                minutesOffset = hoursInMinutes + minutesOffset;\n             }\n             offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);\n         } catch (ArithmeticException ex) {\n     /**\n      * Gets a time zone instance for the specified offset to UTC in milliseconds.\n      *\n-     * @param millisOffset  the offset in millis from UTC\n+     * @param millisOffset  the offset in millis from UTC, from -23:59:59.999 to +23:59:59.999\n      * @return the DateTimeZone object for the offset\n      */\n     public static DateTimeZone forOffsetMillis(int millisOffset) {\n+        if (millisOffset < -MAX_MILLIS || millisOffset > MAX_MILLIS) {\n+            throw new IllegalArgumentException(\"Millis out of range: \" + millisOffset);\n+        }\n         String id = printOffset(millisOffset);\n         return fixedOffsetZone(id, millisOffset);\n     }\n--- a/src/test/java/org/joda/time/TestDateTimeZone.java\n+++ b/src/test/java/org/joda/time/TestDateTimeZone.java\n /*\n- *  Copyright 2001-2011 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.io.PrintStream;\n-import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.security.AllPermission;\n import java.security.CodeSource;\n     //-----------------------------------------------------------------------\n     public void testForOffsetHoursMinutes_int_int() {\n         assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));\n+        assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));\n         assertEquals(DateTimeZone.forID(\"+03:15\"), DateTimeZone.forOffsetHoursMinutes(3, 15));\n         assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));\n         assertEquals(DateTimeZone.forID(\"-02:30\"), DateTimeZone.forOffsetHoursMinutes(-2, 30));\n+        assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));\n         try {\n             DateTimeZone.forOffsetHoursMinutes(2, 60);\n             fail();\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            DateTimeZone.forOffsetHoursMinutes(999999, 0);\n+            DateTimeZone.forOffsetHoursMinutes(24, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }        \n     //-----------------------------------------------------------------------\n     public void testForOffsetMillis_int() {\n         assertSame(DateTimeZone.UTC, DateTimeZone.forOffsetMillis(0));\n+        assertEquals(DateTimeZone.forID(\"+23:59:59.999\"), DateTimeZone.forOffsetMillis((24 * 60 * 60 * 1000) - 1));\n         assertEquals(DateTimeZone.forID(\"+03:00\"), DateTimeZone.forOffsetMillis(3 * 60 * 60 * 1000));\n         assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetMillis(-2 * 60 * 60 * 1000));\n+        assertEquals(DateTimeZone.forID(\"-23:59:59.999\"), DateTimeZone.forOffsetMillis((-24 * 60 * 60 * 1000) + 1));\n         assertEquals(DateTimeZone.forID(\"+04:45:17.045\"),\n                 DateTimeZone.forOffsetMillis(\n                         4 * 60 * 60 * 1000 + 45 * 60 * 1000 + 17 * 1000 + 45));", "timestamp": 1374317361, "metainfo": ""}