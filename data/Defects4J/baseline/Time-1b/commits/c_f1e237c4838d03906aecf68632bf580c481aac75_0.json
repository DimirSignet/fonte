{"sha": "f1e237c4838d03906aecf68632bf580c481aac75", "log": "Fix to compile on JDK1.3 by use of reflection   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/base/AbstractDateTime.java\n  */\n package org.joda.time.base;\n \n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.GregorianCalendar;\n         extends AbstractInstant\n         implements ReadableDateTime {\n \n+    /** The method to call as TimeZone.getOffset is only from JDK 1.4. */\n+    private static final Method OFFSET_METHOD;\n+    static {\n+        Method m = null;\n+        try {\n+            m = TimeZone.class.getDeclaredMethod(\"getOffset\", new Class[] {Long.TYPE});\n+        } catch (SecurityException ex) {\n+            // ignore\n+        } catch (NoSuchMethodException ex) {\n+            try {\n+                m = TimeZone.class.getDeclaredMethod(\"getOffsets\", new Class[] {Long.TYPE, int[].class});\n+                m.setAccessible(true);\n+            } catch (SecurityException e) {\n+                // ignore\n+            } catch (NoSuchMethodException e) {\n+                // ignore\n+            }\n+        }\n+        OFFSET_METHOD = m;\n+    }\n+\n     //-----------------------------------------------------------------------\n     /**\n      * Constructor.\n      */\n     public Date toDate() {\n         long millis = getMillis();\n-        long millisLocal = millis - TimeZone.getDefault().getOffset(millis);\n-        return new Date(millisLocal + getZone().getOffsetFromLocal(millisLocal));\n+        millis = fixMillisForTimeZone(millis, TimeZone.getDefault());\n+        return new Date(millis);\n     }\n \n     /**\n \n     private Date convertToDate(Calendar cal) {\n         long millis = getMillis();\n-        long millisLocal = millis - cal.getTimeZone().getOffset(millis);\n-        millis = millisLocal + getZone().getOffsetFromLocal(millisLocal);\n+        millis = fixMillisForTimeZone(millis, cal.getTimeZone());\n         return new Date(millis);\n+    }\n+\n+    private long fixMillisForTimeZone(long millis, TimeZone zone) {\n+        if (OFFSET_METHOD == null) {\n+            return millis;\n+        }\n+        Integer val;\n+        try {\n+            if (\"getOffset\".equals(OFFSET_METHOD.getName())) {\n+                val = (Integer) OFFSET_METHOD.invoke(\n+                        zone, new Object[] {new Long(millis)});\n+            } else {\n+                val = (Integer) OFFSET_METHOD.invoke(\n+                        zone, new Object[] {new Long(millis), null});\n+            }\n+        } catch (IllegalAccessException ex) {\n+            return millis;\n+        } catch (InvocationTargetException ex) {\n+            return millis;\n+        }\n+        \n+        long millisLocal = millis - val.intValue();\n+        return millisLocal + getZone().getOffsetFromLocal(millisLocal);\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1133226458, "metainfo": ""}