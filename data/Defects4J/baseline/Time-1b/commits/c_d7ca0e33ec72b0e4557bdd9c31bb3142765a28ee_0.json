{"sha": "d7ca0e33ec72b0e4557bdd9c31bb3142765a28ee", "log": "Add PartialConverter   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/JodaTimePermission.java\n+++ b/JodaTime/src/java/org/joda/time/JodaTimePermission.java\n  *\n  * ConverterManager\n  *   .alterInstantConverters     Allows an instant converter to be added or removed\n+ *   .alterPartialConverters     Allows a partial converter to be added or removed\n  *   .alterDurationConverters    Allows a duration converter to be added or removed\n  *   .alterPeriodConverters      Allows a period converter to be added or removed\n  *   .alterIntervalConverters    Allows an interval converter to be added or removed\n--- a/JodaTime/src/java/org/joda/time/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/TimeOfDay.java\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadableInstant, String, Calendar and Date.\n+     * <p>\n+     * The chronology used will be derived from the object, defaulting to ISO.\n      *\n      * @param instant  the datetime object, null means now\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n     public TimeOfDay(Object instant) {\n-        super(instant);\n+        super(instant, null);\n     }\n \n     /**\n      * The constructor uses the time zone of the chronology specified.\n      * Once the constructor is complete, all further calculations are performed\n      * without reference to a timezone (by switching to UTC).\n+     * The specified chronology overrides that of the object.\n      *\n      * @param instant  the datetime object, null means now\n-     * @param chronology  the chronology, null means ISOChronology\n+     * @param chronology  the chronology, null means ISO default\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n     public TimeOfDay(Object instant, Chronology chronology) {\n-        super(instant, chronology);\n+        super(instant, DateTimeUtils.getChronology(chronology));\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/YearMonthDay.java\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadableInstant, String, Calendar and Date.\n+     * <p>\n+     * The chronology used will be derived from the object, defaulting to ISO.\n      *\n      * @param instant  the datetime object, null means now\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n     public YearMonthDay(Object instant) {\n-        super(instant);\n+        super(instant, null);\n     }\n \n     /**\n      * The constructor uses the time zone of the chronology specified.\n      * Once the constructor is complete, all further calculations are performed\n      * without reference to a timezone (by switching to UTC).\n+     * The specified chronology overrides that of the object.\n      *\n      * @param instant  the datetime object, null means now\n-     * @param chronology  the chronology, null means ISOChronology\n+     * @param chronology  the chronology, null means ISO default\n      * @throws IllegalArgumentException if the instant is invalid\n      */\n     public YearMonthDay(Object instant, Chronology chronology) {\n-        super(instant, chronology);\n+        super(instant, DateTimeUtils.getChronology(chronology));\n     }\n \n     /**\n--- a/JodaTime/src/java/org/joda/time/base/BasePartial.java\n+++ b/JodaTime/src/java/org/joda/time/base/BasePartial.java\n import org.joda.time.DateTimeZone;\n import org.joda.time.ReadablePartial;\n import org.joda.time.convert.ConverterManager;\n-import org.joda.time.convert.InstantConverter;\n+import org.joda.time.convert.PartialConverter;\n \n /**\n  * BasePartial is an abstract implementation of ReadablePartial that stores\n     }\n \n     /**\n-     * Constructs a partial from an Object that represents a time.\n+     * Constructs a partial from an Object that represents a time, using the\n+     * specified chronology.\n      * <p>\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n      * include ReadableInstant, String, Calendar and Date.\n-     *\n-     * @param instant  the datetime object, must not be null\n-     * @throws IllegalArgumentException if the date is null\n-     */\n-    protected BasePartial(Object instant) {\n-        super();\n-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        long millis = converter.getInstantMillis(instant);\n-        Chronology chronology = converter.getChronology(instant);\n-        chronology = DateTimeUtils.getChronology(chronology);\n-        iChronology = chronology.withUTC();\n-        iValues = chronology.get(this, millis);\n-    }\n-\n-    /**\n-     * Constructs a partial from an Object that represents a time, using the\n-     * specified chronology.\n-     * <p>\n-     * The recognised object types are defined in\n-     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n-     * include ReadableInstant, String, Calendar and Date.\n-     * <p>\n-     * The constructor uses the time zone of the chronology specified.\n-     * Once the constructor is complete, all further calculations are performed\n-     * without reference to a timezone (by switching to UTC).\n-     *\n-     * @param instant  the datetime object, must not be null\n-     * @param chronology  the chronology, null means ISOChronology\n-     * @throws IllegalArgumentException if the date is null\n+     * <p>\n+     * The constructor uses the time zone of the chronology specified.\n+     * Once the constructor is complete, all further calculations are performed\n+     * without reference to a timezone (by switching to UTC).\n+     *\n+     * @param instant  the datetime object, null means use converter\n+     * @param chronology  the chronology, null means use converter\n+     * @throws IllegalArgumentException if the date is invalid\n      */\n     protected BasePartial(Object instant, Chronology chronology) {\n         super();\n-        InstantConverter converter = ConverterManager.getInstance().getInstantConverter(instant);\n-        long millis = converter.getInstantMillis(instant, chronology);\n+        PartialConverter converter = ConverterManager.getInstance().getPartialConverter(instant);\n         chronology = converter.getChronology(instant, chronology);\n         chronology = DateTimeUtils.getChronology(chronology);\n         iChronology = chronology.withUTC();\n-        iValues = chronology.get(this, millis);\n+        iValues = converter.getPartialValues(this, instant, chronology);\n     }\n \n     /**\n      *\n      * @param values  the new set of values\n      * @param chronology  the chronology, null means ISOChronology in the default zone\n+     * @throws IllegalArgumentException if the values are invalid\n      */\n     protected BasePartial(int[] values, Chronology chronology) {\n         super();\n--- a/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/AbstractConverter.java\n import org.joda.time.Chronology;\n import org.joda.time.DateTimeZone;\n import org.joda.time.PeriodType;\n+import org.joda.time.ReadablePartial;\n import org.joda.time.chrono.ISOChronology;\n \n /**\n     \n     //-----------------------------------------------------------------------\n     /**\n+     * Extracts the values of the partial from an object of this converter's type.\n+     * The chrono parameter is a hint to the converter, should it require a\n+     * chronology to aid in conversion.\n+     * \n+     * @param fieldSource  a partial that provides access to the fields.\n+     *  This partial may be incomplete and only getFieldType(int) should be used\n+     * @param object  the object to convert\n+     * @param chrono  the chronology to use, which is the non-null result of getChronology()\n+     * @return the array of field values that match the \n+     * @throws ClassCastException if the object is invalid\n+     */\n+    public int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono) {\n+        long instant = getInstantMillis(object, chrono);\n+        return chrono.get(fieldSource, instant);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Selects a suitable period type for the given object.\n      *\n      * @param object  the object to examine, must not be null\n--- a/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/CalendarConverter.java\n import org.joda.time.chrono.ISOChronology;\n \n /**\n- * CalendarConverter converts a java util Calendar to milliseconds in the\n- * chronology that best matches the calendar.\n+ * CalendarConverter converts a java util Calendar to an instant or partial.\n+ * The Calendar is converted to milliseconds and the chronology that best\n+ * matches the calendar.\n  *\n  * @author Stephen Colebourne\n  * @since 1.0\n  */\n-final class CalendarConverter extends AbstractConverter implements InstantConverter {\n-    \n+final class CalendarConverter extends AbstractConverter\n+        implements InstantConverter, PartialConverter {\n+\n     /**\n      * Singleton instance.\n      */\n     static final CalendarConverter INSTANCE = new CalendarConverter();\n-    \n+\n     /**\n      * Restricted constructor.\n      */\n     public long getInstantMillis(Object object) {\n         return ((Calendar) object).getTime().getTime();\n     }\n-    \n+\n     /**\n      * Gets the chronology, which is the GJChronology if a GregorianCalendar is used,\n      * BuddhistChronology if a BuddhistCalendar is used or ISOChronology otherwise.\n         }\n         return getChronology(cal, zone);\n     }\n-    \n+\n     /**\n      * Gets the chronology, which is the GJChronology if a GregorianCalendar is used,\n      * BuddhistChronology if a BuddhistCalendar is used or ISOChronology otherwise.\n             return ISOChronology.getInstance(zone);\n         }\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns Calendar.class.\n     public Class getSupportedType() {\n         return Calendar.class;\n     }\n-    \n+\n }\n--- a/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ConverterManager.java\n  * <li>null (now)\n  * </ul>\n  * \n+ * The default partial converters are:\n+ * <ul>\n+ * <li>ReadablePartial\n+ * <li>ReadableInstant\n+ * <li>String\n+ * <li>Calendar\n+ * <li>Date\n+ * <li>Long (milliseconds)\n+ * <li>null (now)\n+ * </ul>\n+ * \n  * The default duration converters are:\n  * <ul>\n  * <li>ReadableDuration\n     }\n     \n     private ConverterSet iInstantConverters;\n+    private ConverterSet iPartialConverters;\n     private ConverterSet iDurationConverters;\n     private ConverterSet iPeriodConverters;\n     private ConverterSet iIntervalConverters;\n             NullConverter.INSTANCE,\n         });\n \n+        iPartialConverters = new ConverterSet(new Converter[] {\n+            ReadableInstantConverter.INSTANCE,\n+            StringConverter.INSTANCE,\n+            CalendarConverter.INSTANCE,\n+            DateConverter.INSTANCE,\n+            LongConverter.INSTANCE,\n+            NullConverter.INSTANCE,\n+        });\n+\n         iDurationConverters = new ConverterSet(new Converter[] {\n             ReadableDurationConverter.INSTANCE,\n             ReadableIntervalConverter.INSTANCE,\n      * @throws IllegalStateException if multiple converters match the type\n      * equally well\n      */\n-    public DurationConverter getDurationConverter(Object object) {\n-        DurationConverter converter =\n-            (DurationConverter)iDurationConverters.select(object == null ? null : object.getClass());\n+    public PartialConverter getPartialConverter(Object object) {\n+        PartialConverter converter =\n+            (PartialConverter)iPartialConverters.select(object == null ? null : object.getClass());\n         if (converter != null) {\n             return converter;\n         }\n-        throw new IllegalArgumentException(\"No duration converter found for type: \" +\n+        throw new IllegalArgumentException(\"No partial converter found for type: \" +\n             (object == null ? \"null\" : object.getClass().getName()));\n     }\n     \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of the list of converters.\n+     * Gets a copy of the set of converters.\n      * \n      * @return the converters, a copy of the real data, never null\n      */\n-    public DurationConverter[] getDurationConverters() {\n-        ConverterSet set = iDurationConverters;\n-        DurationConverter[] converters = new DurationConverter[set.size()];\n+    public PartialConverter[] getPartialConverters() {\n+        ConverterSet set = iPartialConverters;\n+        PartialConverter[] converters = new PartialConverter[set.size()];\n         set.copyInto(converters);\n         return converters;\n     }\n      * @param converter  the converter to add, null ignored\n      * @return replaced converter, or null\n      */\n-    public DurationConverter addDurationConverter(DurationConverter converter)\n-            throws SecurityException {\n-        \n-        checkAlterDurationConverters();\n-        if (converter == null) {\n-            return null;\n-        }\n-        DurationConverter[] removed = new DurationConverter[1];\n-        iDurationConverters = iDurationConverters.add(converter, removed);\n+    public PartialConverter addPartialConverter(PartialConverter converter)\n+            throws SecurityException {\n+        \n+        checkAlterPartialConverters();\n+        if (converter == null) {\n+            return null;\n+        }\n+        PartialConverter[] removed = new PartialConverter[1];\n+        iPartialConverters = iPartialConverters.add(converter, removed);\n         return removed[0];\n     }\n     \n      * @param converter  the converter to remove, null ignored\n      * @return replaced converter, or null\n      */\n-    public DurationConverter removeDurationConverter(DurationConverter converter)\n-            throws SecurityException {\n-        \n-        checkAlterDurationConverters();\n-        if (converter == null) {\n-            return null;\n-        }\n-        DurationConverter[] removed = new DurationConverter[1];\n-        iDurationConverters = iDurationConverters.remove(converter, removed);\n-        return removed[0];\n-    }\n-    \n-    /**\n-     * Checks whether the user has permission 'ConverterManager.alterInstantConverters'.\n+    public PartialConverter removePartialConverter(PartialConverter converter)\n+            throws SecurityException {\n+        \n+        checkAlterPartialConverters();\n+        if (converter == null) {\n+            return null;\n+        }\n+        PartialConverter[] removed = new PartialConverter[1];\n+        iPartialConverters = iPartialConverters.remove(converter, removed);\n+        return removed[0];\n+    }\n+    \n+    /**\n+     * Checks whether the user has permission 'ConverterManager.alterPartialConverters'.\n      * \n      * @throws SecurityException if the user does not have the permission\n      */\n-    private void checkAlterDurationConverters() throws SecurityException {\n+    private void checkAlterPartialConverters() throws SecurityException {\n         SecurityManager sm = System.getSecurityManager();\n         if (sm != null) {\n-            sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterDurationConverters\"));\n+            sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterPartialConverters\"));\n         }\n     }\n \n      * @throws IllegalStateException if multiple converters match the type\n      * equally well\n      */\n-    public PeriodConverter getPeriodConverter(Object object) {\n-        PeriodConverter converter =\n-            (PeriodConverter)iPeriodConverters.select(object == null ? null : object.getClass());\n+    public DurationConverter getDurationConverter(Object object) {\n+        DurationConverter converter =\n+            (DurationConverter)iDurationConverters.select(object == null ? null : object.getClass());\n         if (converter != null) {\n             return converter;\n         }\n-        throw new IllegalArgumentException(\"No period converter found for type: \" +\n+        throw new IllegalArgumentException(\"No duration converter found for type: \" +\n             (object == null ? \"null\" : object.getClass().getName()));\n     }\n     \n      * \n      * @return the converters, a copy of the real data, never null\n      */\n-    public PeriodConverter[] getPeriodConverters() {\n-        ConverterSet set = iPeriodConverters;\n-        PeriodConverter[] converters = new PeriodConverter[set.size()];\n+    public DurationConverter[] getDurationConverters() {\n+        ConverterSet set = iDurationConverters;\n+        DurationConverter[] converters = new DurationConverter[set.size()];\n         set.copyInto(converters);\n         return converters;\n     }\n      * @param converter  the converter to add, null ignored\n      * @return replaced converter, or null\n      */\n-    public PeriodConverter addPeriodConverter(PeriodConverter converter)\n-            throws SecurityException {\n-        \n-        checkAlterPeriodConverters();\n-        if (converter == null) {\n-            return null;\n-        }\n-        PeriodConverter[] removed = new PeriodConverter[1];\n-        iPeriodConverters = iPeriodConverters.add(converter, removed);\n+    public DurationConverter addDurationConverter(DurationConverter converter)\n+            throws SecurityException {\n+        \n+        checkAlterDurationConverters();\n+        if (converter == null) {\n+            return null;\n+        }\n+        DurationConverter[] removed = new DurationConverter[1];\n+        iDurationConverters = iDurationConverters.add(converter, removed);\n         return removed[0];\n     }\n     \n      * @param converter  the converter to remove, null ignored\n      * @return replaced converter, or null\n      */\n-    public PeriodConverter removePeriodConverter(PeriodConverter converter)\n-            throws SecurityException {\n-        \n-        checkAlterPeriodConverters();\n-        if (converter == null) {\n-            return null;\n-        }\n-        PeriodConverter[] removed = new PeriodConverter[1];\n-        iPeriodConverters = iPeriodConverters.remove(converter, removed);\n-        return removed[0];\n-    }\n-    \n-    /**\n-     * Checks whether the user has permission 'ConverterManager.alterInstantConverters'.\n+    public DurationConverter removeDurationConverter(DurationConverter converter)\n+            throws SecurityException {\n+        \n+        checkAlterDurationConverters();\n+        if (converter == null) {\n+            return null;\n+        }\n+        DurationConverter[] removed = new DurationConverter[1];\n+        iDurationConverters = iDurationConverters.remove(converter, removed);\n+        return removed[0];\n+    }\n+    \n+    /**\n+     * Checks whether the user has permission 'ConverterManager.alterDurationConverters'.\n      * \n      * @throws SecurityException if the user does not have the permission\n      */\n-    private void checkAlterPeriodConverters() throws SecurityException {\n+    private void checkAlterDurationConverters() throws SecurityException {\n         SecurityManager sm = System.getSecurityManager();\n         if (sm != null) {\n-            sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterPeriodConverters\"));\n+            sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterDurationConverters\"));\n         }\n     }\n \n      * @throws IllegalStateException if multiple converters match the type\n      * equally well\n      */\n-    public IntervalConverter getIntervalConverter(Object object) {\n-        IntervalConverter converter =\n-            (IntervalConverter)iIntervalConverters.select(object == null ? null : object.getClass());\n+    public PeriodConverter getPeriodConverter(Object object) {\n+        PeriodConverter converter =\n+            (PeriodConverter)iPeriodConverters.select(object == null ? null : object.getClass());\n         if (converter != null) {\n             return converter;\n         }\n-        throw new IllegalArgumentException(\"No interval converter found for type: \" +\n+        throw new IllegalArgumentException(\"No period converter found for type: \" +\n             (object == null ? \"null\" : object.getClass().getName()));\n     }\n     \n      * \n      * @return the converters, a copy of the real data, never null\n      */\n-    public IntervalConverter[] getIntervalConverters() {\n-        ConverterSet set = iIntervalConverters;\n-        IntervalConverter[] converters = new IntervalConverter[set.size()];\n+    public PeriodConverter[] getPeriodConverters() {\n+        ConverterSet set = iPeriodConverters;\n+        PeriodConverter[] converters = new PeriodConverter[set.size()];\n         set.copyInto(converters);\n         return converters;\n     }\n      * @param converter  the converter to add, null ignored\n      * @return replaced converter, or null\n      */\n+    public PeriodConverter addPeriodConverter(PeriodConverter converter)\n+            throws SecurityException {\n+        \n+        checkAlterPeriodConverters();\n+        if (converter == null) {\n+            return null;\n+        }\n+        PeriodConverter[] removed = new PeriodConverter[1];\n+        iPeriodConverters = iPeriodConverters.add(converter, removed);\n+        return removed[0];\n+    }\n+    \n+    /**\n+     * Removes a converter from the set of converters. If the converter was\n+     * not in the set, no changes are made.\n+     * \n+     * @param converter  the converter to remove, null ignored\n+     * @return replaced converter, or null\n+     */\n+    public PeriodConverter removePeriodConverter(PeriodConverter converter)\n+            throws SecurityException {\n+        \n+        checkAlterPeriodConverters();\n+        if (converter == null) {\n+            return null;\n+        }\n+        PeriodConverter[] removed = new PeriodConverter[1];\n+        iPeriodConverters = iPeriodConverters.remove(converter, removed);\n+        return removed[0];\n+    }\n+    \n+    /**\n+     * Checks whether the user has permission 'ConverterManager.alterPeriodConverters'.\n+     * \n+     * @throws SecurityException if the user does not have the permission\n+     */\n+    private void checkAlterPeriodConverters() throws SecurityException {\n+        SecurityManager sm = System.getSecurityManager();\n+        if (sm != null) {\n+            sm.checkPermission(new JodaTimePermission(\"ConverterManager.alterPeriodConverters\"));\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the best converter for the object specified.\n+     * \n+     * @param object  the object to convert\n+     * @return the converter to use\n+     * @throws IllegalArgumentException if no suitable converter\n+     * @throws IllegalStateException if multiple converters match the type\n+     * equally well\n+     */\n+    public IntervalConverter getIntervalConverter(Object object) {\n+        IntervalConverter converter =\n+            (IntervalConverter)iIntervalConverters.select(object == null ? null : object.getClass());\n+        if (converter != null) {\n+            return converter;\n+        }\n+        throw new IllegalArgumentException(\"No interval converter found for type: \" +\n+            (object == null ? \"null\" : object.getClass().getName()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets a copy of the list of converters.\n+     * \n+     * @return the converters, a copy of the real data, never null\n+     */\n+    public IntervalConverter[] getIntervalConverters() {\n+        ConverterSet set = iIntervalConverters;\n+        IntervalConverter[] converters = new IntervalConverter[set.size()];\n+        set.copyInto(converters);\n+        return converters;\n+    }\n+    \n+    /**\n+     * Adds a converter to the set of converters. If a matching converter is\n+     * already in the set, the given converter replaces it. If the converter is\n+     * exactly the same as one already in the set, no changes are made.\n+     * <p>\n+     * The order in which converters are added is not relevent. The best\n+     * converter is selected by examining the object hierarchy.\n+     * \n+     * @param converter  the converter to add, null ignored\n+     * @return replaced converter, or null\n+     */\n     public IntervalConverter addIntervalConverter(IntervalConverter converter) \n             throws SecurityException {\n         \n     }\n     \n     /**\n-     * Checks whether the user has permission 'ConverterManager.alterInstantConverters'.\n+     * Checks whether the user has permission 'ConverterManager.alterIntervalConverters'.\n      * \n      * @throws SecurityException if the user does not have the permission\n      */\n     public String toString() {\n         return \"ConverterManager[\" +\n             iInstantConverters.size() + \" instant,\" +\n+            iPartialConverters.size() + \" partial,\" +\n             iDurationConverters.size() + \" duration,\" +\n             iPeriodConverters.size() + \" period,\" +\n             iIntervalConverters.size() + \" interval]\";\n--- a/JodaTime/src/java/org/joda/time/convert/DateConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/DateConverter.java\n import java.util.Date;\n \n /**\n- * DateConverter converts a java util Date to milliseconds in the ISOChronology.\n+ * DateConverter converts a java util Date to an instant or partial.\n+ * The Date is converted to milliseconds in the ISO chronology.\n  *\n  * @author Stephen Colebourne\n  * @since 1.0\n  */\n-final class DateConverter extends AbstractConverter implements InstantConverter {\n+final class DateConverter extends AbstractConverter\n+        implements InstantConverter, PartialConverter {\n     \n     /**\n      * Singleton instance.\n--- a/JodaTime/src/java/org/joda/time/convert/InstantConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/InstantConverter.java\n     /**\n      * Extracts the millis from an object of this converter's type.\n      * \n-     * @param object  the object to convert, must not be null\n+     * @param object  the object to convert\n      * @return the millisecond instant\n      * @throws ClassCastException if the object is invalid\n      */\n      * parameter is a hint to the converter, should it require a time zone to\n      * aid in conversion.\n      * \n-     * @param object  the object to convert, must not be null\n+     * @param object  the object to convert\n      * @param zone  the zone to use, null means default zone\n      * @return the millisecond instant\n      * @throws ClassCastException if the object is invalid\n      * parameter is a hint to the converter, should it require a chronology to\n      * aid in conversion.\n      * \n-     * @param object  the object to convert, must not be null\n-     * @param chrono  the chronology to use, null means ISOChronology\n+     * @param object  the object to convert\n+     * @param chrono  the chronology to use, null usually means ISO\n      * @return the millisecond instant\n      * @throws ClassCastException if the object is invalid\n      */\n     /**\n      * Extracts the chronology from an object of this converter's type.\n      * \n-     * @param object  the object to convert, must not be null\n+     * @param object  the object to convert\n      * @return the chronology, never null\n      * @throws ClassCastException if the object is invalid\n      */\n      * Extracts the chronology from an object of this converter's type\n      * where the time zone is specified.\n      * \n-     * @param object  the object to convert, must not be null\n+     * @param object  the object to convert\n      * @param zone  the specified zone to use, null means default zone\n      * @return the chronology, never null\n      * @throws ClassCastException if the object is invalid\n      * Extracts the chronology from an object of this converter's type\n      * where the chronology is specified.\n      * \n-     * @param object  the object to convert, must not be null\n-     * @param chrono  the chronology to use, null means ISOChronology\n+     * @param object  the object to convert\n+     * @param chrono  the chronology to use, null usually means ISO\n      * @return the chronology, never null\n      * @throws ClassCastException if the object is invalid\n      */\n--- a/JodaTime/src/java/org/joda/time/convert/LongConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/LongConverter.java\n package org.joda.time.convert;\n \n /**\n- * LongConverter converts a Long to milliseconds in the ISOChronology.\n+ * LongConverter converts a Long to an instant, partial or duration.\n+ * The Long value represents milliseconds in the ISO chronology.\n  *\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n  * @since 1.0\n  */\n-class LongConverter extends AbstractConverter implements InstantConverter, DurationConverter {\n+class LongConverter extends AbstractConverter\n+        implements InstantConverter, PartialConverter, DurationConverter {\n     \n     /**\n      * Singleton instance.\n     public Class getSupportedType() {\n         return Long.class;\n     }\n-    \n+\n }\n--- a/JodaTime/src/java/org/joda/time/convert/NullConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/NullConverter.java\n import org.joda.time.ReadWritablePeriod;\n \n /**\n- * NullConverter converts null to milliseconds (now) in the ISOChronology.\n+ * NullConverter converts null to an instant, partial, duration, period\n+ * or interval. Null means now for instant/partial, zero for duration/period\n+ * and from now to now for interval.\n  *\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n  * @since 1.0\n  */\n class NullConverter extends AbstractConverter\n-        implements InstantConverter, DurationConverter, PeriodConverter, IntervalConverter {\n+        implements InstantConverter, PartialConverter, DurationConverter, PeriodConverter, IntervalConverter {\n     \n     /**\n      * Singleton instance.\n--- /dev/null\n+++ b/JodaTime/src/java/org/joda/time/convert/PartialConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.ReadablePartial;\n+\n+/**\n+ * PartialConverter defines how an object is converted to a ReadablePartial.\n+ * <p>\n+ * The two methods in this interface must be called in order, as the\n+ * <code>getPartialValues</code> method relies on the result of the\n+ * <code>getChronology</code> method being passed in.\n+ *\n+ * @author Stephen Colebourne\n+ * @since 1.0\n+ */\n+public interface PartialConverter extends Converter {\n+\n+    /**\n+     * Extracts the chronology from an object of this converter's type\n+     * where the chronology is specified.\n+     * \n+     * @param object  the object to convert\n+     * @param chrono  the chronology to use, null usually means ISO\n+     * @return the chronology, not converted to UTC/local time zone, must be non-null valid\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    Chronology getChronology(Object object, Chronology chrono);\n+\n+    /**\n+     * Extracts the values of the partial from an object of this converter's type.\n+     * The chrono parameter is a hint to the converter, should it require a\n+     * chronology to aid in conversion.\n+     * \n+     * @param fieldSource  a partial that provides access to the fields.\n+     *  This partial may be incomplete and only getFieldType(int) should be used\n+     * @param object  the object to convert\n+     * @param chrono  the chronology to use, which is the non-null result of getChronology()\n+     * @return the array of field values that match the fieldSource, must be non-null valid\n+     * @throws ClassCastException if the object is invalid\n+     */\n+    int[] getPartialValues(ReadablePartial fieldSource, Object object, Chronology chrono);\n+\n+}\n--- a/JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/ReadableInstantConverter.java\n  * @author Stephen Colebourne\n  * @since 1.0\n  */\n-class ReadableInstantConverter extends AbstractConverter implements InstantConverter {\n-    \n+class ReadableInstantConverter extends AbstractConverter\n+        implements InstantConverter, PartialConverter {\n+\n     /**\n      * Singleton instance.\n      */\n         }\n         return chrono;\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     /**\n      * Returns ReadableInstant.class.\n     public Class getSupportedType() {\n         return ReadableInstant.class;\n     }\n-    \n+\n }\n--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n import org.joda.time.format.PeriodParser;\n \n /**\n- * StringConverter converts a String to milliseconds in the ISOChronology.\n+ * StringConverter converts from a String to an instant, partial,\n+ * duration, period or interval..\n  *\n  * @author Stephen Colebourne\n  * @author Brian S O'Neill\n  * @since 1.0\n  */\n class StringConverter extends AbstractConverter\n-        implements InstantConverter, DurationConverter, PeriodConverter, IntervalConverter {\n+        implements InstantConverter, PartialConverter, DurationConverter, PeriodConverter, IntervalConverter {\n \n     /**\n      * Singleton instance.\n--- a/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestTimeOfDay_Constructors.java\n \n import org.joda.time.chrono.ISOChronology;\n import org.joda.time.chrono.JulianChronology;\n-import org.joda.time.convert.ConverterManager;\n-import org.joda.time.convert.MockZeroNullIntegerConverter;\n \n /**\n  * This class is a Junit unit test for TimeOfDay.\n         assertEquals(40, test.getMillisOfSecond());\n     }\n \n-    /**\n-     * Test constructor (Object=null)\n-     */\n-    public void testConstructor_badconverterObject() throws Throwable {\n-        try {\n-            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n-            TimeOfDay test = new TimeOfDay(new Integer(0));\n-            assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n-            assertEquals(0 + OFFSET, test.getHourOfDay());\n-            assertEquals(0, test.getMinuteOfHour());\n-            assertEquals(0, test.getSecondOfMinute());\n-            assertEquals(0, test.getMillisOfSecond());\n-        } finally {\n-            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n-        }\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Test constructor (Object, Chronology)\n         assertEquals(40, test.getMillisOfSecond());\n     }\n \n-    /**\n-     * Test constructor (Object=null)\n-     */\n-    public void testConstructor_badconverterObject_Chronology() throws Throwable {\n-        try {\n-            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n-            TimeOfDay test = new TimeOfDay(new Integer(0), JulianChronology.getInstance());\n-            assertEquals(ISOChronology.getInstanceUTC(), test.getChronology());\n-            assertEquals(0 + OFFSET, test.getHourOfDay());\n-            assertEquals(0, test.getMinuteOfHour());\n-            assertEquals(0, test.getSecondOfMinute());\n-            assertEquals(0, test.getMillisOfSecond());\n-        } finally {\n-            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n-        }\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Test constructor (int, int)\n--- a/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestYearMonthDay_Constructors.java\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n-\n-import org.joda.time.convert.ConverterManager;\n-import org.joda.time.convert.MockZeroNullIntegerConverter;\n \n /**\n  * This class is a Junit unit test for YearMonthDay.\n     }\n \n     /**\n-     * Test constructor (Object=null)\n-     */\n-    public void testConstructor_badconverterObject() throws Throwable {\n-        try {\n-            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n-            YearMonthDay test = new YearMonthDay(new Integer(0));\n-            assertEquals(ISO_UTC, test.getChronology());\n-            assertEquals(1970, test.getYear());\n-            assertEquals(1, test.getMonthOfYear());\n-            assertEquals(1, test.getDayOfMonth());\n-        } finally {\n-            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n-        }\n-    }\n-\n-    /**\n      * Test constructor (Object, Chronology)\n      */\n     public void testConstructor_Object_Chronology() throws Throwable {\n         assertEquals(9, test.getDayOfMonth());\n     }\n \n-    /**\n-     * Test constructor (Object=null)\n-     */\n-    public void testConstructor_badconverterObject_Chronology() throws Throwable {\n-        try {\n-            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n-            YearMonthDay test = new YearMonthDay(new Integer(0), GREGORIAN_PARIS);\n-            assertEquals(ISO_UTC, test.getChronology());\n-            assertEquals(1970, test.getYear());\n-            assertEquals(1, test.getMonthOfYear());\n-            assertEquals(1, test.getDayOfMonth());\n-        } finally {\n-            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n-        }\n-    }\n-\n     //-----------------------------------------------------------------------\n     /**\n      * Test constructor (int, int, int)\n--- a/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n \n     //-----------------------------------------------------------------------\n     public void testToString() {\n-        assertEquals(\"ConverterManager[6 instant,5 duration,5 period,3 interval]\", ConverterManager.getInstance().toString());\n+        assertEquals(\"ConverterManager[6 instant,6 partial,5 duration,5 period,3 interval]\", ConverterManager.getInstance().toString());\n     }\n \n }", "timestamp": 1094981364, "metainfo": ""}