{"sha": "a61b3ff22820c70d36958ac9090f241f99a0dd0b", "log": "Simplify tests", "commit": "\n--- a/src/test/java/org/joda/time/chrono/TestBuddhistChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestBuddhistChronology.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n     private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n     private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n     private static final Chronology BUDDHIST_UTC = BuddhistChronology.getInstanceUTC();\n-    private static final Chronology COPTIC_UTC = CopticChronology.getInstanceUTC();\n     private static final Chronology JULIAN_UTC = JulianChronology.getInstanceUTC();\n     private static final Chronology GJ_UTC = GJChronology.getInstanceUTC();\n     private static final Chronology ISO_UTC = ISOChronology.getInstanceUTC();\n \n     //-----------------------------------------------------------------------\n     public void testDurationFields() {\n-        assertEquals(\"eras\", BuddhistChronology.getInstance().eras().getName());\n-        assertEquals(\"centuries\", BuddhistChronology.getInstance().centuries().getName());\n-        assertEquals(\"years\", BuddhistChronology.getInstance().years().getName());\n-        assertEquals(\"weekyears\", BuddhistChronology.getInstance().weekyears().getName());\n-        assertEquals(\"months\", BuddhistChronology.getInstance().months().getName());\n-        assertEquals(\"weeks\", BuddhistChronology.getInstance().weeks().getName());\n-        assertEquals(\"days\", BuddhistChronology.getInstance().days().getName());\n+        final BuddhistChronology buddhist = BuddhistChronology.getInstance();\n+        assertEquals(\"eras\", buddhist.eras().getName());\n+        assertEquals(\"centuries\", buddhist.centuries().getName());\n+        assertEquals(\"years\", buddhist.years().getName());\n+        assertEquals(\"weekyears\", buddhist.weekyears().getName());\n+        assertEquals(\"months\", buddhist.months().getName());\n+        assertEquals(\"weeks\", buddhist.weeks().getName());\n+        assertEquals(\"days\", buddhist.days().getName());\n         assertEquals(\"halfdays\", GregorianChronology.getInstance().halfdays().getName());\n-        assertEquals(\"hours\", BuddhistChronology.getInstance().hours().getName());\n-        assertEquals(\"minutes\", BuddhistChronology.getInstance().minutes().getName());\n-        assertEquals(\"seconds\", BuddhistChronology.getInstance().seconds().getName());\n-        assertEquals(\"millis\", BuddhistChronology.getInstance().millis().getName());\n-        \n-        assertEquals(false, BuddhistChronology.getInstance().eras().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().centuries().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().years().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().weekyears().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().months().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().weeks().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().days().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().halfdays().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().hours().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().minutes().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().seconds().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().millis().isSupported());\n-        \n-        assertEquals(false, BuddhistChronology.getInstance().centuries().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstance().years().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstance().weekyears().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstance().months().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstance().weeks().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstance().days().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstance().halfdays().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance().hours().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance().minutes().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance().seconds().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance().millis().isPrecise());\n-        \n-        assertEquals(false, BuddhistChronology.getInstanceUTC().centuries().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstanceUTC().years().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstanceUTC().months().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstanceUTC().weeks().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstanceUTC().days().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstanceUTC().halfdays().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstanceUTC().hours().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstanceUTC().minutes().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstanceUTC().seconds().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstanceUTC().millis().isPrecise());\n-        \n-        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n-        assertEquals(false, BuddhistChronology.getInstance(gmt).centuries().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstance(gmt).years().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstance(gmt).weekyears().isPrecise());\n-        assertEquals(false, BuddhistChronology.getInstance(gmt).months().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance(gmt).weeks().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance(gmt).days().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance(gmt).halfdays().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance(gmt).hours().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance(gmt).minutes().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance(gmt).seconds().isPrecise());\n-        assertEquals(true, BuddhistChronology.getInstance(gmt).millis().isPrecise());\n+        assertEquals(\"hours\", buddhist.hours().getName());\n+        assertEquals(\"minutes\", buddhist.minutes().getName());\n+        assertEquals(\"seconds\", buddhist.seconds().getName());\n+        assertEquals(\"millis\", buddhist.millis().getName());\n+        \n+        assertEquals(false, buddhist.eras().isSupported());\n+        assertEquals(true, buddhist.centuries().isSupported());\n+        assertEquals(true, buddhist.years().isSupported());\n+        assertEquals(true, buddhist.weekyears().isSupported());\n+        assertEquals(true, buddhist.months().isSupported());\n+        assertEquals(true, buddhist.weeks().isSupported());\n+        assertEquals(true, buddhist.days().isSupported());\n+        assertEquals(true, buddhist.halfdays().isSupported());\n+        assertEquals(true, buddhist.hours().isSupported());\n+        assertEquals(true, buddhist.minutes().isSupported());\n+        assertEquals(true, buddhist.seconds().isSupported());\n+        assertEquals(true, buddhist.millis().isSupported());\n+        \n+        assertEquals(false, buddhist.centuries().isPrecise());\n+        assertEquals(false, buddhist.years().isPrecise());\n+        assertEquals(false, buddhist.weekyears().isPrecise());\n+        assertEquals(false, buddhist.months().isPrecise());\n+        assertEquals(false, buddhist.weeks().isPrecise());\n+        assertEquals(false, buddhist.days().isPrecise());\n+        assertEquals(false, buddhist.halfdays().isPrecise());\n+        assertEquals(true, buddhist.hours().isPrecise());\n+        assertEquals(true, buddhist.minutes().isPrecise());\n+        assertEquals(true, buddhist.seconds().isPrecise());\n+        assertEquals(true, buddhist.millis().isPrecise());\n+        \n+        final BuddhistChronology buddhistUTC = BuddhistChronology.getInstanceUTC();\n+        assertEquals(false, buddhistUTC.centuries().isPrecise());\n+        assertEquals(false, buddhistUTC.years().isPrecise());\n+        assertEquals(false, buddhistUTC.weekyears().isPrecise());\n+        assertEquals(false, buddhistUTC.months().isPrecise());\n+        assertEquals(true, buddhistUTC.weeks().isPrecise());\n+        assertEquals(true, buddhistUTC.days().isPrecise());\n+        assertEquals(true, buddhistUTC.halfdays().isPrecise());\n+        assertEquals(true, buddhistUTC.hours().isPrecise());\n+        assertEquals(true, buddhistUTC.minutes().isPrecise());\n+        assertEquals(true, buddhistUTC.seconds().isPrecise());\n+        assertEquals(true, buddhistUTC.millis().isPrecise());\n+        \n+        final DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        final BuddhistChronology buddhistGMT = BuddhistChronology.getInstance(gmt);\n+        assertEquals(false, buddhistGMT.centuries().isPrecise());\n+        assertEquals(false, buddhistGMT.years().isPrecise());\n+        assertEquals(false, buddhistGMT.weekyears().isPrecise());\n+        assertEquals(false, buddhistGMT.months().isPrecise());\n+        assertEquals(true, buddhistGMT.weeks().isPrecise());\n+        assertEquals(true, buddhistGMT.days().isPrecise());\n+        assertEquals(true, buddhistGMT.halfdays().isPrecise());\n+        assertEquals(true, buddhistGMT.hours().isPrecise());\n+        assertEquals(true, buddhistGMT.minutes().isPrecise());\n+        assertEquals(true, buddhistGMT.seconds().isPrecise());\n+        assertEquals(true, buddhistGMT.millis().isPrecise());\n     }\n \n     public void testDateFields() {\n-        assertEquals(\"era\", BuddhistChronology.getInstance().era().getName());\n-        assertEquals(\"centuryOfEra\", BuddhistChronology.getInstance().centuryOfEra().getName());\n-        assertEquals(\"yearOfCentury\", BuddhistChronology.getInstance().yearOfCentury().getName());\n-        assertEquals(\"yearOfEra\", BuddhistChronology.getInstance().yearOfEra().getName());\n-        assertEquals(\"year\", BuddhistChronology.getInstance().year().getName());\n-        assertEquals(\"monthOfYear\", BuddhistChronology.getInstance().monthOfYear().getName());\n-        assertEquals(\"weekyearOfCentury\", BuddhistChronology.getInstance().weekyearOfCentury().getName());\n-        assertEquals(\"weekyear\", BuddhistChronology.getInstance().weekyear().getName());\n-        assertEquals(\"weekOfWeekyear\", BuddhistChronology.getInstance().weekOfWeekyear().getName());\n-        assertEquals(\"dayOfYear\", BuddhistChronology.getInstance().dayOfYear().getName());\n-        assertEquals(\"dayOfMonth\", BuddhistChronology.getInstance().dayOfMonth().getName());\n-        assertEquals(\"dayOfWeek\", BuddhistChronology.getInstance().dayOfWeek().getName());\n-        \n-        assertEquals(true, BuddhistChronology.getInstance().era().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().centuryOfEra().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().yearOfCentury().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().yearOfEra().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().year().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().monthOfYear().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().weekyearOfCentury().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().weekyear().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().weekOfWeekyear().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().dayOfYear().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().dayOfMonth().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().dayOfWeek().isSupported());\n+        final BuddhistChronology buddhist = BuddhistChronology.getInstance();\n+        assertEquals(\"era\", buddhist.era().getName());\n+        assertEquals(\"centuryOfEra\", buddhist.centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", buddhist.yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", buddhist.yearOfEra().getName());\n+        assertEquals(\"year\", buddhist.year().getName());\n+        assertEquals(\"monthOfYear\", buddhist.monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", buddhist.weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", buddhist.weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", buddhist.weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", buddhist.dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", buddhist.dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", buddhist.dayOfWeek().getName());\n+        \n+        assertEquals(true, buddhist.era().isSupported());\n+        assertEquals(true, buddhist.centuryOfEra().isSupported());\n+        assertEquals(true, buddhist.yearOfCentury().isSupported());\n+        assertEquals(true, buddhist.yearOfEra().isSupported());\n+        assertEquals(true, buddhist.year().isSupported());\n+        assertEquals(true, buddhist.monthOfYear().isSupported());\n+        assertEquals(true, buddhist.weekyearOfCentury().isSupported());\n+        assertEquals(true, buddhist.weekyear().isSupported());\n+        assertEquals(true, buddhist.weekOfWeekyear().isSupported());\n+        assertEquals(true, buddhist.dayOfYear().isSupported());\n+        assertEquals(true, buddhist.dayOfMonth().isSupported());\n+        assertEquals(true, buddhist.dayOfWeek().isSupported());\n     }\n \n     public void testTimeFields() {\n-        assertEquals(\"halfdayOfDay\", BuddhistChronology.getInstance().halfdayOfDay().getName());\n-        assertEquals(\"clockhourOfHalfday\", BuddhistChronology.getInstance().clockhourOfHalfday().getName());\n-        assertEquals(\"hourOfHalfday\", BuddhistChronology.getInstance().hourOfHalfday().getName());\n-        assertEquals(\"clockhourOfDay\", BuddhistChronology.getInstance().clockhourOfDay().getName());\n-        assertEquals(\"hourOfDay\", BuddhistChronology.getInstance().hourOfDay().getName());\n-        assertEquals(\"minuteOfDay\", BuddhistChronology.getInstance().minuteOfDay().getName());\n-        assertEquals(\"minuteOfHour\", BuddhistChronology.getInstance().minuteOfHour().getName());\n-        assertEquals(\"secondOfDay\", BuddhistChronology.getInstance().secondOfDay().getName());\n-        assertEquals(\"secondOfMinute\", BuddhistChronology.getInstance().secondOfMinute().getName());\n-        assertEquals(\"millisOfDay\", BuddhistChronology.getInstance().millisOfDay().getName());\n-        assertEquals(\"millisOfSecond\", BuddhistChronology.getInstance().millisOfSecond().getName());\n-        \n-        assertEquals(true, BuddhistChronology.getInstance().halfdayOfDay().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().clockhourOfHalfday().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().hourOfHalfday().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().clockhourOfDay().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().hourOfDay().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().minuteOfDay().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().minuteOfHour().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().secondOfDay().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().secondOfMinute().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().millisOfDay().isSupported());\n-        assertEquals(true, BuddhistChronology.getInstance().millisOfSecond().isSupported());\n+        final BuddhistChronology buddhist = BuddhistChronology.getInstance();\n+        assertEquals(\"halfdayOfDay\", buddhist.halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", buddhist.clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", buddhist.hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", buddhist.clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", buddhist.hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", buddhist.minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", buddhist.minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", buddhist.secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", buddhist.secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", buddhist.millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", buddhist.millisOfSecond().getName());\n+        \n+        assertEquals(true, buddhist.halfdayOfDay().isSupported());\n+        assertEquals(true, buddhist.clockhourOfHalfday().isSupported());\n+        assertEquals(true, buddhist.hourOfHalfday().isSupported());\n+        assertEquals(true, buddhist.clockhourOfDay().isSupported());\n+        assertEquals(true, buddhist.hourOfDay().isSupported());\n+        assertEquals(true, buddhist.minuteOfDay().isSupported());\n+        assertEquals(true, buddhist.minuteOfHour().isSupported());\n+        assertEquals(true, buddhist.secondOfDay().isSupported());\n+        assertEquals(true, buddhist.secondOfMinute().isSupported());\n+        assertEquals(true, buddhist.millisOfDay().isSupported());\n+        assertEquals(true, buddhist.millisOfSecond().isSupported());\n     }\n \n     //-----------------------------------------------------------------------\n         DateTimeField gjDayOfMonth = GJ_UTC.dayOfMonth();\n         DateTimeField gjMonthOfYear = GJ_UTC.monthOfYear();\n         DateTimeField gjYear = GJ_UTC.year();\n-        DateTimeField gjYearOfEra = GJ_UTC.yearOfEra();\n-        DateTimeField gjEra = GJ_UTC.era();\n         while (millis < end) {\n             assertEquals(gjDayOfWeek.get(millis), dayOfWeek.get(millis));\n             assertEquals(gjDayOfYear.get(millis), dayOfYear.get(millis));\n--- a/src/test/java/org/joda/time/chrono/TestCopticChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestCopticChronology.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     //-----------------------------------------------------------------------\n     public void testDurationFields() {\n-        assertEquals(\"eras\", CopticChronology.getInstance().eras().getName());\n-        assertEquals(\"centuries\", CopticChronology.getInstance().centuries().getName());\n-        assertEquals(\"years\", CopticChronology.getInstance().years().getName());\n-        assertEquals(\"weekyears\", CopticChronology.getInstance().weekyears().getName());\n-        assertEquals(\"months\", CopticChronology.getInstance().months().getName());\n-        assertEquals(\"weeks\", CopticChronology.getInstance().weeks().getName());\n-        assertEquals(\"days\", CopticChronology.getInstance().days().getName());\n-        assertEquals(\"halfdays\", CopticChronology.getInstance().halfdays().getName());\n-        assertEquals(\"hours\", CopticChronology.getInstance().hours().getName());\n-        assertEquals(\"minutes\", CopticChronology.getInstance().minutes().getName());\n-        assertEquals(\"seconds\", CopticChronology.getInstance().seconds().getName());\n-        assertEquals(\"millis\", CopticChronology.getInstance().millis().getName());\n-        \n-        assertEquals(false, CopticChronology.getInstance().eras().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().centuries().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().years().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().weekyears().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().months().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().weeks().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().days().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().halfdays().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().hours().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().minutes().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().seconds().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().millis().isSupported());\n-        \n-        assertEquals(false, CopticChronology.getInstance().centuries().isPrecise());\n-        assertEquals(false, CopticChronology.getInstance().years().isPrecise());\n-        assertEquals(false, CopticChronology.getInstance().weekyears().isPrecise());\n-        assertEquals(false, CopticChronology.getInstance().months().isPrecise());\n-        assertEquals(false, CopticChronology.getInstance().weeks().isPrecise());\n-        assertEquals(false, CopticChronology.getInstance().days().isPrecise());\n-        assertEquals(false, CopticChronology.getInstance().halfdays().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance().hours().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance().minutes().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance().seconds().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance().millis().isPrecise());\n-        \n-        assertEquals(false, CopticChronology.getInstanceUTC().centuries().isPrecise());\n-        assertEquals(false, CopticChronology.getInstanceUTC().years().isPrecise());\n-        assertEquals(false, CopticChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(false, CopticChronology.getInstanceUTC().months().isPrecise());\n-        assertEquals(true, CopticChronology.getInstanceUTC().weeks().isPrecise());\n-        assertEquals(true, CopticChronology.getInstanceUTC().days().isPrecise());\n-        assertEquals(true, CopticChronology.getInstanceUTC().halfdays().isPrecise());\n-        assertEquals(true, CopticChronology.getInstanceUTC().hours().isPrecise());\n-        assertEquals(true, CopticChronology.getInstanceUTC().minutes().isPrecise());\n-        assertEquals(true, CopticChronology.getInstanceUTC().seconds().isPrecise());\n-        assertEquals(true, CopticChronology.getInstanceUTC().millis().isPrecise());\n-        \n-        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n-        assertEquals(false, CopticChronology.getInstance(gmt).centuries().isPrecise());\n-        assertEquals(false, CopticChronology.getInstance(gmt).years().isPrecise());\n-        assertEquals(false, CopticChronology.getInstance(gmt).weekyears().isPrecise());\n-        assertEquals(false, CopticChronology.getInstance(gmt).months().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance(gmt).weeks().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance(gmt).days().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance(gmt).halfdays().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance(gmt).hours().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance(gmt).minutes().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance(gmt).seconds().isPrecise());\n-        assertEquals(true, CopticChronology.getInstance(gmt).millis().isPrecise());\n+        final CopticChronology coptic = CopticChronology.getInstance();\n+        assertEquals(\"eras\", coptic.eras().getName());\n+        assertEquals(\"centuries\", coptic.centuries().getName());\n+        assertEquals(\"years\", coptic.years().getName());\n+        assertEquals(\"weekyears\", coptic.weekyears().getName());\n+        assertEquals(\"months\", coptic.months().getName());\n+        assertEquals(\"weeks\", coptic.weeks().getName());\n+        assertEquals(\"days\", coptic.days().getName());\n+        assertEquals(\"halfdays\", coptic.halfdays().getName());\n+        assertEquals(\"hours\", coptic.hours().getName());\n+        assertEquals(\"minutes\", coptic.minutes().getName());\n+        assertEquals(\"seconds\", coptic.seconds().getName());\n+        assertEquals(\"millis\", coptic.millis().getName());\n+        \n+        assertEquals(false, coptic.eras().isSupported());\n+        assertEquals(true, coptic.centuries().isSupported());\n+        assertEquals(true, coptic.years().isSupported());\n+        assertEquals(true, coptic.weekyears().isSupported());\n+        assertEquals(true, coptic.months().isSupported());\n+        assertEquals(true, coptic.weeks().isSupported());\n+        assertEquals(true, coptic.days().isSupported());\n+        assertEquals(true, coptic.halfdays().isSupported());\n+        assertEquals(true, coptic.hours().isSupported());\n+        assertEquals(true, coptic.minutes().isSupported());\n+        assertEquals(true, coptic.seconds().isSupported());\n+        assertEquals(true, coptic.millis().isSupported());\n+        \n+        assertEquals(false, coptic.centuries().isPrecise());\n+        assertEquals(false, coptic.years().isPrecise());\n+        assertEquals(false, coptic.weekyears().isPrecise());\n+        assertEquals(false, coptic.months().isPrecise());\n+        assertEquals(false, coptic.weeks().isPrecise());\n+        assertEquals(false, coptic.days().isPrecise());\n+        assertEquals(false, coptic.halfdays().isPrecise());\n+        assertEquals(true, coptic.hours().isPrecise());\n+        assertEquals(true, coptic.minutes().isPrecise());\n+        assertEquals(true, coptic.seconds().isPrecise());\n+        assertEquals(true, coptic.millis().isPrecise());\n+        \n+        final CopticChronology copticUTC = CopticChronology.getInstanceUTC();\n+        assertEquals(false, copticUTC.centuries().isPrecise());\n+        assertEquals(false, copticUTC.years().isPrecise());\n+        assertEquals(false, copticUTC.weekyears().isPrecise());\n+        assertEquals(false, copticUTC.months().isPrecise());\n+        assertEquals(true, copticUTC.weeks().isPrecise());\n+        assertEquals(true, copticUTC.days().isPrecise());\n+        assertEquals(true, copticUTC.halfdays().isPrecise());\n+        assertEquals(true, copticUTC.hours().isPrecise());\n+        assertEquals(true, copticUTC.minutes().isPrecise());\n+        assertEquals(true, copticUTC.seconds().isPrecise());\n+        assertEquals(true, copticUTC.millis().isPrecise());\n+        \n+        final DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        final CopticChronology copticGMT = CopticChronology.getInstance(gmt);\n+        assertEquals(false, copticGMT.centuries().isPrecise());\n+        assertEquals(false, copticGMT.years().isPrecise());\n+        assertEquals(false, copticGMT.weekyears().isPrecise());\n+        assertEquals(false, copticGMT.months().isPrecise());\n+        assertEquals(true, copticGMT.weeks().isPrecise());\n+        assertEquals(true, copticGMT.days().isPrecise());\n+        assertEquals(true, copticGMT.halfdays().isPrecise());\n+        assertEquals(true, copticGMT.hours().isPrecise());\n+        assertEquals(true, copticGMT.minutes().isPrecise());\n+        assertEquals(true, copticGMT.seconds().isPrecise());\n+        assertEquals(true, copticGMT.millis().isPrecise());\n     }\n \n     public void testDateFields() {\n-        assertEquals(\"era\", CopticChronology.getInstance().era().getName());\n-        assertEquals(\"centuryOfEra\", CopticChronology.getInstance().centuryOfEra().getName());\n-        assertEquals(\"yearOfCentury\", CopticChronology.getInstance().yearOfCentury().getName());\n-        assertEquals(\"yearOfEra\", CopticChronology.getInstance().yearOfEra().getName());\n-        assertEquals(\"year\", CopticChronology.getInstance().year().getName());\n-        assertEquals(\"monthOfYear\", CopticChronology.getInstance().monthOfYear().getName());\n-        assertEquals(\"weekyearOfCentury\", CopticChronology.getInstance().weekyearOfCentury().getName());\n-        assertEquals(\"weekyear\", CopticChronology.getInstance().weekyear().getName());\n-        assertEquals(\"weekOfWeekyear\", CopticChronology.getInstance().weekOfWeekyear().getName());\n-        assertEquals(\"dayOfYear\", CopticChronology.getInstance().dayOfYear().getName());\n-        assertEquals(\"dayOfMonth\", CopticChronology.getInstance().dayOfMonth().getName());\n-        assertEquals(\"dayOfWeek\", CopticChronology.getInstance().dayOfWeek().getName());\n-        \n-        assertEquals(true, CopticChronology.getInstance().era().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().centuryOfEra().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().yearOfCentury().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().yearOfEra().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().year().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().monthOfYear().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().weekyearOfCentury().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().weekyear().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().weekOfWeekyear().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().dayOfYear().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().dayOfMonth().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().dayOfWeek().isSupported());\n+        final CopticChronology coptic = CopticChronology.getInstance();\n+        assertEquals(\"era\", coptic.era().getName());\n+        assertEquals(\"centuryOfEra\", coptic.centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", coptic.yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", coptic.yearOfEra().getName());\n+        assertEquals(\"year\", coptic.year().getName());\n+        assertEquals(\"monthOfYear\", coptic.monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", coptic.weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", coptic.weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", coptic.weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", coptic.dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", coptic.dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", coptic.dayOfWeek().getName());\n+        \n+        assertEquals(true, coptic.era().isSupported());\n+        assertEquals(true, coptic.centuryOfEra().isSupported());\n+        assertEquals(true, coptic.yearOfCentury().isSupported());\n+        assertEquals(true, coptic.yearOfEra().isSupported());\n+        assertEquals(true, coptic.year().isSupported());\n+        assertEquals(true, coptic.monthOfYear().isSupported());\n+        assertEquals(true, coptic.weekyearOfCentury().isSupported());\n+        assertEquals(true, coptic.weekyear().isSupported());\n+        assertEquals(true, coptic.weekOfWeekyear().isSupported());\n+        assertEquals(true, coptic.dayOfYear().isSupported());\n+        assertEquals(true, coptic.dayOfMonth().isSupported());\n+        assertEquals(true, coptic.dayOfWeek().isSupported());\n     }\n \n     public void testTimeFields() {\n-        assertEquals(\"halfdayOfDay\", CopticChronology.getInstance().halfdayOfDay().getName());\n-        assertEquals(\"clockhourOfHalfday\", CopticChronology.getInstance().clockhourOfHalfday().getName());\n-        assertEquals(\"hourOfHalfday\", CopticChronology.getInstance().hourOfHalfday().getName());\n-        assertEquals(\"clockhourOfDay\", CopticChronology.getInstance().clockhourOfDay().getName());\n-        assertEquals(\"hourOfDay\", CopticChronology.getInstance().hourOfDay().getName());\n-        assertEquals(\"minuteOfDay\", CopticChronology.getInstance().minuteOfDay().getName());\n-        assertEquals(\"minuteOfHour\", CopticChronology.getInstance().minuteOfHour().getName());\n-        assertEquals(\"secondOfDay\", CopticChronology.getInstance().secondOfDay().getName());\n-        assertEquals(\"secondOfMinute\", CopticChronology.getInstance().secondOfMinute().getName());\n-        assertEquals(\"millisOfDay\", CopticChronology.getInstance().millisOfDay().getName());\n-        assertEquals(\"millisOfSecond\", CopticChronology.getInstance().millisOfSecond().getName());\n-        \n-        assertEquals(true, CopticChronology.getInstance().halfdayOfDay().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().clockhourOfHalfday().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().hourOfHalfday().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().clockhourOfDay().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().hourOfDay().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().minuteOfDay().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().minuteOfHour().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().secondOfDay().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().secondOfMinute().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().millisOfDay().isSupported());\n-        assertEquals(true, CopticChronology.getInstance().millisOfSecond().isSupported());\n+        final CopticChronology coptic = CopticChronology.getInstance();\n+        assertEquals(\"halfdayOfDay\", coptic.halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", coptic.clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", coptic.hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", coptic.clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", coptic.hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", coptic.minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", coptic.minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", coptic.secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", coptic.secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", coptic.millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", coptic.millisOfSecond().getName());\n+        \n+        assertEquals(true, coptic.halfdayOfDay().isSupported());\n+        assertEquals(true, coptic.clockhourOfHalfday().isSupported());\n+        assertEquals(true, coptic.hourOfHalfday().isSupported());\n+        assertEquals(true, coptic.clockhourOfDay().isSupported());\n+        assertEquals(true, coptic.hourOfDay().isSupported());\n+        assertEquals(true, coptic.minuteOfDay().isSupported());\n+        assertEquals(true, coptic.minuteOfHour().isSupported());\n+        assertEquals(true, coptic.secondOfDay().isSupported());\n+        assertEquals(true, coptic.secondOfMinute().isSupported());\n+        assertEquals(true, coptic.millisOfDay().isSupported());\n+        assertEquals(true, coptic.millisOfSecond().isSupported());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/joda/time/chrono/TestEthiopicChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestEthiopicChronology.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     //-----------------------------------------------------------------------\n     public void testDurationFields() {\n-        assertEquals(\"eras\", EthiopicChronology.getInstance().eras().getName());\n-        assertEquals(\"centuries\", EthiopicChronology.getInstance().centuries().getName());\n-        assertEquals(\"years\", EthiopicChronology.getInstance().years().getName());\n-        assertEquals(\"weekyears\", EthiopicChronology.getInstance().weekyears().getName());\n-        assertEquals(\"months\", EthiopicChronology.getInstance().months().getName());\n-        assertEquals(\"weeks\", EthiopicChronology.getInstance().weeks().getName());\n-        assertEquals(\"days\", EthiopicChronology.getInstance().days().getName());\n-        assertEquals(\"halfdays\", EthiopicChronology.getInstance().halfdays().getName());\n-        assertEquals(\"hours\", EthiopicChronology.getInstance().hours().getName());\n-        assertEquals(\"minutes\", EthiopicChronology.getInstance().minutes().getName());\n-        assertEquals(\"seconds\", EthiopicChronology.getInstance().seconds().getName());\n-        assertEquals(\"millis\", EthiopicChronology.getInstance().millis().getName());\n-        \n-        assertEquals(false, EthiopicChronology.getInstance().eras().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().centuries().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().years().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().weekyears().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().months().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().weeks().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().days().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().halfdays().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().hours().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().minutes().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().seconds().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().millis().isSupported());\n-        \n-        assertEquals(false, EthiopicChronology.getInstance().centuries().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstance().years().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstance().weekyears().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstance().months().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstance().weeks().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstance().days().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstance().halfdays().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance().hours().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance().minutes().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance().seconds().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance().millis().isPrecise());\n-        \n-        assertEquals(false, EthiopicChronology.getInstanceUTC().centuries().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstanceUTC().years().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstanceUTC().months().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstanceUTC().weeks().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstanceUTC().days().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstanceUTC().halfdays().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstanceUTC().hours().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstanceUTC().minutes().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstanceUTC().seconds().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstanceUTC().millis().isPrecise());\n-        \n-        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n-        assertEquals(false, EthiopicChronology.getInstance(gmt).centuries().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstance(gmt).years().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstance(gmt).weekyears().isPrecise());\n-        assertEquals(false, EthiopicChronology.getInstance(gmt).months().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance(gmt).weeks().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance(gmt).days().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance(gmt).halfdays().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance(gmt).hours().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance(gmt).minutes().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance(gmt).seconds().isPrecise());\n-        assertEquals(true, EthiopicChronology.getInstance(gmt).millis().isPrecise());\n+        final EthiopicChronology ethiopic = EthiopicChronology.getInstance();\n+        assertEquals(\"eras\", ethiopic.eras().getName());\n+        assertEquals(\"centuries\", ethiopic.centuries().getName());\n+        assertEquals(\"years\", ethiopic.years().getName());\n+        assertEquals(\"weekyears\", ethiopic.weekyears().getName());\n+        assertEquals(\"months\", ethiopic.months().getName());\n+        assertEquals(\"weeks\", ethiopic.weeks().getName());\n+        assertEquals(\"days\", ethiopic.days().getName());\n+        assertEquals(\"halfdays\", ethiopic.halfdays().getName());\n+        assertEquals(\"hours\", ethiopic.hours().getName());\n+        assertEquals(\"minutes\", ethiopic.minutes().getName());\n+        assertEquals(\"seconds\", ethiopic.seconds().getName());\n+        assertEquals(\"millis\", ethiopic.millis().getName());\n+        \n+        assertEquals(false, ethiopic.eras().isSupported());\n+        assertEquals(true, ethiopic.centuries().isSupported());\n+        assertEquals(true, ethiopic.years().isSupported());\n+        assertEquals(true, ethiopic.weekyears().isSupported());\n+        assertEquals(true, ethiopic.months().isSupported());\n+        assertEquals(true, ethiopic.weeks().isSupported());\n+        assertEquals(true, ethiopic.days().isSupported());\n+        assertEquals(true, ethiopic.halfdays().isSupported());\n+        assertEquals(true, ethiopic.hours().isSupported());\n+        assertEquals(true, ethiopic.minutes().isSupported());\n+        assertEquals(true, ethiopic.seconds().isSupported());\n+        assertEquals(true, ethiopic.millis().isSupported());\n+        \n+        assertEquals(false, ethiopic.centuries().isPrecise());\n+        assertEquals(false, ethiopic.years().isPrecise());\n+        assertEquals(false, ethiopic.weekyears().isPrecise());\n+        assertEquals(false, ethiopic.months().isPrecise());\n+        assertEquals(false, ethiopic.weeks().isPrecise());\n+        assertEquals(false, ethiopic.days().isPrecise());\n+        assertEquals(false, ethiopic.halfdays().isPrecise());\n+        assertEquals(true, ethiopic.hours().isPrecise());\n+        assertEquals(true, ethiopic.minutes().isPrecise());\n+        assertEquals(true, ethiopic.seconds().isPrecise());\n+        assertEquals(true, ethiopic.millis().isPrecise());\n+        \n+        final EthiopicChronology ethiopicUTC = EthiopicChronology.getInstanceUTC();\n+        assertEquals(false, ethiopicUTC.centuries().isPrecise());\n+        assertEquals(false, ethiopicUTC.years().isPrecise());\n+        assertEquals(false, ethiopicUTC.weekyears().isPrecise());\n+        assertEquals(false, ethiopicUTC.months().isPrecise());\n+        assertEquals(true, ethiopicUTC.weeks().isPrecise());\n+        assertEquals(true, ethiopicUTC.days().isPrecise());\n+        assertEquals(true, ethiopicUTC.halfdays().isPrecise());\n+        assertEquals(true, ethiopicUTC.hours().isPrecise());\n+        assertEquals(true, ethiopicUTC.minutes().isPrecise());\n+        assertEquals(true, ethiopicUTC.seconds().isPrecise());\n+        assertEquals(true, ethiopicUTC.millis().isPrecise());\n+        \n+        final DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        final EthiopicChronology ethiopicGMT = EthiopicChronology.getInstance(gmt);\n+        assertEquals(false, ethiopicGMT.centuries().isPrecise());\n+        assertEquals(false, ethiopicGMT.years().isPrecise());\n+        assertEquals(false, ethiopicGMT.weekyears().isPrecise());\n+        assertEquals(false, ethiopicGMT.months().isPrecise());\n+        assertEquals(true, ethiopicGMT.weeks().isPrecise());\n+        assertEquals(true, ethiopicGMT.days().isPrecise());\n+        assertEquals(true, ethiopicGMT.halfdays().isPrecise());\n+        assertEquals(true, ethiopicGMT.hours().isPrecise());\n+        assertEquals(true, ethiopicGMT.minutes().isPrecise());\n+        assertEquals(true, ethiopicGMT.seconds().isPrecise());\n+        assertEquals(true, ethiopicGMT.millis().isPrecise());\n     }\n \n     public void testDateFields() {\n-        assertEquals(\"era\", EthiopicChronology.getInstance().era().getName());\n-        assertEquals(\"centuryOfEra\", EthiopicChronology.getInstance().centuryOfEra().getName());\n-        assertEquals(\"yearOfCentury\", EthiopicChronology.getInstance().yearOfCentury().getName());\n-        assertEquals(\"yearOfEra\", EthiopicChronology.getInstance().yearOfEra().getName());\n-        assertEquals(\"year\", EthiopicChronology.getInstance().year().getName());\n-        assertEquals(\"monthOfYear\", EthiopicChronology.getInstance().monthOfYear().getName());\n-        assertEquals(\"weekyearOfCentury\", EthiopicChronology.getInstance().weekyearOfCentury().getName());\n-        assertEquals(\"weekyear\", EthiopicChronology.getInstance().weekyear().getName());\n-        assertEquals(\"weekOfWeekyear\", EthiopicChronology.getInstance().weekOfWeekyear().getName());\n-        assertEquals(\"dayOfYear\", EthiopicChronology.getInstance().dayOfYear().getName());\n-        assertEquals(\"dayOfMonth\", EthiopicChronology.getInstance().dayOfMonth().getName());\n-        assertEquals(\"dayOfWeek\", EthiopicChronology.getInstance().dayOfWeek().getName());\n-        \n-        assertEquals(true, EthiopicChronology.getInstance().era().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().centuryOfEra().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().yearOfCentury().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().yearOfEra().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().year().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().monthOfYear().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().weekyearOfCentury().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().weekyear().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().weekOfWeekyear().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().dayOfYear().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().dayOfMonth().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().dayOfWeek().isSupported());\n+        final EthiopicChronology ethiopic = EthiopicChronology.getInstance();\n+        assertEquals(\"era\", ethiopic.era().getName());\n+        assertEquals(\"centuryOfEra\", ethiopic.centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", ethiopic.yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", ethiopic.yearOfEra().getName());\n+        assertEquals(\"year\", ethiopic.year().getName());\n+        assertEquals(\"monthOfYear\", ethiopic.monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", ethiopic.weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", ethiopic.weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", ethiopic.weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", ethiopic.dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", ethiopic.dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", ethiopic.dayOfWeek().getName());\n+        \n+        assertEquals(true, ethiopic.era().isSupported());\n+        assertEquals(true, ethiopic.centuryOfEra().isSupported());\n+        assertEquals(true, ethiopic.yearOfCentury().isSupported());\n+        assertEquals(true, ethiopic.yearOfEra().isSupported());\n+        assertEquals(true, ethiopic.year().isSupported());\n+        assertEquals(true, ethiopic.monthOfYear().isSupported());\n+        assertEquals(true, ethiopic.weekyearOfCentury().isSupported());\n+        assertEquals(true, ethiopic.weekyear().isSupported());\n+        assertEquals(true, ethiopic.weekOfWeekyear().isSupported());\n+        assertEquals(true, ethiopic.dayOfYear().isSupported());\n+        assertEquals(true, ethiopic.dayOfMonth().isSupported());\n+        assertEquals(true, ethiopic.dayOfWeek().isSupported());\n     }\n \n     public void testTimeFields() {\n-        assertEquals(\"halfdayOfDay\", EthiopicChronology.getInstance().halfdayOfDay().getName());\n-        assertEquals(\"clockhourOfHalfday\", EthiopicChronology.getInstance().clockhourOfHalfday().getName());\n-        assertEquals(\"hourOfHalfday\", EthiopicChronology.getInstance().hourOfHalfday().getName());\n-        assertEquals(\"clockhourOfDay\", EthiopicChronology.getInstance().clockhourOfDay().getName());\n-        assertEquals(\"hourOfDay\", EthiopicChronology.getInstance().hourOfDay().getName());\n-        assertEquals(\"minuteOfDay\", EthiopicChronology.getInstance().minuteOfDay().getName());\n-        assertEquals(\"minuteOfHour\", EthiopicChronology.getInstance().minuteOfHour().getName());\n-        assertEquals(\"secondOfDay\", EthiopicChronology.getInstance().secondOfDay().getName());\n-        assertEquals(\"secondOfMinute\", EthiopicChronology.getInstance().secondOfMinute().getName());\n-        assertEquals(\"millisOfDay\", EthiopicChronology.getInstance().millisOfDay().getName());\n-        assertEquals(\"millisOfSecond\", EthiopicChronology.getInstance().millisOfSecond().getName());\n-        \n-        assertEquals(true, EthiopicChronology.getInstance().halfdayOfDay().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().clockhourOfHalfday().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().hourOfHalfday().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().clockhourOfDay().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().hourOfDay().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().minuteOfDay().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().minuteOfHour().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().secondOfDay().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().secondOfMinute().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().millisOfDay().isSupported());\n-        assertEquals(true, EthiopicChronology.getInstance().millisOfSecond().isSupported());\n+        final EthiopicChronology ethiopic = EthiopicChronology.getInstance();\n+        assertEquals(\"halfdayOfDay\", ethiopic.halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", ethiopic.clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", ethiopic.hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", ethiopic.clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", ethiopic.hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", ethiopic.minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", ethiopic.minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", ethiopic.secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", ethiopic.secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", ethiopic.millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", ethiopic.millisOfSecond().getName());\n+        \n+        assertEquals(true, ethiopic.halfdayOfDay().isSupported());\n+        assertEquals(true, ethiopic.clockhourOfHalfday().isSupported());\n+        assertEquals(true, ethiopic.hourOfHalfday().isSupported());\n+        assertEquals(true, ethiopic.clockhourOfDay().isSupported());\n+        assertEquals(true, ethiopic.hourOfDay().isSupported());\n+        assertEquals(true, ethiopic.minuteOfDay().isSupported());\n+        assertEquals(true, ethiopic.minuteOfHour().isSupported());\n+        assertEquals(true, ethiopic.secondOfDay().isSupported());\n+        assertEquals(true, ethiopic.secondOfMinute().isSupported());\n+        assertEquals(true, ethiopic.millisOfDay().isSupported());\n+        assertEquals(true, ethiopic.millisOfSecond().isSupported());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/joda/time/chrono/TestGJChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestGJChronology.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestGJChronology extends TestCase {\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n \n     //-----------------------------------------------------------------------\n     public void testDurationFields() {\n-        assertEquals(\"eras\", GJChronology.getInstance().eras().getName());\n-        assertEquals(\"centuries\", GJChronology.getInstance().centuries().getName());\n-        assertEquals(\"years\", GJChronology.getInstance().years().getName());\n-        assertEquals(\"weekyears\", GJChronology.getInstance().weekyears().getName());\n-        assertEquals(\"months\", GJChronology.getInstance().months().getName());\n-        assertEquals(\"weeks\", GJChronology.getInstance().weeks().getName());\n-        assertEquals(\"halfdays\", GJChronology.getInstance().halfdays().getName());\n-        assertEquals(\"days\", GJChronology.getInstance().days().getName());\n-        assertEquals(\"hours\", GJChronology.getInstance().hours().getName());\n-        assertEquals(\"minutes\", GJChronology.getInstance().minutes().getName());\n-        assertEquals(\"seconds\", GJChronology.getInstance().seconds().getName());\n-        assertEquals(\"millis\", GJChronology.getInstance().millis().getName());\n-        \n-        assertEquals(false, GJChronology.getInstance().eras().isSupported());\n-        assertEquals(true, GJChronology.getInstance().centuries().isSupported());\n-        assertEquals(true, GJChronology.getInstance().years().isSupported());\n-        assertEquals(true, GJChronology.getInstance().weekyears().isSupported());\n-        assertEquals(true, GJChronology.getInstance().months().isSupported());\n-        assertEquals(true, GJChronology.getInstance().weeks().isSupported());\n-        assertEquals(true, GJChronology.getInstance().days().isSupported());\n-        assertEquals(true, GJChronology.getInstance().halfdays().isSupported());\n-        assertEquals(true, GJChronology.getInstance().hours().isSupported());\n-        assertEquals(true, GJChronology.getInstance().minutes().isSupported());\n-        assertEquals(true, GJChronology.getInstance().seconds().isSupported());\n-        assertEquals(true, GJChronology.getInstance().millis().isSupported());\n-        \n-        assertEquals(false, GJChronology.getInstance().centuries().isPrecise());\n-        assertEquals(false, GJChronology.getInstance().years().isPrecise());\n-        assertEquals(false, GJChronology.getInstance().weekyears().isPrecise());\n-        assertEquals(false, GJChronology.getInstance().months().isPrecise());\n-        assertEquals(false, GJChronology.getInstance().weeks().isPrecise());\n-        assertEquals(false, GJChronology.getInstance().days().isPrecise());\n-        assertEquals(false, GJChronology.getInstance().halfdays().isPrecise());\n-        assertEquals(true, GJChronology.getInstance().hours().isPrecise());\n-        assertEquals(true, GJChronology.getInstance().minutes().isPrecise());\n-        assertEquals(true, GJChronology.getInstance().seconds().isPrecise());\n-        assertEquals(true, GJChronology.getInstance().millis().isPrecise());\n-        \n-        assertEquals(false, GJChronology.getInstanceUTC().centuries().isPrecise());\n-        assertEquals(false, GJChronology.getInstanceUTC().years().isPrecise());\n-        assertEquals(false, GJChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(false, GJChronology.getInstanceUTC().months().isPrecise());\n-        assertEquals(true, GJChronology.getInstanceUTC().weeks().isPrecise());\n-        assertEquals(true, GJChronology.getInstanceUTC().days().isPrecise());\n-        assertEquals(true, GJChronology.getInstanceUTC().halfdays().isPrecise());\n-        assertEquals(true, GJChronology.getInstanceUTC().hours().isPrecise());\n-        assertEquals(true, GJChronology.getInstanceUTC().minutes().isPrecise());\n-        assertEquals(true, GJChronology.getInstanceUTC().seconds().isPrecise());\n-        assertEquals(true, GJChronology.getInstanceUTC().millis().isPrecise());\n-        \n-        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n-        assertEquals(false, GJChronology.getInstance(gmt).centuries().isPrecise());\n-        assertEquals(false, GJChronology.getInstance(gmt).years().isPrecise());\n-        assertEquals(false, GJChronology.getInstance(gmt).weekyears().isPrecise());\n-        assertEquals(false, GJChronology.getInstance(gmt).months().isPrecise());\n-        assertEquals(true, GJChronology.getInstance(gmt).weeks().isPrecise());\n-        assertEquals(true, GJChronology.getInstance(gmt).days().isPrecise());\n-        assertEquals(true, GJChronology.getInstance(gmt).halfdays().isPrecise());\n-        assertEquals(true, GJChronology.getInstance(gmt).hours().isPrecise());\n-        assertEquals(true, GJChronology.getInstance(gmt).minutes().isPrecise());\n-        assertEquals(true, GJChronology.getInstance(gmt).seconds().isPrecise());\n-        assertEquals(true, GJChronology.getInstance(gmt).millis().isPrecise());\n+        final GJChronology gj = GJChronology.getInstance();\n+        assertEquals(\"eras\", gj.eras().getName());\n+        assertEquals(\"centuries\", gj.centuries().getName());\n+        assertEquals(\"years\", gj.years().getName());\n+        assertEquals(\"weekyears\", gj.weekyears().getName());\n+        assertEquals(\"months\", gj.months().getName());\n+        assertEquals(\"weeks\", gj.weeks().getName());\n+        assertEquals(\"halfdays\", gj.halfdays().getName());\n+        assertEquals(\"days\", gj.days().getName());\n+        assertEquals(\"hours\", gj.hours().getName());\n+        assertEquals(\"minutes\", gj.minutes().getName());\n+        assertEquals(\"seconds\", gj.seconds().getName());\n+        assertEquals(\"millis\", gj.millis().getName());\n+        \n+        assertEquals(false, gj.eras().isSupported());\n+        assertEquals(true, gj.centuries().isSupported());\n+        assertEquals(true, gj.years().isSupported());\n+        assertEquals(true, gj.weekyears().isSupported());\n+        assertEquals(true, gj.months().isSupported());\n+        assertEquals(true, gj.weeks().isSupported());\n+        assertEquals(true, gj.days().isSupported());\n+        assertEquals(true, gj.halfdays().isSupported());\n+        assertEquals(true, gj.hours().isSupported());\n+        assertEquals(true, gj.minutes().isSupported());\n+        assertEquals(true, gj.seconds().isSupported());\n+        assertEquals(true, gj.millis().isSupported());\n+        \n+        assertEquals(false, gj.centuries().isPrecise());\n+        assertEquals(false, gj.years().isPrecise());\n+        assertEquals(false, gj.weekyears().isPrecise());\n+        assertEquals(false, gj.months().isPrecise());\n+        assertEquals(false, gj.weeks().isPrecise());\n+        assertEquals(false, gj.days().isPrecise());\n+        assertEquals(false, gj.halfdays().isPrecise());\n+        assertEquals(true, gj.hours().isPrecise());\n+        assertEquals(true, gj.minutes().isPrecise());\n+        assertEquals(true, gj.seconds().isPrecise());\n+        assertEquals(true, gj.millis().isPrecise());\n+        \n+        final GJChronology gjUTC = GJChronology.getInstanceUTC();\n+        assertEquals(false, gjUTC.centuries().isPrecise());\n+        assertEquals(false, gjUTC.years().isPrecise());\n+        assertEquals(false, gjUTC.weekyears().isPrecise());\n+        assertEquals(false, gjUTC.months().isPrecise());\n+        assertEquals(true, gjUTC.weeks().isPrecise());\n+        assertEquals(true, gjUTC.days().isPrecise());\n+        assertEquals(true, gjUTC.halfdays().isPrecise());\n+        assertEquals(true, gjUTC.hours().isPrecise());\n+        assertEquals(true, gjUTC.minutes().isPrecise());\n+        assertEquals(true, gjUTC.seconds().isPrecise());\n+        assertEquals(true, gjUTC.millis().isPrecise());\n+        \n+        final DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        final GJChronology gjGMT = GJChronology.getInstance(gmt);\n+        assertEquals(false, gjGMT.centuries().isPrecise());\n+        assertEquals(false, gjGMT.years().isPrecise());\n+        assertEquals(false, gjGMT.weekyears().isPrecise());\n+        assertEquals(false, gjGMT.months().isPrecise());\n+        assertEquals(true, gjGMT.weeks().isPrecise());\n+        assertEquals(true, gjGMT.days().isPrecise());\n+        assertEquals(true, gjGMT.halfdays().isPrecise());\n+        assertEquals(true, gjGMT.hours().isPrecise());\n+        assertEquals(true, gjGMT.minutes().isPrecise());\n+        assertEquals(true, gjGMT.seconds().isPrecise());\n+        assertEquals(true, gjGMT.millis().isPrecise());\n     }\n \n     public void testDateFields() {\n-        assertEquals(\"era\", GJChronology.getInstance().era().getName());\n-        assertEquals(\"centuryOfEra\", GJChronology.getInstance().centuryOfEra().getName());\n-        assertEquals(\"yearOfCentury\", GJChronology.getInstance().yearOfCentury().getName());\n-        assertEquals(\"yearOfEra\", GJChronology.getInstance().yearOfEra().getName());\n-        assertEquals(\"year\", GJChronology.getInstance().year().getName());\n-        assertEquals(\"monthOfYear\", GJChronology.getInstance().monthOfYear().getName());\n-        assertEquals(\"weekyearOfCentury\", GJChronology.getInstance().weekyearOfCentury().getName());\n-        assertEquals(\"weekyear\", GJChronology.getInstance().weekyear().getName());\n-        assertEquals(\"weekOfWeekyear\", GJChronology.getInstance().weekOfWeekyear().getName());\n-        assertEquals(\"dayOfYear\", GJChronology.getInstance().dayOfYear().getName());\n-        assertEquals(\"dayOfMonth\", GJChronology.getInstance().dayOfMonth().getName());\n-        assertEquals(\"dayOfWeek\", GJChronology.getInstance().dayOfWeek().getName());\n-        \n-        assertEquals(true, GJChronology.getInstance().era().isSupported());\n-        assertEquals(true, GJChronology.getInstance().centuryOfEra().isSupported());\n-        assertEquals(true, GJChronology.getInstance().yearOfCentury().isSupported());\n-        assertEquals(true, GJChronology.getInstance().yearOfEra().isSupported());\n-        assertEquals(true, GJChronology.getInstance().year().isSupported());\n-        assertEquals(true, GJChronology.getInstance().monthOfYear().isSupported());\n-        assertEquals(true, GJChronology.getInstance().weekyearOfCentury().isSupported());\n-        assertEquals(true, GJChronology.getInstance().weekyear().isSupported());\n-        assertEquals(true, GJChronology.getInstance().weekOfWeekyear().isSupported());\n-        assertEquals(true, GJChronology.getInstance().dayOfYear().isSupported());\n-        assertEquals(true, GJChronology.getInstance().dayOfMonth().isSupported());\n-        assertEquals(true, GJChronology.getInstance().dayOfWeek().isSupported());\n+        final GJChronology gj = GJChronology.getInstance();\n+        assertEquals(\"era\", gj.era().getName());\n+        assertEquals(\"centuryOfEra\", gj.centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", gj.yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", gj.yearOfEra().getName());\n+        assertEquals(\"year\", gj.year().getName());\n+        assertEquals(\"monthOfYear\", gj.monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", gj.weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", gj.weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", gj.weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", gj.dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", gj.dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", gj.dayOfWeek().getName());\n+        \n+        assertEquals(true, gj.era().isSupported());\n+        assertEquals(true, gj.centuryOfEra().isSupported());\n+        assertEquals(true, gj.yearOfCentury().isSupported());\n+        assertEquals(true, gj.yearOfEra().isSupported());\n+        assertEquals(true, gj.year().isSupported());\n+        assertEquals(true, gj.monthOfYear().isSupported());\n+        assertEquals(true, gj.weekyearOfCentury().isSupported());\n+        assertEquals(true, gj.weekyear().isSupported());\n+        assertEquals(true, gj.weekOfWeekyear().isSupported());\n+        assertEquals(true, gj.dayOfYear().isSupported());\n+        assertEquals(true, gj.dayOfMonth().isSupported());\n+        assertEquals(true, gj.dayOfWeek().isSupported());\n     }\n \n     public void testTimeFields() {\n-        assertEquals(\"halfdayOfDay\", GJChronology.getInstance().halfdayOfDay().getName());\n-        assertEquals(\"clockhourOfHalfday\", GJChronology.getInstance().clockhourOfHalfday().getName());\n-        assertEquals(\"hourOfHalfday\", GJChronology.getInstance().hourOfHalfday().getName());\n-        assertEquals(\"clockhourOfDay\", GJChronology.getInstance().clockhourOfDay().getName());\n-        assertEquals(\"hourOfDay\", GJChronology.getInstance().hourOfDay().getName());\n-        assertEquals(\"minuteOfDay\", GJChronology.getInstance().minuteOfDay().getName());\n-        assertEquals(\"minuteOfHour\", GJChronology.getInstance().minuteOfHour().getName());\n-        assertEquals(\"secondOfDay\", GJChronology.getInstance().secondOfDay().getName());\n-        assertEquals(\"secondOfMinute\", GJChronology.getInstance().secondOfMinute().getName());\n-        assertEquals(\"millisOfDay\", GJChronology.getInstance().millisOfDay().getName());\n-        assertEquals(\"millisOfSecond\", GJChronology.getInstance().millisOfSecond().getName());\n-        \n-        assertEquals(true, GJChronology.getInstance().halfdayOfDay().isSupported());\n-        assertEquals(true, GJChronology.getInstance().clockhourOfHalfday().isSupported());\n-        assertEquals(true, GJChronology.getInstance().hourOfHalfday().isSupported());\n-        assertEquals(true, GJChronology.getInstance().clockhourOfDay().isSupported());\n-        assertEquals(true, GJChronology.getInstance().hourOfDay().isSupported());\n-        assertEquals(true, GJChronology.getInstance().minuteOfDay().isSupported());\n-        assertEquals(true, GJChronology.getInstance().minuteOfHour().isSupported());\n-        assertEquals(true, GJChronology.getInstance().secondOfDay().isSupported());\n-        assertEquals(true, GJChronology.getInstance().secondOfMinute().isSupported());\n-        assertEquals(true, GJChronology.getInstance().millisOfDay().isSupported());\n-        assertEquals(true, GJChronology.getInstance().millisOfSecond().isSupported());\n+        final GJChronology gj = GJChronology.getInstance();\n+        assertEquals(\"halfdayOfDay\", gj.halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", gj.clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", gj.hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", gj.clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", gj.hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", gj.minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", gj.minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", gj.secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", gj.secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", gj.millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", gj.millisOfSecond().getName());\n+        \n+        assertEquals(true, gj.halfdayOfDay().isSupported());\n+        assertEquals(true, gj.clockhourOfHalfday().isSupported());\n+        assertEquals(true, gj.hourOfHalfday().isSupported());\n+        assertEquals(true, gj.clockhourOfDay().isSupported());\n+        assertEquals(true, gj.hourOfDay().isSupported());\n+        assertEquals(true, gj.minuteOfDay().isSupported());\n+        assertEquals(true, gj.minuteOfHour().isSupported());\n+        assertEquals(true, gj.secondOfDay().isSupported());\n+        assertEquals(true, gj.secondOfMinute().isSupported());\n+        assertEquals(true, gj.millisOfDay().isSupported());\n+        assertEquals(true, gj.millisOfSecond().isSupported());\n     }\n \n     public void testIllegalDates() {\n--- a/src/test/java/org/joda/time/chrono/TestGregorianChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestGregorianChronology.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestGregorianChronology extends TestCase {\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n \n     //-----------------------------------------------------------------------\n     public void testDurationFields() {\n-        assertEquals(\"eras\", GregorianChronology.getInstance().eras().getName());\n-        assertEquals(\"centuries\", GregorianChronology.getInstance().centuries().getName());\n-        assertEquals(\"years\", GregorianChronology.getInstance().years().getName());\n-        assertEquals(\"weekyears\", GregorianChronology.getInstance().weekyears().getName());\n-        assertEquals(\"months\", GregorianChronology.getInstance().months().getName());\n-        assertEquals(\"weeks\", GregorianChronology.getInstance().weeks().getName());\n-        assertEquals(\"days\", GregorianChronology.getInstance().days().getName());\n-        assertEquals(\"halfdays\", GregorianChronology.getInstance().halfdays().getName());\n-        assertEquals(\"hours\", GregorianChronology.getInstance().hours().getName());\n-        assertEquals(\"minutes\", GregorianChronology.getInstance().minutes().getName());\n-        assertEquals(\"seconds\", GregorianChronology.getInstance().seconds().getName());\n-        assertEquals(\"millis\", GregorianChronology.getInstance().millis().getName());\n-        \n-        assertEquals(false, GregorianChronology.getInstance().eras().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().centuries().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().years().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().weekyears().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().months().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().weeks().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().days().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().halfdays().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().hours().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().minutes().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().seconds().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().millis().isSupported());\n-        \n-        assertEquals(false, GregorianChronology.getInstance().centuries().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstance().years().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstance().weekyears().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstance().months().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstance().weeks().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstance().days().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstance().halfdays().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance().hours().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance().minutes().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance().seconds().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance().millis().isPrecise());\n-        \n-        assertEquals(false, GregorianChronology.getInstanceUTC().centuries().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstanceUTC().years().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstanceUTC().months().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstanceUTC().weeks().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstanceUTC().days().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstanceUTC().halfdays().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstanceUTC().hours().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstanceUTC().minutes().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstanceUTC().seconds().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstanceUTC().millis().isPrecise());\n-        \n-        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n-        assertEquals(false, GregorianChronology.getInstance(gmt).centuries().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstance(gmt).years().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstance(gmt).weekyears().isPrecise());\n-        assertEquals(false, GregorianChronology.getInstance(gmt).months().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance(gmt).weeks().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance(gmt).days().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance(gmt).halfdays().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance(gmt).hours().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance(gmt).minutes().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance(gmt).seconds().isPrecise());\n-        assertEquals(true, GregorianChronology.getInstance(gmt).millis().isPrecise());\n+        final GregorianChronology greg = GregorianChronology.getInstance();\n+        assertEquals(\"eras\", greg.eras().getName());\n+        assertEquals(\"centuries\", greg.centuries().getName());\n+        assertEquals(\"years\", greg.years().getName());\n+        assertEquals(\"weekyears\", greg.weekyears().getName());\n+        assertEquals(\"months\", greg.months().getName());\n+        assertEquals(\"weeks\", greg.weeks().getName());\n+        assertEquals(\"days\", greg.days().getName());\n+        assertEquals(\"halfdays\", greg.halfdays().getName());\n+        assertEquals(\"hours\", greg.hours().getName());\n+        assertEquals(\"minutes\", greg.minutes().getName());\n+        assertEquals(\"seconds\", greg.seconds().getName());\n+        assertEquals(\"millis\", greg.millis().getName());\n+        \n+        assertEquals(false, greg.eras().isSupported());\n+        assertEquals(true, greg.centuries().isSupported());\n+        assertEquals(true, greg.years().isSupported());\n+        assertEquals(true, greg.weekyears().isSupported());\n+        assertEquals(true, greg.months().isSupported());\n+        assertEquals(true, greg.weeks().isSupported());\n+        assertEquals(true, greg.days().isSupported());\n+        assertEquals(true, greg.halfdays().isSupported());\n+        assertEquals(true, greg.hours().isSupported());\n+        assertEquals(true, greg.minutes().isSupported());\n+        assertEquals(true, greg.seconds().isSupported());\n+        assertEquals(true, greg.millis().isSupported());\n+        \n+        assertEquals(false, greg.centuries().isPrecise());\n+        assertEquals(false, greg.years().isPrecise());\n+        assertEquals(false, greg.weekyears().isPrecise());\n+        assertEquals(false, greg.months().isPrecise());\n+        assertEquals(false, greg.weeks().isPrecise());\n+        assertEquals(false, greg.days().isPrecise());\n+        assertEquals(false, greg.halfdays().isPrecise());\n+        assertEquals(true, greg.hours().isPrecise());\n+        assertEquals(true, greg.minutes().isPrecise());\n+        assertEquals(true, greg.seconds().isPrecise());\n+        assertEquals(true, greg.millis().isPrecise());\n+        \n+        final GregorianChronology gregUTC = GregorianChronology.getInstanceUTC();\n+        assertEquals(false, gregUTC.centuries().isPrecise());\n+        assertEquals(false, gregUTC.years().isPrecise());\n+        assertEquals(false, gregUTC.weekyears().isPrecise());\n+        assertEquals(false, gregUTC.months().isPrecise());\n+        assertEquals(true, gregUTC.weeks().isPrecise());\n+        assertEquals(true, gregUTC.days().isPrecise());\n+        assertEquals(true, gregUTC.halfdays().isPrecise());\n+        assertEquals(true, gregUTC.hours().isPrecise());\n+        assertEquals(true, gregUTC.minutes().isPrecise());\n+        assertEquals(true, gregUTC.seconds().isPrecise());\n+        assertEquals(true, gregUTC.millis().isPrecise());\n+        \n+        final DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        final GregorianChronology gregGMT = GregorianChronology.getInstance(gmt);\n+        assertEquals(false, gregGMT.centuries().isPrecise());\n+        assertEquals(false, gregGMT.years().isPrecise());\n+        assertEquals(false, gregGMT.weekyears().isPrecise());\n+        assertEquals(false, gregGMT.months().isPrecise());\n+        assertEquals(true, gregGMT.weeks().isPrecise());\n+        assertEquals(true, gregGMT.days().isPrecise());\n+        assertEquals(true, gregGMT.halfdays().isPrecise());\n+        assertEquals(true, gregGMT.hours().isPrecise());\n+        assertEquals(true, gregGMT.minutes().isPrecise());\n+        assertEquals(true, gregGMT.seconds().isPrecise());\n+        assertEquals(true, gregGMT.millis().isPrecise());\n     }\n \n     public void testDateFields() {\n-        assertEquals(\"era\", GregorianChronology.getInstance().era().getName());\n-        assertEquals(\"centuryOfEra\", GregorianChronology.getInstance().centuryOfEra().getName());\n-        assertEquals(\"yearOfCentury\", GregorianChronology.getInstance().yearOfCentury().getName());\n-        assertEquals(\"yearOfEra\", GregorianChronology.getInstance().yearOfEra().getName());\n-        assertEquals(\"year\", GregorianChronology.getInstance().year().getName());\n-        assertEquals(\"monthOfYear\", GregorianChronology.getInstance().monthOfYear().getName());\n-        assertEquals(\"weekyearOfCentury\", GregorianChronology.getInstance().weekyearOfCentury().getName());\n-        assertEquals(\"weekyear\", GregorianChronology.getInstance().weekyear().getName());\n-        assertEquals(\"weekOfWeekyear\", GregorianChronology.getInstance().weekOfWeekyear().getName());\n-        assertEquals(\"dayOfYear\", GregorianChronology.getInstance().dayOfYear().getName());\n-        assertEquals(\"dayOfMonth\", GregorianChronology.getInstance().dayOfMonth().getName());\n-        assertEquals(\"dayOfWeek\", GregorianChronology.getInstance().dayOfWeek().getName());\n-        \n-        assertEquals(true, GregorianChronology.getInstance().era().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().centuryOfEra().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().yearOfCentury().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().yearOfEra().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().year().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().monthOfYear().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().weekyearOfCentury().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().weekyear().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().weekOfWeekyear().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().dayOfYear().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().dayOfMonth().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().dayOfWeek().isSupported());\n+        final GregorianChronology greg = GregorianChronology.getInstance();\n+        assertEquals(\"era\", greg.era().getName());\n+        assertEquals(\"centuryOfEra\", greg.centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", greg.yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", greg.yearOfEra().getName());\n+        assertEquals(\"year\", greg.year().getName());\n+        assertEquals(\"monthOfYear\", greg.monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", greg.weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", greg.weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", greg.weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", greg.dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", greg.dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", greg.dayOfWeek().getName());\n+        \n+        assertEquals(true, greg.era().isSupported());\n+        assertEquals(true, greg.centuryOfEra().isSupported());\n+        assertEquals(true, greg.yearOfCentury().isSupported());\n+        assertEquals(true, greg.yearOfEra().isSupported());\n+        assertEquals(true, greg.year().isSupported());\n+        assertEquals(true, greg.monthOfYear().isSupported());\n+        assertEquals(true, greg.weekyearOfCentury().isSupported());\n+        assertEquals(true, greg.weekyear().isSupported());\n+        assertEquals(true, greg.weekOfWeekyear().isSupported());\n+        assertEquals(true, greg.dayOfYear().isSupported());\n+        assertEquals(true, greg.dayOfMonth().isSupported());\n+        assertEquals(true, greg.dayOfWeek().isSupported());\n     }\n \n     public void testTimeFields() {\n-        assertEquals(\"halfdayOfDay\", GregorianChronology.getInstance().halfdayOfDay().getName());\n-        assertEquals(\"clockhourOfHalfday\", GregorianChronology.getInstance().clockhourOfHalfday().getName());\n-        assertEquals(\"hourOfHalfday\", GregorianChronology.getInstance().hourOfHalfday().getName());\n-        assertEquals(\"clockhourOfDay\", GregorianChronology.getInstance().clockhourOfDay().getName());\n-        assertEquals(\"hourOfDay\", GregorianChronology.getInstance().hourOfDay().getName());\n-        assertEquals(\"minuteOfDay\", GregorianChronology.getInstance().minuteOfDay().getName());\n-        assertEquals(\"minuteOfHour\", GregorianChronology.getInstance().minuteOfHour().getName());\n-        assertEquals(\"secondOfDay\", GregorianChronology.getInstance().secondOfDay().getName());\n-        assertEquals(\"secondOfMinute\", GregorianChronology.getInstance().secondOfMinute().getName());\n-        assertEquals(\"millisOfDay\", GregorianChronology.getInstance().millisOfDay().getName());\n-        assertEquals(\"millisOfSecond\", GregorianChronology.getInstance().millisOfSecond().getName());\n-        \n-        assertEquals(true, GregorianChronology.getInstance().halfdayOfDay().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().clockhourOfHalfday().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().hourOfHalfday().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().clockhourOfDay().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().hourOfDay().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().minuteOfDay().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().minuteOfHour().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().secondOfDay().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().secondOfMinute().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().millisOfDay().isSupported());\n-        assertEquals(true, GregorianChronology.getInstance().millisOfSecond().isSupported());\n+        final GregorianChronology greg = GregorianChronology.getInstance();\n+        assertEquals(\"halfdayOfDay\", greg.halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", greg.clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", greg.hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", greg.clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", greg.hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", greg.minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", greg.minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", greg.secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", greg.secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", greg.millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", greg.millisOfSecond().getName());\n+        \n+        assertEquals(true, greg.halfdayOfDay().isSupported());\n+        assertEquals(true, greg.clockhourOfHalfday().isSupported());\n+        assertEquals(true, greg.hourOfHalfday().isSupported());\n+        assertEquals(true, greg.clockhourOfDay().isSupported());\n+        assertEquals(true, greg.hourOfDay().isSupported());\n+        assertEquals(true, greg.minuteOfDay().isSupported());\n+        assertEquals(true, greg.minuteOfHour().isSupported());\n+        assertEquals(true, greg.secondOfDay().isSupported());\n+        assertEquals(true, greg.secondOfMinute().isSupported());\n+        assertEquals(true, greg.millisOfDay().isSupported());\n+        assertEquals(true, greg.millisOfSecond().isSupported());\n     }\n \n     public void testMaximumValue() {\n--- a/src/test/java/org/joda/time/chrono/TestISOChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestISOChronology.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *\n  * @author Stephen Colebourne\n  */\n+@SuppressWarnings(\"deprecation\")\n public class TestISOChronology extends TestCase {\n \n     private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n \n     //-----------------------------------------------------------------------\n     public void testDurationFields() {\n-        assertEquals(\"eras\", ISOChronology.getInstance().eras().getName());\n-        assertEquals(\"centuries\", ISOChronology.getInstance().centuries().getName());\n-        assertEquals(\"years\", ISOChronology.getInstance().years().getName());\n-        assertEquals(\"weekyears\", ISOChronology.getInstance().weekyears().getName());\n-        assertEquals(\"months\", ISOChronology.getInstance().months().getName());\n-        assertEquals(\"weeks\", ISOChronology.getInstance().weeks().getName());\n-        assertEquals(\"days\", ISOChronology.getInstance().days().getName());\n-        assertEquals(\"halfdays\", ISOChronology.getInstance().halfdays().getName());\n-        assertEquals(\"hours\", ISOChronology.getInstance().hours().getName());\n-        assertEquals(\"minutes\", ISOChronology.getInstance().minutes().getName());\n-        assertEquals(\"seconds\", ISOChronology.getInstance().seconds().getName());\n-        assertEquals(\"millis\", ISOChronology.getInstance().millis().getName());\n-        \n-        assertEquals(false, ISOChronology.getInstance().eras().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().centuries().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().years().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().weekyears().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().months().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().weeks().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().days().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().halfdays().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().hours().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().minutes().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().seconds().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().millis().isSupported());\n-        \n-        assertEquals(false, ISOChronology.getInstance().centuries().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance().years().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance().weekyears().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance().months().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance().weeks().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance().days().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance().halfdays().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance().hours().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance().minutes().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance().seconds().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance().millis().isPrecise());\n-        \n-        assertEquals(false, ISOChronology.getInstanceUTC().centuries().isPrecise());\n-        assertEquals(false, ISOChronology.getInstanceUTC().years().isPrecise());\n-        assertEquals(false, ISOChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(false, ISOChronology.getInstanceUTC().months().isPrecise());\n-        assertEquals(true, ISOChronology.getInstanceUTC().weeks().isPrecise());\n-        assertEquals(true, ISOChronology.getInstanceUTC().days().isPrecise());\n-        assertEquals(true, ISOChronology.getInstanceUTC().halfdays().isPrecise());\n-        assertEquals(true, ISOChronology.getInstanceUTC().hours().isPrecise());\n-        assertEquals(true, ISOChronology.getInstanceUTC().minutes().isPrecise());\n-        assertEquals(true, ISOChronology.getInstanceUTC().seconds().isPrecise());\n-        assertEquals(true, ISOChronology.getInstanceUTC().millis().isPrecise());\n-        \n-        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n-        assertEquals(false, ISOChronology.getInstance(gmt).centuries().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance(gmt).years().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance(gmt).weekyears().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance(gmt).months().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(gmt).weeks().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(gmt).days().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(gmt).halfdays().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(gmt).hours().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(gmt).minutes().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(gmt).seconds().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(gmt).millis().isPrecise());\n-        \n-        DateTimeZone offset = DateTimeZone.forOffsetHours(1);\n-        assertEquals(false, ISOChronology.getInstance(offset).centuries().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance(offset).years().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance(offset).weekyears().isPrecise());\n-        assertEquals(false, ISOChronology.getInstance(offset).months().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(offset).weeks().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(offset).days().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(offset).halfdays().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(offset).hours().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(offset).minutes().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(offset).seconds().isPrecise());\n-        assertEquals(true, ISOChronology.getInstance(offset).millis().isPrecise());\n+        final ISOChronology iso = ISOChronology.getInstance();\n+        assertEquals(\"eras\", iso.eras().getName());\n+        assertEquals(\"centuries\", iso.centuries().getName());\n+        assertEquals(\"years\", iso.years().getName());\n+        assertEquals(\"weekyears\", iso.weekyears().getName());\n+        assertEquals(\"months\", iso.months().getName());\n+        assertEquals(\"weeks\", iso.weeks().getName());\n+        assertEquals(\"days\", iso.days().getName());\n+        assertEquals(\"halfdays\", iso.halfdays().getName());\n+        assertEquals(\"hours\", iso.hours().getName());\n+        assertEquals(\"minutes\", iso.minutes().getName());\n+        assertEquals(\"seconds\", iso.seconds().getName());\n+        assertEquals(\"millis\", iso.millis().getName());\n+        \n+        assertEquals(false, iso.eras().isSupported());\n+        assertEquals(true, iso.centuries().isSupported());\n+        assertEquals(true, iso.years().isSupported());\n+        assertEquals(true, iso.weekyears().isSupported());\n+        assertEquals(true, iso.months().isSupported());\n+        assertEquals(true, iso.weeks().isSupported());\n+        assertEquals(true, iso.days().isSupported());\n+        assertEquals(true, iso.halfdays().isSupported());\n+        assertEquals(true, iso.hours().isSupported());\n+        assertEquals(true, iso.minutes().isSupported());\n+        assertEquals(true, iso.seconds().isSupported());\n+        assertEquals(true, iso.millis().isSupported());\n+        \n+        assertEquals(false, iso.centuries().isPrecise());\n+        assertEquals(false, iso.years().isPrecise());\n+        assertEquals(false, iso.weekyears().isPrecise());\n+        assertEquals(false, iso.months().isPrecise());\n+        assertEquals(false, iso.weeks().isPrecise());\n+        assertEquals(false, iso.days().isPrecise());\n+        assertEquals(false, iso.halfdays().isPrecise());\n+        assertEquals(true, iso.hours().isPrecise());\n+        assertEquals(true, iso.minutes().isPrecise());\n+        assertEquals(true, iso.seconds().isPrecise());\n+        assertEquals(true, iso.millis().isPrecise());\n+        \n+        final ISOChronology isoUTC = ISOChronology.getInstanceUTC();\n+        assertEquals(false, isoUTC.centuries().isPrecise());\n+        assertEquals(false, isoUTC.years().isPrecise());\n+        assertEquals(false, isoUTC.weekyears().isPrecise());\n+        assertEquals(false, isoUTC.months().isPrecise());\n+        assertEquals(true, isoUTC.weeks().isPrecise());\n+        assertEquals(true, isoUTC.days().isPrecise());\n+        assertEquals(true, isoUTC.halfdays().isPrecise());\n+        assertEquals(true, isoUTC.hours().isPrecise());\n+        assertEquals(true, isoUTC.minutes().isPrecise());\n+        assertEquals(true, isoUTC.seconds().isPrecise());\n+        assertEquals(true, isoUTC.millis().isPrecise());\n+        \n+        final DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        final ISOChronology isoGMT = ISOChronology.getInstance(gmt);\n+        assertEquals(false, isoGMT.centuries().isPrecise());\n+        assertEquals(false, isoGMT.years().isPrecise());\n+        assertEquals(false, isoGMT.weekyears().isPrecise());\n+        assertEquals(false, isoGMT.months().isPrecise());\n+        assertEquals(true, isoGMT.weeks().isPrecise());\n+        assertEquals(true, isoGMT.days().isPrecise());\n+        assertEquals(true, isoGMT.halfdays().isPrecise());\n+        assertEquals(true, isoGMT.hours().isPrecise());\n+        assertEquals(true, isoGMT.minutes().isPrecise());\n+        assertEquals(true, isoGMT.seconds().isPrecise());\n+        assertEquals(true, isoGMT.millis().isPrecise());\n+        \n+        final DateTimeZone offset = DateTimeZone.forOffsetHours(1);\n+        final ISOChronology isoOffset1 = ISOChronology.getInstance(offset);\n+        assertEquals(false, isoOffset1.centuries().isPrecise());\n+        assertEquals(false, isoOffset1.years().isPrecise());\n+        assertEquals(false, isoOffset1.weekyears().isPrecise());\n+        assertEquals(false, isoOffset1.months().isPrecise());\n+        assertEquals(true, isoOffset1.weeks().isPrecise());\n+        assertEquals(true, isoOffset1.days().isPrecise());\n+        assertEquals(true, isoOffset1.halfdays().isPrecise());\n+        assertEquals(true, isoOffset1.hours().isPrecise());\n+        assertEquals(true, isoOffset1.minutes().isPrecise());\n+        assertEquals(true, isoOffset1.seconds().isPrecise());\n+        assertEquals(true, isoOffset1.millis().isPrecise());\n     }\n \n     public void testDateFields() {\n-        assertEquals(\"era\", ISOChronology.getInstance().era().getName());\n-        assertEquals(\"centuryOfEra\", ISOChronology.getInstance().centuryOfEra().getName());\n-        assertEquals(\"yearOfCentury\", ISOChronology.getInstance().yearOfCentury().getName());\n-        assertEquals(\"yearOfEra\", ISOChronology.getInstance().yearOfEra().getName());\n-        assertEquals(\"year\", ISOChronology.getInstance().year().getName());\n-        assertEquals(\"monthOfYear\", ISOChronology.getInstance().monthOfYear().getName());\n-        assertEquals(\"weekyearOfCentury\", ISOChronology.getInstance().weekyearOfCentury().getName());\n-        assertEquals(\"weekyear\", ISOChronology.getInstance().weekyear().getName());\n-        assertEquals(\"weekOfWeekyear\", ISOChronology.getInstance().weekOfWeekyear().getName());\n-        assertEquals(\"dayOfYear\", ISOChronology.getInstance().dayOfYear().getName());\n-        assertEquals(\"dayOfMonth\", ISOChronology.getInstance().dayOfMonth().getName());\n-        assertEquals(\"dayOfWeek\", ISOChronology.getInstance().dayOfWeek().getName());\n-        \n-        assertEquals(true, ISOChronology.getInstance().era().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().centuryOfEra().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().yearOfCentury().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().yearOfEra().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().year().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().monthOfYear().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().weekyearOfCentury().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().weekyear().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().weekOfWeekyear().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().dayOfYear().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().dayOfMonth().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().dayOfWeek().isSupported());\n+        final ISOChronology iso = ISOChronology.getInstance();\n+        assertEquals(\"era\", iso.era().getName());\n+        assertEquals(\"centuryOfEra\", iso.centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", iso.yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", iso.yearOfEra().getName());\n+        assertEquals(\"year\", iso.year().getName());\n+        assertEquals(\"monthOfYear\", iso.monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", iso.weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", iso.weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", iso.weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", iso.dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", iso.dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", iso.dayOfWeek().getName());\n+        \n+        assertEquals(true, iso.era().isSupported());\n+        assertEquals(true, iso.centuryOfEra().isSupported());\n+        assertEquals(true, iso.yearOfCentury().isSupported());\n+        assertEquals(true, iso.yearOfEra().isSupported());\n+        assertEquals(true, iso.year().isSupported());\n+        assertEquals(true, iso.monthOfYear().isSupported());\n+        assertEquals(true, iso.weekyearOfCentury().isSupported());\n+        assertEquals(true, iso.weekyear().isSupported());\n+        assertEquals(true, iso.weekOfWeekyear().isSupported());\n+        assertEquals(true, iso.dayOfYear().isSupported());\n+        assertEquals(true, iso.dayOfMonth().isSupported());\n+        assertEquals(true, iso.dayOfWeek().isSupported());\n     }\n \n     public void testTimeFields() {\n-        assertEquals(\"halfdayOfDay\", ISOChronology.getInstance().halfdayOfDay().getName());\n-        assertEquals(\"clockhourOfHalfday\", ISOChronology.getInstance().clockhourOfHalfday().getName());\n-        assertEquals(\"hourOfHalfday\", ISOChronology.getInstance().hourOfHalfday().getName());\n-        assertEquals(\"clockhourOfDay\", ISOChronology.getInstance().clockhourOfDay().getName());\n-        assertEquals(\"hourOfDay\", ISOChronology.getInstance().hourOfDay().getName());\n-        assertEquals(\"minuteOfDay\", ISOChronology.getInstance().minuteOfDay().getName());\n-        assertEquals(\"minuteOfHour\", ISOChronology.getInstance().minuteOfHour().getName());\n-        assertEquals(\"secondOfDay\", ISOChronology.getInstance().secondOfDay().getName());\n-        assertEquals(\"secondOfMinute\", ISOChronology.getInstance().secondOfMinute().getName());\n-        assertEquals(\"millisOfDay\", ISOChronology.getInstance().millisOfDay().getName());\n-        assertEquals(\"millisOfSecond\", ISOChronology.getInstance().millisOfSecond().getName());\n-        \n-        assertEquals(true, ISOChronology.getInstance().halfdayOfDay().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().clockhourOfHalfday().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().hourOfHalfday().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().clockhourOfDay().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().hourOfDay().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().minuteOfDay().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().minuteOfHour().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().secondOfDay().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().secondOfMinute().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().millisOfDay().isSupported());\n-        assertEquals(true, ISOChronology.getInstance().millisOfSecond().isSupported());\n+        final ISOChronology iso = ISOChronology.getInstance();\n+        assertEquals(\"halfdayOfDay\", iso.halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", iso.clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", iso.hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", iso.clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", iso.hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", iso.minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", iso.minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", iso.secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", iso.secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", iso.millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", iso.millisOfSecond().getName());\n+        \n+        assertEquals(true, iso.halfdayOfDay().isSupported());\n+        assertEquals(true, iso.clockhourOfHalfday().isSupported());\n+        assertEquals(true, iso.hourOfHalfday().isSupported());\n+        assertEquals(true, iso.clockhourOfDay().isSupported());\n+        assertEquals(true, iso.hourOfDay().isSupported());\n+        assertEquals(true, iso.minuteOfDay().isSupported());\n+        assertEquals(true, iso.minuteOfHour().isSupported());\n+        assertEquals(true, iso.secondOfDay().isSupported());\n+        assertEquals(true, iso.secondOfMinute().isSupported());\n+        assertEquals(true, iso.millisOfDay().isSupported());\n+        assertEquals(true, iso.millisOfSecond().isSupported());\n     }\n \n     public void testMaxYear() {\n--- a/src/test/java/org/joda/time/chrono/TestIslamicChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestIslamicChronology.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     //-----------------------------------------------------------------------\n     public void testDurationFields() {\n-        assertEquals(\"eras\", IslamicChronology.getInstance().eras().getName());\n-        assertEquals(\"centuries\", IslamicChronology.getInstance().centuries().getName());\n-        assertEquals(\"years\", IslamicChronology.getInstance().years().getName());\n-        assertEquals(\"weekyears\", IslamicChronology.getInstance().weekyears().getName());\n-        assertEquals(\"months\", IslamicChronology.getInstance().months().getName());\n-        assertEquals(\"weeks\", IslamicChronology.getInstance().weeks().getName());\n-        assertEquals(\"days\", IslamicChronology.getInstance().days().getName());\n-        assertEquals(\"halfdays\", IslamicChronology.getInstance().halfdays().getName());\n-        assertEquals(\"hours\", IslamicChronology.getInstance().hours().getName());\n-        assertEquals(\"minutes\", IslamicChronology.getInstance().minutes().getName());\n-        assertEquals(\"seconds\", IslamicChronology.getInstance().seconds().getName());\n-        assertEquals(\"millis\", IslamicChronology.getInstance().millis().getName());\n-        \n-        assertEquals(false, IslamicChronology.getInstance().eras().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().centuries().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().years().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().weekyears().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().months().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().weeks().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().days().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().halfdays().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().hours().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().minutes().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().seconds().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().millis().isSupported());\n-        \n-        assertEquals(false, IslamicChronology.getInstance().centuries().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstance().years().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstance().weekyears().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstance().months().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstance().weeks().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstance().days().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstance().halfdays().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance().hours().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance().minutes().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance().seconds().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance().millis().isPrecise());\n-        \n-        assertEquals(false, IslamicChronology.getInstanceUTC().centuries().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstanceUTC().years().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstanceUTC().months().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstanceUTC().weeks().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstanceUTC().days().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstanceUTC().halfdays().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstanceUTC().hours().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstanceUTC().minutes().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstanceUTC().seconds().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstanceUTC().millis().isPrecise());\n-        \n-        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n-        assertEquals(false, IslamicChronology.getInstance(gmt).centuries().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstance(gmt).years().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstance(gmt).weekyears().isPrecise());\n-        assertEquals(false, IslamicChronology.getInstance(gmt).months().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance(gmt).weeks().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance(gmt).days().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance(gmt).halfdays().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance(gmt).hours().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance(gmt).minutes().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance(gmt).seconds().isPrecise());\n-        assertEquals(true, IslamicChronology.getInstance(gmt).millis().isPrecise());\n+        final IslamicChronology islamic = IslamicChronology.getInstance();\n+        assertEquals(\"eras\", islamic.eras().getName());\n+        assertEquals(\"centuries\", islamic.centuries().getName());\n+        assertEquals(\"years\", islamic.years().getName());\n+        assertEquals(\"weekyears\", islamic.weekyears().getName());\n+        assertEquals(\"months\", islamic.months().getName());\n+        assertEquals(\"weeks\", islamic.weeks().getName());\n+        assertEquals(\"days\", islamic.days().getName());\n+        assertEquals(\"halfdays\", islamic.halfdays().getName());\n+        assertEquals(\"hours\", islamic.hours().getName());\n+        assertEquals(\"minutes\", islamic.minutes().getName());\n+        assertEquals(\"seconds\", islamic.seconds().getName());\n+        assertEquals(\"millis\", islamic.millis().getName());\n+        \n+        assertEquals(false, islamic.eras().isSupported());\n+        assertEquals(true, islamic.centuries().isSupported());\n+        assertEquals(true, islamic.years().isSupported());\n+        assertEquals(true, islamic.weekyears().isSupported());\n+        assertEquals(true, islamic.months().isSupported());\n+        assertEquals(true, islamic.weeks().isSupported());\n+        assertEquals(true, islamic.days().isSupported());\n+        assertEquals(true, islamic.halfdays().isSupported());\n+        assertEquals(true, islamic.hours().isSupported());\n+        assertEquals(true, islamic.minutes().isSupported());\n+        assertEquals(true, islamic.seconds().isSupported());\n+        assertEquals(true, islamic.millis().isSupported());\n+        \n+        assertEquals(false, islamic.centuries().isPrecise());\n+        assertEquals(false, islamic.years().isPrecise());\n+        assertEquals(false, islamic.weekyears().isPrecise());\n+        assertEquals(false, islamic.months().isPrecise());\n+        assertEquals(false, islamic.weeks().isPrecise());\n+        assertEquals(false, islamic.days().isPrecise());\n+        assertEquals(false, islamic.halfdays().isPrecise());\n+        assertEquals(true, islamic.hours().isPrecise());\n+        assertEquals(true, islamic.minutes().isPrecise());\n+        assertEquals(true, islamic.seconds().isPrecise());\n+        assertEquals(true, islamic.millis().isPrecise());\n+        \n+        final IslamicChronology islamicUTC = IslamicChronology.getInstanceUTC();\n+        assertEquals(false, islamicUTC.centuries().isPrecise());\n+        assertEquals(false, islamicUTC.years().isPrecise());\n+        assertEquals(false, islamicUTC.weekyears().isPrecise());\n+        assertEquals(false, islamicUTC.months().isPrecise());\n+        assertEquals(true, islamicUTC.weeks().isPrecise());\n+        assertEquals(true, islamicUTC.days().isPrecise());\n+        assertEquals(true, islamicUTC.halfdays().isPrecise());\n+        assertEquals(true, islamicUTC.hours().isPrecise());\n+        assertEquals(true, islamicUTC.minutes().isPrecise());\n+        assertEquals(true, islamicUTC.seconds().isPrecise());\n+        assertEquals(true, islamicUTC.millis().isPrecise());\n+        \n+        final DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        final IslamicChronology islamicGMT = IslamicChronology.getInstance(gmt);\n+        assertEquals(false, islamicGMT.centuries().isPrecise());\n+        assertEquals(false, islamicGMT.years().isPrecise());\n+        assertEquals(false, islamicGMT.weekyears().isPrecise());\n+        assertEquals(false, islamicGMT.months().isPrecise());\n+        assertEquals(true, islamicGMT.weeks().isPrecise());\n+        assertEquals(true, islamicGMT.days().isPrecise());\n+        assertEquals(true, islamicGMT.halfdays().isPrecise());\n+        assertEquals(true, islamicGMT.hours().isPrecise());\n+        assertEquals(true, islamicGMT.minutes().isPrecise());\n+        assertEquals(true, islamicGMT.seconds().isPrecise());\n+        assertEquals(true, islamicGMT.millis().isPrecise());\n     }\n \n     public void testDateFields() {\n-        assertEquals(\"era\", IslamicChronology.getInstance().era().getName());\n-        assertEquals(\"centuryOfEra\", IslamicChronology.getInstance().centuryOfEra().getName());\n-        assertEquals(\"yearOfCentury\", IslamicChronology.getInstance().yearOfCentury().getName());\n-        assertEquals(\"yearOfEra\", IslamicChronology.getInstance().yearOfEra().getName());\n-        assertEquals(\"year\", IslamicChronology.getInstance().year().getName());\n-        assertEquals(\"monthOfYear\", IslamicChronology.getInstance().monthOfYear().getName());\n-        assertEquals(\"weekyearOfCentury\", IslamicChronology.getInstance().weekyearOfCentury().getName());\n-        assertEquals(\"weekyear\", IslamicChronology.getInstance().weekyear().getName());\n-        assertEquals(\"weekOfWeekyear\", IslamicChronology.getInstance().weekOfWeekyear().getName());\n-        assertEquals(\"dayOfYear\", IslamicChronology.getInstance().dayOfYear().getName());\n-        assertEquals(\"dayOfMonth\", IslamicChronology.getInstance().dayOfMonth().getName());\n-        assertEquals(\"dayOfWeek\", IslamicChronology.getInstance().dayOfWeek().getName());\n-        \n-        assertEquals(true, IslamicChronology.getInstance().era().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().centuryOfEra().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().yearOfCentury().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().yearOfEra().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().year().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().monthOfYear().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().weekyearOfCentury().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().weekyear().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().weekOfWeekyear().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().dayOfYear().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().dayOfMonth().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().dayOfWeek().isSupported());\n+        final IslamicChronology islamic = IslamicChronology.getInstance();\n+        assertEquals(\"era\", islamic.era().getName());\n+        assertEquals(\"centuryOfEra\", islamic.centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", islamic.yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", islamic.yearOfEra().getName());\n+        assertEquals(\"year\", islamic.year().getName());\n+        assertEquals(\"monthOfYear\", islamic.monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", islamic.weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", islamic.weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", islamic.weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", islamic.dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", islamic.dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", islamic.dayOfWeek().getName());\n+        \n+        assertEquals(true, islamic.era().isSupported());\n+        assertEquals(true, islamic.centuryOfEra().isSupported());\n+        assertEquals(true, islamic.yearOfCentury().isSupported());\n+        assertEquals(true, islamic.yearOfEra().isSupported());\n+        assertEquals(true, islamic.year().isSupported());\n+        assertEquals(true, islamic.monthOfYear().isSupported());\n+        assertEquals(true, islamic.weekyearOfCentury().isSupported());\n+        assertEquals(true, islamic.weekyear().isSupported());\n+        assertEquals(true, islamic.weekOfWeekyear().isSupported());\n+        assertEquals(true, islamic.dayOfYear().isSupported());\n+        assertEquals(true, islamic.dayOfMonth().isSupported());\n+        assertEquals(true, islamic.dayOfWeek().isSupported());\n     }\n \n     public void testTimeFields() {\n-        assertEquals(\"halfdayOfDay\", IslamicChronology.getInstance().halfdayOfDay().getName());\n-        assertEquals(\"clockhourOfHalfday\", IslamicChronology.getInstance().clockhourOfHalfday().getName());\n-        assertEquals(\"hourOfHalfday\", IslamicChronology.getInstance().hourOfHalfday().getName());\n-        assertEquals(\"clockhourOfDay\", IslamicChronology.getInstance().clockhourOfDay().getName());\n-        assertEquals(\"hourOfDay\", IslamicChronology.getInstance().hourOfDay().getName());\n-        assertEquals(\"minuteOfDay\", IslamicChronology.getInstance().minuteOfDay().getName());\n-        assertEquals(\"minuteOfHour\", IslamicChronology.getInstance().minuteOfHour().getName());\n-        assertEquals(\"secondOfDay\", IslamicChronology.getInstance().secondOfDay().getName());\n-        assertEquals(\"secondOfMinute\", IslamicChronology.getInstance().secondOfMinute().getName());\n-        assertEquals(\"millisOfDay\", IslamicChronology.getInstance().millisOfDay().getName());\n-        assertEquals(\"millisOfSecond\", IslamicChronology.getInstance().millisOfSecond().getName());\n-        \n-        assertEquals(true, IslamicChronology.getInstance().halfdayOfDay().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().clockhourOfHalfday().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().hourOfHalfday().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().clockhourOfDay().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().hourOfDay().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().minuteOfDay().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().minuteOfHour().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().secondOfDay().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().secondOfMinute().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().millisOfDay().isSupported());\n-        assertEquals(true, IslamicChronology.getInstance().millisOfSecond().isSupported());\n+        final IslamicChronology islamic = IslamicChronology.getInstance();\n+        assertEquals(\"halfdayOfDay\", islamic.halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", islamic.clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", islamic.hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", islamic.clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", islamic.hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", islamic.minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", islamic.minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", islamic.secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", islamic.secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", islamic.millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", islamic.millisOfSecond().getName());\n+        \n+        assertEquals(true, islamic.halfdayOfDay().isSupported());\n+        assertEquals(true, islamic.clockhourOfHalfday().isSupported());\n+        assertEquals(true, islamic.hourOfHalfday().isSupported());\n+        assertEquals(true, islamic.clockhourOfDay().isSupported());\n+        assertEquals(true, islamic.hourOfDay().isSupported());\n+        assertEquals(true, islamic.minuteOfDay().isSupported());\n+        assertEquals(true, islamic.minuteOfHour().isSupported());\n+        assertEquals(true, islamic.secondOfDay().isSupported());\n+        assertEquals(true, islamic.secondOfMinute().isSupported());\n+        assertEquals(true, islamic.millisOfDay().isSupported());\n+        assertEquals(true, islamic.millisOfSecond().isSupported());\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/test/java/org/joda/time/chrono/TestJulianChronology.java\n+++ b/src/test/java/org/joda/time/chrono/TestJulianChronology.java\n /*\n- *  Copyright 2001-2005 Stephen Colebourne\n+ *  Copyright 2001-2013 Stephen Colebourne\n  *\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n \n     //-----------------------------------------------------------------------\n     public void testDurationFields() {\n-        assertEquals(\"eras\", JulianChronology.getInstance().eras().getName());\n-        assertEquals(\"centuries\", JulianChronology.getInstance().centuries().getName());\n-        assertEquals(\"years\", JulianChronology.getInstance().years().getName());\n-        assertEquals(\"weekyears\", JulianChronology.getInstance().weekyears().getName());\n-        assertEquals(\"months\", JulianChronology.getInstance().months().getName());\n-        assertEquals(\"weeks\", JulianChronology.getInstance().weeks().getName());\n-        assertEquals(\"days\", JulianChronology.getInstance().days().getName());\n-        assertEquals(\"halfdays\", JulianChronology.getInstance().halfdays().getName());\n-        assertEquals(\"hours\", JulianChronology.getInstance().hours().getName());\n-        assertEquals(\"minutes\", JulianChronology.getInstance().minutes().getName());\n-        assertEquals(\"seconds\", JulianChronology.getInstance().seconds().getName());\n-        assertEquals(\"millis\", JulianChronology.getInstance().millis().getName());\n-        \n-        assertEquals(false, JulianChronology.getInstance().eras().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().centuries().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().years().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().weekyears().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().months().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().weeks().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().days().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().halfdays().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().hours().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().minutes().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().seconds().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().millis().isSupported());\n-        \n-        assertEquals(false, JulianChronology.getInstance().centuries().isPrecise());\n-        assertEquals(false, JulianChronology.getInstance().years().isPrecise());\n-        assertEquals(false, JulianChronology.getInstance().weekyears().isPrecise());\n-        assertEquals(false, JulianChronology.getInstance().months().isPrecise());\n-        assertEquals(false, JulianChronology.getInstance().weeks().isPrecise());\n-        assertEquals(false, JulianChronology.getInstance().days().isPrecise());\n-        assertEquals(false, JulianChronology.getInstance().halfdays().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance().hours().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance().minutes().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance().seconds().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance().millis().isPrecise());\n-        \n-        assertEquals(false, JulianChronology.getInstanceUTC().centuries().isPrecise());\n-        assertEquals(false, JulianChronology.getInstanceUTC().years().isPrecise());\n-        assertEquals(false, JulianChronology.getInstanceUTC().weekyears().isPrecise());\n-        assertEquals(false, JulianChronology.getInstanceUTC().months().isPrecise());\n-        assertEquals(true, JulianChronology.getInstanceUTC().weeks().isPrecise());\n-        assertEquals(true, JulianChronology.getInstanceUTC().days().isPrecise());\n-        assertEquals(true, JulianChronology.getInstanceUTC().halfdays().isPrecise());\n-        assertEquals(true, JulianChronology.getInstanceUTC().hours().isPrecise());\n-        assertEquals(true, JulianChronology.getInstanceUTC().minutes().isPrecise());\n-        assertEquals(true, JulianChronology.getInstanceUTC().seconds().isPrecise());\n-        assertEquals(true, JulianChronology.getInstanceUTC().millis().isPrecise());\n-        \n-        DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n-        assertEquals(false, JulianChronology.getInstance(gmt).centuries().isPrecise());\n-        assertEquals(false, JulianChronology.getInstance(gmt).years().isPrecise());\n-        assertEquals(false, JulianChronology.getInstance(gmt).weekyears().isPrecise());\n-        assertEquals(false, JulianChronology.getInstance(gmt).months().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance(gmt).weeks().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance(gmt).days().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance(gmt).halfdays().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance(gmt).hours().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance(gmt).minutes().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance(gmt).seconds().isPrecise());\n-        assertEquals(true, JulianChronology.getInstance(gmt).millis().isPrecise());\n+        final JulianChronology julian = JulianChronology.getInstance();\n+        assertEquals(\"eras\", julian.eras().getName());\n+        assertEquals(\"centuries\", julian.centuries().getName());\n+        assertEquals(\"years\", julian.years().getName());\n+        assertEquals(\"weekyears\", julian.weekyears().getName());\n+        assertEquals(\"months\", julian.months().getName());\n+        assertEquals(\"weeks\", julian.weeks().getName());\n+        assertEquals(\"days\", julian.days().getName());\n+        assertEquals(\"halfdays\", julian.halfdays().getName());\n+        assertEquals(\"hours\", julian.hours().getName());\n+        assertEquals(\"minutes\", julian.minutes().getName());\n+        assertEquals(\"seconds\", julian.seconds().getName());\n+        assertEquals(\"millis\", julian.millis().getName());\n+        \n+        assertEquals(false, julian.eras().isSupported());\n+        assertEquals(true, julian.centuries().isSupported());\n+        assertEquals(true, julian.years().isSupported());\n+        assertEquals(true, julian.weekyears().isSupported());\n+        assertEquals(true, julian.months().isSupported());\n+        assertEquals(true, julian.weeks().isSupported());\n+        assertEquals(true, julian.days().isSupported());\n+        assertEquals(true, julian.halfdays().isSupported());\n+        assertEquals(true, julian.hours().isSupported());\n+        assertEquals(true, julian.minutes().isSupported());\n+        assertEquals(true, julian.seconds().isSupported());\n+        assertEquals(true, julian.millis().isSupported());\n+        \n+        assertEquals(false, julian.centuries().isPrecise());\n+        assertEquals(false, julian.years().isPrecise());\n+        assertEquals(false, julian.weekyears().isPrecise());\n+        assertEquals(false, julian.months().isPrecise());\n+        assertEquals(false, julian.weeks().isPrecise());\n+        assertEquals(false, julian.days().isPrecise());\n+        assertEquals(false, julian.halfdays().isPrecise());\n+        assertEquals(true, julian.hours().isPrecise());\n+        assertEquals(true, julian.minutes().isPrecise());\n+        assertEquals(true, julian.seconds().isPrecise());\n+        assertEquals(true, julian.millis().isPrecise());\n+        \n+        final JulianChronology julianUTC = JulianChronology.getInstanceUTC();\n+        assertEquals(false, julianUTC.centuries().isPrecise());\n+        assertEquals(false, julianUTC.years().isPrecise());\n+        assertEquals(false, julianUTC.weekyears().isPrecise());\n+        assertEquals(false, julianUTC.months().isPrecise());\n+        assertEquals(true, julianUTC.weeks().isPrecise());\n+        assertEquals(true, julianUTC.days().isPrecise());\n+        assertEquals(true, julianUTC.halfdays().isPrecise());\n+        assertEquals(true, julianUTC.hours().isPrecise());\n+        assertEquals(true, julianUTC.minutes().isPrecise());\n+        assertEquals(true, julianUTC.seconds().isPrecise());\n+        assertEquals(true, julianUTC.millis().isPrecise());\n+        \n+        final DateTimeZone gmt = DateTimeZone.forID(\"Etc/GMT\");\n+        final JulianChronology julianGMT = JulianChronology.getInstance(gmt);\n+        assertEquals(false, julianGMT.centuries().isPrecise());\n+        assertEquals(false, julianGMT.years().isPrecise());\n+        assertEquals(false, julianGMT.weekyears().isPrecise());\n+        assertEquals(false, julianGMT.months().isPrecise());\n+        assertEquals(true, julianGMT.weeks().isPrecise());\n+        assertEquals(true, julianGMT.days().isPrecise());\n+        assertEquals(true, julianGMT.halfdays().isPrecise());\n+        assertEquals(true, julianGMT.hours().isPrecise());\n+        assertEquals(true, julianGMT.minutes().isPrecise());\n+        assertEquals(true, julianGMT.seconds().isPrecise());\n+        assertEquals(true, julianGMT.millis().isPrecise());\n     }\n \n     public void testDateFields() {\n-        assertEquals(\"era\", JulianChronology.getInstance().era().getName());\n-        assertEquals(\"centuryOfEra\", JulianChronology.getInstance().centuryOfEra().getName());\n-        assertEquals(\"yearOfCentury\", JulianChronology.getInstance().yearOfCentury().getName());\n-        assertEquals(\"yearOfEra\", JulianChronology.getInstance().yearOfEra().getName());\n-        assertEquals(\"year\", JulianChronology.getInstance().year().getName());\n-        assertEquals(\"monthOfYear\", JulianChronology.getInstance().monthOfYear().getName());\n-        assertEquals(\"weekyearOfCentury\", JulianChronology.getInstance().weekyearOfCentury().getName());\n-        assertEquals(\"weekyear\", JulianChronology.getInstance().weekyear().getName());\n-        assertEquals(\"weekOfWeekyear\", JulianChronology.getInstance().weekOfWeekyear().getName());\n-        assertEquals(\"dayOfYear\", JulianChronology.getInstance().dayOfYear().getName());\n-        assertEquals(\"dayOfMonth\", JulianChronology.getInstance().dayOfMonth().getName());\n-        assertEquals(\"dayOfWeek\", JulianChronology.getInstance().dayOfWeek().getName());\n-        \n-        assertEquals(true, JulianChronology.getInstance().era().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().centuryOfEra().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().yearOfCentury().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().yearOfEra().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().year().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().monthOfYear().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().weekyearOfCentury().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().weekyear().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().weekOfWeekyear().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().dayOfYear().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().dayOfMonth().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().dayOfWeek().isSupported());\n+        final JulianChronology julian = JulianChronology.getInstance();\n+        assertEquals(\"era\", julian.era().getName());\n+        assertEquals(\"centuryOfEra\", julian.centuryOfEra().getName());\n+        assertEquals(\"yearOfCentury\", julian.yearOfCentury().getName());\n+        assertEquals(\"yearOfEra\", julian.yearOfEra().getName());\n+        assertEquals(\"year\", julian.year().getName());\n+        assertEquals(\"monthOfYear\", julian.monthOfYear().getName());\n+        assertEquals(\"weekyearOfCentury\", julian.weekyearOfCentury().getName());\n+        assertEquals(\"weekyear\", julian.weekyear().getName());\n+        assertEquals(\"weekOfWeekyear\", julian.weekOfWeekyear().getName());\n+        assertEquals(\"dayOfYear\", julian.dayOfYear().getName());\n+        assertEquals(\"dayOfMonth\", julian.dayOfMonth().getName());\n+        assertEquals(\"dayOfWeek\", julian.dayOfWeek().getName());\n+        \n+        assertEquals(true, julian.era().isSupported());\n+        assertEquals(true, julian.centuryOfEra().isSupported());\n+        assertEquals(true, julian.yearOfCentury().isSupported());\n+        assertEquals(true, julian.yearOfEra().isSupported());\n+        assertEquals(true, julian.year().isSupported());\n+        assertEquals(true, julian.monthOfYear().isSupported());\n+        assertEquals(true, julian.weekyearOfCentury().isSupported());\n+        assertEquals(true, julian.weekyear().isSupported());\n+        assertEquals(true, julian.weekOfWeekyear().isSupported());\n+        assertEquals(true, julian.dayOfYear().isSupported());\n+        assertEquals(true, julian.dayOfMonth().isSupported());\n+        assertEquals(true, julian.dayOfWeek().isSupported());\n     }\n \n     public void testTimeFields() {\n-        assertEquals(\"halfdayOfDay\", JulianChronology.getInstance().halfdayOfDay().getName());\n-        assertEquals(\"clockhourOfHalfday\", JulianChronology.getInstance().clockhourOfHalfday().getName());\n-        assertEquals(\"hourOfHalfday\", JulianChronology.getInstance().hourOfHalfday().getName());\n-        assertEquals(\"clockhourOfDay\", JulianChronology.getInstance().clockhourOfDay().getName());\n-        assertEquals(\"hourOfDay\", JulianChronology.getInstance().hourOfDay().getName());\n-        assertEquals(\"minuteOfDay\", JulianChronology.getInstance().minuteOfDay().getName());\n-        assertEquals(\"minuteOfHour\", JulianChronology.getInstance().minuteOfHour().getName());\n-        assertEquals(\"secondOfDay\", JulianChronology.getInstance().secondOfDay().getName());\n-        assertEquals(\"secondOfMinute\", JulianChronology.getInstance().secondOfMinute().getName());\n-        assertEquals(\"millisOfDay\", JulianChronology.getInstance().millisOfDay().getName());\n-        assertEquals(\"millisOfSecond\", JulianChronology.getInstance().millisOfSecond().getName());\n-        \n-        assertEquals(true, JulianChronology.getInstance().halfdayOfDay().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().clockhourOfHalfday().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().hourOfHalfday().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().clockhourOfDay().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().hourOfDay().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().minuteOfDay().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().minuteOfHour().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().secondOfDay().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().secondOfMinute().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().millisOfDay().isSupported());\n-        assertEquals(true, JulianChronology.getInstance().millisOfSecond().isSupported());\n+        final JulianChronology julian = JulianChronology.getInstance();\n+        assertEquals(\"halfdayOfDay\", julian.halfdayOfDay().getName());\n+        assertEquals(\"clockhourOfHalfday\", julian.clockhourOfHalfday().getName());\n+        assertEquals(\"hourOfHalfday\", julian.hourOfHalfday().getName());\n+        assertEquals(\"clockhourOfDay\", julian.clockhourOfDay().getName());\n+        assertEquals(\"hourOfDay\", julian.hourOfDay().getName());\n+        assertEquals(\"minuteOfDay\", julian.minuteOfDay().getName());\n+        assertEquals(\"minuteOfHour\", julian.minuteOfHour().getName());\n+        assertEquals(\"secondOfDay\", julian.secondOfDay().getName());\n+        assertEquals(\"secondOfMinute\", julian.secondOfMinute().getName());\n+        assertEquals(\"millisOfDay\", julian.millisOfDay().getName());\n+        assertEquals(\"millisOfSecond\", julian.millisOfSecond().getName());\n+        \n+        assertEquals(true, julian.halfdayOfDay().isSupported());\n+        assertEquals(true, julian.clockhourOfHalfday().isSupported());\n+        assertEquals(true, julian.hourOfHalfday().isSupported());\n+        assertEquals(true, julian.clockhourOfDay().isSupported());\n+        assertEquals(true, julian.hourOfDay().isSupported());\n+        assertEquals(true, julian.minuteOfDay().isSupported());\n+        assertEquals(true, julian.minuteOfHour().isSupported());\n+        assertEquals(true, julian.secondOfDay().isSupported());\n+        assertEquals(true, julian.secondOfMinute().isSupported());\n+        assertEquals(true, julian.millisOfDay().isSupported());\n+        assertEquals(true, julian.millisOfSecond().isSupported());\n     }\n \n }", "timestamp": 1385555765, "metainfo": ""}