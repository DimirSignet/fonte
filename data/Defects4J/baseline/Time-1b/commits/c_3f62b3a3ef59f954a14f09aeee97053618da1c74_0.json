{"sha": "3f62b3a3ef59f954a14f09aeee97053618da1c74", "log": "Tests and fixes   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/AbstractDuration.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractDuration.java\n  */\n package org.joda.time;\n \n+import java.io.Serializable;\n+\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.DurationConverter;\n import org.joda.time.field.FieldUtils;\n  * @author Stephen Colebourne\n  * @since 1.0\n  */\n-public abstract class AbstractDuration implements ReadableDuration {\n+public abstract class AbstractDuration\n+        implements ReadableDuration, Serializable {\n \n     /** Serialization version */\n     private static final long serialVersionUID = 358732693691287348L;\n     /**\n      * Converts this duration to a Period instance using the All type.\n      * <p>\n-     * Only precise fields in the period type will be used and the calculation will use UTC.\n+     * Only precise fields in the period type will be used.\n+     * For AllType, this is the time fields only.\n+     * The year, month, week and day fields will not be populated.\n+     * The period constructed will always be precise.\n      * <p>\n      * If the duration is small, less than one day, then this method will perform\n-     * as you might expect and split the fields evenly. The situation is more complex\n-     * for larger durations.\n-     * <p>\n-     * If the duration is larger then the years and months fields will remain as zero,\n-     * with the duration allocated to the weeks and days fields.\n-     * The effect is that a large duration of several years or months will be converted\n-     * to a period including a large number of weeks and zero years and months.\n-     * For example, a duration equal to (365 + 60 + 5) days will be converted to\n-     * 61 weeks and 3 days.\n-     * <p>\n-     * For more control over the conversion process, you should convert the duration\n-     * to an interval by referencing a fixed instant and then obtain the period.\n+     * as you might expect and split the fields evenly.\n+     * <p>\n+     * If the duration is larger than one day then all the remaining duration will\n+     * be stored in the largest available precise field, hours in this case.\n+     * <p>\n+     * For example, a duration effectively equal to (365 + 60 + 5) days will be\n+     * converted to ((365 + 60 + 5) * 24) hours by this constructor.\n+     * <p>\n+     * For more control over the conversion process, you have two options:\n+     * <ul>\n+     * <li>convert the duration to an {@link Interval}, and from there obtain the period\n+     * <li>specify a period type that contains precise definitions of the day and larger\n+     * fields, such as the UTC or precise types.\n+     * </ul>\n      * \n      * @return a Period created using the millisecond duration from this instance\n      */\n     public final Period toPeriod() {\n-        return new Period(this, PeriodType.getAllType());\n+        return new Period(getMillis());\n     }\n \n     /**\n      * Converts this duration to a Period instance specifying a period type\n      * to control how the duration is split into fields.\n      * <p>\n-     * The exact impact of this method is determined by the period type.\n-     * Only precise fields in the period type will be used and the calculation will use UTC.\n-     * <p>\n-     * If the duration is small, less than one day, then this method will perform\n-     * as you might expect and split the fields evenly. The situation is more complex\n-     * for larger durations.\n-     * <p>\n-     * If the period type is PreciseAll then all fields can be set.\n-     * For example, a duration equal to (365 + 60 + 5) days will be converted to\n-     * 1 year, 2 months and 5 days using the PreciseAll type.\n-     * <p>\n-     * If the period type is All then the years and months fields will remain as zero,\n-     * with the duration allocated to the weeks and days fields.\n-     * Normally, the weeks and days fields are imprecise, but this method\n-     * calculates using the UTC time zone making weeks and days precise.\n-     * The effect is that a large duration of several years or months will be converted\n-     * to a period including a large number of weeks and zero years and months.\n-     * For example, a duration equal to (365 + 60 + 5) days will be converted to\n-     * 61 weeks and 3 days.\n-     * <p>\n-     * For more control over the conversion process, you should convert the duration\n-     * to an interval by referencing a fixed instant and then obtain the period.\n-     * \n-     * @param type  the period type determining how to split the duration into fields\n+     * Only precise fields in the period type will be used.\n+     * Imprecise fields will not be populated.\n+     * The period constructed will always be precise.\n+     * <p>\n+     * If the duration is small then this method will perform\n+     * as you might expect and split the fields evenly.\n+     * <p>\n+     * If the duration is large then all the remaining duration will\n+     * be stored in the largest available precise field.\n+     * For details as to which fields are precise, review the period type javadoc.\n+     * \n+     * @param type  the period type determining how to split the duration into fields, null means All type\n      * @return a Period created using the millisecond duration from this instance\n      */\n     public final Period toPeriod(PeriodType type) {\n-        return new Period(this, type);\n+        return new Period(getMillis(), type);\n     }\n \n     //-----------------------------------------------------------------------\n      * <p>\n      * For example, \"P6H3M7S\" represents 6 hours, 3 minutes, 7 seconds.\n      * The field values are determined using the PreciseAll period type.\n+     * <p>\n+     * For more control over the output, see\n+     * {@link org.joda.time.format.PeriodFormatterBuilder PeriodFormatterBuilder}.\n      *\n      * @return the value as an ISO8601 string\n      */\n--- a/JodaTime/src/java/org/joda/time/AbstractInterval.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractInterval.java\n     /** The end of the period */\n     private long iEndMillis;\n \n-    /** The duration, which may be lazily set */\n-    private Duration iDuration;\n-\n+    /** Cache the duration */\n+    private transient Duration iDuration;\n     /** Cache the start instant */\n     private transient Instant iStartInstant;\n     /** Cache the end instant */\n     /**\n      * Constructs a time interval as a copy of another.\n      * \n-     * @param interval the time interval to convert\n+     * @param interval  the time interval to convert\n      * @throws IllegalArgumentException if the interval is null or invalid\n      */\n     public AbstractInterval(Object interval) {\n--- a/JodaTime/src/java/org/joda/time/AbstractPeriod.java\n+++ b/JodaTime/src/java/org/joda/time/AbstractPeriod.java\n      * Gets the value as a String in the ISO8601 duration format.\n      * <p>\n      * For example, \"P6H3M7S\" represents 6 hours, 3 minutes, 7 seconds.\n+     * <p>\n+     * For more control over the output, see\n+     * {@link org.joda.time.format.PeriodFormatterBuilder PeriodFormatterBuilder}.\n      *\n      * @return the value as an ISO8601 string\n      */\n--- a/JodaTime/src/java/org/joda/time/Duration.java\n+++ b/JodaTime/src/java/org/joda/time/Duration.java\n     /**\n      * Creates a new Duration instance with a different milisecond length.\n      * \n-     * @param length  the new length\n+     * @param duration  the new length of the duration\n      * @return the new duration instance\n      */\n-    public Duration withMillis(long length) {\n-        if (length == getMillis()) {\n+    public Duration withMillis(long duration) {\n+        if (duration == getMillis()) {\n             return this;\n         }\n-        return new Duration(length);\n+        return new Duration(duration);\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestDateMidnight_Basics.suite());\n         suite.addTest(TestDateMidnight_Properties.suite());\n         \n+        suite.addTest(TestDuration_Constructors.suite());\n+        suite.addTest(TestDuration_Basics.suite());\n+        \n+        suite.addTest(TestInterval_Constructors.suite());\n+//        suite.addTest(TestInterval_Basics.suite());\n+        \n         suite.addTest(TestPeriod_Constructors.suite());\n         suite.addTest(TestPeriod_Basics.suite());\n         \n--- a/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Basics.java\n import java.util.Locale;\n import java.util.TimeZone;\n \n-import org.joda.time.chrono.ISOChronology;\n-\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n     }\n \n     //-----------------------------------------------------------------------\n-    public void testGetPeriodType() {\n-        TimePeriod test = new TimePeriod(0L);\n-        assertEquals(PeriodType.getAllType(), test.getPeriodType());\n-    }\n-\n-    public void testGetIsPrecise() {\n-        TimePeriod test = new TimePeriod(123L);\n-        assertEquals(true, test.isPrecise());\n-        test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        assertEquals(false, test.isPrecise());\n-    }\n-\n-    public void testGetMethods() {\n-        TimePeriod test = new TimePeriod(0L);\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(0, test.getHours());\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n+    public void testGetMillis() {\n+        Duration test = new Duration(0L);\n         assertEquals(0, test.getMillis());\n+        \n+        test = new Duration(1234567890L);\n+        assertEquals(1234567890L, test.getMillis());\n     }\n \n     public void testEqualsHashCode() {\n-        TimePeriod test1 = new TimePeriod(123L);\n-        TimePeriod test2 = new TimePeriod(123L);\n+        Duration test1 = new Duration(123L);\n+        Duration test2 = new Duration(123L);\n         assertEquals(true, test1.equals(test2));\n         assertEquals(true, test2.equals(test1));\n         assertEquals(true, test1.equals(test1));\n         assertEquals(true, test1.hashCode() == test1.hashCode());\n         assertEquals(true, test2.hashCode() == test2.hashCode());\n         \n-        TimePeriod test3 = new TimePeriod(321L);\n+        Duration test3 = new Duration(321L);\n         assertEquals(false, test1.equals(test3));\n         assertEquals(false, test2.equals(test3));\n         assertEquals(false, test3.equals(test1));\n         \n         assertEquals(false, test1.equals(\"Hello\"));\n         assertEquals(true, test1.equals(new MockDuration(123L)));\n-        assertEquals(false, test1.equals(new TimePeriod(123L, PeriodType.getDayHourType())));\n-    }\n-    \n-    class MockDuration extends AbstractPeriod {\n+    }\n+    \n+    class MockDuration extends AbstractDuration {\n         public MockDuration(long value) {\n-            super(value, null);\n+            super(value);\n         }\n-        protected PeriodType checkPeriodType(PeriodType type) {\n-            return PeriodType.getAllType();\n-        }\n     }\n \n     public void testCompareTo() {\n-        TimePeriod test1 = new TimePeriod(123L);\n-        TimePeriod test1a = new TimePeriod(123L);\n+        Duration test1 = new Duration(123L);\n+        Duration test1a = new Duration(123L);\n         assertEquals(0, test1.compareTo(test1a));\n         assertEquals(0, test1a.compareTo(test1));\n         assertEquals(0, test1.compareTo(test1));\n         assertEquals(0, test1a.compareTo(test1a));\n         \n-        TimePeriod test2 = new TimePeriod(321L);\n+        Duration test2 = new Duration(321L);\n         assertEquals(-1, test1.compareTo(test2));\n         assertEquals(+1, test2.compareTo(test1));\n-        \n-        TimePeriod test3 = new TimePeriod(321L, PeriodType.getAllType());\n-        assertEquals(-1, test1.compareTo(test3));\n-        assertEquals(+1, test3.compareTo(test1));\n-        assertEquals(0, test3.compareTo(test2));\n         \n         assertEquals(+1, test2.compareTo(new MockDuration(123L)));\n         assertEquals(0, test1.compareTo(new MockDuration(123L)));\n             test1.compareTo(new Long(123L));\n             fail();\n         } catch (ClassCastException ex) {}\n-        try {\n-            test1.compareTo(new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8));\n-            fail();\n-        } catch (IllegalStateException ex) {}\n     }\n \n     public void testIsEqual() {\n-        TimePeriod test1 = new TimePeriod(123L);\n-        TimePeriod test1a = new TimePeriod(123L);\n+        Duration test1 = new Duration(123L);\n+        Duration test1a = new Duration(123L);\n         assertEquals(true, test1.isEqual(test1a));\n         assertEquals(true, test1a.isEqual(test1));\n         assertEquals(true, test1.isEqual(test1));\n         assertEquals(true, test1a.isEqual(test1a));\n         \n-        TimePeriod test2 = new TimePeriod(321L);\n+        Duration test2 = new Duration(321L);\n         assertEquals(false, test1.isEqual(test2));\n         assertEquals(false, test2.isEqual(test1));\n-        \n-        TimePeriod test3 = new TimePeriod(321L, PeriodType.getAllType());\n-        assertEquals(false, test1.isEqual(test3));\n-        assertEquals(false, test3.isEqual(test1));\n-        assertEquals(true, test3.isEqual(test2));\n         \n         assertEquals(false, test2.isEqual(new MockDuration(123L)));\n         assertEquals(true, test1.isEqual(new MockDuration(123L)));\n         assertEquals(false, test1.isEqual(null));\n-        assertEquals(true, new TimePeriod(0L).isEqual(null));\n+        assertEquals(true, new Duration(0L).isEqual(null));\n     }\n     \n     public void testIsBefore() {\n-        TimePeriod test1 = new TimePeriod(123L);\n-        TimePeriod test1a = new TimePeriod(123L);\n+        Duration test1 = new Duration(123L);\n+        Duration test1a = new Duration(123L);\n         assertEquals(false, test1.isShorterThan(test1a));\n         assertEquals(false, test1a.isShorterThan(test1));\n         assertEquals(false, test1.isShorterThan(test1));\n         assertEquals(false, test1a.isShorterThan(test1a));\n         \n-        TimePeriod test2 = new TimePeriod(321L);\n+        Duration test2 = new Duration(321L);\n         assertEquals(true, test1.isShorterThan(test2));\n         assertEquals(false, test2.isShorterThan(test1));\n-        \n-        TimePeriod test3 = new TimePeriod(321L, PeriodType.getAllType());\n-        assertEquals(true, test1.isShorterThan(test3));\n-        assertEquals(false, test3.isShorterThan(test1));\n-        assertEquals(false, test3.isShorterThan(test2));\n         \n         assertEquals(false, test2.isShorterThan(new MockDuration(123L)));\n         assertEquals(false, test1.isShorterThan(new MockDuration(123L)));\n         assertEquals(false, test1.isShorterThan(null));\n-        assertEquals(false, new TimePeriod(0L).isShorterThan(null));\n+        assertEquals(false, new Duration(0L).isShorterThan(null));\n     }\n     \n     public void testIsAfter() {\n-        TimePeriod test1 = new TimePeriod(123L);\n-        TimePeriod test1a = new TimePeriod(123L);\n+        Duration test1 = new Duration(123L);\n+        Duration test1a = new Duration(123L);\n         assertEquals(false, test1.isLongerThan(test1a));\n         assertEquals(false, test1a.isLongerThan(test1));\n         assertEquals(false, test1.isLongerThan(test1));\n         assertEquals(false, test1a.isLongerThan(test1a));\n         \n-        TimePeriod test2 = new TimePeriod(321L);\n+        Duration test2 = new Duration(321L);\n         assertEquals(false, test1.isLongerThan(test2));\n         assertEquals(true, test2.isLongerThan(test1));\n-        \n-        TimePeriod test3 = new TimePeriod(321L, PeriodType.getAllType());\n-        assertEquals(false, test1.isLongerThan(test3));\n-        assertEquals(true, test3.isLongerThan(test1));\n-        assertEquals(false, test3.isLongerThan(test2));\n         \n         assertEquals(true, test2.isLongerThan(new MockDuration(123L)));\n         assertEquals(false, test1.isLongerThan(new MockDuration(123L)));\n         assertEquals(true, test1.isLongerThan(null));\n-        assertEquals(false, new TimePeriod(0L).isLongerThan(null));\n+        assertEquals(false, new Duration(0L).isLongerThan(null));\n     }\n     \n     //-----------------------------------------------------------------------\n     public void testSerialization() throws Exception {\n-        TimePeriod test = new TimePeriod(123L);\n+        Duration test = new Duration(123L);\n         \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         \n         ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n         ObjectInputStream ois = new ObjectInputStream(bais);\n-        TimePeriod result = (TimePeriod) ois.readObject();\n+        Duration result = (Duration) ois.readObject();\n         ois.close();\n         \n         assertEquals(test, result);\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testAddTo1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 1);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, -2);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo3() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        long added = test.addTo(TEST_TIME_NOW, -2);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo4() {\n-        long expected = TEST_TIME_NOW;\n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 0);\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddTo5() {\n-        long expected = TEST_TIME_NOW + 100L;\n-        TimePeriod test = new TimePeriod(100L);\n-        long added = test.addTo(TEST_TIME_NOW, 1);\n-        assertEquals(expected, added);\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddToWithChronology1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        long added = test.addTo(TEST_TIME_NOW, 1, ISOChronology.getInstance());\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddToWithChronology2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        long added = test.addTo(TEST_TIME_NOW, -2, ISOChronology.getInstance());  // local specified so use it\n-        assertEquals(expected, added);\n-    }\n-    \n-    public void testAddToWithChronology3() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        long added = test.addTo(TEST_TIME_NOW, -2, null);  // no chrono specified so drop back to duration (UTC)\n-        assertEquals(expected, added);\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddToRI1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        Instant added = test.addTo(new Instant(), 1);  // Instant has no time zone, uses duration's zone (local)\n-        assertEquals(expected, added.getMillis());\n-    }\n-    \n-    public void testAddToRI2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        Instant added = test.addTo(new Instant(), -2);  // Instant has no time zone, uses duration's zone (UTC)\n-        assertEquals(expected, added.getMillis());\n-    }\n-    \n-    public void testAddToRI3() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        Instant added = test.addTo(new DateTime(), -2);  // DateTime has local time zone\n-        assertEquals(expected, added.getMillis());\n-    }\n-    \n-    public void testAddToRI4() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstanceUTC().years().add(expected, -2);\n-        expected = ISOChronology.getInstanceUTC().months().add(expected, -4);\n-        expected = ISOChronology.getInstanceUTC().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstanceUTC().days().add(expected, -8);\n-        expected = ISOChronology.getInstanceUTC().hours().add(expected, -10);\n-        expected = ISOChronology.getInstanceUTC().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstanceUTC().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstanceUTC().millis().add(expected, -16);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        Instant added = test.addTo(null, -2);  // null has no time zone, uses duration's zone (UTC)\n-        assertEquals(expected, added.getMillis());\n-    }\n-    \n-    //-----------------------------------------------------------------------\n-    public void testAddIntoRWI1() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, 1);\n-        expected = ISOChronology.getInstance().months().add(expected, 2);\n-        expected = ISOChronology.getInstance().weeks().add(expected, 3);\n-        expected = ISOChronology.getInstance().days().add(expected, 4);\n-        expected = ISOChronology.getInstance().hours().add(expected, 5);\n-        expected = ISOChronology.getInstance().minutes().add(expected, 6);\n-        expected = ISOChronology.getInstance().seconds().add(expected, 7);\n-        expected = ISOChronology.getInstance().millis().add(expected, 8);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        MutableDateTime mdt = new MutableDateTime();\n-        test.addInto(mdt, 1);\n-        assertEquals(expected, mdt.getMillis());\n-    }\n-    \n-    public void testAddIntoRWI2() {\n-        long expected = TEST_TIME_NOW;\n-        expected = ISOChronology.getInstance().years().add(expected, -2);\n-        expected = ISOChronology.getInstance().months().add(expected, -4);\n-        expected = ISOChronology.getInstance().weeks().add(expected, -6);\n-        expected = ISOChronology.getInstance().days().add(expected, -8);\n-        expected = ISOChronology.getInstance().hours().add(expected, -10);\n-        expected = ISOChronology.getInstance().minutes().add(expected, -12);\n-        expected = ISOChronology.getInstance().seconds().add(expected, -14);\n-        expected = ISOChronology.getInstance().millis().add(expected, -16);\n-        \n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType(ISOChronology.getInstanceUTC()));\n-        MutableDateTime mdt = new MutableDateTime();\n-        test.addInto(mdt, -2);  // MutableDateTime has a chronology, use it\n-        assertEquals(expected, mdt.getMillis());\n-    }\n-    \n-    public void testAddIntoRWI3() {\n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n-        try {\n-            test.addInto(null, 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-    \n-    //-----------------------------------------------------------------------\n     public void testToString() {\n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        long length = (365 + 2 * 30 + 3 * 7 + 4) * DateTimeConstants.MILLIS_PER_DAY +\n+            5 * DateTimeConstants.MILLIS_PER_HOUR +\n+            6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        Duration test = new Duration(length);\n         assertEquals(\"P1Y2M3W4DT5H6M7.008S\", test.toString());\n         \n-        test = new TimePeriod(0, 0, 0, 0, 0, 0, 0, 0);\n+        test = new Duration(0L);\n         assertEquals(\"PT0S\", test.toString());\n         \n-        test = new TimePeriod(12345L);\n+        test = new Duration(12345L);\n         assertEquals(\"PT12.345S\", test.toString());\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testToTimePeriod() {\n-        TimePeriod test = new TimePeriod(123L);\n-        TimePeriod result = test.toTimePeriod();\n+    public void testToDuration() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.toDuration();\n         assertSame(test, result);\n     }\n \n-    public void testToMutableTimePeriod() {\n-        TimePeriod test = new TimePeriod(123L);\n-        MutablePeriod result = test.toMutableTimePeriod();\n-        assertEquals(test, result);\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testToDurationMillis() {\n-        TimePeriod test = new TimePeriod(123L);\n-        assertEquals(123L, test.toDurationMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testWithPeriodTypeUsingTotalMillis1() {\n-        TimePeriod test = new TimePeriod(123L);\n-        TimePeriod result = test.withPeriodTypeUsingTotalMillis(PeriodType.getAllType());\n-        assertSame(test, result);\n-    }\n-\n-    public void testWithPeriodTypeUsingTotalMillis2() {\n-        TimePeriod test = new TimePeriod(3123L);\n-        TimePeriod result = test.withPeriodTypeUsingTotalMillis(PeriodType.getDayHourType());\n-        assertEquals(3, result.getSeconds());\n-        assertEquals(123, result.getMillis());\n-        assertEquals(3123L, result.getTotalMillis());\n-        assertEquals(PeriodType.getDayHourType(), result.getPeriodType());\n-    }\n-\n-    public void testWithPeriodTypeUsingTotalMillis3() {\n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType());\n-        try {\n-            test.withPeriodTypeUsingTotalMillis(PeriodType.getDayHourType());\n-            fail();\n-        } catch (IllegalStateException ex) {}\n-    }\n-\n-    public void testWithPeriodTypeUsingTotalMillis4() {\n-        TimePeriod test = new TimePeriod(3123L);\n-        TimePeriod result = test.withPeriodTypeUsingTotalMillis(null);\n-        assertEquals(3, result.getSeconds());\n-        assertEquals(123, result.getMillis());\n-        assertEquals(3123L, result.getTotalMillis());\n+    //-----------------------------------------------------------------------\n+    public void testToPeriod1() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        Period result = test.toPeriod();\n         assertEquals(PeriodType.getAllType(), result.getPeriodType());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testWithPeriodTypeUsingFields1() {\n-        TimePeriod test = new TimePeriod(123L);\n-        TimePeriod result = test.withPeriodTypeUsingFields(PeriodType.getAllType());\n-        assertSame(test, result);\n-    }\n-\n-    public void testWithPeriodTypeUsingFields2() {\n-        TimePeriod test = new TimePeriod(3123L);\n-        TimePeriod result = test.withPeriodTypeUsingFields(PeriodType.getDayHourType());\n-        assertEquals(3, result.getSeconds());\n-        assertEquals(123, result.getMillis());\n-        assertEquals(3123L, result.getTotalMillis());\n-        assertEquals(PeriodType.getDayHourType(), result.getPeriodType());\n-    }\n-\n-    public void testWithPeriodTypeUsingFields3() {\n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getAllType());\n-        try {\n-            test.withPeriodTypeUsingFields(PeriodType.getDayHourType());\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    public void testWithPeriodTypeUsingFields4() {\n-        TimePeriod test = new TimePeriod(3123L);\n-        TimePeriod result = test.withPeriodTypeUsingFields(null);\n-        assertEquals(3, result.getSeconds());\n-        assertEquals(123, result.getMillis());\n-        assertEquals(3123L, result.getTotalMillis());\n+        // only time fields are precise in AllType\n+        assertEquals(0, result.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(0, result.getDays());\n+        assertEquals((450 * 24) + 5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+        assertEquals(true, result.isPrecise());\n+        assertEquals(length, result.toDurationMillis());\n+    }\n+\n+    public void testToPeriod_PeriodType1() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        Period result = test.toPeriod(null);\n         assertEquals(PeriodType.getAllType(), result.getPeriodType());\n-    }\n-\n-    public void testWithPeriodTypeUsingFields5() {\n-        TimePeriod test = new TimePeriod(1, 2, 0, 4, 5, 6, 7, 8, PeriodType.getAllType());\n-        TimePeriod result = test.withPeriodTypeUsingFields(PeriodType.getYearMonthType());\n-        assertEquals(PeriodType.getYearMonthType(), result.getPeriodType());\n+        // only time fields are precise in AllType\n+        assertEquals(0, result.getYears());  // (4 + (3 * 7) + (2 * 30) + 365) == 450\n+        assertEquals(0, result.getMonths());\n+        assertEquals(0, result.getWeeks());\n+        assertEquals(0, result.getDays());\n+        assertEquals((450 * 24) + 5, result.getHours());\n+        assertEquals(6, result.getMinutes());\n+        assertEquals(7, result.getSeconds());\n+        assertEquals(8, result.getMillis());\n+        assertEquals(true, result.isPrecise());\n+        assertEquals(length, result.toDurationMillis());\n+    }\n+\n+    public void testToPeriod_PeriodType2() {\n+        long length =\n+            (4L + (3L * 7L) + (2L * 30L) + 365L) * DateTimeConstants.MILLIS_PER_DAY +\n+            5L * DateTimeConstants.MILLIS_PER_HOUR +\n+            6L * DateTimeConstants.MILLIS_PER_MINUTE +\n+            7L * DateTimeConstants.MILLIS_PER_SECOND + 8L;\n+        Duration test = new Duration(length);\n+        Period result = test.toPeriod(PeriodType.getPreciseAllType());\n+        assertEquals(PeriodType.getPreciseAllType(), result.getPeriodType());\n+        // only time fields are precise in AllType\n         assertEquals(1, result.getYears());\n         assertEquals(2, result.getMonths());\n-        assertEquals(0, result.getWeeks());\n+        assertEquals(3, result.getWeeks());\n         assertEquals(4, result.getDays());\n         assertEquals(5, result.getHours());\n         assertEquals(6, result.getMinutes());\n         assertEquals(7, result.getSeconds());\n         assertEquals(8, result.getMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testWithFieldsNormalized1() {\n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 61, 8, PeriodType.getPreciseAllType());\n-        TimePeriod result = test.withFieldsNormalized();\n-        assertEquals(1, result.getYears());\n-        assertEquals(2, result.getMonths());\n-        assertEquals(3, result.getWeeks());\n-        assertEquals(4, result.getDays());\n-        assertEquals(5, result.getHours());\n-        assertEquals(7, result.getMinutes());\n-        assertEquals(1, result.getSeconds());\n-        assertEquals(8, result.getMillis());\n-    }\n-\n-    public void testWithFieldsNormalized2() {\n-        TimePeriod test = new TimePeriod(1, 2, 3, 4, 5, 6, 61, 8, PeriodType.getAllType());\n-        try {\n-            test.withFieldsNormalized();\n-            fail();\n-        } catch (IllegalStateException ex) {}\n+        assertEquals(true, result.isPrecise());\n+        assertEquals(length, result.toDurationMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithMillis1() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withMillis(123L);\n+        assertSame(test, result);\n+    }\n+\n+    public void testWithMillis2() {\n+        Duration test = new Duration(123L);\n+        Duration result = test.withMillis(1234567890L);\n+        assertEquals(1234567890L, result.getMillis());\n     }\n \n     //-----------------------------------------------------------------------\n     public void testImmutable() {\n         MockChangeDuration test = new MockChangeDuration(111L);\n         test.testSetDuration_RD();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetDuration_ints();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetTotalMillis_1();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetTotalMillis_2();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetYears();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetMonths();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetWeeks();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetDays();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetHours();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetMinutes();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testSetSeconds();\n-        assertEquals(111L, test.getTotalMillis());\n+        assertEquals(111L, test.getMillis());\n         \n         test = new MockChangeDuration(111L);\n         test.testSetMillis();\n-        assertEquals(111L, test.getTotalMillis());\n-        \n-        test = new MockChangeDuration(111L);\n-        test.testNormalize();\n-        assertEquals(111L, test.getTotalMillis());\n-    }\n-    \n-    static class MockChangeDuration extends TimePeriod {\n+        assertEquals(111L, test.getMillis());\n+    }\n+    \n+    static class MockChangeDuration extends Duration {\n         MockChangeDuration(long duration) {\n             super(duration);\n         }\n         public void testSetDuration_RD() {\n             setDuration(null);\n         }\n-        public void testSetDuration_ints() {\n-            setDuration(1, 2, 3, 4, 5, 6, 7, 8);\n+        public void testSetMillis() {\n+            setMillis(0L);\n         }\n-        public void testSetTotalMillis_1() {\n-            setTotalMillis(123L);\n-        }\n-        public void testSetTotalMillis_2() {\n-            setTotalMillis(123L, 321L);\n-        }\n-        public void testSetYears() {\n-            setYears(1);\n-        }\n-        public void testSetMonths() {\n-            setMonths(1);\n-        }\n-        public void testSetWeeks() {\n-            setWeeks(1);\n-        }\n-        public void testSetDays() {\n-            setDays(1);\n-        }\n-        public void testSetHours() {\n-            setHours(1);\n-        }\n-        public void testSetMinutes() {\n-            setMinutes(1);\n-        }\n-        public void testSetSeconds() {\n-            setSeconds(1);\n-        }\n-        public void testSetMillis() {\n-            setMillis(1);\n-        }\n-        public void testNormalize() {\n-            super.normalize();\n-        }\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDuration_Constructors.java\n      * Test constructor ()\n      */\n     public void testZERO() throws Throwable {\n-        MillisDuration test = MillisDuration.ZERO;\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(0, test.getHours());\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n+        Duration test = Duration.ZERO;\n         assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(0, test.getTotalMillis());\n     }\n \n     //-----------------------------------------------------------------------\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        MillisDuration test = new MillisDuration(length);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(4, test.getDays());\n-        assertEquals(5, test.getHours());\n-        assertEquals(6, test.getMinutes());\n-        assertEquals(7, test.getSeconds());\n-        assertEquals(8, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(length, test.getTotalMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testConstructor_long_PeriodType1() throws Throwable {\n+        Duration test = new Duration(length);\n+        assertEquals(length, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_long_long1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration test = new Duration(dt1.getMillis(), dt2.getMillis());\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RI1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Duration test = new Duration(dt1, dt2);\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI2() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        Duration test = new Duration(dt1, dt2);\n+        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI3() throws Throwable {\n+        DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        Duration test = new Duration(dt1, dt2);\n+        assertEquals(TEST_TIME_NOW - dt1.getMillis(), test.getMillis());\n+    }\n+\n+    public void testConstructor_RI_RI4() throws Throwable {\n+        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n+        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n+        Duration test = new Duration(dt1, dt2);\n+        assertEquals(0L, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object1() throws Throwable {\n+        Duration test = new Duration(\"P1Y2M3D\");\n+        assertEquals(\n+            (365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        Duration test = new Duration((Object) null);\n+        assertEquals(0L, test.getMillis());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n         long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        MillisDuration test = new MillisDuration(length, null);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(4, test.getDays());\n-        assertEquals(5, test.getHours());\n-        assertEquals(6, test.getMinutes());\n-        assertEquals(7, test.getSeconds());\n-        assertEquals(8, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(length, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_long_PeriodType2() throws Throwable {\n-        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n-                5 * DateTimeConstants.MILLIS_PER_HOUR +\n-                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n-                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        MillisDuration test = new MillisDuration(length, PeriodType.getMillisType());\n-        assertEquals(PeriodType.getMillisType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(0, test.getHours());\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n+        Long base = new Long(length);\n+        Duration test = new Duration(base);\n         assertEquals(length, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(length, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_long_PeriodType3() throws Throwable {\n-        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n-                5 * DateTimeConstants.MILLIS_PER_HOUR +\n-                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n-                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        MillisDuration test = new MillisDuration(length, PeriodType.getPreciseDayHourType());\n-        assertEquals(PeriodType.getPreciseDayHourType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(4, test.getDays());\n-        assertEquals(5, test.getHours());\n-        assertEquals(6, test.getMinutes());\n-        assertEquals(7, test.getSeconds());\n-        assertEquals(8, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(length, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_long_PeriodType4() throws Throwable {\n-        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n-                5 * DateTimeConstants.MILLIS_PER_HOUR +\n-                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n-                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n-        MillisDuration test = new MillisDuration(length, PeriodType.getPreciseAllType().withMillisRemoved());\n-        assertEquals(PeriodType.getPreciseAllType().withMillisRemoved(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(4, test.getDays());\n-        assertEquals(5, test.getHours());\n-        assertEquals(6, test.getMinutes());\n-        assertEquals(7, test.getSeconds());\n-        assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(length - 8, test.getTotalMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Test constructor (4ints)\n-     */\n-    public void testConstructor_4int1() throws Throwable {\n-        MillisDuration test = new MillisDuration(5, 6, 7, 8);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(5, test.getHours());\n-        assertEquals(6, test.getMinutes());\n-        assertEquals(7, test.getSeconds());\n-        assertEquals(8, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(\n-            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n-            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Test constructor (8ints)\n-     */\n-    public void testConstructor_8int1() throws Throwable {\n-        MillisDuration test = new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(2, test.getMonths());\n-        assertEquals(3, test.getWeeks());\n-        assertEquals(4, test.getDays());\n-        assertEquals(5, test.getHours());\n-        assertEquals(6, test.getMinutes());\n-        assertEquals(7, test.getSeconds());\n-        assertEquals(8, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(\n-            (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n-            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n-            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Test constructor (8ints)\n-     */\n-    public void testConstructor_8int__PeriodType1() throws Throwable {\n-        MillisDuration test = new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8, null);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(2, test.getMonths());\n-        assertEquals(3, test.getWeeks());\n-        assertEquals(4, test.getDays());\n-        assertEquals(5, test.getHours());\n-        assertEquals(6, test.getMinutes());\n-        assertEquals(7, test.getSeconds());\n-        assertEquals(8, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(\n-            (365L + 2L * 30L + 3L * 7L + 4L) * DateTimeConstants.MILLIS_PER_DAY +\n-            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n-            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_8int__PeriodType2() throws Throwable {\n-        MillisDuration test = new MillisDuration(0, 0, 0, 0, 5, 6, 7, 8, PeriodType.getPreciseDayHourType());\n-        assertEquals(PeriodType.getPreciseDayHourType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(5, test.getHours());\n-        assertEquals(6, test.getMinutes());\n-        assertEquals(7, test.getSeconds());\n-        assertEquals(8, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(\n-            5 * DateTimeConstants.MILLIS_PER_HOUR + 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n-            7 * DateTimeConstants.MILLIS_PER_SECOND + 8, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_8int__PeriodType3() throws Throwable {\n-        try {\n-            new MillisDuration(1, 2, 3, 4, 5, 6, 7, 8, PeriodType.getDayHourType());\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testConstructor_long_long1() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis());\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_long_long2() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis());\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(1, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testConstructor_long_long_PeriodType1() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), null);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_long_long_PeriodType2() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), PeriodType.getPreciseDayHourType());\n-        assertEquals(PeriodType.getPreciseDayHourType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(31, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_long_long_PeriodType3() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1.getMillis(), dt2.getMillis(), PeriodType.getPreciseAllType().withMillisRemoved());\n-        assertEquals(PeriodType.getPreciseAllType().withMillisRemoved(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(1, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.getTotalMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testConstructor_RI_RI1() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1, dt2);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_RI_RI2() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1, dt2);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(1, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_RI_RI3() throws Throwable {\n-        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n-        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1, dt2);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(3, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(1, test.getWeeks());\n-        assertEquals(2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years\n-        assertEquals(0, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_RI_RI4() throws Throwable {\n-        DateTime dt1 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n-        MillisDuration test = new MillisDuration(dt1, dt2);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(-3, test.getYears());\n-        assertEquals(-1, test.getMonths());\n-        assertEquals(-1, test.getWeeks());\n-        assertEquals(-2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years\n-        assertEquals(0, test.getHours());\n-        assertEquals(-1, test.getMinutes());\n-        assertEquals(-1, test.getSeconds());\n-        assertEquals(-1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(TEST_TIME_NOW - dt1.getMillis(), test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_RI_RI5() throws Throwable {\n-        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n-        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n-        MillisDuration test = new MillisDuration(dt1, dt2);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(0, test.getHours());\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n-        assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(0L, test.getTotalMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    public void testConstructor_RI_RI_PeriodType1() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1, dt2, null);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_RI_RI_PeriodType2() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2004, 7, 10, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1, dt2, PeriodType.getPreciseDayHourType());\n-        assertEquals(PeriodType.getPreciseDayHourType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(31, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_RI_RI_PeriodType3() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1, dt2, PeriodType.getPreciseAllType().withMillisRemoved());\n-        assertEquals(PeriodType.getPreciseAllType().withMillisRemoved(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(1, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis() - 1, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_RI_RI_PeriodType4() throws Throwable {\n-        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n-        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n-        MillisDuration test = new MillisDuration(dt1, dt2, PeriodType.getPreciseAllType());\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(3, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(1, test.getWeeks());\n-        assertEquals(2, test.getDays());  // one more due to 2004 leap year and fixed 365 day years\n-        assertEquals(0, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_RI_RI_PeriodType5() throws Throwable {\n-        DateTime dt1 = null;  // 2002-06-09T01:00+01:00\n-        DateTime dt2 = null;  // 2002-06-09T01:00+01:00\n-        MillisDuration test = new MillisDuration(dt1, dt2, PeriodType.getPreciseAllType());\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(0, test.getHours());\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n-        assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(0L, test.getTotalMillis());\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Test constructor (Object)\n-     */\n-    public void testConstructor_Object1() throws Throwable {\n-        MillisDuration test = new MillisDuration(\"P1Y2M3D\");\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(2, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(3, test.getDays());\n-        assertEquals(0, test.getHours());\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n-        assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(\n-            (365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_Object2() throws Throwable {\n-        MillisDuration test = new MillisDuration((Object) null);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(0, test.getHours());\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n-        assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(0, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_Object3() throws Throwable {\n-        MillisDuration base = new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getPreciseDayHourType());\n-        MillisDuration test = new MillisDuration(base);\n-        assertEquals(PeriodType.getPreciseDayHourType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(2, test.getMinutes());\n-        assertEquals(3, test.getSeconds());\n-        assertEquals(4, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n-            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());\n     }\n \n     public void testConstructor_Object4() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        MillisDuration base = new MillisDuration(dt1, dt2);  // AllType and precise\n-        MillisDuration test = new MillisDuration(base);\n-        assertEquals(PeriodType.getPreciseAllType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(1, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(1, test.getMinutes());\n-        assertEquals(1, test.getSeconds());\n-        assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getTotalMillis());\n+        Duration base = new Duration(dt1, dt2);\n+        Duration test = new Duration(base);\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());\n     }\n \n     public void testConstructor_Object5() throws Throwable {\n-        MillisDuration base = new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getDayHourType());\n-        try {\n-            new MillisDuration(base);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    /**\n-     * Test constructor (Object)\n-     */\n-    public void testConstructor_Object_PeriodType1() throws Throwable {\n-        MillisDuration test = new MillisDuration(\"P1Y2M3D\", PeriodType.getPreciseYearMonthType());\n-        assertEquals(PeriodType.getPreciseYearMonthType(), test.getPeriodType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(2, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(3, test.getDays());\n-        assertEquals(0, test.getHours());\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n-        assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(\n-            (365L + 2L * 30L + 3L) * DateTimeConstants.MILLIS_PER_DAY, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_Object_PeriodType2() throws Throwable {\n-        MillisDuration test = new MillisDuration((Object) null, PeriodType.getPreciseYearMonthType());\n-        assertEquals(PeriodType.getPreciseYearMonthType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(0, test.getHours());\n-        assertEquals(0, test.getMinutes());\n-        assertEquals(0, test.getSeconds());\n-        assertEquals(0, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(0, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_Object_PeriodType3() throws Throwable {\n-        MillisDuration test = new MillisDuration(\n-            new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getPreciseDayHourType()), PeriodType.getPreciseYearMonthType());\n-        assertEquals(PeriodType.getPreciseYearMonthType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(2, test.getMinutes());\n-        assertEquals(3, test.getSeconds());\n-        assertEquals(4, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n-            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());\n-    }\n-\n-    public void testConstructor_Object_PeriodType4() throws Throwable {\n-        MillisDuration test = new MillisDuration(new MillisDuration(0, 0, 0, 0, 1, 2, 3, 4, PeriodType.getPreciseDayHourType()), null);\n-        assertEquals(PeriodType.getPreciseDayHourType(), test.getPeriodType());\n-        assertEquals(0, test.getYears());\n-        assertEquals(0, test.getMonths());\n-        assertEquals(0, test.getWeeks());\n-        assertEquals(0, test.getDays());\n-        assertEquals(1, test.getHours());\n-        assertEquals(2, test.getMinutes());\n-        assertEquals(3, test.getSeconds());\n-        assertEquals(4, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(DateTimeConstants.MILLIS_PER_HOUR + 2 * DateTimeConstants.MILLIS_PER_MINUTE +\n-            3 * DateTimeConstants.MILLIS_PER_SECOND + 4, test.getTotalMillis());\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        Duration test = new Duration(base);\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());\n+    }\n+\n+    public void testConstructor_Object6() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Period base = new Period(dt2.getMillis() - dt1.getMillis());  // precise\n+        Duration test = new Duration(base);\n+        assertEquals(dt2.getMillis() - dt1.getMillis(), test.getMillis());\n     }\n \n }\n--- a/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestInterval_Constructors.java\n         DateTime dt = new DateTime(TEST_TIME_NOW);\n         Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n         long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP2() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().days().add(result, 3);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+        assertSame(dt, test.getStartInstant());\n+    }\n+\n+    public void testConstructor_RI_RP3() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getUTCAllType());\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, 6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, 3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, 1);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+        assertSame(dt, test.getStartInstant());\n+    }\n+\n+    public void testConstructor_RI_RP4() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        result = ISOChronology.getInstance().millis().add(result, 23);\n+        \n+        Interval test = new Interval(dt, dur);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP5() throws Throwable {\n+        Interval test = new Interval((ReadableInstant) null, (ReadablePeriod) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP6() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Interval test = new Interval(dt, (ReadablePeriod) null);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RP7() throws Throwable {\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n         result = ISOChronology.getInstance().monthOfYear().add(result, 6);\n         result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n         \n+        Interval test = new Interval((ReadableInstant) null, dur);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(result, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RP_RI1() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI2() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().days().add(result, -3);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+        assertSame(dt, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_RP_RI3() throws Throwable {\n+        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n+        Period dur = new Period(0, 6, 0, 3, 1, 0, 0, 0, PeriodType.getUTCAllType());\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstanceUTC().months().add(result, -6);\n+        result = ISOChronology.getInstanceUTC().days().add(result, -3);\n+        result = ISOChronology.getInstanceUTC().hours().add(result, -1);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+        assertSame(dt, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_RP_RI4() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        result = ISOChronology.getInstance().millis().add(result, -23);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI5() throws Throwable {\n+        Interval test = new Interval((ReadablePeriod) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI6() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Interval test = new Interval((ReadablePeriod) null, dt);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RP_RI7() throws Throwable {\n+        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, -6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, -1);\n+        \n+        Interval test = new Interval(dur, (ReadableInstant) null);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RI_RD1() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, 6);\n+        result = ISOChronology.getInstance().hours().add(result, 1);\n+        \n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(result - TEST_TIME_NOW);\n+        \n         Interval test = new Interval(dt, dur);\n         assertEquals(dt.getMillis(), test.getStartMillis());\n         assertEquals(result, test.getEndMillis());\n     }\n \n-    public void testConstructor_RI_RP2() throws Throwable {\n-        Instant dt = new Instant(new DateTime(TEST_TIME_NOW));\n-        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n-        long result = TEST_TIME_NOW;\n-        result = ISOChronology.getInstanceUTC().monthOfYear().add(result, 6);\n-        result = ISOChronology.getInstanceUTC().hourOfDay().add(result, 1);\n-        \n-        Interval test = new Interval(dt, dur);\n-        assertEquals(dt.getMillis(), test.getStartMillis());\n-        assertEquals(result, test.getEndMillis());\n-        assertEquals(true, dt == test.getStartInstant());\n-    }\n-\n-    public void testConstructor_RI_RP3() throws Throwable {\n-        DateTime dt = new DateTime(TEST_TIME_NOW);\n-        Period dur = new Period(1 * DateTimeConstants.MILLIS_PER_HOUR + 23L);\n-        long result = TEST_TIME_NOW;\n+    public void testConstructor_RI_RD2() throws Throwable {\n+        Interval test = new Interval((ReadableInstant) null, (ReadableDuration) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Interval test = new Interval(dt, (ReadableDuration) null);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RI_RD4() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, 6);\n         result = ISOChronology.getInstance().hourOfDay().add(result, 1);\n-        result = ISOChronology.getInstance().millisOfSecond().add(result, 23);\n-        \n-        Interval test = new Interval(dt, dur);\n-        assertEquals(dt.getMillis(), test.getStartMillis());\n-        assertEquals(result, test.getEndMillis());\n-    }\n-\n-    public void testConstructor_RI_RP4() throws Throwable {\n-        Interval test = new Interval((ReadableInstant) null, (ReadableDuration) null);\n-        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n-        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n-    }\n-\n-    public void testConstructor_RI_RP5() throws Throwable {\n-        DateTime dt = new DateTime(TEST_TIME_NOW);\n-        Interval test = new Interval(dt, (ReadableDuration) null);\n-        assertEquals(dt.getMillis(), test.getStartMillis());\n-        assertEquals(dt.getMillis(), test.getEndMillis());\n-    }\n-\n-    public void testConstructor_RI_RP6() throws Throwable {\n-        Period dur = new Period(0, 6, 0, 0, 1, 0, 0, 0);\n-        long result = TEST_TIME_NOW;\n-        result = ISOChronology.getInstanceUTC().monthOfYear().add(result, 6);\n-        result = ISOChronology.getInstanceUTC().hourOfDay().add(result, 1);\n+        \n+        Duration dur = new Duration(result - TEST_TIME_NOW);\n         \n         Interval test = new Interval((ReadableInstant) null, dur);\n         assertEquals(TEST_TIME_NOW, test.getStartMillis());\n         assertEquals(result, test.getEndMillis());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testConstructor_RD_RI1() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().months().add(result, -6);\n+        result = ISOChronology.getInstance().hours().add(result, -1);\n+        \n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Duration dur = new Duration(TEST_TIME_NOW - result);\n+        \n+        Interval test = new Interval(dur, dt);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI2() throws Throwable {\n+        Interval test = new Interval((ReadableDuration) null, (ReadableInstant) null);\n+        assertEquals(TEST_TIME_NOW, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI3() throws Throwable {\n+        DateTime dt = new DateTime(TEST_TIME_NOW);\n+        Interval test = new Interval((ReadableDuration) null, dt);\n+        assertEquals(dt.getMillis(), test.getStartMillis());\n+        assertEquals(dt.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_RD_RI4() throws Throwable {\n+        long result = TEST_TIME_NOW;\n+        result = ISOChronology.getInstance().monthOfYear().add(result, -6);\n+        result = ISOChronology.getInstance().hourOfDay().add(result, -1);\n+        \n+        Duration dur = new Duration(TEST_TIME_NOW - result);\n+        \n+        Interval test = new Interval(dur, (ReadableInstant) null);\n+        assertEquals(result, test.getStartMillis());\n+        assertEquals(TEST_TIME_NOW, test.getEndMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor_Object1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval test = new Interval(dt1.toString() + '/' + dt2.toString());\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+    }\n+\n+    public void testConstructor_Object2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        Interval base = new Interval(dt1, dt2);\n+        Duration dur = base.getDuration();\n+        Instant start = base.getStartInstant();\n+        Instant end = base.getEndInstant();\n+        \n+        Interval test = new Interval(base);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertSame(dur, test.getDuration());\n+        assertSame(start, test.getStartInstant());\n+        assertSame(end, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_Object3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n+        MutableInterval base = new MutableInterval(dt1, dt2);\n+        Duration dur = base.getDuration();\n+        Instant start = base.getStartInstant();\n+        Instant end = base.getEndInstant();\n+        \n+        Interval test = new Interval(base);\n+        assertEquals(dt1.getMillis(), test.getStartMillis());\n+        assertEquals(dt2.getMillis(), test.getEndMillis());\n+        assertSame(dur, test.getDuration());\n+        assertSame(start, test.getStartInstant());\n+        assertSame(end, test.getEndInstant());\n+    }\n+\n+    public void testConstructor_Object4() throws Throwable {\n+        MockInterval base = new MockInterval();\n+        Interval test = new Interval(base);\n+        assertEquals(base.getStartMillis(), test.getStartMillis());\n+        assertEquals(base.getEndMillis(), test.getEndMillis());\n+    }\n+\n+    class MockInterval implements ReadableInterval {\n+        public long getStartMillis() {\n+            return 1234L;\n+        }\n+        public Instant getStartInstant() {\n+            return new Instant(1234L);\n+        }\n+        public long getEndMillis() {\n+            return 5678L;\n+        }\n+        public Instant getEndInstant() {\n+            return new Instant(5678L);\n+        }\n+        public long getDurationMillis() {\n+            return (5678L - 1234L);\n+        }\n+        public Duration getDuration() {\n+            return new Duration(5678L - 1234L);\n+        }\n+        public boolean contains(long millisInstant) {\n+            return false;\n+        }\n+        public boolean contains(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean contains(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean overlaps(ReadableInterval interval) {\n+            return false;\n+        }\n+        public boolean isBefore(long millisInstant) {\n+            return false;\n+        }\n+        public boolean isBefore(ReadableInstant instant) {\n+            return false;\n+        }\n+        public boolean isAfter(long millisInstant) {\n+            return false;\n+        }\n+        public boolean isAfter(ReadableInstant instant) {\n+            return false;\n+        }\n+        public Interval toInterval() {\n+            return null;\n+        }\n+        public MutableInterval toMutableInterval() {\n+            return null;\n+        }\n+        public Period toPeriod() {\n+            return null;\n+        }\n+        public Period toPeriod(PeriodType type) {\n+            return null;\n+        }\n+    }\n+\n }", "timestamp": 1091879714, "metainfo": ""}