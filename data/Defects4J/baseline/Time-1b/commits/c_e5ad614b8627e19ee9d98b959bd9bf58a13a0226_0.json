{"sha": "e5ad614b8627e19ee9d98b959bd9bf58a13a0226", "log": "Added more tests.   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/TestGJChronology.java\n import org.joda.time.DateTimeConstants;\n import org.joda.time.DateTimeUtils;\n import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationField;\n+import org.joda.time.DurationFieldType;\n import org.joda.time.Instant;\n \n /**\n         assertEquals(true, GJChronology.getInstance().millisOfSecond().isSupported());\n     }\n \n+    public void testIllegalDates() {\n+        try {\n+            new DateTime(1582, 10, 5, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC));\n+            fail(\"Constructed illegal date\");\n+        } catch (IllegalArgumentException e) { /* good */ }\n+\n+        try {\n+            new DateTime(1582, 10, 14, 0, 0, 0, 0, GJChronology.getInstance(DateTimeZone.UTC));\n+            fail(\"Constructed illegal date\");\n+        } catch (IllegalArgumentException e) { /* good */ }\n+    }\n+\n+    public void testParseEquivalence() {\n+        testParse(\"1581-01-01T01:23:45.678\", 1581, 1, 1, 1, 23, 45, 678);\n+        testParse(\"1581-06-30\", 1581, 6, 30, 0, 0, 0, 0);\n+        testParse(\"1582-01-01T01:23:45.678\", 1582, 1, 1, 1, 23, 45, 678);\n+        testParse(\"1582-06-30T01:23:45.678\", 1582, 6, 30, 1, 23, 45, 678);\n+        testParse(\"1582-10-04\", 1582, 10, 4, 0, 0, 0, 0);\n+        testParse(\"1582-10-15\", 1582, 10, 15, 0, 0, 0, 0);\n+        testParse(\"1582-12-31\", 1582, 12, 31, 0, 0, 0, 0);\n+        testParse(\"1583-12-31\", 1583, 12, 31, 0, 0, 0, 0);\n+    }\n+\n+    private void testParse(String str,\n+                           int year, int month, int day,\n+                           int hour, int minute, int second, int millis) {\n+        assertEquals(new DateTime(str, GJChronology.getInstance(DateTimeZone.UTC)),\n+                     new DateTime(year, month, day, hour, minute, second, millis,\n+                                  GJChronology.getInstance(DateTimeZone.UTC)));\n+    }\n+\n+    public void testCutoverAddYears() {\n+        testAdd(\"1582-01-01\", DurationFieldType.years(), 1, \"1583-01-01\");\n+        testAdd(\"1582-02-15\", DurationFieldType.years(), 1, \"1583-02-15\");\n+        testAdd(\"1582-02-28\", DurationFieldType.years(), 1, \"1583-02-28\");\n+        testAdd(\"1582-03-01\", DurationFieldType.years(), 1, \"1583-03-01\");\n+        testAdd(\"1582-09-30\", DurationFieldType.years(), 1, \"1583-09-30\");\n+        testAdd(\"1582-10-01\", DurationFieldType.years(), 1, \"1583-10-01\");\n+        testAdd(\"1582-10-04\", DurationFieldType.years(), 1, \"1583-10-04\");\n+        testAdd(\"1582-10-15\", DurationFieldType.years(), 1, \"1583-10-15\");\n+        testAdd(\"1582-10-16\", DurationFieldType.years(), 1, \"1583-10-16\");\n+\n+        // Leap years...\n+        testAdd(\"1580-01-01\", DurationFieldType.years(), 4, \"1584-01-01\");\n+        testAdd(\"1580-02-29\", DurationFieldType.years(), 4, \"1584-02-29\");\n+        testAdd(\"1580-10-01\", DurationFieldType.years(), 4, \"1584-10-01\");\n+        testAdd(\"1580-10-10\", DurationFieldType.years(), 4, \"1584-10-10\");\n+        testAdd(\"1580-10-15\", DurationFieldType.years(), 4, \"1584-10-15\");\n+        testAdd(\"1580-12-31\", DurationFieldType.years(), 4, \"1584-12-31\");\n+    }\n+\n+    public void testCutoverAddWeekyears() {\n+        testAdd(\"1582-W01-1\", DurationFieldType.weekyears(), 1, \"1583-W01-1\");\n+        testAdd(\"1582-W39-1\", DurationFieldType.weekyears(), 1, \"1583-W39-1\");\n+        testAdd(\"1583-W45-1\", DurationFieldType.weekyears(), 1, \"1584-W45-1\");\n+\n+        // This test fails, but I'm not sure if its worth fixing. The date\n+        // falls after the cutover, but in the cutover year. The add operation\n+        // is performed completely within the gregorian calendar, with no\n+        // crossing of the cutover. As a result, no special correction is\n+        // applied. Since the full gregorian year of 1582 has a different week\n+        // numbers than the full julian year of 1582, the week number is off by\n+        // one after the addition.\n+        //\n+        //testAdd(\"1582-W42-1\", DurationFieldType.weekyears(), 1, \"1583-W42-1\");\n+\n+        // Leap years...\n+        testAdd(\"1580-W01-1\", DurationFieldType.weekyears(), 4, \"1584-W01-1\");\n+        testAdd(\"1580-W30-7\", DurationFieldType.weekyears(), 4, \"1584-W30-7\");\n+        testAdd(\"1580-W50-7\", DurationFieldType.weekyears(), 4, \"1584-W50-7\");\n+    }\n+\n+    public void testCutoverAddMonths() {\n+        testAdd(\"1582-01-01\", DurationFieldType.months(), 1, \"1582-02-01\");\n+        testAdd(\"1582-01-01\", DurationFieldType.months(), 6, \"1582-07-01\");\n+        testAdd(\"1582-01-01\", DurationFieldType.months(), 12, \"1583-01-01\");\n+        testAdd(\"1582-11-15\", DurationFieldType.months(), 1, \"1582-12-15\");\n+\n+        testAdd(\"1582-09-04\", DurationFieldType.months(), 2, \"1582-11-04\");\n+        testAdd(\"1582-09-05\", DurationFieldType.months(), 2, \"1582-11-05\");\n+        testAdd(\"1582-09-10\", DurationFieldType.months(), 2, \"1582-11-10\");\n+        testAdd(\"1582-09-15\", DurationFieldType.months(), 2, \"1582-11-15\");\n+\n+\n+        // Leap years...\n+        testAdd(\"1580-01-01\", DurationFieldType.months(), 48, \"1584-01-01\");\n+        testAdd(\"1580-02-29\", DurationFieldType.months(), 48, \"1584-02-29\");\n+        testAdd(\"1580-10-01\", DurationFieldType.months(), 48, \"1584-10-01\");\n+        testAdd(\"1580-10-10\", DurationFieldType.months(), 48, \"1584-10-10\");\n+        testAdd(\"1580-10-15\", DurationFieldType.months(), 48, \"1584-10-15\");\n+        testAdd(\"1580-12-31\", DurationFieldType.months(), 48, \"1584-12-31\");\n+    }\n+\n+    public void testCutoverAddWeeks() {\n+        testAdd(\"1582-01-01\", DurationFieldType.weeks(), 1, \"1582-01-08\");\n+        testAdd(\"1583-01-01\", DurationFieldType.weeks(), 1, \"1583-01-08\");\n+\n+        // Weeks are precise, and so cutover is not ignored.\n+        testAdd(\"1582-10-01\", DurationFieldType.weeks(), 2, \"1582-10-25\");\n+        testAdd(\"1582-W01-1\", DurationFieldType.weeks(), 51, \"1583-W01-1\");\n+    }\n+\n+    public void testCutoverAddDays() {\n+        testAdd(\"1582-10-03\", DurationFieldType.days(), 1, \"1582-10-04\");\n+        testAdd(\"1582-10-04\", DurationFieldType.days(), 1, \"1582-10-15\");\n+        testAdd(\"1582-10-15\", DurationFieldType.days(), 1, \"1582-10-16\");\n+\n+        testAdd(\"1582-09-30\", DurationFieldType.days(), 10, \"1582-10-20\");\n+        testAdd(\"1582-10-04\", DurationFieldType.days(), 10, \"1582-10-24\");\n+        testAdd(\"1582-10-15\", DurationFieldType.days(), 10, \"1582-10-25\");\n+    }\n+\n+    private void testAdd(String start, DurationFieldType type, int amt, String end) {\n+        DateTime dtStart = new DateTime(start, GJChronology.getInstance(DateTimeZone.UTC));\n+        DateTime dtEnd = new DateTime(end, GJChronology.getInstance(DateTimeZone.UTC));\n+        assertEquals(dtEnd, dtStart.withFieldAdded(type, amt));\n+        assertEquals(dtStart, dtEnd.withFieldAdded(type, -amt));\n+\n+        DurationField field = type.getField(GJChronology.getInstance(DateTimeZone.UTC));\n+        int diff = field.getDifference(dtEnd.getMillis(), dtStart.getMillis());\n+        assertEquals(amt, diff);\n+    }\n }", "timestamp": 1108346136, "metainfo": ""}