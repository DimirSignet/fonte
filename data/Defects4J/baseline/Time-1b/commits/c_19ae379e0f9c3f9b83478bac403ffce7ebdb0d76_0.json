{"sha": "19ae379e0f9c3f9b83478bac403ffce7ebdb0d76", "log": "Unify addWrapped and addInField to addWrapField   ", "commit": "\n--- a/JodaTime/src/example/org/joda/example/time/Examples.java\n+++ b/JodaTime/src/example/org/joda/example/time/Examples.java\n         System.out.println(\"Get monthOfYear:      in.getMonthOfYear():      \" + in.getMonthOfYear());\n         System.out.println(\"Get dayOfMonth:       in.getDayOfMonth():       \" + in.getDayOfMonth());\n         System.out.println(\"...\");\n-        System.out.println(\"Property access:      in.dayOfWeek().get():                \" + in.dayOfWeek().get());\n-        System.out.println(\"Day of week as text:  in.dayOfWeek().getAsText():          \" + in.dayOfWeek().getAsText());\n-        System.out.println(\"Day as short text:    in.dayOfWeek().getAsShortText():     \" + in.dayOfWeek().getAsShortText());\n-        System.out.println(\"Day in french:        in.dayOfWeek().getAsText(Locale.FRENCH): \" + in.dayOfWeek().getAsText(Locale.FRENCH));\n-        System.out.println(\"Max allowed value:    in.dayOfWeek().getMaximumValue():    \" + in.dayOfWeek().getMaximumValue());\n-        System.out.println(\"Min allowed value:    in.dayOfWeek().getMinimumValue():    \" + in.dayOfWeek().getMinimumValue());\n-        System.out.println(\"Copy & set to Jan:    in.monthOfYear().setCopy(1):         \" + in.monthOfYear().setCopy(1));\n-        System.out.println(\"Copy & add 14 months: in.monthOfYear().addCopy(14):        \" + in.monthOfYear().addToCopy(14));\n-        System.out.println(\"Add 14 mnths in field:in.monthOfYear().addInFieldCopy(14): \" + in.monthOfYear().addWrappedToCopy(14));\n+        System.out.println(\"Property access:      in.dayOfWeek().get():                   \" + in.dayOfWeek().get());\n+        System.out.println(\"Day of week as text:  in.dayOfWeek().getAsText():             \" + in.dayOfWeek().getAsText());\n+        System.out.println(\"Day as short text:    in.dayOfWeek().getAsShortText():        \" + in.dayOfWeek().getAsShortText());\n+        System.out.println(\"Day in french:        in.dayOfWeek().getAsText(Locale.FRENCH):\" + in.dayOfWeek().getAsText(Locale.FRENCH));\n+        System.out.println(\"Max allowed value:    in.dayOfWeek().getMaximumValue():       \" + in.dayOfWeek().getMaximumValue());\n+        System.out.println(\"Min allowed value:    in.dayOfWeek().getMinimumValue():       \" + in.dayOfWeek().getMinimumValue());\n+        System.out.println(\"Copy & set to Jan:    in.monthOfYear().setCopy(1):            \" + in.monthOfYear().setCopy(1));\n+        System.out.println(\"Copy & add 14 months: in.monthOfYear().addCopy(14):           \" + in.monthOfYear().addToCopy(14));\n+        System.out.println(\"Add 14 mnths in field:in.monthOfYear().addWrapFieldCopy(14):  \" + in.monthOfYear().addWrapFieldToCopy(14));\n         System.out.println(\"...\");\n         System.out.println(\"Convert to Instant:   in.toInstant():           \" + in.toInstant());\n         System.out.println(\"Convert to DateTime:  in.toDateTime():          \" + in.toDateTime());\n--- a/JodaTime/src/java/org/joda/time/DateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/DateTimeField.java\n      * smaller field is adjusted to be in range.\n      * <p>\n      * For example, in the ISO chronology:<br>\n-     * 2000-08-20 addWrapped six months is 2000-02-20<br>\n-     * 2000-08-20 addWrapped twenty months is 2000-04-20<br>\n-     * 2000-08-20 addWrapped minus nine months is 2000-11-20<br>\n-     * 2001-01-31 addWrapped one month  is 2001-02-28<br>\n-     * 2001-01-31 addWrapped two months is 2001-03-31<br>\n+     * 2000-08-20 addWrapField six months is 2000-02-20<br>\n+     * 2000-08-20 addWrapField twenty months is 2000-04-20<br>\n+     * 2000-08-20 addWrapField minus nine months is 2000-11-20<br>\n+     * 2001-01-31 addWrapField one month  is 2001-02-28<br>\n+     * 2001-01-31 addWrapField two months is 2001-03-31<br>\n      * \n      * @param instant  the milliseconds from 1970-01-01T00:00:00Z to add to\n      * @param value  the value to add, in the units of the field\n      * @return the updated milliseconds\n      */\n-    public abstract long addWrapped(long instant, int value) ;\n+    public abstract long addWrapField(long instant, int value) ;\n \n     /**\n      * Adds a value (which may be negative) to the partial instant,\n      * smaller field is adjusted to be in range.\n      * <p>\n      * For example, in the ISO chronology:<br>\n-     * 2000-08-20 addInField six months is 2000-02-20<br>\n-     * 2000-08-20 addInField twenty months is 2000-04-20<br>\n-     * 2000-08-20 addInField minus nine months is 2000-11-20<br>\n-     * 2001-01-31 addInField one month  is 2001-02-28<br>\n-     * 2001-01-31 addInField two months is 2001-03-31<br>\n+     * 2000-08-20 addWrapField six months is 2000-02-20<br>\n+     * 2000-08-20 addWrapField twenty months is 2000-04-20<br>\n+     * 2000-08-20 addWrapField minus nine months is 2000-11-20<br>\n+     * 2001-01-31 addWrapField one month  is 2001-02-28<br>\n+     * 2001-01-31 addWrapField two months is 2001-03-31<br>\n      * \n      * @param instant  the partial instant\n      * @param fieldIndex  the index of this field in the instant\n      * @return the passed in values\n      * @throws IllegalArgumentException if the value is invalid\n      */\n-    public abstract int[] addInField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd);\n+    public abstract int[] addWrapField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd);\n \n     /**\n      * Computes the difference between two instants, as measured in the units\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n      * For example:\n      * <pre>\n      * MutableDateTime dt = new MutableDateTime();\n-     * dt.addWrapped(GJChronology.getInstance().monthOfYear(), 6);\n+     * addWrapField(GJChronology.getInstance().monthOfYear(), 6);\n      * </pre>\n      * \n      * @param field  the DateTimeField to use\n      * @param value the value\n      * @throws NullPointerException if the field is null\n      */\n-    public void addWrapped(final DateTimeField field, final int value) {\n-        setMillis(field.addWrapped(getMillis(), value));\n+    public void addWrapField(final DateTimeField field, final int value) {\n+        setMillis(field.addWrapField(getMillis(), value));\n     }\n \n     // Date methods\n--- a/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n      * @param value  the value of that field for the millis set in the implementation\n      * @throws IllegalArgumentException if the value is invalid\n      */\n-    void addWrapped(DateTimeField field, int value);\n+    void addWrapField(DateTimeField field, int value);\n     \n }\n--- a/JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/CopticYearDateTimeField.java\n         return add(instant, FieldUtils.safeToInt(years));\n     }\n \n-    public long addWrapped(long instant, int years) {\n+    public long addWrapField(long instant, int years) {\n         if (years == 0) {\n             return instant;\n         }\n--- a/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJChronology.java\n \n     /**\n      * This basic cutover field adjusts calls to 'get' and 'set' methods, and\n-     * assumes that calls to add and addWrapped are unaffected by the cutover.\n+     * assumes that calls to add and addWrapField are unaffected by the cutover.\n      */\n     private class CutoverField extends BaseDateTimeField {\n         static final long serialVersionUID = 3528501219481026402L;\n     /**\n      * Cutover field for variable length fields. These fields internally call\n      * set whenever add is called. As a result, the same correction applied to\n-     * set must be applied to add and addWrapped. Knowing when to use this\n+     * set must be applied to add and addWrapField. Knowing when to use this\n      * field requires specific knowledge of how the GJ fields are implemented.\n      */\n     private final class ImpreciseCutoverField extends CutoverField {\n--- a/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJMonthOfYearDateTimeField.java\n      * Add to the Month component of the specified time instant\n      * wrapping around within that component if necessary.\n      * \n-     * @see org.joda.time.DateTimeField#addWrapped\n-     * @see org.joda.time.ReadWritableDateTime#addWrappedMonthOfYear(int)\n+     * @see org.joda.time.DateTimeField#addWrapField\n      * @param instant  the time instant in millis to update.\n      * @param months  the months to add (can be negative).\n      * @return the updated time instant.\n      */\n-    public long addWrapped(long instant, int months) {\n+    public long addWrapField(long instant, int months) {\n         return set(instant, FieldUtils.getWrappedValue(get(instant), months, MIN, MAX));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJWeekyearDateTimeField.java\n      * Add to the year component of the specified time instant\n      * wrapping around within that component if necessary.\n      * \n-     * @see org.joda.time.DateTimeField#addWrapped\n+     * @see org.joda.time.DateTimeField#addWrapField\n      * @param instant  the time instant in millis to update.\n      * @param years  the years to add (can be negative).\n      * @return the updated time instant.\n      */\n-    public long addWrapped(long instant, int years) {\n+    public long addWrapField(long instant, int years) {\n         return add(instant, years);\n     }\n \n--- a/JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJYearDateTimeField.java\n      * @param years  the years to add (can be negative).\n      * @return the updated time instant.\n      */\n-    public long addWrapped(long instant, int years) {\n+    public long addWrapField(long instant, int years) {\n         if (years == 0) {\n             return instant;\n         }\n--- a/JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/GJYearOfEraDateTimeField.java\n         return getWrappedField().add(instant, years);\n     }\n \n-    public long addWrapped(long instant, int years) {\n-        return getWrappedField().addWrapped(instant, years);\n+    public long addWrapField(long instant, int years) {\n+        return getWrappedField().addWrapField(instant, years);\n     }\n \n-    public int[] addInField(ReadablePartial instant, int fieldIndex, int[] values, int years) {\n-        return getWrappedField().addInField(instant, fieldIndex, values, years);\n+    public int[] addWrapField(ReadablePartial instant, int fieldIndex, int[] values, int years) {\n+        return getWrappedField().addWrapField(instant, fieldIndex, values, years);\n     }\n \n     public int getDifference(long minuendInstant, long subtrahendInstant) {\n--- a/JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ISOYearOfEraDateTimeField.java\n         return getWrappedField().add(instant, years);\n     }\n \n-    public long addWrapped(long instant, int years) {\n-        return getWrappedField().addWrapped(instant, years);\n+    public long addWrapField(long instant, int years) {\n+        return getWrappedField().addWrapField(instant, years);\n     }\n \n-    public int[] addInField(ReadablePartial instant, int fieldIndex, int[] values, int years) {\n-        return getWrappedField().addInField(instant, fieldIndex, values, years);\n+    public int[] addWrapField(ReadablePartial instant, int fieldIndex, int[] values, int years) {\n+        return getWrappedField().addWrapField(instant, fieldIndex, values, years);\n     }\n \n     public int getDifference(long minuendInstant, long subtrahendInstant) {\n--- a/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/LimitChronology.java\n             return result;\n         }\n \n-        public long addWrapped(long instant, int amount) {\n-            checkLimits(instant, null);\n-            long result = getWrappedField().addWrapped(instant, amount);\n+        public long addWrapField(long instant, int amount) {\n+            checkLimits(instant, null);\n+            long result = getWrappedField().addWrapField(instant, amount);\n             checkLimits(result, \"resulting\");\n             return result;\n         }\n--- a/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n+++ b/JodaTime/src/java/org/joda/time/chrono/ZonedChronology.java\n             return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));\n         }\n \n-        public long addWrapped(long instant, int value) {\n-            int offset = this.iZone.getOffset(instant);\n-            instant = iField.addWrapped(instant + offset, value);\n+        public long addWrapField(long instant, int value) {\n+            int offset = this.iZone.getOffset(instant);\n+            instant = iField.addWrapField(instant + offset, value);\n             return instant - (iTimeField ? offset : this.iZone.getOffsetFromLocal(instant));\n         }\n \n--- a/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/BaseDateTimeField.java\n      * smaller field is adjusted to be in range.\n      * <p>\n      * For example, in the ISO chronology:<br>\n-     * 2000-08-20 addWrapped six months is 2000-02-20<br>\n-     * 2000-08-20 addWrapped twenty months is 2000-04-20<br>\n-     * 2000-08-20 addWrapped minus nine months is 2000-11-20<br>\n-     * 2001-01-31 addWrapped one month  is 2001-02-28<br>\n-     * 2001-01-31 addWrapped two months is 2001-03-31<br>\n+     * 2000-08-20 addWrapField six months is 2000-02-20<br>\n+     * 2000-08-20 addWrapField twenty months is 2000-04-20<br>\n+     * 2000-08-20 addWrapField minus nine months is 2000-11-20<br>\n+     * 2001-01-31 addWrapField one month  is 2001-02-28<br>\n+     * 2001-01-31 addWrapField two months is 2001-03-31<br>\n      * <p>\n      * The default implementation internally calls set. Subclasses are\n      * encouraged to provide a more efficient implementation.\n      * @param value  the value to add, in the units of the field\n      * @return the updated milliseconds\n      */\n-    public long addWrapped(long instant, int value) {\n+    public long addWrapField(long instant, int value) {\n         int current = get(instant);\n         int wrapped = FieldUtils.getWrappedValue\n             (current, value, getMinimumValue(instant), getMaximumValue(instant));\n      * smaller field is adjusted to be in range.\n      * <p>\n      * For example, in the ISO chronology:<br>\n-     * 2000-08-20 addInField six months is 2000-02-20<br>\n-     * 2000-08-20 addInField twenty months is 2000-04-20<br>\n-     * 2000-08-20 addInField minus nine months is 2000-11-20<br>\n-     * 2001-01-31 addInField one month  is 2001-02-28<br>\n-     * 2001-01-31 addInField two months is 2001-03-31<br>\n+     * 2000-08-20 addWrapField six months is 2000-02-20<br>\n+     * 2000-08-20 addWrapField twenty months is 2000-04-20<br>\n+     * 2000-08-20 addWrapField minus nine months is 2000-11-20<br>\n+     * 2001-01-31 addWrapField one month  is 2001-02-28<br>\n+     * 2001-01-31 addWrapField two months is 2001-03-31<br>\n      * <p>\n      * The default implementation internally calls set. Subclasses are\n      * encouraged to provide a more efficient implementation.\n      * @return the passed in values\n      * @throws IllegalArgumentException if the value is invalid\n      */\n-    public int[] addInField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n+    public int[] addWrapField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n         int current = values[fieldIndex];\n         int wrapped = FieldUtils.getWrappedValue\n             (current, valueToAdd, getMinimumValue(instant), getMaximumValue(instant));\n--- a/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DelegatedDateTimeField.java\n         return iField.add(instant, fieldIndex, values, valueToAdd);\n     }\n \n-    public long addWrapped(long instant, int value) {\n-        return iField.addWrapped(instant, value);\n-    }\n-\n-    public int[] addInField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n-        return iField.addInField(instant, fieldIndex, values, valueToAdd);\n+    public long addWrapField(long instant, int value) {\n+        return iField.addWrapField(instant, value);\n+    }\n+\n+    public int[] addWrapField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n+        return iField.addWrapField(instant, fieldIndex, values, valueToAdd);\n     }\n \n     public int getDifference(long minuendInstant, long subtrahendInstant) {\n--- a/JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/DividedDateTimeField.java\n      * @param amount  the amount of scaled units to add (can be negative).\n      * @return the updated time instant.\n      */\n-    public long addWrapped(long instant, int amount) {\n+    public long addWrapField(long instant, int amount) {\n         return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n+++ b/JodaTime/src/java/org/joda/time/field/FieldUtils.java\n     }\n \n     /**\n-     * Utility method used by addWrapped implementations to ensure the new\n+     * Utility method used by addWrapField implementations to ensure the new\n      * value lies within the field's legal value range.\n      *\n      * @param currentValue the current value of the data, which may lie outside\n--- a/JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/NonZeroDateTimeField.java\n         return getWrappedField().add(instant, value);\n     }\n \n-    public long addWrapped(long instant, int value) {\n-        return getWrappedField().addWrapped(instant, value);\n-    }\n-\n-    public int[] addInField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n-        return getWrappedField().addInField(instant, fieldIndex, values, valueToAdd);\n+    public long addWrapField(long instant, int value) {\n+        return getWrappedField().addWrapField(instant, value);\n+    }\n+\n+    public int[] addWrapField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n+        return getWrappedField().addWrapField(instant, fieldIndex, values, valueToAdd);\n     }\n \n     public int getDifference(long minuendInstant, long subtrahendInstant) {\n--- a/JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/OffsetDateTimeField.java\n      * @param amount  the amount of units to add (can be negative).\n      * @return the updated time instant.\n      */\n-    public long addWrapped(long instant, int amount) {\n+    public long addWrapField(long instant, int amount) {\n         return set(instant, FieldUtils.getWrappedValue(get(instant), amount, iMin, iMax));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/PreciseDateTimeField.java\n      * @param amount  the amount of units to add (can be negative).\n      * @return the updated time instant.\n      */\n-    public long addWrapped(long instant, int amount) {\n+    public long addWrapField(long instant, int amount) {\n         int thisValue = get(instant);\n         int wrappedValue = FieldUtils.getWrappedValue\n             (thisValue, amount, getMinimumValue(), getMaximumValue());\n--- a/JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/RemainderDateTimeField.java\n      * @param amount  the amount to add (can be negative).\n      * @return the updated time instant.\n      */\n-    public long addWrapped(long instant, int amount) {\n+    public long addWrapField(long instant, int amount) {\n         return set(instant, FieldUtils.getWrappedValue(get(instant), amount, 0, iDivisor - 1));\n     }\n \n--- a/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n+++ b/JodaTime/src/java/org/joda/time/field/UnsupportedDateTimeField.java\n      *\n      * @throws UnsupportedOperationException\n      */\n-    public long addWrapped(long instant, int value) {\n-        throw unsupported();\n-    }\n-\n-    /**\n-     * Always throws UnsupportedOperationException\n-     *\n-     * @throws UnsupportedOperationException\n-     */\n-    public int[] addInField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n+    public long addWrapField(long instant, int value) {\n+        throw unsupported();\n+    }\n+\n+    /**\n+     * Always throws UnsupportedOperationException\n+     *\n+     * @throws UnsupportedOperationException\n+     */\n+    public int[] addWrapField(ReadablePartial instant, int fieldIndex, int[] values, int valueToAdd) {\n         throw unsupported();\n     }\n \n--- a/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n+++ b/JodaTime/src/java/org/joda/time/partial/TimeOfDay.java\n          * @return a copy of the TimeOfDay with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public TimeOfDay addCopy(int valueToAdd) {\n+        public TimeOfDay addToCopy(int valueToAdd) {\n             int[] newValues = iTimeOfDay.getValues();\n             newValues = getField().add(iTimeOfDay, iFieldIndex, newValues, valueToAdd);\n             return new TimeOfDay(iTimeOfDay, newValues);\n          * Other fields are unaffected.\n          * <p>\n          * For example,\n-         * <code>12:59:37</code> addInField one minute returns <code>12:00:37</code>.\n+         * <code>12:59:37</code> addWrapField one minute returns <code>12:00:37</code>.\n          * <p>\n          * The TimeOfDay attached to this property is unchanged by this call.\n          * Instead, a new instance is returned.\n          * @return a copy of the TimeOfDay with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public TimeOfDay addInFieldCopy(int valueToAdd) {\n+        public TimeOfDay addWrapFieldToCopy(int valueToAdd) {\n             int[] newValues = iTimeOfDay.getValues();\n-            newValues = getField().addInField(iTimeOfDay, iFieldIndex, newValues, valueToAdd);\n+            newValues = getField().addWrapField(iTimeOfDay, iFieldIndex, newValues, valueToAdd);\n             return new TimeOfDay(iTimeOfDay, newValues);\n         }\n \n--- a/JodaTime/src/java/org/joda/time/partial/YearMonthDay.java\n+++ b/JodaTime/src/java/org/joda/time/partial/YearMonthDay.java\n          * @return a copy of the YearMonthDay with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public YearMonthDay addCopy(int valueToAdd) {\n+        public YearMonthDay addToCopy(int valueToAdd) {\n             int[] newValues = iYearMonthDay.getValues();\n             newValues = getField().add(iYearMonthDay, iFieldIndex, newValues, valueToAdd);\n             return new YearMonthDay(iYearMonthDay, newValues);\n          * Other fields are unaffected.\n          * <p>\n          * For example,\n-         * <code>2004-12-20</code> addInField one month returns <code>2004-01-20</code>.\n+         * <code>2004-12-20</code> addWrapField one month returns <code>2004-01-20</code>.\n          * <p>\n          * The YearMonthDay attached to this property is unchanged by this call.\n          * Instead, a new instance is returned.\n          * @return a copy of the YearMonthDay with the field value changed\n          * @throws IllegalArgumentException if the value isn't valid\n          */\n-        public YearMonthDay addInFieldCopy(int valueToAdd) {\n+        public YearMonthDay addWrapFieldToCopy(int valueToAdd) {\n             int[] newValues = iYearMonthDay.getValues();\n-            newValues = getField().addInField(iYearMonthDay, iFieldIndex, newValues, valueToAdd);\n+            newValues = getField().addWrapField(iYearMonthDay, iFieldIndex, newValues, valueToAdd);\n             return new YearMonthDay(iYearMonthDay, newValues);\n         }\n \n--- a/JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/property/DateTimeFieldProperty.java\n     /**\n      * Adds to this field, possibly wrapped, in a copy of this DateTime.\n      * A wrapped operation only changes this field.\n-     * Thus 31st January addWrapped one day goes to the 1st January.\n+     * Thus 31st January addWrapField one day goes to the 1st January.\n      * <p>\n      * The DateTime attached to this property is unchanged by this call.\n      * This operation is faster than converting a DateTime to a MutableDateTime\n      * @return a copy of the DateTime with the field value changed\n      * @throws IllegalArgumentException if the value isn't valid\n      */\n-    public DateTime addWrappedToCopy(int value) {\n-        DateTime instant = iInstant;\n-        return instant.withMillis(iField.addWrapped(instant.getMillis(), value));\n+    public DateTime addWrapFieldToCopy(int value) {\n+        DateTime instant = iInstant;\n+        return instant.withMillis(iField.addWrapField(instant.getMillis(), value));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/java/org/joda/time/property/ReadWritableInstantFieldProperty.java\n+++ b/JodaTime/src/java/org/joda/time/property/ReadWritableInstantFieldProperty.java\n      * Adds a value, possibly wrapped, to the millis value.\n      * \n      * @param value  the value to add\n-     * @see DateTimeField#addWrapped\n-     */\n-    public void addWrapped(int value) {\n-        iInstant.setMillis(getField().addWrapped(iInstant.getMillis(), value));\n+     * @see DateTimeField#addWrapField\n+     */\n+    public void addWrapField(int value) {\n+        iInstant.setMillis(getField().addWrapField(iInstant.getMillis(), value));\n     }\n \n     //-----------------------------------------------------------------------\n--- a/JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java\n+++ b/JodaTime/src/test/org/joda/test/time/AbstractTestDateTimeField.java\n         long[] var = getAllTestPositions();\n         for (int i = 0; i < var.length; i++) {\n             long millis = var[i];\n-            assertEquals(var, i, getAddWrappedResult(millis, 1), field.addWrapped(millis, 1));\n-            assertEquals(var, i, getAddWrappedResult(millis, -1), field.addWrapped(millis, -1));\n-            assertEquals(var, i, getAddWrappedResult(millis, 0), field.addWrapped(millis, 0));\n-            assertEquals(var, i, getAddWrappedResult(millis, 2), field.addWrapped(millis, 2));\n-            assertEquals(var, i, getAddWrappedResult(millis, 8), field.addWrapped(millis, 8));\n-            assertEquals(var, i, getAddWrappedResult(millis, 9), field.addWrapped(millis, 9));\n-            assertEquals(var, i, getAddWrappedResult(millis, -13), field.addWrapped(millis, -13));\n+            assertEquals(var, i, getAddWrappedResult(millis, 1), field.addWrapField(millis, 1));\n+            assertEquals(var, i, getAddWrappedResult(millis, -1), field.addWrapField(millis, -1));\n+            assertEquals(var, i, getAddWrappedResult(millis, 0), field.addWrapField(millis, 0));\n+            assertEquals(var, i, getAddWrappedResult(millis, 2), field.addWrapField(millis, 2));\n+            assertEquals(var, i, getAddWrappedResult(millis, 8), field.addWrapField(millis, 8));\n+            assertEquals(var, i, getAddWrappedResult(millis, 9), field.addWrapField(millis, 9));\n+            assertEquals(var, i, getAddWrappedResult(millis, -13), field.addWrapField(millis, -13));\n         }\n     }\n \n--- a/JodaTime/src/test/org/joda/test/time/TestBuddhistChronology.java\n+++ b/JodaTime/src/test/org/joda/test/time/TestBuddhistChronology.java\n         assertEquals(MILLIS_1971, iChrono.year().add(MILLIS_1970, 1));\n         assertEquals(MILLIS_1969, iChrono.year().add(MILLIS_1970, -1));\n         \n-        assertEquals(MILLIS_1971, iChrono.year().addWrapped(MILLIS_1970, 1));\n-        assertEquals(MILLIS_1969, iChrono.year().addWrapped(MILLIS_1970, -1));\n+        assertEquals(MILLIS_1971, iChrono.year().addWrapField(MILLIS_1970, 1));\n+        assertEquals(MILLIS_1969, iChrono.year().addWrapField(MILLIS_1970, -1));\n         \n         assertEquals(\"2513\", iChrono.year().getAsShortText(MILLIS_1970));\n         assertEquals(9, iChrono.year().getMaximumShortTextLength(null));\n         } catch (UnsupportedOperationException ex) {}\n         \n         try {\n-            iChrono.era().addWrapped(SMALL_MILLIS, 1);\n+            iChrono.era().addWrapField(SMALL_MILLIS, 1);\n             fail();\n         } catch (UnsupportedOperationException ex) {}\n         \n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n         } catch (IllegalArgumentException ex) {}\n     }\n \n-    public void testPropertyAddInFieldYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n-        DateTime copy = test.year().addWrappedToCopy(9);\n+    public void testPropertyAddWrapFieldYear() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.year().addWrapFieldToCopy(9);\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1981-06-09T00:00:00.000+01:00\", copy.toString());\n         \n-        copy = test.year().addWrappedToCopy(0);\n+        copy = test.year().addWrapFieldToCopy(0);\n         assertEquals(1972, copy.getYear());\n         \n-        copy = test.year().addWrappedToCopy(292277023 - 1972 + 1);\n+        copy = test.year().addWrapFieldToCopy(292277023 - 1972 + 1);\n         assertEquals(-292275054, copy.getYear());\n         \n-        copy = test.year().addWrappedToCopy(-292275054 - 1972 - 1);\n+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);\n         assertEquals(292277023, copy.getYear());\n     }\n \n         assertEquals(\"1971-02-28T00:00:00.000Z\", copy.toString());\n     }\n \n-    public void testPropertyAddInFieldMonth() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n-        DateTime copy = test.monthOfYear().addWrappedToCopy(4);\n+    public void testPropertyAddWrapFieldMonth() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.monthOfYear().addWrapFieldToCopy(4);\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1972-10-09T00:00:00.000+01:00\", copy.toString());\n         \n-        copy = test.monthOfYear().addWrappedToCopy(8);\n+        copy = test.monthOfYear().addWrapFieldToCopy(8);\n         assertEquals(\"1972-02-09T00:00:00.000Z\", copy.toString());\n         \n-        copy = test.monthOfYear().addWrappedToCopy(-8);\n+        copy = test.monthOfYear().addWrapFieldToCopy(-8);\n         assertEquals(\"1972-10-09T00:00:00.000+01:00\", copy.toString());\n         \n         test = new DateTime(1972, 1, 31, 0, 0, 0, 0);\n-        copy = test.monthOfYear().addWrappedToCopy(1);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n         assertEquals(\"1972-01-31T00:00:00.000Z\", test.toString());\n         assertEquals(\"1972-02-29T00:00:00.000Z\", copy.toString());\n         \n-        copy = test.monthOfYear().addWrappedToCopy(2);\n+        copy = test.monthOfYear().addWrapFieldToCopy(2);\n         assertEquals(\"1972-03-31T00:00:00.000+01:00\", copy.toString());\n         \n-        copy = test.monthOfYear().addWrappedToCopy(3);\n+        copy = test.monthOfYear().addWrapFieldToCopy(3);\n         assertEquals(\"1972-04-30T00:00:00.000+01:00\", copy.toString());\n         \n         test = new DateTime(1971, 1, 31, 0, 0, 0, 0);\n-        copy = test.monthOfYear().addWrappedToCopy(1);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n         assertEquals(\"1971-01-31T00:00:00.000Z\", test.toString());\n         assertEquals(\"1971-02-28T00:00:00.000Z\", copy.toString());\n     }\n         assertEquals(\"1971-12-31T00:00:00.000Z\", copy.toString());\n     }\n \n-    public void testPropertyAddInFieldDay() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n-        DateTime copy = test.dayOfMonth().addWrappedToCopy(21);\n+    public void testPropertyAddWrapFieldDay() {\n+        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfMonth().addWrapFieldToCopy(21);\n         assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n         \n-        copy = test.dayOfMonth().addWrappedToCopy(22);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n         assertEquals(\"1972-06-01T00:00:00.000+01:00\", copy.toString());\n         \n-        copy = test.dayOfMonth().addWrappedToCopy(-12);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n         assertEquals(\"1972-06-27T00:00:00.000+01:00\", copy.toString());\n         \n         test = new DateTime(1972, 7, 9, 0, 0, 0, 0);\n-        copy = test.dayOfMonth().addWrappedToCopy(21);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(21);\n         assertEquals(\"1972-07-30T00:00:00.000+01:00\", copy.toString());\n     \n-        copy = test.dayOfMonth().addWrappedToCopy(22);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n         assertEquals(\"1972-07-31T00:00:00.000+01:00\", copy.toString());\n     \n-        copy = test.dayOfMonth().addWrappedToCopy(23);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(23);\n         assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n     \n-        copy = test.dayOfMonth().addWrappedToCopy(-12);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n         assertEquals(\"1972-07-28T00:00:00.000+01:00\", copy.toString());\n     }\n \n--- a/JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/MainTest.java\n         y = fieldB.add(millis, value);\n         testMillis(fieldA, fieldB, \"add\", millis, x, y);\n \n-        // addWrapped test\n-        x = fieldA.addWrapped(millis, value);\n-        y = fieldB.addWrapped(millis, value);\n-        testMillis(fieldA, fieldB, \"addWrapped\", millis, x, y);\n+        // addWrapField test\n+        x = fieldA.addWrapField(millis, value);\n+        y = fieldB.addWrapField(millis, value);\n+        testMillis(fieldA, fieldB, \"addWrapField\", millis, x, y);\n \n         // getDifference test\n         x = fieldA.getDifference(millis, millis2);\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestJulianWeekyearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestJulianWeekyearField.java\n         super(chrono);\n     }\n \n-    public long addWrapped(long millis, int value) {\n+    public long addWrapField(long millis, int value) {\n         int weekyear = get(millis);\n         int wrapped = FieldUtils.getWrappedValue\n             (weekyear, value, getMinimumValue(), getMaximumValue());\n--- a/JodaTime/src/test/org/joda/time/chrono/gj/TestJulianYearField.java\n+++ b/JodaTime/src/test/org/joda/time/chrono/gj/TestJulianYearField.java\n         super(chrono);\n     }\n \n-    public long addWrapped(long millis, int value) {\n+    public long addWrapField(long millis, int value) {\n         int year = get(millis);\n         int wrapped = FieldUtils.getWrappedValue\n             (year, value, getMinimumValue(), getMaximumValue());\n--- a/JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java\n+++ b/JodaTime/src/test/org/joda/time/partial/TestTimeOfDay.java\n \n     public void testPropertyAddHour() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay copy = test.hourOfDay().addCopy(9);\n+        TimeOfDay copy = test.hourOfDay().addToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 19, 20, 30, 40);\n         \n-        copy = test.hourOfDay().addCopy(0);\n+        copy = test.hourOfDay().addToCopy(0);\n         check(copy, 10, 20, 30, 40);\n         \n-        copy = test.hourOfDay().addCopy(13);\n+        copy = test.hourOfDay().addToCopy(13);\n         check(copy, 23, 20, 30, 40);\n         \n         try {\n-            test.hourOfDay().addCopy(14);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-        \n-        copy = test.hourOfDay().addCopy(-10);\n+            test.hourOfDay().addToCopy(14);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.hourOfDay().addToCopy(-10);\n         check(copy, 0, 20, 30, 40);\n         \n         try {\n-            test.hourOfDay().addCopy(-11);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-    }\n-\n-    public void testPropertyAddInFieldHour() {\n-        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay copy = test.hourOfDay().addInFieldCopy(9);\n+            test.hourOfDay().addToCopy(-11);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldHour() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.hourOfDay().addWrapFieldToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 19, 20, 30, 40);\n         \n-        copy = test.hourOfDay().addInFieldCopy(0);\n+        copy = test.hourOfDay().addWrapFieldToCopy(0);\n         check(copy, 10, 20, 30, 40);\n         \n-        copy = test.hourOfDay().addInFieldCopy(18);\n+        copy = test.hourOfDay().addWrapFieldToCopy(18);\n         check(copy, 4, 20, 30, 40);\n         \n-        copy = test.hourOfDay().addInFieldCopy(-15);\n+        copy = test.hourOfDay().addWrapFieldToCopy(-15);\n         check(copy, 19, 20, 30, 40);\n     }\n \n \n     public void testPropertyAddMinute() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay copy = test.minuteOfHour().addCopy(9);\n+        TimeOfDay copy = test.minuteOfHour().addToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 29, 30, 40);\n         \n-        copy = test.minuteOfHour().addCopy(39);\n+        copy = test.minuteOfHour().addToCopy(39);\n         check(copy, 10, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().addCopy(40);\n+        copy = test.minuteOfHour().addToCopy(40);\n         check(copy, 11, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().addCopy(1 * 60 + 45);\n+        copy = test.minuteOfHour().addToCopy(1 * 60 + 45);\n         check(copy, 12, 5, 30, 40);\n         \n-        copy = test.minuteOfHour().addCopy(13 * 60 + 39);\n+        copy = test.minuteOfHour().addToCopy(13 * 60 + 39);\n         check(copy, 23, 59, 30, 40);\n         \n         try {\n-            test.minuteOfHour().addCopy(13 * 60 + 40);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-        \n-        copy = test.minuteOfHour().addCopy(-9);\n+            test.minuteOfHour().addToCopy(13 * 60 + 40);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.minuteOfHour().addToCopy(-9);\n         check(copy, 10, 11, 30, 40);\n         \n-        copy = test.minuteOfHour().addCopy(-19);\n+        copy = test.minuteOfHour().addToCopy(-19);\n         check(copy, 10, 1, 30, 40);\n         \n-        copy = test.minuteOfHour().addCopy(-20);\n+        copy = test.minuteOfHour().addToCopy(-20);\n         check(copy, 10, 0, 30, 40);\n         \n-        copy = test.minuteOfHour().addCopy(-21);\n+        copy = test.minuteOfHour().addToCopy(-21);\n         check(copy, 9, 59, 30, 40);\n         \n-        copy = test.minuteOfHour().addCopy(-(10 * 60 + 20));\n+        copy = test.minuteOfHour().addToCopy(-(10 * 60 + 20));\n         check(copy, 0, 0, 30, 40);\n         \n         try {\n-            test.minuteOfHour().addCopy(-(10 * 60 + 21));\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-    }\n-\n-    public void testPropertyAddInFieldMinute() {\n-        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay copy = test.minuteOfHour().addInFieldCopy(9);\n+            test.minuteOfHour().addToCopy(-(10 * 60 + 21));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldMinute() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.minuteOfHour().addWrapFieldToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 29, 30, 40);\n         \n-        copy = test.minuteOfHour().addInFieldCopy(49);\n+        copy = test.minuteOfHour().addWrapFieldToCopy(49);\n         check(copy, 10, 9, 30, 40);\n         \n-        copy = test.minuteOfHour().addInFieldCopy(-47);\n+        copy = test.minuteOfHour().addWrapFieldToCopy(-47);\n         check(copy, 10, 33, 30, 40);\n     }\n \n \n     public void testPropertyAddSecond() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay copy = test.secondOfMinute().addCopy(9);\n+        TimeOfDay copy = test.secondOfMinute().addToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 39, 40);\n         \n-        copy = test.secondOfMinute().addCopy(29);\n+        copy = test.secondOfMinute().addToCopy(29);\n         check(copy, 10, 20, 59, 40);\n         \n-        copy = test.secondOfMinute().addCopy(30);\n+        copy = test.secondOfMinute().addToCopy(30);\n         check(copy, 10, 21, 0, 40);\n         \n-        copy = test.secondOfMinute().addCopy(39 * 60 + 29);\n+        copy = test.secondOfMinute().addToCopy(39 * 60 + 29);\n         check(copy, 10, 59, 59, 40);\n         \n-        copy = test.secondOfMinute().addCopy(39 * 60 + 30);\n+        copy = test.secondOfMinute().addToCopy(39 * 60 + 30);\n         check(copy, 11, 0, 0, 40);\n         \n         try {\n-            test.secondOfMinute().addCopy(13 * 60 * 60 + 39 * 60 + 30);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-        \n-        copy = test.secondOfMinute().addCopy(-9);\n+            test.secondOfMinute().addToCopy(13 * 60 * 60 + 39 * 60 + 30);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.secondOfMinute().addToCopy(-9);\n         check(copy, 10, 20, 21, 40);\n         \n-        copy = test.secondOfMinute().addCopy(-30);\n+        copy = test.secondOfMinute().addToCopy(-30);\n         check(copy, 10, 20, 0, 40);\n         \n-        copy = test.secondOfMinute().addCopy(-31);\n+        copy = test.secondOfMinute().addToCopy(-31);\n         check(copy, 10, 19, 59, 40);\n         \n-        copy = test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n+        copy = test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 30));\n         check(copy, 0, 0, 0, 40);\n         \n         try {\n-            test.secondOfMinute().addCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-    }\n-\n-    public void testPropertyAddInFieldSecond() {\n-        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay copy = test.secondOfMinute().addInFieldCopy(9);\n+            test.secondOfMinute().addToCopy(-(10 * 60 * 60 + 20 * 60 + 31));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldSecond() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.secondOfMinute().addWrapFieldToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 39, 40);\n         \n-        copy = test.secondOfMinute().addInFieldCopy(49);\n+        copy = test.secondOfMinute().addWrapFieldToCopy(49);\n         check(copy, 10, 20, 19, 40);\n         \n-        copy = test.secondOfMinute().addInFieldCopy(-47);\n+        copy = test.secondOfMinute().addWrapFieldToCopy(-47);\n         check(copy, 10, 20, 43, 40);\n     }\n \n \n     public void testPropertyAddMilli() {\n         TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay copy = test.millisOfSecond().addCopy(9);\n+        TimeOfDay copy = test.millisOfSecond().addToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 30, 49);\n         \n-        copy = test.millisOfSecond().addCopy(959);\n+        copy = test.millisOfSecond().addToCopy(959);\n         check(copy, 10, 20, 30, 999);\n         \n-        copy = test.millisOfSecond().addCopy(960);\n+        copy = test.millisOfSecond().addToCopy(960);\n         check(copy, 10, 20, 31, 0);\n         \n-        copy = test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n+        copy = test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 959);\n         check(copy, 23, 59, 59, 999);\n         \n         try {\n-            test.millisOfSecond().addCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-        \n-        copy = test.millisOfSecond().addCopy(-9);\n+            test.millisOfSecond().addToCopy(13 * 60 * 60 * 1000 + 39 * 60 * 1000 + 29 * 1000 + 960);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+        \n+        copy = test.millisOfSecond().addToCopy(-9);\n         check(copy, 10, 20, 30, 31);\n         \n-        copy = test.millisOfSecond().addCopy(-40);\n+        copy = test.millisOfSecond().addToCopy(-40);\n         check(copy, 10, 20, 30, 0);\n         \n-        copy = test.millisOfSecond().addCopy(-41);\n+        copy = test.millisOfSecond().addToCopy(-41);\n         check(copy, 10, 20, 29, 999);\n         \n-        copy = test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n+        copy = test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 40));\n         check(copy, 0, 0, 0, 0);\n         \n         try {\n-            test.millisOfSecond().addCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 10, 20, 30, 40);\n-    }\n-\n-    public void testPropertyAddInFieldMilli() {\n-        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n-        TimeOfDay copy = test.millisOfSecond().addInFieldCopy(9);\n+            test.millisOfSecond().addToCopy(-(10 * 60 * 60 * 1000 + 20 * 60 * 1000 + 30 * 1000 + 41));\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 10, 20, 30, 40);\n+    }\n+\n+    public void testPropertyAddWrapFieldMilli() {\n+        TimeOfDay test = new TimeOfDay(10, 20, 30, 40);\n+        TimeOfDay copy = test.millisOfSecond().addWrapFieldToCopy(9);\n         check(test, 10, 20, 30, 40);\n         check(copy, 10, 20, 30, 49);\n         \n-        copy = test.millisOfSecond().addInFieldCopy(995);\n+        copy = test.millisOfSecond().addWrapFieldToCopy(995);\n         check(copy, 10, 20, 30, 35);\n         \n-        copy = test.millisOfSecond().addInFieldCopy(-47);\n+        copy = test.millisOfSecond().addWrapFieldToCopy(-47);\n         check(copy, 10, 20, 30, 993);\n     }\n \n--- a/JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java\n+++ b/JodaTime/src/test/org/joda/time/partial/TestYearMonthDay.java\n \n     public void testPropertyAddYear() {\n         YearMonthDay test = new YearMonthDay(1972, 6, 9);\n-        YearMonthDay copy = test.year().addCopy(9);\n+        YearMonthDay copy = test.year().addToCopy(9);\n         check(test, 1972, 6, 9);\n         check(copy, 1981, 6, 9);\n         \n-        copy = test.year().addCopy(0);\n+        copy = test.year().addToCopy(0);\n         check(copy, 1972, 6, 9);\n         \n-        copy = test.year().addCopy(292277023 - 1972);\n+        copy = test.year().addToCopy(292277023 - 1972);\n         check(copy, 292277023, 6, 9);\n         \n         try {\n-            test.year().addCopy(292277023 - 1972 + 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 1972, 6, 9);\n-        \n-        copy = test.year().addCopy(-1972);\n+            test.year().addToCopy(292277023 - 1972 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+        \n+        copy = test.year().addToCopy(-1972);\n         check(copy, 0, 6, 9);\n         \n-        copy = test.year().addCopy(-1973);\n+        copy = test.year().addToCopy(-1973);\n         check(copy, -1, 6, 9);\n         \n         try {\n-            test.year().addCopy(-292275054 - 1972 - 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        check(test, 1972, 6, 9);\n-    }\n-\n-    public void testPropertyAddInFieldYear() {\n-        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n-        YearMonthDay copy = test.year().addInFieldCopy(9);\n+            test.year().addToCopy(-292275054 - 1972 - 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        check(test, 1972, 6, 9);\n+    }\n+\n+    public void testPropertyAddWrapFieldYear() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.year().addWrapFieldToCopy(9);\n         check(test, 1972, 6, 9);\n         check(copy, 1981, 6, 9);\n         \n-        copy = test.year().addInFieldCopy(0);\n+        copy = test.year().addWrapFieldToCopy(0);\n         check(copy, 1972, 6, 9);\n         \n-        copy = test.year().addInFieldCopy(292277023 - 1972 + 1);\n+        copy = test.year().addWrapFieldToCopy(292277023 - 1972 + 1);\n         check(copy, -292275054, 6, 9);\n         \n-        copy = test.year().addInFieldCopy(-292275054 - 1972 - 1);\n+        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);\n         check(copy, 292277023, 6, 9);\n     }\n \n \n     public void testPropertyAddMonth() {\n         YearMonthDay test = new YearMonthDay(1972, 6, 9);\n-        YearMonthDay copy = test.monthOfYear().addCopy(6);\n+        YearMonthDay copy = test.monthOfYear().addToCopy(6);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 12, 9);\n         \n-        copy = test.monthOfYear().addCopy(7);\n+        copy = test.monthOfYear().addToCopy(7);\n         check(copy, 1973, 1, 9);\n         \n-        copy = test.monthOfYear().addCopy(-5);\n+        copy = test.monthOfYear().addToCopy(-5);\n         check(copy, 1972, 1, 9);\n         \n-        copy = test.monthOfYear().addCopy(-6);\n+        copy = test.monthOfYear().addToCopy(-6);\n         check(copy, 1971, 12, 9);\n         \n         test = new YearMonthDay(1972, 1, 31);\n-        copy = test.monthOfYear().addCopy(1);\n+        copy = test.monthOfYear().addToCopy(1);\n         check(copy, 1972, 2, 29);\n         \n-        copy = test.monthOfYear().addCopy(2);\n+        copy = test.monthOfYear().addToCopy(2);\n         check(copy, 1972, 3, 31);\n         \n-        copy = test.monthOfYear().addCopy(3);\n+        copy = test.monthOfYear().addToCopy(3);\n         check(copy, 1972, 4, 30);\n         \n         test = new YearMonthDay(1971, 1, 31);\n-        copy = test.monthOfYear().addCopy(1);\n+        copy = test.monthOfYear().addToCopy(1);\n         check(copy, 1971, 2, 28);\n     }\n \n-    public void testPropertyAddInFieldMonth() {\n-        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n-        YearMonthDay copy = test.monthOfYear().addInFieldCopy(4);\n+    public void testPropertyAddWrapFieldMonth() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.monthOfYear().addWrapFieldToCopy(4);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 10, 9);\n         \n-        copy = test.monthOfYear().addInFieldCopy(8);\n+        copy = test.monthOfYear().addWrapFieldToCopy(8);\n         check(copy, 1972, 2, 9);\n         \n-        copy = test.monthOfYear().addInFieldCopy(-8);\n+        copy = test.monthOfYear().addWrapFieldToCopy(-8);\n         check(copy, 1972, 10, 9);\n         \n         test = new YearMonthDay(1972, 1, 31);\n-        copy = test.monthOfYear().addInFieldCopy(1);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n         check(copy, 1972, 2, 29);\n         \n-        copy = test.monthOfYear().addInFieldCopy(2);\n+        copy = test.monthOfYear().addWrapFieldToCopy(2);\n         check(copy, 1972, 3, 31);\n         \n-        copy = test.monthOfYear().addInFieldCopy(3);\n+        copy = test.monthOfYear().addWrapFieldToCopy(3);\n         check(copy, 1972, 4, 30);\n         \n         test = new YearMonthDay(1971, 1, 31);\n-        copy = test.monthOfYear().addInFieldCopy(1);\n+        copy = test.monthOfYear().addWrapFieldToCopy(1);\n         check(copy, 1971, 2, 28);\n     }\n \n \n     public void testPropertyAddDay() {\n         YearMonthDay test = new YearMonthDay(1972, 6, 9);\n-        YearMonthDay copy = test.dayOfMonth().addCopy(9);\n+        YearMonthDay copy = test.dayOfMonth().addToCopy(9);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 6, 18);\n         \n-        copy = test.dayOfMonth().addCopy(21);\n+        copy = test.dayOfMonth().addToCopy(21);\n         check(copy, 1972, 6, 30);\n         \n-        copy = test.dayOfMonth().addCopy(22);\n+        copy = test.dayOfMonth().addToCopy(22);\n         check(copy, 1972, 7, 1);\n         \n-        copy = test.dayOfMonth().addCopy(22 + 30);\n+        copy = test.dayOfMonth().addToCopy(22 + 30);\n         check(copy, 1972, 7, 31);\n         \n-        copy = test.dayOfMonth().addCopy(22 + 31);\n+        copy = test.dayOfMonth().addToCopy(22 + 31);\n         check(copy, 1972, 8, 1);\n \n-        copy = test.dayOfMonth().addCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n+        copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n         check(copy, 1972, 12, 31);\n         \n-        copy = test.dayOfMonth().addCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n+        copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n         check(copy, 1973, 1, 1);\n         \n-        copy = test.dayOfMonth().addCopy(-8);\n+        copy = test.dayOfMonth().addToCopy(-8);\n         check(copy, 1972, 6, 1);\n         \n-        copy = test.dayOfMonth().addCopy(-9);\n+        copy = test.dayOfMonth().addToCopy(-9);\n         check(copy, 1972, 5, 31);\n         \n-        copy = test.dayOfMonth().addCopy(-8 - 31 - 30 - 31 - 29 - 31);\n+        copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n         check(copy, 1972, 1, 1);\n         \n-        copy = test.dayOfMonth().addCopy(-9 - 31 - 30 - 31 - 29 - 31);\n+        copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n         check(copy, 1971, 12, 31);\n     }\n \n-    public void testPropertyAddInFieldDay() {\n-        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n-        YearMonthDay copy = test.dayOfMonth().addInFieldCopy(21);\n+    public void testPropertyAddWrapFieldDay() {\n+        YearMonthDay test = new YearMonthDay(1972, 6, 9);\n+        YearMonthDay copy = test.dayOfMonth().addWrapFieldToCopy(21);\n         check(test, 1972, 6, 9);\n         check(copy, 1972, 6, 30);\n         \n-        copy = test.dayOfMonth().addInFieldCopy(22);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n         check(copy, 1972, 6, 1);\n         \n-        copy = test.dayOfMonth().addInFieldCopy(-12);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n         check(copy, 1972, 6, 27);\n         \n         test = new YearMonthDay(1972, 7, 9);\n-        copy = test.dayOfMonth().addInFieldCopy(21);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(21);\n         check(copy, 1972, 7, 30);\n     \n-        copy = test.dayOfMonth().addInFieldCopy(22);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(22);\n         check(copy, 1972, 7, 31);\n     \n-        copy = test.dayOfMonth().addInFieldCopy(23);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(23);\n         check(copy, 1972, 7, 1);\n     \n-        copy = test.dayOfMonth().addInFieldCopy(-12);\n+        copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n         check(copy, 1972, 7, 28);\n     }\n ", "timestamp": 1089415115, "metainfo": ""}