{"sha": "998b3df4cb99ee2ec113fe45ec78c3e62589de6d", "log": "Optimise by using DateTimeUtils   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/DateMidnight.java\n+++ b/JodaTime/src/java/org/joda/time/DateMidnight.java\n      * @return a copy of this instant with a different time zone\n      */\n     public DateMidnight withZoneRetainFields(DateTimeZone newZone) {\n-        newZone = (newZone == null ? DateTimeZone.getDefault() : newZone);\n-        DateTimeZone originalZone = getZone();\n-        originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);\n+        newZone = DateTimeUtils.getZone(newZone);\n+        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());\n         if (newZone == originalZone) {\n             return this;\n         }\n--- a/JodaTime/src/java/org/joda/time/DateTime.java\n+++ b/JodaTime/src/java/org/joda/time/DateTime.java\n      * millisecond instant, with the effect that the field values usually change.\n      * The returned object will be either be a new instance or <code>this</code>.\n      *\n-     * @param newDateTimeZone  the new time zone\n+     * @param newZone  the new time zone\n      * @return a copy of this datetime with a different time zone\n      * @see #withZoneRetainFields\n      */\n-    public DateTime withZone(DateTimeZone newDateTimeZone) {\n-        return withChronology(getChronology().withZone(newDateTimeZone));\n+    public DateTime withZone(DateTimeZone newZone) {\n+        return withChronology(getChronology().withZone(newZone));\n     }\n \n     /**\n      * @see #withZone\n      */\n     public DateTime withZoneRetainFields(DateTimeZone newZone) {\n-        newZone = (newZone == null ? DateTimeZone.getDefault() : newZone);\n-        DateTimeZone originalZone = getZone();\n-        originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);\n+        newZone = DateTimeUtils.getZone(newZone);\n+        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());\n         if (newZone == originalZone) {\n             return this;\n         }\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n      * <p>\n      * If the chronology already has this time zone, no change occurs.\n      *\n-     * @param zone  the time zone to use, null means default zone\n+     * @param newZone  the time zone to use, null means default zone\n      * @see #setZoneRetainFields\n      */\n-    public void setZone(DateTimeZone zone) {\n-        zone = DateTimeUtils.getZone(zone);\n+    public void setZone(DateTimeZone newZone) {\n+        newZone = DateTimeUtils.getZone(newZone);\n         Chronology chrono = getChronology();\n-        if (chrono.getZone() != zone) {\n-            setChronology(chrono.withZone(zone));  // set via this class not super\n+        if (chrono.getZone() != newZone) {\n+            setChronology(chrono.withZone(newZone));  // set via this class not super\n         }\n     }\n \n      * <p>\n      * If the chronology already has this time zone, no change occurs.\n      *\n-     * @param zone  the time zone to use, null means default zone\n+     * @param newZone  the time zone to use, null means default zone\n      * @see #setZone\n      */\n-    public void setZoneRetainFields(DateTimeZone zone) {\n-        zone = DateTimeUtils.getZone(zone);\n-        DateTimeZone originalZone = getZone();\n-        originalZone = (originalZone == null ? DateTimeZone.getDefault() : originalZone);\n-        if (zone == originalZone) {\n+    public void setZoneRetainFields(DateTimeZone newZone) {\n+        newZone = DateTimeUtils.getZone(newZone);\n+        DateTimeZone originalZone = DateTimeUtils.getZone(getZone());\n+        if (newZone == originalZone) {\n             return;\n         }\n         \n-        long millis = originalZone.getMillisKeepLocal(zone, getMillis());\n-        setChronology(getChronology().withZone(zone));  // set via this class not super\n+        long millis = originalZone.getMillisKeepLocal(newZone, getMillis());\n+        setChronology(getChronology().withZone(newZone));  // set via this class not super\n         setMillis(millis);\n     }\n ", "timestamp": 1093040742, "metainfo": ""}