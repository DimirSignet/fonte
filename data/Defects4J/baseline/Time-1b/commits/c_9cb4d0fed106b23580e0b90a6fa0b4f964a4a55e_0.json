{"sha": "9cb4d0fed106b23580e0b90a6fa0b4f964a4a55e", "log": "Javadoc fixes   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/LocalDate.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDate.java\n import org.joda.time.format.ISODateTimeFormat;\n \n /**\n- * LocalDate is an unmodifiable datetime class representing a\n- * datetime without a time zone.\n+ * LocalDate is an immutable datetime class representing a date\n+ * without a time zone.\n  * <p>\n  * LocalDate implements the {@link ReadablePartial} interface.\n  * To do this, the interface methods focus on the key fields -\n  * Year, MonthOfYear and DayOfMonth.\n- * However, <b>all</b> fields may in fact be queried.\n+ * However, <b>all</b> date fields may in fact be queried.\n  * <p>\n  * LocalDate differs from DateMidnight in that this class does not\n  * have a time zone and does not represent a single instant in time.\n \n     /**\n      * Checks if the field type specified is supported by this\n-     * local datetime and chronology.\n+     * local date and chronology.\n      * This can be used to avoid exceptions in {@link #get(DateTimeFieldType)}.\n      *\n      * @param type  a field type, usually obtained from DateTimeFieldType\n         if (type == null) {\n             return false;\n         }\n-        DateTimeField field = type.getField(getChronology());\n-        if (DATE_DURATION_TYPES.contains(type.getDurationType()) ||\n-            field.getDurationField().getUnitMillis() >= getChronology().days().getUnitMillis()) {\n-            return field.isSupported();\n-        }\n-        return false;\n+        return isSupported(type.getDurationType());\n     }\n \n     /**\n      * Checks if the duration type specified is supported by this\n-     * local datetime and chronology.\n+     * local date and chronology.\n      *\n      * @param type  a duration type, usually obtained from DurationFieldType\n      * @return true if the field type is supported\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets the milliseconds of the datetime instant from the Java epoch\n+     * Gets the local milliseconds from the Java epoch\n      * of 1970-01-01T00:00:00 (not fixed to any specific time zone).\n      * \n      * @return the number of milliseconds since 1970-01-01T00:00:00\n     }\n \n     /**\n-     * Gets the chronology of the datetime.\n+     * Gets the chronology of the date.\n      * \n-     * @return the Chronology that the datetime is using\n+     * @return the Chronology that the date is using\n      */\n     public Chronology getChronology() {\n         return iChronology;\n      * Unsupported fields are ignored.\n      * If the partial is null, then <code>this</code> is returned.\n      *\n-     * @param partial  the partial set of fields to apply to this datetime, null ignored\n-     * @return a copy of this datetime with a different set of fields\n+     * @param partial  the partial set of fields to apply to this date, null ignored\n+     * @return a copy of this date with a different set of fields\n      * @throws IllegalArgumentException if any value is invalid\n      */\n     public LocalDate withFields(ReadablePartial partial) {\n      *\n      * @param fieldType  the field type to set, not null\n      * @param value  the value to set\n-     * @return a copy of this datetime with the field set\n+     * @return a copy of this date with the field set\n      * @throws IllegalArgumentException if the field is null or unsupported\n      */\n     public LocalDate withField(DateTimeFieldType fieldType, int value) {\n      *\n      * @param fieldType  the field type to add to, not null\n      * @param amount  the amount to add\n-     * @return a copy of this datetime with the field updated\n+     * @return a copy of this date with the field updated\n      * @throws IllegalArgumentException if the field is null or unsupported\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDate withFieldAdded(DurationFieldType fieldType, int amount) {\n         if (fieldType == null) {\n      *\n      * @param period  the period to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n-     * @return a copy of this datetime with the period added\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @return a copy of this date with the period added\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDate withPeriodAdded(ReadablePeriod period, int scalar) {\n         if (period == null || scalar == 0) {\n      * like {@link #plusYears(int)}.\n      * Unsupported fields are ignored.\n      *\n-     * @param period  the duration to add to this one, null means zero\n-     * @return a copy of this LocalDate with the period added\n-     * @throws ArithmeticException if the new LocalDate exceeds the capacity of a long\n+     * @param period  the period to add to this one, null means zero\n+     * @return a copy of this date with the period added\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDate plus(ReadablePeriod period) {\n         return withPeriodAdded(period, 1);\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of this LocalDate with the specified period take away.\n+     * Gets a copy of this LocalDate with the specified period taken away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n      *\n      * @param period  the period to reduce this instant by\n      * @return a copy of this LocalDate with the period taken away\n-     * @throws ArithmeticException if the new LocalDate exceeds the capacity of a long\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDate minus(ReadablePeriod period) {\n         return withPeriodAdded(period, -1);\n         }\n         \n         /**\n-         * Gets the milliseconds of the datetime that this property is linked to.\n+         * Gets the milliseconds of the date that this property is linked to.\n          * \n          * @return the milliseconds\n          */\n         }\n         \n         /**\n-         * Gets the LocalDate being used.\n+         * Gets the LocalDate object linked to this property.\n          * \n-         * @return the LocalDate\n+         * @return the linked LocalDate\n          */\n         public LocalDate getLocalDate() {\n             return iInstant;\n         \n         /**\n          * Adds to this field, possibly wrapped, in a copy of this LocalDate.\n-         * A wrapped operation only changes this field.\n+         * A field wrapped operation only changes this field.\n          * Thus 31st January plusWrapField one day goes to the 1st January.\n          * <p>\n          * The LocalDate attached to this property is unchanged by this call.\n--- a/JodaTime/src/java/org/joda/time/LocalDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/LocalDateTime.java\n      * @return a LocalDate with the same date and chronology\n      */\n     public LocalDate getDate() {\n-        return new LocalDate(\n-                getYear(), getMonthOfYear(), getDayOfMonth(), getChronology());\n-    }\n-\n-//    /**\n-//     * Converts this object to a LocalTime with the same time and chronology.\n-//     * \n-//     * @return a LocalTime with the same time and chronology\n-//     */\n-//    public LocalTime getTime() {\n-//        return new LocalTime(\n-//                getHourOfDay(), getMinuteOfHour(),\n-//                getSecondOfMinute(), getMillisOfSecond(), getChronology());\n-//    }\n+        return new LocalDate(getLocalMillis(), getChronology());\n+    }\n+\n+    /**\n+     * Converts this object to a LocalTime with the same time and chronology.\n+     * \n+     * @return a LocalTime with the same time and chronology\n+     */\n+    public LocalTime getTime() {\n+        return new LocalTime(getLocalMillis(), getChronology());\n+    }\n \n     //-----------------------------------------------------------------------\n     /**\n      * @param amount  the amount to add\n      * @return a copy of this datetime with the field updated\n      * @throws IllegalArgumentException if the value is null or invalid\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDateTime withFieldAdded(DurationFieldType fieldType, int amount) {\n         if (fieldType == null) {\n      * @param durationToAdd  the duration to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n      * @return a copy of this datetime with the duration added\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDateTime withDurationAdded(ReadableDuration durationToAdd, int scalar) {\n         if (durationToAdd == null || scalar == 0) {\n      * @param period  the period to add to this one, null means zero\n      * @param scalar  the amount of times to add, such as -1 to subtract once\n      * @return a copy of this datetime with the period added\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDateTime withPeriodAdded(ReadablePeriod period, int scalar) {\n         if (period == null || scalar == 0) {\n      * \n      * @param duration  the duration to add to this one, null means zero\n      * @return a copy of this datetime with the duration added\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDateTime plus(ReadableDuration duration) {\n         return withDurationAdded(duration, 1);\n      * Adding one field is best achieved using methods\n      * like {@link #plusYears(int)}.\n      * \n-     * @param period  the duration to add to this one, null means zero\n+     * @param period  the period to add to this one, null means zero\n      * @return a copy of this datetime with the period added\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDateTime plus(ReadablePeriod period) {\n         return withPeriodAdded(period, 1);\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Gets a copy of this datetime with the specified duration take away.\n+     * Gets a copy of this datetime with the specified duration taken away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * \n      * @param duration  the duration to reduce this instant by\n      * @return a copy of this datetime with the duration taken away\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDateTime minus(ReadableDuration duration) {\n         return withDurationAdded(duration, -1);\n     }\n \n     /**\n-     * Gets a copy of this datetime with the specified period take away.\n+     * Gets a copy of this datetime with the specified period taken away.\n      * <p>\n      * If the amount is zero or null, then <code>this</code> is returned.\n      * <p>\n      * \n      * @param period  the period to reduce this instant by\n      * @return a copy of this datetime with the period taken away\n-     * @throws ArithmeticException if the new datetime exceeds the capacity of a long\n+     * @throws ArithmeticException if the result exceeds the internal capacity\n      */\n     public LocalDateTime minus(ReadablePeriod period) {\n         return withPeriodAdded(period, -1);\n         }\n         \n         /**\n-         * Gets the datetime being used.\n+         * Gets the LocalDateTime object linked to this property.\n          * \n-         * @return the datetime\n+         * @return the linked LocalDateTime\n          */\n         public LocalDateTime getLocalDateTime() {\n             return iInstant;\n         \n         /**\n          * Adds to this field, possibly wrapped, in a copy of this LocalDateTime.\n-         * A wrapped operation only changes this field.\n+         * A field wrapped operation only changes this field.\n          * Thus 31st January plusWrapField one day goes to the 1st January.\n          * <p>\n          * The LocalDateTime attached to this property is unchanged by this call.", "timestamp": 1137541758, "metainfo": ""}