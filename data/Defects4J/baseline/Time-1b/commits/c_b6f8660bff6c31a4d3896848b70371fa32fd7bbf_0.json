{"sha": "b6f8660bff6c31a4d3896848b70371fa32fd7bbf", "log": "Can specify source directory too.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java\n+++ b/JodaTime/src/java/org/joda/time/tz/ZoneInfoCompiler.java\n     static final DateTimeOfYear START_OF_YEAR = new DateTimeOfYear();\n \n     /**\n-     * Usage: java ZoneInfoCompiler [-d outputDirectory] sourceFile ...\n+     * Launches the ZoneInfoCompiler tool.\n+     *\n+     * <pre>\n+     * Usage: java org.joda.time.tz.ZoneInfoCompiler &lt;options&gt; &lt;source files&gt;\");\n+     * where possible options include:\");\n+     *   -src &lt;directory&gt;    Specify where to read source files\");\n+     *   -dst &lt;directory&gt;    Specify where to write generated files\");\n+     * </pre>\n      */\n     public static void main(String[] args) throws Exception {\n         if (args.length == 0) {\n             return;\n         }\n \n-        String[] sources = args;\n-        String outputDir = null;\n-\n-        if (\"-d\".equals(args[0])) {\n-            if (args.length < 3) {\n+        File inputDir = null;\n+        File outputDir = null;\n+\n+        int i;\n+        for (i=0; i<args.length; i++) {\n+            try {\n+                if (\"-src\".equals(args[i])) {\n+                    inputDir = new File(args[++i]);\n+                } else if (\"-dst\".equals(args[i])) {\n+                    outputDir = new File(args[++i]);\n+                } else if (\"-?\".equals(args[i])) {\n+                    printUsage();\n+                    return;\n+                } else {\n+                    break;\n+                }\n+            } catch (IndexOutOfBoundsException e) {\n                 printUsage();\n                 return;\n             }\n-            outputDir = args[1];\n-            String[] newSources = new String[args.length - 2];\n-            System.arraycopy(args, 2, newSources, 0, newSources.length);\n-            sources = newSources;\n+        }\n+\n+        if (i >= args.length) {\n+            printUsage();\n+            return;\n+        }\n+\n+        File[] sources = new File[args.length - i];\n+        for (int j=0; i<args.length; i++,j++) {\n+            sources[j] = inputDir == null ? new File(args[i]) : new File(inputDir, args[i]);\n         }\n \n         ZoneInfoCompiler zic = new ZoneInfoCompiler();\n     }\n \n     private static void printUsage() {\n-        System.out.println\n-            (\"Usage: java ZoneInfoCompiler [-d outputDirectory] sourceFile ...\");\n+        System.out.println(\"Usage: java org.joda.time.tz.ZoneInfoCompiler <options> <source files>\");\n+        System.out.println(\"where possible options include:\");\n+        System.out.println(\"  -src <directory>    Specify where to read source files\");\n+        System.out.println(\"  -dst <directory>    Specify where to write generated files\");\n     }\n \n     /**\n      * Returns a map of ids to DateTimeZones.\n      *\n      * @param outputDir optional directory to write compiled data files to\n-     * @param sources optional list of source file paths to parse\n+     * @param sources optional list of source files to parse\n      */\n-    public Map compile(String outputDir, String[] sources) throws IOException {\n+    public Map compile(File outputDir, File[] sources) throws IOException {\n         if (sources != null) {\n             for (int i=0; i<sources.length; i++) {\n                 BufferedReader in = new BufferedReader(new FileReader(sources[i]));\n             }\n         }\n \n-        File dir = null;\n         if (outputDir != null) {\n-            dir = new File(outputDir);\n-            if (!dir.exists()) {\n+            if (!outputDir.exists()) {\n                 throw new IOException(\"Destination directory doesn't exist: \" + outputDir);\n             }\n-            if (!dir.isDirectory()) {\n+            if (!outputDir.isDirectory()) {\n                 throw new IOException(\"Destination is not a directory: \" + outputDir);\n             }\n         }\n             DateTimeZone tz = original;\n             if (test(tz.getID(), tz)) {\n                 map.put(tz.getID(), tz);\n-                if (dir != null) {\n+                if (outputDir != null) {\n                     System.out.println(\"Writing \" + tz.getID());\n-                    File file = new File(dir, tz.getID());\n+                    File file = new File(outputDir, tz.getID());\n                     if (!file.getParentFile().exists()) {\n                         file.getParentFile().mkdirs();\n                     }\n             }\n         }\n \n-        if (dir != null) {\n+        if (outputDir != null) {\n             System.out.println(\"Writing ZoneInfoMap\");\n-            File file = new File(dir, \"ZoneInfoMap\");\n+            File file = new File(outputDir, \"ZoneInfoMap\");\n             if (!file.getParentFile().exists()) {\n                 file.getParentFile().mkdirs();\n             }", "timestamp": 1071910186, "metainfo": ""}