{"sha": "392e9b25bbd48071e1c99de24b8e8c916c4e9665", "log": "Increase test coverage   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestDateTimeZone.suite());\n         suite.addTest(TestPeriodType.suite());\n //        suite.addTest(TestParseISO.suite());\n+        suite.addTest(TestDurationField.suite());\n         \n         suite.addTest(TestSerialization.suite());\n         suite.addTest(TestIllegalFieldValueException.suite());\n--- a/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTimeFieldType.java\n import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.lang.reflect.Constructor;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         assertSerialization(DateTimeFieldType.millisOfSecond());\n     }\n \n+    public void test_other() throws Exception {\n+        assertEquals(1, DateTimeFieldType.class.getDeclaredClasses().length);\n+        Class cls = DateTimeFieldType.class.getDeclaredClasses()[0];\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        Constructor con = cls.getDeclaredConstructors()[0];\n+        Object[] params = new Object[] {\n+            \"other\", new Byte((byte) 128), DurationFieldType.hours(), DurationFieldType.months()};\n+        DateTimeFieldType type = (DateTimeFieldType) con.newInstance(params);\n+        \n+        assertEquals(\"other\", type.getName());\n+        assertSame(DurationFieldType.hours(), type.getDurationType());\n+        assertSame(DurationFieldType.months(), type.getRangeDurationType());\n+        try {\n+            type.getField(Chronology.getCopticUTC());\n+            fail();\n+        } catch (InternalError ex) {}\n+        DateTimeFieldType result = doSerialization(type);\n+        assertEquals(type.getName(), result.getName());\n+        assertNotSame(type, result);\n+    }\n+\n     //-----------------------------------------------------------------------\n-    public void assertSerialization(DateTimeFieldType type) throws Exception {\n+    private void assertSerialization(DateTimeFieldType type) throws Exception {\n+        DateTimeFieldType result = doSerialization(type);\n+        assertSame(type, result);\n+    }\n+\n+    private DateTimeFieldType doSerialization(DateTimeFieldType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         ObjectInputStream ois = new ObjectInputStream(bais);\n         DateTimeFieldType result = (DateTimeFieldType) ois.readObject();\n         ois.close();\n-        \n-        assertSame(type, result);\n+        return result;\n     }\n \n }\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestDurationField.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * This class is a Junit unit test for DurationField.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestDurationField extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestDurationField.class);\n+    }\n+\n+    public TestDurationField(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+    }\n+\n+    protected void tearDown() throws Exception {\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_subtract() throws Exception {\n+        DurationField fld = ISOChronology.getInstanceUTC().millis();\n+        assertEquals(900, fld.subtract(1000L, 100));\n+        assertEquals(900L, fld.subtract(1000L, 100L));\n+        assertEquals((1000L - Integer.MAX_VALUE), fld.subtract(1000L, Integer.MAX_VALUE));\n+        assertEquals((1000L - Integer.MIN_VALUE), fld.subtract(1000L, Integer.MIN_VALUE));\n+        assertEquals((1000L - Long.MAX_VALUE), fld.subtract(1000L, Long.MAX_VALUE));\n+        try {\n+            fld.subtract(-1000L, Long.MIN_VALUE);\n+            fail();\n+        } catch (ArithmeticException ex) {}\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/TestDurationFieldType.java\n+++ b/JodaTime/src/test/org/joda/time/TestDurationFieldType.java\n import java.io.ByteArrayOutputStream;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.lang.reflect.Constructor;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         assertSerialization(DurationFieldType.millis());\n     }\n \n+    public void test_other() throws Exception {\n+        assertEquals(1, DurationFieldType.class.getDeclaredClasses().length);\n+        Class cls = DurationFieldType.class.getDeclaredClasses()[0];\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        Constructor con = cls.getDeclaredConstructors()[0];\n+        Object[] params = new Object[] {\"other\", new Byte((byte) 128)};\n+        DurationFieldType type = (DurationFieldType) con.newInstance(params);\n+        \n+        assertEquals(\"other\", type.getName());\n+        try {\n+            type.getField(Chronology.getCopticUTC());\n+            fail();\n+        } catch (InternalError ex) {}\n+        DurationFieldType result = doSerialization(type);\n+        assertEquals(type.getName(), result.getName());\n+        assertNotSame(type, result);\n+    }\n+\n     //-----------------------------------------------------------------------\n-    public void assertSerialization(DurationFieldType type) throws Exception {\n+    private void assertSerialization(DurationFieldType type) throws Exception {\n+        DurationFieldType result = doSerialization(type);\n+        assertSame(type, result);\n+    }\n+\n+    private DurationFieldType doSerialization(DurationFieldType type) throws Exception {\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n         ObjectOutputStream oos = new ObjectOutputStream(baos);\n         oos.writeObject(type);\n         ObjectInputStream ois = new ObjectInputStream(bais);\n         DurationFieldType result = (DurationFieldType) ois.readObject();\n         ois.close();\n-        \n-        assertSame(type, result);\n+        return result;\n     }\n \n }", "timestamp": 1121297913, "metainfo": ""}