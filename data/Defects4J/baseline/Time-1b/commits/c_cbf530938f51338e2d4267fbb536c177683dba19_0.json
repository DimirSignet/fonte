{"sha": "cbf530938f51338e2d4267fbb536c177683dba19", "log": "Added method for supporting special parsing of two digit years.   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/DateTimeFormatterBuilder.java\n     }\n \n     /**\n+     * Instructs the printer to emit a numeric year field which always prints\n+     * and parses two digits. A pivot year is used during parsing to determine\n+     * the range of supported years as <code>(pivot - 50) .. (pivot + 49)</code>.\n+     *\n+     * <pre>\n+     * pivot   supported range   00 is   20 is   40 is   60 is   80 is\n+     * ---------------------------------------------------------------\n+     * 1950      1900..1999      1900    1920    1940    1960    1980\n+     * 1975      1925..2024      2000    2020    1940    1960    1980\n+     * 2000      1950..2049      2000    2020    2040    1960    1980\n+     * 2025      1975..2074      2000    2020    2040    2060    1980\n+     * 2050      2000..2099      2000    2020    2040    2060    2080\n+     * </pre>\n+     *\n+     * @param pivot pivot year to use when parsing\n+     * @return this DateTimeFormatterBuilder\n+     */\n+    public DateTimeFormatterBuilder appendTwoDigitYear(int pivot) {\n+        return append0(new TwoDigitYear(iChrono, iChronoUTC.year(), pivot));\n+    }\n+\n+    /**\n      * Instructs the printer to emit a numeric yearOfEra field.\n      *\n      * @param minDigits minumum number of digits to <i>print</i>\n                 for (int i=iMinPrintedDigits; --i>=0; ) {\n                     out.write('\\ufffd');\n                 }\n+            }\n+        }\n+    }\n+\n+    private static class TwoDigitYear extends AbstractFormatter\n+        implements DateTimeFormatter\n+    {\n+        private final DateTimeField iField;\n+        private final int iPivot;\n+\n+        TwoDigitYear(Chronology chrono, DateTimeField field, int pivot) {\n+            super(chrono);\n+            iField = field;\n+            iPivot = pivot;\n+        }\n+\n+        public int estimateParsedLength() {\n+            return 2;\n+        }\n+\n+        public int parseInto(DateTimeParserBucket bucket, String text, int position) {\n+            int limit = Math.min(2, text.length() - position);\n+            if (limit < 2) {\n+                return ~position;\n+            }\n+\n+            int year;\n+            char c = text.charAt(position);\n+            if (c < '0' || c > '9') {\n+                return ~position;\n+            }\n+            year = c - '0';\n+            c = text.charAt(position + 1);\n+            if (c < '0' || c > '9') {\n+                return ~position;\n+            }\n+            year = ((year << 3) + (year << 1)) + c - '0';\n+\n+            int low = iPivot - 50;\n+\n+            int t;\n+            if (low >= 0) {\n+                t = low % 100;\n+            } else {\n+                t = 99 + ((low + 1) % 100);\n+            }\n+\n+            year += low + ((year < t) ? 100 : 0) - t;\n+\n+            bucket.saveField(iField, year);\n+            return position + 2;\n+        }\n+        \n+        public int estimatePrintedLength() {\n+            return 2;\n+        }\n+\n+        public void printTo(StringBuffer buf, long instant,\n+                            DateTimeZone zone, long instantLocal) {\n+            int year = getTwoDigitYear(instantLocal);\n+            if (year < 0) {\n+                buf.append('\\ufffd');\n+                buf.append('\\ufffd');\n+            } else {\n+                FormatUtils.appendPaddedInteger(buf, year, 2);\n+            }\n+        }\n+\n+        public void printTo(Writer out, long instant,\n+                            DateTimeZone zone, long instantLocal) throws IOException {\n+            int year = getTwoDigitYear(instantLocal);\n+            if (year < 0) {\n+                out.write('\\ufffd');\n+                out.write('\\ufffd');\n+            } else {\n+                FormatUtils.writePaddedInteger(out, year, 2);\n+            }\n+        }\n+\n+        private int getTwoDigitYear(long instantLocal) {\n+            try {\n+                int year = iField.get(instantLocal);\n+                if (year < 0) {\n+                    year = -year;\n+                }\n+                return year % 100;\n+            } catch (RuntimeException e) {\n+                return -1;\n             }\n         }\n     }", "timestamp": 1086413102, "metainfo": ""}