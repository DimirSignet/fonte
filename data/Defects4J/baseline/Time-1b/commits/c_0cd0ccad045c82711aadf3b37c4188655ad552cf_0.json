{"sha": "0cd0ccad045c82711aadf3b37c4188655ad552cf", "log": "Investigate Period calculation at end of month  See #31", "commit": "\n--- a/src/main/java/org/joda/time/Period.java\n+++ b/src/main/java/org/joda/time/Period.java\n     }\n \n     /**\n-     * Creates a period from the given interval endpoints using the standard\n-     * set of fields.\n+     * Creates a period between the given instants using the standard set of fields.\n+     * <p>\n+     * Most calculations performed by this method have obvious results.\n+     * The special case is where the calculation is from a \"long\" month to a \"short\" month.\n+     * Here, the result favours increasing the months field rather than the days.\n+     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.\n+     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days\n+     * (exposed as 4 weeks and 2 days).\n+     * The results are explained by considering that the start date plus the\n+     * calculated period result in the end date.\n      *\n      * @param startInstant  interval start, null means now\n      * @param endInstant  interval end, null means now\n     }\n \n     /**\n-     * Creates a period from the given interval endpoints.\n+     * Creates a period between the given instants.\n+     * <p>\n+     * Most calculations performed by this method have obvious results.\n+     * The special case is where the calculation is from a \"long\" month to a \"short\" month.\n+     * Here, the result favours increasing the months field rather than the days.\n+     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.\n+     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days.\n+     * The results are explained by considering that the start date plus the\n+     * calculated period result in the end date.\n      *\n      * @param startInstant  interval start, null means now\n      * @param endInstant  interval end, null means now\n      * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a definition.\n      * Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous.\n      * <p>\n+     * Most calculations performed by this method have obvious results.\n+     * The special case is where the calculation is from a \"long\" month to a \"short\" month.\n+     * Here, the result favours increasing the months field rather than the days.\n+     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.\n+     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days\n+     * (exposed as 4 weeks and 2 days).\n+     * The results are explained by considering that the start date plus the\n+     * calculated period result in the end date.\n+     * <p>\n      * An alternative way of constructing a Period from two Partials\n      * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.\n      * That method handles all kinds of partials.\n      * The two partials must also both be contiguous - see\n      * {@link DateTimeUtils#isContiguous(ReadablePartial)} for a definition.\n      * Both <code>LocalDate</code> and <code>LocalTime</code> are contiguous.\n+     * <p>\n+     * Most calculations performed by this method have obvious results.\n+     * The special case is where the calculation is from a \"long\" month to a \"short\" month.\n+     * Here, the result favours increasing the months field rather than the days.\n+     * For example, 2013-01-31 to 2013-02-28 is treated as one whole month.\n+     * By contrast, 2013-01-31 to 2013-03-30 is treated as one month and 30 days.\n+     * The results are explained by considering that the start date plus the\n+     * calculated period result in the end date.\n      * <p>\n      * An alternative way of constructing a Period from two Partials\n      * is {@link #fieldDifference(ReadablePartial, ReadablePartial)}.\n--- a/src/test/java/org/joda/time/TestPeriod_Constructors.java\n+++ b/src/test/java/org/joda/time/TestPeriod_Constructors.java\n         assertEquals(6, test.getMillis());\n     }\n \n+    //-------------------------------------------------------------------------\n+    public void testConstructor_trickyDifferences_RI_RI_toFeb_standardYear() throws Throwable {\n+        DateTime dt1 = new DateTime(2011, 1, 1, 0, 0);\n+        DateTime dt2 = new DateTime(2011, 2, 28, 0, 0);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 1, 3, 6, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_RI_RI_toFeb_leapYear() throws Throwable {\n+        DateTime dt1 = new DateTime(2012, 1, 1, 0, 0);\n+        DateTime dt2 = new DateTime(2012, 2, 29, 0, 0);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 1, 4, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_RI_RI_toFeb_exactMonths() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 12, 28, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 2, 28, 0, 0);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth1() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 12, 29, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 2, 28, 0, 0);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth2() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 12, 30, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 2, 28, 0, 0);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_RI_RI_toFeb_endOfMonth3() throws Throwable {\n+        DateTime dt1 = new DateTime(2004, 12, 31, 0, 0);\n+        DateTime dt2 = new DateTime(2005, 2, 28, 0, 0);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth1() throws Throwable {\n+        DateTime dt1 = new DateTime(2013, 1, 31, 0, 0);\n+        DateTime dt2 = new DateTime(2013, 3, 30, 0, 0);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 1, 4, 2, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_RI_RI_toMar_endOfMonth2() throws Throwable {\n+        DateTime dt1 = new DateTime(2013, 1, 31, 0, 0);\n+        DateTime dt2 = new DateTime(2013, 3, 31, 0, 0);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    //-------------------------------------------------------------------------\n+    public void testConstructor_trickyDifferences_LD_LD_toFeb_standardYear() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2011, 1, 1);\n+        LocalDate dt2 = new LocalDate(2011, 2, 28);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 1, 3, 6, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_LD_LD_toFeb_leapYear() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2012, 1, 1);\n+        LocalDate dt2 = new LocalDate(2012, 2, 29);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 1, 4, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_LD_LD_toFeb_exactMonths() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2004, 12, 28);\n+        LocalDate dt2 = new LocalDate(2005, 2, 28);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth1() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2004, 12, 29);\n+        LocalDate dt2 = new LocalDate(2005, 2, 28);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth2() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2004, 12, 30);\n+        LocalDate dt2 = new LocalDate(2005, 2, 28);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_LD_LD_toFeb_endOfMonth3() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2004, 12, 31);\n+        LocalDate dt2 = new LocalDate(2005, 2, 28);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth1() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2013, 1, 31);\n+        LocalDate dt2 = new LocalDate(2013, 3, 30);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 1, 4, 2, 0, 0, 0, 0), test);\n+    }\n+\n+    public void testConstructor_trickyDifferences_LD_LD_toMar_endOfMonth2() throws Throwable {\n+        LocalDate dt1 = new LocalDate(2013, 1, 31);\n+        LocalDate dt2 = new LocalDate(2013, 3, 31);\n+        Period test = new Period(dt1, dt2);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(new Period(0, 2, 0, 0, 0, 0, 0, 0), test);\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testFactoryFieldDifference1() throws Throwable {\n         YearMonthDay start = new YearMonthDay(2005, 4, 9);", "timestamp": 1371380178, "metainfo": ""}