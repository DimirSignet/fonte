{"sha": "9f2059f03ebbcc03927f9ae9043aaa5b1527839b", "log": "Test MutableDateTime   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/MutableDateTime.java\n+++ b/JodaTime/src/java/org/joda/time/MutableDateTime.java\n import org.joda.time.convert.ConverterManager;\n import org.joda.time.convert.DurationConverter;\n import org.joda.time.convert.InstantConverter;\n+import org.joda.time.field.FieldUtils;\n import org.joda.time.format.ISODateTimeFormat;\n import org.joda.time.property.ReadWritableInstantFieldProperty;\n \n     }\n \n     /**\n-     * Add an amount of time to the datetime.\n-     * \n-     * @param duration  duration to add.\n-     */\n-    public void add(final ReadableDuration duration) {\n-        duration.addInto(this, 1);\n-    }\n-\n-    /**\n-     * Add an amount of time to the datetime.\n-     * \n+     * Adds an amount of time to this instant.\n+     * <p>\n+     * If the resulting value is too large for the implementation,\n+     * an exception is thrown.\n+     * <p>\n+     * The recognised object types are defined in {@link ConverterManager} and\n+     * include ReadableDuration, String and Long.\n+     *\n+     * @param duration  an object representing a duration\n+     * @throws IllegalArgumentException if the duration is invalid\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    public void add(final Object duration) {\n+        add(duration, 1);\n+    }\n+\n+    /**\n+     * Adds an amount of time to this instant specifying how many times to add.\n+     * <p>\n+     * If the resulting value is too large for the implementation,\n+     * an exception is thrown.\n+     * <p>\n+     * The recognised object types are defined in {@link ConverterManager} and\n+     * include ReadableDuration, String and Long.\n+     *\n      * @param duration  duration to add.\n      * @param scalar  direction and amount to add, which may be negative\n-     */\n-    public void add(final ReadableDuration duration, final int scalar) {\n-        duration.addInto(this, scalar);\n-    }\n-\n-    /**\n-     * Add an amount of time to the datetime.\n-     * <p>\n-     * The recognised object types are defined in {@link ConverterManager} and\n-     * include ReadableDuration, and Long.\n-     * \n-     * @param duration  an object representing a duration\n-     */\n-    public void add(final Object duration) {\n+     * @throws IllegalArgumentException if the duration is invalid\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    public void add(final Object duration, final int scalar) {\n         if (duration instanceof ReadableDuration) {\n-            add((ReadableDuration) duration, 1);\n+            ReadableDuration d = (ReadableDuration) duration;\n+            d.addInto(this, scalar);\n         } else {\n             DurationConverter converter = ConverterManager.getInstance().getDurationConverter(duration);\n-            add(converter.getDurationMillis(duration));\n+            add(FieldUtils.safeMultiply(converter.getDurationMillis(duration), scalar));\n         }\n     }\n \n     // Field based\n     //-----------------------------------------------------------------------\n     /**\n-     * Set a value in the specified field.\n-     * This could be used to set a field using a different Chronology.\n+     * Sets the value of the specified field.\n+     * It is permitted to use a field from another Chronology.\n      * For example:\n      * <pre>\n      * MutableDateTime dt = new MutableDateTime();\n     }\n \n     /**\n-     * Add a value to the specified field.\n-     * This could be used to set a field using a different Chronology.\n+     * Adds to the value to the specified field.\n+     * It is permitted to use a field from another Chronology.\n      * For example:\n      * <pre>\n      * MutableDateTime dt = new MutableDateTime();\n      * dt.add(GJChronology.getInstance().year(), 2);\n      * </pre>\n+     * Where possible the {@link #add(DurationField, int)} is a better choice as\n+     * it is more explicit about what is being added.\n      * \n      * @param field  the DateTimeField to use\n      * @param value the value\n     }\n \n     /**\n+     * Adds the to the datetime the amount represented by the duration multiplied by the value.\n+     * It is permitted to use a field from another Chronology.\n+     * For example:\n+     * <pre>\n+     * MutableDateTime dt = new MutableDateTime();\n+     * dt.add(GJChronology.getInstance().years(), 2);\n+     * </pre>\n+     * \n+     * @param field  the DurationField to use\n+     * @param value the value\n+     * @throws IllegalArgumentException if the field is null\n+     * @throws IllegalArgumentException if the value is invalid\n+     */\n+    public void add(final DurationField field, final int value) {\n+        if (field == null) {\n+            throw new IllegalArgumentException(\"The DurationField must not be null\");\n+        }\n+        setMillis(field.add(getMillis(), value));\n+    }\n+\n+    /**\n      * Add a value to the specified field, wrapping within that field.\n-     * This could be used to set a field using a different Chronology.\n+     * It is permitted to use a field from another Chronology.\n      * For example:\n      * <pre>\n      * MutableDateTime dt = new MutableDateTime();\n--- a/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n+++ b/JodaTime/src/java/org/joda/time/ReadWritableInstant.java\n     void setRoundingField(DateTimeField field, int mode);\n \n     /**\n-     * Set the value as the number of milliseconds since\n+     * Sets the value as the number of milliseconds since\n      * the epoch, 1970-01-01T00:00:00Z.\n      * \n      * @param instant  the milliseconds since 1970-01-01T00:00:00Z to set the\n     void setMillis(long instant);\n \n     /**\n-     * Set the value from an Object representing an instant.\n+     * Sets the value from an Object representing an instant.\n      * <p>\n      * The recognised object types are defined in\n      * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n     void setMillis(Object instant);\n \n     /**\n-     * Set the chronology of the datetime, which has no effect if not\n-     * applicable.\n+     * Sets the chronology of the datetime, which has no effect if not applicable.\n      * \n      * @param chronology  the chronology to use, null means ISOChronology in default zone\n      * @throws IllegalArgumentException if the value is invalid\n \n     //-----------------------------------------------------------------------\n     /**\n-     * Add a number of millis to the value.\n+     * Adds a number of millis to the value.\n      * <p>\n      * If the resulting value is too large for millis, seconds\n      * will change and so on unless it is too large for the\n     void add(long duration);\n \n     /**\n-     * Add an amount of time.\n-     * <p>\n-     * If the resulting value is too large for the implementation,\n-     * an exception is thrown.\n-     *\n-     * @param duration  duration to add.\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    void add(ReadableDuration duration);\n-\n-    /**\n-     * Add an amount of time.\n-     * <p>\n-     * If the resulting value is too large for the implementation,\n-     * an exception is thrown.\n-     *\n-     * @param duration  duration to add.\n-     * @param scalar direction and amount to add, which may be negative\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    void add(ReadableDuration duration, int scalar);\n-\n-    /**\n-     * Add an amount of time, either a ReadableDuration or Long (millis).\n+     * Adds an amount of time to this instant.\n      * <p>\n      * If the resulting value is too large for the implementation,\n      * an exception is thrown.\n      * include ReadableDuration, String and Long.\n      *\n      * @param duration  an object representing a duration\n-     * @throws IllegalArgumentException if the value is invalid\n+     * @throws IllegalArgumentException if the duration is invalid\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n      */\n     void add(Object duration);\n \n+    /**\n+     * Adds an amount of time to this instant specifying how many times to add.\n+     * <p>\n+     * If the resulting value is too large for the implementation,\n+     * an exception is thrown.\n+     * <p>\n+     * The recognised object types are defined in\n+     * {@link org.joda.time.convert.ConverterManager ConverterManager} and\n+     * include ReadableDuration, String and Long.\n+     *\n+     * @param duration  an object representing a duration\n+     * @param scalar  direction and amount to add, which may be negative\n+     * @throws IllegalArgumentException if the duration is invalid\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    void add(Object duration, int scalar);\n+\n     //-----------------------------------------------------------------------\n     /**\n-     * Set the value of one of the fields of a datetime.\n+     * Sets the value of one of the fields of a datetime.\n      * <p>\n      * DateTimeField instances are generally obtained from a {@link Chronology} subclass.\n      * However, an application can create its own DateTimeField to manipulate the\n     void set(DateTimeField field, int value);\n     \n     /**\n-     * Add to the value of one of the fields of a datetime.\n+     * Adds to the instant specifying the duration and multiple.\n+     * <p>\n+     * DurationField instances are generally obtained from a {@link Chronology} subclass.\n+     * However, an application can create its own DurationField to manipulate the\n+     * date time millis in new ways.\n+     *\n+     * @param field  a DurationField instance, usually obtained from a Chronology\n+     * @param value  the number of times to add the duration\n+     * @throws IllegalArgumentException if the field is null\n+     * @throws ArithmeticException if the result exceeds the capacity of the instant\n+     */\n+    void add(DurationField field, int value);\n+    \n+    /**\n+     * Adds to the value of one of the fields of a datetime, wrapping within that field.\n+     * <p>\n+     * For example, 2002-03-01 add 14 months gives 2003-05-01. But 2002-03-01 add wrapped\n+     * 14 months gives 2002-05-01. This is similar to the <code>roll</code> method on Calendar.\n      * <p>\n      * DateTimeField instances are generally obtained from a {@link Chronology} subclass.\n      * However, an application can create its own DateTimeField to manipulate the\n      * date time millis in new ways.\n      *\n      * @param field  a DateTimeField instance, usually obtained from a Chronology\n-     * @param value  the value of that field for the millis set in the implementation\n-     * @throws IllegalArgumentException if the field is null\n-     * @throws IllegalArgumentException if the value is invalid\n-     */\n-    void add(DateTimeField field, int value);\n-    \n-    /**\n-     * Add to the value of one of the fields of a datetime, wrapping within that field.\n-     * <p>\n-     * For example, 2002-03-01 add 14 months gives 2003-05-01. But 2002-03-01 add wrapped\n-     * 14 months gives 2002-05-01. This is similar to the <code>roll</code> method on Calendar.\n-     * <p>\n-     * DateTimeField instances are generally obtained from a {@link Chronology} subclass.\n-     * However, an application can create its own DateTimeField to manipulate the\n-     * date time millis in new ways.\n-     *\n-     * @param field  a DateTimeField instance, usually obtained from a Chronology\n-     * @param value  the value of that field for the millis set in the implementation\n+     * @param value  the number of times to add the duration\n      * @throws IllegalArgumentException if the field is null\n      * @throws IllegalArgumentException if the value is invalid\n      */\n--- a/JodaTime/src/test/org/joda/time/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/TestAll.java\n         suite.addTest(TestDateTime_Basics.suite());\n         suite.addTest(TestDateTime_Properties.suite());\n         \n+        suite.addTest(TestMutableDateTime_Constructors.suite());\n+        suite.addTest(TestMutableDateTime_Basics.suite());\n+        suite.addTest(TestMutableDateTime_Sets.suite());\n+        suite.addTest(TestMutableDateTime_Adds.suite());\n+        \n         suite.addTest(TestDateMidnight_Constructors.suite());\n         suite.addTest(TestDateMidnight_Basics.suite());\n         suite.addTest(TestDateMidnight_Properties.suite());\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Adds.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a JUnit test for MutableDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDateTime_Adds extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Adds.class);\n+    }\n+\n+    public TestMutableDateTime_Adds(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_long1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(123456L);\n+        assertEquals(TEST_TIME1 + 123456L, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_Object1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(new Long(123456L));\n+        assertEquals(TEST_TIME1 + 123456L, test.getMillis());\n+    }\n+\n+    public void testAdd_Object2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((Object) null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    public void testAdd_Object3() {\n+        Duration d = new Duration(DurationType.getYearMonthType(), 1, 1, 0, 1, 1, 1, 1, 1);\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+        test.add(d);\n+        assertEquals(\"2003-07-10T06:07:08.009+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_Object_int1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(new Long(123L), -2);\n+        assertEquals(TEST_TIME1 + (-2 * 123L), test.getMillis());\n+    }\n+\n+    public void testAdd_Object_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add((ReadableDuration) null, 1);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testAdd_Object_int3() {\n+        Duration d = new Duration(DurationType.getYearMonthType(), 1, 1, 0, 1, 1, 1, 1, 1);\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+        test.add(d, -2);\n+        assertEquals(\"2000-04-07T03:04:05.006+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_DateTimeField_int1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(ISOChronology.getInstance().year(), 8);\n+        assertEquals(2010, test.getYear());\n+    }\n+\n+    public void testAdd_DateTimeField_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.add((DateTimeField) null, 2010);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAdd_DurationField_int1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.add(ISOChronology.getInstance().years(), 8);\n+        assertEquals(2010, test.getYear());\n+    }\n+\n+    public void testAdd_DurationField_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.add((DurationField) null, 2010);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddYears_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addYears(8);\n+        assertEquals(\"2010-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMonths_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addMonths(6);\n+        assertEquals(\"2002-12-09T05:06:07.008Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddDays_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addDays(17);\n+        assertEquals(\"2002-06-26T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddWeekyears_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addWeekyears(-1);\n+        assertEquals(\"2001-06-10T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddWeeks_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addWeeks(-21);\n+        assertEquals(\"2002-01-13T05:06:07.008Z\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddHours_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addHours(13);\n+        assertEquals(\"2002-06-09T18:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMinutes_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addMinutes(13);\n+        assertEquals(\"2002-06-09T05:19:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddSeconds_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addSeconds(13);\n+        assertEquals(\"2002-06-09T05:06:20.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddMillis_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.addMillis(13);\n+        assertEquals(\"2002-06-09T05:06:07.021+01:00\", test.toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Basics.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.AbstractChronology;\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a JUnit test for MutableDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDateTime_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Basics.class);\n+    }\n+\n+    public TestMutableDateTime_Basics(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGet() {\n+        MutableDateTime test = new MutableDateTime();\n+        assertEquals(1, test.get(ISOChronology.getInstance().era()));\n+        assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));\n+        assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().year()));\n+        assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));\n+        assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().weekyear()));\n+        assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear()));\n+        assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek()));\n+        assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfDay()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().clockhourOfHalfday()));\n+        assertEquals(1, test.get(ISOChronology.getInstance().hourOfDay()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().minuteOfHour()));\n+        assertEquals(60, test.get(ISOChronology.getInstance().minuteOfDay()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().secondOfMinute()));\n+        assertEquals(60 * 60, test.get(ISOChronology.getInstance().secondOfDay()));\n+        assertEquals(0, test.get(ISOChronology.getInstance().millisOfSecond()));\n+        assertEquals(60 * 60 * 1000, test.get(ISOChronology.getInstance().millisOfDay()));\n+        try {\n+            test.get(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetMethods() {\n+        MutableDateTime test = new MutableDateTime();\n+        \n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        \n+        assertEquals(1, test.getEra());\n+        assertEquals(20, test.getCenturyOfEra());\n+        assertEquals(2, test.getYearOfCentury());\n+        assertEquals(2002, test.getYearOfEra());\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(2002, test.getWeekyear());\n+        assertEquals(23, test.getWeekOfWeekyear());\n+        assertEquals(7, test.getDayOfWeek());\n+        assertEquals(160, test.getDayOfYear());\n+        assertEquals(1, test.getHourOfDay());\n+        assertEquals(0, test.getMinuteOfHour());\n+        assertEquals(60, test.getMinuteOfDay());\n+        assertEquals(0, test.getSecondOfMinute());\n+        assertEquals(60 * 60, test.getSecondOfDay());\n+        assertEquals(0, test.getMillisOfSecond());\n+        assertEquals(60 * 60 * 1000, test.getMillisOfDay());\n+    }\n+\n+    public void testEqualsHashCode() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME1);\n+        assertEquals(true, test1.equals(test2));\n+        assertEquals(true, test2.equals(test1));\n+        assertEquals(true, test1.equals(test1));\n+        assertEquals(true, test2.equals(test2));\n+        assertEquals(true, test1.hashCode() == test2.hashCode());\n+        assertEquals(true, test1.hashCode() == test1.hashCode());\n+        assertEquals(true, test2.hashCode() == test2.hashCode());\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(false, test1.equals(test3));\n+        assertEquals(false, test2.equals(test3));\n+        assertEquals(false, test3.equals(test1));\n+        assertEquals(false, test3.equals(test2));\n+        assertEquals(false, test1.hashCode() == test3.hashCode());\n+        assertEquals(false, test2.hashCode() == test3.hashCode());\n+        \n+        assertEquals(false, test1.equals(\"Hello\"));\n+        assertEquals(true, test1.equals(new MockInstant()));\n+        assertEquals(false, test1.equals(new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance())));\n+        assertEquals(true, new MutableDateTime(TEST_TIME1, new MockEqualsChronology()).equals(new MutableDateTime(TEST_TIME1, new MockEqualsChronology())));\n+        assertEquals(false, new MutableDateTime(TEST_TIME1, new MockEqualsChronology()).equals(new MutableDateTime(TEST_TIME1, ISOChronology.getInstance())));\n+    }\n+    \n+    class MockInstant extends AbstractInstant {\n+        public String toString() {\n+            return null;\n+        }\n+        public long getMillis() {\n+            return TEST_TIME1;\n+        }\n+        public Chronology getChronology() {\n+            return ISOChronology.getInstance();\n+        }\n+    }\n+\n+    class MockEqualsChronology extends AbstractChronology {\n+        public boolean equals(Object obj) {\n+            return obj instanceof MockEqualsChronology;\n+        }\n+        public DateTimeZone getZone() {\n+            return null;\n+        }\n+        public Chronology withUTC() {\n+            return this;\n+        }\n+        public Chronology withZone(DateTimeZone zone) {\n+            return this;\n+        }\n+        public String toString() {\n+            return \"\";\n+        }\n+    }\n+\n+    public void testCompareTo() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test1a = new MutableDateTime(TEST_TIME1);\n+        assertEquals(0, test1.compareTo(test1a));\n+        assertEquals(0, test1a.compareTo(test1));\n+        assertEquals(0, test1.compareTo(test1));\n+        assertEquals(0, test1a.compareTo(test1a));\n+        \n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(-1, test1.compareTo(test2));\n+        assertEquals(+1, test2.compareTo(test1));\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(-1, test1.compareTo(test3));\n+        assertEquals(+1, test3.compareTo(test1));\n+        assertEquals(0, test3.compareTo(test2));\n+        \n+        assertEquals(+1, test2.compareTo(new MockInstant()));\n+        assertEquals(0, test1.compareTo(new MockInstant()));\n+        \n+        try {\n+            test1.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {}\n+        try {\n+            test1.compareTo(new Date());\n+            fail();\n+        } catch (ClassCastException ex) {}\n+    }\n+    \n+    public void testIsEqual() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test1a = new MutableDateTime(TEST_TIME1);\n+        assertEquals(true, test1.isEqual(test1a));\n+        assertEquals(true, test1a.isEqual(test1));\n+        assertEquals(true, test1.isEqual(test1));\n+        assertEquals(true, test1a.isEqual(test1a));\n+        \n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(false, test1.isEqual(test2));\n+        assertEquals(false, test2.isEqual(test1));\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(false, test1.isEqual(test3));\n+        assertEquals(false, test3.isEqual(test1));\n+        assertEquals(true, test3.isEqual(test2));\n+        \n+        assertEquals(false, test2.isEqual(new MockInstant()));\n+        assertEquals(true, test1.isEqual(new MockInstant()));\n+        assertEquals(false, test1.isEqual(null));\n+    }\n+    \n+    public void testIsBefore() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test1a = new MutableDateTime(TEST_TIME1);\n+        assertEquals(false, test1.isBefore(test1a));\n+        assertEquals(false, test1a.isBefore(test1));\n+        assertEquals(false, test1.isBefore(test1));\n+        assertEquals(false, test1a.isBefore(test1a));\n+        \n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(true, test1.isBefore(test2));\n+        assertEquals(false, test2.isBefore(test1));\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(true, test1.isBefore(test3));\n+        assertEquals(false, test3.isBefore(test1));\n+        assertEquals(false, test3.isBefore(test2));\n+        \n+        assertEquals(false, test2.isBefore(new MockInstant()));\n+        assertEquals(false, test1.isBefore(new MockInstant()));\n+        assertEquals(false, test1.isBefore(null));\n+    }\n+    \n+    public void testIsAfter() {\n+        MutableDateTime test1 = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime test1a = new MutableDateTime(TEST_TIME1);\n+        assertEquals(false, test1.isAfter(test1a));\n+        assertEquals(false, test1a.isAfter(test1));\n+        assertEquals(false, test1.isAfter(test1));\n+        assertEquals(false, test1a.isAfter(test1a));\n+        \n+        MutableDateTime test2 = new MutableDateTime(TEST_TIME2);\n+        assertEquals(false, test1.isAfter(test2));\n+        assertEquals(true, test2.isAfter(test1));\n+        \n+        MutableDateTime test3 = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance(PARIS));\n+        assertEquals(false, test1.isAfter(test3));\n+        assertEquals(true, test3.isAfter(test1));\n+        assertEquals(false, test3.isAfter(test2));\n+        \n+        assertEquals(true, test2.isAfter(new MockInstant()));\n+        assertEquals(false, test1.isAfter(new MockInstant()));\n+        assertEquals(false, test1.isAfter(null));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSerialization() throws Exception {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(test);\n+        byte[] bytes = baos.toByteArray();\n+        oos.close();\n+        \n+        ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        ObjectInputStream ois = new ObjectInputStream(bais);\n+        MutableDateTime result = (MutableDateTime) ois.readObject();\n+        ois.close();\n+        \n+        assertEquals(test, result);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString());\n+        \n+        test = new MutableDateTime(TEST_TIME_NOW, PARIS);\n+        assertEquals(\"2002-06-09T02:00:00.000+02:00\", test.toString());\n+    }\n+\n+    public void testToString_String() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n+        assertEquals(\"2002 01\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null));\n+    }\n+\n+    public void testToString_String_String() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME_NOW);\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"dim. 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToInstant() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        Instant result = test.toInstant();\n+        assertEquals(TEST_TIME1, result.getMillis());\n+    }\n+\n+    public void testToDateTime() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        DateTime result = test.toDateTime();\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(test.getChronology(), result.getChronology());\n+    }\n+\n+    public void testToDateTime_DateTimeZone() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(LONDON);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(test.getChronology(), result.getChronology());\n+        assertEquals(LONDON, result.getZone());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(PARIS);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(PARIS, result.getZone());\n+\n+        test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(LONDON), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(LONDON, result.getZone());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(LONDON, result.getZone());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToDateTime_Chronology() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToTrustedISOMutableDateTime() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        DateTime result = test.toTrustedISODateTime();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MockUntrustedMutableDateTime(TEST_TIME1);\n+        result = test.toTrustedISODateTime();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1, new MockUntrustedZone(\"Europe/Paris\"));\n+        result = test.toTrustedISODateTime();\n+        assertSame(DateTime.class, result.getClass());\n+        assertSame(ISOChronology.class, result.getChronology().getClass());\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+    }\n+\n+    static class MockUntrustedMutableDateTime extends MutableDateTime {\n+        MockUntrustedMutableDateTime(long millis) {\n+            super(millis);\n+        }\n+    }\n+\n+    static class MockUntrustedZone extends DateTimeZone {\n+        MockUntrustedZone(String id) {\n+            super(id);\n+        }\n+        public String getNameKey(long instant) {\n+            return null;\n+        }\n+        public int getOffset(long instant) {\n+            return 60 * 60 * 1000;\n+        }\n+        public int getStandardOffset(long instant) {\n+            return 60 * 60 * 1000;\n+        }\n+        public boolean isFixed() {\n+            return true;\n+        }\n+        public long nextTransition(long instant) {\n+            return 0;\n+        }\n+        public long previousTransition(long instant) {\n+            return 0;\n+        }\n+        public boolean equals(Object object) {\n+            return false;\n+        }\n+    }\n+\n+    public void testToMutableDateTime() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime();\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime_DateTimeZone() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(LONDON);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(LONDON), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(PARIS);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((DateTimeZone) null);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToMutableDateTime_Chronology() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        MutableDateTime result = test.toMutableDateTime(ISOChronology.getInstance());\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime(GregorianChronology.getInstance(PARIS));\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+\n+        test = new MutableDateTime(TEST_TIME1);\n+        result = test.toMutableDateTime((Chronology) null);\n+        assertTrue(test != result);\n+        assertEquals(test.getMillis(), result.getMillis());\n+        assertEquals(ISOChronology.getInstance(), result.getChronology());\n+    }\n+\n+    public void testToDate() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        Date result = test.toDate();\n+        assertEquals(test.getMillis(), result.getTime());\n+    }\n+\n+    public void testToCalendar_Locale() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        Calendar result = test.toCalendar(null);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/London\"), result.getTimeZone());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toCalendar(null);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toCalendar(Locale.UK);\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+    }\n+\n+    public void testToGregorianCalendar() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        GregorianCalendar result = test.toGregorianCalendar();\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/London\"), result.getTimeZone());\n+\n+        test = new MutableDateTime(TEST_TIME1, PARIS);\n+        result = test.toGregorianCalendar();\n+        assertEquals(test.getMillis(), result.getTime().getTime());\n+        assertEquals(TimeZone.getTimeZone(\"Europe/Paris\"), result.getTimeZone());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Constructors.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Date;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.convert.ConverterManager;\n+import org.joda.time.convert.MockZeroNullIntegerConverter;\n+\n+/**\n+ * This class is a Junit unit test for MutableDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDateTime_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Constructors.class);\n+    }\n+\n+    public TestMutableDateTime_Constructors(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(zone);\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor ()\n+     */\n+    public void testConstructor() throws Throwable {\n+        MutableDateTime test = new MutableDateTime();\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone)\n+     */\n+    public void testConstructor_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (DateTimeZone=null)\n+     */\n+    public void testConstructor_nullDateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology)\n+     */\n+    public void testConstructor_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Chronology=null)\n+     */\n+    public void testConstructor_nullChronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long1() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long)\n+     */\n+    public void testConstructor_long2() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME2);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone)\n+     */\n+    public void testConstructor_long1_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone)\n+     */\n+    public void testConstructor_long2_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME2, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, DateTimeZone=null)\n+     */\n+    public void testConstructor_long_nullDateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long1_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology)\n+     */\n+    public void testConstructor_long2_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME2, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME2, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (long, Chronology=null)\n+     */\n+    public void testConstructor_long_nullChronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_Object() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object)\n+     */\n+    public void testConstructor_invalidObject() throws Throwable {\n+        try {\n+            new MutableDateTime(new Object());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_nullObject() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null)\n+     */\n+    public void testConstructor_badconverterObject() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            MutableDateTime test = new MutableDateTime(new Integer(0));\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_Object_DateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_invalidObject_DateTimeZone() throws Throwable {\n+        try {\n+            new MutableDateTime(new Object(), PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, DateTimeZone)\n+     */\n+    public void testConstructor_nullObject_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null, PARIS);\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone=null)\n+     */\n+    public void testConstructor_Object_nullDateTimeZone() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, DateTimeZone=null)\n+     */\n+    public void testConstructor_nullObject_nullDateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null, (DateTimeZone) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, DateTimeZone)\n+     */\n+    public void testConstructor_badconverterObject_DateTimeZone() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_Object_Chronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_invalidObject_Chronology() throws Throwable {\n+        try {\n+            new MutableDateTime(new Object(), GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology)\n+     */\n+    public void testConstructor_nullObject_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null, GregorianChronology.getInstance());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology=null)\n+     */\n+    public void testConstructor_Object_nullChronology() throws Throwable {\n+        Date date = new Date(TEST_TIME1);\n+        MutableDateTime test = new MutableDateTime(date, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object=null, Chronology=null)\n+     */\n+    public void testConstructor_nullObject_nullChronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime((Object) null, (Chronology) null);\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (Object, Chronology)\n+     */\n+    public void testConstructor_badconverterObject_Chronology() throws Throwable {\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+            MutableDateTime test = new MutableDateTime(new Integer(0), GregorianChronology.getInstance());\n+            assertEquals(ISOChronology.getInstance(), test.getChronology());\n+            assertEquals(0L, test.getMillis());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(MockZeroNullIntegerConverter.INSTANCE);\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Test constructor (int, int, int)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(LONDON, test.getZone());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        try {\n+            new MutableDateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 0, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 13, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 0, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 31, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new MutableDateTime(2002, 7, 31, 0, 0, 0, 0);\n+        try {\n+            new MutableDateTime(2002, 7, 32, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, DateTimeZone)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_DateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 2, 0, 0, 0, PARIS);  // +02:00\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        try {\n+            new MutableDateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 0, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 13, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 0, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 31, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new MutableDateTime(2002, 7, 31, 0, 0, 0, 0, PARIS);\n+        try {\n+            new MutableDateTime(2002, 7, 32, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, DateTimeZone=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_nullDateTimeZone() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0, (DateTimeZone) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_Chronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0, GregorianChronology.getInstance());  // +01:00\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        try {\n+            new MutableDateTime(Integer.MIN_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(Integer.MAX_VALUE, 6, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 0, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 13, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 0, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new MutableDateTime(2002, 6, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new MutableDateTime(2002, 7, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n+        try {\n+            new MutableDateTime(2002, 7, 32, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    /**\n+     * Test constructor (int, int, int, Chronology=null)\n+     */\n+    public void testConstructor_int_int_int_int_int_int_int_nullChronology() throws Throwable {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 1, 0, 0, 0, (Chronology) null);  // +01:00\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/TestMutableDateTime_Sets.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.chrono.GregorianChronology;\n+import org.joda.time.chrono.ISOChronology;\n+\n+/**\n+ * This class is a JUnit test for MutableDateTime.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestMutableDateTime_Sets extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    \n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            \n+    // 2002-04-05\n+    private long TEST_TIME1 =\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n+    private long TEST_TIME2 =\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestMutableDateTime_Sets.class);\n+    }\n+\n+    public TestMutableDateTime_Sets(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMillis_long1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setMillis(TEST_TIME2);\n+        assertEquals(TEST_TIME2, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetChronology_Chronology1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setChronology(GregorianChronology.getInstance(PARIS));\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(GregorianChronology.getInstance(PARIS), test.getChronology());\n+    }        \n+\n+    public void testSetChronology_Chronology2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setChronology(null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetZone_DateTimeZone1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setZone(PARIS);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+    }        \n+\n+    public void testSetZone_DateTimeZone2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setZone(null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testSetZoneRetainFields_DateTimeZone1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setZoneRetainFields(PARIS);\n+        assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n+    }        \n+\n+    public void testSetZoneRetainFields_DateTimeZone2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setZoneRetainFields(null);\n+        assertEquals(TEST_TIME1, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }        \n+\n+    public void testSetZoneRetainFields_DateTimeZone3() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n+        test.setZoneRetainFields(null);\n+        assertEquals(TEST_TIME1 + DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());\n+        assertEquals(GregorianChronology.getInstance(), test.getChronology());\n+    }        \n+\n+    public void testSetZoneRetainFields_DateTimeZone4() {\n+        Chronology chrono = new MockNullZoneChronology();\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1, chrono);\n+        test.setZoneRetainFields(PARIS);\n+        assertEquals(TEST_TIME1 - DateTimeConstants.MILLIS_PER_HOUR, test.getMillis());\n+        assertSame(chrono, test.getChronology());\n+    }        \n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMillis_Object1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setMillis(new Long(TEST_TIME2));\n+        assertEquals(TEST_TIME2, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testSetMillis_Object2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setMillis(null);\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSet_DateTimeField_int1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.set(ISOChronology.getInstance().year(), 2010);\n+        assertEquals(2010, test.getYear());\n+    }\n+\n+    public void testSet_DateTimeField_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.set(null, 2010);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    public void testSet_DateTimeField_int3() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.set(ISOChronology.getInstance().monthOfYear(), 13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDate_int_int_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setDate(2010, 12, 3);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetDate_int_int_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.setDate(2010, 13, 3);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDate_long1() {\n+        long setter = new DateTime(2010, 12, 3, 5, 7, 9, 501).getMillis();\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setDate(setter);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDate_Object1() {\n+        Long setter = new Long(new DateTime(2010, 12, 3, 5, 7, 9, 501).getMillis());\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setDate(setter);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetDate_Object2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setDate(null);\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTime_int_int_int_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setTime(5, 6, 7, 8);\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(5, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetTime_int_int_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.setTime(60, 6, 7, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTime_long1() {\n+        long setter = new DateTime(2010, 12, 3, 5, 7, 9, 11).getMillis();\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setTime(setter);\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(5, test.getHourOfDay());\n+        assertEquals(7, test.getMinuteOfHour());\n+        assertEquals(9, test.getSecondOfMinute());\n+        assertEquals(11, test.getMillisOfSecond());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetTime_Object1() {\n+        Long setter = new Long(new DateTime(2010, 12, 3, 5, 7, 9, 11).getMillis());\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setTime(setter);\n+        assertEquals(2002, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(5, test.getHourOfDay());\n+        assertEquals(7, test.getMinuteOfHour());\n+        assertEquals(9, test.getSecondOfMinute());\n+        assertEquals(11, test.getMillisOfSecond());\n+    }\n+\n+    public void testSetTime_Object2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setTime(null);\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDateTime_int_int_int_int_int_int_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 12, 24, 48, 501);\n+        test.setDateTime(2010, 12, 3, 5, 6, 7, 8);\n+        assertEquals(2010, test.getYear());\n+        assertEquals(12, test.getMonthOfYear());\n+        assertEquals(3, test.getDayOfMonth());\n+        assertEquals(5, test.getHourOfDay());\n+        assertEquals(6, test.getMinuteOfHour());\n+        assertEquals(7, test.getSecondOfMinute());\n+        assertEquals(8, test.getMillisOfSecond());\n+    }\n+    \n+    public void testSetDateTime_int_int_int_int_int_int_int2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        try {\n+            test.setDateTime(2010, 13, 3, 5, 6, 7, 8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+        }\n+        assertEquals(TEST_TIME1, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDateTime_long1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setDateTime(TEST_TIME2);\n+        assertEquals(TEST_TIME2, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDateTime_Object1() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setDateTime(new Long(TEST_TIME2));\n+        assertEquals(TEST_TIME2, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    public void testSetDateTime_Object2() {\n+        MutableDateTime test = new MutableDateTime(TEST_TIME1);\n+        test.setDateTime(null);\n+        assertEquals(TEST_TIME_NOW, test.getMillis());\n+        assertEquals(ISOChronology.getInstance(), test.getChronology());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetYear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setYear(2010);\n+        assertEquals(\"2010-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMonthOfYear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMonthOfYear(12);\n+        assertEquals(\"2002-12-09T05:06:07.008Z\", test.toString());\n+    }\n+\n+    public void testSetMonthOfYear_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMonthOfYear(13);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDayOfMonth_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setDayOfMonth(17);\n+        assertEquals(\"2002-06-17T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetDayOfMonth_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setDayOfMonth(31);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDayOfYear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setDayOfYear(3);\n+        assertEquals(\"2002-01-03T05:06:07.008Z\", test.toString());\n+    }\n+\n+    public void testSetDayOfYear_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setDayOfYear(366);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetWeekyear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setWeekyear(2001);\n+        assertEquals(\"2001-06-10T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetWeekOfWeekyear_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setWeekOfWeekyear(2);\n+        assertEquals(\"2002-01-13T05:06:07.008Z\", test.toString());\n+    }\n+\n+    public void testSetWeekOfWeekyear_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setWeekOfWeekyear(53);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetDayOfWeek_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setDayOfWeek(5);\n+        assertEquals(\"2002-06-07T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetDayOfWeek_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setDayOfWeek(8);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetHourOfDay_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setHourOfDay(13);\n+        assertEquals(\"2002-06-09T13:06:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetHourOfDay_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setHourOfDay(24);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMinuteOfHour_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMinuteOfHour(13);\n+        assertEquals(\"2002-06-09T05:13:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetMinuteOfHour_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMinuteOfHour(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMinuteOfDay_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMinuteOfDay(13);\n+        assertEquals(\"2002-06-09T00:13:07.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetMinuteOfDay_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMinuteOfDay(24 * 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetSecondOfMinute_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setSecondOfMinute(13);\n+        assertEquals(\"2002-06-09T05:06:13.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetSecondOfMinute_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setSecondOfMinute(60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetSecondOfDay_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setSecondOfDay(13);\n+        assertEquals(\"2002-06-09T00:00:13.008+01:00\", test.toString());\n+    }\n+\n+    public void testSetSecondOfDay_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setSecondOfDay(24 * 60 * 60);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMilliOfSecond_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMillisOfSecond(13);\n+        assertEquals(\"2002-06-09T05:06:07.013+01:00\", test.toString());\n+    }\n+\n+    public void testSetMilliOfSecond_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMillisOfSecond(1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSetMilliOfDay_int1() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        test.setMillisOfDay(13);\n+        assertEquals(\"2002-06-09T00:00:00.013+01:00\", test.toString());\n+    }\n+\n+    public void testSetMilliOfDay_int2() {\n+        MutableDateTime test = new MutableDateTime(2002, 6, 9, 5, 6, 7, 8);\n+        try {\n+            test.setMillisOfDay(24 * 60 * 60 * 1000);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"2002-06-09T05:06:07.008+01:00\", test.toString());\n+    }\n+\n+}", "timestamp": 1090082962, "metainfo": ""}