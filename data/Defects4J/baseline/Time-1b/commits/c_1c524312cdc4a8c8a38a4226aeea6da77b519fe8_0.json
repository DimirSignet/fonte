{"sha": "1c524312cdc4a8c8a38a4226aeea6da77b519fe8", "log": "Fix tests after TimePeriod creation   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n         assertEquals(6, test.getMinutes());\n         assertEquals(7, test.getSeconds());\n         assertEquals(8, test.getMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n+    }\n+\n+    public void testConstructor_long2() throws Throwable {\n+        long length =\n+                5 * DateTimeConstants.MILLIS_PER_HOUR +\n+                6 * DateTimeConstants.MILLIS_PER_MINUTE +\n+                7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n+        TimePeriod test = new TimePeriod(length);\n+        assertEquals(DurationType.getAllType(), test.getDurationType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(5, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(7, test.getSeconds());\n+        assertEquals(8, test.getMillis());\n         assertEquals(true, test.isPrecise());\n         assertEquals(length, test.toDurationMillis());\n     }\n         assertEquals(6, test.getMinutes());\n         assertEquals(7, test.getSeconds());\n         assertEquals(8, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(length, test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_long_DurationType2() throws Throwable {\n         assertEquals(6, test.getMinutes());\n         assertEquals(7, test.getSeconds());\n         assertEquals(8, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(length, test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_long_DurationType4() throws Throwable {\n-        long length = 4 * DateTimeConstants.MILLIS_PER_DAY +\n+        long length =\n                 5 * DateTimeConstants.MILLIS_PER_HOUR +\n                 6 * DateTimeConstants.MILLIS_PER_MINUTE +\n                 7 * DateTimeConstants.MILLIS_PER_SECOND + 8;\n         assertEquals(0, test.getYears());\n         assertEquals(0, test.getMonths());\n         assertEquals(0, test.getWeeks());\n-        assertEquals(4, test.getDays());\n+        assertEquals(0, test.getDays());\n         assertEquals(5, test.getHours());\n         assertEquals(6, test.getMinutes());\n         assertEquals(7, test.getSeconds());\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_long_long2() throws Throwable {\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_long_long_DurationType2() throws Throwable {\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_long_long_DurationType3() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);\n         TimePeriod test = new TimePeriod(dt1.getMillis(), dt2.getMillis(), DurationType.getAllType().withMillisRemoved());\n         assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(1, test.getWeeks());\n-        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n         assertEquals(1, test.getHours());\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_RI_RI2() throws Throwable {\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_RI_RI3() throws Throwable {\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_RI_RI4() throws Throwable {\n         assertEquals(-1, test.getMinutes());\n         assertEquals(-1, test.getSeconds());\n         assertEquals(-1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(TEST_TIME_NOW - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_RI_RI5() throws Throwable {\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_RI_RI_DurationType2() throws Throwable {\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_RI_RI_DurationType3() throws Throwable {\n         DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 17, 1, 1, 1, 1);\n+        DateTime dt2 = new DateTime(2004, 6, 9, 1, 1, 1, 1);\n         TimePeriod test = new TimePeriod(dt1, dt2, DurationType.getAllType().withMillisRemoved());\n         assertEquals(DurationType.getAllType().withMillisRemoved(), test.getDurationType());\n-        assertEquals(1, test.getYears());\n-        assertEquals(1, test.getMonths());\n-        assertEquals(1, test.getWeeks());\n-        assertEquals(1, test.getDays());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n         assertEquals(1, test.getHours());\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - TEST_TIME_NOW, test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     public void testConstructor_RI_RI_DurationType5() throws Throwable {\n     }\n \n     public void testConstructor_Object4() throws Throwable {\n-        DateTime dt1 = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n-        DateTime dt2 = new DateTime(2005, 7, 10, 1, 1, 1, 1);\n-        TimePeriod base = new TimePeriod(dt1, dt2);  // AllType and precise\n+        TimePeriod base = new TimePeriod(1, 1, 0, 1, 1, 1, 1, 1, DurationType.getAllType());\n         TimePeriod test = new TimePeriod(base);\n         assertEquals(DurationType.getAllType(), test.getDurationType());\n         assertEquals(1, test.getYears());\n         assertEquals(1, test.getMinutes());\n         assertEquals(1, test.getSeconds());\n         assertEquals(1, test.getMillis());\n-        assertEquals(true, test.isPrecise());\n-        assertEquals(dt2.getMillis() - dt1.getMillis(), test.toDurationMillis());\n+        assertEquals(false, test.isPrecise());\n+        try {\n+            test.toDurationMillis();\n+            fail();\n+        } catch (IllegalStateException ex) {}\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1091577553, "metainfo": ""}