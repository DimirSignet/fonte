{"sha": "8612f9e5b88c1bea933ef9ab1e431f5db3006b48", "log": "Fix NPE in Partial.with()  Also ensure unsupported duration fields are compared properly Fixes #93", "commit": "\n--- a/src/main/java/org/joda/time/Partial.java\n+++ b/src/main/java/org/joda/time/Partial.java\n             DurationField loopUnitField = loopType.getDurationType().getField(iChronology);\n             if (i > 0) {\n                 int compare = lastUnitField.compareTo(loopUnitField);\n-                if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {\n+                if (compare < 0) {\n                     throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                             types[i - 1].getName() + \" < \" + loopType.getName());\n                 } else if (compare == 0) {\n                     if (types[i - 1].getRangeDurationType() == null) {\n                         if (loopType.getRangeDurationType() == null) {\n-                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + loopType.getName());\n+                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n+                                            types[i - 1].getName() + \" and \" + loopType.getName());\n                         }\n                     } else {\n                         if (loopType.getRangeDurationType() == null) {\n                                     types[i - 1].getName() + \" < \" + loopType.getName());\n                         }\n                         if (lastRangeField.compareTo(loopRangeField) == 0) {\n-                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" + loopType.getName());\n+                            throw new IllegalArgumentException(\"Types array must not contain duplicate: \" +\n+                                            types[i - 1].getName() + \" and \" + loopType.getName());\n                         }\n                     }\n                 }\n                         if (compare > 0) {\n                             break;\n                         } else if (compare == 0) {\n+                            if (fieldType.getRangeDurationType() == null) {\n+                                break;\n+                            }\n                             DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);\n                             DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);\n                             if (rangeField.compareTo(loopRangeField) > 0) {\n--- a/src/main/java/org/joda/time/field/UnsupportedDurationField.java\n+++ b/src/main/java/org/joda/time/field/UnsupportedDurationField.java\n      * @return zero always\n      */\n     public int compareTo(DurationField durationField) {\n+        if (durationField.isSupported()) {\n+            return 1;\n+        }\n         return 0;\n     }\n \n--- a/src/test/java/org/joda/time/TestPartial_Basics.java\n+++ b/src/test/java/org/joda/time/TestPartial_Basics.java\n         assertSame(test, result);\n     }\n \n+    public void testWith_baseHasNoRange() {\n+        Partial test = new Partial(DateTimeFieldType.year(), 1);\n+        Partial result = test.with(DateTimeFieldType.hourOfDay(), 10);\n+        assertEquals(2, result.size());\n+        assertEquals(0, result.indexOf(DateTimeFieldType.year()));\n+        assertEquals(1, result.indexOf(DateTimeFieldType.hourOfDay()));\n+    }\n+\n+    public void testWith_argHasNoRange() {\n+        Partial test = new Partial(DateTimeFieldType.hourOfDay(), 1);\n+        Partial result = test.with(DateTimeFieldType.year(), 10);\n+        assertEquals(2, result.size());\n+        assertEquals(0, result.indexOf(DateTimeFieldType.year()));\n+        assertEquals(1, result.indexOf(DateTimeFieldType.hourOfDay()));\n+    }\n+\n+    public void testWith_baseAndArgHaveNoRange() {\n+        Partial test = new Partial(DateTimeFieldType.year(), 1);\n+        Partial result = test.with(DateTimeFieldType.era(), 1);\n+        assertEquals(2, result.size());\n+        assertEquals(0, result.indexOf(DateTimeFieldType.era()));\n+        assertEquals(1, result.indexOf(DateTimeFieldType.year()));\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testWithout1() {\n         Partial test = createHourMinPartial();", "timestamp": 1386011681, "metainfo": ""}