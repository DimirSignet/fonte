{"sha": "77a6b3a44da7ae4af62e88b4b27eeefec2d768c2", "log": "Fix fromCalendarFields()/fromDateFields() to handle era BC correctly  Fixes #8", "commit": "\n--- a/src/main/java/org/joda/time/LocalDate.java\n+++ b/src/main/java/org/joda/time/LocalDate.java\n import java.io.Serializable;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.GregorianCalendar;\n import java.util.HashSet;\n import java.util.Locale;\n import java.util.Set;\n      * will only pass in instances of <code>GregorianCalendar</code> however\n      * this is not validated.\n      *\n-     * @param calendar  the Calendar to extract fields from\n-     * @return the created LocalDate\n+     * @param calendar  the Calendar to extract fields from, not null\n+     * @return the created local date, not null\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n+        int era = calendar.get(Calendar.ERA);\n+        int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDate(\n-            calendar.get(Calendar.YEAR),\n+            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH)\n         );\n      * <p>\n      * This factory method always creates a LocalDate with ISO chronology.\n      *\n-     * @param date  the Date to extract fields from\n-     * @return the created LocalDate\n+     * @param date  the Date to extract fields from, not null\n+     * @return the created local date, not null\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n     public static LocalDate fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        if (date.getTime() < 0) {\n+            // handle years in era BC\n+            GregorianCalendar cal = new GregorianCalendar();\n+            cal.setTime(date);\n+            return fromCalendarFields(cal);\n         }\n         return new LocalDate(\n             date.getYear() + 1900,\n--- a/src/main/java/org/joda/time/LocalDateTime.java\n+++ b/src/main/java/org/joda/time/LocalDateTime.java\n import java.io.Serializable;\n import java.util.Calendar;\n import java.util.Date;\n+import java.util.GregorianCalendar;\n import java.util.Locale;\n import java.util.TimeZone;\n \n      * will only pass in instances of <code>GregorianCalendar</code> however\n      * this is not validated.\n      *\n-     * @param calendar  the Calendar to extract fields from\n-     * @return the created LocalDateTime\n+     * @param calendar  the Calendar to extract fields from, not null\n+     * @return the created local date-time, not null\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n         if (calendar == null) {\n             throw new IllegalArgumentException(\"The calendar must not be null\");\n         }\n+        int era = calendar.get(Calendar.ERA);\n+        int yearOfEra = calendar.get(Calendar.YEAR);\n         return new LocalDateTime(\n-            calendar.get(Calendar.YEAR),\n+            (era == GregorianCalendar.AD ? yearOfEra : 1 - yearOfEra),\n             calendar.get(Calendar.MONTH) + 1,\n             calendar.get(Calendar.DAY_OF_MONTH),\n             calendar.get(Calendar.HOUR_OF_DAY),\n      * <p>\n      * This factory method always creates a LocalDateTime with ISO chronology.\n      *\n-     * @param date  the Date to extract fields from\n-     * @return the created LocalDateTime\n+     * @param date  the Date to extract fields from, not null\n+     * @return the created local date-time, not null\n      * @throws IllegalArgumentException if the calendar is null\n      * @throws IllegalArgumentException if the date is invalid for the ISO chronology\n      */\n     public static LocalDateTime fromDateFields(Date date) {\n         if (date == null) {\n             throw new IllegalArgumentException(\"The date must not be null\");\n+        }\n+        if (date.getTime() < 0) {\n+            // handle years in era BC\n+            GregorianCalendar cal = new GregorianCalendar();\n+            cal.setTime(date);\n+            return fromCalendarFields(cal);\n         }\n         return new LocalDateTime(\n             date.getYear() + 1900,\n--- a/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java\n+++ b/src/test/java/org/joda/time/TestLocalDateTime_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_FromCalendarFields() throws Exception {\n+    public void testFactory_fromCalendarFields() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5, 6, 7);\n         assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n+    }\n+\n+    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.ERA, GregorianCalendar.BC);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n+    }\n+\n+    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.ERA, GregorianCalendar.BC);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n+        assertEquals(expected, LocalDateTime.fromCalendarFields(cal));\n+    }\n+\n+    public void testFactory_fromCalendarFields_null() throws Exception {\n         try {\n             LocalDateTime.fromCalendarFields((Calendar) null);\n             fail();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_FromDateFields_after1970() throws Exception {\n+    public void testFactory_fromDateFields_after1970() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalDateTime expected = new LocalDateTime(1970, 2, 3, 4, 5 ,6, 7);\n         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n-        try {\n-            LocalDateTime.fromDateFields((Date) null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-    }\n-\n-    public void testFactory_FromDateFields_before1970() throws Exception {\n+    }\n+\n+    public void testFactory_fromDateFields_before1970() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalDateTime expected = new LocalDateTime(1969, 2, 3, 4, 5 ,6, 7);\n         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.ERA, GregorianCalendar.BC);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDateTime expected = new LocalDateTime(0, 2, 3, 4, 5, 6, 7);\n+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.ERA, GregorianCalendar.BC);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDateTime expected = new LocalDateTime(-2, 2, 3, 4, 5, 6, 7);\n+        assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_fromDateFields_null() throws Exception {\n         try {\n             LocalDateTime.fromDateFields((Date) null);\n             fail();\n--- a/src/test/java/org/joda/time/TestLocalDate_Constructors.java\n+++ b/src/test/java/org/joda/time/TestLocalDate_Constructors.java\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_FromCalendarFields() throws Exception {\n+    public void testFactory_fromCalendarFields() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalDate expected = new LocalDate(1970, 2, 3);\n         assertEquals(expected, LocalDate.fromCalendarFields(cal));\n+    }\n+\n+    public void testFactory_fromCalendarFields_beforeYearZero1() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.ERA, GregorianCalendar.BC);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDate expected = new LocalDate(0, 2, 3);\n+        assertEquals(expected, LocalDate.fromCalendarFields(cal));\n+    }\n+\n+    public void testFactory_fromCalendarFields_beforeYearZero3() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.ERA, GregorianCalendar.BC);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDate expected = new LocalDate(-2, 2, 3);\n+        assertEquals(expected, LocalDate.fromCalendarFields(cal));\n+    }\n+\n+    public void testFactory_fromCalendarFields_null() throws Exception {\n         try {\n             LocalDate.fromCalendarFields((Calendar) null);\n             fail();\n     }\n \n     //-----------------------------------------------------------------------\n-    public void testFactory_FromDateFields() throws Exception {\n+    public void testFactory_fromDateFields_after1970() throws Exception {\n         GregorianCalendar cal = new GregorianCalendar(1970, 1, 3, 4, 5, 6);\n         cal.set(Calendar.MILLISECOND, 7);\n         LocalDate expected = new LocalDate(1970, 2, 3);\n         assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_fromDateFields_before1970() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1969, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDate expected = new LocalDate(1969, 2, 3);\n+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_fromDateFields_beforeYearZero1() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(1, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.ERA, GregorianCalendar.BC);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDate expected = new LocalDate(0, 2, 3);\n+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_fromDateFields_beforeYearZero3() throws Exception {\n+        GregorianCalendar cal = new GregorianCalendar(3, 1, 3, 4, 5, 6);\n+        cal.set(Calendar.ERA, GregorianCalendar.BC);\n+        cal.set(Calendar.MILLISECOND, 7);\n+        LocalDate expected = new LocalDate(-2, 2, 3);\n+        assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));\n+    }\n+\n+    public void testFactory_fromDateFields_null() throws Exception {\n         try {\n             LocalDate.fromDateFields((Date) null);\n             fail();\n         assertEquals(6, test.getDayOfMonth());\n     }\n \n+    @SuppressWarnings(\"deprecation\")\n     public void testConstructor_ObjectYearMonthDay() throws Throwable {\n         YearMonthDay date = new YearMonthDay(1970, 4, 6, BUDDHIST_UTC);\n         LocalDate test = new LocalDate(date);", "timestamp": 1354020086, "metainfo": ""}