{"sha": "7d3c89246ef7d27f7796a79215f5be588c9ed9dd", "log": "Increase test coverage.   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/tz/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/tz/TestAll.java\n         TestSuite suite = new TestSuite();\n         suite.addTest(TestUTCProvider.suite());\n         suite.addTest(TestBuilder.suite());\n+        suite.addTest(TestCompiler.suite());\n         return suite;\n     }\n \n--- a/JodaTime/src/test/org/joda/time/tz/TestBuilder.java\n+++ b/JodaTime/src/test/org/joda/time/tz/TestBuilder.java\n  *  limitations under the License.\n  */\n package org.joda.time.tz;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n \n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         {\"2000-10-29T02:00:00.000-07:00\", \"PST\", \"-08:00\", \"-08:00\"},\n     };\n \n-    static DateTimeZone buildAmericaLosAngeles() {\n+    static DateTimeZoneBuilder buildAmericaLosAngelesBuilder() {\n         return new DateTimeZoneBuilder()\n             .addCutover(-2147483648, 'w', 1, 1, 0, false, 0)\n             .setStandardOffset(-28378000)\n             .addRecurringSavings(\"PDT\", 3600000, 1974, 1974, 'w', 1,  6,  0, false, 7200000)\n             .addRecurringSavings(\"PDT\", 3600000, 1975, 1975, 'w', 2, 23,  0, false, 7200000)\n             .addRecurringSavings(\"PDT\", 3600000, 1976, 1986, 'w', 4, -1,  7, false, 7200000)\n-            .addRecurringSavings(\"PDT\", 3600000, 1987, 2147483647, 'w', 4, 1, 7, true, 7200000)\n-            .toDateTimeZone(\"America/Los_Angeles\");\n+            .addRecurringSavings(\"PDT\", 3600000, 1987, 2147483647, 'w', 4, 1, 7, true, 7200000);\n+    }\n+\n+    static DateTimeZone buildAmericaLosAngeles() {\n+        return buildAmericaLosAngelesBuilder().toDateTimeZone(\"America/Los_Angeles\");\n     }\n \n     private DateTimeZone originalDateTimeZone = null;\n     public void testID() {\n         DateTimeZone tz = buildAmericaLosAngeles();\n         assertEquals(\"America/Los_Angeles\", tz.getID());\n+        assertEquals(false, tz.isFixed());\n     }\n \n     public void testForwardTransitions() {\n         testForwardTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n     }\n \n-    private void testForwardTransitions(DateTimeZone tz, String[][] data) {\n+    static void testForwardTransitions(DateTimeZone tz, String[][] data) {\n         long instant = Long.MIN_VALUE;\n         for (int i=0; i<data.length; i++) {\n             String[] row = data[i];\n         testReverseTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n     }\n \n-    private void testReverseTransitions(DateTimeZone tz, String[][] data) {\n+    static void testReverseTransitions(DateTimeZone tz, String[][] data) {\n         long instant = new DateTime(data[data.length - 1][0]).getMillis();\n         for (int i=data.length; --i>=1; ) {\n             String[] row = data[i];\n             assertEquals(expectedOffset, tz.getOffset(instant));\n         }\n     }\n+\n+    public void testSerialization() throws IOException {\n+        DateTimeZone tz = testSerialization\n+            (buildAmericaLosAngelesBuilder(), \"America/Los_Angeles\");\n+\n+        assertEquals(false, tz.isFixed());\n+        testForwardTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n+        testReverseTransitions(tz, AMERICA_LOS_ANGELES_DATA);\n+    }\n+\n+    static DateTimeZone testSerialization(DateTimeZoneBuilder builder, String id)\n+        throws IOException\n+    {\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        builder.writeTo(out);\n+        ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());\n+        DateTimeZone tz = DateTimeZoneBuilder.readFrom(in, id);\n+        assertEquals(id, tz.getID());\n+        return tz;\n+    }\n+\n+    public void testFixed() throws IOException {\n+        DateTimeZoneBuilder builder = new DateTimeZoneBuilder()\n+            .setStandardOffset(3600000)\n+            .setFixedSavings(\"LMT\", 0);\n+        DateTimeZone tz = builder.toDateTimeZone(\"Test\");\n+\n+        for (int i=0; i<2; i++) {\n+            assertEquals(\"Test\", tz.getID());\n+            assertEquals(true, tz.isFixed());\n+            assertEquals(3600000, tz.getOffset(0));\n+            assertEquals(3600000, tz.getStandardOffset(0));\n+            assertEquals(0, tz.nextTransition(0));\n+            assertEquals(0, tz.previousTransition(0));\n+\n+            tz = testSerialization(builder, \"Test\");\n+        }\n+    }\n }\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/tz/TestCompiler.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.tz;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.StringBufferInputStream;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeZone;\n+\n+/**\n+ * Test cases for ZoneInfoCompiler.\n+ *\n+ * @author Brian S O'Neill\n+ */\n+public class TestCompiler extends TestCase {\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestCompiler.class);\n+    }\n+\n+    static final String AMERICA_LOS_ANGELES_FILE =\n+        \"# Rules for building just America/Los_Angeles time zone.\\n\" + \n+        \"\\n\" + \n+        \"Rule    US  1918    1919    -   Mar lastSun 2:00    1:00    D\\n\" + \n+        \"Rule    US  1918    1919    -   Oct lastSun 2:00    0   S\\n\" + \n+        \"Rule    US  1942    only    -   Feb 9   2:00    1:00    W # War\\n\" + \n+        \"Rule    US  1945    only    -   Aug 14  23:00u  1:00    P # Peace\\n\" + \n+        \"Rule    US  1945    only    -   Sep 30  2:00    0   S\\n\" + \n+        \"Rule    US  1967    max -   Oct lastSun 2:00    0   S\\n\" + \n+        \"Rule    US  1967    1973    -   Apr lastSun 2:00    1:00    D\\n\" + \n+        \"Rule    US  1974    only    -   Jan 6   2:00    1:00    D\\n\" + \n+        \"Rule    US  1975    only    -   Feb 23  2:00    1:00    D\\n\" + \n+        \"Rule    US  1976    1986    -   Apr lastSun 2:00    1:00    D\\n\" + \n+        \"Rule    US  1987    max -   Apr Sun>=1  2:00    1:00    D\\n\" + \n+        \"\\n\" + \n+        \"Rule    CA  1948    only    -   Mar 14  2:00    1:00    D\\n\" + \n+        \"Rule    CA  1949    only    -   Jan  1  2:00    0   S\\n\" + \n+        \"Rule    CA  1950    1966    -   Apr lastSun 2:00    1:00    D\\n\" + \n+        \"Rule    CA  1950    1961    -   Sep lastSun 2:00    0   S\\n\" + \n+        \"Rule    CA  1962    1966    -   Oct lastSun 2:00    0   S\\n\" + \n+        \"\\n\" + \n+        \"Zone America/Los_Angeles -7:52:58 - LMT 1883 Nov 18 12:00\\n\" + \n+        \"            -8:00   US  P%sT    1946\\n\" + \n+        \"            -8:00   CA  P%sT    1967\\n\" + \n+        \"            -8:00   US  P%sT\";\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+\n+    public TestCompiler(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        DateTimeZone.setDefault(DateTimeZone.UTC);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+    }\n+\n+    public void testCompile() throws Exception {\n+        Provider provider = compileAndLoad(AMERICA_LOS_ANGELES_FILE);\n+        DateTimeZone tz = provider.getZone(\"America/Los_Angeles\");\n+\n+        assertEquals(\"America/Los_Angeles\", tz.getID());\n+        assertEquals(false, tz.isFixed());\n+        TestBuilder.testForwardTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);\n+        TestBuilder.testReverseTransitions(tz, TestBuilder.AMERICA_LOS_ANGELES_DATA);\n+    }\n+\n+    private Provider compileAndLoad(String data) throws Exception {\n+        File tempDir = createDataFile(data);\n+        File destDir = makeTempDir();\n+\n+        ZoneInfoCompiler.main(new String[] {\n+            \"-src\", tempDir.getAbsolutePath(),\n+            \"-dst\", destDir.getAbsolutePath(),\n+            \"tzdata\"\n+        });\n+\n+        // Mark all files to be deleted on exit.\n+        deleteOnExit(destDir);\n+\n+        return new ZoneInfoProvider(destDir);\n+    }\n+\n+    private File createDataFile(String data) throws IOException {\n+        File tempDir = makeTempDir();\n+\n+        File tempFile = new File(tempDir, \"tzdata\");\n+        tempFile.deleteOnExit();\n+\n+        InputStream in = new StringBufferInputStream(data);\n+\n+        FileOutputStream out = new FileOutputStream(tempFile);\n+        byte[] buf = new byte[1000];\n+        int amt;\n+        while ((amt = in.read(buf)) > 0) {\n+            out.write(buf, 0, amt);\n+        }\n+        out.close();\n+        in.close();\n+\n+        return tempDir;\n+    }\n+\n+    private File makeTempDir() {\n+        File tempDir = new File(System.getProperty(\"java.io.tmpdir\"));\n+        tempDir = new File(tempDir, \"joda-test-\" + (new java.util.Random().nextInt() & 0xffffff));\n+        tempDir.mkdirs();\n+        tempDir.deleteOnExit();\n+        return tempDir;\n+    }\n+\n+    private void deleteOnExit(File tempFile) {\n+        tempFile.deleteOnExit();\n+        if (tempFile.isDirectory()) {\n+            File[] files = tempFile.listFiles();\n+            for (int i=0; i<files.length; i++) {\n+                deleteOnExit(files[i]);\n+            }\n+        }\n+    }\n+}", "timestamp": 1108325619, "metainfo": ""}