{"sha": "46b817a006e768865b1f0d2896e814dfa2d3244f", "log": "Fix formatter cannot print/parse code  Code to check if formatter cannot print/parse didn't work properly", "commit": "\n--- a/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/DateTimeFormatterBuilder.java\n      * Appends just a printer. With no matching parser, a parser cannot be\n      * built from this DateTimeFormatterBuilder.\n      *\n-     * @param printer  the printer to add\n+     * @param printer  the printer to add, not null\n      * @return this DateTimeFormatterBuilder, for chaining\n      * @throws IllegalArgumentException if printer is null or of an invalid type\n      */\n      * Appends just a parser. With no matching printer, a printer cannot be\n      * built from this builder.\n      *\n-     * @param parser  the parser to add\n+     * @param parser  the parser to add, not null\n      * @return this DateTimeFormatterBuilder, for chaining\n      * @throws IllegalArgumentException if parser is null or of an invalid type\n      */\n     /**\n      * Appends a printer/parser pair.\n      *\n-     * @param printer  the printer to add\n-     * @param parser  the parser to add\n+     * @param printer  the printer to add, not null\n+     * @param parser  the parser to add, not null\n      * @return this DateTimeFormatterBuilder, for chaining\n      * @throws IllegalArgumentException if printer or parser is null or of an invalid type\n      */\n \n             decompose(elementPairs, printerList, parserList);\n \n-            if (printerList.size() <= 0) {\n+            if (printerList.contains(null) || printerList.isEmpty()) {\n                 iPrinters = null;\n                 iPrintedLengthEstimate = 0;\n             } else {\n                 iPrintedLengthEstimate = printEst;\n             }\n \n-            if (parserList.size() <= 0) {\n+            if (parserList.contains(null) || parserList.isEmpty()) {\n                 iParsers = null;\n                 iParsedLengthEstimate = 0;\n             } else {\n             int size = elementPairs.size();\n             for (int i=0; i<size; i+=2) {\n                 Object element = elementPairs.get(i);\n-                if (element instanceof DateTimePrinter) {\n-                    if (element instanceof Composite) {\n-                        addArrayToList(printerList, ((Composite)element).iPrinters);\n-                    } else {\n-                        printerList.add(element);\n-                    }\n+                if (element instanceof Composite) {\n+                    addArrayToList(printerList, ((Composite)element).iPrinters);\n+                } else {\n+                    printerList.add(element);\n                 }\n \n                 element = elementPairs.get(i + 1);\n-                if (element instanceof DateTimeParser) {\n-                    if (element instanceof Composite) {\n-                        addArrayToList(parserList, ((Composite)element).iParsers);\n-                    } else {\n-                        parserList.add(element);\n-                    }\n+                if (element instanceof Composite) {\n+                    addArrayToList(parserList, ((Composite)element).iParsers);\n+                } else {\n+                    parserList.add(element);\n                 }\n             }\n         }\n--- a/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java\n+++ b/src/test/java/org/joda/time/format/TestDateTimeFormatterBuilder.java\n         bld2.appendLiteral('X');\n         bld2.append(p);\n         bld2.appendLiteral('Z');\n-        assertEquals(\"XYZ\", bld2.toFormatter().print(0L));\n+        DateTimeFormatter f = bld2.toFormatter();\n+        assertEquals(true, f.isPrinter());\n+        assertEquals(false, f.isParser());\n+        assertEquals(\"XYZ\", f.print(0L));\n+    }\n+\n+    public void test_append_nullPrinter() {\n+        try {\n+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+            bld2.append((DateTimePrinter) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_append_Parser() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendLiteral('Y');\n+        DateTimeParser p = bld.toParser();\n+        \n+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+        bld2.appendLiteral('X');\n+        bld2.append(p);\n+        bld2.appendLiteral('Z');\n+        DateTimeFormatter f = bld2.toFormatter();\n+        assertEquals(false, f.isPrinter());\n+        assertEquals(true, f.isParser());\n+        assertEquals(0, f.withZoneUTC().parseMillis(\"XYZ\"));\n+    }\n+\n+    public void test_append_nullParser() {\n+        try {\n+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+            bld2.append((DateTimeParser) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_append_Printer_nullParser() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendLiteral('Y');\n+        DateTimePrinter p = bld.toPrinter();\n+        \n+        try {\n+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+            bld2.append(p, (DateTimeParser) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_append_nullPrinter_Parser() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendLiteral('Y');\n+        DateTimeParser p = bld.toParser();\n+        \n+        try {\n+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+            bld2.append((DateTimePrinter) null, p);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_appendOptional_Parser() {\n+        DateTimeFormatterBuilder bld = new DateTimeFormatterBuilder();\n+        bld.appendLiteral('Y');\n+        DateTimeParser p = bld.toParser();\n+        \n+        DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+        bld2.appendLiteral('X');\n+        bld2.appendOptional(p);\n+        bld2.appendLiteral('Z');\n+        DateTimeFormatter f = bld2.toFormatter();\n+        assertEquals(false, f.isPrinter());\n+        assertEquals(true, f.isParser());\n+        assertEquals(0, f.withZoneUTC().parseMillis(\"XYZ\"));\n+    }\n+\n+    public void test_appendOptional_nullParser() {\n+        try {\n+            DateTimeFormatterBuilder bld2 = new DateTimeFormatterBuilder();\n+            bld2.appendOptional((DateTimeParser) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n     }\n \n     //-----------------------------------------------------------------------\n             .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneShortName();\n         DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);\n         \n+        assertEquals(true, f.isPrinter());\n+        assertEquals(false, f.isParser());\n         DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);\n         assertEquals(\"2011-01-04 12:30 GMT\", f.print(dt1));\n         DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);\n         try {\n             f.parseDateTime(\"2007-03-04 12:30 GMT\");\n             fail();\n-        } catch (IllegalArgumentException e) {\n+        } catch (UnsupportedOperationException e) {\n         }\n     }\n \n             .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneShortName(lookup);\n         DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);\n         \n+        assertEquals(true, f.isPrinter());\n+        assertEquals(true, f.isParser());\n         DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);\n         assertEquals(\"2011-01-04 12:30 GMT\", f.print(dt1));\n         DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);\n             .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneName();\n         DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);\n         \n+        assertEquals(true, f.isPrinter());\n+        assertEquals(false, f.isParser());\n         DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);\n         assertEquals(\"2011-01-04 12:30 Greenwich Mean Time\", f.print(dt1));\n         DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);\n         try {\n             f.parseDateTime(\"2007-03-04 12:30 GMT\");\n             fail();\n-        } catch (IllegalArgumentException e) {\n+        } catch (UnsupportedOperationException e) {\n         }\n     }\n \n             .appendPattern(\"yyyy-MM-dd HH:mm \").appendTimeZoneName(lookup);\n         DateTimeFormatter f = bld.toFormatter().withLocale(Locale.ENGLISH);\n         \n+        assertEquals(true, f.isPrinter());\n+        assertEquals(true, f.isParser());\n         DateTime dt1 = new DateTime(2011, 1, 4, 12, 30, 0, LONDON);\n         assertEquals(\"2011-01-04 12:30 Greenwich Mean Time\", f.print(dt1));\n         DateTime dt2 = new DateTime(2011, 7, 4, 12, 30, 0, LONDON);", "timestamp": 1344869218, "metainfo": ""}