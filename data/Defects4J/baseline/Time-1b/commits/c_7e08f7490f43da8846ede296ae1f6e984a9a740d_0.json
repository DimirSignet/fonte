{"sha": "7e08f7490f43da8846ede296ae1f6e984a9a740d", "log": "Merge remote-tracking branch 'hajimes/period_ja'", "commit": "\n--- a/src/main/java/org/joda/time/format/PeriodFormat.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormat.java\n      * {@code org.joda.time.format.messages}.\n      * This can be added to via the normal classpath resource bundle mechanisms.\n      * <p>\n-     * Available languages are English, German, Dutch, French, Spanish and Portuguese.\n+     * Available languages are Danish, Dutch, English, French, German, Japanese, Portuguese, and Spanish.\n      * \n      * @return the formatter, not null\n      * @since 2.0\n--- a/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/src/main/java/org/joda/time/format/PeriodFormatterBuilder.java\n             }\n \n             boolean found = false;\n+            int parsedFormLength = -1;\n             if (position > oldPos) {\n                 // Consume this separator.\n                 String[] parsedForms = iParsedForms;\n                         periodStr.regionMatches\n                         (true, position, parsedForm, 0, parsedForm.length())) {\n                         \n-                        position += (parsedForm == null ? 0 : parsedForm.length());\n+                        parsedFormLength = (parsedForm == null ? 0 : parsedForm.length());\n+                        position += parsedFormLength;\n                         found = true;\n                         break;\n                     }\n                 return position;\n             }\n \n-            if (found && position == oldPos) {\n+            if (found && position == oldPos && parsedFormLength > 0) {\n                 // Separator should not have been supplied.\n                 return ~oldPos;\n             }\n--- a/src/test/java/org/joda/time/format/TestPeriodFormat.java\n+++ b/src/test/java/org/joda/time/format/TestPeriodFormat.java\n     private static final Locale DE = new Locale(\"de\");\n     private static final Locale NL = new Locale(\"nl\");\n     private static final Locale DA = new Locale(\"da\");\n+    private static final Locale JA = new Locale(\"ja\");\n \n     private Locale originalLocale = null;\n \n     }\n \n     //-----------------------------------------------------------------------\n+    public void test_getDefault_checkRedundantSeparator() {\n+        try {\n+            PeriodFormat.getDefault().parsePeriod(\"2 days and 5 hours \");\n+            fail(\"No exception was caught\");\n+        } catch (Exception e) {\n+            assertEquals(IllegalArgumentException.class, e.getClass());\n+        }\n+    }    \n+    \n+    //-----------------------------------------------------------------------\n     public void test_getDefault_cached() {\n         assertSame(PeriodFormat.getDefault(), PeriodFormat.getDefault());\n     }\n         assertEquals(\"2 \\u00E5r, 3 m\\u00E5neder, 4 uger, 2 dage, 5 timer, 6 minutter, 7 sekunder og 8 millisekunder\", PeriodFormat.wordBased(DA).print(p));\n     }\n \n+    //-----------------------------------------------------------------------\n     public void test_wordBased_da_formatSinglular() {\n         Period p = new Period(1, 1, 1, 1, 1, 1, 1, 1);\n         assertEquals(\"1 \\u00E5r, 1 m\\u00E5ned, 1 uge, 1 dag, 1 time, 1 minut, 1 sekund og 1 millisekund\", PeriodFormat.wordBased(DA).print(p));\n     }\n-\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_da_cached() {\n+        assertSame(PeriodFormat.wordBased(DA), PeriodFormat.wordBased(DA));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    // wordBased(Locale ja)\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_ja_formatMultiple() {\n+        Period p = new Period(2, 3, 4, 2, 5, 6 ,7, 8);\n+        assertEquals(\"2\\u5E743\\u304B\\u67084\\u9031\\u95932\\u65E55\\u6642\\u95936\\u52067\\u79D28\\u30DF\\u30EA\\u79D2\", PeriodFormat.wordBased(JA).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_ja_formatSingular() {\n+        Period p = new Period(1, 1, 1, 1, 1, 1, 1, 1);\n+        assertEquals(\"1\\u5E741\\u304B\\u67081\\u9031\\u95931\\u65E51\\u6642\\u95931\\u52061\\u79D21\\u30DF\\u30EA\\u79D2\", PeriodFormat.wordBased(JA).print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_ja_cached() {\n+        assertSame(PeriodFormat.wordBased(JA), PeriodFormat.wordBased(JA));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_ja_parseOneField() {\n+        Period p = Period.days(2);\n+        assertEquals(p, PeriodFormat.wordBased(JA).parsePeriod(\"2\\u65E5\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_ja_parseTwoFields() {\n+        Period p = Period.days(2).withHours(5);\n+        assertEquals(p, PeriodFormat.wordBased(JA).parsePeriod(\"2\\u65E55\\u6642\\u9593\"));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void test_wordBased_ja_checkRedundantSeparator() {\n+        try {\n+            // Spaces are not valid separators in Japanese\n+            PeriodFormat.wordBased(JA).parsePeriod(\"2\\u65E5 \");\n+            fail(\"No exception was caught\");\n+        } catch (Exception e) {\n+            assertEquals(IllegalArgumentException.class, e.getClass());\n+        }\n+    }   \n+    \n     //-----------------------------------------------------------------------\n     // Cross check languages\n     //-----------------------------------------------------------------------", "timestamp": 1357320390, "metainfo": ""}