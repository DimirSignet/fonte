{"sha": "41bfd0a024869ee41a444ceece4581c11308cc2f", "log": "Add ability to display milliseconds as decimal places of seconds   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/FormatUtils.java\n+++ b/JodaTime/src/java/org/joda/time/format/FormatUtils.java\n     }\n \n     /**\n-     * Calculates the number of decimal digits for the given value, ignoring\n-     * sign.\n-     */\n-    public static int calculateDigitCount(int value) {\n-        if (value < 0) {\n-            if (value != Integer.MIN_VALUE) {\n-                value = -value;\n-            } else {\n-                return 10;\n+     * Calculates the number of decimal digits for the given value,\n+     * including the sign.\n+     */\n+    public static int calculateDigitCount(long value) {\n+        if (value < 0) {\n+            if (value != Long.MIN_VALUE) {\n+                return calculateDigitCount(-value) + 1;\n+            } else {\n+                return 20;\n             }\n         }\n         return \n--- a/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n+++ b/JodaTime/src/java/org/joda/time/format/ISOPeriodFormat.java\n                 .appendSuffix(\"H\")\n                 .appendMinutes()\n                 .appendSuffix(\"M\")\n-                .appendSeconds()\n+                .appendSecondsWithOptionalMillis()\n                 .appendSuffix(\"S\")\n                 .toFormatter();\n         }\n                 .appendSeparatorIfFieldsAfter(\"T\")\n                 .appendHours()\n                 .appendMinutes()\n-                .appendSeconds()\n+                .appendSecondsWithOptionalMillis()\n                 .toFormatter();\n         }\n         return iAlternate;\n                 .appendSeparator(\":\")\n                 .appendMinutes()\n                 .appendSeparator(\":\")\n-                .appendSeconds()\n+                .appendSecondsWithOptionalMillis()\n                 .toFormatter();\n         }\n         return iAlternateExtended;\n                 .appendSeparatorIfFieldsAfter(\"T\")\n                 .appendHours()\n                 .appendMinutes()\n-                .appendSeconds()\n+                .appendSecondsWithOptionalMillis()\n                 .toFormatter();\n         }\n         return iAlternateWithWeeks;\n                 .appendSeparator(\":\")\n                 .appendMinutes()\n                 .appendSeparator(\":\")\n-                .appendSeconds()\n+                .appendSecondsWithOptionalMillis()\n                 .toFormatter();\n         }\n         return iAlternateExtendedWihWeeks;\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.joda.time.DateTimeConstants;\n import org.joda.time.PeriodType;\n import org.joda.time.ReadWritablePeriod;\n import org.joda.time.ReadablePeriod;\n     }\n \n     /**\n+     * Instruct the printer to emit a combined seconds and millis field, if supported.\n+     * The millis will overflow into the seconds if necessary.\n+     * The millis are always output.\n+     *\n+     * @return this PeriodFormatterBuilder\n+     */\n+    public PeriodFormatterBuilder appendSecondsWithMillis() {\n+        appendField(9);\n+        return this;\n+    }\n+\n+    /**\n+     * Instruct the printer to emit a combined seconds and millis field, if supported.\n+     * The millis will overflow into the seconds if necessary.\n+     * The millis are only output if non-zero.\n+     *\n+     * @return this PeriodFormatterBuilder\n+     */\n+    public PeriodFormatterBuilder appendSecondsWithOptionalMillis() {\n+        appendField(10);\n+        return this;\n+    }\n+\n+    /**\n      * Instruct the printer to emit an integer millis field, if supported.\n      *\n      * @return this PeriodFormatterBuilder\n         }\n \n         public int countFieldsToPrint(ReadablePeriod period) {\n-            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) >= 0) {\n+            if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {\n                 return 1;\n             }\n             return 0;\n \n         public int calculatePrintedLength(ReadablePeriod period) {\n             long valueLong = getFieldValue(period);\n-            if (valueLong < 0) {\n+            if (valueLong == Long.MAX_VALUE) {\n                 return 0;\n             }\n \n-            int value = (int)valueLong;\n-\n-            int sum = Math.max\n-                (FormatUtils.calculateDigitCount(value), iMinPrintedDigits);\n-            if (value < 0) {\n-                // Account for sign character\n-                sum++;\n-            }\n+            int sum = Math.max(FormatUtils.calculateDigitCount(valueLong), iMinPrintedDigits);\n+            if (iFieldType >= 9) {\n+                sum++; // decimal point\n+                if (iFieldType == 10 && (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND) == 0) {\n+                    sum -= 4; // remove three digits and decimal point\n+                }\n+                valueLong = valueLong / DateTimeConstants.MILLIS_PER_SECOND;\n+            }\n+            int value = (int) valueLong;\n \n             PeriodFieldAffix affix;\n             if ((affix = iPrefix) != null) {\n         \n         public void printTo(StringBuffer buf, ReadablePeriod period) {\n             long valueLong = getFieldValue(period);\n-            if (valueLong < 0) {\n+            if (valueLong == Long.MAX_VALUE) {\n                 return;\n             }\n-            int value = (int)valueLong;\n+            int value = (int) valueLong;\n+            if (iFieldType >= 9) {\n+                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\n+            }\n \n             PeriodFieldAffix affix;\n             if ((affix = iPrefix) != null) {\n             } else {\n                 FormatUtils.appendPaddedInteger(buf, value, minDigits);\n             }\n+            if (iFieldType >= 9) {\n+                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n+                if (iFieldType == 9 || dp > 0) {\n+                    buf.append('.');\n+                    FormatUtils.appendPaddedInteger(buf, dp, 3);\n+                }\n+            }\n             if ((affix = iSuffix) != null) {\n                 affix.printTo(buf, value);\n             }\n \n         public void printTo(Writer out, ReadablePeriod period) throws IOException {\n             long valueLong = getFieldValue(period);\n-            if (valueLong < 0) {\n+            if (valueLong == Long.MAX_VALUE) {\n                 return;\n             }\n-            int value = (int)valueLong;\n+            int value = (int) valueLong;\n+            if (iFieldType >= 9) {\n+                value = (int) (valueLong / DateTimeConstants.MILLIS_PER_SECOND);\n+            }\n \n             PeriodFieldAffix affix;\n             if ((affix = iPrefix) != null) {\n                 FormatUtils.writeUnpaddedInteger(out, value);\n             } else {\n                 FormatUtils.writePaddedInteger(out, value, minDigits);\n+            }\n+            if (iFieldType >= 9) {\n+                int dp = (int) (Math.abs(valueLong) % DateTimeConstants.MILLIS_PER_SECOND);\n+                if (iFieldType == 9 || dp > 0) {\n+                    out.write('.');\n+                    FormatUtils.writePaddedInteger(out, dp, 3);\n+                }\n             }\n             if ((affix = iSuffix) != null) {\n                 affix.printTo(out, value);\n         }\n \n         /**\n-         * @return negative value if nothing to print, otherwise lower 32 bits\n-         * is signed int value.\n+         * @return Long.MAX_VALUE if nothing to print, otherwise value\n          */\n         long getFieldValue(ReadablePeriod period) {\n             PeriodType type;\n \n             switch (iFieldType) {\n             default:\n-                return -1;\n+                return Long.MAX_VALUE;\n             case 1:\n                 if (type != null && type.years().isSupported() == false) {\n-                    return -1;\n+                    return Long.MAX_VALUE;\n                 }\n                 value = period.getYears();\n                 break;\n             case 2:\n                 if (type != null && type.months().isSupported() == false) {\n-                    return -1;\n+                    return Long.MAX_VALUE;\n                 }\n                 value = period.getMonths();\n                 break;\n             case 3:\n                 if (type != null && type.weeks().isSupported() == false) {\n-                    return -1;\n+                    return Long.MAX_VALUE;\n                 }\n                 value = period.getWeeks();\n                 break;\n             case 4:\n                 if (type != null && type.days().isSupported() == false) {\n-                    return -1;\n+                    return Long.MAX_VALUE;\n                 }\n                 value = period.getDays();\n                 break;\n             case 5:\n                 if (type != null && type.hours().isSupported() == false) {\n-                    return -1;\n+                    return Long.MAX_VALUE;\n                 }\n                 value = period.getHours();\n                 break;\n             case 6:\n                 if (type != null && type.minutes().isSupported() == false) {\n-                    return -1;\n+                    return Long.MAX_VALUE;\n                 }\n                 value = period.getMinutes();\n                 break;\n             case 7:\n                 if (type != null && type.seconds().isSupported() == false) {\n-                    return -1;\n+                    return Long.MAX_VALUE;\n                 }\n                 value = period.getSeconds();\n                 break;\n             case 8:\n                 if (type != null && type.millis().isSupported() == false) {\n-                    return -1;\n+                    return Long.MAX_VALUE;\n                 }\n                 value = period.getMillis();\n                 break;\n+            case 9: // drop through\n+            case 10:\n+                if (type != null && type.seconds().isSupported() == false && type.millis().isSupported() == false) {\n+                    return Long.MAX_VALUE;\n+                }\n+                value = period.getSeconds() * DateTimeConstants.MILLIS_PER_SECOND + period.getMillis();\n+                break;\n             }\n \n             if (value == 0 && iPrintZeroSetting == PRINT_ZERO_RARELY) {\n-                return -1;\n-            }\n-\n-            return value & 0xffffffffL;\n+                return Long.MAX_VALUE;\n+            }\n+\n+            return value;\n         }\n \n         boolean isSupported(PeriodType type) {\n                 return type.seconds().isSupported();\n             case 8:\n                 return type.millis().isSupported();\n+            case 9: // drop through\n+            case 10:\n+                return type.seconds().isSupported() ||  type.millis().isSupported();\n             }\n         }\n \n--- a/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormat.java\n \n     //-----------------------------------------------------------------------\n     public void testFormatStandard() {\n-        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", ISOPeriodFormat.getInstance().standard().print(PERIOD));\n-        assertEquals(\"PT0S\", ISOPeriodFormat.getInstance().standard().print(EMPTY_PERIOD));\n+        Period p = new Period(1, 2, 3, 4, 5, 6 ,7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", ISOPeriodFormat.getInstance().standard().print(p));\n+        p = new Period(1, 2, 3, 4, 5, 6 ,7, 0);\n+        assertEquals(\"P1Y2M3W4DT5H6M7S\", ISOPeriodFormat.getInstance().standard().print(p));\n+        \n+        p = new Period(0);\n+        assertEquals(\"PT0S\", ISOPeriodFormat.getInstance().standard().print(p));\n+        p = new Period(0, PeriodType.getAllType().withMillisRemoved().withSecondsRemoved());\n+        assertEquals(\"PT0M\", ISOPeriodFormat.getInstance().standard().print(p));\n+        \n         assertEquals(\"P1Y4DT5H6M7.008S\", ISOPeriodFormat.getInstance().standard().print(YEAR_DAY_PERIOD));\n         assertEquals(\"PT0S\", ISOPeriodFormat.getInstance().standard().print(EMPTY_YEAR_DAY_PERIOD));\n         assertEquals(\"P1Y2M3W4D\", ISOPeriodFormat.getInstance().standard().print(DATE_PERIOD));\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n         assertEquals(1, f.countFieldsToPrint(PERIOD));\n     }\n \n+    public void testFormatSecondsWithMillis() {\n+        PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter();\n+        Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n+        assertEquals(\"7.000\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n+        assertEquals(\"7.001\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n+        assertEquals(\"7.999\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n+        assertEquals(\"8.000\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n+        assertEquals(\"8.001\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n+        assertEquals(\"6.999\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n+        assertEquals(\"-6.999\", f.print(p));\n+        assertEquals(6, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n+        assertEquals(\"-7.001\", f.print(p));\n+        assertEquals(6, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+    }\n+\n+    public void testFormatSecondsWithOptionalMillis() {\n+        PeriodFormatter f = builder.appendSecondsWithOptionalMillis().toFormatter();\n+        Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n+        assertEquals(\"7\", f.print(p));\n+        assertEquals(1, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n+        assertEquals(\"7.001\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n+        assertEquals(\"7.999\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n+        assertEquals(\"8\", f.print(p));\n+        assertEquals(1, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n+        assertEquals(\"8.001\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n+        assertEquals(\"6.999\", f.print(p));\n+        assertEquals(5, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n+        assertEquals(\"-6.999\", f.print(p));\n+        assertEquals(6, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+        \n+        p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n+        assertEquals(\"-7.001\", f.print(p));\n+        assertEquals(6, f.calculatePrintedLength(p));\n+        assertEquals(1, f.countFieldsToPrint(p));\n+    }\n+\n     public void testFormatMillis() {\n         PeriodFormatter f = builder.appendMillis().toFormatter();\n         assertEquals(\"8\", f.print(PERIOD));", "timestamp": 1093706825, "metainfo": ""}