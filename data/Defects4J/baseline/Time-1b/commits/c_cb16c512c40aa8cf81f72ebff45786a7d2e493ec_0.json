{"sha": "cb16c512c40aa8cf81f72ebff45786a7d2e493ec", "log": "Add Period.fieldDifference factory method to calculate periods in a different way   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/Period.java\n+++ b/JodaTime/src/java/org/joda/time/Period.java\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Creates a period from two partially specified times, calculating\n+     * by field difference.\n+     * <p>\n+     * The two partials must contain the same fields, thus you can\n+     * specify two YearMonthDay objects, or two TimeOfDay objects,\n+     * but not one of each. Also, the partial may not contain overlapping\n+     * fields, such as dayOfWeek and dayOfMonth.\n+     * <p>\n+     * Calculation by field difference works by extracting the difference\n+     * one field at a time and not wrapping into other fields.\n+     * Thus 2005-06-09/2007-04-12 will yield P1Y-2M3D.\n+     * <p>\n+     * For example, you have an event that always runs from the 27th of\n+     * each month to the 2nd of the next month. If you calculate this\n+     * period using a standard constructor, then you will get between\n+     * P3D and P6D depending on the month. If you use this method, then\n+     * you will get P1M-25D. This field-difference based period can\n+     * be successfully applied to each month of the year to obtain the\n+     * correct end date for a given start date.\n+     *\n+     * @param start  the start of the period, must not be null\n+     * @param end  the end of the period, must not be null\n+     * @param type  which set of fields this period supports, null means standard\n+     * @throws IllegalArgumentException if the partials are null or invalid\n+     * @since 1.1\n+     */\n+    public static Period fieldDifference(ReadablePartial start, ReadablePartial end) {\n+        if (start == null || end == null) {\n+            throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");\n+        }\n+        if (start.size() != end.size()) {\n+            throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n+        }\n+        DurationFieldType[] types = new DurationFieldType[start.size()];\n+        int[] values = new int[start.size()];\n+        for (int i = 0, isize = start.size(); i < isize; i++) {\n+            if (start.getFieldType(i) != end.getFieldType(i)) {\n+                throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");\n+            }\n+            types[i] = start.getFieldType(i).getDurationType();\n+            if (i > 0 && types[i - 1] == types[i]) {\n+                throw new IllegalArgumentException(\"ReadablePartial objects must not have overlapping fields\");\n+            }\n+            values[i] = end.getValue(i) - start.getValue(i);\n+        }\n+        return new Period(values, PeriodType.forFields(types));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Creates a new empty period with the standard set of fields.\n      * <p>\n      * One way to initialise a period is as follows:\n     }\n \n     /**\n-     * Creates a period from the given duration and end point.\n+     * Creates a period from two partially specified times.\n      * The two partials must contain the same fields, thus you can\n      * specify two YearMonthDay objects, or two TimeOfDay objects,\n      * but not one of each.\n--- a/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestPeriod_Constructors.java\n         assertEquals(4, test.getMillis());\n     }\n \n+    //-----------------------------------------------------------------------\n+    public void testFactoryYears() throws Throwable {\n+        Period test = Period.years(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(6, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryMonths() throws Throwable {\n+        Period test = Period.months(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(6, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryWeeks() throws Throwable {\n+        Period test = Period.weeks(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(6, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryDays() throws Throwable {\n+        Period test = Period.days(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(6, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryHours() throws Throwable {\n+        Period test = Period.hours(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(6, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryMinutes() throws Throwable {\n+        Period test = Period.minutes(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(6, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactorySeconds() throws Throwable {\n+        Period test = Period.seconds(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(6, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryMillis() throws Throwable {\n+        Period test = Period.millis(6);\n+        assertEquals(PeriodType.standard(), test.getPeriodType());\n+        assertEquals(0, test.getYears());\n+        assertEquals(0, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(0, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(6, test.getMillis());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testFactoryFieldDifference1() throws Throwable {\n+        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n+        YearMonthDay end = new YearMonthDay(2004, 6, 7);\n+        Period test = Period.fieldDifference(start, end);\n+        assertEquals(PeriodType.yearMonthDay(), test.getPeriodType());\n+        assertEquals(-1, test.getYears());\n+        assertEquals(2, test.getMonths());\n+        assertEquals(0, test.getWeeks());\n+        assertEquals(-2, test.getDays());\n+        assertEquals(0, test.getHours());\n+        assertEquals(0, test.getMinutes());\n+        assertEquals(0, test.getSeconds());\n+        assertEquals(0, test.getMillis());\n+    }\n+\n+    public void testFactoryFieldDifference2() throws Throwable {\n+        YearMonthDay ymd = new YearMonthDay(2005, 4, 9);\n+        try {\n+            Period.fieldDifference(ymd, (ReadablePartial) null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            Period.fieldDifference((ReadablePartial) null, ymd);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFactoryFieldDifference3() throws Throwable {\n+        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n+        TimeOfDay endTime = new TimeOfDay(12, 30, 40, 0);\n+        try {\n+            Period.fieldDifference(start, endTime);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFactoryFieldDifference4() throws Throwable {\n+        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.monthOfYear(),\n+            DateTimeFieldType.dayOfWeek(),\n+        };\n+        Partial end = new Partial(types, new int[] {1, 2, 3});\n+        try {\n+            Period.fieldDifference(start, end);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testFactoryFieldDifference5() throws Throwable {\n+        YearMonthDay start = new YearMonthDay(2005, 4, 9);\n+        DateTimeFieldType[] types = new DateTimeFieldType[] {\n+            DateTimeFieldType.year(),\n+            DateTimeFieldType.dayOfMonth(),\n+            DateTimeFieldType.dayOfWeek(),\n+        };\n+        Partial end = new Partial(types, new int[] {1, 2, 3});\n+        try {\n+            Period.fieldDifference(start, end);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n }", "timestamp": 1120603702, "metainfo": ""}