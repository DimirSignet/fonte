{"sha": "c9fe9c8e37c2945ae45c0adf6a475f35c0e1e5dc", "log": "Change to test in 2002-2004 where time zone is predictable   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Basics.java\n  * @author Stephen Colebourne\n  */\n public class TestDateTime_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n \n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n     \n-    // 1970-06-09\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n     private long TEST_TIME_NOW =\n-            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n             \n-    // 1970-04-05\n+    // 2002-04-05\n     private long TEST_TIME1 =\n-        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n-    // 1971-05-06\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n     private long TEST_TIME2 =\n-        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+    \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n \n     }\n \n     //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testGet() {\n         DateTime test = new DateTime();\n         assertEquals(1, test.get(ISOChronology.getInstance().era()));\n-        assertEquals(19, test.get(ISOChronology.getInstance().centuryOfEra()));\n-        assertEquals(70, test.get(ISOChronology.getInstance().yearOfCentury()));\n-        assertEquals(1970, test.get(ISOChronology.getInstance().yearOfEra()));\n-        assertEquals(1970, test.get(ISOChronology.getInstance().year()));\n+        assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));\n+        assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().year()));\n         assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));\n         assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));\n-        assertEquals(1970, test.get(ISOChronology.getInstance().weekyear()));\n-        assertEquals(24, test.get(ISOChronology.getInstance().weekOfWeekyear()));\n-        assertEquals(2, test.get(ISOChronology.getInstance().dayOfWeek()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().weekyear()));\n+        assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear()));\n+        assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek()));\n         assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));\n         assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));\n         assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday()));\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n         \n         assertEquals(1, test.getEra());\n-        assertEquals(19, test.getCenturyOfEra());\n-        assertEquals(70, test.getYearOfCentury());\n-        assertEquals(1970, test.getYearOfEra());\n-        assertEquals(1970, test.getYear());\n+        assertEquals(20, test.getCenturyOfEra());\n+        assertEquals(2, test.getYearOfCentury());\n+        assertEquals(2002, test.getYearOfEra());\n+        assertEquals(2002, test.getYear());\n         assertEquals(6, test.getMonthOfYear());\n         assertEquals(9, test.getDayOfMonth());\n-        assertEquals(1970, test.getWeekyear());\n-        assertEquals(24, test.getWeekOfWeekyear());\n-        assertEquals(2, test.getDayOfWeek());\n+        assertEquals(2002, test.getWeekyear());\n+        assertEquals(23, test.getWeekOfWeekyear());\n+        assertEquals(7, test.getDayOfWeek());\n         assertEquals(160, test.getDayOfYear());\n         assertEquals(1, test.getHourOfDay());\n         assertEquals(0, test.getMinuteOfHour());\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         DateTime test = new DateTime(TEST_TIME_NOW);\n-        assertEquals(\"1970-06-09T01:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString());\n         \n         test = new DateTime(TEST_TIME_NOW, PARIS);\n-        assertEquals(\"1970-06-09T02:00:00.000+02:00\", test.toString());\n+        assertEquals(\"2002-06-09T02:00:00.000+02:00\", test.toString());\n     }\n \n     public void testToString_String() {\n         DateTime test = new DateTime(TEST_TIME_NOW);\n-        assertEquals(\"1970 01\", test.toString(\"yyyy HH\"));\n-        assertEquals(\"1970-06-09T01:00:00.000+01:00\", test.toString(null));\n+        assertEquals(\"2002 01\", test.toString(\"yyyy HH\"));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null));\n     }\n \n     public void testToString_String_String() {\n         DateTime test = new DateTime(TEST_TIME_NOW);\n-        assertEquals(\"Tue 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n-        assertEquals(\"mar. 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n-        assertEquals(\"1970-06-09T01:00:00.000+01:00\", test.toString(null, Locale.ENGLISH));\n-        assertEquals(\"Tue 9/6\", test.toString(\"EEE d/M\", null));\n-        assertEquals(\"1970-06-09T01:00:00.000+01:00\", test.toString(null, null));\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", Locale.ENGLISH));\n+        assertEquals(\"dim. 9/6\", test.toString(\"EEE d/M\", Locale.FRENCH));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, Locale.ENGLISH));\n+        assertEquals(\"Sun 9/6\", test.toString(\"EEE d/M\", null));\n+        assertEquals(\"2002-06-09T01:00:00.000+01:00\", test.toString(null, null));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testWithZoneRetainFields_DateTimeZone() {\n         DateTime test = new DateTime(TEST_TIME1);\n         DateTime result = test.withZoneRetainFields(PARIS);\n-        assertEquals(test.getMillis() - 60 * 60 * 1000, result.getMillis());\n+        assertEquals(test.getMillis() - DateTimeConstants.MILLIS_PER_HOUR, result.getMillis());\n         assertEquals(ISOChronology.getInstance(PARIS), result.getChronology());\n         \n         test = new DateTime(TEST_TIME1, GregorianChronology.getInstance(PARIS));\n         result = test.withZoneRetainFields(null);\n-        assertEquals(test.getMillis() - 60 * 60 * 1000, result.getMillis());\n+        assertEquals(test.getMillis() + DateTimeConstants.MILLIS_PER_HOUR, result.getMillis());\n         assertEquals(GregorianChronology.getInstance(), result.getChronology());\n     }\n     \n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Constructors.java\n  * @author Stephen Colebourne\n  */\n public class TestDateTime_Constructors extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n \n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n     \n-    // 1970-06-09\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n     private long TEST_TIME_NOW =\n-            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n             \n-    // 1970-04-05\n+    // 2002-04-05\n     private long TEST_TIME1 =\n-        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n         \n-    // 1971-05-06\n+    // 2003-05-06\n     private long TEST_TIME2 =\n-        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n         \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n         DateTimeZone.setDefault(zone);\n         Locale.setDefault(locale);\n         zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n     }\n \n     //-----------------------------------------------------------------------\n      * Test constructor (int, int, int)\n      */\n     public void testConstructor_int_int_int_int_int_int_int() throws Throwable {\n-        DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0);  // +01:00\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0);  // +01:00\n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n         assertEquals(LONDON, test.getZone());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            new DateTime(1970, 0, 9, 0, 0, 0, 0);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new DateTime(1970, 13, 9, 0, 0, 0, 0);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new DateTime(1970, 6, 0, 0, 0, 0, 0);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new DateTime(1970, 6, 31, 0, 0, 0, 0);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        new DateTime(1970, 7, 31, 0, 0, 0, 0);\n-        try {\n-            new DateTime(1970, 7, 32, 0, 0, 0, 0);\n+            new DateTime(2002, 0, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 13, 9, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 0, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 31, 0, 0, 0, 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new DateTime(2002, 7, 31, 0, 0, 0, 0);\n+        try {\n+            new DateTime(2002, 7, 32, 0, 0, 0, 0);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n      * Test constructor (int, int, int, DateTimeZone)\n      */\n     public void testConstructor_int_int_int_int_int_int_int_DateTimeZone() throws Throwable {\n-        DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0, PARIS);  // +01:00\n+        DateTime test = new DateTime(2002, 6, 9, 2, 0, 0, 0, PARIS);  // +02:00\n         assertEquals(ISOChronology.getInstance(PARIS), test.getChronology());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n         try {\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            new DateTime(1970, 0, 9, 0, 0, 0, 0, PARIS);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new DateTime(1970, 13, 9, 0, 0, 0, 0, PARIS);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new DateTime(1970, 6, 0, 0, 0, 0, 0, PARIS);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new DateTime(1970, 6, 31, 0, 0, 0, 0, PARIS);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        new DateTime(1970, 7, 31, 0, 0, 0, 0, PARIS);\n-        try {\n-            new DateTime(1970, 7, 32, 0, 0, 0, 0, PARIS);\n+            new DateTime(2002, 0, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 13, 9, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 0, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 31, 0, 0, 0, 0, PARIS);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new DateTime(2002, 7, 31, 0, 0, 0, 0, PARIS);\n+        try {\n+            new DateTime(2002, 7, 32, 0, 0, 0, 0, PARIS);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n      * Test constructor (int, int, int, DateTimeZone=null)\n      */\n     public void testConstructor_int_int_int_int_int_int_int_nullDateTimeZone() throws Throwable {\n-        DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0, (DateTimeZone) null);  // +01:00\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0, (DateTimeZone) null);  // +01:00\n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n     }\n      * Test constructor (int, int, int, Chronology)\n      */\n     public void testConstructor_int_int_int_int_int_int_int_Chronology() throws Throwable {\n-        DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0, GregorianChronology.getInstance());  // +01:00\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0, GregorianChronology.getInstance());  // +01:00\n         assertEquals(GregorianChronology.getInstance(), test.getChronology());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n         try {\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n-            new DateTime(1970, 0, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new DateTime(1970, 13, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new DateTime(1970, 6, 0, 0, 0, 0, 0, GregorianChronology.getInstance());\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            new DateTime(1970, 6, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        new DateTime(1970, 7, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n-        try {\n-            new DateTime(1970, 7, 32, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            new DateTime(2002, 0, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 13, 9, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 0, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            new DateTime(2002, 6, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        new DateTime(2002, 7, 31, 0, 0, 0, 0, GregorianChronology.getInstance());\n+        try {\n+            new DateTime(2002, 7, 32, 0, 0, 0, 0, GregorianChronology.getInstance());\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n      * Test constructor (int, int, int, Chronology=null)\n      */\n     public void testConstructor_int_int_int_int_int_int_int_nullChronology() throws Throwable {\n-        DateTime test = new DateTime(1970, 6, 9, 1, 0, 0, 0, (Chronology) null);  // +01:00\n+        DateTime test = new DateTime(2002, 6, 9, 1, 0, 0, 0, (Chronology) null);  // +01:00\n         assertEquals(ISOChronology.getInstance(), test.getChronology());\n         assertEquals(TEST_TIME_NOW, test.getMillis());\n     }\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n  * @author Stephen Colebourne\n  */\n public class TestDateTime_Properties extends TestCase {\n-    // Summer time:\n-    // 1968-02-18 to 1971-10-31 - +01:00 all year round!\n-    // 1972  UK  Mar 19 - Oct 29\n-    // 1973  UK  Mar 18 - Oct 28\n+//    // Summer time:\n+//    // 1968-02-18 to 1971-10-31 - +01:00 all year round!\n+//    // 1972  UK  Mar 19 - Oct 29\n+//    // 1973  UK  Mar 18 - Oct 28\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n \n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n     \n-    // 1970-06-09\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n     private long TEST_TIME_NOW =\n-            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n             \n-    // 1970-04-05\n+    // 2002-04-05 Fri\n     private long TEST_TIME1 =\n-        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n-    // 1971-05-06\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06 Tue\n     private long TEST_TIME2 =\n-        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n         \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testPropertyGetEra() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().era(), test.era().getField());\n         assertEquals(\"era\", test.era().getName());\n         assertEquals(\"Property[era]\", test.era().toString());\n \n     //-----------------------------------------------------------------------\n     public void testPropertyGetYearOfEra() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().yearOfEra(), test.yearOfEra().getField());\n         assertEquals(\"yearOfEra\", test.yearOfEra().getName());\n         assertEquals(\"Property[yearOfEra]\", test.yearOfEra().toString());\n         assertSame(test, test.yearOfEra().getReadableInstant());\n         assertSame(test, test.yearOfEra().getDateTime());\n-        assertEquals(1972, test.yearOfEra().get());\n-        assertEquals(\"1972\", test.yearOfEra().getAsText());\n-        assertEquals(\"1972\", test.yearOfEra().getAsText(Locale.FRENCH));\n-        assertEquals(\"1972\", test.yearOfEra().getAsShortText());\n-        assertEquals(\"1972\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(2004, test.yearOfEra().get());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText());\n+        assertEquals(\"2004\", test.yearOfEra().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().years(), test.yearOfEra().getDurationField());\n         assertEquals(null, test.yearOfEra().getRangeDurationField());\n         assertEquals(9, test.yearOfEra().getMaximumTextLength(null));\n \n     //-----------------------------------------------------------------------\n     public void testPropertyGetCenturyOfEra() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().centuryOfEra(), test.centuryOfEra().getField());\n         assertEquals(\"centuryOfEra\", test.centuryOfEra().getName());\n         assertEquals(\"Property[centuryOfEra]\", test.centuryOfEra().toString());\n         assertSame(test, test.centuryOfEra().getReadableInstant());\n         assertSame(test, test.centuryOfEra().getDateTime());\n-        assertEquals(19, test.centuryOfEra().get());\n-        assertEquals(\"19\", test.centuryOfEra().getAsText());\n-        assertEquals(\"19\", test.centuryOfEra().getAsText(Locale.FRENCH));\n-        assertEquals(\"19\", test.centuryOfEra().getAsShortText());\n-        assertEquals(\"19\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n+        assertEquals(20, test.centuryOfEra().get());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsText(Locale.FRENCH));\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText());\n+        assertEquals(\"20\", test.centuryOfEra().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().centuries(), test.centuryOfEra().getDurationField());\n         assertEquals(null, test.centuryOfEra().getRangeDurationField());\n         assertEquals(7, test.centuryOfEra().getMaximumTextLength(null));\n \n     //-----------------------------------------------------------------------\n     public void testPropertyGetYearOfCentury() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().yearOfCentury(), test.yearOfCentury().getField());\n         assertEquals(\"yearOfCentury\", test.yearOfCentury().getName());\n         assertEquals(\"Property[yearOfCentury]\", test.yearOfCentury().toString());\n         assertSame(test, test.yearOfCentury().getReadableInstant());\n         assertSame(test, test.yearOfCentury().getDateTime());\n-        assertEquals(72, test.yearOfCentury().get());\n-        assertEquals(\"72\", test.yearOfCentury().getAsText());\n-        assertEquals(\"72\", test.yearOfCentury().getAsText(Locale.FRENCH));\n-        assertEquals(\"72\", test.yearOfCentury().getAsShortText());\n-        assertEquals(\"72\", test.yearOfCentury().getAsShortText(Locale.FRENCH));\n+        assertEquals(4, test.yearOfCentury().get());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsText(Locale.FRENCH));\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText());\n+        assertEquals(\"4\", test.yearOfCentury().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().years(), test.yearOfCentury().getDurationField());\n         assertEquals(test.getChronology().centuries(), test.yearOfCentury().getRangeDurationField());\n         assertEquals(2, test.yearOfCentury().getMaximumTextLength(null));\n \n     //-----------------------------------------------------------------------\n     public void testPropertyGetYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().year(), test.year().getField());\n         assertEquals(\"year\", test.year().getName());\n         assertEquals(\"Property[year]\", test.year().toString());\n         assertSame(test, test.year().getReadableInstant());\n         assertSame(test, test.year().getDateTime());\n-        assertEquals(1972, test.year().get());\n-        assertEquals(\"1972\", test.year().getAsText());\n-        assertEquals(\"1972\", test.year().getAsText(Locale.FRENCH));\n-        assertEquals(\"1972\", test.year().getAsShortText());\n-        assertEquals(\"1972\", test.year().getAsShortText(Locale.FRENCH));\n+        assertEquals(2004, test.year().get());\n+        assertEquals(\"2004\", test.year().getAsText());\n+        assertEquals(\"2004\", test.year().getAsText(Locale.FRENCH));\n+        assertEquals(\"2004\", test.year().getAsShortText());\n+        assertEquals(\"2004\", test.year().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().years(), test.year().getDurationField());\n         assertEquals(null, test.year().getRangeDurationField());\n         assertEquals(9, test.year().getMaximumTextLength(null));\n     }\n \n     public void testPropertyLeapYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertEquals(true, test.year().isLeap());\n         assertEquals(1, test.year().getLeapAmount());\n         assertEquals(test.getChronology().days(), test.year().getLeapDurationField());\n-        test = new DateTime(1971, 6, 9, 0, 0, 0, 0);\n+        test = new DateTime(2003, 6, 9, 0, 0, 0, 0);\n         assertEquals(false, test.year().isLeap());\n         assertEquals(0, test.year().getLeapAmount());\n         assertEquals(test.getChronology().days(), test.year().getLeapDurationField());\n     }\n \n     public void testPropertyAddYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.year().addToCopy(9);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1981-06-09T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2013-06-09T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.year().addToCopy(0);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", copy.toString());\n-        \n-        copy = test.year().addToCopy(292277023 - 1972);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.year().addToCopy(292277023 - 2004);\n         assertEquals(292277023, copy.getYear());\n         \n         try {\n-            test.year().addToCopy(292277023 - 1972 + 1);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        \n-        copy = test.year().addToCopy(-1972);\n+            test.year().addToCopy(292277023 - 2004 + 1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        copy = test.year().addToCopy(-2004);\n         assertEquals(0, copy.getYear());\n         \n-        copy = test.year().addToCopy(-1973);\n+        copy = test.year().addToCopy(-2005);\n         assertEquals(-1, copy.getYear());\n         \n         try {\n-            test.year().addToCopy(-292275054 - 1972 - 1);\n+            test.year().addToCopy(-292275054 - 2004 - 1);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     public void testPropertyAddWrapFieldYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.year().addWrapFieldToCopy(9);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1981-06-09T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2013-06-09T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.year().addWrapFieldToCopy(0);\n-        assertEquals(1972, copy.getYear());\n-        \n-        copy = test.year().addWrapFieldToCopy(292277023 - 1972 + 1);\n+        assertEquals(2004, copy.getYear());\n+        \n+        copy = test.year().addWrapFieldToCopy(292277023 - 2004 + 1);\n         assertEquals(-292275054, copy.getYear());\n         \n-        copy = test.year().addWrapFieldToCopy(-292275054 - 1972 - 1);\n+        copy = test.year().addWrapFieldToCopy(-292275054 - 2004 - 1);\n         assertEquals(292277023, copy.getYear());\n     }\n \n     public void testPropertySetYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.year().setCopy(1960);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1960-06-09T00:00:00.000+01:00\", copy.toString());\n     }\n \n     public void testPropertySetTextYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.year().setCopy(\"1960\");\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n         assertEquals(\"1960-06-09T00:00:00.000+01:00\", copy.toString());\n     }\n \n \n     //-----------------------------------------------------------------------\n     public void testPropertyGetMonthOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().monthOfYear(), test.monthOfYear().getField());\n         assertEquals(\"monthOfYear\", test.monthOfYear().getName());\n         assertEquals(\"Property[monthOfYear]\", test.monthOfYear().toString());\n         assertEquals(test.getChronology().years(), test.monthOfYear().getRangeDurationField());\n         assertEquals(9, test.monthOfYear().getMaximumTextLength(null));\n         assertEquals(3, test.monthOfYear().getMaximumShortTextLength(null));\n-        test = new DateTime(1972, 7, 9, 0, 0, 0, 0);\n+        test = new DateTime(2004, 7, 9, 0, 0, 0, 0);\n         assertEquals(\"juillet\", test.monthOfYear().getAsText(Locale.FRENCH));\n         assertEquals(\"juil.\", test.monthOfYear().getAsShortText(Locale.FRENCH));\n         assertEquals(1, test.monthOfYear().getMinimumValue());\n     }\n \n     public void testPropertyLeapMonthOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertEquals(false, test.monthOfYear().isLeap());\n         assertEquals(0, test.monthOfYear().getLeapAmount());\n         assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n         \n-        test = new DateTime(1972, 2, 9, 0, 0, 0, 0);\n+        test = new DateTime(2004, 2, 9, 0, 0, 0, 0);\n         assertEquals(true, test.monthOfYear().isLeap());\n         assertEquals(1, test.monthOfYear().getLeapAmount());\n         assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n         \n-        test = new DateTime(1971, 6, 9, 0, 0, 0, 0);\n+        test = new DateTime(2003, 6, 9, 0, 0, 0, 0);\n         assertEquals(false, test.monthOfYear().isLeap());\n         assertEquals(0, test.monthOfYear().getLeapAmount());\n         assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n         \n-        test = new DateTime(1971, 2, 9, 0, 0, 0, 0);\n+        test = new DateTime(2003, 2, 9, 0, 0, 0, 0);\n         assertEquals(false, test.monthOfYear().isLeap());\n         assertEquals(0, test.monthOfYear().getLeapAmount());\n         assertEquals(test.getChronology().days(), test.monthOfYear().getLeapDurationField());\n     }\n \n     public void testPropertyAddMonthOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().addToCopy(6);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n         \n         copy = test.monthOfYear().addToCopy(7);\n-        assertEquals(\"1973-01-09T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2005-01-09T00:00:00.000Z\", copy.toString());\n         \n         copy = test.monthOfYear().addToCopy(-5);\n-        assertEquals(\"1972-01-09T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-01-09T00:00:00.000Z\", copy.toString());\n         \n         copy = test.monthOfYear().addToCopy(-6);\n-        assertEquals(\"1971-12-09T00:00:00.000Z\", copy.toString());\n-        \n-        test = new DateTime(1972, 1, 31, 0, 0, 0, 0);\n+        assertEquals(\"2003-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        test = new DateTime(2004, 1, 31, 0, 0, 0, 0);\n         copy = test.monthOfYear().addToCopy(1);\n-        assertEquals(\"1972-01-31T00:00:00.000Z\", test.toString());\n-        assertEquals(\"1972-02-29T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"2004-02-29T00:00:00.000Z\", copy.toString());\n         \n         copy = test.monthOfYear().addToCopy(2);\n-        assertEquals(\"1972-03-31T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-03-31T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.monthOfYear().addToCopy(3);\n-        assertEquals(\"1972-04-30T00:00:00.000+01:00\", copy.toString());\n-        \n-        test = new DateTime(1971, 1, 31, 0, 0, 0, 0);\n+        assertEquals(\"2004-04-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2003, 1, 31, 0, 0, 0, 0);\n         copy = test.monthOfYear().addToCopy(1);\n-        assertEquals(\"1971-02-28T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2003-02-28T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertyAddWrapFieldMonthOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().addWrapFieldToCopy(4);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-10-09T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-10-09T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.monthOfYear().addWrapFieldToCopy(8);\n-        assertEquals(\"1972-02-09T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-02-09T00:00:00.000Z\", copy.toString());\n         \n         copy = test.monthOfYear().addWrapFieldToCopy(-8);\n-        assertEquals(\"1972-10-09T00:00:00.000+01:00\", copy.toString());\n-        \n-        test = new DateTime(1972, 1, 31, 0, 0, 0, 0);\n+        assertEquals(\"2004-10-09T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 1, 31, 0, 0, 0, 0);\n         copy = test.monthOfYear().addWrapFieldToCopy(1);\n-        assertEquals(\"1972-01-31T00:00:00.000Z\", test.toString());\n-        assertEquals(\"1972-02-29T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"2004-02-29T00:00:00.000Z\", copy.toString());\n         \n         copy = test.monthOfYear().addWrapFieldToCopy(2);\n-        assertEquals(\"1972-03-31T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-03-31T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.monthOfYear().addWrapFieldToCopy(3);\n-        assertEquals(\"1972-04-30T00:00:00.000+01:00\", copy.toString());\n-        \n-        test = new DateTime(1973, 1, 31, 0, 0, 0, 0);\n+        assertEquals(\"2004-04-30T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2005, 1, 31, 0, 0, 0, 0);\n         copy = test.monthOfYear().addWrapFieldToCopy(1);\n-        assertEquals(\"1973-01-31T00:00:00.000Z\", test.toString());\n-        assertEquals(\"1973-02-28T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2005-01-31T00:00:00.000Z\", test.toString());\n+        assertEquals(\"2005-02-28T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertySetMonthOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().setCopy(12);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n-        \n-        test = new DateTime(1972, 1, 31, 0, 0, 0, 0);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n+        \n+        test = new DateTime(2004, 1, 31, 0, 0, 0, 0);\n         copy = test.monthOfYear().setCopy(2);\n-        assertEquals(\"1972-02-29T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-02-29T00:00:00.000Z\", copy.toString());\n         \n         try {\n             test.monthOfYear().setCopy(13);\n     }\n \n     public void testPropertySetTextMonthOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.monthOfYear().setCopy(\"12\");\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n         \n         copy = test.monthOfYear().setCopy(\"December\");\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n         \n         copy = test.monthOfYear().setCopy(\"Dec\");\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-12-09T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-12-09T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertyCompareToMonthOfYear() {\n \n     //-----------------------------------------------------------------------\n     public void testPropertyGetDayOfMonth() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().dayOfMonth(), test.dayOfMonth().getField());\n         assertEquals(\"dayOfMonth\", test.dayOfMonth().getName());\n         assertEquals(\"Property[dayOfMonth]\", test.dayOfMonth().toString());\n     }\n \n     public void testPropertyGetMaxMinValuesDayOfMonth() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertEquals(1, test.dayOfMonth().getMinimumValue());\n         assertEquals(1, test.dayOfMonth().getMinimumValueOverall());\n         assertEquals(30, test.dayOfMonth().getMaximumValue());\n         assertEquals(31, test.dayOfMonth().getMaximumValueOverall());\n-        test = new DateTime(1972, 7, 9, 0, 0, 0, 0);\n+        test = new DateTime(2004, 7, 9, 0, 0, 0, 0);\n         assertEquals(31, test.dayOfMonth().getMaximumValue());\n-        test = new DateTime(1972, 2, 9, 0, 0, 0, 0);\n+        test = new DateTime(2004, 2, 9, 0, 0, 0, 0);\n         assertEquals(29, test.dayOfMonth().getMaximumValue());\n-        test = new DateTime(1971, 2, 9, 0, 0, 0, 0);\n+        test = new DateTime(2003, 2, 9, 0, 0, 0, 0);\n         assertEquals(28, test.dayOfMonth().getMaximumValue());\n     }\n \n     public void testPropertyAddDayOfMonth() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfMonth().addToCopy(9);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-18T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-18T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfMonth().addToCopy(21);\n-        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfMonth().addToCopy(22);\n-        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfMonth().addToCopy(22 + 30);\n-        assertEquals(\"1972-07-31T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-07-31T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfMonth().addToCopy(22 + 31);\n-        assertEquals(\"1972-08-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-08-01T00:00:00.000+01:00\", copy.toString());\n \n         copy = test.dayOfMonth().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n-        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfMonth().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n-        assertEquals(\"1973-01-01T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2005-01-01T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfMonth().addToCopy(-8);\n-        assertEquals(\"1972-06-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfMonth().addToCopy(-9);\n-        assertEquals(\"1972-05-31T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-05-31T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfMonth().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n-        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfMonth().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n-        assertEquals(\"1971-12-31T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2003-12-31T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertyAddWrapFieldDayOfMonth() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfMonth().addWrapFieldToCopy(21);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfMonth().addWrapFieldToCopy(22);\n-        assertEquals(\"1972-06-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n-        assertEquals(\"1972-06-27T00:00:00.000+01:00\", copy.toString());\n-        \n-        test = new DateTime(1972, 7, 9, 0, 0, 0, 0);\n+        assertEquals(\"2004-06-27T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 7, 9, 0, 0, 0, 0);\n         copy = test.dayOfMonth().addWrapFieldToCopy(21);\n-        assertEquals(\"1972-07-30T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-07-30T00:00:00.000+01:00\", copy.toString());\n     \n         copy = test.dayOfMonth().addWrapFieldToCopy(22);\n-        assertEquals(\"1972-07-31T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-07-31T00:00:00.000+01:00\", copy.toString());\n     \n         copy = test.dayOfMonth().addWrapFieldToCopy(23);\n-        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n     \n         copy = test.dayOfMonth().addWrapFieldToCopy(-12);\n-        assertEquals(\"1972-07-28T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-07-28T00:00:00.000+01:00\", copy.toString());\n     }\n \n     public void testPropertySetDayOfMonth() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfMonth().setCopy(12);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-12T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-12T00:00:00.000+01:00\", copy.toString());\n         \n         try {\n             test.dayOfMonth().setCopy(31);\n     }\n \n     public void testPropertySetTextDayOfMonth() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfMonth().setCopy(\"12\");\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-12T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-12T00:00:00.000+01:00\", copy.toString());\n     }\n \n     public void testPropertyCompareToDayOfMonth() {\n     //-----------------------------------------------------------------------\n     public void testPropertyGetDayOfYear() {\n         // 31+29+31+30+31+9 = 161\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().dayOfYear(), test.dayOfYear().getField());\n         assertEquals(\"dayOfYear\", test.dayOfYear().getName());\n         assertEquals(\"Property[dayOfYear]\", test.dayOfYear().toString());\n     }\n \n     public void testPropertyGetMaxMinValuesDayOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertEquals(1, test.dayOfYear().getMinimumValue());\n         assertEquals(1, test.dayOfYear().getMinimumValueOverall());\n         assertEquals(366, test.dayOfYear().getMaximumValue());\n         assertEquals(366, test.dayOfYear().getMaximumValueOverall());\n-        test = new DateTime(1970, 6, 9, 0, 0, 0, 0);\n+        test = new DateTime(2002, 6, 9, 0, 0, 0, 0);\n         assertEquals(365, test.dayOfYear().getMaximumValue());\n         assertEquals(366, test.dayOfYear().getMaximumValueOverall());\n     }\n \n     public void testPropertyAddDayOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfYear().addToCopy(9);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-18T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-18T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfYear().addToCopy(21);\n-        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfYear().addToCopy(22);\n-        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfYear().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n-        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfYear().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n-        assertEquals(\"1973-01-01T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2005-01-01T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfYear().addToCopy(-8);\n-        assertEquals(\"1972-06-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfYear().addToCopy(-9);\n-        assertEquals(\"1972-05-31T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-05-31T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfYear().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n-        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfYear().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n-        assertEquals(\"1971-12-31T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2003-12-31T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertyAddWrapFieldDayOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfYear().addWrapFieldToCopy(21);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfYear().addWrapFieldToCopy(22);\n-        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfYear().addWrapFieldToCopy(-12);\n-        assertEquals(\"1972-05-28T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-05-28T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfYear().addWrapFieldToCopy(205);\n-        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfYear().addWrapFieldToCopy(206);\n-        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfYear().addWrapFieldToCopy(-160);\n-        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfYear().addWrapFieldToCopy(-161);\n-        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertySetDayOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfYear().setCopy(12);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-01-12T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-01-12T00:00:00.000Z\", copy.toString());\n         \n         try {\n             test.dayOfYear().setCopy(367);\n     }\n \n     public void testPropertySetTextDayOfYear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfYear().setCopy(\"12\");\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-01-12T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-01-12T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertyCompareToDayOfYear() {\n \n     //-----------------------------------------------------------------------\n     public void testPropertyGetWeekOfWeekyear() {\n-        // 1970-01-01 = Thu\n-        // 1970-12-31 = Thu (+364 days)\n-        // 1971-12-30 = Thu (+364 days)\n-        // 1972-01-03 = Mon             W1\n-        // 1972-01-31 = Mon (+28 days)  W5\n-        // 1972-02-28 = Mon (+28 days)  W9\n-        // 1972-03-27 = Mon (+28 days)  W13\n-        // 1972-04-24 = Mon (+28 days)  W17\n-        // 1972-05-23 = Mon (+28 days)  W21\n-        // 1972-06-05 = Mon (+14 days)  W23\n-        // 1972-06-09 = Fri\n-        // 1972-12-25 = Mon             W52\n-        // 1973-01-01 = Mon             W1\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        // 2002-01-01 = Thu\n+        // 2002-12-31 = Thu (+364 days)\n+        // 2003-12-30 = Thu (+364 days)\n+        // 2004-01-03 = Mon             W1\n+        // 2004-01-31 = Mon (+28 days)  W5\n+        // 2004-02-28 = Mon (+28 days)  W9\n+        // 2004-03-27 = Mon (+28 days)  W13\n+        // 2004-04-24 = Mon (+28 days)  W17\n+        // 2004-05-23 = Mon (+28 days)  W21\n+        // 2004-06-05 = Mon (+14 days)  W23\n+        // 2004-06-09 = Fri\n+        // 2004-12-25 = Mon             W52\n+        // 2005-01-01 = Mon             W1\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().weekOfWeekyear(), test.weekOfWeekyear().getField());\n         assertEquals(\"weekOfWeekyear\", test.weekOfWeekyear().getName());\n         assertEquals(\"Property[weekOfWeekyear]\", test.weekOfWeekyear().toString());\n         assertSame(test, test.weekOfWeekyear().getReadableInstant());\n         assertSame(test, test.weekOfWeekyear().getDateTime());\n-        assertEquals(23, test.weekOfWeekyear().get());\n-        assertEquals(\"23\", test.weekOfWeekyear().getAsText());\n-        assertEquals(\"23\", test.weekOfWeekyear().getAsText(Locale.FRENCH));\n-        assertEquals(\"23\", test.weekOfWeekyear().getAsShortText());\n-        assertEquals(\"23\", test.weekOfWeekyear().getAsShortText(Locale.FRENCH));\n+        assertEquals(24, test.weekOfWeekyear().get());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsText(Locale.FRENCH));\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText());\n+        assertEquals(\"24\", test.weekOfWeekyear().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().weeks(), test.weekOfWeekyear().getDurationField());\n         assertEquals(test.getChronology().weekyears(), test.weekOfWeekyear().getRangeDurationField());\n         assertEquals(2, test.weekOfWeekyear().getMaximumTextLength(null));\n     }\n \n     public void testPropertyGetMaxMinValuesWeekOfWeekyear() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertEquals(1, test.weekOfWeekyear().getMinimumValue());\n         assertEquals(1, test.weekOfWeekyear().getMinimumValueOverall());\n+        assertEquals(53, test.weekOfWeekyear().getMaximumValue());\n+        assertEquals(53, test.weekOfWeekyear().getMaximumValueOverall());\n+        test = new DateTime(2005, 6, 9, 0, 0, 0, 0);\n         assertEquals(52, test.weekOfWeekyear().getMaximumValue());\n         assertEquals(53, test.weekOfWeekyear().getMaximumValueOverall());\n-        test = new DateTime(1970, 6, 9, 0, 0, 0, 0);\n-        assertEquals(53, test.weekOfWeekyear().getMaximumValue());\n-        assertEquals(53, test.weekOfWeekyear().getMaximumValueOverall());\n     }\n \n     public void testPropertyAddWeekOfWeekyear() {\n-        DateTime test = new DateTime(1972, 6, 5, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0);\n         DateTime copy = test.weekOfWeekyear().addToCopy(1);\n-        assertEquals(\"1972-06-05T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-12T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-14T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.weekOfWeekyear().addToCopy(29);\n-        assertEquals(\"1972-12-25T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-12-27T00:00:00.000Z\", copy.toString());\n         \n         copy = test.weekOfWeekyear().addToCopy(30);\n-        assertEquals(\"1973-01-01T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2005-01-03T00:00:00.000Z\", copy.toString());\n         \n         copy = test.weekOfWeekyear().addToCopy(-22);\n-        assertEquals(\"1972-01-03T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-01-05T00:00:00.000Z\", copy.toString());\n         \n         copy = test.weekOfWeekyear().addToCopy(-23);\n-        assertEquals(\"1971-12-27T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2003-12-29T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertyAddWrapFieldWeekOfWeekyear() {\n-        DateTime test = new DateTime(1972, 6, 5, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0);\n         DateTime copy = test.weekOfWeekyear().addWrapFieldToCopy(1);\n-        assertEquals(\"1972-06-05T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-12T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-14T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.weekOfWeekyear().addWrapFieldToCopy(29);\n-        assertEquals(\"1972-12-25T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-12-27T00:00:00.000Z\", copy.toString());\n         \n         copy = test.weekOfWeekyear().addWrapFieldToCopy(30);\n-        assertEquals(\"1972-01-03T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2003-12-29T00:00:00.000Z\", copy.toString());\n         \n         copy = test.weekOfWeekyear().addWrapFieldToCopy(-23);\n-        assertEquals(\"1972-12-25T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2003-12-29T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertySetWeekOfWeekyear() {\n-        DateTime test = new DateTime(1972, 6, 5, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0);\n         DateTime copy = test.weekOfWeekyear().setCopy(4);\n-        assertEquals(\"1972-06-05T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-01-24T00:00:00.000Z\", copy.toString());\n-        \n-        try {\n-            test.weekOfWeekyear().setCopy(53);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-01-19T00:00:00.000Z\", copy.toString());\n+        \n+        try {\n+            test.weekOfWeekyear().setCopy(54);\n             fail();\n         } catch (IllegalArgumentException ex) {}\n         try {\n     }\n \n     public void testPropertySetTextWeekOfWeekyear() {\n-        DateTime test = new DateTime(1972, 6, 5, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 7, 0, 0, 0, 0);\n         DateTime copy = test.weekOfWeekyear().setCopy(\"4\");\n-        assertEquals(\"1972-06-05T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-01-24T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-01-19T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertyCompareToWeekOfWeekyear() {\n \n     //-----------------------------------------------------------------------\n     public void testPropertyGetDayOfWeek() {\n-        // 1970-01-01 = Thu\n-        // 1970-12-31 = Thu (+364 days)\n-        // 1971-12-30 = Thu (+364 days)\n-        // 1972-01-03 = Mon\n-        // 1972-01-31 = Mon (+28 days)\n-        // 1972-02-28 = Mon (+28 days)\n-        // 1972-03-27 = Mon (+28 days)\n-        // 1972-04-24 = Mon (+28 days)\n-        // 1972-05-23 = Mon (+28 days)\n-        // 1972-06-05 = Mon (+14 days)\n-        // 1972-06-09 = Fri\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         assertSame(test.getChronology().dayOfWeek(), test.dayOfWeek().getField());\n         assertEquals(\"dayOfWeek\", test.dayOfWeek().getName());\n         assertEquals(\"Property[dayOfWeek]\", test.dayOfWeek().toString());\n         assertSame(test, test.dayOfWeek().getReadableInstant());\n         assertSame(test, test.dayOfWeek().getDateTime());\n-        assertEquals(5, test.dayOfWeek().get());\n-        assertEquals(\"Friday\", test.dayOfWeek().getAsText());\n-        assertEquals(\"vendredi\", test.dayOfWeek().getAsText(Locale.FRENCH));\n-        assertEquals(\"Fri\", test.dayOfWeek().getAsShortText());\n-        assertEquals(\"ven.\", test.dayOfWeek().getAsShortText(Locale.FRENCH));\n+        assertEquals(3, test.dayOfWeek().get());\n+        assertEquals(\"Wednesday\", test.dayOfWeek().getAsText());\n+        assertEquals(\"mercredi\", test.dayOfWeek().getAsText(Locale.FRENCH));\n+        assertEquals(\"Wed\", test.dayOfWeek().getAsShortText());\n+        assertEquals(\"mer.\", test.dayOfWeek().getAsShortText(Locale.FRENCH));\n         assertEquals(test.getChronology().days(), test.dayOfWeek().getDurationField());\n         assertEquals(test.getChronology().weeks(), test.dayOfWeek().getRangeDurationField());\n         assertEquals(9, test.dayOfWeek().getMaximumTextLength(null));\n     }\n \n     public void testPropertyAddDayOfWeek() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfWeek().addToCopy(1);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-10T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfWeek().addToCopy(21);\n-        assertEquals(\"1972-06-30T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-30T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfWeek().addToCopy(22);\n-        assertEquals(\"1972-07-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-07-01T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfWeek().addToCopy(21 + 31 + 31 + 30 + 31 + 30 + 31);\n-        assertEquals(\"1972-12-31T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-12-31T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfWeek().addToCopy(22 + 31 + 31 + 30 + 31 + 30 + 31);\n-        assertEquals(\"1973-01-01T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2005-01-01T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfWeek().addToCopy(-8);\n-        assertEquals(\"1972-06-01T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-01T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfWeek().addToCopy(-9);\n-        assertEquals(\"1972-05-31T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-05-31T00:00:00.000+01:00\", copy.toString());\n         \n         copy = test.dayOfWeek().addToCopy(-8 - 31 - 30 - 31 - 29 - 31);\n-        assertEquals(\"1972-01-01T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2004-01-01T00:00:00.000Z\", copy.toString());\n         \n         copy = test.dayOfWeek().addToCopy(-9 - 31 - 30 - 31 - 29 - 31);\n-        assertEquals(\"1971-12-31T00:00:00.000Z\", copy.toString());\n+        assertEquals(\"2003-12-31T00:00:00.000Z\", copy.toString());\n     }\n \n     public void testPropertyAddWrapFieldDayOfWeek() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);  // Wed\n         DateTime copy = test.dayOfWeek().addWrapFieldToCopy(1);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-10T00:00:00.000+01:00\", copy.toString());\n-        \n-        copy = test.dayOfWeek().addWrapFieldToCopy(3);\n-        assertEquals(\"1972-06-05T00:00:00.000+01:00\", copy.toString());\n-        \n-        copy = test.dayOfWeek().addWrapFieldToCopy(-12);\n-        assertEquals(\"1972-06-11T00:00:00.000+01:00\", copy.toString());\n-        \n-        test = new DateTime(1972, 6, 2, 0, 0, 0, 0);\n-        copy = test.dayOfWeek().addWrapFieldToCopy(3);\n-        assertEquals(\"1972-06-02T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-05-29T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addWrapFieldToCopy(5);\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", copy.toString());\n+        \n+        copy = test.dayOfWeek().addWrapFieldToCopy(-10);\n+        assertEquals(\"2004-06-13T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 2, 0, 0, 0, 0);\n+        copy = test.dayOfWeek().addWrapFieldToCopy(5);\n+        assertEquals(\"2004-06-02T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-05-31T00:00:00.000+01:00\", copy.toString());\n     }\n \n     public void testPropertySetDayOfWeek() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfWeek().setCopy(4);\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-08T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n         \n         try {\n             test.dayOfWeek().setCopy(8);\n     }\n \n     public void testPropertySetTextDayOfWeek() {\n-        DateTime test = new DateTime(1972, 6, 9, 0, 0, 0, 0);\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n         DateTime copy = test.dayOfWeek().setCopy(\"4\");\n-        assertEquals(\"1972-06-09T00:00:00.000+01:00\", test.toString());\n-        assertEquals(\"1972-06-08T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n         copy = test.dayOfWeek().setCopy(\"Mon\");\n-        assertEquals(\"1972-06-05T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", copy.toString());\n         copy = test.dayOfWeek().setCopy(\"Tuesday\");\n-        assertEquals(\"1972-06-06T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-08T00:00:00.000+01:00\", copy.toString());\n         copy = test.dayOfWeek().setCopy(\"lundi\", Locale.FRENCH);\n-        assertEquals(\"1972-06-05T00:00:00.000+01:00\", copy.toString());\n+        assertEquals(\"2004-06-07T00:00:00.000+01:00\", copy.toString());\n     }\n \n     public void testPropertyCompareToDayOfWeek() {\n         DateTime test1 = new DateTime(TEST_TIME1);\n         DateTime test2 = new DateTime(TEST_TIME2);\n-        assertEquals(true, test1.dayOfWeek().compareTo(test2) < 0);\n-        assertEquals(true, test2.dayOfWeek().compareTo(test1) > 0);\n+        assertEquals(true, test2.dayOfWeek().compareTo(test1) < 0);\n+        assertEquals(true, test1.dayOfWeek().compareTo(test2) > 0);\n         assertEquals(true, test1.dayOfWeek().compareTo(test1) == 0);\n         try {\n             test1.dayOfWeek().compareTo((ReadableInstant) null);\n         \n         DateTime dt1 = new DateTime(TEST_TIME1);\n         DateTime dt2 = new DateTime(TEST_TIME2);\n-        assertEquals(true, test1.dayOfWeek().compareTo(dt2) < 0);\n-        assertEquals(true, test2.dayOfWeek().compareTo(dt1) > 0);\n+        assertEquals(true, test2.dayOfWeek().compareTo(dt1) < 0);\n+        assertEquals(true, test1.dayOfWeek().compareTo(dt2) > 0);\n         assertEquals(true, test1.dayOfWeek().compareTo(dt1) == 0);\n         try {\n             test1.dayOfWeek().compareTo((ReadableInstant) null);\n--- a/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n+++ b/JodaTime/src/test/org/joda/time/TestInstant_Basics.java\n  * @author Stephen Colebourne\n  */\n public class TestInstant_Basics extends TestCase {\n+    // Test in 2002/03 as time zones are more well known\n+    // (before the late 90's they were all over the place)\n \n     private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n     private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n     \n-    // 1970-06-09\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    long y2003days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365 + 365;\n+    \n+    // 2002-06-09\n     private long TEST_TIME_NOW =\n-            (31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n             \n-    // 1970-04-05\n+    // 2002-04-05\n     private long TEST_TIME1 =\n-        (31L + 28L + 31L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 12L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n-        \n-    // 1971-05-06\n+            (y2002days + 31L + 28L + 31L + 5L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 12L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 24L * DateTimeConstants.MILLIS_PER_MINUTE;\n+        \n+    // 2003-05-06\n     private long TEST_TIME2 =\n-        (365L + 31L + 28L + 31L + 30L + 7L -1L) * DateTimeConstants.MILLIS_PER_DAY\n-        + 14L * DateTimeConstants.MILLIS_PER_HOUR\n-        + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n+            (y2003days + 31L + 28L + 31L + 30L + 6L -1L) * DateTimeConstants.MILLIS_PER_DAY\n+            + 14L * DateTimeConstants.MILLIS_PER_HOUR\n+            + 28L * DateTimeConstants.MILLIS_PER_MINUTE;\n         \n     private DateTimeZone zone = null;\n     private Locale locale = null;\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testTest() {\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", new Instant(TEST_TIME_NOW).toString());\n+        assertEquals(\"2002-04-05T12:24:00.000Z\", new Instant(TEST_TIME1).toString());\n+        assertEquals(\"2003-05-06T14:28:00.000Z\", new Instant(TEST_TIME2).toString());\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testGet() {\n         Instant test = new Instant();\n         assertEquals(1, test.get(ISOChronology.getInstance().era()));\n-        assertEquals(19, test.get(ISOChronology.getInstance().centuryOfEra()));\n-        assertEquals(70, test.get(ISOChronology.getInstance().yearOfCentury()));\n-        assertEquals(1970, test.get(ISOChronology.getInstance().yearOfEra()));\n-        assertEquals(1970, test.get(ISOChronology.getInstance().year()));\n+        assertEquals(20, test.get(ISOChronology.getInstance().centuryOfEra()));\n+        assertEquals(2, test.get(ISOChronology.getInstance().yearOfCentury()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().yearOfEra()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().year()));\n         assertEquals(6, test.get(ISOChronology.getInstance().monthOfYear()));\n         assertEquals(9, test.get(ISOChronology.getInstance().dayOfMonth()));\n-        assertEquals(1970, test.get(ISOChronology.getInstance().weekyear()));\n-        assertEquals(24, test.get(ISOChronology.getInstance().weekOfWeekyear()));\n-        assertEquals(2, test.get(ISOChronology.getInstance().dayOfWeek()));\n+        assertEquals(2002, test.get(ISOChronology.getInstance().weekyear()));\n+        assertEquals(23, test.get(ISOChronology.getInstance().weekOfWeekyear()));\n+        assertEquals(7, test.get(ISOChronology.getInstance().dayOfWeek()));\n         assertEquals(160, test.get(ISOChronology.getInstance().dayOfYear()));\n         assertEquals(0, test.get(ISOChronology.getInstance().halfdayOfDay()));\n         assertEquals(1, test.get(ISOChronology.getInstance().hourOfHalfday()));\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         Instant test = new Instant(TEST_TIME_NOW);\n-        assertEquals(\"1970-06-09T00:00:00.000Z\", test.toString());\n+        assertEquals(\"2002-06-09T00:00:00.000Z\", test.toString());\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1089579712, "metainfo": ""}