{"sha": "f21b60c2fa8809080b465fa83fe78b1863d41457", "log": "More test classes   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateMidnight_Properties.java\n         assertEquals(12, test.monthOfYear().getMaximumValueOverall());\n     }\n \n+    public void testPropertySetMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().setCopy(8);\n+        assertEquals(2004, test.getYear());\n+        assertEquals(8, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testPropertySetTextMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().setCopy(\"8\");\n+        assertEquals(2004, test.getYear());\n+        assertEquals(8, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testPropertySetTextLocaleMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().setCopy(\"mars\", Locale.FRENCH);\n+        assertEquals(2004, test.getYear());\n+        assertEquals(3, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testPropertyAddMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().addToCopy(8);\n+        assertEquals(2005, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testPropertyAddLongMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().addToCopy(8L);\n+        assertEquals(2005, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testPropertyAddWrapFieldMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        DateMidnight copy = test.monthOfYear().addWrapFieldToCopy(8);\n+        assertEquals(2004, test.getYear());\n+        assertEquals(4, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+    }\n+\n+    public void testPropertyGetDifferenceMonthOfYear() {\n+        DateMidnight test1 = new DateMidnight(2004, 6, 9);\n+        DateMidnight test2 = new DateMidnight(2004, 8, 9);\n+        assertEquals(-2, test1.monthOfYear().getDifference(test2));\n+        assertEquals(2, test2.monthOfYear().getDifference(test1));\n+        assertEquals(-2L, test1.monthOfYear().getDifferenceAsLong(test2));\n+        assertEquals(2L, test2.monthOfYear().getDifferenceAsLong(test1));\n+    }\n+\n+    public void testPropertyRoundFloorMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 7, 16);\n+        DateMidnight copy = test.monthOfYear().roundFloorCopy();\n+        assertEquals(\"2004-07-00T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundCeilingMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 7, 16);\n+        DateMidnight copy = test.monthOfYear().roundCeilingCopy();\n+        assertEquals(\"2004-08-00T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfFloorMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 7, 16);\n+        DateMidnight copy = test.monthOfYear().roundHalfFloorCopy();\n+        assertEquals(\"2004-07-00T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 7, 17);\n+        copy = test.monthOfYear().roundHalfFloorCopy();\n+        assertEquals(\"2004-08-00T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 7, 15);\n+        copy = test.monthOfYear().roundHalfFloorCopy();\n+        assertEquals(\"2004-07-00T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfCeilingMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 7, 16);\n+        DateMidnight copy = test.monthOfYear().roundHalfCeilingCopy();\n+        assertEquals(\"2004-08-00T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 7, 17);\n+        copy = test.monthOfYear().roundHalfCeilingCopy();\n+        assertEquals(\"2004-08-00T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 7, 15);\n+        copy = test.monthOfYear().roundHalfCeilingCopy();\n+        assertEquals(\"2004-07-00T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfEvenMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 7, 16);\n+        DateMidnight copy = test.monthOfYear().roundHalfEvenCopy();\n+        assertEquals(\"2004-08-00T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 8, 16);\n+        copy = test.monthOfYear().roundHalfEvenCopy();\n+        assertEquals(\"2004-08-00T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 7, 17);\n+        copy = test.monthOfYear().roundHalfEvenCopy();\n+        assertEquals(\"2004-08-00T00:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateMidnight(2004, 7, 15);\n+        copy = test.monthOfYear().roundHalfEvenCopy();\n+        assertEquals(\"2004-07-00T00:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRemainderMonthOfYear() {\n+        DateMidnight test = new DateMidnight(2004, 6, 9);\n+        assertEquals(9L * DateTimeConstants.MILLIS_PER_DAY, test.monthOfYear().remainder());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testPropertyGetDayOfMonth() {\n         DateMidnight test = new DateMidnight(2004, 6, 9);\n--- a/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n+++ b/JodaTime/src/test/org/joda/time/TestDateTime_Properties.java\n         assertEquals(\"2003-12-31T00:00:00.000Z\", copy.toString());\n     }\n \n+    public void testPropertyAddLongDayOfWeek() {\n+        DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);\n+        DateTime copy = test.dayOfWeek().addToCopy(1L);\n+        assertEquals(\"2004-06-09T00:00:00.000+01:00\", test.toString());\n+        assertEquals(\"2004-06-10T00:00:00.000+01:00\", copy.toString());\n+    }        \n+\n     public void testPropertyAddWrapFieldDayOfWeek() {\n         DateTime test = new DateTime(2004, 6, 9, 0, 0, 0, 0);  // Wed\n         DateTime copy = test.dayOfWeek().addWrapFieldToCopy(1);\n         assertEquals(2, test.hourOfDay().getMaximumShortTextLength(null));\n     }\n \n+    public void testPropertyGetDifferenceHourOfDay() {\n+        DateTime test1 = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime test2 = new DateTime(2004, 6, 9, 15, 30, 0, 0);\n+        assertEquals(-2, test1.hourOfDay().getDifference(test2));\n+        assertEquals(2, test2.hourOfDay().getDifference(test1));\n+        assertEquals(-2L, test1.hourOfDay().getDifferenceAsLong(test2));\n+        assertEquals(2L, test2.hourOfDay().getDifferenceAsLong(test1));\n+        \n+        DateTime test = new DateTime(TEST_TIME_NOW + (13L * DateTimeConstants.MILLIS_PER_HOUR));\n+        assertEquals(13, test.hourOfDay().getDifference(null));\n+        assertEquals(13L, test.hourOfDay().getDifferenceAsLong(null));\n+    }\n+\n+    public void testPropertyRoundFloorHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundFloorCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundCeilingHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundCeilingCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfFloorHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundHalfFloorCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 30, 0, 1);\n+        copy = test.hourOfDay().roundHalfFloorCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 29, 59, 999);\n+        copy = test.hourOfDay().roundHalfFloorCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfCeilingHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundHalfCeilingCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 30, 0, 1);\n+        copy = test.hourOfDay().roundHalfCeilingCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 29, 59, 999);\n+        copy = test.hourOfDay().roundHalfCeilingCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRoundHalfEvenHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        DateTime copy = test.hourOfDay().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 14, 30, 0, 0);\n+        copy = test.hourOfDay().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 30, 0, 1);\n+        copy = test.hourOfDay().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-09T14:00:00.000+01:00\", copy.toString());\n+        \n+        test = new DateTime(2004, 6, 9, 13, 29, 59, 999);\n+        copy = test.hourOfDay().roundHalfEvenCopy();\n+        assertEquals(\"2004-06-09T13:00:00.000+01:00\", copy.toString());\n+    }\n+\n+    public void testPropertyRemainderHourOfDay() {\n+        DateTime test = new DateTime(2004, 6, 9, 13, 30, 0, 0);\n+        assertEquals(30L * DateTimeConstants.MILLIS_PER_MINUTE, test.hourOfDay().remainder());\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testPropertyGetMinuteOfHour() {\n         DateTime test = new DateTime(2004, 6, 9, 13, 23, 43, 53);\n--- a/JodaTime/src/test/org/joda/time/convert/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestAll.java\n \n     public static Test suite() {\n         TestSuite suite = new TestSuite();\n+        suite.addTest(TestConverterManager.suite());\n+        suite.addTest(TestConverterSet.suite());\n+        \n         suite.addTest(TestCalendarConverter.suite());\n         suite.addTest(TestDateConverter.suite());\n         suite.addTest(TestLongConverter.suite());\n         suite.addTest(TestNullConverter.suite());\n+        suite.addTest(TestReadableDurationConverter.suite());\n         suite.addTest(TestReadableInstantConverter.suite());\n-        \n-        suite.addTest(TestReadableDurationConverter.suite());\n+        suite.addTest(TestStringConverter.suite());\n         return suite;\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterManager.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.security.AllPermission;\n+import java.security.CodeSource;\n+import java.security.Permission;\n+import java.security.PermissionCollection;\n+import java.security.Permissions;\n+import java.security.Policy;\n+import java.security.ProtectionDomain;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Duration;\n+import org.joda.time.DurationType;\n+import org.joda.time.Interval;\n+import org.joda.time.JodaTimePermission;\n+import org.joda.time.ReadWritableDuration;\n+import org.joda.time.ReadWritableInterval;\n+import org.joda.time.ReadableDateTime;\n+import org.joda.time.ReadableDuration;\n+import org.joda.time.ReadableInstant;\n+import org.joda.time.ReadableInterval;\n+\n+/**\n+ * This class is a JUnit test for ConverterManager.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestConverterManager extends TestCase {\n+\n+    private static final Policy RESTRICT;\n+    private static final Policy ALLOW;\n+    static {\n+        // don't call Policy.getPolicy()\n+        RESTRICT = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+            public boolean implies(ProtectionDomain domain, Permission permission) {\n+                if (permission instanceof JodaTimePermission) {\n+                    return false;\n+                }\n+                return super.implies(domain, permission);\n+            }\n+        };\n+        ALLOW = new Policy() {\n+            public PermissionCollection getPermissions(CodeSource codesource) {\n+                Permissions p = new Permissions();\n+                p.add(new AllPermission());  // enable everything\n+                return p;\n+            }\n+            public void refresh() {\n+            }\n+        };\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestConverterManager.class);\n+    }\n+\n+    public TestConverterManager(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = ConverterManager.class;\n+        assertEquals(true, Modifier.isPublic(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor(null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(true, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantConverter() {\n+        InstantConverter c = ConverterManager.getInstance().getInstantConverter(new Long(0L));\n+        assertEquals(Long.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(new DateTime());\n+        assertEquals(ReadableInstant.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(new Date());\n+        assertEquals(Date.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(new GregorianCalendar());\n+        assertEquals(Calendar.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getInstantConverter(null);\n+        assertEquals(null, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getInstantConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetInstantConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removeInstantConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getInstantConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addInstantConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testGetInstantConverterOKMultipleMatches() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object) { return 0;}\n+            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return ReadableDateTime.class;}\n+        };\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(c);\n+            InstantConverter ok = ConverterManager.getInstance().getInstantConverter(new DateTime());\n+            // ReadableDateTime and ReadableInstant both match, but RI discarded as less specific\n+            assertEquals(ReadableDateTime.class, ok.getSupportedType());\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(c);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testGetInstantConverterBadMultipleMatches() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object) { return 0;}\n+            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Serializable.class;}\n+        };\n+        try {\n+            ConverterManager.getInstance().addInstantConverter(c);\n+            try {\n+                ConverterManager.getInstance().getInstantConverter(new DateTime());\n+                fail();\n+            } catch (IllegalStateException ex) {\n+                // Serializable and ReadableInstant both match, so cannot pick\n+            }\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(c);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantConverters() {\n+        InstantConverter[] array = ConverterManager.getInstance().getInstantConverters();\n+        assertEquals(6, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddInstantConverter1() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object) { return 0;}\n+            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            InstantConverter removed = ConverterManager.getInstance().addInstantConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getInstantConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(7, ConverterManager.getInstance().getInstantConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removeInstantConverter(c);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testAddInstantConverter2() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object) { return 0;}\n+            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            InstantConverter removed = ConverterManager.getInstance().addInstantConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getInstantConverter(\"\").getSupportedType());\n+            assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testAddInstantConverter3() {\n+        InstantConverter removed = ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testAddInstantConverter4() {\n+        InstantConverter removed = ConverterManager.getInstance().addInstantConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testAddInstantConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveInstantConverter1() {\n+        try {\n+            InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(5, ConverterManager.getInstance().getInstantConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addInstantConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testRemoveInstantConverter2() {\n+        InstantConverter c = new InstantConverter() {\n+            public long getInstantMillis(Object object) { return 0;}\n+            public long getInstantMillis(Object object, DateTimeZone zone) {return 0;}\n+            public long getInstantMillis(Object object, Chronology chrono) {return 0;}\n+            public Chronology getChronology(Object object) {return null;}\n+            public Chronology getChronology(Object object, DateTimeZone zone) {return null;}\n+            public Chronology getChronology(Object object, Chronology chrono) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testRemoveInstantConverter3() {\n+        InstantConverter removed = ConverterManager.getInstance().removeInstantConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    public void testRemoveInstantConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removeInstantConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(6, ConverterManager.getInstance().getInstantConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationConverter() {\n+        DurationConverter c = ConverterManager.getInstance().getDurationConverter(new Long(0L));\n+        assertEquals(Long.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getDurationConverter(new Duration(DurationType.getMillisType()));\n+        assertEquals(ReadableDuration.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getDurationConverter(new Interval(0L, 1000L));\n+        assertEquals(ReadableInterval.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getDurationConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getDurationConverter(null);\n+        assertEquals(null, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getDurationConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testGetDurationConverterRemovedNull() {\n+        try {\n+            ConverterManager.getInstance().removeDurationConverter(NullConverter.INSTANCE);\n+            try {\n+                ConverterManager.getInstance().getDurationConverter(null);\n+                fail();\n+            } catch (IllegalArgumentException ex) {}\n+        } finally {\n+            ConverterManager.getInstance().addDurationConverter(NullConverter.INSTANCE);\n+        }\n+        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationConverters() {\n+        DurationConverter[] array = ConverterManager.getInstance().getDurationConverters();\n+        assertEquals(5, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddDurationConverter1() {\n+        DurationConverter c = new DurationConverter() {\n+            public boolean isPrecise(Object object) {return false;}\n+            public long getDurationMillis(Object object) {return 0;}\n+            public void setInto(ReadWritableDuration duration, Object object) {}\n+            public DurationType getDurationType(Object object) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getDurationConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(6, ConverterManager.getInstance().getDurationConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removeDurationConverter(c);\n+        }\n+        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testAddDurationConverter2() {\n+        DurationConverter c = new DurationConverter() {\n+            public boolean isPrecise(Object object) {return false;}\n+            public long getDurationMillis(Object object) {return 0;}\n+            public void setInto(ReadWritableDuration duration, Object object) {}\n+            public DurationType getDurationType(Object object) {return null;}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            DurationConverter removed = ConverterManager.getInstance().addDurationConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getDurationConverter(\"\").getSupportedType());\n+            assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testAddDurationConverter3() {\n+        DurationConverter removed = ConverterManager.getInstance().addDurationConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testAddDurationConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveDurationConverter1() {\n+        try {\n+            DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(4, ConverterManager.getInstance().getDurationConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addDurationConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testRemoveDurationConverter2() {\n+        DurationConverter c = new DurationConverter() {\n+            public boolean isPrecise(Object object) {return false;}\n+            public long getDurationMillis(Object object) {return 0;}\n+            public void setInto(ReadWritableDuration duration, Object object) {}\n+            public DurationType getDurationType(Object object) {return null;}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testRemoveDurationConverter3() {\n+        DurationConverter removed = ConverterManager.getInstance().removeDurationConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    public void testRemoveDurationConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removeDurationConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(5, ConverterManager.getInstance().getDurationConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n+    public void testGetIntervalConverter() {\n+        IntervalConverter c = ConverterManager.getInstance().getIntervalConverter(new Interval(0L, 1000L));\n+        assertEquals(ReadableInterval.class, c.getSupportedType());\n+        \n+        c = ConverterManager.getInstance().getIntervalConverter(\"\");\n+        assertEquals(String.class, c.getSupportedType());\n+        \n+        try {\n+            ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            ConverterManager.getInstance().getIntervalConverter(null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetIntervalConverters() {\n+        IntervalConverter[] array = ConverterManager.getInstance().getIntervalConverters();\n+        assertEquals(2, array.length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddIntervalConverter1() {\n+        IntervalConverter c = new IntervalConverter() {\n+            public void setInto(ReadWritableInterval interval, Object object) {}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        try {\n+            IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c);\n+            assertEquals(null, removed);\n+            assertEquals(Boolean.class, ConverterManager.getInstance().getIntervalConverter(Boolean.TRUE).getSupportedType());\n+            assertEquals(3, ConverterManager.getInstance().getIntervalConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().removeIntervalConverter(c);\n+        }\n+        assertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testAddIntervalConverter2() {\n+        IntervalConverter c = new IntervalConverter() {\n+            public void setInto(ReadWritableInterval interval, Object object) {}\n+            public Class getSupportedType() {return String.class;}\n+        };\n+        try {\n+            IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(c);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(String.class, ConverterManager.getInstance().getIntervalConverter(\"\").getSupportedType());\n+            assertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testAddIntervalConverter3() {\n+        IntervalConverter removed = ConverterManager.getInstance().addIntervalConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testAddIntervalConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().addIntervalConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveIntervalConverter1() {\n+        try {\n+            IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(StringConverter.INSTANCE);\n+            assertEquals(StringConverter.INSTANCE, removed);\n+            assertEquals(1, ConverterManager.getInstance().getIntervalConverters().length);\n+        } finally {\n+            ConverterManager.getInstance().addIntervalConverter(StringConverter.INSTANCE);\n+        }\n+        assertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testRemoveIntervalConverter2() {\n+        IntervalConverter c = new IntervalConverter() {\n+            public void setInto(ReadWritableInterval interval, Object object) {}\n+            public Class getSupportedType() {return Boolean.class;}\n+        };\n+        IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(c);\n+        assertEquals(null, removed);\n+        assertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testRemoveIntervalConverter3() {\n+        IntervalConverter removed = ConverterManager.getInstance().removeIntervalConverter(null);\n+        assertEquals(null, removed);\n+        assertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    public void testRemoveIntervalConverterSecurity() {\n+        try {\n+            Policy.setPolicy(RESTRICT);\n+            System.setSecurityManager(new SecurityManager());\n+            ConverterManager.getInstance().removeIntervalConverter(StringConverter.INSTANCE);\n+            fail();\n+        } catch (SecurityException ex) {\n+            // ok\n+        } finally {\n+            System.setSecurityManager(null);\n+            Policy.setPolicy(ALLOW);\n+        }\n+        assertEquals(2, ConverterManager.getInstance().getIntervalConverters().length);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"ConverterManager[6 instant,5 duration,2 interval]\", ConverterManager.getInstance().toString());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestConverterSet.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateMidnight;\n+import org.joda.time.DateTime;\n+import org.joda.time.ReadWritableDateTime;\n+import org.joda.time.ReadWritableInstant;\n+import org.joda.time.ReadableDateTime;\n+import org.joda.time.ReadableInstant;\n+\n+/**\n+ * This class is a JUnit test for ConverterSet.\n+ * Mostly for coverage.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestConverterSet extends TestCase {\n+\n+    private static final Converter c1 = new Converter() {\n+        public Class getSupportedType() {return Boolean.class;}\n+    };\n+    private static final Converter c2 = new Converter() {\n+        public Class getSupportedType() {return Character.class;}\n+    };\n+    private static final Converter c3 = new Converter() {\n+        public Class getSupportedType() {return Byte.class;}\n+    };\n+    private static final Converter c4 = new Converter() {\n+        public Class getSupportedType() {return Short.class;}\n+    };\n+    private static final Converter c4a = new Converter() {\n+        public Class getSupportedType() {return Short.class;}\n+    };\n+    private static final Converter c5 = new Converter() {\n+        public Class getSupportedType() {return Integer.class;}\n+    };\n+    \n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestConverterSet.class);\n+    }\n+\n+    public TestConverterSet(String name) {\n+        super(name);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testClass() throws Exception {\n+        Class cls = ConverterSet.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        Constructor con = cls.getDeclaredConstructors()[0];\n+        assertEquals(false, Modifier.isPublic(con.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(con.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(con.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testBigHashtable() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        set.select(Boolean.class);\n+        set.select(Character.class);\n+        set.select(Byte.class);\n+        set.select(Short.class);\n+        set.select(Integer.class);\n+        set.select(Long.class);\n+        set.select(Float.class);\n+        set.select(Double.class);\n+        set.select(Date.class);\n+        set.select(Calendar.class);\n+        set.select(GregorianCalendar.class);\n+        set.select(DateTime.class);\n+        set.select(DateMidnight.class);\n+        set.select(ReadableInstant.class);\n+        set.select(ReadableDateTime.class);\n+        set.select(ReadWritableInstant.class);  // 16\n+        set.select(ReadWritableDateTime.class);\n+        assertEquals(4, set.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testAddNullRemoved1() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        ConverterSet result = set.add(c5, null);\n+        assertEquals(4, set.size());\n+        assertEquals(5, result.size());\n+    }\n+\n+    public void testAddNullRemoved2() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        ConverterSet result = set.add(c4, null);\n+        assertSame(set, result);\n+    }\n+\n+    public void testAddNullRemoved3() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        ConverterSet result = set.add(c4a, null);\n+        assertNotSame(set, result);\n+        assertEquals(4, set.size());\n+        assertEquals(4, result.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveNullRemoved1() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        ConverterSet result = set.remove(c3, null);\n+        assertEquals(4, set.size());\n+        assertEquals(3, result.size());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testRemoveBadIndex1() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        try {\n+            set.remove(200, null);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(4, set.size());\n+    }\n+\n+    public void testRemoveBadIndex2() {\n+        Converter[] array = new Converter[] {\n+            c1, c2, c3, c4,\n+        };\n+        ConverterSet set = new ConverterSet(array);\n+        try {\n+            set.remove(-1, null);\n+            fail();\n+        } catch (IndexOutOfBoundsException ex) {}\n+        assertEquals(4, set.size());\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.convert;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Locale;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTime;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.DurationType;\n+import org.joda.time.MutableDuration;\n+import org.joda.time.chrono.ISOChronology;\n+import org.joda.time.chrono.JulianChronology;\n+\n+/**\n+ * This class is a Junit unit test for StringConverter.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestStringConverter extends TestCase {\n+\n+    private static final DateTimeZone ONE_HOUR = DateTimeZone.getInstance(\"+01:00\");\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final Chronology ISO = ISOChronology.getInstance();\n+    private static final Chronology JULIAN = JulianChronology.getInstance();\n+    private static final Chronology ISO_PARIS = ISOChronology.getInstance(PARIS);\n+    \n+    private DateTimeZone zone = null;\n+    private Locale locale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestStringConverter.class);\n+    }\n+\n+    public TestStringConverter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        zone = DateTimeZone.getDefault();\n+        locale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeZone.setDefault(zone);\n+        Locale.setDefault(locale);\n+        zone = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSingleton() throws Exception {\n+        Class cls = StringConverter.class;\n+        assertEquals(false, Modifier.isPublic(cls.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(cls.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(cls.getModifiers()));\n+        \n+        Constructor con = cls.getDeclaredConstructor(null);\n+        assertEquals(1, cls.getDeclaredConstructors().length);\n+        assertEquals(true, Modifier.isProtected(con.getModifiers()));\n+        \n+        Field fld = cls.getDeclaredField(\"INSTANCE\");\n+        assertEquals(false, Modifier.isPublic(fld.getModifiers()));\n+        assertEquals(false, Modifier.isProtected(fld.getModifiers()));\n+        assertEquals(false, Modifier.isPrivate(fld.getModifiers()));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testSupportedType() throws Exception {\n+        assertEquals(String.class, StringConverter.INSTANCE.getSupportedType());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetInstantMillis_Object() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501+01:00\"));\n+        \n+        dt = new DateTime(2004, 1, 1, 0, 0, 0, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004T+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 1, 0, 0, 0, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06T+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-161T+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 9, 0, 0, 0, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-W24-3T+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 7, 0, 0, 0, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-W24T+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 0, 0, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 0, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 30, 0, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12.5+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 30, 0, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24.5+01:00\"));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 500, ONE_HOUR);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.5+01:00\"));\n+    }\n+\n+    public void testGetInstantMillis_Object_Zone() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, PARIS);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501+02:00\", PARIS));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, LONDON);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501+01:00\", (DateTimeZone) null));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, PARIS);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501\", PARIS));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, LONDON);\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501\", (DateTimeZone) null));\n+    }\n+\n+    public void testGetInstantMillis_Object_Chronology() throws Exception {\n+        DateTime dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, JulianChronology.getInstance(LONDON));\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501+01:00\", JULIAN));\n+        \n+        dt = new DateTime(2004, 6, 9, 12, 24, 48, 501, ISOChronology.getInstance(LONDON));\n+        assertEquals(dt.getMillis(), StringConverter.INSTANCE.getInstantMillis(\"2004-06-09T12:24:48.501+01:00\", (Chronology) null));\n+    }\n+\n+    public void testGetInstantMillisInvalid() {\n+        try {\n+            StringConverter.INSTANCE.getInstantMillis(\"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            StringConverter.INSTANCE.getInstantMillis(\"X\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetChronology_Object() throws Exception {\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\"));\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\"));\n+    }\n+\n+    public void testGetChronology_Object_Zone() throws Exception {\n+        assertEquals(ISOChronology.getInstance(PARIS), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\", PARIS));\n+        assertEquals(ISOChronology.getInstance(PARIS), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", PARIS));\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\", (DateTimeZone) null));\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", (DateTimeZone) null));\n+    }\n+\n+    public void testGetChronology_Object_Chronology() throws Exception {\n+        assertEquals(JulianChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\", JULIAN));\n+        assertEquals(JulianChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", JULIAN));\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501+01:00\", (Chronology) null));\n+        assertEquals(ISOChronology.getInstance(LONDON), StringConverter.INSTANCE.getChronology(\"2004-06-09T12:24:48.501\", (Chronology) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDateTime() throws Exception {\n+        DateTime base = new DateTime(2004, 6, 9, 12, 24, 48, 501, PARIS);\n+        DateTime test = new DateTime(base.toString(), PARIS);\n+        assertEquals(base, test);\n+    }\n+\n+    public void testGetDateTime1() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501+01:00\");\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(LONDON, test.getZone());\n+    }\n+\n+    public void testGetDateTime2() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501\");\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(LONDON, test.getZone());\n+    }\n+\n+    public void testGetDateTime3() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501+02:00\", PARIS);\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(PARIS, test.getZone());\n+    }\n+\n+    public void testGetDateTime4() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501\", PARIS);\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(PARIS, test.getZone());\n+    }\n+\n+    public void testGetDateTime5() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501+02:00\", JulianChronology.getInstance(PARIS));\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(PARIS, test.getZone());\n+    }\n+\n+    public void testGetDateTime6() throws Exception {\n+        DateTime test = new DateTime(\"2004-06-09T12:24:48.501\", JulianChronology.getInstance(PARIS));\n+        assertEquals(2004, test.getYear());\n+        assertEquals(6, test.getMonthOfYear());\n+        assertEquals(9, test.getDayOfMonth());\n+        assertEquals(12, test.getHourOfDay());\n+        assertEquals(24, test.getMinuteOfHour());\n+        assertEquals(48, test.getSecondOfMinute());\n+        assertEquals(501, test.getMillisOfSecond());\n+        assertEquals(PARIS, test.getZone());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testGetDurationMillis_Object() throws Exception {\n+        try {\n+            StringConverter.INSTANCE.getDurationMillis(\"P2Y6M9D\");\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+    }\n+\n+    public void testGetDurationType_Object() throws Exception {\n+        assertEquals(DurationType.getYearMonthType(), StringConverter.INSTANCE.getDurationType(\"P2Y6M9D\"));\n+        assertEquals(DurationType.getYearWeekType(), StringConverter.INSTANCE.getDurationType(\"P2Y6W4D\"));\n+    }\n+\n+    public void testIsPrecise_Object() throws Exception {\n+        assertEquals(false, StringConverter.INSTANCE.isPrecise(\"P2Y6M9D\"));\n+    }\n+\n+    public void testSetInto_Object() throws Exception {\n+        MutableDuration m = new MutableDuration(DurationType.getYearMonthType());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y6M9DT12H24M48S\");\n+        assertEquals(2, m.getYears());\n+        assertEquals(6, m.getMonths());\n+        assertEquals(9, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(48, m.getSeconds());\n+        assertEquals(0, m.getMillis());\n+        \n+        m = new MutableDuration(DurationType.getYearWeekType());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M48S\");\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(48, m.getSeconds());\n+        assertEquals(0, m.getMillis());\n+        \n+        m = new MutableDuration(DurationType.getYearWeekType(), 1, 0, 1, 1, 1, 1, 1, 1);\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3D\");\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(0, m.getHours());\n+        assertEquals(0, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(0, m.getMillis());\n+        \n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        try {\n+            StringConverter.INSTANCE.setInto(m, \"PXY\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testToString() {\n+        assertEquals(\"Converter[java.lang.String]\", StringConverter.INSTANCE.toString());\n+    }\n+\n+}", "timestamp": 1090191109, "metainfo": ""}