{"sha": "4e0f9ff5791f18fa63d61fa11be82c50de590ae1", "log": "Parse second/millis field   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n             } else {\n                 limit = Math.min(iMaxParsedDigits, text.length() - position);\n             }\n-\n+            \n+            // validate input number\n             boolean negative = false;\n             int length = 0;\n+            int dp = -1;\n             while (length < limit) {\n                 char c = text.charAt(position + length);\n+                // leading sign\n                 if (length == 0 && (c == '-' || c == '+') && !iRejectSignedValues) {\n-                    negative = c == '-';\n+                    negative = (c == '-');\n                     if (negative) {\n                         length++;\n                     } else {\n                     limit = Math.min(limit + 1, text.length() - position);\n                     continue;\n                 }\n+                // main number\n                 if (c < '0' || c > '9') {\n-                    break;\n+                    if (c == '.' && (iFieldType == SECONDS_MILLIS || iFieldType == SECONDS_OPTIONAL_MILLIS)) {\n+                        if (dp >= 0) {\n+                            // can't have two decimals\n+                            return position + length;\n+                        }\n+                        dp = length;\n+                    } else {\n+                        break;\n+                    }\n                 }\n                 length++;\n             }\n-\n-            if (length == 0) {\n+            if (length == 0 || (length == 1 && dp == 0) || (dp == -1 && iFieldType == SECONDS_MILLIS)) {\n                 return ~position;\n             }\n \n                 // another parser can continue on.\n                 return position;\n             }\n-\n+            \n+            if (iFieldType == SECONDS_MILLIS || iFieldType == SECONDS_OPTIONAL_MILLIS) {\n+                if (dp == -1) {\n+                    position = parseField(period, text, position, negative, length, SECONDS);\n+                    setFieldValue(period, MILLIS, 0);\n+                } else {\n+                    if (dp > 0) {\n+                        position = parseField(period, text, position, negative, dp, SECONDS);\n+                    } else {\n+                        setFieldValue(period, SECONDS, 0);\n+                    }\n+                    position++; // skip dp\n+                    int millisLength = length - 1 - dp;\n+                    if (millisLength > 3) {\n+                        position = parseField(period, text, position, false, 3, MILLIS);\n+                        position += (millisLength - 3);\n+                    } else if (millisLength == 0) {\n+                        setFieldValue(period, MILLIS, 0);\n+                    } else {\n+                        position = parseField(period, text, position, false, millisLength, MILLIS);\n+                    }\n+                }\n+            } else {\n+                position = parseField(period, text, position, negative, length, iFieldType);\n+            }\n+                \n+            if (position >= 0 && iSuffix != null) {\n+                position = iSuffix.parse(text, position);\n+            }\n+                \n+            return position;\n+        }\n+\n+        private int parseField(\n+                ReadWritablePeriod period, String text, int position,\n+                boolean negative, int length, int type) {\n+            \n             int value;\n             if (length >= 9) {\n                 // Since value may exceed max, use stock parser which checks\n                 }\n             }\n             \n-            setFieldValue(period, iFieldType, value);\n-                \n-            if (position >= 0 && iSuffix != null) {\n-                position = iSuffix.parse(text, position);\n-            }\n-                \n+            setFieldValue(period, type, value);\n             return position;\n         }\n \n--- a/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n+++ b/JodaTime/src/test/org/joda/time/convert/TestStringConverter.java\n     }        \n \n     public void testSetIntoPeriod_Object3() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M48.034S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(48, m.getSeconds());\n+        assertEquals(34, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object4() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M.056S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(0, m.getSeconds());\n+        assertEquals(56, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object5() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M56.S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(56, m.getSeconds());\n+        assertEquals(0, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object6() throws Exception {\n+        MutablePeriod m = new MutablePeriod(PeriodType.yearWeekDayTime());\n+        StringConverter.INSTANCE.setInto(m, \"P2Y4W3DT12H24M56.1234567S\", null);\n+        assertEquals(2, m.getYears());\n+        assertEquals(4, m.getWeeks());\n+        assertEquals(3, m.getDays());\n+        assertEquals(12, m.getHours());\n+        assertEquals(24, m.getMinutes());\n+        assertEquals(56, m.getSeconds());\n+        assertEquals(123, m.getMillis());\n+    }        \n+\n+    public void testSetIntoPeriod_Object7() throws Exception {\n         MutablePeriod m = new MutablePeriod(1, 0, 1, 1, 1, 1, 1, 1, PeriodType.yearWeekDayTime());\n         StringConverter.INSTANCE.setInto(m, \"P2Y4W3D\", null);\n         assertEquals(2, m.getYears());\n         assertEquals(0, m.getMillis());\n     }        \n \n-    public void testSetIntoPeriod_Object4() throws Exception {\n+    public void testSetIntoPeriod_Object8() throws Exception {\n         MutablePeriod m = new MutablePeriod();\n         try {\n             StringConverter.INSTANCE.setInto(m, \"\", null);", "timestamp": 1096815984, "metainfo": ""}