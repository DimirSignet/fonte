{"sha": "2394f55a24732b01d26787343c42a587db2baff4", "log": "Add tests for parsing periods   ", "commit": "\n--- a/JodaTime/src/test/org/joda/time/format/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java\n         suite.addTest(TestISODateTimeFormat.suite());\n         \n         suite.addTest(TestISOPeriodFormat.suite());\n+        suite.addTest(TestISOPeriodFormatParsing.suite());\n+        suite.addTest(TestPeriodFormatParsing.suite());\n         suite.addTest(TestPeriodFormatterBuilder.suite());\n         \n         return suite;\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for ISOPeriodFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestISOPeriodFormatParsing extends TestCase {\n+\n+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());\n+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW = (y2002days + 31L + 28L + 31L + 30L + 31L + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestISOPeriodFormatParsing.class);\n+    }\n+\n+    public TestISOPeriodFormatParsing(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard1() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"P1Y2M3W4DT5H6M7.008S\");\n+        assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard2() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"P0Y0M0W0DT5H6M7.008S\");\n+        assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard3() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"P0DT5H6M7.008S\");\n+        assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard4() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"P2Y3DT5H6M7.008S\");\n+        assertEquals(new Period(2, 0, 0, 3, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard5() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"P2YT5H6M7.008S\");\n+        assertEquals(new Period(2, 0, 0, 0, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard6() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"PT5H6M7.008S\");\n+        assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard7() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"P1Y2M3W4D\");\n+        assertEquals(new Period(1, 2, 3, 4, 0, 0, 0, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard8() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"PT5H6M7S\");\n+        assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard9() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"PT0S\");\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard10() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"P0D\");\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard11() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"P0Y\");\n+        assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandardFail1() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        try {\n+            parser.parsePeriod(PeriodType.standard(), \"P1Y2S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandardFail2() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        try {\n+            parser.parsePeriod(PeriodType.standard(), \"PS\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandardFail3() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        try {\n+            parser.parsePeriod(PeriodType.standard(), \"PTS\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandardFail4() {\n+        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        try {\n+            parser.parsePeriod(PeriodType.standard(), \"PXS\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+}\n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java\n+/*\n+ * Joda Software License, Version 1.0\n+ *\n+ *\n+ * Copyright (c) 2001-2004 Stephen Colebourne.  \n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer. \n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution,\n+ *    if any, must include the following acknowledgment:  \n+ *       \"This product includes software developed by the\n+ *        Joda project (http://www.joda.org/).\"\n+ *    Alternately, this acknowledgment may appear in the software itself,\n+ *    if and wherever such third-party acknowledgments normally appear.\n+ *\n+ * 4. The name \"Joda\" must not be used to endorse or promote products\n+ *    derived from this software without prior written permission. For\n+ *    written permission, please contact licence@joda.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Joda\",\n+ *    nor may \"Joda\" appear in their name, without prior written\n+ *    permission of the Joda project.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE JODA AUTHORS OR THE PROJECT\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Joda project and was originally \n+ * created by Stephen Colebourne <scolebourne@joda.org>. For more\n+ * information on the Joda project, please see <http://www.joda.org/>.\n+ */\n+package org.joda.time.format;\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for PeriodFormat.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriodFormatParsing extends TestCase {\n+\n+    private static final Period PERIOD = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+    private static final Period EMPTY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0);\n+    private static final Period YEAR_DAY_PERIOD = new Period(1, 0, 0, 4, 5, 6, 7, 8, PeriodType.yearDayTime());\n+    private static final Period EMPTY_YEAR_DAY_PERIOD = new Period(0, 0, 0, 0, 0, 0, 0, 0, PeriodType.yearDayTime());\n+    private static final Period TIME_PERIOD = new Period(0, 0, 0, 0, 5, 6, 7, 8);\n+    private static final Period DATE_PERIOD = new Period(1, 2, 3, 4, 0, 0, 0, 0);\n+\n+    private static final DateTimeZone PARIS = DateTimeZone.getInstance(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.getInstance(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.getInstance(\"Asia/Tokyo\");\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW = (y2002days + 31L + 28L + 31L + 30L + 31L + 9L - 1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriodFormatParsing.class);\n+    }\n+\n+    public TestPeriodFormatParsing(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseStandard1() {\n+        PeriodParser parser = PeriodFormat.getInstance().getDefault();\n+        Period p = parser.parsePeriod(PeriodType.standard(), \"6 years, 3 months and 2 days\");\n+        assertEquals(new Period(6, 3, 0, 2, 0, 0, 0, 0), p);\n+    }\n+\n+}", "timestamp": 1100295713, "metainfo": ""}