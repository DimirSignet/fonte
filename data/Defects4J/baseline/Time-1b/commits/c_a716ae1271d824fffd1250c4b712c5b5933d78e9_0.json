{"sha": "a716ae1271d824fffd1250c4b712c5b5933d78e9", "log": "Refactor Period formatting to match DateTime, part 1   ", "commit": "\n--- a/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n+++ b/JodaTime/src/java/org/joda/time/convert/StringConverter.java\n import org.joda.time.format.ISODateTimeFormat;\n import org.joda.time.format.ISOPeriodFormat;\n import org.joda.time.format.PeriodFormatter;\n-import org.joda.time.format.PeriodParser;\n \n /**\n  * StringConverter converts from a String to an instant, partial,\n      */\n     public void setInto(ReadWritablePeriod period, Object object, Chronology chrono) {\n         String str = (String) object;\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n         period.clear();\n         int pos = parser.parseInto(period, str, 0);\n         if (pos < str.length()) {\n             if (pos < 0) {\n                 // Parse again to get a better exception thrown.\n-                parser.parseMutablePeriod(period.getPeriodType(), str);\n+                parser.withParseType(period.getPeriodType()).parseMutablePeriod(str);\n             }\n             throw new IllegalArgumentException(\"Invalid format: \\\"\" + str + '\"');\n         }\n         // before slash\n         char c = leftStr.charAt(0);\n         if (c == 'P' || c == 'p') {\n-            period = periodParser.parsePeriod(getPeriodType(leftStr), leftStr);\n+            period = periodParser.withParseType(getPeriodType(leftStr)).parsePeriod(leftStr);\n         } else {\n             DateTime start = dateTimeParser.parseDateTime(leftStr);\n             startInstant = start.getMillis();\n             if (period != null) {\n                 throw new IllegalArgumentException(\"Interval composed of two durations: \" + str);\n             }\n-            period = periodParser.parsePeriod(getPeriodType(rightStr), rightStr);\n+            period = periodParser.withParseType(getPeriodType(rightStr)).parsePeriod(rightStr);\n             chrono = (chrono != null ? chrono : parsedChrono);\n             endInstant = chrono.add(period, startInstant, 1);\n         } else {\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatter.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatter.java\n  */\n package org.joda.time.format;\n \n+import java.io.IOException;\n+import java.io.Writer;\n+import java.util.Locale;\n+\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+import org.joda.time.ReadWritablePeriod;\n+import org.joda.time.ReadablePeriod;\n+\n /**\n- * Combined interface for printing and parsing.\n+ * Controls the printing and parsing of a time period to and from a string.\n  * <p>\n- * See each extended interface for details of the methods.\n+ * This class is the main API for printing and parsing used by most applications.\n+ * Instances of this class are created via one of three factory classes:\n+ * <ul>\n+ * <li>{@link PeriodFormat} - formats by pattern and style</li>\n+ * <li>{@link ISOPeriodFormat} - ISO8601 formats</li>\n+ * <li>{@link PeriodFormatterBuilder} - complex formats created via method calls</li>\n+ * </ul>\n+ * <p>\n+ * An instance of this class holds a reference internally to one printer and\n+ * one parser. It is possible that one of these may be null, in which case the\n+ * formatter cannot print/parse. This can be checked via the {@link #isPrinter()}\n+ * and {@link #isParser()} methods.\n+ * <p>\n+ * The underlying printer/parser can be altered to behave exactly as required\n+ * by using a decorator modifier:\n+ * <ul>\n+ * <li>{@link #withLocale(Locale)} - returns a new formatter that uses the specified locale</li>\n+ * </ul>\n+ * This returns a new formatter (instances of this class are immutable).\n+ * <p>\n+ * The main methods of the class are the <code>printXxx</code> and\n+ * <code>parseXxx</code> methods. These are used as follows:\n+ * <pre>\n+ * // print using the default locale\n+ * String periodStr = formatter.print(period);\n+ * // print using the French locale\n+ * String periodStr = formatter.withLocale(Locale.FRENCH).print(period);\n+ * \n+ * // parse using the French locale\n+ * Period date = formatter.withLocale(Locale.FRENCH).parsePeriod(str);\n+ * </pre>\n  *\n  * @author Brian S O'Neill\n  * @author Stephen Colebourne\n  * @since 1.0\n  */\n-public interface PeriodFormatter extends PeriodPrinter, PeriodParser {\n-\n-    // Methods inherited\n+public class PeriodFormatter {\n+\n+    /** The internal printer used to output the datetime. */\n+    private final PeriodPrinter iPrinter;\n+    /** The internal parser used to output the datetime. */\n+    private final PeriodParser iParser;\n+    /** The locale to use for printing and parsing. */\n+    private final Locale iLocale;\n+    /** The period type used in parsing. */\n+    private final PeriodType iParseType;\n+\n+    /**\n+     * Creates a new formatter, however you will normally use the factory\n+     * or the builder.\n+     * \n+     * @param printer  the internal printer, null if cannot print\n+     * @param parser  the internal parser, null if cannot parse\n+     */\n+    public PeriodFormatter(\n+            PeriodPrinter printer, PeriodParser parser) {\n+        super();\n+        iPrinter = printer;\n+        iParser = parser;\n+        iLocale = null;\n+        iParseType = null;\n+    }\n+\n+    /**\n+     * Constructor.\n+     * \n+     * @param printer  the internal printer, null if cannot print\n+     * @param parser  the internal parser, null if cannot parse\n+     * @param locale  the locale to use\n+     * @param type  the parse period type\n+     */\n+    private PeriodFormatter(\n+            PeriodPrinter printer, PeriodParser parser,\n+            Locale locale, PeriodType type) {\n+        super();\n+        iPrinter = printer;\n+        iParser = parser;\n+        iLocale = locale;\n+        iParseType = type;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Is this formatter capable of printing.\n+     * \n+     * @return true if this is a printer\n+     */\n+    public boolean isPrinter() {\n+        return (iPrinter != null);\n+    }\n+\n+    /**\n+     * Gets the internal printer object that performs the real printing work.\n+     * \n+     * @return the internal printer\n+     */\n+    public PeriodPrinter getPrinter() {\n+        return iPrinter;\n+    }\n+\n+    /**\n+     * Is this formatter capable of parsing.\n+     * \n+     * @return true if this is a parser\n+     */\n+    public boolean isParser() {\n+        return (iParser != null);\n+    }\n+\n+    /**\n+     * Gets the internal parser object that performs the real parsing work.\n+     * \n+     * @return the internal parser\n+     */\n+    public PeriodParser getParser() {\n+        return iParser;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new formatter with a different locale that will be used\n+     * for printing and parsing.\n+     * <p>\n+     * A PeriodFormatter is immutable, so a new instance is returned,\n+     * and the original is unaltered and still usable.\n+     * \n+     * @param locale  the locale to use\n+     * @return the new formatter\n+     */\n+    public PeriodFormatter withLocale(Locale locale) {\n+        if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {\n+            return this;\n+        }\n+        return new PeriodFormatter(iPrinter, iParser, locale, iParseType);\n+    }\n+\n+    /**\n+     * Gets the locale that will be used for printing and parsing.\n+     * \n+     * @return the locale to use\n+     */\n+    public Locale getLocale() {\n+        return iLocale;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Returns a new formatter with a different PeriodType for parsing.\n+     * <p>\n+     * A PeriodFormatter is immutable, so a new instance is returned,\n+     * and the original is unaltered and still usable.\n+     * \n+     * @param type  the type to use in parsing\n+     * @return the new formatter\n+     */\n+    public PeriodFormatter withParseType(PeriodType type) {\n+        if (type == iParseType) {\n+            return this;\n+        }\n+        return new PeriodFormatter(iPrinter, iParser, iLocale, type);\n+    }\n+\n+    /**\n+     * Gets the PeriodType that will be used for parsing.\n+     * \n+     * @return the parse type to use\n+     */\n+    public PeriodType getParseType() {\n+        return iParseType;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Prints a ReadablePeriod to a StringBuffer.\n+     *\n+     * @param buf  the formatted period is appended to this buffer\n+     * @param period  the period to format, not null\n+     */\n+    public void printTo(StringBuffer buf, ReadablePeriod period) {\n+        checkPrinter();\n+        checkPeriod(period);\n+        \n+        getPrinter().printTo(buf, period, iLocale);\n+    }\n+\n+    /**\n+     * Prints a ReadablePeriod to a Writer.\n+     *\n+     * @param out  the formatted period is written out\n+     * @param period  the period to format, not null\n+     */\n+    public void printTo(Writer out, ReadablePeriod period) throws IOException {\n+        checkPrinter();\n+        checkPeriod(period);\n+        \n+        getPrinter().printTo(out, period, iLocale);\n+    }\n+\n+    /**\n+     * Prints a ReadablePeriod to a new String.\n+     *\n+     * @param period  the period to format, not null\n+     * @return the printed result\n+     */\n+    public String print(ReadablePeriod period) {\n+        checkPrinter();\n+        checkPeriod(period);\n+        \n+        PeriodPrinter printer = getPrinter();\n+        StringBuffer buf = new StringBuffer(printer.calculatePrintedLength(period, iLocale));\n+        printer.printTo(buf, period, iLocale);\n+        return buf.toString();\n+    }\n+\n+    /**\n+     * Checks whether printing is supported.\n+     * \n+     * @throws UnsupportedOperationException if printing is not supported\n+     */\n+    private void checkPrinter() {\n+        if (iPrinter == null) {\n+            throw new UnsupportedOperationException(\"Printing not supported\");\n+        }\n+    }\n+\n+    /**\n+     * Checks whether the period is non-null.\n+     * \n+     * @throws IllegalArgumentException if the period is null\n+     */\n+    private void checkPeriod(ReadablePeriod period) {\n+        if (period == null) {\n+            throw new IllegalArgumentException(\"Period must not be null\");\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Parses a period from the given text, at the given position, saving the\n+     * result into the fields of the given ReadWritablePeriod. If the parse\n+     * succeeds, the return value is the new text position. Note that the parse\n+     * may succeed without fully reading the text.\n+     * <p>\n+     * The parse type of the formatter is not used by this method.\n+     * <p>\n+     * If it fails, the return value is negative, but the period may still be\n+     * modified. To determine the position where the parse failed, apply the\n+     * one's complement operator (~) on the return value.\n+     *\n+     * @param period  a period that will be modified\n+     * @param text  text to parse\n+     * @param position position to start parsing from\n+     * @return new position, if negative, parse failed. Apply complement\n+     * operator (~) to get position of failure\n+     * @throws IllegalArgumentException if any field is out of range\n+     */\n+    public int parseInto(ReadWritablePeriod period, String text, int position) {\n+        checkParser();\n+        checkPeriod(period);\n+        \n+        return getParser().parseInto(period, text, position, iLocale);\n+    }\n+\n+    /**\n+     * Parses a period from the given text, returning a new Period.\n+     *\n+     * @param text  text to parse\n+     * @return parsed value in a Period object\n+     * @throws IllegalArgumentException if any field is out of range\n+     */\n+    public Period parsePeriod(String text) {\n+        checkParser();\n+        \n+        return parseMutablePeriod(text).toPeriod();\n+    }\n+\n+    /**\n+     * Parses a period from the given text, returning a new MutablePeriod.\n+     *\n+     * @param text  text to parse\n+     * @return parsed value in a MutablePeriod object\n+     * @throws IllegalArgumentException if any field is out of range\n+     */\n+    public MutablePeriod parseMutablePeriod(String text) {\n+        checkParser();\n+        \n+        MutablePeriod period = new MutablePeriod(0, iParseType);\n+        int newPos = getParser().parseInto(period, text, 0, iLocale);\n+        if (newPos >= 0) {\n+            if (newPos >= text.length()) {\n+                return period;\n+            }\n+        } else {\n+            newPos = ~newPos;\n+        }\n+        throw new IllegalArgumentException(FormatUtils.createErrorMessage(text, newPos));\n+    }\n+\n+    /**\n+     * Deprecated, use withParseType(type).parsePeriod(p).\n+     *\n+     * @deprecated use withParseType(type).parsePeriod(p).\n+     */\n+    public Period parsePeriod(PeriodType type, String text) {\n+        return withParseType(type).parsePeriod(text);\n+    }\n+\n+    /**\n+     * Deprecated, use withParseType(type).parseMutablePeriod(p).\n+     *\n+     * @deprecated use withParseType(type).parseMutablePeriod(p).\n+     */\n+    public MutablePeriod parseMutablePeriod(PeriodType type, String text) {\n+        return withParseType(type).parseMutablePeriod(text);\n+    }\n+\n+    /**\n+     * Checks whether parsing is supported.\n+     * \n+     * @throws UnsupportedOperationException if parsing is not supported\n+     */\n+    private void checkParser() {\n+        if (iParser == null) {\n+            throw new UnsupportedOperationException(\"Parsing not supported\");\n+        }\n+    }\n+\n }\n--- a/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodFormatterBuilder.java\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Locale;\n import java.util.TreeSet;\n \n import org.joda.time.DateTimeConstants;\n import org.joda.time.ReadablePeriod;\n \n /**\n- * PeriodFormatterBuilder is used for constructing {@link PeriodFormatter}s.\n- * PeriodFormatters are built by appending specific fields and separators.\n- *\n+ * Factory that creates complex instances of PeriodFormatter via method calls.\n+ * <p>\n+ * Period formatting is performed by the {@link PeriodFormatter} class.\n+ * Three classes provide factory methods to create formatters, and this is one.\n+ * The others are {@link PeriodFormat} and {@link ISOPeriodFormat}.\n+ * <p>\n+ * PeriodFormatterBuilder is used for constructing formatters which are then\n+ * used to print or parse. The formatters are built by appending specific fields\n+ * or other formatters to an instanece of this builder.\n  * <p>\n  * For example, a formatter that prints years and months, like \"15 years and 8 months\",\n  * can be constructed as follows:\n \n     private PeriodFieldAffix iPrefix;\n \n-    // List of PeriodFormatters used to build a final formatter.\n-    private List iFormatters;\n+    // List of Printers and Parsers used to build a final formatter.\n+    private List iElementPairs;\n \n     // Last PeriodFormatter appended of each field type.\n     private FieldFormatter[] iFieldFormatters;\n      * @return the newly created printer\n      */\n     public PeriodPrinter toPrinter() {\n-        return toFormatter();\n+        return toFormatter().getPrinter();\n     }\n \n     /**\n      * @return the newly created parser\n      */\n     public PeriodParser toParser() {\n-        return toFormatter();\n+        return toFormatter().getParser();\n     }\n \n     /**\n      * @return the newly created formatter\n      */\n     public PeriodFormatter toFormatter() {\n-        PeriodFormatter formatter = toFormatter(iFormatters);\n+        PeriodFormatter formatter = toFormatter(iElementPairs);\n         iFieldFormatters = (FieldFormatter[]) iFieldFormatters.clone();\n         return formatter;\n     }\n \n-    private static PeriodFormatter toFormatter(List formatters) {\n-        int size = formatters.size();\n-        if (size >= 1 && formatters.get(0) instanceof Separator) {\n-            Separator sep = (Separator) formatters.get(0);\n-            return sep.finish(toFormatter(formatters.subList(1, size)));\n-        }\n-        return (PeriodFormatter) createComposite(formatters);\n+    private static PeriodFormatter toFormatter(List elementPairs) {\n+        int size = elementPairs.size();\n+        if (size >= 2 && elementPairs.get(0) instanceof Separator) {\n+            Separator sep = (Separator) elementPairs.get(0);\n+            PeriodFormatter f = toFormatter(elementPairs.subList(2, size));\n+            sep = sep.finish(f.getPrinter(), f.getParser());\n+            return new PeriodFormatter(sep, sep);\n+        }\n+        Object[] comp = createComposite(elementPairs);\n+        return new PeriodFormatter((PeriodPrinter) comp[0], (PeriodParser) comp[1]);\n     }\n \n     /**\n         iMaxParsedDigits = 10;\n         iRejectSignedValues = false;\n         iPrefix = null;\n-        if (iFormatters == null) {\n-            iFormatters = new ArrayList();\n+        if (iElementPairs == null) {\n+            iElementPairs = new ArrayList();\n         } else {\n-            iFormatters.clear();\n+            iElementPairs.clear();\n         }\n         iFieldFormatters = new FieldFormatter[10];\n     }\n             throw new IllegalArgumentException(\"No formatter supplied\");\n         }\n         clearPrefix();\n-        iFormatters.add(formatter);\n-        return this;\n-    }\n+        append0(formatter.getPrinter(), formatter.getParser());\n+        return this;\n+    }\n+\n+//    /**\n+//     * Appends a printer parser pair.\n+//     *\n+//     * @return this PeriodFormatterBuilder\n+//     */\n+//    public PeriodFormatterBuilder append(PeriodPrinter printer, PeriodParser parser) {\n+//        if (printer == null && parser == null) {\n+//            throw new IllegalArgumentException(\"No printer or parser supplied\");\n+//        }\n+//        clearPrefix();\n+//        append0(printer, parser);\n+//        return this;\n+//    }\n \n     /**\n      * Instructs the printer to emit specific text, and the parser to expect it.\n         }\n         clearPrefix();\n         Literal literal = new Literal(text);\n-        iFormatters.add(literal);\n+        append0(literal, literal);\n         return this;\n     }\n \n     private void appendField(int type, int minPrinted) {\n         FieldFormatter field = new FieldFormatter(minPrinted, iPrintZeroSetting,\n             iMaxParsedDigits, iRejectSignedValues, type, iFieldFormatters, iPrefix, null);\n-        iFormatters.add(field);\n+        append0(field, field);\n         iFieldFormatters[type] = field;\n         iPrefix = null;\n     }\n      * @see #appendPrefix\n      */\n     private PeriodFormatterBuilder appendSuffix(PeriodFieldAffix suffix) {\n-        final Object originalField;\n-        if (iFormatters.size() > 0) {\n-            originalField = iFormatters.get(iFormatters.size() - 1);\n+        final Object originalPrinter;\n+        final Object originalParser;\n+        if (iElementPairs.size() > 0) {\n+            originalPrinter = iElementPairs.get(iElementPairs.size() - 2);\n+            originalParser = iElementPairs.get(iElementPairs.size() - 1);\n         } else {\n-            originalField = null;\n-        }\n-\n-        if (originalField == null || !(originalField instanceof FieldFormatter)) {\n+            originalPrinter = null;\n+            originalParser = null;\n+        }\n+\n+        if (originalPrinter == null || originalParser == null ||\n+                originalPrinter != originalParser ||\n+                !(originalPrinter instanceof FieldFormatter)) {\n             throw new IllegalStateException(\"No field to apply suffix to\");\n         }\n \n         clearPrefix();\n-        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalField, suffix);\n-        iFormatters.set(iFormatters.size() - 1, newField);\n+        FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);\n+        iElementPairs.set(iElementPairs.size() - 2, newField);\n+        iElementPairs.set(iElementPairs.size() - 1, newField);\n         iFieldFormatters[newField.getFieldType()] = newField;\n         \n         return this;\n         clearPrefix();\n         \n         // optimise zero formatter case\n-        List formatters = iFormatters;\n-        if (formatters.size() == 0) {\n+        List pairs = iElementPairs;\n+        if (pairs.size() == 0) {\n             if (useAfter && useBefore == false) {\n-                formatters.add\n-                    (new Separator(text, finalText, variants, Literal.EMPTY, useBefore, useAfter));\n+                Separator separator = new Separator(\n+                        text, finalText, variants,\n+                        Literal.EMPTY, Literal.EMPTY, useBefore, useAfter);\n+                append0(separator, separator);\n             }\n             return this;\n         }\n         // find the last separator added\n         int i;\n         Separator lastSeparator = null;\n-        for (i=formatters.size(); --i>=0; ) {\n-            if (formatters.get(i) instanceof Separator) {\n-                lastSeparator = (Separator) formatters.get(i);\n-                formatters = formatters.subList(i + 1, formatters.size());\n-                break;\n-            }\n+        for (i=pairs.size(); --i>=0; ) {\n+            if (pairs.get(i) instanceof Separator) {\n+                lastSeparator = (Separator) pairs.get(i);\n+                pairs = pairs.subList(i + 1, pairs.size());\n+                break;\n+            }\n+            i--;  // element pairs\n         }\n         \n         // merge formatters\n-        if (lastSeparator != null && formatters.size() == 0) {\n+        if (lastSeparator != null && pairs.size() == 0) {\n             throw new IllegalStateException(\"Cannot have two adjacent separators\");\n         } else {\n-            PeriodFormatter composite = createComposite(formatters);\n-            formatters.clear();\n-            formatters.add\n-                (new Separator(text, finalText, variants, composite, useBefore, useAfter));\n+            Object[] comp = createComposite(pairs);\n+            pairs.clear();\n+            Separator separator = new Separator(\n+                    text, finalText, variants,\n+                    (PeriodPrinter) comp[0], (PeriodParser) comp[1],\n+                    useBefore, useAfter);\n+            pairs.add(separator);\n+            pairs.add(separator);\n         }\n         \n         return this;\n         iPrefix = null;\n     }\n \n-    private static PeriodFormatter createComposite(List formatters) {\n-        switch (formatters.size()) {\n+    private PeriodFormatterBuilder append0(PeriodPrinter printer, PeriodParser parser) {\n+        iElementPairs.add(printer);\n+        iElementPairs.add(parser);\n+        return this;\n+    }\n+\n+    private static Object[] createComposite(List elementPairs) {\n+        switch (elementPairs.size()) {\n             case 0:\n-                return Literal.EMPTY;\n+                return new Object[] {Literal.EMPTY, Literal.EMPTY};\n             case 1:\n-                return (PeriodFormatter) formatters.get(0);\n+                return new Object[] {elementPairs.get(0), elementPairs.get(1)};\n             default:\n-                return new Composite(formatters);\n+                Composite comp = new Composite(elementPairs);\n+                return new Object[] {comp, comp};\n         }\n     }\n \n      * Formats the numeric value of a field, potentially with prefix/suffix.\n      */\n     static class FieldFormatter\n-            extends BasePeriodFormatter\n-            implements PeriodFormatter {\n+            implements PeriodPrinter, PeriodParser {\n         private final int iMinPrintedDigits;\n         private final int iPrintZeroSetting;\n         private final int iMaxParsedDigits;\n             iSuffix = suffix;\n         }\n \n-        public int countFieldsToPrint(ReadablePeriod period) {\n+        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n+            if (stopAt <= 0) {\n+                return 0;\n+            }\n             if (iPrintZeroSetting == PRINT_ZERO_ALWAYS || getFieldValue(period) != Long.MAX_VALUE) {\n                 return 1;\n             }\n             return 0;\n         }\n \n-        public int countFieldsToPrint(ReadablePeriod period, int stopAt) {\n-            return stopAt <= 0 ? 0 : countFieldsToPrint(period);\n-        }\n-\n-        public int calculatePrintedLength(ReadablePeriod period) {\n+        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n             long valueLong = getFieldValue(period);\n             if (valueLong == Long.MAX_VALUE) {\n                 return 0;\n             return sum;\n         }\n         \n-        public void printTo(StringBuffer buf, ReadablePeriod period) {\n+        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n             long valueLong = getFieldValue(period);\n             if (valueLong == Long.MAX_VALUE) {\n                 return;\n             }\n         }\n \n-        public void printTo(Writer out, ReadablePeriod period) throws IOException {\n+        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n             long valueLong = getFieldValue(period);\n             if (valueLong == Long.MAX_VALUE) {\n                 return;\n             }\n         }\n \n-        public int parseInto(ReadWritablePeriod period,\n-                             String text, int position) {\n+        public int parseInto(\n+                ReadWritablePeriod period, String text, \n+                int position, Locale locale) {\n \n             boolean mustParse = (iPrintZeroSetting == PRINT_ZERO_ALWAYS);\n \n      * Handles a simple literal piece of text.\n      */\n     static class Literal\n-            extends BasePeriodFormatter\n-            implements PeriodFormatter {\n+            implements PeriodPrinter, PeriodParser {\n         static final Literal EMPTY = new Literal(\"\");\n         private final String iText;\n \n             iText = text;\n         }\n \n-        public int countFieldsToPrint(ReadablePeriod period, int stopAt) {\n+        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n             return 0;\n         }\n \n-        public int calculatePrintedLength(ReadablePeriod period) {\n+        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n             return iText.length();\n         }\n \n-        public void printTo(StringBuffer buf, ReadablePeriod period) {\n+        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n             buf.append(iText);\n         }\n \n-        public void printTo(Writer out, ReadablePeriod period) throws IOException {\n+        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n             out.write(iText);\n         }\n \n-        public int parseInto(ReadWritablePeriod period,\n-                             String periodStr, int position) {\n+        public int parseInto(\n+                ReadWritablePeriod period, String periodStr,\n+                int position, Locale locale) {\n             if (periodStr.regionMatches(true, position, iText, 0, iText.length())) {\n                 return position + iText.length();\n             }\n      * For example, the 'T' in the ISO8601 standard.\n      */\n     static class Separator\n-            extends BasePeriodFormatter\n-            implements PeriodFormatter {\n+            implements PeriodPrinter, PeriodParser {\n         private final String iText;\n         private final String iFinalText;\n         private final String[] iParsedForms;\n         private final boolean iUseBefore;\n         private final boolean iUseAfter;\n \n-        private PeriodFormatter iBefore;\n-        private PeriodFormatter iAfter;\n+        private PeriodPrinter iBeforePrinter;\n+        private PeriodPrinter iAfterPrinter;\n+        private PeriodParser iBeforeParser;\n+        private PeriodParser iAfterParser;\n \n         Separator(String text, String finalText, String[] variants,\n-                  PeriodFormatter before, boolean useBefore, boolean useAfter) {\n+                PeriodPrinter beforePrinter, PeriodParser beforeParser,\n+                boolean useBefore, boolean useAfter) {\n             iText = text;\n             iFinalText = finalText;\n \n                 iParsedForms = (String[]) parsedList.toArray(new String[parsedList.size()]);\n             }\n \n-            iBefore = before;\n+            iBeforePrinter = beforePrinter;\n+            iBeforeParser = beforeParser;\n             iUseBefore = useBefore;\n             iUseAfter = useAfter;\n         }\n \n-        public int countFieldsToPrint(ReadablePeriod period, int stopAt) {\n-            int sum = iBefore.countFieldsToPrint(period, stopAt);\n+        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n+            int sum = iBeforePrinter.countFieldsToPrint(period, stopAt, locale);\n             if (sum < stopAt) {\n-                sum += iAfter.countFieldsToPrint(period, stopAt);\n+                sum += iAfterPrinter.countFieldsToPrint(period, stopAt, locale);\n             }\n             return sum;\n         }\n \n-        public int calculatePrintedLength(ReadablePeriod period) {\n-            PeriodFormatter before = iBefore;\n-            PeriodFormatter after = iAfter;\n+        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n+            PeriodPrinter before = iBeforePrinter;\n+            PeriodPrinter after = iAfterPrinter;\n             \n-            int sum = before.calculatePrintedLength(period)\n-                    + after.calculatePrintedLength(period);\n+            int sum = before.calculatePrintedLength(period, locale)\n+                    + after.calculatePrintedLength(period, locale);\n             \n             if (iUseBefore) {\n-                if (before.countFieldsToPrint(period, 1) > 0) {\n+                if (before.countFieldsToPrint(period, 1, locale) > 0) {\n                     if (iUseAfter) {\n-                        int afterCount = after.countFieldsToPrint(period, 2);\n+                        int afterCount = after.countFieldsToPrint(period, 2, locale);\n                         if (afterCount > 0) {\n                             sum += (afterCount > 1 ? iText : iFinalText).length();\n                         }\n                         sum += iText.length();\n                     }\n                 }\n-            } else if (iUseAfter && after.countFieldsToPrint(period, 1) > 0) {\n+            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {\n                 sum += iText.length();\n             }\n             \n             return sum;\n         }\n \n-        public void printTo(StringBuffer buf, ReadablePeriod period) {\n-            PeriodFormatter before = iBefore;\n-            PeriodFormatter after = iAfter;\n+        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n+            PeriodPrinter before = iBeforePrinter;\n+            PeriodPrinter after = iAfterPrinter;\n             \n-            before.printTo(buf, period);\n+            before.printTo(buf, period, locale);\n             if (iUseBefore) {\n-                if (before.countFieldsToPrint(period, 1) > 0) {\n+                if (before.countFieldsToPrint(period, 1, locale) > 0) {\n                     if (iUseAfter) {\n-                        int afterCount = after.countFieldsToPrint(period, 2);\n+                        int afterCount = after.countFieldsToPrint(period, 2, locale);\n                         if (afterCount > 0) {\n                             buf.append(afterCount > 1 ? iText : iFinalText);\n                         }\n                         buf.append(iText);\n                     }\n                 }\n-            } else if (iUseAfter && after.countFieldsToPrint(period, 1) > 0) {\n+            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {\n                 buf.append(iText);\n             }\n-            after.printTo(buf, period);\n-        }\n-\n-        public void printTo(Writer out, ReadablePeriod period) throws IOException {\n-            PeriodFormatter before = iBefore;\n-            PeriodFormatter after = iAfter;\n+            after.printTo(buf, period, locale);\n+        }\n+\n+        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n+            PeriodPrinter before = iBeforePrinter;\n+            PeriodPrinter after = iAfterPrinter;\n             \n-            before.printTo(out, period);\n+            before.printTo(out, period, locale);\n             if (iUseBefore) {\n-                if (before.countFieldsToPrint(period, 1) > 0) {\n+                if (before.countFieldsToPrint(period, 1, locale) > 0) {\n                     if (iUseAfter) {\n-                        int afterCount = after.countFieldsToPrint(period, 2);\n+                        int afterCount = after.countFieldsToPrint(period, 2, locale);\n                         if (afterCount > 0) {\n                             out.write(afterCount > 1 ? iText : iFinalText);\n                         }\n                         out.write(iText);\n                     }\n                 }\n-            } else if (iUseAfter && after.countFieldsToPrint(period, 1) > 0) {\n+            } else if (iUseAfter && after.countFieldsToPrint(period, 1, locale) > 0) {\n                 out.write(iText);\n             }\n-            after.printTo(out, period);\n-        }\n-\n-        public int parseInto(ReadWritablePeriod period,\n-                             String periodStr, int position) {\n+            after.printTo(out, period, locale);\n+        }\n+\n+        public int parseInto(\n+                ReadWritablePeriod period, String periodStr,\n+                int position, Locale locale) {\n             int oldPos = position;\n-            position = iBefore.parseInto(period, periodStr, position);\n+            position = iBeforeParser.parseInto(period, periodStr, position, locale);\n \n             if (position < 0) {\n                 return position;\n             }\n \n             oldPos = position;\n-            position = iAfter.parseInto(period, periodStr, position);\n+            position = iAfterParser.parseInto(period, periodStr, position, locale);\n \n             if (position < 0) {\n                 return position;\n             return position;\n         }\n \n-        Separator finish(PeriodFormatter after) {\n-            iAfter = after;\n+        Separator finish(PeriodPrinter afterPrinter, PeriodParser afterParser) {\n+            iAfterPrinter = afterPrinter;\n+            iAfterParser = afterParser;\n             return this;\n         }\n     }\n      * Composite implementation that merges other fields to create a full pattern.\n      */\n     static class Composite\n-            extends BasePeriodFormatter\n-            implements PeriodFormatter {\n+            implements PeriodPrinter, PeriodParser {\n         \n-        private final PeriodFormatter[] iFormatters;\n-\n-        Composite(List formatters) {\n-            iFormatters = (PeriodFormatter[]) formatters.toArray(\n-                new PeriodFormatter[formatters.size()]);\n-        }\n-\n-        public int countFieldsToPrint(ReadablePeriod period, int stopAt) {\n+        private final PeriodPrinter[] iPrinters;\n+        private final PeriodParser[] iParsers;\n+\n+        Composite(List elementPairs) {\n+            List printerList = new ArrayList();\n+            List parserList = new ArrayList();\n+\n+            decompose(elementPairs, printerList, parserList);\n+\n+            if (printerList.size() <= 0) {\n+                iPrinters = null;\n+            } else {\n+                iPrinters = (PeriodPrinter[]) printerList.toArray(\n+                        new PeriodPrinter[printerList.size()]);\n+            }\n+\n+            if (parserList.size() <= 0) {\n+                iParsers = null;\n+            } else {\n+                iParsers = (PeriodParser[]) parserList.toArray(\n+                        new PeriodParser[parserList.size()]);\n+            }\n+        }\n+\n+        public int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale locale) {\n             int sum = 0;\n-            PeriodFormatter[] printers = iFormatters;\n+            PeriodPrinter[] printers = iPrinters;\n             for (int i=printers.length; sum < stopAt && --i>=0; ) {\n-                sum += printers[i].countFieldsToPrint(period);\n+                sum += printers[i].countFieldsToPrint(period, Integer.MAX_VALUE, locale);\n             }\n             return sum;\n         }\n \n-        public int calculatePrintedLength(ReadablePeriod period) {\n+        public int calculatePrintedLength(ReadablePeriod period, Locale locale) {\n             int sum = 0;\n-            PeriodFormatter[] printers = iFormatters;\n+            PeriodPrinter[] printers = iPrinters;\n             for (int i=printers.length; --i>=0; ) {\n-                sum += printers[i].calculatePrintedLength(period);\n+                sum += printers[i].calculatePrintedLength(period, locale);\n             }\n             return sum;\n         }\n \n-        public void printTo(StringBuffer buf, ReadablePeriod period) {\n-            PeriodFormatter[] printers = iFormatters;\n+        public void printTo(StringBuffer buf, ReadablePeriod period, Locale locale) {\n+            PeriodPrinter[] printers = iPrinters;\n             int len = printers.length;\n             for (int i=0; i<len; i++) {\n-                printers[i].printTo(buf, period);\n-            }\n-        }\n-\n-        public void printTo(Writer out, ReadablePeriod period) throws IOException {\n-            PeriodFormatter[] printers = iFormatters;\n+                printers[i].printTo(buf, period, locale);\n+            }\n+        }\n+\n+        public void printTo(Writer out, ReadablePeriod period, Locale locale) throws IOException {\n+            PeriodPrinter[] printers = iPrinters;\n             int len = printers.length;\n             for (int i=0; i<len; i++) {\n-                printers[i].printTo(out, period);\n-            }\n-        }\n-\n-        public int parseInto(ReadWritablePeriod period,\n-                             String periodStr, int position) {\n-            PeriodFormatter[] parsers = iFormatters;\n+                printers[i].printTo(out, period, locale);\n+            }\n+        }\n+\n+        public int parseInto(\n+                ReadWritablePeriod period, String periodStr,\n+                int position, Locale locale) {\n+            PeriodParser[] parsers = iParsers;\n             if (parsers == null) {\n                 throw new UnsupportedOperationException();\n             }\n \n             int len = parsers.length;\n             for (int i=0; i<len && position >= 0; i++) {\n-                position = parsers[i].parseInto(period, periodStr, position);\n+                position = parsers[i].parseInto(period, periodStr, position, locale);\n             }\n             return position;\n         }\n+\n+        private void decompose(List elementPairs, List printerList, List parserList) {\n+            int size = elementPairs.size();\n+            for (int i=0; i<size; i+=2) {\n+                Object element = elementPairs.get(i);\n+                if (element instanceof PeriodPrinter) {\n+                    if (element instanceof Composite) {\n+                        addArrayToList(printerList, ((Composite) element).iPrinters);\n+                    } else {\n+                        printerList.add(element);\n+                    }\n+                }\n+\n+                element = elementPairs.get(i + 1);\n+                if (element instanceof PeriodParser) {\n+                    if (element instanceof Composite) {\n+                        addArrayToList(parserList, ((Composite) element).iParsers);\n+                    } else {\n+                        parserList.add(element);\n+                    }\n+                }\n+            }\n+        }\n+\n+        private void addArrayToList(List list, Object[] array) {\n+            if (array != null) {\n+                for (int i=0; i<array.length; i++) {\n+                    list.add(array[i]);\n+                }\n+            }\n+        }\n     }\n \n }\n--- a/JodaTime/src/java/org/joda/time/format/PeriodParser.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodParser.java\n  */\n package org.joda.time.format;\n \n-import org.joda.time.Period;\n-import org.joda.time.PeriodType;\n-import org.joda.time.MutablePeriod;\n+import java.util.Locale;\n+\n import org.joda.time.ReadWritablePeriod;\n \n /**\n- * Defines an interface for parsing textual representations of time periods.\n+ * Internal interface for parsing textual representations of time periods.\n+ * <p>\n+ * Application users will rarely use this class directly. Instead, you\n+ * will use one of the factory classes to create a {@link PeriodFormatter}.\n+ * <p>\n+ * The factory classes are:<br />\n+ * - {@link PeriodFormatterBuilder}<br />\n+ * - {@link PeriodFormat}<br />\n+ * - {@link ISOPeriodFormat}<br />\n  *\n  * @author Brian S O'Neill\n+ * @author Stephen Colebourne\n  * @since 1.0\n  * @see PeriodFormatter\n  * @see PeriodFormatterBuilder\n      * @param period  a period that will be modified\n      * @param periodStr  text to parse\n      * @param position position to start parsing from\n+     * @param locale  the locale to use for parsing\n      * @return new position, if negative, parse failed. Apply complement\n      * operator (~) to get position of failure\n      * @throws IllegalArgumentException if any field is out of range\n      */\n-    int parseInto(ReadWritablePeriod period, String periodStr, int position);\n-\n-    /**\n-     * Parses a period from the given text, returning a new Period.\n-     *\n-     * @param type  defines which fields may be parsed\n-     * @param periodStr  text to parse\n-     * @return parsed value in a Period object\n-     * @throws IllegalArgumentException if any field is out of range\n-     */\n-    Period parsePeriod(PeriodType type, String periodStr);\n-\n-    /**\n-     * Parses a period from the given text, returning a new MutablePeriod.\n-     *\n-     * @param type  defines which fields may be parsed\n-     * @param periodStr  text to parse\n-     * @return parsed value in a MutablePeriod object\n-     * @throws IllegalArgumentException if any field is out of range\n-     */\n-    MutablePeriod parseMutablePeriod(PeriodType type, String periodStr);\n+    int parseInto(ReadWritablePeriod period, String periodStr, int position, Locale locale);\n \n }\n--- a/JodaTime/src/java/org/joda/time/format/PeriodPrinter.java\n+++ b/JodaTime/src/java/org/joda/time/format/PeriodPrinter.java\n \n import java.io.IOException;\n import java.io.Writer;\n+import java.util.Locale;\n \n import org.joda.time.ReadablePeriod;\n \n /**\n- * Defines an interface for creating textual representations of time periods.\n+ * Internal interface for printing textual representations of time periods.\n+ * <p>\n+ * Application users will rarely use this class directly. Instead, you\n+ * will use one of the factory classes to create a {@link PeriodFormatter}.\n+ * <p>\n+ * The factory classes are:<br />\n+ * - {@link PeriodFormatterBuilder}<br />\n+ * - {@link PeriodFormat}<br />\n+ * - {@link ISOPeriodFormat}<br />\n  *\n  * @author Brian S O'Neill\n+ * @author Stephen Colebourne\n  * @since 1.0\n  * @see PeriodFormatter\n  * @see PeriodFormatterBuilder\n      * Returns the exact number of characters produced for the given period.\n      * \n      * @param period  the period to use\n+     * @param locale  the locale to use\n      * @return the estimated length\n      */\n-    int calculatePrintedLength(ReadablePeriod period);\n+    int calculatePrintedLength(ReadablePeriod period, Locale iLocale);\n \n     /**\n      * Returns the amount of fields from the given period that this printer\n      * will print.\n      * \n      * @param period  the period to use\n+     * @param stopAt stop counting at this value, enter a number &ge; 256 to count all\n+     * @param locale  the locale to use\n      * @return amount of fields printed\n      */\n-    int countFieldsToPrint(ReadablePeriod period);\n-\n-    /**\n-     * Returns the amount of fields from the given period that this printer\n-     * will print.\n-     * \n-     * @param period  the period to use\n-     * @param stopAt stop counting at this value\n-     * @return amount of fields printed\n-     */\n-    int countFieldsToPrint(ReadablePeriod period, int stopAt);\n+    int countFieldsToPrint(ReadablePeriod period, int stopAt, Locale iLocale);\n \n     //-----------------------------------------------------------------------\n     /**\n      *\n      * @param buf  the formatted period is appended to this buffer\n      * @param period  the period to format\n+     * @param locale  the locale to use\n      */\n-    void printTo(StringBuffer buf, ReadablePeriod period);\n+    void printTo(StringBuffer buf, ReadablePeriod period, Locale iLocale);\n \n     /**\n      * Prints a ReadablePeriod to a Writer.\n      *\n      * @param out  the formatted period is written out\n      * @param period  the period to format\n+     * @param locale  the locale to use\n      */\n-    void printTo(Writer out, ReadablePeriod period) throws IOException;\n-\n-    /**\n-     * Prints a ReadablePeriod to a new String.\n-     *\n-     * @param period  the period to format\n-     * @return the printed result\n-     */\n-    String print(ReadablePeriod period);\n+    void printTo(Writer out, ReadablePeriod period, Locale iLocale) throws IOException;\n \n }\n--- a/JodaTime/src/test/org/joda/time/format/TestAll.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestAll.java\n         suite.addTest(TestDateTimeFormatStyle.suite());\n         suite.addTest(TestISODateTimeFormat.suite());\n         \n+        suite.addTest(TestPeriodFormatter.suite());\n         suite.addTest(TestISOPeriodFormat.suite());\n         suite.addTest(TestISOPeriodFormatParsing.suite());\n         suite.addTest(TestPeriodFormatParsing.suite());\n--- a/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestISOPeriodFormatParsing.java\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard1() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"P1Y2M3W4DT5H6M7.008S\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\");\n         assertEquals(new Period(1, 2, 3, 4, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard2() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"P0Y0M0W0DT5H6M7.008S\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"P0Y0M0W0DT5H6M7.008S\");\n         assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard3() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"P0DT5H6M7.008S\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"P0DT5H6M7.008S\");\n         assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard4() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"P2Y3DT5H6M7.008S\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"P2Y3DT5H6M7.008S\");\n         assertEquals(new Period(2, 0, 0, 3, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard5() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"P2YT5H6M7.008S\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"P2YT5H6M7.008S\");\n         assertEquals(new Period(2, 0, 0, 0, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard6() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"PT5H6M7.008S\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"PT5H6M7.008S\");\n         assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 8), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard7() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"P1Y2M3W4D\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"P1Y2M3W4D\");\n         assertEquals(new Period(1, 2, 3, 4, 0, 0, 0, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard8() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"PT5H6M7S\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"PT5H6M7S\");\n         assertEquals(new Period(0, 0, 0, 0, 5, 6, 7, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard9() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"PT0S\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"PT0S\");\n         assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard10() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"P0D\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"P0D\");\n         assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard11() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"P0Y\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        Period p = parser.parsePeriod(\"P0Y\");\n         assertEquals(new Period(0, 0, 0, 0, 0, 0, 0, 0), p);\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandardFail1() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        try {\n-            parser.parsePeriod(PeriodType.standard(), \"P1Y2S\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        try {\n+            parser.parsePeriod(\"P1Y2S\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandardFail2() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        try {\n-            parser.parsePeriod(PeriodType.standard(), \"PS\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        try {\n+            parser.parsePeriod(\"PS\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandardFail3() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        try {\n-            parser.parsePeriod(PeriodType.standard(), \"PTS\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        try {\n+            parser.parsePeriod(\"PTS\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n \n     //-----------------------------------------------------------------------\n     public void testParseStandardFail4() {\n-        PeriodParser parser = ISOPeriodFormat.getInstance().standard();\n-        try {\n-            parser.parsePeriod(PeriodType.standard(), \"PXS\");\n+        PeriodFormatter parser = ISOPeriodFormat.getInstance().standard();\n+        try {\n+            parser.parsePeriod(\"PXS\");\n             fail();\n         } catch (IllegalArgumentException ex) {}\n     }\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatParsing.java\n \n     //-----------------------------------------------------------------------\n     public void testParseStandard1() {\n-        PeriodParser parser = PeriodFormat.getInstance().getDefault();\n-        Period p = parser.parsePeriod(PeriodType.standard(), \"6 years, 3 months and 2 days\");\n+        PeriodFormatter parser = PeriodFormat.getInstance().getDefault();\n+        Period p = parser.parsePeriod(\"6 years, 3 months and 2 days\");\n         assertEquals(new Period(6, 3, 0, 2, 0, 0, 0, 0), p);\n     }\n \n--- /dev/null\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatter.java\n+/*\n+ *  Copyright 2001-2005 Stephen Colebourne\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.joda.time.format;\n+\n+import java.io.CharArrayWriter;\n+import java.util.Locale;\n+import java.util.TimeZone;\n+\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+import org.joda.time.Chronology;\n+import org.joda.time.DateTimeConstants;\n+import org.joda.time.DateTimeUtils;\n+import org.joda.time.DateTimeZone;\n+import org.joda.time.MutablePeriod;\n+import org.joda.time.Period;\n+import org.joda.time.PeriodType;\n+\n+/**\n+ * This class is a Junit unit test for Period Formating.\n+ *\n+ * @author Stephen Colebourne\n+ */\n+public class TestPeriodFormatter extends TestCase {\n+\n+    private static final DateTimeZone UTC = DateTimeZone.UTC;\n+    private static final DateTimeZone PARIS = DateTimeZone.forID(\"Europe/Paris\");\n+    private static final DateTimeZone LONDON = DateTimeZone.forID(\"Europe/London\");\n+    private static final DateTimeZone TOKYO = DateTimeZone.forID(\"Asia/Tokyo\");\n+    private static final DateTimeZone NEWYORK = DateTimeZone.forID(\"America/New_York\");\n+    private static final Chronology ISO_UTC = Chronology.getISOUTC();\n+    private static final Chronology ISO_PARIS = Chronology.getISO(PARIS);\n+    private static final Chronology BUDDHIST_PARIS = Chronology.getBuddhist(PARIS);\n+\n+    long y2002days = 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + \n+                     366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + \n+                     365 + 365 + 366 + 365 + 365 + 365 + 366 + 365 + 365 + 365 +\n+                     366 + 365;\n+    // 2002-06-09\n+    private long TEST_TIME_NOW =\n+            (y2002days + 31L + 28L + 31L + 30L + 31L + 9L -1L) * DateTimeConstants.MILLIS_PER_DAY;\n+\n+    private DateTimeZone originalDateTimeZone = null;\n+    private TimeZone originalTimeZone = null;\n+    private Locale originalLocale = null;\n+    private PeriodFormatter f = null;\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(suite());\n+    }\n+\n+    public static TestSuite suite() {\n+        return new TestSuite(TestPeriodFormatter.class);\n+    }\n+\n+    public TestPeriodFormatter(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        DateTimeUtils.setCurrentMillisFixed(TEST_TIME_NOW);\n+        originalDateTimeZone = DateTimeZone.getDefault();\n+        originalTimeZone = TimeZone.getDefault();\n+        originalLocale = Locale.getDefault();\n+        DateTimeZone.setDefault(LONDON);\n+        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/London\"));\n+        Locale.setDefault(Locale.UK);\n+        f = ISOPeriodFormat.getInstance().standard();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        DateTimeUtils.setCurrentMillisSystem();\n+        DateTimeZone.setDefault(originalDateTimeZone);\n+        TimeZone.setDefault(originalTimeZone);\n+        Locale.setDefault(originalLocale);\n+        originalDateTimeZone = null;\n+        originalTimeZone = null;\n+        originalLocale = null;\n+        f = null;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_simple() {\n+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", f.print(p));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_bufferMethods() throws Exception {\n+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        StringBuffer buf = new StringBuffer();\n+        f.printTo(buf, p);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", buf.toString());\n+        \n+        buf = new StringBuffer();\n+        try {\n+            f.printTo(buf, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testPrint_writerMethods() throws Exception {\n+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        CharArrayWriter out = new CharArrayWriter();\n+        f.printTo(out, p);\n+        assertEquals(\"P1Y2M3W4DT5H6M7.008S\", out.toString());\n+        \n+        out = new CharArrayWriter();\n+        try {\n+            f.printTo(out, null);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testWithGetLocaleMethods() {\n+        PeriodFormatter f2 = f.withLocale(Locale.FRENCH);\n+        assertEquals(Locale.FRENCH, f2.getLocale());\n+        assertSame(f2, f2.withLocale(Locale.FRENCH));\n+        \n+        f2 = f.withLocale(null);\n+        assertEquals(null, f2.getLocale());\n+        assertSame(f2, f2.withLocale(null));\n+    }\n+\n+    public void testWithGetParseTypeMethods() {\n+        PeriodFormatter f2 = f.withParseType(PeriodType.dayTime());\n+        assertEquals(PeriodType.dayTime(), f2.getParseType());\n+        assertSame(f2, f2.withParseType(PeriodType.dayTime()));\n+        \n+        f2 = f.withParseType(null);\n+        assertEquals(null, f2.getParseType());\n+        assertSame(f2, f2.withParseType(null));\n+    }\n+\n+    public void testPrinterParserMethods() {\n+        Period p = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        PeriodFormatter f2 = new PeriodFormatter(f.getPrinter(), f.getParser());\n+        assertEquals(f.getPrinter(), f2.getPrinter());\n+        assertEquals(f.getParser(), f2.getParser());\n+        assertEquals(true, f2.isPrinter());\n+        assertEquals(true, f2.isParser());\n+        assertNotNull(f2.print(p));\n+        assertNotNull(f2.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+        \n+        f2 = new PeriodFormatter(f.getPrinter(), null);\n+        assertEquals(f.getPrinter(), f2.getPrinter());\n+        assertEquals(null, f2.getParser());\n+        assertEquals(true, f2.isPrinter());\n+        assertEquals(false, f2.isParser());\n+        assertNotNull(f2.print(p));\n+        try {\n+            assertNotNull(f2.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        \n+        f2 = new PeriodFormatter(null, f.getParser());\n+        assertEquals(null, f2.getPrinter());\n+        assertEquals(f.getParser(), f2.getParser());\n+        assertEquals(false, f2.isPrinter());\n+        assertEquals(true, f2.isParser());\n+        try {\n+            f2.print(p);\n+            fail();\n+        } catch (UnsupportedOperationException ex) {}\n+        assertNotNull(f2.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParsePeriod_simple() {\n+        Period expect = new Period(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(expect, f.parsePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+        \n+        try {\n+            f.parsePeriod(\"ABC\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    public void testParsePeriod_parseType() {\n+        Period expect = new Period(0, 0, 0, 4, 5, 6, 7, 8, PeriodType.dayTime());\n+        assertEquals(expect, f.withParseType(PeriodType.dayTime()).parsePeriod(\"P4DT5H6M7.008S\"));\n+        try {\n+            f.withParseType(PeriodType.dayTime()).parsePeriod(\"P3W4DT5H6M7.008S\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseMutablePeriod_simple() {\n+        MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        assertEquals(expect, f.parseMutablePeriod(\"P1Y2M3W4DT5H6M7.008S\"));\n+        \n+        try {\n+            f.parseMutablePeriod(\"ABC\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testParseInto_simple() {\n+        MutablePeriod expect = new MutablePeriod(1, 2, 3, 4, 5, 6, 7, 8);\n+        MutablePeriod result = new MutablePeriod();\n+        assertEquals(20, f.parseInto(result, \"P1Y2M3W4DT5H6M7.008S\", 0));\n+        assertEquals(expect, result);\n+        \n+        try {\n+            f.parseInto(null, \"P1Y2M3W4DT5H6M7.008S\", 0);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        \n+        assertEquals(~0, f.parseInto(result, \"ABC\", 0));\n+    }\n+\n+}\n--- a/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n+++ b/JodaTime/src/test/org/joda/time/format/TestPeriodFormatterBuilder.java\n     public void testFormatYears() {\n         PeriodFormatter f = builder.appendYears().toFormatter();\n         assertEquals(\"1\", f.print(PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatMonths() {\n         PeriodFormatter f = builder.appendMonths().toFormatter();\n         assertEquals(\"2\", f.print(PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatWeeks() {\n         PeriodFormatter f = builder.appendWeeks().toFormatter();\n         assertEquals(\"3\", f.print(PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatDays() {\n         PeriodFormatter f = builder.appendDays().toFormatter();\n         assertEquals(\"4\", f.print(PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatHours() {\n         PeriodFormatter f = builder.appendHours().toFormatter();\n         assertEquals(\"5\", f.print(PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatMinutes() {\n         PeriodFormatter f = builder.appendMinutes().toFormatter();\n         assertEquals(\"6\", f.print(PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSeconds() {\n         PeriodFormatter f = builder.appendSeconds().toFormatter();\n         assertEquals(\"7\", f.print(PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSecondsWithMillis() {\n         PeriodFormatter f = builder.appendSecondsWithMillis().toFormatter();\n         Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n         assertEquals(\"7.000\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n         assertEquals(\"7.001\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n         assertEquals(\"7.999\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n         assertEquals(\"8.000\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n         assertEquals(\"8.001\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n         assertEquals(\"6.999\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n         assertEquals(\"-6.999\", f.print(p));\n-        assertEquals(6, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n         assertEquals(\"-7.001\", f.print(p));\n-        assertEquals(6, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSecondsWithOptionalMillis() {\n         PeriodFormatter f = builder.appendSecondsWithOptionalMillis().toFormatter();\n         Period p = new Period(0, 0, 0, 0, 0, 0, 7, 0);\n         assertEquals(\"7\", f.print(p));\n-        assertEquals(1, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1);\n         assertEquals(\"7.001\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 999);\n         assertEquals(\"7.999\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1000);\n         assertEquals(\"8\", f.print(p));\n-        assertEquals(1, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, 1001);\n         assertEquals(\"8.001\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, 7, -1);\n         assertEquals(\"6.999\", f.print(p));\n-        assertEquals(5, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, -7, 1);\n         assertEquals(\"-6.999\", f.print(p));\n-        assertEquals(6, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n         \n         p = new Period(0, 0, 0, 0, 0, 0, -7, -1);\n         assertEquals(\"-7.001\", f.print(p));\n-        assertEquals(6, f.calculatePrintedLength(p));\n-        assertEquals(1, f.countFieldsToPrint(p));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(p, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(p, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatMillis() {\n         PeriodFormatter f = builder.appendMillis().toFormatter();\n         assertEquals(\"8\", f.print(PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatMillis3Digit() {\n         PeriodFormatter f = builder.appendMillis3Digit().toFormatter();\n         assertEquals(\"008\", f.print(PERIOD));\n-        assertEquals(3, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatPrefixSimple1() {\n         PeriodFormatter f = builder.appendPrefix(\"Years:\").appendYears().toFormatter();\n         assertEquals(\"Years:1\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrefixSimple2() {\n         PeriodFormatter f = builder.appendPrefix(\"Hours:\").appendHours().toFormatter();\n         assertEquals(\"Hours:5\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrefixSimple3() {\n     public void testFormatPrefixPlural1() {\n         PeriodFormatter f = builder.appendPrefix(\"Year:\", \"Years:\").appendYears().toFormatter();\n         assertEquals(\"Year:1\", f.print(PERIOD));\n-        assertEquals(6, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrefixPlural2() {\n         PeriodFormatter f = builder.appendPrefix(\"Hour:\", \"Hours:\").appendHours().toFormatter();\n         assertEquals(\"Hours:5\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrefixPlural3() {\n     public void testFormatSuffixSimple1() {\n         PeriodFormatter f = builder.appendYears().appendSuffix(\" years\").toFormatter();\n         assertEquals(\"1 years\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSuffixSimple2() {\n         PeriodFormatter f = builder.appendHours().appendSuffix(\" hours\").toFormatter();\n         assertEquals(\"5 hours\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSuffixSimple3() {\n     public void testFormatSuffixPlural1() {\n         PeriodFormatter f = builder.appendYears().appendSuffix(\" year\", \" years\").toFormatter();\n         assertEquals(\"1 year\", f.print(PERIOD));\n-        assertEquals(6, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(6, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSuffixPlural2() {\n         PeriodFormatter f = builder.appendHours().appendSuffix(\" hour\", \" hours\").toFormatter();\n         assertEquals(\"5 hours\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSuffixPlural3() {\n     public void testFormatPrefixSuffix() {\n         PeriodFormatter f = builder.appendPrefix(\"P\").appendYears().appendSuffix(\"Y\").toFormatter();\n         assertEquals(\"P1Y\", f.print(PERIOD));\n-        assertEquals(3, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatSeparatorSimple() {\n         PeriodFormatter f = builder.appendYears().appendSeparator(\"T\").appendHours().toFormatter();\n         assertEquals(\"1T5\", f.print(PERIOD));\n-        assertEquals(3, f.calculatePrintedLength(PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"5\", f.print(TIME_PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(TIME_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(TIME_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1\", f.print(DATE_PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(DATE_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSeparatorComplex() {\n             .appendMinutes().appendSeparator(\", \", \" and \")\n             .toFormatter();\n         assertEquals(\"1, 5 and 6\", f.print(PERIOD));\n-        assertEquals(10, f.calculatePrintedLength(PERIOD));\n-        assertEquals(3, f.countFieldsToPrint(PERIOD));\n+        assertEquals(10, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(3, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"5 and 6\", f.print(TIME_PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(TIME_PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(TIME_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1\", f.print(DATE_PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(DATE_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSeparatorIfFieldsAfter() {\n         PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsAfter(\"T\").appendHours().toFormatter();\n         assertEquals(\"1T5\", f.print(PERIOD));\n-        assertEquals(3, f.calculatePrintedLength(PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"T5\", f.print(TIME_PERIOD));\n-        assertEquals(2, f.calculatePrintedLength(TIME_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(TIME_PERIOD));\n+        assertEquals(2, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1\", f.print(DATE_PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(DATE_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatSeparatorIfFieldsBefore() {\n         PeriodFormatter f = builder.appendYears().appendSeparatorIfFieldsBefore(\"T\").appendHours().toFormatter();\n         assertEquals(\"1T5\", f.print(PERIOD));\n-        assertEquals(3, f.calculatePrintedLength(PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"5\", f.print(TIME_PERIOD));\n-        assertEquals(1, f.calculatePrintedLength(TIME_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(TIME_PERIOD));\n+        assertEquals(1, f.getPrinter().calculatePrintedLength(TIME_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(TIME_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1T\", f.print(DATE_PERIOD));\n-        assertEquals(2, f.calculatePrintedLength(DATE_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(DATE_PERIOD));\n+        assertEquals(2, f.getPrinter().calculatePrintedLength(DATE_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(DATE_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     //-----------------------------------------------------------------------\n     public void testFormatLiteral() {\n         PeriodFormatter f = builder.appendLiteral(\"HELLO\").toFormatter();\n         assertEquals(\"HELLO\", f.print(PERIOD));\n-        assertEquals(5, f.calculatePrintedLength(PERIOD));\n-        assertEquals(0, f.countFieldsToPrint(PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(0, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatAppendFormatter() {\n         PeriodFormatter base = builder.appendYears().appendLiteral(\"-\").toFormatter();\n         PeriodFormatter f = new PeriodFormatterBuilder().append(base).appendYears().toFormatter();\n         assertEquals(\"1-1\", f.print(PERIOD));\n-        assertEquals(3, f.calculatePrintedLength(PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatMinDigits() {\n         PeriodFormatter f = new PeriodFormatterBuilder().minimumPrintedDigits(4).appendYears().toFormatter();\n         assertEquals(\"0001\", f.print(PERIOD));\n-        assertEquals(4, f.calculatePrintedLength(PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     //-----------------------------------------------------------------------\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n-        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n         \n         // test only last instance of same field is output\n         f = new PeriodFormatterBuilder()\n                 .appendYears().appendLiteral(\"-\")\n                 .appendYears().toFormatter();\n         assertEquals(\"-0\", f.print(EMPTY_PERIOD));\n-        assertEquals(2, f.calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(2, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrintZeroRarelyLast() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"---0\", f.print(EMPTY_PERIOD));\n-        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrintZeroRarelyFirst() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"0---\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(4, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"0---\", f.print(EMPTY_PERIOD));\n-        assertEquals(4, f.calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(1, f.countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(4, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(1, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrintZeroIfSupported() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"0---0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(5, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrintZeroAlways() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"0-0-0-0\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1-0-0-4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"0-0-0-0\", f.print(EMPTY_PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n     public void testFormatPrintZeroNever() {\n                 .appendWeeks().appendLiteral(\"-\")\n                 .appendDays().toFormatter();\n         assertEquals(\"1-2-3-4\", f.print(PERIOD));\n-        assertEquals(7, f.calculatePrintedLength(PERIOD));\n-        assertEquals(4, f.countFieldsToPrint(PERIOD));\n+        assertEquals(7, f.getPrinter().calculatePrintedLength(PERIOD, null));\n+        assertEquals(4, f.getPrinter().countFieldsToPrint(PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"---\", f.print(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(3, f.calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD));\n-        assertEquals(0, f.countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_YEAR_DAY_PERIOD, null));\n+        assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"1---4\", f.print(YEAR_DAY_PERIOD));\n-        assertEquals(5, f.calculatePrintedLength(YEAR_DAY_PERIOD));\n-        assertEquals(2, f.countFieldsToPrint(YEAR_DAY_PERIOD));\n+        assertEquals(5, f.getPrinter().calculatePrintedLength(YEAR_DAY_PERIOD, null));\n+        assertEquals(2, f.getPrinter().countFieldsToPrint(YEAR_DAY_PERIOD, Integer.MAX_VALUE, null));\n         \n         assertEquals(\"---\", f.print(EMPTY_PERIOD));\n-        assertEquals(3, f.calculatePrintedLength(EMPTY_PERIOD));\n-        assertEquals(0, f.countFieldsToPrint(EMPTY_PERIOD));\n+        assertEquals(3, f.getPrinter().calculatePrintedLength(EMPTY_PERIOD, null));\n+        assertEquals(0, f.getPrinter().countFieldsToPrint(EMPTY_PERIOD, Integer.MAX_VALUE, null));\n     }\n \n }", "timestamp": 1108337634, "metainfo": ""}