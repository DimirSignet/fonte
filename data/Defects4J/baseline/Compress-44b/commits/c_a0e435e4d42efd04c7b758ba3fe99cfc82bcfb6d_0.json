{"sha": "a0e435e4d42efd04c7b758ba3fe99cfc82bcfb6d", "log": "Always use blocks for conditional statements  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n      * @return the number of bytes needed to pad the header (0,1,2,3)\n      */\n     public int getHeaderPadCount(){\n-        if (this.alignmentBoundary == 0) return 0;\n+        if (this.alignmentBoundary == 0) { return 0; }\n         int size = this.headerSize+this.name.length()+1; // Name has terminating null\n         int remain = size % this.alignmentBoundary;\n         if (remain > 0){\n      * @return the number of bytes needed to pad the data (0,1,2,3)\n      */\n     public int getDataPadCount(){\n-        if (this.alignmentBoundary == 0) return 0;\n+        if (this.alignmentBoundary == 0) { return 0; }\n         long size = this.filesize;\n         int remain = (int) (size % this.alignmentBoundary);\n         if (remain > 0){\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n      */\n     private int evaluateType(byte[] header) {\n         final ByteBuffer magic = ByteBuffer.wrap(header, MAGIC_OFFSET, MAGICLEN);\n-        if (magic.compareTo(ByteBuffer.wrap(MAGIC_GNU.getBytes())) == 0)\n+        if (magic.compareTo(ByteBuffer.wrap(MAGIC_GNU.getBytes())) == 0) {\n             return FORMAT_OLDGNU;\n-        if (magic.compareTo(ByteBuffer.wrap(MAGIC_POSIX.getBytes())) == 0)\n+        }\n+        if (magic.compareTo(ByteBuffer.wrap(MAGIC_POSIX.getBytes())) == 0) {\n             return FORMAT_POSIX;\n+        }\n         return 0;\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n     private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR =\n         new Comparator<ZipArchiveEntry>() {\n         public int compare(ZipArchiveEntry e1, ZipArchiveEntry e2) {\n-            if (e1 == e2)\n+            if (e1 == e2) {\n                 return 0;\n+            }\n \n             OffsetEntry off1 = entries.get(e1);\n             OffsetEntry off2 = entries.get(e2);\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n         int nInUseShadow = 0;\n \n         for (int i = 0; i < 256; i++) {\n-            if (inUse[i])\n+            if (inUse[i]) {\n                 seqToUnseq[nInUseShadow++] = (byte) i;\n+            }\n         }\n \n         this.nInUse = nInUseShadow;\n         int magic0 = this.in.read();\n         int magic1 = this.in.read();\n         int magic2 = this.in.read();\n-        if (magic0 == -1 && !isFirstStream)\n+        if (magic0 == -1 && !isFirstStream) {\n             return false;\n-\n-        if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h')\n+        }\n+\n+        if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h') {\n             throw new IOException(isFirstStream\n                     ? \"Stream is not in the BZip2 format\"\n                     : \"Garbage after a valid BZip2 stream\");\n+        }\n \n         int blockSize = this.in.read();\n         if ((blockSize < '1') || (blockSize > '9')) {\n \n             // If isn't end of stream magic, break out of the loop.\n             if (magic0 != 0x17 || magic1 != 0x72 || magic2 != 0x45\n-                    || magic3 != 0x38 || magic4 != 0x50 || magic5 != 0x90)\n+                    || magic3 != 0x38 || magic4 != 0x50 || magic5 != 0x90) {\n                 break;\n+            }\n \n             // End of stream was reached. Check the combined CRC and\n             // advance to the next .bz2 stream if decoding concatenated\n             // streams.\n-            if (complete())\n+            if (complete()) {\n                 return;\n+            }\n         }\n \n         if (magic0 != 0x31 || // '1'\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n             c1 = c2;\n         }\n \n-        for (int i = 1; i <= 65536; i++)\n+        for (int i = 1; i <= 65536; i++) {\n             ftab[i] += ftab[i - 1];\n+        }\n \n         c1 = block[1] & 0xff;\n         for (int i = 0; i < lastShadow; i++) {\n                 }\n             }\n \n-            for (int j = 256; --j >= 0;)\n+            for (int j = 256; --j >= 0;) {\n                 ftab[(j << 8) + ss] |= SETMASK;\n+            }\n \n             // Step 3:\n             /*\n         final byte[] block = this.data.block;\n         final int lastShadow = this.last;\n \n-        for (int i = 256; --i >= 0;)\n+        for (int i = 256; --i >= 0;) {\n             inUse[i] = false;\n+        }\n \n         int rNToGo = 0;\n         int rTPos = 0;\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n      * @return  true if signature matches the .xz magic bytes, false otherwise\n      */\n     public static boolean matches(byte[] signature, int length) {\n-        if (length < XZ.HEADER_MAGIC.length)\n+        if (length < XZ.HEADER_MAGIC.length) {\n             return false;\n+        }\n \n-        for (int i = 0; i < XZ.HEADER_MAGIC.length; ++i)\n-            if (signature[i] != XZ.HEADER_MAGIC[i])\n+        for (int i = 0; i < XZ.HEADER_MAGIC.length; ++i) {\n+            if (signature[i] != XZ.HEADER_MAGIC[i]) {\n                 return false;\n+            }\n+        }\n \n         return true;\n     }\n     public XZCompressorInputStream(InputStream inputStream,\n                                    boolean decompressConcatenated)\n             throws IOException {\n-        if (decompressConcatenated)\n+        if (decompressConcatenated) {\n             in = new XZInputStream(inputStream);\n-        else\n+        } else {\n             in = new SingleXZInputStream(inputStream);\n+        }\n     }\n \n     /** {@inheritDoc} */", "timestamp": 1333191587, "metainfo": ""}