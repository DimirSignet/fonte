{"sha": "6106e8dac1f5df7391b124ee33abe8c4989ff789", "log": "use skip for more efficient draining of archive entries  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n import org.apache.commons.compress.archivers.ArchiveInputStream;\n import org.apache.commons.compress.utils.BoundedInputStream;\n import org.apache.commons.compress.utils.CRC32VerifyingInputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * Implements the \"arj\" archive format as an InputStream.\n     @Override\n     public ArjArchiveEntry getNextEntry() throws IOException {\n         if (currentInputStream != null) {\n-            while (currentInputStream.read() >= 0) { // NOPMD\n-                // drain current input\n-            }\n+            // return value ignored as IOUtils.skip ensures the stream is drained completely\n+            IOUtils.skip(currentInputStream, Long.MAX_VALUE);\n+            currentInputStream.close();\n             currentLocalFileHeader = null;\n             currentInputStream = null;\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n      *             occurred\n      */\n     private void closeEntry() throws IOException {\n-        ensureOpen();\n-        while (read(this.tmpbuf, 0, this.tmpbuf.length) != -1) { // NOPMD\n+        // the skip implementation of this class will not skip more\n+        // than Integer.MAX_VALUE bytes\n+        while (skip((long) Integer.MAX_VALUE) == Integer.MAX_VALUE) { // NOPMD\n             // do nothing\n         }\n-\n-        this.entryEOF = true;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n import org.apache.commons.compress.utils.BoundedInputStream;\n import org.apache.commons.compress.utils.CRC32VerifyingInputStream;\n import org.apache.commons.compress.utils.CharsetNames;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * Reads a 7z file, using RandomAccessFile under\n public class SevenZFile implements Closeable {\n     static final int SIGNATURE_HEADER_SIZE = 32;\n \n-    private static final int DRAIN_BUF_SIZE = 64 * 1024;\n-\n     private RandomAccessFile file;\n     private final Archive archive;\n     private int currentEntryIndex = -1;\n     \n     private void drainPreviousEntry() throws IOException {\n         if (currentEntryInputStream != null) {\n-            final byte[] buffer = new byte[DRAIN_BUF_SIZE];\n-            while (currentEntryInputStream.read(buffer) >= 0) { // NOPMD\n-            }\n+            // return value ignored as IOUtils.skip ensures the stream is drained completely\n+            IOUtils.skip(currentEntryInputStream, Long.MAX_VALUE);\n             currentEntryInputStream.close();\n             currentEntryInputStream = null;\n         }", "timestamp": 1388607835, "metainfo": ""}