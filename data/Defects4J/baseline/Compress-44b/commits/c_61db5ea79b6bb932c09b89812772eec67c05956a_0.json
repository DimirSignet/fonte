{"sha": "61db5ea79b6bb932c09b89812772eec67c05956a", "log": "Changes to allow byte-for-byte replication of Zip entries  Two small changes required in order to do this are: - Read general purpose bit as raw flag - Support for reading versions made by and required This is for a general purpose library for doing deltas on JARs using a merkletree mechanism.  Closes https://github.com/apache/commons-compress/pull/6", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n     private long size = SIZE_UNKNOWN;\n \n     private int internalAttributes = 0;\n+    private int versionRequired;\n+    private int versionMadeBy;\n     private int platform = PLATFORM_FAT;\n+    private int rawFlag;\n     private long externalAttributes = 0;\n     private ZipExtraField[] extraFields;\n     private UnparseableExtraFieldData unparseableExtra = null;\n                              other.getLocalFileDataExtra())\n             && gpb.equals(other.gpb);\n     }\n+\n+    public void setVersionMadeBy(int versionMadeBy) {\n+        this.versionMadeBy = versionMadeBy;\n+    }\n+\n+    public void setVersionRequired(int versionRequired) {\n+        this.versionRequired = versionRequired;\n+    }\n+\n+    public int getVersionRequired() {\n+        return versionRequired;\n+    }\n+\n+    public int getVersionMadeBy() {\n+        return versionMadeBy;\n+    }\n+\n+    public int getRawFlag() {\n+        return rawFlag;\n+    }\n+\n+    public void setRawFlag(int rawFlag) {\n+        this.rawFlag = rawFlag;\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n \n         int versionMadeBy = ZipShort.getValue(CFH_BUF, off);\n         off += SHORT;\n+        ze.setVersionMadeBy(versionMadeBy);\n         ze.setPlatform((versionMadeBy >> BYTE_SHIFT) & NIBLET_MASK);\n \n-        off += SHORT; // skip version info\n+        ze.setVersionRequired(ZipShort.getValue(CFH_BUF, off));\n+        off += SHORT; // version required\n \n         final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(CFH_BUF, off);\n         final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();\n         final ZipEncoding entryEncoding =\n             hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;\n         ze.setGeneralPurposeBit(gpFlag);\n+        ze.setRawFlag(ZipShort.getValue(CFH_BUF, off));\n \n         off += SHORT;\n \n+        //noinspection MagicConstant\n         ze.setMethod(ZipShort.getValue(CFH_BUF, off));\n         off += SHORT;\n ", "timestamp": 1453895913, "metainfo": ""}