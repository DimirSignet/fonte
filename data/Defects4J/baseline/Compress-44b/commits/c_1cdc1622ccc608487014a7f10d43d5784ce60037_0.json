{"sha": "1cdc1622ccc608487014a7f10d43d5784ce60037", "log": "avoid copying data", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/XXHash32.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/XXHash32.java\n         if (pos > 0) {\n             final int size = BUF_SIZE - pos;\n             System.arraycopy(b, off, buffer, pos, size);\n-            process();\n+            process(buffer, 0);\n             off += size;\n         }\n \n         final int limit = end - BUF_SIZE;\n         while (off <= limit) {\n-            System.arraycopy(b, off, buffer, 0, BUF_SIZE);\n-            process();\n+            process(b, off);\n             off += BUF_SIZE;\n         }\n \n         int idx = 0;\n         final int limit = pos - 4;\n         for (; idx <= limit; idx += 4) {\n-            hash = rotateLeft(hash + getInt(idx) * PRIME3, 17) * PRIME4;\n+            hash = rotateLeft(hash + getInt(buffer, idx) * PRIME3, 17) * PRIME4;\n         }\n         while (idx < pos) {\n             hash = rotateLeft(hash + (buffer[idx++] & 0xff) * PRIME5, 11) * PRIME1;\n         return hash & 0xffffffffl;\n     }\n \n-    private int getInt(int idx) {\n+    private static int getInt(byte[] buffer, int idx) {\n         return (int) (fromLittleEndian(buffer, idx, 4) & 0xffffffffl);\n     }\n \n         state[3] = seed - PRIME1;\n     }\n \n-    private void process() {\n+    private void process(byte[] b, int offset) {\n         // local shadows for performance\n         int s0 = state[0];\n         int s1 = state[1];\n         int s2 = state[2];\n         int s3 = state[3];\n \n-        s0 = rotateLeft(s0 + getInt(0) * PRIME2, ROTATE_BITS) * PRIME1;\n-        s1 = rotateLeft(s1 + getInt(4) * PRIME2, ROTATE_BITS) * PRIME1;\n-        s2 = rotateLeft(s2 + getInt(8) * PRIME2, ROTATE_BITS) * PRIME1;\n-        s3 = rotateLeft(s3 + getInt(12) * PRIME2, ROTATE_BITS) * PRIME1;\n+        s0 = rotateLeft(s0 + getInt(b, offset) * PRIME2, ROTATE_BITS) * PRIME1;\n+        s1 = rotateLeft(s1 + getInt(b, offset + 4) * PRIME2, ROTATE_BITS) * PRIME1;\n+        s2 = rotateLeft(s2 + getInt(b, offset + 8) * PRIME2, ROTATE_BITS) * PRIME1;\n+        s3 = rotateLeft(s3 + getInt(b, offset + 12) * PRIME2, ROTATE_BITS) * PRIME1;\n \n         state[0] = s0;\n         state[1] = s1;", "timestamp": 1488036830, "metainfo": ""}