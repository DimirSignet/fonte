{"sha": "38e8adde8408611976ea76a3aeed9479cf0275a8", "log": "clean up ARJ header parsing, addrss PMD issues  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n                     if (tais != null) {\n                         try {\n                             tais.close();\n-                        } catch (IOException ignored) {\n+                        } catch (IOException ignored) { // NOPMD\n                             // ignored\n                         }\n                     }\n--- a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.DataInputStream;\n-import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.ArrayList;\n     }\n     \n     @Override\n-    public void close() {\n-        try {\n-            in.close();\n-        } catch (IOException ignored) {\n-        }\n+    public void close() throws IOException {\n+        in.close();\n     }\n \n     private static void debug(final String message) {\n         mainHeader.encryptionVersion = firstHeader.readUnsignedByte();\n         mainHeader.lastChapter = firstHeader.readUnsignedByte();\n         \n-        try {\n+        if (firstHeaderSize >= 33) {\n             mainHeader.arjProtectionFactor = firstHeader.readUnsignedByte();\n             mainHeader.arjFlags2 = firstHeader.readUnsignedByte();\n             firstHeader.readUnsignedByte();\n             firstHeader.readUnsignedByte();\n-        } catch (EOFException eof) {\n-        }\n-        \n+        }\n+\n         mainHeader.name = readString(basicHeader);\n         mainHeader.comment = readString(basicHeader);\n         \n         localFileHeader.firstChapter = firstHeader.readUnsignedByte();\n         localFileHeader.lastChapter = firstHeader.readUnsignedByte();\n         \n-        try {\n-            localFileHeader.extendedFilePosition = read32(firstHeader);\n-            localFileHeader.dateTimeAccessed = read32(firstHeader);\n-            localFileHeader.dateTimeCreated = read32(firstHeader);\n-            localFileHeader.originalSizeEvenForVolumes = read32(firstHeader);\n-            pushedBackBytes(16);\n-        } catch (EOFException eof) {\n-        }\n-        \n+        readExtraData(firstHeaderSize, firstHeader, localFileHeader);\n+\n         localFileHeader.name = readString(basicHeader);\n         localFileHeader.comment = readString(basicHeader);\n \n         return localFileHeader;\n     }\n     \n+    private void readExtraData(int firstHeaderSize, DataInputStream firstHeader,\n+                               LocalFileHeader localFileHeader) throws IOException {\n+        if (firstHeaderSize >= 33) {\n+            localFileHeader.extendedFilePosition = read32(firstHeader);\n+            if (firstHeaderSize >= 45) {\n+                localFileHeader.dateTimeAccessed = read32(firstHeader);\n+                localFileHeader.dateTimeCreated = read32(firstHeader);\n+                localFileHeader.originalSizeEvenForVolumes = read32(firstHeader);\n+                pushedBackBytes(12);\n+            }\n+            pushedBackBytes(4);\n+        }\n+    }\n+\n     /**\n      * Checks if the signature matches what is expected for an arj file.\n      *\n     @Override\n     public ArjArchiveEntry getNextEntry() throws IOException {\n         if (currentInputStream != null) {\n-            while (currentInputStream.read() >= 0) {\n+            while (currentInputStream.read() >= 0) { // NOPMD\n+                // drain current input\n             }\n             currentLocalFileHeader = null;\n             currentInputStream = null;\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n     }\n \n     private void readToNull(DataInputStream inData) throws IOException {\n-        while (inData.readUnsignedByte() != 0x00) {}\n+        while (inData.readUnsignedByte() != 0x00) { // NOPMD\n+        }\n     }\n \n     @Override", "timestamp": 1381749000, "metainfo": ""}