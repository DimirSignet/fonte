{"sha": "a1379c0992a46bb48a4a05ad6979cd04c4474984", "log": "ArjArchiveInputStream#canReadEntryData wasn't checking the entry it was supposed to check  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveEntry.java\n         return getHostOs() == HostOs.UNIX || getHostOs() == HostOs.NEXT;\n     }\n \n+    int getMethod() {\n+        return localFileHeader.method;\n+    }\n+\n     /**\n      * The known values for HostOs.\n      */\n--- a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n             return null;\n         }\n     }\n-    \n+\n     @Override\n     public boolean canReadEntryData(ArchiveEntry ae) {\n-        return currentLocalFileHeader.method == LocalFileHeader.Methods.STORED;\n-    }\n-    \n+        return ae instanceof ArjArchiveEntry\n+            && ((ArjArchiveEntry) ae).getMethod() == LocalFileHeader.Methods.STORED;\n+    }\n+\n     @Override\n     public int read(final byte[] b, final int off, final int len) throws IOException {\n         if (currentLocalFileHeader == null) {", "timestamp": 1397378311, "metainfo": ""}