{"sha": "e3e137df87f35b4249133478b77c4222f8e530a8", "log": "COMPRESS-391 implement padding as ZipExtraField class", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n         register(X0016_CertificateIdForCentralDirectory.class);\n         register(X0017_StrongEncryptionHeader.class);\n         register(X0019_EncryptionRecipientCertificateList.class);\n+        register(PaddingExtraField.class);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/PaddingExtraField.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.util.zip.ZipException;\n+\n+/**\n+ * An extra field who's sole purpose is to pad the local file header\n+ * so that the entry's data starts at a certain position.\n+ *\n+ * <p>The actual content of the padding is ignored and not retained\n+ * when reading a padding field.</p>\n+ *\n+ * @since 1.14\n+ */\n+public class PaddingExtraField implements ZipExtraField {\n+\n+    /**\n+     * Extra field id used for padding (there is no special value documented,\n+     * therefore USHORT_MAX seems to be good choice).\n+     */\n+    private static final ZipShort ID = new ZipShort(0xffff);\n+\n+    private int len = 0;\n+\n+    public PaddingExtraField() {\n+    }\n+\n+    public PaddingExtraField(int len) {\n+        this.len = len;\n+    }\n+\n+    @Override\n+    public ZipShort getHeaderId() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public ZipShort getLocalFileDataLength() {\n+        return new ZipShort(len);\n+    }\n+\n+    @Override\n+    public ZipShort getCentralDirectoryLength() {\n+        return ZipShort.ZERO;\n+    }\n+\n+    @Override\n+    public byte[] getLocalFileDataData() {\n+        return new byte[len];\n+    }\n+\n+    @Override\n+    public byte[] getCentralDirectoryData() {\n+        return new byte[0];\n+    }\n+\n+    @Override\n+    public void parseFromLocalFileData(byte[] buffer, int offset, int length) {\n+        len = length;\n+    }\n+\n+    @Override\n+    public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) {\n+    }\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n      *      requested alignment, 0 for default.\n      */\n     public void setAlignment(int alignment) {\n-        if ((alignment & (alignment - 1)) != 0) {\n-            throw new IllegalArgumentException(\"Invalid value for alignment, must be power of two: \" + alignment);\n+        if ((alignment & (alignment - 1)) != 0 || alignment > 0xffff) {\n+            throw new IllegalArgumentException(\"Invalid value for alignment, must be power of two and no bigger than \"\n+                + 0xffff + \" but is \" + alignment);\n         }\n         this.alignment = alignment;\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n     public static final int EFS_FLAG = GeneralPurposeBit.UFT8_NAMES_FLAG;\n \n     /**\n-     * Size of the extra field header (id + length).\n+     * Size of an extra field field header (id + length).\n      */\n     public static final int EXTRAFIELD_HEADER_SIZE = 4;\n-\n-    /**\n-     * Extra field id used for padding (there is no special value documented,\n-     * therefore USHORT_MAX seems to be good choice).\n-     */\n-    public static final int EXTRAFIELD_PADDING_ID = 0xffff;\n \n     private static final byte[] EMPTY = new byte[0];\n \n \n     private byte[] createLocalFileHeader(final ZipArchiveEntry ze, final ByteBuffer name, final boolean encodable,\n                                          final boolean phased, long archiveOffset) throws IOException {\n-        final byte[] extra = ze.getLocalFileDataExtra();\n+        byte[] extra = ze.getLocalFileDataExtra();\n         final int nameLen = name.limit() - name.position();\n         int len= LFH_FILENAME_OFFSET + nameLen + extra.length;\n-        int padding = 0;\n         int alignment = ze.getAlignment();\n         if (alignment > 1 && ((archiveOffset + len) & (alignment - 1)) != 0) {\n-            padding = (int) ((-archiveOffset - len - EXTRAFIELD_HEADER_SIZE) & (alignment - 1));\n-            len += EXTRAFIELD_HEADER_SIZE+padding;\n+            int padding = (int) ((-archiveOffset - len - EXTRAFIELD_HEADER_SIZE) & (alignment - 1));\n+            ze.addExtraField(new PaddingExtraField(padding));\n+            extra = ze.getLocalFileDataExtra();\n+            len += EXTRAFIELD_HEADER_SIZE + padding;\n         }\n         final byte[] buf = new byte[len];\n \n         // file name length\n         putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET);\n \n-        int totalExtra = extra.length + (padding > 0 ? padding + EXTRAFIELD_HEADER_SIZE : 0);\n-        if (totalExtra > 0xffff) {\n-            throw new IOException(\"Too much data for extra fields and padding\"+\n-                            \", extra=\"+extra.length+\n-                            \", padding=\"+padding);\n-        }\n         // extra field length\n-        putShort(totalExtra, buf, LFH_EXTRA_LENGTH_OFFSET);\n+        putShort(extra.length, buf, LFH_EXTRA_LENGTH_OFFSET);\n \n         // file name\n         System.arraycopy( name.array(), name.arrayOffset(), buf, LFH_FILENAME_OFFSET, nameLen);\n \n         // extra fields\n         System.arraycopy(extra, 0, buf, LFH_FILENAME_OFFSET + nameLen, extra.length);\n-\n-        // padding\n-        if (padding > 0) {\n-            putShort(EXTRAFIELD_PADDING_ID, buf, LFH_FILENAME_OFFSET + nameLen + extra.length);\n-            putShort(padding, buf, LFH_FILENAME_OFFSET + nameLen + extra.length + 2);\n-        }\n \n         return buf;\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n  * @Immutable\n  */\n public final class ZipShort implements Cloneable, Serializable {\n+    public static final ZipShort ZERO = new ZipShort(0);\n+\n     private static final long serialVersionUID = 1L;\n \n     private final int value;\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n     /**\n      * Test too big alignment, resulting into exceeding extra field limit.\n      */\n-    @Test(expected = IOException.class)\n+    @Test(expected = IllegalArgumentException.class)\n     public void testEntryAlignmentExceed() throws Exception {\n         SeekableInMemoryByteChannel zipContent = new SeekableInMemoryByteChannel();\n         try (ZipArchiveOutputStream zipOutput = new ZipArchiveOutputStream(zipContent)) {\n             ZipArchiveEntry inflatedEntry = new ZipArchiveEntry(\"inflated.txt\");\n             inflatedEntry.setMethod(ZipEntry.STORED);\n             inflatedEntry.setAlignment(0x20000);\n-            zipOutput.putArchiveEntry(inflatedEntry);\n-            zipOutput.write(\"Hello Stored\\n\".getBytes(Charset.forName(\"UTF-8\")));\n-            zipOutput.closeArchiveEntry();\n         }\n     }\n ", "timestamp": 1494525874, "metainfo": ""}