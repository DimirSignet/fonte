{"sha": "a5720927e1d76cb920d126d8bfecd9695daed09c", "log": "COMPRESS-271 implement block dependency when writing framed lz4", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java\n         if (!finished) {\n             compressor.finish();\n             finished = true;\n+        }\n+    }\n+\n+    /**\n+     * Adds some initial data to fill the window with.\n+     *\n+     * @param data the data to fill the window with.\n+     * @param off offset of real data into the array\n+     * @param len amount of data\n+     * @throws IllegalStateException if the stream has already started to write data\n+     * @see LZ77Compressor#prefill\n+     */\n+    public void prefill(byte[] data, int off, int len) {\n+        if (len > 0) {\n+            byte[] b = Arrays.copyOfRange(data, off, off + len);\n+            compressor.prefill(b);\n+            recordLiteral(b);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n  * @NotThreadSafe\n  */\n public class FramedLZ4CompressorOutputStream extends CompressorOutputStream {\n-    /*\n-     * TODO before releasing 1.14:\n-     *\n-     * + block dependence\n-     */\n \n     private static final byte[] END_MARK = new byte[4];\n \n     private final XXHash32 contentHash = new XXHash32();\n     // used for block checksum, if requested\n     private final XXHash32 blockHash;\n+\n+    // only created if the config requires block dependency\n+    private byte[] blockDependencyBuffer;\n+    private int collectedBlockDependencyBytes;\n \n     /**\n      * The block sizes supported by the format.\n      */\n     public static class Parameters {\n         private final BlockSize blockSize;\n-        private final boolean withContentChecksum, withBlockChecksum;\n+        private final boolean withContentChecksum, withBlockChecksum, withBlockDependency;\n \n         /**\n          * The default parameters of 4M block size, enabled content\n          *\n          * <p>This matches the defaults of the lz4 command line utility.</p>\n          */\n-        public static final Parameters DEFAULT = new Parameters(BlockSize.M4, true, false);\n+        public static final Parameters DEFAULT = new Parameters(BlockSize.M4, true, false, false);\n \n         /**\n          * Sets up custom a custom block size for the LZ4 stream but\n          * @param blockSize the size of a single block.\n          */\n         public Parameters(BlockSize blockSize) {\n-            this(blockSize, true, false);\n+            this(blockSize, true, false, false);\n         }\n         /**\n          * Sets up custom parameters for the LZ4 stream.\n          * @param withBlockChecksum whether to write a block checksum.\n          * Note that block checksums are not supported by the lz4\n          * command line utility\n+         * @param withBlockDependency whether a block may depend on\n+         * the content of a previous block. Enabling this may improve\n+         * compression ratio but makes it impossible to decompress the\n+         * output in parallel.\n          */\n-        public Parameters(BlockSize blockSize, boolean withContentChecksum, boolean withBlockChecksum) {\n+        public Parameters(BlockSize blockSize, boolean withContentChecksum, boolean withBlockChecksum,\n+            boolean withBlockDependency) {\n             this.blockSize = blockSize;\n             this.withContentChecksum = withContentChecksum;\n             this.withBlockChecksum = withBlockChecksum;\n+            this.withBlockDependency = withBlockDependency;\n         }\n \n         @Override\n         public String toString() {\n             return \"LZ4 Parameters with BlockSize \" + blockSize + \", withContentChecksum \" + withContentChecksum\n-                + \", withBlockChecksum \" + withBlockChecksum;\n+                + \", withBlockChecksum \" + withBlockChecksum + \", withBlockDependency \" + withBlockDependency;\n         }\n     }\n \n         blockHash = params.withBlockChecksum ? new XXHash32() : null;\n         out.write(FramedLZ4CompressorInputStream.LZ4_SIGNATURE);\n         writeFrameDescriptor();\n+        blockDependencyBuffer = params.withBlockDependency\n+            ? new byte[BlockLZ4CompressorInputStream.WINDOW_SIZE]\n+            : null;\n     }\n \n     @Override\n     }\n \n     private void writeFrameDescriptor() throws IOException {\n-        int flags = FramedLZ4CompressorInputStream.SUPPORTED_VERSION\n-            | FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK;\n+        int flags = FramedLZ4CompressorInputStream.SUPPORTED_VERSION;\n+        if (!params.withBlockDependency) {\n+            flags |= FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK;\n+        }\n         if (params.withContentChecksum) {\n             flags |= FramedLZ4CompressorInputStream.CONTENT_CHECKSUM_MASK;\n         }\n     }\n \n     private void flushBlock() throws IOException {\n+        final boolean withBlockDependency = params.withBlockDependency;\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (OutputStream o = new BlockLZ4CompressorOutputStream(baos)) {\n+        try (BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream(baos)) {\n+            if (withBlockDependency) {\n+                o.prefill(blockDependencyBuffer, blockDependencyBuffer.length - collectedBlockDependencyBytes,\n+                    collectedBlockDependencyBytes);\n+            }\n             o.write(blockData, 0, currentIndex);\n+        }\n+        if (withBlockDependency) {\n+            appendToBlockDependencyBuffer(blockData, 0, currentIndex);\n         }\n         byte[] b = baos.toByteArray();\n         if (b.length > currentIndex) { // compression increased size, maybe beyond blocksize\n         }\n     }\n \n+    private void appendToBlockDependencyBuffer(final byte[] b, final int off, int len) {\n+        len = Math.min(len, blockDependencyBuffer.length);\n+        if (len > 0) {\n+            int keep = blockDependencyBuffer.length - len;\n+            if (keep > 0) {\n+                // move last keep bytes towards the start of the buffer\n+                System.arraycopy(blockDependencyBuffer, len, blockDependencyBuffer, 0, keep);\n+            }\n+            // append new data\n+            System.arraycopy(b, off, blockDependencyBuffer, keep, len);\n+            collectedBlockDependencyBytes = Math.min(collectedBlockDependencyBytes + len,\n+                blockDependencyBuffer.length);\n+        }\n+    }\n+\n }\n \n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n             new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M1) },\n             new Object[] { FramedLZ4CompressorOutputStream.Parameters.DEFAULT },\n             // default without content checksum\n-            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4, false, false) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4,\n+                false, false, false) },\n             // default with block checksum\n-            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4, true, true) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4,\n+                true, true, false) },\n+            // small blocksize (so we get enough blocks) and enabled block dependency, otherwise defaults\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K64,\n+                true, false, true) },\n         });\n     }\n ", "timestamp": 1486497617, "metainfo": ""}