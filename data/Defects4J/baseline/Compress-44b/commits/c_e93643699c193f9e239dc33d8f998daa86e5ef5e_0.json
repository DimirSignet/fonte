{"sha": "e93643699c193f9e239dc33d8f998daa86e5ef5e", "log": "add delta filter to 7z  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n             put(SevenZMethod.BCJ_ARM_FILTER, new BCJDecoder(new ARMOptions()));\n             put(SevenZMethod.BCJ_ARM_THUMB_FILTER, new BCJDecoder(new ARMThumbOptions()));\n             put(SevenZMethod.BCJ_SPARC_FILTER, new BCJDecoder(new SPARCOptions()));\n+            put(SevenZMethod.DELTA_FILTER, new DeltaDecoder());\n         }};\n \n     static CoderBase findByMethod(SevenZMethod method) {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.sevenz;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import org.tukaani.xz.DeltaOptions;\n+import org.tukaani.xz.FinishableWrapperOutputStream;\n+import org.tukaani.xz.UnsupportedOptionsException;\n+\n+class DeltaDecoder extends CoderBase {\n+    DeltaDecoder() {\n+        super(Number.class);\n+    }\n+\n+    @Override\n+    InputStream decode(final InputStream in, final Coder coder, byte[] password) throws IOException {\n+        return new DeltaOptions(getOptionsFromCoder(coder)).getInputStream(in);\n+    }\n+\n+    @Override\n+    OutputStream encode(final OutputStream out, final Object options) throws IOException {\n+        int distance = numberOptionOrDefault(options, 1);\n+        try {\n+            return new DeltaOptions(distance).getOutputStream(new FinishableWrapperOutputStream(out));\n+        } catch (UnsupportedOptionsException ex) {\n+            throw new IOException(ex.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    byte[] getOptionsAsProperties(Object options) {\n+        return new byte[] {\n+            (byte) (numberOptionOrDefault(options, 1) - 1)\n+        };\n+    }\n+\n+    @Override\n+    Object getOptionsFromCoder(Coder coder, InputStream in) {\n+        return getOptionsFromCoder(coder);\n+    }\n+\n+    private int getOptionsFromCoder(Coder coder) {\n+        if (coder.properties == null || coder.properties.length == 0) {\n+            return 1;\n+        }\n+        return (0xff & coder.properties[0]) + 1;\n+    }\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethod.java\n      * BCJ Sparc platform.\n      * @since 1.8\n      */\n-    BCJ_SPARC_FILTER(new byte[] { 0x03, 0x03, 0x08, 0x05 });\n+    BCJ_SPARC_FILTER(new byte[] { 0x03, 0x03, 0x08, 0x05 }),\n+    /**\n+     * Delta filter.\n+     * @since 1.8\n+     */\n+    DELTA_FILTER(new byte[] { 0x03 });\n \n     private final byte[] id;\n \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfiguration.java\n  * <tr><td>DEFLATE</td><td>Number</td><td>Compression Level - an number between 1 and 9</td></tr>\n  * <tr><td>LZMA2</td><td>Number</td><td>Dictionary Size - a number between 4096 and 768 MiB (768 &lt;&lt; 20)</td></tr>\n  * <tr><td>LZMA2</td><td>org.tukaani.xz.LZMA2Options</td><td>Whole set of LZMA2 options.</td></tr>\n+ * <tr><td>DELTA_FILTER</td><td>Number</td><td>Delta Distance - a number between 1 and 256</td></tr>\n  * </table>\n  *\n  * @Immutable\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n         }\n     }\n \n+    public void testReadingBackDeltaDistance() throws Exception {\n+        File output = new File(dir, \"delta-distance.7z\");\n+        SevenZOutputFile outArchive = new SevenZOutputFile(output);\n+        try {\n+            outArchive.setContentMethods(Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.DELTA_FILTER, 32),\n+                                                       new SevenZMethodConfiguration(SevenZMethod.LZMA2)));\n+            SevenZArchiveEntry entry = new SevenZArchiveEntry();\n+            entry.setName(\"foo.txt\");\n+            outArchive.putArchiveEntry(entry);\n+            outArchive.write(new byte[] { 'A' });\n+            outArchive.closeArchiveEntry();\n+        } finally {\n+            outArchive.close();\n+        }\n+\n+        SevenZFile archive = new SevenZFile(output);\n+        try {\n+            SevenZArchiveEntry entry = archive.getNextEntry();\n+            SevenZMethodConfiguration m = entry.getContentMethods().iterator().next();\n+            assertEquals(SevenZMethod.DELTA_FILTER, m.getMethod());\n+            assertEquals(32, m.getOptions());\n+        } finally {\n+            archive.close();\n+        }\n+    }\n+\n     private void test7zUnarchive(File f, SevenZMethod m, byte[] password) throws Exception {\n         SevenZFile sevenZFile = new SevenZFile(f, password);\n         try {\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n     }\n     */\n \n+    public void testDeltaRoundtrip() throws Exception {\n+        testFilterRoundTrip(new SevenZMethodConfiguration(SevenZMethod.DELTA_FILTER));\n+    }\n+\n     public void testStackOfContentCompressions() throws Exception {\n         output = new File(dir, \"multiple-methods.7z\");\n         ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();", "timestamp": 1393603502, "metainfo": ""}