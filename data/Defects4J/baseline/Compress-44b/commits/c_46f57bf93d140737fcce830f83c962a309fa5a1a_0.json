{"sha": "46f57bf93d140737fcce830f83c962a309fa5a1a", "log": "properly return -1 from read on EOF", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java\n+++ b/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java\n         repositionIfNecessary();\n         int wanted = buf.remaining();\n         int possible = size - position;\n+        if (possible <= 0) {\n+            return -1;\n+        }\n         if (wanted > possible) {\n             wanted = possible;\n         }\n--- a/src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java\n+++ b/src/test/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannelTest.java\n     }\n \n     @Test\n-    public void shouldReadNoDataWhenPositionAtTheEnd() throws IOException {\n+    public void shouldSignalEOFWhenPositionAtTheEnd() throws IOException {\n         //given\n         SeekableInMemoryByteChannel c = new SeekableInMemoryByteChannel(testData);\n         ByteBuffer readBuffer = ByteBuffer.allocate(testData.length);\n         int readCount = c.read(readBuffer);\n         //then\n         assertEquals(0L, readBuffer.position());\n-        assertEquals(0, readCount);\n+        assertEquals(-1, readCount);\n     }\n \n     @Test(expected = ClosedChannelException.class)", "timestamp": 1478274206, "metainfo": ""}