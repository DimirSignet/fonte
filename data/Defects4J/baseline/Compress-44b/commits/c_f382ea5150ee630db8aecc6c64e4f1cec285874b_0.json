{"sha": "f382ea5150ee630db8aecc6c64e4f1cec285874b", "log": "check name/directory/size and lastModified read from tar is consistent with what we write  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.tar.TarArchiveEntry;\n+import org.apache.commons.compress.archivers.tar.TarArchiveInputStream;\n+import org.apache.commons.compress.archivers.tar.TarArchiveOutputStream;\n import org.apache.commons.compress.utils.IOUtils;\n \n public final class TarTestCase extends AbstractTestCase {\n         out.close();\n     }\n \n+    public void testDirectoryEntryFromFile() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        TarArchiveOutputStream tos = null;\n+        TarArchiveInputStream tis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".tar\", tmp[0]);\n+            archive.deleteOnExit();\n+            tos = new TarArchiveOutputStream(new FileOutputStream(archive));\n+            long beforeArchiveWrite = tmp[0].lastModified();\n+            TarArchiveEntry in = new TarArchiveEntry(tmp[0], \"foo\");\n+            tos.putArchiveEntry(in);\n+            tos.closeArchiveEntry();\n+            tos.close();\n+            tos = null;\n+            tis = new TarArchiveInputStream(new FileInputStream(archive));\n+            TarArchiveEntry out = tis.getNextTarEntry();\n+            tis.close();\n+            tis = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo/\", out.getName());\n+            assertEquals(0, out.getSize());\n+            // TAR stores time with a granularity of 1 second\n+            assertEquals(beforeArchiveWrite / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertTrue(out.isDirectory());\n+        } finally {\n+            if (tis != null) {\n+                tis.close();\n+            }\n+            if (tos != null) {\n+                tos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testExplicitDirectoryEntry() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        TarArchiveOutputStream tos = null;\n+        TarArchiveInputStream tis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".tar\", tmp[0]);\n+            archive.deleteOnExit();\n+            tos = new TarArchiveOutputStream(new FileOutputStream(archive));\n+            long beforeArchiveWrite = tmp[0].lastModified();\n+            TarArchiveEntry in = new TarArchiveEntry(\"foo/\");\n+            in.setModTime(beforeArchiveWrite);\n+            tos.putArchiveEntry(in);\n+            tos.closeArchiveEntry();\n+            tos.close();\n+            tos = null;\n+            tis = new TarArchiveInputStream(new FileInputStream(archive));\n+            TarArchiveEntry out = tis.getNextTarEntry();\n+            tis.close();\n+            tis = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo/\", out.getName());\n+            assertEquals(0, out.getSize());\n+            assertEquals(beforeArchiveWrite / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertTrue(out.isDirectory());\n+        } finally {\n+            if (tis != null) {\n+                tis.close();\n+            }\n+            if (tos != null) {\n+                tos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testFileEntryFromFile() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        TarArchiveOutputStream tos = null;\n+        TarArchiveInputStream tis = null;\n+        FileInputStream fis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".tar\", tmp[0]);\n+            archive.deleteOnExit();\n+            tos = new TarArchiveOutputStream(new FileOutputStream(archive));\n+            TarArchiveEntry in = new TarArchiveEntry(tmp[1], \"foo\");\n+            tos.putArchiveEntry(in);\n+            byte[] b = new byte[(int) tmp[1].length()];\n+            fis = new FileInputStream(tmp[1]);\n+            int read;\n+            while ((read = fis.read(b)) > 0) {\n+                tos.write(b);\n+            }\n+            fis.close();\n+            fis = null;\n+            tos.closeArchiveEntry();\n+            tos.close();\n+            tos = null;\n+            tis = new TarArchiveInputStream(new FileInputStream(archive));\n+            TarArchiveEntry out = tis.getNextTarEntry();\n+            tis.close();\n+            tis = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo\", out.getName());\n+            assertEquals(tmp[1].length(), out.getSize());\n+            assertEquals(tmp[1].lastModified() / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertFalse(out.isDirectory());\n+        } finally {\n+            if (tis != null) {\n+                tis.close();\n+            }\n+            if (tos != null) {\n+                tos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            if (fis != null) {\n+                fis.close();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testExplicitFileEntry() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        TarArchiveOutputStream tos = null;\n+        TarArchiveInputStream tis = null;\n+        FileInputStream fis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".tar\", tmp[0]);\n+            archive.deleteOnExit();\n+            tos = new TarArchiveOutputStream(new FileOutputStream(archive));\n+            TarArchiveEntry in = new TarArchiveEntry(\"foo\");\n+            in.setModTime(tmp[1].lastModified());\n+            in.setSize(tmp[1].length());\n+            tos.putArchiveEntry(in);\n+            byte[] b = new byte[(int) tmp[1].length()];\n+            fis = new FileInputStream(tmp[1]);\n+            int read;\n+            while ((read = fis.read(b)) > 0) {\n+                tos.write(b);\n+            }\n+            fis.close();\n+            fis = null;\n+            tos.closeArchiveEntry();\n+            tos.close();\n+            tos = null;\n+            tis = new TarArchiveInputStream(new FileInputStream(archive));\n+            TarArchiveEntry out = tis.getNextTarEntry();\n+            tis.close();\n+            tis = null;\n+            assertNotNull(out);\n+            assertEquals(\"foo\", out.getName());\n+            assertEquals(tmp[1].length(), out.getSize());\n+            assertEquals(tmp[1].lastModified() / 1000,\n+                         out.getLastModifiedDate().getTime() / 1000);\n+            assertFalse(out.isDirectory());\n+        } finally {\n+            if (tis != null) {\n+                tis.close();\n+            }\n+            if (tos != null) {\n+                tos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            if (fis != null) {\n+                fis.close();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.List;\n \n import org.apache.commons.compress.AbstractTestCase;", "timestamp": 1249155132, "metainfo": ""}