{"sha": "934a96e0fb2f4aceadfd0ebbd713d43e687e4a1d", "log": "Provide access to the raw bytes that made up the ZIP entry's name.  COMPRESS-123  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n     private LinkedHashMap/*<ZipShort, ZipExtraField>*/ extraFields = null;\n     private UnparseableExtraFieldData unparseableExtra = null;\n     private String name = null;\n+    private byte[] rawName = null;\n     private GeneralPurposeBit gpb = new GeneralPurposeBit();\n \n     /**\n      */\n     protected void setName(String name) {\n         this.name = name;\n+    }\n+\n+    /**\n+     * Package private setter that sets the name using the raw bytes\n+     * and the string created from it by guessing or suing the\n+     * configured encoding.\n+     */\n+    void setName(String name, byte[] rawName) {\n+        setName(name);\n+        this.rawName = rawName;\n+    }\n+\n+    /**\n+     * Returns the raw bytes that made up the name before it has been\n+     * converted using the configured or guessed encoding.\n+     *\n+     * <p>This method will return null if this instance has not been\n+     * read from an archive.</p>\n+     *\n+     * @since Apache Commons Compress 1.2\n+     */\n+    public byte[] getRawName() {\n+        if (rawName != null) {\n+            byte[] b = new byte[rawName.length];\n+            System.arraycopy(rawName, 0, b, 0, rawName.length);\n+            return b;\n+        }\n+        return null;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n \n         byte[] fileName = new byte[fileNameLen];\n         readFully(fileName);\n-        current.setName(entryEncoding.decode(fileName));\n+        current.setName(entryEncoding.decode(fileName), fileName);\n \n         byte[] extraData = new byte[extraLen];\n         readFully(extraData);\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n \n             byte[] fileName = new byte[fileNameLen];\n             archive.readFully(fileName);\n-            ze.setName(entryEncoding.decode(fileName));\n+            ze.setName(entryEncoding.decode(fileName), fileName);\n \n             // LFH offset,\n             OffsetEntry offset = new OffsetEntry();\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n         }\n     }\n \n+    public void testRawNameReadFromZipFile()\n+        throws IOException, URISyntaxException {\n+        URL zip = getClass().getResource(\"/utf8-7zip-test.zip\");\n+        File archive = new File(new URI(zip.toString()));\n+        ZipFile zf = null;\n+        try {\n+            zf = new ZipFile(archive, CP437, false);\n+            assertRawNameOfAcsiiTxt(zf.getEntry(ASCII_TXT));\n+        } finally {\n+            ZipFile.closeQuietly(zf);\n+        }\n+    }\n+\n+    public void testRawNameReadFromStream()\n+        throws IOException, URISyntaxException {\n+        URL zip = getClass().getResource(\"/utf8-7zip-test.zip\");\n+        FileInputStream archive =\n+            new FileInputStream(new File(new URI(zip.toString())));\n+        ZipArchiveInputStream zi = null;\n+        try {\n+            zi = new ZipArchiveInputStream(archive, CP437, false);\n+            assertRawNameOfAcsiiTxt((ZipArchiveEntry) zi.getNextEntry());\n+        } finally {\n+            if (zi != null) {\n+                zi.close();\n+            }\n+        }\n+    }\n+\n     private static void testFileRoundtrip(String encoding, boolean withEFS,\n                                           boolean withExplicitUnicodeExtra)\n         throws IOException {\n \n     }\n \n+    private static void assertRawNameOfAcsiiTxt(ZipArchiveEntry ze) {\n+        byte[] b = ze.getRawName();\n+        assertNotNull(b);\n+        final int len = ASCII_TXT.length();\n+        assertEquals(len, b.length);\n+        for (int i = 0; i < len; i++) {\n+            assertEquals(\"Byte \" + i, (byte) ASCII_TXT.charAt(i), b[i]);\n+        }\n+        assertNotSame(b, ze.getRawName());\n+    }\n }\n ", "timestamp": 1311395624, "metainfo": ""}