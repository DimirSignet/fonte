{"sha": "3b81f3a94da9e26ec0458f4b5bd3a0469d8a93f7", "log": "COMPRESS-271 add LZ4 frame to CompressorStreamFactory", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;\n import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;\n import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;\n+import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;\n import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;\n import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;\n import org.apache.commons.compress.compressors.lzma.LZMAUtils;\n \n     /**\n      * Constant (value {@value}) used to identify the block LZ4\n-     * compression method. Not supported as an output stream type.\n+     * compression method.\n      *\n      * @since 1.14\n      */\n     public static final String LZ4_BLOCK = \"lz4-block\";\n+\n+    /**\n+     * Constant (value {@value}) used to identify the frame LZ4\n+     * compression method.\n+     *\n+     * @since 1.14\n+     */\n+    public static final String LZ4_FRAMED = \"lz4-framed\";\n \n     /**\n      * Constructs a new sorted map from input stream provider names to provider\n         return Z;\n     }\n \n+    public static String getLZ4Framed() {\n+        return LZ4_FRAMED;\n+    }\n+\n+    public static String getLZ4Block() {\n+        return LZ4_BLOCK;\n+    }\n+\n     static void putAll(final Set<String> names, final CompressorStreamProvider provider,\n             final TreeMap<String, CompressorStreamProvider> map) {\n         for (final String name : names) {\n                 return new LZMACompressorInputStream(in);\n             }\n \n+            if (FramedLZ4CompressorInputStream.matches(signature, signatureLength)) {\n+                return new FramedLZ4CompressorInputStream(in);\n+            }\n+\n         } catch (final IOException e) {\n             throw new CompressorException(\"Failed to detect Compressor from InputStream.\", e);\n         }\n      *            of the compressor, i.e. {@value #GZIP}, {@value #BZIP2},\n      *            {@value #XZ}, {@value #LZMA}, {@value #PACK200},\n      *            {@value #SNAPPY_RAW}, {@value #SNAPPY_FRAMED}, {@value #Z},\n-     *            {@value #LZ4_BLOCK}\n+     *            {@value #LZ4_BLOCK}, {@value #LZ4_FRAMED}\n      *            or {@value #DEFLATE}\n      * @param in\n      *            the input stream\n \n             if (LZ4_BLOCK.equalsIgnoreCase(name)) {\n                 return new BlockLZ4CompressorInputStream(in);\n+            }\n+\n+            if (LZ4_FRAMED.equalsIgnoreCase(name)) {\n+                return new FramedLZ4CompressorInputStream(in);\n             }\n \n         } catch (final IOException e) {\n \n     @Override\n     public Set<String> getInputStreamCompressorNames() {\n-        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, SNAPPY_RAW, SNAPPY_FRAMED, Z, DEFLATE, LZ4_BLOCK);\n+        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_RAW, SNAPPY_FRAMED, Z, LZ4_BLOCK,\n+            LZ4_FRAMED);\n     }\n \n     @Override\n     public Set<String> getOutputStreamCompressorNames() {\n-        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_FRAMED, LZ4_BLOCK);\n+        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_RAW, SNAPPY_FRAMED, LZ4_BLOCK);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java\n \n import static org.junit.Assert.*;\n \n+import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.InputStream;\n import java.io.IOException;\n \n import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.compressors.CompressorStreamFactory;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.Test;\n \n \n     @Test\n     public void readBlaLz4() throws IOException {\n-        try {\n         try (InputStream a = new FramedLZ4CompressorInputStream(new FileInputStream(getFile(\"bla.tar.lz4\")));\n             FileInputStream e = new FileInputStream(getFile(\"bla.tar\"))) {\n             byte[] expected = IOUtils.toByteArray(e);\n             byte[] actual = IOUtils.toByteArray(a);\n             assertArrayEquals(expected, actual);\n         }\n-        } catch (Exception ex) {\n-            ex.printStackTrace();\n+    }\n+\n+    @Test\n+    public void readBlaLz4ViaFactory() throws Exception {\n+        try (InputStream a = new CompressorStreamFactory()\n+                 .createCompressorInputStream(CompressorStreamFactory.LZ4_FRAMED,\n+                                              new FileInputStream(getFile(\"bla.tar.lz4\")));\n+            FileInputStream e = new FileInputStream(getFile(\"bla.tar\"))) {\n+            byte[] expected = IOUtils.toByteArray(e);\n+            byte[] actual = IOUtils.toByteArray(a);\n+            assertArrayEquals(expected, actual);\n         }\n     }\n+\n+    @Test\n+    public void readBlaLz4ViaFactoryAutoDetection() throws Exception {\n+        try (InputStream a = new CompressorStreamFactory()\n+                 .createCompressorInputStream(new BufferedInputStream(new FileInputStream(getFile(\"bla.tar.lz4\"))));\n+            FileInputStream e = new FileInputStream(getFile(\"bla.tar\"))) {\n+            byte[] expected = IOUtils.toByteArray(e);\n+            byte[] actual = IOUtils.toByteArray(a);\n+            assertArrayEquals(expected, actual);\n+        }\n+    }\n+\n+    @Test(expected = IOException.class)\n+    public void rejectsNonLZ4Stream() throws IOException {\n+        try (InputStream a = new FramedLZ4CompressorInputStream(new FileInputStream(getFile(\"bla.tar\")))) {\n+             fail(\"expected exception\");\n+        }\n+    }\n+\n }", "timestamp": 1485154125, "metainfo": ""}