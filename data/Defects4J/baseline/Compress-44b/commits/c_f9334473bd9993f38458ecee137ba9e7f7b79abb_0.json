{"sha": "f9334473bd9993f38458ecee137ba9e7f7b79abb", "log": "plug a few more native memory leaks  aftermaths of COMPRESS-343, inspired by #11", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java\n                         0x03)) {\n                     case ZLIB:\n \n+                        Inflater inflator = new Inflater();\n                         try {\n-                            Inflater inflator = new Inflater();\n                             inflator.setInput(compBuffer, 0, compBuffer.length);\n                             length = inflator.inflate(blockBuffer);\n \n                             if (length != blockSize) {\n                                 throw new ShortFileException();\n                             }\n-\n-                            inflator.end();\n                         } catch (DataFormatException e) {\n                             throw new DumpArchiveException(\"bad data\", e);\n+                        } finally {\n+                            inflator.end();\n                         }\n \n                         break;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n     public void close() throws IOException {\n         if (!closed) {\n             closed = true;\n-            in.close();\n-            inf.end();\n+            try {\n+                in.close();\n+            } finally {\n+                inf.end();\n+            }\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n                 return new InflaterInputStream(bis, inflater) {\n                     @Override\n                     public void close() throws IOException {\n-                        super.close();\n-                        inflater.end();\n+                        try {\n+                            super.close();\n+                        } finally {\n+                            inflater.end();\n+                        }\n                     }\n                 };\n             case BZIP2:\n--- a/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java\n     private static final int MAGIC_2d = 0xda;\n     \n     private final InputStream in;\n+    private final Inflater inflater;\n \n     /**\n      * Creates a new input stream that decompresses Deflate-compressed data\n      */\n     public DeflateCompressorInputStream(InputStream inputStream,\n                                         DeflateParameters parameters) {\n-        in = new InflaterInputStream(inputStream, new Inflater(!parameters.withZlibHeader()));\n+        inflater = new Inflater(!parameters.withZlibHeader());\n+        in = new InflaterInputStream(inputStream, inflater);\n     }\n     \n     /** {@inheritDoc} */\n     /** {@inheritDoc} */\n     @Override\n     public void close() throws IOException {\n-        in.close();\n+        try {\n+            in.close();\n+        } finally {\n+            inflater.end();\n+        }\n     }\n     \n     /**\n--- a/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream.java\n  */\n public class DeflateCompressorOutputStream extends CompressorOutputStream {\n     private final DeflaterOutputStream out;\n-   \n+    private final Deflater deflater;\n+\n     /**\n      * Creates a Deflate compressed output stream with the default parameters.\n      * @param outputStream the stream to wrap\n      */\n     public DeflateCompressorOutputStream(OutputStream outputStream,\n                                          DeflateParameters parameters) throws IOException {\n-        this.out = new DeflaterOutputStream(outputStream, new Deflater(parameters.getCompressionLevel(), !parameters.withZlibHeader()));\n+        this.deflater = new Deflater(parameters.getCompressionLevel(), !parameters.withZlibHeader());\n+        this.out = new DeflaterOutputStream(outputStream, deflater);\n     }\n \n     @Override\n \n     @Override\n     public void close() throws IOException {\n-        out.close();\n+        try {\n+            out.close();\n+        } finally {\n+            deflater.end();\n+        }\n     }\n }", "timestamp": 1458209048, "metainfo": ""}