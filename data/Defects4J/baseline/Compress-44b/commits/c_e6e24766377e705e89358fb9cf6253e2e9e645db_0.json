{"sha": "e6e24766377e705e89358fb9cf6253e2e9e645db", "log": "COMPRESS-321 X7875_NewUnix doesn't handle centra directory correctly  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X7875_NewUnix.java\n  * zip-3.0.tar.gz/proginfo/extrafld.txt\n  *\n  * <pre>\n+ * Local-header version:\n+ *\n  * Value         Size        Description\n  * -----         ----        -----------\n  * 0x7875        Short       tag for this extra block type (\"ux\")\n  * UID           Variable    UID for this entry (little endian)\n  * GIDSize       1 byte      Size of GID field\n  * GID           Variable    GID for this entry (little endian)\n+ *\n+ * Central-header version:\n+ *\n+ * Value         Size        Description\n+ * -----         ----        -----------\n+ * 0x7855        Short       tag for this extra block type (\"Ux\")\n+ * TSize         Short       total data size for this block (0)\n  * </pre>\n  * @since 1.5\n  */\n public class X7875_NewUnix implements ZipExtraField, Cloneable, Serializable {\n     private static final ZipShort HEADER_ID = new ZipShort(0x7875);\n+    private static final ZipShort ZERO = new ZipShort(0);\n     private static final BigInteger ONE_THOUSAND = BigInteger.valueOf(1000);\n     private static final long serialVersionUID = 1L;\n \n      * @return a <code>ZipShort</code> for the length of the data of this extra field\n      */\n     public ZipShort getCentralDirectoryLength() {\n-        return getLocalFileDataLength();  // No different than local version.\n+        return ZERO;\n     }\n \n     /**\n      * @return get the data\n      */\n     public byte[] getCentralDirectoryData() {\n-        return getLocalFileDataData();\n+        return new byte[0];\n     }\n \n     /**\n     }\n \n     /**\n-     * Doesn't do anything special since this class always uses the\n-     * same data in central directory and local file data.\n+     * Doesn't do anything since this class doesn't store anything\n+     * inside the central directory.\n      */\n     public void parseFromCentralDirectoryData(\n             byte[] buffer, int offset, int length\n     ) throws ZipException {\n-        reset();\n-        parseFromLocalFileData(buffer, offset, length);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X7875_NewUnixTest.java\n import java.util.zip.ZipException;\n \n import static org.apache.commons.compress.AbstractTestCase.getFile;\n+import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertTrue;\n         assertEquals(expectedUID, xf.getUID());\n         assertEquals(expectedGID, xf.getGID());\n \n-        // Initial central parse (init with garbage to avoid defaults causing test to pass).\n-        xf.setUID(54321);\n-        xf.setGID(12345);\n-        xf.parseFromCentralDirectoryData(expected, 0, expected.length);\n-        assertEquals(expectedUID, xf.getUID());\n-        assertEquals(expectedGID, xf.getGID());\n-\n         xf.setUID(uid);\n         xf.setGID(gid);\n         if (expected.length < 5) {\n         assertEquals(expectedUID, xf.getUID());\n         assertEquals(expectedGID, xf.getGID());\n \n-        // Do the same as above, but with Central Directory data:\n-        xf.setUID(uid);\n-        xf.setGID(gid);\n-        if (expected.length < 5) {\n-            // We never emit zero-length entries.\n-            assertEquals(5, xf.getCentralDirectoryLength().getValue());\n-        } else {\n-            assertEquals(expected.length, xf.getCentralDirectoryLength().getValue());\n-        }\n+        assertEquals(0, xf.getCentralDirectoryLength().getValue());\n         result = xf.getCentralDirectoryData();\n-        if (expected.length < 5) {\n-            // We never emit zero-length entries.\n-            assertTrue(Arrays.equals(new byte[]{1,1,0,1,0}, result));\n-        } else {\n-            assertTrue(Arrays.equals(expected, result));\n-        }\n+        assertArrayEquals(new byte[0], result);\n \n         // And now we re-parse:\n         xf.parseFromCentralDirectoryData(result, 0, result.length);", "timestamp": 1440270092, "metainfo": ""}