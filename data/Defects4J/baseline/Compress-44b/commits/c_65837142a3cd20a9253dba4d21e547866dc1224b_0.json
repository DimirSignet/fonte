{"sha": "65837142a3cd20a9253dba4d21e547866dc1224b", "log": "COMPRESS-201 add an additional convenience constructor to TarArchiveEntry  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n      * @param linkFlag the entry link flag.\n      */\n     public TarArchiveEntry(String name, byte linkFlag) {\n-        this(name);\n+        this(name, linkFlag, false);\n+    }\n+\n+    /**\n+     * Construct an entry with a name and a link flag.\n+     *\n+     * @param name the entry name\n+     * @param linkFlag the entry link flag.\n+     * @param preserveLeadingSlashes whether to allow leading slashes\n+     * in the name.\n+     * \n+     * @since 1.5\n+     */\n+    public TarArchiveEntry(String name, byte linkFlag, boolean preserveLeadingSlashes) {\n+        this(name, preserveLeadingSlashes);\n         this.linkFlag = linkFlag;\n         if (linkFlag == LF_GNUTYPE_LONGNAME) {\n             magic = MAGIC_GNU;\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java\n \n import org.apache.commons.compress.AbstractTestCase;\n \n-public class TarArchiveEntryTest extends TestCase {\n+public class TarArchiveEntryTest extends TestCase implements TarConstants {\n \n     private static final String OS =\n         System.getProperty(\"os.name\").toLowerCase(Locale.US);\n         t.setSize(077777777777L);\n         t.setSize(0100000000000L);\n     }\n+\n+    public void testLinkFlagConstructor() throws IOException {\n+        TarArchiveEntry t = new TarArchiveEntry(\"/foo\", LF_GNUTYPE_LONGNAME);\n+        assertGnuMagic(t);\n+        assertEquals(\"foo\", t.getName());\n+    }\n+\n+    public void testLinkFlagConstructorWithFileFlag() throws IOException {\n+        TarArchiveEntry t = new TarArchiveEntry(\"/foo\", LF_NORMAL);\n+        assertPosixMagic(t);\n+        assertEquals(\"foo\", t.getName());\n+    }\n+\n+    public void testLinkFlagConstructorWithPreserve() throws IOException {\n+        TarArchiveEntry t = new TarArchiveEntry(\"/foo\", LF_GNUTYPE_LONGNAME,\n+                                                true);\n+        assertGnuMagic(t);\n+        assertEquals(\"/foo\", t.getName());\n+    }\n+\n+    private void assertGnuMagic(TarArchiveEntry t) throws IOException {\n+        assertEquals(MAGIC_GNU + VERSION_GNU_SPACE, readMagic(t));\n+    }\n+\n+    private void assertPosixMagic(TarArchiveEntry t) throws IOException {\n+        assertEquals(MAGIC_POSIX + VERSION_POSIX, readMagic(t));\n+    }\n+\n+    private String readMagic(TarArchiveEntry t) throws IOException {\n+        byte[] buf = new byte[512];\n+        t.writeEntryHeader(buf);\n+        return new String(buf, MAGIC_OFFSET, MAGICLEN + VERSIONLEN);\n+    }\n }", "timestamp": 1357061448, "metainfo": ""}