{"sha": "2820db32e3fdeff47fbf6cb4be39eeebc1ed287e", "log": "COMPRESS-271 incomplete output stream for LZ4 frame format  the resulting output will get rejected by other implementations as the header checksum is incorrect. xxhash32 is up next.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorInputStream;\n import org.apache.commons.compress.compressors.lz4.BlockLZ4CompressorOutputStream;\n import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorInputStream;\n+import org.apache.commons.compress.compressors.lz4.FramedLZ4CompressorOutputStream;\n import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;\n import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;\n import org.apache.commons.compress.compressors.lzma.LZMAUtils;\n      * @param name\n      *            the compressor name, i.e. {@value #GZIP}, {@value #BZIP2},\n      *            {@value #XZ}, {@value #PACK200}, {@value SNAPPY_FRAMED},\n-     *            {@value LZ4_BLOCK}\n+     *            {@value LZ4_BLOCK}, {@value LZ4_FRAMED}\n      *            or {@value #DEFLATE}\n      * @param out\n      *            the output stream\n                 return new BlockLZ4CompressorOutputStream(out);\n             }\n \n+            if (LZ4_FRAMED.equalsIgnoreCase(name)) {\n+                return new FramedLZ4CompressorOutputStream(out);\n+            }\n+\n         } catch (final IOException e) {\n             throw new CompressorException(\"Could not create CompressorOutputStream\", e);\n         }\n \n     @Override\n     public Set<String> getOutputStreamCompressorNames() {\n-        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_RAW, SNAPPY_FRAMED, LZ4_BLOCK);\n+        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_FRAMED, LZ4_BLOCK, LZ4_FRAMED);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.lz4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.commons.compress.compressors.CompressorOutputStream;\n+import org.apache.commons.compress.utils.ByteUtils;\n+\n+/**\n+ * CompressorOutputStream for the LZ4 frame format.\n+ *\n+ * <p>Based on the \"spec\" in the version \"1.5.1 (31/03/2015)\"</p>\n+ *\n+ * @see <a href=\"http://lz4.github.io/lz4/lz4_Frame_format.html\">LZ4 Frame Format Description</a>\n+ * @since 1.14\n+ * @NotThreadSafe\n+ */\n+public class FramedLZ4CompressorOutputStream extends CompressorOutputStream {\n+    /*\n+     * TODO before releasing 1.14:\n+     *\n+     * + xxhash32 checksum creation for headers, content, blocks\n+     * + block dependence\n+     */\n+\n+    private static final int DEFAULT_BLOCK_SIZE = 4096 * 1024;\n+    private static final List<Integer> BLOCK_SIZES = Arrays.asList(64 * 1024, 256 * 1024, 1024 * 1024,\n+        DEFAULT_BLOCK_SIZE);\n+    private static final byte[] END_MARK = new byte[4];\n+\n+    // used in one-arg write method\n+    private final byte[] oneByte = new byte[1];\n+\n+    private final byte[] blockData;\n+    private final OutputStream out;\n+    private boolean finished = false;\n+    private int currentIndex = 0;\n+\n+    /**\n+     * Constructs a new output stream that compresses data using the\n+     * LZ4 frame format using the default block size of 4MB.\n+     * @param out the OutputStream to which to write the compressed data\n+     * @throws IOException if writing the signature fails\n+     */\n+    public FramedLZ4CompressorOutputStream(OutputStream out) throws IOException {\n+        this(out, DEFAULT_BLOCK_SIZE);\n+    }\n+\n+    /**\n+     * Constructs a new output stream that compresses data using the\n+     * LZ4 frame format using the given block size.\n+     * @param out the OutputStream to which to write the compressed data\n+     * @param blockSize block size, one of 64 KB, 256 KB, 1 MB or 4 MB.\n+     * @throws IOException if writing the signature fails\n+     * @throws IllegalArgumentException if the block size is not supported\n+     */\n+    public FramedLZ4CompressorOutputStream(OutputStream out, int blockSize) throws IOException {\n+        if (!BLOCK_SIZES.contains(blockSize)) {\n+            throw new IllegalArgumentException(\"Unsupported block size\");\n+        }\n+        blockData = new byte[blockSize];\n+        this.out = out;\n+        out.write(FramedLZ4CompressorInputStream.LZ4_SIGNATURE);\n+        writeFrameDescriptor();\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+        oneByte[0] = (byte) (b & 0xff);\n+        write(oneByte);\n+    }\n+\n+    @Override\n+    public void write(byte[] data, int off, int len) throws IOException {\n+        if (currentIndex + len > blockData.length) {\n+            flushBlock();\n+            while (len > blockData.length) {\n+                System.arraycopy(data, off, blockData, 0, blockData.length);\n+                off += blockData.length;\n+                len -= blockData.length;\n+                currentIndex = blockData.length;\n+                flushBlock();\n+            }\n+        }\n+        System.arraycopy(data, off, blockData, currentIndex, len);\n+        currentIndex += len;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        finish();\n+        out.close();\n+    }\n+\n+    /**\n+     * Compresses all remaining data and writes it to the stream,\n+     * doesn't close the underlying stream.\n+     * @throws IOException if an error occurs\n+     */\n+    public void finish() throws IOException {\n+        if (!finished) {\n+            if (currentIndex > 0) {\n+                flushBlock();\n+            }\n+            writeTrailer();\n+            finished = true;\n+        }\n+    }\n+\n+    private void writeFrameDescriptor() throws IOException {\n+        out.write(FramedLZ4CompressorInputStream.SUPPORTED_VERSION\n+            | FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK);\n+        out.write(BLOCK_SIZES.indexOf(blockData.length) << 4);\n+        out.write(0); // TODO header checksum\n+    }\n+\n+    private void flushBlock() throws IOException {\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        try (OutputStream o = new BlockLZ4CompressorOutputStream(baos)) {\n+            o.write(blockData, 0, currentIndex);\n+        }\n+        byte[] b = baos.toByteArray();\n+        if (b.length > currentIndex) { // compression increased size, maybe beyond blocksize\n+            ByteUtils.toLittleEndian(out, currentIndex | FramedLZ4CompressorInputStream.UNCOMPRESSED_FLAG_MASK,\n+                4);\n+            out.write(blockData, 0, currentIndex);\n+        } else {\n+            ByteUtils.toLittleEndian(out, b.length, 4);\n+            out.write(b);\n+        }\n+        // TODO block checksum\n+        currentIndex = 0;\n+    }\n+\n+    private void writeTrailer() throws IOException {\n+        out.write(END_MARK);\n+        // TODO content checksum\n+    }\n+\n+}\n+\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.lz4;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import org.junit.Test;\n+\n+public final class FramedLZ4CompressorOutputStreamTest {\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void illegalBlockSize() throws IOException {\n+        new FramedLZ4CompressorOutputStream(new ByteArrayOutputStream(), 32 * 1024);\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.lz4;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Random;\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.compressors.CompressorStreamFactory;\n+import org.apache.commons.compress.compressors.lz77support.Parameters;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public final class FramedLZ4CompressorRoundtripTest extends AbstractTestCase {\n+\n+    private void roundTripTest(String testFile) throws IOException {\n+        File input = getFile(testFile);\n+        long start = System.currentTimeMillis();\n+        final File outputSz = new File(dir, input.getName() + \".framed.lz4\");\n+        try (FileInputStream is = new FileInputStream(input);\n+             FileOutputStream os = new FileOutputStream(outputSz);\n+             FramedLZ4CompressorOutputStream los = new FramedLZ4CompressorOutputStream(os)) {\n+            IOUtils.copy(is, los);\n+        }\n+        System.err.println(input.getName() + \" written, uncompressed bytes: \" + input.length()\n+            + \", compressed bytes: \" + outputSz.length() + \" after \" + (System.currentTimeMillis() - start) + \"ms\");\n+        start = System.currentTimeMillis();\n+        try (FileInputStream is = new FileInputStream(input);\n+             FramedLZ4CompressorInputStream sis = new FramedLZ4CompressorInputStream(new FileInputStream(outputSz))) {\n+            byte[] expected = IOUtils.toByteArray(is);\n+            byte[] actual = IOUtils.toByteArray(sis);\n+            Assert.assertArrayEquals(expected, actual);\n+        }\n+        System.err.println(outputSz.getName() + \" read after \" + (System.currentTimeMillis() - start) + \"ms\");\n+    }\n+\n+    // should yield decent compression\n+    @Test\n+    public void blaTarRoundtrip() throws IOException {\n+        try {\n+        roundTripTest(\"bla.tar\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    // yields no compression at all\n+    @Test\n+    public void gzippedLoremIpsumRoundtrip() throws IOException {\n+        roundTripTest(\"lorem-ipsum.txt.gz\");\n+    }\n+\n+    @Test\n+    public void biggerFileRoundtrip() throws IOException {\n+        roundTripTest(\"COMPRESS-256.7z\");\n+    }\n+\n+    @Test\n+    public void roundtripViaFactory() throws Exception {\n+        File input = getFile(\"bla.tar\");\n+        long start = System.currentTimeMillis();\n+        final File outputSz = new File(dir, input.getName() + \".framed.lz4\");\n+        try (FileInputStream is = new FileInputStream(input);\n+             FileOutputStream os = new FileOutputStream(outputSz);\n+             OutputStream los = new CompressorStreamFactory()\n+                 .createCompressorOutputStream(CompressorStreamFactory.getLZ4Framed(), os)) {\n+            IOUtils.copy(is, los);\n+        }\n+        System.err.println(input.getName() + \" written, uncompressed bytes: \" + input.length()\n+            + \", compressed bytes: \" + outputSz.length() + \" after \" + (System.currentTimeMillis() - start) + \"ms\");\n+        start = System.currentTimeMillis();\n+        try (FileInputStream is = new FileInputStream(input);\n+             InputStream sis = new CompressorStreamFactory()\n+                 .createCompressorInputStream(CompressorStreamFactory.LZ4_FRAMED, new FileInputStream(outputSz))) {\n+            byte[] expected = IOUtils.toByteArray(is);\n+            byte[] actual = IOUtils.toByteArray(sis);\n+            Assert.assertArrayEquals(expected, actual);\n+        }\n+        System.err.println(outputSz.getName() + \" read after \" + (System.currentTimeMillis() - start) + \"ms\");\n+    }\n+}", "timestamp": 1485241346, "metainfo": ""}