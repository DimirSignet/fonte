{"sha": "7117039b146155d81857ec29cc48b64324e5f19c", "log": "COMPRESS-373 support for writing legacy lzma streams", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;\n import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;\n+import org.apache.commons.compress.compressors.lzma.LZMACompressorOutputStream;\n import org.apache.commons.compress.compressors.lzma.LZMAUtils;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;\n                 return new Pack200CompressorOutputStream(out);\n             }\n \n+            if (LZMA.equalsIgnoreCase(name)) {\n+                return new LZMACompressorOutputStream(out);\n+            }\n+\n             if (DEFLATE.equalsIgnoreCase(name)) {\n                 return new DeflateCompressorOutputStream(out);\n             }\n \n     @Override\n     public Set<String> getOutputStreamCompressorNames() {\n-        return Sets.newHashSet(GZIP, BZIP2, XZ, PACK200, DEFLATE);\n+        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorOutputStream.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.lzma;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import org.tukaani.xz.LZMA2Options;\n+import org.tukaani.xz.LZMAOutputStream;\n+\n+import org.apache.commons.compress.compressors.CompressorOutputStream;\n+\n+/**\n+ * LZMA compressor.\n+ * @since 1.13\n+ */\n+public class LZMACompressorOutputStream extends CompressorOutputStream {\n+    private final LZMAOutputStream out;\n+\n+    /**\n+     * Creates a LZMA compressor.\n+     *\n+     * @param       outputStream the stream to wrap\n+     * @throws      IOException on error\n+     */\n+    public LZMACompressorOutputStream(final OutputStream outputStream)\n+            throws IOException {\n+        out = new LZMAOutputStream(outputStream, new LZMA2Options(), -1);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void write(final int b) throws IOException {\n+        out.write(b);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void write(final byte[] buf, final int off, final int len) throws IOException {\n+        out.write(buf, off, len);\n+    }\n+\n+    /**\n+     * Doesn't do anything as {@link LZMAOutputStream} doesn't support flushing.\n+     */\n+    @Override\n+    public void flush() throws IOException {\n+        out.flush();\n+    }\n+\n+    /**\n+     * Finishes compression without closing the underlying stream.\n+     * No more data can be written to this stream after finishing.\n+     * @throws IOException on error\n+     */\n+    public void finish() throws IOException {\n+        out.finish();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void close() throws IOException {\n+        out.close();\n+    }\n+}\n--- a/src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.io.OutputStream;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public final class LZMATestCase extends AbstractTestCase {\n+\n+    @Test\n+    public void lzmaRoundtrip() throws Exception {\n+        final File input = getFile(\"test1.xml\");\n+        final File compressed = new File(dir, \"test1.xml.xz\");\n+        try (OutputStream out = new FileOutputStream(compressed)) {\n+            try (CompressorOutputStream cos = new CompressorStreamFactory()\n+                    .createCompressorOutputStream(\"lzma\", out)) {\n+                IOUtils.copy(new FileInputStream(input), cos);\n+            }\n+        }\n+        byte[] orig;\n+        try (InputStream is = new FileInputStream(input)) {\n+            orig = IOUtils.toByteArray(is);\n+        }\n+        byte[] uncompressed;\n+        try (InputStream is = new FileInputStream(compressed);\n+             CompressorInputStream in = new LZMACompressorInputStream(is)) {\n+            uncompressed = IOUtils.toByteArray(in);\n+        }\n+        Assert.assertArrayEquals(orig, uncompressed);\n+    }\n \n     @Test\n     public void testLZMAUnarchive() throws Exception {", "timestamp": 1480451528, "metainfo": ""}