{"sha": "32c30f6f072ccfea6ead90f8eef0c205d88d00d3", "log": "More java7 language features", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n             readFully(SIX_BYTES_BUF, TWO_BYTES_BUF.length,\n                       FOUR_BYTES_BUF.length);\n             final String magicString = ArchiveUtils.toAsciiString(SIX_BYTES_BUF);\n-            if (magicString.equals(MAGIC_NEW)) {\n-                this.entry = readNewEntry(false);\n-            } else if (magicString.equals(MAGIC_NEW_CRC)) {\n-                this.entry = readNewEntry(true);\n-            } else if (magicString.equals(MAGIC_OLD_ASCII)) {\n-                this.entry = readOldAsciiEntry();\n-            } else {\n-                throw new IOException(\"Unknown magic [\" + magicString + \"]. Occured at byte: \" + getBytesRead());\n+            switch (magicString) {\n+                case MAGIC_NEW:\n+                    this.entry = readNewEntry(false);\n+                    break;\n+                case MAGIC_NEW_CRC:\n+                    this.entry = readNewEntry(true);\n+                    break;\n+                case MAGIC_OLD_ASCII:\n+                    this.entry = readOldAsciiEntry();\n+                    break;\n+                default:\n+                    throw new IOException(\"Unknown magic [\" + magicString + \"]. Occured at byte: \" + getBytesRead());\n             }\n         }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n                     folder.getUnpackSize(), folder.crc);\n         }\n         final byte[] nextHeader = new byte[(int)folder.getUnpackSize()];\n-        final DataInputStream nextHeaderInputStream = new DataInputStream(inputStreamStack);\n-        try {\n+        try (DataInputStream nextHeaderInputStream = new DataInputStream(inputStreamStack)) {\n             nextHeaderInputStream.readFully(nextHeader);\n-        } finally {\n-            nextHeaderInputStream.close();\n         }\n         return new DataInputStream(new ByteArrayInputStream(nextHeader));\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n                                                      length);\n                 }\n                 v.add(ze);\n-            } catch (final InstantiationException ie) {\n+            } catch (final InstantiationException | IllegalAccessException ie) {\n                 throw (ZipException) new ZipException(ie.getMessage()).initCause(ie);\n-            } catch (final IllegalAccessException iae) {\n-                throw (ZipException) new ZipException(iae.getMessage()).initCause(iae);\n             }\n             start += length + WORD;\n         }\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n                 chars[i] = '.';\n             }\n         }\n-        final int len = chars.length;\n         final StringBuilder sb = new StringBuilder();\n-        for (int i = 0; i < len; i++) {\n-            final char c = chars[i];\n+        for (final char c : chars) {\n             if (!Character.isISOControl(c)) {\n                 final Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                 if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n      */\n     protected void checkArchiveContent(final File archive, final List<String> expected)\n             throws Exception {\n-        final InputStream is = new FileInputStream(archive);\n-        try {\n+        try (InputStream is = new FileInputStream(archive)) {\n             final BufferedInputStream buf = new BufferedInputStream(is);\n             final ArchiveInputStream in = factory.createArchiveInputStream(buf);\n             this.checkArchiveContent(in, expected);\n-        } finally {\n-            is.close();\n         }\n     }\n \n                     outfile.mkdirs();\n                 } else {\n                     outfile.getParentFile().mkdirs();\n-                    final OutputStream out = new FileOutputStream(outfile);\n-                    try {\n-                        copied=IOUtils.copy(in, out);\n-                    } finally {\n-                        out.close();\n+                    try (OutputStream out = new FileOutputStream(outfile)) {\n+                        copied = IOUtils.copy(in, out);\n                     }\n                 }\n                 final long size = entry.getSize();\n         final File tmpDir = createTempDir();\n         final File tmpFile = File.createTempFile(\"testfile\", \"\", tmpDir);\n         tmpFile.deleteOnExit();\n-        final FileOutputStream fos = new FileOutputStream(tmpFile);\n-        try {\n-            fos.write(new byte[] {'f', 'o', 'o'});\n-            return new File[] {tmpDir, tmpFile};\n-        } finally {\n-            fos.close();\n+        try (FileOutputStream fos = new FileOutputStream(tmpFile)) {\n+            fos.write(new byte[] { 'f', 'o', 'o' });\n+            return new File[] { tmpDir, tmpFile };\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java\n      */\n     @Test\n     public void aiffFilesAreNoTARs() throws Exception {\n-    \tfinal FileInputStream fis = new FileInputStream(\"src/test/resources/testAIFF.aif\");\n-    \ttry {\n-            final InputStream is = new BufferedInputStream(fis);\n-            try {\n+        try (FileInputStream fis = new FileInputStream(\"src/test/resources/testAIFF.aif\")) {\n+            try (InputStream is = new BufferedInputStream(fis)) {\n                 new ArchiveStreamFactory().createArchiveInputStream(is);\n                 fail(\"created an input stream for a non-archive\");\n             } catch (final ArchiveException ae) {\n                 assertTrue(ae.getMessage().startsWith(\"No Archiver found\"));\n-            } finally {\n-                is.close();\n-            }\n-    \t} finally {\n-            fis.close();\n-    \t}\n+            }\n+        }\n     }\n \n     @Test\n     public void testCOMPRESS209() throws Exception {\n-    \tfinal FileInputStream fis = new FileInputStream(\"src/test/resources/testCompress209.doc\");\n-    \ttry {\n-            final InputStream bis = new BufferedInputStream(fis);\n-            try {\n+        try (FileInputStream fis = new FileInputStream(\"src/test/resources/testCompress209.doc\")) {\n+            try (InputStream bis = new BufferedInputStream(fis)) {\n                 new ArchiveStreamFactory().createArchiveInputStream(bis);\n                 fail(\"created an input stream for a non-archive\");\n             } catch (final ArchiveException ae) {\n                 assertTrue(ae.getMessage().startsWith(\"No Archiver found\"));\n-            } finally {\n-                bis.close();\n-            }\n-    \t} finally {\n-            fis.close();\n-    \t}\n+            }\n+        }\n     }\n \n     @Test(expected = StreamingNotSupportedException.class)\n      */\n     @Test\n     public void detectsAndThrowsFor7z() throws Exception {\n-    \tfinal FileInputStream fis = new FileInputStream(\"src/test/resources/bla.7z\");\n-    \ttry {\n-            final InputStream bis = new BufferedInputStream(fis);\n-            try {\n+        try (FileInputStream fis = new FileInputStream(\"src/test/resources/bla.7z\")) {\n+            try (InputStream bis = new BufferedInputStream(fis)) {\n                 new ArchiveStreamFactory().createArchiveInputStream(bis);\n                 fail(\"Expected a StreamingNotSupportedException\");\n             } catch (final StreamingNotSupportedException ex) {\n                 assertEquals(ArchiveStreamFactory.SEVEN_Z, ex.getFormat());\n-            } finally {\n-                bis.close();\n-            }\n-    \t} finally {\n-            fis.close();\n-    \t}\n+            }\n+        }\n     }\n \n     /**\n      */\n     @Test\n     public void skipsPK00Prefix() throws Exception {\n-    \tfinal FileInputStream fis = new FileInputStream(\"src/test/resources/COMPRESS-208.zip\");\n-    \ttry {\n-            final InputStream bis = new BufferedInputStream(fis);\n-            try {\n-                final ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(bis);\n-                try {\n+        try (FileInputStream fis = new FileInputStream(\"src/test/resources/COMPRESS-208.zip\")) {\n+            try (InputStream bis = new BufferedInputStream(fis)) {\n+                try (ArchiveInputStream ais = new ArchiveStreamFactory().createArchiveInputStream(bis)) {\n                     assertTrue(ais instanceof ZipArchiveInputStream);\n-                } finally {\n-                    ais.close();\n                 }\n-            } finally {\n-                bis.close();\n-            }\n-    \t} finally {\n-            fis.close();\n-    \t}\n+            }\n+        }\n     }\n     \n     @Test\n         dflt = UNKNOWN;\n         try {\n             dflt = getField(new ArjArchiveInputStream(new FileInputStream(getFile(\"bla.arj\"))), \"charsetName\");\n-        } catch (final ArchiveException e) {\n-            e.printStackTrace();\n         } catch (final Exception e) {\n             e.printStackTrace();\n         }\n         dflt = UNKNOWN;\n         try {\n             dflt = getField(new DumpArchiveInputStream(new FileInputStream(getFile(\"bla.dump\"))), \"encoding\");\n-        } catch (final ArchiveException e) {\n-            e.printStackTrace();\n         } catch (final Exception e) {\n             e.printStackTrace();\n         }\n--- a/src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java\n     }\n \n     private void archiveDetection(final File f) throws Exception {\n-        final InputStream is = new FileInputStream(f);\n-        try {\n+        try (InputStream is = new FileInputStream(f)) {\n             assertEquals(DumpArchiveInputStream.class,\n-                         new ArchiveStreamFactory()\n-                         .createArchiveInputStream(new BufferedInputStream(is))\n-                         .getClass());\n-        } finally {\n-            is.close();\n+                    new ArchiveStreamFactory()\n+                            .createArchiveInputStream(new BufferedInputStream(is))\n+                            .getClass());\n         }\n     }\n \n         expected.add(\"lost+found/\");\n         expected.add(\"test1.xml\");\n         expected.add(\"test2.xml\");\n-        final InputStream is = new FileInputStream(f);\n-        try {\n+        try (InputStream is = new FileInputStream(f)) {\n             checkArchiveContent(new DumpArchiveInputStream(is),\n-                                expected);\n-        } finally {\n-            is.close();\n+                    expected);\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n         } finally {\n             outArchive.close();\n         }\n-        \n-        final SevenZFile archive = new SevenZFile(output);\n-        try {\n+\n+        try (SevenZFile archive = new SevenZFile(output)) {\n             SevenZArchiveEntry entry;\n-            \n+\n             entry = archive.getNextEntry();\n-            assert(entry != null);\n+            assert (entry != null);\n             assertEquals(entry.getName(), file1.getName());\n-            \n+\n             entry = archive.getNextEntry();\n-            assert(entry != null);\n+            assert (entry != null);\n             assertEquals(entry.getName(), file2.getName());\n-            \n-            assert(archive.getNextEntry() == null);\n-        } finally {\n-            archive.close();\n+\n+            assert (archive.getNextEntry() == null);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n             while((entry = (ZipArchiveEntry)in.getNextEntry()) != null) {\n                 final File outfile = new File(resultDir.getCanonicalPath() + \"/result/\" + entry.getName());\n                 outfile.getParentFile().mkdirs();\n-                final OutputStream o = new FileOutputStream(outfile);\n-                try {\n+                try (OutputStream o = new FileOutputStream(outfile)) {\n                     IOUtils.copy(in, o);\n-                } finally {\n-                    o.close();\n                 }\n                 results.add(outfile);\n             }\n     @Test\n     public void testSkipsPK00Prefix() throws Exception {\n         final File input = getFile(\"COMPRESS-208.zip\");\n-        final InputStream is = new FileInputStream(input);\n         final ArrayList<String> al = new ArrayList<>();\n         al.add(\"test1.xml\");\n         al.add(\"test2.xml\");\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             checkArchiveContent(new ZipArchiveInputStream(is), al);\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testSkipEntryWithUnsupportedCompressionMethod()\n             throws IOException {\n-        final ZipArchiveInputStream zip =\n-            new ZipArchiveInputStream(new FileInputStream(getFile(\"moby.zip\")));\n-        try {\n+        try (ZipArchiveInputStream zip = new ZipArchiveInputStream(new FileInputStream(getFile(\"moby.zip\")))) {\n             final ZipArchiveEntry entry = zip.getNextZipEntry();\n             assertEquals(\"method\", ZipMethod.TOKENIZATION.getCode(), entry.getMethod());\n             assertEquals(\"README\", entry.getName());\n                 e.printStackTrace();\n                 fail(\"COMPRESS-93: Unable to skip an unsupported zip entry\");\n             }\n-        } finally {\n-            zip.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java\n \n     @Test\n     public void testNotADumpArchive() throws Exception {\n-        final FileInputStream is = new FileInputStream(getFile(\"bla.zip\"));\n-        try {\n+        try (FileInputStream is = new FileInputStream(getFile(\"bla.zip\"))) {\n             new DumpArchiveInputStream(is);\n             fail(\"expected an exception\");\n         } catch (final ArchiveException ex) {\n             // expected\n             assertTrue(ex.getCause() instanceof ShortFileException);\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testNotADumpArchiveButBigEnough() throws Exception {\n-        final FileInputStream is = new FileInputStream(getFile(\"zip64support.tar.bz2\"));\n-        try {\n+        try (FileInputStream is = new FileInputStream(getFile(\"zip64support.tar.bz2\"))) {\n             new DumpArchiveInputStream(is);\n             fail(\"expected an exception\");\n         } catch (final ArchiveException ex) {\n             // expected\n             assertTrue(ex.getCause() instanceof UnrecognizedFormatException);\n-        } finally {\n-            is.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n \n     @Test\n     public void testAllEmptyFilesArchive() throws Exception {\n-        final SevenZFile archive = new SevenZFile(getFile(\"7z-empty-mhc-off.7z\"));\n-        try {\n+        try (SevenZFile archive = new SevenZFile(getFile(\"7z-empty-mhc-off.7z\"))) {\n             assertNotNull(archive.getNextEntry());\n-        } finally {\n-            archive.close();\n         }\n     }\n \n      */\n     @Test\n     public void testCompressedHeaderWithNonDefaultDictionarySize() throws Exception {\n-        final SevenZFile sevenZFile = new SevenZFile(getFile(\"COMPRESS-256.7z\"));\n-        try {\n+        try (SevenZFile sevenZFile = new SevenZFile(getFile(\"COMPRESS-256.7z\"))) {\n             int count = 0;\n             while (sevenZFile.getNextEntry() != null) {\n                 count++;\n             }\n             assertEquals(446, count);\n-        } finally {\n-            sevenZFile.close();\n         }\n     }\n \n     @Test\n     public void testReadingBackLZMA2DictSize() throws Exception {\n         final File output = new File(dir, \"lzma2-dictsize.7z\");\n-        final SevenZOutputFile outArchive = new SevenZOutputFile(output);\n-        try {\n+        try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {\n             outArchive.setContentMethods(Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2, 1 << 20)));\n             final SevenZArchiveEntry entry = new SevenZArchiveEntry();\n             entry.setName(\"foo.txt\");\n             outArchive.putArchiveEntry(entry);\n             outArchive.write(new byte[] { 'A' });\n             outArchive.closeArchiveEntry();\n-        } finally {\n-            outArchive.close();\n-        }\n-\n-        final SevenZFile archive = new SevenZFile(output);\n-        try {\n+        }\n+\n+        try (SevenZFile archive = new SevenZFile(output)) {\n             final SevenZArchiveEntry entry = archive.getNextEntry();\n             final SevenZMethodConfiguration m = entry.getContentMethods().iterator().next();\n             assertEquals(SevenZMethod.LZMA2, m.getMethod());\n             assertEquals(1 << 20, m.getOptions());\n-        } finally {\n-            archive.close();\n         }\n     }\n \n     @Test\n     public void testReadingBackDeltaDistance() throws Exception {\n         final File output = new File(dir, \"delta-distance.7z\");\n-        final SevenZOutputFile outArchive = new SevenZOutputFile(output);\n-        try {\n+        try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {\n             outArchive.setContentMethods(Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.DELTA_FILTER, 32),\n-                                                       new SevenZMethodConfiguration(SevenZMethod.LZMA2)));\n+                    new SevenZMethodConfiguration(SevenZMethod.LZMA2)));\n             final SevenZArchiveEntry entry = new SevenZArchiveEntry();\n             entry.setName(\"foo.txt\");\n             outArchive.putArchiveEntry(entry);\n             outArchive.write(new byte[] { 'A' });\n             outArchive.closeArchiveEntry();\n-        } finally {\n-            outArchive.close();\n-        }\n-\n-        final SevenZFile archive = new SevenZFile(output);\n-        try {\n+        }\n+\n+        try (SevenZFile archive = new SevenZFile(output)) {\n             final SevenZArchiveEntry entry = archive.getNextEntry();\n             final SevenZMethodConfiguration m = entry.getContentMethods().iterator().next();\n             assertEquals(SevenZMethod.DELTA_FILTER, m.getMethod());\n             assertEquals(32, m.getOptions());\n-        } finally {\n-            archive.close();\n         }\n     }\n \n     @Test\n     public void getEntriesOfUnarchiveTest() throws IOException {\n-        final SevenZFile sevenZFile = new SevenZFile(getFile(\"bla.7z\"));\n-        try {\n+        try (SevenZFile sevenZFile = new SevenZFile(getFile(\"bla.7z\"))) {\n             final Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();\n             final Iterator<SevenZArchiveEntry> iter = entries.iterator();\n             SevenZArchiveEntry entry = iter.next();\n             entry = iter.next();\n             assertEquals(\"test2.xml\", entry.getName());\n             assertFalse(iter.hasNext());\n-        } finally {\n-            sevenZFile.close();\n         }\n     }\n \n      */\n     @Test\n     public void readEntriesOfSize0() throws IOException {\n-        final SevenZFile sevenZFile = new SevenZFile(getFile(\"COMPRESS-348.7z\"));\n-        try {\n+        try (SevenZFile sevenZFile = new SevenZFile(getFile(\"COMPRESS-348.7z\"))) {\n             int entries = 0;\n             SevenZArchiveEntry entry = sevenZFile.getNextEntry();\n             while (entry != null) {\n                 entry = sevenZFile.getNextEntry();\n             }\n             assertEquals(5, entries);\n-        } finally {\n-            sevenZFile.close();\n         }\n     }\n     \n     private void test7zUnarchive(final File f, final SevenZMethod m, final byte[] password) throws Exception {\n-        final SevenZFile sevenZFile = new SevenZFile(f, password);\n-        try {\n+        try (SevenZFile sevenZFile = new SevenZFile(f, password)) {\n             SevenZArchiveEntry entry = sevenZFile.getNextEntry();\n             assertEquals(\"test1.xml\", entry.getName());\n             assertEquals(m, entry.getContentMethods().iterator().next().getMethod());\n             entry = sevenZFile.getNextEntry();\n             assertEquals(\"test2.xml\", entry.getName());\n             assertEquals(m, entry.getContentMethods().iterator().next().getMethod());\n-            final byte[] contents = new byte[(int)entry.getSize()];\n+            final byte[] contents = new byte[(int) entry.getSize()];\n             int off = 0;\n             while ((off < contents.length)) {\n                 final int bytesRead = sevenZFile.read(contents, off, contents.length - off);\n-                assert(bytesRead >= 0);\n+                assert (bytesRead >= 0);\n                 off += bytesRead;\n             }\n             assertEquals(TEST2_CONTENT, new String(contents, \"UTF-8\"));\n             assertNull(sevenZFile.getNextEntry());\n-        } finally {\n-            sevenZFile.close();\n         }\n     }\n \n     private void checkHelloWorld(final String filename) throws Exception {\n-        final SevenZFile sevenZFile = new SevenZFile(getFile(filename));\n-        try {\n+        try (SevenZFile sevenZFile = new SevenZFile(getFile(filename))) {\n             final SevenZArchiveEntry entry = sevenZFile.getNextEntry();\n             assertEquals(\"Hello world.txt\", entry.getName());\n-            final byte[] contents = new byte[(int)entry.getSize()];\n+            final byte[] contents = new byte[(int) entry.getSize()];\n             int off = 0;\n             while ((off < contents.length)) {\n                 final int bytesRead = sevenZFile.read(contents, off, contents.length - off);\n-                assert(bytesRead >= 0);\n+                assert (bytesRead >= 0);\n                 off += bytesRead;\n             }\n             assertEquals(\"Hello, world!\\n\", new String(contents, \"UTF-8\"));\n             assertNull(sevenZFile.getNextEntry());\n-        } finally {\n-            sevenZFile.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n         cal.add(Calendar.HOUR, -1);\n         final Date creationDate = cal.getTime();\n \n-        final SevenZOutputFile outArchive = new SevenZOutputFile(output);\n-        try {\n+        try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {\n             SevenZArchiveEntry entry = outArchive.createArchiveEntry(dir, \"foo/\");\n             outArchive.putArchiveEntry(entry);\n             outArchive.closeArchiveEntry();\n             outArchive.closeArchiveEntry();\n \n             outArchive.finish();\n-        } finally {\n-            outArchive.close();\n-        }\n-\n-        final SevenZFile archive = new SevenZFile(output);\n-        try {\n+        }\n+\n+        try (SevenZFile archive = new SevenZFile(output)) {\n             SevenZArchiveEntry entry = archive.getNextEntry();\n-            assert(entry != null);\n+            assert (entry != null);\n             assertEquals(\"foo/\", entry.getName());\n             assertTrue(entry.isDirectory());\n             assertFalse(entry.isAntiItem());\n \n             entry = archive.getNextEntry();\n-            assert(entry != null);\n+            assert (entry != null);\n             assertEquals(\"foo/bar\", entry.getName());\n             assertFalse(entry.isDirectory());\n             assertFalse(entry.isAntiItem());\n             assertEquals(creationDate, entry.getCreationDate());\n \n             entry = archive.getNextEntry();\n-            assert(entry != null);\n+            assert (entry != null);\n             assertEquals(\"xyzzy\", entry.getName());\n             assertEquals(1, entry.getSize());\n             assertFalse(entry.getHasAccessDate());\n             assertEquals(0, archive.read());\n \n             entry = archive.getNextEntry();\n-            assert(entry != null);\n+            assert (entry != null);\n             assertEquals(\"baz/\", entry.getName());\n             assertTrue(entry.isDirectory());\n             assertTrue(entry.isAntiItem());\n \n             entry = archive.getNextEntry();\n-            assert(entry != null);\n+            assert (entry != null);\n             assertEquals(\"dada\", entry.getName());\n             assertEquals(2, entry.getSize());\n             final byte[] content = new byte[2];\n             assertEquals(42, content[1]);\n             assertEquals(17, entry.getWindowsAttributes());\n \n-            assert(archive.getNextEntry() == null);\n-        } finally {\n-            archive.close();\n+            assert (archive.getNextEntry() == null);\n         }\n \n     }\n     @Test\n     public void testDirectoriesOnly() throws Exception {\n         output = new File(dir, \"dirs.7z\");\n-        final SevenZOutputFile outArchive = new SevenZOutputFile(output);\n-        try {\n+        try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {\n             final SevenZArchiveEntry entry = new SevenZArchiveEntry();\n             entry.setName(\"foo/\");\n             entry.setDirectory(true);\n             outArchive.putArchiveEntry(entry);\n             outArchive.closeArchiveEntry();\n-        } finally {\n-            outArchive.close();\n-        }\n-\n-        final SevenZFile archive = new SevenZFile(output);\n-        try {\n+        }\n+\n+        try (SevenZFile archive = new SevenZFile(output)) {\n             final SevenZArchiveEntry entry = archive.getNextEntry();\n-            assert(entry != null);\n+            assert (entry != null);\n             assertEquals(\"foo/\", entry.getName());\n             assertTrue(entry.isDirectory());\n             assertFalse(entry.isAntiItem());\n \n-            assert(archive.getNextEntry() == null);\n-        } finally {\n-            archive.close();\n+            assert (archive.getNextEntry() == null);\n         }\n \n     }\n     @Test\n     public void testCantFinishTwice() throws Exception {\n         output = new File(dir, \"finish.7z\");\n-        final SevenZOutputFile outArchive = new SevenZOutputFile(output);\n-        try {\n+        try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {\n             outArchive.finish();\n             outArchive.finish();\n             fail(\"shouldn't be able to call finish twice\");\n         } catch (final IOException ex) {\n             assertEquals(\"This archive has already been finished\", ex.getMessage());\n-        } finally {\n-            outArchive.close();\n         }\n     }\n \n     @Test\n     public void testArchiveWithMixedMethods() throws Exception {\n         output = new File(dir, \"mixed-methods.7z\");\n-        final SevenZOutputFile outArchive = new SevenZOutputFile(output);\n-        try {\n+        try (SevenZOutputFile outArchive = new SevenZOutputFile(output)) {\n             addFile(outArchive, 0, true);\n             addFile(outArchive, 1, true, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.BZIP2)));\n-        } finally {\n-            outArchive.close();\n-        }\n-\n-        final SevenZFile archive = new SevenZFile(output);\n-        try {\n+        }\n+\n+        try (SevenZFile archive = new SevenZFile(output)) {\n             assertEquals(Boolean.TRUE,\n-                         verifyFile(archive, 0, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2))));\n+                    verifyFile(archive, 0, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2))));\n             assertEquals(Boolean.TRUE,\n-                         verifyFile(archive, 1, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.BZIP2))));\n-        } finally {\n-            archive.close();\n+                    verifyFile(archive, 1, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.BZIP2))));\n         }\n     }\n \n             : numberOfFiles + 1;\n         int nonEmptyFilesAdded = 0;\n         output = new File(dir, \"COMPRESS252-\" + numberOfFiles + \"-\" + numberOfNonEmptyFiles + \".7z\");\n-        final SevenZOutputFile archive = new SevenZOutputFile(output);\n-        try {\n+        try (SevenZOutputFile archive = new SevenZOutputFile(output)) {\n             addDir(archive);\n             for (int i = 0; i < numberOfFiles; i++) {\n                 addFile(archive, i,\n                         (i + 1) % nonEmptyModulus == 0 && nonEmptyFilesAdded++ < numberOfNonEmptyFiles);\n             }\n-        } finally {\n-            archive.close();\n         }\n         verifyCompress252(output, numberOfFiles, numberOfNonEmptyFiles);\n     }\n \n     private void verifyCompress252(final File output, final int numberOfFiles, final int numberOfNonEmptyFiles)\n         throws Exception {\n-        final SevenZFile archive = new SevenZFile(output);\n         int filesFound = 0;\n         int nonEmptyFilesFound = 0;\n-        try {\n+        try (SevenZFile archive = new SevenZFile(output)) {\n             verifyDir(archive);\n             Boolean b = verifyFile(archive, filesFound++);\n             while (b != null) {\n                 }\n                 b = verifyFile(archive, filesFound++);\n             }\n-        } finally {\n-            archive.close();\n         }\n         assertEquals(numberOfFiles + 1, filesFound);\n         assertEquals(numberOfNonEmptyFiles, nonEmptyFilesFound);\n             outArchive.close();\n         }\n \n-        final SevenZFile archive = new SevenZFile(output);\n-        try {\n+        try (SevenZFile archive = new SevenZFile(output)) {\n             assertEquals(Boolean.TRUE, verifyFile(archive, 0, methods));\n-        } finally {\n-            archive.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n \n     @Test\n     public void testCompress197() throws Exception {\n-        final TarArchiveInputStream tar = getTestStream(\"/COMPRESS-197.tar\");\n-        try {\n+        try (TarArchiveInputStream tar = getTestStream(\"/COMPRESS-197.tar\")) {\n             TarArchiveEntry entry = tar.getNextTarEntry();\n             while (entry != null) {\n                 entry = tar.getNextTarEntry();\n             }\n         } catch (final IOException e) {\n             fail(\"COMPRESS-197: \" + e.getMessage());\n-        } finally {\n-            tar.close();\n         }\n     }\n \n \n     @Test\n     public void readsArchiveCompletely_COMPRESS245() throws Exception {\n-        final InputStream is = TarArchiveInputStreamTest.class\n-            .getResourceAsStream(\"/COMPRESS-245.tar.gz\");\n-        try {\n+        try (InputStream is = TarArchiveInputStreamTest.class\n+                .getResourceAsStream(\"/COMPRESS-245.tar.gz\")) {\n             final InputStream gin = new GZIPInputStream(is);\n             final TarArchiveInputStream tar = new TarArchiveInputStream(gin);\n             int count = 0;\n             tar.close();\n         } catch (final IOException e) {\n             fail(\"COMPRESS-245: \" + e.getMessage());\n-        } finally {\n-            is.close();\n         }\n     }\n \n      */\n     @Test\n     public void shouldReadGNULongNameEntryWithWrongName() throws Exception {\n-        final TarArchiveInputStream is = getTestStream(\"/COMPRESS-324.tar\");\n-        try {\n+        try (TarArchiveInputStream is = getTestStream(\"/COMPRESS-324.tar\")) {\n             final TarArchiveEntry entry = is.getNextTarEntry();\n             assertEquals(\"1234567890123456789012345678901234567890123456789012345678901234567890\"\n-                         + \"1234567890123456789012345678901234567890123456789012345678901234567890\"\n-                         + \"1234567890123456789012345678901234567890123456789012345678901234567890\"\n-                         + \"1234567890123456789012345678901234567890.txt\",\n-                         entry.getName());\n-        } finally {\n-            is.close();\n+                            + \"1234567890123456789012345678901234567890123456789012345678901234567890\"\n+                            + \"1234567890123456789012345678901234567890123456789012345678901234567890\"\n+                            + \"1234567890123456789012345678901234567890.txt\",\n+                    entry.getName());\n         }\n     }\n \n      */\n     @Test\n     public void survivesBlankLinesInPaxHeader() throws Exception {\n-        final TarArchiveInputStream is = getTestStream(\"/COMPRESS-355.tar\");\n-        try {\n+        try (TarArchiveInputStream is = getTestStream(\"/COMPRESS-355.tar\")) {\n             final TarArchiveEntry entry = is.getNextTarEntry();\n             assertEquals(\"package/package.json\", entry.getName());\n             assertNull(is.getNextTarEntry());\n-        } finally {\n-            is.close();\n         }\n     }\n \n      */\n     @Test\n     public void survivesPaxHeaderWithNameEndingInSlash() throws Exception {\n-        final TarArchiveInputStream is = getTestStream(\"/COMPRESS-356.tar\");\n-        try {\n+        try (TarArchiveInputStream is = getTestStream(\"/COMPRESS-356.tar\")) {\n             final TarArchiveEntry entry = is.getNextTarEntry();\n             assertEquals(\"package/package.json\", entry.getName());\n             assertNull(is.getNextTarEntry());\n-        } finally {\n-            is.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Lister.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Lister.java\n             usage();\n         }\n         if (cl.useStream) {\n-            final BufferedInputStream fs =\n-                new BufferedInputStream(new FileInputStream(f));\n-            try {\n+            try (BufferedInputStream fs = new BufferedInputStream(new FileInputStream(f))) {\n                 final ZipArchiveInputStream zs =\n-                    new ZipArchiveInputStream(fs, cl.encoding, true,\n-                                              cl.allowStoredEntriesWithDataDescriptor);\n+                        new ZipArchiveInputStream(fs, cl.encoding, true,\n+                                cl.allowStoredEntriesWithDataDescriptor);\n                 for (ArchiveEntry entry = zs.getNextEntry();\n                      entry != null;\n                      entry = zs.getNextEntry()) {\n                         extract(cl.dir, ze, zs);\n                     }\n                 }\n-            } finally {\n-                fs.close();\n             }\n         } else {\n-            final ZipFile zf = new ZipFile(f, cl.encoding);\n-            try {\n+            try (ZipFile zf = new ZipFile(f, cl.encoding)) {\n                 for (final Enumeration<ZipArchiveEntry> entries = zf.getEntries();\n                      entries.hasMoreElements(); ) {\n                     final ZipArchiveEntry ze = entries.nextElement();\n                     list(ze);\n                     if (cl.dir != null) {\n-                        final InputStream is = zf.getInputStream(ze);\n-                        try {\n+                        try (InputStream is = zf.getInputStream(ze)) {\n                             extract(cl.dir, ze, is);\n-                        } finally {\n-                            is.close();\n                         }\n                     }\n                 }\n-            } finally {\n-                zf.close();\n             }\n         }\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n                     zos.setUseZip64(mode);\n                 }\n                 write100KFilesToStream(zos);\n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     final long end = a.length();\n \n                     // validate \"end of central directory\" is at\n                     // the end of the file and contains the magic\n                     // value 0xFFFF as \"number of entries\".\n                     a.seek(end\n-                           - 22 /* length of EOCD without file comment */);\n+                            - 22 /* length of EOCD without file comment */);\n                     final byte[] eocd = new byte[12];\n                     a.readFully(eocd);\n                     assertArrayEquals(new byte[] {\n                             // entries\n                             (byte) 0xff, (byte) 0xff,\n                             (byte) 0xff, (byte) 0xff,\n-                        }, eocd); \n+                    }, eocd);\n \n                     // validate \"Zip64 end of central directory\n                     // locator\" is right in front of the EOCD and\n                     // the location of the \"Zip64 end of central\n                     // directory record\" seems correct\n                     final long expectedZ64EocdOffset = end - 22 /* eocd.length */\n-                        - 20 /* z64 eocd locator.length */\n-                        - 56 /* z64 eocd without extensible data sector */;\n+                            - 20 /* z64 eocd locator.length */\n+                            - 56 /* z64 eocd without extensible data sector */;\n                     final byte[] loc =\n-                        ZipEightByteInteger.getBytes(expectedZ64EocdOffset);\n+                            ZipEightByteInteger.getBytes(expectedZ64EocdOffset);\n                     a.seek(end - 22 - 20);\n                     final byte[] z64EocdLoc = new byte[20];\n                     a.readFully(z64EocdLoc);\n                             loc[4], loc[5], loc[6], loc[7],\n                             // total number of disks\n                             1, 0, 0, 0,\n-                        }, z64EocdLoc);\n+                    }, z64EocdLoc);\n \n                     // validate \"Zip64 end of central directory\n                     // record\" is where it is supposed to be, the\n                             0, 0, 0, 0,\n                             (byte) 0xA0, (byte) 0x86, 1, 0,\n                             0, 0, 0, 0,\n-                        }, z64EocdStart);\n+                    }, z64EocdStart);\n                     a.seek(expectedZ64EocdOffset + 48 /* skip size */);\n                     final byte[] cdOffset = new byte[8];\n                     a.readFully(cdOffset);\n                     a.readFully(sig);\n                     assertArrayEquals(new byte[] {\n                             (byte) 0x50, (byte) 0x4b, 1, 2,\n-                        }, sig);\n-                } finally {\n-                    a.close();\n+                    }, sig);\n                 }\n             }\n         };\n                 }\n                 write3EntriesCreatingBigArchiveToStream(zos);\n \n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n                     // skip first two entries\n                     a.skipBytes(2 * 47 /* CD entry of file with\n                                           file name length 1 and no\n                                           extra data */\n-                                + 2 * (mode == Zip64Mode.Always ? 4 : 0)\n+                                    + 2 * (mode == Zip64Mode.Always ? 4 : 0)\n                                 /* empty ZIP64 extra fields if mode is Always */\n-                                );\n+                    );\n \n                     // grab third entry, verify offset is\n                     // 0xFFFFFFFF and it has a ZIP64 extended\n                             0, 8,\n                             // method\n                             0, 0\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp, CRC, compressed size\n                     a.skipBytes(12);\n                     final byte[] rest = new byte[23];\n                             (byte) 0xFF, (byte) 0xFF,\n                             // file name\n                             (byte) '2'\n-                        }, rest);\n+                    }, rest);\n                     final byte[] extra = new byte[4];\n                     a.readFully(extra);\n                     assertArrayEquals(new byte[] {\n                             1, 0,\n                             // size\n                             8, 0\n-                        }, extra);\n+                    }, extra);\n \n                     // read offset of LFH\n                     final byte[] offset = new byte[8];\n                     a.readFully(sig);\n                     assertArrayEquals(new byte[] {\n                             (byte) 0x50, (byte) 0x4b, 3, 4,\n-                        }, sig);\n-                } finally {\n-                    a.close();\n+                    }, sig);\n                 }\n             }\n         };\n                                              } else {\n                                                  assertEquals(1,\n                                                               zae.getSize());\n-                                                 final InputStream i =\n-                                                     zf.getInputStream(zae);\n-                                                 try {\n+                                                 try (InputStream i = zf.getInputStream(zae)) {\n                                                      assertNotNull(i);\n                                                      assertEquals(42, i.read());\n-                                                 } finally {\n-                                                     i.close();\n                                                  }\n                                              }\n                                          }\n                 zos.closeArchiveEntry();\n                 zos.close();\n \n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n \n                     // grab first entry, verify sizes are 0xFFFFFFFF\n                             0, 8,\n                             // method\n                             0, 0\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     byte[] rest = new byte[31];\n                             0, 0, 0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     final byte[] extra = new byte[20];\n                     a.readFully(extra);\n                     // 5e9 == 0x12A05F200\n                             // compressed size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n-                        }, extra);\n+                    }, extra);\n \n                     // and now validate local file header\n                     a.seek(0);\n                             0, 8,\n                             // method\n                             0, 0\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                             20, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     a.readFully(extra);\n                     // 5e9 == 0x12A05F200\n                     assertArrayEquals(new byte[] {\n                             // compressed size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n-                        }, extra);\n-                } finally {\n-                    a.close();\n+                    }, extra);\n                 }\n             }\n         };\n                 zos.closeArchiveEntry();\n                 zos.close();\n \n-                final RandomAccessFile a =\n-                    new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n \n                     final long cfhPos = a.getFilePointer();\n                             8, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     byte[] rest = new byte[31];\n                             0, 0, 0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     final byte[] extra = new byte[20];\n                     a.readFully(extra);\n                     // 5e9 == 0x12A05F200\n                             // compressed size\n                             (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n                             0, 0, 0, 0,\n-                        }, extra);\n+                    }, extra);\n \n                     // validate data descriptor\n                     a.seek(cfhPos - 24);\n                             (byte) 0x50, (byte) 0x4b, 7, 8,\n                             // CRC\n                             (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n-                        }, dd);\n+                    }, dd);\n                     dd = new byte[16];\n                     a.readFully(dd);\n                     assertArrayEquals(new byte[] {\n                             // original size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n-                        }, dd);\n+                    }, dd);\n \n                     // and now validate local file header\n                     a.seek(0);\n                             8, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                             20, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     a.readFully(extra);\n                     assertArrayEquals(new byte[] {\n                             // Header-ID\n                             // compressed size\n                             0, 0, 0, 0,\n                             0, 0, 0, 0,\n-                        }, extra);\n-                } finally {\n-                    a.close();\n+                    }, extra);\n                 }\n             }\n         };\n                 zos.closeArchiveEntry();\n                 zos.close();\n \n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n \n                     // grab first entry, verify\n                             0, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     byte[] rest = new byte[31];\n                             0, 0, 0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     byte[] extra = new byte[20];\n                     a.readFully(extra);\n                     // 5e9 == 0x12A05F200\n                             // compressed size\n                             (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n                             0, 0, 0, 0,\n-                        }, extra);\n+                    }, extra);\n \n                     // and now validate local file header\n                     a.seek(0);\n                             0, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                             20, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     extra = new byte[20];\n                     a.readFully(extra);\n                     assertArrayEquals(new byte[] {\n                             // compressed size\n                             (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n                             0, 0, 0, 0,\n-                        }, extra);\n-                } finally {\n-                    a.close();\n+                    }, extra);\n                 }\n             }\n         };\n                 zos.closeArchiveEntry();\n                 zos.close();\n \n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n \n                     // grab first CF entry, verify sizes are 1e6 and it\n                             0, 8,\n                             // method\n                             0, 0\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     byte[] rest = new byte[31];\n                             0, 0, 0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n \n                     // and now validate local file header: this one\n                     // has a ZIP64 extra field if and only if size was\n                     // unknown and mode was not Never or the mode was\n                     // Always (regardless of size)\n                     final boolean hasExtra = mode == Zip64Mode.Always\n-                        || (mode == Zip64Mode.AsNeeded && !knownSize);\n+                            || (mode == Zip64Mode.AsNeeded && !knownSize);\n                     a.seek(0);\n                     header = new byte[10];\n                     a.readFully(header);\n                             0, 8,\n                             // method\n                             0, 0\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                             (byte) (!hasExtra ? 0 : 20), 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     if (hasExtra) {\n                         final byte[] extra = new byte[20];\n                         a.readFully(extra);\n                                 // compressed size\n                                 (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n                                 0, 0, 0, 0,\n-                            }, extra);\n+                        }, extra);\n                     }\n-                } finally {\n-                    a.close();\n                 }\n             }\n         };\n                 zos.closeArchiveEntry();\n                 zos.close();\n \n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n \n                     // grab first CF entry, verify sizes are 1e6 and it\n                             0, 8,\n                             // method\n                             0, 0\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     byte[] rest = new byte[31];\n                             0, 0, 0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n \n                     byte[] extra = new byte[4];\n                     a.readFully(extra);\n                             1, 0,\n                             // size of extra\n                             0, 0,\n-                        }, extra);\n+                    }, extra);\n \n                     // and now validate local file header: this one\n                     // has a ZIP64 extra field as the mode was\n                             0, 8,\n                             // method\n                             0, 0\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                             20, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n \n                     extra = new byte[20];\n                     a.readFully(extra);\n                             // compressed size\n                             (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n                             0, 0, 0, 0,\n-                        }, extra);\n-                } finally {\n-                    a.close();\n+                    }, extra);\n                 }\n             }\n         };\n                 zos.closeArchiveEntry();\n                 zos.close();\n \n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n \n                     final long cfhPos = a.getFilePointer();\n                             8, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     final byte[] crc = new byte[4];\n                     assertArrayEquals(new byte[] {\n                             (byte) 0x9E, (byte) 0xCB,\n                             (byte) 0x79, (byte) 0x12,\n-                        }, crc);\n+                    }, crc);\n                     // skip compressed size\n                     a.skipBytes(4);\n                     byte[] rest = new byte[23];\n                             0, 0, 0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n \n                     // validate data descriptor\n                     a.seek(cfhPos - 16);\n                             (byte) 0x50, (byte) 0x4b, 7, 8,\n                             // CRC\n                             (byte) 0x9E, (byte) 0xCB, (byte) 0x79, (byte) 0x12,\n-                        }, dd);\n+                    }, dd);\n                     // skip uncompressed size\n                     a.skipBytes(4);\n                     dd = new byte[4];\n                     assertArrayEquals(new byte[] {\n                             // original size\n                             (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n-                        }, dd);\n+                    }, dd);\n \n                     // and now validate local file header\n                     a.seek(0);\n                             8, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                             0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n-                } finally {\n-                    a.close();\n+                    }, rest);\n                 }\n             }\n         };\n                 zos.closeArchiveEntry();\n                 zos.close();\n \n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n \n                     final long cfhPos = a.getFilePointer();\n                             8, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     final byte[] crc = new byte[4];\n                     assertArrayEquals(new byte[] {\n                             (byte) 0x9E, (byte) 0xCB,\n                             (byte) 0x79, (byte) 0x12,\n-                        }, crc);\n+                    }, crc);\n                     // skip compressed size\n                     a.skipBytes(4);\n                     byte[] rest = new byte[23];\n                             0, 0, 0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     byte[] extra = new byte[4];\n                     a.readFully(extra);\n                     assertArrayEquals(new byte[] {\n                             1, 0,\n                             // size of extra\n                             0, 0,\n-                        }, extra);\n+                    }, extra);\n \n                     // validate data descriptor\n                     a.seek(cfhPos - 24);\n                             (byte) 0x50, (byte) 0x4b, 7, 8,\n                             // CRC\n                             (byte) 0x9E, (byte) 0xCB, (byte) 0x79, (byte) 0x12,\n-                        }, dd);\n+                    }, dd);\n                     // skip compressed size\n                     a.skipBytes(8);\n                     dd = new byte[8];\n                             // original size\n                             (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n                             0, 0, 0, 0\n-                        }, dd);\n+                    }, dd);\n \n                     // and now validate local file header\n                     a.seek(0);\n                             8, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                             20, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n \n                     extra = new byte[20];\n                     a.readFully(extra);\n                             // compressed size\n                             0, 0, 0, 0,\n                             0, 0, 0, 0,\n-                        }, extra);\n-                } finally {\n-                    a.close();\n+                    }, extra);\n                 }\n             }\n         };\n                 zos.closeArchiveEntry();\n                 zos.close();\n \n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n \n                     // grab first CD entry, verify sizes are not\n                             0, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     byte[] crc = new byte[4];\n                     assertArrayEquals(new byte[] {\n                             (byte) 0x9E, (byte) 0xCB,\n                             (byte) 0x79, (byte) 0x12,\n-                        }, crc);\n+                    }, crc);\n                     // skip compressed size\n                     a.skipBytes(4);\n                     byte[] rest = new byte[23];\n                             0, 0, 0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n \n                     // and now validate local file header\n                     a.seek(0);\n                             0, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     crc = new byte[4];\n                     assertArrayEquals(new byte[] {\n                             (byte) 0x9E, (byte) 0xCB,\n                             (byte) 0x79, (byte) 0x12,\n-                        }, crc);\n+                    }, crc);\n                     // skip compressed size\n                     a.skipBytes(4);\n                     rest = new byte[9];\n                     a.readFully(rest);\n \n-                    final boolean hasExtra = \n-                        mode == Zip64Mode.AsNeeded && !knownSize;\n+                    final boolean hasExtra =\n+                            mode == Zip64Mode.AsNeeded && !knownSize;\n \n                     assertArrayEquals(new byte[] {\n                             // Original Size\n                             (byte) (!hasExtra ? 0 : 20), 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     if (hasExtra) {\n                         final byte[] extra = new byte[12];\n                         a.readFully(extra);\n                                 // compressed size,\n                                 // don't want to\n                                 // hard-code it\n-                            }, extra);\n+                        }, extra);\n                     }\n-                } finally {\n-                    a.close();\n                 }\n             }\n         };\n                 zos.closeArchiveEntry();\n                 zos.close();\n \n-                final RandomAccessFile a = new RandomAccessFile(f, \"r\");\n-                try {\n+                try (RandomAccessFile a = new RandomAccessFile(f, \"r\")) {\n                     getLengthAndPositionAtCentralDirectory(a);\n \n                     // grab first CD entry, verify sizes are not\n                             0, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     byte[] crc = new byte[4];\n                     a.readFully(crc);\n                     assertArrayEquals(new byte[] {\n                             (byte) 0x9E, (byte) 0xCB, (byte) 0x79, (byte) 0x12,\n-                        }, crc);\n+                    }, crc);\n                     // skip compressed size\n                     a.skipBytes(4);\n                     byte[] rest = new byte[23];\n                             0, 0, 0, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n                     byte[] extra = new byte[4];\n                     a.readFully(extra);\n                     assertArrayEquals(new byte[] {\n                             1, 0,\n                             // size of extra\n                             0, 0,\n-                        }, extra);\n+                    }, extra);\n \n                     // and now validate local file header\n                     a.seek(0);\n                             0, 8,\n                             // method\n                             8, 0,\n-                        }, header);\n+                    }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n                     crc = new byte[4];\n                     assertArrayEquals(new byte[] {\n                             (byte) 0x9E, (byte) 0xCB,\n                             (byte) 0x79, (byte) 0x12,\n-                        }, crc);\n+                    }, crc);\n                     rest = new byte[13];\n                     a.readFully(rest);\n \n                             20, 0,\n                             // file name\n                             (byte) '0'\n-                        }, rest);\n+                    }, rest);\n \n                     extra = new byte[12];\n                     a.readFully(extra);\n                             // compressed size,\n                             // don't want to\n                             // hard-code it\n-                        }, extra);\n-                } finally {\n-                    a.close();\n+                    }, extra);\n                 }\n             }\n         };\n             long read = 0;\n             final Random r = new Random(System.currentTimeMillis());\n             int readNow;\n-            final InputStream zin = zf.getInputStream(zae);\n-            try {\n+            try (InputStream zin = zf.getInputStream(zae)) {\n                 while ((readNow = zin.read(buf, 0, buf.length)) > 0) {\n                     // testing all bytes for a value of 0 is going to take\n                     // too long, just pick a few ones randomly\n                     }\n                     read += readNow;\n                 }\n-            } finally {\n-                zin.close();\n             }\n             assertEquals(FIVE_BILLION, read);\n             assertFalse(e.hasMoreElements());\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java\n      */\n     @Test\n     public void testReadingOfFirstStoredEntry() throws Exception {\n-        final ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(\"COMPRESS-264.zip\")));\n-        \n-        try {\n+\n+        try (ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(\"COMPRESS-264.zip\")))) {\n             final ZipArchiveEntry ze = in.getNextZipEntry();\n             assertEquals(5, ze.getSize());\n-            assertArrayEquals(new byte[] {'d', 'a', 't', 'a', '\\n'},\n-                              IOUtils.toByteArray(in));\n-        } finally {\n-            in.close();\n+            assertArrayEquals(new byte[] { 'd', 'a', 't', 'a', '\\n' },\n+                    IOUtils.toByteArray(in));\n         }\n     }\n \n      */\n     @Test\n     public void testMessageWithCorruptFileName() throws Exception {\n-        final ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(\"COMPRESS-351.zip\")));\n-        try {\n+        try (ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(\"COMPRESS-351.zip\")))) {\n             ZipArchiveEntry ze = in.getNextZipEntry();\n             while (ze != null) {\n                 ze = in.getNextZipEntry();\n         } catch (final EOFException ex) {\n             final String m = ex.getMessage();\n             assertTrue(m.startsWith(\"Truncated ZIP entry: ?2016\")); // the first character is not printable\n-        } finally {\n-            in.close();\n         }\n     }\n \n     @Test\n     public void testUnzipBZip2CompressedEntry() throws Exception {\n-        final ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(\"bzip2-zip.zip\")));\n-        \n-        try {\n+\n+        try (ZipArchiveInputStream in = new ZipArchiveInputStream(new FileInputStream(getFile(\"bzip2-zip.zip\")))) {\n             final ZipArchiveEntry ze = in.getNextZipEntry();\n             assertEquals(42, ze.getSize());\n             final byte[] expected = new byte[42];\n-            Arrays.fill(expected , (byte)'a');\n+            Arrays.fill(expected, (byte) 'a');\n             assertArrayEquals(expected, IOUtils.toByteArray(in));\n-        } finally {\n-            in.close();\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java\n     @Test\n     public void testConcatenatedStreamsReadFirstOnly() throws Exception {\n         final File input = getFile(\"multiple.bz2\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n-            final CompressorInputStream in = new CompressorStreamFactory()\n-                .createCompressorInputStream(\"bzip2\", is);\n-            try {\n+        try (InputStream is = new FileInputStream(input)) {\n+            try (CompressorInputStream in = new CompressorStreamFactory()\n+                    .createCompressorInputStream(\"bzip2\", is)) {\n                 assertEquals('a', in.read());\n                 assertEquals(-1, in.read());\n-            } finally {\n-                in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testConcatenatedStreamsReadFully() throws Exception {\n         final File input = getFile(\"multiple.bz2\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n-            final CompressorInputStream in =\n-                new BZip2CompressorInputStream(is, true);\n-            try {\n+        try (InputStream is = new FileInputStream(input)) {\n+            try (CompressorInputStream in = new BZip2CompressorInputStream(is, true)) {\n                 assertEquals('a', in.read());\n                 assertEquals('b', in.read());\n                 assertEquals(0, in.available());\n                 assertEquals(-1, in.read());\n-            } finally {\n-                in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testCOMPRESS131() throws Exception {\n         final File input = getFile(\"COMPRESS-131.bz2\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n-            final CompressorInputStream in =\n-                new BZip2CompressorInputStream(is, true);\n-            try {\n+        try (InputStream is = new FileInputStream(input)) {\n+            try (CompressorInputStream in = new BZip2CompressorInputStream(is, true)) {\n                 int l = 0;\n-                while(in.read() != -1) {\n+                while (in.read() != -1) {\n                     l++;\n                 }\n                 assertEquals(539, l);\n-            } finally {\n-                in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java\n     public void testDeflateCreation()  throws Exception {\n         final File input = getFile(\"test1.xml\");\n         final File output = new File(dir, \"test1.xml.deflatez\");\n-        final OutputStream out = new FileOutputStream(output);\n-        try {\n-            final CompressorOutputStream cos = new CompressorStreamFactory()\n-                .createCompressorOutputStream(\"deflate\", out); // zlib header is used by default\n-            try {\n+        try (OutputStream out = new FileOutputStream(output)) {\n+            try (CompressorOutputStream cos = new CompressorStreamFactory()\n+                    .createCompressorOutputStream(\"deflate\", out)) {\n                 IOUtils.copy(new FileInputStream(input), cos);\n-            } finally {\n-                cos.close();\n             }\n-        } finally {\n-            out.close();\n         }\n     }\n \n     public void testRawDeflateCreation()  throws Exception {\n         final File input = getFile(\"test1.xml\");\n         final File output = new File(dir, \"test1.xml.deflate\");\n-        final OutputStream out = new FileOutputStream(output);\n-        try {\n+        try (OutputStream out = new FileOutputStream(output)) {\n             final DeflateParameters params = new DeflateParameters();\n             params.setWithZlibHeader(false);\n-            final CompressorOutputStream cos = new DeflateCompressorOutputStream(out, params);\n-            try {\n+            try (CompressorOutputStream cos = new DeflateCompressorOutputStream(out, params)) {\n                 IOUtils.copy(new FileInputStream(input), cos);\n-            } finally {\n-                cos.close();\n             }\n-        } finally {\n-            out.close();\n         }\n     }\n \n     public void testDeflateUnarchive() throws Exception {\n         final File input = getFile(\"bla.tar.deflatez\");\n         final File output = new File(dir, \"bla.tar\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final CompressorInputStream in = new CompressorStreamFactory()\n-                .createCompressorInputStream(\"deflate\", is); // zlib header is expected by default\n+                    .createCompressorInputStream(\"deflate\", is); // zlib header is expected by default\n             FileOutputStream out = null;\n             try {\n                 out = new FileOutputStream(output);\n                 }\n                 in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n \n     public void testRawDeflateUnarchive() throws Exception {\n         final File input = getFile(\"bla.tar.deflate\");\n         final File output = new File(dir, \"bla.tar\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final DeflateParameters params = new DeflateParameters();\n             params.setWithZlibHeader(false);\n             final CompressorInputStream in = new DeflateCompressorInputStream(is, params);\n                 }\n                 in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n     private void testUnarchive(final StreamWrapper<CompressorInputStream> wrapper) throws Exception {\n         final File input = getFile(\"bla.tar.sz\");\n         final File output = new File(dir, \"bla.tar\");\n-        final FileInputStream is = new FileInputStream(input);\n-        try {\n+        try (FileInputStream is = new FileInputStream(input)) {\n             // the intermediate BufferedInputStream is there for mark\n             // support in the autodetection test\n             final CompressorInputStream in = wrapper.wrap(new BufferedInputStream(is));\n                 }\n                 in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n         final File original = getFile(\"bla.tar\");\n-        final FileInputStream written = new FileInputStream(output);\n-        try {\n-            final FileInputStream orig = new FileInputStream(original);\n-            try {\n+        try (FileInputStream written = new FileInputStream(output)) {\n+            try (FileInputStream orig = new FileInputStream(original)) {\n                 assertArrayEquals(IOUtils.toByteArray(written),\n-                                  IOUtils.toByteArray(orig));\n-            } finally {\n-                orig.close();\n+                        IOUtils.toByteArray(orig));\n             }\n-        } finally {\n-            written.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/GZipTestCase.java\n     public void testGzipCreation()  throws Exception {\n         final File input = getFile(\"test1.xml\");\n         final File output = new File(dir, \"test1.xml.gz\");\n-        final OutputStream out = new FileOutputStream(output);\n-        try {\n-            final CompressorOutputStream cos = new CompressorStreamFactory()\n-                .createCompressorOutputStream(\"gz\", out);\n-            try {\n+        try (OutputStream out = new FileOutputStream(output)) {\n+            try (CompressorOutputStream cos = new CompressorStreamFactory()\n+                    .createCompressorOutputStream(\"gz\", out)) {\n                 IOUtils.copy(new FileInputStream(input), cos);\n-            } finally {\n-                cos.close();\n-            }\n-        } finally {\n-            out.close();\n+            }\n         }\n     }\n \n     public void testGzipUnarchive() throws Exception {\n         final File input = getFile(\"bla.tgz\");\n         final File output = new File(dir, \"bla.tar\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final CompressorInputStream in = new CompressorStreamFactory()\n-                .createCompressorInputStream(\"gz\", is);\n+                    .createCompressorInputStream(\"gz\", is);\n             FileOutputStream out = null;\n             try {\n                 out = new FileOutputStream(output);\n                 }\n                 in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testConcatenatedStreamsReadFirstOnly() throws Exception {\n         final File input = getFile(\"multiple.gz\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n-            final CompressorInputStream in = new CompressorStreamFactory()\n-                .createCompressorInputStream(\"gz\", is);\n-            try {\n+        try (InputStream is = new FileInputStream(input)) {\n+            try (CompressorInputStream in = new CompressorStreamFactory()\n+                    .createCompressorInputStream(\"gz\", is)) {\n                 assertEquals('a', in.read());\n                 assertEquals(-1, in.read());\n-            } finally {\n-                in.close();\n-            }\n-        } finally {\n-            is.close();\n+            }\n         }\n     }\n \n     @Test\n     public void testConcatenatedStreamsReadFully() throws Exception {\n         final File input = getFile(\"multiple.gz\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n-            final CompressorInputStream in =\n-                new GzipCompressorInputStream(is, true);\n-            try {\n+        try (InputStream is = new FileInputStream(input)) {\n+            try (CompressorInputStream in = new GzipCompressorInputStream(is, true)) {\n                 assertEquals('a', in.read());\n                 assertEquals('b', in.read());\n                 assertEquals(0, in.available());\n                 assertEquals(-1, in.read());\n-            } finally {\n-                in.close();\n-            }\n-        } finally {\n-            is.close();\n+            }\n         }\n     }\n \n \n     @Test\n     public void testInteroperabilityWithGzipCompressorInputStream() throws Exception {\n-        final FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"));\n         byte[] content;\n-        try {\n+        try (FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"))) {\n             content = IOUtils.toByteArray(fis);\n-        } finally {\n-            fis.close();\n         }\n         \n         final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n \n     @Test\n     public void testInteroperabilityWithGZIPInputStream() throws Exception {\n-        final FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"));\n         byte[] content;\n-        try {\n+        try (FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"))) {\n             content = IOUtils.toByteArray(fis);\n-        } finally {\n-            fis.close();\n         }\n         \n         final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n     }\n \n     private void testExtraFlags(final int compressionLevel, final int flag) throws Exception {\n-        final FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"));\n         byte[] content;\n-        try {\n+        try (FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"))) {\n             content = IOUtils.toByteArray(fis);\n-        } finally {\n-            fis.close();\n         }\n         \n         final ByteArrayOutputStream bout = new ByteArrayOutputStream();\n         parameters.setOperatingSystem(13);\n         parameters.setFilename(\"test3.xml\");\n         parameters.setComment(\"Umlaute m\u00f6glich?\");\n-        final GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters);\n-        final FileInputStream fis = new FileInputStream(getFile(\"test3.xml\"));\n-        try {\n+        try (GzipCompressorOutputStream out = new GzipCompressorOutputStream(bout, parameters); FileInputStream fis = new FileInputStream(getFile(\"test3\" +\n+                \".xml\"))) {\n             IOUtils.copy(fis, out);\n-        } finally {\n-            fis.close();\n-            out.close();\n         }\n         \n         final GzipCompressorInputStream input =\n--- a/src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/LZMATestCase.java\n     public void testLZMAUnarchive() throws Exception {\n         final File input = getFile(\"bla.tar.lzma\");\n         final File output = new File(dir, \"bla.tar\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final CompressorInputStream in = new LZMACompressorInputStream(is);\n             copy(in, output);\n-        } finally {\n-            is.close();\n         }\n     }\n \n     public void testLZMAUnarchiveWithAutodetection() throws Exception {\n         final File input = getFile(\"bla.tar.lzma\");\n         final File output = new File(dir, \"bla.tar\");\n-        final InputStream is = new BufferedInputStream(new FileInputStream(input));\n-        try {\n+        try (InputStream is = new BufferedInputStream(new FileInputStream(input))) {\n             final CompressorInputStream in = new CompressorStreamFactory()\n-                .createCompressorInputStream(is);\n+                    .createCompressorInputStream(is);\n             copy(in, output);\n-        } finally {\n-            is.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java\n     private void jarUnarchiveAll(final boolean useFile, final Pack200Strategy mode)\n         throws Exception {\n         final File input = getFile(\"bla.pack\");\n-        final InputStream is = useFile\n-            ? new Pack200CompressorInputStream(input, mode)\n-            : new Pack200CompressorInputStream(new FileInputStream(input),\n-                                               mode);\n-        try {\n+        try (InputStream is = useFile\n+                ? new Pack200CompressorInputStream(input, mode)\n+                : new Pack200CompressorInputStream(new FileInputStream(input),\n+                mode)) {\n             final ArchiveInputStream in = new ArchiveStreamFactory()\n-                .createArchiveInputStream(\"jar\", is);\n+                    .createArchiveInputStream(\"jar\", is);\n \n             ArchiveEntry entry = in.getNextEntry();\n             while (entry != null) {\n             }\n \n             in.close();\n-        } finally {\n-            is.close();\n         }\n     }\n \n         final File file1 = getFile(\"test1.xml\");\n         final File file2 = getFile(\"test2.xml\");\n \n-        final OutputStream out = \n-            new Pack200CompressorOutputStream(new FileOutputStream(output),\n-                                              mode);\n-        try {\n+        try (OutputStream out = new Pack200CompressorOutputStream(new FileOutputStream(output),\n+                mode)) {\n             final ArchiveOutputStream os = new ArchiveStreamFactory()\n-                .createArchiveOutputStream(\"jar\", out);\n+                    .createArchiveOutputStream(\"jar\", out);\n \n             os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n             IOUtils.copy(new FileInputStream(file1), os);\n             os.closeArchiveEntry();\n \n             os.close();\n-        } finally {\n-            out.close();\n-        }\n-\n-        final InputStream is = new Pack200CompressorInputStream(output);\n-        try {\n+        }\n+\n+        try (InputStream is = new Pack200CompressorInputStream(output)) {\n             final ArchiveInputStream in = new ArchiveStreamFactory()\n-                .createArchiveInputStream(\"jar\", is);\n+                    .createArchiveInputStream(\"jar\", is);\n             final List<String> files = new ArrayList<>();\n             files.add(\"testdata/test1.xml\");\n             files.add(\"testdata/test2.xml\");\n             checkArchiveContent(in, files);\n             in.close();\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testGoodSignature() throws Exception {\n-        final InputStream is = new FileInputStream(getFile(\"bla.pack\"));\n-        try {\n+        try (InputStream is = new FileInputStream(getFile(\"bla.pack\"))) {\n             final byte[] sig = new byte[4];\n             is.read(sig);\n             assertTrue(Pack200CompressorInputStream.matches(sig, 4));\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testBadSignature() throws Exception {\n-        final InputStream is = new FileInputStream(getFile(\"bla.jar\"));\n-        try {\n+        try (InputStream is = new FileInputStream(getFile(\"bla.jar\"))) {\n             final byte[] sig = new byte[4];\n             is.read(sig);\n             assertFalse(Pack200CompressorInputStream.matches(sig, 4));\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testShortSignature() throws Exception {\n-        final InputStream is = new FileInputStream(getFile(\"bla.pack\"));\n-        try {\n+        try (InputStream is = new FileInputStream(getFile(\"bla.pack\"))) {\n             final byte[] sig = new byte[2];\n             is.read(sig);\n             assertFalse(Pack200CompressorInputStream.matches(sig, 2));\n-        } finally {\n-            is.close();\n         }\n     }\n \n     public void testInputStreamMethods() throws Exception {\n         final Map<String, String> m = new HashMap<>();\n         m.put(\"foo\", \"bar\");\n-        final InputStream is =\n-            new Pack200CompressorInputStream(new FileInputStream(getFile(\"bla.jar\")),\n-                                             m);\n-        try {\n+        try (InputStream is = new Pack200CompressorInputStream(new FileInputStream(getFile(\"bla.jar\")),\n+                m)) {\n             // packed file is a jar, which is a zip so it starts with\n             // a local file header\n             assertTrue(is.markSupported());\n             is.reset();\n             assertEquals(0x50, is.read());\n             assertTrue(is.available() > 0);\n-        } finally {\n-            is.close();\n         }\n     }\n \n         final File output = new File(dir, \"bla.pack\");\n         final Map<String, String> m = new HashMap<>();\n         m.put(\"foo\", \"bar\");\n-        final OutputStream out = new FileOutputStream(output);\n-        try {\n+        try (OutputStream out = new FileOutputStream(output)) {\n             final OutputStream os = new Pack200CompressorOutputStream(out, m);\n             os.write(1);\n             os.write(new byte[] { 2, 3 });\n             os.close();\n-        } finally {\n-            out.close();\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/XZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/XZTestCase.java\n         System.out.println(\"XZTestCase: HeapMax=\"+max+\" bytes \"+(double)max/(1024*1024)+\" MB\");\n         final File input = getFile(\"test1.xml\");\n         final File output = new File(dir, \"test1.xml.xz\");\n-        final OutputStream out = new FileOutputStream(output);\n-        try {\n-            final CompressorOutputStream cos = new CompressorStreamFactory()\n-                .createCompressorOutputStream(\"xz\", out);\n-            try {\n+        try (OutputStream out = new FileOutputStream(output)) {\n+            try (CompressorOutputStream cos = new CompressorStreamFactory()\n+                    .createCompressorOutputStream(\"xz\", out)) {\n                 IOUtils.copy(new FileInputStream(input), cos);\n-            } finally {\n-                cos.close();\n             }\n-        } finally {\n-            out.close();\n         }\n     }\n \n     public void testXZUnarchive() throws Exception {\n         final File input = getFile(\"bla.tar.xz\");\n         final File output = new File(dir, \"bla.tar\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final CompressorInputStream in = new CompressorStreamFactory()\n-                .createCompressorInputStream(\"xz\", is);\n+                    .createCompressorInputStream(\"xz\", is);\n             FileOutputStream out = null;\n             try {\n                 out = new FileOutputStream(output);\n                 }\n                 in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testConcatenatedStreamsReadFirstOnly() throws Exception {\n         final File input = getFile(\"multiple.xz\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n-            final CompressorInputStream in = new CompressorStreamFactory()\n-                .createCompressorInputStream(\"xz\", is);\n-            try {\n+        try (InputStream is = new FileInputStream(input)) {\n+            try (CompressorInputStream in = new CompressorStreamFactory()\n+                    .createCompressorInputStream(\"xz\", is)) {\n                 assertEquals('a', in.read());\n                 assertEquals(-1, in.read());\n-            } finally {\n-                in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void testConcatenatedStreamsReadFully() throws Exception {\n         final File input = getFile(\"multiple.xz\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n-            final CompressorInputStream in =\n-                new XZCompressorInputStream(is, true);\n-            try {\n+        try (InputStream is = new FileInputStream(input)) {\n+            try (CompressorInputStream in = new XZCompressorInputStream(is, true)) {\n                 assertEquals('a', in.read());\n                 assertEquals('b', in.read());\n                 assertEquals(0, in.available());\n                 assertEquals(-1, in.read());\n-            } finally {\n-                in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/ZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/ZTestCase.java\n     private void testUnarchive(final StreamWrapper<CompressorInputStream> wrapper) throws Exception {\n         final File input = getFile(\"bla.tar.Z\");\n         final File output = new File(dir, \"bla.tar\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final InputStream in = wrapper.wrap(is);\n             FileOutputStream out = null;\n             try {\n                 }\n                 in.close();\n             }\n-        } finally {\n-            is.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java\n \n     @Test(expected = IOException.class)\n     public void shouldThrowAnIOExceptionWhenAppliedToAZipFile() throws Exception {\n-        final FileInputStream in = new FileInputStream(getFile(\"bla.zip\"));\n-        try {\n+        try (FileInputStream in = new FileInputStream(getFile(\"bla.zip\"))) {\n             new BZip2CompressorInputStream(in);\n-        } finally {\n-            in.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStreamTest.java\n     @Test\n     public void availableShouldReturnNonZero() throws IOException {\n         final File input = AbstractTestCase.getFile(\"bla.tar.deflatez\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final DeflateCompressorInputStream in =\n-                new DeflateCompressorInputStream(is);\n+                    new DeflateCompressorInputStream(is);\n             Assert.assertTrue(in.available() > 0);\n             in.close();\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void shouldBeAbleToSkipAByte() throws IOException {\n         final File input = AbstractTestCase.getFile(\"bla.tar.deflatez\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final DeflateCompressorInputStream in =\n-                new DeflateCompressorInputStream(is);\n+                    new DeflateCompressorInputStream(is);\n             Assert.assertEquals(1, in.skip(1));\n             in.close();\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void singleByteReadWorksAsExpected() throws IOException {\n         final File input = AbstractTestCase.getFile(\"bla.tar.deflatez\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final DeflateCompressorInputStream in =\n-                new DeflateCompressorInputStream(is);\n+                    new DeflateCompressorInputStream(is);\n             // tar header starts with filename \"test1.xml\"\n             Assert.assertEquals('t', in.read());\n             in.close();\n-        } finally {\n-            is.close();\n         }\n     }\n \n     @Test\n     public void singleByteReadReturnsMinusOneAtEof() throws IOException {\n         final File input = AbstractTestCase.getFile(\"bla.tar.deflatez\");\n-        final InputStream is = new FileInputStream(input);\n-        try {\n+        try (InputStream is = new FileInputStream(input)) {\n             final DeflateCompressorInputStream in =\n-                new DeflateCompressorInputStream(is);\n+                    new DeflateCompressorInputStream(is);\n             IOUtils.toByteArray(in);\n             Assert.assertEquals(-1, in.read());\n             in.close();\n-        } finally {\n-            is.close();\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/pack200/Pack200UtilsTest.java\n         try {\n             Pack200Utils.normalize(input, output[1],\n                                    new HashMap<String, String>());\n-            final FileInputStream is = new FileInputStream(output[1]);\n-            try {\n+            try (FileInputStream is = new FileInputStream(output[1])) {\n                 final ArchiveInputStream in = new ArchiveStreamFactory()\n-                    .createArchiveInputStream(\"jar\", is);\n+                        .createArchiveInputStream(\"jar\", is);\n \n                 ArchiveEntry entry = in.getNextEntry();\n                 while (entry != null) {\n                 }\n \n                 in.close();\n-            } finally {\n-                is.close();\n             }\n         } finally {\n             output[1].delete();\n--- a/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n         assertFalse(FramedSnappyCompressorInputStream.matches(new byte[10], 10));\n         final byte[] b = new byte[12];\n         final File input = getFile(\"bla.tar.sz\");\n-        final FileInputStream in = new FileInputStream(input);\n-        try {\n+        try (FileInputStream in = new FileInputStream(input)) {\n             IOUtils.readFully(in, b);\n-        } finally {\n-            in.close();\n         }\n         assertFalse(FramedSnappyCompressorInputStream.matches(b, 9));\n         assertTrue(FramedSnappyCompressorInputStream.matches(b, 10));\n      */\n     @Test\n     public void testLoremIpsum() throws Exception {\n-        final FileInputStream isSz = new FileInputStream(getFile(\"lorem-ipsum.txt.sz\"));\n         final File outputSz = new File(dir, \"lorem-ipsum.1\");\n         final File outputGz = new File(dir, \"lorem-ipsum.2\");\n-        try {\n+        try (FileInputStream isSz = new FileInputStream(getFile(\"lorem-ipsum.txt.sz\"))) {\n             InputStream in = new FramedSnappyCompressorInputStream(isSz);\n             FileOutputStream out = null;\n             try {\n                 }\n                 in.close();\n             }\n-            final FileInputStream isGz = new FileInputStream(getFile(\"lorem-ipsum.txt.gz\"));\n-            try {\n+            try (FileInputStream isGz = new FileInputStream(getFile(\"lorem-ipsum.txt.gz\"))) {\n                 in = new GzipCompressorInputStream(isGz);\n                 try {\n                     out = new FileOutputStream(outputGz);\n                     }\n                     in.close();\n                 }\n-            } finally {\n-                isGz.close();\n             }\n-        } finally {\n-            isSz.close();\n         }\n \n-        final FileInputStream sz = new FileInputStream(outputSz);\n-        try {\n-            final FileInputStream gz = new FileInputStream(outputGz);\n-            try {\n+        try (FileInputStream sz = new FileInputStream(outputSz)) {\n+            try (FileInputStream gz = new FileInputStream(outputGz)) {\n                 assertArrayEquals(IOUtils.toByteArray(sz),\n-                                  IOUtils.toByteArray(gz));\n-            } finally {\n-                gz.close();\n+                        IOUtils.toByteArray(gz));\n             }\n-        } finally {\n-            sz.close();\n         }\n     }\n \n     @Test\n     public void testRemainingChunkTypes() throws Exception {\n-        final FileInputStream isSz = new FileInputStream(getFile(\"mixed.txt.sz\"));\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        try {\n+        try (FileInputStream isSz = new FileInputStream(getFile(\"mixed.txt.sz\"))) {\n             final FramedSnappyCompressorInputStream in = new FramedSnappyCompressorInputStream(isSz);\n             IOUtils.copy(in, out);\n             out.close();\n-        } finally {\n-            isSz.close();\n         }\n \n         assertArrayEquals(new byte[] { '1', '2', '3', '4',\n \n     @Test\n     public void testAvailable() throws Exception {\n-        final FileInputStream isSz = new FileInputStream(getFile(\"mixed.txt.sz\"));\n-        try {\n+        try (FileInputStream isSz = new FileInputStream(getFile(\"mixed.txt.sz\"))) {\n             final FramedSnappyCompressorInputStream in = new FramedSnappyCompressorInputStream(isSz);\n             assertEquals(0, in.available()); // no chunk read so far\n             assertEquals('1', in.read());\n             assertEquals('5', in.read());\n             assertEquals(19, in.available()); // remainder of copy\n             in.close();\n-        } finally {\n-            isSz.close();\n         }\n     }\n \n \n     @Test\n     public void readIWAFile() throws Exception {\n-        final ZipFile zip = new ZipFile(getFile(\"testNumbersNew.numbers\"));\n-        try {\n-            final InputStream is = zip.getInputStream(zip.getEntry(\"Index/Document.iwa\"));\n-            try {\n+        try (ZipFile zip = new ZipFile(getFile(\"testNumbersNew.numbers\"))) {\n+            try (InputStream is = zip.getInputStream(zip.getEntry(\"Index/Document.iwa\"))) {\n                 final FramedSnappyCompressorInputStream in =\n-                    new FramedSnappyCompressorInputStream(is, FramedSnappyDialect.IWORK_ARCHIVE);\n+                        new FramedSnappyCompressorInputStream(is, FramedSnappyDialect.IWORK_ARCHIVE);\n                 FileOutputStream out = null;\n                 try {\n                     out = new FileOutputStream(new File(dir, \"snappyIWATest.raw\"));\n                     }\n                     in.close();\n                 }\n-            } finally {\n-                is.close();\n             }\n-        } finally {\n-            zip.close();\n         }\n     }\n ", "timestamp": 1467014565, "metainfo": ""}