{"sha": "72fec65e1c09e14b92a21aae5d0f0dd20e8fe4ef", "log": "make Sonar less unhappy", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java\n \n     private void tryToReadLiteral(int bytesToRead) throws IOException {\n         // min of \"what is still inside the literal\", \"what does the user want\" and \"how muc can fit into the buffer\"\n-        final int reallyTryToRead = (int) Math.min(Math.min(bytesToRead, bytesRemaining),\n-                                                   buf.length - writeIndex);\n+        final int reallyTryToRead = Math.min((int) Math.min(bytesToRead, bytesRemaining),\n+                                             buf.length - writeIndex);\n         final int bytesRead = reallyTryToRead > 0\n             ? IOUtils.readFully(in, buf, writeIndex, reallyTryToRead)\n             : 0 /* happens for bytesRemaining == 0 */;\n     private void tryToCopy(int bytesToCopy) {\n         // this will fit into the buffer without sliding and not\n         // require more than is available inside the back-reference\n-        int copy = (int) Math.min(Math.min(bytesToCopy, bytesRemaining),\n-                                  buf.length - writeIndex);\n+        int copy = Math.min((int) Math.min(bytesToCopy, bytesRemaining),\n+                            buf.length - writeIndex);\n         if (copy == 0) {\n             // NOP\n         } else if (backReferenceOffset == 1) { // pretty common special case", "timestamp": 1486573493, "metainfo": ""}