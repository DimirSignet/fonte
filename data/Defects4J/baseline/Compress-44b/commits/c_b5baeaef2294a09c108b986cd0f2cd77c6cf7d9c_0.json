{"sha": "b5baeaef2294a09c108b986cd0f2cd77c6cf7d9c", "log": "when using more than one codec the codecs must be combined using 'binding pairs' and the 'compressed size' of each codec must be recorded  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n import java.util.BitSet;\n import java.util.Collections;\n import java.util.Date;\n+import java.util.HashMap;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.LinkedList;\n+import java.util.Map;\n import java.util.zip.CRC32;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n     private long fileBytesWritten = 0;\n     private boolean finished = false;\n     private CountingOutputStream currentOutputStream;\n+    private CountingOutputStream[] additionalCountingStreams;\n     private Iterable<? extends SevenZMethodConfiguration> contentMethods =\n             Collections.singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2));\n+    private Map<SevenZArchiveEntry, long[]> additionalSizes = new HashMap<SevenZArchiveEntry, long[]>();\n     \n     /**\n      * Opens file to write a 7z archive to.\n      * @since 1.8\n      */\n     public void setContentMethods(Iterable<? extends SevenZMethodConfiguration> methods) {\n-        this.contentMethods = methods;\n+        this.contentMethods = reverse(methods);\n     }\n \n     /**\n             entry.setCrcValue(crc32.getValue());\n             entry.setCompressedCrcValue(compressedCrc32.getValue());\n             entry.setHasCrc(true);\n+            if (additionalCountingStreams != null) {\n+                long[] sizes = new long[additionalCountingStreams.length];\n+                for (int i = 0; i < additionalCountingStreams.length; i++) {\n+                    sizes[i] = additionalCountingStreams[i].getBytesWritten();\n+                }\n+                additionalSizes.put(entry, sizes);\n+            }\n         } else {\n             entry.setHasStream(false);\n             entry.setSize(0);\n             entry.setHasCrc(false);\n         }\n         currentOutputStream = null;\n+        additionalCountingStreams = null;\n         crc32.reset();\n         compressedCrc32.reset();\n         fileBytesWritten = 0;\n \n     private CountingOutputStream setupFileOutputStream() throws IOException {\n         OutputStream out = new OutputStreamWrapper();\n-        for (SevenZMethodConfiguration m : reverse(contentMethods)) {\n+        ArrayList<CountingOutputStream> moreStreams = new ArrayList<CountingOutputStream>();\n+        boolean first = true;\n+        for (SevenZMethodConfiguration m : contentMethods) {\n+            if (!first) {\n+                CountingOutputStream cos = new CountingOutputStream(out);\n+                moreStreams.add(cos);\n+                out = cos;\n+            }\n             out = Coders.addEncoder(out, m.getMethod(), m.getOptions());\n+            first = false;\n+        }\n+        if (!moreStreams.isEmpty()) {\n+            additionalCountingStreams = moreStreams.toArray(new CountingOutputStream[moreStreams.size()]);\n         }\n         return new CountingOutputStream(out) {\n             @Override\n         header.write(NID.kCodersUnpackSize);\n         for (final SevenZArchiveEntry entry : files) {\n             if (entry.hasStream()) {\n+                long[] moreSizes = additionalSizes.get(entry);\n+                if (moreSizes != null) {\n+                    for (long s : moreSizes) {\n+                        writeUint64(header, s);\n+                    }\n+                }\n                 writeUint64(header, entry.getSize());\n             }\n         }\n \n         writeUint64(header, numCoders);\n         header.write(bos.toByteArray());\n+        for (int i = 0; i < numCoders - 1; i++) {\n+            writeUint64(header, i + 1);\n+            writeUint64(header, i);\n+        }\n     }\n \n     private void writeSingleCodec(SevenZMethodConfiguration m, OutputStream bos) throws IOException {", "timestamp": 1393275164, "metainfo": ""}