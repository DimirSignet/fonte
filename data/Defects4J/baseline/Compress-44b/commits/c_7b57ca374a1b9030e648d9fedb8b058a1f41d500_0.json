{"sha": "7b57ca374a1b9030e648d9fedb8b058a1f41d500", "log": "move bzip2 tests to compress component   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/compress/bzip2/example/Bzip2Compress.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/test/org/apache/commons/compress/bzip2/example/Bzip2Compress.java,v 1.1 2003/12/02 20:44:24 dirkv Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/12/02 20:44:24 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.compress.bzip2.example;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.bzip2.CBZip2OutputStream;\n+\n+/**\n+ * This simple example shows how to use the Bzip2 classes to compress a file.\n+ *\n+ * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 20:44:24 $\n+ */\n+public class Bzip2Compress\n+{\n+    public static void main( final String[] args )\n+        throws Exception\n+    {\n+        if( 2 != args.length )\n+        {\n+            System.out.println( \"java Bzip2Compress <input> <output>\" );\n+            System.exit( 1 );\n+        }\n+\n+        final File source = new File( args[ 0 ] );\n+        final File destination = new File( args[ 1 ] );\n+        final CBZip2OutputStream output =\n+            new CBZip2OutputStream( new FileOutputStream( destination ) );\n+        final FileInputStream input = new FileInputStream( source );\n+        copy( input, output );\n+        input.close();\n+        output.close();\n+    }\n+\n+    /**\n+     * Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.\n+     */\n+    private static void copy( final InputStream input,\n+                              final OutputStream output )\n+        throws IOException\n+    {\n+        final byte[] buffer = new byte[ 8024 ];\n+        int n = 0;\n+        while( -1 != ( n = input.read( buffer ) ) )\n+        {\n+            output.write( buffer, 0, n );\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/compress/bzip2/example/Bzip2Uncompress.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/test/org/apache/commons/compress/bzip2/example/Bzip2Uncompress.java,v 1.1 2003/12/02 20:44:24 dirkv Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/12/02 20:44:24 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.compress.bzip2.example;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.bzip2.CBZip2InputStream;\n+\n+/**\n+ * This simple example shows how to use the Bzip2 classes to uncompress a file.\n+ *\n+ * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n+ * @author <a href=\"mailto:nicolaken@apache.org\">Nicola Ken Barozzi</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 20:44:24 $\n+ */\n+public class Bzip2Uncompress\n+{\n+    public static void main( final String[] args )\n+    {\n+      try\n+      {\n+        if( 2 != args.length )\n+        {\n+            System.out.println( \"java Bzip2Uncompress <input> <output>\" );\n+            System.exit( 1 );\n+        }\n+        final File source = new File( args[ 0 ] );\n+        final File destination = new File( args[ 1 ] );\n+        final FileOutputStream output =\n+            new FileOutputStream( destination );\n+        final CBZip2InputStream input = new CBZip2InputStream( new FileInputStream( source ) );\n+        copy( input, output );\n+        input.close();\n+        output.close();\n+      }catch(Exception e){\n+        e.printStackTrace();\n+        System.exit(1);       \n+      \n+      }\n+    }\n+\n+    /**\n+     * Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.\n+     */\n+    private static void copy( final InputStream input,\n+                              final OutputStream output )\n+        throws IOException\n+    {\n+        final byte[] buffer = new byte[ 8024 ];\n+        int n = 0;\n+        while( -1 != ( n = input.read( buffer ) ) )\n+        {\n+            output.write( buffer, 0, n );\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/compress/bzip2/test/BzipTestCase.java\n+/*\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons-sandbox//compress/src/test/org/apache/commons/compress/bzip2/test/BzipTestCase.java,v 1.1 2003/12/02 20:44:24 dirkv Exp $\n+ * $Revision: 1.1 $\n+ * $Date: 2003/12/02 20:44:24 $\n+ *\n+ * ====================================================================\n+ *\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowledgement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowledgement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.commons.compress.bzip2.test;\n+\n+import java.io.BufferedInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import junit.framework.TestCase;\n+import org.apache.commons.compress.bzip2.CBZip2InputStream;\n+import org.apache.commons.compress.bzip2.CBZip2OutputStream;\n+\n+/**\n+ * A test the stress tested the BZip implementation to verify\n+ * that it behaves correctly.\n+ *\n+ * @author <a href=\"mailto:peter@apache.org\">Peter Donald</a>\n+ * @version $Revision: 1.1 $ $Date: 2003/12/02 20:44:24 $\n+ */\n+public class BzipTestCase\n+    extends TestCase\n+{\n+    private static final byte[] HEADER = new byte[]{(byte)'B', (byte)'Z'};\n+\n+    public BzipTestCase( final String name )\n+    {\n+        super( name );\n+    }\n+\n+    public void testBzipOutputStream()\n+        throws Exception\n+    {\n+        final InputStream input = getInputStream( \"asf-logo-huge.tar\" );\n+        final File outputFile = getOutputFile( \".tar.bz2\" );\n+        final OutputStream output = new FileOutputStream( outputFile );\n+        final CBZip2OutputStream packedOutput = getPackedOutput( output );\n+        copy( input, packedOutput );\n+        shutdownStream( input );\n+        shutdownStream( packedOutput );\n+        shutdownStream( output );\n+        compareContents( \"asf-logo-huge.tar.bz2\", outputFile );\n+        forceDelete( outputFile );\n+    }\n+\n+    private void forceDelete( final File outputFile ) throws IOException\n+    {\n+        if( !outputFile.delete() )\n+        {\n+            final String message = \"File \" + outputFile + \" unable to be deleted.\";\n+            throw new IOException( message );\n+        }\n+    }\n+\n+    public void testBzipInputStream()\n+        throws Exception\n+    {\n+        final InputStream input = getInputStream( \"asf-logo-huge.tar.bz2\" );\n+        final File outputFile = getOutputFile( \".tar\" );\n+        final OutputStream output = new FileOutputStream( outputFile );\n+        final CBZip2InputStream packedInput = getPackedInput( input );\n+        copy( packedInput, output );\n+        shutdownStream( input );\n+        shutdownStream( packedInput );\n+        shutdownStream( output );\n+        compareContents( \"asf-logo-huge.tar\", outputFile );\n+        forceDelete( outputFile );\n+    }\n+\n+    /**\n+     * Copy bytes from an <code>InputStream</code> to an <code>OutputStream</code>.\n+     */\n+    private void copy( final InputStream input,\n+                       final OutputStream output )\n+        throws IOException\n+    {\n+        final byte[] buffer = new byte[ 8024 ];\n+        int n = 0;\n+        while( -1 != ( n = input.read( buffer ) ) )\n+        {\n+            output.write( buffer, 0, n );\n+        }\n+    }\n+\n+    private void compareContents( final String initial, final File generated )\n+        throws Exception\n+    {\n+        final InputStream input1 = getInputStream( initial );\n+        final InputStream input2 = new FileInputStream( generated );\n+        final boolean test = contentEquals( input1, input2 );\n+        shutdownStream( input1 );\n+        shutdownStream( input2 );\n+        assertTrue( \"Contents of \" + initial + \" matches generated version \" + generated, test );\n+    }\n+\n+    private CBZip2InputStream getPackedInput( final InputStream input )\n+        throws IOException\n+    {\n+        final int b1 = input.read();\n+        final int b2 = input.read();\n+        assertEquals( \"Equal header byte1\", b1, 'B' );\n+        assertEquals( \"Equal header byte2\", b2, 'Z' );\n+        return new CBZip2InputStream( input );\n+    }\n+\n+    private CBZip2OutputStream getPackedOutput( final OutputStream output )\n+        throws IOException\n+    {\n+        output.write( HEADER );\n+        return new CBZip2OutputStream( output );\n+    }\n+\n+    private File getOutputFile( final String postfix )\n+        throws IOException\n+    {\n+        final File cwd = new File( \".\" );\n+        return File.createTempFile( \"ant-test\", postfix, cwd );\n+    }\n+\n+    private InputStream getInputStream( final String resource )\n+        throws Exception\n+    {\n+        final String filename =\n+            \"src\" + File.separator + \"test\" + File.separator +\n+            getClass().getName().replace( '.', File.separatorChar );\n+        final String path = getPath( filename );\n+        final File input = new File( path, resource );\n+        return new FileInputStream( input );\n+//        final ClassLoader loader = getClass().getClassLoader();\n+//        return loader.getResourceAsStream( resource );\n+    }\n+\n+    /**\n+     * Compare the contents of two Streams to determine if they are equal or not.\n+     *\n+     * @param input1 the first stream\n+     * @param input2 the second stream\n+     * @return true if the content of the streams are equal or they both don't exist, false otherwise\n+     */\n+    private boolean contentEquals( final InputStream input1,\n+                                   final InputStream input2 )\n+        throws IOException\n+    {\n+        final InputStream bufferedInput1 = new BufferedInputStream( input1 );\n+        final InputStream bufferedInput2 = new BufferedInputStream( input2 );\n+\n+        int ch = bufferedInput1.read();\n+        while( -1 != ch )\n+        {\n+            final int ch2 = bufferedInput2.read();\n+            if( ch != ch2 )\n+            {\n+                return false;\n+            }\n+            ch = bufferedInput1.read();\n+        }\n+\n+        final int ch2 = bufferedInput2.read();\n+        if( -1 != ch2 )\n+        {\n+            return false;\n+        }\n+        else\n+        {\n+            return true;\n+        }\n+    }\n+\n+    private String getPath( final String filepath )\n+    {\n+        final int index = filepath.lastIndexOf( File.separatorChar );\n+        if( -1 == index )\n+        {\n+            return \"\";\n+        }\n+        else\n+        {\n+            return filepath.substring( 0, index );\n+        }\n+    }\n+\n+    /**\n+     * Unconditionally close an <code>OutputStream</code>.\n+     * Equivalent to {@link java.io.OutputStream#close()}, except any exceptions will be ignored.\n+     * @param output A (possibly null) OutputStream\n+     */\n+    private static void shutdownStream( final OutputStream output )\n+    {\n+        if( null == output )\n+        {\n+            return;\n+        }\n+\n+        try\n+        {\n+            output.close();\n+        }\n+        catch( final IOException ioe )\n+        {\n+        }\n+    }\n+\n+    /**\n+     * Unconditionally close an <code>InputStream</code>.\n+     * Equivalent to {@link InputStream#close()}, except any exceptions will be ignored.\n+     * @param input A (possibly null) InputStream\n+     */\n+    private static void shutdownStream( final InputStream input )\n+    {\n+        if( null == input )\n+        {\n+            return;\n+        }\n+\n+        try\n+        {\n+            input.close();\n+        }\n+        catch( final IOException ioe )\n+        {\n+        }\n+    }\n+}", "timestamp": 1070397864, "metainfo": ""}