{"sha": "1b915c70e03035b23b5f1199baf4502437686071", "log": "support writing of BSD dialect AR archives with long file names.  COMPRESS-144  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n         return true;\n     }\n \n-    private static final String BSD_LONGNAME_PREFIX = \"#1/\";\n+    static final String BSD_LONGNAME_PREFIX = \"#1/\";\n     private static final int BSD_LONGNAME_PREFIX_LEN =\n         BSD_LONGNAME_PREFIX.length();\n     private static final String BSD_LONGNAME_PATTERN =\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n  * @NotThreadSafe\n  */\n public class ArArchiveOutputStream extends ArchiveOutputStream {\n+    /** Fail if a long file name is required in the archive. */\n+    public static final int LONGFILE_ERROR = 0;\n+\n+    /** BSD ar extensions are used to store long file names in the archive. */\n+    public static final int LONGFILE_BSD = 1;\n \n     private final OutputStream out;\n     private long archiveOffset = 0;\n     private long entryOffset = 0;\n     private ArArchiveEntry prevEntry;\n     private boolean haveUnclosedEntry = false;\n-    \n+    private int longFileMode = LONGFILE_ERROR;\n+\n     /** indicates if this archive is finished */\n     private boolean finished = false;\n \n     public ArArchiveOutputStream( final OutputStream pOut ) {\n         this.out = pOut;\n+    }\n+\n+    /**\n+     * Set the long file mode.\n+     * This can be LONGFILE_ERROR(0) or LONGFILE_BSD(1).\n+     * This specifies the treatment of long file names (names >= 16).\n+     * Default is LONGFILE_ERROR.\n+     * @param longFileMode the mode to use\n+     * @since Apache Commons Compress 1.3\n+     */\n+    public void setLongFileMode(int longFileMode) {\n+        this.longFileMode = longFileMode;\n     }\n \n     private long writeArchiveHeader() throws IOException {\n         if(finished) {\n             throw new IOException(\"Stream has already been finished\");\n         }\n-        \n+\n         ArArchiveEntry pArEntry = (ArArchiveEntry)pEntry;\n         if (prevEntry == null) {\n             archiveOffset += writeArchiveHeader();\n     private long writeEntryHeader( final ArArchiveEntry pEntry ) throws IOException {\n \n         long offset = 0;\n+        boolean mustAppendName = false;\n \n         final String n = pEntry.getName();\n-        if (n.length() > 16) {\n+        if (LONGFILE_ERROR == longFileMode && n.length() > 16) {\n             throw new IOException(\"filename too long, > 16 chars: \"+n);\n         }\n-        offset += write(n);\n+        if (LONGFILE_BSD == longFileMode && \n+            (n.length() > 16 || n.indexOf(\" \") > -1)) {\n+            mustAppendName = true;\n+            offset += write(ArArchiveInputStream.BSD_LONGNAME_PREFIX\n+                            + String.valueOf(n.length()));\n+        } else {\n+            offset += write(n);\n+        }\n \n         offset = fill(offset, 16, ' ');\n         final String m = \"\" + (pEntry.getLastModified());\n         offset += write(fm);\n \n         offset = fill(offset, 48, ' ');\n-        final String s = \"\" + pEntry.getLength();\n+        final String s =\n+            String.valueOf(pEntry.getLength()\n+                           + (mustAppendName ? n.length() : 0));\n         if (s.length() > 10) {\n             throw new IOException(\"size too long\");\n         }\n         offset = fill(offset, 58, ' ');\n \n         offset += write(ArArchiveEntry.TRAILER);\n+\n+        if (mustAppendName) {\n+            offset += write(n);\n+        }\n \n         return offset;\n     }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.ar;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileOutputStream;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.compress.AbstractTestCase;\n+\n+public class ArArchiveOutputStreamTest extends AbstractTestCase {\n+\n+    public void testLongFileNamesCauseExceptionByDefault() {\n+        try {\n+            ArArchiveOutputStream os =\n+                new ArArchiveOutputStream(new ByteArrayOutputStream());\n+            ArArchiveEntry ae = new ArArchiveEntry(\"this_is_a_long_name.txt\",\n+                                                   0);\n+            os.putArchiveEntry(ae);\n+            fail(\"Expected an exception\");\n+        } catch (IOException ex) {\n+            assertTrue(ex.getMessage().startsWith(\"filename too long\"));\n+        }\n+    }\n+\n+    public void testLongFileNamesWorkUsingBSDDialect() throws Exception {\n+        FileOutputStream fos = null;\n+        ArArchiveOutputStream os = null;\n+        File[] df = createTempDirAndFile();\n+        try {\n+            fos = new FileOutputStream(df[1]);\n+            os = new ArArchiveOutputStream(fos);\n+            os.setLongFileMode(ArArchiveOutputStream.LONGFILE_BSD);\n+            ArArchiveEntry ae = new ArArchiveEntry(\"this_is_a_long_name.txt\",\n+                                                   14);\n+            os.putArchiveEntry(ae);\n+            os.write(new byte[] {\n+                    'H', 'e', 'l', 'l', 'o', ',', ' ',\n+                    'w', 'o', 'r', 'l', 'd', '!', '\\n'\n+                });\n+            os.closeArchiveEntry();\n+            os.close();\n+            os = null;\n+            fos = null;\n+\n+            List<String> expected = new ArrayList<String>();\n+            expected.add(\"this_is_a_long_name.txt\");\n+            checkArchiveContent(df[1], expected);\n+        } finally {\n+            if (os != null) {\n+                os.close();\n+            }\n+            if (fos != null) {\n+                fos.close();\n+            }\n+            rmdir(df[0]);\n+        }\n+    }\n+}", "timestamp": 1312803581, "metainfo": ""}