{"sha": "46701aad76232fb93c31a69b4e02ef598bfd51f1", "log": "if the central directory header holds only one of the size values, the other one must still be set so the internal logic for handling of extra fields doesn't throw an exception creating the local file header data.  COMPRESS-149  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java\n     /** {@inheritDoc} */\n     public void parseFromLocalFileData(byte[] buffer, int offset, int length)\n         throws ZipException {\n+        if (length == 0) {\n+            // no local file data at all, may happen if an archive\n+            // only holds a ZIP64 extended information extra field\n+            // inside the central directory but not inside the local\n+            // file header\n+            return;\n+        }\n         if (length < 2 * DWORD) {\n             throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n                 ze.getExtraField(Zip64ExtendedInformationExtraField\n                                  .HEADER_ID);\n             if (z64 != null) {\n-                z64.reparseCentralDirectoryData(ze.getSize() == ZIP64_MAGIC,\n-                                                ze.getCompressedSize()\n-                                                == ZIP64_MAGIC,\n-                                                offset.headerOffset\n-                                                == ZIP64_MAGIC,\n+                boolean hasUncompressedSize = ze.getSize() == ZIP64_MAGIC;\n+                boolean hasCompressedSize =\n+                    ze.getCompressedSize() == ZIP64_MAGIC;\n+                boolean hasRelativeHeaderOffset = \n+                    offset.headerOffset == ZIP64_MAGIC;\n+                z64.reparseCentralDirectoryData(hasUncompressedSize,\n+                                                hasCompressedSize,\n+                                                hasRelativeHeaderOffset,\n                                                 diskStart == ZIP64_MAGIC_SHORT);\n-                if (ze.getSize() == ZIP64_MAGIC) {\n+\n+                // read ZIP64 values into entry.\n+                // ensure ZIP64 field either knows no or both size\n+                // values so it can create valid local header extra data\n+\n+                if (hasUncompressedSize) {\n                     ze.setSize(z64.getSize().getLongValue());\n-                }\n-                if (ze.getCompressedSize() == ZIP64_MAGIC) {\n+                } else if (hasCompressedSize) {\n+                    z64.setSize(new ZipEightByteInteger(ze.getSize()));\n+                }\n+\n+                if (hasCompressedSize) {\n                     ze.setCompressedSize(z64.getCompressedSize()\n                                          .getLongValue());\n-                }\n-                if (offset.headerOffset == ZIP64_MAGIC) {\n+                } else if (hasUncompressedSize) {\n+                    z64.setCompressedSize(new ZipEightByteInteger(ze.getCompressedSize()));\n+                }\n+\n+                if (hasRelativeHeaderOffset) {\n                     offset.headerOffset =\n                         z64.getRelativeHeaderOffset().getLongValue();\n                 }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n                                        \"5GB_of_Zeros\");\n     }\n \n-    @Ignore\n     @Test public void read5GBOfZerosGeneratedByJava7JarUsingZipFile()\n         throws Throwable {\n         read5GBOfZerosUsingZipFileImpl(get5GBZerosFileGeneratedByJava7Jar(),\n         withTemporaryArchive(\"write100KFilesFile\", write100KFiles, true);\n     }\n \n+    @Ignore\n     @Test public void write100KFilesStream() throws Throwable {\n         withTemporaryArchive(\"write100KFilesStream\", write100KFiles, false);\n     }", "timestamp": 1312457208, "metainfo": ""}