{"sha": "885d2053f4fc29d986904c9b8cfe69bcfbe7b361", "log": "extract \"close and swallow exception\" code to IOUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n                     // autodetection, simply not a TAR\n                     // ignored\n                 } finally {\n-                    if (tais != null) {\n-                        try {\n-                            tais.close();\n-                        } catch (IOException ignored) { // NOPMD\n-                            // ignored\n-                        }\n-                    }\n+                    IOUtils.closeQuietly(tais);\n                 }\n             }\n         } catch (IOException e) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n \n import static org.apache.commons.compress.archivers.zip.ZipConstants.DATA_DESCRIPTOR_MIN_VERSION;\n import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;\n             _raf = new RandomAccessFile(file, \"rw\");\n             _raf.setLength(0);\n         } catch (IOException e) {\n-            if (_raf != null) {\n-                try {\n-                    _raf.close();\n-                } catch (IOException inner) { // NOPMD\n-                    // ignore\n-                }\n-                _raf = null;\n-            }\n+            IOUtils.closeQuietly(_raf);\n+            _raf = null;\n             o = new FileOutputStream(file);\n         }\n         out = o;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n             success = true;\n         } finally {\n             if (!success) {\n-                try {\n-                    closed = true;\n-                    archive.close();\n-                } catch (IOException e2) { // NOPMD\n-                    // swallow, throw the original exception instead\n-                }\n+                closed = true;\n+                IOUtils.closeQuietly(archive);\n             }\n         }\n     }\n      * @param zipfile file to close, can be null\n      */\n     public static void closeQuietly(ZipFile zipfile) {\n-        if (zipfile != null) {\n-            try {\n-                zipfile.close();\n-            } catch (IOException e) { // NOPMD\n-                //ignore, that's why the method is called \"quietly\"\n-            }\n-        }\n+        IOUtils.closeQuietly(zipfile);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java\n import java.util.jar.Pack200;\n \n import org.apache.commons.compress.compressors.CompressorOutputStream;\n+import org.apache.commons.compress.utils.IOUtils;\n \n /**\n  * An output stream that compresses using the Pack200 format.\n                        originalOutput);\n                 success = true;\n             } finally {\n-                if (!success && ji != null) {\n-                    try {\n-                        ji.close();\n-                    } catch (IOException ex) { // NOPMD\n-                        // swallow so original exception isn't masked\n-                    }\n+                if (!success) {\n+                    IOUtils.closeQuietly(ji);\n                 }\n             }\n         }\n--- a/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n package org.apache.commons.compress.utils;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.Closeable;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n         copy(input, output);\n         return output.toByteArray();\n     }\n+\n+    /**\n+     * Closes the given Closeable and swallows any IOException that may occur.\n+     * @param c Closeable to close, can be null\n+     * @since 1.7\n+     */\n+    public static void closeQuietly(Closeable c) {\n+        if (c != null) {\n+            try {\n+                c.close();\n+            } catch (IOException ignored) { // NOPMD\n+            }\n+        }\n+    }\n }", "timestamp": 1388606219, "metainfo": ""}