{"sha": "f25588258e520cbf1d388d3d9b48a4942d3d7c28", "log": "COMPRESS-300 remove protected fields from LZWInputStream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnshrinkingInputStream.java\n     \n     public UnshrinkingInputStream(InputStream inputStream) throws IOException {\n         super(inputStream, ByteOrder.LITTLE_ENDIAN);\n-        setClearCode(codeSize);\n+        setClearCode(DEFAULT_CODE_SIZE);\n         initializeTables(MAX_CODE_SIZE);\n-        isUsed = new boolean[prefixes.length];\n+        isUsed = new boolean[getPrefixesLength()];\n         for (int i = 0; i < (1 << 8); i++) {\n             isUsed[i] = true;\n         }\n-        tableSize = clearCode + 1;\n+        setTableSize(getClearCode() + 1);\n     }\n \n     @Override\n     protected int addEntry(int previousCode, byte character) throws IOException {\n+        int tableSize = getTableSize();\n         while ((tableSize < MAX_TABLE_SIZE) && isUsed[tableSize]) {\n             tableSize++;\n         }\n+        setTableSize(tableSize);\n         int idx = addEntry(previousCode, character, MAX_TABLE_SIZE);\n         if (idx >= 0) {\n             isUsed[idx] = true;\n     private void partialClear() {\n         final boolean[] isParent = new boolean[MAX_TABLE_SIZE];\n         for (int i = 0; i < isUsed.length; i++) {\n-            if (isUsed[i] && prefixes[i] != -1) {\n-                isParent[prefixes[i]] = true;\n+            if (isUsed[i] && getPrefix(i) != UNUSED_PREFIX) {\n+                isParent[getPrefix(i)] = true;\n             }\n         }\n-        for (int i = clearCode + 1; i < isParent.length; i++) {\n+        for (int i = getClearCode() + 1; i < isParent.length; i++) {\n             if (!isParent[i]) {\n                 isUsed[i] = false;\n-                prefixes[i] = -1;\n+                setPrefix(i, UNUSED_PREFIX);\n             }\n         }\n     }\n         final int code = readNextCode();\n         if (code < 0) {\n             return -1;\n-        } else if (code == clearCode) {\n+        } else if (code == getClearCode()) {\n             final int subCode = readNextCode();\n             if (subCode < 0) {\n                 throw new IOException(\"Unexpected EOF;\");\n             } else if (subCode == 1) {\n-                if (codeSize < MAX_CODE_SIZE) {\n-                    codeSize++;\n+                if (getCodeSize() < MAX_CODE_SIZE) {\n+                    incrementCodeSize();\n                 } else {\n                     throw new IOException(\"Attempt to increase code size beyond maximum\");\n                 }\n             } else if (subCode == 2) {\n                 partialClear();\n-                tableSize = clearCode + 1;\n+                setTableSize(getClearCode() + 1);\n             } else {\n                 throw new IOException(\"Invalid clear code subcode \" + subCode);\n             }\n--- a/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n  * @since 1.10\n  */\n public abstract class LZWInputStream extends CompressorInputStream {\n+    protected static final int DEFAULT_CODE_SIZE = 9;\n+    protected static final int UNUSED_PREFIX = -1;\n+\n     private final byte[] oneByte = new byte[1];\n \n     protected final BitInputStream in;\n-    protected int clearCode = -1;\n-    protected int codeSize = 9;\n-    protected byte previousCodeFirstChar;\n-    protected int previousCode = -1;\n-    protected int tableSize = 0;\n-    protected int[] prefixes;\n-    protected byte[] characters;\n+    private int clearCode = -1;\n+    private int codeSize = DEFAULT_CODE_SIZE;\n+    private byte previousCodeFirstChar;\n+    private int previousCode = UNUSED_PREFIX;\n+    private int tableSize;\n+    private int[] prefixes;\n+    private byte[] characters;\n     private byte[] outputStack;\n     private int outputStackLocation;\n \n         }\n         return 0;\n     }\n+\n+    protected int getCodeSize() {\n+        return codeSize;\n+    }\n+\n+    protected void resetCodeSize() {\n+        setCodeSize(DEFAULT_CODE_SIZE);\n+    }\n+\n+    protected void setCodeSize(int cs) {\n+        this.codeSize = cs;\n+    }\n+\n+    protected void incrementCodeSize() {\n+        codeSize++;\n+    }\n+\n+    protected void resetPreviousCode() {\n+        this.previousCode = -1;\n+    }\n+\n+    protected int getPrefix(int offset) {\n+        return prefixes[offset];\n+    }\n+\n+    protected void setPrefix(int offset, int value) {\n+        prefixes[offset] = value;\n+    }\n+\n+    protected int getPrefixesLength() {\n+        return prefixes.length;\n+    }\n+\n+    protected int getClearCode() {\n+        return clearCode;\n+    }\n+\n+    protected int getTableSize() {\n+        return tableSize;\n+    }\n+\n+    protected void setTableSize(int newSize) {\n+        tableSize = newSize;\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n         blockMode = (thirdByte & BLOCK_MODE_MASK) != 0;\n         maxCodeSize = thirdByte & MAX_CODE_SIZE_MASK;\n         if (blockMode) {\n-            setClearCode(codeSize);\n+            setClearCode(DEFAULT_CODE_SIZE);\n         }\n         initializeTables(maxCodeSize);\n         clearEntries();\n     }\n     \n     private void clearEntries() {\n-        tableSize = 1 << 8;\n-        if (blockMode) {\n-            tableSize++;\n-        }\n+        setTableSize((1 << 8) + (blockMode ? 1 : 0));\n     }\n \n     /**\n      */\n     @Override\n     protected int addEntry(int previousCode, byte character) throws IOException {\n-        final int maxTableSize = 1 << codeSize;\n+        final int maxTableSize = 1 << getCodeSize();\n         int r = addEntry(previousCode, character, maxTableSize);\n-        if (tableSize == maxTableSize && codeSize < maxCodeSize) {\n+        if (getTableSize() == maxTableSize && getCodeSize() < maxCodeSize) {\n             reAlignReading();\n-            codeSize++;\n+            incrementCodeSize();\n         }\n         return r;\n     }\n         final int code = readNextCode();\n         if (code < 0) {\n             return -1;\n-        } else if (blockMode && code == clearCode) {\n+        } else if (blockMode && code == getClearCode()) {\n             clearEntries();\n             reAlignReading();\n-            codeSize = 9;\n-            previousCode = -1;\n+            resetCodeSize();\n+            resetPreviousCode();\n             return 0;\n         } else {\n             boolean addedUnfinishedEntry = false;\n-            if (code == tableSize) {\n+            if (code == getTableSize()) {\n                 addRepeatOfPreviousCode();\n                 addedUnfinishedEntry = true;\n-            } else if (code > tableSize) {\n-                throw new IOException(String.format(\"Invalid %d bit code 0x%x\", codeSize, code));\n+            } else if (code > getTableSize()) {\n+                throw new IOException(String.format(\"Invalid %d bit code 0x%x\", getCodeSize(), code));\n             }\n             return expandCodeToOutputStack(code, addedUnfinishedEntry);\n         }", "timestamp": 1439317114, "metainfo": ""}