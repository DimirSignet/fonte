{"sha": "32170076e2aef1cfd3f6d25aa55be502045a5976", "log": "extract common file name munging code from the *Utils classes  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/FileNameUtil.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * File name mapping code for the compression formats.\n+ * @ThreadSafe\n+ * @since Apache Commons Compress 1.4\n+ */\n+public class FileNameUtil {\n+\n+    /**\n+     * Map from common filename suffixes to the suffixes that identify compressed\n+     * versions of those file types. For example: from \".tar\" to \".tgz\".\n+     */\n+    private final Map<String, String> compressSuffix =\n+        new HashMap<String, String>();        \n+\n+    /**\n+     * Map from common filename suffixes of compressed files to the\n+     * corresponding suffixes of uncompressed files. For example: from\n+     * \".tgz\" to \".tar\".\n+     * <p>\n+     * This map also contains format-specific suffixes like \".gz\" and \"-z\".\n+     * These suffixes are mapped to the empty string, as they should simply\n+     * be removed from the filename when the file is uncompressed.\n+     */\n+    private final Map<String, String> uncompressSuffix;\n+\n+    /**\n+     * Length of the longest compressed suffix.\n+     */\n+    private final int longestCompressedSuffix;\n+\n+    /**\n+     * Length of the shortest compressed suffix.\n+     */\n+    private final int shortestCompressedSuffix;\n+\n+    /**\n+     * Length of the longest uncompressed suffix.\n+     */\n+    private final int longestUncompressedSuffix;\n+\n+    /**\n+     * Length of the shortest uncompressed suffix longer than the\n+     * empty string.\n+     */\n+    private final int shortestUncompressedSuffix;\n+\n+    /**\n+     * The format's default extension.\n+     */\n+    private final String defaultExtension;\n+\n+    /**\n+     * sets up the utility with a map of known compressed to\n+     * uncompressed suffix mappings and the default extension of the\n+     * format.\n+     *\n+     * @param uncompressSuffix Map from common filename suffixes of\n+     * compressed files to the corresponding suffixes of uncompressed\n+     * files. For example: from \".tgz\" to \".tar\".  This map also\n+     * contains format-specific suffixes like \".gz\" and \"-z\".  These\n+     * suffixes are mapped to the empty string, as they should simply\n+     * be removed from the filename when the file is uncompressed.\n+     *\n+     * @param defaultExtension the format's default extension like \".gz\"\n+     */\n+    public FileNameUtil(Map<String, String> uncompressSuffix,\n+                        String defaultExtension) {\n+        this.uncompressSuffix = Collections.unmodifiableMap(uncompressSuffix);\n+        int lc = Integer.MIN_VALUE, sc = Integer.MAX_VALUE;\n+        int lu = Integer.MIN_VALUE, su = Integer.MAX_VALUE;\n+        for (Map.Entry<String, String> ent : uncompressSuffix.entrySet()) {\n+            int cl = ent.getKey().length();\n+            if (cl > lc) {\n+                lc = cl;\n+            }\n+            if (cl < sc) {\n+                sc = cl;\n+            }\n+\n+            String u = ent.getValue();\n+            int ul = u.length();\n+            if (ul > 0) {\n+                if (!compressSuffix.containsKey(u)) {\n+                    compressSuffix.put(u, ent.getKey());\n+                }\n+                if (ul > lu) {\n+                    lu = ul;\n+                }\n+                if (ul < su) {\n+                    su = ul;\n+                }\n+            }\n+        }\n+        longestCompressedSuffix = lc;\n+        longestUncompressedSuffix = lu;\n+        shortestCompressedSuffix = sc;\n+        shortestUncompressedSuffix = su;\n+        this.defaultExtension = defaultExtension;\n+    }\n+\n+    /**\n+     * Detects common format suffixes in the given filename.\n+     *\n+     * @param filename name of a file\n+     * @return <code>true</code> if the filename has a common format suffix,\n+     *         <code>false</code> otherwise\n+     */\n+    public boolean isCompressedFilename(String filename) {\n+        final String lower = filename.toLowerCase(Locale.ENGLISH);\n+        final int n = lower.length();\n+        for (int i = shortestCompressedSuffix;\n+             i <= longestCompressedSuffix && i < n; i++) {\n+            if (uncompressSuffix.containsKey(lower.substring(n - i))) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Maps the given name of a compressed file to the name that the\n+     * file should have after uncompression. Commonly used file type specific\n+     * suffixes like \".tgz\" or \".svgz\" are automatically detected and\n+     * correctly mapped. For example the name \"package.tgz\" is mapped to\n+     * \"package.tar\". And any filenames with the generic \".gz\" suffix\n+     * (or any other generic gzip suffix) is mapped to a name without that\n+     * suffix. If no format suffix is detected, then the filename is returned\n+     * unmapped.\n+     *\n+     * @param filename name of a file\n+     * @return name of the corresponding uncompressed file\n+     */\n+    public String getUncompressedFilename(String filename) {\n+        final String lower = filename.toLowerCase(Locale.ENGLISH);\n+        final int n = lower.length();\n+        for (int i = shortestCompressedSuffix;\n+             i <= longestCompressedSuffix && i < n; i++) {\n+            String suffix = uncompressSuffix.get(lower.substring(n - i));\n+            if (suffix != null) {\n+                return filename.substring(0, n - i) + suffix;\n+            }\n+        }\n+        return filename;\n+    }\n+\n+    /**\n+     * Maps the given filename to the name that the file should have after\n+     * compressio. Common file types with custom suffixes for\n+     * compressed versions are automatically detected and correctly mapped.\n+     * For example the name \"package.tar\" is mapped to \"package.tgz\". If no\n+     * custom mapping is applicable, then the default \".gz\" suffix is appended\n+     * to the filename.\n+     *\n+     * @param filename name of a file\n+     * @return name of the corresponding compressed file\n+     */\n+    public String getCompressedFilename(String filename) {\n+        final String lower = filename.toLowerCase(Locale.ENGLISH);\n+        final int n = lower.length();\n+        for (int i = shortestUncompressedSuffix;\n+             i <= longestUncompressedSuffix && i < n; i++) {\n+            String suffix = compressSuffix.get(lower.substring(n - i));\n+            if (suffix != null) {\n+                return filename.substring(0, n - i) + suffix;\n+            }\n+        }\n+        // No custom suffix found, just append the default\n+        return filename + defaultExtension;\n+    }\n+\n+}\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2Utils.java\n  */\n package org.apache.commons.compress.compressors.bzip2;\n \n-import java.util.HashMap;\n-import java.util.Locale;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n+import org.apache.commons.compress.compressors.FileNameUtil;\n \n /**\n  * Utility code for the BZip2 compression format.\n  */\n public abstract class BZip2Utils {\n \n-    /**\n-     * Map from common filename suffixes of bzip2ed files to the corresponding\n-     * suffixes of uncompressed files. For example: from \".tbz2\" to \".tar\".\n-     * <p>\n-     * This map also contains bzip2-specific suffixes like \".bz2\". These\n-     * suffixes are mapped to the empty string, as they should simply be\n-     * removed from the filename when the file is uncompressed.\n-     */\n-    private static final Map<String, String> uncompressSuffix =\n-        new HashMap<String, String>();\n+    private static final FileNameUtil fileNameUtil;\n \n     static {\n+        Map<String, String> uncompressSuffix =\n+            new LinkedHashMap<String, String>();\n+        // backwards compatibilty: BZip2Utils never created the short\n+        // tbz form, so .tar.bz2 has to be added explicitly\n+        uncompressSuffix.put(\".tar.bz2\", \".tar\");\n         uncompressSuffix.put(\".tbz2\", \".tar\");\n         uncompressSuffix.put(\".tbz\", \".tar\");\n         uncompressSuffix.put(\".bz2\", \"\");\n         uncompressSuffix.put(\".bz\", \"\");\n+        fileNameUtil = new FileNameUtil(uncompressSuffix, \".bz2\");\n     }\n-    // N.B. if any shorter or longer keys are added, ensure the for loop limits are changed\n \n     /** Private constructor to prevent instantiation of this utility class. */\n     private BZip2Utils() {\n      *         <code>false</code> otherwise\n      */\n     public static boolean isCompressedFilename(String filename) {\n-        String lower = filename.toLowerCase(Locale.ENGLISH);\n-        int n = lower.length();\n-        // Shortest suffix is three letters (.bz), longest is five (.tbz2)\n-        for (int i = 3; i <= 5 && i < n; i++) {\n-            if (uncompressSuffix.containsKey(lower.substring(n - i))) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return fileNameUtil.isCompressedFilename(filename);\n     }\n \n     /**\n      * @return name of the corresponding uncompressed file\n      */\n     public static String getUncompressedFilename(String filename) {\n-        String lower = filename.toLowerCase(Locale.ENGLISH);\n-        int n = lower.length();\n-        // Shortest suffix is three letters (.bz), longest is five (.tbz2)\n-        for (int i = 3; i <= 5 && i < n; i++) {\n-            Object suffix = uncompressSuffix.get(lower.substring(n - i));\n-            if (suffix != null) {\n-                return filename.substring(0, n - i) + suffix;\n-            }\n-        }\n-        return filename;\n+        return fileNameUtil.getUncompressedFilename(filename);\n     }\n \n     /**\n      * @return name of the corresponding compressed file\n      */\n     public static String getCompressedFilename(String filename) {\n-        return filename + \".bz2\";\n+        return fileNameUtil.getCompressedFilename(filename);\n     }\n \n }\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipUtils.java\n  */\n package org.apache.commons.compress.compressors.gzip;\n \n-import java.util.HashMap;\n-import java.util.Locale;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n+import org.apache.commons.compress.compressors.FileNameUtil;\n \n /**\n  * Utility code for the gzip compression format.\n  */\n public class GzipUtils {\n \n-    /**\n-     * Map from common filename suffixes to the suffixes that identify gzipped\n-     * versions of those file types. For example: from \".tar\" to \".tgz\".\n-     */\n-    private static final Map<String, String> compressSuffix =\n-        new HashMap<String, String>();\n-\n-    /**\n-     * Map from common filename suffixes of gzipped files to the corresponding\n-     * suffixes of uncompressed files. For example: from \".tgz\" to \".tar\".\n-     * <p>\n-     * This map also contains gzip-specific suffixes like \".gz\" and \"-z\".\n-     * These suffixes are mapped to the empty string, as they should simply\n-     * be removed from the filename when the file is uncompressed.\n-     */\n-    private static final Map<String, String> uncompressSuffix =\n-        new HashMap<String, String>();\n+    private static final FileNameUtil fileNameUtil;\n \n     static {\n-        compressSuffix.put(\".tar\", \".tgz\");\n-        compressSuffix.put(\".svg\", \".svgz\");\n-        compressSuffix.put(\".cpio\", \".cpgz\");\n-        compressSuffix.put(\".wmf\", \".wmz\");\n-        compressSuffix.put(\".emf\", \".emz\");\n-\n+        // using LinkedHashMap so .tgz is preferred over .taz as\n+        // compressed extension of .tar as FileNameUtil will use the\n+        // first one found\n+        Map<String, String> uncompressSuffix =\n+            new LinkedHashMap<String, String>();\n         uncompressSuffix.put(\".tgz\", \".tar\");\n         uncompressSuffix.put(\".taz\", \".tar\");\n         uncompressSuffix.put(\".svgz\", \".svg\");\n         uncompressSuffix.put(\"-gz\", \"\");\n         uncompressSuffix.put(\"-z\", \"\");\n         uncompressSuffix.put(\"_z\", \"\");\n+        fileNameUtil = new FileNameUtil(uncompressSuffix, \".gz\");\n     }\n-    // N.B. if any shorter or longer keys are added, ensure the for loop limits are changed\n \n     /** Private constructor to prevent instantiation of this utility class. */\n     private GzipUtils() {\n      *         <code>false</code> otherwise\n      */\n     public static boolean isCompressedFilename(String filename) {\n-        String lower = filename.toLowerCase(Locale.ENGLISH);\n-        int n = lower.length();\n-        // Shortest suffix is two letters (_z), longest is five (.svgz)\n-        for (int i = 2; i <= 5 && i < n; i++) {\n-            if (uncompressSuffix.containsKey(lower.substring(n - i))) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return fileNameUtil.isCompressedFilename(filename);\n     }\n \n     /**\n      * @return name of the corresponding uncompressed file\n      */\n     public static String getUncompressedFilename(String filename) {\n-        String lower = filename.toLowerCase(Locale.ENGLISH);\n-        int n = lower.length();\n-        // Shortest suffix is two letters (_z), longest is five (.svgz)\n-        for (int i = 2; i <= 5 && i < n; i++) {\n-            Object suffix = uncompressSuffix.get(lower.substring(n - i));\n-            if (suffix != null) {\n-                return filename.substring(0, n - i) + suffix;\n-            }\n-        }\n-        return filename;\n+        return fileNameUtil.getUncompressedFilename(filename);\n     }\n \n     /**\n      * @return name of the corresponding compressed file\n      */\n     public static String getCompressedFilename(String filename) {\n-        String lower = filename.toLowerCase(Locale.ENGLISH);\n-        int n = lower.length();\n-        // Shortest suffix is four letters (.svg), longest is five (.cpio)\n-        for (int i = 4; i <= 5 && i < n; i++) {\n-            Object suffix = compressSuffix.get(lower.substring(n - i));\n-            if (suffix != null) {\n-                return filename.substring(0, n - i) + suffix;\n-            }\n-        }\n-        // No custom suffix found, just append the default .gz\n-        return filename + \".gz\";\n+        return fileNameUtil.getCompressedFilename(filename);\n     }\n \n }\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n package org.apache.commons.compress.compressors.xz;\n \n import java.util.HashMap;\n-import java.util.Locale;\n import java.util.Map;\n+import org.apache.commons.compress.compressors.FileNameUtil;\n \n /**\n  * Utility code for the xz compression format.\n  */\n public class XZUtils {\n \n-    /**\n-     * Map from common filename suffixes to the suffixes that identify xzped\n-     * versions of those file types. For example: from \".tar\" to \".txz\".\n-     */\n-    private static final Map<String, String> compressSuffix =\n-        new HashMap<String, String>();\n-\n-    /**\n-     * Map from common filename suffixes of xzped files to the corresponding\n-     * suffixes of uncompressed files. For example: from \".tgz\" to \".tar\".\n-     * <p>\n-     * This map also contains xz-specific suffixes like \".gz\" and \"-z\".\n-     * These suffixes are mapped to the empty string, as they should simply\n-     * be removed from the filename when the file is uncompressed.\n-     */\n-    private static final Map<String, String> uncompressSuffix =\n-        new HashMap<String, String>();\n+    private static final FileNameUtil fileNameUtil;\n \n     static {\n-        compressSuffix.put(\".tar\", \".txz\");\n-\n+        Map<String, String> uncompressSuffix = new HashMap<String, String>();\n         uncompressSuffix.put(\".txz\", \".tar\");\n         uncompressSuffix.put(\".xz\", \"\");\n         uncompressSuffix.put(\"-xz\", \"\");\n+        fileNameUtil = new FileNameUtil(uncompressSuffix, \".xz\");\n     }\n-    // N.B. if any shorter or longer keys are added, ensure the for loop limits are changed\n \n     /** Private constructor to prevent instantiation of this utility class. */\n     private XZUtils() {\n      *         <code>false</code> otherwise\n      */\n     public static boolean isCompressedFilename(String filename) {\n-        String lower = filename.toLowerCase(Locale.ENGLISH);\n-        int n = lower.length();\n-        // Shortest suffix is three letters (.xz), longest is four (.txz)\n-        for (int i = 3; i <= 4 && i < n; i++) {\n-            if (uncompressSuffix.containsKey(lower.substring(n - i))) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return fileNameUtil.isCompressedFilename(filename);\n     }\n \n     /**\n      * @return name of the corresponding uncompressed file\n      */\n     public static String getUncompressedFilename(String filename) {\n-        String lower = filename.toLowerCase(Locale.ENGLISH);\n-        int n = lower.length();\n-        // Shortest suffix is three letters (.xz), longest is four (.txz)\n-        for (int i = 3; i <= 4 && i < n; i++) {\n-            Object suffix = uncompressSuffix.get(lower.substring(n - i));\n-            if (suffix != null) {\n-                return filename.substring(0, n - i) + suffix;\n-            }\n-        }\n-        return filename;\n+        return fileNameUtil.getUncompressedFilename(filename);\n     }\n \n     /**\n      * @return name of the corresponding compressed file\n      */\n     public static String getCompressedFilename(String filename) {\n-        String lower = filename.toLowerCase(Locale.ENGLISH);\n-        int n = lower.length();\n-        // Shortest suffix is three letters (.xz), longest is four (.txz)\n-        for (int i = 3; i <= 4 && i < n; i++) {\n-            Object suffix = compressSuffix.get(lower.substring(n - i));\n-            if (suffix != null) {\n-                return filename.substring(0, n - i) + suffix;\n-            }\n-        }\n-        // No custom suffix found, just append the default .gz\n-        return filename + \".xz\";\n+        return fileNameUtil.getCompressedFilename(filename);\n     }\n \n }\n--- a/src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java\n         assertEquals(\"x.bz2\", BZip2Utils.getCompressedFilename(\"x\"));\n         assertEquals(\"X.bz2\", BZip2Utils.getCompressedFilename(\"X\"));\n         assertEquals(\"x.tar.bz2\", BZip2Utils.getCompressedFilename(\"x.tar\"));\n-        assertEquals(\"x.TAR.bz2\", BZip2Utils.getCompressedFilename(\"x.TAR\"));\n+        assertEquals(\"x.tar.bz2\", BZip2Utils.getCompressedFilename(\"x.TAR\"));\n     }\n \n }", "timestamp": 1320331684, "metainfo": ""}