{"sha": "7088ab0a8880c723fa134e694cf87c7815f18fe9", "log": "javadoc fixes", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/XXHash32.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/XXHash32.java\n \n     /**\n      * Creates an XXHash32 instance.\n+     * @param seed the seed to use\n      */\n     public XXHash32(int seed) {\n         this.seed = seed;\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java\n \n     /**\n      * Used by subclasses to signal the next block contains a back-reference with the given coordinates.\n-     * @param the offset of the back-reference\n+     * @param offset the offset of the back-reference\n      * @param length the length of the back-reference\n      */\n     protected final void startBackReference(int offset, long length) {\n--- a/src/main/java/org/apache/commons/compress/utils/ByteUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ByteUtils.java\n         /**\n          * The contract is similar to {@link InputStream#read()}, return\n          * the byte as an unsigned int, -1 if there are no more bytes.\n+         * @return the supplied byte or -1 if there are no more bytes\n+         * @throws IOException if supplying fails\n          */\n         int getAsByte() throws IOException;\n     }\n         /**\n          * The contract is similar to {@link OutputStream#write(int)},\n          * consume the lower eight bytes of the int as a byte.\n+         * @param b the byte to consume\n+         * @throws IOException if consuming fails\n          */\n         void accept(int b) throws IOException;\n     }\n     /**\n      * Reads the given byte array as a little endian long.\n      * @param bytes the byte array to convert\n+     * @return the number read\n      */\n     public static long fromLittleEndian(byte[] bytes) {\n         return fromLittleEndian(bytes, 0, bytes.length);\n      * @param bytes the byte array to convert\n      * @param off the offset into the array that starts the value\n      * @param length the number of bytes representing the value\n+     * @return the number read\n      * @throws IllegalArgumentException if len is bigger than eight\n      */\n     public static long fromLittleEndian(byte[] bytes, final int off, final int length) {\n      * Reads the given number of bytes from the given stream as a little endian long.\n      * @param in the stream to read from\n      * @param length the number of bytes representing the value\n+     * @return the number read\n      * @throws IllegalArgumentException if len is bigger than eight\n      * @throws IOException if reading fails or the stream doesn't\n      * contain the given number of bytes anymore\n      *\n      * @param supplier the supplier for bytes\n      * @param length the number of bytes representing the value\n+     * @return the number read\n      * @throws IllegalArgumentException if len is bigger than eight\n      * @throws IOException if the supplier fails or doesn't supply the\n      * given number of bytes anymore\n      * Reads the given number of bytes from the given input as little endian long.\n      * @param in the input to read from\n      * @param length the number of bytes representing the value\n+     * @return the number read\n      * @throws IllegalArgumentException if len is bigger than eight\n      * @throws IOException if reading fails or the stream doesn't\n      * contain the given number of bytes anymore\n     /**\n      * Inserts the given value into the array as a little endian\n      * sequence of the given length starting at the given offset.\n-     * @param array the array to write into\n+     * @param b the array to write into\n      * @param value the value to insert\n-     * @param offset the offset into the array that receives the first byte\n+     * @param off the offset into the array that receives the first byte\n      * @param length the number of bytes to use to represent the value\n      */\n     public static void toLittleEndian(final byte[] b, final long value, final int off, final int length) {", "timestamp": 1486216848, "metainfo": ""}