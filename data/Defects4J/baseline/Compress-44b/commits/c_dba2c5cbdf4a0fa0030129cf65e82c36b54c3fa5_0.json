{"sha": "dba2c5cbdf4a0fa0030129cf65e82c36b54c3fa5", "log": "RandomAccessFile.close() doesn't throw any exception when it is closed more than once, so the guard and synchronization are not needed  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n      * Closes the archive.\n      * @throws IOException if an error occurs closing the archive.\n      */\n-    public synchronized void close() throws IOException {\n-        if (!closed) {\n-            closed = true;\n-            archive.close();\n-        }\n+    public void close() throws IOException {\n+        closed = true;\n+        archive.close();\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n         assertEntryName(l, 22, \"ZipUtil\");\n     }\n \n+    public void testDoubleClose() throws Exception {\n+        readOrderTest();\n+        zf.close();\n+        try {\n+            zf.close();\n+        } catch (Exception ex) {\n+            fail(\"Caught exception of second close\");\n+        }\n+    }\n+\n     /*\n      * ordertest.zip has been handcrafted.\n      *", "timestamp": 1303190698, "metainfo": ""}