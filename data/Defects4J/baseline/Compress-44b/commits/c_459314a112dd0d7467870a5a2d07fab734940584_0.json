{"sha": "459314a112dd0d7467870a5a2d07fab734940584", "log": "[COMPRESS-362] Bullet-proof code using try-with-resources statements.", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArTestCase.java\n \n         // UnArArchive Operation\n         final File input = output;\n-        final InputStream is = new FileInputStream(input);\n-        final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(new BufferedInputStream(is));\n-        final ArArchiveEntry entry = (ArArchiveEntry)in.getNextEntry();\n-\n-        final File target = new File(dir, entry.getName());\n-        final OutputStream out = new FileOutputStream(target);\n-\n-        IOUtils.copy(in, out);\n-\n-        out.close();\n-        in.close();\n-        is.close();\n+        try (final InputStream is = new FileInputStream(input);\n+                final ArchiveInputStream in = new ArchiveStreamFactory()\n+                        .createArchiveInputStream(new BufferedInputStream(is))) {\n+            final ArArchiveEntry entry = (ArArchiveEntry) in.getNextEntry();\n+\n+            final File target = new File(dir, entry.getName());\n+            try (final OutputStream out = new FileOutputStream(target)) {\n+                IOUtils.copy(in, out);\n+            }\n+        }\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java\n     public void testOptionalFinish() throws Exception {\n         final OutputStream out1 = new ByteArrayOutputStream();\n \n-        ArchiveOutputStream aos1 = factory.createArchiveOutputStream(\"zip\", out1);\n-        aos1.putArchiveEntry(new ZipArchiveEntry(\"dummy\"));\n-        aos1.closeArchiveEntry();\n-        aos1.close();\n+        try (ArchiveOutputStream aos1 = factory.createArchiveOutputStream(\"zip\", out1)) {\n+            aos1.putArchiveEntry(new ZipArchiveEntry(\"dummy\"));\n+            aos1.closeArchiveEntry();\n+        }\n \n-        aos1 = factory.createArchiveOutputStream(\"jar\", out1);\n-        aos1.putArchiveEntry(new JarArchiveEntry(\"dummy\"));\n-        aos1.closeArchiveEntry();\n-        aos1.close();\n+        final ArchiveOutputStream finishTest;\n+        try (ArchiveOutputStream aos1 = factory.createArchiveOutputStream(\"jar\", out1)) {\n+            finishTest = aos1;\n+            aos1.putArchiveEntry(new JarArchiveEntry(\"dummy\"));\n+            aos1.closeArchiveEntry();\n+        }\n         try {\n-            aos1.finish();\n+            finishTest.finish();\n             fail(\"finish() cannot follow close()\");\n         } catch (final IOException io) {\n             // Exception expected\n         ArchiveOutputStream aos1;\n         aos1 = factory.createArchiveOutputStream(archiveType, out1);\n         aos1.putArchiveEntry(aos1.createArchiveEntry(dummy, \"dummy\"));\n-        InputStream is = new FileInputStream(dummy);\n-        IOUtils.copy(is, aos1);\n-        is.close();\n+        try (InputStream is = new FileInputStream(dummy)) {\n+            IOUtils.copy(is, aos1);\n+        }\n         aos1.closeArchiveEntry();\n         aos1.close(); // omitted finish\n \n         }\n \n         aos1.putArchiveEntry(aos1.createArchiveEntry(dummy, \"dummy\"));\n-        is = new FileInputStream(dummy);\n-        IOUtils.copy(is, aos1);\n-        is.close();\n+        try (InputStream is = new FileInputStream(dummy)) {\n+            IOUtils.copy(is, aos1);\n+        }\n \n         // TODO check if second putArchiveEntry() can follow without closeAE?\n \n--- a/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java\n     @Test\n     public void testEncodingInputStreamAutodetect() throws Exception {\n         int failed = 0;\n-        for(int i = 1; i <= TESTS.length; i++) {\n-            final TestData test = TESTS[i-1];\n-            final ArchiveInputStream ais = getInputStreamFor(test.testFile, test.fac);\n-            final String field = getField(ais,test.fieldName);\n-            if (!eq(test.expectedEncoding,field)) {\n-                System.out.println(\"Failed test \" + i + \". expected: \" + test.expectedEncoding + \" actual: \" + field + \" type: \" + test.type);\n-                failed++;\n+        for (int i = 1; i <= TESTS.length; i++) {\n+            final TestData test = TESTS[i - 1];\n+            try (final ArchiveInputStream ais = getInputStreamFor(test.testFile, test.fac)) {\n+                final String field = getField(ais, test.fieldName);\n+                if (!eq(test.expectedEncoding, field)) {\n+                    System.out.println(\"Failed test \" + i + \". expected: \" + test.expectedEncoding + \" actual: \" + field\n+                            + \" type: \" + test.type);\n+                    failed++;\n+                }\n             }\n         }\n         if (failed > 0) {\n     @Test\n     public void testEncodingInputStream() throws Exception {\n         int failed = 0;\n-        for(int i = 1; i <= TESTS.length; i++) {\n-            final TestData test = TESTS[i-1];\n-            final ArchiveInputStream ais = getInputStreamFor(test.type, test.testFile, test.fac);\n-            final String field = getField(ais,test.fieldName);\n-            if (!eq(test.expectedEncoding,field)) {\n-                System.out.println(\"Failed test \" + i + \". expected: \" + test.expectedEncoding + \" actual: \" + field + \" type: \" + test.type);\n-                failed++;\n+        for (int i = 1; i <= TESTS.length; i++) {\n+            final TestData test = TESTS[i - 1];\n+            try (final ArchiveInputStream ais = getInputStreamFor(test.type, test.testFile, test.fac)) {\n+                final String field = getField(ais, test.fieldName);\n+                if (!eq(test.expectedEncoding, field)) {\n+                    System.out.println(\"Failed test \" + i + \". expected: \" + test.expectedEncoding + \" actual: \" + field\n+                            + \" type: \" + test.type);\n+                    failed++;\n+                }\n             }\n         }\n         if (failed > 0) {\n         for(int i = 1; i <= TESTS.length; i++) {\n             final TestData test = TESTS[i-1];\n             if (test.hasOutputStream) {\n-                final ArchiveOutputStream ais = getOutputStreamFor(test.type, test.fac);\n-                final String field = getField(ais, test.fieldName);\n-                if (!eq(test.expectedEncoding, field)) {\n-                    System.out.println(\"Failed test \" + i + \". expected: \" + test.expectedEncoding + \" actual: \" + field + \" type: \" + test.type);\n-                    failed++;\n+                try (final ArchiveOutputStream ais = getOutputStreamFor(test.type, test.fac)) {\n+                    final String field = getField(ais, test.fieldName);\n+                    if (!eq(test.expectedEncoding, field)) {\n+                        System.out.println(\"Failed test \" + i + \". expected: \" + test.expectedEncoding + \" actual: \"\n+                                + field + \" type: \" + test.type);\n+                        failed++;\n+                    }\n                 }\n             }\n         }\n--- a/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStreamTest.java\n     }\n \n     private void checkLongNameEntry(final String archive) throws Exception {\n-        final FileInputStream fis = new FileInputStream(getFile(archive));\n-        ArArchiveInputStream s = null;\n-        try {\n-            s = new ArArchiveInputStream(new BufferedInputStream(fis));\n+        try (final FileInputStream fis = new FileInputStream(getFile(archive));\n+                final ArArchiveInputStream s = new ArArchiveInputStream(new BufferedInputStream(fis))) {\n             ArchiveEntry e = s.getNextEntry();\n             assertEquals(\"this_is_a_long_file_name.txt\", e.getName());\n             assertEquals(14, e.getSize());\n             s.read(bye);\n             assertEquals(\"Bye\\n\", ArchiveUtils.toAsciiString(bye));\n             assertNull(s.getNextEntry());\n-        } finally {\n-            if (s != null) {\n-                s.close();\n-            }\n-            fis.close();\n         }\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java\n \n     @Test\n     public void testLongFileNamesCauseExceptionByDefault() {\n-        ArArchiveOutputStream os = null;\n-        try {\n-            os = new ArArchiveOutputStream(new ByteArrayOutputStream());\n-            final ArArchiveEntry ae = new ArArchiveEntry(\"this_is_a_long_name.txt\",\n-                                                   0);\n+        try (ArArchiveOutputStream os = new ArArchiveOutputStream(new ByteArrayOutputStream())) {\n+            final ArArchiveEntry ae = new ArArchiveEntry(\"this_is_a_long_name.txt\", 0);\n             os.putArchiveEntry(ae);\n             fail(\"Expected an exception\");\n         } catch (final IOException ex) {\n             assertTrue(ex.getMessage().startsWith(\"filename too long\"));\n-        } finally {\n-            closeQuietly(os);\n         }\n     }\n \n     @Test\n     public void testLongFileNamesWorkUsingBSDDialect() throws Exception {\n-        FileOutputStream fos = null;\n-        ArArchiveOutputStream os = null;\n         final File[] df = createTempDirAndFile();\n-        try {\n-            fos = new FileOutputStream(df[1]);\n-            os = new ArArchiveOutputStream(fos);\n+        try (FileOutputStream fos = new FileOutputStream(df[1]);\n+                ArArchiveOutputStream os = new ArArchiveOutputStream(fos)) {\n             os.setLongFileMode(ArArchiveOutputStream.LONGFILE_BSD);\n-            final ArArchiveEntry ae = new ArArchiveEntry(\"this_is_a_long_name.txt\",\n-                                                   14);\n+            final ArArchiveEntry ae = new ArArchiveEntry(\"this_is_a_long_name.txt\", 14);\n             os.putArchiveEntry(ae);\n-            os.write(new byte[] {\n-                    'H', 'e', 'l', 'l', 'o', ',', ' ',\n-                    'w', 'o', 'r', 'l', 'd', '!', '\\n'\n-                });\n+            os.write(new byte[] { 'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', '\\n' });\n             os.closeArchiveEntry();\n-            os.close();\n-            os = null;\n-            fos = null;\n \n             final List<String> expected = new ArrayList<>();\n             expected.add(\"this_is_a_long_name.txt\");\n             checkArchiveContent(df[1], expected);\n         } finally {\n-            if (os != null) {\n-                os.close();\n-            }\n-            if (fos != null) {\n-                fos.close();\n-            }\n             rmdir(df[0]);\n         }\n     }", "timestamp": 1481317483, "metainfo": ""}