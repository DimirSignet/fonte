{"sha": "68fa68928bf3d431209dc0342126b9023de02c93", "log": "COMPRESS-271 content checksum for LZ4 frames", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java\n                 r = readOnce(b, off, len);\n             }\n         }\n+        if (expectContentChecksum && r != -1) {\n+            contentHash.update(b, off, r);\n+        }\n         return r;\n     }\n \n \n     private void verifyContentChecksum() throws IOException {\n         if (expectContentChecksum) {\n-            int skipped = (int) IOUtils.skip(in, 4);\n-            count(skipped);\n-            if (4 != skipped) {\n+            byte[] checksum = new byte[4];\n+            int read = IOUtils.readFully(in, checksum);\n+            count(read);\n+            if (4 != read) {\n                 throw new IOException(\"Premature end of stream while reading content checksum\");\n             }\n+            long expectedHash = contentHash.getValue();\n+            if (expectedHash != ByteUtils.fromLittleEndian(checksum)) {\n+                throw new IOException(\"content checksum mismatch.\");\n+            }\n+            contentHash.reset();\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n     /*\n      * TODO before releasing 1.14:\n      *\n-     * + xxhash32 checksum creation for content, blocks\n+     * + xxhash32 checksum creation for blocks\n      * + block dependence\n      */\n \n      */\n     public static class Parameters {\n         private final BlockSize blockSize;\n+        private final boolean withContentChecksum;\n \n         /**\n          * The default parameters of 4M block size, enabled content\n          *\n          * <p>This matches the defaults of the lz4 command line utility.</p>\n          */\n-        public static Parameters DEFAULT = new Parameters(BlockSize.M4);\n+        public static Parameters DEFAULT = new Parameters(BlockSize.M4, true);\n \n         /**\n          * Sets up custom parameters for the LZ4 stream.\n          * @param blockSize the size of a single block.\n+         * @param withContentChecksum whether to write a content checksum\n          */\n-        public Parameters(BlockSize blockSize) {\n+        public Parameters(BlockSize blockSize, boolean withContentChecksum) {\n             this.blockSize = blockSize;\n+            this.withContentChecksum = withContentChecksum;\n         }\n         @Override\n         public String toString() {\n-            return \"LZ4 Parameters with BlockSize \" + blockSize;\n+            return \"LZ4 Parameters with BlockSize \" + blockSize + \", withContentChecksum \" + withContentChecksum;\n         }\n     }\n \n \n     @Override\n     public void write(byte[] data, int off, int len) throws IOException {\n+        contentHash.update(data, off, len);\n         if (currentIndex + len > blockData.length) {\n             flushBlock();\n             while (len > blockData.length) {\n     private void writeFrameDescriptor() throws IOException {\n         int flags = FramedLZ4CompressorInputStream.SUPPORTED_VERSION\n             | FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK;\n+        if (params.withContentChecksum) {\n+            flags |= FramedLZ4CompressorInputStream.CONTENT_CHECKSUM_MASK;\n+        }\n         out.write(flags);\n         contentHash.update(flags);\n         int bd = params.blockSize.getIndex() << 4;\n \n     private void writeTrailer() throws IOException {\n         out.write(END_MARK);\n-        // TODO content checksum\n+        ByteUtils.toLittleEndian(out, contentHash.getValue(), 4);\n     }\n \n }\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java\n             assertThat(ex.getMessage(), containsString(\"content checksum\"));\n         }\n     }\n+\n+    @Test\n+    public void rejectsStreamsWithBadContentChecksum() throws IOException {\n+        byte[] input = new byte[] {\n+            4, 0x22, 0x4d, 0x18, // signature\n+            0x64, // flag - Version 01, block independent, no block checksum, no content size, with content checksum\n+            0x70, // block size 4MB\n+            (byte) 185, // checksum\n+            13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set\n+            'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content\n+            0, 0, 0, 0, // empty block marker\n+            1, 2, 3, 4,\n+        };\n+        try {\n+            try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input))) {\n+                IOUtils.toByteArray(a);\n+                fail(\"expected exception\");\n+            }\n+        } catch (IOException ex) {\n+            assertThat(ex.getMessage(), containsString(\"content checksum mismatch\"));\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n     @Parameters(name = \"using {0}\")\n     public static Collection<Object[]> factory() {\n         return Arrays.asList(new Object[][] {\n-            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K64) },\n-            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K256) },\n-            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M1) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K64, true) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K256, true) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M1, true) },\n             new Object[] { FramedLZ4CompressorOutputStream.Parameters.DEFAULT },\n+            // default without content checksum\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4, false) },\n         });\n     }\n ", "timestamp": 1485408824, "metainfo": ""}