{"sha": "617860eb422480c46f74b3c1fa6b1087f491db38", "log": "Adding a batch of decompression tests.", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n \n import static org.junit.Assert.*;\n \n+import java.io.ByteArrayOutputStream;\n import java.io.File;\n+import java.io.IOException;\n import java.security.NoSuchAlgorithmException;\n import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n import javax.crypto.Cipher;\n+\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.PasswordRequiredException;\n import org.junit.Test;\n public class SevenZFileTest extends AbstractTestCase {\n     private static final String TEST2_CONTENT = \"<?xml version = '1.0'?>\\r\\n<!DOCTYPE\"\n         + \" connections>\\r\\n<meinxml>\\r\\n\\t<leer />\\r\\n</meinxml>\\n\";\n+\n+    // https://issues.apache.org/jira/browse/COMPRESS-320\n+    @Test\n+    public void testRandomlySkippingEntries() throws Exception {\n+    \t// Read sequential reference.\n+    \tMap<String, byte[]> entriesByName = new HashMap<String, byte[]>();\n+\t    SevenZFile archive = new SevenZFile(getFile(\"COMPRESS-320/Copy.7z\"));\n+\t    SevenZArchiveEntry entry;\n+\t    while ((entry = archive.getNextEntry()) != null) {\n+\t    \tif (entry.hasStream()) {\n+\t    \t\tentriesByName.put(entry.getName(), readFully(archive));\n+\t    \t}\n+\t    }\n+\t    archive.close();\n+\n+\t\tString[] variants = {\n+\t\t\t\"BZip2-solid.7z\", \n+\t\t\t\"BZip2.7z\", \n+\t\t\t\"Copy-solid.7z\", \n+\t\t\t\"Copy.7z\", \n+\t\t\t\"Deflate-solid.7z\", \n+\t\t\t\"Deflate.7z\",\n+\t\t\t\"LZMA-solid.7z\", \n+\t\t\t\"LZMA.7z\", \n+\t\t\t\"LZMA2-solid.7z\", \n+\t\t\t\"LZMA2.7z\", \n+\t\t\t// TODO: unsupported compression method.\n+\t\t\t// \"PPMd-solid.7z\", \n+\t\t\t// \"PPMd.7z\", \n+\t\t};\n+\n+\t\tfor (String fileName : variants) {\n+\t\t    archive = new SevenZFile(getFile(\"COMPRESS-320/\" + fileName));\n+\n+\t\t    while ((entry = archive.getNextEntry()) != null) {\n+\t\t\t\t// TODO: randomly skip reading entries.\n+\n+\t\t\t\tif (entry.hasStream()) {\n+\t\t\t\t    assertTrue(entriesByName.containsKey(entry.getName()));\n+\t\t\t\t    byte [] content = readFully(archive);\n+\t\t\t\t    assertTrue(\"Content mismatch on: \" + fileName + \"!\" + entry.getName(), \n+\t\t\t\t    \t\tArrays.equals(content, entriesByName.get(entry.getName())));\n+\t\t\t\t}\n+\t\t    }\n+\t\n+\t\t    archive.close();\n+\t\t}\n+    }\n+\n+\tprivate byte [] readFully(SevenZFile archive) throws IOException {\n+\t    byte [] buf = new byte [1024];\n+\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\t\tfor (int len = 0; (len = archive.read(buf)) > 0;) {\n+\t\t    baos.write(buf, 0, len);\n+\t\t}\n+\t\treturn baos.toByteArray();\n+\t}\n \n     @Test\n     public void testAllEmptyFilesArchive() throws Exception {", "timestamp": 1456324939, "metainfo": ""}