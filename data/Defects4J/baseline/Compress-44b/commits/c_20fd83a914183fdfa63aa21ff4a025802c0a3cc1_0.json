{"sha": "20fd83a914183fdfa63aa21ff4a025802c0a3cc1", "log": "support uncompressing concatenated .bz2 files.  COMPRESS-146.  Submitted by Lasse Collin  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n     private int nInUse;\n \n     private InputStream in;\n+    private final boolean decompressConcatenated;\n \n     private int currentChar = -1;\n \n     private BZip2CompressorInputStream.Data data;\n \n     /**\n-     * Constructs a new BZip2CompressorInputStream which decompresses bytes read from the\n-     * specified stream.\n+     * Constructs a new BZip2CompressorInputStream which decompresses bytes\n+     * read from the specified stream. This doesn't suppprt decompressing\n+     * concatenated .bz2 files.\n      * \n      * @throws IOException\n      *             if the stream content is malformed or an I/O error occurs.\n      *             if <tt>in == null</tt>\n      */\n     public BZip2CompressorInputStream(final InputStream in) throws IOException {\n+        this(in, false);\n+    }\n+\n+    /**\n+     * Constructs a new BZip2CompressorInputStream which decompresses bytes\n+     * read from the specified stream.\n+     *\n+     * @param inputStream  the InputStream from which this object should\n+     *                     be created of\n+     * @param decompressConcatenated\n+     *                     if true, decompress until the end of the input;\n+     *                     if false, stop after the first .bz2 stream and\n+     *                     leave the input position to point to the next\n+     *                     byte after the .bz2 stream\n+     *\n+     * @throws IOException\n+     *             if the stream content is malformed or an I/O error occurs.\n+     * @throws NullPointerException\n+     *             if <tt>in == null</tt>\n+     */\n+    public BZip2CompressorInputStream(final InputStream in,\n+                                      final boolean decompressConcatenated)\n+            throws IOException {\n         super();\n \n         this.in = in;\n-        init();\n+        this.decompressConcatenated = decompressConcatenated;\n+\n+        init(true);\n+        initBlock();\n+        setupBlock();\n     }\n \n     /** {@inheritDoc} */\n         return retChar;\n     }\n \n-    private void init() throws IOException {\n+    private boolean init(boolean isFirstStream) throws IOException {\n         if (null == in) {\n             throw new IOException(\"No InputStream\");\n         }\n-        checkMagicChar('B', \"first\");\n-        checkMagicChar('Z', \"second\");\n-        checkMagicChar('h', \"third\");\n+\n+        int magic0 = this.in.read();\n+        int magic1 = this.in.read();\n+        int magic2 = this.in.read();\n+        if (magic0 == -1 && !isFirstStream)\n+            return false;\n+\n+        if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h')\n+            throw new IOException(isFirstStream\n+                    ? \"Stream is not in the BZip2 format\"\n+                    : \"Garbage after a valid BZip2 stream\");\n \n         int blockSize = this.in.read();\n         if ((blockSize < '1') || (blockSize > '9')) {\n-            throw new IOException(\"Stream is not BZip2 formatted: illegal \"\n-                                  + \"blocksize \" + (char) blockSize);\n+            throw new IOException(\"BZip2 block size is invalid\");\n         }\n \n         this.blockSize100k = blockSize - '0';\n \n-        initBlock();\n-        setupBlock();\n-    }\n-\n-    private void checkMagicChar(char expected, String position)\n-        throws IOException {\n-        int magic = this.in.read();\n-        if (magic != expected) {\n-            throw new IOException(\"Stream is not BZip2 formatted: expected '\"\n-                                  + expected + \"' as \" + position + \" byte but got '\"\n-                                  + (char) magic + \"'\");\n-        }\n+        this.bsLive = 0;\n+        this.computedCombinedCRC = 0;\n+\n+        return true;\n     }\n \n     private void initBlock() throws IOException {\n-        char magic0 = bsGetUByte();\n-        char magic1 = bsGetUByte();\n-        char magic2 = bsGetUByte();\n-        char magic3 = bsGetUByte();\n-        char magic4 = bsGetUByte();\n-        char magic5 = bsGetUByte();\n-\n-        if (magic0 == 0x17 && magic1 == 0x72 && magic2 == 0x45\n-            && magic3 == 0x38 && magic4 == 0x50 && magic5 == 0x90) {\n-            complete(); // end of file\n-        } else if (magic0 != 0x31 || // '1'\n-                   magic1 != 0x41 || // ')'\n-                   magic2 != 0x59 || // 'Y'\n-                   magic3 != 0x26 || // '&'\n-                   magic4 != 0x53 || // 'S'\n-                   magic5 != 0x59 // 'Y'\n-                   ) {\n+        char magic0;\n+        char magic1;\n+        char magic2;\n+        char magic3;\n+        char magic4;\n+        char magic5;\n+\n+        while (true) {\n+            // Get the block magic bytes.\n+            magic0 = bsGetUByte();\n+            magic1 = bsGetUByte();\n+            magic2 = bsGetUByte();\n+            magic3 = bsGetUByte();\n+            magic4 = bsGetUByte();\n+            magic5 = bsGetUByte();\n+\n+            // If isn't end of stream magic, break out of the loop.\n+            if (magic0 != 0x17 || magic1 != 0x72 || magic2 != 0x45\n+                    || magic3 != 0x38 || magic4 != 0x50 || magic5 != 0x90)\n+                break;\n+\n+            // End of stream was reached. Check the combined CRC and\n+            // advance to the next .bz2 stream if decoding concatenated\n+            // streams.\n+            if (complete())\n+                return;\n+        }\n+\n+        if (magic0 != 0x31 || // '1'\n+            magic1 != 0x41 || // ')'\n+            magic2 != 0x59 || // 'Y'\n+            magic3 != 0x26 || // '&'\n+            magic4 != 0x53 || // 'S'\n+            magic5 != 0x59 // 'Y'\n+            ) {\n             this.currentState = EOF;\n             throw new IOException(\"bad block header\");\n         } else {\n         this.computedCombinedCRC ^= this.computedBlockCRC;\n     }\n \n-    private void complete() throws IOException {\n+    private boolean complete() throws IOException {\n         this.storedCombinedCRC = bsGetInt();\n         this.currentState = EOF;\n         this.data = null;\n         if (this.storedCombinedCRC != this.computedCombinedCRC) {\n             throw new IOException(\"BZip2 CRC error\");\n         }\n+\n+        // Look for the next .bz2 stream if decompressing\n+        // concatenated files.\n+        return !decompressConcatenated || !init(false);\n     }\n \n     @Override", "timestamp": 1320683811, "metainfo": ""}