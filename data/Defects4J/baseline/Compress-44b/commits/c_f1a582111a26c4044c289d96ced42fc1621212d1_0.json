{"sha": "f1a582111a26c4044c289d96ced42fc1621212d1", "log": "Better local variable name.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n             }\n \n             // Tar needs an even bigger buffer to check the signature; read the first block\n-            final byte[] tarheader = new byte[TAR_HEADER_SIZE];\n-            in.mark(tarheader.length);\n-            signatureLength = IOUtils.readFully(in, tarheader);\n+            final byte[] tarHeader = new byte[TAR_HEADER_SIZE];\n+            in.mark(tarHeader.length);\n+            signatureLength = IOUtils.readFully(in, tarHeader);\n             in.reset();\n-            if (TarArchiveInputStream.matches(tarheader, signatureLength)) {\n+            if (TarArchiveInputStream.matches(tarHeader, signatureLength)) {\n                 return createArchiveInputStream(TAR, in);\n             }\n             // COMPRESS-117 - improve auto-recognition\n             if (signatureLength >= TAR_HEADER_SIZE) {\n                 TarArchiveInputStream tais = null;\n                 try {\n-                    tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));\n+                    tais = new TarArchiveInputStream(new ByteArrayInputStream(tarHeader));\n                     // COMPRESS-191 - verify the header checksum\n                     if (tais.getNextTarEntry().isCheckSumOK()) {\n                         return createArchiveInputStream(TAR, in);", "timestamp": 1481269559, "metainfo": ""}