{"sha": "b8101b95c1d647b59697fed229bbbd8b5493b17c", "log": "allow callback to throw IOException", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n  * under the License.\n  */\n package org.apache.commons.compress.compressors.lz77support;\n+\n+import java.io.IOException;\n \n /**\n  * Helper class for compression algorithms that use the ideas of LZ77.\n      * execution of {@link #compress} or {@link #finish}.</p>\n      */\n     public interface Callback /* extends Consumer<Block> */ {\n-        void accept(Block b);\n+        /**\n+         * Consumes a block.\n+         * @param b the block to consume\n+         * @throws IOException in case of an error\n+         */\n+        void accept(Block b) throws IOException;\n     }\n \n     static final int NUMBER_OF_BYTES_IN_HASH = 3;\n      * more blocks to the callback during the execution of this\n      * method.\n      * @param data the data to compress - must not be null\n-     */\n-    public void compress(byte[] data) {\n+     * @throws IOException if the callback throws an exception\n+     */\n+    public void compress(byte[] data) throws IOException {\n         compress(data, 0, data.length);\n     }\n \n      * @param data the data to compress - must not be null\n      * @param off the start offset of the data\n      * @param len the number of bytes to compress\n-     */\n-    public void compress(byte[] data, int off, int len) {\n+     * @throws IOException if the callback throws an exception\n+     */\n+    public void compress(byte[] data, int off, int len) throws IOException {\n         final int wSize = params.getWindowSize();\n         while (len > wSize) {\n             doCompress(data, off, wSize);\n      * <p>The compressor will in turn emit at least one block ({@link\n      * EOD}) but potentially multiple blocks to the callback during\n      * the execution of this method.</p>\n-     */\n-    public void finish() {\n+     * @throws IOException if the callback throws an exception\n+     */\n+    public void finish() throws IOException {\n         if (blockStart != currentPosition || lookahead > 0) {\n             currentPosition += lookahead;\n             flushLiteralBlock();\n     }\n \n     // performs the actual algorithm with the pre-condition len <= windowSize\n-    private void doCompress(byte[] data, int off, int len) {\n+    private void doCompress(byte[] data, int off, int len) throws IOException {\n         int spaceLeft = window.length - currentPosition - lookahead;\n         if (len > spaceLeft) {\n             slide();\n         initialized = true;\n     }\n \n-    private void compress() {\n+    private void compress() throws IOException {\n         final int minMatch = params.getMinMatchLength();\n \n         while (lookahead >= minMatch) {\n         }\n     }\n \n-    private void flushBackReference(int matchLength) {\n+    private void flushBackReference(int matchLength) throws IOException {\n         callback.accept(new BackReference(currentPosition - matchStart, matchLength));\n     }\n \n-    private void flushLiteralBlock() {\n+    private void flushLiteralBlock() throws IOException {\n         callback.accept(new LiteralBlock(window, blockStart, currentPosition - blockStart));\n     }\n \n--- a/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n  */\n package org.apache.commons.compress.compressors.lz77support;\n \n-import java.io.UnsupportedEncodingException;\n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n                    + \"\\n\"\n                    + \"I do not like them, Sam-I-am.\\n\"\n                    + \"I do not like green eggs and ham.\").getBytes(\"ASCII\");\n-        } catch (UnsupportedEncodingException ex) {\n+        } catch (IOException ex) {\n             throw new RuntimeException(\"ASCII not supported\");\n         }\n         ONE_TO_TEN = new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };\n     }\n \n-    private List<LZ77Compressor.Block> compress(Parameters params, byte[]... chunks) {\n+    private List<LZ77Compressor.Block> compress(Parameters params, byte[]... chunks) throws IOException {\n         final List<LZ77Compressor.Block> blocks = new ArrayList<>();\n         LZ77Compressor c = new LZ77Compressor(params, new LZ77Compressor.Callback() {\n                 @Override\n     }\n \n     @Test\n-    public void nonCompressableWithLengthSmallerThanLiteralMax() {\n+    public void nonCompressableWithLengthSmallerThanLiteralMax() throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(128), ONE_TO_TEN);\n         assertSize(2, blocks);\n         assertLiteralBlock(ONE_TO_TEN, blocks.get(0));\n     }\n \n     @Test\n-    public void nonCompressableWithLengthGreaterThanLiteralMaxButLessThanTwiceWindowSize() {\n+    public void nonCompressableWithLengthGreaterThanLiteralMaxButLessThanTwiceWindowSize() throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(8), ONE_TO_TEN);\n         assertSize(3, blocks);\n         assertLiteralBlock(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, blocks.get(0));\n     }\n \n     @Test\n-    public void nonCompressableWithLengthThatForcesWindowSlide() {\n+    public void nonCompressableWithLengthThatForcesWindowSlide() throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(4), ONE_TO_TEN);\n         assertSize(4, blocks);\n         assertLiteralBlock(new byte[] { 1, 2, 3, 4, }, blocks.get(0));\n     }\n \n     @Test\n-    public void nonCompressableSentAsSingleBytes() {\n+    public void nonCompressableSentAsSingleBytes() throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(8), stagger(ONE_TO_TEN));\n         assertSize(3, blocks);\n         assertLiteralBlock(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, blocks.get(0));\n \n     @Test\n     public void blaExampleWithFullArrayAvailableForCompression()\n-        throws UnsupportedEncodingException {\n+        throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(128), BLA);\n         assertSize(4, blocks);\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n     }\n \n     @Test\n-    public void blaExampleWithShorterMatchLength() throws UnsupportedEncodingException {\n+    public void blaExampleWithShorterMatchLength() throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(128, 3, 5, 0, 0), BLA);\n         assertSize(7, blocks);\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n     }\n \n     @Test\n-    public void blaExampleSmallerWindowSize() throws UnsupportedEncodingException {\n+    public void blaExampleSmallerWindowSize() throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(8), BLA);\n         assertSize(5, blocks);\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n     }\n \n     @Test\n-    public void blaExampleWithSingleByteWrites() throws UnsupportedEncodingException {\n+    public void blaExampleWithSingleByteWrites() throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(128), stagger(BLA));\n         assertEquals(9, blocks.size());\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n     }\n \n     @Test\n-    public void samIAmExampleWithFullArrayAvailableForCompression() throws UnsupportedEncodingException {\n+    public void samIAmExampleWithFullArrayAvailableForCompression() throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(1024), SAM);\n         assertEquals(21, blocks.size());\n         assertLiteralBlock(\"I am Sam\\n\\n\", blocks.get(0));\n     }\n \n     private static final void assertLiteralBlock(String expectedContent, LZ77Compressor.Block block)\n-        throws UnsupportedEncodingException {\n+        throws IOException {\n         assertLiteralBlock(expectedContent.getBytes(\"ASCII\"), block);\n     }\n ", "timestamp": 1483972311, "metainfo": ""}