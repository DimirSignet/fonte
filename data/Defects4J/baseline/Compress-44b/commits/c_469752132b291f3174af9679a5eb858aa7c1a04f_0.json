{"sha": "469752132b291f3174af9679a5eb858aa7c1a04f", "log": "Merge tag 'rel/1.14' and prepare for next cycle", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportIT.java\n                     a.skipBytes(2 * 47 /* CD entry of file with\n                                           file name length 1 and no\n                                           extra data */\n-                                    + 2 * (mode == Zip64Mode.Always ? 4 : 0)\n-                                /* empty ZIP64 extra fields if mode is Always */\n+                                    + 2 * (mode == Zip64Mode.Always ? 28 : 0)\n+                                /* ZIP64 extra fields if mode is Always */\n                     );\n \n                     // grab third entry, verify offset is\n                     // information extra field\n                     final byte[] header = new byte[12];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 1, 2,\n                             // version made by\n                     }, header);\n                     // ignore timestamp, CRC, compressed size\n                     a.skipBytes(12);\n-                    final byte[] rest = new byte[23];\n+                    // Original Size\n+                    final byte[] originalSize = new byte[4];\n+                    a.readFully(originalSize);\n+                    if (mode == Zip64Mode.Always) {\n+                        assertArrayEquals(\"CDH original size\", new byte[] {\n+                                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            }, originalSize);\n+                    } else {\n+                        assertArrayEquals(\"CDH original size\", new byte[] {\n+                                1, 0, 0, 0\n+                            }, originalSize);\n+                    }\n+                    final byte[] rest = new byte[19];\n                     a.readFully(rest);\n-                    assertArrayEquals(new byte[] {\n-                            // Original Size\n-                            1, 0, 0, 0,\n+                    assertArrayEquals(\"CDH rest\", new byte[] {\n                             // file name length\n                             1, 0,\n                             // extra field length\n-                            12, 0,\n+                            (byte) (mode == Zip64Mode.Always? 28 : 12), 0,\n                             // comment length\n                             0, 0,\n                             // disk number\n                             // file name\n                             (byte) '2'\n                     }, rest);\n-                    final byte[] extra = new byte[4];\n-                    a.readFully(extra);\n-                    assertArrayEquals(new byte[] {\n-                            // Header-ID\n-                            1, 0,\n-                            // size\n-                            8, 0\n-                    }, extra);\n+                    if (mode == Zip64Mode.Always) {\n+                        final byte[] extra = new byte[12];\n+                        a.readFully(extra);\n+                        assertArrayEquals(\"CDH extra\", new byte[] {\n+                                // Header-ID\n+                                1, 0,\n+                                // size\n+                                24, 0,\n+                                // Original Size\n+                                1, 0, 0, 0, 0, 0, 0, 0,\n+                            }, extra);\n+                        // skip compressed size\n+                        a.skipBytes(8);\n+                    } else {\n+                        final byte[] extra = new byte[4];\n+                        a.readFully(extra);\n+                        assertArrayEquals(\"CDH extra\", new byte[] {\n+                                // Header-ID\n+                                1, 0,\n+                                // size\n+                                8, 0,\n+                            }, extra);\n+                    }\n \n                     // read offset of LFH\n                     final byte[] offset = new byte[8];\n                     a.seek(ZipEightByteInteger.getLongValue(offset));\n                     final byte[] sig = new byte[4];\n                     a.readFully(sig);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH signature\", new byte[] {\n                             (byte) 0x50, (byte) 0x4b, 3, 4,\n                     }, sig);\n                 }\n                     // field\n                     byte[] header = new byte[12];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 1, 2,\n                             // version made by\n                     }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n-                    byte[] rest = new byte[31];\n+                    byte[] rest = new byte[26];\n                     a.readFully(rest);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH rest\", new byte[] {\n                             // CRC\n                             (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n                             // Compressed Size\n                             // file name length\n                             1, 0,\n                             // extra field length\n-                            20, 0,\n+                            (byte) (mode == Zip64Mode.Always? 28 : 20), 0,\n                             // comment length\n                             0, 0,\n                             // disk number\n                             // attributes\n                             0, 0,\n                             0, 0, 0, 0,\n-                            // offset\n-                            0, 0, 0, 0,\n-                            // file name\n-                            (byte) '0'\n                     }, rest);\n+                    byte[] offset = new byte[4];\n+                    a.readFully(offset);\n+                    if (mode == Zip64Mode.Always) {\n+                        assertArrayEquals(\"offset\", new byte[] {\n+                                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            }, offset);\n+                    } else {\n+                        assertArrayEquals(\"offset\", new byte[] {\n+                                0, 0, 0, 0,\n+                            }, offset);\n+                    }\n+                    assertEquals('0', a.read());\n                     final byte[] extra = new byte[20];\n                     a.readFully(extra);\n                     // 5e9 == 0x12A05F200\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n-                            16, 0,\n+                            (byte) (mode == Zip64Mode.Always? 24 : 16), 0,\n                             // original size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n                     }, extra);\n+                    if (mode == Zip64Mode.Always) {\n+                        offset = new byte[8];\n+                        a.readFully(offset);\n+                        assertArrayEquals(\"extra offset\", new byte[] {\n+                                0, 0, 0, 0, 0, 0, 0, 0,\n+                            }, offset);\n+                    }\n \n                     // and now validate local file header\n                     a.seek(0);\n                     header = new byte[10];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 3, 4,\n                             // version needed to extract\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                     a.readFully(rest);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH rest\", new byte[] {\n                             // CRC\n                             (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n                             // Compressed Size\n                     }, rest);\n                     a.readFully(extra);\n                     // 5e9 == 0x12A05F200\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n                     // information extra field\n                     byte[] header = new byte[12];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 1, 2,\n                             // version made by\n                     }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n-                    byte[] rest = new byte[31];\n+                    byte[] rest = new byte[26];\n                     a.readFully(rest);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH rest\", new byte[] {\n                             // CRC\n                             (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n                             // Compressed Size\n                             // file name length\n                             1, 0,\n                             // extra field length\n-                            20, 0,\n+                            (byte) (mode == Zip64Mode.Always? 28 : 20), 0,\n                             // comment length\n                             0, 0,\n                             // disk number\n                             // attributes\n                             0, 0,\n                             0, 0, 0, 0,\n-                            // offset\n-                            0, 0, 0, 0,\n-                            // file name\n-                            (byte) '0'\n                     }, rest);\n-                    final byte[] extra = new byte[20];\n+                    byte[] offset = new byte[4];\n+                    a.readFully(offset);\n+                    if (mode == Zip64Mode.Always) {\n+                        assertArrayEquals(\"offset\", new byte[] {\n+                                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            }, offset);\n+                    } else {\n+                        assertArrayEquals(\"offset\", new byte[] {\n+                                0, 0, 0, 0,\n+                            }, offset);\n+                    }\n+                    assertEquals('0', a.read());\n+                    byte[] extra = new byte[12];\n                     a.readFully(extra);\n                     // 5e9 == 0x12A05F200\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n-                            16, 0,\n+                            (byte) (mode == Zip64Mode.Always? 24 : 16), 0,\n                             // original size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n-                            // compressed size\n-                            (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n-                            0, 0, 0, 0,\n                     }, extra);\n+                    if (mode == Zip64Mode.Always) {\n+                        // skip compressed size\n+                        a.skipBytes(8);\n+                        offset = new byte[8];\n+                        a.readFully(offset);\n+                        assertArrayEquals(\"extra offset\", new byte[] {\n+                                0, 0, 0, 0, 0, 0, 0, 0,\n+                            }, offset);\n+                    }\n \n                     // validate data descriptor\n                     a.seek(cfhPos - 24);\n                     byte[] dd = new byte[8];\n                     a.readFully(dd);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"DD\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 7, 8,\n                             // CRC\n                             (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n                     }, dd);\n-                    dd = new byte[16];\n+                    // skip compressed size\n+                    a.skipBytes(8);\n+                    dd = new byte[8];\n                     a.readFully(dd);\n-                    assertArrayEquals(new byte[] {\n-                            // compressed size\n-                            (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n-                            0, 0, 0, 0,\n+                    assertArrayEquals(\"DD sizes\", new byte[] {\n                             // original size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n                     a.seek(0);\n                     header = new byte[10];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 3, 4,\n                             // version needed to extract\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                     a.readFully(rest);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH rest\", new byte[] {\n                             // CRC\n                             0, 0, 0, 0,\n                             // Compressed Size\n                             // file name\n                             (byte) '0'\n                     }, rest);\n+                    extra = new byte[20];\n                     a.readFully(extra);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n                     // information extra field\n                     byte[] header = new byte[12];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 1, 2,\n                             // version made by\n                     }, header);\n                     // ignore timestamp\n                     a.skipBytes(4);\n-                    byte[] rest = new byte[31];\n+                    byte[] rest = new byte[26];\n                     a.readFully(rest);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH rest\", new byte[] {\n                             // CRC\n                             (byte) 0x50, (byte) 0x6F, (byte) 0x31, (byte) 0x5c,\n                             // Compressed Size\n                             // file name length\n                             1, 0,\n                             // extra field length\n-                            20, 0,\n+                            (byte) (mode == Zip64Mode.Always? 28 : 20), 0,\n                             // comment length\n                             0, 0,\n                             // disk number\n                             // attributes\n                             0, 0,\n                             0, 0, 0, 0,\n-                            // offset\n-                            0, 0, 0, 0,\n-                            // file name\n-                            (byte) '0'\n                     }, rest);\n-                    byte[] extra = new byte[20];\n+                    byte[] offset = new byte[4];\n+                    a.readFully(offset);\n+                    if (mode == Zip64Mode.Always) {\n+                        assertArrayEquals(\"offset\", new byte[] {\n+                                (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n+                            }, offset);\n+                    } else {\n+                        assertArrayEquals(\"offset\", new byte[] {\n+                                0, 0, 0, 0,\n+                            }, offset);\n+                    }\n+                    assertEquals('0', a.read());\n+                    byte[] extra = new byte[12];\n                     a.readFully(extra);\n                     // 5e9 == 0x12A05F200\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n-                            16, 0,\n+                            (byte) (mode == Zip64Mode.Always? 24 : 16), 0,\n                             // original size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n-                            // compressed size\n-                            (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n-                            0, 0, 0, 0,\n                     }, extra);\n+                    if (mode == Zip64Mode.Always) {\n+                        // skip compressed size\n+                        a.skipBytes(8);\n+                        offset = new byte[8];\n+                        a.readFully(offset);\n+                        assertArrayEquals(\"extra offset\", new byte[] {\n+                                0, 0, 0, 0, 0, 0, 0, 0,\n+                            }, offset);\n+                    }\n \n                     // and now validate local file header\n                     a.seek(0);\n                     header = new byte[10];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 3, 4,\n                             // version needed to extract\n                             // file name\n                             (byte) '0'\n                     }, rest);\n-                    extra = new byte[20];\n+                    extra = new byte[12];\n                     a.readFully(extra);\n                     assertArrayEquals(new byte[] {\n                             // Header-ID\n                             // original size\n                             0, (byte) 0xF2, 5, (byte) 0x2A,\n                             1, 0, 0, 0,\n-                            // compressed size\n-                            (byte) 0x68, (byte) 0x27, (byte) 0x4A, 0,\n-                            0, 0, 0, 0,\n+                            // skip compressed size\n                     }, extra);\n                 }\n             }\n                     // at all\n                     byte[] header = new byte[12];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 1, 2,\n                             // version made by\n                     byte[] rest = new byte[31];\n                     a.readFully(rest);\n                     // 1e6 == 0xF4240\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH rest\", new byte[] {\n                             // CRC\n                             (byte) 0x9E, (byte) 0xCB, (byte) 0x79, (byte) 0x12,\n                             // Compressed Size\n                     a.seek(0);\n                     header = new byte[10];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 3, 4,\n                             // version needed to extract\n                     rest = new byte[17];\n                     a.readFully(rest);\n                     // 1e6 == 0xF4240\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH rest\", new byte[] {\n                             // CRC\n                             (byte) 0x9E, (byte) 0xCB, (byte) 0x79, (byte) 0x12,\n                             // Compressed Size\n                     if (hasExtra) {\n                         final byte[] extra = new byte[20];\n                         a.readFully(extra);\n-                        assertArrayEquals(new byte[] {\n+                        assertArrayEquals(\"ZIP64 extra field\", new byte[] {\n                                 // Header-ID\n                                 1, 0,\n                                 // size of extra\n                     // has an empty ZIP64 extended information extra field\n                     byte[] header = new byte[12];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 1, 2,\n                             // version made by\n                     byte[] rest = new byte[31];\n                     a.readFully(rest);\n                     // 1e6 == 0xF4240\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH rest\", new byte[] {\n                             // CRC\n                             (byte) 0x9E, (byte) 0xCB, (byte) 0x79, (byte) 0x12,\n                             // Compressed Size\n-                            (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n                             // Original Size\n-                            (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n                             // file name length\n                             1, 0,\n                             // extra field length\n-                            4, 0,\n+                            28, 0,\n                             // comment length\n                             0, 0,\n                             // disk number\n                             0, 0,\n                             0, 0, 0, 0,\n                             // offset\n-                            0, 0, 0, 0,\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n                             // file name\n                             (byte) '0'\n                     }, rest);\n \n-                    byte[] extra = new byte[4];\n+                    byte[] extra = new byte[28];\n                     a.readFully(extra);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n-                            0, 0,\n+                            24, 0,\n+                            // original size\n+                            (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n+                            0, 0, 0, 0,\n+                            // compressed size\n+                            (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n+                            0, 0, 0, 0,\n+                            0, 0, 0, 0, 0, 0, 0, 0,\n                     }, extra);\n \n                     // and now validate local file header: this one\n                     a.seek(0);\n                     header = new byte[10];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 3, 4,\n                             // version needed to extract\n                     rest = new byte[17];\n                     a.readFully(rest);\n                     // 1e6 == 0xF4240\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH rest\", new byte[] {\n                             // CRC\n                             (byte) 0x9E, (byte) 0xCB, (byte) 0x79, (byte) 0x12,\n                             // Compressed Size\n \n                     extra = new byte[20];\n                     a.readFully(extra);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n                     // information extra field\n                     byte[] header = new byte[12];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 1, 2,\n                             // version made by\n                     a.skipBytes(4);\n                     byte[] rest = new byte[23];\n                     a.readFully(rest);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH rest\", new byte[] {\n                             // Original Size\n-                            (byte) 0x40, (byte) 0x42,\n-                            (byte) 0x0F, 0,\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n                             // file name length\n                             1, 0,\n                             // extra field length\n-                            4, 0,\n+                            28, 0,\n                             // comment length\n                             0, 0,\n                             // disk number\n                             0, 0,\n                             0, 0, 0, 0,\n                             // offset\n-                            0, 0, 0, 0,\n+                            (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n                             // file name\n                             (byte) '0'\n                     }, rest);\n-                    byte[] extra = new byte[4];\n+                    byte[] extra = new byte[12];\n                     a.readFully(extra);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n-                            0, 0,\n+                            24, 0,\n+                            // original size\n+                            (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n+                            0, 0, 0, 0,\n                     }, extra);\n+                    // skip compressed size\n+                    a.skipBytes(8);\n+                    byte[] offset = new byte[8];\n+                    a.readFully(offset);\n+                    assertArrayEquals(\"extra offset\", new byte[] {\n+                            0, 0, 0, 0, 0, 0, 0, 0,\n+                        }, offset);\n \n                     // validate data descriptor\n                     a.seek(cfhPos - 24);\n                     byte[] dd = new byte[8];\n                     a.readFully(dd);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"DD\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 7, 8,\n                             // CRC\n                     a.skipBytes(8);\n                     dd = new byte[8];\n                     a.readFully(dd);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"DD size\", new byte[] {\n                             // original size\n                             (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n                             0, 0, 0, 0\n                     a.seek(0);\n                     header = new byte[10];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 3, 4,\n                             // version needed to extract\n                     a.skipBytes(4);\n                     rest = new byte[17];\n                     a.readFully(rest);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH rest\", new byte[] {\n                             // CRC\n                             0, 0, 0, 0,\n                             // Compressed Size\n \n                     extra = new byte[20];\n                     a.readFully(extra);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n                     // information extra field\n                     byte[] header = new byte[12];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 1, 2,\n                             // version made by\n                     a.skipBytes(4);\n                     byte[] crc = new byte[4];\n                     a.readFully(crc);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH CRC\", new byte[] {\n                             (byte) 0x9E, (byte) 0xCB, (byte) 0x79, (byte) 0x12,\n                     }, crc);\n                     // skip compressed size\n                     a.skipBytes(4);\n                     byte[] rest = new byte[23];\n                     a.readFully(rest);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH rest\", new byte[] {\n                             // Original Size\n-                            (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n+                            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n                             // file name length\n                             1, 0,\n                             // extra field length\n-                            4, 0,\n+                            28, 0,\n                             // comment length\n                             0, 0,\n                             // disk number\n                             0, 0,\n                             0, 0, 0, 0,\n                             // offset\n-                            0, 0, 0, 0,\n+                            (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n                             // file name\n                             (byte) '0'\n                     }, rest);\n-                    byte[] extra = new byte[4];\n+                    byte[] extra = new byte[12];\n                     a.readFully(extra);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"CDH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra\n-                            0, 0,\n+                            24, 0,\n+                            // original size\n+                            (byte) 0x40, (byte) 0x42, (byte) 0x0F, 0,\n+                            0, 0, 0, 0,\n                     }, extra);\n+                    // skip compressed size\n+                    a.skipBytes(8);\n+                    byte[] offset = new byte[8];\n+                    a.readFully(offset);\n+                    assertArrayEquals(\"extra offset\", new byte[] {\n+                            0, 0, 0, 0, 0, 0, 0, 0,\n+                        }, offset);\n \n                     // and now validate local file header\n                     a.seek(0);\n                     header = new byte[10];\n                     a.readFully(header);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH start\", new byte[] {\n                             // sig\n                             (byte) 0x50, (byte) 0x4b, 3, 4,\n                             // version needed to extract\n                     a.skipBytes(4);\n                     crc = new byte[4];\n                     a.readFully(crc);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH CRC\", new byte[] {\n                             (byte) 0x9E, (byte) 0xCB,\n                             (byte) 0x79, (byte) 0x12,\n                     }, crc);\n                     rest = new byte[13];\n                     a.readFully(rest);\n \n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH rest\", new byte[] {\n                             // Compressed Size\n                             (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF,\n                             // Original Size\n \n                     extra = new byte[12];\n                     a.readFully(extra);\n-                    assertArrayEquals(new byte[] {\n+                    assertArrayEquals(\"LFH extra\", new byte[] {\n                             // Header-ID\n                             1, 0,\n                             // size of extra", "timestamp": 1494794170, "metainfo": ""}