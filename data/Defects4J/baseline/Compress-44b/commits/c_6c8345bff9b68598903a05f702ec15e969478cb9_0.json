{"sha": "6c8345bff9b68598903a05f702ec15e969478cb9", "log": "Tests for [COMPRESS-359] Pack200 is broken.", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java\n+package org.apache.commons.compress.compressors;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class CompressorStreamFactoryRoundtripTest {\n+\n+    @Parameters(name = \"{0}\")\n+    public static String[] data() {\n+        return new String[] { //\n+                CompressorStreamFactory.BZIP2, //\n+                CompressorStreamFactory.DEFLATE, //\n+                CompressorStreamFactory.GZIP, //\n+                // CompressorStreamFactory.LZMA, // Not implemented yet\n+                // CompressorStreamFactory.PACK200, // Bug\n+                // CompressorStreamFactory.SNAPPY_FRAMED, // Not implemented yet\n+                // CompressorStreamFactory.SNAPPY_RAW, // Not implemented yet\n+                CompressorStreamFactory.XZ, //\n+                // CompressorStreamFactory.Z, // Not implemented yet\n+        };\n+    }\n+\n+    private final String compressorName;\n+\n+    public CompressorStreamFactoryRoundtripTest(final String compressorName) {\n+        this.compressorName = compressorName;\n+    }\n+\n+    @Test\n+    public void testCompressorStreamFactoryRoundtrip() throws Exception {\n+        final CompressorStreamFactory factory = new CompressorStreamFactory();\n+        final ByteArrayOutputStream compressedOs = new ByteArrayOutputStream();\n+        final CompressorOutputStream compressorOutputStream = factory.createCompressorOutputStream(compressorName,\n+                compressedOs);\n+        final String fixture = \"The quick brown fox jumps over the lazy dog\";\n+        compressorOutputStream.write(fixture.getBytes(\"UTF-8\"));\n+        compressorOutputStream.flush();\n+        compressorOutputStream.close();\n+        final ByteArrayInputStream is = new ByteArrayInputStream(compressedOs.toByteArray());\n+        final CompressorInputStream compressorInputStream = factory.createCompressorInputStream(compressorName, is);\n+        final ByteArrayOutputStream decompressedOs = new ByteArrayOutputStream();\n+        IOUtils.copy(compressorInputStream, decompressedOs);\n+        compressorInputStream.close();\n+        decompressedOs.flush();\n+        decompressedOs.close();\n+        Assert.assertEquals(fixture, decompressedOs.toString(\"UTF-8\"));\n+    }\n+\n+}", "timestamp": 1466786795, "metainfo": ""}