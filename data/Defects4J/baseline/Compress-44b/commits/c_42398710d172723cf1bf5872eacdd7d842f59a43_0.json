{"sha": "42398710d172723cf1bf5872eacdd7d842f59a43", "log": "rename bigFileMode to bigNumberMode.  COMPRESS-182  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n     /** POSIX/PAX extensions are used to store long file names in the archive. */\n     public static final int LONGFILE_POSIX = 3;\n \n-    /** Fail if a big file (&gt; 8GiB) is required in the archive. */\n-    public static final int BIGFILE_ERROR = 0;\n-\n-    /** star/GNU tar/BSD tar extensions are used to store big file sizes in the archive. */\n-    public static final int BIGFILE_STAR = 1;\n-\n-    /** POSIX/PAX extensions are used to store big file sizes in the archive. */\n-    public static final int BIGFILE_POSIX = 2;\n+    /** Fail if a big number (e.g. size &gt; 8GiB) is required in the archive. */\n+    public static final int BIGNUMBER_ERROR = 0;\n+\n+    /** star/GNU tar/BSD tar extensions are used to store big number in the archive. */\n+    public static final int BIGNUMBER_STAR = 1;\n+\n+    /** POSIX/PAX extensions are used to store big numbers in the archive. */\n+    public static final int BIGNUMBER_POSIX = 2;\n \n     private long      currSize;\n     private String    currName;\n     private final byte[]    assemBuf;\n     protected final TarBuffer buffer;\n     private int       longFileMode = LONGFILE_ERROR;\n-    private int       bigFileMode = BIGFILE_ERROR;\n+    private int       bigNumberMode = BIGNUMBER_ERROR;\n \n     private boolean closed = false;\n \n     }\n \n     /**\n-     * Set the big file mode.\n-     * This can be BIGFILE_ERROR(0), BIGFILE_POSIX(1) or BIGFILE_STAR(2).\n-     * This specifies the treatment of big files (sizes &gt; TarConstants.MAXSIZE).\n-     * Default is BIGFILE_ERROR.\n-     * @param bigFileMode the mode to use\n+     * Set the big number mode.\n+     * This can be BIGNUMBER_ERROR(0), BIGNUMBER_POSIX(1) or BIGNUMBER_STAR(2).\n+     * This specifies the treatment of big files (sizes &gt; TarConstants.MAXSIZE) and other numeric values to big to fit into a traditional tar header.\n+     * Default is BIGNUMBER_ERROR.\n+     * @param bigNumberMode the mode to use\n      * @since Apache Commons Compress 1.4\n      */\n-    public void setBigFileMode(int bigFileMode) {\n-        this.bigFileMode = bigFileMode;\n+    public void setBigNumberMode(int bigNumberMode) {\n+        this.bigNumberMode = bigNumberMode;\n     }\n \n \n             }\n         }\n \n-        if (bigFileMode == BIGFILE_POSIX) {\n+        if (bigNumberMode == BIGNUMBER_POSIX) {\n             addPaxHeadersForBigNumbers(paxHeaders, entry);\n-        } else if (bigFileMode != BIGFILE_STAR) {\n+        } else if (bigNumberMode != BIGNUMBER_STAR) {\n             failForBigNumbers(entry);\n         }\n \n             writePaxHeaders(entry.getName(), paxHeaders);\n         }\n \n-        entry.writeEntryHeader(recordBuf, bigFileMode == BIGFILE_STAR);\n+        entry.writeEntryHeader(recordBuf, bigNumberMode == BIGNUMBER_STAR);\n         buffer.writeRecord(recordBuf);\n \n         currBytes = 0;\n                                  TarConstants.MAXSIZE);\n         addPaxHeaderForBigNumber(paxHeaders, \"uid\", entry.getUserId(),\n                                  TarConstants.MAXID);\n-        // star extensions by J\\u00f6rg Schillig\n+        // star extensions by J\\u00f6rg Schilling\n         addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devmajor\",\n                                  entry.getDevMajor(), TarConstants.MAXID);\n         addPaxHeaderForBigNumber(paxHeaders, \"SCHILY.devminor\",\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n         }\n     }\n \n-    public void testBigFileStarMode() throws Exception {\n+    public void testBigNumberStarMode() throws Exception {\n         TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n         t.setSize(0100000000000L);\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n-        tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_STAR);\n+        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n         tos.putArchiveEntry(t);\n         // make sure header is written to byte array\n         tos.write(new byte[10 * 1024]);\n         assertEquals(0100000000000L, e.getSize());\n     }\n \n-    public void testBigFilePosixMode() throws Exception {\n+    public void testBigNumberPosixMode() throws Exception {\n         TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n         t.setSize(0100000000000L);\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n-        tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_POSIX);\n+        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n         tos.putArchiveEntry(t);\n         // make sure header is written to byte array\n         tos.write(new byte[10 * 1024]);\n         t.setModTime(-1000);\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n-        tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_STAR);\n+        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_STAR);\n         tos.putArchiveEntry(t);\n         // make sure header is written to byte array\n         tos.write(new byte[10 * 1024]);\n         t.setModTime(-1000);\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n-        tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_POSIX);\n+        tos.setBigNumberMode(TarArchiveOutputStream.BIGNUMBER_POSIX);\n         tos.putArchiveEntry(t);\n         // make sure header is written to byte array\n         tos.write(new byte[10 * 1024]);", "timestamp": 1331361936, "metainfo": ""}