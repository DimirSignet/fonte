{"sha": "ab85f00b6d327907ee23291979a6998c54cf88ad", "log": "These static fields should be accessed directly.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java\n import java.io.OutputStream;\n import java.util.zip.CRC32;\n import java.util.zip.Deflater;\n+import java.util.zip.ZipEntry;\n \n /**\n  * Encapsulates a {@link Deflater} and crc calculator, handling multiple types of output streams.\n         while ((length = source.read(readerBuf, 0, readerBuf.length)) >= 0) {\n             write(readerBuf, 0, length, method);\n         }\n-        if (method == ZipArchiveEntry.DEFLATED) {\n+        if (method == ZipEntry.DEFLATED) {\n             flushDeflater();\n         }\n     }\n     long write(byte[] b, int offset, int length, int method) throws IOException {\n         long current = writtenToOutputStreamForLastEntry;\n         crc.update(b, offset, length);\n-        if (method == ZipArchiveEntry.DEFLATED) {\n+        if (method == ZipEntry.DEFLATED) {\n             writeDeflated(b, offset, length);\n         } else {\n             writeCounted(b, offset, length);\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n \n         processZip64Extra(size, cSize);\n \n-        if (current.entry.getCompressedSize() != ZipArchiveEntry.SIZE_UNKNOWN) {\n+        if (current.entry.getCompressedSize() != ArchiveEntry.SIZE_UNKNOWN) {\n             if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()) {\n                 current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));\n             } else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {", "timestamp": 1460188539, "metainfo": ""}