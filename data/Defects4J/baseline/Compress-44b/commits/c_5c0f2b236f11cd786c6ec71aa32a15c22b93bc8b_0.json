{"sha": "5c0f2b236f11cd786c6ec71aa32a15c22b93bc8b", "log": "COMPRESS-263 add DEFLATE support, submitted by Matthias Stevens  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n+import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;\n+import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;\n import org.apache.commons.compress.compressors.lzma.LZMACompressorInputStream;\n      */\n     public static final String Z = \"z\";\n \n+    /**\n+     * Constant used to identify the Deflate compress method.\n+     * @since 1.9\n+     */\n+    public static final String DEFLATE = \"deflate\";\n+\n     private boolean decompressConcatenated = false;\n \n     /**\n                 return new ZCompressorInputStream(in);\n             }\n \n+            if (DEFLATE.equalsIgnoreCase(name)) {\n+                return new DeflateCompressorInputStream(in);\n+            }\n+\n         } catch (IOException e) {\n             throw new CompressorException(\n                     \"Could not create CompressorInputStream.\", e);\n                 return new Pack200CompressorOutputStream(out);\n             }\n \n+            if (DEFLATE.equalsIgnoreCase(name)) {\n+                return new DeflateCompressorOutputStream(out);\n+            }\n+\n         } catch (IOException e) {\n             throw new CompressorException(\n                     \"Could not create CompressorOutputStream\", e);\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorInputStream.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.deflate;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+\n+import org.apache.commons.compress.compressors.CompressorInputStream;\n+\n+/**\n+ * Deflate decompressor.\n+ * @since 1.9\n+ */\n+public class DeflateCompressorInputStream extends CompressorInputStream {\n+    private final InputStream in;\n+\n+    /**\n+     * Creates a new input stream that decompresses Deflate-compressed data\n+     * from the specified input stream.\n+     *\n+     * @param       inputStream where to read the compressed data\n+     *\n+     */\n+    public DeflateCompressorInputStream(InputStream inputStream) {\n+        this(inputStream, new DeflateParameters());\n+    }\n+\n+    /**\n+     * Creates a new input stream that decompresses Deflate-compressed data\n+     * from the specified input stream.\n+     *\n+     * @param       inputStream where to read the compressed data\n+     * @param       compressor parameters\n+     */\n+    public DeflateCompressorInputStream(InputStream inputStream,\n+                                        DeflateParameters parameters) {\n+        in = new InflaterInputStream(inputStream, new Inflater(!parameters.isZlibHeaderPresent()));\n+    }\n+    \n+    /** {@inheritDoc} */\n+    @Override\n+    public int read() throws IOException {\n+        int ret = in.read();\n+        count(ret == -1 ? 0 : 1);\n+        return ret;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public int read(byte[] buf, int off, int len) throws IOException {\n+        int ret = in.read(buf, off, len);\n+        count(ret);\n+        return ret;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public long skip(long n) throws IOException {\n+        return in.skip(n);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public int available() throws IOException {\n+        return in.available();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override\n+    public void close() throws IOException {\n+        in.close();\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateCompressorOutputStream.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.deflate;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.zip.Deflater;\n+import java.util.zip.DeflaterOutputStream;\n+\n+import org.apache.commons.compress.compressors.CompressorOutputStream;\n+\n+/**\n+ * Deflate compressor.\n+ * @since 1.9\n+ */\n+public class DeflateCompressorOutputStream extends CompressorOutputStream {\n+    private final DeflaterOutputStream out;\n+   \n+    /**\n+     * Creates a Deflate compressed output stream with the default parameters.\n+     */\n+    public DeflateCompressorOutputStream(OutputStream outputStream) throws IOException {\n+        this(outputStream, new DeflateParameters());\n+    }\n+\n+    /**\n+     * Creates a Deflate compressed output stream with the specified parameters.\n+     */\n+    public DeflateCompressorOutputStream(OutputStream outputStream,\n+                                         DeflateParameters parameters) throws IOException {\n+        this.out = new DeflaterOutputStream(outputStream, new Deflater(parameters.getCompressionLevel(), !parameters.isZlibHeaderPresent()));\n+    }\n+\n+    @Override\n+    public void write(int b) throws IOException {\n+        out.write(b);\n+    }\n+\n+    @Override\n+    public void write(byte[] buf, int off, int len) throws IOException {\n+        out.write(buf, off, len);\n+    }\n+\n+    /**\n+     * Flushes the encoder and calls <code>outputStream.flush()</code>.\n+     * All buffered pending data will then be decompressible from\n+     * the output stream. Calling this function very often may increase\n+     * the compressed file size a lot.\n+     */\n+    @Override\n+    public void flush() throws IOException {\n+        out.flush();\n+    }\n+\n+    /**\n+     * Finishes compression without closing the underlying stream.\n+     * No more data can be written to this stream after finishing.\n+     */\n+    public void finish() throws IOException {\n+        out.finish();\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        out.close();\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/deflate/DeflateParameters.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.commons.compress.compressors.deflate;\n+\n+import java.util.zip.Deflater;\n+\n+/**\n+ * Parameters for the Deflate compressor.\n+ * @since 1.9\n+ */\n+public class DeflateParameters {\n+\n+    private boolean zlibHeaderPresent = true;\n+    private int compressionLevel = Deflater.DEFAULT_COMPRESSION;\n+\n+    public boolean isZlibHeaderPresent() {\n+        return zlibHeaderPresent;\n+    }\n+\n+    /**\n+     * Sets the zlib header presence parameter.\n+     * This affects whether or not the zlib header will be written (when compressing) or expected (when decompressing).\n+     *\n+     * @param zlibHeaderPresent\n+     */\n+    public void setZlibHeaderPresent(boolean zlibHeaderPresent) {\n+        this.zlibHeaderPresent = zlibHeaderPresent;\n+    }\n+\n+    public int getCompressionLevel() {\n+        return compressionLevel;\n+    }\n+\n+    /**\n+     * Sets the compression level.\n+     *\n+     * @param compressionLevel the compression level (between 0 and 9)\n+     * @see Deflater#NO_COMPRESSION\n+     * @see Deflater#BEST_SPEED\n+     * @see Deflater#DEFAULT_COMPRESSION\n+     * @see Deflater#BEST_COMPRESSION\n+     */\n+    public void setCompressionLevel(int compressionLevel) {\n+        if (compressionLevel < -1 || compressionLevel > 9) {\n+            throw new IllegalArgumentException(\"Invalid Deflate compression level: \" + compressionLevel);\n+        }\n+        this.compressionLevel = compressionLevel;\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/DeflateTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;\n+import org.apache.commons.compress.compressors.deflate.DeflateCompressorOutputStream;\n+import org.apache.commons.compress.compressors.deflate.DeflateParameters;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+public final class DeflateTestCase extends AbstractTestCase {\n+\n+    /**\n+     * Tests the creation of a DEFLATE archive with zlib header\n+     * \n+     * @throws Exception\n+     */\n+    public void testDeflateCreation()  throws Exception {\n+        final File input = getFile(\"test1.xml\");\n+        final File output = new File(dir, \"test1.xml.deflatez\");\n+        final OutputStream out = new FileOutputStream(output);\n+        try {\n+            final CompressorOutputStream cos = new CompressorStreamFactory()\n+                .createCompressorOutputStream(\"deflate\", out); // zlib header is used by default\n+            try {\n+                IOUtils.copy(new FileInputStream(input), cos);\n+            } finally {\n+                cos.close();\n+            }\n+        } finally {\n+            out.close();\n+        }\n+    }\n+    \n+    /**\n+     * Tests the creation of a \"raw\" DEFLATE archive (without zlib header)\n+     * \n+     * @throws Exception\n+     */\n+    public void testRawDeflateCreation()  throws Exception {\n+        final File input = getFile(\"test1.xml\");\n+        final File output = new File(dir, \"test1.xml.deflate\");\n+        final OutputStream out = new FileOutputStream(output);\n+        try {\n+        \tDeflateParameters params = new DeflateParameters();\n+        \tparams.setZlibHeaderPresent(false);\n+            final CompressorOutputStream cos = new DeflateCompressorOutputStream(out, params);\n+            try {\n+                IOUtils.copy(new FileInputStream(input), cos);\n+            } finally {\n+                cos.close();\n+            }\n+        } finally {\n+            out.close();\n+        }\n+    }\n+\n+    /**\n+     * Tests the extraction of a DEFLATE archive with zlib header\n+     * \n+     * @throws Exception\n+     */\n+    public void testDeflateUnarchive() throws Exception {\n+        final File input = getFile(\"bla.tar.deflatez\");\n+        final File output = new File(dir, \"bla.tar\");\n+        final InputStream is = new FileInputStream(input);\n+        try {\n+            final CompressorInputStream in = new CompressorStreamFactory()\n+                .createCompressorInputStream(\"deflate\", is); // zlib header is expected by default\n+            FileOutputStream out = null;\n+            try {\n+                out = new FileOutputStream(output);\n+                IOUtils.copy(in, out);\n+            } finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+                in.close();\n+            }\n+        } finally {\n+            is.close();\n+        }\n+    }\n+    \n+    /**\n+     * Tests the extraction of a \"raw\" DEFLATE archive (without zlib header)\n+     * \n+     * @throws Exception\n+     */\n+    public void testRawDeflateUnarchive() throws Exception {\n+        final File input = getFile(\"bla.tar.deflate\");\n+        final File output = new File(dir, \"bla.tar\");\n+        final InputStream is = new FileInputStream(input);\n+        try {\n+        \tDeflateParameters params = new DeflateParameters();\n+        \tparams.setZlibHeaderPresent(false);\n+            final CompressorInputStream in = new DeflateCompressorInputStream(is, params);\n+            FileOutputStream out = null;\n+            try {\n+                out = new FileOutputStream(output);\n+                IOUtils.copy(in, out);\n+            } finally {\n+                if (out != null) {\n+                    out.close();\n+                }\n+                in.close();\n+            }\n+        } finally {\n+            is.close();\n+        }\n+    }\n+}", "timestamp": 1402723362, "metainfo": ""}