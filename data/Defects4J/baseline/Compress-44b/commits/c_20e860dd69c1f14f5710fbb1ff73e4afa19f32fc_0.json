{"sha": "20e860dd69c1f14f5710fbb1ff73e4afa19f32fc", "log": "Use PAX headers for big or negative numeric values in tar headers.  COMPRESS-182  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n             }\n         }\n \n-        if (entry.getSize() > TarConstants.MAXSIZE) {\n-            if (bigFileMode == BIGFILE_POSIX) {\n-                paxHeaders.put(\"size\", String.valueOf(entry.getSize()));\n-            } else if (bigFileMode != BIGFILE_STAR) {\n-                throw new RuntimeException(\"file size '\" + entry.getSize()\n-                                           + \"' is too big ( > \"\n-                                           + TarConstants.MAXSIZE + \" bytes)\");\n-            }\n+        if (bigFileMode == BIGFILE_POSIX) {\n+            addPaxHeadersForBigNumbers(paxHeaders, entry);\n+        } else if (bigFileMode != BIGFILE_STAR) {\n+            failForBigNumbers(entry);\n         }\n \n         if (paxHeaders.size() > 0) {\n         }\n         return new TarArchiveEntry(inputFile, entryName);\n     }\n+\n+    private void addPaxHeadersForBigNumbers(Map<String, String> paxHeaders,\n+                                            TarArchiveEntry entry) {\n+        if (entry.getSize() > TarConstants.MAXSIZE) {\n+            paxHeaders.put(\"size\", String.valueOf(entry.getSize()));\n+        }\n+        if (entry.getGroupId() > TarConstants.MAXID) {\n+            paxHeaders.put(\"gid\", String.valueOf(entry.getGroupId()));\n+        }\n+        final long mtime =  entry.getModTime().getTime() / 1000;\n+        if (mtime < 0 || mtime > TarConstants.MAXSIZE) {\n+            paxHeaders.put(\"mtime\", String.valueOf(mtime));\n+        }\n+        if (entry.getUserId() > TarConstants.MAXID) {\n+            paxHeaders.put(\"uid\", String.valueOf(entry.getUserId()));\n+        }\n+        if (entry.getMode() > TarConstants.MAXID) {\n+            throw new RuntimeException(\"mode '\" + entry.getMode()\n+                                       + \"' is too big ( > \"\n+                                       + TarConstants.MAXID + \" bytes)\");\n+        }\n+        // TODO add devMajor and devMinor\n+    }\n+\n+    private void failForBigNumbers(TarArchiveEntry entry) {\n+        if (entry.getSize() > TarConstants.MAXSIZE) {\n+            throw new RuntimeException(\"file size '\" + entry.getSize()\n+                                       + \"' is too big ( > \"\n+                                       + TarConstants.MAXSIZE + \" bytes)\");\n+        }\n+        if (entry.getGroupId() > TarConstants.MAXID) {\n+            throw new RuntimeException(\"group id '\" + entry.getGroupId()\n+                                       + \"' is too big ( > \"\n+                                       + TarConstants.MAXID + \" bytes)\");\n+        }\n+        final long mtime =  entry.getModTime().getTime() / 1000;\n+        if (mtime < 0 || mtime > TarConstants.MAXSIZE) {\n+            throw new RuntimeException(\"last modification time '\"\n+                                       + entry.getModTime()\n+                                       + \"' is too big ( > \"\n+                                       + TarConstants.MAXSIZE + \" bytes)\");\n+        }\n+        if (entry.getUserId() > TarConstants.MAXID) {\n+            throw new RuntimeException(\"user id '\" + entry.getUserId()\n+                                       + \"' is too big ( > \"\n+                                       + TarConstants.MAXID + \" bytes)\");\n+        }\n+        if (entry.getMode() > TarConstants.MAXID) {\n+            throw new RuntimeException(\"mode '\" + entry.getMode()\n+                                       + \"' is too big ( > \"\n+                                       + TarConstants.MAXID + \" bytes)\");\n+        }\n+        // TODO add devMajor and devMinor\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n         assertEquals(cal.getTime(), e.getLastModifiedDate());\n     }\n \n+    public void testOldEntryPosixMode() throws Exception {\n+        TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n+        t.setSize(Integer.MAX_VALUE);\n+        t.setModTime(-1000);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n+        tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_POSIX);\n+        tos.putArchiveEntry(t);\n+        // make sure header is written to byte array\n+        tos.write(new byte[10 * 1024]);\n+        byte[] data = bos.toByteArray();\n+        assertEquals(\"00000000000 \",\n+                     new String(data,\n+                                1024 + TarConstants.NAMELEN\n+                                + TarConstants.MODELEN\n+                                + TarConstants.UIDLEN\n+                                + TarConstants.GIDLEN\n+                                + TarConstants.SIZELEN, 12,\n+                                \"UTF-8\"));\n+        TarArchiveInputStream tin =\n+            new TarArchiveInputStream(new ByteArrayInputStream(data));\n+        TarArchiveEntry e = tin.getNextTarEntry();\n+        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"GMT\"));\n+        cal.set(1969, 11, 31, 23, 59, 59);\n+        cal.set(Calendar.MILLISECOND, 0);\n+        assertEquals(cal.getTime(), e.getLastModifiedDate());\n+    }\n+\n+    public void testOldEntryError() throws Exception {\n+        TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n+        t.setSize(Integer.MAX_VALUE);\n+        t.setModTime(-1000);\n+        TarArchiveOutputStream tos =\n+            new TarArchiveOutputStream(new ByteArrayOutputStream());\n+        try {\n+            tos.putArchiveEntry(t);\n+            fail(\"Should have generated RuntimeException\");\n+        } catch (RuntimeException expected) {\n+        }\n+    }\n+\n }", "timestamp": 1331011164, "metainfo": ""}