{"sha": "845b370716d0d0c27f2f7273dc4ab0226f485a91", "log": "COMPRESS-261 allow content compression to be overriden per entry  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZArchiveEntry.java\n package org.apache.commons.compress.archivers.sevenz;\n \n import java.util.Calendar;\n+import java.util.Collections;\n import java.util.Date;\n+import java.util.LinkedList;\n import java.util.TimeZone;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n     private boolean hasCrc;\n     private long crc, compressedCrc;\n     private long size, compressedSize;\n+    private Iterable<? extends SevenZMethodConfiguration> contentMethods;\n     \n     public SevenZArchiveEntry() {\n     }\n      */\n     void setCompressedSize(long size) {\n         this.compressedSize = size;\n+    }\n+\n+    /**\n+     * Sets the (compression) methods to use for entry's content - the\n+     * default is LZMA2.\n+     *\n+     * <p>Currently only {@link SevenZMethod#COPY}, {@link\n+     * SevenZMethod#LZMA2}, {@link SevenZMethod#BZIP2} and {@link\n+     * SevenZMethod#DEFLATE} are supported.</p>\n+     *\n+     * <p>The methods will be consulted in iteration order to create\n+     * the final output.</p>\n+     *\n+     * @since 1.8\n+     */\n+    public void setContentMethods(Iterable<? extends SevenZMethodConfiguration> methods) {\n+        LinkedList<SevenZMethodConfiguration> l = new LinkedList<SevenZMethodConfiguration>();\n+        for (SevenZMethodConfiguration m : methods) {\n+            l.addLast(m);\n+        }\n+        this.contentMethods = Collections.unmodifiableList(l);\n+    }\n+\n+    /**\n+     * Gets the (compression) methods to use for entry's content - the\n+     * default is LZMA2.\n+     *\n+     * <p>Currently only {@link SevenZMethod#COPY}, {@link\n+     * SevenZMethod#LZMA2}, {@link SevenZMethod#BZIP2} and {@link\n+     * SevenZMethod#DEFLATE} are supported.</p>\n+     *\n+     * <p>The methods will be consulted in iteration order to create\n+     * the final output.</p>\n+     *\n+     * @since 1.8\n+     */\n+    public Iterable<? extends SevenZMethodConfiguration> getContentMethods() {\n+        return contentMethods;\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n     }\n     \n     /**\n-     * Sets the compression method to use for entry contents - the\n+     * Sets the default compression method to use for entry contents - the\n      * default is LZMA2.\n      *\n      * <p>Currently only {@link SevenZMethod#COPY}, {@link\n     }\n \n     /**\n-     * Sets the (compression) methods to use for entry contents - the\n+     * Sets the default (compression) methods to use for entry contents - the\n      * default is LZMA2.\n      *\n      * <p>Currently only {@link SevenZMethod#COPY}, {@link\n         OutputStream out = new OutputStreamWrapper();\n         ArrayList<CountingOutputStream> moreStreams = new ArrayList<CountingOutputStream>();\n         boolean first = true;\n-        for (SevenZMethodConfiguration m : contentMethods) {\n+        for (SevenZMethodConfiguration m : getContentMethods(files.get(files.size() - 1))) {\n             if (!first) {\n                 CountingOutputStream cos = new CountingOutputStream(out);\n                 moreStreams.add(cos);\n         return l;\n     }\n \n+    private Iterable<? extends SevenZMethodConfiguration> getContentMethods(SevenZArchiveEntry entry) {\n+        Iterable<? extends SevenZMethodConfiguration> ms = entry.getContentMethods();\n+        return ms == null ? contentMethods : ms;\n+    }\n+\n     private void writeHeader(final DataOutput header) throws IOException {\n         header.write(NID.kHeader);\n         \n         header.write(NID.kFolder);\n         writeUint64(header, numNonEmptyStreams);\n         header.write(0);\n-        for (int i = 0; i < numNonEmptyStreams; i++) {\n-            writeFolder(header);\n-        }\n-        \n+        for (SevenZArchiveEntry entry : files) {\n+            if (entry.hasStream()) {\n+                writeFolder(header, entry);\n+            }\n+        }\n+\n         header.write(NID.kCodersUnpackSize);\n         for (final SevenZArchiveEntry entry : files) {\n             if (entry.hasStream()) {\n         header.write(NID.kEnd);\n     }\n     \n-    private void writeFolder(final DataOutput header) throws IOException {\n+    private void writeFolder(final DataOutput header, SevenZArchiveEntry entry) throws IOException {\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         int numCoders = 0;\n-        for (SevenZMethodConfiguration m : contentMethods) {\n+        for (SevenZMethodConfiguration m : getContentMethods(entry)) {\n             numCoders++;\n             writeSingleCodec(m, bos);\n         }", "timestamp": 1393391153, "metainfo": ""}