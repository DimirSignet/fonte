{"sha": "18daf66b2ccf4c7df9618c9a7067ab56bfa96593", "log": "COMPRESS-352 add support for IWA files  Apple has created a Snappy dialect used in iWorks archives.  The test case is copied from Tika.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java\n \n     /** The underlying stream to read compressed data from */\n     private final PushbackInputStream in;\n+    /** The dialect to expect */\n+    private final FramedSnappyDialect dialect;\n \n     private SnappyCompressorInputStream currentCompressedChunk;\n \n     private final PureJavaCrc32C checksum = new PureJavaCrc32C();\n \n     /**\n+     * Constructs a new input stream that decompresses\n+     * snappy-framed-compressed data from the specified input stream\n+     * using the {@link FramedSnappyDialect#STANDARD} dialect.\n+     * @param in  the InputStream from which to read the compressed data\n+     * @throws IOException if reading fails\n+     */\n+    public FramedSnappyCompressorInputStream(final InputStream in) throws IOException {\n+        this(in, FramedSnappyDialect.STANDARD);\n+    }\n+\n+    /**\n      * Constructs a new input stream that decompresses snappy-framed-compressed data\n      * from the specified input stream.\n      * @param in  the InputStream from which to read the compressed data\n+     * @param dialect the dialect used by the compressed stream\n      * @throws IOException if reading fails\n      */\n-    public FramedSnappyCompressorInputStream(final InputStream in) throws IOException {\n+    public FramedSnappyCompressorInputStream(final InputStream in,\n+                                             final FramedSnappyDialect dialect)\n+        throws IOException {\n         this.in = new PushbackInputStream(in, 1);\n-        readStreamIdentifier();\n+        this.dialect = dialect;\n+        if (dialect.hasStreamIdentifier()) {\n+            readStreamIdentifier();\n+        }\n     }\n \n     /** {@inheritDoc} */\n             uncompressedBytesRemaining = readSize() - 4 /* CRC */;\n             expectedChecksum = unmask(readCrc());\n         } else if (type == COMPRESSED_CHUNK_TYPE) {\n-            final long size = readSize() - 4 /* CRC */;\n-            expectedChecksum = unmask(readCrc());\n+            boolean expectChecksum = dialect.usesChecksumWithCompressedChunks();\n+            final long size = readSize() - (expectChecksum ? 4 : 0);\n+            if (expectChecksum) {\n+                expectedChecksum = unmask(readCrc());\n+            } else {\n+                expectedChecksum = -1;\n+            }\n             currentCompressedChunk =\n                 new SnappyCompressorInputStream(new BoundedInputStream(in, size));\n             // constructor reads uncompressed size\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyDialect.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.snappy;\n+\n+/**\n+ * Dialects of the framing format that {@link FramedSnappyCompressorInputStream} can deal with.\n+ * @since 1.12\n+ */\n+public enum FramedSnappyDialect {\n+    /**\n+     * The standard as defined by the <a\n+     * href=\"https://github.com/google/snappy/blob/master/framing_format.txt\">Snappy\n+     * framing format description</a>\n+     */\n+    STANDARD(true, true),\n+    /**\n+     * The format used by Apple's iWork Archives (.iwa files).\n+     */\n+    IWORK_ARCHIVE(false, false);\n+\n+    private final boolean streamIdentifier, checksumWithCompressedChunks;\n+\n+    private FramedSnappyDialect(boolean hasStreamIdentifier,\n+                                boolean usesChecksumWithCompressedChunks) {\n+        this.streamIdentifier = hasStreamIdentifier;\n+        this.checksumWithCompressedChunks = usesChecksumWithCompressedChunks;\n+    }\n+\n+    boolean hasStreamIdentifier() {\n+        return streamIdentifier;\n+    }\n+\n+    boolean usesChecksumWithCompressedChunks() {\n+        return checksumWithCompressedChunks;\n+    }\n+}\n--- a/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n import java.io.IOException;\n import java.io.InputStream;\n import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.archivers.zip.ZipFile;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.Test;\n         testChecksumUnmasking(0xffffc757l);\n     }\n \n+    @Test\n+    public void readIWAFile() throws Exception {\n+        final ZipFile zip = new ZipFile(getFile(\"testNumbersNew.numbers\"));\n+        try {\n+            InputStream is = zip.getInputStream(zip.getEntry(\"Index/Document.iwa\"));\n+            try {\n+                final FramedSnappyCompressorInputStream in =\n+                    new FramedSnappyCompressorInputStream(is, FramedSnappyDialect.IWORK_ARCHIVE);\n+                FileOutputStream out = null;\n+                try {\n+                    out = new FileOutputStream(new File(dir, \"snappyIWATest.raw\"));\n+                    IOUtils.copy(in, out);\n+                } finally {\n+                    if (out != null) {\n+                        out.close();\n+                    }\n+                    in.close();\n+                }\n+            } finally {\n+                is.close();\n+            }\n+        } finally {\n+            zip.close();\n+        }\n+    }\n+\n     private void testChecksumUnmasking(final long x) {\n         assertEquals(Long.toHexString(x),\n                      Long.toHexString(FramedSnappyCompressorInputStream", "timestamp": 1463922080, "metainfo": ""}