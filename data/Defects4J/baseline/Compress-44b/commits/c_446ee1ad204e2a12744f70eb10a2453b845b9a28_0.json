{"sha": "446ee1ad204e2a12744f70eb10a2453b845b9a28", "log": "provide archive name if anything goes wrong extracting stuff from 7z archives  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java\n \n class AES256SHA256Decoder extends CoderBase {\n     @Override\n-    InputStream decode(final InputStream in, long uncompressedLength,\n+    InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,\n             final Coder coder, final byte[] passwordBytes) throws IOException {\n         return new InputStream() {\n             private boolean isInitialized = false;\n                 final int ivSize = ((byte0 >> 6) & 1) + (byte1 & 0x0f);\n                 final int saltSize = ((byte0 >> 7) & 1) + (byte1 >> 4);\n                 if (2 + saltSize + ivSize > coder.properties.length) {\n-                    throw new IOException(\"Salt size + IV size too long\");\n+                    throw new IOException(\"Salt size + IV size too long in \" + archiveName);\n                 }\n                 final byte[] salt = new byte[saltSize];\n                 System.arraycopy(coder.properties, 2, salt, 0, saltSize);\n                 System.arraycopy(coder.properties, 2 + saltSize, iv, 0, ivSize);\n \n                 if (passwordBytes == null) {\n-                    throw new PasswordRequiredException();\n+                    throw new PasswordRequiredException(archiveName);\n                 }\n                 final byte[] aesKeyBytes;\n                 if (numCyclesPower == 0x3f) {\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/CoderBase.java\n     /**\n      * @return a stream that reads from in using the configured coder and password.\n      */\n-    abstract InputStream decode(final InputStream in, long uncomressedLength,\n+    abstract InputStream decode(final String archiveName,\n+        final InputStream in, long uncomressedLength,\n         final Coder coder, byte[] password) throws IOException;\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n         return CODER_MAP.get(method);\n     }\n \n-    static InputStream addDecoder(final InputStream is, long uncompressedLength,\n+    static InputStream addDecoder(final String archiveName, final InputStream is, long uncompressedLength,\n             final Coder coder, final byte[] password) throws IOException {\n         CoderBase cb = findByMethod(SevenZMethod.byId(coder.decompressionMethodId));\n         if (cb == null) {\n             throw new IOException(\"Unsupported compression method \" +\n-                                  Arrays.toString(coder.decompressionMethodId));\n-        }\n-        return cb.decode(is, uncompressedLength, coder, password);\n+                                  Arrays.toString(coder.decompressionMethodId)\n+                                  + \" used in \" + archiveName);\n+        }\n+        return cb.decode(archiveName, is, uncompressedLength, coder, password);\n     }\n     \n     static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,\n \n     static class CopyDecoder extends CoderBase {\n         @Override\n-        InputStream decode(final InputStream in, long uncompressedLength,\n+        InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,\n                 final Coder coder, byte[] password) throws IOException {\n             return in; \n         }\n \n     static class LZMADecoder extends CoderBase {\n         @Override\n-        InputStream decode(final InputStream in, long uncompressedLength,\n+        InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,\n                 final Coder coder, byte[] password) throws IOException {\n             byte propsByte = coder.properties[0];\n             long dictSize = coder.properties[1];\n                 dictSize |= (coder.properties[i + 1] & 0xffl) << (8 * i);\n             }\n             if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n-                throw new IOException(\"Dictionary larger than 4GiB maximum size\");\n+                throw new IOException(\"Dictionary larger than 4GiB maximum size used in \" + archiveName);\n             }\n             return new LZMAInputStream(in, uncompressedLength, propsByte, (int) dictSize);\n         }\n         }\n \n         @Override\n-        InputStream decode(final InputStream in, long uncompressedLength,\n+        InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,\n                 final Coder coder, byte[] password) throws IOException {\n             try {\n                 return opts.getInputStream(in);\n             } catch (AssertionError e) {\n-                IOException ex = new IOException(\"BCJ filter needs XZ for Java > 1.4 - see \"\n+                IOException ex = new IOException(\"BCJ filter used in \" + archiveName\n+                                                 + \" needs XZ for Java > 1.4 - see \"\n                                                  + \"http://commons.apache.org/proper/commons-compress/limitations.html#7Z\");\n                 ex.initCause(e);\n                 throw ex;\n         }\n \n         @Override\n-        InputStream decode(final InputStream in, long uncompressedLength,\n+        InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,\n                 final Coder coder, final byte[] password)\n             throws IOException {\n             return new InflaterInputStream(new DummyByteAddingInputStream(in),\n         }\n \n         @Override\n-        InputStream decode(final InputStream in, long uncompressedLength,\n+        InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,\n                 final Coder coder, final byte[] password)\n                 throws IOException {\n             return new BZip2CompressorInputStream(in);\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/DeltaDecoder.java\n     }\n \n     @Override\n-    InputStream decode(final InputStream in, long uncompressedLength,\n+    InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,\n             final Coder coder, byte[] password) throws IOException {\n         return new DeltaOptions(getOptionsFromCoder(coder)).getInputStream(in);\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n     }\n \n     @Override\n-    InputStream decode(final InputStream in, long uncompressedLength,\n+    InputStream decode(final String archiveName, final InputStream in, long uncompressedLength,\n             final Coder coder, byte[] password) throws IOException {\n         try {\n             int dictionarySize = getDictionarySize(coder);\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/PasswordRequiredException.java\n  */\n public class PasswordRequiredException extends IOException {\n \n-    public PasswordRequiredException() {\n-        super(\"Cannot read encrypted files without a password\");\n+    public PasswordRequiredException(String archiveName) {\n+        super(\"Cannot read encrypted archive \" + archiveName + \" without a password.\");\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n public class SevenZFile implements Closeable {\n     static final int SIGNATURE_HEADER_SIZE = 32;\n \n+    private final String fileName;\n     private RandomAccessFile file;\n     private final Archive archive;\n     private int currentEntryIndex = -1;\n     public SevenZFile(final File filename, final byte[] password) throws IOException {\n         boolean succeeded = false;\n         this.file = new RandomAccessFile(filename, \"r\");\n+        this.fileName = filename.getAbsolutePath();\n         try {\n             archive = readHeaders(password);\n             if (password != null) {\n             if (coder.numInStreams != 1 || coder.numOutStreams != 1) {\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }\n-            inputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),\n-                    coder, password);\n+            inputStreamStack = Coders.addDecoder(fileName, inputStreamStack,\n+                    folder.getUnpackSizeForCoder(coder), coder, password);\n         }\n         if (folder.hasCrc) {\n             inputStreamStack = new CRC32VerifyingInputStream(inputStreamStack,\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }\n             SevenZMethod method = SevenZMethod.byId(coder.decompressionMethodId);\n-            inputStreamStack = Coders.addDecoder(inputStreamStack, folder.getUnpackSizeForCoder(coder),\n-                    coder, password);\n+            inputStreamStack = Coders.addDecoder(fileName, inputStreamStack,\n+                    folder.getUnpackSizeForCoder(coder), coder, password);\n             methods.addFirst(new SevenZMethodConfiguration(method,\n                      Coders.findByMethod(method).getOptionsFromCoder(coder, inputStreamStack)));\n         }\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n         }\n     }\n \n-    public void test7zDecryptUnarchiveWithoutPassword() throws Exception {\n-        try {\n-            test7zUnarchive(getFile(\"bla.encrypted.7z\"), SevenZMethod.LZMA);\n-            fail(\"Expected a PasswordRequiredException\");\n-        } catch (PasswordRequiredException ex) {\n-            // expected\n-        }\n-    }\n-\n     private void test7zUnarchive(File f, SevenZMethod m) throws Exception {\n         test7zUnarchive(f, m, null);\n     }\n         try {\n             new SevenZFile(getFile(\"bla.encrypted.7z\"));\n             fail(\"shouldn't decrypt without a password\");\n-        } catch (IOException ex) {\n-            assertEquals(\"Cannot read encrypted files without a password\",\n-                         ex.getMessage());\n+        } catch (PasswordRequiredException ex) {\n+            String msg = ex.getMessage();\n+            assertTrue(\"Should start with whining about being unable to decrypt\",\n+                       msg.startsWith(\"Cannot read encrypted archive \"));\n+            assertTrue(\"Should finish the sentence properly\",\n+                       msg.endsWith(\" without a password.\"));\n+            assertTrue(\"Should contain archive's name\",\n+                       msg.contains(\"bla.encrypted.7z\"));\n         }\n     }\n ", "timestamp": 1421765800, "metainfo": ""}