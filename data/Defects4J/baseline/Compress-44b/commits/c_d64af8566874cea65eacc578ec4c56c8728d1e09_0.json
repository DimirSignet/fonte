{"sha": "d64af8566874cea65eacc578ec4c56c8728d1e09", "log": "add bzip2/deflate compression support when writing 7z archives  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n import java.security.MessageDigest;\n import java.security.NoSuchAlgorithmException;\n import java.util.Arrays;\n+import java.util.zip.Deflater;\n+import java.util.zip.DeflaterOutputStream;\n import java.util.zip.Inflater;\n import java.util.zip.InflaterInputStream;\n \n import javax.crypto.spec.SecretKeySpec;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n+import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n import org.tukaani.xz.LZMAInputStream;\n import org.tukaani.xz.LZMA2InputStream;\n \n     static abstract class CoderBase {\n         abstract InputStream decode(final InputStream in, final Coder coder,\n                 String password) throws IOException;\n-        OutputStream encode(final OutputStream out, final String password) {\n+        OutputStream encode(final OutputStream out, final String password)\n+            throws IOException {\n             throw new UnsupportedOperationException(\"method doesn't support writing\");\n         }\n     }\n             return new InflaterInputStream(new DummyByteAddingInputStream(in),\n                                            new Inflater(true));\n         }\n+        @Override\n+        OutputStream encode(final OutputStream out, final String password) {\n+            return new DeflaterOutputStream(out, new Deflater(9, true));\n+        }\n     }\n \n     static class BZIP2Decoder extends CoderBase {\n         InputStream decode(final InputStream in, final Coder coder, final String password)\n                 throws IOException {\n             return new BZip2CompressorInputStream(in);\n+        }\n+        @Override\n+        OutputStream encode(final OutputStream out, final String password)\n+                throws IOException {\n+            return new BZip2CompressorOutputStream(out);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n     private long fileBytesWritten = 0;\n     private boolean finished = false;\n     private CountingOutputStream currentOutputStream;\n+    private SevenZMethod contentCompression = SevenZMethod.COPY;\n     \n     public SevenZOutputFile(final File filename) throws IOException {\n         file = new RandomAccessFile(filename, \"rw\");\n         file.seek(SevenZFile.SIGNATURE_HEADER_SIZE);\n     }\n     \n+    /**\n+     * Sets the compression method to use for entry contents.\n+     */\n+    public void setContentCompression(SevenZMethod method) {\n+        this.contentCompression = method;\n+    }\n+\n     /**\n      * Closes the archive, calling {@link #finish} if necessary.\n      */\n     private CountingOutputStream setupFileOutputStream() throws IOException {\n         OutputStream out = new OutputStreamWrapper();\n         return new CountingOutputStream(Coders\n-                                        .addEncoder(out, SevenZMethod.COPY,\n+                                        .addEncoder(out,\n+                                                    contentCompression,\n                                                     null)) {\n             @Override\n             public void write(final int b) throws IOException {\n     private void writeFolder(final DataOutput header) throws IOException {\n         // one coder\n         writeUint64(header, 1);\n-        byte[] id = SevenZMethod.COPY.getId();\n+        byte[] id = contentCompression.getId();\n         // FIXME - deal with coder properties\n         header.write(id.length);\n         header.write(id);\n--- a/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;\n import org.apache.commons.compress.archivers.sevenz.SevenZFile;\n+import org.apache.commons.compress.archivers.sevenz.SevenZMethod;\n import org.apache.commons.compress.archivers.sevenz.SevenZOutputFile;\n \n public class SevenZTestCase extends AbstractTestCase {\n-    public void testSevenZArchiveCreation() throws Exception {\n+\n+    public void testSevenZArchiveCreationUsingCopy() throws Exception {\n+        testSevenZArchiveCreation(SevenZMethod.COPY);\n+    }\n+    \n+    public void testSevenZArchiveCreationUsingBZIP2() throws Exception {\n+        testSevenZArchiveCreation(SevenZMethod.BZIP2);\n+    }\n+    \n+    public void testSevenZArchiveCreationUsingDeflate() throws Exception {\n+        testSevenZArchiveCreation(SevenZMethod.DEFLATE);\n+    }\n+    \n+    private void testSevenZArchiveCreation(SevenZMethod method) throws Exception {\n         final File output = new File(dir, \"bla.7z\");\n         final File file1 = getFile(\"test1.xml\");\n         final File file2 = getFile(\"test2.xml\");\n \n         final SevenZOutputFile outArchive = new SevenZOutputFile(output);\n+        outArchive.setContentCompression(method);\n         try {\n             SevenZArchiveEntry entry;\n             \n             archive.close();\n         }\n     }\n-    \n+\n     private void copy(final File src, final SevenZOutputFile dst) throws IOException { \n         FileInputStream fis = null;\n         try {", "timestamp": 1381482822, "metainfo": ""}