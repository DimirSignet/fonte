{"sha": "a7c227c1eac9174d0b1d19586a3a67816b8f0a45", "log": "Moved zip-unspecific scatter/gather code to org.apache.commons.compress.parallel  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n  */\n package org.apache.commons.compress.archivers.zip;\n \n+import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;\n+import org.apache.commons.compress.parallel.InputStreamSupplier;\n+import org.apache.commons.compress.parallel.ScatterGatherBackingStore;\n+import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;\n+\n import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n package org.apache.commons.compress.archivers.zip;\n \n \n+import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;\n+import org.apache.commons.compress.parallel.ScatterGatherBackingStore;\n import org.apache.commons.compress.utils.BoundedInputStream;\n \n import java.io.Closeable;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java\n  *\n  */\n package org.apache.commons.compress.archivers.zip;\n+\n+import org.apache.commons.compress.parallel.ScatterGatherBackingStore;\n \n import java.io.Closeable;\n import java.io.DataOutput;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryRequest.java\n  *\n  */\n package org.apache.commons.compress.archivers.zip;\n+\n+import org.apache.commons.compress.parallel.InputStreamSupplier;\n \n import java.io.InputStream;\n \n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/parallel/FileBasedScatterGatherBackingStore.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.parallel;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * ScatterGatherBackingStore that is backed by a file.\n+ *\n+ * @since 1.10\n+ */\n+public class FileBasedScatterGatherBackingStore implements ScatterGatherBackingStore {\n+    private final File target;\n+    private final FileOutputStream os;\n+    private boolean closed;\n+\n+    public FileBasedScatterGatherBackingStore(File target) throws FileNotFoundException {\n+        this.target = target;\n+        os = new FileOutputStream(target);\n+    }\n+\n+    public InputStream getInputStream() throws IOException {\n+        return new FileInputStream(target);\n+    }\n+\n+    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n+    public void closeForWriting() throws IOException {\n+        if (!closed) {\n+            os.close();\n+            closed = true;\n+        }\n+    }\n+\n+    public void writeOut(byte[] data, int offset, int length) throws IOException {\n+        os.write(data, offset, length);\n+    }\n+\n+    public void close() throws IOException {\n+        closeForWriting();\n+        target.delete();\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/parallel/InputStreamSupplier.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.commons.compress.parallel;\n+\n+import java.io.InputStream;\n+\n+/**\n+ * Supplies input streams.\n+ *\n+ * Implementations are required to support thread-handover. While an instance will\n+ * not be accessed concurrently by multiple threads, it will be called by\n+ * a different thread than it was created on.\n+ *\n+ * @since 1.10\n+ */\n+public interface InputStreamSupplier {\n+\n+    /**\n+     * Supply an input stream for a resource.\n+     * @return the input stream. Should never null, but may be an empty stream.\n+     */\n+    InputStream get();\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/parallel/ScatterGatherBackingStore.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.parallel;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * <p>Store intermediate payload in a scatter-gather scenario.\n+ * Multiple threads write their payload to a backing store, which can\n+ * subsequently be reversed to an #InputStream to be used as input in the\n+ * gather phase.</p>\n+ *\n+ * <p>It is the responsibility of the allocator of an instance of this class\n+ * to close this. Closing it should clear off any allocated structures\n+ * and preferably delete files.</p>\n+ *\n+ * @since 1.10\n+ */\n+public interface ScatterGatherBackingStore extends Closeable {\n+\n+    /**\n+     * An input stream that contains the scattered payload\n+     *\n+     * @return An InputStream, should be closed by the caller of this method.\n+     * @throws IOException when something fails\n+     */\n+    InputStream getInputStream() throws IOException;\n+\n+    /**\n+     * Writes a piece of payload.\n+     *\n+     * @param data the data to write\n+     * @param offset offset inside data to start writing from\n+     * @param length the amount of data to write\n+     * @throws IOException when something fails\n+     */\n+    void writeOut(byte[] data, int offset, int length) throws IOException;\n+\n+    /**\n+     * Closes this backing store for further writing.\n+     */\n+    void closeForWriting() throws IOException;\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/parallel/ScatterGatherBackingStoreSupplier.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.parallel;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Supplies ScatterGatherBackingStore instances.\n+ *\n+ * @since 1.10\n+ */\n+public interface ScatterGatherBackingStoreSupplier {\n+    /**\n+     * Create a ScatterGatherBackingStore.\n+     *\n+     * @return a ScatterGatherBackingStore, not null\n+     */\n+    ScatterGatherBackingStore get() throws IOException;\n+}\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java\n  */\n package org.apache.commons.compress.archivers.zip;\n \n+import org.apache.commons.compress.parallel.FileBasedScatterGatherBackingStore;\n+import org.apache.commons.compress.parallel.InputStreamSupplier;\n+import org.apache.commons.compress.parallel.ScatterGatherBackingStore;\n+import org.apache.commons.compress.parallel.ScatterGatherBackingStoreSupplier;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.After;\n import org.junit.Test;\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ScatterSample.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ScatterSample.java\n  *\n  */\n package org.apache.commons.compress.archivers.zip;\n+\n+import org.apache.commons.compress.parallel.InputStreamSupplier;\n \n import java.io.File;\n import java.io.IOException;\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ScatterSampleTest.java\n  */\n package org.apache.commons.compress.archivers.zip;\n \n+import org.apache.commons.compress.parallel.InputStreamSupplier;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.Test;\n \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java\n  */\n package org.apache.commons.compress.archivers.zip;\n \n+import org.apache.commons.compress.parallel.InputStreamSupplier;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.After;\n import org.junit.Test;", "timestamp": 1422127580, "metainfo": ""}