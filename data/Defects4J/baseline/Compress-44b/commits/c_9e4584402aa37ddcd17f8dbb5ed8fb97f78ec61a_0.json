{"sha": "9e4584402aa37ddcd17f8dbb5ed8fb97f78ec61a", "log": "COMPRESS-147 test for unskippable chunks  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/FramedSnappyTestCase.java\n import static org.junit.Assert.assertArrayEquals;\n \n import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n         }\n     }\n \n+    public void testUnskippableChunk() {\n+        byte[] input = new byte[] {\n+            (byte) 0xff, 6, 0, 0, 's', 'N', 'a', 'P', 'p', 'Y',\n+            2, 2, 0, 0, 1, 1\n+        };\n+        try {\n+            CompressorInputStream in =\n+                new FramedSnappyCompressorInputStream(new ByteArrayInputStream(input));\n+            in.read();\n+            fail(\"expected an exception\");\n+        } catch (IOException ex) {\n+            assertTrue(ex.getMessage().indexOf(\"unskippable chunk\") > -1);\n+        }\n+    }\n+\n     private void testUnarchive(StreamWrapper<CompressorInputStream> wrapper) throws Exception {\n         final File input = getFile(\"bla.tar.sz\");\n         final File output = new File(dir, \"bla.tar\");", "timestamp": 1386430438, "metainfo": ""}