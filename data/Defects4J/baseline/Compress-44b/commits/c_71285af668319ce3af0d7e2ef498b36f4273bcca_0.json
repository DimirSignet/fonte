{"sha": "71285af668319ce3af0d7e2ef498b36f4273bcca", "log": "COMPRESS-271 make canBeWritten and rewriteLastPairs agree on algorithm", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java\n         }\n         boolean canBeWritten(int lengthOfBlocksAfterThisPair) {\n             return hasBackReference()\n-                && lengthOfBlocksAfterThisPair >= MIN_LENGTH_OF_LAST_LITERAL\n-                && lengthOfBlocksAfterThisPair + brOffset + brLength >= MIN_OFFSET_OF_LAST_BACK_REFERENCE;\n+                && lengthOfBlocksAfterThisPair >= MIN_OFFSET_OF_LAST_BACK_REFERENCE + MIN_BACK_REFERENCE_LENGTH;\n         }\n         int length() {\n             return literalLength() + brLength;\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java\n \n import org.apache.commons.compress.compressors.lz77support.LZ77Compressor;\n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n public class BlockLZ4CompressorOutputStreamTest {\n \n     @Test\n-    public void pairSeesbackReferenceWhenSet() {\n+    public void pairSeesBackReferenceWhenSet() {\n         BlockLZ4CompressorOutputStream.Pair p = new BlockLZ4CompressorOutputStream.Pair();\n         Assert.assertFalse(p.hasBackReference());\n         p.setBackReference(new LZ77Compressor.BackReference(1, 4));\n     public void canWriteBackReferenceFollowedByLongLiteral() {\n         BlockLZ4CompressorOutputStream.Pair p = new BlockLZ4CompressorOutputStream.Pair();\n         p.setBackReference(new LZ77Compressor.BackReference(1, 4));\n-        Assert.assertTrue(p.canBeWritten(11));\n+        // a length of 11 would be enough according to the spec, but\n+        // the algorithm we use for rewriting the last block requires\n+        // 16 bytes\n+        Assert.assertTrue(p.canBeWritten(16));\n     }\n \n     @Test\n+    @Ignore(\"would pass if the algorithm used for rewriting the final pairs was smarter\")\n     public void canWriteBackReferenceFollowedByShortLiteralIfOffsetIsBigEnough() {\n         BlockLZ4CompressorOutputStream.Pair p = new BlockLZ4CompressorOutputStream.Pair();\n         p.setBackReference(new LZ77Compressor.BackReference(10, 4));\n     }\n \n     @Test\n+    @Ignore(\"would pass if the algorithm used for rewriting the final pairs was smarter\")\n     public void canWriteBackReferenceFollowedByShortLiteralIfLengthIsBigEnough() {\n         BlockLZ4CompressorOutputStream.Pair p = new BlockLZ4CompressorOutputStream.Pair();\n         p.setBackReference(new LZ77Compressor.BackReference(1, 10));", "timestamp": 1485087653, "metainfo": ""}