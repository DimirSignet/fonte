{"sha": "e71827b5db22d81e0b009f3e205173ce643d2e8e", "log": "Use try with resources.", "commit": "\n--- a/src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java\n \n     @Test(expected = IllegalArgumentException.class)\n     public void shouldNotAllowReadingOfANegativeAmountOfBits() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n-        bis.readBits(-1);\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN)) {\n+            bis.readBits(-1);\n+        }\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void shouldNotAllowReadingOfMoreThan63BitsAtATime() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n-        bis.readBits(64);\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN)) {\n+            bis.readBits(64);\n+        }\n     }\n \n     @Test\n     public void testReading24BitsInLittleEndian() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n-        assertEquals(0x000140f8, bis.readBits(24));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN)) {\n+            assertEquals(0x000140f8, bis.readBits(24));\n+        }\n     }\n \n     @Test\n     public void testReading24BitsInBigEndian() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n-        assertEquals(0x00f84001, bis.readBits(24));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN)) {\n+            assertEquals(0x00f84001, bis.readBits(24));\n+        }\n     }\n \n     @Test\n     public void testReading17BitsInLittleEndian() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n-        assertEquals(0x000140f8, bis.readBits(17));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN)) {\n+            assertEquals(0x000140f8, bis.readBits(17));\n+        }\n     }\n \n     @Test\n     public void testReading17BitsInBigEndian() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n-        // 1-11110000-10000000\n-        assertEquals(0x0001f080, bis.readBits(17));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN)) {\n+            // 1-11110000-10000000\n+            assertEquals(0x0001f080, bis.readBits(17));\n+        }\n     }\n \n     @Test\n     public void testReading30BitsInLittleEndian() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n-        assertEquals(0x2f0140f8, bis.readBits(30));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN)) {\n+            assertEquals(0x2f0140f8, bis.readBits(30));\n+        }\n     }\n \n     @Test\n     public void testReading30BitsInBigEndian() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n-        // 111110-00010000-00000000-01001011\n-        assertEquals(0x3e10004b, bis.readBits(30));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN)) {\n+            // 111110-00010000-00000000-01001011\n+            assertEquals(0x3e10004b, bis.readBits(30));\n+        }\n     }\n \n     @Test\n     public void testReading31BitsInLittleEndian() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n-        assertEquals(0x2f0140f8, bis.readBits(31));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN)) {\n+            assertEquals(0x2f0140f8, bis.readBits(31));\n+        }\n     }\n \n     @Test\n     public void testReading31BitsInBigEndian() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n-        // 1111100-00100000-00000000-10010111\n-        assertEquals(0x7c200097, bis.readBits(31));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN)) {\n+            // 1111100-00100000-00000000-10010111\n+            assertEquals(0x7c200097, bis.readBits(31));\n+        }\n     }\n \n     @Test\n     public void testClearBitCache() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n-        assertEquals(0x08, bis.readBits(4));\n-        bis.clearBitCache();\n-        assertEquals(0, bis.readBits(1));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN)) {\n+            assertEquals(0x08, bis.readBits(4));\n+            bis.clearBitCache();\n+            assertEquals(0, bis.readBits(1));\n+        }\n     }\n \n     @Test\n     public void testEOF() throws IOException {\n-        final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n-        assertEquals(0x2f0140f8, bis.readBits(30));\n-        assertEquals(-1, bis.readBits(3));\n-        bis.close();\n+        try (final BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN)) {\n+            assertEquals(0x2f0140f8, bis.readBits(30));\n+            assertEquals(-1, bis.readBits(3));\n+        }\n     }\n \n     /**\n                 33, // 00100001\n                 74  // 01001010\n             });\n-        BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN);\n-        assertEquals(23, // 10111\n-                     bin.readBits(5));\n-        assertEquals(714595605644185962l, // 0001-00111101-01011000-00011101-01011010-00001111-01000010-00101101-010\n-                     bin.readBits(63));\n-        assertEquals(1186, // 01001010-0010\n-                     bin.readBits(12));\n-        assertEquals(-1 , bin.readBits(1));\n-        bin.close();\n+        try (final BitInputStream bin = new BitInputStream(in, ByteOrder.LITTLE_ENDIAN)) {\n+            assertEquals(23, // 10111\n+                         bin.readBits(5));\n+            assertEquals(714595605644185962l, // 0001-00111101-01011000-00011101-01011010-00001111-01000010-00101101-010\n+                         bin.readBits(63));\n+            assertEquals(1186, // 01001010-0010\n+                         bin.readBits(12));\n+            assertEquals(-1 , bin.readBits(1));\n+        }\n     }\n \n     @Test\n                 33, // 00100001\n                 74  // 01001010\n             });\n-        BitInputStream bin = new BitInputStream(in, ByteOrder.BIG_ENDIAN);\n-        assertEquals(10, // 01010\n-                     bin.readBits(5));\n-        assertEquals(8274274654740644818l, //111-00101101-01000010-00001111-01011010-00011101-01011000-00111101-0010\n-                     bin.readBits(63));\n-        assertEquals(330, // 0001-01001010\n-                     bin.readBits(12));\n-        assertEquals(-1 , bin.readBits(1));\n-        bin.close();\n+        try (final BitInputStream bin = new BitInputStream(in, ByteOrder.BIG_ENDIAN)) {\n+            assertEquals(10, // 01010\n+                         bin.readBits(5));\n+            assertEquals(8274274654740644818l, //111-00101101-01000010-00001111-01011010-00011101-01011000-00111101-0010\n+                    bin.readBits(63));\n+            assertEquals(330, // 0001-01001010\n+                         bin.readBits(12));\n+            assertEquals(-1 , bin.readBits(1));\n+        }\n     }\n \n     private ByteArrayInputStream getStream() {", "timestamp": 1473100884, "metainfo": ""}