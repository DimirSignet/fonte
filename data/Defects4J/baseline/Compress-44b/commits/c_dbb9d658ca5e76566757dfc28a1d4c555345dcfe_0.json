{"sha": "dbb9d658ca5e76566757dfc28a1d4c555345dcfe", "log": "javadocs for java8", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n          *\n          * <p>This returns a life view of the actual data in order to\n          * avoid copying, modify the array at your own risk.</p>\n+         * @return the data\n          */\n         public byte[] getData() {\n             return data;\n         }\n         /**\n          * Offset into data where the literal block starts.\n+         * @return the offset\n          */\n         public int getOffset() {\n             return offset;\n         }\n         /**\n          * Length of literal block.\n+         * @return the length\n          */\n         public int getLength() {\n             return length;\n         }\n         /**\n          * Provides the offset of the match.\n+         * @return the offset\n          */\n         public int getOffset() {\n             return offset;\n         }\n         /**\n          * Provides the length of the match.\n+         * @return the length\n          */\n         public int getLength() {\n             return length;\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java\n     /**\n      * Gets the size of the sliding window - this determines the\n      * maximum offset a back-reference can take.\n+     * @return the size of the sliding window\n      */\n     public int getWindowSize() {\n         return windowSize;\n     }\n     /**\n      * Gets the minimal length of a match found.\n+     * @return the minimal length of a match found\n      */\n     public int getMinMatchLength() {\n         return minMatchLength;\n     }\n     /**\n      * Gets the maximal length of a match found.\n+     * @return the maximal length of a match found\n      */\n     public int getMaxMatchLength() {\n         return maxMatchLength;\n     }\n     /**\n      * Gets the maximal offset of a match found.\n+     * @return the maximal offset of a match found\n      */\n     public int getMaxOffset() {\n         return maxOffset;\n     }\n     /**\n      * Gets the maximal length of a literal block.\n+     * @return the maximal length of a literal block\n      */\n     public int getMaxLiteralLength() {\n         return maxLiteralLength;\n--- a/src/main/java/org/apache/commons/compress/utils/Iterators.java\n+++ b/src/main/java/org/apache/commons/compress/utils/Iterators.java\n      * {@code hasNext()} method returns {@code false}.\n      * </p>\n      *\n+     * @param <T> type of the elements contained inside the collection\n+     * @param collection target collection\n+     * @param iterator source\n      * @return {@code true} if the target {@code collection} was modified as a\n      *         result of this operation\n      */\n--- a/src/main/java/org/apache/commons/compress/utils/Lists.java\n+++ b/src/main/java/org/apache/commons/compress/utils/Lists.java\n     /**\n      * Creates a new {@link ArrayList}.\n      * \n+     * @param <E> type of elements contained in new list\n      * @return a new {@link ArrayList}\n      */\n     public static <E> ArrayList<E> newArrayList() {\n      * \n      * @param iterator\n      *            the source iterator\n+     * @param <E> type of elements contained in new list\n      * @return a new {@link ArrayList}\n      */\n     public static <E> ArrayList<E> newArrayList(final Iterator<? extends E> iterator) {\n--- a/src/main/java/org/apache/commons/compress/utils/Sets.java\n+++ b/src/main/java/org/apache/commons/compress/utils/Sets.java\n      * \n      * @param elements\n      *            the elements to fill the new set\n+     * @param <E> type of elements contained in new set\n      * @return A new HasSet\n      */\n     public static <E> HashSet<E> newHashSet(@SuppressWarnings(\"unchecked\") E... elements) {", "timestamp": 1483982256, "metainfo": ""}