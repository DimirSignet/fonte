{"sha": "350f01c78374b4df99c1a84cc32122eeeb48b036", "log": "[COMPRESS-368]  Allow compressor extensions through a standard JRE ServiceLoader. Revisit new interface to add decompress until EOF.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n         return AccessController.doPrivileged(new PrivilegedAction<SortedMap<String, CompressorStreamProvider>>() {\n             @Override\n             public SortedMap<String, CompressorStreamProvider> run() {\n-                TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();\n+                final TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();\n                 putAll(SINGLETON.getInputStreamCompressorNames(), SINGLETON, map);\n-                for (CompressorStreamProvider provider : findCompressorStreamProviders()) {\n+                for (final CompressorStreamProvider provider : findCompressorStreamProviders()) {\n                     putAll(provider.getInputStreamCompressorNames(), provider, map);\n                 }\n                 return map;\n         return AccessController.doPrivileged(new PrivilegedAction<SortedMap<String, CompressorStreamProvider>>() {\n             @Override\n             public SortedMap<String, CompressorStreamProvider> run() {\n-                TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();\n+                final TreeMap<String, CompressorStreamProvider> map = new TreeMap<>();\n                 putAll(SINGLETON.getOutputStreamCompressorNames(), SINGLETON, map);\n-                for (CompressorStreamProvider provider : findCompressorStreamProviders()) {\n+                for (final CompressorStreamProvider provider : findCompressorStreamProviders()) {\n                     putAll(provider.getOutputStreamCompressorNames(), provider, map);\n                 }\n                 return map;\n         return Z;\n     }\n \n-    static void putAll(Set<String> names, CompressorStreamProvider provider,\n-            TreeMap<String, CompressorStreamProvider> map) {\n-        for (String name : names) {\n+    static void putAll(final Set<String> names, final CompressorStreamProvider provider,\n+            final TreeMap<String, CompressorStreamProvider> map) {\n+        for (final String name : names) {\n             map.put(toKey(name), provider);\n         }\n     }\n      * @throws IllegalArgumentException\n      *             if the name or input stream is null\n      */\n-    @Override\n     public CompressorInputStream createCompressorInputStream(final String name, final InputStream in)\n             throws CompressorException {\n+        return createCompressorInputStream(name, in, decompressConcatenated);\n+    }\n+\n+    @Override\n+    public CompressorInputStream createCompressorInputStream(final String name, final InputStream in,\n+            final boolean actualDecompressConcatenated) throws CompressorException {\n         if (name == null || in == null) {\n             throw new IllegalArgumentException(\"Compressor name and stream must not be null.\");\n         }\n         try {\n \n             if (GZIP.equalsIgnoreCase(name)) {\n-                return new GzipCompressorInputStream(in, decompressConcatenated);\n+                return new GzipCompressorInputStream(in, actualDecompressConcatenated);\n             }\n \n             if (BZIP2.equalsIgnoreCase(name)) {\n-                return new BZip2CompressorInputStream(in, decompressConcatenated);\n+                return new BZip2CompressorInputStream(in, actualDecompressConcatenated);\n             }\n \n             if (XZ.equalsIgnoreCase(name)) {\n-                return new XZCompressorInputStream(in, decompressConcatenated);\n+                return new XZCompressorInputStream(in, actualDecompressConcatenated);\n             }\n \n             if (LZMA.equalsIgnoreCase(name)) {\n         }\n         final CompressorStreamProvider compressorStreamProvider = getCompressorInputStreamProviders().get(toKey(name));\n         if (compressorStreamProvider != null) {\n-            return compressorStreamProvider.createCompressorInputStream(name, in);\n+            return compressorStreamProvider.createCompressorInputStream(name, in, actualDecompressConcatenated);\n         }\n         \n         throw new CompressorException(\"Compressor: \" + name + \" not found.\");\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamProvider.java\n      *            {@value #DEFLATE}\n      * @param in\n      *            the input stream\n+     * @param decompressUntilEOF\n+     *            if true, decompress until the end of the input; if false, stop\n+     *            after the first stream and leave the input position to point\n+     *            to the next byte after the stream. This setting applies to the\n+     *            gzip, bzip2 and xz formats only.\n      * @return compressor input stream\n      * @throws CompressorException\n      *             if the compressor name is not known\n      * @throws IllegalArgumentException\n      *             if the name or input stream is null\n      */\n-    CompressorInputStream createCompressorInputStream(final String name, final InputStream in)\n+    CompressorInputStream createCompressorInputStream(final String name, final InputStream in, final boolean decompressUntilEOF)\n             throws CompressorException;\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/CompressorStreamFactoryRoundtripTest.java\n         compressorOutputStream.flush();\n         compressorOutputStream.close();\n         final ByteArrayInputStream is = new ByteArrayInputStream(compressedOs.toByteArray());\n-        final CompressorInputStream compressorInputStream = factory.createCompressorInputStream(compressorName, is);\n+        final CompressorInputStream compressorInputStream = factory.createCompressorInputStream(compressorName, is, false);\n         final ByteArrayOutputStream decompressedOs = new ByteArrayOutputStream();\n         IOUtils.copy(compressorInputStream, decompressedOs);\n         compressorInputStream.close();\n--- a/src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/TestCompressorStreamProvider.java\n \n         private static final long serialVersionUID = 1L;\n \n-        public InvocationConfirmationException(String message) {\n+        public InvocationConfirmationException(final String message) {\n             super(message);\n         }\n     }\n \n     @Override\n-    public CompressorInputStream createCompressorInputStream(String name, InputStream in) throws CompressorException {\n+    public CompressorInputStream createCompressorInputStream(final String name, final InputStream in,\n+            final boolean decompressConcatenated) throws CompressorException {\n         throw new InvocationConfirmationException(name);\n     }\n \n     @Override\n-    public CompressorOutputStream createCompressorOutputStream(String name, OutputStream out)\n+    public CompressorOutputStream createCompressorOutputStream(final String name, final OutputStream out)\n             throws CompressorException {\n         throw new InvocationConfirmationException(name);\n     }", "timestamp": 1479277315, "metainfo": ""}