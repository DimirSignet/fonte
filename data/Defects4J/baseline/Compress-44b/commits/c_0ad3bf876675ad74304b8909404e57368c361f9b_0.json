{"sha": "0ad3bf876675ad74304b8909404e57368c361f9b", "log": "Write big files in PAX/POSIX mode.  COMPRESS-165  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n import java.io.File;\n import java.io.IOException;\n import java.io.OutputStream;\n+import java.io.StringWriter;\n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n import org.apache.commons.compress.utils.ArchiveUtils;\n             throw new IOException(\"Stream has already been finished\");\n         }\n         TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n+        Map<String, String> paxHeaders = new HashMap<String, String>();\n         if (entry.getName().length() >= TarConstants.NAMELEN) {\n \n             if (longFileMode == LONGFILE_GNU) {\n                                            + TarConstants.NAMELEN + \" bytes)\");\n             }\n         }\n+\n         if (entry.getSize() > TarConstants.MAXSIZE) {\n-            if (bigFileMode != BIGFILE_STAR) {\n+            if (bigFileMode == BIGFILE_POSIX) {\n+                paxHeaders.put(\"size\", String.valueOf(entry.getSize()));\n+            } else if (bigFileMode != BIGFILE_STAR) {\n                 throw new RuntimeException(\"file size '\" + entry.getSize()\n                                            + \"' is too big ( > \"\n                                            + TarConstants.MAXSIZE + \" bytes)\");\n             }\n+        }\n+\n+        if (paxHeaders.size() > 0) {\n+            writePaxHeaders(entry.getName(), paxHeaders);\n         }\n \n         entry.writeEntryHeader(recordBuf, bigFileMode == BIGFILE_STAR);\n     }\n \n     /**\n+     * Writes a PAX extended header with the given map as contents.\n+     * @since Apache Commons Compress 1.4\n+     */\n+    void writePaxHeaders(String entryName,\n+                         Map<String, String> headers) throws IOException {\n+        String name = \"./PaxHeaders.X/\" + entryName;\n+        if (name.length() > TarConstants.NAMELEN) {\n+            name = name.substring(0, TarConstants.NAMELEN);\n+        }\n+        TarArchiveEntry pex = new TarArchiveEntry(name,\n+                                                  TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n+\n+        StringWriter w = new StringWriter();\n+        for (Map.Entry<String, String> h : headers.entrySet()) {\n+            String key = h.getKey();\n+            String value = h.getValue();\n+            int len = key.length() + value.length()\n+                + 3 /* blank, equals and newline */\n+                + 2 /* guess 9 < actual length < 100 */;\n+            String line = len + \" \" + key + \"=\" + value + \"\\n\";\n+            int actualLength = line.getBytes(\"UTF-8\").length;\n+            while (len != actualLength) {\n+                // Adjust for cases where length < 10 or > 100\n+                // or where UTF-8 encoding isn't a single octet\n+                // per character.\n+                // Must be in loop as size may go from 99 to 100 in\n+                // first pass so we'd need a second.\n+                len = actualLength;\n+                line = len + \" \" + key + \"=\" + value + \"\\n\";\n+                actualLength = line.getBytes(\"UTF-8\").length;\n+            }\n+            w.write(line);\n+        }\n+        byte[] data = w.toString().getBytes(\"UTF-8\");\n+        pex.setSize(data.length);\n+        putArchiveEntry(pex);\n+        write(data);\n+        closeArchiveEntry();\n+    }\n+\n+    /**\n      * Write an EOF (end of archive) record to the tar archive.\n      * An EOF record consists of a record of all zeros.\n      */\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n         TarArchiveEntry e = tin.getNextTarEntry();\n         assertEquals(0100000000000L, e.getSize());\n     }\n+\n+    public void testBigFilePosixMode() throws Exception {\n+        TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n+        t.setSize(0100000000000L);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n+        tos.setBigFileMode(TarArchiveOutputStream.BIGFILE_POSIX);\n+        tos.putArchiveEntry(t);\n+        // make sure header is written to byte array\n+        tos.write(new byte[10 * 1024]);\n+        byte[] data = bos.toByteArray();\n+        assertEquals(\"00000000000 \",\n+                     new String(data,\n+                                1024 + TarConstants.NAMELEN\n+                                + TarConstants.MODELEN\n+                                + TarConstants.UIDLEN\n+                                + TarConstants.GIDLEN, 12,\n+                                \"UTF-8\"));\n+        TarArchiveInputStream tin =\n+            new TarArchiveInputStream(new ByteArrayInputStream(data));\n+        TarArchiveEntry e = tin.getNextTarEntry();\n+        assertEquals(0100000000000L, e.getSize());\n+    }\n+\n+    public void testWriteSimplePaxHeaders() throws Exception {\n+        Map<String, String> m = new HashMap<String, String>();\n+        m.put(\"a\", \"b\");\n+        byte[] data = writePaxHeader(m);\n+        assertEquals(\"00000000006 \",\n+                     new String(data, TarConstants.NAMELEN\n+                                + TarConstants.MODELEN\n+                                + TarConstants.UIDLEN\n+                                + TarConstants.GIDLEN, 12,\n+                                \"UTF-8\"));\n+        assertEquals(\"6 a=b\\n\", new String(data, 512, 6, \"UTF-8\"));\n+    }\n+\n+    public void testPaxHeadersWithLength99() throws Exception {\n+        Map<String, String> m = new HashMap<String, String>();\n+        m.put(\"a\",\n+              \"0123456789012345678901234567890123456789\"\n+              + \"01234567890123456789012345678901234567890123456789\"\n+              + \"012\");\n+        byte[] data = writePaxHeader(m);\n+        assertEquals(\"00000000143 \",\n+                     new String(data, TarConstants.NAMELEN\n+                                + TarConstants.MODELEN\n+                                + TarConstants.UIDLEN\n+                                + TarConstants.GIDLEN, 12,\n+                                \"UTF-8\"));\n+        assertEquals(\"99 a=0123456789012345678901234567890123456789\"\n+              + \"01234567890123456789012345678901234567890123456789\"\n+              + \"012\\n\", new String(data, 512, 99, \"UTF-8\"));\n+    }\n+\n+    public void testPaxHeadersWithLength101() throws Exception {\n+        Map<String, String> m = new HashMap<String, String>();\n+        m.put(\"a\",\n+              \"0123456789012345678901234567890123456789\"\n+              + \"01234567890123456789012345678901234567890123456789\"\n+              + \"0123\");\n+        byte[] data = writePaxHeader(m);\n+        assertEquals(\"00000000145 \",\n+                     new String(data, TarConstants.NAMELEN\n+                                + TarConstants.MODELEN\n+                                + TarConstants.UIDLEN\n+                                + TarConstants.GIDLEN, 12,\n+                                \"UTF-8\"));\n+        assertEquals(\"101 a=0123456789012345678901234567890123456789\"\n+              + \"01234567890123456789012345678901234567890123456789\"\n+              + \"0123\\n\", new String(data, 512, 101, \"UTF-8\"));\n+    }\n+\n+    private byte[] writePaxHeader(Map<String, String> m) throws Exception {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n+        tos.writePaxHeaders(\"foo\", m);\n+\n+        // add a dummy entry so data gets written\n+        TarArchiveEntry t = new TarArchiveEntry(\"foo\");\n+        t.setSize(10 * 1024);\n+        tos.putArchiveEntry(t);\n+        tos.write(new byte[10 * 1024]);\n+        tos.closeArchiveEntry();\n+\n+        return bos.toByteArray();\n+    }\n }", "timestamp": 1323357736, "metainfo": ""}