{"sha": "62202d2acd00b43415ce9ed45e1c37f42d6ef616", "log": "don't use zero-filled arrays in tests, they mask a bug", "commit": "\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStreamTest.java\n             // though. (4 is the minimum length for a back-reference\n             // in LZ4\n             byte[] compressed = compress(i);\n-            byte[] expected = new byte[i + 1];\n+            byte[] expected = prepareExpected(i + 1);\n             expected[0] = (byte) (i<<4);\n             Assert.assertArrayEquals(\"input length is \" + i, expected, compressed);\n         }\n             // twelve byte literal trailer and the back-reference\n             // would fall below the minimal size\n             byte[] compressed = compress(i);\n-            byte[] expected = i < 15 ? new byte[i + 1] : new byte[i + 2];\n+            byte[] expected = prepareExpected(i < 15 ? i + 1 : i + 2);\n             if (i < 15) {\n                 expected[0] = (byte) (i<<4);\n             } else {\n             // this time even our algorithm is willing to break up the\n             // back-reference\n             byte[] compressed = compress(i);\n-            byte[] expected = new byte[17];\n+            byte[] expected = prepareExpected(17);\n             expected[0] = (byte) ((1<<4) | i - 17);\n-            expected[2] = 1; // offset\n+            // two-byte offset\n+            expected[2] = 1;\n+            expected[3] = 0;\n             expected[4] = (byte) (12<<4);\n             Assert.assertArrayEquals(\"input length is \" + i, expected, compressed);\n         }\n             // literal of length i\n             // we can split the back-reference and merge it with the literal\n             byte[] compressed = compress(16, i);\n-            byte[] expected = new byte[17];\n+            byte[] expected = prepareExpected(17);\n             expected[0] = (byte) ((1<<4) | i - 1);\n-            expected[2] = 1; // offset\n+            // two-byte offset\n+            expected[2] = 1;\n+            expected[3] = 0;\n             expected[4] = (byte) (12<<4);\n             for (int j = 0; j < i; j++) {\n                 expected[expected.length - 1 - j] = 1;\n             // requirements by just rewriting the last Pair, but our\n             // algorithm will chip off a few bytes from the first Pair\n             byte[] compressed = compress(16, i);\n-            byte[] expected = new byte[17];\n+            byte[] expected = prepareExpected(17);\n             expected[0] = (byte) ((1<<4) | i - 1);\n-            expected[2] = 1; // offset\n+            // two-byte offset\n+            expected[2] = 1;\n+            expected[3] = 0;\n             expected[4] = (byte) (12<<4);\n             for (int j = 0; j < i; j++) {\n                 expected[expected.length - 1 - j] = 1;\n             // this shouldn't affect the first pair at all as\n             // rewriting the second one is sufficient\n             byte[] compressed = compress(16, i);\n-            byte[] expected = new byte[i + 5];\n+            byte[] expected = prepareExpected(i + 5);\n             expected[0] = (byte) ((1<<4) | 11);\n-            expected[2] = 1; // offset\n+            // two-byte offset\n+            expected[2] = 1;\n+            expected[3] = 0;\n             expected[4] = (byte) (i<<4);\n             for (int j = 0; j < i; j++) {\n                 expected[expected.length - 1 - j] = 1;\n         // literal and one byte is chopped off of the first pair's\n         // back-reference\n         byte[] compressed = compress(6, 5, 5, 1);\n-        byte[] expected = new byte[17];\n+        byte[] expected = prepareExpected(17);\n         expected[0] = (byte) (1<<4);\n-        expected[2] = 1; // offset\n+        // two-byte offset\n+        expected[2] = 1;\n+        expected[3] = 0;\n         expected[4] = (byte) (12<<4);\n         for (int i = 6; i < 11; i++) {\n             expected[i] = 1;\n     }\n \n     private byte[] compress(int lengthBeforeTrailer, int... lengthOfTrailers) throws IOException {\n-        return compress(new byte[lengthBeforeTrailer], lengthOfTrailers);\n+        byte[] b = prepareExpected(lengthBeforeTrailer);\n+        return compress(b, lengthOfTrailers);\n     }\n \n     private byte[] compress(byte[] input, int... lengthOfTrailers) throws IOException {\n             return baos.toByteArray();\n         }\n     }\n+\n+    private byte[] prepareExpected(int length) {\n+        byte[] b = new byte[length];\n+        Arrays.fill(b, (byte) -1);\n+        return b;\n+    }\n }", "timestamp": 1491469191, "metainfo": ""}