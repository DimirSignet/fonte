{"sha": "31536360f8caff36a6f3482f56545cd3f950c7ab", "log": "minor Java5ification of ZipArchiveOutputStream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n import org.apache.commons.compress.archivers.ArchiveOutputStream;\n+\n+import static org.apache.commons.compress.archivers.zip.ZipConstants.BYTE_MASK;\n+import static org.apache.commons.compress.archivers.zip.ZipConstants.SHORT;\n+import static org.apache.commons.compress.archivers.zip.ZipConstants.WORD;\n \n /**\n  * Reimplementation of {@link java.util.zip.ZipOutputStream\n  */\n public class ZipArchiveOutputStream extends ArchiveOutputStream {\n \n-    static final int BYTE_MASK = 0xFF;\n-    private static final int SHORT = 2;\n-    private static final int WORD = 4;\n     static final int BUFFER_SIZE = 512;\n \n     /** indicates if this archive is finished. protected for use in Jar implementation */\n     /**\n      * List of ZipArchiveEntries written so far.\n      */\n-    private final List entries = new LinkedList();\n+    private final List<ZipArchiveEntry> entries =\n+        new LinkedList<ZipArchiveEntry>();\n \n     /**\n      * CRC instance to avoid parsing DEFLATED data twice.\n     /**\n      * Holds the offsets of the LFH starts for each entry.\n      */\n-    private final Map offsets = new HashMap();\n+    private final Map<ZipArchiveEntry, byte[]> offsets =\n+        new HashMap<ZipArchiveEntry, byte[]>();\n \n     /**\n      * The encoding to use for filenames and the file comment.\n         }\n \n         cdOffset = written;\n-        for (Iterator i = entries.iterator(); i.hasNext(); ) {\n-            writeCentralFileHeader((ZipArchiveEntry) i.next());\n+        for (ZipArchiveEntry ze : entries) {\n+            writeCentralFileHeader(ze);\n         }\n         cdLength = written - cdOffset;\n         writeCentralDirectoryEnd();\n         written += WORD;\n \n         // relative offset of LFH\n-        writeOut((byte[]) offsets.get(ze));\n+        writeOut(offsets.get(ze));\n         written += WORD;\n \n         // file name", "timestamp": 1311864825, "metainfo": ""}