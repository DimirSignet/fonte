{"sha": "2f69e63d0a6ad2d5a527434f679c4c783fda271c", "log": "Drop trailing spaces where file has at least one instance of multiple trailing spaces  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n                 System.arraycopy(longNameData, 0, l, 0, length);\n                 longNameData = l;\n             }\n-            \n+\n             currEntry.setName(encoding.decode(longNameData));\n         }\n \n     /**\n      * Adds the sparse chunks from the current entry to the sparse chunks,\n      * including any additional sparse entries following the current entry.\n-     * \n-     * @throws IOException on error \n-     * \n-     * @todo Sparse files get not yet really processed. \n+     *\n+     * @throws IOException on error\n+     *\n+     * @todo Sparse files get not yet really processed.\n      */\n     private void readGNUSparse() throws IOException {\n         /* we do not really process sparse files yet\n \n     /**\n      * Checks if the signature matches what is expected for a tar file.\n-     * \n+     *\n      * @param signature\n      *            the bytes to check\n      * @param length\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n         } catch (EOFException e) {\n             return null;\n         }\n-            \n+\n         ZipLong sig = new ZipLong(LFH_BUF);\n         if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG)) {\n             hitCentralDirectory = true;\n         readFully(lfh);\n         ZipLong sig = new ZipLong(lfh);\n         if (sig.equals(ZipLong.DD_SIG)) {\n-            throw new \n+            throw new\n                 UnsupportedZipFeatureException(UnsupportedZipFeatureException\n                                                .Feature.SPLITTING);\n         }\n      * Checks if the signature matches what is expected for a zip file.\n      * Does not currently handle self-extracting zips which may have arbitrary\n      * leading content.\n-     * \n+     *\n      * @param signature\n      *            the bytes to check\n      * @param length\n         } else {\n             skip(Long.MAX_VALUE);\n \n-            long inB = \n+            long inB =\n                 current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED\n                 ? getBytesInflated() : current.bytesRead;\n \n--- a/src/main/java/org/apache/commons/compress/utils/Charsets.java\n+++ b/src/main/java/org/apache/commons/compress/utils/Charsets.java\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n- * \n+ *\n  */\n \n package org.apache.commons.compress.utils;\n \n /**\n  * Charsets required of every implementation of the Java platform.\n- * \n+ *\n  * From the Java documentation <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard\n  * charsets</a>:\n  * <p>\n  * release documentation for your implementation to see if any other encodings are supported. Consult the release\n  * documentation for your implementation to see if any other encodings are supported. </cite>\n  * </p>\n- * \n+ *\n  * <ul>\n  * <li><code>US-ASCII</code><br/>\n  * Seven-bit ASCII, a.k.a. ISO646-US, a.k.a. the Basic Latin block of the Unicode character set.</li>\n  * Sixteen-bit Unicode Transformation Format, byte order specified by a mandatory initial byte-order mark (either order\n  * accepted on input, big-endian used on output.)</li>\n  * </ul>\n- * \n+ *\n  * This class best belongs in the Commons Lang or IO project. Even if a similar class is defined in another Commons component, it is\n  * not foreseen that Commons Compress would be made to depend on another Commons component.\n- * \n+ *\n  * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n  * @since 1.4\n  * @version $Id$\n  */\n public class Charsets {\n-    \n+\n     //\n     // This class should only contain Charset instances for required encodings. This guarantees that it will load correctly and\n     // without delay on all Java platforms.\n     //\n-    \n+\n     /**\n-     * Returns the given Charset or the default Charset if the given Charset is null. \n-     * \n+     * Returns the given Charset or the default Charset if the given Charset is null.\n+     *\n      * @param charset\n      *            A charset or null.\n      * @return the given Charset or the default Charset if the given Charset is null\n \n     /**\n      * Returns a Charset for the named charset. If the name is null, return the default Charset.\n-     * \n+     *\n      * @param charset\n      *            The name of the requested charset, may be null.\n      * @return a Charset for the named charset\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset ISO_8859_1 = Charset.forName(CharsetNames.ISO_8859_1);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset US_ASCII = Charset.forName(CharsetNames.US_ASCII);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset UTF_16 = Charset.forName(CharsetNames.UTF_16);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset UTF_16BE = Charset.forName(CharsetNames.UTF_16BE);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset UTF_16LE = Charset.forName(CharsetNames.UTF_16LE);\n      * <p>\n      * Every implementation of the Java platform is required to support this character encoding.\n      * </p>\n-     * \n+     *\n      * @see <a href=\"http://docs.oracle.com/javase/6/docs/api/java/nio/charset/Charset.html\">Standard charsets</a>\n      */\n     public static final Charset UTF_8 = Charset.forName(CharsetNames.UTF_8);\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n      * Creates an archive of textbased files in several directories. The\n      * archivername is the factory identifier for the archiver, for example zip,\n      * tar, cpio, jar, ar. The archive is created as a temp file.\n-     * \n+     *\n      * The archive contains the following files:\n      * <ul>\n      * <li>testdata/test1.xml</li>\n      * <li>something/bla</li>\n      * <li>test with spaces.txt</li>\n      * </ul>\n-     * \n+     *\n      * @param archivename\n      *            the identifier of this archive\n      * @return the newly created file\n \n     /**\n      * Add an entry to the archive, and keep track of the names in archiveList.\n-     * \n+     *\n      * @param out\n      * @param file1\n      * @throws IOException\n \n     /**\n      * Create an archive with a single file \"test1.xml\".\n-     * \n+     *\n      * @param archivename\n      * @return the archive File\n      * @throws Exception\n \n     /**\n      * Checks if an archive contains all expected files.\n-     * \n+     *\n      * @param archive\n      *            the archive to check\n      * @param expected\n \n     /**\n      * Checks that an archive input stream can be read, and that the file data matches file sizes.\n-     * \n+     *\n      * @param in\n      * @param expected list of expected entries or {@code null} if no check of names desired\n      * @throws Exception\n \n     /**\n      * Checks that an archive input stream can be read, and that the file data matches file sizes.\n-     * \n+     *\n      * @param in\n      * @param expected list of expected entries or {@code null} if no check of names desired\n-     * @param cleanUp Cleans up resources if true \n-     * @return returns the created result file if cleanUp = false, or null otherwise \n+     * @param cleanUp Cleans up resources if true\n+     * @return returns the created result file if cleanUp = false, or null otherwise\n      * @throws Exception\n      */\n     protected File checkArchiveContent(ArchiveInputStream in, List<String> expected, boolean cleanUp)\n     /**\n      * Override this method to change what is to be compared in the List.\n      * For example, size + name instead of just name.\n-     * \n+     *\n      * @param entry\n      * @return returns the entry name\n      */\n             fos.close();\n         }\n     }\n-    \n+\n     protected void closeQuietly(Closeable closeable){\n         if (closeable != null) {\n             try {", "timestamp": 1358874033, "metainfo": ""}