{"sha": "cd9d5ee5dc83fb74c0e823e0b13db397ef017251", "log": "[COMPRESS-362] Bullet-proof code using try-with-resources statements.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/Lister.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/Lister.java\n         if (!f.isFile()) {\n             System.err.println(f + \" doesn't exist or is a directory\");\n         }\n-        final InputStream fis = new BufferedInputStream(new FileInputStream(f));\n-        ArchiveInputStream ais;\n+        try (final InputStream fis = new BufferedInputStream(new FileInputStream(f));\n+                final ArchiveInputStream ais = createArchiveInputStream(args, fis)) {\n+            System.out.println(\"Created \" + ais.toString());\n+            ArchiveEntry ae;\n+            while ((ae = ais.getNextEntry()) != null) {\n+                System.out.println(ae.getName());\n+            }\n+        }\n+    }\n+\n+    private static ArchiveInputStream createArchiveInputStream(final String[] args, final InputStream fis)\n+            throws ArchiveException {\n         if (args.length > 1) {\n-            ais = factory.createArchiveInputStream(args[1], fis);\n+            return factory.createArchiveInputStream(args[1], fis);\n         } else {\n-            ais = factory.createArchiveInputStream(fis);\n+            return factory.createArchiveInputStream(fis);\n         }\n-        System.out.println(\"Created \" + ais.toString());\n-        ArchiveEntry ae;\n-        while ((ae = ais.getNextEntry()) != null) {\n-            System.out.println(ae.getName());\n-        }\n-        ais.close();\n-        fis.close();\n     }\n \n     private static void usage() {\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java\n                 if (parent != null && !parent.exists() && !parent.mkdirs()) {\n                     throw new IOException(\"Cannot create \" + parent);\n                 }\n-                final FileOutputStream fos = new FileOutputStream(outFile);\n-                try {\n+                try (final FileOutputStream fos = new FileOutputStream(outFile)) {\n                     final long total = entry.getSize();\n                     long off = 0;\n                     while (off < total) {\n                         off += bytesRead;\n                         fos.write(BUF, 0, bytesRead);\n                     }\n-                } finally {\n-                    fos.close();\n                 }\n             }\n         };\n         if (!f.isFile()) {\n             System.err.println(f + \" doesn't exist or is a directory\");\n         }\n-        final SevenZFile archive = new SevenZFile(f);\n-        try {\n+        try (final SevenZFile archive = new SevenZFile(f)) {\n             SevenZArchiveEntry ae;\n             while((ae=archive.getNextEntry()) != null) {\n                 mode.takeAction(archive, ae);\n             }\n-        } finally {\n-            archive.close();\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n      */\n     public void writeTo(final ZipArchiveOutputStream target) throws IOException {\n         backingStore.closeForWriting();\n-        final InputStream data = backingStore.getInputStream();\n-        for (final CompressedEntry compressedEntry : items) {\n-            final BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize);\n-            target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), rawStream);\n-            rawStream.close();\n+        try (final InputStream data = backingStore.getInputStream()) {\n+            for (final CompressedEntry compressedEntry : items) {\n+                try (final BoundedInputStream rawStream = new BoundedInputStream(data,\n+                        compressedEntry.compressedSize)) {\n+                    target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), rawStream);\n+                }\n+            }\n         }\n-        data.close();\n     }\n \n ", "timestamp": 1466889297, "metainfo": ""}