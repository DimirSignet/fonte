{"sha": "e6a6666ea0f3f19f3c3d5c10a29a05abf0e080b0", "log": "fix javadoc warnings and add a bunch of @throws  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n      * @param password optional password if the archive is encrypted -\n      * the byte array is supposed to be the UTF16-LE encoded\n      * representation of the password.\n+     * @throws IOException if reading the archive fails\n      */\n     public SevenZFile(final File filename, final byte[] password) throws IOException {\n         boolean succeeded = false;\n      * Reads a file as unecrypted 7z archive\n      *\n      * @param filename the file to read\n+     * @throws IOException if reading the archive fails\n      */\n     public SevenZFile(final File filename) throws IOException {\n         this(filename, null);\n \n     /**\n      * Closes the archive.\n+     * @throws IOException if closing the file fails\n      */\n     public void close() throws IOException {\n         if (file != null) {\n         }\n     }\n     \n+    /**\n+     * Reads a byte of data.\n+     * \n+     * @return the byte read, or -1 if end of input is reached\n+     * @throws IOException\n+     *             if an I/O error has occurred\n+     */\n     public int read() throws IOException {\n         return currentEntryInputStream.read();\n     }\n     \n+    /**\n+     * Reads data into an array of bytes.\n+     * \n+     * @param b the array to write data to\n+     * @return the number of bytes read, or -1 if end of input is reached\n+     * @throws IOException\n+     *             if an I/O error has occurred\n+     */\n     public int read(byte[] b) throws IOException {\n         return read(b, 0, b.length);\n     }\n     \n+    /**\n+     * Reads data into an array of bytes.\n+     * \n+     * @param b the array to write data to\n+     * @param off offset into the buffer to start filling at\n+     * @param len of bytes to read\n+     * @return the number of bytes read, or -1 if end of input is reached\n+     * @throws IOException\n+     *             if an I/O error has occurred\n+     */\n     public int read(byte[] b, int off, int len) throws IOException {\n         return currentEntryInputStream.read(b, off, len);\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n     private CountingOutputStream currentOutputStream;\n     private SevenZMethod contentCompression = SevenZMethod.LZMA2;\n     \n+    /**\n+     * Opens file to write a 7z archive to.\n+     *\n+     * @param filename name of the file to write to\n+     * @throws IOException if opening the file fails\n+     */\n     public SevenZOutputFile(final File filename) throws IOException {\n         file = new RandomAccessFile(filename, \"rw\");\n         file.seek(SevenZFile.SIGNATURE_HEADER_SIZE);\n      * Sets the compression method to use for entry contents - the\n      * default is LZMA2.\n      *\n-     * <p>Currently only {@link SevenZMethod.COPY}, {@link\n-     * SevenZMethod.LZMA2}, {@link SevenZMethod.BZIP2} and {@link\n-     * SevenZMethod.DEFLATE} are supported.</p>\n+     * <p>Currently only {@link SevenZMethod#COPY}, {@link\n+     * SevenZMethod#LZMA2}, {@link SevenZMethod#BZIP2} and {@link\n+     * SevenZMethod#DEFLATE} are supported.</p>\n      */\n     public void setContentCompression(SevenZMethod method) {\n         this.contentCompression = method;\n      * The caller must then write the content to the archive and call\n      * {@link #closeArchiveEntry()} to complete the process.\n      * \n-     * @param entry describes the entry\n+     * @param archiveEntry describes the entry\n      * @throws IOException\n      */\n     public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException {\n--- a/src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/utils/BoundedInputStream.java\n     private final InputStream in;\n     private long bytesRemaining;\n     \n+    /**\n+     * Creates the stream that will at most read the given amount of\n+     * bytes from the given stream.\n+     * @param in the stream to read from\n+     * @param size the maximum amount of bytes to read\n+     */\n     public BoundedInputStream(final InputStream in, final long size) {\n         this.in = in;\n         bytesRemaining = size;\n \n     @Override\n     public void close() {\n+        // there isn't anything to close in this stream and the nested\n+        // stream is controlled externally\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n      *\n      * @param input stream to read from\n      * @param b buffer to fill\n-     * @retun the number of bytes actually read\n+     * @return the number of bytes actually read\n+     * @throws IOException\n      */\n     public static int readFully(InputStream input, byte[] b) throws IOException {\n         return readFully(input, b, 0, b.length);\n      * @param input stream to read from\n      * @param b buffer to fill\n      * @param offset offset into the buffer to start filling at\n-     * @param amount of bytes to read\n-     * @retun the number of bytes actually read\n+     * @param len of bytes to read\n+     * @return the number of bytes actually read\n+     * @throws IOException\n+     *             if an I/O error has occurred\n      */\n     public static int readFully(InputStream input, byte[] b, int offset, int len)\n         throws IOException {", "timestamp": 1382330455, "metainfo": ""}