{"sha": "5833b55f929b2016060ddc74fe58d72f0c164145", "log": "Use the more modern, compact, and flexible Javadoc \"{@code ...}\" instead of the HTML \"<tt>...</tt>\".  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n      * @throws IOException\n      *             if the stream content is malformed or an I/O error occurs.\n      * @throws NullPointerException\n-     *             if <tt>in == null</tt>\n+     *             if {@code in == null}\n      */\n     public BZip2CompressorInputStream(final InputStream in) throws IOException {\n         this(in, false);\n      * @throws IOException\n      *             if the stream content is malformed or an I/O error occurs.\n      * @throws NullPointerException\n-     *             if <tt>in == null</tt>\n+     *             if {@code in == null}\n      */\n     public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {\n         this.in = in;\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n  * <p>\n  * The compression requires large amounts of memory. Thus you should call the\n  * {@link #close() close()} method as soon as possible, to force\n- * <tt>BZip2CompressorOutputStream</tt> to release the allocated memory.\n+ * {@code BZip2CompressorOutputStream} to release the allocated memory.\n  * </p>\n  *\n  * <p> You can shrink the amount of allocated memory and maybe raise\n  * </table>\n  *\n  * <p>\n- * For decompression <tt>BZip2CompressorInputStream</tt> allocates less memory if the\n+ * For decompression {@code BZip2CompressorInputStream} allocates less memory if the\n  * bzipped input is smaller than one block.\n  * </p>\n  *\n     implements BZip2Constants {\n \n     /**\n-     * The minimum supported blocksize <tt> == 1</tt>.\n+     * The minimum supported blocksize {@code  == 1}.\n      */\n     public static final int MIN_BLOCKSIZE = 1;\n \n     /**\n-     * The maximum supported blocksize <tt> == 9</tt>.\n+     * The maximum supported blocksize {@code  == 9}.\n      */\n     public static final int MAX_BLOCKSIZE = 9;\n \n      *\n      * @return The blocksize, between {@link #MIN_BLOCKSIZE} and\n      *         {@link #MAX_BLOCKSIZE} both inclusive. For a negative\n-     *         <tt>inputLength</tt> this method returns <tt>MAX_BLOCKSIZE</tt>\n+     *         {@code inputLength} this method returns {@code MAX_BLOCKSIZE}\n      *         always.\n      *\n      * @param inputLength\n      *            The length of the data which will be compressed by\n-     *            <tt>BZip2CompressorOutputStream</tt>.\n+     *            {@code BZip2CompressorOutputStream}.\n      */\n     public static int chooseBlockSize(long inputLength) {\n         return (inputLength > 0) ? (int) Math\n     }\n \n     /**\n-     * Constructs a new <tt>BZip2CompressorOutputStream</tt> with a blocksize of 900k.\n+     * Constructs a new {@code BZip2CompressorOutputStream} with a blocksize of 900k.\n      *\n      * @param out \n      *            the destination stream.\n     }\n \n     /**\n-     * Constructs a new <tt>BZip2CompressorOutputStream</tt> with specified blocksize.\n+     * Constructs a new {@code BZip2CompressorOutputStream} with specified blocksize.\n      *\n      * @param out\n      *            the destination stream.", "timestamp": 1405837108, "metainfo": ""}