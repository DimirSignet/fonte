{"sha": "347660646cfad588481c13058842d49fa3779f84", "log": "ZipFile doesn't work properly for unicode extra fields.  Based on patch by Volker Leidl.  COMPRESS-164  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n     private void resolveLocalFileHeaderData(Map<ZipArchiveEntry, NameAndComment>\n                                             entriesWithoutUTF8Flag)\n         throws IOException {\n-        for (ZipArchiveEntry ze : entries.keySet()) {\n-            OffsetEntry offsetEntry = entries.get(ze);\n+        // changing the name of a ZipArchiveEntry is going to change\n+        // the hashcode - see COMPRESS-164\n+        // Map needs to be reconstructed in order to keep central\n+        // directory order\n+        Map<ZipArchiveEntry, OffsetEntry> origMap =\n+            new LinkedHashMap<ZipArchiveEntry, OffsetEntry>(entries);\n+        entries.clear();\n+        for (ZipArchiveEntry ze : origMap.keySet()) {\n+            OffsetEntry offsetEntry = origMap.get(ze);\n             long offset = offsetEntry.headerOffset;\n             archive.seek(offset + LFH_OFFSET_FOR_FILENAME_LENGTH);\n             byte[] b = new byte[SHORT];\n                     nameMap.put(ze.getName(), ze);\n                 }\n             }\n+            entries.put(ze, offsetEntry);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n import java.net.URI;\n import java.net.URISyntaxException;\n         ZipFile zf = null;\n         try {\n             zf = new ZipFile(archive, null, true);\n-            assertNotNull(zf.getEntry(ASCII_TXT));\n-            assertNotNull(zf.getEntry(EURO_FOR_DOLLAR_TXT));\n-            assertNotNull(zf.getEntry(OIL_BARREL_TXT));\n-        } finally {\n-            ZipFile.closeQuietly(zf);\n+            assertCanRead(zf, ASCII_TXT);\n+            assertCanRead(zf, EURO_FOR_DOLLAR_TXT);\n+            assertCanRead(zf, OIL_BARREL_TXT);\n+        } finally {\n+            ZipFile.closeQuietly(zf);\n+        }\n+    }\n+\n+    private void assertCanRead(ZipFile zf, String fileName) throws IOException {\n+        ZipArchiveEntry entry = zf.getEntry(fileName);\n+        assertNotNull(\"Entry doesn't exist\", entry);\n+        InputStream is = zf.getInputStream(entry);\n+        assertNotNull(\"InputStream is null\", is);\n+        try {\n+            is.read();\n+        } finally {\n+            is.close();\n         }\n     }\n ", "timestamp": 1323099592, "metainfo": ""}