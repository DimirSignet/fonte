{"sha": "541898ffdc2205bb9dabb807b2dc498547a21a0d", "log": "AR entries may contain blanks in groupId or userId.  Submitted by Treykaz.  COMPRESS-140  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n  * and file names with a bigger size than 16 bytes are not possible at the\n  * moment.\n  * \n+ * @see http://www.freebsd.org/cgi/man.cgi?query=ar&sektion=5\n+ *\n  * @Immutable\n  */\n public class ArArchiveEntry implements ArchiveEntry {\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n     private final InputStream input;\n     private long offset = 0;\n     private boolean closed;\n-    \n+\n     /*\n      * If getNextEnxtry has been called, the entry metadata is stored in\n      * currentEntry.\n      */\n     private ArArchiveEntry currentEntry = null;\n-    \n+\n     // Storage area for extra long names (GNU ar)\n     private byte[] namebuffer = null;\n-    \n+\n     /*\n      * The offset where the current entry started. -1 if no entry has been\n      * called\n \n         // entry name is stored as ASCII string\n         String temp = ArchiveUtils.toAsciiString(name).trim();\n-        \n+\n         if (temp.equals(\"//\")){ // GNU extended filenames entry\n             int bufflen = asInt(length); // Assume length will fit in an int\n             namebuffer = new byte[bufflen];\n             int offset = Integer.parseInt(temp.substring(1));// get the offset\n             temp = getExtendedName(offset); // convert to the long name\n         }\n-        currentEntry = new ArArchiveEntry(temp, asLong(length), asInt(userid),\n-                                          asInt(groupid), asInt(filemode, 8),\n+        currentEntry = new ArArchiveEntry(temp, asLong(length), asInt(userid, true),\n+                                          asInt(groupid, true), asInt(filemode, 8),\n                                           asLong(lastmodified));\n         return currentEntry;\n     }\n     }\n \n     private int asInt(byte[] input) {\n-        return asInt(input, 10);\n+        return asInt(input, 10, false);\n+    }\n+\n+    private int asInt(byte[] input, boolean treatBlankAsZero) {\n+        return asInt(input, 10, treatBlankAsZero);\n     }\n \n     private int asInt(byte[] input, int base) {\n-        return Integer.parseInt(new String(input).trim(), base);\n+        return asInt(input, base, false);\n+    }\n+\n+    private int asInt(byte[] input, int base, boolean treatBlankAsZero) {\n+        String string = new String(input).trim();\n+        if (string.length() == 0 && treatBlankAsZero) {\n+            return 0;\n+        }\n+        return Integer.parseInt(string, base);\n     }\n \n     /*", "timestamp": 1311171800, "metainfo": ""}