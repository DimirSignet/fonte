{"sha": "cb4b6e016d9486ec06b6f41b44292360d6031502", "log": "BitInputStream can only read a maximum of 31 bits a time or it can't signal EOF  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/BitInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/utils/BitInputStream.java\n     }\n     \n     /**\n-     * Returns at most 32 bits read from the underlying stream.\n+     * Returns at most 31 bits read from the underlying stream.\n      *\n      * @param count the number of bits to read, must be a positive\n-     * number not bigger than 32.\n+     * number not bigger than 31.\n      * @return the bits concatenated as an integer using the stream's byte order.\n+     *         -1 if the end of the underlying stream has been reached\n      */\n     public int readBits(final int count) throws IOException {\n-        if (count < 0 || count > 32) {\n+        if (count < 0 || count > 31) {\n             throw new IllegalArgumentException(\"count must be between 0 and 32\");\n         }\n         while (bitsCachedSize < count) {\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/utils/BitInputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.utils;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.nio.ByteOrder;\n+\n+import org.junit.Test;\n+\n+public class BitInputStreamTest {\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void shouldNotAllowReadingOfANegativeAmountOfBits() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n+        bis.readBits(-1);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void shouldNotAllowReadingOfMoreThan31BitsAtATime() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n+        bis.readBits(32);\n+    }\n+\n+    @Test\n+    public void testReading24BitsInLittleEndian() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n+        assertEquals(0x000140f8, bis.readBits(24));\n+    }\n+\n+    @Test\n+    public void testReading24BitsInBigEndian() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n+        assertEquals(0x00f84001, bis.readBits(24));\n+    }\n+\n+    @Test\n+    public void testReading17BitsInLittleEndian() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n+        assertEquals(0x000140f8, bis.readBits(17));\n+    }\n+\n+    @Test\n+    public void testReading17BitsInBigEndian() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n+        // 1-11110000-10000000\n+        assertEquals(0x0001f080, bis.readBits(17));\n+    }\n+\n+    @Test\n+    public void testReading30BitsInLittleEndian() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n+        assertEquals(0x2f0140f8, bis.readBits(30));\n+    }\n+\n+    @Test\n+    public void testReading30BitsInBigEndian() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n+        // 111110-00010000-00000000-01001011\n+        assertEquals(0x3e10004b, bis.readBits(30));\n+    }\n+\n+    @Test\n+    public void testReading31BitsInLittleEndian() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n+        assertEquals(0x2f0140f8, bis.readBits(31));\n+    }\n+\n+    @Test\n+    public void testReading31BitsInBigEndian() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.BIG_ENDIAN);\n+        // 1111100-00100000-00000000-10010111\n+        assertEquals(0x7c200097, bis.readBits(31));\n+    }\n+\n+    @Test\n+    public void testClearBitCache() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n+        assertEquals(0x08, bis.readBits(4));\n+        bis.clearBitCache();\n+        assertEquals(0, bis.readBits(1));\n+    }\n+\n+    @Test\n+    public void testEOF() throws IOException {\n+        BitInputStream bis = new BitInputStream(getStream(), ByteOrder.LITTLE_ENDIAN);\n+        assertEquals(0x2f0140f8, bis.readBits(30));\n+        assertEquals(-1, bis.readBits(3));\n+    }\n+\n+    private ByteArrayInputStream getStream() {\n+        return new ByteArrayInputStream(new byte[] {\n+                (byte) 0xF8,  // 11111000\n+                0x40,         // 01000000\n+                0x01,         // 00000001\n+                0x2F });      // 00101111\n+    }\n+\n+}", "timestamp": 1415822520, "metainfo": ""}