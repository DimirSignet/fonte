{"sha": "d5aa050a642409fab36805b2296a99e8e5ce8449", "log": "[COMPRESS-362] Bullet-proof code using try-with-resources statements.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n     \n     private StartHeader readStartHeader(final long startHeaderCrc) throws IOException {\n         final StartHeader startHeader = new StartHeader();\n-        DataInputStream dataInputStream = null;\n-        try {\n-             dataInputStream = new DataInputStream(new CRC32VerifyingInputStream(\n-                    new BoundedRandomAccessFileInputStream(file, 20), 20, startHeaderCrc));\n+        try (DataInputStream dataInputStream = new DataInputStream(new CRC32VerifyingInputStream(\n+                new BoundedRandomAccessFileInputStream(file, 20), 20, startHeaderCrc))) {\n              startHeader.nextHeaderOffset = Long.reverseBytes(dataInputStream.readLong());\n              startHeader.nextHeaderSize = Long.reverseBytes(dataInputStream.readLong());\n              startHeader.nextHeaderCrc = 0xffffFFFFL & Integer.reverseBytes(dataInputStream.readInt());\n              return startHeader;\n-        } finally {\n-            if (dataInputStream != null) {\n-                dataInputStream.close();\n-            }\n         }\n     }\n     \n             // In solid compression mode we need to decompress all leading folder'\n             // streams to get access to an entry. We defer this until really needed\n             // so that entire blocks can be skipped without wasting time for decompression.\n-            final InputStream stream = deferredBlockStreams.remove(0);\n-            IOUtils.skip(stream, Long.MAX_VALUE);\n-            stream.close();\n+            try (final InputStream stream = deferredBlockStreams.remove(0)) {\n+                IOUtils.skip(stream, Long.MAX_VALUE);\n+            }\n         }\n \n         return deferredBlockStreams.get(0);\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n      * @throws IOException    If writing fails\n      */\n     public void addArchiveEntry(final ZipArchiveEntryRequest zipArchiveEntryRequest) throws IOException {\n-        final InputStream payloadStream = zipArchiveEntryRequest.getPayloadStream();\n-        try {\n+        try (final InputStream payloadStream = zipArchiveEntryRequest.getPayloadStream()) {\n             streamCompressor.deflate(payloadStream, zipArchiveEntryRequest.getMethod());\n-        } finally {\n-            payloadStream.close();\n         }\n         items.add(new CompressedEntry(zipArchiveEntryRequest, streamCompressor.getCrc32(),\n                                       streamCompressor.getBytesWrittenForLastEntry(), streamCompressor.getBytesRead()));\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java\n     private Pack200CompressorInputStream(final InputStream in, final File f,\n                                          final Pack200Strategy mode,\n                                          final Map<String, String> props)\n-        throws IOException {\n+            throws IOException {\n         originalInput = in;\n         streamBridge = mode.newStreamBridge();\n-        final JarOutputStream jarOut = new JarOutputStream(streamBridge);\n-        final Pack200.Unpacker u = Pack200.newUnpacker();\n-        if (props != null) {\n-            u.properties().putAll(props);\n-        }\n-        if (f == null) {\n-            u.unpack(new FilterInputStream(in) {\n+        try (final JarOutputStream jarOut = new JarOutputStream(streamBridge)) {\n+            final Pack200.Unpacker u = Pack200.newUnpacker();\n+            if (props != null) {\n+                u.properties().putAll(props);\n+            }\n+            if (f == null) {\n+                u.unpack(new FilterInputStream(in) {\n                     @Override\n-                        public void close() {\n+                    public void close() {\n                         // unpack would close this stream but we\n                         // want to give the user code more control\n                     }\n-                },\n-                jarOut);\n-        } else {\n-            u.unpack(f, jarOut);\n-        }\n-        jarOut.close();\n+                }, jarOut);\n+            } else {\n+                u.unpack(f, jarOut);\n+            }\n+        }\n     }\n \n     @Override", "timestamp": 1466889682, "metainfo": ""}