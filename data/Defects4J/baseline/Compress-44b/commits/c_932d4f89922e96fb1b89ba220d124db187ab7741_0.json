{"sha": "932d4f89922e96fb1b89ba220d124db187ab7741", "log": "Unnecessary casts.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java\n \n             if ((readOffset + (len - bytes)) <= blockSize) {\n                 // we can read entirely from the buffer.\n-                n = (long) len - bytes;\n+                n = len - bytes;\n             } else {\n                 // copy what we can from the buffer.\n                 n = (long) blockSize - readOffset;\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n     }\n \n     private static int bsGetInt(BitInputStream bin) throws IOException {\n-        return (int) bsR(bin, 32);\n+        return bsR(bin, 32);\n     }\n \n     /**\n                     }\n \n                     int zn = minLens_zt;\n-                    int zvec = (int) bsR(bin, zn);\n+                    int zvec = bsR(bin, zn);\n                     while(zvec > limit_zt[zn]) {\n                         zn++;\n                         zvec = (zvec << 1) | bsR(bin, 1);\n                 }\n \n                 int zn = minLens_zt;\n-                int zvec = (int) bsR(bin, zn);\n+                int zvec = bsR(bin, zn);\n                 while(zvec > limit_zt[zn]) {\n                     zn++;\n-                    zvec = (zvec << 1) | (int) bsR(bin, 1);\n+                    zvec = (zvec << 1) | bsR(bin, 1);\n                 }\n                 nextSym = perm_zt[zvec - base_zt[zn]];\n             }\n         int zvec = bsR(bin, zn);\n         while (zvec > limit_zt[zn]) {\n             zn++;\n-            zvec = (zvec << 1) | (int) bsR(bin, 1);\n+            zvec = (zvec << 1) | bsR(bin, 1);\n         }\n \n         return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java\n         contentHash.update(bdByte);\n         if (expectContentSize) { // for now we don't care, contains the uncompressed size\n             byte[] contentSize = new byte[8];\n-            int skipped = (int) IOUtils.readFully(in, contentSize);\n+            int skipped = IOUtils.readFully(in, contentSize);\n             count(skipped);\n             if (8 != skipped) {\n                 throw new IOException(\"Premature end of stream while reading content size\");\n--- a/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n             long memoryUsageInBytes = (long) maxTableSize * 6;//(4 (prefixes) + 1 (characters) +1 (outputStack))\n             long memoryUsageInKb = memoryUsageInBytes >> 10;\n \n-            if (memoryUsageInKb > (long)memoryLimitInKb) {\n+            if (memoryUsageInKb > memoryLimitInKb) {\n                 throw new MemoryLimitException(memoryUsageInKb, memoryLimitInKb);\n             }\n         }", "timestamp": 1493708819, "metainfo": ""}