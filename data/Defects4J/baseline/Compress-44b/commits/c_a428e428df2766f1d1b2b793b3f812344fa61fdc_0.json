{"sha": "a428e428df2766f1d1b2b793b3f812344fa61fdc", "log": "Refactor magic number.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n  */\n public class ArchiveStreamFactory implements ArchiveStreamProvider {\n \n+    private static final int TAR_HEADER_SIZE = 512;\n+\n     private static final int DUMP_SIGNATURE_SIZE = 32;\n \n     private static final int SIGNATURE_SIZE = 12;\n             }\n \n             // Tar needs an even bigger buffer to check the signature; read the first block\n-            final byte[] tarheader = new byte[512];\n+            final byte[] tarheader = new byte[TAR_HEADER_SIZE];\n             in.mark(tarheader.length);\n             signatureLength = IOUtils.readFully(in, tarheader);\n             in.reset();\n                 return createArchiveInputStream(TAR, in);\n             }\n             // COMPRESS-117 - improve auto-recognition\n-            if (signatureLength >= 512) {\n+            if (signatureLength >= TAR_HEADER_SIZE) {\n                 TarArchiveInputStream tais = null;\n                 try {\n                     tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));", "timestamp": 1481269542, "metainfo": ""}