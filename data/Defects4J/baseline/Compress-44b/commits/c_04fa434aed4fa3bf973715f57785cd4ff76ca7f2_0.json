{"sha": "04fa434aed4fa3bf973715f57785cd4ff76ca7f2", "log": "Name changed; remove unnecessary casts  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n     private BZip2CompressorInputStream.Data data;\n \n     /**\n-     * Constructs a new CBZip2InputStream which decompresses bytes read from the\n+     * Constructs a new BZip2CompressorInputStream which decompresses bytes read from the\n      * specified stream.\n      * \n      * <p>\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n  * <p>\n  * The compression requires large amounts of memory. Thus you should call the\n  * {@link #close() close()} method as soon as possible, to force\n- * <tt>CBZip2OutputStream</tt> to release the allocated memory.\n+ * <tt>BZip2CompressorOutputStream</tt> to release the allocated memory.\n  * </p>\n  *\n  * <p> You can shrink the amount of allocated memory and maybe raise\n  * </pre>\n  *\n  * <p> To get the memory required for decompression by {@link\n- * CBZip2InputStream CBZip2InputStream} use </p>\n+ * BZip2CompressorInputStream} use </p>\n  *\n  * <pre>\n  * &lt;code&gt;65k + (5 * blocksize)&lt;/code&gt;.\n  * </table>\n  *\n  * <p>\n- * For decompression <tt>CBZip2InputStream</tt> allocates less memory if the\n+ * For decompression <tt>BZip2CompressorInputStream</tt> allocates less memory if the\n  * bzipped input is smaller than one block.\n  * </p>\n  *\n \n                 while (true) {\n                     while (unLo <= unHi) {\n-                        final int n = ((int) block[fmap[unLo] + d1] & 0xff)\n+                        final int n = (block[fmap[unLo] + d1] & 0xff)\n                             - med;\n                         if (n == 0) {\n                             final int temp = fmap[unLo];\n                     }\n \n                     while (unLo <= unHi) {\n-                        final int n = ((int) block[fmap[unHi] + d1] & 0xff)\n+                        final int n = (block[fmap[unHi] + d1] & 0xff)\n                             - med;\n                         if (n == 0) {\n                             final int temp = fmap[unHi];", "timestamp": 1238181584, "metainfo": ""}