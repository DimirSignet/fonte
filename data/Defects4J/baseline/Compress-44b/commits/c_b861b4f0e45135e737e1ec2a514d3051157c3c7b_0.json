{"sha": "b861b4f0e45135e737e1ec2a514d3051157c3c7b", "log": "add-some-Unit-Tests Added some Unit Tests to increase code coverage.", "commit": "\n--- a/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n \n package org.apache.commons.compress;\n \n-import static org.junit.Assert.*;\n-\n+import org.apache.commons.compress.archivers.sevenz.SevenZArchiveEntry;\n import org.apache.commons.compress.utils.ArchiveUtils;\n import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n \n public class ArchiveUtilsTest extends AbstractTestCase {\n \n         assertEquals(expected, ArchiveUtils.sanitize(input));\n     }\n \n+    @Test\n+    public void testIsEqualWithNullWithPositive() {\n+\n+        byte[] byteArray = new byte[8];\n+        byteArray[1] = (byte) (-77);\n+\n+        assertFalse(ArchiveUtils.isEqualWithNull(byteArray, 0, (byte)0, byteArray, (byte)0, (byte)80));\n+\n+    }\n+\n+    @Test\n+    public void testToAsciiBytes() {\n+\n+        byte[] byteArray = ArchiveUtils.toAsciiBytes(\"SOCKET\");\n+\n+        assertArrayEquals(new byte[] {(byte)83, (byte)79, (byte)67, (byte)75, (byte)69, (byte)84}, byteArray);\n+\n+        assertFalse(ArchiveUtils.isEqualWithNull(byteArray, 0, 46, byteArray, 63, 0));\n+\n+    }\n+\n+    @Test\n+    public void testToStringWithNonNull() {\n+\n+        SevenZArchiveEntry sevenZArchiveEntry = new SevenZArchiveEntry();\n+        String string = ArchiveUtils.toString(sevenZArchiveEntry);\n+\n+        assertEquals(\"-       0 null\", string);\n+\n+    }\n+\n+    @Test\n+    public void testIsEqual() {\n+\n+        assertTrue(ArchiveUtils.isEqual((byte[]) null, 0, 0, (byte[]) null, 0, 0));\n+\n+    }\n+\n+    @Test(expected = StringIndexOutOfBoundsException.class)\n+    public void testToAsciiStringThrowsStringIndexOutOfBoundsException() {\n+\n+        byte[] byteArray = new byte[3];\n+\n+        ArchiveUtils.toAsciiString(byteArray, 940, 2730);\n+\n+    }\n+\n     private void asciiToByteAndBackOK(final String inputString) {\n         assertEquals(inputString, ArchiveUtils.toAsciiString(ArchiveUtils.toAsciiBytes(inputString)));\n     }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/utils/ChecksumCalculatingInputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.compress.utils;\n+\n+import org.junit.Test;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.zip.Adler32;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Unit tests for class {@link ChecksumCalculatingInputStream org.apache.commons.compress.utils.ChecksumCalculatingInputStream}.\n+ *\n+ * @author Michael Hausegger, hausegger.michael@googlemail.com\n+ * @date 13.06.2017\n+ * @see ChecksumCalculatingInputStream\n+ **/\n+public class ChecksumCalculatingInputStreamTest {\n+\n+\n+\n+    @Test\n+    public void testSkipReturningZero() throws IOException {\n+\n+        Adler32 adler32_ = new Adler32();\n+        byte[] byteArray = new byte[0];\n+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);\n+        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(adler32_, byteArrayInputStream);\n+        long skipResult = checksumCalculatingInputStream.skip(60L);\n+\n+        assertEquals(0L, skipResult);\n+\n+        assertEquals(1L, checksumCalculatingInputStream.getValue());\n+\n+\n+    }\n+\n+\n+    @Test\n+    public void testSkipReturningPositive() throws IOException {\n+\n+        Adler32 adler32_ = new Adler32();\n+        byte[] byteArray = new byte[6];\n+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);\n+        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(adler32_, byteArrayInputStream);\n+        long skipResult = checksumCalculatingInputStream.skip((byte)0);\n+\n+        assertEquals(1L, skipResult);\n+\n+        assertEquals(65537L, checksumCalculatingInputStream.getValue());\n+\n+    }\n+\n+\n+    @Test\n+    public void testReadTakingNoArguments() throws IOException {\n+\n+        Adler32 adler32_ = new Adler32();\n+        byte[] byteArray = new byte[6];\n+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);\n+        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(adler32_, byteArrayInputStream);\n+        BufferedInputStream bufferedInputStream = new BufferedInputStream(checksumCalculatingInputStream);\n+        int inputStreamReadResult = bufferedInputStream.read(byteArray, 0, 1);\n+        int checkSumCalculationReadResult = checksumCalculatingInputStream.read();\n+\n+        assertFalse(checkSumCalculationReadResult == inputStreamReadResult);\n+        assertEquals((-1), checkSumCalculationReadResult);\n+\n+        assertEquals(0, byteArrayInputStream.available());\n+\n+        assertEquals(393217L, checksumCalculatingInputStream.getValue());\n+\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class) //I assume this behaviour to be a bug or at least a defect.\n+    public void testGetValueThrowsNullPointerException() {\n+\n+        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(null,null);\n+\n+        checksumCalculatingInputStream.getValue();\n+\n+\n+    }\n+\n+\n+    @Test\n+    public void testReadTakingByteArray() throws IOException {\n+\n+        Adler32 adler32_ = new Adler32();\n+        byte[] byteArray = new byte[6];\n+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);\n+        ChecksumCalculatingInputStream checksumCalculatingInputStream = new ChecksumCalculatingInputStream(adler32_, byteArrayInputStream);\n+        int readResult = checksumCalculatingInputStream.read(byteArray);\n+\n+        assertEquals(6, readResult);\n+\n+        assertEquals(0, byteArrayInputStream.available());\n+        assertEquals(393217L, checksumCalculatingInputStream.getValue());\n+\n+    }\n+\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/utils/ChecksumVerifyingInputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.compress.utils;\n+\n+import org.junit.Test;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.util.zip.Adler32;\n+import java.util.zip.CRC32;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Unit tests for class {@link ChecksumVerifyingInputStream org.apache.commons.compress.utils.ChecksumVerifyingInputStream}.\n+ *\n+ * @author Michael Hausegger, hausegger.michael@googlemail.com\n+ * @date 13.06.2017\n+ * @see ChecksumVerifyingInputStream\n+ **/\n+public class ChecksumVerifyingInputStreamTest {\n+\n+\n+\n+    @Test(expected = IOException.class)\n+    public void testReadTakingByteArrayThrowsIOException() throws IOException {\n+\n+        Adler32 adler32_ = new Adler32();\n+        byte[] byteArray = new byte[3];\n+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);\n+        ChecksumVerifyingInputStream checksumVerifyingInputStream = new ChecksumVerifyingInputStream(adler32_, byteArrayInputStream, (-1859L), (byte) (-68));\n+\n+        checksumVerifyingInputStream.read(byteArray);\n+\n+    }\n+\n+\n+    @Test(expected = IOException.class)\n+    public void testReadTakingNoArgumentsThrowsIOException() throws IOException {\n+\n+        CRC32 cRC32_ = new CRC32();\n+        byte[] byteArray = new byte[9];\n+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);\n+        ChecksumVerifyingInputStream checksumVerifyingInputStream = new ChecksumVerifyingInputStream(cRC32_, byteArrayInputStream, (byte)1, (byte)1);\n+\n+        checksumVerifyingInputStream.read();\n+\n+    }\n+\n+\n+    @Test\n+    public void testSkip() throws IOException {\n+\n+        CRC32 cRC32_ = new CRC32();\n+        byte[] byteArray = new byte[4];\n+        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(byteArray);\n+        ChecksumVerifyingInputStream checksumVerifyingInputStream = new ChecksumVerifyingInputStream(cRC32_, byteArrayInputStream, (byte)33, 2303L);\n+        int intOne = checksumVerifyingInputStream.read(byteArray);\n+\n+        long skipReturnValue = checksumVerifyingInputStream.skip((byte)1);\n+\n+        assertEquals(558161692L, cRC32_.getValue());\n+        assertEquals(0, byteArrayInputStream.available());\n+\n+        assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray);\n+        assertEquals(0L, skipReturnValue);\n+\n+    }\n+\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/utils/ServiceLoaderIteratorTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.utils;\n+\n+import org.junit.Test;\n+\n+import java.util.NoSuchElementException;\n+\n+import static org.junit.Assert.assertFalse;\n+\n+/**\n+ * Unit tests for class {@link ServiceLoaderIterator org.apache.commons.compress.utils.ServiceLoaderIterator}.\n+ *\n+ * @author Michael Hausegger, hausegger.michael@googlemail.com\n+ * @date 13.06.2017\n+ * @see ServiceLoaderIterator\n+ **/\n+public class ServiceLoaderIteratorTest {\n+\n+\n+\n+    @Test(expected = NoSuchElementException.class)\n+    public void testNextThrowsNoSuchElementException() {\n+\n+        Class<String> clasz = String.class;\n+        ServiceLoaderIterator<String> serviceLoaderIterator = new ServiceLoaderIterator<String>(clasz);\n+\n+        serviceLoaderIterator.next();\n+\n+    }\n+\n+\n+    @Test\n+    public void testHasNextReturnsFalse() {\n+\n+        Class<Object> clasz = Object.class;\n+        ServiceLoaderIterator<Object> serviceLoaderIterator = new ServiceLoaderIterator<Object>(clasz);\n+        boolean result = serviceLoaderIterator.hasNext();\n+\n+        assertFalse(result);\n+\n+    }\n+\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testRemoveThrowsUnsupportedOperationException() {\n+\n+        Class<Integer> clasz = Integer.class;\n+        ServiceLoaderIterator<Integer> serviceLoaderIterator = new ServiceLoaderIterator<Integer>(clasz);\n+\n+        serviceLoaderIterator.remove();\n+\n+\n+    }\n+\n+\n+\n+}", "timestamp": 1497687610, "metainfo": ""}