{"sha": "c7beb9fc51e07b1c9f495e4f9c49f1722c32f99a", "log": "COMPRESS-285 optionally cache whether XZ for Java is available  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n import org.apache.commons.compress.compressors.FileNameUtil;\n \n /**\n public class XZUtils {\n \n     private static final FileNameUtil fileNameUtil;\n+\n     /**\n      * XZ Header Magic Bytes begin a XZ file.\n      *\n         (byte) 0xFD, '7', 'z', 'X', 'Z', '\\0'\n     };\n \n+    private static final int DONT_CACHE = 2;\n+    private static final int CACHED_AVAILABLE = 1;\n+    private static final int CACHED_UNAVAILABLE = 0;\n+\n+    private static final AtomicInteger cachedXZAvailability;\n+\n     static {\n         Map<String, String> uncompressSuffix = new HashMap<String, String>();\n         uncompressSuffix.put(\".txz\", \".tar\");\n         uncompressSuffix.put(\".xz\", \"\");\n         uncompressSuffix.put(\"-xz\", \"\");\n         fileNameUtil = new FileNameUtil(uncompressSuffix, \".xz\");\n+        cachedXZAvailability = new AtomicInteger(DONT_CACHE);\n+        try {\n+            Class.forName(\"org.osgi.framework.BundleEvent\");\n+        } catch (Exception ex) {\n+            setCacheXZAvailablity(true);\n+        }\n     }\n \n     /** Private constructor to prevent instantiation of this utility class. */\n      * @since 1.5\n      */\n     public static boolean isXZCompressionAvailable() {\n+        final int cachedResult = cachedXZAvailability.get();\n+        if (cachedResult != DONT_CACHE) {\n+            return cachedResult == CACHED_AVAILABLE;\n+        }\n+        return internalIsXZCompressionAvailable();\n+    }\n+\n+    private static boolean internalIsXZCompressionAvailable() {\n         try {\n             XZCompressorInputStream.matches(null, 0);\n             return true;\n         return fileNameUtil.getCompressedFilename(filename);\n     }\n \n+    /**\n+     * Whether to cache the result of the XZ for Java check.\n+     *\n+     * <p>This defaults to {@code false} in an OSGi environment and {@code true} otherwise.</p>\n+     * @param doCache whether to cache the result\n+     * @since 1.9\n+     */\n+    public static void setCacheXZAvailablity(boolean doCache) {\n+        if (!doCache) {\n+            cachedXZAvailability.set(DONT_CACHE);\n+        } else if (cachedXZAvailability.get() == DONT_CACHE) {\n+            final boolean hasXz = internalIsXZCompressionAvailable();\n+            cachedXZAvailability.set(hasXz ? CACHED_AVAILABLE : CACHED_UNAVAILABLE);\n+        }\n+    }\n }", "timestamp": 1408009577, "metainfo": ""}