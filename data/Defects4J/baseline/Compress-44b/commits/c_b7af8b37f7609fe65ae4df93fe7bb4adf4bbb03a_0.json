{"sha": "b7af8b37f7609fe65ae4df93fe7bb4adf4bbb03a", "log": "Minor optimizations.  Exctrated use of calendar, since all operations involving the calendar classes are costly including getInstance.  - Allocated array of correct size  Arguably these issues are really only irritations for anyone measuring the performance of commons-compress; in other words not all that significant in terms of real performance gain, at least not the kind an end-user would notice.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n         if (includeUnparseable && unparseableExtra != null) {\n             result.add(unparseableExtra);\n         }\n-        return result.toArray(new ZipExtraField[0]);\n+        return result.toArray(new ZipExtraField[result.size()]);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n import java.io.OutputStream;\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n+import java.util.Calendar;\n import java.util.HashMap;\n import java.util.Iterator;\n import java.util.LinkedList;\n         // compression method\n         putShort(zipMethod, buf, LFH_METHOD_OFFSET);\n \n-        ZipUtil.toDosTime(ze.getTime(), buf, LFH_TIME_OFFSET);\n+        ZipUtil.toDosTime(calendarInstance, ze.getTime(), buf, LFH_TIME_OFFSET);\n \n         // CRC\n         if (phased){\n        return createCentralFileHeader(ze, getName(ze), lfhOffset, needsZip64Extra);\n     };\n \n+    private final Calendar calendarInstance = Calendar.getInstance();\n+\n+    private final Calendar calendarInstance = Calendar.getInstance();\n+\n     /**\n      * Writes the central file header entry.\n      * @param ze the entry to write\n \n \n         // last mod. time and date\n-        ZipUtil.toDosTime(ze.getTime(), buf, CFH_TIME_OFFSET);\n+        ZipUtil.toDosTime(calendarInstance, ze.getTime(), buf, CFH_TIME_OFFSET);\n \n         // CRC\n         // compressed length\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n      * @since 1.1\n      */\n     public Enumeration<ZipArchiveEntry> getEntriesInPhysicalOrder() {\n-        ZipArchiveEntry[] allEntries = entries.toArray(new ZipArchiveEntry[0]);\n+        ZipArchiveEntry[] allEntries = entries.toArray(new ZipArchiveEntry[entries.size()]);\n         Arrays.sort(allEntries, OFFSET_COMPARATOR);\n         return Collections.enumeration(Arrays.asList(allEntries));\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n      *         must be non-negative and no larger than <tt>buf.length-4</tt>\n      */\n     public static void toDosTime(long t, byte[] buf, int offset) {\n-        Calendar c = Calendar.getInstance();\n+        toDosTime(Calendar.getInstance(), t, buf, offset);\n+    }\n+\n+    static void toDosTime(Calendar c, long t, byte[] buf, int offset) {\n         c.setTimeInMillis(t);\n \n         int year = c.get(Calendar.YEAR);\n                 |         (c.get(Calendar.SECOND) >> 1);\n         ZipLong.putLong(value, buf, offset);\n     }\n+\n \n     /**\n      * Assumes a negative integer really is a positive integer that", "timestamp": 1420665744, "metainfo": ""}