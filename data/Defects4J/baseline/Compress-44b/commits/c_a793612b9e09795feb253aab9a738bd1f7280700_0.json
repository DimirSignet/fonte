{"sha": "a793612b9e09795feb253aab9a738bd1f7280700", "log": "[COMPRESS-392] Add Brotli decoder based on the Google Brotli library.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import java.util.SortedMap;\n import java.util.TreeMap;\n \n+import org.apache.commons.compress.compressors.brotli.BrotliCompressorInputStream;\n+import org.apache.commons.compress.compressors.brotli.BrotliUtils;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;\n \n     private static final CompressorStreamFactory SINGLETON = new CompressorStreamFactory();\n \n+\n+\n+    /**\n+     * Constant (value {@value}) used to identify the BROTLI compression\n+     * algorithm.\n+     * \n+     * @since 1.1\n+     */\n+    public static final String BROTLI = \"br\";\n+    \n     /**\n      * Constant (value {@value}) used to identify the BZIP2 compression\n      * algorithm.\n     }\n     private static ArrayList<CompressorStreamProvider> findCompressorStreamProviders() {\n         return Lists.newArrayList(serviceLoaderIterator());\n+    }\n+\n+    public static String getBrotli() {\n+        return BROTLI;\n     }\n     \n     public static String getBzip2() {\n             if (BZIP2.equalsIgnoreCase(name)) {\n                 return new BZip2CompressorInputStream(in, actualDecompressConcatenated);\n             }\n+            \n+            if (BROTLI.equalsIgnoreCase(name)) {\n+                if (!BrotliUtils.isBrotliCompressionAvailable()) {\n+                    throw new CompressorException(\"Brotli compression is not available.\");\n+                }\n+                return new BrotliCompressorInputStream(in);\n+            }\n \n             if (XZ.equalsIgnoreCase(name)) {\n                 if (!XZUtils.isXZCompressionAvailable()) {\n \n     @Override\n     public Set<String> getInputStreamCompressorNames() {\n-        return Sets.newHashSet(GZIP, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_RAW, SNAPPY_FRAMED, Z, LZ4_BLOCK,\n+        return Sets.newHashSet(GZIP, BROTLI, BZIP2, XZ, LZMA, PACK200, DEFLATE, SNAPPY_RAW, SNAPPY_FRAMED, Z, LZ4_BLOCK,\n             LZ4_FRAMED);\n     }\n ", "timestamp": 1493752924, "metainfo": ""}