{"sha": "12d9048c6c09ab622f389c2550d0668dc7ad26dc", "log": "provide pointers to SeekableInMemoryByteChannel in several places", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n     /**\n      * Reads a SeekableByteChannel as 7z archive\n      *\n+     * <p>{@link\n+     * org.apache.commons.compress.utils.SeekableInMemoryByteChannel}\n+     * allows you to read from an in-memory archive.</p>\n+     *\n+     * @param channel the channel to read\n+     * @param password optional password if the archive is encrypted -\n+     * the byte array is supposed to be the UTF16-LE encoded\n+     * representation of the password.\n+     * @throws IOException if reading the archive fails\n+     * @since 1.13\n+     */\n+    public SevenZFile(final SeekableByteChannel channel,\n+                      final byte[] password) throws IOException {\n+        this(channel, \"unknown archive\", password);\n+    }\n+\n+    /**\n+     * Reads a SeekableByteChannel as 7z archive\n+     *\n+     * <p>{@link\n+     * org.apache.commons.compress.utils.SeekableInMemoryByteChannel}\n+     * allows you to read from an in-memory archive.</p>\n+     *\n      * @param channel the channel to read\n      * @param filename name of the archive - only used for error reporting\n      * @param password optional password if the archive is encrypted -\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n     /**\n      * Prepares channel to write a 7z archive to.\n      *\n+     * <p>{@link\n+     * org.apache.commons.compress.utils.SeekableInMemoryByteChannel}\n+     * allows you to write to an in-memory archive.</p>\n+     *\n      * @param channel the channel to write to\n      * @throws IOException if the channel cannot be positioned properly\n      * @since 1.13\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n  * data and central directory entries.\n  *\n  * <p>This class will try to use {@link\n- * java.nio.channels.SeekableByteChannel} when you know that the\n+ * java.nio.channels.SeekableByteChannel} when it knows that the\n  * output is going to go to a file.</p>\n  *\n  * <p>If SeekableByteChannel cannot be used, this implementation will use\n \n     /**\n      * Creates a new ZIP OutputStream writing to a SeekableByteChannel.\n+     *\n+     * <p>{@link\n+     * org.apache.commons.compress.utils.SeekableInMemoryByteChannel}\n+     * allows you to write to an in-memory archive using random\n+     * access.</p>\n+     *\n      * @param channel the channel to zip to\n      * @throws IOException on error\n      * @since 1.13\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n     }\n \n     /**\n-     * Opens the given file for reading, assuming the specified\n+     * Opens the given channel for reading, assuming the specified\n      * encoding for file names.\n+     *\n+     * <p>{@link\n+     * org.apache.commons.compress.utils.SeekableInMemoryByteChannel}\n+     * allows you to read from an in-memory archive.</p>\n+     *\n+     * @param channel the archive.\n+     * @param encoding the encoding to use for file names, use null\n+     * for the platform's default encoding\n+     *\n+     * @throws IOException if an error occurs while reading the file.\n+     * @since 1.13\n+     */\n+    public ZipFile(final SeekableByteChannel channel, final String encoding)\n+        throws IOException {\n+        this(channel, \"unknown archive\", encoding, true);\n+    }\n+\n+    /**\n+     * Opens the given channel for reading, assuming the specified\n+     * encoding for file names.\n+     *\n+     * <p>{@link\n+     * org.apache.commons.compress.utils.SeekableInMemoryByteChannel}\n+     * allows you to read from an in-memory archive.</p>\n      *\n      * @param channel the archive.\n      * @param archiveName name of the archive, used for error messages only.\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n             data = IOUtils.toByteArray(fis);\n         }\n         try (SevenZFile sevenZFile = new SevenZFile(new SeekableInMemoryByteChannel(data),\n-                                                    \"in memory\", null)) {\n+                                                    null)) {\n             final Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();\n             final Iterator<SevenZArchiveEntry> iter = entries.iterator();\n             SevenZArchiveEntry entry = iter.next();\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n             data = IOUtils.toByteArray(fis);\n         }\n \n-        zf = new ZipFile(new SeekableInMemoryByteChannel(data), \"in memory\",\n-                         ZipEncodingHelper.UTF8, true);\n+        zf = new ZipFile(new SeekableInMemoryByteChannel(data), ZipEncodingHelper.UTF8);\n         final ArrayList<ZipArchiveEntry> l = Collections.list(zf.getEntries());\n         assertEntryName(l, 0, \"AbstractUnicodeExtraField\");\n         assertEntryName(l, 1, \"AsiExtraField\");", "timestamp": 1477757438, "metainfo": ""}