{"sha": "4ac67bf326c1494126161b18612bb62975246ab2", "log": "avoid returning 0 from read(b, off, len)  while debugging what seemed to be a bug inside the compress antlib it looks as if BufferedInputStream would translate a 0 return value into EOF.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorInputStream.java\n             if (!hasMoreDataInBlock()) {\n                 state = State.LOOKING_FOR_BACK_REFERENCE;\n             }\n-            return litLen;\n+            return litLen > 0 ? litLen : read(b, off, len);\n         case LOOKING_FOR_BACK_REFERENCE:\n             if (!initializeBackReference()) {\n                 state = State.EOF;\n             if (!hasMoreDataInBlock()) {\n                 state = State.NO_BLOCK;\n             }\n-            return backReferenceLen;\n+            return backReferenceLen > 0 ? backReferenceLen : read(b, off, len);\n         default:\n             throw new IOException(\"Unknown stream state \" + state);\n         }\n--- a/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorInputStream.java\n             if (!hasMoreDataInBlock()) {\n                 state = State.NO_BLOCK;\n             }\n-            return litLen;\n+            return litLen > 0 ? litLen : read(b, off, len);\n         case IN_BACK_REFERENCE:\n             int backReferenceLen = readBackReference(b, off, len);\n             if (!hasMoreDataInBlock()) {\n                 state = State.NO_BLOCK;\n             }\n-            return backReferenceLen;\n+            return backReferenceLen > 0 ? backReferenceLen : read(b, off, len);\n         default:\n             throw new IOException(\"Unknown stream state \" + state);\n         }", "timestamp": 1494240146, "metainfo": ""}