{"sha": "70594bcaff1d553cbd35312bb63a33bcba0680d3", "log": "COMPRESS-382 first draft of preventing OOM in LZMA", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n      */\n     private volatile boolean decompressConcatenated = false;\n \n+    private volatile int lzmaMemoryLimitKb = -1;\n+\n     /**\n      * Create an instance with the decompress Concatenated option set to false.\n      */\n             }\n \n             if (LZMAUtils.matches(signature, signatureLength) && LZMAUtils.isLZMACompressionAvailable()) {\n-                return new LZMACompressorInputStream(in);\n+                return new LZMACompressorInputStream(in, lzmaMemoryLimitKb);\n             }\n \n             if (FramedLZ4CompressorInputStream.matches(signature, signatureLength)) {\n         }\n         this.decompressConcatenated = decompressConcatenated;\n     }\n-    \n+\n+    /**\n+     * Set the maximum calculated memory usage for LZMA\n+     * in KB.\n+     *\n+     * @param lzmaMemoryLimitKb\n+     */\n+    public void setLzmaMemoryLimitKb(int lzmaMemoryLimitKb) {\n+        this.lzmaMemoryLimitKb = lzmaMemoryLimitKb;\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java\n public class LZMACompressorInputStream extends CompressorInputStream {\n     private final InputStream in;\n \n+    public LZMACompressorInputStream(final InputStream inputStream)\n+            throws IOException {\n+        in = new LZMAInputStream(inputStream, -1);\n+    }\n+\n     /**\n      * Creates a new input stream that decompresses LZMA-compressed data\n      * from the specified input stream.\n      *\n      * @param       inputStream where to read the compressed data\n      *\n+     * @param       memoryLimitKb calculated memory use threshold.  Throws MemoryLimitException\n+     *                            if calculate memory use is above this threshold\n+     *\n      * @throws      IOException if the input is not in the .lzma format,\n      *                          the input is corrupt or truncated, the .lzma\n      *                          headers specify sizes that are not supported\n      *                          by this implementation, or the underlying\n      *                          <code>inputStream</code> throws an exception\n+     *\n+     * @since 1.14\n      */\n-    public LZMACompressorInputStream(final InputStream inputStream)\n+    public LZMACompressorInputStream(final InputStream inputStream, int memoryLimitKb)\n             throws IOException {\n-        in = new LZMAInputStream(inputStream);\n+        in = new LZMAInputStream(inputStream, memoryLimitKb);\n     }\n \n     /** {@inheritDoc} */\n--- a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n package org.apache.commons.compress.compressors;\n \n import static org.apache.commons.compress.AbstractTestCase.getFile;\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.BufferedInputStream;\n import java.io.ByteArrayInputStream;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n \n-import org.apache.commons.compress.compressors.CompressorException;\n-import org.apache.commons.compress.compressors.CompressorInputStream;\n-import org.apache.commons.compress.compressors.CompressorStreamFactory;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.deflate.DeflateCompressorInputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;\n import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;\n import org.junit.Test;\n+import org.tukaani.xz.MemoryLimitException;\n \n @SuppressWarnings(\"deprecation\") // deliberately tests setDecompressConcatenated\n public final class DetectCompressorTestCase {\n         }\n     }\n \n+    @Test\n+    public void testLZMAMemoryLimit() throws Exception {\n+        CompressorStreamFactory compressorStreamFactory = new CompressorStreamFactory();\n+        compressorStreamFactory.setLzmaMemoryLimitKb(500);\n+        try {\n+            InputStream is = compressorStreamFactory.createCompressorInputStream(\n+                    new BufferedInputStream(new FileInputStream(getFile(\"COMPRESS-382\"))));\n+            fail(\"Should have thrown memory limit exception\");\n+        } catch (CompressorException e) {\n+            assertTrue(e.getCause() instanceof MemoryLimitException);\n+        }\n+    }\n+\n     private CompressorInputStream getStreamFor(final String resource)\n             throws CompressorException, IOException {\n         return factory.createCompressorInputStream(", "timestamp": 1492196660, "metainfo": ""}