{"sha": "5170392a5b1e7cd7dccd7e3ef4d6c7279022696d", "log": "use builder pattern for LZ77 to simplify addition of optional parameters  also:  * use \"back-reference\" consistently in public API  * make maxBackReferenceLength default to minBackReferenceLength for   silly values  * make parameter builder public for Snappy and LZ4  this change is here so people will be able to use      createParameterBuilder().tunedForSpeed().build()  in the future.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java\n      * @throws IOException if reading fails\n      */\n     public BlockLZ4CompressorOutputStream(final OutputStream os) throws IOException {\n+        this(os, createParameterBuilder().build());\n+    }\n+\n+    /**\n+     * Creates a new LZ4 output stream.\n+     *\n+     * @param os\n+     *            An OutputStream to read compressed data from\n+     * @param params\n+     *            The parameters to use for LZ77 compression.\n+     *\n+     * @throws IOException if reading fails\n+     */\n+    public BlockLZ4CompressorOutputStream(final OutputStream os, Parameters params) throws IOException {\n         this.os = os;\n-        int maxLen = BlockLZ4CompressorInputStream.WINDOW_SIZE - 1;\n-        compressor = new LZ77Compressor(new Parameters(BlockLZ4CompressorInputStream.WINDOW_SIZE,\n-            MIN_BACK_REFERENCE_LENGTH, maxLen, maxLen, maxLen),\n+        compressor = new LZ77Compressor(params,\n             new LZ77Compressor.Callback() {\n                 public void accept(LZ77Compressor.Block block) throws IOException {\n                     //System.err.println(block);\n         pairs.add(replacement);\n     }\n \n+    /**\n+     * Returns a builder correctly configured for the LZ4 algorithm.\n+     */\n+    public static Parameters.Builder createParameterBuilder() {\n+        int maxLen = BlockLZ4CompressorInputStream.WINDOW_SIZE - 1;\n+        return Parameters.builder(BlockLZ4CompressorInputStream.WINDOW_SIZE)\n+            .withMinBackReferenceLength(MIN_BACK_REFERENCE_LENGTH)\n+            .withMaxBackReferenceLength(maxLen)\n+            .withMaxOffset(maxLen)\n+            .withMaxLiteralLength(maxLen);\n+    }\n+\n     final static class Pair {\n         private final Deque<byte[]> literals = new LinkedList<>();\n         private int brOffset, brLength;\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n  *  buffer of twice of <code>windowSize</code> - real world values are\n  *  in the area of 32k.</dd>\n  *\n- *  <dt><code>minMatchLength</code></dt>\n- *  <dd>Minimal length of a match found. A true minimum of 3 is\n+ *  <dt><code>minBackReferenceLength</code></dt>\n+ *  <dd>Minimal length of a back-reference found. A true minimum of 3 is\n  *  hard-coded inside of this implemention but bigger lengths can be\n  *  configured.</dd>\n  *\n- *  <dt><code>maxMatchLength</code></dt>\n- *  <dd>Maximal length of a match found.</dd>\n+ *  <dt><code>maxBackReferenceLength</code></dt>\n+ *  <dd>Maximal length of a back-reference found.</dd>\n  *\n  *  <dt><code>maxOffset</code></dt>\n  *  <dd>Maximal offset of a back-reference.</dd>\n         }\n     }\n     /**\n-     * Represents a back-reference to a match.\n+     * Represents a back-reference.\n      */\n     public static final class BackReference extends Block {\n         private final int offset, length;\n             this.length = length;\n         }\n         /**\n-         * Provides the offset of the match.\n+         * Provides the offset of the back-reference.\n          * @return the offset\n          */\n         public int getOffset() {\n             return offset;\n         }\n         /**\n-         * Provides the length of the match.\n+         * Provides the length of the back-reference.\n          * @return the length\n          */\n         public int getLength() {\n         }\n         System.arraycopy(data, off, window, currentPosition + lookahead, len);\n         lookahead += len;\n-        if (!initialized && lookahead >= params.getMinMatchLength()) {\n+        if (!initialized && lookahead >= params.getMinBackReferenceLength()) {\n             initialize();\n         }\n         if (initialized) {\n     }\n \n     private void compress() throws IOException {\n-        final int minMatch = params.getMinMatchLength();\n+        final int minMatch = params.getMinBackReferenceLength();\n \n         while (lookahead >= minMatch) {\n             catchUpMissedInserts();\n      * longest match as a side effect.</p>\n      */\n     private int longestMatch(int matchHead) {\n-        final int minLength = params.getMinMatchLength();\n+        final int minLength = params.getMinBackReferenceLength();\n         int longestMatchLength = minLength - 1;\n-        final int maxPossibleLength = Math.min(params.getMaxMatchLength(), lookahead);\n+        final int maxPossibleLength = Math.min(params.getMaxBackReferenceLength(), lookahead);\n         final int minIndex = Math.max(0, currentPosition - params.getMaxOffset());\n         while (matchHead >= minIndex) {\n             int currentLength = 0;\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java\n  * Parameters of the {@link LZ77Compressor compressor}.\n  */\n public final class Parameters {\n-    public static final int TRUE_MIN_MATCH_LENGTH = LZ77Compressor.NUMBER_OF_BYTES_IN_HASH;\n-    private final int windowSize, minMatchLength, maxMatchLength, maxOffset, maxLiteralLength;\n-\n-    /**\n-     * Initializes the compressor's parameters with a\n-     * <code>minMatchLength</code> of 3 and <code>max*Length</code>\n+    /**\n+     * The hard-coded absolute minimal length of a back-reference.\n+     */\n+    public static final int TRUE_MIN_BACK_REFERENCE_LENGTH = LZ77Compressor.NUMBER_OF_BYTES_IN_HASH;\n+\n+    /**\n+     * Initializes the builder for the compressor's parameters with a\n+     * <code>minBackReferenceLength</code> of 3 and <code>max*Length</code>\n      * equal to <code>windowSize - 1</code>.\n      *\n+     * <p>It is recommended to not use this method directly but rather\n+     * tune a pre-configured builder created by a format specific\n+     * factory like {@link\n+     * org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>\n+     *\n      * @param windowSize the size of the sliding window - this\n-     * determines the maximum offset a back-reference can take.\n-     * @throws IllegalArgumentException if <code>windowSize</code>\n-     * is smaller than <code>minMatchLength</code>.\n-     */\n-    public Parameters(int windowSize) {\n-        this(windowSize, TRUE_MIN_MATCH_LENGTH, windowSize - 1, windowSize - 1, windowSize);\n-    }\n-\n-    /**\n-     * Initializes the compressor's parameters.\n-     *\n-     * @param windowSize the size of the sliding window, must be a\n-     * power of two - this determines the maximum offset a\n-     * back-reference can take.\n-     * @param minMatchLength the minimal length of a match found. A\n-     * true minimum of 3 is hard-coded inside of this implemention\n-     * but bigger lengths can be configured.\n-     * @param maxMatchLength maximal length of a match found. A value\n-     * smaller than <code>minMatchLength</code> as well as values\n-     * bigger than <code>windowSize - 1</code> are interpreted as\n-     * <code>windowSize - 1</code>.\n-     * @param maxOffset maximal offset of a back-reference. A\n-     * non-positive value as well as values bigger than\n-     * <code>windowSize - 1</code> are interpreted as <code>windowSize\n-     * - 1</code>.\n-     * @param maxLiteralLength maximal length of a literal\n-     * block. Negative numbers and 0 as well as values bigger than\n-     * <code>windowSize</code> are interpreted as\n-     * <code>windowSize</code>.\n-     * @throws IllegalArgumentException if <code>windowSize</code> is\n-     * smaller than <code>minMatchLength</code> or not a power of two.\n-     */\n-    public Parameters(int windowSize, int minMatchLength, int maxMatchLength,\n-                      int maxOffset, int maxLiteralLength) {\n-        this.minMatchLength = Math.max(TRUE_MIN_MATCH_LENGTH, minMatchLength);\n-        if (windowSize < this.minMatchLength) {\n-            throw new IllegalArgumentException(\"windowSize must be at least as big as minMatchLength\");\n-        }\n-        if (!isPowerOfTwo(windowSize)) {\n-            throw new IllegalArgumentException(\"windowSize must be a power of two\");\n-        }\n+     * determines the maximum offset a back-reference can take. Must\n+     * be a power of two.\n+     * @throws IllegalArgumentException if windowSize is not a power of two.\n+     */\n+    public static Builder builder(int windowSize) {\n+        return new Builder(windowSize);\n+    }\n+\n+    /**\n+     * Builder for {@link Parameters} instances.\n+     */\n+    public static class Builder {\n+        private final int windowSize;\n+        private int minBackReferenceLength, maxBackReferenceLength, maxOffset, maxLiteralLength;\n+\n+        private Builder(int windowSize) {\n+            if (windowSize < 2 || !isPowerOfTwo(windowSize)) {\n+                throw new IllegalArgumentException(\"windowSize must be a power of two\");\n+            }\n+            this.windowSize = windowSize;\n+            minBackReferenceLength = TRUE_MIN_BACK_REFERENCE_LENGTH;\n+            maxBackReferenceLength = windowSize - 1;\n+            maxOffset = windowSize - 1;\n+            maxLiteralLength = windowSize;\n+        }\n+\n+        /**\n+         * Sets the mininal length of a back-reference.\n+         *\n+         * <p>Ensures <code>maxBackReferenceLength</code> is not\n+         * smaller than <code>minBackReferenceLength</code>.\n+         *\n+         * <p>It is recommended to not use this method directly but\n+         * rather tune a pre-configured builder created by a format\n+         * specific factory like {@link\n+         * org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>\n+         *\n+         * @param minBackReferenceLength the minimal length of a back-reference found. A\n+         * true minimum of 3 is hard-coded inside of this implemention\n+         * but bigger lengths can be configured.\n+         * @throws IllegalArgumentException if <code>windowSize</code>\n+         * is smaller than <code>minBackReferenceLength</code>.\n+         */\n+        public Builder withMinBackReferenceLength(int minBackReferenceLength) {\n+            this.minBackReferenceLength = Math.max(TRUE_MIN_BACK_REFERENCE_LENGTH, minBackReferenceLength);\n+            if (windowSize < this.minBackReferenceLength) {\n+                throw new IllegalArgumentException(\"minBackReferenceLength can't be bigger than windowSize\");\n+            }\n+            if (maxBackReferenceLength < this.minBackReferenceLength) {\n+                maxBackReferenceLength = this.minBackReferenceLength;\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the maximal length of a back-reference.\n+         *\n+         * <p>It is recommended to not use this method directly but\n+         * rather tune a pre-configured builder created by a format\n+         * specific factory like {@link\n+         * org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>\n+         *\n+         * @param maxBackReferenceLength maximal length of a\n+         * back-reference found. A value smaller than\n+         * <code>minBackReferenceLength</code> is interpreted as\n+         * <code>minBackReferenceLength</code>. <code>maxBackReferenceLength</code>\n+         * is capped at <code>windowSize - 1</code>.\n+         */\n+        public Builder withMaxBackReferenceLength(int maxBackReferenceLength) {\n+            this.maxBackReferenceLength = maxBackReferenceLength < minBackReferenceLength ? minBackReferenceLength\n+                : Math.min(maxBackReferenceLength, windowSize - 1);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the maximal offset of a back-reference.\n+         *\n+         * <p>It is recommended to not use this method directly but\n+         * rather tune a pre-configured builder created by a format\n+         * specific factory like {@link\n+         * org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>\n+         *\n+         * @param maxOffset maximal offset of a back-reference. A\n+         * non-positive value as well as values bigger than\n+         * <code>windowSize - 1</code> are interpreted as <code>windowSize\n+         * - 1</code>.\n+         */\n+        public Builder withMaxOffset(int maxOffset) {\n+            this.maxOffset = maxOffset < 1 ? windowSize - 1 : Math.min(maxOffset, windowSize - 1);\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the maximal length of a literal block.\n+         *\n+         * <p>It is recommended to not use this method directly but\n+         * rather tune a pre-configured builder created by a format\n+         * specific factory like {@link\n+         * org.apache.commons.compress.compressors.snappy.SnappyCompressorOutputStream#createParameterBuilder}.</p>\n+         *\n+         * @param maxLiteralLength maximal length of a literal\n+         * block. Negative numbers and 0 as well as values bigger than\n+         * <code>windowSize</code> are interpreted as\n+         * <code>windowSize</code>.\n+         */\n+        public Builder withMaxLiteralLength(int maxLiteralLength) {\n+            this.maxLiteralLength = maxLiteralLength < 1 ? windowSize\n+                : Math.min(maxLiteralLength, windowSize);\n+            return this;\n+        }\n+\n+        /**\n+         * Creates the {@link Parameters} instance.\n+         * @return the configured {@link Parameters} instance.\n+         */\n+        public Parameters build() {\n+            return new Parameters(windowSize, minBackReferenceLength, maxBackReferenceLength,\n+                maxOffset, maxLiteralLength);\n+        }\n+    }\n+\n+    private final int windowSize, minBackReferenceLength, maxBackReferenceLength, maxOffset, maxLiteralLength;\n+\n+    private Parameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength, int maxOffset,\n+        int maxLiteralLength) {\n         this.windowSize = windowSize;\n-        int limit = windowSize - 1;\n-        this.maxOffset = maxOffset < 1 ? limit : Math.min(maxOffset, limit);\n-        this.maxMatchLength = maxMatchLength < this.minMatchLength ? limit\n-            : Math.min(maxMatchLength, limit);\n-        this.maxLiteralLength = maxLiteralLength < 1 ? windowSize\n-            : Math.min(maxLiteralLength, windowSize);\n+        this.minBackReferenceLength = minBackReferenceLength;\n+        this.maxBackReferenceLength = maxBackReferenceLength;\n+        this.maxOffset = maxOffset;\n+        this.maxLiteralLength = maxLiteralLength;\n     }\n \n     /**\n         return windowSize;\n     }\n     /**\n-     * Gets the minimal length of a match found.\n-     * @return the minimal length of a match found\n-     */\n-    public int getMinMatchLength() {\n-        return minMatchLength;\n-    }\n-    /**\n-     * Gets the maximal length of a match found.\n-     * @return the maximal length of a match found\n-     */\n-    public int getMaxMatchLength() {\n-        return maxMatchLength;\n-    }\n-    /**\n-     * Gets the maximal offset of a match found.\n-     * @return the maximal offset of a match found\n+     * Gets the minimal length of a back-reference found.\n+     * @return the minimal length of a back-reference found\n+     */\n+    public int getMinBackReferenceLength() {\n+        return minBackReferenceLength;\n+    }\n+    /**\n+     * Gets the maximal length of a back-reference found.\n+     * @return the maximal length of a back-reference found\n+     */\n+    public int getMaxBackReferenceLength() {\n+        return maxBackReferenceLength;\n+    }\n+    /**\n+     * Gets the maximal offset of a back-reference found.\n+     * @return the maximal offset of a back-reference found\n      */\n     public int getMaxOffset() {\n         return maxOffset;\n--- a/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/SnappyCompressorOutputStream.java\n      */\n     public SnappyCompressorOutputStream(final OutputStream os, final long uncompressedSize, final int blockSize)\n         throws IOException {\n-        this(os, uncompressedSize, createParams(blockSize));\n+        this(os, uncompressedSize, createParameterBuilder(blockSize).build());\n     }\n \n     /**\n     // Snappy stores the match length in six bits of the tag\n     private static final int MAX_MATCH_LENGTH = 64;\n \n-    // package private for tests\n-    static Parameters createParams(int blockSize) {\n+    /**\n+     * Returns a builder correctly configured for the Snappy algorithm using the gven block size.\n+     * @param blockSize the block size.\n+     */\n+    public static Parameters.Builder createParameterBuilder(int blockSize) {\n         // the max offset and max literal length defined by the format\n         // are 2^32 - 1 and 2^32 respectively - with blockSize being\n         // an integer we will never exceed that\n-        return new Parameters(blockSize, MIN_MATCH_LENGTH, MAX_MATCH_LENGTH, blockSize, blockSize);\n+        return Parameters.builder(blockSize)\n+            .withMinBackReferenceLength(MIN_MATCH_LENGTH)\n+            .withMaxBackReferenceLength(MAX_MATCH_LENGTH)\n+            .withMaxOffset(blockSize)\n+            .withMaxLiteralLength(blockSize);\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n \n     @Test\n     public void nonCompressableWithLengthSmallerThanLiteralMax() throws IOException {\n-        List<LZ77Compressor.Block> blocks = compress(new Parameters(128), ONE_TO_TEN);\n+        List<LZ77Compressor.Block> blocks = compress(newParameters(128), ONE_TO_TEN);\n         assertSize(2, blocks);\n         assertLiteralBlock(ONE_TO_TEN, blocks.get(0));\n     }\n \n     @Test\n     public void nonCompressableWithLengthGreaterThanLiteralMaxButLessThanTwiceWindowSize() throws IOException {\n-        List<LZ77Compressor.Block> blocks = compress(new Parameters(8), ONE_TO_TEN);\n+        List<LZ77Compressor.Block> blocks = compress(newParameters(8), ONE_TO_TEN);\n         assertSize(3, blocks);\n         assertLiteralBlock(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, blocks.get(0));\n         assertLiteralBlock(new byte[] { 9, 10 }, blocks.get(1));\n \n     @Test\n     public void nonCompressableWithLengthThatForcesWindowSlide() throws IOException {\n-        List<LZ77Compressor.Block> blocks = compress(new Parameters(4), ONE_TO_TEN);\n+        List<LZ77Compressor.Block> blocks = compress(newParameters(4), ONE_TO_TEN);\n         assertSize(4, blocks);\n         assertLiteralBlock(new byte[] { 1, 2, 3, 4, }, blocks.get(0));\n         assertLiteralBlock(new byte[] { 5, 6, 7, 8 }, blocks.get(1));\n \n     @Test\n     public void nonCompressableSentAsSingleBytes() throws IOException {\n-        List<LZ77Compressor.Block> blocks = compress(new Parameters(8), stagger(ONE_TO_TEN));\n+        List<LZ77Compressor.Block> blocks = compress(newParameters(8), stagger(ONE_TO_TEN));\n         assertSize(3, blocks);\n         assertLiteralBlock(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8 }, blocks.get(0));\n         assertLiteralBlock(new byte[] { 9, 10 }, blocks.get(1));\n     @Test\n     public void blaExampleWithFullArrayAvailableForCompression()\n         throws IOException {\n-        List<LZ77Compressor.Block> blocks = compress(new Parameters(128), BLA);\n+        List<LZ77Compressor.Block> blocks = compress(newParameters(128), BLA);\n         assertSize(4, blocks);\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n         assertBackReference(5, 18, blocks.get(1));\n     }\n \n     @Test\n-    public void blaExampleWithShorterMatchLength() throws IOException {\n-        List<LZ77Compressor.Block> blocks = compress(new Parameters(128, 3, 5, 0, 0), BLA);\n+    public void blaExampleWithShorterBackReferenceLength() throws IOException {\n+        List<LZ77Compressor.Block> blocks = compress(newParameters(128, 3, 5, 0, 0), BLA);\n         assertSize(7, blocks);\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n         assertBackReference(5, 5, blocks.get(1));\n \n     @Test\n     public void blaExampleSmallerWindowSize() throws IOException {\n-        List<LZ77Compressor.Block> blocks = compress(new Parameters(8), BLA);\n+        List<LZ77Compressor.Block> blocks = compress(newParameters(8), BLA);\n         assertSize(6, blocks);\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n         assertEquals(LZ77Compressor.BackReference.class, blocks.get(1).getClass());\n \n     @Test\n     public void blaExampleWithSingleByteWrites() throws IOException {\n-        List<LZ77Compressor.Block> blocks = compress(new Parameters(128), stagger(BLA));\n+        List<LZ77Compressor.Block> blocks = compress(newParameters(128), stagger(BLA));\n         assertEquals(9, blocks.size());\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n         assertBackReference(5, 3, blocks.get(1));\n \n     @Test\n     public void samIAmExampleWithFullArrayAvailableForCompression() throws IOException {\n-        List<LZ77Compressor.Block> blocks = compress(new Parameters(1024), SAM);\n+        List<LZ77Compressor.Block> blocks = compress(newParameters(1024), SAM);\n         assertEquals(21, blocks.size());\n         assertLiteralBlock(\"I am Sam\\n\\n\", blocks.get(0));\n         assertBackReference(5, 3, blocks.get(1));\n     @Test\n     public void blaExampleWithPrefill() throws IOException {\n         final List<LZ77Compressor.Block> blocks = new ArrayList<>();\n-        LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {\n+        LZ77Compressor c = new LZ77Compressor(newParameters(128), new LZ77Compressor.Callback() {\n                 @Override\n                 public void accept(LZ77Compressor.Block block) {\n                     //System.err.println(block);\n     @Test\n     public void blaExampleWithShortPrefill() throws IOException {\n         final List<LZ77Compressor.Block> blocks = new ArrayList<>();\n-        LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {\n+        LZ77Compressor c = new LZ77Compressor(newParameters(128), new LZ77Compressor.Callback() {\n                 @Override\n                 public void accept(LZ77Compressor.Block block) {\n                     //System.err.println(block);\n     @Test\n     public void blaExampleWithPrefillBiggerThanWindowSize() throws IOException {\n         final List<LZ77Compressor.Block> blocks = new ArrayList<>();\n-        LZ77Compressor c = new LZ77Compressor(new Parameters(4), new LZ77Compressor.Callback() {\n+        LZ77Compressor c = new LZ77Compressor(newParameters(4), new LZ77Compressor.Callback() {\n                 @Override\n                 public void accept(LZ77Compressor.Block block) {\n                     //System.err.println(block);\n \n     @Test(expected = IllegalStateException.class)\n     public void cantPrefillTwice() {\n-        LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {\n+        LZ77Compressor c = new LZ77Compressor(newParameters(128), new LZ77Compressor.Callback() {\n                 @Override\n                 public void accept(LZ77Compressor.Block block) {\n                 }\n \n     @Test(expected = IllegalStateException.class)\n     public void cantPrefillAfterCompress() throws IOException {\n-        LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {\n+        LZ77Compressor c = new LZ77Compressor(newParameters(128), new LZ77Compressor.Callback() {\n                 @Override\n                 public void accept(LZ77Compressor.Block block) {\n                 }\n         }\n         return r;\n     }\n+\n+    private static Parameters newParameters(int windowSize) {\n+        return Parameters.builder(windowSize).build();\n+    }\n+\n+    private static Parameters newParameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength,\n+        int maxOffset, int maxLiteralLength) {\n+        return Parameters.builder(windowSize)\n+            .withMinBackReferenceLength(minBackReferenceLength)\n+            .withMaxBackReferenceLength(maxBackReferenceLength)\n+            .withMaxOffset(maxOffset)\n+            .withMaxLiteralLength(maxLiteralLength)\n+            .build();\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java\n \n     @Test\n     public void defaultConstructor() {\n-        Parameters p = new Parameters(128);\n+        Parameters p = newParameters(128);\n         assertEquals(128, p.getWindowSize());\n-        assertEquals(3, p.getMinMatchLength());\n-        assertEquals(127, p.getMaxMatchLength());\n+        assertEquals(3, p.getMinBackReferenceLength());\n+        assertEquals(127, p.getMaxBackReferenceLength());\n         assertEquals(127, p.getMaxOffset());\n         assertEquals(128, p.getMaxLiteralLength());\n     }\n \n     @Test\n-    public void minMatchLengthIsAtLeastThree() {\n-        Parameters p = new Parameters(128, 2, 3, 4, 5);\n-        assertEquals(3, p.getMinMatchLength());\n+    public void minBackReferenceLengthIsAtLeastThree() {\n+        Parameters p = newParameters(128, 2, 3, 4, 5);\n+        assertEquals(3, p.getMinBackReferenceLength());\n     }\n \n     @Test\n-    public void maxMatchLengthIsWinsizeMinus1WhenSmallerThanMinMatchLength() {\n-        Parameters p = new Parameters(128, 2, 2, 4, 5);\n-        assertEquals(127, p.getMaxMatchLength());\n+    public void maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLength() {\n+        Parameters p = newParameters(128, 2, 2, 4, 5);\n+        assertEquals(3, p.getMaxBackReferenceLength());\n     }\n \n     @Test\n-    public void maxMatchLengthIsMinMatchLengthIfBothAreEqual() {\n-        Parameters p = new Parameters(128, 2, 3, 4, 5);\n-        assertEquals(3, p.getMaxMatchLength());\n+    public void maxBackReferenceLengthIsMinBackReferenceLengthWhenSmallerThanMinBackReferenceLengthReversedInvocationOrder() {\n+        Parameters p = Parameters.builder(128)\n+            .withMaxBackReferenceLength(2)\n+            .withMinBackReferenceLength(2)\n+            .withMaxOffset(4)\n+            .withMaxLiteralLength(5)\n+            .build();\n+        assertEquals(3, p.getMaxBackReferenceLength());\n+    }\n+\n+    @Test\n+    public void maxBackReferenceLengthIsMinBackReferenceLengthIfBothAreEqual() {\n+        Parameters p = newParameters(128, 2, 3, 4, 5);\n+        assertEquals(3, p.getMaxBackReferenceLength());\n     }\n \n     @Test\n     public void maxOffsetIsWindowSizeMinus1IfSetTo0() {\n-        Parameters p = new Parameters(128, 2, 3, 0, 5);\n+        Parameters p = newParameters(128, 2, 3, 0, 5);\n         assertEquals(127, p.getMaxOffset());\n     }\n \n     @Test\n     public void maxOffsetIsWindowSizeMinus1IfSetToANegativeValue() {\n-        Parameters p = new Parameters(128, 2, 3, -1, 5);\n+        Parameters p = newParameters(128, 2, 3, -1, 5);\n         assertEquals(127, p.getMaxOffset());\n     }\n \n     @Test\n     public void maxOffsetIsWindowSizeMinus1IfBiggerThanWindowSize() {\n-        Parameters p = new Parameters(128, 2, 3, 129, 5);\n+        Parameters p = newParameters(128, 2, 3, 129, 5);\n         assertEquals(127, p.getMaxOffset());\n     }\n \n     @Test\n     public void maxLiteralLengthIsWindowSizeIfSetTo0() {\n-        Parameters p = new Parameters(128, 2, 3, 4, 0);\n+        Parameters p = newParameters(128, 2, 3, 4, 0);\n         assertEquals(128, p.getMaxLiteralLength());\n     }\n \n     @Test\n     public void maxLiteralLengthIsWindowSizeIfSetToANegativeValue() {\n-        Parameters p = new Parameters(128, 2, 3, 0, -1);\n+        Parameters p = newParameters(128, 2, 3, 0, -1);\n         assertEquals(128, p.getMaxLiteralLength());\n     }\n \n     @Test\n     public void maxLiteralLengthIsWindowSizeIfSetToAValueTooBigToHoldInSlidingWindow() {\n-        Parameters p = new Parameters(128, 2, 3, 0, 259);\n+        Parameters p = newParameters(128, 2, 3, 0, 259);\n         assertEquals(128, p.getMaxLiteralLength());\n     }\n \n     @Test\n     public void allParametersUsuallyTakeTheirSpecifiedValues() {\n-        Parameters p = new Parameters(256, 4, 5, 6, 7);\n+        Parameters p = newParameters(256, 4, 5, 6, 7);\n         assertEquals(256, p.getWindowSize());\n-        assertEquals(4, p.getMinMatchLength());\n-        assertEquals(5, p.getMaxMatchLength());\n+        assertEquals(4, p.getMinBackReferenceLength());\n+        assertEquals(5, p.getMaxBackReferenceLength());\n         assertEquals(6, p.getMaxOffset());\n         assertEquals(7, p.getMaxLiteralLength());\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n-    public void windowSizeMustNotBeSmallerThanMinMatchLength() {\n-        new Parameters(128, 200, 300, 400, 500);\n+    public void windowSizeMustNotBeSmallerThanMinBackReferenceLength() {\n+        newParameters(128, 200, 300, 400, 500);\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void windowSizeMustNotBeAPowerOfTwo() {\n-        new Parameters(100, 200, 300, 400, 500);\n+        newParameters(100, 200, 300, 400, 500);\n+    }\n+\n+    private static Parameters newParameters(int windowSize) {\n+        return Parameters.builder(windowSize).build();\n+    }\n+\n+    private static Parameters newParameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength,\n+        int maxOffset, int maxLiteralLength) {\n+        return Parameters.builder(windowSize)\n+            .withMinBackReferenceLength(minBackReferenceLength)\n+            .withMaxBackReferenceLength(maxBackReferenceLength)\n+            .withMaxOffset(maxOffset)\n+            .withMaxLiteralLength(maxLiteralLength)\n+            .build();\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java\n \n     private void roundTripTest(String testFile) throws IOException {\n         roundTripTest(getFile(testFile),\n-            SnappyCompressorOutputStream.createParams(SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE));\n+            SnappyCompressorOutputStream.createParameterBuilder(SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE)\n+                .build());\n     }\n \n     private void roundTripTest(final File input, Parameters params) throws IOException {\n             fs.write(0);\n             fs.write(0);\n         }\n-        roundTripTest(f, new Parameters(1 << 17, 4, 64, 1 << 17 - 1, 1 << 17 - 1));\n+        roundTripTest(f, newParameters(1 << 17, 4, 64, 1 << 17 - 1, 1 << 17 - 1));\n     }\n \n     @Test\n                 fs.write(r.nextInt(256));\n             }\n         }\n-        roundTripTest(f, new Parameters(1 << 18, 4, 64, 1 << 16 - 1, 1 << 18 - 1));\n+        roundTripTest(f, newParameters(1 << 18, 4, 64, 1 << 16 - 1, 1 << 18 - 1));\n     }\n \n+    private static Parameters newParameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength,\n+        int maxOffset, int maxLiteralLength) {\n+        return Parameters.builder(windowSize)\n+            .withMinBackReferenceLength(minBackReferenceLength)\n+            .withMaxBackReferenceLength(maxBackReferenceLength)\n+            .withMaxOffset(maxOffset)\n+            .withMaxLiteralLength(maxLiteralLength)\n+            .build();\n+    }\n }", "timestamp": 1488650607, "metainfo": ""}