{"sha": "716666a267169689e3b4559458c1f0d53a96ae0a", "log": "COMPRESS-200 aftermaths, we never guarantee ZipEncoding#encode returned a ByteBuffer with position() 0 - even though it always in right now  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n         while (b.limit() > length && len > 0) {\n             b = encoding.encode(name.substring(0, --len));\n         }\n-        final int limit = b.limit();\n+        final int limit = b.limit() - b.position();\n         System.arraycopy(b.array(), b.arrayOffset(), buf, offset, limit);\n \n         // Pad any remaining output bytes with NUL\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         written += SHORT;\n \n         // file name\n-        writeOut(name.array(), name.arrayOffset(), name.limit());\n+        writeOut(name.array(), name.arrayOffset(),\n+                 name.limit() - name.position());\n         written += name.limit();\n \n         // extra field\n             ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                        name.array(),\n                                                        name.arrayOffset(),\n-                                                       name.limit()));\n+                                                       name.limit()\n+                                                       - name.position()));\n         }\n \n         String comm = ze.getComment();\n                 ze.addExtraField(new UnicodeCommentExtraField(comm,\n                                                               commentB.array(),\n                                                               commentB.arrayOffset(),\n-                                                              commentB.limit())\n+                                                              commentB.limit()\n+                                                              - commentB.position())\n                                  );\n             }\n         }\n         written += WORD;\n \n         // file name\n-        writeOut(name.array(), name.arrayOffset(), name.limit());\n+        writeOut(name.array(), name.arrayOffset(),\n+                 name.limit() - name.position());\n         written += name.limit();\n \n         // extra field\n         written += extra.length;\n \n         // file comment\n-        writeOut(commentB.array(), commentB.arrayOffset(), commentB.limit());\n+        writeOut(commentB.array(), commentB.arrayOffset(),\n+                 commentB.limit() - commentB.position());\n         written += commentB.limit();\n     }\n \n         // ZIP file comment\n         ByteBuffer data = this.zipEncoding.encode(comment);\n         writeOut(ZipShort.getBytes(data.limit()));\n-        writeOut(data.array(), data.arrayOffset(), data.limit());\n+        writeOut(data.array(), data.arrayOffset(),\n+                 data.limit() - data.position());\n     }\n \n     private static final byte[] ONE = ZipLong.getBytes(1L);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/UTF8ZipFilesTest.java\n                 ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                            en.array(),\n                                                            en.arrayOffset(),\n-                                                           en.limit()));\n+                                                           en.limit()\n+                                                           - en.position()));\n             }\n \n             zos.putArchiveEntry(ze);\n                 ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                            en.array(),\n                                                            en.arrayOffset(),\n-                                                           en.limit()));\n+                                                           en.limit()\n+                                                           - en.position()));\n             }\n \n             zos.putArchiveEntry(ze);\n                 ze.addExtraField(new UnicodePathExtraField(ze.getName(),\n                                                            en.array(),\n                                                            en.arrayOffset(),\n-                                                           en.limit()));\n+                                                           en.limit()\n+                                                           - en.position()));\n             }\n \n             zos.putArchiveEntry(ze);\n             ByteBuffer ne = enc.encode(ze.getName());\n \n             CRC32 crc = new CRC32();\n-            crc.update(ne.array(),ne.arrayOffset(),ne.limit());\n+            crc.update(ne.array(), ne.arrayOffset(),\n+                       ne.limit() - ne.position());\n \n             assertEquals(crc.getValue(), ucpf.getNameCRC32());\n             assertEquals(expectedName, new String(ucpf.getUnicodeName(),", "timestamp": 1356642263, "metainfo": ""}