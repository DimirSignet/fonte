{"sha": "fadf636013f510fd06121dc204121d772dd472e5", "log": "shuffling some code around  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n import java.util.HashMap;\n-import java.util.Iterator;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java\n      * used.\n      * @since Apache Commons Compress 1.3\n      */\n-    static final ZipLong ZIP64_MAGIC = new ZipLong(0xFFFFFFFFL);\n+    static final ZipLong ZIP64_MAGIC = new ZipLong(ZipConstants.ZIP64_MAGIC);\n \n     /**\n      * Create instance from a number.\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n     private static final int BYTE_1_SHIFT = 8;\n \n     private final int value;\n-\n-    /**\n-     * Value stored in size and similar fields if ZIP64 extensions are\n-     * used.\n-     * @since Apache Commons Compress 1.3\n-     */\n-    static final ZipShort ZIP64_MAGIC = new ZipShort(0xFFFF);\n \n     /**\n      * Create instance from a number.\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n import static org.junit.Assume.assumeTrue;\n \n public class Zip64SupportTest {\n-\n-    private static File getFile(String name) throws Throwable {\n-        URL url = Zip64SupportTest.class.getResource(name);\n-        assumeNotNull(url);\n-        File file = new File(new URI(url.toString()));\n-        assumeTrue(file.exists());\n-        return file;\n-    }\n-\n-    private static File get5GBZerosFile() throws Throwable {\n-        return getFile(\"/5GB_of_Zeros.zip\");\n-    }\n-\n-    private static File get100KFileFile() throws Throwable {\n-        return getFile(\"/100k_Files.zip\");\n-    }\n \n     private static final long FIVE_BILLION = 5000000000l;\n     private static final int ONE_HUNDRED_THOUSAND = 100000;\n         }\n     }\n \n+    private static File getFile(String name) throws Throwable {\n+        URL url = Zip64SupportTest.class.getResource(name);\n+        assumeNotNull(url);\n+        File file = new File(new URI(url.toString()));\n+        assumeTrue(file.exists());\n+        return file;\n+    }\n+\n+    private static File get5GBZerosFile() throws Throwable {\n+        return getFile(\"/5GB_of_Zeros.zip\");\n+    }\n+\n+    private static File get100KFileFile() throws Throwable {\n+        return getFile(\"/100k_Files.zip\");\n+    }\n+\n     private static File getTempFile(String testName) throws Throwable {\n         File f = File.createTempFile(\"commons-compress-\" + testName, \".zip\");\n         f.deleteOnExit();", "timestamp": 1311912065, "metainfo": ""}