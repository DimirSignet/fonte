{"sha": "ad661a8d347c1c0ff1b9264cf0f8c89de7057a69", "log": "allow LZ77 tuning in framed snappy/lz4 streams as well", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n     public static class Parameters {\n         private final BlockSize blockSize;\n         private final boolean withContentChecksum, withBlockChecksum, withBlockDependency;\n+        private final org.apache.commons.compress.compressors.lz77support.Parameters lz77params;\n \n         /**\n          * The default parameters of 4M block size, enabled content\n          */\n         public Parameters(BlockSize blockSize) {\n             this(blockSize, true, false, false);\n+        }\n+        /**\n+         * Sets up custom a custom block size for the LZ4 stream but\n+         * otherwise uses the defaults of enabled content checksum,\n+         * disabled block checksums and independent blocks.\n+         * @param blockSize the size of a single block.\n+         */\n+        public Parameters(BlockSize blockSize,\n+            org.apache.commons.compress.compressors.lz77support.Parameters lz77params) {\n+            this(blockSize, true, false, false, lz77params);\n         }\n         /**\n          * Sets up custom parameters for the LZ4 stream.\n          */\n         public Parameters(BlockSize blockSize, boolean withContentChecksum, boolean withBlockChecksum,\n             boolean withBlockDependency) {\n+            this(blockSize, withContentChecksum, withBlockChecksum, withBlockDependency,\n+                 BlockLZ4CompressorOutputStream.createParameterBuilder().build());\n+        }\n+\n+        /**\n+         * Sets up custom parameters for the LZ4 stream.\n+         * @param blockSize the size of a single block.\n+         * @param withContentChecksum whether to write a content checksum\n+         * @param withBlockChecksum whether to write a block checksum.\n+         * Note that block checksums are not supported by the lz4\n+         * command line utility\n+         * @param withBlockDependency whether a block may depend on\n+         * the content of a previous block. Enabling this may improve\n+         * compression ratio but makes it impossible to decompress the\n+         * output in parallel.\n+         * @param lz77 parameters parameters used to fine-tune\n+         * compression, in particular to balance compression ration vs\n+         * compression speed.\n+         */\n+        public Parameters(BlockSize blockSize, boolean withContentChecksum, boolean withBlockChecksum,\n+                boolean withBlockDependency,\n+                org.apache.commons.compress.compressors.lz77support.Parameters lz77params) {\n             this.blockSize = blockSize;\n             this.withContentChecksum = withContentChecksum;\n             this.withBlockChecksum = withBlockChecksum;\n             this.withBlockDependency = withBlockDependency;\n+            this.lz77params = lz77params;\n         }\n \n         @Override\n     private void flushBlock() throws IOException {\n         final boolean withBlockDependency = params.withBlockDependency;\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream(baos)) {\n+        try (BlockLZ4CompressorOutputStream o = new BlockLZ4CompressorOutputStream(baos, params.lz77params)) {\n             if (withBlockDependency) {\n                 o.prefill(blockDependencyBuffer, blockDependencyBuffer.length - collectedBlockDependencyBytes,\n                     collectedBlockDependencyBytes);\n--- a/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorOutputStream.java\n import java.io.OutputStream;\n \n import org.apache.commons.compress.compressors.CompressorOutputStream;\n+import org.apache.commons.compress.compressors.lz77support.Parameters;\n import org.apache.commons.compress.utils.ByteUtils;\n \n /**\n     private static final int MAX_COMPRESSED_BUFFER_SIZE = 1 << 16;\n \n     private final OutputStream out;\n+    private final Parameters params;\n     private final PureJavaCrc32C checksum = new PureJavaCrc32C();\n     // used in one-arg write method\n     private final byte[] oneByte = new byte[1];\n      * @throws IOException if writing the signature fails\n      */\n     public FramedSnappyCompressorOutputStream(final OutputStream out) throws IOException {\n+        this(out, SnappyCompressorOutputStream.createParameterBuilder(SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE)\n+             .build());\n+    }\n+\n+    /**\n+     * Constructs a new output stream that compresses\n+     * snappy-framed-compressed data to the specified output stream.\n+     * @param out the OutputStream to which to write the compressed data\n+     * @throws IOException if writing the signature fails\n+     */\n+    public FramedSnappyCompressorOutputStream(final OutputStream out, Parameters params) throws IOException {\n         this.out = out;\n+        this.params = params;\n         consumer = new ByteUtils.OutputStreamByteConsumer(out);\n         out.write(FramedSnappyCompressorInputStream.SZ_SIGNATURE);\n     }\n     private void flushBuffer() throws IOException {\n         out.write(FramedSnappyCompressorInputStream.COMPRESSED_CHUNK_TYPE);\n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        try (OutputStream o = new SnappyCompressorOutputStream(baos, currentIndex)) {\n+        try (OutputStream o = new SnappyCompressorOutputStream(baos, currentIndex, params)) {\n             o.write(buffer, 0, currentIndex);\n         }\n         byte[] b = baos.toByteArray();\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n             // small blocksize (so we get enough blocks) and enabled block dependency, otherwise defaults\n             new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K64,\n                 true, false, true) },\n+            // default, tuned for speed\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4,\n+                true, false, false, BlockLZ4CompressorOutputStream.createParameterBuilder()\n+                    .tunedForSpeed().build()) },\n         });\n     }\n ", "timestamp": 1490547334, "metainfo": ""}