{"sha": "f05101e28403494b81704029cc50e66703c34151", "log": "COMPRESS-385 some tweaks to Tim's code, allow detection of 7z  closes #18", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n      * @param in input stream\n      * @return type of archiver if found\n      * @throws ArchiveException if an archiver cannot be detected in the stream\n+     * @since 1.14\n      */\n     public static String detect(InputStream in) throws ArchiveException {\n         if (in == null) {\n         } else if (ArjArchiveInputStream.matches(signature, signatureLength)) {\n             return ARJ;\n         } else if (SevenZFile.matches(signature, signatureLength)) {\n-            throw new StreamingNotSupportedException(SEVEN_Z);\n+            return SEVEN_Z;\n         }\n \n         // Dump needs a bigger buffer to check the signature;\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n             }\n \n             if (XZ.equalsIgnoreCase(name)) {\n-                if (! XZUtils.isXZCompressionAvailable()) {\n+                if (!XZUtils.isXZCompressionAvailable()) {\n                     throw new CompressorException(\"XZ compression is not available.\");\n                 }\n                 return new XZCompressorInputStream(in, actualDecompressConcatenated);\n             }\n \n             if (LZMA.equalsIgnoreCase(name)) {\n-                if (! LZMAUtils.isLZMACompressionAvailable()) {\n+                if (!LZMAUtils.isLZMACompressionAvailable()) {\n                     throw new CompressorException(\"LZMA compression is not available\");\n                 }\n                 return new LZMACompressorInputStream(in);\n--- a/src/test/java/org/apache/commons/compress/MockEvilInputStream.java\n+++ b/src/test/java/org/apache/commons/compress/MockEvilInputStream.java\n-package org.apache.commons.compress;/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n  *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n+ * http://www.apache.org/licenses/LICENSE-2.0\n  *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n  */\n+package org.apache.commons.compress;\n \n import java.io.IOException;\n import java.io.InputStream;\n--- a/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveStreamFactoryTest.java\n     @Test\n     public void testDetect() throws Exception {\n         for (String extension : new String[]{\n+                ArchiveStreamFactory.AR,\n                 ArchiveStreamFactory.ARJ,\n                 ArchiveStreamFactory.CPIO,\n                 ArchiveStreamFactory.DUMP,\n-                //TODO-- figure out how to differentiate btwn JAR and ZIP\n+                // Compress doesn't know how to detect JARs, see COMPRESS-91\n  //               ArchiveStreamFactory.JAR,\n+                ArchiveStreamFactory.SEVEN_Z,\n                 ArchiveStreamFactory.TAR,\n                 ArchiveStreamFactory.ZIP\n         }) {\n--- a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n         assertEquals(CompressorStreamFactory.PACK200, detect(\"bla.pack\"));\n         assertEquals(CompressorStreamFactory.XZ, detect(\"bla.tar.xz\"));\n         assertEquals(CompressorStreamFactory.DEFLATE, detect(\"bla.tar.deflatez\"));\n+        assertEquals(CompressorStreamFactory.LZ4_FRAMED, detect(\"bla.tar.lz4\"));\n+        assertEquals(CompressorStreamFactory.LZMA, detect(\"bla.tar.lzma\"));\n+        assertEquals(CompressorStreamFactory.SNAPPY_FRAMED, detect(\"bla.tar.sz\"));\n+        assertEquals(CompressorStreamFactory.Z, detect(\"bla.tar.Z\"));\n \n         try {\n             CompressorStreamFactory.detect(new BufferedInputStream(new ByteArrayInputStream(new byte[0])));", "timestamp": 1492526402, "metainfo": ""}