{"sha": "c83c462de4e8f865f0a22539f2ba53ab5bb7fd3c", "log": "Exception chaining  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n                 }\n                 v.add(ze);\n             } catch (InstantiationException ie) {\n-                throw new ZipException(ie.getMessage());\n+                throw (ZipException) new ZipException(ie.getMessage()).initCause(ie);\n             } catch (IllegalAccessException iae) {\n-                throw new ZipException(iae.getMessage());\n+                throw (ZipException) new ZipException(iae.getMessage()).initCause(iae);\n             }\n             start += (length + WORD);\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n             try {\n                 read = inf.inflate(buffer, start, length);\n             } catch (DataFormatException e) {\n-                throw new ZipException(e.getMessage());\n+                throw (IOException) new ZipException(e.getMessage()).initCause(e);\n             }\n         } while (read == 0 && inf.needsInput());\n         return read;", "timestamp": 1387408796, "metainfo": ""}