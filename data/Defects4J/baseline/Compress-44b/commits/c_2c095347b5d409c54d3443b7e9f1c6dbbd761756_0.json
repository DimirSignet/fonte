{"sha": "2c095347b5d409c54d3443b7e9f1c6dbbd761756", "log": "completely validate the structure of ZIP64 'end of central directory' structures.  COMPRESS-150  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n                                 (byte) 0xff, (byte) 0xff,\n                                 (byte) 0xff, (byte) 0xff,\n                             }, eocd); \n+\n+                        // validate \"Zip64 end of central directory\n+                        // locator\" is right in front of the EOCD and\n+                        // the location of the \"Zip64 end of central\n+                        // directory record\" seems correct\n+                        long expectedZ64EocdOffset = end - 22 /* eocd.length */\n+                            - 20 /* z64 eocd locator.length */\n+                            - 56 /* z64 eocd without extensible data sector */;\n+                        byte[] loc =\n+                            ZipEightByteInteger.getBytes(expectedZ64EocdOffset);\n+                        a.seek(end - 22 - 20);\n+                        byte[] z64EocdLoc = new byte[20];\n+                        a.readFully(z64EocdLoc);\n+                        assertArrayEquals(new byte[] {\n+                                // sig\n+                                (byte) 0x50, (byte) 0x4b, 6, 7,\n+                                // disk numbers\n+                                0, 0, 0, 0,\n+                                // location of Zip64 EOCD,\n+                                loc[0], loc[1], loc[2], loc[3],\n+                                loc[4], loc[5], loc[6], loc[7],\n+                                // total number of disks\n+                                1, 0, 0, 0,\n+                            }, z64EocdLoc);\n+\n+                        // validate \"Zip64 end of central directory\n+                        // record\" is where it is supposed to be, the\n+                        // known values are fine and read the location\n+                        // of the central directory from it\n+                        a.seek(expectedZ64EocdOffset);\n+                        byte[] z64EocdStart = new byte[40];\n+                        a.readFully(z64EocdStart);\n+                        assertArrayEquals(new byte[] {\n+                                // sig\n+                                (byte) 0x50, (byte) 0x4b, 6, 6,\n+                                // size of z64 EOCD\n+                                44, 0, 0, 0,\n+                                0, 0, 0, 0,\n+                                // version made by\n+                                45, 0,\n+                                // version needed to extract\n+                                45, 0,\n+                                // disk numbers\n+                                0, 0, 0, 0,\n+                                0, 0, 0, 0,\n+                                // number of entries 100k = 0x186A0\n+                                (byte) 0xA0, (byte) 0x86, 1, 0,\n+                                0, 0, 0, 0,\n+                                (byte) 0xA0, (byte) 0x86, 1, 0,\n+                                0, 0, 0, 0,\n+                            }, z64EocdStart);\n+                        a.seek(expectedZ64EocdOffset + 48 /* skip size */);\n+                        byte[] cdOffset = new byte[8];\n+                        a.readFully(cdOffset);\n+                        long cdLoc = ZipEightByteInteger.getLongValue(cdOffset);\n+\n+                        // finally verify there really is a central\n+                        // directory entry where the Zip64 EOCD claims\n+                        a.seek(cdLoc);\n+                        byte[] sig = new byte[4];\n+                        a.readFully(sig);\n+                        assertArrayEquals(new byte[] {\n+                                (byte) 0x50, (byte) 0x4b, 1, 2,\n+                            }, sig);\n                     } finally {\n                         a.close();\n                     }", "timestamp": 1311947682, "metainfo": ""}