{"sha": "f874b8c258f89b464698f86a562812030c5f45f9", "log": "avoid some ugly border cases", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java\n     /**\n      * Initializes the compressor's parameters with a\n      * <code>minMatchLength</code> of 3 and <code>max*Length</code>\n-     * equal to <code>windowSize</code>.\n+     * equal to <code>windowSize - 1</code>.\n      *\n      * @param windowSize the size of the sliding window - this\n      * determines the maximum offset a back-reference can take.\n      * is smaller than <code>minMatchLength</code>.\n      */\n     public Parameters(int windowSize) {\n-        this(windowSize, TRUE_MIN_MATCH_LENGTH, windowSize, windowSize, windowSize);\n+        this(windowSize, TRUE_MIN_MATCH_LENGTH, windowSize - 1, windowSize - 1, windowSize);\n     }\n \n     /**\n      * @param minMatchLength the minimal length of a match found. A\n      * true minimum of 3 is hard-coded inside of this implemention\n      * but bigger lengths can be configured.\n-     * @param maxMatchLength maximal site of a match found. A value\n-     * smaller than <code>minMatchLength</code> is interpreted as\n-     * infinite (actually {@link Integer.MAX_VALUE}).\n+     * @param maxMatchLength maximal length of a match found. A value\n+     * smaller than <code>minMatchLength</code> as well as values\n+     * bigger than <code>windowSize - 1</code> are interpreted as\n+     * <code>windowSize - 1</code>.\n      * @param maxOffset maximal offset of a back-reference. A\n-     * non-positive value is interpreted as <code>windowSize</code>.\n-     * @param maxLiteralLength maximal length of a literal block. Negative\n-     * numbers and 0 as well as values bigger than <code>2 *\n-     * windowSize</code> are interpreted as <code>windowSize</code>.\n+     * non-positive value as well as values bigger than\n+     * <code>windowSize - 1</code> are interpreted as <code>windowSize\n+     * - 1</code>.\n+     * @param maxLiteralLength maximal length of a literal\n+     * block. Negative numbers and 0 as well as values bigger than\n+     * <code>windowSize</code> are interpreted as\n+     * <code>windowSize</code>.\n      * @throws IllegalArgumentException if <code>windowSize</code> is\n      * smaller than <code>minMatchLength</code> or not a power of two.\n      */\n             throw new IllegalArgumentException(\"windowSize must be a power of two\");\n         }\n         this.windowSize = windowSize;\n-        this.maxOffset = maxOffset < 1 ? this.windowSize\n-            : Math.min(maxOffset, this.windowSize);\n-        this.maxMatchLength = maxMatchLength < this.minMatchLength ? Integer.MAX_VALUE\n-            : maxMatchLength;\n-        this.maxLiteralLength = maxLiteralLength < 1 || maxLiteralLength > 2 * windowSize\n-            ? windowSize : maxLiteralLength;\n+        int limit = windowSize - 1;\n+        this.maxOffset = maxOffset < 1 ? limit : Math.min(maxOffset, limit);\n+        this.maxMatchLength = maxMatchLength < this.minMatchLength ? limit\n+            : Math.min(maxMatchLength, limit);\n+        this.maxLiteralLength = maxLiteralLength < 1 ? windowSize\n+            : Math.min(maxLiteralLength, windowSize);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n     @Test\n     public void blaExampleSmallerWindowSize() throws IOException {\n         List<LZ77Compressor.Block> blocks = compress(new Parameters(8), BLA);\n-        assertSize(5, blocks);\n+        assertSize(6, blocks);\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n         assertEquals(LZ77Compressor.BackReference.class, blocks.get(1).getClass());\n-        assertBackReference(5, 8, blocks.get(1));\n-        assertBackReference(5, 8, blocks.get(2));\n-        assertLiteralBlock(\"ah!\", blocks.get(3));\n+        assertBackReference(5, 7, blocks.get(1));\n+        assertBackReference(5, 3, blocks.get(2));\n+        assertBackReference(5, 7, blocks.get(3));\n+        assertLiteralBlock(\"h!\", blocks.get(4));\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz77support/ParametersTest.java\n         Parameters p = new Parameters(128);\n         assertEquals(128, p.getWindowSize());\n         assertEquals(3, p.getMinMatchLength());\n-        assertEquals(128, p.getMaxMatchLength());\n-        assertEquals(128, p.getMaxOffset());\n+        assertEquals(127, p.getMaxMatchLength());\n+        assertEquals(127, p.getMaxOffset());\n         assertEquals(128, p.getMaxLiteralLength());\n     }\n \n     }\n \n     @Test\n-    public void maxMatchLengthIsInfiniteWhenSmallerThanMinMatchLength() {\n+    public void maxMatchLengthIsWinsizeMinus1WhenSmallerThanMinMatchLength() {\n         Parameters p = new Parameters(128, 2, 2, 4, 5);\n-        assertEquals(Integer.MAX_VALUE, p.getMaxMatchLength());\n+        assertEquals(127, p.getMaxMatchLength());\n     }\n \n     @Test\n     }\n \n     @Test\n-    public void maxOffsetIsWindowSizeIfSetTo0() {\n+    public void maxOffsetIsWindowSizeMinus1IfSetTo0() {\n         Parameters p = new Parameters(128, 2, 3, 0, 5);\n-        assertEquals(128, p.getMaxOffset());\n+        assertEquals(127, p.getMaxOffset());\n     }\n \n     @Test\n-    public void maxOffsetIsWindowSizeIfSetToANegativeValue() {\n+    public void maxOffsetIsWindowSizeMinus1IfSetToANegativeValue() {\n         Parameters p = new Parameters(128, 2, 3, -1, 5);\n-        assertEquals(128, p.getMaxOffset());\n+        assertEquals(127, p.getMaxOffset());\n     }\n \n     @Test\n-    public void maxOffsetIsWindowSizeIfBiggerThanWindowSize() {\n+    public void maxOffsetIsWindowSizeMinus1IfBiggerThanWindowSize() {\n         Parameters p = new Parameters(128, 2, 3, 129, 5);\n-        assertEquals(128, p.getMaxOffset());\n+        assertEquals(127, p.getMaxOffset());\n     }\n \n     @Test", "timestamp": 1483982580, "metainfo": ""}