{"sha": "f169feb1d8ef57c89e9e6cf7a4cf0948ffd89162", "log": "very preliminary not-a-test for writing archives with more than 64k entries.  InfoZIP's zip likes the archive created.  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64SupportTest.java\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.IOException;\n import java.net.URI;\n import java.net.URL;\n import java.util.Random;\n             if (zin != null) {\n                 zin.close();\n             }\n-            if (fin != null) {\n-                fin.close();\n-            }\n+            fin.close();\n         }\n     }\n+\n+    @Test public void write100KFiles() throws Throwable {\n+        withTemporaryArchive(\"write100KFiles\", new ZipOutputTest() {\n+                public void test(ZipArchiveOutputStream zos)\n+                    throws IOException {\n+                    for (int i = 0; i < ONE_HUNDRED_THOUSAND; i++) {\n+                        ZipArchiveEntry zae =\n+                            new ZipArchiveEntry(String.valueOf(i));\n+                        zae.setSize(0);\n+                        zos.putArchiveEntry(zae);\n+                        zos.closeArchiveEntry();\n+                    }\n+                }\n+            });\n+    }\n+\n+    static interface ZipOutputTest {\n+        void test(ZipArchiveOutputStream zos) throws IOException;\n+    }\n+\n+    private static void withTemporaryArchive(String testName,\n+                                             ZipOutputTest test)\n+        throws Throwable {\n+        File f = getTempFile(testName);\n+        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(f);\n+        try {\n+            test.test(zos);\n+        } catch (IOException ex) {\n+            System.err.println(\"Failed to write archive because of: \"\n+                               + ex.getMessage()\n+                               + \" - likely not enough disk space.\");\n+            assumeTrue(false);\n+        } finally {\n+            zos.close();\n+        }\n+    }\n+\n+    private static File getTempFile(String testName) throws Throwable {\n+        File f = File.createTempFile(\"commons-compress-\" + testName, \".zip\");\n+        f.deleteOnExit();\n+        return f;\n+    }\n }", "timestamp": 1311912009, "metainfo": ""}