{"sha": "cfc68acf12b856e59845e3ad2eace27bc257e8eb", "log": "stop searching once the optimal match has been found", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n package org.apache.commons.compress.compressors.lz77support;\n \n import java.io.IOException;\n+import java.util.Arrays;\n \n /**\n  * Helper class for compression algorithms that use the ideas of LZ77.\n         window = new byte[wSize * 2];\n         wMask = wSize - 1;\n         head = new int[HASH_SIZE];\n-        for (int i = 0; i < HASH_SIZE; i++) {\n-            head[i] = NO_MATCH;\n-        }\n+        Arrays.fill(head, NO_MATCH);\n         prev = new int[wSize];\n     }\n \n             if (currentLength > longestMatchLength) {\n                 longestMatchLength = currentLength;\n                 matchStart = matchHead;\n+                if (currentLength == maxPossibleLength) {\n+                    // no need to search any further\n+                    break;\n+                }\n             }\n             matchHead = prev[matchHead & wMask];\n         }", "timestamp": 1486572890, "metainfo": ""}