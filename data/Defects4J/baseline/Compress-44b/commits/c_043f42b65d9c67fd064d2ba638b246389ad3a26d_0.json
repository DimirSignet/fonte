{"sha": "043f42b65d9c67fd064d2ba638b246389ad3a26d", "log": "allow LZ77 algorithm to be tuned  niceLen and maxCandidates are used in the same way as zlib's deflate algorithm. The configured values roughly correspond to zlib's compression levels 5 (tunedForSpeed), 7 (default) and 9 (tunedForCompressionRatio).", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n         int longestMatchLength = minLength - 1;\n         final int maxPossibleLength = Math.min(params.getMaxBackReferenceLength(), lookahead);\n         final int minIndex = Math.max(0, currentPosition - params.getMaxOffset());\n-        while (matchHead >= minIndex) {\n+        final int niceBackReferenceLength = Math.min(maxPossibleLength, params.getNiceBackReferenceLength());\n+        final int maxCandidates = params.getMaxCandidates();\n+        for (int candidates = 0; candidates < maxCandidates && matchHead >= minIndex; candidates++) {\n             int currentLength = 0;\n             for (int i = 0; i < maxPossibleLength; i++) {\n                 if (window[matchHead + i] != window[currentPosition + i]) {\n             if (currentLength > longestMatchLength) {\n                 longestMatchLength = currentLength;\n                 matchStart = matchHead;\n-                if (currentLength == maxPossibleLength) {\n+                if (currentLength >= niceBackReferenceLength) {\n                     // no need to search any further\n                     break;\n                 }\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/Parameters.java\n     public static class Builder {\n         private final int windowSize;\n         private int minBackReferenceLength, maxBackReferenceLength, maxOffset, maxLiteralLength;\n+        private Integer niceBackReferenceLength, maxCandidates;\n \n         private Builder(int windowSize) {\n             if (windowSize < 2 || !isPowerOfTwo(windowSize)) {\n         }\n \n         /**\n+         * Sets the \"nice length\" of a back-reference.\n+         *\n+         * <p>When a back-references if this size has been found, stop searching for longer back-references.</p>\n+         *\n+         * <p>This settings can be used to tune the tradeoff between compression speed and compression ratio.</p>\n+         */\n+        public Builder withNiceBackReferenceLength(int niceLen) {\n+            niceBackReferenceLength = niceLen;\n+            return this;\n+        }\n+\n+        /**\n+         * Sets the maximum number of back-reference candidates that should be consulted.\n+         *\n+         * <p>This settings can be used to tune the tradeoff between compression speed and compression ratio.</p>\n+         */\n+        public Builder withMaxNumberOfCandidates(int maxCandidates) {\n+            this.maxCandidates = maxCandidates;\n+            return this;\n+        }\n+\n+        /**\n+         * Changes the default setting for \"nice back-reference length\" and \"maximum number of candidates\" for improved\n+         * compression speed at the cost of compression ratio.\n+         *\n+         * <p>Use this method after configuring \"maximum back-reference length\".</p>\n+         */\n+        public Builder tunedForSpeed() {\n+            niceBackReferenceLength = Math.max(minBackReferenceLength, maxBackReferenceLength / 8);\n+            maxCandidates = Math.max(32, windowSize / 1024);\n+            return this;\n+        }\n+\n+        /**\n+         * Changes the default setting for \"nice back-reference length\" and \"maximum number of candidates\" for improved\n+         * compression ratio at the cost of compression speed.\n+         *\n+         * <p>Use this method after configuring \"maximum back-reference length\".</p>\n+         */\n+        public Builder tunedForCompressionRatio() {\n+            niceBackReferenceLength = maxBackReferenceLength;\n+            maxCandidates = Math.max(32, windowSize / 16);\n+            return this;\n+        }\n+\n+        /**\n          * Creates the {@link Parameters} instance.\n          * @return the configured {@link Parameters} instance.\n          */\n         public Parameters build() {\n+            // default settings tuned for a compromise of good compression and acceptable speed\n+            int niceLen = niceBackReferenceLength != null ? niceBackReferenceLength\n+                : Math.max(minBackReferenceLength, maxBackReferenceLength / 2);\n+            int candidates = maxCandidates != null ? maxCandidates : Math.max(256, windowSize / 128);\n+\n             return new Parameters(windowSize, minBackReferenceLength, maxBackReferenceLength,\n-                maxOffset, maxLiteralLength);\n-        }\n-    }\n-\n-    private final int windowSize, minBackReferenceLength, maxBackReferenceLength, maxOffset, maxLiteralLength;\n+                maxOffset, maxLiteralLength, niceLen, candidates);\n+        }\n+    }\n+\n+    private final int windowSize, minBackReferenceLength, maxBackReferenceLength, maxOffset, maxLiteralLength,\n+        niceBackReferenceLength, maxCandidates;\n \n     private Parameters(int windowSize, int minBackReferenceLength, int maxBackReferenceLength, int maxOffset,\n-        int maxLiteralLength) {\n+        int maxLiteralLength, int niceBackReferenceLength, int maxCandidates) {\n         this.windowSize = windowSize;\n         this.minBackReferenceLength = minBackReferenceLength;\n         this.maxBackReferenceLength = maxBackReferenceLength;\n         this.maxOffset = maxOffset;\n         this.maxLiteralLength = maxLiteralLength;\n+        this.niceBackReferenceLength = niceBackReferenceLength;\n+        this.maxCandidates = maxCandidates;\n     }\n \n     /**\n         return maxLiteralLength;\n     }\n \n+    /**\n+     * Gets the length of a back-reference that is considered nice enough to stop searching for longer ones.\n+     */\n+    public int getNiceBackReferenceLength() {\n+        return niceBackReferenceLength;\n+    }\n+\n+    /**\n+     * Gets the maximum number of back-reference candidates to consider.\n+     */\n+    public int getMaxCandidates() {\n+        return maxCandidates;\n+    }\n+\n     private static final boolean isPowerOfTwo(int x) {\n         // pre-condition: x > 0\n         return (x & (x - 1)) == 0;\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.compressors.lz77support.Parameters;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.runners.Parameterized;\n+import org.junit.runner.RunWith;\n \n+@RunWith(Parameterized.class)\n public final class BlockLZ4CompressorRoundtripTest extends AbstractTestCase {\n+\n+    @org.junit.runners.Parameterized.Parameters(name = \"using {0}\")\n+    public static Collection<Object[]> factory() {\n+        return Arrays.asList(new Object[][] {\n+                new Object[] { \"default\", BlockLZ4CompressorOutputStream.createParameterBuilder().build() },\n+                new Object[] { \"tuned for speed\",\n+                    BlockLZ4CompressorOutputStream.createParameterBuilder().tunedForSpeed().build() },\n+                new Object[] { \"tuned for compression ratio\",\n+                    BlockLZ4CompressorOutputStream.createParameterBuilder().tunedForCompressionRatio().build() }\n+            });\n+    }\n+\n+    private final String config;\n+    private final Parameters params;\n+\n+    public BlockLZ4CompressorRoundtripTest(String config, Parameters params) {\n+        this.config = config;\n+        this.params = params;\n+    }\n \n     private void roundTripTest(String testFile) throws IOException {\n         File input = getFile(testFile);\n         final File outputSz = new File(dir, input.getName() + \".block.lz4\");\n         try (FileInputStream is = new FileInputStream(input);\n              FileOutputStream os = new FileOutputStream(outputSz);\n-             BlockLZ4CompressorOutputStream los = new BlockLZ4CompressorOutputStream(os)) {\n+             BlockLZ4CompressorOutputStream los = new BlockLZ4CompressorOutputStream(os, params)) {\n             IOUtils.copy(is, los);\n         }\n+        System.err.println(\"Configuration: \" + config);\n         System.err.println(input.getName() + \" written, uncompressed bytes: \" + input.length()\n             + \", compressed bytes: \" + outputSz.length() + \" after \" + (System.currentTimeMillis() - start) + \"ms\");\n         start = System.currentTimeMillis();\n         roundTripTest(\"lorem-ipsum.txt.gz\");\n     }\n \n+    // yields no compression at all\n     @Test\n     public void biggerFileRoundtrip() throws IOException {\n         roundTripTest(\"COMPRESS-256.7z\");\n--- a/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n         List<LZ77Compressor.Block> blocks = compress(newParameters(8), BLA);\n         assertSize(6, blocks);\n         assertLiteralBlock(\"Blah b\", blocks.get(0));\n-        assertEquals(LZ77Compressor.BackReference.class, blocks.get(1).getClass());\n         assertBackReference(5, 7, blocks.get(1));\n         assertBackReference(5, 3, blocks.get(2));\n         assertBackReference(5, 7, blocks.get(3));\n             .withMaxBackReferenceLength(maxBackReferenceLength)\n             .withMaxOffset(maxOffset)\n             .withMaxLiteralLength(maxLiteralLength)\n+            .tunedForCompressionRatio()\n             .build();\n     }\n }\n--- a/src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/snappy/SnappyRoundtripTest.java\n     // should yield decent compression\n     @Test\n     public void blaTarRoundtrip() throws IOException {\n+        System.err.println(\"Configuration: default\");\n         roundTripTest(\"bla.tar\");\n+    }\n+\n+    @Test\n+    public void blaTarRoundtripTunedForSpeed() throws IOException {\n+        System.err.println(\"Configuration: tuned for speed\");\n+        roundTripTest(getFile(\"bla.tar\"),\n+            SnappyCompressorOutputStream.createParameterBuilder(SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE)\n+                .tunedForSpeed()\n+                .build());\n+    }\n+\n+    @Test\n+    public void blaTarRoundtripTunedForCompressionRatio() throws IOException {\n+        System.err.println(\"Configuration: tuned for compression ratio\");\n+        roundTripTest(getFile(\"bla.tar\"),\n+            SnappyCompressorOutputStream.createParameterBuilder(SnappyCompressorInputStream.DEFAULT_BLOCK_SIZE)\n+                .tunedForCompressionRatio()\n+                .build());\n     }\n \n     // yields no compression at all\n         roundTripTest(\"lorem-ipsum.txt.gz\");\n     }\n \n+    // yields no compression at all\n     @Test\n     public void biggerFileRoundtrip() throws IOException {\n         roundTripTest(\"COMPRESS-256.7z\");", "timestamp": 1490543834, "metainfo": ""}