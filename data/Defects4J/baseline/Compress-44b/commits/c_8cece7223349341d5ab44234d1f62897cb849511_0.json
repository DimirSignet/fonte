{"sha": "8cece7223349341d5ab44234d1f62897cb849511", "log": "Test for reading GNU tar archive with file bigger than 8 GiB.  COMPRESS-16  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/BigFilesIT.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.tar;\n+\n+import java.util.Random;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+\n+public class BigFilesIT {\n+\n+    @Test\n+    public void readFileBiggerThan8GByte() throws Exception {\n+        GzipCompressorInputStream in = null;\n+        TarArchiveInputStream tin = null;\n+        try {\n+            in =\n+                new GzipCompressorInputStream(BigFilesIT.class\n+                                              .getResourceAsStream(\"/8.tar.gz\"));\n+            tin = new TarArchiveInputStream(in);\n+            TarArchiveEntry e = tin.getNextTarEntry();\n+            assertNotNull(e);\n+            assertEquals(8200l * 1024 * 1024, e.getSize());\n+\n+            long read = 0;\n+            Random r = new Random(System.currentTimeMillis());\n+            int readNow;\n+            byte[] buf = new byte[1024 * 1024];\n+            while ((readNow = tin.read(buf, 0, buf.length)) > 0) {\n+                // testing all bytes for a value of 0 is going to take\n+                // too long, just pick a few ones randomly\n+                for (int i = 0; i < 100; i++) {\n+                    int idx = r.nextInt(readNow);\n+                    assertEquals(\"testing byte \" + (read + idx), 0, buf[idx]);\n+                }\n+                read += readNow;\n+            }\n+            assertEquals(8200l * 1024 * 1024, read);\n+            assertNull(tin.getNextTarEntry());\n+        } finally {\n+            if (tin != null) {\n+                tin.close();\n+            }\n+            if (in != null) {\n+                in.close();\n+            }\n+        }\n+    }\n+\n+}", "timestamp": 1323085743, "metainfo": ""}