{"sha": "bee261259c7f342b50cafcf7c6cb7da0dd02737b", "log": "reduce code duplication", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/PKWareExtraHeader.java\n  */\n public abstract class PKWareExtraHeader implements ZipExtraField {\n \n+    private final ZipShort headerId;\n+    /**\n+     * Extra field data in local file data - without Header-ID or length\n+     * specifier.\n+     */\n+    private byte[] localData;\n+    /**\n+     * Extra field data in central directory - without Header-ID or length\n+     * specifier.\n+     */\n+    private byte[] centralData;\n+\n+    protected PKWareExtraHeader(ZipShort headerId) {\n+        this.headerId = headerId;\n+    }\n+    \n+    /**\n+     * Get the header id.\n+     *\n+     * @return the header id\n+     */\n+    public ZipShort getHeaderId() {\n+        return headerId;\n+    }\n+\n+    /**\n+     * Set the extra field data in the local file data - without Header-ID or\n+     * length specifier.\n+     *\n+     * @param data\n+     *            the field data to use\n+     */\n+    public void setLocalFileDataData(byte[] data) {\n+        localData = ZipUtil.copy(data);\n+    }\n+\n+    /**\n+     * Get the length of the local data.\n+     *\n+     * @return the length of the local data\n+     */\n+    public ZipShort getLocalFileDataLength() {\n+        return new ZipShort(localData != null ? localData.length : 0);\n+    }\n+\n+    /**\n+     * Get the local data.\n+     *\n+     * @return the local data\n+     */\n+    public byte[] getLocalFileDataData() {\n+        return ZipUtil.copy(localData);\n+    }\n+\n+    /**\n+     * Set the extra field data in central directory.\n+     *\n+     * @param data\n+     *            the data to use\n+     */\n+    public void setCentralDirectoryData(byte[] data) {\n+        centralData = ZipUtil.copy(data);\n+    }\n+\n+    /**\n+     * Get the central data length. If there is no central data, get the local\n+     * file data length.\n+     *\n+     * @return the central data length\n+     */\n+    public ZipShort getCentralDirectoryLength() {\n+        if (centralData != null) {\n+            return new ZipShort(centralData.length);\n+        }\n+        return getLocalFileDataLength();\n+    }\n+\n+    /**\n+     * Get the central data.\n+     *\n+     * @return the central data if present, else return the local file data\n+     */\n+    public byte[] getCentralDirectoryData() {\n+        if (centralData != null) {\n+            return ZipUtil.copy(centralData);\n+        }\n+        return getLocalFileDataData();\n+    }\n+\n+    /**\n+     * @param data\n+     *            the array of bytes.\n+     * @param offset\n+     *            the source location in the data array.\n+     * @param length\n+     *            the number of bytes to use in the data array.\n+     * @see ZipExtraField#parseFromLocalFileData(byte[], int, int)\n+     */\n+    public void parseFromLocalFileData(byte[] data, int offset, int length) {\n+        byte[] tmp = new byte[length];\n+        System.arraycopy(data, offset, tmp, 0, length);\n+        setLocalFileDataData(tmp);\n+    }\n+\n+    /**\n+     * @param data\n+     *            the array of bytes.\n+     * @param offset\n+     *            the source location in the data array.\n+     * @param length\n+     *            the number of bytes to use in the data array.\n+     * @see ZipExtraField#parseFromCentralDirectoryData(byte[], int, int)\n+     */\n+    public void parseFromCentralDirectoryData(byte[] data, int offset, int length) {\n+        byte[] tmp = new byte[length];\n+        System.arraycopy(data, offset, tmp, 0, length);\n+        setCentralDirectoryData(tmp);\n+        if (localData == null) {\n+            setLocalFileDataData(tmp);\n+        }\n+    }\n+    \n     /**\n      * Encryption algorithm.\n      *\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X0014_X509Certificates.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X0014_X509Certificates.java\n  * @since 1.11\n  */\n public class X0014_X509Certificates extends PKWareExtraHeader implements ZipExtraField {\n-    private static final ZipShort HEADER_ID = new ZipShort(0x0014);\n     private static final long serialVersionUID = 1L;\n \n-    /**\n-     * Get the header id.\n-     *\n-     * @return the header id\n-     */\n-    public ZipShort getHeaderId() {\n-        return HEADER_ID;\n+    public X0014_X509Certificates() {\n+        super(new ZipShort(0x0014));\n     }\n \n-    /**\n-     * Extra field data in local file data - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] localData;\n-\n-    /**\n-     * Set the extra field data in the local file data - without Header-ID or\n-     * length specifier.\n-     *\n-     * @param data\n-     *            the field data to use\n-     */\n-    public void setLocalFileDataData(byte[] data) {\n-        localData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the length of the local data.\n-     *\n-     * @return the length of the local data\n-     */\n-    public ZipShort getLocalFileDataLength() {\n-        return new ZipShort(localData != null ? localData.length : 0);\n-    }\n-\n-    /**\n-     * Get the local data.\n-     *\n-     * @return the local data\n-     */\n-    public byte[] getLocalFileDataData() {\n-        return ZipUtil.copy(localData);\n-    }\n-\n-    /**\n-     * Extra field data in central directory - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] centralData;\n-\n-    /**\n-     * Set the extra field data in central directory.\n-     *\n-     * @param data\n-     *            the data to use\n-     */\n-    public void setCentralDirectoryData(byte[] data) {\n-        centralData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the central data length. If there is no central data, get the local\n-     * file data length.\n-     *\n-     * @return the central data length\n-     */\n-    public ZipShort getCentralDirectoryLength() {\n-        if (centralData != null) {\n-            return new ZipShort(centralData.length);\n-        }\n-        return getLocalFileDataLength();\n-    }\n-\n-    /**\n-     * Get the central data.\n-     *\n-     * @return the central data if present, else return the local file data\n-     */\n-    public byte[] getCentralDirectoryData() {\n-        if (centralData != null) {\n-            return ZipUtil.copy(centralData);\n-        }\n-        return getLocalFileDataData();\n-    }\n-\n-    /**\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromLocalFileData(byte[], int, int)\n-     */\n-    public void parseFromLocalFileData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n-        setLocalFileDataData(tmp);\n-    }\n-\n-    /**\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromCentralDirectoryData(byte[], int, int)\n-     */\n-    public void parseFromCentralDirectoryData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n-        setCentralDirectoryData(tmp);\n-        if (localData == null) {\n-            setLocalFileDataData(tmp);\n-        }\n-    }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X0015_CertificateIdForFile.java\n  * @since 1.11\n  */\n public class X0015_CertificateIdForFile extends PKWareExtraHeader implements ZipExtraField {\n-    private static final ZipShort HEADER_ID = new ZipShort(0x0015);\n     private static final long serialVersionUID = 1L;\n \n-    /**\n-     * Get the header id.\n-     *\n-     * @return the header id\n-     */\n-    public ZipShort getHeaderId() {\n-        return HEADER_ID;\n+    public X0015_CertificateIdForFile() {\n+        super(new ZipShort(0x0015));\n     }\n-\n-    /**\n-     * Extra field data in local file data - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] localData;\n \n     private int rcount;\n     private HashAlgorithm hashAlg;\n         return hashAlg;\n     }\n \n-    /**\n-     * Set the extra field data in the local file data - without Header-ID or\n-     * length specifier.\n-     *\n-     * @param data\n-     *            the field data to use\n-     */\n-    public void setLocalFileDataData(byte[] data) {\n-        localData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the length of the local data.\n-     *\n-     * @return the length of the local data\n-     */\n-    public ZipShort getLocalFileDataLength() {\n-        return new ZipShort(localData != null ? localData.length : 0);\n-    }\n-\n-    /**\n-     * Get the local data.\n-     *\n-     * @return the local data\n-     */\n-    public byte[] getLocalFileDataData() {\n-        return ZipUtil.copy(localData);\n-    }\n-\n-    /**\n-     * Extra field data in central directory - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] centralData;\n-\n-    /**\n-     * Set the extra field data in central directory.\n-     *\n-     * @param data\n-     *            the data to use\n-     */\n-    public void setCentralDirectoryData(byte[] data) {\n-        centralData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the central data length. If there is no central data, get the local\n-     * file data length.\n-     *\n-     * @return the central data length\n-     */\n-    public ZipShort getCentralDirectoryLength() {\n-        if (centralData != null) {\n-            return new ZipShort(centralData.length);\n-        }\n-        return getLocalFileDataLength();\n-    }\n-\n-    /**\n-     * Get the central data.\n-     *\n-     * @return the central data if present, else return the local file data\n-     */\n-    public byte[] getCentralDirectoryData() {\n-        if (centralData != null) {\n-            return ZipUtil.copy(centralData);\n-        }\n-        return getLocalFileDataData();\n-    }\n-\n-    /**\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromLocalFileData(byte[], int, int)\n-     */\n-    public void parseFromLocalFileData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n-        setLocalFileDataData(tmp);\n-    }\n-\n-    /**\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromCentralDirectoryData(byte[], int, int)\n-     */\n+    @Override\n     public void parseFromCentralDirectoryData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n-        setCentralDirectoryData(tmp);\n-        if (localData == null) {\n-            setLocalFileDataData(tmp);\n-        }\n-\n+        super.parseFromCentralDirectoryData(data, offset, length);\n         this.rcount = ZipShort.getValue(data, offset);\n         this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X0016_CertificateIdForCentralDirectory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X0016_CertificateIdForCentralDirectory.java\n  * @since 1.11\n  */\n public class X0016_CertificateIdForCentralDirectory extends PKWareExtraHeader implements ZipExtraField {\n-    private static final ZipShort HEADER_ID = new ZipShort(0x0016);\n     private static final long serialVersionUID = 1L;\n \n-    /**\n-     * Get the header id.\n-     *\n-     * @return the header id\n-     */\n-    public ZipShort getHeaderId() {\n-        return HEADER_ID;\n+    public X0016_CertificateIdForCentralDirectory() {\n+        super(new ZipShort(0x0016));\n     }\n-\n-    /**\n-     * Extra field data in local file data - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] localData;\n \n     private int rcount;\n     private HashAlgorithm hashAlg;\n         return hashAlg;\n     }\n \n-    /**\n-     * Set the extra field data in the local file data - without Header-ID or\n-     * length specifier.\n-     *\n-     * @param data\n-     *            the field data to use\n-     */\n-    public void setLocalFileDataData(byte[] data) {\n-        localData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the length of the local data.\n-     *\n-     * @return the length of the local data\n-     */\n-    public ZipShort getLocalFileDataLength() {\n-        return new ZipShort(localData != null ? localData.length : 0);\n-    }\n-\n-    /**\n-     * Get the local data.\n-     *\n-     * @return the local data\n-     */\n-    public byte[] getLocalFileDataData() {\n-        return ZipUtil.copy(localData);\n-    }\n-\n-    /**\n-     * Extra field data in central directory - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] centralData;\n-\n-    /**\n-     * Set the extra field data in central directory.\n-     *\n-     * @param data\n-     *            the data to use\n-     */\n-    public void setCentralDirectoryData(byte[] data) {\n-        centralData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the central data length. If there is no central data, get the local\n-     * file data length.\n-     *\n-     * @return the central data length\n-     */\n-    public ZipShort getCentralDirectoryLength() {\n-        if (centralData != null) {\n-            return new ZipShort(centralData.length);\n-        }\n-        return getLocalFileDataLength();\n-    }\n-\n-    /**\n-     * Get the central data.\n-     *\n-     * @return the central data if present, else return the local file data\n-     */\n-    public byte[] getCentralDirectoryData() {\n-        if (centralData != null) {\n-            return ZipUtil.copy(centralData);\n-        }\n-        return getLocalFileDataData();\n-    }\n-\n-    /**\n-     * This should never be called for this header type.\n-     *\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromLocalFileData(byte[], int, int)\n-     */\n-    public void parseFromLocalFileData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n-        setLocalFileDataData(tmp);\n-    }\n-\n-    /**\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromCentralDirectoryData(byte[], int, int)\n-     */\n+    @Override\n     public void parseFromCentralDirectoryData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n-        setCentralDirectoryData(tmp);\n-\n         this.rcount = ZipShort.getValue(data, offset);\n         this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java\n  * @since 1.11\n  */\n public class X0017_StrongEncryptionHeader extends PKWareExtraHeader implements ZipExtraField {\n-    private static final ZipShort HEADER_ID = new ZipShort(0x0017);\n     private static final long serialVersionUID = 1L;\n \n-    /**\n-     * Get the header id.\n-     *\n-     * @return the header id\n-     */\n-    public ZipShort getHeaderId() {\n-        return HEADER_ID;\n-    }\n-\n-    /**\n-     * Extra field data in local file data - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] localData;\n+    public X0017_StrongEncryptionHeader() {\n+        super(new ZipShort(0x0017));\n+    }\n \n     private int format;\n     private EncryptionAlgorithm algId;\n      */\n     public EncryptionAlgorithm getEncryptionAlgorithm() {\n         return algId;\n-    }\n-\n-    /**\n-     * Set the extra field data in the local file data - without Header-ID or\n-     * length specifier.\n-     *\n-     * @param data\n-     *            the field data to use\n-     */\n-    public void setLocalFileDataData(byte[] data) {\n-        localData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the length of the local data.\n-     *\n-     * @return the length of the local data\n-     */\n-    public ZipShort getLocalFileDataLength() {\n-        return new ZipShort(localData != null ? localData.length : 0);\n-    }\n-\n-    /**\n-     * Get the local data.\n-     *\n-     * @return the local data\n-     */\n-    public byte[] getLocalFileDataData() {\n-        return ZipUtil.copy(localData);\n-    }\n-\n-    /**\n-     * Extra field data in central directory - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] centralData;\n-\n-    /**\n-     * Set the extra field data in central directory.\n-     *\n-     * @param data\n-     *            the data to use\n-     */\n-    public void setCentralDirectoryData(byte[] data) {\n-        centralData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the central data length. If there is no central data, get the local\n-     * file data length.\n-     *\n-     * @return the central data length\n-     */\n-    public ZipShort getCentralDirectoryLength() {\n-        if (centralData != null) {\n-            return new ZipShort(centralData.length);\n-        }\n-        return getLocalFileDataLength();\n-    }\n-\n-    /**\n-     * Get the central data.\n-     *\n-     * @return the central data if present, else return the local file data\n-     */\n-    public byte[] getCentralDirectoryData() {\n-        if (centralData != null) {\n-            return ZipUtil.copy(centralData);\n-        }\n-        return getLocalFileDataData();\n     }\n \n     /**\n         // validate values?\n     }\n \n-    /**\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromLocalFileData(byte[], int, int)\n-     */\n+    @Override\n     public void parseFromLocalFileData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n+        super.parseFromLocalFileData(data, offset, length);\n         parseFileFormat(data, offset, length);\n     }\n \n-    /**\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromCentralDirectoryData(byte[], int, int)\n-     */\n+    @Override\n     public void parseFromCentralDirectoryData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n-        setCentralDirectoryData(tmp);\n+        super.parseFromCentralDirectoryData(data, offset, length);\n         parseCentralDirectoryFormat(data, offset, length);\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/X0019_EncryptionRecipientCertificateList.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/X0019_EncryptionRecipientCertificateList.java\n  * @since 1.11\n  */\n public class X0019_EncryptionRecipientCertificateList extends PKWareExtraHeader implements ZipExtraField {\n-    private static final ZipShort HEADER_ID = new ZipShort(0x0019);\n     private static final long serialVersionUID = 1L;\n \n-    /**\n-     * Get the header id.\n-     *\n-     * @return the header id\n-     */\n-    public ZipShort getHeaderId() {\n-        return HEADER_ID;\n+    public X0019_EncryptionRecipientCertificateList() {\n+        super(new ZipShort(0x0019));\n     }\n \n-    /**\n-     * Extra field data in local file data - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] localData;\n-\n-    /**\n-     * Set the extra field data in the local file data - without Header-ID or\n-     * length specifier.\n-     *\n-     * @param data\n-     *            the field data to use\n-     */\n-    public void setLocalFileDataData(byte[] data) {\n-        localData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the length of the local data.\n-     *\n-     * @return the length of the local data\n-     */\n-    public ZipShort getLocalFileDataLength() {\n-        return new ZipShort(localData != null ? localData.length : 0);\n-    }\n-\n-    /**\n-     * Get the local data.\n-     *\n-     * @return the local data\n-     */\n-    public byte[] getLocalFileDataData() {\n-        return ZipUtil.copy(localData);\n-    }\n-\n-    /**\n-     * Extra field data in central directory - without Header-ID or length\n-     * specifier.\n-     */\n-    private byte[] centralData;\n-\n-    /**\n-     * Set the extra field data in central directory.\n-     *\n-     * @param data\n-     *            the data to use\n-     */\n-    public void setCentralDirectoryData(byte[] data) {\n-        centralData = ZipUtil.copy(data);\n-    }\n-\n-    /**\n-     * Get the central data length. If there is no central data, get the local\n-     * file data length.\n-     *\n-     * @return the central data length\n-     */\n-    public ZipShort getCentralDirectoryLength() {\n-        if (centralData != null) {\n-            return new ZipShort(centralData.length);\n-        }\n-        return getLocalFileDataLength();\n-    }\n-\n-    /**\n-     * Get the central data.\n-     *\n-     * @return the central data if present, else return the local file data\n-     */\n-    public byte[] getCentralDirectoryData() {\n-        if (centralData != null) {\n-            return ZipUtil.copy(centralData);\n-        }\n-        return getLocalFileDataData();\n-    }\n-\n-    /**\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromLocalFileData(byte[], int, int)\n-     */\n-    public void parseFromLocalFileData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n-        setLocalFileDataData(tmp);\n-    }\n-\n-    /**\n-     * @param data\n-     *            the array of bytes.\n-     * @param offset\n-     *            the source location in the data array.\n-     * @param length\n-     *            the number of bytes to use in the data array.\n-     * @see ZipExtraField#parseFromCentralDirectoryData(byte[], int, int)\n-     */\n-    public void parseFromCentralDirectoryData(byte[] data, int offset, int length) {\n-        byte[] tmp = new byte[length];\n-        System.arraycopy(data, offset, tmp, 0, length);\n-        setCentralDirectoryData(tmp);\n-        if (localData == null) {\n-            setLocalFileDataData(tmp);\n-        }\n-    }\n }", "timestamp": 1458920020, "metainfo": ""}