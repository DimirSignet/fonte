{"sha": "e7517b8d5d43910f4317a64f549d58b2db21a64c", "log": "Applied COMPRESS-95 from Joerg Bellmann: Improve ExceptionMessages in ArchiveStreamFactory  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n     public ArchiveInputStream createArchiveInputStream(\n             final String archiverName, final InputStream in)\n             throws ArchiveException {\n-        if (archiverName == null || in == null) {\n+        if (archiverName == null) {\n             throw new IllegalArgumentException(\"Archivername must not be null.\");\n+        }\n+        if (in == null) {\n+        \tthrow new IllegalArgumentException(\"InputStream must not be null.\");\n         }\n \n         if (\"ar\".equalsIgnoreCase(archiverName)) {\n     public ArchiveOutputStream createArchiveOutputStream(\n             final String archiverName, final OutputStream out)\n             throws ArchiveException {\n-        if (archiverName == null || out == null) {\n-            throw new IllegalArgumentException(\n-                    \"Archivername and stream must not be null.\");\n+        if (archiverName == null) {\n+            throw new IllegalArgumentException(\"Archivername must not be null.\");\n+        }\n+        if (out == null) {\n+        \tthrow new IllegalArgumentException(\"OutputStream must not be null.\");\n         }\n \n         if (\"ar\".equalsIgnoreCase(archiverName)) {\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java\n+package org.apache.commons.compress.archivers;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+public class ExceptionMessageTest extends TestCase {\n+\t\n+\tprivate static final String ARCHIVER_NULL_MESSAGE = \"Archivername must not be null.\";\n+\t\n+\tprivate static final String INPUTSTREAM_NULL_MESSAGE = \"InputStream must not be null.\";\n+\t\n+\tprivate static final String OUTPUTSTREAM_NULL_MESSAGE = \"OutputStream must not be null.\";\n+\t\n+\t\n+\t\n+\tpublic void testMessageWhenArchiverNameIsNull_1(){\n+\t\ttry{\n+\t\t\tnew ArchiveStreamFactory().createArchiveInputStream(null, System.in);\n+\t\t\tfail(\"Should raise an IllegalArgumentException.\");\n+\t\t}catch (IllegalArgumentException e) {\n+\t\t\tAssert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n+\t\t} catch (ArchiveException e) {\n+\t\t\tfail(\"ArchiveException not expected\");\n+\t\t}\n+\t}\n+\t\n+\tpublic void testMessageWhenInputStreamIsNull(){\n+\t\ttry{\n+\t\t\tnew ArchiveStreamFactory().createArchiveInputStream(\"zip\", null);\n+\t\t\tfail(\"Should raise an IllegalArgumentException.\");\n+\t\t}catch (IllegalArgumentException e) {\n+\t\t\tAssert.assertEquals(INPUTSTREAM_NULL_MESSAGE, e.getMessage());\n+\t\t} catch (ArchiveException e) {\n+\t\t\tfail(\"ArchiveException not expected\");\n+\t\t}\n+\t}\n+\t\n+\tpublic void testMessageWhenArchiverNameIsNull_2(){\n+\t\ttry{\n+\t\t\tnew ArchiveStreamFactory().createArchiveOutputStream(null, System.out);\n+\t\t\tfail(\"Should raise an IllegalArgumentException.\");\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tAssert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n+\t\t} catch (ArchiveException e){\n+\t\t\tfail(\"ArchiveException not expected\");\n+\t\t}\n+\t}\n+\t\n+\tpublic void testMessageWhenOutputStreamIsNull(){\n+\t\ttry{\n+\t\t\tnew ArchiveStreamFactory().createArchiveOutputStream(\"zip\", null);\n+\t\t\tfail(\"Should raise an IllegalArgumentException.\");\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tAssert.assertEquals(OUTPUTSTREAM_NULL_MESSAGE, e.getMessage());\n+\t\t} catch (ArchiveException e) {\n+\t\t\tfail(\"ArchiveException not expected\");\n+\t\t}\n+\t}\n+\t\n+\t\n+\n+}", "timestamp": 1264751241, "metainfo": ""}