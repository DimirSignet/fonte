{"sha": "066ee4cd338aa7a168fe372efc33ee7070b9c962", "log": "suppress warnings on \"impossible\" exceptions and exceptions mandated by the public API", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n                 writeEntryHeader(outbuf, TarUtils.FALLBACK_ENCODING, false);\n             } catch (final IOException ex2) {\n                 // impossible\n-                throw new RuntimeException(ex2);\n+                throw new RuntimeException(ex2); //NOSONAR\n             }\n         }\n     }\n                 parseTarHeader(header, TarUtils.DEFAULT_ENCODING, true);\n             } catch (final IOException ex2) {\n                 // not really possible\n-                throw new RuntimeException(ex2);\n+                throw new RuntimeException(ex2); //NOSONAR\n             }\n         }\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n         if (value < 0 || value > maxValue) {\n             throw new RuntimeException(field + \" '\" + value\n                     + \"' is too big ( > \"\n-                    + maxValue + \" ).\" + additionalMsg);\n+                    + maxValue + \" ).\" + additionalMsg); //NOSONAR\n         }\n     }\n \n             } else if (longFileMode != LONGFILE_TRUNCATE) {\n                 throw new RuntimeException(fieldName + \" '\" + name\n                                            + \"' is too long ( > \"\n-                                           + TarConstants.NAMELEN + \" bytes)\");\n+                                           + TarConstants.NAMELEN + \" bytes)\"); //NOSONAR\n             }\n         }\n         return false;\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n                 return parseName(buffer, offset, length, FALLBACK_ENCODING);\n             } catch (final IOException ex2) {\n                 // impossible\n-                throw new RuntimeException(ex2);\n+                throw new RuntimeException(ex2); //NOSONAR\n             }\n         }\n     }\n                                        FALLBACK_ENCODING);\n             } catch (final IOException ex2) {\n                 // impossible\n-                throw new RuntimeException(ex2);\n+                throw new RuntimeException(ex2); //NOSONAR\n             }\n         }\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n         try {\n             unicodeName = text.getBytes(CharsetNames.UTF_8);\n         } catch (final UnsupportedEncodingException e) {\n-            throw new RuntimeException(\"FATAL: UTF-8 encoding not supported.\", e);\n+            throw new RuntimeException(\"FATAL: UTF-8 encoding not supported.\", e); //NOSONAR\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n             return cloned;\n         } catch (final CloneNotSupportedException cnfe) {\n             // impossible\n-            throw new RuntimeException(cnfe);\n+            throw new RuntimeException(cnfe); //NOSONAR\n         }\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n             final ZipExtraField ze = (ZipExtraField) c.newInstance();\n             implementations.put(ze.getHeaderId(), c);\n         } catch (final ClassCastException cc) {\n-            throw new RuntimeException(c + \" doesn\\'t implement ZipExtraField\");\n+            throw new RuntimeException(c + \" doesn\\'t implement ZipExtraField\"); //NOSONAR\n         } catch (final InstantiationException ie) {\n-            throw new RuntimeException(c + \" is not a concrete class\");\n+            throw new RuntimeException(c + \" is not a concrete class\"); //NOSONAR\n         } catch (final IllegalAccessException ie) {\n-            throw new RuntimeException(c + \"\\'s no-arg constructor is not public\");\n+            throw new RuntimeException(c + \"\\'s no-arg constructor is not public\"); //NOSONAR\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBit.java\n             return super.clone();\n         } catch (final CloneNotSupportedException ex) {\n             // impossible\n-            throw new RuntimeException(\"GeneralPurposeBit is not Cloneable?\", ex);\n+            throw new RuntimeException(\"GeneralPurposeBit is not Cloneable?\", ex); //NOSONAR\n         }\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n                 streams.add(scatterStream);\n                 return scatterStream;\n             } catch (final IOException e) {\n-                throw new RuntimeException(e);\n+                throw new RuntimeException(e); //NOSONAR\n             }\n         }\n     };\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n         } catch (final ZipException e) {\n             // actually this is not possible as of Commons Compress 1.1\n             throw new RuntimeException(\"Error parsing extra fields for entry: \"\n-                                       + getName() + \" - \" + e.getMessage(), e);\n+                                       + getName() + \" - \" + e.getMessage(), e); //NOSONAR\n         }\n     }\n \n                                       ExtraFieldUtils.UnparseableExtraField.READ);\n             mergeExtraFields(central, false);\n         } catch (final ZipException e) {\n-            throw new RuntimeException(e.getMessage(), e);\n+            throw new RuntimeException(e.getMessage(), e); //NOSONAR\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipLong.java\n             return super.clone();\n         } catch (final CloneNotSupportedException cnfe) {\n             // impossible\n-            throw new RuntimeException(cnfe);\n+            throw new RuntimeException(cnfe); //NOSONAR\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n             return super.clone();\n         } catch (final CloneNotSupportedException cnfe) {\n             // impossible\n-            throw new RuntimeException(cnfe);\n+            throw new RuntimeException(cnfe); //NOSONAR\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java\n         try {\n             streamBridge.getInput().mark(limit);\n         } catch (final IOException ex) {\n-            throw new RuntimeException(ex);\n+            throw new RuntimeException(ex); //NOSONAR\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n         try {\n             buffer1 = expected.getBytes(CharsetNames.US_ASCII);\n         } catch (final UnsupportedEncodingException e) {\n-            throw new RuntimeException(e); // Should not happen\n+            // Should not happen\n+            throw new RuntimeException(e); //NOSONAR\n         }\n         return isEqual(buffer1, 0, buffer1.length, buffer, offset, length, false);\n     }\n         try {\n             return inputString.getBytes(CharsetNames.US_ASCII);\n         } catch (final UnsupportedEncodingException e) {\n-           throw new RuntimeException(e); // Should never happen\n+            // Should never happen\n+            throw new RuntimeException(e); //NOSONAR\n         }\n     }\n \n         try {\n             return new String(inputBytes, CharsetNames.US_ASCII);\n         } catch (final UnsupportedEncodingException e) {\n-            throw new RuntimeException(e); // Should never happen\n+            // Should never happen\n+            throw new RuntimeException(e); //NOSONAR\n         }\n     }\n \n         try {\n             return new String(inputBytes, offset, length, CharsetNames.US_ASCII);\n         } catch (final UnsupportedEncodingException e) {\n-            throw new RuntimeException(e); // Should never happen\n+            // Should never happen\n+            throw new RuntimeException(e); //NOSONAR\n         }\n     }\n ", "timestamp": 1482170426, "metainfo": ""}