{"sha": "d4baeb15bae488bb7cf534457a9ef65922cb3564", "log": "COMPRESS-223 fix NPE in TarBuffer.tryToConsumeSecondEOFRecord - patch by Jeremy Gustie  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n \n         byte[] headerBuf = buffer.readRecord();\n \n-        if (headerBuf == null) {\n+        if (buffer.isEOFRecord(headerBuf)) {\n             hasHitEOF = true;\n-        } else if (buffer.isEOFRecord(headerBuf)) {\n-            hasHitEOF = true;\n-            buffer.tryToConsumeSecondEOFRecord();\n+            if (headerBuf != null) {\n+                buffer.tryToConsumeSecondEOFRecord();\n+            }\n         }\n \n         return hasHitEOF ? null : headerBuf;\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarBuffer.java\n      * @return true if the record data is an End of Archive\n      */\n     public boolean isEOFRecord(byte[] record) {\n-        for (int i = 0, sz = getRecordSize(); i < sz; ++i) {\n-            if (record[i] != 0) {\n-                return false;\n-            }\n-        }\n-\n+        if (record != null) {\n+            for (int i = 0, sz = getRecordSize(); i < sz; ++i) {\n+                if (record[i] != 0) {\n+                    return false;\n+                }\n+            }\n+        }\n         return true;\n     }\n \n     /**\n      * Read a record from the input stream and return the data.\n      *\n-     * @return The record data.\n+     * @return The record data or null if EOF has been hit.\n      * @throws IOException on error\n      */\n     public byte[] readRecord() throws IOException {\n     }\n \n     /**\n-     * Tries to read the next record rewinding the stream if if is not a EOF record.\n+     * Tries to read the next record rewinding the stream if it is not a EOF record.\n      *\n      * <p>This is meant to protect against cases where a tar\n      * implemenation has written only one EOF record when two are\n      * expected.  Actually this won't help since a non-conforming\n-     * implementation likely won't fill full blocks consisting of - be\n+     * implementation likely won't fill full blocks consisting of - by\n      * default - ten records either so we probably have already read\n      * beyond the archive anyway.</p>\n      */", "timestamp": 1366896969, "metainfo": ""}