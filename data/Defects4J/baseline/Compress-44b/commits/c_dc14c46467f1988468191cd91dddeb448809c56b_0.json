{"sha": "dc14c46467f1988468191cd91dddeb448809c56b", "log": "Create list of files in archive Cache ArchiveStreamFactory Tidy resultdir even if test fails Add method to create empty archive file  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n \n     protected File dir;\n     protected File resultDir;\n \n-    private File archive;\n+    private File archive; // used to delete the archive in tearDown\n+    protected List archiveList; // Lists the content of the archive as originally created\n+    \n+    private ArchiveStreamFactory factory = new ArchiveStreamFactory();\n \n     protected void setUp() throws Exception {\n         dir = mkdir(\"dir\");\n     }\n \n     /**\n-     * Creates an archive of 5 textbased files in several directories. The\n+     * Creates an archive of textbased files in several directories. The\n      * archivername is the factory identifier for the archiver, for example zip,\n      * tar, cpio, jar, ar. The archive is created as a temp file.\n      * \n      * <li>testdata/test2.xml</li>\n      * <li>test/test3.xml</li>\n      * <li>bla/test4.xml</li>\n+     * <li>bla/test5.xml</li>\n+     * <li>bla/blubber/test6.xml</li>\n      * <li>test.txt</li>\n      * <li>something/bla</li>\n      * <li>test with spaces.txt</li>\n         OutputStream stream = null;\n         try {\n             archive = File.createTempFile(\"test\", \".\" + archivename);\n+            archiveList = new ArrayList();\n \n             stream = new FileOutputStream(archive);\n-            out = new ArchiveStreamFactory().createArchiveOutputStream(\n-                    archivename, stream);\n+            out = factory.createArchiveOutputStream(archivename, stream);\n \n             final File file1 = getFile(\"test1.xml\");\n             final File file2 = getFile(\"test2.xml\");\n             final File file5 = getFile(\"test.txt\");\n             final File file6 = getFile(\"test with spaces.txt\");\n \n-            ZipArchiveEntry entry = new ZipArchiveEntry(\"testdata/test1.xml\");\n-            entry.setSize(file1.length());\n-            out.putArchiveEntry(entry);\n-            IOUtils.copy(new FileInputStream(file1), out);\n-            out.closeArchiveEntry();\n-\n-            entry = new ZipArchiveEntry(\"testdata/test2.xml\");\n-            entry.setSize(file2.length());\n-            out.putArchiveEntry(entry);\n-            IOUtils.copy(new FileInputStream(file2), out);\n-            out.closeArchiveEntry();\n-\n-            entry = new ZipArchiveEntry(\"test/test3.xml\");\n-            entry.setSize(file3.length());\n-            out.putArchiveEntry(entry);\n-            IOUtils.copy(new FileInputStream(file3), out);\n-            out.closeArchiveEntry();\n-\n-            entry = new ZipArchiveEntry(\"bla/test4.xml\");\n-            entry.setSize(file4.length());\n-            out.putArchiveEntry(entry);\n-            IOUtils.copy(new FileInputStream(file4), out);\n-            out.closeArchiveEntry();\n-\n-            entry = new ZipArchiveEntry(\"bla/test5.xml\");\n-            entry.setSize(file4.length());\n-            out.putArchiveEntry(entry);\n-            IOUtils.copy(new FileInputStream(file4), out);\n-            out.closeArchiveEntry();\n-\n-            entry = new ZipArchiveEntry(\"bla/blubber/test6.xml\");\n-            entry.setSize(file4.length());\n-            out.putArchiveEntry(entry);\n-            IOUtils.copy(new FileInputStream(file4), out);\n-            out.closeArchiveEntry();\n-\n-            entry = new ZipArchiveEntry(\"test.txt\");\n-            entry.setSize(file5.length());\n-            out.putArchiveEntry(entry);\n-            IOUtils.copy(new FileInputStream(file5), out);\n-            out.closeArchiveEntry();\n-\n-            entry = new ZipArchiveEntry(\"something/bla\");\n-            entry.setSize(file6.length());\n-            out.putArchiveEntry(entry);\n-            IOUtils.copy(new FileInputStream(file6), out);\n-            out.closeArchiveEntry();\n-\n-            entry = new ZipArchiveEntry(\"test with spaces.txt\");\n-            entry.setSize(file6.length());\n-            out.putArchiveEntry(entry);\n-            IOUtils.copy(new FileInputStream(file6), out);\n-            out.closeArchiveEntry();\n+            addArchiveEntry(out, \"testdata/test1.xml\", file1);\n+            addArchiveEntry(out, \"testdata/test2.xml\", file2);\n+            addArchiveEntry(out, \"test/test3.xml\", file3);\n+            addArchiveEntry(out, \"bla/test4.xml\", file4);\n+            addArchiveEntry(out, \"bla/test5.xml\", file4);\n+            addArchiveEntry(out, \"bla/blubber/test6.xml\", file4);\n+            addArchiveEntry(out, \"test.txt\", file5);\n+            addArchiveEntry(out, \"something/bla\", file6);\n+            addArchiveEntry(out, \"test with spaces.txt\", file6);\n \n             return archive;\n         } finally {\n                 stream.close();\n             }\n         }\n+    }\n+\n+    /**\n+     * Add an entry to the archive, and keep track of the names in archiveList.\n+     * \n+     * @param out\n+     * @param file1\n+     * @throws IOException\n+     * @throws FileNotFoundException\n+     */\n+    private void addArchiveEntry(ArchiveOutputStream out, String filename, final File infile)\n+            throws IOException, FileNotFoundException {\n+        ZipArchiveEntry entry = new ZipArchiveEntry(filename);\n+        entry.setSize(infile.length());\n+        out.putArchiveEntry(entry);\n+        IOUtils.copy(new FileInputStream(infile), out);\n+        out.closeArchiveEntry();\n+        archiveList.add(filename);\n+    }\n+\n+    /**\n+     * Create an empty archive.\n+     * @param archivename\n+     * @return the archive File\n+     * @throws Exception\n+     */\n+    protected File createEmptyArchive(String archivename) throws Exception {\n+        ArchiveOutputStream out = null;\n+        OutputStream stream = null;\n+        try {\n+            archive = File.createTempFile(\"empty\", \".\" + archivename);\n+            stream = new FileOutputStream(archive);\n+            out = factory.createArchiveOutputStream(archivename, stream);\n+        } finally {\n+            if (out != null) {\n+                out.close();\n+            } else if (stream != null) {\n+                stream.close();\n+            }\n+        }\n+        return archive;\n     }\n \n     /**\n         final InputStream is = new FileInputStream(archive);\n         try {\n             final BufferedInputStream buf = new BufferedInputStream(is);\n-            final ArchiveInputStream in = new ArchiveStreamFactory()\n-                .createArchiveInputStream(buf);\n+            final ArchiveInputStream in = factory.createArchiveInputStream(buf);\n             this.checkArchiveContent(in, expected);\n         } finally {\n             is.close();\n         result.delete();\n         result.mkdir();\n \n-        ArchiveEntry entry = null;\n-        while ((entry = in.getNextEntry()) != null) {\n-            File outfile = new File(result.getCanonicalPath() + \"/result/\"\n-                    + entry.getName());\n-            outfile.getParentFile().mkdirs();\n-            OutputStream out = new FileOutputStream(outfile);\n-            long copied=0;\n-            try {\n-                copied=IOUtils.copy(in, out);\n-            } finally {\n-                out.close();\n-            }\n-\n-            if (entry.getSize() != -1) {// some test cases don't set the size\n-                assertEquals(entry.getSize(), copied);\n-            }\n-\n-            if (!outfile.exists()) {\n-                fail(\"extraction failed: \" + entry.getName());\n-            }\n-            if (!expected.remove(entry.getName())) {\n-                fail(\"unexpected entry: \" + entry.getName());\n-            }\n-        }\n-        in.close();\n-        if (expected.size() > 0) {\n-            for (Iterator iterator = expected.iterator(); iterator.hasNext();) {\n-                String name = (String) iterator.next();\n-                fail(\"Expected entry: \" + name);\n-            }\n-        }\n-        assertEquals(0, expected.size());\n-        rmdir(result);\n+        try {\n+            ArchiveEntry entry = null;\n+            while ((entry = in.getNextEntry()) != null) {\n+                File outfile = new File(result.getCanonicalPath() + \"/result/\"\n+                        + entry.getName());\n+                outfile.getParentFile().mkdirs();\n+                OutputStream out = new FileOutputStream(outfile);\n+                long copied=0;\n+                try {\n+                    copied=IOUtils.copy(in, out);\n+                } finally {\n+                    out.close();\n+                }\n+\n+                if (entry.getSize() != -1) {// some test cases don't set the size\n+                    assertEquals(entry.getSize(), copied);\n+                }\n+\n+                if (!outfile.exists()) {\n+                    fail(\"extraction failed: \" + entry.getName());\n+                }\n+                if (!expected.remove(entry.getName())) {\n+                    fail(\"unexpected entry: \" + entry.getName());\n+                }\n+            }\n+            in.close();\n+            if (expected.size() > 0) {\n+                for (Iterator iterator = expected.iterator(); iterator.hasNext();) {\n+                    String name = (String) iterator.next();\n+                    fail(\"Expected entry: \" + name);\n+                }\n+            }\n+            assertEquals(0, expected.size());\n+        } finally {\n+            rmdir(result);\n+        }\n     }\n }", "timestamp": 1238365100, "metainfo": ""}