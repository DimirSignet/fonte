{"sha": "9f468f199b2309c15efca530357d5222359d51e1", "log": "[COMPRESS-362] Bullet-proof code using try-with-resources statements", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n         if (basicHeaderBytes == null) {\n             return null;\n         }\n-        final DataInputStream basicHeader = new DataInputStream(\n-                new ByteArrayInputStream(basicHeaderBytes));\n-        \n-        final int firstHeaderSize = basicHeader.readUnsignedByte();\n-        final byte[] firstHeaderBytes = new byte[firstHeaderSize - 1];\n-        basicHeader.readFully(firstHeaderBytes);\n-        final DataInputStream firstHeader = new DataInputStream(\n-                new ByteArrayInputStream(firstHeaderBytes));\n-\n-        final LocalFileHeader localFileHeader = new LocalFileHeader();\n-        localFileHeader.archiverVersionNumber = firstHeader.readUnsignedByte();\n-        localFileHeader.minVersionToExtract = firstHeader.readUnsignedByte();\n-        localFileHeader.hostOS = firstHeader.readUnsignedByte();\n-        localFileHeader.arjFlags = firstHeader.readUnsignedByte();\n-        localFileHeader.method = firstHeader.readUnsignedByte();\n-        localFileHeader.fileType = firstHeader.readUnsignedByte();\n-        localFileHeader.reserved = firstHeader.readUnsignedByte();\n-        localFileHeader.dateTimeModified = read32(firstHeader);\n-        localFileHeader.compressedSize = 0xffffFFFFL & read32(firstHeader);\n-        localFileHeader.originalSize = 0xffffFFFFL & read32(firstHeader);\n-        localFileHeader.originalCrc32 = 0xffffFFFFL & read32(firstHeader);\n-        localFileHeader.fileSpecPosition = read16(firstHeader);\n-        localFileHeader.fileAccessMode = read16(firstHeader);\n-        pushedBackBytes(20);\n-        localFileHeader.firstChapter = firstHeader.readUnsignedByte();\n-        localFileHeader.lastChapter = firstHeader.readUnsignedByte();\n-        \n-        readExtraData(firstHeaderSize, firstHeader, localFileHeader);\n-\n-        localFileHeader.name = readString(basicHeader);\n-        localFileHeader.comment = readString(basicHeader);\n-\n-        final ArrayList<byte[]> extendedHeaders = new ArrayList<>();\n-        int extendedHeaderSize;\n-        while ((extendedHeaderSize = read16(in)) > 0) {\n-            final byte[] extendedHeaderBytes = new byte[extendedHeaderSize];\n-            readFully(in, extendedHeaderBytes);\n-            final long extendedHeaderCrc32 = 0xffffFFFFL & read32(in);\n-            final CRC32 crc32 = new CRC32();\n-            crc32.update(extendedHeaderBytes);\n-            if (extendedHeaderCrc32 != crc32.getValue()) {\n-                throw new IOException(\"Extended header CRC32 verification failure\");\n-            }\n-            extendedHeaders.add(extendedHeaderBytes);\n-        }\n-        localFileHeader.extendedHeaders = extendedHeaders.toArray(new byte[extendedHeaders.size()][]);\n-        \n-        return localFileHeader;\n+        try (final DataInputStream basicHeader = new DataInputStream(new ByteArrayInputStream(basicHeaderBytes))) {\n+\n+            final int firstHeaderSize = basicHeader.readUnsignedByte();\n+            final byte[] firstHeaderBytes = new byte[firstHeaderSize - 1];\n+            basicHeader.readFully(firstHeaderBytes);\n+            try (final DataInputStream firstHeader = new DataInputStream(new ByteArrayInputStream(firstHeaderBytes))) {\n+\n+                final LocalFileHeader localFileHeader = new LocalFileHeader();\n+                localFileHeader.archiverVersionNumber = firstHeader.readUnsignedByte();\n+                localFileHeader.minVersionToExtract = firstHeader.readUnsignedByte();\n+                localFileHeader.hostOS = firstHeader.readUnsignedByte();\n+                localFileHeader.arjFlags = firstHeader.readUnsignedByte();\n+                localFileHeader.method = firstHeader.readUnsignedByte();\n+                localFileHeader.fileType = firstHeader.readUnsignedByte();\n+                localFileHeader.reserved = firstHeader.readUnsignedByte();\n+                localFileHeader.dateTimeModified = read32(firstHeader);\n+                localFileHeader.compressedSize = 0xffffFFFFL & read32(firstHeader);\n+                localFileHeader.originalSize = 0xffffFFFFL & read32(firstHeader);\n+                localFileHeader.originalCrc32 = 0xffffFFFFL & read32(firstHeader);\n+                localFileHeader.fileSpecPosition = read16(firstHeader);\n+                localFileHeader.fileAccessMode = read16(firstHeader);\n+                pushedBackBytes(20);\n+                localFileHeader.firstChapter = firstHeader.readUnsignedByte();\n+                localFileHeader.lastChapter = firstHeader.readUnsignedByte();\n+\n+                readExtraData(firstHeaderSize, firstHeader, localFileHeader);\n+\n+                localFileHeader.name = readString(basicHeader);\n+                localFileHeader.comment = readString(basicHeader);\n+\n+                final ArrayList<byte[]> extendedHeaders = new ArrayList<>();\n+                int extendedHeaderSize;\n+                while ((extendedHeaderSize = read16(in)) > 0) {\n+                    final byte[] extendedHeaderBytes = new byte[extendedHeaderSize];\n+                    readFully(in, extendedHeaderBytes);\n+                    final long extendedHeaderCrc32 = 0xffffFFFFL & read32(in);\n+                    final CRC32 crc32 = new CRC32();\n+                    crc32.update(extendedHeaderBytes);\n+                    if (extendedHeaderCrc32 != crc32.getValue()) {\n+                        throw new IOException(\"Extended header CRC32 verification failure\");\n+                    }\n+                    extendedHeaders.add(extendedHeaderBytes);\n+                }\n+                localFileHeader.extendedHeaders = extendedHeaders.toArray(new byte[extendedHeaders.size()][]);\n+\n+                return localFileHeader;\n+            }\n+        }\n     }\n     \n     private void readExtraData(final int firstHeaderSize, final DataInputStream firstHeader,", "timestamp": 1481267734, "metainfo": ""}