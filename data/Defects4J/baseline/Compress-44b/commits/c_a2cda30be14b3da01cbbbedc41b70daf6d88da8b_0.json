{"sha": "a2cda30be14b3da01cbbbedc41b70daf6d88da8b", "log": "COMPRESS-326 adjust tests to changes in Java's zip package", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n         }\n     }\n \n+    /**\n+     * Wraps {@link ZipEntry#getTime} with a {@link Date} as the\n+     * entry's last modified date.\n+     *\n+     * <p>Changes to the implementation of {@link ZipEntry#getTime}\n+     * leak through and the returned value may depend on your local\n+     * time zone as well as your version of Java.</p>\n+     */\n     public Date getLastModifiedDate() {\n         return new Date(getTime());\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/X5455_ExtendedTimestampTest.java\n         1999's zip time:  Jan 1st, 1999-01-01/00:00:02\n         1999's mod time:  Jan 1st, 1999-01-01/00:00:01\n         1999's acc time:  Jan 1st, 1999-01-01/00:00:03\n+\n+        Starting with a patch release of Java8, \"zip time\" actually\n+        uses the extended time stamp field itself and should be the\n+        same as \"mod time\".\n+        http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/90df6756406f\n          */\n \n         File archive = getFile(\"COMPRESS-210_unix_time_zip_test.zip\");\n                 ZipArchiveEntry zae = en.nextElement();\n                 String name = zae.getName();\n                 X5455_ExtendedTimestamp xf = (X5455_ExtendedTimestamp) zae.getExtraField(X5455);\n-                Date z = adjustFromGMTToExpectedOffset(zae.getLastModifiedDate());\n+                Date rawZ = zae.getLastModifiedDate();\n                 Date m = xf.getModifyJavaTime();\n+                boolean zipTimeUsesExtendedTimestamp = rawZ.equals(m);\n+                Date z = zipTimeUsesExtendedTimestamp ? rawZ : adjustFromGMTToExpectedOffset(rawZ);\n                 Date a = xf.getAccessJavaTime();\n \n                 String zipTime = DATE_FORMAT.format(z);\n                     if (year >= 0) {\n                         switch (year) {\n                             case 2107:\n-                                // Zip time is okay up to 2107.\n-                                assertEquals(year + \"-01-01/00:00:02 +0000\", zipTime);\n+                                if (!zipTimeUsesExtendedTimestamp) {\n+                                    // Zip time is okay up to 2107.\n+                                    assertEquals(year + \"-01-01/00:00:02 +0000\", zipTime);\n+                                }\n                                 // But the X5455 data has overflowed:\n                                 assertEquals(\"1970-11-24/17:31:45 +0000\", modTime);\n                                 assertEquals(\"1970-11-24/17:31:47 +0000\", accTime);\n                                 break;\n                             case 2108:\n-                                // Zip time is still okay at Jan 1st midnight (UTC) in 2108\n-                                // because we created the zip file in pacific time zone, so it's\n-                                // actually still 2107 in the zip file!\n-                                assertEquals(year + \"-01-01/00:00:02 +0000\", zipTime);\n+                                if (!zipTimeUsesExtendedTimestamp) {\n+                                    // Zip time is still okay at Jan 1st midnight (UTC) in 2108\n+                                    // because we created the zip file in pacific time zone, so it's\n+                                    // actually still 2107 in the zip file!\n+                                    assertEquals(year + \"-01-01/00:00:02 +0000\", zipTime);\n+                                }\n                                 // The X5455 data is still overflowed, of course:\n                                 assertEquals(\"1971-11-24/17:31:45 +0000\", modTime);\n                                 assertEquals(\"1971-11-24/17:31:47 +0000\", accTime);\n                                 break;\n                             case 2109:\n                                 // All three timestamps have overflowed by 2109.\n-                                assertEquals(\"1981-01-01/00:00:02 +0000\", zipTime);\n+                                if (!zipTimeUsesExtendedTimestamp) {\n+                                    assertEquals(\"1981-01-01/00:00:02 +0000\", zipTime);\n+                                }\n                                 assertEquals(\"1972-11-24/17:31:45 +0000\", modTime);\n                                 assertEquals(\"1972-11-24/17:31:47 +0000\", accTime);\n \n \n                                 break;\n                             default:\n-                                // X5455 time is good from epoch (1970) to 2106.\n-                                // Zip time is good from 1980 to 2107.\n-                                if (year < 1980) {\n-                                    assertEquals(\"1980-01-01/08:00:00 +0000\", zipTime);\n-                                } else {\n-                                    assertEquals(year + \"-01-01/00:00:02 +0000\", zipTime);\n+                                if (!zipTimeUsesExtendedTimestamp) {\n+                                    // X5455 time is good from epoch (1970) to 2106.\n+                                    // Zip time is good from 1980 to 2107.\n+                                    if (year < 1980) {\n+                                        assertEquals(\"1980-01-01/08:00:00 +0000\", zipTime);\n+                                    } else {\n+                                        assertEquals(year + \"-01-01/00:00:02 +0000\", zipTime);\n+                                    }\n                                 }\n                                 assertEquals(year + \"-01-01/00:00:01 +0000\", modTime);\n                                 assertEquals(year + \"-01-01/00:00:03 +0000\", accTime);", "timestamp": 1445667539, "metainfo": ""}