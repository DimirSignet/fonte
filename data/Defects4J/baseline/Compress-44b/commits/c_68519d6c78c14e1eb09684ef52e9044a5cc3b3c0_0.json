{"sha": "68519d6c78c14e1eb09684ef52e9044a5cc3b3c0", "log": "I seem to be re-writing a class like this every time I analyze a 7z archive  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/CLI.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.sevenz;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+public class CLI {\n+\n+    private static enum Mode {\n+        LIST(\"Analysing\") {\n+            public void takeAction(SevenZFile archive, SevenZArchiveEntry entry) {\n+                System.out.print(entry.getName());\n+                if (entry.isDirectory()) {\n+                    System.out.print(\" dir\");\n+                } else {\n+                    System.out.print(\" \" + entry.getCompressedSize()\n+                                     + \"/\" + entry.getSize());\n+                }\n+                if (entry.getHasLastModifiedDate()) {\n+                    System.out.print(\" \" + entry.getLastModifiedDate());\n+                } else {\n+                    System.out.print(\" no last modified date\");\n+                }\n+                if (!entry.isDirectory()) {\n+                    System.out.println(\" \" + getContentMethods(entry));\n+                } else {\n+                    System.out.println(\"\");\n+                }\n+            }\n+\n+            private String getContentMethods(SevenZArchiveEntry entry) {\n+                StringBuilder sb = new StringBuilder();\n+                boolean first = true;\n+                for (SevenZMethodConfiguration m : entry.getContentMethods()) {\n+                    if (!first) {\n+                        sb.append(\", \");\n+                    }\n+                    first = false;\n+                    sb.append(m.getMethod());\n+                    if (m.getOptions() != null) {\n+                        sb.append(\"(\" + m.getOptions() + \")\");\n+                    }\n+                }\n+                return sb.toString();\n+            }\n+        },\n+        EXTRACT(\"Extracting\") {\n+            public void takeAction(SevenZFile archive, SevenZArchiveEntry entry) \n+                throws IOException {\n+                File outFile = new File(entry.getName());\n+                if (entry.isDirectory()) {\n+                    System.out.println(\"creating \" + outFile);\n+                    outFile.mkdirs();\n+                    return;\n+                }\n+\n+                System.out.println(\"extracting to \" + outFile);\n+                File parent = outFile.getParentFile();\n+                if (!parent.exists() && !parent.mkdirs()) {\n+                    throw new IOException(\"Cannot create \" + parent);\n+                }\n+                FileOutputStream fos = new FileOutputStream(outFile);\n+                try {\n+                    byte[] contents = new byte[(int) entry.getSize()];\n+                    int off = 0;\n+                    while (off < contents.length) {\n+                        int bytesRead = archive.read(contents, off,\n+                                                     contents.length - off);\n+                        System.err.println(\"read at offset \" + off + \" returned \"\n+                                           + bytesRead + \" bytes.\");\n+                        if (bytesRead < 1) {\n+                            throw new IOException(\"reached end of entry \"\n+                                                  + entry.getName()\n+                                                  + \" after \" + off\n+                                                  + \" bytes, expected \"\n+                                                  + contents.length);\n+                        }\n+                        off += bytesRead;\n+                    }\n+                } finally {\n+                    fos.close();\n+                }\n+            }\n+        };\n+\n+        private final String message;\n+        private Mode(String message) {\n+            this.message = message;\n+        }\n+        public String getMessage() {\n+            return message;\n+        }\n+        public abstract void takeAction(SevenZFile archive, SevenZArchiveEntry entry)\n+            throws IOException;\n+    }        \n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            usage();\n+            return;\n+        }\n+        Mode mode = grabMode(args);\n+        System.out.println(mode.getMessage() + \" \" + args[0]);\n+        File f = new File(args[0]);\n+        if (!f.isFile()) {\n+            System.err.println(f + \" doesn't exist or is a directory\");\n+        }\n+        SevenZFile archive = new SevenZFile(f);\n+        try {\n+            SevenZArchiveEntry ae;\n+            while((ae=archive.getNextEntry()) != null) {\n+                mode.takeAction(archive, ae);\n+            }\n+        } finally {\n+            archive.close();\n+        }\n+    }\n+\n+    private static void usage() {\n+        System.out.println(\"Parameters: archive-name [list|extract]\");\n+    }\n+\n+    private static Mode grabMode(String[] args) {\n+        if (args.length < 2) {\n+            return Mode.LIST;\n+        }\n+        return Enum.valueOf(Mode.class, args[1].toUpperCase());\n+    }\n+\n+}", "timestamp": 1407764146, "metainfo": ""}