{"sha": "25ecc9b177ef21bcc35a82776b71cbdae4a7f708", "log": "COMPRESS-271 support for decompressConcatenated in lz4 frame input", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n             }\n \n             if (LZ4_FRAMED.equalsIgnoreCase(name)) {\n-                return new FramedLZ4CompressorInputStream(in);\n+                return new FramedLZ4CompressorInputStream(in, actualDecompressConcatenated);\n             }\n \n         } catch (final IOException e) {\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStream.java\n     /*\n      * TODO before releasing 1.14:\n      *\n-     * + xxhash32 checksum validation\n      * + skippable frames\n-     * + decompressConcatenated\n      * + block dependence\n      */\n \n     };\n \n     private final InputStream in;\n+    private final boolean decompressConcatenated;\n \n     private boolean expectBlockChecksum;\n     private boolean expectContentSize;\n \n     // used for frame header checksum and content checksum, if present\n     private final XXHash32 contentHash = new XXHash32();\n+\n+    /**\n+     * Creates a new input stream that decompresses streams compressed\n+     * using the LZ4 frame format and stops after decompressing the\n+     * first frame.\n+     * @param in  the InputStream from which to read the compressed data\n+     * @throws IOException if reading fails\n+     */\n+    public FramedLZ4CompressorInputStream(InputStream in) throws IOException {\n+        this(in, false);\n+    }\n \n     /**\n      * Creates a new input stream that decompresses streams compressed\n      * using the LZ4 frame format.\n      * @param in  the InputStream from which to read the compressed data\n+     * @param decompressConcatenated if true, decompress until the end\n+     *          of the input; if false, stop after the first LZ4 frame\n+     *          and leave the input position to point to the next byte\n+     *          after the frame stream\n      * @throws IOException if reading fails\n      */\n-    public FramedLZ4CompressorInputStream(InputStream in) throws IOException {\n+    public FramedLZ4CompressorInputStream(InputStream in, boolean decompressConcatenated) throws IOException {\n         this.in = in;\n-        readSignature();\n-        readFrameDescriptor();\n-        nextBlock();\n+        this.decompressConcatenated = decompressConcatenated;\n+        init(true);\n     }\n \n     /** {@inheritDoc} */\n         return r;\n     }\n \n-    private void readSignature() throws IOException {\n+    private void init(boolean firstFrame) throws IOException {\n+        if (readSignature(firstFrame)) {\n+            readFrameDescriptor();\n+            nextBlock();\n+        }\n+    }\n+\n+    private boolean readSignature(boolean firstFrame) throws IOException {\n         final byte[] b = new byte[4];\n         final int read = IOUtils.readFully(in, b);\n         count(read);\n+        if (4 != read && !firstFrame) {\n+            endReached = true;\n+            return false;\n+        }\n         if (4 != read || !matches(b, 4)) {\n             throw new IOException(\"Not a LZ4 frame stream\");\n         }\n+        return true;\n     }\n \n     private void readFrameDescriptor() throws IOException {\n         boolean uncompressed = (len & UNCOMPRESSED_FLAG_MASK) != 0;\n         int realLen = (int) (len & (~UNCOMPRESSED_FLAG_MASK));\n         if (realLen == 0) {\n-            endReached = true;\n             verifyContentChecksum();\n+            if (!decompressConcatenated) {\n+                endReached = true;\n+            } else {\n+                init(false);\n+            }\n             return;\n         }\n         InputStream capped = new BoundedInputStream(in, realLen);\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java\n import java.io.FileInputStream;\n import java.io.InputStream;\n import java.io.IOException;\n+import java.util.Arrays;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.compressors.CompressorStreamFactory;\n         }\n     }\n \n+    @Test\n+    public void readBlaLz4WithDecompressConcatenated() throws IOException {\n+        try (InputStream a = new FramedLZ4CompressorInputStream(new FileInputStream(getFile(\"bla.tar.lz4\")), true);\n+            FileInputStream e = new FileInputStream(getFile(\"bla.tar\"))) {\n+            byte[] expected = IOUtils.toByteArray(e);\n+            byte[] actual = IOUtils.toByteArray(a);\n+            assertArrayEquals(expected, actual);\n+        }\n+    }\n+\n+    @Test\n+    public void readDoubledBlaLz4WithDecompressConcatenatedTrue() throws Exception {\n+        readDoubledBlaLz4(new StreamWrapper() {\n+                public InputStream wrap(InputStream in) throws Exception {\n+                    return new FramedLZ4CompressorInputStream(in, true);\n+                }\n+            }, true);\n+    }\n+\n+    @Test\n+    public void readDoubledBlaLz4WithDecompressConcatenatedFalse() throws Exception {\n+        readDoubledBlaLz4(new StreamWrapper() {\n+                public InputStream wrap(InputStream in) throws Exception {\n+                    return new FramedLZ4CompressorInputStream(in, false);\n+                }\n+            }, false);\n+    }\n+\n+    @Test\n+    public void readDoubledBlaLz4WithoutExplicitDecompressConcatenated() throws Exception {\n+        readDoubledBlaLz4(new StreamWrapper() {\n+                public InputStream wrap(InputStream in) throws Exception {\n+                    return new FramedLZ4CompressorInputStream(in);\n+                }\n+            }, false);\n+    }\n+\n+    @Test\n+    public void readBlaLz4ViaFactoryWithDecompressConcatenated() throws Exception {\n+        try (InputStream a = new CompressorStreamFactory()\n+                 .createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(),\n+                                              new FileInputStream(getFile(\"bla.tar.lz4\")),\n+                                              true);\n+            FileInputStream e = new FileInputStream(getFile(\"bla.tar\"))) {\n+            byte[] expected = IOUtils.toByteArray(e);\n+            byte[] actual = IOUtils.toByteArray(a);\n+            assertArrayEquals(expected, actual);\n+        }\n+    }\n+\n+    @Test\n+    public void readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedTrue() throws Exception {\n+        readDoubledBlaLz4(new StreamWrapper() {\n+                public InputStream wrap(InputStream in) throws Exception {\n+                    return new CompressorStreamFactory()\n+                        .createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(), in, true);\n+                }\n+            }, true);\n+    }\n+\n+    @Test\n+    public void readDoubledBlaLz4ViaFactoryWithDecompressConcatenatedFalse() throws Exception {\n+        readDoubledBlaLz4(new StreamWrapper() {\n+                public InputStream wrap(InputStream in) throws Exception {\n+                    return new CompressorStreamFactory()\n+                        .createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(), in, false);\n+                }\n+            }, false);\n+    }\n+\n+    @Test\n+    public void readDoubledBlaLz4ViaFactoryWithoutExplicitDecompressConcatenated() throws Exception {\n+        readDoubledBlaLz4(new StreamWrapper() {\n+                public InputStream wrap(InputStream in) throws Exception {\n+                    return new CompressorStreamFactory()\n+                        .createCompressorInputStream(CompressorStreamFactory.getLZ4Framed(), in);\n+                }\n+            }, false);\n+    }\n+\n     @Test(expected = IOException.class)\n     public void rejectsNonLZ4Stream() throws IOException {\n         try (InputStream a = new FramedLZ4CompressorInputStream(new FileInputStream(getFile(\"bla.tar\")))) {\n             assertThat(ex.getMessage(), containsString(\"content checksum mismatch\"));\n         }\n     }\n+\n+    interface StreamWrapper {\n+        InputStream wrap(InputStream in) throws Exception;\n+    }\n+\n+    private void readDoubledBlaLz4(StreamWrapper wrapper, boolean expectDuplicateOutput) throws Exception {\n+        byte[] singleInput;\n+        try (InputStream i = new FileInputStream(getFile(\"bla.tar.lz4\"))) {\n+            singleInput = IOUtils.toByteArray(i);\n+        }\n+        byte[] input = duplicate(singleInput);\n+        try (InputStream a = wrapper.wrap(new ByteArrayInputStream(input));\n+            FileInputStream e = new FileInputStream(getFile(\"bla.tar\"))) {\n+            byte[] expected = IOUtils.toByteArray(e);\n+            byte[] actual = IOUtils.toByteArray(a);\n+            assertArrayEquals(expectDuplicateOutput ? duplicate(expected) : expected, actual);\n+        }\n+    }\n+\n+    private static byte[] duplicate(byte[] from) {\n+        byte[] to = Arrays.copyOf(from, 2 * from.length);\n+        System.arraycopy(from, 0, to, from.length, from.length);\n+        return to;\n+    }\n }", "timestamp": 1486295712, "metainfo": ""}