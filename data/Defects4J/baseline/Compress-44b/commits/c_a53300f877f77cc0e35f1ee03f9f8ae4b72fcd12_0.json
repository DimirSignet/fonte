{"sha": "a53300f877f77cc0e35f1ee03f9f8ae4b72fcd12", "log": "cleanup in tests  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java\n package org.apache.commons.compress.archivers.zip;\n \n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.After;\n import org.junit.Test;\n \n import java.io.ByteArrayInputStream;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n \n+import static org.apache.commons.compress.AbstractTestCase.tryHardToDelete;\n import static org.junit.Assert.*;\n \n @SuppressWarnings(\"OctalInteger\")\n \n     private final int NUMITEMS = 5000;\n \n+    private File result;\n+    private File tmp;\n+    \n+    @After\n+    public void cleanup() {\n+        tryHardToDelete(result);\n+        tryHardToDelete(tmp);\n+    }\n+\n     @Test\n     public void concurrent()\n             throws Exception {\n-        File result = File.createTempFile(\"parallelScatterGather1\", \"\");\n+        result = File.createTempFile(\"parallelScatterGather1\", \"\");\n         ZipArchiveOutputStream zos = new ZipArchiveOutputStream(result);\n         zos.setEncoding(\"UTF-8\");\n         ParallelScatterZipCreator zipCreator = new ParallelScatterZipCreator();\n     @Test\n     public void callableApi()\n             throws Exception {\n-        File result = File.createTempFile(\"parallelScatterGather2\", \"\");\n+        result = File.createTempFile(\"parallelScatterGather2\", \"\");\n         ZipArchiveOutputStream zos = new ZipArchiveOutputStream(result);\n         zos.setEncoding(\"UTF-8\");\n         ExecutorService es = Executors.newFixedThreadPool(1);\n \n         ScatterGatherBackingStoreSupplier supp = new ScatterGatherBackingStoreSupplier() {\n             public ScatterGatherBackingStore get() throws IOException {\n-                return new FileBasedScatterGatherBackingStore(File.createTempFile(\"parallelscatter\", \"n1\"));\n+                return new FileBasedScatterGatherBackingStore(tmp = File.createTempFile(\"parallelscatter\", \"n1\"));\n             }\n         };\n \n         za.setUnixMode(UnixStat.FILE_FLAG | 0664);\n         return za;\n     }\n-}\n+}\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStreamTest.java\n package org.apache.commons.compress.archivers.zip;\n \n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.After;\n import org.junit.Test;\n \n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.InputStream;\n \n+import static org.apache.commons.compress.AbstractTestCase.tryHardToDelete;\n import static org.apache.commons.compress.archivers.zip.ZipArchiveEntryRequest.createZipArchiveEntryRequest;\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n \n public class ScatterZipOutputStreamTest {\n \n+    private File scatterFile = null;\n+    private File target = null;\n+\n+    @After\n+    public void cleanup() {\n+        tryHardToDelete(scatterFile);\n+        tryHardToDelete(target);\n+    }\n+    \n     @Test\n     public void putArchiveEntry() throws Exception {\n-        File scatteFile = File.createTempFile(\"scattertest\", \".notzip\");\n-        ScatterZipOutputStream scatterZipOutputStream = ScatterZipOutputStream.fileBased(scatteFile);\n+        scatterFile = File.createTempFile(\"scattertest\", \".notzip\");\n+        ScatterZipOutputStream scatterZipOutputStream = ScatterZipOutputStream.fileBased(scatterFile);\n         final byte[] B_PAYLOAD = \"RBBBBBBS\".getBytes();\n         final byte[] A_PAYLOAD = \"XAAY\".getBytes();\n \n         ByteArrayInputStream payload1 = new ByteArrayInputStream(A_PAYLOAD);\n         scatterZipOutputStream.addArchiveEntry(createZipArchiveEntryRequest(zae, createPayloadSupplier(payload1)));\n \n-        File target = File.createTempFile(\"scattertest\", \".zip\");\n+        target = File.createTempFile(\"scattertest\", \".zip\");\n         ZipArchiveOutputStream outputStream = new ZipArchiveOutputStream(target);\n         scatterZipOutputStream.writeTo( outputStream);\n         outputStream.close();\n             }\n         };\n     }\n-}\n+}", "timestamp": 1422004047, "metainfo": ""}