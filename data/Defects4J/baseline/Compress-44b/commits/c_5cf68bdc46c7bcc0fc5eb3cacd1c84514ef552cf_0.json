{"sha": "5cf68bdc46c7bcc0fc5eb3cacd1c84514ef552cf", "log": "return 0 from read when asked to read 0 bytes - COMPRESS-309  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n         if (this.in == null) {\n             throw new IOException(\"stream closed\");\n         }\n+        if (len == 0) {\n+            return 0;\n+        }\n \n         final int hi = offs + len;\n         int destOffs = offs;\n--- a/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStreamTest.java\n \n import static org.apache.commons.compress.AbstractTestCase.getFile;\n \n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import org.junit.Assert;\n import org.junit.Test;\n \n public class BZip2CompressorInputStreamTest {\n         }\n     }\n \n+    /**\n+     * @see \"https://issues.apache.org/jira/browse/COMPRESS-309\"\n+     */\n+    @Test\n+    public void readOfLength0ShouldReturn0() throws Exception {\n+        // Create a big random piece of data\n+        byte[] rawData = new byte[1048576];\n+        for (int i=0; i < rawData.length; ++i) {\n+            rawData[i] = (byte) Math.floor(Math.random()*256);\n+        }\n+\n+        // Compress it\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        BZip2CompressorOutputStream bzipOut = new BZip2CompressorOutputStream(baos);\n+        bzipOut.write(rawData);\n+        bzipOut.flush();\n+        bzipOut.close();\n+        baos.flush();\n+        baos.close();\n+\n+        // Try to read it back in\n+        ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+        BZip2CompressorInputStream bzipIn = new BZip2CompressorInputStream(bais);\n+        byte[] buffer = new byte[1024];\n+        Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));\n+        Assert.assertEquals(0, bzipIn.read(buffer, 1024, 0));\n+        Assert.assertEquals(1024, bzipIn.read(buffer, 0, 1024));\n+        bzipIn.close();\n+    }\n+\n }", "timestamp": 1424449080, "metainfo": ""}