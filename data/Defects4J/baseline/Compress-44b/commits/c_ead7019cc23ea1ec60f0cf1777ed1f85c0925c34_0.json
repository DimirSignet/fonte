{"sha": "ead7019cc23ea1ec60f0cf1777ed1f85c0925c34", "log": "Ensure resources are closed  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n package org.apache.commons.compress;\n \n import java.io.BufferedInputStream;\n+import java.io.Closeable;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileNotFoundException;\n             fos.close();\n         }\n     }\n+    \n+    protected void closeQuietly(Closeable closeable){\n+        if (closeable != null) {\n+            try {\n+                closeable.close();\n+            } catch (IOException ignored) {\n+                // ignored\n+            }\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java\n public class ArArchiveOutputStreamTest extends AbstractTestCase {\n \n     public void testLongFileNamesCauseExceptionByDefault() {\n+        ArArchiveOutputStream os = null;\n         try {\n-            ArArchiveOutputStream os =\n-                new ArArchiveOutputStream(new ByteArrayOutputStream());\n+            os = new ArArchiveOutputStream(new ByteArrayOutputStream());\n             ArArchiveEntry ae = new ArArchiveEntry(\"this_is_a_long_name.txt\",\n                                                    0);\n             os.putArchiveEntry(ae);\n             fail(\"Expected an exception\");\n         } catch (IOException ex) {\n             assertTrue(ex.getMessage().startsWith(\"filename too long\"));\n+        } finally {\n+            closeQuietly(os);\n         }\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java\n         final ArchiveEntry entry3 = is.getNextEntry();\n         assertNull(entry3);\n \n+        is.close();\n     }\n \n }\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStreamTest.java\n \n     @Test\n     public void readSimplePaxHeader() throws Exception {\n-        Map<String, String> headers = new TarArchiveInputStream(null)\n+        final TarArchiveInputStream tais = new TarArchiveInputStream(null);\n+        Map<String, String> headers = tais\n             .parsePaxHeaders(new ByteArrayInputStream(\"30 atime=1321711775.972059463\\n\"\n                                                       .getBytes(CharsetNames.UTF_8)));\n         assertEquals(1, headers.size());\n         assertEquals(\"1321711775.972059463\", headers.get(\"atime\"));\n+        tais.close();\n     }\n \n     @Test\n     public void readPaxHeaderWithEmbeddedNewline() throws Exception {\n-        Map<String, String> headers = new TarArchiveInputStream(null)\n+        final TarArchiveInputStream tais = new TarArchiveInputStream(null);\n+        Map<String, String> headers = tais\n             .parsePaxHeaders(new ByteArrayInputStream(\"28 comment=line1\\nline2\\nand3\\n\"\n                                                       .getBytes(CharsetNames.UTF_8)));\n         assertEquals(1, headers.size());\n         assertEquals(\"line1\\nline2\\nand3\", headers.get(\"comment\"));\n+        tais.close();\n     }\n \n     @Test\n         String ae = \"\\u00e4\";\n         String line = \"11 path=\"+ ae + \"\\n\";\n         assertEquals(11, line.getBytes(CharsetNames.UTF_8).length);\n-        Map<String, String> headers = new TarArchiveInputStream(null)\n+        final TarArchiveInputStream tais = new TarArchiveInputStream(null);\n+        Map<String, String> headers = tais\n             .parsePaxHeaders(new ByteArrayInputStream(line.getBytes(CharsetNames.UTF_8)));\n         assertEquals(1, headers.size());\n         assertEquals(ae, headers.get(\"path\"));\n+        tais.close();\n     }\n \n     @Test\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n             new TarArchiveInputStream(new ByteArrayInputStream(data));\n         TarArchiveEntry e = tin.getNextTarEntry();\n         assertEquals(0100000000000L, e.getSize());\n+        tin.close();\n+        tos.close();\n     }\n \n     public void testBigNumberPosixMode() throws Exception {\n             new TarArchiveInputStream(new ByteArrayInputStream(data));\n         TarArchiveEntry e = tin.getNextTarEntry();\n         assertEquals(0100000000000L, e.getSize());\n+        tin.close();\n+        tos.close();\n     }\n \n     public void testWriteSimplePaxHeaders() throws Exception {\n         tos.putArchiveEntry(t);\n         tos.write(new byte[10 * 1024]);\n         tos.closeArchiveEntry();\n+        tos.close();\n \n         return bos.toByteArray();\n     }\n             new TarArchiveInputStream(new ByteArrayInputStream(data));\n         TarArchiveEntry e = tin.getNextTarEntry();\n         assertEquals(n, e.getName());\n+        tin.close();\n+        tos.close();\n     }\n \n     public void testOldEntryStarMode() throws Exception {\n         cal.set(1969, 11, 31, 23, 59, 59);\n         cal.set(Calendar.MILLISECOND, 0);\n         assertEquals(cal.getTime(), e.getLastModifiedDate());\n+        tin.close();\n+        tos.close();\n     }\n \n     public void testOldEntryPosixMode() throws Exception {\n         cal.set(1969, 11, 31, 23, 59, 59);\n         cal.set(Calendar.MILLISECOND, 0);\n         assertEquals(cal.getTime(), e.getLastModifiedDate());\n+        tin.close();\n+        tos.close();\n     }\n \n     public void testOldEntryError() throws Exception {\n             fail(\"Should have generated RuntimeException\");\n         } catch (RuntimeException expected) {\n         }\n+        tos.close();\n     }\n \n     public void testWriteNonAsciiPathNamePaxHeader() throws Exception {\n             new TarArchiveInputStream(new ByteArrayInputStream(data));\n         TarArchiveEntry e = tin.getNextTarEntry();\n         assertEquals(n, e.getName());\n+        tin.close();\n     }\n \n     public void testWriteNonAsciiLinkPathNamePaxHeader() throws Exception {\n             new TarArchiveInputStream(new ByteArrayInputStream(data));\n         TarArchiveEntry e = tin.getNextTarEntry();\n         assertEquals(n, e.getLinkName());\n+        tin.close();\n     }\n \n }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n      * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n      * >COMPRESS-93</a>.\n      */\n-    public void testCompressionMethod() {\n+    public void testCompressionMethod() throws Exception {\n         ZipArchiveOutputStream zos =\n             new ZipArchiveOutputStream((java.io.OutputStream) null);\n         ZipArchiveEntry entry = new ZipArchiveEntry(\"foo\");\n         entry.setMethod(6);\n         assertEquals(6, entry.getMethod());\n         assertFalse(zos.canWriteEntryData(entry));\n+        zos.close();\n     }\n \n     /**\n \n     /**\n      * Tests comment's influence on equals comparisons.\n-     * @see https://issues.apache.org/jira/browse/COMPRESS-187\n+     * @see \"https://issues.apache.org/jira/browse/COMPRESS-187\"\n      */\n     public void testNullCommentEqualsEmptyComment() {\n         ZipArchiveEntry entry1 = new ZipArchiveEntry(\"foo\");", "timestamp": 1342478923, "metainfo": ""}