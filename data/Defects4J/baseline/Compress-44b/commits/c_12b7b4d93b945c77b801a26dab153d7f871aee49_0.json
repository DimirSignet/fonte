{"sha": "12b7b4d93b945c77b801a26dab153d7f871aee49", "log": "COMPRESS-271 implement writing of block checksum", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n     /*\n      * TODO before releasing 1.14:\n      *\n-     * + xxhash32 checksum creation for blocks\n      * + block dependence\n      */\n \n     private boolean finished = false;\n     private int currentIndex = 0;\n \n-    // used for frame header checksum and content checksum, if present\n+    // used for frame header checksum and content checksum, if requested\n     private final XXHash32 contentHash = new XXHash32();\n+    // used for block checksum, if requested\n+    private final XXHash32 blockHash;\n \n     /**\n      * The block sizes supported by the format.\n      */\n     public static class Parameters {\n         private final BlockSize blockSize;\n-        private final boolean withContentChecksum;\n+        private final boolean withContentChecksum, withBlockChecksum;\n \n         /**\n          * The default parameters of 4M block size, enabled content\n          *\n          * <p>This matches the defaults of the lz4 command line utility.</p>\n          */\n-        public static Parameters DEFAULT = new Parameters(BlockSize.M4, true);\n+        public static Parameters DEFAULT = new Parameters(BlockSize.M4, true, false);\n \n         /**\n          * Sets up custom parameters for the LZ4 stream.\n          * @param blockSize the size of a single block.\n          * @param withContentChecksum whether to write a content checksum\n+         * @param withBlockChecksum whether to write a block checksum.\n+         * Note that block checksums are not supported by the lz4\n+         * command line utility\n          */\n-        public Parameters(BlockSize blockSize, boolean withContentChecksum) {\n+        public Parameters(BlockSize blockSize, boolean withContentChecksum, boolean withBlockChecksum) {\n             this.blockSize = blockSize;\n             this.withContentChecksum = withContentChecksum;\n+            this.withBlockChecksum = withBlockChecksum;\n         }\n         @Override\n         public String toString() {\n-            return \"LZ4 Parameters with BlockSize \" + blockSize + \", withContentChecksum \" + withContentChecksum;\n+            return \"LZ4 Parameters with BlockSize \" + blockSize + \", withContentChecksum \" + withContentChecksum\n+                + \", withBlockChecksum \" + withBlockChecksum;\n         }\n     }\n \n         this.params = params;\n         blockData = new byte[params.blockSize.getSize()];\n         this.out = out;\n+        blockHash = params.withBlockChecksum ? new XXHash32() : null;\n         out.write(FramedLZ4CompressorInputStream.LZ4_SIGNATURE);\n         writeFrameDescriptor();\n     }\n         if (params.withContentChecksum) {\n             flags |= FramedLZ4CompressorInputStream.CONTENT_CHECKSUM_MASK;\n         }\n+        if (params.withBlockChecksum) {\n+            flags |= FramedLZ4CompressorInputStream.BLOCK_CHECKSUM_MASK;\n+        }\n         out.write(flags);\n         contentHash.update(flags);\n         int bd = params.blockSize.getIndex() << 4;\n             ByteUtils.toLittleEndian(out, currentIndex | FramedLZ4CompressorInputStream.UNCOMPRESSED_FLAG_MASK,\n                 4);\n             out.write(blockData, 0, currentIndex);\n+            if (params.withBlockChecksum) {\n+                blockHash.update(blockData, 0, currentIndex);\n+            }\n         } else {\n             ByteUtils.toLittleEndian(out, b.length, 4);\n             out.write(b);\n-        }\n-        // TODO block checksum\n+            if (params.withBlockChecksum) {\n+                blockHash.update(b, 0, b.length);\n+            }\n+        }\n+        if (params.withBlockChecksum) {\n+            ByteUtils.toLittleEndian(out, blockHash.getValue(), 4);\n+            blockHash.reset();\n+        }\n         currentIndex = 0;\n     }\n \n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n     @Parameters(name = \"using {0}\")\n     public static Collection<Object[]> factory() {\n         return Arrays.asList(new Object[][] {\n-            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K64, true) },\n-            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K256, true) },\n-            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M1, true) },\n+             new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K64, true, false) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K256, true, false) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M1, true, false) },\n             new Object[] { FramedLZ4CompressorOutputStream.Parameters.DEFAULT },\n             // default without content checksum\n-            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4, false) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4, false, false) },\n+            // default with block checksum\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M4, true, true) },\n         });\n     }\n ", "timestamp": 1485495208, "metainfo": ""}