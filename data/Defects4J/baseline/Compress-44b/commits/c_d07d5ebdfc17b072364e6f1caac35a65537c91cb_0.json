{"sha": "d07d5ebdfc17b072364e6f1caac35a65537c91cb", "log": "COMPRESS-258 provide access to methods that have been used when creating the archive - method part, configuration properties to follow  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n         for (final CoderId coderId : coderTable) {\n             if (coderId.method.equals(method)) {\n                 return coderId.coder;\n+            }\n+        }\n+        return null;\n+    }\n+    static SevenZMethod findBySignature(byte[] sig) {\n+        for (final CoderId coderId : coderTable) {\n+            if (Arrays.equals(coderId.method.getId(), sig)) {\n+                return coderId.method;\n             }\n         }\n         return null;\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n import java.io.RandomAccessFile;\n import java.util.Arrays;\n import java.util.BitSet;\n+import java.util.LinkedList;\n import java.util.zip.CRC32;\n \n import org.apache.commons.compress.utils.BoundedInputStream;\n                     new ByteArrayInputStream(new byte[0]), 0);\n             return;\n         }\n+        final SevenZArchiveEntry file = archive.files[currentEntryIndex];\n         if (currentFolderIndex == folderIndex) {\n             // need to advance the folder input stream past the current file\n             drainPreviousEntry();\n+            file.setContentMethods(archive.files[currentEntryIndex - 1].getContentMethods());\n         } else {\n             currentFolderIndex = folderIndex;\n             if (currentFolderInputStream != null) {\n             final int firstPackStreamIndex = archive.streamMap.folderFirstPackStreamIndex[folderIndex];\n             final long folderOffset = SIGNATURE_HEADER_SIZE + archive.packPos +\n                     archive.streamMap.packStreamOffsets[firstPackStreamIndex];\n-            currentFolderInputStream = buildDecoderStack(folder, folderOffset, firstPackStreamIndex);\n-        }\n-        final SevenZArchiveEntry file = archive.files[currentEntryIndex];\n+            currentFolderInputStream = buildDecoderStack(folder, folderOffset, firstPackStreamIndex, file);\n+        }\n         final InputStream fileStream = new BoundedInputStream(\n                 currentFolderInputStream, file.getSize());\n         if (file.getHasCrc()) {\n     }\n     \n     private InputStream buildDecoderStack(final Folder folder, final long folderOffset,\n-            final int firstPackStreamIndex) throws IOException {\n+                final int firstPackStreamIndex, SevenZArchiveEntry entry) throws IOException {\n         file.seek(folderOffset);\n         InputStream inputStreamStack = new BoundedRandomAccessFileInputStream(file,\n                 archive.packSizes[firstPackStreamIndex]);\n+        LinkedList<SevenZMethodConfiguration> methods = new LinkedList<SevenZMethodConfiguration>();\n         for (final Coder coder : folder.getOrderedCoders()) {\n             if (coder.numInStreams != 1 || coder.numOutStreams != 1) {\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }\n+            SevenZMethod method = Coders.findBySignature(coder.decompressionMethodId);\n+            methods.addFirst(new SevenZMethodConfiguration(method));\n             inputStreamStack = Coders.addDecoder(inputStreamStack, coder, password);\n         }\n+        entry.setContentMethods(methods);\n         if (folder.hasCrc) {\n             return new CRC32VerifyingInputStream(inputStreamStack,\n                     folder.getUnpackSize(), folder.crc);\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n     }\n \n     public void test7zUnarchive() throws Exception {\n-        test7zUnarchive(getFile(\"bla.7z\"));\n+        test7zUnarchive(getFile(\"bla.7z\"), SevenZMethod.LZMA);\n     }\n \n     public void test7zDeflateUnarchive() throws Exception {\n-        test7zUnarchive(getFile(\"bla.deflate.7z\"));\n+        test7zUnarchive(getFile(\"bla.deflate.7z\"), SevenZMethod.DEFLATE);\n     }\n \n     public void test7zDecryptUnarchive() throws Exception {\n         if (isStrongCryptoAvailable()) {\n-            test7zUnarchive(getFile(\"bla.encrypted.7z\"), \"foo\".getBytes(\"UTF-16LE\"));\n+            test7zUnarchive(getFile(\"bla.encrypted.7z\"), SevenZMethod.LZMA, // stack LZMA + AES\n+                            \"foo\".getBytes(\"UTF-16LE\"));\n         }\n     }\n \n-    private void test7zUnarchive(File f) throws Exception {\n-        test7zUnarchive(f, null);\n+    private void test7zUnarchive(File f, SevenZMethod m) throws Exception {\n+        test7zUnarchive(f, m, null);\n     }\n \n     public void testEncryptedArchiveRequiresPassword() throws Exception {\n                                                     (byte) 0xAF, 0x27, 0x1D}, 6));\n     }\n \n-    private void test7zUnarchive(File f, byte[] password) throws Exception {\n+    private void test7zUnarchive(File f, SevenZMethod m, byte[] password) throws Exception {\n         SevenZFile sevenZFile = new SevenZFile(f, password);\n         try {\n             SevenZArchiveEntry entry = sevenZFile.getNextEntry();\n             assertEquals(\"test1.xml\", entry.getName());\n+            assertEquals(m, entry.getContentMethods().iterator().next().getMethod());\n             entry = sevenZFile.getNextEntry();\n             assertEquals(\"test2.xml\", entry.getName());\n+            assertEquals(m, entry.getContentMethods().iterator().next().getMethod());\n             byte[] contents = new byte[(int)entry.getSize()];\n             int off = 0;\n             while ((off < contents.length)) {\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n \n import java.io.File;\n import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Collections;\n import java.util.Date;\n-import java.util.ArrayList;\n+import java.util.Iterator;\n import org.apache.commons.compress.AbstractTestCase;\n import org.tukaani.xz.LZMA2Options;\n \n     }\n \n     public void testLzma2WithIntConfiguration() throws Exception {\n-        output = new File(dir, \"bzip2-options.7z\");\n+        output = new File(dir, \"lzma2-options.7z\");\n         // 1 MB dictionary\n         createAndReadBack(output, Collections\n                           .singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2, 1 << 20)));\n     }\n \n     public void testLzma2WithOptionsConfiguration() throws Exception {\n-        output = new File(dir, \"bzip2-options2.7z\");\n+        output = new File(dir, \"lzma2-options2.7z\");\n         LZMA2Options opts = new LZMA2Options(1);\n         createAndReadBack(output, Collections\n                           .singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA2, opts)));\n+    }\n+\n+    public void testArchiveWithMixedMethods() throws Exception {\n+        output = new File(dir, \"mixed-methods.7z\");\n+        SevenZOutputFile outArchive = new SevenZOutputFile(output);\n+        try {\n+            addFile(outArchive, 0, true);\n+            addFile(outArchive, 1, true, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.BZIP2)));\n+        } finally {\n+            outArchive.close();\n+        }\n+\n+        SevenZFile archive = new SevenZFile(output);\n+        try {\n+            assertEquals(Boolean.TRUE,\n+                         verifyFile(archive, 0, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.LZMA2))));\n+            assertEquals(Boolean.TRUE,\n+                         verifyFile(archive, 1, Arrays.asList(new SevenZMethodConfiguration(SevenZMethod.BZIP2))));\n+        } finally {\n+            archive.close();\n+        }\n     }\n \n     private void testCompress252(int numberOfFiles, int numberOfNonEmptyFiles)\n \n     private void addFile(SevenZOutputFile archive, int index, boolean nonEmpty)\n         throws Exception {\n+        addFile(archive, index, nonEmpty, null);\n+    }\n+\n+    private void addFile(SevenZOutputFile archive, int index, boolean nonEmpty, Iterable<SevenZMethodConfiguration> methods)\n+        throws Exception {\n         SevenZArchiveEntry entry = new SevenZArchiveEntry();\n         entry.setName(\"foo/\" + index + \".txt\");\n+        entry.setContentMethods(methods);\n         archive.putArchiveEntry(entry);\n         archive.write(nonEmpty ? new byte[] { 'A' } : new byte[0]);\n         archive.closeArchiveEntry();\n     }\n \n     private Boolean verifyFile(SevenZFile archive, int index) throws Exception {\n+        return verifyFile(archive, index, null);\n+    }\n+\n+    private Boolean verifyFile(SevenZFile archive, int index,\n+                               Iterable<SevenZMethodConfiguration> methods) throws Exception {\n         SevenZArchiveEntry entry = archive.getNextEntry();\n         if (entry == null) {\n             return null;\n         assertEquals(1, entry.getSize());\n         assertEquals('A', archive.read());\n         assertEquals(-1, archive.read());\n+        if (methods != null) {\n+            assertContentMethodsEquals(methods, entry.getContentMethods());\n+        }\n         return Boolean.TRUE;\n     }\n \n \n         SevenZFile archive = new SevenZFile(output);\n         try {\n-            assertEquals(Boolean.TRUE, verifyFile(archive, 0));\n-        } finally {\n-            archive.close();\n-        }\n+            assertEquals(Boolean.TRUE, verifyFile(archive, 0, methods));\n+        } finally {\n+            archive.close();\n+        }\n+    }\n+\n+    private static void assertContentMethodsEquals(Iterable<? extends SevenZMethodConfiguration> expected,\n+                                                   Iterable<? extends SevenZMethodConfiguration> actual) {\n+        assertNotNull(actual);\n+        Iterator<? extends SevenZMethodConfiguration> expectedIter = expected.iterator();\n+        Iterator<? extends SevenZMethodConfiguration> actualIter = actual.iterator();\n+        while (expectedIter.hasNext()) {\n+            assertTrue(actualIter.hasNext());\n+            SevenZMethodConfiguration expConfig = expectedIter.next();\n+            SevenZMethodConfiguration actConfig = actualIter.next();\n+            assertEquals(expConfig.getMethod(), actConfig.getMethod());\n+        }\n+        assertFalse(actualIter.hasNext());\n     }\n }", "timestamp": 1393420610, "metainfo": ""}