{"sha": "bd0b4b60676525a5eb6733a6ad27c67319bec59f", "log": "fromLittleEndian failed for bytes > 127 if shift was bigger than three bytes", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/ByteUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ByteUtils.java\n      * contain the given number of bytes anymore\n      */\n     public static long fromLittleEndian(InputStream in, int length) throws IOException {\n-        // somewhat duplicates the ByteSupplier version in order to save othe creation of a wrapper object\n+        // somewhat duplicates the ByteSupplier version in order to save the creation of a wrapper object\n         checkReadLength(length);\n         long l = 0;\n         for (int i = 0; i < length; i++) {\n-            int b = in.read();\n+            long b = in.read();\n             if (b == -1) {\n                 throw new IOException(\"premature end of data\");\n             }\n         checkReadLength(length);\n         long l = 0;\n         for (int i = 0; i < length; i++) {\n-            int b = supplier.getAsByte();\n+            long b = supplier.getAsByte();\n             if (b == -1) {\n                 throw new IOException(\"premature end of data\");\n             }\n      */\n     public static void toLittleEndian(OutputStream out, final long value, final int length)\n         throws IOException {\n-        // somewhat duplicates the ByteConsumer version in order to save othe creation of a wrapper object\n+        // somewhat duplicates the ByteConsumer version in order to save the creation of a wrapper object\n         long num = value;\n         for (int i = 0; i < length; i++) {\n             out.write((int) (num & 0xff));\n--- a/src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java\n         assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(b));\n     }\n \n+    @Test\n+    public void fromLittleEndianFromArrayOneArgUnsignedInt32() {\n+        byte[] b = new byte[] { 2, 3, 4, (byte) 128 };\n+        assertEquals(2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256, fromLittleEndian(b));\n+    }\n+\n     @Test(expected = IllegalArgumentException.class)\n     public void fromLittleEndianFromArrayOneArgThrowsForLengthTooBig() {\n         fromLittleEndian(new byte[] { 1, 2, 3, 4, 5, 6, 7, 8, 9 });\n         assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(b, 1, 3));\n     }\n \n+    @Test\n+    public void fromLittleEndianFromArrayUnsignedInt32() {\n+        byte[] b = new byte[] { 1, 2, 3, 4, (byte) 128 };\n+        assertEquals(2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256, fromLittleEndian(b, 1, 4));\n+    }\n+\n     @Test(expected = IllegalArgumentException.class)\n     public void fromLittleEndianFromArrayThrowsForLengthTooBig() {\n         fromLittleEndian(new byte[0], 0, 9);\n     public void fromLittleEndianFromStream() throws IOException {\n         ByteArrayInputStream bin = new ByteArrayInputStream(new byte[] { 2, 3, 4, 5 });\n         assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(bin, 3));\n+    }\n+\n+    @Test\n+    public void fromLittleEndianFromStreamUnsignedInt32() throws IOException {\n+        ByteArrayInputStream bin = new ByteArrayInputStream(new byte[] { 2, 3, 4, (byte) 128 });\n+        assertEquals(2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256, fromLittleEndian(bin, 4));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     public void fromLittleEndianFromSupplier() throws IOException {\n         ByteArrayInputStream bin = new ByteArrayInputStream(new byte[] { 2, 3, 4, 5 });\n         assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(new InputStreamByteSupplier(bin), 3));\n+    }\n+\n+    @Test\n+    public void fromLittleEndianFromSupplierUnsignedInt32() throws IOException {\n+        ByteArrayInputStream bin = new ByteArrayInputStream(new byte[] { 2, 3, 4, (byte) 128 });\n+        assertEquals(2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256,\n+            fromLittleEndian(new InputStreamByteSupplier(bin), 4));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     }\n \n     @Test\n+    public void toLittleEndianToStreamUnsignedInt32() throws IOException {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        toLittleEndian(bos, 2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256, 4);\n+        bos.close();\n+        assertArrayEquals(new byte[] { 2, 3, 4, (byte) 128 }, bos.toByteArray());\n+    }\n+\n+    @Test\n     public void toLittleEndianToConsumer() throws IOException {\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         toLittleEndian(new OutputStreamByteConsumer(bos), 2 + 3 * 256 + 4 * 256 * 256, 3);\n         bos.close();\n         assertArrayEquals(new byte[] { 2, 3, 4 }, bos.toByteArray());\n     }\n+\n+    @Test\n+    public void toLittleEndianToConsumerUnsignedInt32() throws IOException {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        toLittleEndian(new OutputStreamByteConsumer(bos), 2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256, 4);\n+        bos.close();\n+        assertArrayEquals(new byte[] { 2, 3, 4, (byte) 128 }, bos.toByteArray());\n+    }\n+\n }", "timestamp": 1485260739, "metainfo": ""}