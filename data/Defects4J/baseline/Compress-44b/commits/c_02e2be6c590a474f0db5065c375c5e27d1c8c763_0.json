{"sha": "02e2be6c590a474f0db5065c375c5e27d1c8c763", "log": "STORED entry with data descriptors are not a problem for ZipFile and the output stream doesn't care anyway - so only check for the combination inside the input stream.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n      */\n     public boolean canReadEntryData(ArchiveEntry ae) {\n         if (ae instanceof ZipArchiveEntry) {\n-            return ZipUtil.canHandleEntryData((ZipArchiveEntry) ae);\n+            ZipArchiveEntry ze = (ZipArchiveEntry) ae;\n+            return ZipUtil.canHandleEntryData(ze)\n+                && supportsDataDescriptorFor(ze);\n+\n         }\n         return false;\n     }\n         if (start <= buffer.length && length >= 0 && start >= 0\n             && buffer.length - start >= length) {\n             ZipUtil.checkRequestedFeatures(current);\n+            if (!supportsDataDescriptorFor(current)) {\n+                throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException\n+                                                         .Feature\n+                                                         .DATA_DESCRIPTOR,\n+                                                         current);\n+            }\n \n             if (current.getMethod() == ZipArchiveOutputStream.STORED) {\n                 int csize = (int) current.getSize();\n         current.setSize(new ZipLong(b).getValue());\n     }\n \n+    /**\n+     * Whether this entry requires a data descriptor this library can work with.\n+     *\n+     * @return true if the entry doesn't require any data descriptor\n+     * or the method is DEFLATED).\n+     */\n+    private static boolean supportsDataDescriptorFor(ZipArchiveEntry entry) {\n+        return !entry.getGeneralPurposeBit().usesDataDescriptor()\n+            || entry.getMethod() == ZipArchiveEntry.DEFLATED;\n+    }\n+\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipUtil.java\n      * Whether this library is able to read or write the given entry.\n      */\n     static boolean canHandleEntryData(ZipArchiveEntry entry) {\n-        return supportsEncryptionOf(entry) && supportsMethodOf(entry)\n-            && supportsDataDescriptorFor(entry);\n+        return supportsEncryptionOf(entry) && supportsMethodOf(entry);\n     }\n \n     /**\n      */\n     private static boolean supportsMethodOf(ZipArchiveEntry entry) {\n         return entry.getMethod() == ZipArchiveEntry.STORED\n-            || entry.getMethod() == ZipArchiveEntry.DEFLATED;\n-    }\n-\n-    /**\n-     * Whether this entry requires a data descriptor this library can work with.\n-     *\n-     * @return true if the entry doesn't require any data descriptor\n-     * or the method is DEFLATED).\n-     */\n-    private static boolean supportsDataDescriptorFor(ZipArchiveEntry entry) {\n-        return !entry.getGeneralPurposeBit().usesDataDescriptor()\n             || entry.getMethod() == ZipArchiveEntry.DEFLATED;\n     }\n \n                 new UnsupportedZipFeatureException(UnsupportedZipFeatureException\n                                                    .Feature.METHOD, ze);\n         }\n-        if (!supportsDataDescriptorFor(ze)) {\n-            throw\n-                new UnsupportedZipFeatureException(UnsupportedZipFeatureException\n-                                                   .Feature.DATA_DESCRIPTOR, ze);\n-        }\n     }\n }", "timestamp": 1268841300, "metainfo": ""}