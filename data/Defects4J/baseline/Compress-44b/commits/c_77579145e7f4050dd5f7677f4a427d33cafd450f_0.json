{"sha": "77579145e7f4050dd5f7677f4a427d33cafd450f", "log": "Refactor code into a reusable output stream.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n package org.apache.commons.compress.archivers.sevenz;\n \n import java.io.FilterInputStream;\n-import java.io.FilterOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n+import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;\n import org.tukaani.xz.ARMOptions;\n import org.tukaani.xz.ARMThumbOptions;\n import org.tukaani.xz.FilterOptions;\n         }\n         @Override\n         OutputStream encode(final OutputStream out, final Object options) {\n-            final FinishableOutputStream fo = opts.getOutputStream(new FinishableWrapperOutputStream(out));\n-            return new FilterOutputStream(fo) {\n-                @Override\n-                public void flush() {\n-                }\n-            };\n+            return new FlushShieldFilterOutputStream(opts.getOutputStream(new FinishableWrapperOutputStream(out)));\n         }\n     }\n     \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java\n  */\n package org.apache.commons.compress.archivers.sevenz;\n \n-import java.io.FilterOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n \n+import org.apache.commons.compress.utils.FlushShieldFilterOutputStream;\n import org.tukaani.xz.LZMA2Options;\n import org.tukaani.xz.LZMAInputStream;\n import org.tukaani.xz.LZMAOutputStream;\n     @Override\n     OutputStream encode(final OutputStream out, final Object opts)\n         throws IOException {\n-        return new FilterOutputStream(new LZMAOutputStream(out, getOptions(opts), false)) {\n-            @Override\n-            public void flush() {\n-                // NOOP as LZMAOutputStream throws an exception in flush\n-            }\n-        };\n+        // NOOP as LZMAOutputStream throws an exception in flush\n+        return new FlushShieldFilterOutputStream(new LZMAOutputStream(out, getOptions(opts), false));\n     }\n \n     @Override\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/utils/FlushShieldFilterOutputStream.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.commons.compress.utils;\n+\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+/**\n+ * Re-implements {@link flush()} to do nothing.\n+ */\n+public class FlushShieldFilterOutputStream extends FilterOutputStream {\n+\n+    public FlushShieldFilterOutputStream(OutputStream out) {\n+        super(out);\n+    }\n+\n+    @Override\n+    public void flush() throws IOException {\n+        // NO IMPLEMENTATION.\n+    }\n+\n+}", "timestamp": 1481252110, "metainfo": ""}