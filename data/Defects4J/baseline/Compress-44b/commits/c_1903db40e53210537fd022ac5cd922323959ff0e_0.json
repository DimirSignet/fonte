{"sha": "1903db40e53210537fd022ac5cd922323959ff0e", "log": "Add a JarMarker to the very first entry in a jar.  SANDBOX-289  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n import java.io.OutputStream;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.JarMarker;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n \n+/**\n+ * Subclass that adds a special extra field to the very first entry\n+ * which allows the created archive to be used as an executable jar on\n+ * Solaris.\n+ */\n public class JarArchiveOutputStream extends ZipArchiveOutputStream {\n \n-    public JarArchiveOutputStream( final OutputStream out ) {\n+    private boolean jarMarkerAdded = false;\n+\n+    public JarArchiveOutputStream(final OutputStream out) {\n         super(out);\n     }\n \n-    public void putArchiveEntry(ArchiveEntry entry) throws IOException {\n-        // TODO special jar stuff\n-        super.putArchiveEntry((ZipArchiveEntry) entry);\n+    public void putNextEntry(ZipArchiveEntry ze) throws IOException {\n+        if (!jarMarkerAdded) {\n+            ze.addAsFirstExtraField(JarMarker.getInstance());\n+            jarMarkerAdded = true;\n+        }\n+        super.putNextEntry(ze);\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n     /**\n      * Adds an extra fields - replacing an already present extra field\n      * of the same type.\n+     *\n+     * <p>If no extra field of the same type exists, the field will be\n+     * added as last field.</p>\n      * @param ze an extra field\n      * @since 1.1\n      */\n             extraFields = new LinkedHashMap();\n         }\n         extraFields.put(ze.getHeaderId(), ze);\n+        setExtra();\n+    }\n+\n+    /**\n+     * Adds an extra fields - replacing an already present extra field\n+     * of the same type.\n+     *\n+     * <p>The new extra field will be the first one.</p>\n+     * @param ze an extra field\n+     * @since 1.1\n+     */\n+    public void addAsFirstExtraField(ZipExtraField ze) {\n+        LinkedHashMap copy = extraFields;\n+        extraFields = new LinkedHashMap();\n+        extraFields.put(ze.getHeaderId(), ze);\n+        if (copy != null) {\n+            copy.remove(ze.getHeaderId());\n+            extraFields.putAll(copy);\n+        }\n         setExtra();\n     }\n \n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers.jar;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.compress.archivers.zip.JarMarker;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipExtraField;\n+import org.apache.commons.compress.archivers.zip.ZipFile;\n+\n+public class JarArchiveOutputStreamTest extends TestCase {\n+\n+    public void testJarMarker() throws IOException {\n+        File testArchive = File.createTempFile(\"jar-aostest\", \".jar\");\n+        JarArchiveOutputStream out = null;\n+        ZipFile zf = null;\n+        try {\n+\n+            out = new JarArchiveOutputStream(new FileOutputStream(testArchive));\n+            out.putArchiveEntry(new ZipArchiveEntry(\"foo/\"));\n+            out.closeEntry();\n+            out.putArchiveEntry(new ZipArchiveEntry(\"bar/\"));\n+            out.closeEntry();\n+            out.close();\n+            out = null;\n+\n+            zf = new ZipFile(testArchive);\n+            ZipArchiveEntry ze = zf.getEntry(\"foo/\");\n+            assertNotNull(ze);\n+            ZipExtraField[] fes = ze.getExtraFields();\n+            assertEquals(1, fes.length);\n+            assertTrue(fes[0] instanceof JarMarker);\n+\n+            ze = zf.getEntry(\"bar/\");\n+            assertNotNull(ze);\n+            fes = ze.getExtraFields();\n+            assertEquals(0, fes.length);\n+        } finally {\n+            if (out != null) {\n+                try {\n+                    out.close();\n+                } catch (IOException e) { /* swallow */ }\n+            }\n+            ZipFile.closeQuietly(zf);\n+            if (testArchive.exists()) {\n+                testArchive.delete();\n+            }\n+        }\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n         }\n     }\n \n+    /**\n+     * test handling of extra fields\n+     *\n+     * @since 1.1\n+     */\n+    public void testAddAsFirstExtraField() {\n+        AsiExtraField a = new AsiExtraField();\n+        a.setDirectory(true);\n+        a.setMode(0755);\n+        UnrecognizedExtraField u = new UnrecognizedExtraField();\n+        u.setHeaderId(new ZipShort(1));\n+        u.setLocalFileDataData(new byte[0]);\n+\n+        ZipArchiveEntry ze = new ZipArchiveEntry(\"test/\");\n+        ze.setExtraFields(new ZipExtraField[] {a, u});\n+        byte[] data1 = ze.getExtra();\n+\n+        UnrecognizedExtraField u2 = new UnrecognizedExtraField();\n+        u2.setHeaderId(new ZipShort(1));\n+        u2.setLocalFileDataData(new byte[] {1});\n+\n+        ze.addAsFirstExtraField(u2);\n+        byte[] data2 = ze.getExtra();\n+        ZipExtraField[] result = ze.getExtraFields();\n+        assertEquals(\"second pass\", 2, result.length);\n+        assertSame(u2, result[0]);\n+        assertSame(a, result[1]);\n+        assertEquals(\"length second pass\", data1.length + 1, data2.length);\n+\n+        UnrecognizedExtraField u3 = new UnrecognizedExtraField();\n+        u3.setHeaderId(new ZipShort(2));\n+        u3.setLocalFileDataData(new byte[] {1});\n+        ze.addAsFirstExtraField(u3);\n+        result = ze.getExtraFields();\n+        assertEquals(\"third pass\", 3, result.length);\n+        assertSame(u3, result[0]);\n+        assertSame(u2, result[1]);\n+        assertSame(a, result[2]);\n+    }\n+\n     public void testUnixMode() {\n         ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\");\n         assertEquals(0, ze.getPlatform());", "timestamp": 1234972362, "metainfo": ""}