{"sha": "c87331031f18d5a41266f0fa83b0eb119d840e05", "log": "Removed the unnecessary @inheritDoc tags  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveEntry.java\n              0, 0, DEFAULT_MODE, inputFile.lastModified() / 1000);\n     }\n \n-    /** {@inheritDoc} */\n     public long getSize() {\n         return this.getLength();\n     }\n \n-    /** {@inheritDoc} */\n     public String getName() {\n         return name;\n     }\n         return lastModified;\n     }\n \n-    /** {@inheritDoc} */\n     public Date getLastModifiedDate() {\n         return new Date(1000 * getLastModified());\n     }\n         return length;\n     }\n \n-    /** {@inheritDoc} */\n     public boolean isDirectory() {\n         return false;\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int hashCode() {\n         final int prime = 31;\n         return result;\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public boolean equals(Object obj) {\n         if (this == obj) {\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStream.java\n         return header.length;\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void closeArchiveEntry() throws IOException {\n         if(finished) {\n         haveUnclosedEntry = false;\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void putArchiveEntry( final ArchiveEntry pEntry ) throws IOException {\n         if(finished) {\n         prevEntry = null;\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n             throws IOException {\n         return new ArArchiveEntry(inputFile, entryName);\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void finish() throws IOException {\n         if(haveUnclosedEntry) {\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveEntry.java\n         return this.mtime;\n     }\n \n-    /** {@inheritDoc} */\n     public Date getLastModifiedDate() {\n         return new Date(1000 * getTime());\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n         return total;\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public ArchiveEntry getNextEntry() throws IOException {\n         return getNextCPIOEntry();\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveEntry.java\n         this.name = name;\n     }\n \n-    /** {@inheritDoc} */\n     public Date getLastModifiedDate() {\n         return new Date(mtime);\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n         return new Date(modTime * MILLIS_PER_SECOND);\n     }\n \n-    /** {@inheritDoc} */\n     public Date getLastModifiedDate() {\n         return getModTime();\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AbstractUnicodeExtraField.java\n         data = null;\n     }\n \n-    /** {@inheritDoc} */\n     public byte[] getCentralDirectoryData() {\n         if (data == null) {\n             this.assembleData();\n         return b;\n     }\n \n-    /** {@inheritDoc} */\n     public ZipShort getCentralDirectoryLength() {\n         if (data == null) {\n             assembleData();\n         return new ZipShort(data.length);\n     }\n \n-    /** {@inheritDoc} */\n     public byte[] getLocalFileDataData() {\n         return getCentralDirectoryData();\n     }\n \n-    /** {@inheritDoc} */\n     public ZipShort getLocalFileDataLength() {\n         return getCentralDirectoryLength();\n     }\n \n-    /** {@inheritDoc} */\n     public void parseFromLocalFileData(byte[] buffer, int offset, int length)\n         throws ZipException {\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnicodeCommentExtraField.java\n         super(comment, bytes);\n     }\n \n-    /** {@inheritDoc} */\n     public ZipShort getHeaderId() {\n         return UCOM_ID;\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnicodePathExtraField.java\n         super(name, bytes);\n     }\n \n-    /** {@inheritDoc} */\n     public ZipShort getHeaderId() {\n         return UPATH_ID;\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraField.java\n         this.diskStart = diskStart;\n     }\n \n-    /** {@inheritDoc} */\n     public ZipShort getHeaderId() {\n         return HEADER_ID;\n     }\n \n-    /** {@inheritDoc} */\n     public ZipShort getLocalFileDataLength() {\n         return new ZipShort(size != null ? 2 * DWORD : 0);\n     }\n \n-    /** {@inheritDoc} */\n     public ZipShort getCentralDirectoryLength() {\n         return new ZipShort((size != null ? DWORD : 0)\n                             + (compressedSize != null ? DWORD : 0)\n                             + (diskStart != null ? WORD : 0));\n     }\n \n-    /** {@inheritDoc} */\n     public byte[] getLocalFileDataData() {\n         if (size != null || compressedSize != null) {\n             if (size == null || compressedSize == null) {\n         return EMPTY;\n     }\n \n-    /** {@inheritDoc} */\n     public byte[] getCentralDirectoryData() {\n         byte[] data = new byte[getCentralDirectoryLength().getValue()];\n         int off = addSizes(data);\n         return data;\n     }\n \n-    /** {@inheritDoc} */\n     public void parseFromLocalFileData(byte[] buffer, int offset, int length)\n         throws ZipException {\n         if (length == 0) {\n         }\n     }\n \n-    /** {@inheritDoc} */\n     public void parseFromCentralDirectoryData(byte[] buffer, int offset,\n                                               int length)\n         throws ZipException {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n         }\n     }\n \n-    /** {@inheritDoc} */\n     public Date getLastModifiedDate() {\n         return new Date(getTime());\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n         }\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public ArchiveEntry getNextEntry() throws IOException {\n         return getNextZipEntry();\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorInputStream.java\n         setupBlock();\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int read() throws IOException {\n         if (this.in != null) {\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n         init();\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void write(final int b) throws IOException {\n         if (this.out != null) {\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n         while (inData.readUnsignedByte() != 0x00) {}\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int read() throws IOException {\n         return read(oneByte, 0, 1) == -1 ? -1 : (oneByte[0] & 0xFF);\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorOutputStream.java\n         out = new GZIPOutputStream(outputStream);\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void write(int b) throws IOException {\n         out.write(b);\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/InMemoryCachingStreamBridge.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/InMemoryCachingStreamBridge.java\n         super(new ByteArrayOutputStream());\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     InputStream getInputView() throws IOException {\n         return new ByteArrayInputStream(((ByteArrayOutputStream) out)\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorInputStream.java\n         jarOut.close();\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int read() throws IOException {\n         return streamBridge.getInput().read();\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int read(byte[] b) throws IOException {\n         return streamBridge.getInput().read(b);\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int read(byte[] b, int off, int count) throws IOException {\n         return streamBridge.getInput().read(b, off, count);\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int available() throws IOException {\n         return streamBridge.getInput().available();\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public boolean markSupported() {\n         try {\n         }\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void mark(int limit) {\n         try {\n         }\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void reset() throws IOException {\n         streamBridge.getInput().reset();\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public long skip(long count) throws IOException {\n         return streamBridge.getInput().skip(count);\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200CompressorOutputStream.java\n         properties = props;\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void write(int b) throws IOException {\n         streamBridge.write(b);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     public void write(byte[] b) throws IOException {\n         streamBridge.write(b);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     public void write(byte[] b, int from, int length) throws IOException {\n         streamBridge.write(b, from, length);\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/TempFileCachingStreamBridge.java\n         out = new FileOutputStream(f);\n     }\n \n-    /**\n-     * {@inheritDoc}\n-     */\n     @Override\n     InputStream getInputView() throws IOException {\n         out.close();\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n         }\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int read() throws IOException {\n         int ret = in.read();\n         return ret;\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int read(byte[] buf, int off, int len) throws IOException {\n         int ret = in.read(buf, off, len);\n         return ret;\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public long skip(long n) throws IOException {\n         return in.skip(n);\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public int available() throws IOException {\n         return in.available();\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void close() throws IOException {\n         in.close();\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java\n         out = new XZOutputStream(outputStream, new LZMA2Options(preset));\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void write(int b) throws IOException {\n         out.write(b);\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void write(byte[] buf, int off, int len) throws IOException {\n         out.write(buf, off, len);\n         out.finish();\n     }\n \n-    /** {@inheritDoc} */\n     @Override\n     public void close() throws IOException {\n         out.close();\n--- a/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveEntry.java\n         return false;\n     }\n \n-    /** {@inheritDoc} */\n     public Date getLastModifiedDate() {\n         return new Date();\n     }", "timestamp": 1375874856, "metainfo": ""}