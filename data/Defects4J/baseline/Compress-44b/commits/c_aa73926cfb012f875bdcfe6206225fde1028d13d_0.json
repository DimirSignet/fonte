{"sha": "aa73926cfb012f875bdcfe6206225fde1028d13d", "log": "support for XZ compression format submitted by Lasse Collin.  COMPRESS-156  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n import org.apache.commons.compress.compressors.bzip2.BZip2CompressorOutputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorOutputStream;\n+import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;\n+import org.apache.commons.compress.compressors.xz.XZCompressorOutputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorOutputStream;\n \n      * @since Commons Compress 1.1\n      */\n     public static final String BZIP2 = \"bzip2\";\n+\n     /**\n      * Constant used to identify the GZIP compression algorithm.\n      * @since Commons Compress 1.1\n      * @since Commons Compress 1.3\n      */\n     public static final String PACK200 = \"pack200\";\n+\n+    /**\n+     * Constant used to identify the XZ compression method.\n+     * @since Commons Compress 1.4\n+     */\n+    public static final String XZ = \"xz\";\n \n     /**\n      * Create an compressor input stream from an input stream, autodetecting\n                 return new GzipCompressorInputStream(in);\n             }\n \n+            if (XZCompressorInputStream.matches(signature, signatureLength)) {\n+                return new XZCompressorInputStream(in);\n+            }\n+\n             if (Pack200CompressorInputStream.matches(signature, signatureLength)) {\n                 return new Pack200CompressorInputStream(in);\n             }\n     /**\n      * Create a compressor input stream from a compressor name and an input stream.\n      * \n-     * @param name of the compressor, i.e. \"gz\", \"bzip2\" or \"pack200\"\n+     * @param name of the compressor, i.e. \"gz\", \"bzip2\", \"xz\", or \"pack200\"\n      * @param in the input stream\n      * @return compressor input stream\n      * @throws CompressorException if the compressor name is not known\n                 return new BZip2CompressorInputStream(in);\n             }\n \n+            if (XZ.equalsIgnoreCase(name)) {\n+                return new XZCompressorInputStream(in);\n+            }\n+\n             if (PACK200.equalsIgnoreCase(name)) {\n                 return new Pack200CompressorInputStream(in);\n             }\n     /**\n      * Create an compressor output stream from an compressor name and an input stream.\n      * \n-     * @param name the compressor name, i.e. \"gz\", \"bzip2\" or \"pack200\"\n+     * @param name the compressor name, i.e. \"gz\", \"bzip2\", \"xz\", or \"pack200\"\n      * @param out the output stream\n      * @return the compressor output stream\n      * @throws CompressorException if the archiver name is not known\n                 return new BZip2CompressorOutputStream(out);\n             }\n \n+            if (XZ.equalsIgnoreCase(name)) {\n+                return new XZCompressorOutputStream(out);\n+            }\n+\n             if (PACK200.equalsIgnoreCase(name)) {\n                 return new Pack200CompressorOutputStream(out);\n             }\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.xz;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import org.tukaani.xz.XZ;\n+import org.tukaani.xz.SingleXZInputStream;\n+import org.tukaani.xz.XZInputStream;\n+\n+import org.apache.commons.compress.compressors.CompressorInputStream;\n+\n+/**\n+ * XZ decompressor.\n+ * @since Commons Compress 1.4\n+ */\n+public class XZCompressorInputStream extends CompressorInputStream {\n+    private final InputStream in;\n+\n+    /**\n+     * Checks if the signature matches what is expected for a .xz file.\n+     *\n+     * @param   signature     the bytes to check\n+     * @param   length        the number of bytes to check\n+     * @return  true if signature matches the .xz magic bytes, false otherwise\n+     */\n+    public static boolean matches(byte[] signature, int length) {\n+        if (length < XZ.HEADER_MAGIC.length)\n+            return false;\n+\n+        for (int i = 0; i < XZ.HEADER_MAGIC.length; ++i)\n+            if (signature[i] != XZ.HEADER_MAGIC[i])\n+                return false;\n+\n+        return true;\n+    }\n+\n+    /**\n+     * Creates a new input stream that decompresses XZ-compressed data\n+     * from the specified input stream. This supports concatenated .xz files.\n+     *\n+     * @param       inputStream where to read the compressed data\n+     *\n+     * @throws      IOException if the input is not in the .xz format,\n+     *                          the input is corrupt or truncated, the .xz\n+     *                          headers specify options that are not supported\n+     *                          by this implementation, or the underlying\n+     *                          <code>inputStream</code> throws an exception\n+     */\n+    public XZCompressorInputStream(InputStream inputStream)\n+            throws IOException {\n+        this(inputStream, true);\n+    }\n+\n+    /**\n+     * Creates a new input stream that decompresses XZ-compressed data\n+     * from the specified input stream.\n+     *\n+     * @param       inputStream where to read the compressed data\n+     * @param       decompressConcatenated\n+     *                          if true, decompress until the end of the\n+     *                          input; if false, stop after the first .xz\n+     *                          stream and leave the input position to point\n+     *                          to the next byte after the .xz stream\n+     *\n+     * @throws      IOException if the input is not in the .xz format,\n+     *                          the input is corrupt or truncated, the .xz\n+     *                          headers specify options that are not supported\n+     *                          by this implementation, or the underlying\n+     *                          <code>inputStream</code> throws an exception\n+     */\n+    public XZCompressorInputStream(InputStream inputStream,\n+                                   boolean decompressConcatenated)\n+            throws IOException {\n+        if (decompressConcatenated)\n+            in = new XZInputStream(inputStream);\n+        else\n+            in = new SingleXZInputStream(inputStream);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public int read() throws IOException {\n+        int ret = in.read();\n+        count(ret == -1 ? -1 : 1);\n+        return ret;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public int read(byte[] buf, int off, int len) throws IOException {\n+        int ret = in.read(buf, off, len);\n+        count(ret);\n+        return ret;\n+    }\n+\n+    /** {@inheritDoc} */\n+    public long skip(long n) throws IOException {\n+        return in.skip(n);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public int available() throws IOException {\n+        return in.available();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void close() throws IOException {\n+        in.close();\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStream.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.xz;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import org.tukaani.xz.LZMA2Options;\n+import org.tukaani.xz.XZOutputStream;\n+\n+import org.apache.commons.compress.compressors.CompressorOutputStream;\n+\n+/**\n+ * XZ compressor.\n+ * @since Commons Compress 1.4\n+ */\n+public class XZCompressorOutputStream extends CompressorOutputStream {\n+    private final XZOutputStream out;\n+\n+    /**\n+     * Creates a new XZ compressor using the default LZMA2 options.\n+     * This is equivalent to <code>XZCompressorOutputStream(6)</code>.\n+     */\n+    public XZCompressorOutputStream(OutputStream outputStream)\n+            throws IOException {\n+        out = new XZOutputStream(outputStream, new LZMA2Options());\n+    }\n+\n+    /**\n+     * Creates a new XZ compressor using the specified LZMA2 preset level.\n+     * <p>\n+     * The presets 0-3 are fast presets with medium compression.\n+     * The presets 4-6 are fairly slow presets with high compression.\n+     * The default preset is 6.\n+     * <p>\n+     * The presets 7-9 are like the preset 6 but use bigger dictionaries\n+     * and have higher compressor and decompressor memory requirements.\n+     * Unless the uncompressed size of the file exceeds 8&nbsp;MiB,\n+     * 16&nbsp;MiB, or 32&nbsp;MiB, it is waste of memory to use the\n+     * presets 7, 8, or 9, respectively.\n+     */\n+    public XZCompressorOutputStream(OutputStream outputStream, int preset)\n+            throws IOException {\n+        out = new XZOutputStream(outputStream, new LZMA2Options(preset));\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void write(int b) throws IOException {\n+        out.write(b);\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void write(byte[] buf, int off, int len) throws IOException {\n+        out.write(buf, off, len);\n+    }\n+\n+    /**\n+     * Flushes the encoder and calls <code>outputStream.flush()</code>.\n+     * All buffered pending data will then be decompressible from\n+     * the output stream. Calling this function very often may increase\n+     * the compressed file size a lot.\n+     */\n+    public void flush() throws IOException {\n+        out.flush();\n+    }\n+\n+    /**\n+     * Finishes compression without closing the underlying stream.\n+     * No more data can be written to this stream after finishing.\n+     */\n+    public void finish() throws IOException {\n+        out.finish();\n+    }\n+\n+    /** {@inheritDoc} */\n+    public void close() throws IOException {\n+        out.close();\n+    }\n+}", "timestamp": 1320250421, "metainfo": ""}