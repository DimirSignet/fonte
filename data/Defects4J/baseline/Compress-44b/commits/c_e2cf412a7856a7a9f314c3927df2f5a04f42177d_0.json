{"sha": "e2cf412a7856a7a9f314c3927df2f5a04f42177d", "log": "COMPRESS-189 Inflater may return 0 if it needs more input, we don't handle this case properly  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n      */\n     private int readDeflated(byte[] buffer, int start, int length)\n         throws IOException {\n-        if (inf.needsInput()) {\n-            fill();\n-            if (buf.lengthOfLastRead > 0) {\n-                current.bytesReadFromStream += buf.lengthOfLastRead;\n-            }\n-        }\n-        int read = 0;\n-        try {\n-            read = inf.inflate(buffer, start, length);\n-        } catch (DataFormatException e) {\n-            throw new ZipException(e.getMessage());\n-        }\n+        int read = readFromInflater(buffer, start, length);\n         if (read == 0) {\n-            if (inf.finished()) {\n+            if (inf.finished() || inf.needsDictionary()) {\n                 return -1;\n             } else if (buf.lengthOfLastRead == -1) {\n                 throw new IOException(\"Truncated ZIP file\");\n             }\n         }\n         crc.update(buffer, start, read);\n+        return read;\n+    }\n+\n+    /**\n+     * Potentially reads more bytes to fill the inflater's buffer and\n+     * reads from it.\n+     */\n+    private int readFromInflater(byte[] buffer, int start, int length)\n+        throws IOException {\n+        int read = 0;\n+        do {\n+            if (inf.needsInput()) {\n+                fill();\n+                if (buf.lengthOfLastRead > 0) {\n+                    current.bytesReadFromStream += buf.lengthOfLastRead;\n+                } else {\n+                    break;\n+                }\n+            }\n+            try {\n+                read = inf.inflate(buffer, start, length);\n+            } catch (DataFormatException e) {\n+                throw new ZipException(e.getMessage());\n+            }\n+        } while (read == 0 && inf.needsInput());\n         return read;\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java\n package org.apache.commons.compress.archivers.zip;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n \n+import java.io.BufferedInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.net.URI;\n import java.net.URL;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n public class ZipArchiveInputStreamTest {\n         }\n     }\n \n-}\n+    /**\n+     * @see \"https://issues.apache.org/jira/browse/COMPRESS-189\"\n+     */\n+    @Test\n+    @Ignore\n+    public void properUseOfInflater() throws Exception {\n+        URL zip = getClass().getResource(\"/COMPRESS-189.zip\");\n+        ZipFile zf = null;\n+        ZipArchiveInputStream in = null;\n+        try {\n+            zf = new ZipFile(new File(new URI(zip.toString())));\n+            ZipArchiveEntry zae = zf.getEntry(\"USD0558682-20080101.ZIP\");\n+            in = new ZipArchiveInputStream(new BufferedInputStream(zf.getInputStream(zae)));\n+            ZipArchiveEntry innerEntry;\n+            while ((innerEntry = in.getNextZipEntry()) != null) {\n+                if (innerEntry.getName().endsWith(\"XML\")) {\n+                    assertTrue(0 < in.read());\n+                }\n+            }\n+        } finally {\n+            if (zf != null) {\n+                zf.close();\n+            }\n+            if (in != null) {\n+                in.close();\n+            }\n+        }\n+    }\n+\n+}", "timestamp": 1356677601, "metainfo": ""}