{"sha": "b1caea2095fda0685c40b46ea1f7f22da457c9f6", "log": "Add test cases for concatenated compressed files  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n         }\n         throw new CompressorException(\"Compressor: \" + name + \" not found.\");\n     }\n+\n+    // For Unit tests\n+    boolean getDecompressConcatenated() {\n+        return decompressConcatenated;\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors;\n+\n+import static org.apache.commons.compress.AbstractTestCase.getFile;\n+\n+import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+\n+import junit.framework.TestCase;\n+\n+import org.apache.commons.compress.compressors.CompressorException;\n+import org.apache.commons.compress.compressors.CompressorInputStream;\n+import org.apache.commons.compress.compressors.CompressorStreamFactory;\n+import org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream;\n+import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n+import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;\n+import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;\n+\n+@SuppressWarnings(\"deprecation\") // deliberately tests setDecompressConcatenated\n+public final class DetectCompressorTestCase extends TestCase {\n+\n+    public DetectCompressorTestCase(String name) {\n+        super(name);\n+    }\n+\n+    final CompressorStreamFactory factory = new CompressorStreamFactory();\n+    private static final CompressorStreamFactory factoryTrue = new CompressorStreamFactory(true);\n+    private static final CompressorStreamFactory factoryFalse = new CompressorStreamFactory(false);\n+\n+    // Must be static to allow use in the TestData entries\n+    private static final CompressorStreamFactory factorySetTrue;\n+    private static final CompressorStreamFactory factorySetFalse;\n+\n+    static {\n+        factorySetTrue = new CompressorStreamFactory();\n+        factorySetTrue.setDecompressConcatenated(true);\n+        factorySetFalse = new CompressorStreamFactory();\n+        factorySetFalse.setDecompressConcatenated(false);        \n+    }\n+\n+    static class TestData {\n+        final String fileName; // The multiple file name\n+        final char[] entryNames; // expected entries ...\n+        final CompressorStreamFactory factory; // ... when using this factory\n+        final boolean concat; // expected value for decompressConcatenated\n+        TestData(String name, char[] names, CompressorStreamFactory factory, boolean concat) {\n+            this.fileName = name;\n+            this.entryNames = names;\n+            this.factory = factory;\n+            this.concat = concat;\n+        }\n+    }\n+\n+    private final TestData[] tests = {\n+        new TestData(\"multiple.bz2\", new char[]{'a','b'}, factoryTrue, true),\n+        new TestData(\"multiple.bz2\", new char[]{'a','b'}, factorySetTrue, true),\n+        new TestData(\"multiple.bz2\", new char[]{'a'}, factoryFalse, false),\n+        new TestData(\"multiple.bz2\", new char[]{'a'}, factorySetFalse, false),\n+        new TestData(\"multiple.bz2\", new char[]{'a'}, factory, false),\n+\n+        new TestData(\"multiple.gz\", new char[]{'a','b'}, factoryTrue, true),\n+        new TestData(\"multiple.gz\", new char[]{'a','b'}, factorySetTrue, true),\n+        new TestData(\"multiple.gz\", new char[]{'a'}, factoryFalse, false),\n+        new TestData(\"multiple.gz\", new char[]{'a'}, factorySetFalse, false),\n+        new TestData(\"multiple.gz\", new char[]{'a'}, factory, false),\n+\n+        new TestData(\"multiple.xz\", new char[]{'a','b'}, factoryTrue, true),\n+        new TestData(\"multiple.xz\", new char[]{'a','b'}, factorySetTrue, true),\n+        new TestData(\"multiple.xz\", new char[]{'a'}, factoryFalse, false),\n+        new TestData(\"multiple.xz\", new char[]{'a'}, factorySetFalse, false),\n+        new TestData(\"multiple.xz\", new char[]{'a'}, factory, false),\n+    };\n+    \n+    public void testDetection() throws Exception {\n+        CompressorInputStream bzip2 = getStreamFor(\"bla.txt.bz2\"); \n+        assertNotNull(bzip2);\n+        assertTrue(bzip2 instanceof BZip2CompressorInputStream);\n+\n+        CompressorInputStream gzip = getStreamFor(\"bla.tgz\");\n+        assertNotNull(gzip);\n+        assertTrue(gzip instanceof GzipCompressorInputStream);\n+        \n+        CompressorInputStream pack200 = getStreamFor(\"bla.pack\");\n+        assertNotNull(pack200);\n+        assertTrue(pack200 instanceof Pack200CompressorInputStream);\n+\n+        CompressorInputStream xz = getStreamFor(\"bla.tar.xz\");\n+        assertNotNull(xz);\n+        assertTrue(xz instanceof XZCompressorInputStream);\n+\n+        try {\n+            factory.createCompressorInputStream(new ByteArrayInputStream(new byte[0]));\n+            fail(\"No exception thrown for an empty input stream\");\n+        } catch (CompressorException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void testMutiples() throws Exception {\n+        for(int i=0; i <tests.length; i++) {\n+            TestData test = tests[i];\n+            final CompressorStreamFactory fac = test.factory;\n+            assertNotNull(\"Test entry \"+i, fac);\n+            assertEquals(\"Test entry \"+i, test.concat, fac.getDecompressConcatenated());\n+            CompressorInputStream in = getStreamFor(test.fileName, fac);\n+            assertNotNull(\"Test entry \"+i,in);\n+            for (char entry : test.entryNames) {\n+                assertEquals(\"Test entry\" + i, entry, in.read());                \n+            }\n+            assertEquals(0, in.available());\n+            assertEquals(-1, in.read());\n+        }\n+    }\n+\n+    private CompressorInputStream getStreamFor(String resource)\n+            throws CompressorException, IOException {\n+        return factory.createCompressorInputStream(\n+                   new BufferedInputStream(new FileInputStream(\n+                       getFile(resource))));\n+    }\n+\n+    private CompressorInputStream getStreamFor(String resource, CompressorStreamFactory factory)\n+            throws CompressorException, IOException {\n+        return factory.createCompressorInputStream(\n+                   new BufferedInputStream(new FileInputStream(\n+                       getFile(resource))));\n+    }\n+\n+}", "timestamp": 1424103003, "metainfo": ""}