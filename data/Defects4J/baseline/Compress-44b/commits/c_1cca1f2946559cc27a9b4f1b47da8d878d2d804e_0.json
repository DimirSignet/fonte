{"sha": "1cca1f2946559cc27a9b4f1b47da8d878d2d804e", "log": "COMPRESS-285 add some tests that can only test the XZ is there case - wouldn't know how to get rid of it during tests  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n             cachedXZAvailability.set(hasXz ? CACHED_AVAILABLE : CACHED_UNAVAILABLE);\n         }\n     }\n+\n+    // only exists to support unit tests\n+    static int getCachedXZAvailability() {\n+        return cachedXZAvailability.get();\n+    }\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.xz;\n+\n+import junit.framework.TestCase;\n+\n+public class XZUtilsTestCase extends TestCase {\n+\n+    public void testIsCompressedFilename() {\n+        assertFalse(XZUtils.isCompressedFilename(\"\"));\n+        assertFalse(XZUtils.isCompressedFilename(\".xz\"));\n+\n+        assertTrue(XZUtils.isCompressedFilename(\"x.txz\"));\n+        assertTrue(XZUtils.isCompressedFilename(\"x.xz\"));\n+        assertTrue(XZUtils.isCompressedFilename(\"x-xz\"));\n+\n+        assertFalse(XZUtils.isCompressedFilename(\"xxgz\"));\n+        assertFalse(XZUtils.isCompressedFilename(\"xzz\"));\n+        assertFalse(XZUtils.isCompressedFilename(\"xaz\"));\n+\n+        assertFalse(XZUtils.isCompressedFilename(\"x.txz \"));\n+        assertFalse(XZUtils.isCompressedFilename(\"x.txz\\n\"));\n+        assertFalse(XZUtils.isCompressedFilename(\"x.txz.y\"));\n+    }\n+\n+    public void testGetUncompressedFilename() {\n+        assertEquals(\"\", XZUtils.getUncompressedFilename(\"\"));\n+        assertEquals(\".xz\", XZUtils.getUncompressedFilename(\".xz\"));\n+\n+        assertEquals(\"x.tar\", XZUtils.getUncompressedFilename(\"x.txz\"));\n+        assertEquals(\"x\", XZUtils.getUncompressedFilename(\"x.xz\"));\n+        assertEquals(\"x\", XZUtils.getUncompressedFilename(\"x-xz\"));\n+\n+        assertEquals(\"x.txz \", XZUtils.getUncompressedFilename(\"x.txz \"));\n+        assertEquals(\"x.txz\\n\", XZUtils.getUncompressedFilename(\"x.txz\\n\"));\n+        assertEquals(\"x.txz.y\", XZUtils.getUncompressedFilename(\"x.txz.y\"));\n+    }\n+\n+    public void testGetCompressedFilename() {\n+        assertEquals(\".xz\", XZUtils.getCompressedFilename(\"\"));\n+        assertEquals(\"x.xz\", XZUtils.getCompressedFilename(\"x\"));\n+\n+        assertEquals(\"x.txz\", XZUtils.getCompressedFilename(\"x.tar\"));\n+\n+        assertEquals(\"x.wmf .xz\", XZUtils.getCompressedFilename(\"x.wmf \"));\n+        assertEquals(\"x.wmf\\n.xz\", XZUtils.getCompressedFilename(\"x.wmf\\n\"));\n+        assertEquals(\"x.wmf.y.xz\", XZUtils.getCompressedFilename(\"x.wmf.y\"));\n+    }\n+\n+    public void testMatches() {\n+        byte[] data = {\n+            (byte) 0xFD, '7', 'z', 'X', 'Z', '\\0'\n+        };\n+        assertFalse(XZUtils.matches(data, 5));\n+        assertTrue(XZUtils.matches(data, 6));\n+        assertTrue(XZUtils.matches(data, 7));\n+        data[5] = '0';\n+        assertFalse(XZUtils.matches(data, 6));\n+    }\n+\n+    public void testCachingIsEnabledByDefaultAndXZIsPresent() {\n+        assertEquals(1, XZUtils.getCachedXZAvailability());\n+        assertTrue(XZUtils.isXZCompressionAvailable());\n+    }\n+\n+    public void testCanTurnOffCaching() {\n+        try {\n+            XZUtils.setCacheXZAvailablity(false);\n+            assertEquals(2, XZUtils.getCachedXZAvailability());\n+            assertTrue(XZUtils.isXZCompressionAvailable());\n+        } finally {\n+            XZUtils.setCacheXZAvailablity(true);\n+        }\n+    }\n+\n+    public void testTurningOnCachingReEvaluatesAvailability() {\n+        try {\n+            XZUtils.setCacheXZAvailablity(false);\n+            assertEquals(2, XZUtils.getCachedXZAvailability());\n+            XZUtils.setCacheXZAvailablity(true);\n+            assertEquals(1, XZUtils.getCachedXZAvailability());\n+        } finally {\n+            XZUtils.setCacheXZAvailablity(true);\n+        }\n+    }\n+\n+}", "timestamp": 1408028838, "metainfo": ""}