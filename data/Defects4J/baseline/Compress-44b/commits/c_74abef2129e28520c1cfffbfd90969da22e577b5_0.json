{"sha": "74abef2129e28520c1cfffbfd90969da22e577b5", "log": "Use better variable naming.    ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n     private int bitsCached = 0;\n     private int bitsCachedSize = 0;\n     private long totalCodesRead = 0;\n-    private int previousEntry = -1;\n+    private int previousCode = -1;\n     private int tableSize = 0;\n     private final int[] prefixes;\n     private final byte[] characters;\n         bitsCachedSize = 0;\n     }\n     \n-    private void addEntry(int previousEntry, byte character) throws IOException {\n+    private void addEntry(int previousCode, byte character) throws IOException {\n         final int maxTableSize = 1 << codeSize;\n         if (tableSize < maxTableSize) {\n-            prefixes[tableSize] = previousEntry;\n+            prefixes[tableSize] = previousCode;\n             characters[tableSize] = character;\n             tableSize++;\n         }\n             clearEntries();\n             reAlignReading();\n             codeSize = 9;\n-            previousEntry = -1;\n+            previousCode = -1;\n             return 0;\n         } else {\n             boolean addedUnfinishedEntry = false;\n             if (code == tableSize) {\n                 // must be a repeat of the previous entry we haven't added yet\n-                if (previousEntry == -1) {\n+                if (previousCode == -1) {\n                     // ... which isn't possible for the very first code\n                     throw new IOException(\"The first code can't be a reference to code before itself\");\n                 }\n                 byte firstCharacter = 0;\n-                for (int last = previousEntry; last >= 0; last = prefixes[last]) {\n+                for (int last = previousCode; last >= 0; last = prefixes[last]) {\n                     firstCharacter = characters[last];\n                 }\n-                addEntry(previousEntry, firstCharacter);\n+                addEntry(previousCode, firstCharacter);\n                 addedUnfinishedEntry = true;\n             } else if (code > tableSize) {\n                 throw new IOException(String.format(\"Invalid %d bit code 0x%x\", codeSize, code));\n             for (int entry = code; entry >= 0; entry = prefixes[entry]) {\n                 outputStack[--outputStackLocation] = characters[entry];\n             }\n-            if (previousEntry != -1 && !addedUnfinishedEntry) {\n-                addEntry(previousEntry, outputStack[outputStackLocation]);\n-            }\n-            previousEntry = code;\n+            if (previousCode != -1 && !addedUnfinishedEntry) {\n+                addEntry(previousCode, outputStack[outputStackLocation]);\n+            }\n+            previousCode = code;\n             return outputStackLocation;\n         }\n     }", "timestamp": 1386262664, "metainfo": ""}