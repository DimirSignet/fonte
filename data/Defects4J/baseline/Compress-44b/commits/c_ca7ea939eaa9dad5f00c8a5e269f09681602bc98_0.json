{"sha": "ca7ea939eaa9dad5f00c8a5e269f09681602bc98", "log": "make Sonar less unhappy", "commit": "\n--- a/src/main/java/org/apache/commons/compress/MemoryLimitException.java\n+++ b/src/main/java/org/apache/commons/compress/MemoryLimitException.java\n     }\n \n     private static String buildMessage(long memoryNeededInKb, int memoryLimitInKb) {\n-        return \"\" + memoryNeededInKb + \" kb of memory would be needed; limit was \"\n+        return memoryNeededInKb + \" kb of memory would be needed; limit was \"\n                 + memoryLimitInKb + \" kb. \" +\n                 \"If the file is not corrupt, consider increasing the memory limit.\";\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n             signatureLength = IOUtils.readFully(in, signature);\n             in.reset();\n         } catch (IOException e) {\n-            throw new ArchiveException(\"IOException while reading signature.\");\n+            throw new ArchiveException(\"IOException while reading signature.\", e);\n         }\n \n         if (ZipArchiveInputStream.matches(signature, signatureLength)) {\n             return ZIP;\n         } else if (JarArchiveInputStream.matches(signature, signatureLength)) {\n             return JAR;\n-        } if (ArArchiveInputStream.matches(signature, signatureLength)) {\n+        } else if (ArArchiveInputStream.matches(signature, signatureLength)) {\n             return AR;\n         } else if (CpioArchiveInputStream.matches(signature, signatureLength)) {\n             return CPIO;\n             signatureLength = IOUtils.readFully(in, dumpsig);\n             in.reset();\n         } catch (IOException e) {\n-            throw new ArchiveException(\"IOException while reading dump signature\");\n+            throw new ArchiveException(\"IOException while reading dump signature\", e);\n         }\n         if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {\n             return DUMP;\n             signatureLength = IOUtils.readFully(in, tarHeader);\n             in.reset();\n         } catch (IOException e) {\n-            throw new ArchiveException(\"IOException while reading tar signature\");\n+            throw new ArchiveException(\"IOException while reading tar signature\", e);\n         }\n         if (TarArchiveInputStream.matches(tarHeader, signatureLength)) {\n             return TAR;\n                 if (tais.getNextTarEntry().isCheckSumOK()) {\n                     return TAR;\n                 }\n-            } catch (final Exception e) { // NOPMD\n+            } catch (final Exception e) { // NOPMD // NOSONAR\n                 // can generate IllegalArgumentException as well\n                 // as IOException\n                 // autodetection, simply not a TAR", "timestamp": 1494429359, "metainfo": ""}