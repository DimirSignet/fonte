{"sha": "2d858d5c7cc30313c9c3c8ef4a5e8d34d67a395e", "log": "COMPRESS-114 Fix name round-trip problem  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java\n         int          end = offset + length;\n \n         for (int i = offset; i < end; ++i) {\n-            if (buffer[i] == 0) { // Trailing null\n+            byte b = buffer[i];\n+            if (b == 0) { // Trailing null\n                 break;\n             }\n-\n-            result.append((char) buffer[i]);\n+            result.append((char) (b & 0xFF)); // Allow for sign-extension\n         }\n \n         return result.toString();\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n         } catch (IllegalArgumentException expected) {\n         }\n     }\n+    \n+    public void testRoundTripNames(){\n+        checkName(\"\");\n+        checkName(\"The quick brown fox\\n\");\n+        checkName(\"\\177\");\n+        // checkName(\"\\0\"); // does not work, because NUL is ignored\n+        // COMPRESS-114\n+        checkName(\"0302-0601-3F06W220ZBLALALACANDC04060302MOE.model\");\n+    }\n+\n+    private void checkName(String string) {\n+        byte buff[] = new byte[100];\n+        int len = TarUtils.formatNameBytes(string, buff, 0, buff.length);\n+        assertEquals(string, TarUtils.parseName(buff, 0, len));\n+    }\n }", "timestamp": 1274107877, "metainfo": ""}