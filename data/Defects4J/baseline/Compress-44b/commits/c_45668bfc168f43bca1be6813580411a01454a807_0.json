{"sha": "45668bfc168f43bca1be6813580411a01454a807", "log": "COMPRESS-271 more tests", "commit": "\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorInputStreamTest.java\n  */\n package org.apache.commons.compress.compressors.lz4;\n \n+import static org.hamcrest.CoreMatchers.*;\n import static org.junit.Assert.*;\n \n import java.io.BufferedInputStream;\n+import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.InputStream;\n         }\n     }\n \n+    @Test\n+    public void rejectsFileWithoutFrameDescriptor() throws IOException {\n+        byte[] input = new byte[] {\n+            4, 0x22, 0x4d, 0x18 // signature\n+        };\n+        try {\n+            try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input))) {\n+                fail(\"expected exception\");\n+            }\n+        } catch (IOException ex) {\n+            assertThat(ex.getMessage(), containsString(\"frame flags\"));\n+        }\n+    }\n+\n+    @Test\n+    public void rejectsFileWithoutBlockSizeByte() throws IOException {\n+        byte[] input = new byte[] {\n+            4, 0x22, 0x4d, 0x18, // signature\n+            0x64, // flag - Version 01, block independent, no block checksum, no content size, with content checksum\n+        };\n+        try {\n+            try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input))) {\n+                fail(\"expected exception\");\n+            }\n+        } catch (IOException ex) {\n+            assertThat(ex.getMessage(), containsString(\"BD byte\"));\n+        }\n+    }\n+\n+    @Test\n+    public void rejectsFileWithWrongVersion() throws IOException {\n+        byte[] input = new byte[] {\n+            4, 0x22, 0x4d, 0x18, // signature\n+            0x24, // flag - Version 00, block independent, no block checksum, no content size, with content checksum\n+        };\n+        try {\n+            try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input))) {\n+                fail(\"expected exception\");\n+            }\n+        } catch (IOException ex) {\n+            assertThat(ex.getMessage(), containsString(\"version\"));\n+        }\n+    }\n+\n+    @Test\n+    public void rejectsFileWithInsufficientContentSize() throws IOException {\n+        byte[] input = new byte[] {\n+            4, 0x22, 0x4d, 0x18, // signature\n+            0x6C, // flag - Version 01, block independent, no block checksum, with content size, with content checksum\n+            0x70, // block size 4MB\n+        };\n+        try {\n+            try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input))) {\n+                fail(\"expected exception\");\n+            }\n+        } catch (IOException ex) {\n+            assertThat(ex.getMessage(), containsString(\"content size\"));\n+        }\n+    }\n+\n+    @Test\n+    public void rejectsFileWithoutHeaderChecksum() throws IOException {\n+        byte[] input = new byte[] {\n+            4, 0x22, 0x4d, 0x18, // signature\n+            0x64, // flag - Version 01, block independent, no block checksum, no content size, with content checksum\n+            0x70, // block size 4MB\n+        };\n+        try {\n+            try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input))) {\n+                fail(\"expected exception\");\n+            }\n+        } catch (IOException ex) {\n+            assertThat(ex.getMessage(), containsString(\"header checksum\"));\n+        }\n+    }\n+\n+    @Test\n+    public void readsUncompressedBlocks() throws IOException {\n+        byte[] input = new byte[] {\n+            4, 0x22, 0x4d, 0x18, // signature\n+            0x60, // flag - Version 01, block independent, no block checksum, no content size, no content checksum\n+            0x70, // block size 4MB\n+            0x00, // checksum, revisit once it gets validated\n+            13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set\n+            'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content\n+            0, 0, 0, 0, // empty block marker\n+        };\n+        try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input))) {\n+            byte[] actual = IOUtils.toByteArray(a);\n+            assertArrayEquals(new byte[] {\n+                    'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!'\n+                }, actual);\n+        }\n+    }\n+\n+    @Test\n+    public void rejectsBlocksWithoutChecksum() throws IOException {\n+        byte[] input = new byte[] {\n+            4, 0x22, 0x4d, 0x18, // signature\n+            0x70, // flag - Version 01, block independent, with block checksum, no content size, no content checksum\n+            0x70, // block size 4MB\n+            0x00, // checksum, revisit once it gets validated\n+            13, 0, 0, (byte) 0x80, // 13 bytes length and uncompressed bit set\n+            'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '!', // content\n+        };\n+        try {\n+            try (InputStream a = new FramedLZ4CompressorInputStream(new ByteArrayInputStream(input))) {\n+                IOUtils.toByteArray(a);\n+                fail(\"expected exception\");\n+            }\n+        } catch (IOException ex) {\n+            assertThat(ex.getMessage(), containsString(\"block checksum\"));\n+        }\n+    }\n }", "timestamp": 1485156260, "metainfo": ""}