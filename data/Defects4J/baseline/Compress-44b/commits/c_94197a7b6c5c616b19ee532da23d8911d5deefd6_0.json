{"sha": "94197a7b6c5c616b19ee532da23d8911d5deefd6", "log": "move channel/ByteBuffer readFully to IOUtils", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n         return skipped;\n     }\n \n-    private int readFully(ByteBuffer buf) throws IOException {\n-        final int expectedLength = buf.rewind().remaining();\n-        int read = 0;\n-        while (read < expectedLength) {\n-            int readNow = channel.read(buf);\n-            if (readNow <= 0) {\n-                break;\n-            }\n-            read += readNow;\n-        }\n+    private void readFully(ByteBuffer buf) throws IOException {\n+        buf.rewind();\n+        IOUtils.readFully(channel, buf);\n         buf.flip();\n-        return read;\n     }\n \n     @Override\n--- a/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n \n import java.io.ByteArrayOutputStream;\n import java.io.Closeable;\n+import java.io.EOFException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.ReadableByteChannel;\n \n /**\n  * Utility functions\n         return count;\n     }\n \n+    /**\n+     * Reads {@code b.remaining()} bytes from the given channel\n+     * starting at the current channel's position.\n+     *\n+     * <p>This method reads repeatedly from the channel until the\n+     * requested number of bytes are read. This method blocks until\n+     * the requested number of bytes are read, the end of the channel\n+     * is detected, or an exception is thrown.</p>\n+     *\n+     * @param channel the channel to read from\n+     * @param b the buffer into which the data is read.\n+     * @throws IOException - if an I/O error occurs.\n+     * @throws EOFException - if the channel reaches the end before reading all the bytes.\n+     */\n+    public static void readFully(ReadableByteChannel channel, ByteBuffer b) throws IOException {\n+        final int expectedLength = b.remaining();\n+        int read = 0;\n+        while (read < expectedLength) {\n+            int readNow = channel.read(b);\n+            if (readNow <= 0) {\n+                break;\n+            }\n+            read += readNow;\n+        }\n+        if (read < expectedLength) {\n+            throw new EOFException();\n+        }\n+    }\n+\n     // toByteArray(InputStream) copied from:\n     // commons/proper/io/trunk/src/main/java/org/apache/commons/io/IOUtils.java?revision=1428941\n     // January 8th, 2013\n--- a/src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/utils/IOUtilsTest.java\n package org.apache.commons.compress.utils;\n \n import java.io.ByteArrayInputStream;\n+import java.io.EOFException;\n import java.io.FilterInputStream;\n import java.io.InputStream;\n import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.channels.ReadableByteChannel;\n \n import org.junit.Assert;\n import org.junit.Test;\n             });\n     }\n \n+    @Test\n+    public void readFullyOnChannelReadsFully() throws IOException {\n+        ByteBuffer b = ByteBuffer.allocate(20);\n+        final byte[] source = new byte[20];\n+        for (byte i = 0; i < 20; i++) {\n+            source[i] = i;\n+        }\n+        readFully(source, b);\n+        Assert.assertArrayEquals(source, b.array());\n+    }\n+\n+    @Test(expected = EOFException.class)\n+    public void readFullyOnChannelThrowsEof() throws IOException {\n+        ByteBuffer b = ByteBuffer.allocate(21);\n+        final byte[] source = new byte[20];\n+        for (byte i = 0; i < 20; i++) {\n+            source[i] = i;\n+        }\n+        readFully(source, b);\n+    }\n+\n+    private static void readFully(final byte[] source, ByteBuffer b) throws IOException {\n+        IOUtils.readFully(new ReadableByteChannel() {\n+                private int idx;\n+                @Override\n+                public int read(ByteBuffer buf) {\n+                    if (idx >= source.length) {\n+                        return -1;\n+                    }\n+                    buf.put(source[idx++]);\n+                    return 1;\n+                }\n+                @Override\n+                public void close() { }\n+                @Override\n+                public boolean isOpen() {\n+                    return true;\n+                }\n+            }, b);\n+    }\n+\n     private void skip(final StreamWrapper wrapper) throws Exception {\n         final ByteArrayInputStream in = new ByteArrayInputStream(new byte[] {\n                 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11\n         Assert.assertEquals(10, IOUtils.skip(sut, 10));\n         Assert.assertEquals(11, sut.read());\n     }\n-\n }", "timestamp": 1476287912, "metainfo": ""}