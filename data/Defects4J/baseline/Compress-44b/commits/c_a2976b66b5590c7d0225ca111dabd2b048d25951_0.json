{"sha": "a2976b66b5590c7d0225ca111dabd2b048d25951", "log": "modify SeekableInMemoryByteChannel based on feedback by Maciej and Bernd Eckenfels", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java\n+++ b/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java\n import java.nio.channels.NonWritableChannelException;\n import java.nio.channels.SeekableByteChannel;\n import java.util.Arrays;\n+import java.util.concurrent.atomic.AtomicBoolean;\n \n /**\n  * A {@link SeekableByteChannel} implementation that wraps a byte[].\n  * @since 1.13\n+ * @NotThreadSafe\n  */\n public class SeekableInMemoryByteChannel implements SeekableByteChannel {\n \n-    private volatile byte[] data;\n-    private volatile boolean closed;\n-    private volatile int position, size;\n+    private byte[] data;\n+    private final AtomicBoolean closed = new AtomicBoolean();\n+    private int position, size;\n \n     public SeekableInMemoryByteChannel(byte[] data) {\n         this.data = data;\n         if (!isOpen()) {\n             throw new ClosedChannelException();\n         }\n-        int pos = position;\n-        int sz = size;\n         int wanted = buf.remaining();\n-        int possible = sz - pos;\n+        int possible = size - position;\n         if (wanted > possible) {\n             wanted = possible;\n         }\n-        buf.put(data, pos, wanted);\n-        position = pos + wanted;\n+        buf.put(data, position, wanted);\n+        position += wanted;\n         return wanted;\n     }\n \n     @Override\n     public void close() {\n-        closed = true;\n+        closed.set(true);\n     }\n \n     @Override\n     public boolean isOpen() {\n-        return !closed;\n+        return !closed.get();\n     }\n \n     @Override\n         if (!isOpen()) {\n             throw new ClosedChannelException();\n         }\n-        int pos = position;\n-        int sz = data.length;\n         int wanted = b.remaining();\n-        int possibleWithoutResize = sz - pos;\n+        int possibleWithoutResize = size - position;\n         if (wanted > possibleWithoutResize) {\n-            resize(pos + wanted);\n+            resize(position + wanted);\n         }\n-        b.get(data, pos, wanted);\n-        position = pos + wanted;\n+        b.get(data, position, wanted);\n+        position += wanted;\n         if (size < position) {\n             size = position;\n         }", "timestamp": 1477065070, "metainfo": ""}