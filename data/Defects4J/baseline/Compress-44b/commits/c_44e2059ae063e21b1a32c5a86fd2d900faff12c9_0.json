{"sha": "44e2059ae063e21b1a32c5a86fd2d900faff12c9", "log": "COMPRESS-266 now you can set options for 7z methods, still need to write docs and tests  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n import java.util.Date;\n import java.util.List;\n import java.util.LinkedList;\n+import java.util.Map.Entry;\n import java.util.zip.CRC32;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n     private long fileBytesWritten = 0;\n     private boolean finished = false;\n     private CountingOutputStream currentOutputStream;\n-    private Iterable<SevenZMethod> contentMethods = Collections.singletonList(SevenZMethod.LZMA2);\n+    private Iterable<? extends Entry<SevenZMethod, ?>> contentMethods =\n+            Collections.singletonList(new FakeEntry(SevenZMethod.LZMA2));\n     \n     /**\n      * Opens file to write a 7z archive to.\n      * to {@link #setContentMethods}.</p>\n      */\n     public void setContentCompression(SevenZMethod method) {\n-        setContentMethods(Collections.singletonList(method));\n+        setContentMethods(Collections.singletonList(new FakeEntry(method)));\n     }\n \n     /**\n      *\n      * @since 1.8\n      */\n-    public void setContentMethods(Iterable<SevenZMethod> methods) {\n+    public void setContentMethods(Iterable<? extends Entry<SevenZMethod, ?>> methods) {\n         this.contentMethods = methods;\n     }\n \n \n     private CountingOutputStream setupFileOutputStream() throws IOException {\n         OutputStream out = new OutputStreamWrapper();\n-        for (SevenZMethod m : reverse(contentMethods)) {\n-            out = Coders.addEncoder(out, m, null);\n+        for (Entry<SevenZMethod, ?> m : reverse(contentMethods)) {\n+            out = Coders.addEncoder(out, m.getKey(), m.getValue());\n         }\n         return new CountingOutputStream(out) {\n             @Override\n     private void writeFolder(final DataOutput header) throws IOException {\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         int numCoders = 0;\n-        for (SevenZMethod m : contentMethods) {\n+        for (Entry<SevenZMethod, ?> m : contentMethods) {\n             numCoders++;\n             writeSingleCodec(m, bos);\n         }\n         header.write(bos.toByteArray());\n     }\n \n-    private void writeSingleCodec(SevenZMethod m, OutputStream bos) throws IOException {\n-        byte[] id = m.getId();\n-        byte[] properties = m.getProperties(null);\n+    private void writeSingleCodec(Entry<SevenZMethod, ?> m, OutputStream bos) throws IOException {\n+        byte[] id = m.getKey().getId();\n+        byte[] properties = m.getKey().getProperties(m.getValue());\n \n         int codecFlags = id.length;\n         if (properties.length > 0) {\n             // the file will be closed by the containing class's close method\n         }\n     }\n+\n+    private static class FakeEntry implements Entry<SevenZMethod, Object> {\n+        private final SevenZMethod m;\n+        FakeEntry(SevenZMethod m) {\n+            this.m = m;\n+        }\n+        public SevenZMethod getKey() {\n+            return m;\n+        }\n+        public Object getValue() {\n+            return null;\n+        }\n+        public Object setValue(Object o) {\n+            return null;\n+        }\n+    }\n }", "timestamp": 1393190038, "metainfo": ""}