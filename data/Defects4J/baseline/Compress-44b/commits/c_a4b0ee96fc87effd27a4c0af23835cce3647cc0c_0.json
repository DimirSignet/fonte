{"sha": "a4b0ee96fc87effd27a4c0af23835cce3647cc0c", "log": "readFully's return value is useless, it throws an exception at EOF", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/TapeInputStream.java\n             // we need to read from the underlying stream.\n             // this will reset readOffset value.\n             // return -1 if there's a problem.\n-            if ((readOffset == blockSize) && !readBlock(true)) {\n-                return -1;\n+            if (readOffset == blockSize) {\n+                try {\n+                    readBlock(true);\n+                } catch (ShortFileException sfe) {\n+                    return -1;\n+                }\n             }\n \n             int n = 0;\n             // this will reset readOffset value. We do not perform\n             // any decompression if we won't eventually read the data.\n             // return -1 if there's a problem.\n-            if ((readOffset == blockSize) &&\n-                    !readBlock((len - bytes) < blockSize)) {\n-                return -1;\n+            if (readOffset == blockSize) {\n+                try {\n+                    readBlock((len - bytes) < blockSize);\n+                } catch (ShortFileException sfe) {\n+                    return -1;\n+                }\n             }\n \n             long n = 0;\n         // we need to read from the underlying stream. This\n         // isn't a problem since it would be the first step in\n         // any subsequent read() anyway.\n-        if ((readOffset == blockSize) && !readBlock(true)) {\n-            return null;\n+        if (readOffset == blockSize) {\n+            try {\n+                readBlock(true);\n+            } catch (ShortFileException sfe) {\n+                return null;\n+            }\n         }\n \n         // copy data, increment counters.\n      *        This is an optimization for longer seeks.\n      * @return false if End-Of-File, else true\n      */\n-    private boolean readBlock(final boolean decompress) throws IOException {\n-        boolean success = true;\n-\n+    private void readBlock(final boolean decompress) throws IOException {\n         if (in == null) {\n             throw new IOException(\"input buffer is closed\");\n         }\n \n         if (!isCompressed || (currBlkIdx == -1)) {\n             // file is not compressed\n-            success = readFully(blockBuffer, 0, blockSize);\n+            readFully(blockBuffer, 0, blockSize);\n             bytesRead += blockSize;\n         } else {\n-            if (!readFully(blockBuffer, 0, 4)) {\n-                return false;\n-            }\n+            readFully(blockBuffer, 0, 4);\n             bytesRead += 4;\n \n             final int h = DumpArchiveUtil.convert32(blockBuffer, 0);\n \n             if (!compressed) {\n                 // file is compressed but this block is not.\n-                success = readFully(blockBuffer, 0, blockSize);\n+                readFully(blockBuffer, 0, blockSize);\n                 bytesRead += blockSize;\n             } else {\n                 // this block is compressed.\n                 final int flags = (h >> 1) & 0x07;\n                 int length = (h >> 4) & 0x0FFFFFFF;\n                 final byte[] compBuffer = new byte[length];\n-                success = readFully(compBuffer, 0, length);\n+                readFully(compBuffer, 0, length);\n                 bytesRead += length;\n \n                 if (!decompress) {\n \n         currBlkIdx++;\n         readOffset = 0;\n-\n-        return success;\n     }\n \n     /**\n      * Read buffer\n      */\n-    private boolean readFully(final byte[] b, final int off, final int len)\n+    private void readFully(final byte[] b, final int off, final int len)\n         throws IOException {\n         final int count = IOUtils.readFully(in, b, off, len);\n         if (count < len) {\n             throw new ShortFileException();\n         }\n-\n-        return true;\n     }\n \n     /**", "timestamp": 1494411612, "metainfo": ""}