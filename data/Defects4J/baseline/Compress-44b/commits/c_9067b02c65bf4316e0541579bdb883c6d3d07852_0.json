{"sha": "9067b02c65bf4316e0541579bdb883c6d3d07852", "log": "COMPRESS-295 Add support for transferring a zip entry from one zip file to another  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryPredicate.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+\n+package org.apache.commons.compress.archivers.zip;\n+\n+/**\n+ *  A predicate to test if a #ZipArchiveEntry matches a criteria.\n+ *  Some day this can extend java.util.function.Predicate\n+ */\n+public interface ZipArchiveEntryPredicate {\n+    /**\n+     * Indicate if the given entry should be included in the operation\n+     * @param zipArchiveEntry the entry to test\n+     * @return true if the entry should be included\n+     */\n+    boolean test(ZipArchiveEntry zipArchiveEntry);\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.io.OutputStream;\n import java.io.RandomAccessFile;\n import java.nio.ByteBuffer;\n+import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n      */\n     @Override\n     public void closeArchiveEntry() throws IOException {\n-        if (finished) {\n-            throw new IOException(\"Stream has already been finished\");\n-        }\n-\n-        if (entry == null) {\n-            throw new IOException(\"No current entry to close\");\n-        }\n-\n-        if (!entry.hasWritten) {\n-            write(EMPTY, 0, 0);\n-        }\n+        preClose();\n \n         flushDeflater();\n \n-        final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);\n         long bytesWritten = written - entry.dataStart;\n         long realCrc = crc.getValue();\n         crc.reset();\n \n+        doCloseEntry(realCrc, bytesWritten);\n+    }\n+\n+    /**\n+     * Writes all necessary data for this entry.\n+     *\n+     * @throws IOException            on error\n+     * @throws Zip64RequiredException if the entry's uncompressed or\n+     *                                compressed size exceeds 4 GByte and {@link #setUseZip64}\n+     *                                is {@link Zip64Mode#Never}.\n+     */\n+    private void closeCopiedEntry() throws IOException {\n+        preClose();\n+        long realCrc = entry.entry.getCrc();\n+        entry.bytesRead = entry.entry.getSize();\n+        doCloseEntry(realCrc, entry.entry.getCompressedSize());\n+    }\n+\n+    private void doCloseEntry(long realCrc, long bytesWritten) throws IOException {\n+        final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);\n         final boolean actuallyNeedsZip64 =\n-            handleSizesAndCrc(bytesWritten, realCrc, effectiveMode);\n+                handleSizesAndCrc(bytesWritten, realCrc, effectiveMode);\n \n         if (raf != null) {\n             rewriteSizesAndCrc(actuallyNeedsZip64);\n \n         writeDataDescriptor(entry.entry);\n         entry = null;\n+    }\n+\n+    private void preClose() throws IOException {\n+        if (finished) {\n+            throw new IOException(\"Stream has already been finished\");\n+        }\n+\n+        if (entry == null) {\n+            throw new IOException(\"No current entry to close\");\n+        }\n+\n+        if (!entry.hasWritten) {\n+            write(EMPTY, 0, 0);\n+        }\n+    }\n+\n+    /**\n+     * Adds an archive entry with a raw input stream.\n+     *\n+     * The entry is put and closed immediately.\n+     *\n+     * @param entry The archive entry to add\n+     * @param rawStream The raw input stream of a different entry. May be compressed/encrypted.\n+     * @throws IOException If copying fails\n+     */\n+    public void addRawArchiveEntry(ZipArchiveEntry entry, InputStream rawStream)\n+            throws IOException {\n+        ZipArchiveEntry ae = new ZipArchiveEntry((java.util.zip.ZipEntry)entry);\n+        putArchiveEntry(ae);\n+        copyFromZipInputStream(rawStream);\n+        closeCopiedEntry();\n     }\n \n     /**\n         }\n         crc.update(b, offset, length);\n         count(length);\n+    }\n+\n+    private void copyFromZipInputStream(InputStream src) throws IOException {\n+        if (entry == null) {\n+            throw new IllegalStateException(\"No current entry\");\n+        }\n+        ZipUtil.checkRequestedFeatures(entry.entry);\n+        entry.hasWritten = true;\n+        byte[] tmpBuf = new byte[4096];\n+        int length = src.read( tmpBuf );\n+        while ( length >= 0 )\n+        {\n+            writeOut( tmpBuf, 0, length );\n+            written += length;\n+            crc.update( tmpBuf, 0, length );\n+\n+            count( length );\n+            length = src.read( tmpBuf );\n+        }\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n     }\n \n     /**\n+     * Expose the raw stream of the archive entry (compressed form)\n+     * <p/>\n+     * This method does not relate to how/if we understand the payload in the\n+     * stream, since we really only intend to move it on to somewhere else.\n+     *\n+     * @param ze The entry to get the stream for\n+     * @return The raw input stream containing (possibly) compressed data.\n+     */\n+    private InputStream getRawInputStream(ZipArchiveEntry ze) {\n+        if (!(ze instanceof Entry)) {\n+            return null;\n+        }\n+        OffsetEntry offsetEntry = ((Entry) ze).getOffsetEntry();\n+        long start = offsetEntry.dataOffset;\n+        return new BoundedInputStream(start, ze.getCompressedSize());\n+    }\n+\n+\n+    /**\n+     * Transfer selected entries from this zipfile to a given #ZipArchiveOutputStream.\n+     * Compression and all other attributes will be as in this file.\n+     * This method transfers entries based on the central directory of the zip file.\n+     *\n+     * @param target The zipArchiveOutputStream to write the entries to\n+     * @param predicate A predicate that selects which entries to write\n+     */\n+    public void copyRawEntries(ZipArchiveOutputStream target, ZipArchiveEntryPredicate predicate)\n+            throws IOException {\n+        Enumeration<ZipArchiveEntry> src = getEntriesInPhysicalOrder();\n+        while (src.hasMoreElements()) {\n+            ZipArchiveEntry entry = src.nextElement();\n+            if (predicate.test( entry)) {\n+                target.addRawArchiveEntry(entry, getRawInputStream(entry));\n+            }\n+        }\n+    }\n+\n+    /**\n      * Returns an InputStream for reading the contents of the given entry.\n      *\n      * @param ze the entry to get the stream for.\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n      * element of the two element array).\n      */\n     protected File[] createTempDirAndFile() throws IOException {\n-        File tmpDir = mkdir(\"testdir\");\n-        tmpDir.deleteOnExit();\n+        File tmpDir = createTempDir();\n         File tmpFile = File.createTempFile(\"testfile\", \"\", tmpDir);\n         tmpFile.deleteOnExit();\n         FileOutputStream fos = new FileOutputStream(tmpFile);\n         } finally {\n             fos.close();\n         }\n+    }\n+\n+    protected File createTempDir() throws IOException {\n+        File tmpDir = mkdir(\"testdir\");\n+        tmpDir.deleteOnExit();\n+        return tmpDir;\n     }\n \n     protected void closeQuietly(Closeable closeable){\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n  */\n package org.apache.commons.compress.archivers;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.io.*;\n import java.util.ArrayList;\n import java.util.List;\n \n import org.apache.commons.compress.AbstractTestCase;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;\n-import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n-import org.apache.commons.compress.archivers.zip.ZipFile;\n-import org.apache.commons.compress.archivers.zip.ZipMethod;\n+import org.apache.commons.compress.archivers.zip.*;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Assert;\n \n public final class ZipTestCase extends AbstractTestCase {\n     /**\n             rmdir(tmp[0]);\n         }\n     }\n+    String first_payload = \"ABBA\";\n+    String second_payload = \"AAAAAAAAAAAA\";\n+    ZipArchiveEntryPredicate allFilesPredicate = new ZipArchiveEntryPredicate() {\n+        public boolean test(ZipArchiveEntry zipArchiveEntry) {\n+            return true;\n+        }\n+    };\n+\n+\n+    public void testCopyRawEntriesFromFile\n+            ()\n+            throws IOException {\n+\n+        File[] tmp = createTempDirAndFile();\n+        File reference = createReferenceFile(tmp[0]);\n+\n+        File a1 = File.createTempFile(\"src1.\", \".zip\", tmp[0]);\n+        createFirstEntry(new ZipArchiveOutputStream(a1)).close();\n+\n+        File a2 = File.createTempFile(\"src2.\", \".zip\", tmp[0]);\n+        createSecondEntry(new ZipArchiveOutputStream(a2)).close();\n+\n+        ZipFile zf1 = new ZipFile(a1);\n+        ZipFile zf2 = new ZipFile(a2);\n+        File fileResult = File.createTempFile(\"file-actual.\", \".zip\", tmp[0]);\n+        ZipArchiveOutputStream zos2 = new ZipArchiveOutputStream(fileResult);\n+        zf1.copyRawEntries(zos2, allFilesPredicate);\n+        zf2.copyRawEntries(zos2, allFilesPredicate);\n+        zos2.close();\n+        assertSameFileContents(reference, fileResult);\n+        zf1.close();\n+        zf2.close();\n+    }\n+\n+    private File createReferenceFile(File directory) throws IOException {\n+        File reference = File.createTempFile(\"expected.\", \".zip\", directory);\n+        ZipArchiveOutputStream zos = new ZipArchiveOutputStream(reference);\n+        createFirstEntry(zos);\n+        createSecondEntry(zos);\n+        zos.close();\n+        return reference;\n+    }\n+\n+    private ZipArchiveOutputStream createFirstEntry(ZipArchiveOutputStream zos) throws IOException {\n+        createArchiveEntry(first_payload, zos, \"file1.txt\");\n+        return zos;\n+    }\n+\n+    private ZipArchiveOutputStream createSecondEntry(ZipArchiveOutputStream zos) throws IOException {\n+        createArchiveEntry(second_payload, zos, \"file2.txt\");\n+        return zos;\n+    }\n+\n+\n+    private void assertSameFileContents(File expectedFile, File actualFile) throws IOException {\n+        int size = (int) Math.max(expectedFile.length(), actualFile.length());\n+        byte[] expected = new byte[size];\n+        byte[] actual = new byte[size];\n+        final FileInputStream expectedIs = new FileInputStream(expectedFile);\n+        final FileInputStream actualIs = new FileInputStream(actualFile);\n+        IOUtils.readFully(expectedIs, expected);\n+        IOUtils.readFully(actualIs, actual);\n+        expectedIs.close();\n+        actualIs.close();\n+        Assert.assertArrayEquals(expected, actual);\n+    }\n+\n+\n+    private void createArchiveEntry(String payload, ZipArchiveOutputStream zos, String name)\n+            throws IOException {\n+        ZipArchiveEntry in = new ZipArchiveEntry(name);\n+        zos.putArchiveEntry(in);\n+\n+        zos.write(payload.getBytes());\n+        zos.closeArchiveEntry();\n+    }\n \n     public void testFileEntryFromFile() throws Exception {\n         File[] tmp = createTempDirAndFile();", "timestamp": 1418935917, "metainfo": ""}