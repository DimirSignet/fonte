{"sha": "fef18a23d3b09025e0ddc3733334a4587c3af712", "log": "COMPRESS-391 some tweaks", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java\n     public static final ZipShort ID = new ZipShort(0xa11e);\n \n     public static final int BASE_SIZE = 2;\n+\n+    private static final int ALLOW_METHOD_MESSAGE_CHANGE_FLAG = 0x8000;\n \n     private short alignment;\n \n \n     @Override\n     public byte[] getLocalFileDataData() {\n-        byte[] content = new byte[2+padding];\n-        ZipShort.putShort(alignment | (allowMethodChange ? 0x8000 : 0), content, 0);\n+        byte[] content = new byte[BASE_SIZE + padding];\n+        ZipShort.putShort(alignment | (allowMethodChange ? ALLOW_METHOD_MESSAGE_CHANGE_FLAG : 0),\n+                          content, 0);\n         return content;\n     }\n \n     @Override\n     public byte[] getCentralDirectoryData() {\n-        return ZipShort.getBytes(alignment | (allowMethodChange ? 0x8000 : 0));\n+        return ZipShort.getBytes(alignment | (allowMethodChange ? ALLOW_METHOD_MESSAGE_CHANGE_FLAG : 0));\n     }\n \n     @Override\n \n     @Override\n     public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) throws ZipException {\n-        if (length < 2)\n+        if (length < BASE_SIZE) {\n             throw new ZipException(\"Too short content for ResourceAlignmentExtraField (0xa11e): \" + length);\n+        }\n         int alignmentValue = ZipShort.getValue(buffer, offset);\n-        this.alignment = (short) (alignmentValue&0x7fff);\n-        this.allowMethodChange = (alignmentValue&0x8000) != 0;\n+        this.alignment = (short) (alignmentValue & (ALLOW_METHOD_MESSAGE_CHANGE_FLAG - 1));\n+        this.allowMethodChange = (alignmentValue & ALLOW_METHOD_MESSAGE_CHANGE_FLAG) != 0;\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n      *\n      * @return\n      *      alignment for this entry.\n+     * @since 1.14\n      */\n     protected int getAlignment() {\n         return this.alignment;\n      *\n      * @param alignment\n      *      requested alignment, 0 for default.\n+     * @since 1.14\n      */\n     public void setAlignment(int alignment) {\n         if ((alignment & (alignment - 1)) != 0 || alignment > 0xffff) {\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n     @Deprecated\n     public static final int EFS_FLAG = GeneralPurposeBit.UFT8_NAMES_FLAG;\n \n-    /**\n-     * Size of an extra field field header (id + length).\n-     */\n-    public static final int EXTRAFIELD_HEADER_SIZE = 4;\n-\n     private static final byte[] EMPTY = new byte[0];\n \n     /**\n     private byte[] createLocalFileHeader(final ZipArchiveEntry ze, final ByteBuffer name, final boolean encodable,\n                                          final boolean phased, long archiveOffset) throws IOException {\n         ResourceAlignmentExtraField oldAlignmentEx =\n-                        (ResourceAlignmentExtraField) ze.getExtraField(ResourceAlignmentExtraField.ID);\n-        if (oldAlignmentEx != null)\n+            (ResourceAlignmentExtraField) ze.getExtraField(ResourceAlignmentExtraField.ID);\n+        if (oldAlignmentEx != null) {\n             ze.removeExtraField(ResourceAlignmentExtraField.ID);\n+        }\n \n         int alignment = ze.getAlignment();\n         if (alignment <= 0 && oldAlignmentEx != null) {\n                             name.limit() - name.position() +\n                             ze.getLocalFileDataExtra().length;\n \n-            int padding = (int) ((-archiveOffset - oldLength - EXTRAFIELD_HEADER_SIZE\n+            int padding = (int) ((-archiveOffset - oldLength - ZipExtraField.EXTRAFIELD_HEADER_SIZE\n                             - ResourceAlignmentExtraField.BASE_SIZE) &\n                             (alignment - 1));\n             ze.addExtraField(new ResourceAlignmentExtraField(alignment,\n                             oldAlignmentEx != null ? oldAlignmentEx.allowMethodChange() : false, padding));\n         }\n \n-        byte[] extra = ze.getLocalFileDataExtra();\n+        final byte[] extra = ze.getLocalFileDataExtra();\n         final int nameLen = name.limit() - name.position();\n-        int len = LFH_FILENAME_OFFSET + nameLen + extra.length;\n+        final int len = LFH_FILENAME_OFFSET + nameLen + extra.length;\n         final byte[] buf = new byte[len];\n \n         System.arraycopy(LFH_SIG,  0, buf, LFH_SIG_OFFSET, WORD);\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipExtraField.java\n  *\n  */\n public interface ZipExtraField {\n+    /**\n+     * Size of an extra field field header (id + length).\n+     * @since 1.14\n+     */\n+    int EXTRAFIELD_HEADER_SIZE = 4;\n+\n     /**\n      * The Header-ID.\n      *\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipShort.java\n  * @Immutable\n  */\n public final class ZipShort implements Cloneable, Serializable {\n+    /**\n+     * ZipShort with a value of 0.\n+     * @since 1.14\n+     */\n     public static final ZipShort ZERO = new ZipShort(0);\n \n     private static final long serialVersionUID = 1L;", "timestamp": 1494526510, "metainfo": ""}