{"sha": "6b75de47f629a88aa7962fd2b9a2f1f1c1eaf63c", "log": "silence Sonar where I disagree with it", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n                 throw new IOException(\"Multi input/output stream coders are not yet supported\");\n             }\n             inputStreamStack = Coders.addDecoder(fileName, inputStreamStack,\n-                    folder.getUnpackSizeForCoder(coder), coder, password);\n+                    folder.getUnpackSizeForCoder(coder), coder, password); //NOSONAR\n         }\n         if (folder.hasCrc) {\n             inputStreamStack = new CRC32VerifyingInputStream(inputStreamStack,\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java\n         }\n \n         final SevenZArchiveEntry entry = files.get(files.size() - 1);\n-        if (fileBytesWritten > 0) {\n+        if (fileBytesWritten > 0) { // this implies currentOutputStream != null\n             entry.setHasStream(true);\n             ++numNonEmptyStreams;\n-            entry.setSize(currentOutputStream.getBytesWritten());\n+            entry.setSize(currentOutputStream.getBytesWritten()); //NOSONAR\n             entry.setCompressedSize(fileBytesWritten);\n             entry.setCrcValue(crc32.getValue());\n             entry.setCompressedCrcValue(compressedCrc32.getValue());\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n         if (currentEntryHasOutstandingBytes()) {\n             drainCurrentEntryData();\n         } else {\n-            skip(Long.MAX_VALUE);\n+            // this is guaranteed to exhaust the stream\n+            skip(Long.MAX_VALUE); //NOSONAR\n \n             final long inB = current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED\n                        ? getBytesInflated() : current.bytesRead;\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n         final OffsetEntry offsetEntry = ((Entry) ze).getOffsetEntry();\n         ZipUtil.checkRequestedFeatures(ze);\n         final long start = offsetEntry.dataOffset;\n+        // doesn't get closed if the method is not supported, but doesn't hold any resources either\n         final BoundedInputStream bis =\n-            new BoundedInputStream(start, ze.getCompressedSize());\n+            new BoundedInputStream(start, ze.getCompressedSize()); //NOSONAR\n         switch (ZipMethod.getMethodByCode(ze.getMethod())) {\n             case STORED:\n                 return bis;\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BlockSort.java\n                     HAMMER: while (true) {\n                         if (onceRunned) {\n                             fmap[j] = a;\n-                            if ((j -= h) <= mj) {\n+                            if ((j -= h) <= mj) { //NOSONAR\n                                 break HAMMER;\n                             }\n                         } else {\n                                 if (block[i1 + 3] == block[i2 + 3]) {\n                                     if (block[i1 + 4] == block[i2 + 4]) {\n                                         if (block[i1 + 5] == block[i2 + 5]) {\n-                                            if (block[(i1 += 6)] == block[(i2 += 6)]) {\n+                                            if (block[(i1 += 6)] == block[(i2 += 6)]) { //NOSONAR\n                                                 int x = lastShadow;\n                                                 X: while (x > 0) {\n                                                     x -= 4;\n                                                                         if (quadrant[i1 + 2] == quadrant[i2 + 2]) {\n                                                                             if (block[i1 + 4] == block[i2 + 4]) {\n                                                                                 if (quadrant[i1 + 3] == quadrant[i2 + 3]) {\n-                                                                                    if ((i1 += 4) >= lastPlus1) {\n+                                                                                    if ((i1 += 4) >= lastPlus1) { //NOSONAR\n                                                                                         i1 -= lastPlus1;\n                                                                                     }\n-                                                                                    if ((i2 += 4) >= lastPlus1) {\n+                                                                                    if ((i2 += 4) >= lastPlus1) { //NOSONAR\n                                                                                         i2 -= lastPlus1;\n                                                                                     }\n                                                                                     workDoneShadow++;\n             runningOrder[i] = i;\n         }\n \n-        for (int h = 364; h != 1;) {\n+        // h = 364, 121, 40, 13, 4, 1\n+        for (int h = 364; h != 1;) { //NOSONAR\n             h /= 3;\n             for (int i = h; i <= 255; i++) {\n                 final int vv = runningOrder[i];\n--- a/src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/PureJavaCrc32C.java\n \n     while(len > 7) {\n       final int c0 =(b[off+0] ^ localCrc) & 0xff;\n-      final int c1 =(b[off+1] ^ (localCrc >>>= 8)) & 0xff;\n-      final int c2 =(b[off+2] ^ (localCrc >>>= 8)) & 0xff;\n-      final int c3 =(b[off+3] ^ (localCrc >>>= 8)) & 0xff;\n+      final int c1 =(b[off+1] ^ (localCrc >>>= 8)) & 0xff; //NOSONAR\n+      final int c2 =(b[off+2] ^ (localCrc >>>= 8)) & 0xff; //NOSONAR\n+      final int c3 =(b[off+3] ^ (localCrc >>>= 8)) & 0xff; //NOSONAR\n       localCrc = (T[T8_7_start + c0] ^ T[T8_6_start + c1])\n           ^ (T[T8_5_start + c2] ^ T[T8_4_start + c3]);\n ", "timestamp": 1482169331, "metainfo": ""}