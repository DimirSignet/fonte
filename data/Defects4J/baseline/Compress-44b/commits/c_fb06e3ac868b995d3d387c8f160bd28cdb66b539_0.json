{"sha": "fb06e3ac868b995d3d387c8f160bd28cdb66b539", "log": "Missing @Override  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveInputStream.java\n      * @throws IOException\n      *             if an I/O error has occurred\n      */\n+    @Override\n     public int read() throws IOException {\n         int num = read(SINGLE, 0, 1);\n         return num == -1 ? -1 : SINGLE[0] & BYTE_MASK;\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n      * @param b The byte to be written.\n      * @throws IOException on error\n      */\n+    @Override\n     public void write(int b) throws IOException {\n         oneByte[0] = (byte) (b & BYTE_MASK);\n         write(oneByte, 0, 1);\n--- a/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStream.java\n     /**\n      * Read the next entry.\n      */\n+    @Override\n     public DumpArchiveEntry getNextEntry() throws IOException {\n         DumpArchiveEntry entry = null;\n         String path = null;\n      * @return The number of bytes read, or -1 at EOF.\n      * @throws IOException on error\n      */\n+    @Override\n     public int read(byte[] buf, int off, int len) throws IOException {\n         int totalRead = 0;\n \n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n         return entry == null ? null : new JarArchiveEntry(entry);\n     }\n \n+    @Override\n     public ArchiveEntry getNextEntry() throws IOException {\n         return getNextJarEntry();\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStream.java\n     }\n \n     // @throws ClassCastException if entry is not an instance of ZipArchiveEntry\n+    @Override\n     public void putArchiveEntry(ArchiveEntry ze) throws IOException {\n         if (!jarMarkerAdded) {\n             ((ZipArchiveEntry)ze).addAsFirstExtraField(JarMarker.getInstance());\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/AsiExtraField.java\n         return type | (mode & PERM_MASK);\n     }\n \n+    @Override\n     public Object clone() {\n         try {\n             AsiExtraField cloned = (AsiExtraField) super.clone();\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/UnsupportedZipFeatureException.java\n             this.name = name;\n         }\n \n+        @Override\n         public String toString() {\n             return name;\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n      *\n      * @since Apache Commons Compress 1.1\n      */\n+    @Override\n     public int getMethod() {\n         return method;\n     }\n      *\n      * @since Apache Commons Compress 1.1\n      */\n+    @Override\n     public void setMethod(int method) {\n         if (method < 0) {\n             throw new IllegalArgumentException(\n      * Is this entry a directory?\n      * @return true if the entry is a directory\n      */\n+    @Override\n     public boolean isDirectory() {\n         return getName().endsWith(\"/\");\n     }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         private UnicodeExtraFieldPolicy(String n) {\n             name = n;\n         }\n+        @Override\n         public String toString() {\n             return name;\n         }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n                 bis.addDummy();\n                 final Inflater inflater = new Inflater(true);\n                 return new InflaterInputStream(bis, inflater) {\n+                    @Override\n                     public void close() throws IOException {\n                         super.close();\n                         inflater.end();\n      * there are no more references to it.\n      * @see #close()\n      */\n+    @Override\n     protected void finalize() throws Throwable {\n         try {\n             if (!closed) {\n             loc = start;\n         }\n \n+        @Override\n         public int read() throws IOException {\n             if (remaining-- <= 0) {\n                 if (addDummyByte) {\n             }\n         }\n \n+        @Override\n         public int read(byte[] b, int off, int len) throws IOException {\n             if (remaining <= 0) {\n                 if (addDummyByte) {\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n         super(name);\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         dir = mkdir(\"dir\");\n         resultDir = mkdir(\"dir-result\");\n         return new File(\"src/test/resources\", path);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         rmdir(dir);\n         rmdir(resultDir);\n--- a/src/test/java/org/apache/commons/compress/ArchiveReadTests.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveReadTests.java\n     }\n     \n     // files.txt contains size and filename\n+    @Override\n     protected String getExpectedString(ArchiveEntry entry) {\n         return entry.getSize() + \" \" + entry.getName();\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ArchiveOutputStreamTest.java\n \n public class ArchiveOutputStreamTest extends AbstractTestCase {\n \n+    @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java\n         p = 0;\n     }\n \n+    @Override\n     public ArchiveEntry getNextEntry() throws IOException {\n         if (p >= filenames.length) {\n             return null;\n         return content[p++];\n     }\n \n+    @Override\n     public int read() throws IOException {\n         return 0;\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java\n     private byte[] data;\n     private byte[] aLocal;\n \n+    @Override\n     public void setUp() {\n         a = new AsiExtraField();\n         a.setMode(0755);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n public class ZipFileTest extends TestCase {\n     private ZipFile zf = null;\n \n+    @Override\n     public void tearDown() {\n         ZipFile.closeQuietly(zf);\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java\n         super(name);\n     }\n \n+    @Override\n     protected void setUp() throws Exception {\n         time = new Date();\n         Calendar cal = Calendar.getInstance();\n         zl = new ZipLong(result);\n     }\n \n+    @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }", "timestamp": 1313421046, "metainfo": ""}