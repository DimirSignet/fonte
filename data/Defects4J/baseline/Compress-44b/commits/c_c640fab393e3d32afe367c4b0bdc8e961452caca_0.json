{"sha": "c640fab393e3d32afe367c4b0bdc8e961452caca", "log": "Tab police  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveException.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveException.java\n  */\n public class ArchiveException extends Exception {\n \n-\t/** Serial */\n+    /** Serial */\n     private static final long serialVersionUID = 2772690708123267100L;\n \n     /**\n      *            the detail message\n      */\n     public ArchiveException(String message) {\n-\t\tsuper(message);\n-\t}\n-\t\n+        super(message);\n+    }\n+\n     /**\n      * Constructs a new exception with the specified detail message and cause.\n      * \n      * @param cause\n      *            the cause\n      */\n-\tpublic ArchiveException(String message, Exception cause) {\n-\t\tsuper(message);\n-\t\tthis.initCause(cause);\n-\t}\n+    public ArchiveException(String message, Exception cause) {\n+        super(message);\n+        this.initCause(cause);\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n         }\n         \n         if (in == null) {\n-        \tthrow new IllegalArgumentException(\"InputStream must not be null.\");\n+            throw new IllegalArgumentException(\"InputStream must not be null.\");\n         }\n \n         if (AR.equalsIgnoreCase(archiverName)) {\n             throw new IllegalArgumentException(\"Archivername must not be null.\");\n         }\n         if (out == null) {\n-        \tthrow new IllegalArgumentException(\"OutputStream must not be null.\");\n+            throw new IllegalArgumentException(\"OutputStream must not be null.\");\n         }\n \n         if (AR.equalsIgnoreCase(archiverName)) {\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveEntry.java\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n \n /**\n- * \n+ *\n  * @NotThreadSafe\n  */\n public class JarArchiveEntry extends ZipArchiveEntry implements ArchiveEntry {\n \n-\tprivate Attributes manifestAttributes = null;\n-\tprivate Certificate[] certificates = null; \n-\t\n-\tpublic JarArchiveEntry(ZipEntry entry) throws ZipException {\n-\t\tsuper(entry);\n-\t}\n+    private Attributes manifestAttributes = null;\n+    private Certificate[] certificates = null;\n \n-\tpublic JarArchiveEntry(String name) {\n-\t\tsuper(name);\n-\t}\n+    public JarArchiveEntry(ZipEntry entry) throws ZipException {\n+        super(entry);\n+    }\n \n-\tpublic JarArchiveEntry(ZipArchiveEntry entry) throws ZipException {\n-\t\tsuper(entry);\n-\t}\n+    public JarArchiveEntry(String name) {\n+        super(name);\n+    }\n \n-\tpublic JarArchiveEntry(JarEntry entry) throws ZipException {\n-\t\tsuper(entry);\n-\t\t\n-\t}\n+    public JarArchiveEntry(ZipArchiveEntry entry) throws ZipException {\n+        super(entry);\n+    }\n \n-\tpublic Attributes getManifestAttributes() {\n-\t\treturn manifestAttributes;\n-\t}\n+    public JarArchiveEntry(JarEntry entry) throws ZipException {\n+        super(entry);\n \n-\tpublic Certificate[] getCertificates() {\n+    }\n+\n+    public Attributes getManifestAttributes() {\n+        return manifestAttributes;\n+    }\n+\n+    public Certificate[] getCertificates() {\n             if (certificates != null) {\n                 Certificate[] certs = new Certificate[certificates.length];\n                 System.arraycopy(certificates, 0, certs, 0, certs.length);\n                 return certs;\n             }\n             return null;\n-\t}\n+    }\n \n     /* (non-Javadoc)\n      * @see org.apache.commons.compress.archivers.zip.ZipArchiveEntry#equals(java.lang.Object)\n--- a/src/main/java/org/apache/commons/compress/changes/Change.java\n+++ b/src/main/java/org/apache/commons/compress/changes/Change.java\n  * @Immutable\n  */\n class Change {\n-\tprivate final String targetFile; // entry name to delete\n-\tprivate final ArchiveEntry entry; // new entry to add\n-\tprivate final InputStream input; // source for new entry\n-\tprivate final boolean replaceMode; // change should replaceMode existing entries\n-\t\n-\t// Type of change\n-\tprivate final int type;\n-\t// Possible type values\n-\tstatic final int TYPE_DELETE = 1;\n-\tstatic final int TYPE_ADD = 2;\n-\tstatic final int TYPE_MOVE = 3; // NOT USED\n-\tstatic final int TYPE_DELETE_DIR = 4;\n-\t\n-\t/**\n-\t * Constructor. Takes the filename of the file to be deleted\n-\t * from the stream as argument.\n-\t * @param pFilename the filename of the file to delete\n-\t */\n-\tChange(final String pFilename, int type) {\n-\t\tif(pFilename == null) {\n-\t\t\tthrow new NullPointerException();\n-\t\t}\n-\t\tthis.targetFile = pFilename;\n-\t\tthis.type = type;\n-\t\tthis.input = null;\n-\t\tthis.entry = null;\n-\t\tthis.replaceMode = true;\n-\t}\n-\t\t\n-\t/**\n-\t * Construct a change which adds an entry.\n-\t * \n-\t * @param pEntry the entry details\n-\t * @param pInput the InputStream for the entry data\n-\t */\n-\tChange(final ArchiveEntry pEntry, final InputStream pInput, boolean replace) {\n-\t\tif(pEntry == null || pInput == null) {\n-\t\t\tthrow new NullPointerException();\n-\t\t}\n-\t\tthis.entry = pEntry;\n-\t\tthis.input = pInput;\n-\t\ttype = TYPE_ADD;\n-\t\ttargetFile = null;\n-\t\tthis.replaceMode = replace;\n-\t}\n-\t\n-\tArchiveEntry getEntry() {\n-\t\treturn entry;\n-\t}\n+    private final String targetFile; // entry name to delete\n+    private final ArchiveEntry entry; // new entry to add\n+    private final InputStream input; // source for new entry\n+    private final boolean replaceMode; // change should replaceMode existing entries\n \n-\tInputStream getInput() {\n-\t\treturn input;\n-\t}\n+    // Type of change\n+    private final int type;\n+    // Possible type values\n+    static final int TYPE_DELETE = 1;\n+    static final int TYPE_ADD = 2;\n+    static final int TYPE_MOVE = 3; // NOT USED\n+    static final int TYPE_DELETE_DIR = 4;\n \n-\tString targetFile() {\n-\t\treturn targetFile;\n-\t}\n-\t\n-\tint type() {\n-\t\treturn type;\n-\t}\n+    /**\n+     * Constructor. Takes the filename of the file to be deleted\n+     * from the stream as argument.\n+     * @param pFilename the filename of the file to delete\n+     */\n+    Change(final String pFilename, int type) {\n+        if(pFilename == null) {\n+            throw new NullPointerException();\n+        }\n+        this.targetFile = pFilename;\n+        this.type = type;\n+        this.input = null;\n+        this.entry = null;\n+        this.replaceMode = true;\n+    }\n+\n+    /**\n+     * Construct a change which adds an entry.\n+     * \n+     * @param pEntry the entry details\n+     * @param pInput the InputStream for the entry data\n+     */\n+    Change(final ArchiveEntry pEntry, final InputStream pInput, boolean replace) {\n+        if(pEntry == null || pInput == null) {\n+            throw new NullPointerException();\n+        }\n+        this.entry = pEntry;\n+        this.input = pInput;\n+        type = TYPE_ADD;\n+        targetFile = null;\n+        this.replaceMode = replace;\n+    }\n+\n+    ArchiveEntry getEntry() {\n+        return entry;\n+    }\n+\n+    InputStream getInput() {\n+        return input;\n+    }\n+\n+    String targetFile() {\n+        return targetFile;\n+    }\n+\n+    int type() {\n+        return type;\n+    }\n \n     boolean isReplaceMode() {\n         return replaceMode;\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/CRC.java\n  */\n class CRC {\n     private static final int crc32Table[] = {\n-\t        0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9,\n-\t        0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,\n-\t        0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,\n-\t        0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,\n-\t        0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,\n-\t        0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,\n-\t        0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011,\n-\t        0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,\n-\t        0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,\n-\t        0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,\n-\t        0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81,\n-\t        0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,\n-\t        0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,\n-\t        0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,\n-\t        0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,\n-\t        0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,\n-\t        0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae,\n-\t        0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,\n-\t        0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,\n-\t        0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,\n-\t        0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,\n-\t        0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,\n-\t        0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,\n-\t        0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,\n-\t        0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,\n-\t        0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,\n-\t        0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,\n-\t        0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,\n-\t        0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,\n-\t        0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,\n-\t        0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686,\n-\t        0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,\n-\t        0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,\n-\t        0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,\n-\t        0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,\n-\t        0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,\n-\t        0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47,\n-\t        0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,\n-\t        0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,\n-\t        0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,\n-\t        0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7,\n-\t        0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,\n-\t        0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,\n-\t        0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,\n-\t        0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,\n-\t        0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,\n-\t        0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f,\n-\t        0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,\n-\t        0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,\n-\t        0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,\n-\t        0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,\n-\t        0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,\n-\t        0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,\n-\t        0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,\n-\t        0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,\n-\t        0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,\n-\t        0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,\n-\t        0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,\n-\t        0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,\n-\t        0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,\n-\t        0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,\n-\t        0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,\n-\t        0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,\n-\t        0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4\n-\t    };\n+            0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9,\n+            0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,\n+            0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61,\n+            0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,\n+            0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9,\n+            0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,\n+            0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011,\n+            0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,\n+            0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039,\n+            0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,\n+            0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81,\n+            0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,\n+            0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49,\n+            0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,\n+            0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1,\n+            0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,\n+            0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae,\n+            0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,\n+            0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16,\n+            0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,\n+            0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde,\n+            0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,\n+            0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066,\n+            0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,\n+            0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e,\n+            0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,\n+            0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6,\n+            0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,\n+            0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e,\n+            0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,\n+            0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686,\n+            0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,\n+            0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637,\n+            0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,\n+            0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f,\n+            0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,\n+            0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47,\n+            0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,\n+            0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff,\n+            0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,\n+            0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7,\n+            0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,\n+            0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f,\n+            0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,\n+            0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7,\n+            0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,\n+            0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f,\n+            0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,\n+            0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640,\n+            0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,\n+            0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8,\n+            0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,\n+            0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30,\n+            0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,\n+            0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088,\n+            0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,\n+            0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0,\n+            0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,\n+            0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18,\n+            0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,\n+            0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0,\n+            0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,\n+            0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668,\n+            0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4\n+        };\n \n-\t    CRC() {\n-\t        initialiseCRC();\n-\t    }\n+        CRC() {\n+            initialiseCRC();\n+        }\n \n-\t    void initialiseCRC() {\n-\t        globalCrc = 0xffffffff;\n-\t    }\n+        void initialiseCRC() {\n+            globalCrc = 0xffffffff;\n+        }\n \n-\t    int getFinalCRC() {\n-\t        return ~globalCrc;\n-\t    }\n+        int getFinalCRC() {\n+            return ~globalCrc;\n+        }\n \n-\t    int getGlobalCRC() {\n-\t        return globalCrc;\n-\t    }\n+        int getGlobalCRC() {\n+            return globalCrc;\n+        }\n \n-\t    void setGlobalCRC(int newCrc) {\n-\t        globalCrc = newCrc;\n-\t    }\n+        void setGlobalCRC(int newCrc) {\n+            globalCrc = newCrc;\n+        }\n \n-\t    void updateCRC(int inCh) {\n-\t        int temp = (globalCrc >> 24) ^ inCh;\n-\t        if (temp < 0) {\n-\t            temp = 256 + temp;\n-\t        }\n-\t        globalCrc = (globalCrc << 8) ^ CRC.crc32Table[temp];\n-\t    }\n+        void updateCRC(int inCh) {\n+            int temp = (globalCrc >> 24) ^ inCh;\n+            if (temp < 0) {\n+                temp = 256 + temp;\n+            }\n+            globalCrc = (globalCrc << 8) ^ CRC.crc32Table[temp];\n+        }\n \n-\t    void updateCRC(int inCh, int repeat) {\n-\t        int globalCrcShadow = this.globalCrc;\n-\t        while (repeat-- > 0) {\n-\t            int temp = (globalCrcShadow >> 24) ^ inCh;\n-\t            globalCrcShadow = (globalCrcShadow << 8) ^ crc32Table[(temp >= 0)\n-\t                                                      ? temp\n-\t                                                      : (temp + 256)];\n-\t        }\n-\t        this.globalCrc = globalCrcShadow;\n-\t    }\n+        void updateCRC(int inCh, int repeat) {\n+            int globalCrcShadow = this.globalCrc;\n+            while (repeat-- > 0) {\n+                int temp = (globalCrcShadow >> 24) ^ inCh;\n+                globalCrcShadow = (globalCrcShadow << 8) ^ crc32Table[(temp >= 0)\n+                                                          ? temp\n+                                                          : (temp + 256)];\n+            }\n+            this.globalCrc = globalCrcShadow;\n+        }\n \n-\t    private int globalCrc;\n+        private int globalCrc;\n }\n--- a/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/IOUtils.java\n public final class IOUtils {\n \n     /** Private constructor to prevent instantiation of this utility class. */\n-    private IOUtils(){    \n+    private IOUtils(){\n     }\n \n-\t/**\n+    /**\n      * Copies the content of a InputStream into an OutputStream.\n      * Uses a default buffer size of 8024 bytes.\n-     * \n+     *\n      * @param input\n      *            the InputStream to copy\n      * @param output\n     public static long copy(final InputStream input, final OutputStream output) throws IOException {\n         return copy(input, output, 8024);\n     }\n-    \n+\n     /**\n      * Copies the content of a InputStream into an OutputStream\n-     * \n+     *\n      * @param input\n      *            the InputStream to copy\n      * @param output\n--- a/src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java\n import junit.framework.TestCase;\n \n public class ExceptionMessageTest extends TestCase {\n-\t\n-\tprivate static final String ARCHIVER_NULL_MESSAGE = \"Archivername must not be null.\";\n-\t\n-\tprivate static final String INPUTSTREAM_NULL_MESSAGE = \"InputStream must not be null.\";\n-\t\n-\tprivate static final String OUTPUTSTREAM_NULL_MESSAGE = \"OutputStream must not be null.\";\n-\t\n-\t\n-\t\n-\tpublic void testMessageWhenArchiverNameIsNull_1(){\n-\t\ttry{\n-\t\t\tnew ArchiveStreamFactory().createArchiveInputStream(null, System.in);\n-\t\t\tfail(\"Should raise an IllegalArgumentException.\");\n-\t\t}catch (IllegalArgumentException e) {\n-\t\t\tAssert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n-\t\t} catch (ArchiveException e) {\n-\t\t\tfail(\"ArchiveException not expected\");\n-\t\t}\n-\t}\n-\t\n-\tpublic void testMessageWhenInputStreamIsNull(){\n-\t\ttry{\n-\t\t\tnew ArchiveStreamFactory().createArchiveInputStream(\"zip\", null);\n-\t\t\tfail(\"Should raise an IllegalArgumentException.\");\n-\t\t}catch (IllegalArgumentException e) {\n-\t\t\tAssert.assertEquals(INPUTSTREAM_NULL_MESSAGE, e.getMessage());\n-\t\t} catch (ArchiveException e) {\n-\t\t\tfail(\"ArchiveException not expected\");\n-\t\t}\n-\t}\n-\t\n-\tpublic void testMessageWhenArchiverNameIsNull_2(){\n-\t\ttry{\n-\t\t\tnew ArchiveStreamFactory().createArchiveOutputStream(null, System.out);\n-\t\t\tfail(\"Should raise an IllegalArgumentException.\");\n-\t\t} catch (IllegalArgumentException e) {\n-\t\t\tAssert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n-\t\t} catch (ArchiveException e){\n-\t\t\tfail(\"ArchiveException not expected\");\n-\t\t}\n-\t}\n-\t\n-\tpublic void testMessageWhenOutputStreamIsNull(){\n-\t\ttry{\n-\t\t\tnew ArchiveStreamFactory().createArchiveOutputStream(\"zip\", null);\n-\t\t\tfail(\"Should raise an IllegalArgumentException.\");\n-\t\t} catch (IllegalArgumentException e) {\n-\t\t\tAssert.assertEquals(OUTPUTSTREAM_NULL_MESSAGE, e.getMessage());\n-\t\t} catch (ArchiveException e) {\n-\t\t\tfail(\"ArchiveException not expected\");\n-\t\t}\n-\t}\n-\t\n-\t\n+\n+    private static final String ARCHIVER_NULL_MESSAGE = \"Archivername must not be null.\";\n+    \n+    private static final String INPUTSTREAM_NULL_MESSAGE = \"InputStream must not be null.\";\n+    \n+    private static final String OUTPUTSTREAM_NULL_MESSAGE = \"OutputStream must not be null.\";\n+\n+\n+    public void testMessageWhenArchiverNameIsNull_1(){\n+        try{\n+            new ArchiveStreamFactory().createArchiveInputStream(null, System.in);\n+            fail(\"Should raise an IllegalArgumentException.\");\n+        }catch (IllegalArgumentException e) {\n+            Assert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n+        } catch (ArchiveException e) {\n+            fail(\"ArchiveException not expected\");\n+        }\n+    }\n+\n+    public void testMessageWhenInputStreamIsNull(){\n+        try{\n+            new ArchiveStreamFactory().createArchiveInputStream(\"zip\", null);\n+            fail(\"Should raise an IllegalArgumentException.\");\n+        }catch (IllegalArgumentException e) {\n+            Assert.assertEquals(INPUTSTREAM_NULL_MESSAGE, e.getMessage());\n+        } catch (ArchiveException e) {\n+            fail(\"ArchiveException not expected\");\n+        }\n+    }\n+\n+    public void testMessageWhenArchiverNameIsNull_2(){\n+        try{\n+            new ArchiveStreamFactory().createArchiveOutputStream(null, System.out);\n+            fail(\"Should raise an IllegalArgumentException.\");\n+        } catch (IllegalArgumentException e) {\n+            Assert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n+        } catch (ArchiveException e){\n+            fail(\"ArchiveException not expected\");\n+        }\n+    }\n+\n+    public void testMessageWhenOutputStreamIsNull(){\n+        try{\n+            new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", null);\n+            fail(\"Should raise an IllegalArgumentException.\");\n+        } catch (IllegalArgumentException e) {\n+            Assert.assertEquals(OUTPUTSTREAM_NULL_MESSAGE, e.getMessage());\n+        } catch (ArchiveException e) {\n+            fail(\"ArchiveException not expected\");\n+        }\n+    }\n \n }\n--- a/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/JarTestCase.java\n import org.apache.commons.compress.AbstractTestCase;\n \n public final class JarTestCase extends AbstractTestCase {\n-\tpublic void testJarArchiveCreation() throws Exception {\n-\t\tfinal File output = new File(dir, \"bla.jar\");\n+    public void testJarArchiveCreation() throws Exception {\n+        final File output = new File(dir, \"bla.jar\");\n \n-\t\tfinal File file1 = getFile(\"test1.xml\");\n-\t\tfinal File file2 = getFile(\"test2.xml\");\n-\t\t\n+        final File file1 = getFile(\"test1.xml\");\n+        final File file2 = getFile(\"test2.xml\");\n+\n         final OutputStream out = new FileOutputStream(output);\n-        \n+\n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"jar\", out);\n \n         os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n         IOUtils.copy(new FileInputStream(file1), os);\n         os.closeArchiveEntry();\n-        \n+\n         os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n         IOUtils.copy(new FileInputStream(file2), os);\n         os.closeArchiveEntry();\n         os.close();\n     }\n \n-\t\n-\tpublic void testJarUnarchive() throws Exception {\n-\t\tfinal File input = getFile(\"bla.jar\");\n+\n+    public void testJarUnarchive() throws Exception {\n+        final File input = getFile(\"bla.jar\");\n         final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n-        \n+\n         ZipArchiveEntry entry = (ZipArchiveEntry)in.getNextEntry();\n         File o = new File(dir, entry.getName());\n         o.getParentFile().mkdirs();\n         OutputStream out = new FileOutputStream(o);\n         IOUtils.copy(in, out);\n         out.close();\n-        \n+\n         entry = (ZipArchiveEntry)in.getNextEntry();\n         o = new File(dir, entry.getName());\n         o.getParentFile().mkdirs();\n         out = new FileOutputStream(o);\n         IOUtils.copy(in, out);\n         out.close();\n-        \n+\n         entry = (ZipArchiveEntry)in.getNextEntry();\n         o = new File(dir, entry.getName());\n         o.getParentFile().mkdirs();\n         out = new FileOutputStream(o);\n         IOUtils.copy(in, out);\n         out.close();\n-        \n+\n         in.close();\n         is.close();\n     }\n-\t\n-\tpublic void testJarUnarchiveAll() throws Exception {\n-\t\tfinal File input = getFile(\"bla.jar\");\n+\n+    public void testJarUnarchiveAll() throws Exception {\n+        final File input = getFile(\"bla.jar\");\n         final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"jar\", is);\n-        \n+\n         ArchiveEntry entry = in.getNextEntry();\n-\t\twhile (entry != null) {\n-\t\t\tFile archiveEntry = new File(dir, entry.getName());\n-\t\t\tarchiveEntry.getParentFile().mkdirs();\n-\t\t\tif(entry.isDirectory()){\n-\t\t\t\tarchiveEntry.mkdir();\n-\t\t\t\tentry = in.getNextEntry();\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tOutputStream out = new FileOutputStream(archiveEntry);\n-\t\t\tIOUtils.copy(in, out);\n-\t\t\tout.close();\n-\t\t\tentry = in.getNextEntry();\n-\t\t}\n-\t\t\n-\t\tin.close();\n-\t\tis.close();\n-\t}\n+        while (entry != null) {\n+            File archiveEntry = new File(dir, entry.getName());\n+            archiveEntry.getParentFile().mkdirs();\n+            if(entry.isDirectory()){\n+                archiveEntry.mkdir();\n+                entry = in.getNextEntry();\n+                continue;\n+            }\n+            OutputStream out = new FileOutputStream(archiveEntry);\n+            IOUtils.copy(in, out);\n+            out.close();\n+            entry = in.getNextEntry();\n+        }\n+\n+        in.close();\n+        is.close();\n+    }\n \n }\n--- a/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/TarTestCase.java\n \n public final class TarTestCase extends AbstractTestCase {\n     public void testTarArchiveCreation() throws Exception {\n-\t\tfinal File output = new File(dir, \"bla.tar\");\n-\t\tfinal File file1 = getFile(\"test1.xml\");\n-    \tfinal OutputStream out = new FileOutputStream(output);\n+        final File output = new File(dir, \"bla.tar\");\n+        final File file1 = getFile(\"test1.xml\");\n+        final OutputStream out = new FileOutputStream(output);\n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out);\n         final TarArchiveEntry entry = new TarArchiveEntry(\"testdata/test1.xml\");\n         entry.setModTime(0);\n         os.closeArchiveEntry();\n         os.close();\n     }\n-    \n+\n     public void testTarArchiveLongNameCreation() throws Exception {\n-    \tString name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\";\n-    \tbyte[] bytes = name.getBytes();\n-    \tassertEquals(bytes.length, 99);\n-    \t\n-\t\tfinal File output = new File(dir, \"bla.tar\");\n-\t\tfinal File file1 = getFile(\"test1.xml\");\n-    \tfinal OutputStream out = new FileOutputStream(output);\n+        String name = \"testdata/12345678901234567890123456789012345678901234567890123456789012345678901234567890123456.xml\";\n+        byte[] bytes = name.getBytes();\n+        assertEquals(bytes.length, 99);\n+\n+        final File output = new File(dir, \"bla.tar\");\n+        final File file1 = getFile(\"test1.xml\");\n+        final OutputStream out = new FileOutputStream(output);\n         final ArchiveOutputStream os = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out);\n         final TarArchiveEntry entry = new TarArchiveEntry(name);\n         entry.setModTime(0);\n         os.close();\n         out.close();\n         in.close();\n-        \n-        \n+\n+\n         ArchiveOutputStream os2 = null;\n         try {\n-        \tString toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\";\n-        \tfinal File output2 = new File(dir, \"bla.tar\");\n-        \tfinal OutputStream out2 = new FileOutputStream(output2);\n-        \tos2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2);\n-        \tfinal TarArchiveEntry entry2 = new TarArchiveEntry(toLongName);\n-        \tentry2.setModTime(0);\n-        \tentry2.setSize(file1.length());\n-        \tentry2.setUserId(0);\n-        \tentry2.setGroupId(0);\n-        \tentry2.setUserName(\"avalon\");\n-        \tentry2.setGroupName(\"excalibur\");\n-        \tentry2.setMode(0100000);\n-        \tos2.putArchiveEntry(entry);\n-        \tIOUtils.copy(new FileInputStream(file1), os2);\n+            String toLongName = \"testdata/123456789012345678901234567890123456789012345678901234567890123456789012345678901234567.xml\";\n+            final File output2 = new File(dir, \"bla.tar\");\n+            final OutputStream out2 = new FileOutputStream(output2);\n+            os2 = new ArchiveStreamFactory().createArchiveOutputStream(\"tar\", out2);\n+            final TarArchiveEntry entry2 = new TarArchiveEntry(toLongName);\n+            entry2.setModTime(0);\n+            entry2.setSize(file1.length());\n+            entry2.setUserId(0);\n+            entry2.setGroupId(0);\n+            entry2.setUserName(\"avalon\");\n+            entry2.setGroupName(\"excalibur\");\n+            entry2.setMode(0100000);\n+            os2.putArchiveEntry(entry);\n+            IOUtils.copy(new FileInputStream(file1), os2);\n             os2.closeArchiveEntry();\n         } catch(IOException e) {\n-        \tassertTrue(true);\n-        } finally {\n-        \tif (os2 != null){\n-        \t    os2.close();\n-        \t}\n-        }\n-    }\n-    \n+            assertTrue(true);\n+        } finally {\n+            if (os2 != null){\n+                os2.close();\n+            }\n+        }\n+    }\n+\n     public void testTarUnarchive() throws Exception {\n-\t\tfinal File input = getFile(\"bla.tar\");\n-\t\tfinal InputStream is = new FileInputStream(input);\n+        final File input = getFile(\"bla.tar\");\n+        final InputStream is = new FileInputStream(input);\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"tar\", is);\n         final TarArchiveEntry entry = (TarArchiveEntry)in.getNextEntry();\n         final OutputStream out = new FileOutputStream(new File(dir, entry.getName()));\n--- a/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveInputStream.java\n \n public final class MemoryArchiveInputStream extends ArchiveInputStream {\n \n-\tprivate final String[] filenames;\n-\tprivate final String[] content;\n-\tprivate int p;\n-\t\n-\tpublic MemoryArchiveInputStream( final String[][] pFiles ) {\n-\t\tfilenames = new String[pFiles.length];\n-\t\tcontent = new String[pFiles.length];\n-\t\t\n-\t\tfor (int i = 0; i < pFiles.length; i++) {\n-\t\t\tString[] nameAndContent = pFiles[i];\n-\t\t\tfilenames[i] = nameAndContent[0];\n-\t\t\tcontent[i] = nameAndContent[1];\n-\t\t}\n-\t\tp = 0;\n-\t}\n-\t\n-\tpublic ArchiveEntry getNextEntry() throws IOException {\n-\t\tif (p >= filenames.length) {\n-\t\t\treturn null;\n-\t\t}\n+    private final String[] filenames;\n+    private final String[] content;\n+    private int p;\n \n-\t\treturn new MemoryArchiveEntry(filenames[p]);\n-\t}\n+    public MemoryArchiveInputStream( final String[][] pFiles ) {\n+        filenames = new String[pFiles.length];\n+        content = new String[pFiles.length];\n \n-\tpublic String readString() {\n-\t\treturn content[p++];\n-\t}\n-\t\n-\tpublic int read() throws IOException {\n-\t\treturn 0;\n-\t}\n+        for (int i = 0; i < pFiles.length; i++) {\n+            String[] nameAndContent = pFiles[i];\n+            filenames[i] = nameAndContent[0];\n+            content[i] = nameAndContent[1];\n+        }\n+        p = 0;\n+    }\n+\n+    public ArchiveEntry getNextEntry() throws IOException {\n+        if (p >= filenames.length) {\n+            return null;\n+        }\n+\n+        return new MemoryArchiveEntry(filenames[p]);\n+    }\n+\n+    public String readString() {\n+        return content[p++];\n+    }\n+\n+    public int read() throws IOException {\n+        return 0;\n+    }\n \n }\n--- a/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java\n \n public final class MemoryArchiveTestCase extends TestCase {\n \n-\tpublic void testReading() throws IOException {\n-\t\t\n-\t\tfinal MemoryArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {\n-\t\t\t\t{ \"test1\",     \"content1\" },\n-\t\t\t\t{ \"test2\",     \"content2\" },\n-\t\t\t\t});\n+    public void testReading() throws IOException {\n \n-\t\tfinal ArchiveEntry entry1 = is.getNextEntry();\n-\t\tassertNotNull(entry1);\n-\t\tassertEquals(\"test1\", entry1.getName());\n-\t\tfinal String content1 = is.readString();\n-\t\tassertEquals(\"content1\", content1);\n-\t\t\n-\t\tfinal ArchiveEntry entry2 = is.getNextEntry();\n-\t\tassertNotNull(entry2);\n-\t\tassertEquals(\"test2\", entry2.getName());\n-\t\tfinal String content2 = is.readString();\n-\t\tassertEquals(\"content2\", content2);\n-\t\t\n-\t\tfinal ArchiveEntry entry3 = is.getNextEntry();\n-\t\tassertNull(entry3);\n-\t\t\n-\t}\n+        final MemoryArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {\n+                { \"test1\",     \"content1\" },\n+                { \"test2\",     \"content2\" },\n+                });\n+\n+        final ArchiveEntry entry1 = is.getNextEntry();\n+        assertNotNull(entry1);\n+        assertEquals(\"test1\", entry1.getName());\n+        final String content1 = is.readString();\n+        assertEquals(\"content1\", content1);\n+\n+        final ArchiveEntry entry2 = is.getNextEntry();\n+        assertNotNull(entry2);\n+        assertEquals(\"test2\", entry2.getName());\n+        final String content2 = is.readString();\n+        assertEquals(\"content2\", content2);\n+\n+        final ArchiveEntry entry3 = is.getNextEntry();\n+        assertNull(entry3);\n+\n+    }\n \n }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n \n     public void testReadPasswordEncryptedEntryViaZipFile()\n         throws IOException, URISyntaxException {\n-\tURL zip = getClass().getResource(\"/password-encrypted.zip\");\n+        URL zip = getClass().getResource(\"/password-encrypted.zip\");\n         File file = new File(new URI(zip.toString()));\n         ZipFile zf = null;\n         try {\n \n     public void testReadPasswordEncryptedEntryViaStream()\n         throws IOException, URISyntaxException {\n-\tURL zip = getClass().getResource(\"/password-encrypted.zip\");\n+        URL zip = getClass().getResource(\"/password-encrypted.zip\");\n         File file = new File(new URI(zip.toString()));\n         ZipArchiveInputStream zin = null;\n         try {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java\n import junit.framework.TestCase;\n \n public class ZipUtilTest extends TestCase {\n-    \n+\n     private Date time;\n     private ZipLong zl;\n-    \n+\n     /**\n      * Constructor\n-     */\t\n+     */\n     public ZipUtilTest(String name) {\n         super(name);\n     }\n-\t\n+\n     protected void setUp() throws Exception {\n         time = new Date();\n         Calendar cal = Calendar.getInstance();\n         int month = cal.get(Calendar.MONTH) + 1;\n         long value =  ((year - 1980) << 25)\n             |         (month << 21)\n-            |\t      (cal.get(Calendar.DAY_OF_MONTH) << 16)\n+            |         (cal.get(Calendar.DAY_OF_MONTH) << 16)\n             |         (cal.get(Calendar.HOUR_OF_DAY) << 11)\n             |         (cal.get(Calendar.MINUTE) << 5)\n             |         (cal.get(Calendar.SECOND) >> 1);\n     protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n-    \n+\n     public void testZipLong() throws Exception {\n         ZipLong test = ZipUtil.toDosTime(time);\n         assertEquals(test.getValue(), zl.getValue());\n--- a/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/BZip2TestCase.java\n \n public final class BZip2TestCase extends AbstractTestCase {\n \n-\tpublic void testBzipCreation()  throws Exception {\n-\t    File output = null;\n-\t    final File input = getFile(\"test.txt\");\n-\t    {\n-    \t\toutput = new File(dir, \"test.txt.bz2\");\n-    \t\tfinal OutputStream out = new FileOutputStream(output);\n-    \t\tfinal CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n-    \t\tFileInputStream in = new FileInputStream(input);\n-    \t\tIOUtils.copy(in, cos);\n-    \t\tcos.close();\n-    \t\tin.close();\n-\t\t}\n-\t\t\n-\t    final File decompressed = new File(dir, \"decompressed.txt\");\n-\t\t{\n-\t\t    final File toDecompress = output;\n-\t        final InputStream is = new FileInputStream(toDecompress);\n-\t        final CompressorInputStream in = \n-\t            new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is);\n-\t        FileOutputStream os = new FileOutputStream(decompressed);\n-\t        IOUtils.copy(in, os);\n-\t        is.close();\n-\t        os.close();\n-\t\t}\n-\t\t\n-\t\tassertEquals(input.length(),decompressed.length());\n-\t}\n-\t\n-\tpublic void testBzip2Unarchive() throws Exception {\n-\t\tfinal File input = getFile(\"bla.txt.bz2\");\n-\t\tfinal File output = new File(dir, \"bla.txt\");\n+    public void testBzipCreation()  throws Exception {\n+        File output = null;\n+        final File input = getFile(\"test.txt\");\n+        {\n+            output = new File(dir, \"test.txt.bz2\");\n+            final OutputStream out = new FileOutputStream(output);\n+            final CompressorOutputStream cos = new CompressorStreamFactory().createCompressorOutputStream(\"bzip2\", out);\n+            FileInputStream in = new FileInputStream(input);\n+            IOUtils.copy(in, cos);\n+            cos.close();\n+            in.close();\n+        }\n+\n+        final File decompressed = new File(dir, \"decompressed.txt\");\n+        {\n+            final File toDecompress = output;\n+            final InputStream is = new FileInputStream(toDecompress);\n+            final CompressorInputStream in =\n+                new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is);\n+            FileOutputStream os = new FileOutputStream(decompressed);\n+            IOUtils.copy(in, os);\n+            is.close();\n+            os.close();\n+        }\n+\n+        assertEquals(input.length(),decompressed.length());\n+    }\n+\n+    public void testBzip2Unarchive() throws Exception {\n+        final File input = getFile(\"bla.txt.bz2\");\n+        final File output = new File(dir, \"bla.txt\");\n         final InputStream is = new FileInputStream(input);\n         final CompressorInputStream in = new CompressorStreamFactory().createCompressorInputStream(\"bzip2\", is);\n         FileOutputStream os = new FileOutputStream(output);\n         IOUtils.copy(in, os);\n-\t\tis.close();\n-\t\tos.close();\n+        is.close();\n+        os.close();\n     }\n \n }", "timestamp": 1267572438, "metainfo": ""}