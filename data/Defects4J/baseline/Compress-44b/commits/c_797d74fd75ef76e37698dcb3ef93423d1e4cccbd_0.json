{"sha": "797d74fd75ef76e37698dcb3ef93423d1e4cccbd", "log": "deal with entries of a size between Integer.MAX_VALUE and 2 * Integer.MAX_VALUE (size is unsigned in ZIPs).  COMPRESS-129.  As pointed out by Sebb the solution is incomplete and a more complete resolution is not possible without requiring Java5.  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n     private ZipArchiveEntry current = null;\n     private boolean closed = false;\n     private boolean hitCentralDirectory = false;\n-    private int readBytesOfEntry = 0, offsetInBuffer = 0;\n-    private int bytesReadFromStream = 0;\n+    private int offsetInBuffer = 0;\n+    private long readBytesOfEntry = 0, bytesReadFromStream = 0;\n     private int lengthOfLastRead = 0;\n     private boolean hasDataDescriptor = false;\n     private ByteArrayInputStream lastStoredEntry = null;\n                     return lastStoredEntry.read(buffer, start, length);\n                 }\n \n-                int csize = (int) current.getSize();\n+                long csize = current.getSize();\n                 if (readBytesOfEntry >= csize) {\n                     return -1;\n                 }\n                     ? lengthOfLastRead - offsetInBuffer\n                     : length;\n                 if ((csize - readBytesOfEntry) < toRead) {\n-                    toRead = csize - readBytesOfEntry;\n+                    // if it is smaller than toRead then it fits into an int\n+                    toRead = (int) (csize - readBytesOfEntry);\n                 }\n                 System.arraycopy(buf, offsetInBuffer, buffer, start, toRead);\n                 offsetInBuffer += toRead;\n         } else {\n             skip(Long.MAX_VALUE);\n \n-            int inB;\n+            long inB;\n             if (current.getMethod() == ZipArchiveOutputStream.DEFLATED) {\n                 inB = inf.getTotalIn();\n             } else {\n                 inB = readBytesOfEntry;\n             }\n-            int diff = 0;\n+\n+            // this is at most a single read() operation and can't\n+            // exceed the range of int\n+            int diff = (int) (bytesReadFromStream - inB);\n \n             // Pushback any required bytes\n-            if ((diff = bytesReadFromStream - inB) != 0) {\n+            if (diff > 0) {\n                 ((PushbackInputStream) in).unread(\n                         buf,  lengthOfLastRead - diff, diff);\n                 pushedBackBytes(diff);\n         }\n \n         inf.reset();\n-        readBytesOfEntry = offsetInBuffer = bytesReadFromStream =\n-            lengthOfLastRead = 0;\n+        readBytesOfEntry = bytesReadFromStream = 0L;\n+        offsetInBuffer = lengthOfLastRead = 0;\n         crc.reset();\n         current = null;\n         lastStoredEntry = null;", "timestamp": 1311220175, "metainfo": ""}