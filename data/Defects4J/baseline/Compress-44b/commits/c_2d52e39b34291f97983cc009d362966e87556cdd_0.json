{"sha": "2d52e39b34291f97983cc009d362966e87556cdd", "log": "Support the POSIX way of writing tar entries with names longer than 100 chars.  COMPRESS-166  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n     /** GNU tar extensions are used to store long file names in the archive. */\n     public static final int LONGFILE_GNU = 2;\n \n+    /** POSIX/PAX extensions are used to store long file names in the archive. */\n+    public static final int LONGFILE_POSIX = 3;\n+\n     /** Fail if a big file (&gt; 8GiB) is required in the archive. */\n     public static final int BIGFILE_ERROR = 0;\n \n         Map<String, String> paxHeaders = new HashMap<String, String>();\n         if (entry.getName().length() >= TarConstants.NAMELEN) {\n \n-            if (longFileMode == LONGFILE_GNU) {\n+            if (longFileMode == LONGFILE_POSIX) {\n+                paxHeaders.put(\"path\", entry.getName());\n+            } else if (longFileMode == LONGFILE_GNU) {\n                 // create a TarEntry for the LongLink, the contents\n                 // of which are the entry's name\n                 TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n     void writePaxHeaders(String entryName,\n                          Map<String, String> headers) throws IOException {\n         String name = \"./PaxHeaders.X/\" + entryName;\n-        if (name.length() > TarConstants.NAMELEN) {\n-            name = name.substring(0, TarConstants.NAMELEN);\n+        if (name.length() >= TarConstants.NAMELEN) {\n+            name = name.substring(0, TarConstants.NAMELEN - 1);\n         }\n         TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n \n         return bos.toByteArray();\n     }\n+\n+    public void testWriteLongFileNamePosixMode() throws Exception {\n+        String n = \"01234567890123456789012345678901234567890123456789\"\n+            + \"01234567890123456789012345678901234567890123456789\"\n+            + \"01234567890123456789012345678901234567890123456789\";\n+        TarArchiveEntry t =\n+            new TarArchiveEntry(n);\n+        t.setSize(10 * 1024);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n+        tos.setLongFileMode(TarArchiveOutputStream.LONGFILE_POSIX);\n+        tos.putArchiveEntry(t);\n+        tos.write(new byte[10 * 1024]);\n+        tos.closeArchiveEntry();\n+        byte[] data = bos.toByteArray();\n+        assertEquals(\"160 path=\" + n + \"\\n\",\n+                     new String(data, 512, 160, \"UTF-8\"));\n+        TarArchiveInputStream tin =\n+            new TarArchiveInputStream(new ByteArrayInputStream(data));\n+        TarArchiveEntry e = tin.getNextTarEntry();\n+        assertEquals(n, e.getName());\n+    }\n }", "timestamp": 1323360772, "metainfo": ""}