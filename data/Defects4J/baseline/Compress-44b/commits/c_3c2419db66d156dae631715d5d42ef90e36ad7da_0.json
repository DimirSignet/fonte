{"sha": "3c2419db66d156dae631715d5d42ef90e36ad7da", "log": "add-some-Unit-Tests Added additional Unit Tests.", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/cpio/CpioUtilTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioUtilTest.java\n  */\n package org.apache.commons.compress.archivers.cpio;\n \n+import org.junit.Test;\n+\n import static org.junit.Assert.assertArrayEquals;\n import static org.junit.Assert.assertEquals;\n-\n-import org.junit.Test;\n \n public class CpioUtilTest {\n \n                                              true));\n     }\n \n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testLong2byteArrayWithZeroThrowsUnsupportedOperationException() {\n+\n+        CpioUtil.long2byteArray(0L, 0, false);\n+\n+    }\n+\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testLong2byteArrayWithPositiveThrowsUnsupportedOperationException() {\n+\n+        CpioUtil.long2byteArray(0L, 1021, false);\n+\n+    }\n+\n+\n+    @Test(expected = UnsupportedOperationException.class)\n+    public void testByteArray2longThrowsUnsupportedOperationException() {\n+\n+        byte[] byteArray = new byte[1];\n+\n+        CpioUtil.byteArray2long(byteArray, true);\n+\n+    }\n+\n+\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.changes;\n+\n+import org.apache.commons.compress.archivers.memory.MemoryArchiveEntry;\n+import org.junit.Test;\n+\n+import java.io.PipedInputStream;\n+\n+\n+/**\n+ * Unit tests for class {@link Change}.\n+ *\n+ * @date 16.06.2017\n+ * @see Change\n+ **/\n+public class ChangeTest {\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testFailsToCreateChangeTakingFourArgumentsThrowsNullPointerExceptionOne() {\n+\n+        MemoryArchiveEntry memoryArchiveEntry = new MemoryArchiveEntry(\"x\");\n+\n+        Change change  = new Change(memoryArchiveEntry, null, false);\n+\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testFailsToCreateChangeTakingFourArgumentsThrowsNullPointerExceptionTwo() {\n+\n+        PipedInputStream pipedInputStream = new PipedInputStream(1);\n+\n+        Change change  = new Change(null, pipedInputStream, false);\n+\n+    }\n+\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testFailsToCreateChangeTakingThreeArgumentsThrowsNullPointerException() {\n+\n+        Change change  = new Change(null, (-407));\n+\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/xz/XZCompressorOutputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.xz;\n+\n+import org.junit.Test;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+\n+/**\n+ * Unit tests for class {@link XZCompressorOutputStream}.\n+ *\n+ * @date 16.06.2017\n+ * @see XZCompressorOutputStream\n+ **/\n+public class XZCompressorOutputStreamTest {\n+\n+\n+    @Test\n+    public void testWrite() throws IOException {\n+\n+        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(4590);\n+        XZCompressorOutputStream xZCompressorOutputStream = new XZCompressorOutputStream(byteArrayOutputStream);\n+        xZCompressorOutputStream.write(4590);\n+\n+        assertEquals(24, byteArrayOutputStream.size());\n+        assertEquals(\"\\uFFFD7zXZ\\u0000\\u0000\\u0004\\uFFFD\\u05B4F\\u0002\\u0000!\\u0001\\u0016\\u0000\\u0000\\u0000t/\\uFFFD\", byteArrayOutputStream.toString());\n+\n+    }\n+\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/z/ZCompressorInputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.z;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.io.SequenceInputStream;\n+import java.util.Enumeration;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.powermock.api.mockito.PowerMockito.doReturn;\n+\n+\n+/**\n+ * Unit tests for class {@link ZCompressorInputStream}.\n+ *\n+ * @date 16.06.2017\n+ * @see ZCompressorInputStream\n+ **/\n+public class ZCompressorInputStreamTest {\n+\n+\n+    @Test(expected = IOException.class)\n+    public void testFailsToCreateZCompressorInputStreamAndThrowsIOException() throws IOException {\n+\n+        Enumeration<SequenceInputStream> enumeration = (Enumeration<SequenceInputStream>) mock(Enumeration.class);\n+        SequenceInputStream sequenceInputStream = new SequenceInputStream(enumeration);\n+        ZCompressorInputStream zCompressorInputStream = null;\n+\n+        doReturn(false).when(enumeration).hasMoreElements();\n+\n+        zCompressorInputStream = new ZCompressorInputStream(sequenceInputStream);\n+\n+    }\n+\n+\n+}", "timestamp": 1497687610, "metainfo": ""}