{"sha": "d244dc6f6b7b1dba9f20cd7698fc576b2ec5e4ac", "log": "Some Javadoc fixes submitted by Andreas Kr\u00fcger  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveOutputStream.java\n  * They should also override {@link #close()} to ensure that any necessary\n  * trailers are added.\n  * \n- * <p>\n- * The normal sequence of calls for working with ArchiveOutputStreams is:\n- * + create ArchiveOutputStream object\n- * + write SFX header (optional, Zip only)\n- * + repeat as needed:\n- *      - putArchiveEntry() (writes entry header)\n- *      - write() (writes entry data)\n- *      - closeArchiveEntry() (closes entry)\n- * + finish() (ends the addition of entries)\n- * + write additional data if format supports it (optional)\n- * + close()\n- * </p>\n+ * <p>The normal sequence of calls when working with ArchiveOutputStreams is:</p>\n+ * <ul>\n+ *   <li>Create ArchiveOutputStream object,</li>\n+ *   <li>optionally write SFX header (Zip only),</li>\n+ *   <li>repeat as needed:\n+ *     <ul>\n+ *       <li>{@link #putArchiveEntry(ArchiveEntry)} (writes entry header),\n+ *       <li>{@link #write(byte[])} (writes entry data, as often as needed),\n+ *       <li>{@link #closeArchiveEntry()} (closes entry),\n+ *     </ul>\n+ *   </li>\n+ *   <li> {@link #finish()} (ends the addition of entries),</li>\n+ *   <li> optionally write additional data, provided format supports it,</li>\n+ *   <li>{@link #close()}.</li>\n+ * </ul>\n  * \n  * <p>\n  * Example usage:<br/>\n      * Finishes the addition of entries to this stream, without closing it.\n      * Additional data can be written, if the format supports it.\n      * \n-     * The finish() method throws an Exception if the user forgets to close the entry\n-     * .\n-     * @throws IOException\n+     * @throws IOException if the user forgets to close the entry.\n      */\n     public abstract void finish() throws IOException;\n \n     /**\n      * Writes a byte to the current archive entry.\n      *\n-     * This method simply calls write( byte[], 0, 1 ).\n+     * <p>This method simply calls {@code write( byte[], 0, 1 )}.\n      *\n-     * MUST be overridden if the {@link #write(byte[], int, int)} method\n+     * <p>MUST be overridden if the {@link #write(byte[], int, int)} method\n      * is not overridden; may be overridden otherwise.\n      * \n      * @param b The byte to be written.\n \n     /**\n      * Increments the counter of already written bytes.\n-     * Doesn't increment if the EOF has been hit ({@code written} == -1)\n+     * Doesn't increment if EOF has been hit ({@code written == -1}).\n      * \n      * @param written the number of bytes written\n      */\n \n     /**\n      * Increments the counter of already written bytes.\n-     * Doesn't increment if the EOF has been hit ({@code written} == -1)\n+     * Doesn't increment if EOF has been hit ({@code written == -1}).\n      * \n      * @param written the number of bytes written\n      * @since 1.1\n--- a/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java\n import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n \n /**\n- * <p>Factory to create Archive[In|Out]putStreams from names or the first bytes of\n- * the InputStream. In order add other implementations you should extend\n+ * Factory to create Archive[In|Out]putStreams from names or the first bytes of\n+ * the InputStream. In order to add other implementations, you should extend\n  * ArchiveStreamFactory and override the appropriate methods (and call their\n- * implementation from super of course).</p>\n+ * implementation from super of course).\n  * \n  * Compressing a ZIP-File:\n  * ", "timestamp": 1366903504, "metainfo": ""}