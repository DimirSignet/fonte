{"sha": "77388c82c0f484ebf11b5f3292f0103514fd00f1", "log": "Add final modifier to local variables.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStream.java\n             uncompressedBytesRemaining = readSize() - 4 /* CRC */;\n             expectedChecksum = unmask(readCrc());\n         } else if (type == COMPRESSED_CHUNK_TYPE) {\n-            boolean expectChecksum = dialect.usesChecksumWithCompressedChunks();\n+            final boolean expectChecksum = dialect.usesChecksumWithCompressedChunks();\n             final long size = readSize() - (expectChecksum ? 4 : 0);\n             if (expectChecksum) {\n                 expectedChecksum = unmask(readCrc());\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n         for (int i = 0; i < len; i++) {\n             final char c = chars[i];\n             if (!Character.isISOControl(c)) {\n-                Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n+                final Character.UnicodeBlock block = Character.UnicodeBlock.of(c);\n                 if (block != null && block != Character.UnicodeBlock.SPECIALS) {\n                     sb.append(c);\n                     continue;\n--- a/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n \n     @Test\n     public void sanitizeShortensString() {\n-        String input = \"012345678901234567890123456789012345678901234567890123456789\"\n+        final String input = \"012345678901234567890123456789012345678901234567890123456789\"\n             + \"012345678901234567890123456789012345678901234567890123456789\"\n             + \"012345678901234567890123456789012345678901234567890123456789\"\n             + \"012345678901234567890123456789012345678901234567890123456789\"\n             + \"012345678901234567890123456789012345678901234567890123456789\";\n-        String expected = \"012345678901234567890123456789012345678901234567890123456789\"\n+        final String expected = \"012345678901234567890123456789012345678901234567890123456789\"\n             + \"012345678901234567890123456789012345678901234567890123456789\"\n             + \"012345678901234567890123456789012345678901234567890123456789\"\n             + \"012345678901234567890123456789012345678901234567890123456789\"\n \n     @Test\n     public void sanitizeLeavesShortStringsAlone() {\n-        String input = \"012345678901234567890123456789012345678901234567890123456789\";\n+        final String input = \"012345678901234567890123456789012345678901234567890123456789\";\n         assertEquals(input, ArchiveUtils.sanitize(input));\n     }\n \n     @Test\n     public void sanitizeRemovesUnprintableCharacters() {\n-        String input = \"\\b12345678901234567890123456789012345678901234567890123456789\";\n-        String expected = \"?12345678901234567890123456789012345678901234567890123456789\";\n+        final String input = \"\\b12345678901234567890123456789012345678901234567890123456789\";\n+        final String expected = \"?12345678901234567890123456789012345678901234567890123456789\";\n         assertEquals(expected, ArchiveUtils.sanitize(input));\n     }\n \n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n             SevenZArchiveEntry entry = sevenZFile.getNextEntry();\n             while (entry != null) {\n                 entries++;\n-                int b = sevenZFile.read();\n+                final int b = sevenZFile.read();\n                 if (\"2.txt\".equals(entry.getName()) || \"5.txt\".equals(entry.getName())) {\n                     assertEquals(-1, b);\n                 } else {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStreamTest.java\n                 ze = in.getNextZipEntry();\n             }\n             fail(\"expected EOFException\");\n-        } catch (EOFException ex) {\n-            String m = ex.getMessage();\n+        } catch (final EOFException ex) {\n+            final String m = ex.getMessage();\n             assertTrue(m.startsWith(\"Truncated ZIP entry: ?2016\")); // the first character is not printable\n         } finally {\n             in.close();\n--- a/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/snappy/FramedSnappyCompressorInputStreamTest.java\n     public void readIWAFile() throws Exception {\n         final ZipFile zip = new ZipFile(getFile(\"testNumbersNew.numbers\"));\n         try {\n-            InputStream is = zip.getInputStream(zip.getEntry(\"Index/Document.iwa\"));\n+            final InputStream is = zip.getInputStream(zip.getEntry(\"Index/Document.iwa\"));\n             try {\n                 final FramedSnappyCompressorInputStream in =\n                     new FramedSnappyCompressorInputStream(is, FramedSnappyDialect.IWORK_ARCHIVE);", "timestamp": 1466890506, "metainfo": ""}