{"sha": "62f86d5c1eed6e2c294524a4bf472e5ea17eecd6", "log": "COMPRESS-346 support star PAX headers for sparse files", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveEntry.java\n     /** is this entry a GNU sparse entry using one of the PAX formats? */\n     private boolean paxGNUSparse;\n \n+    /** is this entry a star sparse entry using the PAX header? */\n+    private boolean starSparse;\n+\n     /** The entry's file reference */\n     private final File file;\n \n     }\n \n     /**\n-     * Indicate if this entry is a GNU sparse block using the oldgnu format.\n+     * Indicate if this entry is a GNU or star sparse block using the\n+     * oldgnu format.\n+     *\n+     * @return true if this is a sparse extension provided by GNU tar or star\n+     * @since 1.11\n+     */\n+    public boolean isOldGNUSparse() {\n+        return linkFlag == LF_GNUTYPE_SPARSE;\n+    }\n+\n+    /**\n+     * Indicate if this entry is a GNU sparse block using one of the\n+     * PAX formats.\n      *\n      * @return true if this is a sparse extension provided by GNU tar\n      * @since 1.11\n      */\n-    public boolean isOldGNUSparse() {\n-        return linkFlag == LF_GNUTYPE_SPARSE;\n-    }\n-\n-    /**\n-     * Indicate if this entry is a GNU sparse block using one of the\n-     * PAX formats.\n-     *\n-     * @return true if this is a sparse extension provided by GNU tar\n-     * @since 1.11\n-     */\n     public boolean isPaxGNUSparse() {\n         return paxGNUSparse;\n+    }\n+\n+    /**\n+     * Indicate if this entry is a star sparse block using PAX headers.\n+     *\n+     * @return true if this is a sparse extension provided by star\n+     * @since 1.11\n+     */\n+    public boolean isStarSparse() {\n+        return starSparse;\n     }\n \n     /**\n      * @since 1.11\n      */\n     public boolean isSparse() {\n-        return isGNUSparse();\n+        return isGNUSparse() || isStarSparse();\n     }\n \n     /**\n         realSize = Integer.parseInt(headers.get(\"GNU.sparse.realsize\"));\n         name = headers.get(\"GNU.sparse.name\");\n     }\n+\n+    void fillStarSparseData(Map<String, String> headers) {\n+        starSparse = true;\n+        if (headers.containsKey(\"SCHILY.realsize\")) {\n+            realSize = Long.parseLong(headers.get(\"SCHILY.realsize\"));\n+        }\n+    }\n }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n          * GNU sparse files use additional members, we use\n          * GNU.sparse.size to detect the 0.0 and 0.1 versions and\n          * GNU.sparse.realsize for 1.0.\n+         *\n+         * star files use additional members of which we use\n+         * SCHILY.filetype in order to detect star sparse files.\n          */\n         for (Entry<String, String> ent : headers.entrySet()){\n             String key = ent.getKey();\n                 currEntry.fillGNUSparse0xData(headers);\n             } else if (\"GNU.sparse.realsize\".equals(key)) {\n                 currEntry.fillGNUSparse1xData(headers);\n+            } else if (\"SCHILY.filetype\".equals(key) && \"sparse\".equals(val)) {\n+                currEntry.fillStarSparseData(headers);\n             }\n         }\n     }", "timestamp": 1458764022, "metainfo": ""}