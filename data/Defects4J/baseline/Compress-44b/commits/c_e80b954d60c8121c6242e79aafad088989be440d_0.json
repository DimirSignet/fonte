{"sha": "e80b954d60c8121c6242e79aafad088989be440d", "log": "added replace feature for Add-Changes  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/changes/Change.java\n+++ b/src/main/java/org/apache/commons/compress/changes/Change.java\n \tprivate final String targetFile; // entry name to delete\n \tprivate final ArchiveEntry entry; // new entry to add\n \tprivate final InputStream input; // source for new entry\n+\tprivate final boolean replaceMode; // change should replaceMode existing entries\n \t\n \t// Type of change\n \tprivate final int type;\n \t\tthis.type = type;\n \t\tthis.input = null;\n \t\tthis.entry = null;\n+\t\tthis.replaceMode = true;\n \t}\n \t\t\n \t/**\n \t * @param pEntry the entry details\n \t * @param pInput the InputStream for the entry data\n \t */\n-\tChange(final ArchiveEntry pEntry, final InputStream pInput) {\n+\tChange(final ArchiveEntry pEntry, final InputStream pInput, boolean replace) {\n \t\tif(pEntry == null || pInput == null) {\n \t\t\tthrow new NullPointerException();\n \t\t}\n \t\tthis.input = pInput;\n \t\ttype = TYPE_ADD;\n \t\ttargetFile = null;\n+\t\tthis.replaceMode = replace;\n \t}\n \t\n \tArchiveEntry getEntry() {\n \tint type() {\n \t\treturn type;\n \t}\n+\n+    boolean isReplaceMode() {\n+        return replaceMode;\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSet.java\n      *            the datastream to add\n      */\n     public void add(final ArchiveEntry pEntry, final InputStream pInput) {\n-        addAddition(new Change(pEntry, pInput));\n+        this.add(pEntry, pInput, true);\n+    }\n+    \n+    /**\n+     * Adds a new archive entry to the archive.\n+     * \n+     * @param pEntry\n+     *            the entry to add\n+     * @param pInput\n+     *            the datastream to add\n+     * @param replace\n+     *            indicates the this change should replace existing entries            \n+     */\n+    public void add(final ArchiveEntry pEntry, final InputStream pInput, final boolean replace) {\n+        addAddition(new Change(pEntry, pInput, replace));\n     }\n \n     /**\n                     ArchiveEntry entry = change.getEntry();\n \n                     if(entry.equals(pChange.getEntry())) {\n-                        it.remove();\n-                        break;\n+                        if(pChange.isReplaceMode()) {\n+                            it.remove();\n+                            changes.add(pChange);\n+                            return;\n+                        } else {\n+                            // do not add this change\n+                            return;\n+                        }\n                     }\n                 }\n             }\n--- a/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java\n+++ b/src/main/java/org/apache/commons/compress/changes/ChangeSetPerformer.java\n         for (Iterator it = workingSet.iterator(); it.hasNext();) {\n             Change change = (Change) it.next();\n \n-            if (change.type() == Change.TYPE_ADD) {\n+            if (change.type() == Change.TYPE_ADD && change.isReplaceMode()) {\n                 copyStream(change.getInput(), out, change.getEntry());\n                 it.remove();\n                 results.addedFromChangeSet(change.getEntry().getName());\n                     copyStream(in, out, entry);\n                     results.addedFromStream(entry.getName());\n                 }\n+            }\n+        }\n+        \n+        // Adds files which hasn't been added from the original and do not have replace mode on\n+        for (Iterator it = workingSet.iterator(); it.hasNext();) {\n+            Change change = (Change) it.next();\n+\n+            if (change.type() == Change.TYPE_ADD && \n+                !change.isReplaceMode() && \n+                !results.hasBeenAdded(change.getEntry().getName())) {\n+                copyStream(change.getInput(), out, change.getEntry());\n+                it.remove();\n+                results.addedFromChangeSet(change.getEntry().getName());\n             }\n         }\n         \n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n     }\n     \n     /**\n+     * Adds an ArchiveEntry with the same name two times.\n+     * Only the first addition should be found in the ChangeSet,\n+     * the second add should never be added since replace = false\n+     * \n+     * @throws Exception\n+     */\n+    public void testAddChangeTwiceWithoutReplace() throws Exception {\n+        InputStream in = null;\n+        InputStream in2 = null;\n+        try {\n+            in = new FileInputStream(getFile(\"test.txt\"));\n+            in2 = new FileInputStream(getFile(\"test2.xml\"));\n+       \n+            ArchiveEntry e = new ZipArchiveEntry(\"test.txt\");\n+            ArchiveEntry e2 = new ZipArchiveEntry(\"test.txt\");\n+            \n+            ChangeSet changes = new ChangeSet();\n+            changes.add(e, in, true);\n+            changes.add(e2, in2, false);\n+            \n+            assertEquals(1, changes.getChanges().size());\n+            Change c = (Change)changes.getChanges().iterator().next();\n+            assertEquals(in, c.getInput());\n+        } finally {\n+            if (in != null)\n+                in.close();\n+            if (in2 != null)\n+                in2.close();\n+        }\n+    }\n+    \n+    /**\n      * Tries to delete the folder \"bla\" from an archive file. This should result in\n      * the deletion of bla/*, which actually means bla/test4.xml should be\n      * removed from the archive. The file something/bla (without ending, named\n \n         this.checkArchiveContent(result, archiveList);\n     }\n+    \n+    /**\n+     * Adds a file with the same filename as an existing file from the stream.\n+     * Should lead to a replacement.\n+     * \n+     * @throws Exception\n+     */\n+    public void testAddAllreadyExistingWithReplaceTrue() throws Exception {\n+        final String archivename = \"zip\";\n+        File input = this.createArchive(archivename);\n+\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File result = File.createTempFile(\"test\", \".\"+archivename);\n+        result.deleteOnExit();\n+        try {\n+\n+            final InputStream is = new FileInputStream(input);\n+            ais = factory.createArchiveInputStream(archivename, is);\n+            out = factory.createArchiveOutputStream(archivename,\n+                    new FileOutputStream(result));\n+\n+            ChangeSet changes = new ChangeSet();\n+\n+            final File file1 = getFile(\"test.txt\");\n+            ArchiveEntry entry = new ZipArchiveEntry(\"testdata/test1.xml\");\n+            changes.add(entry, new FileInputStream(file1), true);\n+            \n+            ChangeSetPerformer performer = new ChangeSetPerformer(changes);\n+            ChangeSetResults results = performer.perform(ais, out);\n+            assertTrue(results.getAddedFromChangeSet().contains(\"testdata/test1.xml\"));\n+            is.close();\n+\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+\n+        this.checkArchiveContent(result, archiveList);\n+    }\n+    \n+    /**\n+     * Adds a file with the same filename as an existing file from the stream.\n+     * Should lead to a replacement.\n+     * \n+     * @throws Exception\n+     */\n+    public void testAddAllreadyExistingWithReplaceFalse() throws Exception {\n+        final String archivename = \"zip\";\n+        File input = this.createArchive(archivename);\n+\n+        ArchiveOutputStream out = null;\n+        ArchiveInputStream ais = null;\n+        File result = File.createTempFile(\"test\", \".\"+archivename);\n+        result.deleteOnExit();\n+        try {\n+\n+            final InputStream is = new FileInputStream(input);\n+            ais = factory.createArchiveInputStream(archivename, is);\n+            out = factory.createArchiveOutputStream(archivename,\n+                    new FileOutputStream(result));\n+\n+            ChangeSet changes = new ChangeSet();\n+\n+            final File file1 = getFile(\"test.txt\");\n+            ArchiveEntry entry = new ZipArchiveEntry(\"testdata/test1.xml\");\n+            changes.add(entry, new FileInputStream(file1), false);\n+            \n+            ChangeSetPerformer performer = new ChangeSetPerformer(changes);\n+            ChangeSetResults results = performer.perform(ais, out);\n+            assertTrue(results.getAddedFromStream().contains(\"testdata/test1.xml\"));\n+            assertTrue(results.getAddedFromChangeSet().size() == 0);\n+            assertTrue(results.getDeleted().size() == 0);\n+            is.close();\n+\n+        } finally {\n+            if (out != null)\n+                out.close();\n+            if (ais != null)\n+                ais.close();\n+        }\n+\n+        this.checkArchiveContent(result, archiveList);\n+    }\n+    \n }", "timestamp": 1240142909, "metainfo": ""}