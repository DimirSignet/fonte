{"sha": "a180778776229d5c6a39543dc768b76ffe8413ae", "log": "check name/directory/size and lastModified read from zip is consistent with what we write  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntry.java\n     }\n \n     public ZipArchiveEntry(File inputFile, String entryName) {\n-        this(entryName);\n+        this(inputFile.isDirectory() && !entryName.endsWith(\"/\") ? \n+             entryName + \"/\" : entryName);\n         if (inputFile.isFile()){\n             setSize(inputFile.length());\n         }\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n     protected String getExpectedString(ArchiveEntry entry) {\n         return entry.getName();\n     }\n+\n+    /**\n+     * Creates a temporary directory and a temporary file inside that\n+     * directory, returns both of them (the directory is the first\n+     * element of the two element array).\n+     */\n+    protected File[] createTempDirAndFile() throws IOException {\n+        File tmpDir = File.createTempFile(\"testdir\", \"\");\n+        tmpDir.delete();\n+        tmpDir.mkdir();\n+        tmpDir.deleteOnExit();\n+        File tmpFile = File.createTempFile(\"testfile\", \"\", tmpDir);\n+        tmpFile.deleteOnExit();\n+        FileOutputStream fos = new FileOutputStream(tmpFile);\n+        try {\n+            fos.write(new byte[] {'f', 'o', 'o'});\n+            return new File[] {tmpDir, tmpFile};\n+        } finally {\n+            fos.close();\n+        }            \n+    }\n }\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.List;\n \n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n+import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;\n+import org.apache.commons.compress.archivers.zip.ZipFile;\n import org.apache.commons.compress.utils.IOUtils;\n \n public final class ZipTestCase extends AbstractTestCase {\n         results.contains(\"test2.xml\");\n         results.contains(\"test3.xml\");\n     }\n+\n+    public void testDirectoryEntryFromFile() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        ZipArchiveOutputStream zos = null;\n+        ZipFile zf = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".zip\", tmp[0]);\n+            archive.deleteOnExit();\n+            zos = new ZipArchiveOutputStream(archive);\n+            long beforeArchiveWrite = tmp[0].lastModified();\n+            ZipArchiveEntry in = new ZipArchiveEntry(tmp[0], \"foo\");\n+            zos.putArchiveEntry(in);\n+            zos.closeArchiveEntry();\n+            zos.close();\n+            zos = null;\n+            zf = new ZipFile(archive);\n+            ZipArchiveEntry out = zf.getEntry(\"foo/\");\n+            assertNotNull(out);\n+            assertEquals(\"foo/\", out.getName());\n+            assertEquals(0, out.getSize());\n+            // ZIP stores time with a granularity of 2 seconds\n+            assertEquals(beforeArchiveWrite / 2000,\n+                         out.getLastModifiedDate().getTime() / 2000);\n+            assertTrue(out.isDirectory());\n+        } finally {\n+            ZipFile.closeQuietly(zf);\n+            if (zos != null) {\n+                zos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testExplicitDirectoryEntry() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        ZipArchiveOutputStream zos = null;\n+        ZipFile zf = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".zip\", tmp[0]);\n+            archive.deleteOnExit();\n+            zos = new ZipArchiveOutputStream(archive);\n+            long beforeArchiveWrite = tmp[0].lastModified();\n+            ZipArchiveEntry in = new ZipArchiveEntry(\"foo/\");\n+            in.setTime(beforeArchiveWrite);\n+            zos.putArchiveEntry(in);\n+            zos.closeArchiveEntry();\n+            zos.close();\n+            zos = null;\n+            zf = new ZipFile(archive);\n+            ZipArchiveEntry out = zf.getEntry(\"foo/\");\n+            assertNotNull(out);\n+            assertEquals(\"foo/\", out.getName());\n+            assertEquals(0, out.getSize());\n+            assertEquals(beforeArchiveWrite / 2000,\n+                         out.getLastModifiedDate().getTime() / 2000);\n+            assertTrue(out.isDirectory());\n+        } finally {\n+            ZipFile.closeQuietly(zf);\n+            if (zos != null) {\n+                zos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testFileEntryFromFile() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        ZipArchiveOutputStream zos = null;\n+        ZipFile zf = null;\n+        FileInputStream fis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".zip\", tmp[0]);\n+            archive.deleteOnExit();\n+            zos = new ZipArchiveOutputStream(archive);\n+            ZipArchiveEntry in = new ZipArchiveEntry(tmp[1], \"foo\");\n+            zos.putArchiveEntry(in);\n+            byte[] b = new byte[(int) tmp[1].length()];\n+            fis = new FileInputStream(tmp[1]);\n+            int read;\n+            while ((read = fis.read(b)) > 0) {\n+                zos.write(b);\n+            }\n+            fis.close();\n+            fis = null;\n+            zos.closeArchiveEntry();\n+            zos.close();\n+            zos = null;\n+            zf = new ZipFile(archive);\n+            ZipArchiveEntry out = zf.getEntry(\"foo\");\n+            assertNotNull(out);\n+            assertEquals(\"foo\", out.getName());\n+            assertEquals(tmp[1].length(), out.getSize());\n+            assertEquals(tmp[1].lastModified() / 2000,\n+                         out.getLastModifiedDate().getTime() / 2000);\n+            assertFalse(out.isDirectory());\n+        } finally {\n+            ZipFile.closeQuietly(zf);\n+            if (zos != null) {\n+                zos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            if (fis != null) {\n+                fis.close();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n+\n+    public void testExplicitFileEntry() throws Exception {\n+        File[] tmp = createTempDirAndFile();\n+        File archive = null;\n+        ZipArchiveOutputStream zos = null;\n+        ZipFile zf = null;\n+        FileInputStream fis = null;\n+        try {\n+            archive = File.createTempFile(\"test.\", \".zip\", tmp[0]);\n+            archive.deleteOnExit();\n+            zos = new ZipArchiveOutputStream(archive);\n+            ZipArchiveEntry in = new ZipArchiveEntry(\"foo\");\n+            in.setTime(tmp[1].lastModified());\n+            in.setSize(tmp[1].length());\n+            zos.putArchiveEntry(in);\n+            byte[] b = new byte[(int) tmp[1].length()];\n+            fis = new FileInputStream(tmp[1]);\n+            int read;\n+            while ((read = fis.read(b)) > 0) {\n+                zos.write(b);\n+            }\n+            fis.close();\n+            fis = null;\n+            zos.closeArchiveEntry();\n+            zos.close();\n+            zos = null;\n+            zf = new ZipFile(archive);\n+            ZipArchiveEntry out = zf.getEntry(\"foo\");\n+            assertNotNull(out);\n+            assertEquals(\"foo\", out.getName());\n+            assertEquals(tmp[1].length(), out.getSize());\n+            assertEquals(tmp[1].lastModified() / 2000,\n+                         out.getLastModifiedDate().getTime() / 2000);\n+            assertFalse(out.isDirectory());\n+        } finally {\n+            ZipFile.closeQuietly(zf);\n+            if (zos != null) {\n+                zos.close();\n+            }\n+            if (archive != null) {\n+                archive.delete();\n+            }\n+            if (fis != null) {\n+                fis.close();\n+            }\n+            tmp[1].delete();\n+            tmp[0].delete();\n+        }\n+    }\n }", "timestamp": 1249154278, "metainfo": ""}