{"sha": "c608c3309b99ec69bfcdd6aaa1ad32851d09e94d", "log": "COMPRESS-265 tariling backslashes are as bad for PAX headers as trailing slashes - on Windows  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n         String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n         if (name.length() >= TarConstants.NAMELEN) {\n             name = name.substring(0, TarConstants.NAMELEN - 1);\n-        }\n-        while (name.endsWith(\"/\")) {\n-            // TarEntry's constructor would think this is a directory\n-            // and not allow any data to be written\n-            name = name.substring(0, name.length() - 1);\n         }\n         TarArchiveEntry pex = new TarArchiveEntry(name,\n                                                   TarConstants.LF_PAX_EXTENDED_HEADER_LC);\n         StringBuilder result = new StringBuilder(length);\n         for (int i = 0; i < length; i++) {\n             char stripped = (char) (name.charAt(i) & 0x7F);\n-            if (stripped != 0) { // would be read as Trailing null\n+            if (shouldBeReplaced(stripped)) {\n+                result.append(\"_\");\n+            } else {\n                 result.append(stripped);\n             }\n         }\n         return result.toString();\n+    }\n+\n+    /**\n+     * @return true if the character could lead to problems when used\n+     * inside a TarArchiveEntry name for a PAX header.\n+     */\n+    private boolean shouldBeReplaced(char c) {\n+        return c == 0 // would be read as Trailing null\n+            || c == '/' // when used as last character TAE will consider the PAX header a directory\n+            || c == '\\\\'; // same as '/' as slashes get \"normalized\" on Windows\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n         TarArchiveEntry e = tin.getNextTarEntry();\n         assertEquals(n, e.getName());\n         assertTrue(e.isDirectory());\n+        tin.close();\n+    }\n+\n+    /**\n+     * @see \"https://issues.apache.org/jira/browse/COMPRESS-265\"\n+     */\n+    public void testWriteNonAsciiNameWithUnfortunateNamePosixMode() throws Exception {\n+        String n = \"f\\u00f6\\u00f6\\u00dc\";\n+        TarArchiveEntry t = new TarArchiveEntry(n);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n+        tos.setAddPaxHeadersForNonAsciiNames(true);\n+        tos.putArchiveEntry(t);\n+        tos.closeArchiveEntry();\n+        tos.close();\n+        byte[] data = bos.toByteArray();\n+        TarArchiveInputStream tin =\n+            new TarArchiveInputStream(new ByteArrayInputStream(data));\n+        TarArchiveEntry e = tin.getNextTarEntry();\n+        assertEquals(n, e.getName());\n+        assertFalse(e.isDirectory());\n         tin.close();\n     }\n ", "timestamp": 1393052442, "metainfo": ""}