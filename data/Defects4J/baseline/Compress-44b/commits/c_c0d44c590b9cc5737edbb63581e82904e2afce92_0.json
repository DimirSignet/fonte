{"sha": "c0d44c590b9cc5737edbb63581e82904e2afce92", "log": "Replaced the shutdownStream() methods with IOUtils.closeQuietly() in the test cases  ", "commit": "\n--- a/src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java\n+++ b/src/test/org/apache/commons/compress/archivers/tar/TarTestCase.java\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.OutputStream;\n+\n+import org.apache.commons.io.IOUtils;\n \n import junit.framework.TestCase;\n \n         final FileInputStream fileInput = new FileInputStream( DATA_FILE1 );\n         output.copyEntryContents( fileInput );\n         output.closeEntry();\n-        shutdownStream( fileInput );\n-        shutdownStream( output );\n-        shutdownStream( fileOutput );\n+        IOUtils.closeQuietly( fileInput );\n+        IOUtils.closeQuietly( output );\n+        IOUtils.closeQuietly( fileOutput );\n \n         assertTrue( \"Tar files Equal\", contentEquals( temp, POSIX_TAR_FILE ) );\n         temp.delete();\n         final FileInputStream fileInput = new FileInputStream( DATA_FILE1 );\n         output.copyEntryContents( fileInput );\n         output.closeEntry();\n-        shutdownStream( fileInput );\n-        shutdownStream( output );\n-        shutdownStream( fileOutput );\n+        IOUtils.closeQuietly( fileInput );\n+        IOUtils.closeQuietly( output );\n+        IOUtils.closeQuietly( fileOutput );\n \n         //Have to compare it this way as the contents will differ\n         //due to entry created for second part of name\n         final File temp = new File( BASEDIR_FILE, entryName.length() + \"data.txt\" );//File.createTempFile( \"delete-me\", \"tar\" );\n         final FileOutputStream output = new FileOutputStream( temp );\n         input.copyEntryContents( output );\n-        shutdownStream( output );\n+        IOUtils.closeQuietly( output );\n \n         assertNull( \"Next Entry\", input.getNextEntry() );\n \n-        shutdownStream( input );\n+        IOUtils.closeQuietly( input );\n \n         assertTrue( \"Data Equals\", contentEquals( temp, DATA_FILE1 ) );\n         temp.delete();\n         }\n         finally\n         {\n-            shutdownStream( input1 );\n-            shutdownStream( input2 );\n+            IOUtils.closeQuietly( input1 );\n+            IOUtils.closeQuietly( input2 );\n         }\n     }\n \n             return true;\n         }\n     }\n-\n-    private void shutdownStream( final InputStream input )\n-    {\n-        if( null == input )\n-        {\n-            return;\n-        }\n-\n-        try\n-        {\n-            input.close();\n-        }\n-        catch( final IOException ioe )\n-        {\n-        }\n-    }\n-\n-    private void shutdownStream( final OutputStream output )\n-    {\n-        if( null == output )\n-        {\n-            return;\n-        }\n-\n-        try\n-        {\n-            output.close();\n-        }\n-        catch( final IOException ioe )\n-        {\n-        }\n-    }\n }\n--- a/src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java\n+++ b/src/test/org/apache/commons/compress/compressors/bzip2/BzipTestCase.java\n import java.io.OutputStream;\n \n import org.apache.commons.compress.CompressUtils;\n+import org.apache.commons.io.IOUtils;\n \n import junit.framework.TestCase;\n \n         final OutputStream output = new FileOutputStream( outputFile );\n         final BZip2OutputStream packedOutput = getPackedOutput( output );\n         CompressUtils.copy( input, packedOutput );\n-        shutdownStream( input );\n-        shutdownStream( packedOutput );\n-        shutdownStream( output );\n+        IOUtils.closeQuietly( input );\n+        IOUtils.closeQuietly( packedOutput );\n+        IOUtils.closeQuietly( output );\n         compareContents( \"asf-logo-huge.tar.bz2\", outputFile );\n         forceDelete( outputFile );\n     }\n         final OutputStream output = new FileOutputStream( outputFile );\n         final BZip2InputStream packedInput = getPackedInput( input );\n         CompressUtils.copy( packedInput, output );\n-        shutdownStream( input );\n-        shutdownStream( packedInput );\n-        shutdownStream( output );\n+        IOUtils.closeQuietly( input );\n+        IOUtils.closeQuietly( packedInput );\n+        IOUtils.closeQuietly( output );\n         compareContents( \"asf-logo-huge.tar\", outputFile );\n         forceDelete( outputFile );\n     }\n         final File outputFile = getOutputFile( \".tar.bz2\" );\n         final OutputStream output = new FileOutputStream( outputFile );\n         CompressUtils.copy( input, output );\n-        shutdownStream( input );\n-        shutdownStream( output );\n+        IOUtils.closeQuietly( input );\n+        IOUtils.closeQuietly( output );\n         assertTrue( \"Check output file exists.\" , outputFile.exists() );\n         final InputStream input2 = new FileInputStream( outputFile );\n         final InputStream packedInput = getPackedInput( input2 );\n-        shutdownStream( packedInput );\n+        IOUtils.closeQuietly( packedInput );\n         try\n         {\n             input2.read();\n         final InputStream input1 = getInputStream( initial );\n         final InputStream input2 = new FileInputStream( generated );\n         final boolean test = contentEquals( input1, input2 );\n-        shutdownStream( input1 );\n-        shutdownStream( input2 );\n+        IOUtils.closeQuietly( input1 );\n+        IOUtils.closeQuietly( input2 );\n         assertTrue( \"Contents of \" + initial + \" matches generated version \" + generated, test );\n     }\n \n             return filepath.substring( 0, index );\n         }\n     }\n-\n-    /**\n-     * Unconditionally close an <code>OutputStream</code>.\n-     * Equivalent to {@link java.io.OutputStream#close()}, except any exceptions will be ignored.\n-     * @param output A (possibly null) OutputStream\n-     */\n-    private static void shutdownStream( final OutputStream output )\n-    {\n-        if( null == output )\n-        {\n-            return;\n-        }\n-\n-        try\n-        {\n-            output.close();\n-        }\n-        catch( final IOException ioe )\n-        {\n-        }\n-    }\n-\n-    /**\n-     * Unconditionally close an <code>InputStream</code>.\n-     * Equivalent to {@link InputStream#close()}, except any exceptions will be ignored.\n-     * @param input A (possibly null) InputStream\n-     */\n-    private static void shutdownStream( final InputStream input )\n-    {\n-        if( null == input )\n-        {\n-            return;\n-        }\n-\n-        try\n-        {\n-            input.close();\n-        }\n-        catch( final IOException ioe )\n-        {\n-        }\n-    }\n }", "timestamp": 1214069509, "metainfo": ""}