{"sha": "26eab98e3a0d403587cc915eaa8f7d4b7b894cef", "log": "COMPRESS-382 and COMPRESS-386 -- take 4, clean up and allow for overflow via longs.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/MemoryLimit.java\n+++ b/src/main/java/org/apache/commons/compress/MemoryLimit.java\n     public static int getMemoryLimitInKb() {\n         return MEMORY_LIMIT_IN_KB;\n     }\n+\n+    public static void checkLimitInKb(long memoryNeeded) throws MemoryLimitException {\n+        if (memoryNeeded < 0) {\n+            throw new IllegalArgumentException(\"MemoryLimit must be > -1\");\n+        }\n+\n+        if (memoryNeeded >> 10 > Integer.MAX_VALUE) {\n+            throw new MemoryLimitException(memoryNeeded,\n+                    (MEMORY_LIMIT_IN_KB < 0) ? Integer.MAX_VALUE : MEMORY_LIMIT_IN_KB);\n+        }\n+\n+        if (MEMORY_LIMIT_IN_KB > -1 && memoryNeeded > MEMORY_LIMIT_IN_KB) {\n+                throw new MemoryLimitException(memoryNeeded, MEMORY_LIMIT_IN_KB);\n+        }\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/MemoryLimitException.java\n+++ b/src/main/java/org/apache/commons/compress/MemoryLimitException.java\n  * if a stream tries to allocate a byte array that is larger than\n  * the allowable limit.\n  *\n+ * <p/>\n+ * Set the global memory limit via {@link MemoryLimit#setMemoryLimitInKb(int)}.\n+ *\n  * @since 1.14\n  */\n public class MemoryLimitException extends IOException {\n \n-    public MemoryLimitException(String message) {\n-        super(message);\n-    }\n-\n-    public MemoryLimitException(String message, Exception e) {\n-        super(message, e);\n+    /**\n+     *\n+     * @param memoryNeeded estimated memory needed\n+     * @param memoryLimit memory limit applied\n+     */\n+    public MemoryLimitException(long memoryNeeded, int memoryLimit) {\n+        super(\"\" + memoryNeeded + \" KiB of memory would be needed; limit was \"\n+                + memoryLimit + \" KiB.  If the file is not corrupt, consider \" +\n+                \"increasing MemoryLimit.MEMORY_LIMIT_IN_KB.\");\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java\n             in = new LZMAInputStream(inputStream, MemoryLimit.getMemoryLimitInKb());\n         } catch (org.tukaani.xz.MemoryLimitException e) {\n             //convert to commons-compress exception\n-            throw new MemoryLimitException(\"exceeded calculated memory limit\", e);\n+            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit());\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n import java.io.InputStream;\n import java.nio.ByteOrder;\n \n+import org.apache.commons.compress.MemoryLimit;\n import org.apache.commons.compress.MemoryLimitException;\n import org.apache.commons.compress.compressors.CompressorInputStream;\n import org.apache.commons.compress.utils.BitInputStream;\n     /**\n      * Initializes the arrays based on the maximum code size.\n      * @param maxCodeSize maximum code size\n-     * @param memoryLimitInKb maximum allowed table size in Kb\n-     * @throws MemoryLimitException if maxTableSize is > memoryLimitInKb\n-     */\n-    protected void initializeTables(final int maxCodeSize, final int memoryLimitInKb)\n-            throws MemoryLimitException {\n+     *\n+     * @throws MemoryLimitException\n+     *      if the calculated memory usage, based on the maxTableSize,\n+     *      is &gt; {@link MemoryLimit#MEMORY_LIMIT_IN_KB}\n+     */\n+    protected void initializeTables(final int maxCodeSize) throws MemoryLimitException {\n         final int maxTableSize = 1 << maxCodeSize;\n-        if (memoryLimitInKb > -1 && maxTableSize > memoryLimitInKb*1024) {\n-            throw new MemoryLimitException(\"Tried to allocate \"+maxTableSize +\n-                    \" but memoryLimitInKb only allows \"+(memoryLimitInKb*1024));\n-        }\n-        initializeTables(maxCodeSize);\n-    }\n-\n-    /**\n-     * Initializes the arrays based on the maximum code size.\n-     * @param maxCodeSize maximum code size\n-     */\n-    protected void initializeTables(final int maxCodeSize) {\n-        final int maxTableSize = 1 << maxCodeSize;\n+\n+        //account for potential overflow\n+        long memoryUsageInBytes = (long)maxTableSize * 6;//(4 (prefixes) + 1 (characters) +1 (outputStack))\n+        MemoryLimit.checkLimitInKb(memoryUsageInBytes >> 10);\n+\n         prefixes = new int[maxTableSize];\n         characters = new byte[maxTableSize];\n         outputStack = new byte[maxTableSize];\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n             count(ret == -1 ? -1 : 1);\n             return ret;\n         } catch (org.tukaani.xz.MemoryLimitException e) {\n-            throw new MemoryLimitException(\"Exceeded memory limit\", e);\n+            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit());\n         }\n     }\n \n             return ret;\n         } catch (org.tukaani.xz.MemoryLimitException e) {\n             //convert to commons-compress MemoryLimtException\n-            throw new MemoryLimitException(\"Exceeded memory limit\", e);\n+            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit());\n         }\n     }\n \n             return in.skip(n);\n         } catch (org.tukaani.xz.MemoryLimitException e) {\n             //convert to commons-compress MemoryLimtException\n-            throw new MemoryLimitException(\"Excedded memory limit\", e);\n+            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit());\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n import java.io.InputStream;\n import java.nio.ByteOrder;\n \n-import org.apache.commons.compress.MemoryLimit;\n import org.apache.commons.compress.compressors.lzw.LZWInputStream;\n \n /**\n         if (blockMode) {\n             setClearCode(DEFAULT_CODE_SIZE);\n         }\n-        initializeTables(maxCodeSize, MemoryLimit.getMemoryLimitInKb());\n+        initializeTables(maxCodeSize);\n         clearEntries();\n     }\n     ", "timestamp": 1493086199, "metainfo": ""}