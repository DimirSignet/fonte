{"sha": "2424036c286f0b3dfc280f00a1e835cb52e39375", "log": "COMPRESS-357 - no longer invoke finish from finalize", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/bzip2/BZip2CompressorOutputStream.java\n     private Data data;\n     private BlockSort blockSorter;\n \n-    private final Object outLock = new Object();\n     private OutputStream out;\n+    private volatile boolean closed;\n \n     /**\n      * Chooses a blocksize based on the given length of the data to compress.\n \n     @Override\n     public void write(final int b) throws IOException {\n-        if (this.out != null) {\n+        if (!closed) {\n             write0(b);\n         } else {\n             throw new IOException(\"closed\");\n     }\n \n     /**\n-     * Overriden to close the stream.\n+     * Overriden to warn about an unclosed stream.\n      */\n     @Override\n     protected void finalize() throws Throwable {\n-        finish();\n+        if (!closed) {\n+            System.err.println(\"Unclosed BZip2CompressorOutputStream detected, will *not* close it\");\n+        }\n         super.finalize();\n     }\n \n \n     public void finish() throws IOException {\n-        synchronized(outLock) {\n-            if (out != null) {\n-                try {\n-                    if (this.runLength > 0) {\n-                        writeRun();\n-                    }\n-                    this.currentChar = -1;\n-                    endBlock();\n-                    endCompression();\n-                } finally {\n-                    this.out = null;\n-                }\n-            }\n-        }\n-        this.blockSorter = null;\n-        this.data = null;\n+        if (!closed) {\n+            closed = true;\n+            try {\n+                if (this.runLength > 0) {\n+                    writeRun();\n+                }\n+                this.currentChar = -1;\n+                endBlock();\n+                endCompression();\n+            } finally {\n+                this.out = null;\n+                this.blockSorter = null;\n+                this.data = null;\n+            }\n+        }\n     }\n \n     @Override\n     public void close() throws IOException {\n-        if (out != null) {\n+        if (!closed) {\n             final OutputStream outShadow = this.out;\n             finish();\n             outShadow.close();\n                                                 + len + \") > buf.length(\"\n                                                 + buf.length + \").\");\n         }\n-        if (this.out == null) {\n+        if (closed) {\n             throw new IOException(\"stream closed\");\n         }\n ", "timestamp": 1465964199, "metainfo": ""}