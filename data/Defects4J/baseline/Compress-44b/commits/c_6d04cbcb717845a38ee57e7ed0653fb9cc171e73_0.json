{"sha": "6d04cbcb717845a38ee57e7ed0653fb9cc171e73", "log": "consistently use limit() - position() for length calculations  I htink position() has always been zero but using limit() as size in one place and limit() - position() in other is very confusing.   ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n         }\n \n         if (hasZip64Extra(entry.entry)) {\n+            ByteBuffer name = getName(entry.entry);\n+            int nameLen = name.limit() - name.position();\n             // seek to ZIP64 extra, skip header and size information\n             raf.seek(entry.localDataStart + 3 * WORD + 2 * SHORT\n-                     + getName(entry.entry).limit() + 2 * SHORT);\n+                     + nameLen + 2 * SHORT);\n             // inside the ZIP64 extra uncompressed size comes\n             // first, unlike the LFH, CD or data descriptor\n             writeOut(ZipEightByteInteger.getBytes(entry.entry.getSize()));\n     private byte[] createLocalFileHeader(ZipArchiveEntry ze, ByteBuffer name, boolean encodable)  {\n \n         byte[] extra = ze.getLocalFileDataExtra();\n-        int len= LFH_FILENAME_OFFSET + name.limit() + extra.length;\n+        final int nameLen = name.limit() - name.position();\n+        int len= LFH_FILENAME_OFFSET + nameLen + extra.length;\n         byte[] buf = new byte[len];\n \n         System.arraycopy(LFH_SIG,  0, buf, LFH_SIG_OFFSET, WORD);\n             }\n         }\n         // file name length\n-        putShort(name.limit(), buf, LFH_FILENAME_LENGTH_OFFSET);\n+        putShort(nameLen, buf, LFH_FILENAME_LENGTH_OFFSET);\n \n         // extra field length\n         putShort(extra.length, buf, LFH_EXTRA_LENGTH_OFFSET);\n \n         // file name\n-        final int nameLen = name.limit() - name.position();\n         System.arraycopy( name.array(), name.arrayOffset(), buf, LFH_FILENAME_OFFSET, nameLen);\n \n         System.arraycopy(extra, 0, buf, LFH_FILENAME_OFFSET + nameLen, extra.length);\n         }\n \n         ByteBuffer commentB = getEntryEncoding(ze).encode(comm);\n-        int len= CFH_FILENAME_OFFSET + name.limit() + extra.length + commentB.limit();\n+        final int nameLen = name.limit() - name.position();\n+        final int commentLen = commentB.limit() - commentB.position();\n+        int len= CFH_FILENAME_OFFSET + nameLen + extra.length + commentLen;\n         byte[] buf = new byte[len];\n \n         System.arraycopy(CFH_SIG,  0, buf, CFH_SIG_OFFSET, WORD);\n             putLong(ze.getSize(), buf, CFH_ORIGINAL_SIZE_OFFSET);\n         }\n \n-        putShort(name.limit(), buf, CFH_FILENAME_LENGTH_OFFSET);\n+        putShort(nameLen, buf, CFH_FILENAME_LENGTH_OFFSET);\n \n         // extra field length\n         putShort(extra.length, buf, CFH_EXTRA_LENGTH_OFFSET);\n \n-        putShort(commentB.limit(), buf, CFH_COMMENT_LENGTH_OFFSET);\n+        putShort(commentLen, buf, CFH_COMMENT_LENGTH_OFFSET);\n \n         // disk number start\n         System.arraycopy(ZERO,  0, buf, CFH_DISK_NUMBER_OFFSET, SHORT);\n         putLong(Math.min(lfhOffset, ZIP64_MAGIC), buf, CFH_LFH_OFFSET);\n \n         // file name\n-        System.arraycopy(name.array(), name.arrayOffset(), buf, CFH_FILENAME_OFFSET, name.limit() - name.position());\n-\n-        int extraStart = CFH_FILENAME_OFFSET + name.limit();\n+        System.arraycopy(name.array(), name.arrayOffset(), buf, CFH_FILENAME_OFFSET, nameLen);\n+\n+        int extraStart = CFH_FILENAME_OFFSET + nameLen;\n         System.arraycopy(extra, 0, buf, extraStart, extra.length);\n \n-        int commentLength = commentB.limit() - commentB.position();\n-        int commentStart = extraStart + commentLength;\n+        int commentStart = extraStart + commentLen;\n \n         // file comment\n-        System.arraycopy(commentB.array(), commentB.arrayOffset(), buf, commentStart, commentLength);\n+        System.arraycopy(commentB.array(), commentB.arrayOffset(), buf, commentStart, commentLen);\n         return buf;\n     }\n \n \n         // ZIP file comment\n         ByteBuffer data = this.zipEncoding.encode(comment);\n-        writeCounted(ZipShort.getBytes(data.limit()));\n-        streamCompressor.writeCounted(data.array(), data.arrayOffset(), data.limit() - data.position());\n+        int dataLen = data.limit() - data.position();\n+        writeCounted(ZipShort.getBytes(dataLen));\n+        streamCompressor.writeCounted(data.array(), data.arrayOffset(), dataLen);\n     }\n \n     private static final byte[] ONE = ZipLong.getBytes(1L);", "timestamp": 1420374348, "metainfo": ""}