{"sha": "e2d348e17210d17060394d16c491f0e20783c10c", "log": "Remove Redundant specification of type (Java 7).", "commit": "\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n         try {\n             archive = File.createTempFile(\"test\", \".\" + archivename);\n             archive.deleteOnExit();\n-            archiveList = new ArrayList<String>();\n+            archiveList = new ArrayList<>();\n \n             stream = new FileOutputStream(archive);\n             out = factory.createArchiveOutputStream(archivename, stream);\n     protected File createEmptyArchive(final String archivename) throws Exception {\n         ArchiveOutputStream out = null;\n         OutputStream stream = null;\n-        archiveList = new ArrayList<String>();\n+        archiveList = new ArrayList<>();\n         try {\n             archive = File.createTempFile(\"empty\", \".\" + archivename);\n             archive.deleteOnExit();\n     protected File createSingleEntryArchive(final String archivename) throws Exception {\n         ArchiveOutputStream out = null;\n         OutputStream stream = null;\n-        archiveList = new ArrayList<String>();\n+        archiveList = new ArrayList<>();\n         try {\n             archive = File.createTempFile(\"empty\", \".\" + archivename);\n             archive.deleteOnExit();\n--- a/src/test/java/org/apache/commons/compress/ArchiveReadTest.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveReadTest.java\n \n     private static final ClassLoader CLASSLOADER = ArchiveReadTest.class.getClassLoader();\n     private static final File ARCDIR = new File(CLASSLOADER.getResource(\"archives\").getFile());\n-    private static final ArrayList<String> FILELIST = new ArrayList<String>();\n+    private static final ArrayList<String> FILELIST = new ArrayList<>();\n \n     private final File file;\n \n     @Parameters(name = \"file={0}\")\n     public static Collection<Object[]> data() {\n         assertTrue(ARCDIR.exists());\n-        final Collection<Object[]> params = new ArrayList<Object[]>();\n+        final Collection<Object[]> params = new ArrayList<>();\n         for (final String f : ARCDIR.list(new FilenameFilter() {\n             @Override\n             public boolean accept(final File dir, final String name) {\n--- a/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/CpioTestCase.java\n         final ArchiveInputStream in = new ArchiveStreamFactory().createArchiveInputStream(\"cpio\", is);\n \n \n-        final Map<String, File> result = new HashMap<String, File>();\n+        final Map<String, File> result = new HashMap<>();\n         ArchiveEntry entry = null;\n         while ((entry = in.getNextEntry()) != null) {\n             final File cpioget = new File(dir, entry.getName());\n--- a/src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/DumpTestCase.java\n     }\n \n     private void checkDumpArchive(final File f) throws Exception {\n-        final ArrayList<String> expected = new ArrayList<String>();\n+        final ArrayList<String> expected = new ArrayList<>();\n         expected.add(\"\");\n         expected.add(\"lost+found/\");\n         expected.add(\"test1.xml\");\n--- a/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongPathTest.java\n \n     private static final ClassLoader CLASSLOADER = LongPathTest.class.getClassLoader();\n     private static final File ARCDIR = new File(CLASSLOADER.getResource(\"longpath\").getFile());\n-    private static final ArrayList<String> FILELIST = new ArrayList<String>();\n+    private static final ArrayList<String> FILELIST = new ArrayList<>();\n \n     private final File file;\n \n \n     @Parameters(name = \"file={0}\")\n     public static Collection<Object[]> data() {\n-        final Collection<Object[]> params = new ArrayList<Object[]>();\n+        final Collection<Object[]> params = new ArrayList<>();\n         for (final String f : ARCDIR.list(new FilenameFilter() {\n             @Override\n             public boolean accept(final File dir, final String name) {\n--- a/src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/LongSymLinkTest.java\n \n     private static final ClassLoader CLASSLOADER = LongSymLinkTest.class.getClassLoader();\n     private static final File ARCDIR = new File(CLASSLOADER.getResource(\"longsymlink\").getFile());\n-    private static final ArrayList<String> FILELIST = new ArrayList<String>();\n+    private static final ArrayList<String> FILELIST = new ArrayList<>();\n \n     private final File file;\n \n \n     @Parameters(name = \"file={0}\")\n     public static Collection<Object[]> data() {\n-        final Collection<Object[]> params = new ArrayList<Object[]>();\n+        final Collection<Object[]> params = new ArrayList<>();\n         for (final String f : ARCDIR.list(new FilenameFilter() {\n             @Override\n             public boolean accept(final File dir, final String name) {\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n         out.close();\n \n         // Unarchive the same\n-        final List<File> results = new ArrayList<File>();\n+        final List<File> results = new ArrayList<>();\n \n         final InputStream is = new FileInputStream(output);\n         ArchiveInputStream in = null;\n     public void testSkipsPK00Prefix() throws Exception {\n         final File input = getFile(\"COMPRESS-208.zip\");\n         final InputStream is = new FileInputStream(input);\n-        final ArrayList<String> al = new ArrayList<String>();\n+        final ArrayList<String> al = new ArrayList<>();\n         al.add(\"test1.xml\");\n         al.add(\"test2.xml\");\n         try {\n     public void testListAllFilesWithNestedArchive() throws Exception {\n         final File input = getFile(\"OSX_ArchiveWithNestedArchive.zip\");\n \n-        final List<String> results = new ArrayList<String>();\n+        final List<String> results = new ArrayList<>();\n \n         final InputStream is = new FileInputStream(input);\n         ArchiveInputStream in = null;\n--- a/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ar/ArArchiveOutputStreamTest.java\n             os = null;\n             fos = null;\n \n-            final List<String> expected = new ArrayList<String>();\n+            final List<String> expected = new ArrayList<>();\n             expected.add(\"this_is_a_long_name.txt\");\n             checkArchiveContent(df[1], expected);\n         } finally {\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n     @Test\n     public void testRandomlySkippingEntries() throws Exception {\n         // Read sequential reference.\n-        final Map<String, byte[]> entriesByName = new HashMap<String, byte[]>();\n+        final Map<String, byte[]> entriesByName = new HashMap<>();\n         SevenZFile archive = new SevenZFile(getFile(\"COMPRESS-320/Copy.7z\"));\n         SevenZArchiveEntry entry;\n         while ((entry = archive.getNextEntry()) != null) {\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n     @Test\n     public void testStackOfContentCompressions() throws Exception {\n         output = new File(dir, \"multiple-methods.7z\");\n-        final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();\n+        final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<>();\n         methods.add(new SevenZMethodConfiguration(SevenZMethod.LZMA2));\n         methods.add(new SevenZMethodConfiguration(SevenZMethod.COPY));\n         methods.add(new SevenZMethodConfiguration(SevenZMethod.DEFLATE));\n \n     private void testRoundTrip(final SevenZMethod method) throws Exception {\n         output = new File(dir, method + \"-roundtrip.7z\");\n-        final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();\n+        final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<>();\n         methods.add(new SevenZMethodConfiguration(method));\n         createAndReadBack(output, methods);\n     }\n \n     private void testFilterRoundTrip(final SevenZMethodConfiguration method) throws Exception {\n         output = new File(dir, method.getMethod() + \"-roundtrip.7z\");\n-        final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<SevenZMethodConfiguration>();\n+        final ArrayList<SevenZMethodConfiguration> methods = new ArrayList<>();\n         methods.add(method);\n         methods.add(new SevenZMethodConfiguration(SevenZMethod.LZMA2));\n         createAndReadBack(output, methods);\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n \n     @Test\n     public void testWriteSimplePaxHeaders() throws Exception {\n-        final Map<String, String> m = new HashMap<String, String>();\n+        final Map<String, String> m = new HashMap<>();\n         m.put(\"a\", \"b\");\n         final byte[] data = writePaxHeader(m);\n         assertEquals(\"00000000006 \",\n \n     @Test\n     public void testPaxHeadersWithLength99() throws Exception {\n-        final Map<String, String> m = new HashMap<String, String>();\n+        final Map<String, String> m = new HashMap<>();\n         m.put(\"a\",\n               \"0123456789012345678901234567890123456789\"\n               + \"01234567890123456789012345678901234567890123456789\"\n \n     @Test\n     public void testPaxHeadersWithLength101() throws Exception {\n-        final Map<String, String> m = new HashMap<String, String>();\n+        final Map<String, String> m = new HashMap<>();\n         m.put(\"a\",\n               \"0123456789012345678901234567890123456789\"\n               + \"01234567890123456789012345678901234567890123456789\"\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreatorTest.java\n     }\n \n     private Map<String, byte[]> writeEntries(final ParallelScatterZipCreator zipCreator) {\n-        final Map<String, byte[]> entries = new HashMap<String, byte[]>();\n+        final Map<String, byte[]> entries = new HashMap<>();\n         for (int i = 0; i < NUMITEMS; i++){\n             final byte[] payloadBytes = (\"content\" + i).getBytes();\n             final ZipArchiveEntry za = createZipArchiveEntry(entries, i, payloadBytes);\n     }\n \n     private Map<String, byte[]> writeEntriesAsCallable(final ParallelScatterZipCreator zipCreator) {\n-        final Map<String, byte[]> entries = new HashMap<String, byte[]>();\n+        final Map<String, byte[]> entries = new HashMap<>();\n         for (int i = 0; i < NUMITEMS; i++){\n             final byte[] payloadBytes = (\"content\" + i).getBytes();\n             final ZipArchiveEntry za = createZipArchiveEntry(entries, i, payloadBytes);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n     @Test\n     public void testUnixSymlinkSampleFile() throws Exception {\n         final String entryPrefix = \"COMPRESS-214_unix_symlinks/\";\n-        final TreeMap<String, String> expectedVals = new TreeMap<String, String>();\n+        final TreeMap<String, String> expectedVals = new TreeMap<>();\n \n         // I threw in some Japanese characters to keep things interesting.\n         expectedVals.put(entryPrefix + \"link1\", \"../COMPRESS-214_unix_symlinks/./a/b/c/../../../\\uF999\");\n--- a/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/changes/ChangeSetTestCase.java\n             }\n         }\n \n-        final List<String> expected = new ArrayList<String>();\n+        final List<String> expected = new ArrayList<>();\n         expected.add(\"test1.xml\");\n \n         this.checkArchiveContent(temp, expected);\n                 ais.close();\n             }\n         }\n-        final List<String> expected = new ArrayList<String>();\n+        final List<String> expected = new ArrayList<>();\n         expected.add(\"test1.xml\");\n         this.checkArchiveContent(temp, expected);\n     }\n                 ais.close();\n             }\n         }\n-        final List<String> expected = new ArrayList<String>();\n+        final List<String> expected = new ArrayList<>();\n         expected.add(\"test1.xml\");\n         this.checkArchiveContent(temp, expected);\n     }\n                 ais.close();\n             }\n         }\n-        final List<String> expected = new ArrayList<String>();\n+        final List<String> expected = new ArrayList<>();\n         expected.add(\"test1.xml\");\n         expected.add(\"testdata/test.txt\");\n         final ArchiveInputStream in = factory.createArchiveInputStream(\"tar\", new FileInputStream(temp));\n                 ais.close();\n             }\n         }\n-        final List<String> expected = new ArrayList<String>();\n+        final List<String> expected = new ArrayList<>();\n         expected.add(\"test1.xml\");\n         expected.add(\"testdata/test.txt\");\n         this.checkArchiveContent(temp, expected);\n             }\n         }\n \n-        final List<String> expected = new ArrayList<String>();\n+        final List<String> expected = new ArrayList<>();\n         expected.add(\"test1.xml\");\n         this.checkArchiveContent(temp, expected);\n     }\n--- a/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/Pack200TestCase.java\n         try {\n             final ArchiveInputStream in = new ArchiveStreamFactory()\n                 .createArchiveInputStream(\"jar\", is);\n-            final List<String> files = new ArrayList<String>();\n+            final List<String> files = new ArrayList<>();\n             files.add(\"testdata/test1.xml\");\n             files.add(\"testdata/test2.xml\");\n             checkArchiveContent(in, files);\n \n     @Test\n     public void testInputStreamMethods() throws Exception {\n-        final Map<String, String> m = new HashMap<String, String>();\n+        final Map<String, String> m = new HashMap<>();\n         m.put(\"foo\", \"bar\");\n         final InputStream is =\n             new Pack200CompressorInputStream(new FileInputStream(getFile(\"bla.jar\")),\n     @Test\n     public void testOutputStreamMethods() throws Exception {\n         final File output = new File(dir, \"bla.pack\");\n-        final Map<String, String> m = new HashMap<String, String>();\n+        final Map<String, String> m = new HashMap<>();\n         m.put(\"foo\", \"bar\");\n         final OutputStream out = new FileOutputStream(output);\n         try {", "timestamp": 1466889730, "metainfo": ""}