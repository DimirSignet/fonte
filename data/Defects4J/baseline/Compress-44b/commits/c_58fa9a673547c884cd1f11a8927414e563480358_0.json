{"sha": "58fa9a673547c884cd1f11a8927414e563480358", "log": "COMPRESS-305 Convert all tests to JUnit4 style All but AbstractTestCase and subclasses  ", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ExceptionMessageTest.java\n package org.apache.commons.compress.archivers;\n \n-import org.junit.Assert;\n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n \n /*\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-public class ExceptionMessageTest extends TestCase {\n+public class ExceptionMessageTest {\n \n     private static final String ARCHIVER_NULL_MESSAGE = \"Archivername must not be null.\";\n \n     private static final String OUTPUTSTREAM_NULL_MESSAGE = \"OutputStream must not be null.\";\n \n \n+    @Test\n     public void testMessageWhenArchiverNameIsNull_1(){\n         try{\n             new ArchiveStreamFactory().createArchiveInputStream(null, System.in);\n             fail(\"Should raise an IllegalArgumentException.\");\n         }catch (IllegalArgumentException e) {\n-            Assert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n+            assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n         } catch (ArchiveException e) {\n             fail(\"ArchiveException not expected\");\n         }\n     }\n \n+    @Test\n     public void testMessageWhenInputStreamIsNull(){\n         try{\n             new ArchiveStreamFactory().createArchiveInputStream(\"zip\", null);\n             fail(\"Should raise an IllegalArgumentException.\");\n         }catch (IllegalArgumentException e) {\n-            Assert.assertEquals(INPUTSTREAM_NULL_MESSAGE, e.getMessage());\n+            assertEquals(INPUTSTREAM_NULL_MESSAGE, e.getMessage());\n         } catch (ArchiveException e) {\n             fail(\"ArchiveException not expected\");\n         }\n     }\n \n+    @Test\n     public void testMessageWhenArchiverNameIsNull_2(){\n         try{\n             new ArchiveStreamFactory().createArchiveOutputStream(null, System.out);\n             fail(\"Should raise an IllegalArgumentException.\");\n         } catch (IllegalArgumentException e) {\n-            Assert.assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n+            assertEquals(ARCHIVER_NULL_MESSAGE, e.getMessage());\n         } catch (ArchiveException e){\n             fail(\"ArchiveException not expected\");\n         }\n     }\n \n+    @Test\n     public void testMessageWhenOutputStreamIsNull(){\n         try{\n             new ArchiveStreamFactory().createArchiveOutputStream(\"zip\", null);\n             fail(\"Should raise an IllegalArgumentException.\");\n         } catch (IllegalArgumentException e) {\n-            Assert.assertEquals(OUTPUTSTREAM_NULL_MESSAGE, e.getMessage());\n+            assertEquals(OUTPUTSTREAM_NULL_MESSAGE, e.getMessage());\n         } catch (ArchiveException e) {\n             fail(\"ArchiveException not expected\");\n         }\n--- a/src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/jar/JarArchiveOutputStreamTest.java\n  */\n package org.apache.commons.compress.archivers.jar;\n \n+import static org.junit.Assert.*;\n+\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n \n-import junit.framework.TestCase;\n-\n+import org.junit.Test;\n import org.apache.commons.compress.AbstractTestCase;\n import org.apache.commons.compress.archivers.zip.JarMarker;\n import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;\n import org.apache.commons.compress.archivers.zip.ZipExtraField;\n import org.apache.commons.compress.archivers.zip.ZipFile;\n \n-public class JarArchiveOutputStreamTest extends TestCase {\n+public class JarArchiveOutputStreamTest {\n \n+    @Test\n     public void testJarMarker() throws IOException {\n         File testArchive = File.createTempFile(\"jar-aostest\", \".jar\");\n         testArchive.deleteOnExit();\n--- a/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/memory/MemoryArchiveTestCase.java\n  */\n package org.apache.commons.compress.archivers.memory;\n \n+import static org.junit.Assert.*;\n+\n import java.io.IOException;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n \n-public final class MemoryArchiveTestCase extends TestCase {\n+public final class MemoryArchiveTestCase {\n \n+    @Test\n     public void testReading() throws IOException {\n \n         final MemoryArchiveInputStream is = new MemoryArchiveInputStream(new String[][] {\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/SparseFilesTest.java\n package org.apache.commons.compress.archivers.tar;\n \n import static org.apache.commons.compress.AbstractTestCase.getFile;\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n \n import java.io.File;\n import java.io.FileInputStream;\n \n-import junit.framework.TestCase;\n \n-public class SparseFilesTest extends TestCase {\n+public class SparseFilesTest {\n \n+    @Test\n     public void testOldGNU() throws Throwable {\n         File file = getFile(\"oldgnu_sparse.tar\");\n         TarArchiveInputStream tin = null;\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveEntryTest.java\n \n package org.apache.commons.compress.archivers.tar;\n \n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.compress.AbstractTestCase;\n \n-public class TarArchiveEntryTest extends TestCase implements TarConstants {\n+public class TarArchiveEntryTest implements TarConstants {\n \n     private static final String OS =\n         System.getProperty(\"os.name\").toLowerCase(Locale.ENGLISH);\n      *\n      * @see \"https://issues.apache.org/jira/browse/SANDBOX-284\"\n      */\n+    @Test\n     public void testFileSystemRoot() {\n         TarArchiveEntry t = new TarArchiveEntry(new File(ROOT));\n         assertEquals(\"/\", t.getName());\n     }\n \n+    @Test\n     public void testTarFileWithFSRoot() throws IOException {\n         File f = File.createTempFile(\"taetest\", \".tar\");\n         f.deleteOnExit();\n         }\n     }\n \n+    @Test\n     public void testMaxFileSize(){\n         TarArchiveEntry t = new TarArchiveEntry(\"\");\n         t.setSize(0);\n         t.setSize(0100000000000L);\n     }\n \n+    @Test\n     public void testLinkFlagConstructor() {\n         TarArchiveEntry t = new TarArchiveEntry(\"/foo\", LF_GNUTYPE_LONGNAME);\n         assertGnuMagic(t);\n         assertEquals(\"foo\", t.getName());\n     }\n \n+    @Test\n     public void testLinkFlagConstructorWithFileFlag() {\n         TarArchiveEntry t = new TarArchiveEntry(\"/foo\", LF_NORMAL);\n         assertPosixMagic(t);\n         assertEquals(\"foo\", t.getName());\n     }\n \n+    @Test\n     public void testLinkFlagConstructorWithPreserve() {\n         TarArchiveEntry t = new TarArchiveEntry(\"/foo\", LF_GNUTYPE_LONGNAME,\n                                                 true);\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarUtilsTest.java\n \n package org.apache.commons.compress.archivers.tar;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import org.apache.commons.compress.archivers.zip.ZipEncoding;\n import org.apache.commons.compress.archivers.zip.ZipEncodingHelper;\n import org.apache.commons.compress.utils.CharsetNames;\n-\n-public class TarUtilsTest extends TestCase {\n-\n-\n+import org.junit.Test;\n+\n+public class TarUtilsTest {\n+\n+\n+    @Test\n     public void testName(){\n         byte [] buff = new byte[20];\n         String sb1 = \"abcdefghijklmnopqrstuvwxyz\";\n         assertEquals(sb1, sb2);\n     }\n \n+    @Test\n     public void testParseOctal() throws Exception{\n         long value; \n         byte [] buffer;\n         assertEquals(0, value);\n     }\n \n+    @Test\n     public void testParseOctalInvalid() throws Exception{\n         byte [] buffer;\n         buffer=new byte[0]; // empty byte array\n         checkRoundTripOctal(value, TarConstants.SIZELEN);\n     }\n \n+    @Test\n     public void testRoundTripOctal() {\n         checkRoundTripOctal(0);\n         checkRoundTripOctal(1);\n         assertEquals(value,parseValue);\n     }\n \n+    @Test\n     public void testRoundTripOctalOrBinary8() {\n         testRoundTripOctalOrBinary(8);\n     }\n \n+    @Test\n     public void testRoundTripOctalOrBinary12() {\n         testRoundTripOctalOrBinary(12);\n         checkRoundTripOctalOrBinary(Long.MAX_VALUE, 12);\n     }\n \n     // Check correct trailing bytes are generated\n+    @Test\n     public void testTrailers() {\n         byte [] buffer = new byte[12];\n         TarUtils.formatLongOctalBytes(123, buffer, 0, buffer.length);\n         assertEquals('3', buffer[buffer.length-3]); // end of number\n     }\n \n+    @Test\n     public void testNegative() throws Exception {\n         byte [] buffer = new byte[22];\n         TarUtils.formatUnsignedOctalString(-1, buffer, 0, buffer.length);\n         assertEquals(\"1777777777777777777777\", new String(buffer, CharsetNames.UTF_8));\n     }\n \n+    @Test\n     public void testOverflow() throws Exception {\n         byte [] buffer = new byte[8-1]; // a lot of the numbers have 8-byte buffers (nul term)\n         TarUtils.formatUnsignedOctalString(07777777L, buffer, 0, buffer.length);\n         }\n     }\n \n+    @Test\n     public void testRoundTripNames(){\n         checkName(\"\");\n         checkName(\"The quick brown fox\\n\");\n         // checkName(\"\\0\"); // does not work, because NUL is ignored\n     }\n \n+    @Test\n     public void testRoundEncoding() throws Exception {\n         // COMPRESS-114\n         ZipEncoding enc = ZipEncodingHelper.getZipEncoding(CharsetNames.ISO_8859_1);\n         assertEquals(string, TarUtils.parseName(buff, 0, len));\n     }\n \n+    @Test\n     public void testReadNegativeBinary8Byte() {\n         byte[] b = new byte[] {\n             (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n         assertEquals(-3601l, TarUtils.parseOctalOrBinary(b, 0, 8));\n     }\n \n+    @Test\n     public void testReadNegativeBinary12Byte() {\n         byte[] b = new byte[] {\n             (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n     }\n \n \n+    @Test\n     public void testWriteNegativeBinary8Byte() {\n         byte[] b = new byte[] {\n             (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff,\n     }\n \n     // https://issues.apache.org/jira/browse/COMPRESS-191\n+    @Test\n     public void testVerifyHeaderCheckSum() {\n         byte[] valid = { // from bla.tar\n                 116, 101, 115, 116, 49, 46, 120, 109, 108, 0, 0, 0, 0, 0, 0,\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/AsiExtraFieldTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n \n /**\n- * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.AsiExtraField.\n+ * JUnit testcases for org.apache.commons.compress.archivers.zip.AsiExtraField.\n  *\n  */\n-public class AsiExtraFieldTest extends TestCase implements UnixStat {\n-    public AsiExtraFieldTest(String name) {\n-        super(name);\n-    }\n+public class AsiExtraFieldTest implements UnixStat {\n \n     /**\n      * Test file mode magic.\n-     */\n+     */    \n+    @Test\n     public void testModes() {\n         AsiExtraField a = new AsiExtraField();\n         a.setMode(0123);\n     /**\n      * Test content.\n      */\n+    @Test\n     public void testContent() {\n         AsiExtraField a = new AsiExtraField();\n         a.setMode(0123);\n     /**\n      * Test reparse\n      */\n+    @Test\n     public void testReparse() throws Exception {\n         // CRC manually calculated, sorry\n         byte[] data = {(byte)0xC6, 0x02, 0x78, (byte)0xB6, // CRC\n         }\n     }\n \n+    @Test\n     public void testClone() {\n         AsiExtraField s1 = new AsiExtraField();\n         s1.setUserId(42);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/BinaryTreeTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.junit.Assert.*;\n+\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n-public class BinaryTreeTest extends TestCase {\n+public class BinaryTreeTest {\n \n+    @Test\n     public void testDecode() throws IOException {\n         InputStream in = new ByteArrayInputStream(new byte[] { 0x02, 0x42, 0x01, 0x13 });\n         \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/BitStreamTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.junit.Assert.*;\n+\n import java.io.ByteArrayInputStream;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n-public class BitStreamTest extends TestCase {\n+public class BitStreamTest {\n \n+    @Test\n     public void testEmptyStream() throws Exception {\n         BitStream stream = new BitStream(new ByteArrayInputStream(new byte[0]));\n         assertEquals(\"next bit\", -1, stream.nextBit());\n         stream.close();\n     }\n \n+    @Test\n     public void testStream() throws Exception {\n         BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x03 }));\n \n         stream.close();\n     }\n \n+    @Test\n     public void testNextByteFromEmptyStream() throws Exception {\n         BitStream stream = new BitStream(new ByteArrayInputStream(new byte[0]));\n         assertEquals(\"next byte\", -1, stream.nextByte());\n         stream.close();\n     }\n \n+    @Test\n     public void testReadAlignedBytes() throws Exception {\n         BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x35 }));\n         assertEquals(\"next byte\", 0xEA, stream.nextByte());\n         stream.close();\n     }\n \n+    @Test\n     public void testNextByte() throws Exception {\n         BitStream stream = new BitStream(new ByteArrayInputStream(new byte[] { (byte) 0xEA, 0x35 }));\n         assertEquals(\"bit 0\", 0, stream.nextBit());\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/CircularBufferTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n \n-public class CircularBufferTest extends TestCase {\n+import org.junit.Test;\n \n+public class CircularBufferTest {\n+\n+    @Test\n     public void testPutAndGet() throws Exception {\n         int size = 16;\n         CircularBuffer buffer = new CircularBuffer(size);\n         assertFalse(\"available\", buffer.available());\n     }\n \n+    @Test\n     public void testCopy() throws Exception {\n         CircularBuffer buffer = new CircularBuffer(16);\n         \n--- a/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/EncryptedArchiveTest.java\n package org.apache.commons.compress.archivers.zip;\n \n import static org.apache.commons.compress.AbstractTestCase.getFile;\n+import static org.junit.Assert.*;\n \n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n-public class EncryptedArchiveTest extends TestCase {\n+public class EncryptedArchiveTest {\n \n+    @Test\n     public void testReadPasswordEncryptedEntryViaZipFile()\n         throws IOException {\n         File file = getFile(\"password-encrypted.zip\");\n         }\n     }\n \n+    @Test\n     public void testReadPasswordEncryptedEntryViaStream()\n         throws IOException {\n         File file = getFile(\"password-encrypted.zip\");\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ExplodeSupportTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.junit.Assert.*;\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.FileInputStream;\n import java.util.zip.CRC32;\n import java.util.zip.CheckedOutputStream;\n \n-import junit.framework.TestCase;\n import org.apache.commons.compress.utils.BoundedInputStream;\n import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Test;\n \n-public class ExplodeSupportTest extends TestCase {\n+public class ExplodeSupportTest {\n \n     private void testArchiveWithImplodeCompression(String filename, String entryName) throws IOException {\n         ZipFile zip = new ZipFile(new File(filename));\n         zip.close();\n     }\n \n+    @Test\n     public void testArchiveWithImplodeCompression4K2Trees() throws IOException {\n         testArchiveWithImplodeCompression(\"target/test-classes/archives/imploding-4Kdict-2trees.zip\", \"HEADER.TXT\");\n     }\n \n+    @Test\n     public void testArchiveWithImplodeCompression8K3Trees() throws IOException {\n         testArchiveWithImplodeCompression(\"target/test-classes/archives/imploding-8Kdict-3trees.zip\", \"LICENSE.TXT\");\n     }\n \n+    @Test\n     public void testTikaTestArchive() throws IOException {\n         testArchiveWithImplodeCompression(\"target/test-classes/moby-imploded.zip\", \"README\");\n     }\n         assertEquals(\"CRC32\", entry.getCrc(), out.getChecksum().getValue());\n     }\n \n+    @Test\n     public void testZipStreamWithImplodeCompression4K2Trees() throws IOException {\n         testZipStreamWithImplodeCompression(\"target/test-classes/archives/imploding-4Kdict-2trees.zip\", \"HEADER.TXT\");\n     }\n \n+    @Test\n     public void testZipStreamWithImplodeCompression8K3Trees() throws IOException {\n         testZipStreamWithImplodeCompression(\"target/test-classes/archives/imploding-8Kdict-3trees.zip\", \"LICENSE.TXT\");\n     }\n \n+    @Test\n     public void testTikaTestStream() throws IOException {\n         testZipStreamWithImplodeCompression(\"target/test-classes/moby-imploded.zip\", \"README\");\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtilsTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n- * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ExtraFieldUtils.\n+ * JUnit testcases for org.apache.commons.compress.archivers.zip.ExtraFieldUtils.\n  *\n  */\n-public class ExtraFieldUtilsTest extends TestCase implements UnixStat {\n-    public ExtraFieldUtilsTest(String name) {\n-        super(name);\n-    }\n+public class ExtraFieldUtilsTest implements UnixStat {\n \n     /**\n      * Header-ID of a ZipExtraField not supported by Commons Compress.\n     private byte[] data;\n     private byte[] aLocal;\n \n-    @Override\n+    @Before\n     public void setUp() {\n         a = new AsiExtraField();\n         a.setMode(0755);\n     /**\n      * test parser.\n      */\n+    @Test\n     public void testParse() throws Exception {\n         ZipExtraField[] ze = ExtraFieldUtils.parse(data);\n         assertEquals(\"number of fields\", 2, ze.length);\n         }\n     }\n \n+    @Test\n     public void testParseWithRead() throws Exception {\n         ZipExtraField[] ze =\n             ExtraFieldUtils.parse(data, true,\n         }\n     }\n \n+    @Test\n     public void testParseWithSkip() throws Exception {\n         ZipExtraField[] ze =\n             ExtraFieldUtils.parse(data, true,\n     /**\n      * Test merge methods\n      */\n+    @Test\n     public void testMerge() {\n         byte[] local =\n             ExtraFieldUtils.mergeLocalFileDataData(new ZipExtraField[] {a, dummy});\n \n     }\n \n+    @Test\n     public void testMergeWithUnparseableData() throws Exception {\n         ZipExtraField d = new UnparseableExtraFieldData();\n         byte[] b = UNRECOGNIZED_HEADER.getBytes();\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/GeneralPurposeBitTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.junit.Assert.*;\n+\n import java.util.Arrays;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n-public class GeneralPurposeBitTest extends TestCase {\n+public class GeneralPurposeBitTest {\n \n+    @Test\n     public void testDefaults() {\n         assertFalse(new GeneralPurposeBit().usesDataDescriptor());\n         assertFalse(new GeneralPurposeBit().usesUTF8ForNames());\n         assertTrue(Arrays.equals(b, new GeneralPurposeBit().encode()));\n     }\n \n+    @Test\n     public void testParseEdgeCases() {\n         assertFalse(GeneralPurposeBit.parse(new byte[2], 0)\n                     .usesDataDescriptor());\n                    .usesStrongEncryption());\n     }\n \n+    @Test\n     public void testDataDescriptor() {\n         byte[] flags = new byte[] {(byte) 8, (byte) 0};\n         assertTrue(GeneralPurposeBit.parse(flags, 0).usesDataDescriptor());\n         assertTrue(Arrays.equals(flags, b.encode()));\n     }\n \n+    @Test\n     public void testLanguageEncodingFlag() {\n         byte[] flags = new byte[] {(byte) 0, (byte) 8};\n         assertTrue(GeneralPurposeBit.parse(flags, 0).usesUTF8ForNames());\n         assertTrue(Arrays.equals(flags, b.encode()));\n     }\n \n+    @Test\n     public void testEncryption() {\n         byte[] flags = new byte[] {(byte) 1, (byte) 0};\n         assertTrue(GeneralPurposeBit.parse(flags, 0).usesEncryption());\n         assertTrue(Arrays.equals(flags, b.encode()));\n     }\n \n+    @Test\n     public void testStrongEncryption() {\n         byte[] flags = new byte[] {(byte) 65, (byte) 0};\n         assertTrue(GeneralPurposeBit.parse(flags, 0).usesStrongEncryption());\n         assertFalse(GeneralPurposeBit.parse(flags, 0).usesStrongEncryption());\n     }\n \n+    @Test\n     public void testClone() {\n         GeneralPurposeBit b = new GeneralPurposeBit();\n         b.useStrongEncryption(true);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Maven221MultiVolumeTest.java\n package org.apache.commons.compress.archivers.zip;\n \n import static org.apache.commons.compress.AbstractTestCase.getFile;\n+import static org.junit.Assert.*;\n \n import java.io.File;\n import java.io.FileInputStream;\n import java.io.IOException;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.compress.archivers.ArchiveEntry;\n+import org.junit.Test;\n \n /**\n- * JUnit 3 testcase for a multi-volume zip file.\n+ * JUnit testcase for a multi-volume zip file.\n  *\n  * Some tools (like 7-zip) allow users to split a large archives into 'volumes'\n  * with a given size to fit them into multiple cds, usb drives, or emails with\n  * yields an exception.\n  *\n  */\n-public class Maven221MultiVolumeTest extends TestCase {\n+public class Maven221MultiVolumeTest {\n \n     private static final String [] ENTRIES = new String [] {\n         \"apache-maven-2.2.1/\",\n     private static final String LAST_ENTRY_NAME =\n         \"apache-maven-2.2.1/lib/maven-2.2.1-uber.jar\";\n \n+    @Test\n     public void testRead7ZipMultiVolumeArchiveForStream() throws IOException {\n \n         FileInputStream archive =\n         }\n     }\n \n+    @Test\n     public void testRead7ZipMultiVolumeArchiveForFile() throws IOException {\n         File file = getFile(\"apache-maven-2.2.1.zip.001\");\n         try {\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/Zip64ExtendedInformationExtraFieldTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.junit.Assert.*;\n+\n import java.math.BigInteger;\n import java.util.zip.ZipException;\n \n-import junit.framework.TestCase;\n-\n-public class Zip64ExtendedInformationExtraFieldTest extends TestCase {\n-    public Zip64ExtendedInformationExtraFieldTest(String name) {\n-        super(name);\n-    }\n+import org.junit.Test;\n+\n+public class Zip64ExtendedInformationExtraFieldTest {\n \n     private static final ZipEightByteInteger SIZE =\n         new ZipEightByteInteger(0x12345678);\n                                 .setBit(3));\n     private static final ZipLong DISK = new ZipLong(0x12);\n \n+    @Test\n     public void testWriteCDOnlySizes() {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField(SIZE, CSIZE);\n         checkSizes(b);\n     }\n \n+    @Test\n     public void testWriteCDSizeAndOffset() {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField(SIZE, CSIZE, OFF, null);\n         checkOffset(b, 16);\n     }\n \n+    @Test\n     public void testWriteCDSizeOffsetAndDisk() {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField(SIZE, CSIZE, OFF, DISK);\n         checkDisk(b, 24);\n     }\n \n+    @Test\n     public void testWriteCDSizeAndDisk() {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField(SIZE, CSIZE, null, DISK);\n         checkDisk(b, 16);\n     }\n \n+    @Test\n     public void testReadLFHSizesOnly() throws ZipException {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField();\n         assertNull(f.getDiskStartNumber());\n     }\n \n+    @Test\n     public void testReadLFHSizesAndOffset() throws ZipException {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField();\n         assertNull(f.getDiskStartNumber());\n     }\n \n+    @Test\n     public void testReadLFHSizesOffsetAndDisk() throws ZipException {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField();\n         assertEquals(DISK, f.getDiskStartNumber());\n     }\n \n+    @Test\n     public void testReadLFHSizesAndDisk() throws ZipException {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField();\n         assertEquals(DISK, f.getDiskStartNumber());\n     }\n \n+    @Test\n     public void testReadCDSizesOffsetAndDisk() throws ZipException {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField();\n         assertEquals(DISK, f.getDiskStartNumber());\n     }\n \n+    @Test\n     public void testReadCDSizesAndOffset() throws ZipException {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField();\n         assertNull(f.getDiskStartNumber());\n     }\n \n+    @Test\n     public void testReadCDSomethingAndDisk() throws ZipException {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField();\n         assertEquals(DISK, f.getDiskStartNumber());\n     }\n \n+    @Test\n     public void testReparseCDSingleEightByteData() throws ZipException {\n         Zip64ExtendedInformationExtraField f =\n             new Zip64ExtendedInformationExtraField();\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipArchiveEntryTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n \n import java.io.ByteArrayOutputStream;\n import java.util.zip.ZipEntry;\n \n+import org.junit.Test;\n+\n /**\n- * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ZipEntry.\n+ * JUnit testcases for org.apache.commons.compress.archivers.zip.ZipEntry.\n  *\n  */\n-public class ZipArchiveEntryTest extends TestCase {\n-\n-    public ZipArchiveEntryTest(String name) {\n-        super(name);\n-    }\n+public class ZipArchiveEntryTest {\n \n     /**\n      * test handling of extra fields\n      */\n+    @Test\n     public void testExtraFields() {\n         AsiExtraField a = new AsiExtraField();\n         a.setDirectory(true);\n     /**\n      * test handling of extra fields via central directory\n      */\n+    @Test\n     public void testExtraFieldMerging() {\n         AsiExtraField a = new AsiExtraField();\n         a.setDirectory(true);\n     /**\n      * test handling of extra fields\n      */\n+    @Test\n     public void testAddAsFirstExtraField() {\n         AsiExtraField a = new AsiExtraField();\n         a.setDirectory(true);\n         assertSame(a, result[2]);\n     }\n \n+    @Test\n     public void testUnixMode() {\n         ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\");\n         assertEquals(0, ze.getPlatform());\n      * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-93\"\n      * >COMPRESS-93</a>.\n      */\n+    @Test\n     public void testCompressionMethod() throws Exception {\n         ZipArchiveOutputStream zos =\n             new ZipArchiveOutputStream(new ByteArrayOutputStream());\n      * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-94\"\n      * >COMPRESS-94</a>.\n      */\n+    @Test\n     public void testNotEquals() {\n         ZipArchiveEntry entry1 = new ZipArchiveEntry(\"foo\");\n         ZipArchiveEntry entry2 = new ZipArchiveEntry(\"bar\");\n      * Tests comment's influence on equals comparisons.\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-187\"\n      */\n+    @Test\n     public void testNullCommentEqualsEmptyComment() {\n         ZipArchiveEntry entry1 = new ZipArchiveEntry(\"foo\");\n         ZipArchiveEntry entry2 = new ZipArchiveEntry(\"foo\");\n         assertFalse(entry2.equals(entry3));\n     }\n \n+    @Test\n     public void testCopyConstructor() throws Exception {\n         ZipArchiveEntry archiveEntry = new ZipArchiveEntry(\"fred\");\n         archiveEntry.setUnixMode(0664);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipEightByteIntegerTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n+import static org.junit.Assert.*;\n+\n import java.math.BigInteger;\n \n-import junit.framework.TestCase;\n+import org.junit.Test;\n \n /**\n- * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ZipEightByteInteger.\n+ * JUnit testcases for org.apache.commons.compress.archivers.zip.ZipEightByteInteger.\n  *\n  */\n-public class ZipEightByteIntegerTest extends TestCase {\n-\n-    public ZipEightByteIntegerTest(String name) {\n-        super(name);\n-    }\n+public class ZipEightByteIntegerTest {\n \n     /**\n      * Test conversion to bytes.\n      */\n+    @Test\n     public void testLongToBytes() {\n         ZipEightByteInteger zl = new ZipEightByteInteger(0xAB12345678l);\n         byte[] result = zl.getBytes();\n     /**\n      * Test conversion from bytes.\n      */\n+    @Test\n     public void testLongFromBytes() {\n         byte[] val = new byte[] {0x78, 0x56, 0x34, 0x12, (byte) 0xAB, 0x00, 0x00, 0x00};\n         ZipEightByteInteger zl = new ZipEightByteInteger(val);\n     /**\n      * Test conversion to bytes.\n      */\n+    @Test\n     public void testBIToBytes() {\n         ZipEightByteInteger zl =\n             new ZipEightByteInteger(BigInteger.valueOf(Long.MAX_VALUE)\n     /**\n      * Test conversion from bytes.\n      */\n+    @Test\n     public void testBIFromBytes() {\n         byte[] val = new byte[] {(byte) 0xFE, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\n         ZipEightByteInteger zl = new ZipEightByteInteger(val);\n     /**\n      * Test the contract of the equals method.\n      */\n+    @Test\n     public void testEquals() {\n         ZipEightByteInteger zl = new ZipEightByteInteger(0x12345678);\n         ZipEightByteInteger zl2 = new ZipEightByteInteger(0x12345678);\n     /**\n      * Test sign handling.\n      */\n+    @Test\n     public void testSign() {\n         ZipEightByteInteger zl = new ZipEightByteInteger(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});\n         assertEquals(BigInteger.valueOf(Long.MAX_VALUE).shiftLeft(1).setBit(0),\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipEncodingTest.java\n import java.io.IOException;\n import java.nio.ByteBuffer;\n \n-import junit.framework.TestCase;\n+import org.apache.commons.compress.utils.CharsetNames;\n \n-import org.apache.commons.compress.utils.CharsetNames;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n \n /**\n  * Test zip encodings.\n  */\n-public class ZipEncodingTest extends TestCase {\n+public class ZipEncodingTest {\n     private static final String UNENC_STRING = \"\\u2016\";\n \n     // stress test for internal grow method.\n     private static final String BAD_STRING_ENC =\n         \"%U2016%U2015%U2016%U2015%U2016%U2015%U2016%U2015%U2016%U2015%U2016\";\n \n+    @Test\n     public void testSimpleCp437Encoding() throws IOException {\n \n         doSimpleEncodingTest(\"Cp437\", null);\n     }\n \n+    @Test\n     public void testSimpleCp850Encoding() throws IOException {\n \n         doSimpleEncodingTest(\"Cp850\", null);\n     }\n \n+    @Test\n     public void testNioCp1252Encoding() throws IOException {\n         // CP1252 has some undefined code points, these are\n         // the defined ones\n \n     private static void assertEquals(byte[] expected, ByteBuffer actual) {\n \n-        assertEquals(expected.length, actual.limit());\n+        Assert.assertEquals(expected.length, actual.limit());\n \n         for (byte anExpected : expected) {\n             byte a = actual.get();\n-            assertEquals(anExpected, a);\n+            Assert.assertEquals(anExpected, a);\n         }\n \n     }\n \n         String decoded = enc.decode(testBytes);\n \n-        assertEquals(true, enc.canEncode(decoded));\n+        assertTrue(enc.canEncode(decoded));\n \n         ByteBuffer encoded = enc.encode(decoded);\n \n         assertEquals(testBytes, encoded);\n \n-        assertEquals(false, enc.canEncode(UNENC_STRING));\n+        assertFalse(enc.canEncode(UNENC_STRING));\n         assertEquals(\"%U2016\".getBytes(CharsetNames.US_ASCII), enc.encode(UNENC_STRING));\n-        assertEquals(false, enc.canEncode(BAD_STRING));\n+        assertFalse(enc.canEncode(BAD_STRING));\n         assertEquals(BAD_STRING_ENC.getBytes(CharsetNames.US_ASCII),\n                      enc.encode(BAD_STRING));\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n package org.apache.commons.compress.archivers.zip;\n \n import static org.apache.commons.compress.AbstractTestCase.getFile;\n-import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.*;\n \n import java.io.File;\n import java.io.FileInputStream;\n import java.util.TreeMap;\n import java.util.zip.ZipEntry;\n \n-import junit.framework.TestCase;\n import org.apache.commons.compress.utils.IOUtils;\n-\n-public class ZipFileTest extends TestCase {\n+import org.junit.After;\n+import org.junit.Test;\n+\n+public class ZipFileTest {\n     private ZipFile zf = null;\n \n-    @Override\n+    @After\n     public void tearDown() {\n         ZipFile.closeQuietly(zf);\n     }\n \n+    @Test\n     public void testCDOrder() throws Exception {\n         readOrderTest();\n         ArrayList<ZipArchiveEntry> l = Collections.list(zf.getEntries());\n         assertEntryName(l, 22, \"ZipFile\");\n     }\n \n+    @Test\n     public void testPhysicalOrder() throws Exception {\n         readOrderTest();\n         ArrayList<ZipArchiveEntry> l = Collections.list(zf.getEntriesInPhysicalOrder());\n         assertEntryName(l, 22, \"ZipUtil\");\n     }\n \n+    @Test\n     public void testDoubleClose() throws Exception {\n         readOrderTest();\n         zf.close();\n         }\n     }\n \n+    @Test\n     public void testReadingOfStoredEntry() throws Exception {\n         File f = File.createTempFile(\"commons-compress-zipfiletest\", \".zip\");\n         f.deleteOnExit();\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-176\"\n      */\n+    @Test\n     public void testWinzipBackSlashWorkaround() throws Exception {\n         File archive = getFile(\"test-winzip.zip\");\n         zf = new ZipFile(archive);\n      * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-208\"\n      * >COMPRESS-208</a>.\n      */\n+    @Test\n     public void testSkipsPK00Prefix() throws Exception {\n         File archive = getFile(\"COMPRESS-208.zip\");\n         zf = new ZipFile(archive);\n         assertNotNull(zf.getEntry(\"test2.xml\"));\n     }\n \n+    @Test\n     public void testUnixSymlinkSampleFile() throws Exception {\n         final String entryPrefix = \"COMPRESS-214_unix_symlinks/\";\n         final TreeMap<String, String> expectedVals = new TreeMap<String, String>();\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-227\"\n      */\n+    @Test\n     public void testDuplicateEntry() throws Exception {\n         File archive = getFile(\"COMPRESS-227.zip\");\n         zf = new ZipFile(archive);\n     /**\n      * @see \"https://issues.apache.org/jira/browse/COMPRESS-228\"\n      */\n+    @Test\n     public void testExcessDataInZip64ExtraField() throws Exception {\n         File archive = getFile(\"COMPRESS-228.zip\");\n         zf = new ZipFile(archive);\n         assertEquals(26101, ze.getSize());\n     }\n \n+    @Test\n     public void testUnshrinking() throws Exception {\n         zf = new ZipFile(getFile(\"SHRUNK.ZIP\"));\n         ZipArchiveEntry test = zf.getEntry(\"TEST1.XML\");\n      * <a href=\"https://issues.apache.org/jira/browse/COMPRESS-264\"\n      * >COMPRESS-264</a>.\n      */\n+    @Test\n     public void testReadingOfFirstStoredEntry() throws Exception {\n         File archive = getFile(\"COMPRESS-264.zip\");\n         zf = new ZipFile(archive);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipLongTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n \n /**\n- * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ZipLong.\n+ * JUnit testcases for org.apache.commons.compress.archivers.zip.ZipLong.\n  *\n  */\n-public class ZipLongTest extends TestCase {\n-\n-    public ZipLongTest(String name) {\n-        super(name);\n-    }\n+public class ZipLongTest {\n \n     /**\n      * Test conversion to bytes.\n      */\n+    @Test\n     public void testToBytes() {\n         ZipLong zl = new ZipLong(0x12345678);\n         byte[] result = zl.getBytes();\n     /**\n      * Test conversion to bytes.\n      */\n+    @Test\n     public void testPut() {\n         byte[] arr = new byte[5];\n         ZipLong.putLong(0x12345678, arr, 1);\n     /**\n      * Test conversion from bytes.\n      */\n+    @Test\n     public void testFromBytes() {\n         byte[] val = new byte[] {0x78, 0x56, 0x34, 0x12};\n         ZipLong zl = new ZipLong(val);\n     /**\n      * Test the contract of the equals method.\n      */\n+    @Test\n     public void testEquals() {\n         ZipLong zl = new ZipLong(0x12345678);\n         ZipLong zl2 = new ZipLong(0x12345678);\n     /**\n      * Test sign handling.\n      */\n+    @Test\n     public void testSign() {\n         ZipLong zl = new ZipLong(new byte[] {(byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF});\n         assertEquals(0x00000000FFFFFFFFl, zl.getValue());\n     }\n \n+    @Test\n     public void testClone() {\n         ZipLong s1 = new ZipLong(42);\n         ZipLong s2 = (ZipLong) s1.clone();\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipShortTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n \n /**\n- * JUnit 3 testcases for org.apache.commons.compress.archivers.zip.ZipShort.\n+ * JUnit testcases for org.apache.commons.compress.archivers.zip.ZipShort.\n  *\n  */\n-public class ZipShortTest extends TestCase {\n-\n-    public ZipShortTest(String name) {\n-        super(name);\n-    }\n+public class ZipShortTest {\n \n     /**\n      * Test conversion to bytes.\n      */\n+    @Test\n     public void testToBytes() {\n         ZipShort zs = new ZipShort(0x1234);\n         byte[] result = zs.getBytes();\n     /**\n      * Test conversion to bytes.\n      */\n+    @Test\n     public void testPut() {\n         byte[] arr = new byte[3];\n         ZipShort.putShort(0x1234, arr, 1);\n     /**\n      * Test conversion from bytes.\n      */\n+    @Test\n     public void testFromBytes() {\n         byte[] val = new byte[] {0x34, 0x12};\n         ZipShort zs = new ZipShort(val);\n     /**\n      * Test the contract of the equals method.\n      */\n+    @Test\n     public void testEquals() {\n         ZipShort zs = new ZipShort(0x1234);\n         ZipShort zs2 = new ZipShort(0x1234);\n     /**\n      * Test sign handling.\n      */\n+    @Test\n     public void testSign() {\n         ZipShort zs = new ZipShort(new byte[] {(byte)0xFF, (byte)0xFF});\n         assertEquals(0x0000FFFF, zs.getValue());\n     }\n \n+    @Test\n     public void testClone() {\n         ZipShort s1 = new ZipShort(42);\n         ZipShort s2 = (ZipShort) s1.clone();\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipUtilTest.java\n \n package org.apache.commons.compress.archivers.zip;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n \n import java.math.BigInteger;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.TimeZone;\n \n-public class ZipUtilTest extends TestCase {\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class ZipUtilTest {\n \n     private Date time;\n     private ZipLong zl;\n \n-    /**\n-     * Constructor\n-     */\n-    public ZipUtilTest(String name) {\n-        super(name);\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n+    @Before\n+    public void setUp() throws Exception {\n         time = new Date();\n         Calendar cal = Calendar.getInstance();\n         cal.setTime(time);\n         zl = new ZipLong(result);\n     }\n \n-    @Override\n-    protected void tearDown() throws Exception {\n-        super.tearDown();\n-    }\n-\n+    @Test\n     public void testZipLong() throws Exception {\n         ZipLong test = ZipUtil.toDosTime(time);\n         assertEquals(test.getValue(), zl.getValue());\n     }\n \n+    @Test\n     public void testAdjustToLong() {\n         assertEquals(Integer.MAX_VALUE,\n                      ZipUtil.adjustToLong(Integer.MAX_VALUE));\n                      ZipUtil.adjustToLong(2 * Integer.MAX_VALUE));\n     }\n \n+    @Test\n     public void testMinTime(){\n         byte[] b1 = ZipUtil.toDosTime(0);\n         byte b10 = b1[0]; // Save the first byte\n         assertEquals(b10,b2[0]); // first byte should still be the same\n     }\n \n+    @Test\n     public void testOutsideCalendar(){\n         byte[] b1 = ZipUtil.toDosTime(160441200000L); // 1.1..1975\n         assertEquals(0, b1[0]);\n         assertEquals(0, b1[3]);\n     }\n \n+    @Test\n     public void testInsideCalendar(){\n         TimeZone tz = TimeZone.getDefault();\n         long date = 476096400000L; // 1.1.1985, 10:00 am GMT\n         assertEquals(10, b1[3]);\n     }\n \n+    @Test\n     public void testReverse() {\n         byte[][] bTest = new byte[6][];\n         bTest[0] = new byte[]{};\n         }\n     }\n \n+    @Test\n     public void testBigToLong() {\n         BigInteger big1 = BigInteger.valueOf(1);\n         BigInteger big2 = BigInteger.valueOf(Long.MAX_VALUE);\n         }\n     }\n \n+    @Test\n     public void testLongToBig() {\n         long l0 = 0;\n         long l1 = 1;\n         }\n     }\n \n+    @Test\n     public void testSignedByteToUnsignedInt() {\n         // Yay, we can completely test all possible input values in this case!\n         int expectedVal = 128;\n         }\n     }\n \n+    @Test\n     public void testUnsignedIntToSignedByte() {\n         int unsignedVal = 128;\n         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {\n--- a/src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/BZip2UtilsTestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n \n import org.apache.commons.compress.compressors.bzip2.BZip2Utils;\n+import org.junit.Test;\n \n-public class BZip2UtilsTestCase extends TestCase {\n+public class BZip2UtilsTestCase {\n \n+    @Test\n     public void testIsCompressedFilename() {\n         assertFalse(BZip2Utils.isCompressedFilename(\"\"));\n         assertFalse(BZip2Utils.isCompressedFilename(\".gz\"));\n         assertFalse(BZip2Utils.isCompressedFilename(\"x.tbz2.y\"));\n     }\n \n+    @Test\n     public void testGetUncompressedFilename() {\n         assertEquals(\"\", BZip2Utils.getUncompressedFilename(\"\"));\n         assertEquals(\".bz2\", BZip2Utils.getUncompressedFilename(\".bz2\"));\n         assertEquals(\"x.tbz2.y\", BZip2Utils.getUncompressedFilename(\"x.tbz2.y\"));\n     }\n \n+    @Test\n     public void testGetCompressedFilename() {\n         assertEquals(\".bz2\", BZip2Utils.getCompressedFilename(\"\"));\n         assertEquals(\" .bz2\", BZip2Utils.getCompressedFilename(\" \"));\n--- a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n package org.apache.commons.compress.compressors;\n \n import static org.apache.commons.compress.AbstractTestCase.getFile;\n+import static org.junit.Assert.*;\n \n import java.io.BufferedInputStream;\n import java.io.ByteArrayInputStream;\n import java.io.FileInputStream;\n import java.io.IOException;\n-\n-import junit.framework.TestCase;\n \n import org.apache.commons.compress.compressors.CompressorException;\n import org.apache.commons.compress.compressors.CompressorInputStream;\n import org.apache.commons.compress.compressors.gzip.GzipCompressorInputStream;\n import org.apache.commons.compress.compressors.pack200.Pack200CompressorInputStream;\n import org.apache.commons.compress.compressors.xz.XZCompressorInputStream;\n+import org.junit.Test;\n \n @SuppressWarnings(\"deprecation\") // deliberately tests setDecompressConcatenated\n-public final class DetectCompressorTestCase extends TestCase {\n-\n-    public DetectCompressorTestCase(String name) {\n-        super(name);\n-    }\n+public final class DetectCompressorTestCase {\n \n     final CompressorStreamFactory factory = new CompressorStreamFactory();\n     private static final CompressorStreamFactory factoryTrue = new CompressorStreamFactory(true);\n         new TestData(\"multiple.xz\", new char[]{'a'}, factory, false),\n     };\n     \n+    @Test\n     public void testDetection() throws Exception {\n         CompressorInputStream bzip2 = getStreamFor(\"bla.txt.bz2\"); \n         assertNotNull(bzip2);\n         }\n     }\n \n+    @Test\n     public void testOverride() {\n         CompressorStreamFactory fac = new CompressorStreamFactory();\n         assertFalse(fac.getDecompressConcatenated());\n         }\n     }\n \n+    @Test\n     public void testMutiples() throws Exception {\n         for(int i=0; i <tests.length; i++) {\n             TestData test = tests[i];\n--- a/src/test/java/org/apache/commons/compress/compressors/GzipUtilsTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/GzipUtilsTestCase.java\n  */\n package org.apache.commons.compress.compressors;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n \n import org.apache.commons.compress.compressors.gzip.GzipUtils;\n+import org.junit.Test;\n \n-public class GzipUtilsTestCase extends TestCase {\n+public class GzipUtilsTestCase {\n \n+    @Test\n     public void testIsCompressedFilename() {\n         assertFalse(GzipUtils.isCompressedFilename(\"\"));\n         assertFalse(GzipUtils.isCompressedFilename(\".gz\"));\n         assertFalse(GzipUtils.isCompressedFilename(\"x.wmz.y\"));\n     }\n \n+    @Test\n     public void testGetUncompressedFilename() {\n         assertEquals(\"\", GzipUtils.getUncompressedFilename(\"\"));\n         assertEquals(\".gz\", GzipUtils.getUncompressedFilename(\".gz\"));\n         assertEquals(\"x.wmz.y\", GzipUtils.getUncompressedFilename(\"x.wmz.y\"));\n     }\n \n+    @Test\n     public void testGetCompressedFilename() {\n         assertEquals(\".gz\", GzipUtils.getCompressedFilename(\"\"));\n         assertEquals(\"x.gz\", GzipUtils.getCompressedFilename(\"x\"));\n--- a/src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/xz/XZUtilsTestCase.java\n  */\n package org.apache.commons.compress.compressors.xz;\n \n-import junit.framework.TestCase;\n+import static org.junit.Assert.*;\n \n-public class XZUtilsTestCase extends TestCase {\n+import org.junit.Test;\n \n+public class XZUtilsTestCase {\n+\n+    @Test\n     public void testIsCompressedFilename() {\n         assertFalse(XZUtils.isCompressedFilename(\"\"));\n         assertFalse(XZUtils.isCompressedFilename(\".xz\"));\n         assertFalse(XZUtils.isCompressedFilename(\"x.txz.y\"));\n     }\n \n+    @Test\n     public void testGetUncompressedFilename() {\n         assertEquals(\"\", XZUtils.getUncompressedFilename(\"\"));\n         assertEquals(\".xz\", XZUtils.getUncompressedFilename(\".xz\"));\n         assertEquals(\"x.txz.y\", XZUtils.getUncompressedFilename(\"x.txz.y\"));\n     }\n \n+    @Test\n     public void testGetCompressedFilename() {\n         assertEquals(\".xz\", XZUtils.getCompressedFilename(\"\"));\n         assertEquals(\"x.xz\", XZUtils.getCompressedFilename(\"x\"));\n         assertEquals(\"x.wmf.y.xz\", XZUtils.getCompressedFilename(\"x.wmf.y\"));\n     }\n \n+    @Test\n     public void testMatches() {\n         byte[] data = {\n             (byte) 0xFD, '7', 'z', 'X', 'Z', '\\0'\n         assertFalse(XZUtils.matches(data, 6));\n     }\n \n+    @Test\n     public void testCachingIsEnabledByDefaultAndXZIsPresent() {\n         assertEquals(XZUtils.CachedAvailability.CACHED_AVAILABLE, XZUtils.getCachedXZAvailability());\n         assertTrue(XZUtils.isXZCompressionAvailable());\n     }\n \n+    @Test\n     public void testCanTurnOffCaching() {\n         try {\n             XZUtils.setCacheXZAvailablity(false);\n         }\n     }\n \n+    @Test\n     public void testTurningOnCachingReEvaluatesAvailability() {\n         try {\n             XZUtils.setCacheXZAvailablity(false);", "timestamp": 1424133620, "metainfo": ""}