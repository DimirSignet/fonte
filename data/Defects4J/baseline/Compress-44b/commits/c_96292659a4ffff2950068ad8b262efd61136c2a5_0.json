{"sha": "96292659a4ffff2950068ad8b262efd61136c2a5", "log": "optionally use PAX headers when writing non-ASCII file names.  COMPRESS-183  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStream.java\n \n     private final ZipEncoding encoding;\n \n+    private boolean addPaxHeadersForNonAsciiNames = false;\n+    private static final ZipEncoding ASCII =\n+        ZipEncodingHelper.getZipEncoding(\"ASCII\");\n+\n     /**\n      * Constructor for TarInputStream.\n      * @param os the output stream to use\n         this.bigNumberMode = bigNumberMode;\n     }\n \n+    /**\n+     * Whether to add a PAX extension header for non-ASCII file names.\n+     * @since Apache Commons Compress 1.4\n+     */\n+    public void setAddPaxHeadersForNonAsciiNames(boolean b) {\n+        addPaxHeadersForNonAsciiNames = b;\n+    }\n \n     @Deprecated\n     @Override\n         }\n         TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;\n         Map<String, String> paxHeaders = new HashMap<String, String>();\n-        final byte[] nameBytes = encoding.encode(entry.getName()).array();\n+        final String entryName = entry.getName();\n+        final byte[] nameBytes = encoding.encode(entryName).array();\n+        boolean paxHeaderContainsPath = false;\n         if (nameBytes.length >= TarConstants.NAMELEN) {\n \n             if (longFileMode == LONGFILE_POSIX) {\n-                paxHeaders.put(\"path\", entry.getName());\n+                paxHeaders.put(\"path\", entryName);\n+                paxHeaderContainsPath = true;\n             } else if (longFileMode == LONGFILE_GNU) {\n                 // create a TarEntry for the LongLink, the contents\n                 // of which are the entry's name\n                 write(0); // NUL terminator\n                 closeArchiveEntry();\n             } else if (longFileMode != LONGFILE_TRUNCATE) {\n-                throw new RuntimeException(\"file name '\" + entry.getName()\n+                throw new RuntimeException(\"file name '\" + entryName\n                                            + \"' is too long ( > \"\n                                            + TarConstants.NAMELEN + \" bytes)\");\n             }\n             failForBigNumbers(entry);\n         }\n \n+        if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath\n+            && !ASCII.canEncode(entryName)) {\n+            paxHeaders.put(\"path\", entryName);\n+        }\n+\n         if (paxHeaders.size() > 0) {\n-            writePaxHeaders(entry.getName(), paxHeaders);\n+            writePaxHeaders(entryName, paxHeaders);\n         }\n \n         entry.writeEntryHeader(recordBuf, encoding,\n         } else {\n             currSize = entry.getSize();\n         }\n-        currName = entry.getName();\n+        currName = entryName;\n         haveUnclosedEntry = true;\n     }\n \n      */\n     void writePaxHeaders(String entryName,\n                          Map<String, String> headers) throws IOException {\n-        String name = \"./PaxHeaders.X/\" + entryName;\n+        String name = \"./PaxHeaders.X/\" + stripTo7Bits(entryName);\n         if (name.length() >= TarConstants.NAMELEN) {\n             name = name.substring(0, TarConstants.NAMELEN - 1);\n         }\n         closeArchiveEntry();\n     }\n \n+    private String stripTo7Bits(String name) {\n+        final int length = name.length();\n+        StringBuffer result = new StringBuffer(length);\n+        for (int i = 0; i < length; i++) {\n+            char stripped = (char) (name.charAt(i) & 0x7F);\n+            if (stripped != 0) { // would be read as Trailing null\n+                result.append(stripped);\n+            }\n+        }\n+        return result.toString();\n+    }\n+\n     /**\n      * Write an EOF (end of archive) record to the tar archive.\n      * An EOF record consists of a record of all zeros.\n--- a/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/tar/TarArchiveOutputStreamTest.java\n         }\n     }\n \n+    public void testWriteNonAsciiPathNamePaxHeader() throws Exception {\n+        String n = \"\\u00e4\";\n+        TarArchiveEntry t = new TarArchiveEntry(n);\n+        t.setSize(10 * 1024);\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        TarArchiveOutputStream tos = new TarArchiveOutputStream(bos);\n+        tos.setAddPaxHeadersForNonAsciiNames(true);\n+        tos.putArchiveEntry(t);\n+        tos.write(new byte[10 * 1024]);\n+        tos.closeArchiveEntry();\n+        tos.close();\n+        byte[] data = bos.toByteArray();\n+        assertEquals(\"11 path=\" + n + \"\\n\",\n+                     new String(data, 512, 11, \"UTF-8\"));\n+        FileOutputStream fos = new FileOutputStream(\"/tmp/x\");\n+        fos.write(data);\n+        fos.close();\n+        TarArchiveInputStream tin =\n+            new TarArchiveInputStream(new ByteArrayInputStream(data));\n+        TarArchiveEntry e = tin.getNextTarEntry();\n+        assertEquals(n, e.getName());\n+    }\n+\n }", "timestamp": 1332567151, "metainfo": ""}