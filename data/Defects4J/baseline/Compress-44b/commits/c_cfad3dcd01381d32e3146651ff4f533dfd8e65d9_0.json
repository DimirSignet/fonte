{"sha": "cfad3dcd01381d32e3146651ff4f533dfd8e65d9", "log": "Inflater knows the amount of data it has written  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/gzip/GzipCompressorInputStream.java\n     // CRC32 from uncompressed data\n     private final CRC32 crc = new CRC32();\n \n-    private long memberSize;\n-\n     // True once everything has been decompressed\n     private boolean endReached = false;\n \n         // Reset\n         inf.reset();\n         crc.reset();\n-        memberSize = 0;\n \n         return true;\n     }\n             }\n \n             crc.update(b, off, ret);\n-            memberSize += ret;\n             off += ret;\n             len -= ret;\n             size += ret;\n                 // Uncompressed size modulo 2^32 (ISIZE in the spec)\n                 long isize = readLittleEndianInt(inData);\n \n-                if (isize != (memberSize & 0xffffffffl)) {\n+                if (isize != (inf.getBytesWritten() & 0xffffffffl)) {\n                     throw new IOException(\"Gzip-compressed data is corrupt\"\n                                           + \"(uncompressed size mismatch)\");\n                 }", "timestamp": 1408680478, "metainfo": ""}