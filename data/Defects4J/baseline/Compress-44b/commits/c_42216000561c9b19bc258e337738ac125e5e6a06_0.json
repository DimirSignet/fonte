{"sha": "42216000561c9b19bc258e337738ac125e5e6a06", "log": "COMPRESS-327 convenience constructors and more javadocs  patch by Maciej Nowakowski", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n      * allows you to read from an in-memory archive.</p>\n      *\n      * @param channel the channel to read\n+     * @throws IOException if reading the archive fails\n+     * @since 1.13\n+     */\n+    public SevenZFile(final SeekableByteChannel channel) throws IOException {\n+        this(channel, \"unknown archive\", null);\n+    }\n+\n+    /**\n+     * Reads a SeekableByteChannel as 7z archive\n+     *\n+     * <p>{@link\n+     * org.apache.commons.compress.utils.SeekableInMemoryByteChannel}\n+     * allows you to read from an in-memory archive.</p>\n+     *\n+     * @param channel the channel to read\n      * @param password optional password if the archive is encrypted -\n      * the byte array is supposed to be the UTF16-LE encoded\n      * representation of the password.\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipFile.java\n         throws IOException {\n         this(Files.newByteChannel(f.toPath(), EnumSet.of(StandardOpenOption.READ)),\n              f.getAbsolutePath(), encoding, useUnicodeExtraFields, true);\n+    }\n+\n+    /**\n+     * Opens the given channel for reading, assuming \"UTF8\" for file names.\n+     *\n+     * <p>{@link\n+     * org.apache.commons.compress.utils.SeekableInMemoryByteChannel}\n+     * allows you to read from an in-memory archive.</p>\n+     *\n+     * @param channel the archive.\n+     *\n+     * @throws IOException if an error occurs while reading the file.\n+     * @since 1.13\n+     */\n+    public ZipFile(final SeekableByteChannel channel)\n+            throws IOException {\n+        this(channel, \"unknown archive\", ZipEncodingHelper.UTF8, true);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java\n+++ b/src/main/java/org/apache/commons/compress/utils/SeekableInMemoryByteChannel.java\n \n /**\n  * A {@link SeekableByteChannel} implementation that wraps a byte[].\n+ *\n+ * <p>When this channel is used for writing an internal buffer grows to accommodate\n+ * incoming data. A natural size limit is the value of {@link Integer#MAX_VALUE}.\n+ * Internal buffer can be accessed via {@link SeekableInMemoryByteChannel#array()}.</p>\n+ *\n  * @since 1.13\n  * @NotThreadSafe\n  */\n     private final AtomicBoolean closed = new AtomicBoolean();\n     private int position, size;\n \n+    /**\n+     * Constructor taking a byte array.\n+     *\n+     * <p>This constructor is intended to be used with pre-allocated buffer or when\n+     * reading from a given byte array.</p>\n+     *\n+     * @param data input data or pre-allocated array.\n+     */\n     public SeekableInMemoryByteChannel(byte[] data) {\n         this.data = data;\n         size = data.length;\n     }\n \n+    /**\n+     * Parameterless constructor - allocates internal buffer by itself.\n+     */\n     public SeekableInMemoryByteChannel() {\n         this(new byte[0]);\n+    }\n+\n+    /**\n+     * Constructor taking a size of storage to be allocated.\n+     *\n+     * <p>Creates a channel and allocates internal storage of a given size.</p>\n+     *\n+     * @param size size of internal buffer to allocate, in bytes.\n+     */\n+    public SeekableInMemoryByteChannel(int size) {\n+        this(new byte[size]);\n     }\n \n     @Override\n \n     /**\n      * Obtains the array backing this channel.\n+     *\n+     * <p>NOTE:\n+     * The returned buffer is not aligned with containing data, use\n+     * {@link #size()} to obtain the size of data stored in the buffer.</p>\n+     *\n+     * @return internal byte array.\n      */\n     public byte[] array() {\n         return data;\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n         try (FileInputStream fis = new FileInputStream(getFile(\"bla.7z\"))) {\n             data = IOUtils.toByteArray(fis);\n         }\n-        try (SevenZFile sevenZFile = new SevenZFile(new SeekableInMemoryByteChannel(data),\n-                                                    null)) {\n+        try (SevenZFile sevenZFile = new SevenZFile(new SeekableInMemoryByteChannel(data))) {\n             final Iterable<SevenZArchiveEntry> entries = sevenZFile.getEntries();\n             final Iterator<SevenZArchiveEntry> iter = entries.iterator();\n             SevenZArchiveEntry entry = iter.next();", "timestamp": 1478273434, "metainfo": ""}