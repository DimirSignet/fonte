{"sha": "f2af9f0c583ce5d5e294b60ada9e14516f5e92ac", "log": "COMPRESS-391: Persist alignment request", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ExtraFieldUtils.java\n         register(X0016_CertificateIdForCentralDirectory.class);\n         register(X0017_StrongEncryptionHeader.class);\n         register(X0019_EncryptionRecipientCertificateList.class);\n-        register(PaddingExtraField.class);\n+        register(ResourceAlignmentExtraField.class);\n     }\n \n     /**\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ResourceAlignmentExtraField.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers.zip;\n+\n+\n+import java.util.zip.ZipException;\n+\n+/**\n+ * An extra field who's sole purpose is to align and pad the local file header\n+ * so that the entry's data starts at a certain position.\n+ *\n+ * <p>The padding content of the padding is ignored and not retained\n+ * when reading a padding field.</p>\n+ *\n+ * <p>This enables Commons Compress to create \"aligned\" archives\n+ * similar to Android's zipalign command line tool.</p>\n+ *\n+ * @since 1.14\n+ * @see \"https://developer.android.com/studio/command-line/zipalign.html\"\n+ * @see ZipArchiveEntry#setAlignment\n+ */\n+public class ResourceAlignmentExtraField implements ZipExtraField {\n+\n+    /**\n+     * Extra field id used for storing alignment and padding.\n+     */\n+    public static final ZipShort ID = new ZipShort(0xa11e);\n+\n+    public static final int BASE_SIZE = 2;\n+\n+    private short alignment;\n+\n+    private boolean allowMethodChange;\n+\n+    private int padding = 0;\n+\n+    public ResourceAlignmentExtraField() {\n+    }\n+\n+    public ResourceAlignmentExtraField(int alignment) {\n+        this(alignment, false);\n+    }\n+\n+    public ResourceAlignmentExtraField(int alignment, boolean allowMethodChange) {\n+        this(alignment, allowMethodChange, 0);\n+    }\n+\n+    public ResourceAlignmentExtraField(int alignment, boolean allowMethodChange, int padding) {\n+        if (alignment < 0 || alignment > 0x7fff)\n+            throw new IllegalArgumentException(\"Alignment must be between 0 and 0x7fff, was: \" + alignment);\n+        this.alignment = (short) alignment;\n+        this.allowMethodChange = allowMethodChange;\n+        this.padding = padding;\n+    }\n+\n+    /**\n+     * Gets requested alignment.\n+     *\n+     * @return\n+     *      requested alignment.\n+     */\n+    public short getAlignment() {\n+        return alignment;\n+    }\n+\n+    /**\n+     * Indicates whether method change is allowed when re-compressing the zip file.\n+     *\n+     * @return\n+     *      true if method change is allowed, false otherwise.\n+     */\n+    public boolean allowMethodChange() {\n+        return allowMethodChange;\n+    }\n+\n+    @Override\n+    public ZipShort getHeaderId() {\n+        return ID;\n+    }\n+\n+    @Override\n+    public ZipShort getLocalFileDataLength() {\n+        return new ZipShort(BASE_SIZE + padding);\n+    }\n+\n+    @Override\n+    public ZipShort getCentralDirectoryLength() {\n+        return new ZipShort(BASE_SIZE);\n+    }\n+\n+    @Override\n+    public byte[] getLocalFileDataData() {\n+        byte[] content = new byte[2+padding];\n+        ZipShort.putShort(alignment | (allowMethodChange ? 0x8000 : 0), content, 0);\n+        return content;\n+    }\n+\n+    @Override\n+    public byte[] getCentralDirectoryData() {\n+        return ZipShort.getBytes(alignment | (allowMethodChange ? 0x8000 : 0));\n+    }\n+\n+    @Override\n+    public void parseFromLocalFileData(byte[] buffer, int offset, int length) throws ZipException {\n+        parseFromCentralDirectoryData(buffer, offset, length);\n+        this.padding = length - BASE_SIZE;\n+    }\n+\n+    @Override\n+    public void parseFromCentralDirectoryData(byte[] buffer, int offset, int length) throws ZipException {\n+        if (length < 2)\n+            throw new ZipException(\"Too short content for ResourceAlignmentExtraField (0xa11e): \" + length);\n+        int alignmentValue = ZipShort.getValue(buffer, offset);\n+        this.alignment = (short) (alignmentValue&0x7fff);\n+        this.allowMethodChange = (alignmentValue&0x8000) != 0;\n+    }\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n \n     private byte[] createLocalFileHeader(final ZipArchiveEntry ze, final ByteBuffer name, final boolean encodable,\n                                          final boolean phased, long archiveOffset) throws IOException {\n+        ResourceAlignmentExtraField oldAlignmentEx =\n+                        (ResourceAlignmentExtraField) ze.getExtraField(ResourceAlignmentExtraField.ID);\n+        if (oldAlignmentEx != null)\n+            ze.removeExtraField(ResourceAlignmentExtraField.ID);\n+\n+        int alignment = ze.getAlignment();\n+        if (alignment <= 0 && oldAlignmentEx != null) {\n+            alignment = oldAlignmentEx.getAlignment();\n+        }\n+\n+        if (alignment > 1 || (oldAlignmentEx != null && !oldAlignmentEx.allowMethodChange())) {\n+            int oldLength = LFH_FILENAME_OFFSET +\n+                            name.limit() - name.position() +\n+                            ze.getLocalFileDataExtra().length;\n+\n+            int padding = (int) ((-archiveOffset - oldLength - EXTRAFIELD_HEADER_SIZE\n+                            - ResourceAlignmentExtraField.BASE_SIZE) &\n+                            (alignment - 1));\n+            ze.addExtraField(new ResourceAlignmentExtraField(alignment,\n+                            oldAlignmentEx != null ? oldAlignmentEx.allowMethodChange() : false, padding));\n+        }\n+\n         byte[] extra = ze.getLocalFileDataExtra();\n         final int nameLen = name.limit() - name.position();\n         int len = LFH_FILENAME_OFFSET + nameLen + extra.length;\n-        int alignment = ze.getAlignment();\n-        if (alignment > 1 && ((archiveOffset + len) & (alignment - 1)) != 0) {\n-            int padding = (int) ((-archiveOffset - len - EXTRAFIELD_HEADER_SIZE) & (alignment - 1));\n-            ZipExtraField pex = (PaddingExtraField) ze.getExtraField(PaddingExtraField.ID);\n-            if (pex != null) {\n-                padding += pex.getLocalFileDataLength().getValue() + EXTRAFIELD_HEADER_SIZE;\n-            }\n-            // will overwrite an existing PaddingExtraField\n-            ze.addExtraField(new PaddingExtraField(padding));\n-            extra = ze.getLocalFileDataExtra();\n-            len = LFH_FILENAME_OFFSET + nameLen + extra.length;\n-        }\n         final byte[] buf = new byte[len];\n \n         System.arraycopy(LFH_SIG,  0, buf, LFH_SIG_OFFSET, WORD);\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n             ZipArchiveEntry storedEntry2 = new ZipArchiveEntry(\"stored2.txt\");\n             storedEntry2.setMethod(ZipEntry.STORED);\n             storedEntry2.setAlignment(1024);\n-            storedEntry2.addExtraField(new PaddingExtraField(123));\n+            storedEntry2.addExtraField(new ResourceAlignmentExtraField(1));\n             zipOutput.putArchiveEntry(storedEntry2);\n-            zipOutput.write(\"Hello pre-aligned Stored\\n\".getBytes(Charset.forName(\"UTF-8\")));\n+            zipOutput.write(\"Hello overload-alignment Stored\\n\".getBytes(Charset.forName(\"UTF-8\")));\n+            zipOutput.closeArchiveEntry();\n+\n+            ZipArchiveEntry storedEntry3 = new ZipArchiveEntry(\"stored3.txt\");\n+            storedEntry3.setMethod(ZipEntry.STORED);\n+            storedEntry3.addExtraField(new ResourceAlignmentExtraField(1024));\n+            zipOutput.putArchiveEntry(storedEntry3);\n+            zipOutput.write(\"Hello copy-alignment Stored\\n\".getBytes(Charset.forName(\"UTF-8\")));\n             zipOutput.closeArchiveEntry();\n \n         }\n                         Arrays.copyOfRange(zipContent.array(), 0, (int)zipContent.size())\n         ))) {\n             ZipArchiveEntry inflatedEntry = zf.getEntry(\"inflated.txt\");\n+            ResourceAlignmentExtraField inflatedAlignmentEx =\n+                            (ResourceAlignmentExtraField)inflatedEntry.getExtraField(ResourceAlignmentExtraField.ID);\n             assertNotEquals(-1L, inflatedEntry.getCompressedSize());\n             assertNotEquals(-1L, inflatedEntry.getSize());\n             assertEquals(0L, inflatedEntry.getDataOffset()%1024);\n+            assertNotNull(inflatedAlignmentEx);\n+            assertEquals(1024, inflatedAlignmentEx.getAlignment());\n+            assertFalse(inflatedAlignmentEx.allowMethodChange());\n             try (InputStream stream = zf.getInputStream(inflatedEntry)) {\n                 Assert.assertEquals(\"Hello Deflated\\n\",\n                                 new String(IOUtils.toByteArray(stream), Charset.forName(\"UTF-8\")));\n             }\n             ZipArchiveEntry storedEntry = zf.getEntry(\"stored.txt\");\n+            ResourceAlignmentExtraField storedAlignmentEx =\n+                            (ResourceAlignmentExtraField)storedEntry.getExtraField(ResourceAlignmentExtraField.ID);\n             assertNotEquals(-1L, storedEntry.getCompressedSize());\n             assertNotEquals(-1L, storedEntry.getSize());\n             assertEquals(0L, storedEntry.getDataOffset()%1024);\n+            assertNotNull(storedAlignmentEx);\n+            assertEquals(1024, storedAlignmentEx.getAlignment());\n+            assertFalse(storedAlignmentEx.allowMethodChange());\n             try (InputStream stream = zf.getInputStream(storedEntry)) {\n                 Assert.assertEquals(\"Hello Stored\\n\",\n                                 new String(IOUtils.toByteArray(stream), Charset.forName(\"UTF-8\")));\n             }\n \n             ZipArchiveEntry storedEntry2 = zf.getEntry(\"stored2.txt\");\n+            ResourceAlignmentExtraField stored2AlignmentEx =\n+                            (ResourceAlignmentExtraField)storedEntry2.getExtraField(ResourceAlignmentExtraField.ID);\n             assertNotEquals(-1L, storedEntry2.getCompressedSize());\n             assertNotEquals(-1L, storedEntry2.getSize());\n             assertEquals(0L, storedEntry2.getDataOffset()%1024);\n+            assertNotNull(stored2AlignmentEx);\n+            assertEquals(1024, stored2AlignmentEx.getAlignment());\n+            assertFalse(stored2AlignmentEx.allowMethodChange());\n             try (InputStream stream = zf.getInputStream(storedEntry2)) {\n-                Assert.assertEquals(\"Hello pre-aligned Stored\\n\",\n+                Assert.assertEquals(\"Hello overload-alignment Stored\\n\",\n+                                new String(IOUtils.toByteArray(stream), Charset.forName(\"UTF-8\")));\n+            }\n+\n+            ZipArchiveEntry storedEntry3 = zf.getEntry(\"stored3.txt\");\n+            ResourceAlignmentExtraField stored3AlignmentEx =\n+                            (ResourceAlignmentExtraField)storedEntry3.getExtraField(ResourceAlignmentExtraField.ID);\n+            assertNotEquals(-1L, storedEntry3.getCompressedSize());\n+            assertNotEquals(-1L, storedEntry3.getSize());\n+            assertEquals(0L, storedEntry3.getDataOffset()%1024);\n+            assertNotNull(stored3AlignmentEx);\n+            assertEquals(1024, stored3AlignmentEx.getAlignment());\n+            assertFalse(stored3AlignmentEx.allowMethodChange());\n+            try (InputStream stream = zf.getInputStream(storedEntry3)) {\n+                Assert.assertEquals(\"Hello copy-alignment Stored\\n\",\n                                 new String(IOUtils.toByteArray(stream), Charset.forName(\"UTF-8\")));\n             }\n         }", "timestamp": 1494525874, "metainfo": ""}