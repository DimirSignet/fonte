{"sha": "9238eab678395743bce4bd273c4534d10f77f715", "log": "COMPRESS-374 support writing LZMA in 7z archives", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n         }\n     }\n \n-    static class LZMADecoder extends CoderBase {\n-        @Override\n-        InputStream decode(final String archiveName, final InputStream in, final long uncompressedLength,\n-                final Coder coder, final byte[] password) throws IOException {\n-            final byte propsByte = coder.properties[0];\n-            long dictSize = coder.properties[1];\n-            for (int i = 1; i < 4; i++) {\n-                dictSize |= (coder.properties[i + 1] & 0xffl) << (8 * i);\n-            }\n-            if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n-                throw new IOException(\"Dictionary larger than 4GiB maximum size used in \" + archiveName);\n-            }\n-            return new LZMAInputStream(in, uncompressedLength, propsByte, (int) dictSize);\n-        }\n-    }\n-    \n     static class BCJDecoder extends CoderBase {\n         private final FilterOptions opts;\n         BCJDecoder(final FilterOptions opts) {\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMADecoder.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.sevenz;\n+\n+import java.io.FilterOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.tukaani.xz.LZMA2Options;\n+import org.tukaani.xz.LZMAInputStream;\n+import org.tukaani.xz.LZMAOutputStream;\n+import org.tukaani.xz.UnsupportedOptionsException;\n+\n+class LZMADecoder extends CoderBase {\n+    LZMADecoder() {\n+        super(LZMA2Options.class, Number.class);\n+    }\n+\n+    @Override\n+    InputStream decode(final String archiveName, final InputStream in, final long uncompressedLength,\n+            final Coder coder, final byte[] password) throws IOException {\n+        final byte propsByte = coder.properties[0];\n+        final int dictSize = getDictionarySize(coder);\n+        if (dictSize > LZMAInputStream.DICT_SIZE_MAX) {\n+            throw new IOException(\"Dictionary larger than 4GiB maximum size used in \" + archiveName);\n+        }\n+        return new LZMAInputStream(in, uncompressedLength, propsByte, (int) dictSize);\n+    }\n+\n+    @Override\n+    OutputStream encode(final OutputStream out, final Object opts)\n+        throws IOException {\n+        return new FilterOutputStream(new LZMAOutputStream(out, getOptions(opts), false)) {\n+            @Override\n+            public void flush() {\n+                // NOOP as LZMAOutputStream throws an exception in flush\n+            }\n+        };\n+    }\n+\n+    @Override\n+    byte[] getOptionsAsProperties(final Object opts) {\n+        final LZMA2Options options = getOptions(opts);\n+        final byte props = (byte) ((options.getPb() * 5 + options.getLp()) * 9 + options.getLc());\n+        int dictSize = options.getDictSize();\n+        return new byte[] {\n+            props,\n+            (byte) (dictSize & 0xff),\n+            (byte) ((dictSize >> 8) & 0xff),\n+            (byte) ((dictSize >> 16) & 0xff),\n+            (byte) ((dictSize >> 24) & 0xff),\n+        };\n+    }\n+\n+    @Override\n+    Object getOptionsFromCoder(final Coder coder, final InputStream in) {\n+        try {\n+            final byte propsByte = coder.properties[0];\n+            int props = propsByte & 0xFF;\n+            int pb = props / (9 * 5);\n+            props -= pb * 9 * 5;\n+            int lp = props / 9;\n+            int lc = props - lp * 9;\n+            LZMA2Options opts = new LZMA2Options();\n+            opts.setPb(pb);\n+            opts.setLcLp(lc, lp);\n+            opts.setDictSize(getDictionarySize(coder));\n+            return opts;\n+        } catch (UnsupportedOptionsException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    private int getDictSize(final Object opts) {\n+        if (opts instanceof LZMA2Options) {\n+            return ((LZMA2Options) opts).getDictSize();\n+        }\n+        return numberOptionOrDefault(opts);\n+    }\n+\n+    private int getDictionarySize(final Coder coder) throws IllegalArgumentException {\n+        long dictSize = coder.properties[1];\n+        for (int i = 1; i < 4; i++) {\n+            dictSize |= (coder.properties[i + 1] & 0xffl) << (8 * i);\n+        }\n+        return (int) dictSize;\n+    }\n+\n+    private LZMA2Options getOptions(final Object opts) {\n+        if (opts instanceof LZMA2Options) {\n+            return (LZMA2Options) opts;\n+        }\n+        final LZMA2Options options = new LZMA2Options();\n+        try {\n+            options.setDictSize(numberOptionOrDefault(opts));\n+        } catch (UnsupportedOptionsException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+        return options;\n+    }\n+\n+    private int numberOptionOrDefault(final Object opts) {\n+        return numberOptionOrDefault(opts, LZMA2Options.DICT_SIZE_DEFAULT);\n+    }\n+}\n--- a/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/SevenZTestCase.java\n         testSevenZArchiveCreation(SevenZMethod.COPY);\n     }\n     \n+    @Test\n+    public void testSevenZArchiveCreationUsingLZMA() throws Exception {\n+        testSevenZArchiveCreation(SevenZMethod.LZMA);\n+    }\n+\n     @Test\n     public void testSevenZArchiveCreationUsingLZMA2() throws Exception {\n         testSevenZArchiveCreation(SevenZMethod.LZMA2);\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZMethodConfigurationTest.java\n     }\n \n     @Test\n+    public void shouldAllowLZMA2OptionsForLZMA() {\n+        Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.LZMA,\n+                                                           new LZMA2Options())\n+                             .getOptions());\n+    }\n+\n+    @Test\n+    public void shouldAllowNumberForLZMA() {\n+        Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.LZMA, 42)\n+                             .getOptions());\n+    }\n+\n+    @Test\n     public void shouldAllowLZMA2OptionsForLZMA2() {\n         Assert.assertNotNull(new SevenZMethodConfiguration(SevenZMethod.LZMA2,\n                                                            new LZMA2Options())\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n+    public void shouldNotAllowStringOptionsForLZMA() {\n+        new SevenZMethodConfiguration(SevenZMethod.LZMA, \"\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n     public void shouldNotAllowStringOptionsForLZMA2() {\n         new SevenZMethodConfiguration(SevenZMethod.LZMA2, \"\");\n     }\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFileTest.java\n     }\n \n     @Test\n+    public void testLzmaWithIntConfiguration() throws Exception {\n+        output = new File(dir, \"lzma-options.7z\");\n+        // 1 MB dictionary\n+        createAndReadBack(output, Collections\n+                          .singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA, 1 << 20)));\n+    }\n+\n+    @Test\n+    public void testLzmaWithOptionsConfiguration() throws Exception {\n+        output = new File(dir, \"lzma-options2.7z\");\n+        final LZMA2Options opts = new LZMA2Options(1);\n+        createAndReadBack(output, Collections\n+                          .singletonList(new SevenZMethodConfiguration(SevenZMethod.LZMA, opts)));\n+    }\n+\n+    @Test\n     public void testLzma2WithIntConfiguration() throws Exception {\n         output = new File(dir, \"lzma2-options.7z\");\n         // 1 MB dictionary", "timestamp": 1480454878, "metainfo": ""}