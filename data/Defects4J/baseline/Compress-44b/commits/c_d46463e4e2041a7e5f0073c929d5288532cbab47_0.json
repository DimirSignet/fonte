{"sha": "d46463e4e2041a7e5f0073c929d5288532cbab47", "log": "password String => byte[] in SevnZFile including test for decryption  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n \n class Coders {\n     static InputStream addDecoder(final InputStream is,\n-            final Coder coder, final String password) throws IOException {\n+            final Coder coder, final byte[] password) throws IOException {\n         for (final CoderId coderId : coderTable) {\n             if (Arrays.equals(coderId.method.getId(), coder.decompressionMethodId)) {\n                 return coderId.coder.decode(is, coder, password);\n     }\n     \n     static OutputStream addEncoder(final OutputStream out, final SevenZMethod method,\n-                                   final String password) throws IOException {\n+                                   final byte[] password) throws IOException {\n         for (final CoderId coderId : coderTable) {\n             if (coderId.method.equals(method)) {\n                 return coderId.coder.encode(out, password);\n     \n     static abstract class CoderBase {\n         abstract InputStream decode(final InputStream in, final Coder coder,\n-                String password) throws IOException;\n-        OutputStream encode(final OutputStream out, final String password)\n+                byte[] password) throws IOException;\n+        OutputStream encode(final OutputStream out, final byte[] password)\n             throws IOException {\n             throw new UnsupportedOperationException(\"method doesn't support writing\");\n         }\n     static class CopyDecoder extends CoderBase {\n         @Override\n         InputStream decode(final InputStream in, final Coder coder,\n-                String password) throws IOException {\n+                byte[] password) throws IOException {\n             return in; \n         }\n         @Override\n-        OutputStream encode(final OutputStream out, final String password) {\n+        OutputStream encode(final OutputStream out, final byte[] password) {\n             return out;\n         }\n     }\n     static class LZMADecoder extends CoderBase {\n         @Override\n         InputStream decode(final InputStream in, final Coder coder,\n-                String password) throws IOException {\n+                byte[] password) throws IOException {\n             byte propsByte = coder.properties[0];\n             long dictSize = coder.properties[1];\n             for (int i = 1; i < 4; i++) {\n     \n     static class DeflateDecoder extends CoderBase {\n         @Override\n-        InputStream decode(final InputStream in, final Coder coder, final String password)\n+        InputStream decode(final InputStream in, final Coder coder, final byte[] password)\n             throws IOException {\n             return new InflaterInputStream(new DummyByteAddingInputStream(in),\n                                            new Inflater(true));\n         }\n         @Override\n-        OutputStream encode(final OutputStream out, final String password) {\n+        OutputStream encode(final OutputStream out, final byte[] password) {\n             return new DeflaterOutputStream(out, new Deflater(9, true));\n         }\n     }\n \n     static class BZIP2Decoder extends CoderBase {\n         @Override\n-        InputStream decode(final InputStream in, final Coder coder, final String password)\n+        InputStream decode(final InputStream in, final Coder coder, final byte[] password)\n                 throws IOException {\n             return new BZip2CompressorInputStream(in);\n         }\n         @Override\n-        OutputStream encode(final OutputStream out, final String password)\n+        OutputStream encode(final OutputStream out, final byte[] password)\n                 throws IOException {\n             return new BZip2CompressorOutputStream(out);\n         }\n     static class AES256SHA256Decoder extends CoderBase {\n         @Override\n         InputStream decode(final InputStream in, final Coder coder,\n-                final String password) throws IOException {\n+                final byte[] passwordBytes) throws IOException {\n             return new InputStream() {\n                 private boolean isInitialized = false;\n                 private CipherInputStream cipherInputStream = null;\n                     final byte[] iv = new byte[16];\n                     System.arraycopy(coder.properties, 2 + saltSize, iv, 0, ivSize);\n                     \n-                    if (password == null) {\n+                    if (passwordBytes == null) {\n                         throw new IOException(\"Cannot read encrypted files without a password\");\n                     }\n-                    final byte[] passwordBytes = password.getBytes(\"UTF-16LE\");\n                     final byte[] aesKeyBytes;\n                     if (numCyclesPower == 0x3f) {\n                         aesKeyBytes = new byte[32];\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/LZMA2Decoder.java\n \n class LZMA2Decoder extends Coders.CoderBase {\n     @Override\n-    InputStream decode(final InputStream in, final Coder coder, String password)\n+    InputStream decode(final InputStream in, final Coder coder, byte[] password)\n         throws IOException {\n         final int dictionarySizeBits = 0xff & coder.properties[0];\n         if ((dictionarySizeBits & (~0x3f)) != 0) {\n     }\n \n     @Override\n-    OutputStream encode(final OutputStream out, final String password)\n+    OutputStream encode(final OutputStream out, final byte[] password)\n         throws IOException {\n         LZMA2Options options = new LZMA2Options();\n         options.setDictSize(LZMA2Options.DICT_SIZE_DEFAULT);\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZFile.java\n     private int currentFolderIndex = -1;\n     private InputStream currentFolderInputStream = null;\n     private InputStream currentEntryInputStream = null;\n-    private String password;\n+    private byte[] password;\n         \n     static final byte[] sevenZSignature = {\n         (byte)'7', (byte)'z', (byte)0xBC, (byte)0xAF, (byte)0x27, (byte)0x1C\n      * Reads a file as 7z archive\n      *\n      * @param filename the file to read\n-     * @param password optional password if the archive is encrypted\n+     * @param password optional password if the archive is encrypted -\n+     * the byte array is supposed to be the UTF16-LE encoded\n+     * representation of the password.\n      */\n-    public SevenZFile(final File filename, final String password) throws IOException {\n+    public SevenZFile(final File filename, final byte[] password) throws IOException {\n         boolean succeeded = false;\n-        this.password = password;\n         this.file = new RandomAccessFile(filename, \"r\");\n         try {\n-            archive = readHeaders();\n+            archive = readHeaders(password);\n+            this.password = password;\n             succeeded = true;\n         } finally {\n             if (!succeeded) {\n         return entry;\n     }\n     \n-    private Archive readHeaders() throws IOException {\n+    private Archive readHeaders(byte[] password) throws IOException {\n         debug(\"SignatureHeader\");\n         \n         final byte[] signature = new byte[6];\n         Archive archive = new Archive();\n         int nid = nextHeaderInputStream.readUnsignedByte();\n         if (nid == NID.kEncodedHeader) {\n-            nextHeaderInputStream = readEncodedHeader(nextHeaderInputStream, archive);\n+            nextHeaderInputStream =\n+                readEncodedHeader(nextHeaderInputStream, archive, password);\n             // Archive gets rebuilt with the new header\n             archive = new Archive();\n             nid = nextHeaderInputStream.readUnsignedByte();\n         }\n     }\n     \n-    private DataInputStream readEncodedHeader(final DataInputStream header, final Archive archive) throws IOException {\n+    private DataInputStream readEncodedHeader(final DataInputStream header, final Archive archive,\n+                                              byte[] password) throws IOException {\n         debug(\"EncodedHeader\");\n \n         readStreamsInfo(header, archive);\n--- a/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/sevenz/SevenZFileTest.java\n         test7zUnarchive(getFile(\"bla.deflate.7z\"));\n     }\n \n+    public void test7zDecryptUnarchive() throws Exception {\n+        test7zUnarchive(getFile(\"bla.encrypted.7z\"), \"foo\".getBytes(\"UTF-16LE\"));\n+    }\n+\n     private void test7zUnarchive(File f) throws Exception {\n-        SevenZFile sevenZFile = new SevenZFile(f);\n+        test7zUnarchive(f, null);\n+    }\n+\n+    private void test7zUnarchive(File f, byte[] password) throws Exception {\n+        SevenZFile sevenZFile = new SevenZFile(f, password);\n         try {\n             SevenZArchiveEntry entry = sevenZFile.getNextEntry();\n             assertEquals(\"test1.xml\", entry.getName());", "timestamp": 1381829847, "metainfo": ""}