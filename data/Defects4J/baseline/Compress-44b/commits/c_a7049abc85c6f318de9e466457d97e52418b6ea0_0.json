{"sha": "a7049abc85c6f318de9e466457d97e52418b6ea0", "log": "provide convenience getNext*Entry methods to ArchiveInputStream subclasses  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n         input = pInput;\n     }\n \n-    public ArchiveEntry getNextEntry() throws IOException {\n+    public ArArchiveEntry getNextArEntry() throws IOException {\n \n         if (offset == 0) {\n             final byte[] expected = \"!<arch>\\n\".getBytes();\n     }\n \n \n+    public ArchiveEntry getNextEntry() throws IOException {\n+        return getNextArEntry();\n+    }\n+\n     public int read() throws IOException {\n         final int ret = input.read();\n         offset++;\n--- a/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/cpio/CpioArchiveInputStream.java\n     }\n \n     public ArchiveEntry getNextEntry() throws IOException {\n-        CpioArchiveEntry entry = this.getNextCPIOEntry();\n-        if(entry == null) {\n-            return null;\n-        }\n-        return (ArchiveEntry)entry;\n+        return getNextCPIOEntry();\n     }\n \n     public static boolean matches(byte[] signature, int length) {\n--- a/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/jar/JarArchiveInputStream.java\n         super(inputStream);\n     }\n \n+    public JarArchiveEntry getNextJarEntry() throws IOException {\n+        ZipArchiveEntry entry = getNextZipEntry();\n+        return entry == null ? null : new JarArchiveEntry(entry);\n+    }\n+\n     public ArchiveEntry getNextEntry() throws IOException {\n-        ZipArchiveEntry entry = (ZipArchiveEntry)super.getNextEntry();\n-        if(entry == null) {\n-            return null;\n-        } else {\n-            return (ArchiveEntry)new JarArchiveEntry(entry);\n-        }\n+        return getNextJarEntry();\n     }\n \n     public static boolean matches(byte[] signature, int length ) {\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n      * @return The next TarEntry in the archive, or null.\n      * @throws IOException on error\n      */\n-    public ArchiveEntry getNextEntry() throws IOException {\n+    public TarArchiveEntry getNextTarEntry() throws IOException {\n         if (hasHitEOF) {\n             return null;\n         }\n         return currEntry;\n     }\n \n+    public ArchiveEntry getNextEntry() throws IOException {\n+        return getNextTarEntry();\n+    }\n+\n     /**\n      * Reads a byte from the current tar archive entry.\n      *\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n         input = new ZipInputStream(inputStream);\n     }\n \n-    public ArchiveEntry getNextEntry() throws IOException {\n+    public ZipArchiveEntry getNextZipEntry() throws IOException {\n         java.util.zip.ZipEntry entry = input.getNextEntry();\n         if(entry == null) {\n             return null;\n         }\n-        return (ArchiveEntry)new ZipArchiveEntry(entry);\n+        return new ZipArchiveEntry(entry);\n+    }\n+\n+    public ArchiveEntry getNextEntry() throws IOException {\n+        return getNextZipEntry();\n     }\n \n     public int read(byte[] b, int off, int len) throws IOException {", "timestamp": 1234338240, "metainfo": ""}