{"sha": "e43a80299cd0b6c6316785dd240aac8cbc451772", "log": "increase test coverage  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioArchiveOutputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers.cpio;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.utils.IOUtils;\n+\n+public class CpioArchiveOutputStreamTest extends AbstractTestCase {\n+\n+    public void testWriteOldBinary() throws Exception {\n+        final File f = getFile(\"test1.xml\");\n+        final File output = new File(dir, \"test.cpio\");\n+        final FileOutputStream out = new FileOutputStream(output);\n+        InputStream in = null;\n+        try {\n+            final CpioArchiveOutputStream os =\n+                new CpioArchiveOutputStream(out, CpioArchiveOutputStream\n+                                            .FORMAT_OLD_BINARY);\n+            os.putArchiveEntry(new CpioArchiveEntry(CpioArchiveOutputStream\n+                                                    .FORMAT_OLD_BINARY,\n+                                                    f, \"test1.xml\"));\n+            IOUtils.copy(in = new FileInputStream(f), os);\n+            in.close();\n+            in = null;\n+            os.closeArchiveEntry();\n+            os.close();\n+        } finally {\n+            if (in != null) {\n+                in.close();\n+            }\n+            out.close();\n+        }\n+\n+        try {\n+            in = new CpioArchiveInputStream(new FileInputStream(output));\n+            CpioArchiveEntry e = ((CpioArchiveInputStream) in)\n+                .getNextCPIOEntry();\n+            assertEquals(\"test1.xml\", e.getName());\n+            assertNull(((CpioArchiveInputStream) in).getNextEntry());\n+        } finally {\n+            if (in != null) {\n+                in.close();\n+            }\n+        }\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/cpio/CpioUtilTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers.cpio;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class CpioUtilTest {\n+\n+    @Test\n+    public void oldBinMagic2ByteArrayNotSwapped() {\n+        assertArrayEquals(new byte[] { (byte) 0xc7, 0x71 },\n+                          CpioUtil.long2byteArray(CpioConstants.MAGIC_OLD_BINARY,\n+                                                  2, false));\n+    }\n+\n+    @Test\n+    public void oldBinMagic2ByteArraySwapped() {\n+        assertArrayEquals(new byte[] { 0x71, (byte) 0xc7,  },\n+                          CpioUtil.long2byteArray(CpioConstants.MAGIC_OLD_BINARY,\n+                                                  2, true));\n+    }\n+\n+    @Test\n+    public void oldBinMagicFromByteArrayNotSwapped() {\n+        assertEquals(CpioConstants.MAGIC_OLD_BINARY,\n+                     CpioUtil.byteArray2long(new byte[] { (byte) 0xc7, 0x71 },\n+                                             false));\n+    }\n+\n+    @Test\n+    public void oldBinMagicFromByteArraySwapped() {\n+        assertEquals(CpioConstants.MAGIC_OLD_BINARY,\n+                     CpioUtil.byteArray2long(new byte[] { 0x71, (byte) 0xc7 },\n+                                             true));\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/archivers/dump/DumpArchiveInputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.archivers.dump;\n+\n+import java.io.FileInputStream;\n+import org.apache.commons.compress.archivers.ArchiveException;\n+import org.apache.commons.compress.AbstractTestCase;\n+\n+public class DumpArchiveInputStreamTest extends AbstractTestCase {\n+\n+    public void testNotADumpArchive() throws Exception {\n+        FileInputStream is = new FileInputStream(getFile(\"bla.zip\"));\n+        try {\n+            new DumpArchiveInputStream(is);\n+            fail(\"expected an exception\");\n+        } catch (ArchiveException ex) {\n+            // expected\n+            assertTrue(ex.getCause() instanceof ShortFileException);\n+        } finally {\n+            is.close();\n+        }\n+    }\n+\n+    public void testNotADumpArchiveButBigEnough() throws Exception {\n+        FileInputStream is = new FileInputStream(getFile(\"zip64support.tar.bz2\"));\n+        try {\n+            new DumpArchiveInputStream(is);\n+            fail(\"expected an exception\");\n+        } catch (ArchiveException ex) {\n+            // expected\n+            assertTrue(ex.getCause() instanceof UnrecognizedFormatException);\n+        } finally {\n+            is.close();\n+        }\n+    }\n+\n+}\n--- a/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/zip/ZipFileTest.java\n package org.apache.commons.compress.archivers.zip;\n \n import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n import java.net.URI;\n import java.net.URL;\n import java.util.ArrayList;\n         }\n     }\n \n+    public void testReadingOfStoredEntry() throws Exception {\n+        File f = File.createTempFile(\"commons-compress-zipfiletest\", \".zip\");\n+        f.deleteOnExit();\n+        OutputStream o = null;\n+        InputStream i = null;\n+        try {\n+            o = new FileOutputStream(f);\n+            ZipArchiveOutputStream zo = new ZipArchiveOutputStream(o);\n+            ZipArchiveEntry ze = new ZipArchiveEntry(\"foo\");\n+            ze.setMethod(ZipArchiveEntry.STORED);\n+            ze.setSize(4);\n+            ze.setCrc(0xb63cfbcdl);\n+            zo.putArchiveEntry(ze);\n+            zo.write(new byte[] { 1, 2, 3, 4 });\n+            zo.closeArchiveEntry();\n+            zo.close();\n+            o.close();\n+            o  = null;\n+\n+            zf = new ZipFile(f);\n+            ze = zf.getEntry(\"foo\");\n+            assertNotNull(ze);\n+            i = zf.getInputStream(ze);\n+            byte[] b = new byte[4];\n+            assertEquals(4, i.read(b));\n+            assertEquals(-1, i.read());\n+        } finally {\n+            if (o != null) {\n+                o.close();\n+            }\n+            if (i != null) {\n+                i.close();\n+            }\n+            f.delete();\n+        }\n+    }\n+\n     /*\n      * ordertest.zip has been handcrafted.\n      *", "timestamp": 1319718773, "metainfo": ""}