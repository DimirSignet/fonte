{"sha": "67097df60b50ba705a04b9fe1f1516ed7559cb07", "log": "Added capability to delete temp files to ScatterGatherBackingStore  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/FileBasedScatterGatherBackingStore.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/FileBasedScatterGatherBackingStore.java\n     }\n \n     @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n-    public void close() throws IOException {\n+    public void closeForWriting() throws IOException {\n         os.close();\n     }\n \n     public void writeOut(byte[] data, int offset, int length) throws IOException {\n         os.write(data, offset, length);\n     }\n+\n+    public void close() throws IOException {\n+        target.delete();\n+    }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.zip.Deflater;\n+\n+import static java.util.Collections.synchronizedList;\n \n /**\n  * Creates a zip in parallel by using multiple threadlocal #ScatterZipOutputStream instances.\n  * #ZipArchiveOutputStream *before* calling #writeTo on this class.</p>\n  */\n public class ParallelScatterZipCreator {\n-    private List<ScatterZipOutputStream> streams = Collections.synchronizedList(new ArrayList<ScatterZipOutputStream>());\n+    private List<ScatterZipOutputStream> streams = synchronizedList(new ArrayList<ScatterZipOutputStream>());\n+    private List<ScatterGatherBackingStore> backingStores = synchronizedList(new ArrayList<ScatterGatherBackingStore>());\n     private final ExecutorService es;\n     private final ScatterGatherBackingStoreSupplier defaultSupplier;\n \n         }\n     }\n \n-    public static ScatterZipOutputStream createDeferred(ScatterGatherBackingStoreSupplier scatterGatherBackingStoreSupplier)\n+    private ScatterZipOutputStream createDeferred(ScatterGatherBackingStoreSupplier scatterGatherBackingStoreSupplier)\n             throws IOException {\n         ScatterGatherBackingStore bs = scatterGatherBackingStoreSupplier.get();\n+        backingStores.add( bs);\n         StreamCompressor sc = StreamCompressor.create(Deflater.DEFAULT_COMPRESSION, bs);\n         return new ScatterZipOutputStream(bs, sc);\n     }\n-\n \n     private ThreadLocal<ScatterZipOutputStream> tlScatterStreams = new ThreadLocal<ScatterZipOutputStream>() {\n         @Override\n         }\n \n         scatterDoneAt = System.currentTimeMillis();\n-        // Maybe close ScatterZipOS. We should do something to get rid of tempfiles.\n+\n+        for (ScatterGatherBackingStore backingStore : backingStores) {\n+            backingStore.close();\n+        }\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStore.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStore.java\n import java.io.InputStream;\n \n /**\n- * Abstraction over a scatter-output zip archives can be written to\n- * with a method to gather all content from an InputStream later on.\n+ * <p></p>Abstraction over a scatter-output zip archives can be written to\n+ * with a method to gather all content from an InputStream later on.</p>\n+ *\n+ * <p>It is the responsibility of the allocator of an instance of this class\n+ * to close this. Closing it should clear off any allocated structures\n+ * and preferably delete files.</p>\n  *\n  * @since 1.10\n  */\n      * @param length the amount of data to write\n      * @throws IOException when something fails\n      */\n-    void writeOut(byte[] data, int offset, int length) throws IOException ;\n+    void writeOut(byte[] data, int offset, int length) throws IOException;\n+\n+    /**\n+     * Closes this backing store for further writing.\n+     */\n+    void closeForWriting() throws IOException;\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n      * @throws IOException If writing fails\n      */\n     public void writeTo(ZipArchiveOutputStream target) throws IOException {\n-        backingStore.close();\n+        backingStore.closeForWriting();\n         InputStream data = backingStore.getInputStream();\n         for (CompressedEntry compressedEntry : items) {\n             final BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize);", "timestamp": 1420238274, "metainfo": ""}