{"sha": "b9153cab6127e4f6d2f1e89805c43f4fcbee8fe7", "log": "[COMPRESS-362] Bullet-proof code using try-with-resources statements.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/pack200/Pack200Utils.java\n      * @throws IOException if reading or writing fails\n      */\n     public static void normalize(final File from, final File to, Map<String, String> props)\n-        throws IOException {\n+            throws IOException {\n         if (props == null) {\n             props = new HashMap<>();\n         }\n         props.put(Pack200.Packer.SEGMENT_LIMIT, \"-1\");\n-        final File f = File.createTempFile(\"commons-compress\", \"pack200normalize\");\n-        f.deleteOnExit();\n+        final File tempFile = File.createTempFile(\"commons-compress\", \"pack200normalize\");\n         try {\n-            OutputStream os = new FileOutputStream(f);\n-            JarFile j = null;\n-            try {\n-                final Pack200.Packer p = Pack200.newPacker();\n-                p.properties().putAll(props);\n-                p.pack(j = new JarFile(from), os);\n-                j = null;\n-                os.close();\n-                os = null;\n-\n-                final Pack200.Unpacker u = Pack200.newUnpacker();\n-                os = new JarOutputStream(new FileOutputStream(to));\n-                u.unpack(f, (JarOutputStream) os);\n-            } finally {\n-                if (j != null) {\n-                    j.close();\n-                }\n-                if (os != null) {\n-                    os.close();\n-                }\n+            try (FileOutputStream fos = new FileOutputStream(tempFile);\n+                    JarFile jarFile = new JarFile(from)) {\n+                final Pack200.Packer packer = Pack200.newPacker();\n+                packer.properties().putAll(props);\n+                packer.pack(jarFile, fos);\n+            }\n+            final Pack200.Unpacker unpacker = Pack200.newUnpacker();\n+            try (JarOutputStream jos = new JarOutputStream(new FileOutputStream(to))) {\n+                unpacker.unpack(tempFile, jos);\n             }\n         } finally {\n-            f.delete();\n+            if (!tempFile.delete()) {\n+                tempFile.deleteOnExit();\n+            }\n         }\n     }\n }", "timestamp": 1481268669, "metainfo": ""}