{"sha": "22252ae11d08dcb02a89b295e227e9a5a39e0d67", "log": "DataInput and DataOutput versions", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/ByteUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ByteUtils.java\n \n package org.apache.commons.compress.utils;\n \n+import java.io.DataInput;\n+import java.io.DataOutput;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n     }\n \n     /**\n+     * Reads the given number of bytes from the given input as little endian long.\n+     * @param in the input to read from\n+     * @param length the number of bytes representing the value\n+     * @throws IllegalArgumentException if len is bigger than eight\n+     * @throws IOException if reading fails or the stream doesn't\n+     * contain the given number of bytes anymore\n+     */\n+    public static long fromLittleEndian(DataInput in, int length) throws IOException {\n+        // somewhat duplicates the ByteSupplier version in order to save the creation of a wrapper object\n+        checkReadLength(length);\n+        long l = 0;\n+        for (int i = 0; i < length; i++) {\n+            long b = in.readUnsignedByte();\n+            l |= (b << (i * 8));\n+        }\n+        return l;\n+    }\n+\n+    /**\n      * Writes the given value to the given stream as a little endian\n      * array of the given length.\n      * @param out the stream to write to\n     }\n \n     /**\n+     * Writes the given value to the given stream as a little endian\n+     * array of the given length.\n+     * @param out the output to write to\n+     * @param value the value to write\n+     * @param length the number of bytes to use to represent the value\n+     * @throws IOException if writing fails\n+     */\n+    public static void toLittleEndian(DataOutput out, final long value, final int length)\n+        throws IOException {\n+        // somewhat duplicates the ByteConsumer version in order to save the creation of a wrapper object\n+        long num = value;\n+        for (int i = 0; i < length; i++) {\n+            out.write((int) (num & 0xff));\n+            num >>= 8;\n+        }\n+    }\n+\n+    /**\n      * {@link ByteSupplier} based on {@link InputStream}.\n      * @since 1.14\n      */\n--- a/src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/utils/ByteUtilsTest.java\n \n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n+import java.io.DataInput;\n+import java.io.DataInputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n import java.io.IOException;\n \n import org.junit.Test;\n     }\n \n     @Test\n+    public void fromLittleEndianFromDataInput() throws IOException {\n+        DataInput din = new DataInputStream(new ByteArrayInputStream(new byte[] { 2, 3, 4, 5 }));\n+        assertEquals(2 + 3 * 256 + 4 * 256 * 256, fromLittleEndian(din, 3));\n+    }\n+\n+    @Test\n+    public void fromLittleEndianFromDataInputUnsignedInt32() throws IOException {\n+        DataInput din = new DataInputStream(new ByteArrayInputStream(new byte[] { 2, 3, 4, (byte) 128 }));\n+        assertEquals(2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256, fromLittleEndian(din, 4));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void fromLittleEndianFromDataInputThrowsForLengthTooBig() throws IOException {\n+        DataInput din = new DataInputStream(new ByteArrayInputStream(new byte[0]));\n+        fromLittleEndian(din, 9);\n+    }\n+\n+    @Test(expected = java.io.EOFException.class)\n+    public void fromLittleEndianFromDataInputThrowsForPrematureEnd() throws IOException {\n+        DataInput din = new DataInputStream(new ByteArrayInputStream(new byte[] { 2, 3 }));\n+        fromLittleEndian(din, 3);\n+    }\n+\n+    @Test\n     public void toLittleEndianToStream() throws IOException {\n         ByteArrayOutputStream bos = new ByteArrayOutputStream();\n         toLittleEndian(bos, 2 + 3 * 256 + 4 * 256 * 256, 3);\n         assertArrayEquals(new byte[] { 2, 3, 4, (byte) 128 }, bos.toByteArray());\n     }\n \n+    @Test\n+    public void toLittleEndianToDataOutput() throws IOException {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        DataOutput dos = new DataOutputStream(bos);\n+        toLittleEndian(dos, 2 + 3 * 256 + 4 * 256 * 256, 3);\n+        bos.close();\n+        assertArrayEquals(new byte[] { 2, 3, 4 }, bos.toByteArray());\n+    }\n+\n+    @Test\n+    public void toLittleEndianToDataOutputUnsignedInt32() throws IOException {\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        DataOutput dos = new DataOutputStream(bos);\n+        toLittleEndian(dos, 2 + 3 * 256 + 4 * 256 * 256 + 128l * 256 * 256 * 256, 4);\n+        bos.close();\n+        assertArrayEquals(new byte[] { 2, 3, 4, (byte) 128 }, bos.toByteArray());\n+    }\n+\n }", "timestamp": 1485261969, "metainfo": ""}