{"sha": "de2738ae40b56965218fd3359cff20f520239f2c", "log": "COMPRESS-271 tests for prefill  and clarify AbstractLZ77CompressorInputStream javadocs", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStream.java\n  *\n  * <p>Assumes the stream consists of blocks of literal data and\n  * back-references (called copies) in any order. Of course the first\n- * block must be a literal block for the scheme to work.</p>\n+ * block must be a literal block for the scheme to work - unless the\n+ * {@link #prefill prefill} method has been used to provide initial\n+ * data that is never returned by {@link #read read} but only used for\n+ * back-references.</p>\n+ *\n+ * <p>Subclasses must override the three-arg {@link #read read} method\n+ * as the no-arg version delegates to it and the default\n+ * implementation delegates to the no-arg version, leading to infinite\n+ * mutual recursion and a {@code StackOverflowError} otherwise.</p>\n  *\n  * @since 1.14\n  */\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz77support/AbstractLZ77CompressorInputStreamTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.lz77support;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+\n+public class AbstractLZ77CompressorInputStreamTest {\n+\n+    private static class TestStream extends AbstractLZ77CompressorInputStream {\n+        private boolean literal;\n+        TestStream(InputStream in) throws IOException {\n+            super(in, 1024);\n+        }\n+        @Override\n+        public int read(final byte[] b, final int off, final int len) throws IOException {\n+            if (literal) {\n+                return readLiteral(b, off, len);\n+            }\n+            return readBackReference(b, off, len);\n+        }\n+        void literal(int len) {\n+            startLiteral(len);\n+            literal = true;\n+        }\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void cantPrefillAfterDataHasBeenRead() throws IOException {\n+        byte[] data = new byte[] { 1, 2, 3, 4 };\n+        try (TestStream s = new TestStream(new ByteArrayInputStream(data))) {\n+            s.literal(3);\n+            assertEquals(1, s.read());\n+            s.prefill(new byte[] { 1, 2, 3 });\n+        }\n+    }\n+\n+    @Test\n+    public void prefillCanBeUsedForBackReferences() throws IOException {\n+        byte[] data = new byte[] { 1, 2, 3, 4 };\n+        try (TestStream s = new TestStream(new ByteArrayInputStream(new byte[0]))) {\n+            s.prefill(data);\n+            s.startBackReference(2, 4);\n+            byte[] r = new byte[4];\n+            assertEquals(4, s.read(r));\n+            assertArrayEquals(new byte[] { 3, 4, 3, 4 }, r);\n+        }\n+    }\n+\n+    @Test\n+    public void ifPrefillExceedsWindowSizeTheLastBytesAreUsed() throws IOException {\n+        byte[] data = new byte[2048];\n+        data[2046] = 3;\n+        data[2047] = 4;\n+        try (TestStream s = new TestStream(new ByteArrayInputStream(new byte[0]))) {\n+            s.prefill(data);\n+            s.startBackReference(2, 4);\n+            byte[] r = new byte[4];\n+            assertEquals(4, s.read(r));\n+            assertArrayEquals(new byte[] { 3, 4, 3, 4 }, r);\n+        }\n+    }\n+}", "timestamp": 1486358734, "metainfo": ""}