{"sha": "efd7f9a0d30aa2dec4a039f548406573919e5ee8", "log": "COMPRESS-285 only check for XZ for Java's presence when really faced with an XZ stream  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java\n                 return new ZCompressorInputStream(in);\n             }\n \n-            if (XZUtils.isXZCompressionAvailable() &&\n-                XZCompressorInputStream.matches(signature, signatureLength)) {\n+            if (XZUtils.matches(signature, signatureLength) &&\n+                XZUtils.isXZCompressionAvailable()) {\n                 return new XZCompressorInputStream(in, decompressConcatenated);\n             }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZUtils.java\n public class XZUtils {\n \n     private static final FileNameUtil fileNameUtil;\n+    /**\n+     * XZ Header Magic Bytes begin a XZ file.\n+     *\n+     * <p>This is a copy of {@code org.tukaani.xz.XZ.HEADER_MAGIC} in\n+     * XZ for Java version 1.5.</p>\n+     */\n+    private static final byte[] HEADER_MAGIC = {\n+        (byte) 0xFD, '7', 'z', 'X', 'Z', '\\0'\n+    };\n \n     static {\n         Map<String, String> uncompressSuffix = new HashMap<String, String>();\n \n     /** Private constructor to prevent instantiation of this utility class. */\n     private XZUtils() {\n+    }\n+\n+    /**\n+     * Checks if the signature matches what is expected for a .xz file.\n+     *\n+     * <p>This is more or less a copy of the version found in {@link\n+     * XZCompressorInputStream} but doesn't depend on the presence of\n+     * XZ for Java.</p>\n+     *\n+     * @param   signature     the bytes to check\n+     * @param   length        the number of bytes to check\n+     * @return  true if signature matches the .xz magic bytes, false otherwise\n+     * @since 1.9\n+     */\n+    public static boolean matches(byte[] signature, int length) {\n+        if (length < HEADER_MAGIC.length) {\n+            return false;\n+        }\n+\n+        for (int i = 0; i < HEADER_MAGIC.length; ++i) {\n+            if (signature[i] != HEADER_MAGIC[i]) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/compress/compressors/XZUtilsTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/XZUtilsTestCase.java\n         assertEquals(\"x.wmf.y.xz\", XZUtils.getCompressedFilename(\"x.wmf.y\"));\n     }\n \n+    public void testMatches() {\n+        byte[] data = {\n+            (byte) 0xFD, '7', 'z', 'X', 'Z', '\\0'\n+        };\n+        assertFalse(XZUtils.matches(data, 5));\n+        assertTrue(XZUtils.matches(data, 6));\n+        assertTrue(XZUtils.matches(data, 7));\n+        data[5] = '0';\n+        assertFalse(XZUtils.matches(data, 6));\n+    }\n+\n }", "timestamp": 1407744201, "metainfo": ""}