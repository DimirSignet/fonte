{"sha": "4e442bb44280243f6e0e72d845fa8275d665ca84", "log": "COMPRESS-382 and COMPRESS-386 -- hard reset to expunge static parameter proposal.  Updated MemoryLimitException to include cause when it exists. Updated LZWInputStream to calculate estimated memory on maxTableSize*6 to account for int[] and byte[], byte[].", "commit": "\n--- a/src/main/java/org/apache/commons/compress/MemoryLimitException.java\n+++ b/src/main/java/org/apache/commons/compress/MemoryLimitException.java\n  */\n public class MemoryLimitException extends IOException {\n \n-    public MemoryLimitException(String message) {\n-        super(message);\n+    //long instead of int to account for overflow for corrupt files\n+    private final long memoryNeededInKb;\n+    private final int memoryLimitInKb;\n+\n+    public MemoryLimitException(long memoryNeededInKb, int memoryLimitInKb) {\n+        super(buildMessage(memoryNeededInKb, memoryLimitInKb));\n+        this.memoryNeededInKb = memoryNeededInKb;\n+        this.memoryLimitInKb = memoryLimitInKb;\n     }\n \n-    public MemoryLimitException(String message, Exception e) {\n-        super(message, e);\n+    public MemoryLimitException(long memoryNeededInKb, int memoryLimitInKb, Exception e) {\n+        super(buildMessage(memoryNeededInKb, memoryLimitInKb), e);\n+        this.memoryNeededInKb = memoryNeededInKb;\n+        this.memoryLimitInKb = memoryLimitInKb;\n+    }\n+\n+    public long getMemoryNeededInKb() {\n+        return memoryNeededInKb;\n+    }\n+\n+    public int getMemoryLimitInKb() {\n+        return memoryLimitInKb;\n+    }\n+\n+    private static String buildMessage(long memoryNeededInKb, int memoryLimitInKb) {\n+        return \"\" + memoryNeededInKb + \" kb of memory would be needed; limit was \"\n+                + memoryLimitInKb + \" kb. \" +\n+                \"If the file is not corrupt, consider increasing the memory limit.\";\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lzma/LZMACompressorInputStream.java\n             in = new LZMAInputStream(inputStream, memoryLimitInKb);\n         } catch (org.tukaani.xz.MemoryLimitException e) {\n             //convert to commons-compress exception\n-            throw new MemoryLimitException(\"exceeded calculated memory limit\", e);\n+            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lzw/LZWInputStream.java\n \n     /**\n      * Initializes the arrays based on the maximum code size.\n+     * First checks that the estimated memory usage is below memoryLimitInKb\n+     *\n      * @param maxCodeSize maximum code size\n-     * @param memoryLimitInKb maximum allowed table size in Kb\n-     * @throws MemoryLimitException if maxTableSize is > memoryLimitInKb\n+     * @param memoryLimitInKb maximum allowed estimated memory usage in Kb\n+     * @throws MemoryLimitException if estimated memory usage is greater than memoryLimitInKb\n      */\n     protected void initializeTables(final int maxCodeSize, final int memoryLimitInKb)\n             throws MemoryLimitException {\n-        final int maxTableSize = 1 << maxCodeSize;\n-        if (memoryLimitInKb > -1 && maxTableSize > memoryLimitInKb*1024) {\n-            throw new MemoryLimitException(\"Tried to allocate \"+maxTableSize +\n-                    \" but memoryLimitInKb only allows \"+(memoryLimitInKb*1024));\n+\n+        if (memoryLimitInKb > -1) {\n+            final int maxTableSize = 1 << maxCodeSize;\n+            //account for potential overflow\n+            long memoryUsageInBytes = (long) maxTableSize * 6;//(4 (prefixes) + 1 (characters) +1 (outputStack))\n+            long memoryUsageInKb = memoryUsageInBytes >> 10;\n+\n+            if (memoryUsageInKb > (long)memoryLimitInKb) {\n+                throw new MemoryLimitException(memoryUsageInKb, memoryLimitInKb);\n+            }\n         }\n         initializeTables(maxCodeSize);\n     }\n--- a/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/xz/XZCompressorInputStream.java\n      * @since 1.14\n      */\n     public XZCompressorInputStream(InputStream inputStream,\n-                                   boolean decompressConcatenated, int memoryLimitInKb)\n+                                   boolean decompressConcatenated, final int memoryLimitInKb)\n             throws IOException {\n         if (decompressConcatenated) {\n             in = new XZInputStream(inputStream, memoryLimitInKb);\n             count(ret == -1 ? -1 : 1);\n             return ret;\n         } catch (org.tukaani.xz.MemoryLimitException e) {\n-            throw new MemoryLimitException(\"Exceeded memory limit\", e);\n+            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);\n         }\n     }\n \n             return ret;\n         } catch (org.tukaani.xz.MemoryLimitException e) {\n             //convert to commons-compress MemoryLimtException\n-            throw new MemoryLimitException(\"Exceeded memory limit\", e);\n+            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);\n         }\n     }\n \n             return in.skip(n);\n         } catch (org.tukaani.xz.MemoryLimitException e) {\n             //convert to commons-compress MemoryLimtException\n-            throw new MemoryLimitException(\"Excedded memory limit\", e);\n+            throw new MemoryLimitException(e.getMemoryNeeded(), e.getMemoryLimit(), e);\n         }\n     }\n \n--- a/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/z/ZCompressorInputStream.java\n     private final int maxCodeSize;\n     private long totalCodesRead = 0;\n \n-    public ZCompressorInputStream(final InputStream inputStream, int memoryLimitInKb)\n+    public ZCompressorInputStream(final InputStream inputStream, final int memoryLimitInKb)\n             throws IOException {\n         super(inputStream, ByteOrder.LITTLE_ENDIAN);\n         final int firstByte = (int) in.readBits(8);\n--- a/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/DetectCompressorTestCase.java\n             return fac.createCompressorInputStream(is);\n         } catch (CompressorException e) {\n             if (e.getCause() != null && e.getCause() instanceof Exception) {\n-                //unwrap cause to reveal MemoryLimiteException\n+                //unwrap cause to reveal MemoryLimitException\n                 throw (Exception)e.getCause();\n             } else {\n                 throw e;", "timestamp": 1493124261, "metainfo": ""}