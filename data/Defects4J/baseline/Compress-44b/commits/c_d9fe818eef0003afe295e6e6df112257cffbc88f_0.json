{"sha": "d9fe818eef0003afe295e6e6df112257cffbc88f", "log": "also compare file contents, patch by Maciej N", "commit": "\n--- a/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/archivers/ZipTestCase.java\n import java.io.InputStream; \t\n import java.io.OutputStream;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Enumeration;\n import java.util.List;\n import java.util.zip.ZipEntry;\n     }\n \n     /**\n-     * Archives 2 files and unarchives it again. If the file length of result\n+     * Archives 2 files and unarchives it again. If the file contents of result\n      * and source is the same, it looks like the operations have worked\n      * @throws Exception\n      */\n     public void testZipArchiveCreationInMemory() throws Exception {\n         final File file1 = getFile(\"test1.xml\");\n         final File file2 = getFile(\"test2.xml\");\n+        final byte[] file1Contents = new byte[(int) file1.length()];\n+        final byte[] file2Contents = new byte[(int) file2.length()];\n+        IOUtils.readFully(new FileInputStream(file1), file1Contents);\n+        IOUtils.readFully(new FileInputStream(file2), file2Contents);\n+\n         SeekableInMemoryByteChannel c = new SeekableInMemoryByteChannel();\n         try (ZipArchiveOutputStream os = new ZipArchiveOutputStream(c)) {\n             os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test1.xml\"));\n-            IOUtils.copy(new FileInputStream(file1), os);\n+            os.write(file1Contents);\n             os.closeArchiveEntry();\n \n             os.putArchiveEntry(new ZipArchiveEntry(\"testdata/test2.xml\"));\n-            IOUtils.copy(new FileInputStream(file2), os);\n+            os.write(file2Contents);\n             os.closeArchiveEntry();\n         }\n \n         // Unarchive the same\n-        final List<File> results = new ArrayList<>();\n+        final List<byte[]> results = new ArrayList<>();\n \n         try (ArchiveInputStream in = new ArchiveStreamFactory()\n              .createArchiveInputStream(\"zip\", new ByteArrayInputStream(c.array()))) {\n \n-            ZipArchiveEntry entry = null;\n+            ZipArchiveEntry entry;\n             while((entry = (ZipArchiveEntry)in.getNextEntry()) != null) {\n-                final File outfile = new File(resultDir.getCanonicalPath() + \"/result/\" + entry.getName());\n-                outfile.getParentFile().mkdirs();\n-                try (OutputStream o = new FileOutputStream(outfile)) {\n-                    IOUtils.copy(in, o);\n-                }\n-                results.add(outfile);\n-            }\n-        }\n-\n-        assertEquals(results.size(), 2);\n-        File result = results.get(0);\n-        assertEquals(file1.length(), result.length());\n-        result = results.get(1);\n-        assertEquals(file2.length(), result.length());\n+                byte[] result = new byte[(int) entry.getSize()];\n+                IOUtils.readFully(in, result);\n+                results.add(result);\n+            }\n+        }\n+\n+        assertArrayEquals(results.get(0), file1Contents);\n+        assertArrayEquals(results.get(1), file2Contents);\n     }\n \n     /**", "timestamp": 1476538974, "metainfo": ""}