{"sha": "7b7f490c4597c77cce72a95a4447c5bc971bf49d", "log": "Formatting.", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/ar/ArArchiveInputStream.java\n      * @return the extended file name; without trailing \"/\" if present.\n      * @throws IOException if name not found or buffer not set up\n      */\n-    private String getExtendedName(final int offset) throws IOException{\n+    private String getExtendedName(final int offset) throws IOException {\n         if (namebuffer == null) {\n             throw new IOException(\"Cannot process GNU long filename as no // record was found\");\n         }\n-        for(int i=offset; i < namebuffer.length; i++){\n-            if (namebuffer[i] == '\\012' || namebuffer[i] == 0){\n-                if (namebuffer[i-1]=='/') {\n+        for (int i = offset; i < namebuffer.length; i++) {\n+            if (namebuffer[i] == '\\012' || namebuffer[i] == 0) {\n+                if (namebuffer[i - 1] == '/') {\n                     i--; // drop trailing /\n                 }\n-                return ArchiveUtils.toAsciiString(namebuffer, offset, i-offset);\n-            }\n-        }\n-        throw new IOException(\"Failed to read entry: \"+offset);\n-    }\n+                return ArchiveUtils.toAsciiString(namebuffer, offset, i - offset);\n+            }\n+        }\n+        throw new IOException(\"Failed to read entry: \" + offset);\n+    }\n+\n     private long asLong(final byte[] byteArray) {\n         return Long.parseLong(ArchiveUtils.toAsciiString(byteArray).trim());\n     }", "timestamp": 1481312040, "metainfo": ""}