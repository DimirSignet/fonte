{"sha": "d7275a20c2784dac6ffbcabca20c6ce59954356e", "log": "Rename local variable to avoid hiding class field  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/arj/ArjArchiveInputStream.java\n         in.close();\n     }\n \n-    private int read8(final DataInputStream in) throws IOException {\n-        int value = in.readUnsignedByte();\n+    private int read8(final DataInputStream dataIn) throws IOException {\n+        int value = dataIn.readUnsignedByte();\n         count(1);\n         return value;\n     }\n \n-    private int read16(final DataInputStream in) throws IOException {\n-        final int value = in.readUnsignedShort();\n+    private int read16(final DataInputStream dataIn) throws IOException {\n+        final int value = dataIn.readUnsignedShort();\n         count(2);\n         return Integer.reverseBytes(value) >>> 16;\n     }\n \n-    private int read32(final DataInputStream in) throws IOException {\n-        final int value = in.readInt();\n+    private int read32(final DataInputStream dataIn) throws IOException {\n+        final int value = dataIn.readInt();\n         count(4);\n         return Integer.reverseBytes(value);\n     }\n     \n-    private String readString(final DataInputStream in) throws IOException {\n+    private String readString(final DataInputStream dataIn) throws IOException {\n         final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n         int nextByte;\n-        while ((nextByte = in.readUnsignedByte()) != 0) {\n+        while ((nextByte = dataIn.readUnsignedByte()) != 0) {\n             buffer.write(nextByte);\n         }\n         if (charsetName != null) {\n         }\n     }\n     \n-    private void readFully(final DataInputStream in, byte[] b)\n+    private void readFully(final DataInputStream dataIn, byte[] b)\n         throws IOException {\n-        in.readFully(b);\n+        dataIn.readFully(b);\n         count(b.length);\n     }\n     \n         final DataInputStream firstHeader = new DataInputStream(\n                 new ByteArrayInputStream(firstHeaderBytes));\n         \n-        final MainHeader mainHeader = new MainHeader();\n-        mainHeader.archiverVersionNumber = firstHeader.readUnsignedByte();\n-        mainHeader.minVersionToExtract = firstHeader.readUnsignedByte();\n-        mainHeader.hostOS = firstHeader.readUnsignedByte();\n-        mainHeader.arjFlags = firstHeader.readUnsignedByte();\n-        mainHeader.securityVersion = firstHeader.readUnsignedByte();\n-        mainHeader.fileType = firstHeader.readUnsignedByte();\n-        mainHeader.reserved = firstHeader.readUnsignedByte();\n-        mainHeader.dateTimeCreated = read32(firstHeader);\n-        mainHeader.dateTimeModified = read32(firstHeader);\n-        mainHeader.archiveSize = 0xffffFFFFL & read32(firstHeader);\n-        mainHeader.securityEnvelopeFilePosition = read32(firstHeader);\n-        mainHeader.fileSpecPosition = read16(firstHeader);\n-        mainHeader.securityEnvelopeLength = read16(firstHeader);\n+        final MainHeader hdr = new MainHeader();\n+        hdr.archiverVersionNumber = firstHeader.readUnsignedByte();\n+        hdr.minVersionToExtract = firstHeader.readUnsignedByte();\n+        hdr.hostOS = firstHeader.readUnsignedByte();\n+        hdr.arjFlags = firstHeader.readUnsignedByte();\n+        hdr.securityVersion = firstHeader.readUnsignedByte();\n+        hdr.fileType = firstHeader.readUnsignedByte();\n+        hdr.reserved = firstHeader.readUnsignedByte();\n+        hdr.dateTimeCreated = read32(firstHeader);\n+        hdr.dateTimeModified = read32(firstHeader);\n+        hdr.archiveSize = 0xffffFFFFL & read32(firstHeader);\n+        hdr.securityEnvelopeFilePosition = read32(firstHeader);\n+        hdr.fileSpecPosition = read16(firstHeader);\n+        hdr.securityEnvelopeLength = read16(firstHeader);\n         pushedBackBytes(20); // count has already counted them via readFully\n-        mainHeader.encryptionVersion = firstHeader.readUnsignedByte();\n-        mainHeader.lastChapter = firstHeader.readUnsignedByte();\n+        hdr.encryptionVersion = firstHeader.readUnsignedByte();\n+        hdr.lastChapter = firstHeader.readUnsignedByte();\n         \n         if (firstHeaderSize >= 33) {\n-            mainHeader.arjProtectionFactor = firstHeader.readUnsignedByte();\n-            mainHeader.arjFlags2 = firstHeader.readUnsignedByte();\n+            hdr.arjProtectionFactor = firstHeader.readUnsignedByte();\n+            hdr.arjFlags2 = firstHeader.readUnsignedByte();\n             firstHeader.readUnsignedByte();\n             firstHeader.readUnsignedByte();\n         }\n \n-        mainHeader.name = readString(basicHeader);\n-        mainHeader.comment = readString(basicHeader);\n+        hdr.name = readString(basicHeader);\n+        hdr.comment = readString(basicHeader);\n         \n         final  int extendedHeaderSize = read16(in);\n         if (extendedHeaderSize > 0) {\n-            mainHeader.extendedHeaderBytes = new byte[extendedHeaderSize];\n-            readFully(in, mainHeader.extendedHeaderBytes);\n+            hdr.extendedHeaderBytes = new byte[extendedHeaderSize];\n+            readFully(in, hdr.extendedHeaderBytes);\n             final long extendedHeaderCrc32 = 0xffffFFFFL & read32(in);\n             final CRC32 crc32 = new CRC32();\n-            crc32.update(mainHeader.extendedHeaderBytes);\n+            crc32.update(hdr.extendedHeaderBytes);\n             if (extendedHeaderCrc32 != crc32.getValue()) {\n                 throw new IOException(\"Extended header CRC32 verification failure\");\n             }\n         }\n         \n-        return mainHeader;\n+        return hdr;\n     }\n     \n     private LocalFileHeader readLocalFileHeader() throws IOException {", "timestamp": 1387565608, "metainfo": ""}