{"sha": "176cd18fb69464d036697cf7c83788eb367ae904", "log": "COMPRESS-271 create parameters class for LZ4 output and test all block sizes  ... and fix a bug uncovered by the new tests", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorOutputStream.java\n             replacement.prependLiteral(expand(toExpand, toExpand));\n         }\n         Pair splitCandidate = lastPairs.get(0);\n-        int splitLen = splitCandidate.length();\n         int stillNeeded = MIN_OFFSET_OF_LAST_BACK_REFERENCE - toExpand;\n         if (splitCandidate.hasBackReference()\n             && splitCandidate.backReferenceLength() >= MIN_BACK_REFERENCE_LENGTH + stillNeeded) {\n             pairs.add(splitCandidate.splitWithNewBackReferenceLengthOf(splitCandidate.backReferenceLength()\n                 - stillNeeded));\n         } else {\n-            replacement.prependLiteral(expand(toExpand + splitLen, splitLen));\n+            if (splitCandidate.hasBackReference()) {\n+                int brLen = splitCandidate.backReferenceLength();\n+                replacement.prependLiteral(expand(toExpand + brLen, brLen));\n+            }\n+            splitCandidate.prependTo(replacement);\n         }\n         pairs.add(replacement);\n     }\n         private int backReferenceLength() {\n             return brLength;\n         }\n-        Pair splitWithNewBackReferenceLengthOf(int newBackReferenceLength) {\n+        private void prependTo(Pair other) {\n+            Iterator<byte[]> litsBackwards = literals.descendingIterator();\n+            while (litsBackwards.hasNext()) {\n+                other.prependLiteral(litsBackwards.next());\n+            }\n+        }\n+        private Pair splitWithNewBackReferenceLengthOf(int newBackReferenceLength) {\n             Pair p = new Pair();\n             p.literals.addAll(literals);\n             p.brOffset = brOffset;\n--- a/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorOutputStream.java\n      * + block dependence\n      */\n \n-    private static final int DEFAULT_BLOCK_SIZE = 4096 * 1024;\n-    private static final List<Integer> BLOCK_SIZES = Arrays.asList(64 * 1024, 256 * 1024, 1024 * 1024,\n-        DEFAULT_BLOCK_SIZE);\n     private static final byte[] END_MARK = new byte[4];\n \n     // used in one-arg write method\n \n     private final byte[] blockData;\n     private final OutputStream out;\n+    private final Parameters params;\n     private boolean finished = false;\n     private int currentIndex = 0;\n \n     // used for frame header checksum and content checksum, if present\n     private final XXHash32 contentHash = new XXHash32();\n+\n+    public enum BlockSize {\n+        /** Block size of 64K */\n+        K64(64 * 1024, 0),\n+        /** Block size of 256K */\n+        K256(256 * 1024, 1),\n+        /** Block size of 1M */\n+        M1(1024 * 1024, 2),\n+        /** Block size of 4M */\n+        M4(1024 * 1024, 4);\n+\n+        private final int size, index;\n+        private BlockSize(int size, int index) {\n+            this.size = size;\n+            this.index = index;\n+        }\n+        int getSize() {\n+            return size;\n+        }\n+        int getIndex() {\n+            return index;\n+        }\n+    }\n+\n+    /**\n+     * Parameters of the LZ4 frame format.\n+     */\n+    public static class Parameters {\n+        private final BlockSize blockSize;\n+\n+        /**\n+         * The default parameters of 4M block size, enabled content\n+         * checksum, disabled block checksums and independent blocks.\n+         *\n+         * <p>This matches the defaults of the lz4 command line utility.</p>\n+         */\n+        public static Parameters DEFAULT = new Parameters(BlockSize.M4);\n+\n+        /**\n+         * Sets up custom parameters for the LZ4 stream.\n+         * @param blockSize the size of a single block.\n+         */\n+        public Parameters(BlockSize blockSize) {\n+            this.blockSize = blockSize;\n+        }\n+        @Override\n+        public String toString() {\n+            return \"LZ4 Parameters with BlockSize \" + blockSize;\n+        }\n+    }\n \n     /**\n      * Constructs a new output stream that compresses data using the\n      * @throws IOException if writing the signature fails\n      */\n     public FramedLZ4CompressorOutputStream(OutputStream out) throws IOException {\n-        this(out, DEFAULT_BLOCK_SIZE);\n+        this(out, Parameters.DEFAULT);\n     }\n \n     /**\n      * Constructs a new output stream that compresses data using the\n      * LZ4 frame format using the given block size.\n      * @param out the OutputStream to which to write the compressed data\n-     * @param blockSize block size, one of 64 KB, 256 KB, 1 MB or 4 MB.\n+     * @param params the parameters to use\n      * @throws IOException if writing the signature fails\n-     * @throws IllegalArgumentException if the block size is not supported\n-     */\n-    public FramedLZ4CompressorOutputStream(OutputStream out, int blockSize) throws IOException {\n-        if (!BLOCK_SIZES.contains(blockSize)) {\n-            throw new IllegalArgumentException(\"Unsupported block size\");\n-        }\n-        blockData = new byte[blockSize];\n+     */\n+    public FramedLZ4CompressorOutputStream(OutputStream out, Parameters params) throws IOException {\n+        this.params = params;\n+        blockData = new byte[params.blockSize.getSize()];\n         this.out = out;\n         out.write(FramedLZ4CompressorInputStream.LZ4_SIGNATURE);\n         writeFrameDescriptor();\n             | FramedLZ4CompressorInputStream.BLOCK_INDEPENDENCE_MASK;\n         out.write(flags);\n         contentHash.update(flags);\n-        int bd = BLOCK_SIZES.indexOf(blockData.length) << 4;\n+        int bd = params.blockSize.getIndex() << 4;\n         out.write(bd);\n         contentHash.update(bd);\n         out.write((int) ((contentHash.getValue() >> 8) & 0xff));\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/BlockLZ4CompressorRoundtripTest.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n-import java.io.InputStream;\n import java.io.IOException;\n-import java.io.OutputStream;\n-import java.util.Random;\n import org.apache.commons.compress.AbstractTestCase;\n-import org.apache.commons.compress.compressors.CompressorStreamFactory;\n-import org.apache.commons.compress.compressors.lz77support.Parameters;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.Assert;\n import org.junit.Test;\n         roundTripTest(\"COMPRESS-256.7z\");\n     }\n \n-    @Test\n-    public void roundtripViaFactory() throws Exception {\n-        File input = getFile(\"bla.tar\");\n-        long start = System.currentTimeMillis();\n-        final File outputSz = new File(dir, input.getName() + \".block.lz4\");\n-        try (FileInputStream is = new FileInputStream(input);\n-             FileOutputStream os = new FileOutputStream(outputSz);\n-             OutputStream los = new CompressorStreamFactory()\n-                 .createCompressorOutputStream(CompressorStreamFactory.getLZ4Block(), os)) {\n-            IOUtils.copy(is, los);\n-        }\n-        System.err.println(input.getName() + \" written, uncompressed bytes: \" + input.length()\n-            + \", compressed bytes: \" + outputSz.length() + \" after \" + (System.currentTimeMillis() - start) + \"ms\");\n-        start = System.currentTimeMillis();\n-        try (FileInputStream is = new FileInputStream(input);\n-             InputStream sis = new CompressorStreamFactory()\n-                 .createCompressorInputStream(CompressorStreamFactory.LZ4_BLOCK, new FileInputStream(outputSz))) {\n-            byte[] expected = IOUtils.toByteArray(is);\n-            byte[] actual = IOUtils.toByteArray(sis);\n-            Assert.assertArrayEquals(expected, actual);\n-        }\n-        System.err.println(outputSz.getName() + \" read after \" + (System.currentTimeMillis() - start) + \"ms\");\n-    }\n }\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FactoryTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.commons.compress.compressors.lz4;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+\n+import org.apache.commons.compress.AbstractTestCase;\n+import org.apache.commons.compress.compressors.CompressorStreamFactory;\n+import org.apache.commons.compress.utils.IOUtils;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class FactoryTest extends AbstractTestCase {\n+\n+    @Test\n+    public void frameRoundtripViaFactory() throws Exception {\n+        roundtripViaFactory(CompressorStreamFactory.getLZ4Framed());\n+    }\n+\n+    @Test\n+    public void blockRoundtripViaFactory() throws Exception {\n+        roundtripViaFactory(CompressorStreamFactory.getLZ4Block());\n+    }\n+\n+    private void roundtripViaFactory(String format) throws Exception {\n+        File input = getFile(\"bla.tar\");\n+        long start = System.currentTimeMillis();\n+        final File outputSz = new File(dir, input.getName() + \".\" + format + \".lz4\");\n+        try (FileInputStream is = new FileInputStream(input);\n+             FileOutputStream os = new FileOutputStream(outputSz);\n+             OutputStream los = new CompressorStreamFactory().createCompressorOutputStream(format, os)) {\n+            IOUtils.copy(is, los);\n+        }\n+        System.err.println(input.getName() + \" written, uncompressed bytes: \" + input.length()\n+            + \", compressed bytes: \" + outputSz.length() + \" after \" + (System.currentTimeMillis() - start) + \"ms\");\n+        start = System.currentTimeMillis();\n+        try (FileInputStream is = new FileInputStream(input);\n+             InputStream sis = new CompressorStreamFactory()\n+                 .createCompressorInputStream(format, new FileInputStream(outputSz))) {\n+            byte[] expected = IOUtils.toByteArray(is);\n+            byte[] actual = IOUtils.toByteArray(sis);\n+            Assert.assertArrayEquals(expected, actual);\n+        }\n+        System.err.println(outputSz.getName() + \" read after \" + (System.currentTimeMillis() - start) + \"ms\");\n+    }\n+}\n--- a/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz4/FramedLZ4CompressorRoundtripTest.java\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n-import java.io.InputStream;\n import java.io.IOException;\n-import java.io.OutputStream;\n-import java.util.Random;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n import org.apache.commons.compress.AbstractTestCase;\n-import org.apache.commons.compress.compressors.CompressorStreamFactory;\n-import org.apache.commons.compress.compressors.lz77support.Parameters;\n import org.apache.commons.compress.utils.IOUtils;\n import org.junit.Assert;\n import org.junit.Test;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.junit.runner.RunWith;\n \n+@RunWith(Parameterized.class)\n public final class FramedLZ4CompressorRoundtripTest extends AbstractTestCase {\n+\n+    @Parameters(name = \"using {0}\")\n+    public static Collection<Object[]> factory() {\n+        return Arrays.asList(new Object[][] {\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K64) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.K256) },\n+            new Object[] { new FramedLZ4CompressorOutputStream.Parameters(FramedLZ4CompressorOutputStream.BlockSize.M1) },\n+            new Object[] { FramedLZ4CompressorOutputStream.Parameters.DEFAULT },\n+        });\n+    }\n+\n+    private final FramedLZ4CompressorOutputStream.Parameters params;\n+\n+    public FramedLZ4CompressorRoundtripTest(FramedLZ4CompressorOutputStream.Parameters params) {\n+        this.params = params;\n+    }\n \n     private void roundTripTest(String testFile) throws IOException {\n         File input = getFile(testFile);\n         final File outputSz = new File(dir, input.getName() + \".framed.lz4\");\n         try (FileInputStream is = new FileInputStream(input);\n              FileOutputStream os = new FileOutputStream(outputSz);\n-             FramedLZ4CompressorOutputStream los = new FramedLZ4CompressorOutputStream(os)) {\n+             FramedLZ4CompressorOutputStream los = new FramedLZ4CompressorOutputStream(os, params)) {\n             IOUtils.copy(is, los);\n         }\n         System.err.println(input.getName() + \" written, uncompressed bytes: \" + input.length()\n     // should yield decent compression\n     @Test\n     public void blaTarRoundtrip() throws IOException {\n-        try {\n         roundTripTest(\"bla.tar\");\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n     }\n \n     // yields no compression at all\n         roundTripTest(\"COMPRESS-256.7z\");\n     }\n \n-    @Test\n-    public void roundtripViaFactory() throws Exception {\n-        File input = getFile(\"bla.tar\");\n-        long start = System.currentTimeMillis();\n-        final File outputSz = new File(dir, input.getName() + \".framed.lz4\");\n-        try (FileInputStream is = new FileInputStream(input);\n-             FileOutputStream os = new FileOutputStream(outputSz);\n-             OutputStream los = new CompressorStreamFactory()\n-                 .createCompressorOutputStream(CompressorStreamFactory.getLZ4Framed(), os)) {\n-            IOUtils.copy(is, los);\n-        }\n-        System.err.println(input.getName() + \" written, uncompressed bytes: \" + input.length()\n-            + \", compressed bytes: \" + outputSz.length() + \" after \" + (System.currentTimeMillis() - start) + \"ms\");\n-        start = System.currentTimeMillis();\n-        try (FileInputStream is = new FileInputStream(input);\n-             InputStream sis = new CompressorStreamFactory()\n-                 .createCompressorInputStream(CompressorStreamFactory.LZ4_FRAMED, new FileInputStream(outputSz))) {\n-            byte[] expected = IOUtils.toByteArray(is);\n-            byte[] actual = IOUtils.toByteArray(sis);\n-            Assert.assertArrayEquals(expected, actual);\n-        }\n-        System.err.println(outputSz.getName() + \" read after \" + (System.currentTimeMillis() - start) + \"ms\");\n-    }\n }", "timestamp": 1485370165, "metainfo": ""}