{"sha": "8a6bb5623e92f3d636969488a04a516cd0ae7f36", "log": "COMPRESS-394 zip 2.0 is required when DEFLATE is used", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveOutputStream.java\n import org.apache.commons.compress.utils.IOUtils;\n \n import static org.apache.commons.compress.archivers.zip.ZipConstants.DATA_DESCRIPTOR_MIN_VERSION;\n+import static org.apache.commons.compress.archivers.zip.ZipConstants.DEFLATE_MIN_VERSION;\n import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;\n import static org.apache.commons.compress.archivers.zip.ZipConstants.INITIAL_VERSION;\n import static org.apache.commons.compress.archivers.zip.ZipConstants.SHORT;\n                 // do some cleanup:\n                 // * rewrite version needed to extract\n                 channel.position(entry.localDataStart  - 5 * SHORT);\n-                writeOut(ZipShort.getBytes(INITIAL_VERSION));\n+                writeOut(ZipShort.getBytes(versionNeededToExtractMethod(entry.entry.getMethod())));\n \n                 // * remove ZIP64 extra so it doesn't get written\n                 //   to the central directory\n         final int zipMethod = ze.getMethod();\n \n         if (phased &&  !isZip64Required(entry.entry, zip64Mode)){\n-            putShort(INITIAL_VERSION, buf, LFH_VERSION_NEEDED_OFFSET);\n+            putShort(versionNeededToExtractMethod(zipMethod), buf, LFH_VERSION_NEEDED_OFFSET);\n         } else {\n             putShort(versionNeededToExtract(zipMethod, hasZip64Extra(ze)), buf, LFH_VERSION_NEEDED_OFFSET);\n         }\n         }\n         // requires version 2 as we are going to store length info\n         // in the data descriptor\n-        return (isDeflatedToOutputStream(zipMethod)) ?\n-                DATA_DESCRIPTOR_MIN_VERSION :\n-                INITIAL_VERSION;\n+        return isDeflatedToOutputStream(zipMethod)\n+            ? DATA_DESCRIPTOR_MIN_VERSION\n+            : versionNeededToExtractMethod(zipMethod);\n     }\n \n     private boolean isDeflatedToOutputStream(final int zipMethod) {\n         return zipMethod == DEFLATED && channel == null;\n     }\n \n+    private int versionNeededToExtractMethod(int zipMethod) {\n+        return zipMethod == DEFLATED ? DEFLATE_MIN_VERSION : INITIAL_VERSION;\n+    }\n \n     /**\n      * Creates a new zip entry taking some information from the given\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipConstants.java\n     /** Initial ZIP specification version */\n     static final int INITIAL_VERSION = 10;\n \n+    /**\n+     * ZIP specification version that introduced DEFLATE compression method.\n+     * @since 1.15\n+     */\n+    static final int DEFLATE_MIN_VERSION = 20;\n+\n     /** ZIP specification version that introduced data descriptor method */\n     static final int DATA_DESCRIPTOR_MIN_VERSION = 20;\n ", "timestamp": 1494953476, "metainfo": ""}