{"sha": "bf88f6dbb380f6b340404ab5d2785a90ef7b3324", "log": "false positives", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ParallelScatterZipCreator.java\n     private ScatterZipOutputStream createDeferred(final ScatterGatherBackingStoreSupplier scatterGatherBackingStoreSupplier)\n             throws IOException {\n         final ScatterGatherBackingStore bs = scatterGatherBackingStoreSupplier.get();\n-        final StreamCompressor sc = StreamCompressor.create(Deflater.DEFAULT_COMPRESSION, bs);\n+        // lifecycle is bound to the ScatterZipOutputStream returned\n+        final StreamCompressor sc = StreamCompressor.create(Deflater.DEFAULT_COMPRESSION, bs); //NOSONAR\n         return new ScatterZipOutputStream(bs, sc);\n     }\n \n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n      */\n     public static ScatterZipOutputStream fileBased(final File file, final int compressionLevel) throws FileNotFoundException {\n         final ScatterGatherBackingStore bs = new FileBasedScatterGatherBackingStore(file);\n-        final StreamCompressor sc = StreamCompressor.create(compressionLevel, bs);\n+        // lifecycle is bound to the ScatterZipOutputStream returned\n+        final StreamCompressor sc = StreamCompressor.create(compressionLevel, bs); //NOSONAR\n         return new ScatterZipOutputStream(bs, sc);\n     }\n }", "timestamp": 1482246580, "metainfo": ""}