{"sha": "6cc5a2f13e5214a766a328648afc80dfefa5f9aa", "log": "take advantage of IOException accepting cause in constructor", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/AES256SHA256Decoder.java\n                     try {\n                         digest = MessageDigest.getInstance(\"SHA-256\");\n                     } catch (NoSuchAlgorithmException noSuchAlgorithmException) {\n-                        IOException ioe = new IOException(\"SHA-256 is unsupported by your Java implementation\");\n-                        ioe.initCause(noSuchAlgorithmException);\n-                        throw ioe;\n-                        // TODO: simplify when Compress requires Java 1.6                \n-//                      throw new IOException(\"SHA-256 is unsupported by your Java implementation\",\n-//                              noSuchAlgorithmException);\n+                        throw new IOException(\"SHA-256 is unsupported by your Java implementation\",\n+                            noSuchAlgorithmException);\n                     }\n                     final byte[] extra = new byte[8];\n                     for (long j = 0; j < (1L << numCyclesPower); j++) {\n                     isInitialized = true;\n                     return cipherInputStream;\n                 } catch (GeneralSecurityException generalSecurityException) {\n-                    IOException ioe = new IOException(\"Decryption error \" +\n-                                                      \"(do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)\");\n-                    ioe.initCause(generalSecurityException);\n-                    throw ioe;\n-                    // TODO: simplify when Compress requires Java 1.6                \n-//                  throw new IOException(\"Decryption error \" +\n-//                          \"(do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)\",\n-//                          generalSecurityException);\n+                    throw new IOException(\"Decryption error \" +\n+                        \"(do you have the JCE Unlimited Strength Jurisdiction Policy Files installed?)\",\n+                        generalSecurityException);\n                     }\n             }\n                 \n--- a/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/sevenz/Coders.java\n             try {\n                 return opts.getInputStream(in);\n             } catch (AssertionError e) {\n-                IOException ex = new IOException(\"BCJ filter used in \" + archiveName\n-                                                 + \" needs XZ for Java > 1.4 - see \"\n-                                                 + \"http://commons.apache.org/proper/commons-compress/limitations.html#7Z\");\n-                ex.initCause(e);\n-                throw ex;\n+                throw new IOException(\"BCJ filter used in \" + archiveName\n+                                      + \" needs XZ for Java > 1.4 - see \"\n+                                      + \"http://commons.apache.org/proper/commons-compress/limitations.html#7Z\",\n+                                      e);\n             }\n         }\n         @Override\n--- a/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java\n         try {\n             currEntry = new TarArchiveEntry(headerBuf, zipEncoding);\n         } catch (IllegalArgumentException e) {\n-            IOException ioe = new IOException(\"Error detected parsing the header\");\n-            ioe.initCause(e);\n-            throw ioe;\n+            throw new IOException(\"Error detected parsing the header\", e);\n         }\n \n         entryOffset = 0;\n--- a/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n+++ b/src/test/java/org/apache/commons/compress/AbstractTestCase.java\n         try {\n             uri = url.toURI();\n         } catch (java.net.URISyntaxException ex) {\n-//          throw new IOException(ex); // JDK 1.6+\n-            IOException ioe = new IOException();\n-            ioe.initCause(ex);\n-            throw ioe;\n+            throw new IOException(ex);\n         }\n         return new File(uri);\n     }", "timestamp": 1460220021, "metainfo": ""}