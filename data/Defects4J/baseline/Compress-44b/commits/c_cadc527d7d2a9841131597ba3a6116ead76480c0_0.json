{"sha": "cadc527d7d2a9841131597ba3a6116ead76480c0", "log": "work around unexpected result from Inflater#getBytesRead  ", "commit": "\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java\n import static org.apache.commons.compress.archivers.zip.ZipConstants.DWORD;\n import static org.apache.commons.compress.archivers.zip.ZipConstants.SHORT;\n import static org.apache.commons.compress.archivers.zip.ZipConstants.WORD;\n+import static org.apache.commons.compress.archivers.zip.ZipConstants.ZIP64_MAGIC;\n \n /**\n  * Implements an input stream that can read Zip archives.\n       file name length                2 bytes\n       extra field length              2 bytes\n     */\n+\n+    private static final long TWO_EXP_32 = ZIP64_MAGIC + 1;\n \n     public ZipArchiveInputStream(InputStream inputStream) {\n         this(inputStream, ZipEncodingHelper.UTF8, true);\n             long inB;\n             if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED) {\n                 inB = inf.getBytesRead();\n+                /* for Java < Java7 the getBytes* methods in\n+                 * Inflater/Deflater seem to return unsigned ints\n+                 * rather than longs that start over with 0 at 2^32.\n+                 *\n+                 * The stream knows how many bytes it has read, but\n+                 * not how many the Inflater actually consumed - it\n+                 * should be between the total number of bytes read\n+                 * for the entry and the total number minus the last\n+                 * read operation.  Here we just try to make the value\n+                 * close enough to the bytes we've read by assuming\n+                 * the number of bytes consumed must be smaller than\n+                 * (or equal to) the number of bytes read but not\n+                 * smaller by more than 2^32.\n+                 */\n+                if (current.bytesReadFromStream >= TWO_EXP_32) {\n+                    while (inB + TWO_EXP_32 <= current.bytesReadFromStream) {\n+                        inB += TWO_EXP_32;\n+                    }\n+                }\n             } else {\n                 inB = current.bytesRead;\n             }", "timestamp": 1312382024, "metainfo": ""}