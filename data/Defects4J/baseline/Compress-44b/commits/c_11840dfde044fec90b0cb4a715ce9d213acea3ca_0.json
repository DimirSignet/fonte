{"sha": "11840dfde044fec90b0cb4a715ce9d213acea3ca", "log": "COMPRESS-351 restrict length of sanitized entry name", "commit": "\n--- a/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n+++ b/src/main/java/org/apache/commons/compress/utils/ArchiveUtils.java\n package org.apache.commons.compress.utils;\n \n import java.io.UnsupportedEncodingException;\n+import java.util.Arrays;\n \n import org.apache.commons.compress.archivers.ArchiveEntry;\n \n  * Generic Archive utilities\n  */\n public class ArchiveUtils {\n+\n+    private static final int MAX_SANITIZED_NAME_LENGTH = 255;\n \n     /** Private constructor to prevent instantiation of this utility class. */\n     private ArchiveUtils(){\n     /**\n      * Returns a \"sanitized\" version of the string given as arguments,\n      * where sanitized means non-printable characters have been\n-     * replaced with a question mark.\n+     * replaced with a question mark and the outcome is not longer\n+     * than 255 chars.\n      *\n      * <p>This method is used to clean up file names when they are\n      * used in exception messages as they may end up in log files or\n      * @since Compress 1.12\n      */\n     public static String sanitize(String s) {\n-        final char[] chars = s.toCharArray();\n+        final char[] cs = s.toCharArray();\n+        final char[] chars = cs.length <= MAX_SANITIZED_NAME_LENGTH ? cs : Arrays.copyOf(cs, MAX_SANITIZED_NAME_LENGTH);\n+        if (cs.length > MAX_SANITIZED_NAME_LENGTH) {\n+            for (int i = MAX_SANITIZED_NAME_LENGTH - 3; i < MAX_SANITIZED_NAME_LENGTH; i++) {\n+                chars[i] = '.';\n+            }\n+        }\n         final int len = chars.length;\n         final StringBuilder sb = new StringBuilder();\n         for (int i = 0; i < len; i++) {\n--- a/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n+++ b/src/test/java/org/apache/commons/compress/ArchiveUtilsTest.java\n         asciiToByteAndBackFail(\"\\u8025\");\n     }\n \n+    @Test\n+    public void sanitizeShortensString() {\n+        String input = \"012345678901234567890123456789012345678901234567890123456789\"\n+            + \"012345678901234567890123456789012345678901234567890123456789\"\n+            + \"012345678901234567890123456789012345678901234567890123456789\"\n+            + \"012345678901234567890123456789012345678901234567890123456789\"\n+            + \"012345678901234567890123456789012345678901234567890123456789\";\n+        String expected = \"012345678901234567890123456789012345678901234567890123456789\"\n+            + \"012345678901234567890123456789012345678901234567890123456789\"\n+            + \"012345678901234567890123456789012345678901234567890123456789\"\n+            + \"012345678901234567890123456789012345678901234567890123456789\"\n+            + \"012345678901...\";\n+        assertEquals(expected, ArchiveUtils.sanitize(input));\n+    }\n+\n     private void asciiToByteAndBackOK(final String inputString) {\n         assertEquals(inputString, ArchiveUtils.toAsciiString(ArchiveUtils.toAsciiBytes(inputString)));\n     }", "timestamp": 1465316628, "metainfo": ""}