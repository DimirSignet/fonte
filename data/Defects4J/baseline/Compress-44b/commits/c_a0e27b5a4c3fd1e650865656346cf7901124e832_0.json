{"sha": "a0e27b5a4c3fd1e650865656346cf7901124e832", "log": "add support for prefill in LZ77 Compressor", "commit": "\n--- a/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n+++ b/src/main/java/org/apache/commons/compress/compressors/lz77support/LZ77Compressor.java\n             flushLiteralBlock();\n         }\n         callback.accept(THE_EOD);\n+    }\n+\n+    /**\n+     * Adds some initial data to fill the window with.\n+     *\n+     * <p>This is used if the stream has been cut into blocks and\n+     * back-references of one block may refer to data of the previous\n+     * block(s). One such example is the LZ4 frame format using block\n+     * dependency.</p>\n+     *\n+     * @param data the data to fill the window with.\n+     * @throws IllegalStateException if the compressor has already started to accept data\n+     */\n+    public void prefill(byte[] data) {\n+        if (currentPosition != 0 || lookahead != 0) {\n+            throw new IllegalStateException(\"the compressor has already started to accept data, can't prefill anymore\");\n+        }\n+        final int len = Math.min(params.getWindowSize(), data.length);\n+        System.arraycopy(data, data.length - len, window, 0, len);\n+        if (len >= NUMBER_OF_BYTES_IN_HASH) {\n+            initialize();\n+            final int stop = len - NUMBER_OF_BYTES_IN_HASH + 1;\n+            for (int i = 0; i < stop; i++) {\n+                insertString(i);\n+            }\n+            missedInserts = NUMBER_OF_BYTES_IN_HASH - 1;\n+        } else {\n+            missedInserts = len;\n+        }\n+        blockStart = currentPosition = len;\n     }\n \n     // we use a 15 bit hashcode as calculated in updateHash\n \n     /**\n      * Inserts the current three byte sequence into the dictionary and\n-     * returns the previous previous head of the hash-chain.\n+     * returns the previous head of the hash-chain.\n      *\n      * <p>Updates <code>insertHash</code> and <code>prev</code> as a\n      * side effect.</p>\n--- a/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n+++ b/src/test/java/org/apache/commons/compress/compressors/lz77support/LZ77CompressorTest.java\n         assertLiteralBlock(\".\", blocks.get(19));\n     }\n \n+    @Test\n+    public void blaExampleWithPrefill() throws IOException {\n+        final List<LZ77Compressor.Block> blocks = new ArrayList<>();\n+        LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {\n+                @Override\n+                public void accept(LZ77Compressor.Block block) {\n+                    //System.err.println(block);\n+                    if (block instanceof LZ77Compressor.LiteralBlock) {\n+                        // replace with a real copy of data so tests\n+                        // can see the results as they've been when\n+                        // the callback has been called\n+                        LZ77Compressor.LiteralBlock b = (LZ77Compressor.LiteralBlock) block;\n+                        int len = b.getLength();\n+                        block = new LZ77Compressor.LiteralBlock(\n+                            Arrays.copyOfRange(b.getData(), b.getOffset(), b.getOffset() + len),\n+                            0, len);\n+                    }\n+                    blocks.add(block);\n+                }\n+            });\n+        c.prefill(Arrays.copyOfRange(BLA, 0, 6));\n+        c.compress(Arrays.copyOfRange(BLA, 6, BLA.length));\n+        c.finish();\n+        assertSize(3, blocks);\n+        assertBackReference(5, 18, blocks.get(0));\n+        assertLiteralBlock(\"!\", blocks.get(1));\n+    }\n+\n+    @Test\n+    public void blaExampleWithShortPrefill() throws IOException {\n+        final List<LZ77Compressor.Block> blocks = new ArrayList<>();\n+        LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {\n+                @Override\n+                public void accept(LZ77Compressor.Block block) {\n+                    //System.err.println(block);\n+                    if (block instanceof LZ77Compressor.LiteralBlock) {\n+                        // replace with a real copy of data so tests\n+                        // can see the results as they've been when\n+                        // the callback has been called\n+                        LZ77Compressor.LiteralBlock b = (LZ77Compressor.LiteralBlock) block;\n+                        int len = b.getLength();\n+                        block = new LZ77Compressor.LiteralBlock(\n+                            Arrays.copyOfRange(b.getData(), b.getOffset(), b.getOffset() + len),\n+                            0, len);\n+                    }\n+                    blocks.add(block);\n+                }\n+            });\n+        c.prefill(Arrays.copyOfRange(BLA, 0, 2));\n+        c.compress(Arrays.copyOfRange(BLA, 2, BLA.length));\n+        c.finish();\n+        assertSize(4, blocks);\n+        assertLiteralBlock(\"ah b\", blocks.get(0));\n+        assertBackReference(5, 18, blocks.get(1));\n+        assertLiteralBlock(\"!\", blocks.get(2));\n+    }\n+\n+    @Test\n+    public void blaExampleWithPrefillBiggerThanWindowSize() throws IOException {\n+        final List<LZ77Compressor.Block> blocks = new ArrayList<>();\n+        LZ77Compressor c = new LZ77Compressor(new Parameters(4), new LZ77Compressor.Callback() {\n+                @Override\n+                public void accept(LZ77Compressor.Block block) {\n+                    //System.err.println(block);\n+                    if (block instanceof LZ77Compressor.LiteralBlock) {\n+                        // replace with a real copy of data so tests\n+                        // can see the results as they've been when\n+                        // the callback has been called\n+                        LZ77Compressor.LiteralBlock b = (LZ77Compressor.LiteralBlock) block;\n+                        int len = b.getLength();\n+                        block = new LZ77Compressor.LiteralBlock(\n+                            Arrays.copyOfRange(b.getData(), b.getOffset(), b.getOffset() + len),\n+                            0, len);\n+                    }\n+                    blocks.add(block);\n+                }\n+            });\n+        c.prefill(Arrays.copyOfRange(BLA, 0, 6));\n+        c.compress(Arrays.copyOfRange(BLA, 6, BLA.length));\n+        c.finish();\n+        assertSize(6, blocks);\n+        assertLiteralBlock(\"lah \", blocks.get(0));\n+        assertLiteralBlock(\"blah\", blocks.get(1));\n+        assertLiteralBlock(\" bla\", blocks.get(2));\n+        assertLiteralBlock(\"h bl\", blocks.get(3));\n+        assertLiteralBlock(\"ah!\", blocks.get(4));\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void cantPrefillTwice() {\n+        LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {\n+                @Override\n+                public void accept(LZ77Compressor.Block block) {\n+                }\n+            });\n+        c.prefill(Arrays.copyOfRange(BLA, 0, 2));\n+        c.prefill(Arrays.copyOfRange(BLA, 2, 4));\n+    }\n+\n+    @Test(expected = IllegalStateException.class)\n+    public void cantPrefillAfterCompress() throws IOException {\n+        LZ77Compressor c = new LZ77Compressor(new Parameters(128), new LZ77Compressor.Callback() {\n+                @Override\n+                public void accept(LZ77Compressor.Block block) {\n+                }\n+            });\n+        c.compress(Arrays.copyOfRange(BLA, 0, 2));\n+        c.prefill(Arrays.copyOfRange(BLA, 2, 4));\n+    }\n+\n     private static final void assertSize(int expectedSize, List<LZ77Compressor.Block> blocks) {\n         assertEquals(expectedSize, blocks.size());\n         assertEquals(LZ77Compressor.EOD.class, blocks.get(expectedSize - 1).getClass());", "timestamp": 1486493312, "metainfo": ""}