{"sha": "efb1ca8041fd3aca48a12ee2fe87d64cdf91410c", "log": "extract ZIP-scatter backing store responsibility into an interface  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/FileBasedScatterGatherBackingStore.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * ScatterGatherBackingStore that is backed by a file.\n+ *\n+ * @since 1.10\n+ */\n+class FileBasedScatterGatherBackingStore implements ScatterGatherBackingStore {\n+    private final File target;\n+    private final FileOutputStream os;\n+\n+    FileBasedScatterGatherBackingStore(File target) throws FileNotFoundException {\n+        this.target = target;\n+        os = new FileOutputStream(target);\n+    }\n+\n+    public InputStream getInputStream() throws IOException {\n+        return new FileInputStream(target);\n+    }\n+\n+    @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n+    public void close() throws IOException {\n+        os.close();\n+    }\n+\n+    public void writeOut(byte[] data, int offset, int length) throws IOException {\n+        os.write(data, offset, length);\n+    }\n+}\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterGatherBackingStore.java\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package org.apache.commons.compress.archivers.zip;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * Abstraction over a scatter-output zip archives can be written to\n+ * with a method to gather all content from an InputStream later on.\n+ *\n+ * @since 1.10\n+ */\n+interface ScatterGatherBackingStore extends Closeable {\n+\n+    /**\n+     * An input stream that contains the scattered payload\n+     *\n+     * @return An InputStream, should be closed by the caller of this method.\n+     * @throws IOException when something fails\n+     */\n+    InputStream getInputStream() throws IOException;\n+\n+    /**\n+     * Writes a piece of payload.\n+     *\n+     * @param data the data to write\n+     * @param offset offset inside data to start writing from\n+     * @param length the amount of data to write\n+     * @throws IOException when something fails\n+     */\n+    void writeOut(byte[] data, int offset, int length) throws IOException ;\n+}\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/ScatterZipOutputStream.java\n  *\n  * @since 1.10\n  */\n-public abstract class ScatterZipOutputStream  {\n+public class ScatterZipOutputStream  {\n     private final Queue<CompressedEntry> items = new ConcurrentLinkedQueue<CompressedEntry>();\n+    private final ScatterGatherBackingStore backingStore;\n+    private final StreamCompressor streamCompressor;\n \n     private static class CompressedEntry {\n         final ZipArchiveEntry entry;\n         }\n     }\n \n+    public ScatterZipOutputStream(ScatterGatherBackingStore backingStore,\n+                                  StreamCompressor streamCompressor) {\n+        this.backingStore = backingStore;\n+        this.streamCompressor = streamCompressor;\n+    }\n+\n     /**\n      * Add an archive entry to this scatter stream.\n      *\n      * @throws IOException    If writing fails\n      */\n     public void addArchiveEntry(ZipArchiveEntry zipArchiveEntry, InputStream payload, int method) throws IOException {\n-        StreamCompressor sc = getStreamCompressor();\n-        sc.deflate(payload, method);\n+        streamCompressor.deflate(payload, method);\n         payload.close();\n-        items.add(new CompressedEntry(zipArchiveEntry, sc.getCrc32(), sc.getBytesWritten(), method, sc.getBytesRead()));\n+        items.add(new CompressedEntry(zipArchiveEntry, streamCompressor.getCrc32(),\n+                                      streamCompressor.getBytesWritten(), method,\n+                                      streamCompressor.getBytesRead()));\n     }\n \n     /**\n      * @throws IOException If writing fails\n      */\n     public void writeTo(ZipArchiveOutputStream target) throws IOException {\n-        closeBackingStorage();\n-        InputStream data = getInputStream();\n+        backingStore.close();\n+        InputStream data = backingStore.getInputStream();\n         for (CompressedEntry compressedEntry : items) {\n             final BoundedInputStream rawStream = new BoundedInputStream(data, compressedEntry.compressedSize);\n             target.addRawArchiveEntry(compressedEntry.transferToArchiveEntry(), rawStream);\n         }\n         data.close();\n     }\n-\n-    /**\n-     * Returns a stream compressor that can be used to compress the data.\n-     * <p/>\n-     * This method is expected to return the same instance every time.\n-     *\n-     * @return The stream compressor\n-     * @throws FileNotFoundException\n-     */\n-    protected abstract StreamCompressor getStreamCompressor() throws FileNotFoundException;\n-\n-    /**\n-     * An input stream that contains the scattered payload\n-     *\n-     * @return An InputStream, should be closed by the caller of this method.\n-     * @throws IOException when something fails\n-     */\n-    protected abstract InputStream getInputStream() throws IOException;\n-\n-\n-    /**\n-     * Closes whatever storage is backing this scatter stream\n-     */\n-    protected abstract void closeBackingStorage() throws IOException;\n \n     /**\n      * Create a ScatterZipOutputStream with default compression level that is backed by a file\n      * @throws FileNotFoundException\n      */\n     public static ScatterZipOutputStream fileBased(File file, int compressionLevel) throws FileNotFoundException {\n-        return new FileScatterOutputStream(file, compressionLevel);\n-    }\n-\n-    private static class FileScatterOutputStream extends ScatterZipOutputStream {\n-        final File target;\n-        private StreamCompressor streamDeflater;\n-        final FileOutputStream os;\n-\n-        FileScatterOutputStream(File target, int compressionLevel) throws FileNotFoundException {\n-            this.target = target;\n-            os = new FileOutputStream(target);\n-            streamDeflater = StreamCompressor.create(compressionLevel, os);\n-        }\n-\n-        @Override\n-        protected StreamCompressor getStreamCompressor() throws FileNotFoundException {\n-            return streamDeflater;\n-        }\n-\n-        @Override\n-        protected InputStream getInputStream() throws IOException {\n-            return new FileInputStream(target);\n-        }\n-\n-        @SuppressWarnings(\"ResultOfMethodCallIgnored\")\n-        public void closeBackingStorage() throws IOException {\n-            os.close();\n-        }\n+        ScatterGatherBackingStore bs = new FileBasedScatterGatherBackingStore(file);\n+        StreamCompressor sc = StreamCompressor.create(compressionLevel, bs);\n+        return new ScatterZipOutputStream(bs, sc);\n     }\n }\n--- a/src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java\n+++ b/src/main/java/org/apache/commons/compress/archivers/zip/StreamCompressor.java\n     public static StreamCompressor create(int compressionLevel, DataOutput os) {\n         final Deflater deflater = new Deflater(compressionLevel, true);\n         return new DataOutputCompressor(deflater, os);\n+    }\n+\n+    /**\n+     * Create a stream compressor with the given compression level.\n+     *\n+     * @param compressionLevel The #Deflater compression level\n+     * @param bs The #ScatterGatherBackingStore to receive output\n+     * @return A stream compressor\n+     */\n+    public static StreamCompressor create(int compressionLevel, ScatterGatherBackingStore bs) {\n+        final Deflater deflater = new Deflater(compressionLevel, true);\n+        return new ScatterGatherBackingStoreCompressor(deflater, bs);\n+    }\n+\n+    /**\n+     * Create a stream compressor with the default compression level.\n+     *\n+     * @param bs The #ScatterGatherBackingStore to receive output\n+     * @return A stream compressor\n+     */\n+    public static StreamCompressor create( ScatterGatherBackingStore bs) {\n+        return create(Deflater.DEFAULT_COMPRESSION, bs);\n     }\n \n     /**\n \n     protected abstract void writeOut(byte[] data, int offset, int length) throws IOException ;\n \n+    private static final class ScatterGatherBackingStoreCompressor extends StreamCompressor {\n+        private final ScatterGatherBackingStore bs;\n+\n+        public ScatterGatherBackingStoreCompressor(Deflater deflater, ScatterGatherBackingStore bs) {\n+            super(deflater);\n+            this.bs = bs;\n+        }\n+\n+        protected final void writeOut(byte[] data, int offset, int length)\n+                throws IOException {\n+                bs.writeOut(data, offset, length);\n+        }\n+    }\n+\n     private static final class OutputStreamCompressor extends StreamCompressor {\n         private final OutputStream os;\n ", "timestamp": 1419855842, "metainfo": ""}