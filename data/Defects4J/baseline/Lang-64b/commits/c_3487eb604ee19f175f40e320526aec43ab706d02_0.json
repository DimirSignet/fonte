{"sha": "3487eb604ee19f175f40e320526aec43ab706d02", "log": "Fix to handle anonymous inner classes   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n  *\n  * @author Stephen Colebourne\n  * @since 2.0\n- * @version $Id: ClassUtils.java,v 1.7 2002/12/23 00:32:24 scolebourne Exp $\n+ * @version $Id: ClassUtils.java,v 1.8 2002/12/31 22:32:23 scolebourne Exp $\n  */\n public class ClassUtils {\n \n         if (cls == null) {\n             throw new IllegalArgumentException(\"The class must not be null\");\n         }\n-        return (cls.getDeclaringClass() != null);\n+        return (cls.getName().indexOf('$') >= 0);\n     }\n     \n }\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n  * Unit tests {@link org.apache.commons.lang.ClassUtils}.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: ClassUtilsTest.java,v 1.1 2002/12/15 19:36:08 scolebourne Exp $\n+ * @version $Id: ClassUtilsTest.java,v 1.2 2002/12/31 22:32:23 scolebourne Exp $\n  */\n public class ClassUtilsTest extends TestCase {\n \n     public void test_isInnerClass_Class() {\n         assertEquals(true, ClassUtils.isInnerClass(Inner.class));\n         assertEquals(true, ClassUtils.isInnerClass(Map.Entry.class));\n+        assertEquals(true, ClassUtils.isInnerClass(new Cloneable() {\n+        }.getClass()));\n         assertEquals(false, ClassUtils.isInnerClass(this.getClass()));\n         assertEquals(false, ClassUtils.isInnerClass(String.class));\n         try {", "timestamp": 1041373943, "metainfo": ""}