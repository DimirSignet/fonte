{"sha": "4141d990c5c6e0d1e935ae512b2026965de6536e", "log": "Tidy comments   ", "commit": "\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @since 1.0\n- * @version $Id: NumberUtils.java,v 1.8 2003/04/09 01:04:47 ggregory Exp $\n+ * @version $Id: NumberUtils.java,v 1.9 2003/06/08 14:09:36 scolebourne Exp $\n  */\n public final class NumberUtils {\n     \n         boolean hasDecPoint = false;\n         boolean allowSigns = false;\n         boolean foundDigit = false;\n-        //Deal with any possible sign up front\n+        // deal with any possible sign up front\n         int start = (chars[0] == '-') ? 1 : 0;\n         if (sz > start + 1) {\n             if (chars[start] == '0' && chars[start + 1] == 'x') {\n                 if (i == sz) {\n                     return false; // str == \"0x\"\n                 }\n-                //Checking hex (it can't be anything else)\n+                // checking hex (it can't be anything else)\n                 for (; i < chars.length; i++) {\n                     if ((chars[i] < '0' || chars[i] > '9')\n                         && (chars[i] < 'a' || chars[i] > 'f')\n                 return true;\n             }\n         }\n-        sz--; //Don't want to loop to the last char, check it afterwords\n-              //for type qualifiers\n+        sz--; // don't want to loop to the last char, check it afterwords\n+              // for type qualifiers\n         int i = start;\n-        //Loop to the next to last char or to the last char if we need another digit to\n-        //make a valid number (e.g. chars[0..5] = \"1234E\")\n+        // loop to the next to last char or to the last char if we need another digit to\n+        // make a valid number (e.g. chars[0..5] = \"1234E\")\n         while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {\n             if (chars[i] >= '0' && chars[i] <= '9') {\n                 foundDigit = true;\n \n             } else if (chars[i] == '.') {\n                 if (hasDecPoint || hasExp) {\n-                    //Two decimal points or dec in exponent   \n+                    // two decimal points or dec in exponent   \n                     return false;\n                 }\n                 hasDecPoint = true;\n             } else if (chars[i] == 'e' || chars[i] == 'E') {\n-                //We've already taken care of hex.\n+                // we've already taken care of hex.\n                 if (hasExp) {\n-                    //Two E's\n+                    // two E's\n                     return false;\n                 }\n                 if (!foundDigit) {\n                     return false;\n                 }\n                 allowSigns = false;\n-                foundDigit = false; //We need a digit after the E\n+                foundDigit = false; // we need a digit after the E\n             } else {\n                 return false;\n             }\n         }\n         if (i < chars.length) {\n             if (chars[i] >= '0' && chars[i] <= '9') {\n-                //No type qualifier, OK\n+                // no type qualifier, OK\n                 return true;\n             }\n             if (chars[i] == 'e' || chars[i] == 'E') {\n-                //Can't have an E at the last byte\n+                // can't have an E at the last byte\n                 return false;\n             }\n             if (!allowSigns\n             }\n             if (chars[i] == 'l'\n                 || chars[i] == 'L') {\n-                //Not allowing L with an exponoent\n+                // not allowing L with an exponoent\n                 return foundDigit && !hasExp;\n             }\n         }\n-        //allowSigns is true iff the val ends in 'E'\n-        //Found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n+        // allowSigns is true iff the val ends in 'E'\n+        // found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n         return !allowSigns && foundDigit;\n     }\n }", "timestamp": 1055081376, "metainfo": ""}