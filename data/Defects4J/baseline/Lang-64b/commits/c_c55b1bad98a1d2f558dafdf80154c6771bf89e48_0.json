{"sha": "c55b1bad98a1d2f558dafdf80154c6771bf89e48", "log": "Bug #19880 fixed. RandomStringUtils.random(int count, char[] set) doesn't include the last character in set.  Submitted by:\tPhil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/RandomStringUtils.java\n+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.10 2003/04/09 14:13:03 bayard Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.11 2003/05/14 02:50:43 bayard Exp $\n  */\n public class RandomStringUtils {\n \n      * @return the random string\n      */\n     public static String random(int count, char[] set) {\n-        return random(count, 0, set.length - 1, false, false, set);\n+        return random(count, 0, set.length, false, false, set);\n     }\n }\n--- a/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/RandomStringUtilsTest.java\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: RandomStringUtilsTest.java,v 1.5 2003/04/09 14:13:03 bayard Exp $\n+ * @version $Id: RandomStringUtilsTest.java,v 1.6 2003/05/14 02:50:43 bayard Exp $\n  */\n public class RandomStringUtilsTest extends junit.framework.TestCase {\n     /**\n         }\n         assertNotNull(\"random(<0) throws exception\", e);\n     }\n+    \n+    /** \n+     * Test homogeneity of random strings generated --\n+     * i.e., test that characters show up with expected frequencies\n+     * in generated strings.  Will fail randomly about 1 in 1000 times.\n+     * Repeated failures indicate a problem.\n+     */\n+    public void testRandomStringUtilsHomog() {\n+        String set = \"abc\";\n+        char[] chars = set.toCharArray();\n+        String gen = \"\";\n+        int[] counts = {0,0,0};\n+        int[] expected = {200,200,200};\n+        for (int i = 0; i< 100; i++) {\n+           gen = RandomStringUtils.random(6,chars);\n+           for (int j = 0; j < 6; j++) {\n+               switch (gen.charAt(j)) {\n+                   case 'a': {counts[0]++; break;}\n+                   case 'b': {counts[1]++; break;}\n+                   case 'c': {counts[2]++; break;}\n+                   default: {fail(\"generated character not in set\");}\n+               }\n+           }\n+        } \n+        // Perform chi-square test with df = 3-1 = 2, testing at .001 level\n+        assertTrue(\"test homogeneity -- will fail about 1 in 1000 times\",\n+            chiSquare(expected,counts) < 13.82);  \n+    }\n+    \n+    //FIXME: add similar tests for other functions\n+    \n+    /**\n+     * Computes Chi-Square statistic given observed and expected counts\n+     * @param observed array of observed frequency counts\n+     * @param expected array of exptected frequency counts\n+     */\n+    private double chiSquare(int[] expected, int[] observed) {\n+        double sumSq = 0.0d;\n+        double dev = 0.0d;\n+        for (int i = 0; i< observed.length; i++) {\n+            dev = (double)(observed[i] - expected[i]);\n+            sumSq += dev*dev/(double)expected[i];\n+        }\n+        return sumSq;\n+    }           \n+        \n \n     public static void main(String args[]) {\n         TestRunner.run(suite());", "timestamp": 1052880643, "metainfo": ""}