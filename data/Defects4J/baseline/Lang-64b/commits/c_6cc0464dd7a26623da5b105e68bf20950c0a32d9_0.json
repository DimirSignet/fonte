{"sha": "6cc0464dd7a26623da5b105e68bf20950c0a32d9", "log": "Add min/max by array functions bug 21068, from Matthew Hawthorne   ", "commit": "\n--- a/src/java/org/apache/commons/lang/math/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/math/NumberUtils.java\n  */\n package org.apache.commons.lang.math;\n \n+import java.math.BigDecimal;\n import java.math.BigInteger;\n-import java.math.BigDecimal;\n+\n+import org.apache.commons.lang.NullArgumentException;\n \n /**\n  * <p>Provides extra functionality for Java Number classes.</p>\n  * @author <a href=\"mailto:steve.downey@netfolio.com\">Steve Downey</a>\n  * @author Eric Pugh\n  * @author Phil Steitz\n- * @since 1.0\n- * @version $Id: NumberUtils.java,v 1.1 2003/06/24 21:14:50 scolebourne Exp $\n+ * @author Matthew Hawthorne\n+ * @since 2.0\n+ * @version $Id: NumberUtils.java,v 1.2 2003/06/28 18:42:03 scolebourne Exp $\n  */\n public final class NumberUtils {\n     \n         return bd;\n     }\n \n+    // Min in array\n+    //--------------------------------------------------------------------\n+    /**\n+     * Returns the minimum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static long min(long[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns min\n+        long min = array[0];\n+        for (int i = 1; i < array.length; i++) {\n+            if (array[i] < min) {\n+                min = array[i];\n+            }\n+        }\n+    \n+        return min;\n+    }\n+\n+    /**\n+     * Returns the minimum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static int min(int[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns min\n+        int min = array[0];\n+        for (int j = 1; j < array.length; j++) {\n+            if (array[j] < min) {\n+                min = array[j];\n+            }\n+        }\n+    \n+        return min;\n+    }\n+\n+    /**\n+     * Returns the minimum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static short min(short[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns min\n+        short min = array[0];\n+        for (int i = 1; i < array.length; i++) {\n+            if (array[i] < min) {\n+                min = array[i];\n+            }\n+        }\n+    \n+        return min;\n+    }\n+\n+     /**\n+     * Returns the minimum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static double min(double[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns min\n+        double min = array[0];\n+        for (int i = 1; i < array.length; i++) {\n+            if (array[i] < min) {\n+                min = array[i];\n+            }\n+        }\n+    \n+        return min;\n+    }\n+\n+    /**\n+     * Returns the minimum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static float min(float[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns min\n+        float min = array[0];\n+        for (int i = 1; i < array.length; i++) {\n+            if (array[i] < min) {\n+                min = array[i];\n+            }\n+        }\n+    \n+        return min;\n+    }\n+\n+    // Max in array\n+    //--------------------------------------------------------------------\n+    /**\n+     * Returns the maximum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static long max(long[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+\n+        // Finds and returns max\n+        long max = array[0];\n+        for (int j = 1; j < array.length; j++) {\n+            if (array[j] > max) {\n+                max = array[j];\n+            }\n+        }\n+\n+        return max;\n+    }\n+\n+    /**\n+     * Returns the maximum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static int max(int[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns max\n+        int max = array[0];\n+        for (int j = 1; j < array.length; j++) {\n+            if (array[j] > max) {\n+                max = array[j];\n+            }\n+        }\n+    \n+        return max;\n+    }\n+\n+    /**\n+     * Returns the maximum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static short max(short[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns max\n+        short max = array[0];\n+        for (int i = 1; i < array.length; i++) {\n+            if (array[i] > max) {\n+                max = array[i];\n+            }\n+        }\n+    \n+        return max;\n+    }\n+\n+    /**\n+     * Returns the maximum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static double max(double[] array) {\n+        // Validates input\n+        if (array== null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+    \n+        // Finds and returns max\n+        double max = array[0];\n+        for (int j = 1; j < array.length; j++) {\n+            if (array[j] > max) {\n+                max = array[j];\n+            }\n+        }\n+    \n+        return max;\n+    }\n+\n+    /**\n+     * Returns the maximum value in an array.\n+     * \n+     * @param array  an array\n+     * @return the minimum value in the array\n+     * @throws NullArgumentException if <code>array</code> is <code>null</code>\n+     * @throws IllegalArgumentException if <code>array</code> is empty\n+     */\n+    public static float max(float[] array) {\n+        // Validates input\n+        if (array == null) {\n+            throw new NullArgumentException(\"Array\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array cannot be empty.\");\n+        }\n+\n+        // Finds and returns max\n+        float max = array[0];\n+        for (int j = 1; j < array.length; j++) {\n+            if (array[j] > max) {\n+                max = array[j];\n+            }\n+        }\n+\n+        return max;\n+    }\n+     \n+    // 3 param min\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets the minimum of three <code>long</code> values.</p>\n         return Math.min(Math.min(a, b), c);\n     }\n \n+    // 3 param max\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Gets the maximum of three <code>long</code> values.</p>\n--- a/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/math/NumberUtilsTest.java\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n \n import org.apache.commons.lang.SystemUtils;\n \n  * @author Eric Pugh\n  * @author Phil Steitz\n  * @author Stephen Colebourne\n- * @version $Id: NumberUtilsTest.java,v 1.1 2003/06/24 21:14:51 scolebourne Exp $\n+ * @author Matthew Hawthorne\n+ * @version $Id: NumberUtilsTest.java,v 1.2 2003/06/28 18:42:04 scolebourne Exp $\n  */\n public class NumberUtilsTest extends TestCase {\n \n         super(name);\n     }\n \n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+    \n     public static Test suite() {\n         TestSuite suite = new TestSuite(NumberUtilsTest.class);\n         suite.setName(\"NumberUtils Tests\");\n \n     public void testCreateBigDecimal() {\n         assertEquals(\"createBigDecimal(String) failed\", new BigDecimal(\"1234.5\"), NumberUtils.createBigDecimal(\"1234.5\"));\n+    }\n+\n+    // min/max tests\n+    // ----------------------------------------------------------------------\n+    public void testMinLong() {\n+        final long[] l = null;\n+        try {\n+            NumberUtils.min(l);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new long[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(long[]) failed for array length 1\",\n+            5,\n+            NumberUtils.min(new long[] { 5 }));\n+\n+        assertEquals(\n+            \"min(long[]) failed for array length 2\",\n+            6,\n+            NumberUtils.min(new long[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"min(long[]) failed for array length 5\",\n+            -10,\n+            NumberUtils.min(new long[] { -10, -5, 0, 5, 10 }));\n+    }\n+\n+    public void testMinInt() {\n+        final int[] i = null;\n+        try {\n+            NumberUtils.min(i);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new int[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(int[]) failed for array length 1\",\n+            5,\n+            NumberUtils.min(new int[] { 5 }));\n+\n+        assertEquals(\n+            \"min(int[]) failed for array length 2\",\n+            6,\n+            NumberUtils.min(new int[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"min(int[]) failed for array length 5\",\n+            -10,\n+            NumberUtils.min(new int[] { -10, -5, 0, 5, 10 }));\n+    }\n+\n+    public void testMinShort() {\n+        final short[] s = null;\n+        try {\n+            NumberUtils.min(s);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new short[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(short[]) failed for array length 1\",\n+            5,\n+            NumberUtils.min(new short[] { 5 }));\n+\n+        assertEquals(\n+            \"min(short[]) failed for array length 2\",\n+            6,\n+            NumberUtils.min(new short[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"min(short[]) failed for array length 5\",\n+            -10,\n+            NumberUtils.min(new short[] { -10, -5, 0, 5, 10 }));\n+    }\n+\n+    public void testMinDouble() {\n+        final double[] d = null;\n+        try {\n+            NumberUtils.min(d);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new double[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(double[]) failed for array length 1\",\n+            5.12,\n+            NumberUtils.min(new double[] { 5.12 }),\n+            0);\n+\n+        assertEquals(\n+            \"min(double[]) failed for array length 2\",\n+            6.23,\n+            NumberUtils.min(new double[] { 6.23, 9.34 }),\n+            0);\n+\n+        assertEquals(\n+            \"min(double[]) failed for array length 5\",\n+            -10.45,\n+            NumberUtils.min(new double[] { -10.45, -5.56, 0, 5.67, 10.78 }),\n+            0);\n+    }\n+\n+    public void testMinFloat() {\n+        final float[] f = null;\n+        try {\n+            NumberUtils.min(f);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.min(new float[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"min(float[]) failed for array length 1\",\n+            5.9f,\n+            NumberUtils.min(new float[] { 5.9f }),\n+            0);\n+\n+        assertEquals(\n+            \"min(float[]) failed for array length 2\",\n+            6.8f,\n+            NumberUtils.min(new float[] { 6.8f, 9.7f }),\n+            0);\n+\n+        assertEquals(\n+            \"min(float[]) failed for array length 5\",\n+            -10.6f,\n+            NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }),\n+            0);\n+    }\n+\n+    public void testMaxLong() {\n+        final long[] l = null;\n+        try {\n+            NumberUtils.max(l);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new long[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(long[]) failed for array length 1\",\n+            5,\n+            NumberUtils.max(new long[] { 5 }));\n+\n+        assertEquals(\n+            \"max(long[]) failed for array length 2\",\n+            9,\n+            NumberUtils.max(new long[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"max(long[]) failed for array length 5\",\n+            10,\n+            NumberUtils.max(new long[] { -10, -5, 0, 5, 10 }));\n+    }\n+\n+    public void testMaxInt() {\n+        final int[] i = null;\n+        try {\n+            NumberUtils.max(i);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new int[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(int[]) failed for array length 1\",\n+            5,\n+            NumberUtils.max(new int[] { 5 }));\n+\n+        assertEquals(\n+            \"max(int[]) failed for array length 2\",\n+            9,\n+            NumberUtils.max(new int[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"max(int[]) failed for array length 5\",\n+            10,\n+            NumberUtils.max(new int[] { -10, -5, 0, 5, 10 }));\n+    }\n+\n+    public void testMaxShort() {\n+        final short[] s = null;\n+        try {\n+            NumberUtils.max(s);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new short[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(short[]) failed for array length 1\",\n+            5,\n+            NumberUtils.max(new short[] { 5 }));\n+\n+        assertEquals(\n+            \"max(short[]) failed for array length 2\",\n+            9,\n+            NumberUtils.max(new short[] { 6, 9 }));\n+\n+        assertEquals(\n+            \"max(short[]) failed for array length 5\",\n+            10,\n+            NumberUtils.max(new short[] { -10, -5, 0, 5, 10 }));\n+    }\n+\n+    public void testMaxDouble() {\n+        final double[] d = null;\n+        try {\n+            NumberUtils.max(d);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new double[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(double[]) failed for array length 1\",\n+            5.1f,\n+            NumberUtils.max(new double[] { 5.1f }),\n+            0);\n+\n+        assertEquals(\n+            \"max(double[]) failed for array length 2\",\n+            9.2f,\n+            NumberUtils.max(new double[] { 6.3f, 9.2f }),\n+            0);\n+\n+        assertEquals(\n+            \"max(double[]) failed for float length 5\",\n+            10.4f,\n+            NumberUtils.max(new double[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n+            0);\n+    }\n+ \n+    public void testMaxFloat() {\n+        final float[] f = null;\n+        try {\n+            NumberUtils.max(f);\n+            fail(\"No exception was thrown for null input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        try {\n+            NumberUtils.max(new float[0]);\n+            fail(\"No exception was thrown for empty input.\");\n+        } catch (IllegalArgumentException ex) {}\n+\n+        assertEquals(\n+            \"max(float[]) failed for array length 1\",\n+            5.1f,\n+            NumberUtils.max(new float[] { 5.1f }),\n+            0);\n+\n+        assertEquals(\n+            \"max(float[]) failed for array length 2\",\n+            9.2f,\n+            NumberUtils.max(new float[] { 6.3f, 9.2f }),\n+            0);\n+\n+        assertEquals(\n+            \"max(float[]) failed for float length 5\",\n+            10.4f,\n+            NumberUtils.max(new float[] { -10.5f, -5.6f, 0, 5.7f, 10.4f }),\n+            0);\n     }\n \n     public void testMinimumLong() {", "timestamp": 1056825724, "metainfo": ""}