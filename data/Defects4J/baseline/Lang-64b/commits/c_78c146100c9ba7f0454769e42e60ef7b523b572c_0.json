{"sha": "78c146100c9ba7f0454769e42e60ef7b523b572c", "log": "Add ability to build compound toStrings using superclass and delegates   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java\n  * program to access.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: StandardToStringStyle.java,v 1.5 2002/11/17 21:46:42 scolebourne Exp $\n+ * @version $Id: StandardToStringStyle.java,v 1.6 2002/12/08 20:45:08 scolebourne Exp $\n  */\n public class StandardToStringStyle extends ToStringStyle {\n     \n     //---------------------------------------------------------------------\n     \n     /**\n+     * <p>Gets whether the field separator should be added at the start \n+     * of each buffer.</p>\n+     * \n+     * @return the fieldSeparatorAtStart flag\n+     */\n+    public boolean isFieldSeparatorAtStart() {\n+        return super.isFieldSeparatorAtStart();\n+    }\n+\n+    /**\n+     * <p>Sets whether the field separator should be added at the start \n+     * of each buffer.</p>\n+     * \n+     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n+     */\n+    public void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n+        super.setFieldSeparatorAtStart(fieldSeparatorAtStart);\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Gets whether the field separator should be added at the end \n+     * of each buffer.</p>\n+     * \n+     * @return fieldSeparatorAtEnd flag\n+     */\n+    public boolean isFieldSeparatorAtEnd() {\n+        return super.isFieldSeparatorAtEnd();\n+    }\n+\n+    /**\n+     * <p>Sets whether the field separator should be added at the end \n+     * of each buffer.</p>\n+     * \n+     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n+     */\n+    public void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n+        super.setFieldSeparatorAtEnd(fieldSeparatorAtEnd);\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n      * <p>Gets the text to output when <code>null</code> found.</p>\n      *\n      * @return the current text to output when <code>null</code> found\n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n  * </pre>\n  * <p>This will produce a toString of the format:\n  * <code>Person@7f54[name=Stephen,age=29,smoker=false]</code></p>\n+ * \n+ * <p>To add the superclass <code>toString</code>, use {@link #appendSuper}.\n+ * To append the <code>toString</code> from an object that is delegated\n+ * to (or any other object), use {@link #appendToString}.</p>\n  *\n  * <p>Alternatively, there is a method that uses reflection to determine\n  * the fields to test. Because these fields are usually private, the method, \n  * <code>reflectionToString</code>, uses <code>Field.setAccessible</code> to\n  * change the visibility of the fields. This will fail under a security manager,\n  * unless the appropriate permissions are set up correctly. It is also\n- * slower than testing explicitly.</p>\n+ * slower than testing explicitly and does not handle superclasses.</p>\n  *\n  * <p>A typical invocation for this method would look like:</p>\n  * <pre>\n  * the {@link ToStringStyle} passed into the constructor.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringBuilder.java,v 1.8 2002/11/17 21:46:42 scolebourne Exp $\n+ * @version $Id: ToStringBuilder.java,v 1.9 2002/12/08 20:45:08 scolebourne Exp $\n  */\n public class ToStringBuilder {\n     \n     //----------------------------------------------------------------------------\n     \n     /**\n+     * <p>Append the <code>toString</code> from the superclass.</p>\n+     * \n+     * <p>This method asumes that the superclass uses the same <code>ToStringStyle</code>\n+     * as this one.</p>\n+     * \n+     * <p>If the <code>superToString</code> is null, no change is made.</p>\n+     *\n+     * @param superToString  the result of <code>super.toString()</code>\n+     * @return this\n+     */\n+    public ToStringBuilder appendSuper(String superToString) {\n+        if (superToString != null) {\n+            style.appendSuper(buffer, superToString);\n+        }\n+        return this;\n+    }\n+\n+    /**\n+     * <p>Append the <code>toString</code> from another object.</p>\n+     * \n+     * <p>This method is useful where a class delegates most of the implementation of\n+     * it's properties to another class. You can then call toString() on the other \n+     * class and pass the result into this method.</p>\n+     * \n+     * <pre>\n+     *   private AnotherObject delegate;\n+     *   private String fieldInThisClass;\n+     * \n+     *   public String toString() {\n+     *     return new ToStringBuilder(this).\n+     *       appendToString(delegate.toString()).\n+     *       append(fieldInThisClass).\n+     *       toString();\n+     *   }</pre>\n+     * \n+     * <p>This method asumes that the other object uses the same <code>ToStringStyle</code>\n+     * as this one.</p>\n+     * \n+     * <p>If the <code>toString</code> is null, no change is made.</p>\n+     *\n+     * @param toString  the result of <code>toString()</code> on another object\n+     * @return this\n+     */\n+    public ToStringBuilder appendToString(String toString) {\n+        if (toString != null) {\n+            style.appendToString(buffer, toString);\n+        }\n+        return this;\n+    }\n+\n+    //----------------------------------------------------------------------------\n+    \n+    /**\n      * <p>Append to the <code>toString</code> an <code>Object</code>\n      * value.</p>\n      *\n     //----------------------------------------------------------------------------\n     \n     /**\n+     * <p>Gets the <code>ToStringStyle</code> being used.</p>\n+     * \n+     * @return the <code>ToStringStyle</code> being used\n+     */    \n+    public ToStringStyle getStyle() {\n+        return style;\n+    }\n+\n+    /**\n      * <p>Gets the <code>StringBuffer</code> being populated.</p>\n      * \n      * @return the <code>StringBuffer</code> being populated\n \n     /**\n      * <p>Returns the built <code>toString</code>.</p>\n+     * \n+     * <p>This method appends the end of the buffer, and can only be called once.\n+     * Use {@link #getStringBuffer} to get the current string state.</p>\n      * \n      * @return the String <code>toString</code>\n      */    \n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n  * the array length.</p>\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringStyle.java,v 1.7 2002/11/22 22:52:17 bayard Exp $\n+ * @version $Id: ToStringStyle.java,v 1.8 2002/12/08 20:45:08 scolebourne Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n     \n      */\n     private String fieldNameValueSeparator = \"=\";\n     /**\n+     * Whether the field separator should be added before any other fields.\n+     */\n+    private boolean fieldSeparatorAtStart = false;\n+    /**\n+     * Whether the field separator should be added after any other fields.\n+     */\n+    private boolean fieldSeparatorAtEnd = false;\n+    /**\n      * The field separator <code>','</code>.\n      */\n     private String fieldSeparator = \",\";\n     \n     //----------------------------------------------------------------------------\n     \n+    /**\n+     * <p>Append the superclass toString.</p>\n+     * \n+     * <p>A null <code>super.toString()</code> is ignored.</p>\n+     * \n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param superToString  the <code>super.toString()</code>\n+     */\n+    public void appendSuper(StringBuffer buffer, String superToString) {\n+        appendToString(buffer, superToString);\n+    }\n+    \n+    /**\n+     * <p>Append a toString.</p>\n+     * \n+     * <p>A null <code>toString()</code> is ignored.</p>\n+     * \n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     * @param toString  the <code>super.toString()</code>\n+     */\n+    public void appendToString(StringBuffer buffer, String toString) {\n+        if (toString != null) {\n+            int pos1 = toString.indexOf(contentStart) + contentStart.length();\n+            int pos2 = toString.lastIndexOf(contentEnd);\n+            if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {\n+                String data = toString.substring(pos1, pos2);\n+                if (fieldSeparatorAtStart) {\n+                    removeLastFieldSeparator(buffer);\n+                }\n+                buffer.append(data);\n+                appendFieldSeparator(buffer);\n+            }\n+        }\n+    }\n+\n     /**\n      * <p>Append the start of data indicator.</p>\n      * \n         appendClassName(buffer, object);\n         appendIdentityHashCode(buffer, object);\n         appendContentStart(buffer);\n+        if (fieldSeparatorAtStart) {\n+            appendFieldSeparator(buffer);\n+        }\n     }\n \n     /**\n      *  <code>toString</code> for, must not be <code>null</code>\n      */\n     public void appendEnd(StringBuffer buffer, Object object) {\n+        if (fieldSeparatorAtEnd == false) {\n+            removeLastFieldSeparator(buffer);\n+        }\n         appendContentEnd(buffer);\n+    }\n+\n+    /**\n+     * <p>Remove the last field separator from the buffer</p>\n+     * \n+     * @param buffer  the <code>StringBuffer</code> to populate\n+     */\n+    protected void removeLastFieldSeparator(StringBuffer buffer) {\n+        int len = buffer.length();\n+        int sepLen = fieldSeparator.length();\n+        if (len > 0 && sepLen > 0 && len >= sepLen) {\n+            boolean match = true;\n+            for (int i = 0; i < sepLen; i++) {\n+                if (buffer.charAt(len - 1 - i) != fieldSeparator.charAt(sepLen - 1 - i)) {\n+                    match = false;\n+                    break;\n+                }\n+            }\n+            if (match) {\n+                buffer.setLength(len - sepLen);\n+            }\n+        }\n     }\n     \n     //----------------------------------------------------------------------------\n      * @param buffer  the <code>StringBuffer</code> to populate\n      */\n     protected void appendContentEnd(StringBuffer buffer) {\n-        int len = buffer.length();\n-        int sepLen = fieldSeparator.length();\n-        if (len > 0 && sepLen > 0 && len >= sepLen && buffer.charAt(len - 1) == fieldSeparator.charAt(sepLen - 1)) {\n-            buffer.setLength(len - sepLen);\n-        }\n         buffer.append(contentEnd);\n     }\n     \n     //---------------------------------------------------------------------\n     \n     /**\n+     * <p>Gets whether the field separator should be added at the start \n+     * of each buffer.</p>\n+     * \n+     * @return the fieldSeparatorAtStart flag\n+     */\n+    protected boolean isFieldSeparatorAtStart() {\n+        return fieldSeparatorAtStart;\n+    }\n+\n+    /**\n+     * <p>Sets whether the field separator should be added at the start \n+     * of each buffer.</p>\n+     * \n+     * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag\n+     */\n+    protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {\n+        this.fieldSeparatorAtStart = fieldSeparatorAtStart;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * <p>Gets whether the field separator should be added at the end \n+     * of each buffer.</p>\n+     * \n+     * @return fieldSeparatorAtEnd flag\n+     */\n+    protected boolean isFieldSeparatorAtEnd() {\n+        return fieldSeparatorAtEnd;\n+    }\n+\n+    /**\n+     * <p>Sets whether the field separator should be added at the end \n+     * of each buffer.</p>\n+     * \n+     * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag\n+     */\n+    protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {\n+        this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n      * <p>Gets the text to output when <code>null</code> found.</p>\n      *\n      * @return the current text to output when null found\n         this.summaryObjectEndText = summaryObjectEndText;\n     }\n \n-    //---------------------------------------------------------------------\n-    \n     //----------------------------------------------------------------------------\n     \n     /**\n          */\n         private MultiLineToStringStyle() {\n             super();\n-            this.setContentStart(\"[\" + SystemUtils.LINE_SEPARATOR + \"  \");\n+            this.setContentStart(\"[\");\n             this.setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\n+            this.setFieldSeparatorAtStart(true);\n             this.setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\n         }\n         \n--- a/src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/DefaultToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: DefaultToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ * @version $Id: DefaultToStringStyleTest.java,v 1.2 2002/12/08 20:48:46 scolebourne Exp $\n  */\n public class DefaultToStringStyleTest extends TestCase {\n \n         assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n     }\n \n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n     public void testObject() {\n         Integer i3 = new Integer(3);\n         Integer i4 = new Integer(4);\n--- a/src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/MultiLineToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: MultiLineToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ * @version $Id: MultiLineToStringStyleTest.java,v 1.2 2002/12/08 20:48:46 scolebourne Exp $\n  */\n public class MultiLineToStringStyleTest extends TestCase {\n \n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).toString());\n     }\n \n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n+        \n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n     public void testObject() {\n         Integer i3 = new Integer(3);\n         Integer i4 = new Integer(4);\n--- a/src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/NoFieldNamesToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: NoFieldNamesToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ * @version $Id: NoFieldNamesToStringStyleTest.java,v 1.2 2002/12/08 20:48:46 scolebourne Exp $\n  */\n public class NoFieldNamesToStringStyleTest extends TestCase {\n \n         assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n     }\n \n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n     public void testObject() {\n         Integer i3 = new Integer(3);\n         Integer i4 = new Integer(4);\n--- a/src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/SimpleToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: SimpleToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ * @version $Id: SimpleToStringStyleTest.java,v 1.2 2002/12/08 20:48:46 scolebourne Exp $\n  */\n public class SimpleToStringStyleTest extends TestCase {\n \n         assertEquals(\"\", new ToStringBuilder(base).toString());\n     }\n \n+    public void testAppendSuper() {\n+        assertEquals(\"\", new ToStringBuilder(base).appendSuper(\"\").toString());\n+        assertEquals(\"<null>\", new ToStringBuilder(base).appendSuper(\"<null>\").toString());\n+        \n+        assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(\"\").append(\"a\", \"hello\").toString());\n+        assertEquals(\"<null>,hello\", new ToStringBuilder(base).appendSuper(\"<null>\").append(\"a\", \"hello\").toString());\n+        assertEquals(\"hello\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n     public void testObject() {\n         Integer i3 = new Integer(3);\n         Integer i4 = new Integer(4);\n--- a/src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java\n+++ b/src/test/org/apache/commons/lang/builder/StandardToStringStyleTest.java\n  * Unit tests {@link org.apache.commons.lang.ToStringStyle}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: StandardToStringStyleTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ * @version $Id: StandardToStringStyleTest.java,v 1.2 2002/12/08 20:48:46 scolebourne Exp $\n  */\n public class StandardToStringStyleTest extends TestCase {\n \n         assertEquals(baseStr + \"[]\", new ToStringBuilder(base).toString());\n     }\n \n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[%NULL%,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[%NULL%]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n     public void testObject() {\n         Integer i3 = new Integer(3);\n         Integer i4 = new Integer(4);\n--- a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n  * Unit tests {@link org.apache.commons.lang.ToStringBuilder}.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringBuilderTest.java,v 1.1 2002/09/17 22:07:50 scolebourne Exp $\n+ * @version $Id: ToStringBuilderTest.java,v 1.2 2002/12/08 20:48:46 scolebourne Exp $\n  */\n public class ToStringBuilderTest extends TestCase {\n \n         assertEquals(baseStr + \"[value=5]\", ToStringBuilder.reflectionToString(base));\n     }\n     \n+    public void testAppendSuper() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n+    public void testAppendToString() {\n+        assertEquals(baseStr + \"[]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").toString());\n+        assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").toString());\n+        \n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[<null>,a=hello]\", new ToStringBuilder(base).appendToString(\"Integer@8888[<null>]\").append(\"a\", \"hello\").toString());\n+        assertEquals(baseStr + \"[a=hello]\", new ToStringBuilder(base).appendToString(null).append(\"a\", \"hello\").toString());\n+    }\n+    \n     public void testObject() {\n         Integer i3 = new Integer(3);\n         Integer i4 = new Integer(4);", "timestamp": 1039380526, "metainfo": ""}