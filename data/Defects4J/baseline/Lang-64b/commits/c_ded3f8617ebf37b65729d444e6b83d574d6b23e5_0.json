{"sha": "ded3f8617ebf37b65729d444e6b83d574d6b23e5", "log": "Add primitive/object conversions for all types bug 21068, from Matthew Hawthorne   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.15 2003/06/25 23:33:47 scolebourne Exp $\n+ * @version $Id: ArrayUtils.java,v 1.16 2003/06/28 18:01:18 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n         return (indexOf(array, objectToFind) != -1);\n     }\n \n-    // Primitive/Object converters\n+    // Primitive/Object array converters\n+    // ----------------------------------------------------------------------\n+    \n+    // Boolean array converters\n     // ----------------------------------------------------------------------\n     /**\n      * <p>Converts an array of object Booleans to primitives.</p>\n         return result;\n     }\n \n+    // Byte array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Bytes to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Byte</code> array, may be <code>null</code>\n+     * @return a <code>byte</code> array\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static byte[] toPrimitive(final Byte[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        final byte[] result = new byte[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].byteValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Bytes to primitives handling null.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Byte</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>byte</code> array\n+     */\n+    public static byte[] toPrimitive(final Byte[] array, final byte valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_ARRAY;\n+        }\n+        final byte[] result = new byte[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Byte b = array[i];\n+            result[i] = (b == null ? valueForNull : b.byteValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive bytes to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>byte</code> array\n+     * @return a <code>Byte</code> array\n+     */\n+    public static Byte[] toObject(final byte[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_BYTE_OBJECT_ARRAY;\n+        }\n+        final Byte[] result = new Byte[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Byte(array[i]);\n+        }\n+        return result;\n+    }  \n+    \n+    // Short array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Shorts to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Short</code> array, may be <code>null</code>\n+     * @return a <code>byte</code> array\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static short[] toPrimitive(final Short[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_SHORT_ARRAY;\n+        }\n+        final short[] result = new short[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].shortValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Short to primitives handling null.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Short</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>byte</code> array\n+     */\n+    public static short[] toPrimitive(final Short[] array, final short valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_SHORT_ARRAY;\n+        }\n+        final short[] result = new short[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Short b = array[i];\n+            result[i] = (b == null ? valueForNull : b.shortValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive shorts to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>short</code> array\n+     * @return a <code>Short</code> array\n+     */\n+    public static Short[] toObject(final short[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_SHORT_OBJECT_ARRAY;\n+        }\n+        final Short[] result = new Short[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Short(array[i]);\n+        }\n+        return result;\n+    }    \n+\n+    // Int array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Integers to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Integer</code> array, may be <code>null</code>\n+     * @return an <code>int</code> array\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static int[] toPrimitive(final Integer[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_INT_ARRAY;\n+        }\n+        final int[] result = new int[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].intValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Integer to primitives handling null.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Integer</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return an <code>int</code> array\n+     */\n+    public static int[] toPrimitive(final Integer[] array, final int valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_INT_ARRAY;\n+        }\n+        final int[] result = new int[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Integer b = array[i];\n+            result[i] = (b == null ? valueForNull : b.intValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive ints to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  an <code>int</code> array\n+     * @return an <code>Integer</code> array\n+     */\n+    public static Integer[] toObject(final int[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_INTEGER_OBJECT_ARRAY;\n+        }\n+        final Integer[] result = new Integer[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Integer(array[i]);\n+        }\n+        return result;\n+    }\n+    \n+    // Long array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Longs to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Long</code> array, may be <code>null</code>\n+     * @return a <code>long</code> array\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static long[] toPrimitive(final Long[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_LONG_ARRAY;\n+        }\n+        final long[] result = new long[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].longValue();\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * <p>Converts an array of object Long to primitives handling null.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Long</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>long</code> array\n+     */\n+    public static long[] toPrimitive(final Long[] array, final long valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_LONG_ARRAY;\n+        }\n+        final long[] result = new long[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Long b = array[i];\n+            result[i] = (b == null ? valueForNull : b.longValue());\n+        }\n+        return result;\n+    }\n+    \n+    /**\n+     * <p>Converts an array of primitive longs to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array a <code>long</code> array\n+     * @return a <code>Long</code> array\n+     */\n+    public static Long[] toObject(final long[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_LONG_OBJECT_ARRAY;\n+        }\n+        final Long[] result = new Long[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Long(array[i]);\n+        }\n+        return result;\n+    }\n+\n+    //   Float array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Floats to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Float</code> array, may be <code>null</code>\n+     * @return a <code>float</code> array\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static float[] toPrimitive(final Float[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_ARRAY;\n+        }\n+        final float[] result = new float[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].floatValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Floats to primitives handling null.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Float</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>float</code> array\n+     */\n+    public static float[] toPrimitive(final Float[] array, final float valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_ARRAY;\n+        }\n+        final float[] result = new float[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Float b = array[i];\n+            result[i] = (b == null ? valueForNull : b.floatValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive floats to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array a <code>float</code> array\n+     * @return a <code>Float</code> array\n+     */\n+    public static Float[] toObject(final float[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_FLOAT_OBJECT_ARRAY;\n+        }\n+        final Float[] result = new Float[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Float(array[i]);\n+        }\n+        return result;\n+    }\n+\n+    // Double array converters\n+    // ----------------------------------------------------------------------\n+    /**\n+     * <p>Converts an array of object Doubles to primitives.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Double</code> array, may be <code>null</code>\n+     * @return a <code>double</code> array\n+     * @throws NullPointerException if array content is <code>null</code>\n+     */\n+    public static double[] toPrimitive(final Double[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        }\n+        final double[] result = new double[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = array[i].doubleValue();\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of object Doubles to primitives handling null.</p>\n+     * \n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array  a <code>Double</code> array, may be <code>null</code>\n+     * @param valueForNull  the value to insert if <code>null</code> found\n+     * @return a <code>double</code> array\n+     */\n+    public static double[] toPrimitive(final Double[] array, final double valueForNull) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_ARRAY;\n+        }\n+        final double[] result = new double[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            Double b = array[i];\n+            result[i] = (b == null ? valueForNull : b.doubleValue());\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * <p>Converts an array of primitive doubles to objects.</p>\n+     *\n+     * <p>This method returns <code>null</code> if <code>null</code> input.</p>\n+     * \n+     * @param array a <code>double</code> array\n+     * @return a <code>Double</code> array\n+     */\n+    public static Double[] toObject(final double[] array) {\n+        if (array == null) {\n+            return null;\n+        } else if (array.length == 0) {\n+            return EMPTY_DOUBLE_OBJECT_ARRAY;\n+        }\n+        final Double[] result = new Double[array.length];\n+        for (int i = 0; i < array.length; i++) {\n+            result[i] = new Double(array[i]);\n+        }\n+        return result;\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author Moritz Petersen\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n- * @version $Id: ArrayUtilsTest.java,v 1.7 2003/06/25 23:33:47 scolebourne Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.8 2003/06/28 18:01:19 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         assertEquals(\"bar\", map.get(\"foo\"));\n         assertEquals(\"world\", map.get(\"hello\"));\n         \n-        try {\n-            ArrayUtils.toMap(null);\n-            fail(\"exception expected\");\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(null, ArrayUtils.toMap(null));\n         try {\n             ArrayUtils.toMap(new String[][] {{\"foo\", \"bar\"}, {\"short\"}});\n             fail(\"exception expected\");\n     // testToPrimitive/Object for boolean\n     //  -----------------------------------------------------------------------\n     public void testToPrimitive_boolean() {\n-        assertEquals(null, ArrayUtils.toPrimitive(null));\n+        final Boolean[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b));\n         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0]));\n         assertTrue(Arrays.equals(\n             new boolean[] {true, false, true},\n     }\n \n     public void testToObject_boolean() {\n-        assertEquals(null, ArrayUtils.toObject(null));\n+        final boolean[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n         assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0]));\n         assertTrue(Arrays.equals(\n             new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE},\n         );\n     }\n \n+    // testToPrimitive/Object for byte\n+    //  -----------------------------------------------------------------------\n+    public void testToPrimitive_byte() {\n+        final Byte[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n+            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), \n+                new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)}))\n+        );\n+\n+        try {\n+            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), null});\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testToPrimitive_byte_byte() {\n+        final Byte[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE));\n+        \n+        assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, \n+            ArrayUtils.toPrimitive(new Byte[0], (byte)1));\n+        \n+        assertTrue(Arrays.equals(\n+            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n+            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), \n+                new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)}, \n+                Byte.MIN_VALUE))\n+        );\n+        \n+        assertTrue(Arrays.equals(\n+            new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999},\n+            ArrayUtils.toPrimitive(new Byte[] {new Byte(Byte.MIN_VALUE), null, \n+                new Byte((byte)9999999)}, Byte.MAX_VALUE))\n+        );\n+    }\n+\n+    public void testToObject_byte() {\n+        final byte[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, \n+            ArrayUtils.toObject(new byte[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new Byte[] {new Byte(Byte.MIN_VALUE), \n+                new Byte(Byte.MAX_VALUE), new Byte((byte)9999999)},\n+                ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, \n+                (byte)9999999}))\n+        );\n+    }\n+\n+    // testToPrimitive/Object for short\n+    //  -----------------------------------------------------------------------\n+    public void testToPrimitive_short() {\n+        final Short[] b = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n+                new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n+        );\n+\n+        try {\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n+            fail();\n+        } catch (NullPointerException ex) {}\n+    }\n+\n+    public void testToPrimitive_short_short() {\n+        final Short[] s = null;\n+        assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE));\n+        \n+        assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0], \n+        Short.MIN_VALUE));\n+        \n+        assertTrue(Arrays.equals(\n+            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n+                new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n+        );\n+        \n+        assertTrue(Arrays.equals(\n+            new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n+            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n+                new Short((short)9999999)}, Short.MAX_VALUE))\n+        );\n+    }\n+\n+    public void testToObject_short() {\n+        final short[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+        \n+        assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, \n+        ArrayUtils.toObject(new short[0]));\n+        \n+        assertTrue(Arrays.equals(\n+            new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n+                new Short((short)9999999)},\n+            ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE, \n+                (short)9999999}))\n+        );\n+    }\n+\n+    //  testToPrimitive/Object for int\n+    //  -----------------------------------------------------------------------\n+     public void testToPrimitive_int() {\n+         final Integer[] b = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(b));\n+         assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));\n+         assertTrue(Arrays.equals(\n+             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n+                 new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n+         );\n+\n+         try {\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n+             fail();\n+         } catch (NullPointerException ex) {}\n+     }\n+\n+     public void testToPrimitive_int_int() {\n+         final Long[] l = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE));\n+         assertSame(ArrayUtils.EMPTY_INT_ARRAY, \n+         ArrayUtils.toPrimitive(new Integer[0], 1));\n+         assertTrue(Arrays.equals(\n+             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n+                 new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n+         assertTrue(Arrays.equals(\n+             new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n+                 null, new Integer(9999999)}, Integer.MAX_VALUE))\n+         );\n+     }\n+     \n+    public void testToObject_int() {\n+        final int[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+    \n+        assertSame(\n+            ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY,\n+            ArrayUtils.toObject(new int[0]));\n+    \n+        assertTrue(\n+            Arrays.equals(\n+                new Integer[] {\n+                    new Integer(Integer.MIN_VALUE),\n+                    new Integer(Integer.MAX_VALUE),\n+                    new Integer(9999999)},\n+            ArrayUtils.toObject(\n+                new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 })));\n+    }\n+\n+    //  testToPrimitive/Object for long\n+    //  -----------------------------------------------------------------------\n+     public void testToPrimitive_long() {\n+         final Long[] b = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(b));\n+         \n+         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, \n+            ArrayUtils.toPrimitive(new Long[0]));\n+         \n+         assertTrue(Arrays.equals(\n+             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n+                 new Long(Long.MAX_VALUE), new Long(9999999)}))\n+         );\n+\n+         try {\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), null});\n+             fail();\n+         } catch (NullPointerException ex) {}\n+     }\n+\n+     public void testToPrimitive_long_long() {\n+         final Long[] l = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE));\n+         \n+         assertSame(ArrayUtils.EMPTY_LONG_ARRAY, \n+         ArrayUtils.toPrimitive(new Long[0], 1));\n+         \n+         assertTrue(Arrays.equals(\n+             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n+                 new Long(Long.MAX_VALUE), new Long(9999999)},1)));\n+         \n+         assertTrue(Arrays.equals(\n+             new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Long[] {new Long(Long.MIN_VALUE), \n+                 null, new Long(9999999)}, Long.MAX_VALUE))\n+         );\n+     }\n+     \n+    public void testToObject_long() {\n+        final long[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+    \n+        assertSame(\n+            ArrayUtils.EMPTY_LONG_OBJECT_ARRAY,\n+            ArrayUtils.toObject(new long[0]));\n+    \n+        assertTrue(\n+            Arrays.equals(\n+                new Long[] {\n+                    new Long(Long.MIN_VALUE),\n+                    new Long(Long.MAX_VALUE),\n+                    new Long(9999999)},\n+            ArrayUtils.toObject(\n+                new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 })));\n+    }\n+\n+    //  testToPrimitive/Object for float\n+    //  -----------------------------------------------------------------------\n+     public void testToPrimitive_float() {\n+         final Float[] b = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(b));\n+         \n+         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, \n+            ArrayUtils.toPrimitive(new Float[0]));\n+         \n+         assertTrue(Arrays.equals(\n+             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n+                 new Float(Float.MAX_VALUE), new Float(9999999)}))\n+         );\n+\n+         try {\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n+             fail();\n+         } catch (NullPointerException ex) {}\n+     }\n+\n+     public void testToPrimitive_float_float() {\n+         final Float[] l = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE));\n+         \n+         assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY, \n+         ArrayUtils.toPrimitive(new Float[0], 1));\n+         \n+         assertTrue(Arrays.equals(\n+             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n+                 new Float(Float.MAX_VALUE), new Float(9999999)},1)));\n+         \n+         assertTrue(Arrays.equals(\n+             new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), \n+                 null, new Float(9999999)}, Float.MAX_VALUE))\n+         );\n+     }\n+     \n+    public void testToObject_float() {\n+        final float[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+    \n+        assertSame(\n+            ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY,\n+            ArrayUtils.toObject(new float[0]));\n+    \n+        assertTrue(\n+            Arrays.equals(\n+                new Float[] {\n+                    new Float(Float.MIN_VALUE),\n+                    new Float(Float.MAX_VALUE),\n+                    new Float(9999999)},\n+            ArrayUtils.toObject(\n+                new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 })));\n+    }\n+\n+    //  testToPrimitive/Object for double\n+    //  -----------------------------------------------------------------------\n+     public void testToPrimitive_double() {\n+         final Double[] b = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(b));\n+         \n+         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, \n+            ArrayUtils.toPrimitive(new Double[0]));\n+         \n+         assertTrue(Arrays.equals(\n+             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n+                 new Double(Double.MAX_VALUE), new Double(9999999)}))\n+         );\n+\n+         try {\n+             ArrayUtils.toPrimitive(new Float[] {new Float(Float.MIN_VALUE), null});\n+             fail();\n+         } catch (NullPointerException ex) {}\n+     }\n+\n+     public void testToPrimitive_double_double() {\n+         final Double[] l = null;\n+         assertEquals(null, ArrayUtils.toPrimitive(l, Double.MIN_VALUE));\n+         \n+         assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY, \n+         ArrayUtils.toPrimitive(new Double[0], 1));\n+         \n+         assertTrue(Arrays.equals(\n+             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n+                 new Double(Double.MAX_VALUE), new Double(9999999)},1)));\n+         \n+         assertTrue(Arrays.equals(\n+             new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999},\n+             ArrayUtils.toPrimitive(new Double[] {new Double(Double.MIN_VALUE), \n+                 null, new Double(9999999)}, Double.MAX_VALUE))\n+         );\n+     }\n+     \n+    public void testToObject_double() {\n+        final double[] b = null;\n+        assertEquals(null, ArrayUtils.toObject(b));\n+    \n+        assertSame(\n+            ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY,\n+            ArrayUtils.toObject(new double[0]));\n+    \n+        assertTrue(\n+            Arrays.equals(\n+                new Double[] {\n+                    new Double(Double.MIN_VALUE),\n+                    new Double(Double.MAX_VALUE),\n+                    new Double(9999999)},\n+            ArrayUtils.toObject(\n+                new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 })));\n+    }\n+\n }", "timestamp": 1056823279, "metainfo": ""}