{"sha": "a7573a0ff814bd1d0ddfdb0a1d9478bad7a44a1e", "log": "increase BitField test coverage as reported by clover  ", "commit": "\n--- a/src/test/org/apache/commons/lang/BitFieldTest.java\n+++ b/src/test/org/apache/commons/lang/BitFieldTest.java\n \n     private static BitField bf_multi  = new BitField(0x3F80);\n     private static BitField bf_single = new BitField(0x4000);\n+    private static BitField bf_zero = new BitField(0);\n \n     /**\n      * Constructor BitFieldTest\n         assertEquals(bf_multi.getValue(0), 0);\n         assertEquals(bf_single.getValue(-1), 1);\n         assertEquals(bf_single.getValue(0), 0);\n+        assertEquals(bf_zero.getValue(-1), 0);\n+        assertEquals(bf_zero.getValue(0), 0);\n     }\n \n     /**\n         assertEquals(bf_multi.getShortValue((short) 0), (short) 0);\n         assertEquals(bf_single.getShortValue((short) - 1), (short) 1);\n         assertEquals(bf_single.getShortValue((short) 0), (short) 0);\n+        assertEquals(bf_zero.getShortValue((short) -1), (short) 0);\n+        assertEquals(bf_zero.getShortValue((short) 0), (short) 0);\n     }\n \n     /**\n         assertEquals(bf_multi.getRawValue(0), 0);\n         assertEquals(bf_single.getRawValue(-1), 0x4000);\n         assertEquals(bf_single.getRawValue(0), 0);\n+        assertEquals(bf_zero.getRawValue(-1), 0);\n+        assertEquals(bf_zero.getRawValue(0), 0);\n     }\n \n     /**\n         assertEquals(bf_multi.getShortRawValue((short) 0), (short) 0);\n         assertEquals(bf_single.getShortRawValue((short) - 1), (short) 0x4000);\n         assertEquals(bf_single.getShortRawValue((short) 0), (short) 0);\n+        assertEquals(bf_zero.getShortRawValue((short) -1), (short) 0);\n+        assertEquals(bf_zero.getShortRawValue((short) 0), (short) 0);\n     }\n \n     /**\n      */\n     public void testIsSet() {\n         assertTrue(!bf_multi.isSet(0));\n+        assertTrue(!bf_zero.isSet(0));\n         for (int j = 0x80; j <= 0x3F80; j += 0x80) {\n             assertTrue(bf_multi.isSet(j));\n+        }\n+        for (int j = 0x80; j <= 0x3F80; j += 0x80) {\n+            assertTrue(!bf_zero.isSet(j));\n         }\n         assertTrue(!bf_single.isSet(0));\n         assertTrue(bf_single.isSet(0x4000));\n     public void testIsAllSet() {\n         for (int j = 0; j < 0x3F80; j += 0x80) {\n             assertTrue(!bf_multi.isAllSet(j));\n+            assertTrue(!bf_zero.isAllSet(j));\n         }\n         assertTrue(bf_multi.isAllSet(0x3F80));\n         assertTrue(!bf_single.isAllSet(0));\n             assertEquals(bf_multi.getValue(bf_multi.setValue(0, j)), j);\n             assertEquals(bf_multi.setValue(0, j), j << 7);\n         }\n+        for (int j = 0; j < 128; j++) {\n+          assertEquals(bf_zero.getValue(bf_zero.setValue(0, j)), 0);\n+          assertEquals(bf_zero.setValue(0, j), 0);\n+      }\n \n         // verify that excess bits are stripped off\n         assertEquals(bf_multi.setValue(0x3f80, 128), 0);\n             assertEquals(bf_multi.getShortValue(bf_multi.setShortValue((short) 0, (short) j)), (short) j);\n             assertEquals(bf_multi.setShortValue((short) 0, (short) j), (short) (j << 7));\n         }\n+        for (int j = 0; j < 128; j++) {\n+            assertEquals(bf_zero.getShortValue(bf_zero.setShortValue((short) 0, (short) j)), (short) 0);\n+            assertEquals(bf_zero.setShortValue((short) 0, (short) j), (short) (0));\n+        }\n \n         // verify that excess bits are stripped off\n         assertEquals(bf_multi.setShortValue((short) 0x3f80, (short) 128), (short) 0);\n     }\n \n     public void testByte() {\n+        assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true));\n         assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true));\n         assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true));\n         assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true));\n         assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true));\n         assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true));\n         assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true));\n+        assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false));\n         assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false));\n         assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false));\n         assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false));\n     public void testClear() {\n         assertEquals(bf_multi.clear(-1), 0xFFFFC07F);\n         assertEquals(bf_single.clear(-1), 0xFFFFBFFF);\n+        assertEquals(bf_zero.clear(-1), 0xFFFFFFFF);\n     }\n \n     /**\n     public void testClearShort() {\n         assertEquals(bf_multi.clearShort((short) - 1), (short) 0xC07F);\n         assertEquals(bf_single.clearShort((short) - 1), (short) 0xBFFF);\n+        assertEquals(bf_zero.clearShort((short) -1), (short) 0xFFFF);\n     }\n \n     /**\n     public void testSet() {\n         assertEquals(bf_multi.set(0), 0x3F80);\n         assertEquals(bf_single.set(0), 0x4000);\n+        assertEquals(bf_zero.set(0), 0);\n     }\n \n     /**\n     public void testSetShort() {\n         assertEquals(bf_multi.setShort((short) 0), (short) 0x3F80);\n         assertEquals(bf_single.setShort((short) 0), (short) 0x4000);\n+        assertEquals(bf_zero.setShort((short) 0), (short) 0);\n     }\n \n     /**\n     public void testSetBoolean() {\n         assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true));\n         assertEquals(bf_single.set(0), bf_single.setBoolean(0, true));\n+        assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true));\n         assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false));\n         assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false));\n+        assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false));\n     }\n \n     /**\n     public void testSetShortBoolean() {\n         assertEquals(bf_multi.setShort((short) 0), bf_multi.setShortBoolean((short) 0, true));\n         assertEquals(bf_single.setShort((short) 0), bf_single.setShortBoolean((short) 0, true));\n+        assertEquals(bf_zero.setShort((short) 0), bf_zero.setShortBoolean((short) 0, true));\n         assertEquals(bf_multi.clearShort((short) - 1), bf_multi.setShortBoolean((short) - 1, false));\n         assertEquals(bf_single.clearShort((short) - 1), bf_single.setShortBoolean((short) - 1, false));\n+        assertEquals(bf_zero.clearShort((short) -1), bf_zero.setShortBoolean((short) -1, false));\n     }\n \n }", "timestamp": 1124671797, "metainfo": ""}