{"sha": "3c5181185ebed83692c67273b85b54f89d3423dd", "log": "Fixed leftPad() and rightPad() to correctly handle multi letter pad strings   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.62 2003/07/18 02:06:24 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.63 2003/07/18 23:57:43 scolebourne Exp $\n  */\n public class StringUtils {\n \n         if (str == null) {\n             return null;\n         }\n-        if (padStr == null || padStr.length() == 0) {\n+        int padLen;\n+        if (padStr == null || (padLen = padStr.length()) == 0) {\n             throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n         }\n-        if (padStr.length() == 1 && size - str.length() <= PAD_LIMIT) {\n-           return rightPad(str, size, padStr.charAt(0));\n-        }\n-\n-        size = (size - str.length()) / padStr.length();\n-        if (size > 0) {\n-            str += repeat(padStr, size);\n-        }\n-        return str;\n+        int strLen = str.length();\n+        int pads = size - strLen;\n+        if (padLen == 1 && pads <= PAD_LIMIT) {\n+            return rightPad(str, size, padStr.charAt(0));\n+        }\n+        \n+        if (pads <= 0) {\n+            return str; // returns original String when possible\n+        }\n+        if (pads == padLen) {\n+            return str.concat(padStr);\n+        } else if (pads < padLen) {\n+            return str.concat(padStr.substring(0, pads));\n+        } else {\n+            char[] padding = new char[pads];\n+            char[] padChars = padStr.toCharArray();\n+            for (int i = 0; i < pads; i++) {\n+                padding[i] = padChars[i % padLen];\n+            }\n+            return str.concat(new String(padding));\n+        }\n     }\n \n     /**\n             return str; // returns original String when possible\n         }\n         if (pads > PAD_LIMIT) {\n-            return leftPad(str, size, ' ');\n+            return leftPad(str, size, String.valueOf(padChar));\n         }\n         return padding(pads, padChar).concat(str);\n     }\n         if (str == null) {\n             return null;\n         }\n-        if (padStr == null || padStr.length() == 0) {\n+        int padLen;\n+        if (padStr == null || (padLen = padStr.length()) == 0) {\n             throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n         }\n-        if (padStr.length() == 1 && size - str.length() <= PAD_LIMIT) {\n+        int strLen = str.length();\n+        int pads = size - strLen;\n+        if (padLen == 1 && pads <= PAD_LIMIT) {\n             return leftPad(str, size, padStr.charAt(0));\n         }\n-        size = (size - str.length()) / padStr.length();\n-        if (size > 0) {\n-            str = repeat(padStr, size) + str;\n-        }\n-        return str;\n+        \n+        if (pads <= 0) {\n+            return str; // returns original String when possible\n+        }\n+        if (pads == padLen) {\n+            return padStr.concat(str);\n+        } else if (pads < padLen) {\n+            return padStr.substring(0, pads).concat(str);\n+        } else {\n+            char[] padding = new char[pads];\n+            char[] padChars = padStr.toCharArray();\n+            for (int i = 0; i < pads; i++) {\n+                padding[i] = padChars[i % padLen];\n+            }\n+            return new String(padding).concat(str);\n+        }\n     }\n \n     // Centering\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n- * @version $Id: StringUtilsTest.java,v 1.26 2003/07/18 02:06:23 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.27 2003/07/18 23:57:43 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n \n         assertEquals(\" ab \", StringUtils.center(\"ab\", 4));\n         assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2));\n         assertEquals(\" a  \", StringUtils.center(\"a\", 4));\n+        assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n \n         assertEquals(null, StringUtils.center(null, -1, \" \"));\n         assertEquals(null, StringUtils.center(null, 4, \" \"));\n         assertEquals(\"abcd\", StringUtils.center(\"abcd\", 2, \" \"));\n         assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n         assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n+        assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n         try {\n             StringUtils.center(\"abc\", 4, null);\n             fail();", "timestamp": 1058572663, "metainfo": ""}