{"sha": "a76a3fc75bdab7cecf9198f1d6dea42bd0fae94c", "log": "Add extra example code javadoc and related tests bug 21797, from Phil Steitz   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.76 2003/07/21 00:41:13 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.77 2003/07/22 23:36:40 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n     // Joining\n     //-----------------------------------------------------------------------\n     /**\n-     * <p>Concatenates elements of an array into a single String.</p>\n-     *\n-     * <p>The difference from join is that concatenate has no delimiter.</p>\n+     * <p>Concatenates elements of an array into a single String.\n+     * Null objects or empty strings within the array are represented by \n+     * empty strings.</p>\n+     *\n+     * <p>The difference from join is that concatenate has no delimiter -- i.e., <br>\n+     * <code>StringUtils.concatenate(array) = StringUtils.join(array, null)</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.concatenate(null)            = null\n+     * StringUtils.concatenate([])              = \"\"\n+     * StringUtils.concatenate([null])          = \"\"\n+     * StringUtils.concatenate([\"a\", \"b\", \"c\"]) = \"abc\"\n+     * StringUtils.concatenate([null, \"\", \"a\"]) = \"a\"\n+     * </pre>\n      * \n      * @param array  the array of values to concatenate, may be null\n      * @return the concatenated String, <code>null</code> if null array input\n      * containing the provided list of elements.</p>\n      *\n      * <p>No delimiter is added before or after the list.\n+     * Null objects or empty strings within the array are represented by \n+     * empty strings.</p>\n+     *\n+     * <pre>\n+     * StringUtils.join(null, *)               = null\n+     * StringUtils.join([], *)                 = \"\"\n+     * StringUtils.join([null], *)             = \"\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], ';')  = \"a;b;c\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], null) = \"abc\"\n+     * StringUtils.join([null, \"\", \"a\"], ';')  = \";;a\"\n+     * </pre>\n      *\n      * @param array  the array of values to join together, may be null\n      * @param separator  the separator character to use\n      * containing the provided list of elements.</p>\n      *\n      * <p>No delimiter is added before or after the list.\n-     * A <code>null</code> separator is the same as an empty String (\"\").</p>\n+     * A <code>null</code> separator is the same as an empty String (\"\"). \n+     * Null objects or empty strings within the array are represented by \n+     * empty strings.</p>\n+     *\n+     * <pre>\n+     * StringUtils.join(null, *)                = null\n+     * StringUtils.join([], *)                  = \"\"\n+     * StringUtils.join([null], *)              = \"\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], \"--\")  = \"a--b--c\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], null)  = \"abc\"\n+     * StringUtils.join([\"a\", \"b\", \"c\"], \"\")    = \"abc\"\n+     * StringUtils.join([null, \"\", \"a\"], ',')   = \",,a\"\n+     * </pre>\n      *\n      * @param array  the array of values to join together, may be null\n      * @param separator  the separator character to use, null treated as \"\"\n      * <p>Joins the elements of the provided <code>Iterator</code> into\n      * a single String containing the provided elements.</p>\n      *\n-     * <p>No delimiter is added before or after the list.\n+     * <p>No delimiter is added before or after the list. Null objects or empty \n+     * strings within the iteration are represented by empty strings.</p>\n+     *\n+     * <p>See the examples here: {@link #join(Object[],char)}. </p>\n      *\n      * @param iterator  the <code>Iterator</code> of values to join together, may be null\n      * @param separator  the separator character to use\n      *\n      * <p>No delimiter is added before or after the list.\n      * A <code>null</code> separator is the same as an empty String (\"\").</p>\n+     *\n+     * <p>See the examples here: {@link #join(Object[],String)}. </p>\n      *\n      * @param iterator  the <code>Iterator</code> of values to join together, may be null\n      * @param separator  the separator character to use, null treated as \"\"\n     }\n \n     /**\n-     * <p>Overlay a part of a String with another String.</p>\n+     * <p>Overlays part of a String with another String.</p>\n      *\n      * <pre>\n      * StringUtils.overlayString(null, *, *, *)           = null\n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Remove one newline from end of a String if it's there,\n+     * <p>Removes one newline from end of a String if it's there,\n      * otherwise leave it alone.  A newline is &quot;<code>\\n</code>&quot;,\n      * &quot;<code>\\r</code>&quot;, or &quot;<code>\\r\\n</code>&quot;.</p>\n      *\n      * It now more closely matches Perl chomp.\n      * For the previous behavior, use {@link #slice(String)}.</p>\n      *\n+     * <pre>\n+     * StringUtils.chomp(null)          = null\n+     * StringUtils.chomp(\"\")            = \"\"\n+     * StringUtils.chomp(\"abc \\r\")      = \"abc \"\n+     * StringUtils.chomp(\"abc\\n\")       = \"abc\"\n+     * StringUtils.chomp(\"abc\\r\\n\")     = \"abc\"\n+     * StringUtils.chomp(\"abc\\r\\n\\r\\n\") = \"abc\\r\\n\"\n+     * StringUtils.chomp(\"abc\\n\\r\")     = \"abc\\n\"\n+     * StringUtils.chomp(\"abc\\n\\rabc\")  = \"abc\\n\\rabc\"\n+     * StringUtils.chomp(\"\\r\")          = \"\"\n+     * StringUtils.chomp(\"\\n\")          = \"\"\n+     * StringUtils.chomp(\"\\r\\n\")        = \"\"\n+     * </pre>\n+     *\n      * @param str  the String to chomp a newline from, may be null\n      * @return String without newline, <code>null</code> if null String input\n      */\n     }\n \n     /**\n-     * <p>Remove <code>separator</code> from the end of\n+     * <p>Removes <code>separator</code> from the end of\n      * <code>str</code> if it's there, otherwise leave it alone.</p>\n      *\n      * <p>NOTE: This method changed in version 2.0.\n      * It now more closely matches Perl chomp.\n-     * For the previous behavior, use {@link #slice(String,String)}.</p>\n+     * For the previous behavior, use {@link #slice(String,String)}.\n+     * This method uses {@link String#endsWith(String)}.</p>\n+     *\n+     * <pre>\n+     * StringUtils.chomp(null, *)         = null\n+     * StringUtils.chomp(\"\", *)           = \"\"\n+     * StringUtils.chomp(\"foobar\", \"bar\") = \"foo\"\n+     * StringUtils.chomp(\"foobar\", \"baz\") = \"foobar\"\n+     * StringUtils.chomp(\"foo\", \"foo\")    = \"\"\n+     * StringUtils.chomp(\"foo \", \"foo\")   = \"foo\"\n+     * StringUtils.chomp(\" foo\", \"foo\")   = \" \"\n+     * StringUtils.chomp(\"foo\", \"foooo\")  = \"foo\"\n+     * StringUtils.chomp(\"foo\", \"\")       = \"foo\"\n+     * StringUtils.chomp(\"foo\", null)     = \"foo\"\n+     * </pre>\n      *\n      * @param str  the String to chomp from, may be null\n      * @param separator  separator String, may be null\n      * <p>If the String ends in <code>\\r\\n</code>, then remove both\n      * of them.</p>\n      *\n+     * <pre>\n+     * StringUtils.chop(null)          = null\n+     * StringUtils.chop(\"\")            = \"\"\n+     * StringUtils.chop(\"abc \\r\")      = \"abc \"\n+     * StringUtils.chop(\"abc\\n\")       = \"abc\"\n+     * StringUtils.chop(\"abc\\r\\n\")     = \"abc\"\n+     * StringUtils.chop(\"abc\")         = \"ab\"\n+     * StringUtils.chop(\"abc\\nabc\")    = \"abc\\nab\"\n+     * StringUtils.chop(\"a\")           = \"\"\n+     * StringUtils.chop(\"\\r\")          = \"\"\n+     * StringUtils.chop(\"\\n\")          = \"\"\n+     * StringUtils.chop(\"\\r\\n\")        = \"\"\n+     * </pre>\n+     *\n      * @param str  the String to chop last character from, may be null\n      * @return String without last character, <code>null</code> if null String input\n      */\n     }\n \n     /**\n-     * <p>Remove <code>\\n</code> from end of a String if it's there.\n+     * <p>Removes <code>\\n</code> from end of a String if it's there.\n      * If a <code>\\r</code> precedes it, then remove that too.</p>\n      *\n      * @param str  the String to chop a newline from, must not be null\n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Remove the last newline, and everything after it from a String.</p>\n+     * <p>Removes the last newline, and everything after it from a String.</p>\n+     *\n+     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * An empty (\"\") string input will return the empty string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.slice(null)          = null\n+     * StringUtils.slice(\"\")            = \"\"\n+     * StringUtils.slice(\"abc \\n\")      = \"abc \"\n+     * StringUtils.slice(\"abc\\n\")       = \"abc\"\n+     * StringUtils.slice(\"abc\\r\\n\")     = \"abc\\r\"\n+     * StringUtils.slice(\"abc\")         = \"abc\"\n+     * StringUtils.slice(\"abc\\nabc\")    = \"abc\"\n+     * StringUtils.slice(\"abc\\nabc\\n\")  = \"abc\\nabc\"\n+     * StringUtils.slice(\"\\n\")          = \"\"\n+     * </pre>\n      *\n      * <p><em>(This method was formerly named chomp or chopNewline.)</em></p>\n      *\n     }\n \n     /**\n-     * <p>Find the last occurence of a separator String;\n-     * remove it and everything after it.</p>\n+     * <p>Finds the last occurence of a separator String,\n+     * returning everything before it. The separator is not returned.</p>\n+     *\n+     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * An empty (\"\") string input will return the empty string.\n+     * An empty or <code>null</code> separator will return the input string.</p>\n+     *\n+     * <p>This method is the opposite of {@link #sliceRemainder(String, String)}.</p>\n+     * \n+     * <pre>\n+     * StringUtils.slice(null, *)      = null\n+     * StringUtils.slice(\"\", *)        = \"\"\n+     * StringUtils.slice(\"abcba\", \"b\") = \"abc\"\n+     * StringUtils.slice(\"abc\", \"c\")   = \"ab\"\n+     * StringUtils.slice(\"a\", \"a\")     = \"\"\n+     * StringUtils.slice(\"a\", \"z\")     = \"a\"\n+     * StringUtils.slice(\"a\", null)    = \"a\"\n+     * StringUtils.slice(\"a\", \"\")      = \"a\"\n+     * </pre>\n      *\n      * <p><em>(This method was formerly named chomp.)</em></p>\n      *\n     }\n \n     /**\n-     * <p>Find the last occurence of a separator String, and return\n-     * everything after it.</p>\n+     * <p>Finds the last occurence of a separator String,\n+     * returning everything after it.</p>\n+     *\n+     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * An empty (\"\") string input will return the empty string.\n+     * An empty or <code>null</code> separator will return the empty string.</p>\n+     * \n+     * <p>This method is the opposite of {@link #slice(String, String)}.</p>\n+     *\n+     * <pre>\n+     * StringUtils.sliceRemainder(null, *)         = null\n+     * StringUtils.sliceRemainder(\"\", *)           = \"\"\n+     * StringUtils.sliceRemainder(*, \"\")           = \"\"\n+     * StringUtils.sliceRemainder(*, null)         = \"\"\n+     * StringUtils.sliceRemainder(\"abc\", \"a\")      = \"bc\"\n+     * StringUtils.sliceRemainder(\"abcba\", \"b\")    = \"a\"\n+     * StringUtils.sliceRemainder(\"abc\", \"c\")      = \"\"\n+     * StringUtils.sliceRemainder(\"a\", \"a\")        = \"\"\n+     * StringUtils.sliceRemainder(\"a\", \"z\")        = \"\"\n+     * </pre>\n      *\n      * <p><em>(This method was formerly named getchomp. Also, now it does not\n      * include the separator in the return value.)</em></p>\n     }\n \n     /**\n-     * <p>Find the first occurence of a separator String, and return\n-     * everything after it.</p>\n+     * <p>Finds the first occurence of a separator String,\n+     * returning everything before it. The separator is not returned.</p>\n+     *\n+     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * An empty (\"\") string input will return the empty string.\n+     * An empty or <code>null</code> separator will return the input string.</p>\n+     * \n+     * <p>This method is the opposite of {@link #sliceFirst(String, String)}.</p>\n+     *\n+     * <pre>\n+     * StringUtils.sliceFirst(null, *)         = null\n+     * StringUtils.sliceFirst(\"\", *)           = \"\"\n+     * StringUtils.sliceFirst(\"abc\", \"a\")      = \"\"\n+     * StringUtils.sliceFirst(\"abcba\", \"b\")    = \"a\"\n+     * StringUtils.sliceFirst(\"abc\", \"c\")      = \"ab\"\n+     * StringUtils.sliceFirst(\"abc\", \"d\")      = \"\"\n+     * StringUtils.sliceFirst(\"abc\", \"\")       = \"abc\"\n+     * StringUtils.sliceFirst(\"abc\", null)     = \"abc\"\n+     * </pre>\n+     *\n+     * <p><em>(This method was formerly named getPrechomp.  Also, it used to\n+     * include the separator, but now it does not.)</em></p>\n+     *\n+     * @param str  the String to slice from, may be null\n+     * @param separator  the String to slice, may be null\n+     * @return sliced String, <code>null</code> if null String input\n+     */\n+    public static String sliceFirst(String str, String separator) {\n+        if (str == null || separator == null || str.length() == 0 || separator.length() == 0) {\n+            return str;\n+        }\n+        int idx = str.indexOf(separator);\n+        if (idx != -1) {\n+            return str.substring(0, idx);\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * <p>Finds the first occurence of a separator String,\n+     * returning everything after it.</p>\n+     *\n+     * <p>A <code>null</code> string input will return <code>null</code>.\n+     * An empty (\"\") string input will return the empty string.\n+     * An empty or <code>null</code> separator will return the empty string.</p>\n+     * \n+     * <p>This method is the opposite of {@link #sliceFirst(String, String)}.</p>\n+     *\n+     * <pre>\n+     * StringUtils.sliceFirstRemainder(null, *)         = null\n+     * StringUtils.sliceFirstRemainder(\"\", *)           = \"\"\n+     * StringUtils.sliceFirstRemainder(*, \"\")           = \"\"\n+     * StringUtils.sliceFirstRemainder(*, null)         = \"\"\n+     * StringUtils.sliceFirstRemainder(\"abc\", \"a\")      = \"bc\"\n+     * StringUtils.sliceFirstRemainder(\"abcba\", \"b\")    = \"cba\"\n+     * StringUtils.sliceFirstRemainder(\"abc\", \"c\")      = \"\"\n+     * StringUtils.sliceFirstRemainder(\"abc\", \"d\")      = \"abc\"\n+     * </pre>\n      *\n      * <p><em>(This method was formerly named prechomp.  Also, previously\n      * it included the separator in the return value; now it does not.)</em></p>\n             return str.substring(idx + separator.length());\n         } else {\n             return str;\n-        }\n-    }\n-\n-    /**\n-     * <p>Find the first occurence of a separator String;\n-     * return everything before it (but not including the separator).</p>\n-     *\n-     * <p><em>(This method was formerly named getPrechomp.  Also, it used to\n-     * include the separator, but now it does not.)</em></p>\n-     *\n-     * @param str  the String to slice from, may be null\n-     * @param separator  the String to slice, may be null\n-     * @return sliced String, <code>null</code> if null String input\n-     */\n-    public static String sliceFirst(String str, String separator) {\n-        if (str == null || separator == null || str.length() == 0 || separator.length() == 0) {\n-            return str;\n-        }\n-        int idx = str.indexOf(separator);\n-        if (idx != -1) {\n-            return str.substring(0, idx);\n-        } else {\n-            return \"\";\n         }\n     }\n \n     //-----------------------------------------------------------------------\n     \n     /**\n-     * <p>How many times is the substring in the larger String.</p>\n-     *\n-     * <p>A <code>null</code> String input returns <code>0</code>.</p>\n+     * <p>Counts how many times the substring appears in the larger String.</p>\n+     *\n+     * <p>A <code>null</code> or empty (\"\") String input returns <code>0</code>.</p>\n      * \n      * <pre>\n      * StringUtils.countMatches(null, *)       = 0\n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Reverse a String as per {@link StringBuffer#reverse()}.</p>\n+     * <p>Reverses a String as per {@link StringBuffer#reverse()}.</p>\n      *\n      * <p><A code>null</code> String returns <code>null</code>.</p>\n      * \n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Turn \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n+     * <p>Abbreviates a String using ellipses. This will turn \n+     * \"Now is the time for all good men\" into \"Now is the time for...\"</p>\n      *\n      * <p>Specifically:\n      * <ul>\n      *   <li>If <code>str</code> is less than <code>maxWidth</code> characters\n      *       long, return it.</li>\n      *   <li>Else abbreviate it to <code>(substring(str, 0, max-3) + \"...\")</code>.</li>\n-     *   <li>If <code>maxWidth</code> is less than </code>3, throw an\n+     *   <li>If <code>maxWidth</code> is less than <code>4</code>, throw an\n      *       <code>IllegalArgumentException</code>.</li>\n      *   <li>In no case will it return a String of length greater than\n      *       <code>maxWidth</code>.</li>\n      * </ul>\n      * </p>\n      *\n+     * <pre>\n+     * StringUtils.abbreviate(null, *)      = null\n+     * StringUtils.abbreviate(\"\", 4)        = \"\"\n+     * StringUtils.abbreviate(\"abcdefg\", 6) = \"abc...\"\n+     * StringUtils.abbreviate(\"abcdefg\", 7) = \"abcdefg\"\n+     * StringUtils.abbreviate(\"abcdefg\", 8) = \"abcdefg\"\n+     * StringUtils.abbreviate(\"abcdefg\", 4) = \"a...\"\n+     * StringUtils.abbreviate(\"abcdefg\", 3) = IllegalArgumentException\n+     * </pre>\n+     *\n      * @param str  the String to check, may be null\n      * @param maxWidth  maximum length of result String, must be at least 4\n      * @return abbreviated String, <code>null</code> if null String input\n     }\n \n     /**\n-     * <p>Turn \"Now is the time for all good men\" into \"...is the time for...\"</p>\n+     * <p>Abbreviates a String using ellipses. This will turn \n+     * \"Now is the time for all good men\" into \"...is the time for...\"</p>\n      *\n      * <p>Works like <code>abbreviate(String, int)</code>, but allows you to specify\n      * a \"left edge\" offset.  Note that this left edge is not necessarily going to\n      *\n      * <p>In no case will it return a String of length greater than\n      * <code>maxWidth</code>.</p>\n+     *\n+     * <pre>\n+     * StringUtils.abbreviate(null, *, *)                = null\n+     * StringUtils.abbreviate(\"\", 0, 4)                  = \"\"\n+     * StringUtils.abbreviate(\"abcdefghijklmno\", -1, 10) = \"abcdefg...\"\n+     * StringUtils.abbreviate(\"abcdefghijklmno\", 0, 10)  = \"abcdefg...\"\n+     * StringUtils.abbreviate(\"abcdefghijklmno\", 1, 10)  = \"abcdefg...\"\n+     * StringUtils.abbreviate(\"abcdefghijklmno\", 4, 10)  = \"abcdefg...\"\n+     * StringUtils.abbreviate(\"abcdefghijklmno\", 5, 10)  = \"...fghi...\"\n+     * StringUtils.abbreviate(\"abcdefghijklmno\", 6, 10)  = \"...ghij...\"\n+     * StringUtils.abbreviate(\"abcdefghijklmno\", 8, 10)  = \"...ijklmno\"\n+     * StringUtils.abbreviate(\"abcdefghijklmno\", 10, 10) = \"...ijklmno\"\n+     * StringUtils.abbreviate(\"abcdefghijklmno\", 12, 10) = \"...ijklmno\"\n+     * StringUtils.abbreviate(\"abcdefghij\", 0, 3)        = IllegalArgumentException\n+     * StringUtils.abbreviate(\"abcdefghij\", 5, 6)        = IllegalArgumentException\n+     * </pre>\n      *\n      * @param str  the String to check, may be null\n      * @param offset  left edge of source String\n     //-----------------------------------------------------------------------\n \n     /**\n-     * <p>Compare two Strings, and return the portion where they differ.\n+     * <p>Compares two Strings, and returns the portion where they differ.\n      * (More precisely, return the remainder of the second String,\n      * starting from where it's different from the first.)</p>\n      *\n     }\n \n     /**\n-     * <p>Compare two Strings, and return the index at which the\n+     * <p>Compares two Strings, and returns the index at which the\n      * Strings begin to differ.</p>\n      * \n      * <p>For example, \n      * <p>Find the Levenshtein distance between two Strings.</p>\n      *\n      * <p>This is the number of changes needed to change one String into\n-     * another. Where each change is a single character modification.</p>\n-     *\n-     * <p>This implemmentation of the levenshtein distance algorithm\n+     * another, where each change is a single character modification (deletion, \n+     * insertion or substitution).</p>\n+     *\n+     * <p>This implementation of the Levenshtein distance algorithm\n      * is from <a href=\"http://www.merriampark.com/ld.htm\">http://www.merriampark.com/ld.htm</a></p>\n+     *\n+     * <pre>\n+     * StringUtils.getLevenshteinDistance(null, *)             = IllegalArgumentException\n+     * StringUtils.getLevenshteinDistance(*, null)             = IllegalArgumentException\n+     * StringUtils.getLevenshteinDistance(\"\",\"\")               = 0\n+     * StringUtils.getLevenshteinDistance(\"\",\"a\")              = 1\n+     * StringUtils.getLevenshteinDistance(\"aaapppp\", \"\")       = 7\n+     * StringUtils.getLevenshteinDistance(\"frog\", \"fog\")       = 1\n+     * StringUtils.getLevenshteinDistance(\"fly\", \"ant\")        = 3\n+     * StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") = 7\n+     * StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") = 7\n+     * StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") = 8\n+     * StringUtils.getLevenshteinDistance(\"hello\", \"hallo\")    = 1\n+     * </pre>\n      * \n      * @param s  the first String, must not be null\n      * @param t  the second String, must not be null\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.36 2003/07/20 23:57:26 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.37 2003/07/22 23:36:39 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n \n     private static final String[] ARRAY_LIST = { \"foo\", \"bar\", \"baz\" };\n     private static final String[] EMPTY_ARRAY_LIST = {};\n+    private static final String[] NULL_ARRAY_LIST = {null};\n+    private static final String[] MIXED_ARRAY_LIST = {null, \"\", \"foo\"};\n+    private static final Object[] MIXED_TYPE_LIST = {new String(\"foo\"), new Long(2)};\n \n     private static final String SEPARATOR = \",\";\n     private static final char   SEPARATOR_CHAR = ';';\n                      \"Hello aPACHE\", StringUtils.swapCase(\"hELLO Apache\") );\n     }\n \n-    public void testJoin() {\n+    public void testJoin_ArrayChar() {\n+        assertEquals(null, StringUtils.join((Object[]) null, ','));\n+        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n+        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));\n+        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));\n+    }\n+    \n+    public void testJoin_ArrayString() {\n+        assertEquals(null, StringUtils.join((Object[]) null, null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, \"\"));\n+        \n+        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST, null));\n+        \n+        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, null));\n+        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, \"\"));\n+        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n+\n+        assertEquals(TEXT_LIST, StringUtils.join(ARRAY_LIST, SEPARATOR));\n+        assertEquals(\",,foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR));\n+        assertEquals(\"foo,2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR));\n+    }\n+    \n+    public void testJoin_IteratorChar() {\n+        assertEquals(null, StringUtils.join((Iterator) null, ','));\n+        assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n+    }\n+    \n+    public void testJoin_IteratorString() {\n+        assertEquals(null, StringUtils.join((Iterator) null, null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n+        assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), \"\"));\n+        \n+        assertEquals(\"\", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), null));\n+        \n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), null));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), \"\"));\n+        assertEquals(\"\", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR));\n+        \n+        assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n+    }\n+    \n+    public void testConcatenate_Array() {\n         assertEquals(null, StringUtils.concatenate(null));\n-        assertEquals(null, StringUtils.join((Object[]) null, null));\n-        assertEquals(null, StringUtils.join((Object[]) null, ','));\n-        assertEquals(null, StringUtils.join((Iterator) null, null));\n-        assertEquals(null, StringUtils.join((Iterator) null, ','));\n-        \n-        assertEquals(\"concatenate(Object[]) failed\",\n-                     TEXT_LIST_NOSEP, StringUtils.concatenate(ARRAY_LIST));\n-        assertEquals(\"join(Object[], String) failed\", TEXT_LIST,\n-                     StringUtils.join(ARRAY_LIST, SEPARATOR));\n-        assertEquals(\"join(Iterator, String) failed\", TEXT_LIST,\n-                     StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),\n-                                      SEPARATOR));\n-\n-        assertEquals(\"join(Object[], char) failed\", TEXT_LIST_CHAR,\n-                     StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n-        assertEquals(\"join(Iterator, char) failed\", TEXT_LIST_CHAR,\n-                     StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),\n-                                      SEPARATOR_CHAR));\n-\n-        assertEquals(\"join(Object[], null) failed\", TEXT_LIST_NOSEP,\n-                     StringUtils.join(ARRAY_LIST, null));\n-        assertEquals(\"join(Iterator, null) failed\", TEXT_LIST_NOSEP,\n-                     StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(),\n-                                      null));\n-\n-        assertEquals(\"concatenate(Object[]) failed\",\n-                     \"\", StringUtils.concatenate(EMPTY_ARRAY_LIST));\n-        assertEquals(\"join(Object[], String) failed\", \"\",\n-                     StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR));\n-        assertEquals(\"join(Iterator, String) failed\", \"\",\n-                     StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),\n-                                      SEPARATOR));\n-\n-        assertEquals(\"join(Object[], char) failed\", \"\",\n-                     StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));\n-        assertEquals(\"join(Iterator, char) failed\", \"\",\n-                     StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),\n-                                      SEPARATOR_CHAR));\n-\n-        assertEquals(\"join(Object[], null) failed\", \"\",\n-                     StringUtils.join(EMPTY_ARRAY_LIST, null));\n-        assertEquals(\"join(Iterator, null) failed\", \"\",\n-                     StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(),\n-                                      null));\n-    }\n+        assertEquals(\"\", StringUtils.concatenate(EMPTY_ARRAY_LIST));\n+        assertEquals(\"\", StringUtils.concatenate(NULL_ARRAY_LIST));\n+        assertEquals(\"foo\", StringUtils.concatenate(MIXED_ARRAY_LIST));\n+        assertEquals(\"foo2\", StringUtils.concatenate(MIXED_TYPE_LIST));\n+    }\n+        \n+        \n \n     public void testSplit_String() {\n         assertEquals(null, StringUtils.split(null));\n             { FOO + \"\\r\\n\", FOO } ,\n             { FOO + \"\\n\" , FOO } ,\n             { FOO + \"\\r\", FOO },\n+            { FOO + \" \\r\", FOO + \" \" },\n             { \"foo\", \"fo\"},\n             { \"foo\\nfoo\", \"foo\\nfo\" },\n             { \"\\n\", \"\" },\n     public void testChomp() {\n \n         String[][] chompCases = {\n-            { FOO + \"\\r\\n\", FOO } ,\n-            { FOO + \"\\n\" , FOO } ,\n+            { FOO + \"\\r\\n\", FOO },\n+            { FOO + \"\\n\" , FOO },\n             { FOO + \"\\r\", FOO },\n+            { FOO + \" \\r\", FOO + \" \" },\n             { FOO, FOO },\n             { FOO + \"\\n\\n\", FOO + \"\\n\"},\n+            { FOO + \"\\r\\n\\r\\n\", FOO + \"\\r\\n\" },\n             { \"foo\\nfoo\", \"foo\\nfoo\" },\n+            { \"foo\\n\\rfoo\", \"foo\\n\\rfoo\" },\n             { \"\\n\", \"\" },\n             { \"\\r\", \"\" },\n             { \"\\r\\n\", \"\" },\n+            { \"\", \"\" },\n+            { null, null },\n+            { FOO + \"\\n\\r\", FOO + \"\\n\"}\n         };\n         for (int i = 0; i < chompCases.length; i++) {\n             String original = chompCases[i][0];\n                 \"foobar\", StringUtils.chomp(\"foobar\", \"baz\"));\n         assertEquals(\"chomp(String, String) failed\",\n                 \"foo\", StringUtils.chomp(\"foo\", \"foooo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"foobar\", StringUtils.chomp(\"foobar\", \"\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"foobar\", StringUtils.chomp(\"foobar\", null));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"\", StringUtils.chomp(\"\", \"foo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"\", StringUtils.chomp(\"\", null));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"\", StringUtils.chomp(\"\", \"\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                null, StringUtils.chomp(null, \"foo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                null, StringUtils.chomp(null, null));\n+        assertEquals(\"chomp(String, String) failed\",\n+                null, StringUtils.chomp(null, \"\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"\", StringUtils.chomp(\"foo\", \"foo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \" \", StringUtils.chomp(\" foo\", \"foo\"));\n+        assertEquals(\"chomp(String, String) failed\",\n+                \"foo \", StringUtils.chomp(\"foo \", \"foo\"));\n     }\n \n     public void testChopNewLine() {\n             {\"foo\\nbar\\nbaz\", \"foo\\nbar\"},\n             {null, null},\n             {\"\", \"\"},\n+            {\"\\n\", \"\"},\n+            {\"abc \\n\", \"abc \"},\n+            {\"abc\\r\\n\", \"abc\\r\"},\n             {\"foo\", \"foo\"},\n         };\n         for (int i = 0; i < sliceCases.length; i++) {\n             assertEquals(\"slice(String) failed\",\n                     expectedResult, StringUtils.slice(original));\n         }\n-\n-        String original = \"fooXXbarXXbaz\";\n-        String sep = \"XX\";\n-\n-        assertEquals(\"fooXXbar\", StringUtils.slice(original, sep) );\n-        assertEquals(null, StringUtils.slice(null, sep) );\n-        assertEquals(null, StringUtils.slice(null, null) );\n-        assertEquals(\"foo\", StringUtils.slice(\"foo\", null) );\n-        assertEquals(\"foo\", StringUtils.slice(\"foo\", \"b\") );\n-        assertEquals(\"fo\", StringUtils.slice(\"foo\", \"o\") );\n-\n-        assertEquals(\"baz\", StringUtils.sliceRemainder(original, sep) );\n-        assertEquals(null, StringUtils.sliceRemainder(null, sep) );\n-        assertEquals(null, StringUtils.sliceRemainder(null, null) );\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"foo\", null) );\n-        assertEquals(\"\", StringUtils.sliceRemainder(\"foo\", \"b\") );\n-        assertEquals(\"t\", StringUtils.sliceRemainder(\"foot\", \"o\") );\n-\n-        assertEquals(\"foo\", StringUtils.sliceFirst(original, sep) );\n-\n-        assertEquals(\"barXXbaz\", StringUtils.sliceFirstRemainder(original, sep) );\n-\n+    }\n+    \n+    public void testSlice_StringString() {\n+        assertEquals(\"fooXXbar\", StringUtils.slice(\"fooXXbarXXbaz\", \"XX\"));\n+\n+        assertEquals(null, StringUtils.slice(null, null));\n+        assertEquals(null, StringUtils.slice(null, \"\"));\n+        assertEquals(null, StringUtils.slice(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.slice(\"\", null));\n+        assertEquals(\"\", StringUtils.slice(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.slice(\"\", \"XX\"));\n+\n+        assertEquals(\"foo\", StringUtils.slice(\"foo\", null));\n+        assertEquals(\"foo\", StringUtils.slice(\"foo\", \"b\"));\n+        assertEquals(\"fo\", StringUtils.slice(\"foo\", \"o\"));\n+        assertEquals(\"abc\\r\\n\", StringUtils.slice(\"abc\\r\\n\", \"d\"));\n+        assertEquals(\"abc\", StringUtils.slice(\"abcdabc\", \"d\"));\n+        assertEquals(\"abcdabc\", StringUtils.slice(\"abcdabcd\", \"d\"));\n+        assertEquals(\"a\", StringUtils.slice(\"abc\", \"b\"));\n+        assertEquals(\"abc \", StringUtils.slice(\"abc \\n\", \"\\n\"));\n+        assertEquals(\"a\", StringUtils.slice(\"a\", null));\n+        assertEquals(\"a\", StringUtils.slice(\"a\", \"\"));\n+        assertEquals(\"\", StringUtils.slice(\"a\", \"a\"));\n+    }\n+    \n+    public void testSliceRemainder_StringString() {\n+        assertEquals(\"baz\", StringUtils.sliceRemainder(\"fooXXbarXXbaz\", \"XX\"));\n+\n+        assertEquals(null, StringUtils.sliceRemainder(null, null));\n+        assertEquals(null, StringUtils.sliceRemainder(null, \"\"));\n+        assertEquals(null, StringUtils.sliceRemainder(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.sliceRemainder(\"\", null));\n+        assertEquals(\"\", StringUtils.sliceRemainder(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.sliceRemainder(\"\", \"a\"));\n+\n+        assertEquals(\"\", StringUtils.sliceRemainder(\"foo\", null));\n+        assertEquals(\"\", StringUtils.sliceRemainder(\"foo\", \"b\"));\n+        assertEquals(\"t\", StringUtils.sliceRemainder(\"foot\", \"o\"));\n+        assertEquals(\"bc\", StringUtils.sliceRemainder(\"abc\", \"a\"));\n+        assertEquals(\"a\", StringUtils.sliceRemainder(\"abcba\", \"b\"));\n+        assertEquals(\"\", StringUtils.sliceRemainder(\"abc\", \"c\"));\n+        assertEquals(\"\", StringUtils.sliceRemainder(\"\", \"d\"));\n+        assertEquals(\"\", StringUtils.sliceRemainder(\"abc\", \"\"));\n+    }        \n+        \n+    public void testSliceFirst_StringString() {\n+        assertEquals(\"foo\", StringUtils.sliceFirst(\"fooXXbarXXbaz\", \"XX\"));\n+\n+        assertEquals(null, StringUtils.sliceFirst(null, null));\n+        assertEquals(null, StringUtils.sliceFirst(null, \"\"));\n+        assertEquals(null, StringUtils.sliceFirst(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.sliceFirst(\"\", null));\n+        assertEquals(\"\", StringUtils.sliceFirst(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.sliceFirst(\"\", \"XX\"));\n+        \n+        assertEquals(\"foo\", StringUtils.sliceFirst(\"foo\", null));\n+        assertEquals(\"\", StringUtils.sliceFirst(\"foo\", \"b\"));\n+        assertEquals(\"f\", StringUtils.sliceFirst(\"foot\", \"o\"));\n+        assertEquals(\"\", StringUtils.sliceFirst(\"abc\", \"a\"));\n+        assertEquals(\"a\", StringUtils.sliceFirst(\"abcba\", \"b\"));\n+        assertEquals(\"ab\", StringUtils.sliceFirst(\"abc\", \"c\"));\n+        assertEquals(\"abc\", StringUtils.sliceFirst(\"abc\", \"\"));\n+        assertEquals(\"\", StringUtils.sliceFirst(\"abc\", \"d\"));\n+    }\n+    \n+    public void testSliceFirstRemainder_StringString() {\n+        assertEquals(\"barXXbaz\", StringUtils.sliceFirstRemainder(\"fooXXbarXXbaz\", \"XX\"));\n+        \n+        assertEquals(null, StringUtils.sliceFirstRemainder(null, null));\n+        assertEquals(null, StringUtils.sliceFirstRemainder(null, \"\"));\n+        assertEquals(null, StringUtils.sliceFirstRemainder(null, \"XX\"));\n+        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"\", null));\n+        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"\", \"\"));\n+        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"\", \"XX\"));\n+        \n+        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"foo\", null));\n+        assertEquals(\"foo\", StringUtils.sliceFirstRemainder(\"foo\", \"b\"));\n+        assertEquals(\"ot\", StringUtils.sliceFirstRemainder(\"foot\", \"o\"));\n+        assertEquals(\"bc\", StringUtils.sliceFirstRemainder(\"abc\", \"a\"));\n+        assertEquals(\"cba\", StringUtils.sliceFirstRemainder(\"abcba\", \"b\"));\n+        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"abc\", \"c\"));\n+        assertEquals(\"\", StringUtils.sliceFirstRemainder(\"abc\", \"\"));\n+        assertEquals(\"abc\", StringUtils.sliceFirstRemainder(\"abc\", \"d\"));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\"raspberry p...\", StringUtils.abbreviate(raspberry, 14));\n         assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 15));\n         assertEquals(\"raspberry peach\", StringUtils.abbreviate(\"raspberry peach\", 16));\n+        assertEquals(\"abc...\", StringUtils.abbreviate(\"abcdefg\", 6));\n+        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 7));\n+        assertEquals(\"abcdefg\", StringUtils.abbreviate(\"abcdefg\", 8));\n+        assertEquals(\"a...\", StringUtils.abbreviate(\"abcdefg\", 4));\n+        assertEquals(\"\", StringUtils.abbreviate(\"\", 4));\n+        \n+        try {\n+            String res = StringUtils.abbreviate(\"abc\", 3);\n+            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+                // empty\n+        }              \n     }\n     \n     public void testAbbreviate_StringIntInt() {\n         assertEquals(null, StringUtils.abbreviate(null, 10, 12));\n         assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n         assertEquals(\"\", StringUtils.abbreviate(\"\", 2, 10));\n+        \n+        try {\n+            String res = StringUtils.abbreviate(\"abcdefghij\", 0, 3);\n+            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+                // empty\n+        }      \n+        try {\n+            String res = StringUtils.abbreviate(\"abcdefghij\", 5, 6);\n+            fail(\"StringUtils.abbreviate expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+                // empty\n+        }      \n+        \n \n         String raspberry = \"raspberry peach\";\n         assertEquals(\"raspberry peach\", StringUtils.abbreviate(raspberry, 11, 15));\n         assertEquals(3, StringUtils.getLevenshteinDistance(\"fly\", \"ant\") );\n         assertEquals(7, StringUtils.getLevenshteinDistance(\"elephant\", \"hippo\") );\n         assertEquals(7, StringUtils.getLevenshteinDistance(\"hippo\", \"elephant\") );\n+        assertEquals(8, StringUtils.getLevenshteinDistance(\"hippo\", \"zzzzzzzz\") );\n+        assertEquals(8, StringUtils.getLevenshteinDistance(\"zzzzzzzz\", \"hippo\") );\n         assertEquals(1, StringUtils.getLevenshteinDistance(\"hello\", \"hallo\") );\n+        try {\n+            int d = StringUtils.getLevenshteinDistance(\"a\", null);\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // empty\n+        }\n+        try {\n+            int d = StringUtils.getLevenshteinDistance(null, \"a\");\n+            fail(\"expecting IllegalArgumentException\");\n+        } catch (IllegalArgumentException ex) {\n+            // empty\n+        }\n     }\n \n }", "timestamp": 1058917000, "metainfo": ""}