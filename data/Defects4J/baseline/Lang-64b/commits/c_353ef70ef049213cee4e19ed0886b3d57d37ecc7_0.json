{"sha": "353ef70ef049213cee4e19ed0886b3d57d37ecc7", "log": "Bug #14357 fixed. Mohan's patch makes removeCommonFrames public, and adds an isThrowableNested to ExceptionUtils.  It adds static attributes to decide if the stack trace should be topDown and if the stack traces should be trimmed on repeat. If running 1.4 or higher, it uses the default stack trace, and the functionality of NestableError, NestableException and NestableRuntimeException getMessage()s all change. Accompanying these changes are numerous tests.  Submitted by:\tMohan Kishore   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * @author Dmitri Plotnikov\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.22 2003/03/23 17:47:51 scolebourne Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.23 2003/05/14 02:59:13 bayard Exp $\n  */\n public class ExceptionUtils {\n     /**\n      * @param causeFrames   stack trace of a cause throwable\n      * @param wrapperFrames stack trace of a wrapper throwable \n      */\n-    private static void removeCommonFrames(List causeFrames, List wrapperFrames) {\n+    public static void removeCommonFrames(List causeFrames, List wrapperFrames) {\n         int causeFrameIndex = causeFrames.size() - 1;\n         int wrapperFrameIndex = wrapperFrames.size() - 1;\n         while (causeFrameIndex >= 0 && wrapperFrameIndex >= 0) {\n         }\n         return list;\n     }\n+    \n+    private static Object getCauseMethod = null;\n+    static {\n+        try {\n+            getCauseMethod = Throwable.class.getMethod(\"getCause\", null);\n+        } catch (Exception e) {\n+            // ignore\n+        }\n+    }\n+    /**\n+     * Checks if the Throwable class has a <code>getCause</code> method.\n+     */\n+    public static boolean isThrowableNested() {\n+        return (getCauseMethod != null);\n+    }\n }\n--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java\n import java.io.PrintStream;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.util.*;\n \n /**\n  * <code>NestableDelegate</code> is a shared implementation of the nestable\n  * @author Sean C. Sullivan\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: NestableDelegate.java,v 1.12 2003/01/25 13:06:26 scolebourne Exp $\n+ * @version $Id: NestableDelegate.java,v 1.13 2003/05/14 02:59:13 bayard Exp $\n  */\n public class NestableDelegate implements java.io.Serializable {\n \n      * org.apache.commons.lang.exception.Nestable} implementation).\n      */\n     private Throwable nestable = null;\n+    \n+    /**\n+     * Whether to print the stack trace top-down.\n+     */\n+    public static boolean topDown = true;\n+    \n+    /**\n+     * Whether to trim the repeated stack trace.\n+     */\n+    public static boolean trimStackFrames = true;\n \n     /**\n      * Constructs a new <code>NestableDelegate</code> instance to manage the\n \n     /**\n      * Prints the stack trace of this exception to the specified\n-     * writer.\n+     * writer. If the Throwable class has a <code>getCause</code>\n+     * method (i.e. running on jre1.4 or higher), this method just \n+     * uses Throwable's printStackTrace() method. Otherwise, generates\n+     * the stack-trace, by taking into account the 'topDown' and \n+     * 'trimStackFrames' parameters. The topDown and trimStackFrames \n+     * are set to 'true' by default (produces jre1.4-like stack trace).\n      *\n      * @param out <code>PrintWriter</code> to use for output.\n      */\n     public void printStackTrace(PrintWriter out) {\n+        Throwable throwable = this.nestable;\n+        // if running on jre1.4 or higher, use default printStackTrace\n+        if (ExceptionUtils.isThrowableNested()) {\n+            if (throwable instanceof Nestable) {\n+                ((Nestable)throwable).printPartialStackTrace(out);\n+            } else {\n+                throwable.printStackTrace(out);\n+            }\n+            return;\n+        }\n+\n+        // generating the nested stack trace\n+        List stacks = new ArrayList();\n+        while (throwable != null) {\n+            String[] st = getStackFrames(throwable);\n+            stacks.add(st);\n+            throwable = ExceptionUtils.getCause(throwable);\n+        }\n+\n+        // If NOT topDown, reverse the stack\n+        String separatorLine = \"Caused by: \";\n+        if (!topDown) {\n+            separatorLine = \"Rethrown as: \";\n+            Collections.reverse(stacks);\n+        }\n+\n+        // Remove the repeated lines in the stack\n+        if (trimStackFrames) trimStackFrames(stacks);\n+\n         synchronized (out) {\n-            String[] st = getStackFrames(this.nestable);\n-            Throwable nestedCause = ExceptionUtils.getCause(this.nestable);\n-            if (nestedCause != null) {\n-                if (nestedCause instanceof Nestable) {\n-                    // Recurse until a non-Nestable is encountered.\n-                     ((Nestable) nestedCause).printStackTrace(out);\n-                } else {\n-                    String[] nst = getStackFrames(nestedCause);\n-                    for (int i = 0; i < nst.length; i++) {\n-                        out.println(nst[i]);\n-                    }\n+            for (Iterator iter=stacks.iterator(); iter.hasNext();) {\n+                String[] st = (String[]) iter.next();\n+                for (int i=0, len=st.length; i < len; i++) {\n+                    out.println(st[i]);\n                 }\n-                out.print(\"rethrown as \");\n-            }\n-\n-            // Output desired frames from stack trace.\n-            for (int i = 0; i < st.length; i++) {\n-                out.println(st[i]);\n+                if (iter.hasNext())\n+                    out.print(separatorLine);\n             }\n         }\n     }\n         }\n         return ExceptionUtils.getStackFrames(sw.getBuffer().toString());\n     }\n+    \n+    /**\n+     * Trims the stack frames. The first set is left untouched. The rest\n+     * of the frames are truncated from the bottom by comparing with\n+     * one just on top.\n+     *\n+     * @param stacks The list containing String[] elements\n+     */\n+     private void trimStackFrames(List stacks) {\n+         for (int size=stacks.size(), i=size-1; i > 0; i--) {\n+             String[] curr = (String[]) stacks.get(i);\n+             String[] next = (String[]) stacks.get(i-1); \n+             \n+             List currList = new ArrayList(Arrays.asList(curr));\n+             List nextList = new ArrayList(Arrays.asList(next));\n+             ExceptionUtils.removeCommonFrames(currList, nextList);\n+\n+             int trimmed = curr.length - currList.size();\n+             if (trimmed > 0) {\n+                 currList.add(\"\\t... \"+trimmed+\" more\");\n+                 stacks.set(\n+                     i, \n+                     (String[])currList.toArray(new String[currList.size()])\n+                 );\n+             }\n+         }\n+     }\n }\n--- a/src/java/org/apache/commons/lang/exception/NestableError.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableError.java\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n  * @see org.apache.commons.lang.exception.NestableException\n  * @since 1.0\n- * @version $Id: NestableError.java,v 1.5 2003/03/23 17:47:51 scolebourne Exp $\n+ * @version $Id: NestableError.java,v 1.6 2003/05/14 02:59:13 bayard Exp $\n  */\n public class NestableError extends Error implements Nestable {\n \n         return cause;\n     }\n \n+    /**\n+     * Returns the detail message string of this throwable. If it was\n+     * created with a null message, returns the following:\n+     * (cause==null ? null : cause.toString()).\n+     */\n     public String getMessage() {\n-        return delegate.getMessage(super.getMessage());\n+        if (super.getMessage() != null) {\n+            return super.getMessage();\n+        } else if (cause != null) {\n+            return cause.toString();\n+        } else {\n+            return null;\n+        }\n     }\n \n     public String getMessage(int index) {\n--- a/src/java/org/apache/commons/lang/exception/NestableException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableException.java\n  * the way.\n  * <p> Running the following program\n  * <p><blockquote><pre>\n- *  1 import org.apache.commons.NestedException;\n+ *  1 import org.apache.commons.lang.exception.NestableException;\n  *  2\n  *  3 public class Test {\n  *  4     public static void main( String[] args ) {\n  * 13          try {\n  * 14              b();\n  * 15          } catch(Exception e) {\n- * 16              throw new NestedException(\"foo\", e);\n+ * 16              throw new NestableException(\"foo\", e);\n  * 17          }\n  * 18      }\n  * 19\n  * 21          try {\n  * 22              c();\n  * 23          } catch(Exception e) {\n- * 24              throw new NestedException(\"bar\", e);\n+ * 24              throw new NestableException(\"bar\", e);\n  * 25          }\n  * 26      }\n  * 27\n  * </pre></blockquote>\n  * <p>Yields the following stacktrace:\n  * <p><blockquote><pre>\n- * java.lang.Exception: baz: bar: foo\n- *    at Test.c(Test.java:29)\n- *    at Test.b(Test.java:22)\n- * rethrown as NestedException: bar\n- *    at Test.b(Test.java:24)\n- *    at Test.a(Test.java:14)\n- * rethrown as NestedException: foo\n- *    at Test.a(Test.java:16)\n- *    at Test.main(Test.java:6)\n+ * org.apache.commons.lang.exception.NestableException: foo\n+ *         at Test.a(Test.java:16)\n+ *         at Test.main(Test.java:6)\n+ * Caused by: org.apache.commons.lang.exception.NestableException: bar\n+ *         at Test.b(Test.java:24)\n+ *         at Test.a(Test.java:14)\n+ *         ... 1 more\n+ * Caused by: java.lang.Exception: baz\n+ *         at Test.c(Test.java:29)\n+ *         at Test.b(Test.java:22)\n+ *         ... 2 more\n  * </pre></blockquote><br>\n  *\n  * @author <a href=\"mailto:Rafal.Krzewski@e-point.pl\">Rafal Krzewski</a>\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @since 1.0\n- * @version $Id: NestableException.java,v 1.7 2003/03/23 17:47:51 scolebourne Exp $\n+ * @version $Id: NestableException.java,v 1.8 2003/05/14 02:59:13 bayard Exp $\n  */\n public class NestableException extends Exception implements Nestable {\n     \n         return cause;\n     }\n \n+    /**\n+     * Returns the detail message string of this throwable. If it was\n+     * created with a null message, returns the following:\n+     * (cause==null ? null : cause.toString()).\n+     */\n     public String getMessage() {\n-        return delegate.getMessage(super.getMessage());\n+        if (super.getMessage() != null) {\n+            return super.getMessage();\n+        } else if (cause != null) {\n+            return cause.toString();\n+        } else {\n+            return null;\n+        }\n     }\n \n     public String getMessage(int index) {\n--- a/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n+++ b/src/java/org/apache/commons/lang/exception/NestableRuntimeException.java\n  * @author <a href=\"mailto:knielsen@apache.org\">Kasper Nielsen</a>\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @since 1.0\n- * @version $Id: NestableRuntimeException.java,v 1.7 2003/03/23 17:47:51 scolebourne Exp $\n+ * @version $Id: NestableRuntimeException.java,v 1.8 2003/05/14 02:59:13 bayard Exp $\n  */\n public class NestableRuntimeException extends RuntimeException implements Nestable {\n     \n         return cause;\n     }\n \n+    /**\n+     * Returns the detail message string of this throwable. If it was\n+     * created with a null message, returns the following:\n+     * (cause==null ? null : cause.toString()).\n+     */\n     public String getMessage() {\n-        return delegate.getMessage(super.getMessage());\n+        if (super.getMessage() != null) {\n+            return super.getMessage();\n+        } else if (cause != null) {\n+            return cause.toString();\n+        } else {\n+            return null;\n+        }\n     }\n \n     public String getMessage(int index) {\n--- a/src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/AbstractNestableTestCase.java\n  * interface.\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n- * @version $Id: AbstractNestableTestCase.java,v 1.2 2002/09/11 19:40:14 stevencaswell Exp $\n+ * @version $Id: AbstractNestableTestCase.java,v 1.3 2003/05/14 02:59:13 bayard Exp $\n  */\n public abstract class AbstractNestableTestCase extends TestCase\n {\n \n         Nestable ne2 = getNestable(\"ne2\");\n         assertNotNull(\"nestable exception(\\\"ne2\\\") message is not null\", ne2.getMessage());\n-        assertTrue(\"nestable exception(\\\"ne2\\\") message == ne2\", ne2.getMessage().equals(\"ne2\"));\n+        assertEquals(\"nestable exception(\\\"ne2\\\") message == ne2\", ne2.getMessage(), \"ne2\");\n         \n         Nestable ne3 = getNestable(getThrowable(\"ne3 exception\"));\n         assertNotNull(\"nestable exception(Throwable(\\\"ne3 exception\\\") message is not null\",\n             ne3.getMessage()); \n-        assertTrue(\"nestable exception(Throwable(\\\"ne3 exception\\\") message == cause message\",\n-            ne3.getMessage().equals(ne3.getCause().getMessage())); \n+        assertEquals(\"nestable exception(Throwable(\\\"ne3 exception\\\") message equals cause.toString()\",\n+            ne3.getMessage(), ne3.getCause().toString()); \n         \n         Nestable ne4 = getNestable(\"ne4\", getThrowable(\"ne4 exception\"));\n         assertNotNull(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") message is not null\", \n             ne4.getMessage()); \n-        assertTrue(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") message == ne4: ne4 exception\", \n-            ne4.getMessage().equals(\"ne4: ne4 exception\")); \n+        assertEquals(\"nestable exception(\\\"ne4\\\", Throwable(\\\"ne4 exception\\\") message == ne4\", \n+            ne4.getMessage(), \"ne4\"); \n         \n         Nestable ne5 = getNestable(\"ne5\", (Throwable) null);\n         assertNotNull(\"nestable exception(\\\"ne5\\\", null) message is not null\", \n             ne5.getMessage()); \n-        assertTrue(\"nestable exception(\\\"ne5\\\", null) message == ne5\", \n-            ne5.getMessage().equals(\"ne5\")); \n-        \n-        Nestable ne6 = getNestable(null, getThrowable(\"ne6 exception\"));\n-        assertTrue(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") cause == ne6 exception\", \n-            ne6.getMessage().equals(\"ne6 exception\")); \n+        assertEquals(\"nestable exception(\\\"ne5\\\", null) message == ne5\", \n+            ne5.getMessage(), \"ne5\"); \n+        \n+        Throwable t6 = getThrowable(\"ne6 exception\");\n+        Nestable ne6 = getNestable(null, t6);\n+        assertNotNull(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") message is not null\",\n+            ne6.getMessage()); \n+        assertEquals(\"nestable exception(null, Throwable(\\\"ne6 exception\\\") message equals cause.toString()\",\n+            ne6.getMessage(), ne6.getCause().toString()); \n         \n         Nestable ne7 = getNestable(\"ne7o\", getNestable(\"ne7i\", getThrowable(\"ne7 exception\")));\n-        assertTrue(\"nextable exception(\\\"ne7o\\\", getNestable(\\\"ne7i\\\", Throwable(\\\"ne7 exception\\\"))) message is ne7o: ne7i: ne7 exception\",\n-            ne7.getMessage().equals(\"ne7o: ne7i: ne7 exception\"));\n+        assertEquals(\"nestable exception(\\\"ne7o\\\", getNestable(\\\"ne7i\\\", Throwable(\\\"ne7 exception\\\"))) message is ne7o: ne7i: ne7 exception\",\n+            ne7.getMessage(), \"ne7o\");\n+\n+        Nestable ne8 = getNestable();\n+        assertNull(\"nestable exception() message is null\",\n+            ne8.getMessage());\n \n     }\n \n         PrintWriter pw2 = new PrintWriter(ps2, true);\n         ne9.printPartialStackTrace(pw2);\n         String stack2 = baos2.toString();\n-        String startsWith = ne9.getClass().getName() + \": ne9: ne9 exception\";\n+        String startsWith = ne9.getClass().getName() + \": ne9\";\n         assertTrue(\"stack trace startsWith == \" + startsWith,\n             stack2.startsWith(startsWith));\n         assertEquals(\"stack trace indexOf rethrown == -1\",\n         ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n         PrintStream ps1 = new PrintStream(baos1);\n         PrintWriter pw1 = new PrintWriter(ps1, true);\n-        ne8.printStackTrace(ps1);\n+        ne8.printStackTrace(pw1);\n         String stack1 = baos1.toString();\n-        String startsWith = getThrowableClass().getName() + \": ne8 exception\";\n+        String startsWith = ne8.getClass().getName() + \": ne8\";\n         assertTrue(\"stack trace startsWith == \" + startsWith,\n             stack1.startsWith(startsWith));\n-        String indexOf = ne8.getClass().getName() + \": ne8: ne8 exception\";\n+        String indexOf = getThrowableClass().getName() + \": ne8 exception\";\n         assertTrue(\"stack trace indexOf \" + indexOf + \" > -1\",\n             stack1.indexOf(indexOf) > -1); \n     }\n--- a/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n- * @version $Id: NestableDelegateTestCase.java,v 1.3 2002/09/18 15:51:41 stevencaswell Exp $\n+ * @version $Id: NestableDelegateTestCase.java,v 1.4 2003/05/14 02:59:13 bayard Exp $\n  */\n public class NestableDelegateTestCase extends junit.framework.TestCase\n {\n     \"The Nestable implementation passed to the NestableDelegate(Nestable) constructor must extend java.lang.Throwable\";\n \n     private static final String PARTIAL_STACK_TRACE =\n-        \"rethrown as ThrowableNestedNestable partial stack trace place-holder\";\n+        \"ThrowableNestedNestable partial stack trace place-holder\";\n \n     protected String lineSeparator;\n \n         d = new NestableDelegate(n);\n         doNestableDelegateGetThrowableCount(d, 2);\n         \n-        n = new NestableDelegateTester1(\"level 1\", new NestableDelegateTester2(\"level 2\", new NestableDelegateTester1(new NestableDelegateTester2(\"level 4\", new Exception(\"level 5\")))));\n+        n = new NestableDelegateTester1(\"level 1\", \n+                new NestableDelegateTester2(\"level 2\", \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(\"level 4\", \n+                            new Exception(\"level 5\")\n+                        )\n+                    )\n+                )\n+            );\n         d = new NestableDelegate(n);\n         doNestableDelegateGetThrowableCount(d, 5);\n     }\n         msgs[2] = null;\n         msgs[3] = \"level 4\";\n         msgs[4] = \"level 5\";\n-        n = new NestableDelegateTester1(msgs[0], new NestableDelegateTester2(msgs[1], new NestableDelegateTester1(new NestableDelegateTester2(msgs[3], new Exception(msgs[4])))));\n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new Exception(msgs[4])\n+                        )\n+                    )\n+                )\n+            );\n         d = new NestableDelegate(n);\n         doNestableDelegateGetMessages(d, msgs);\n     }\n         msgs[2] = null;\n         msgs[3] = \"level 4\";\n         msgs[4] = \"level 5\";\n-        n = new NestableDelegateTester1(msgs[0], new NestableDelegateTester2(msgs[1], new NestableDelegateTester1(new NestableDelegateTester2(msgs[3], new Exception(msgs[4])))));\n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new Exception(msgs[4])\n+                        )\n+                    )\n+                )\n+            );\n         d = new NestableDelegate(n);\n         for(int i = 0; i < msgs.length; i++)\n         {\n         throwables[2] = NestableDelegateTester1.class;\n         throwables[3] = NestableDelegateTester2.class;\n         throwables[4] = Exception.class;        \n-        n = new NestableDelegateTester1(msgs[0], new NestableDelegateTester2(msgs[1], new NestableDelegateTester1(new NestableDelegateTester2(msgs[3], new Exception(msgs[4])))));\n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new Exception(msgs[4])\n+                            )\n+                        )\n+                    )\n+                );\n         d = new NestableDelegate(n);\n         doNestableDelegateGetThrowableN(d, throwables, msgs);\n     }\n         throwables[2] = NestableDelegateTester1.class;\n         throwables[3] = NestableDelegateTester2.class;\n         throwables[4] = Exception.class;        \n-        n = new NestableDelegateTester1(msgs[0], new NestableDelegateTester2(msgs[1], new NestableDelegateTester1(new NestableDelegateTester2(msgs[3], new Exception(msgs[4])))));\n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new Exception(msgs[4])\n+                        )\n+                    )\n+                )\n+            );\n         d = new NestableDelegate(n);\n         doNestableDelegateGetThrowables(d, throwables, msgs);\n     }\n         throwables[3] = NestableDelegateTester2.class;\n         throwables[4] = Exception.class;\n         int[] indexes = {0, 1, 0, 1, 4};\n-        n = new NestableDelegateTester1(msgs[0], new NestableDelegateTester2(msgs[1], new NestableDelegateTester1(new NestableDelegateTester2(msgs[3], new Exception(msgs[4])))));\n+        n = new NestableDelegateTester1(msgs[0], \n+                new NestableDelegateTester2(msgs[1], \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(msgs[3], \n+                            new Exception(msgs[4])\n+                        )\n+                    )\n+                )\n+            );\n         d = new NestableDelegate(n);\n         for(int i = 0; i < throwables.length; i++)\n         {\n         PrintStream ps1 = new PrintStream(baos1);\n         nd3.printStackTrace(ps1);\n         String stack1 = baos1.toString();\n-        assertTrue(\"stack trace startsWith == java.lang.Exception: nested exception 3\",\n-            stack1.startsWith(\"java.lang.Exception: nested exception 3\"));\n-        int start1 = (stack1.length() - lineSepLen) - partialStackTraceLen;\n-        int end1 = stack1.length() - lineSepLen;\n-        assertEquals(\"stack trace substring(\" + start1 + \",\" + end1 + \") == \" +\n-                     PARTIAL_STACK_TRACE,\n-                     PARTIAL_STACK_TRACE,\n-                     stack1.substring(start1, end1));\n-\n-        ByteArrayOutputStream baos2 = new ByteArrayOutputStream();\n-        PrintStream ps2 = new PrintStream(baos2);\n-        System.setErr(ps2);\n-        nd3.printStackTrace();\n-        String stack2 = baos2.toString();\n-        assertTrue(\"stack trace startsWith == java.lang.Exception: nested exception 3\",\n-            stack2.startsWith(\"java.lang.Exception: nested exception 3\"));\n-        int start2 = (stack2.length() - lineSepLen) - partialStackTraceLen;\n-        int end2 = stack2.length() - lineSepLen;\n-        assertTrue(\"stack trace substring(\" + start2 + \",\" + end2 + \") == \" + PARTIAL_STACK_TRACE,\n-            stack2.substring(start2, end2).equals(PARTIAL_STACK_TRACE));\n+        assertTrue(\"stack trace startsWith\", stack1.startsWith(PARTIAL_STACK_TRACE));\n+\n+        Nestable n = new NestableDelegateTester1(\"level 1\", \n+                new NestableDelegateTester2(\"level 2\", \n+                    new NestableDelegateTester1(\n+                        new NestableDelegateTester2(\"level 4\", \n+                            new Exception(\"level 5\")\n+                        )\n+                    )\n+                )\n+            );\n+        NestableDelegate d = new NestableDelegate(n);\n+        \n+        // Only testing the flags for jdk1.3 and below\n+        if (!ExceptionUtils.isThrowableNested()) {\n+            d.topDown = true; d.trimStackFrames = true;\n+            checkStackTrace(d, true, true, NestableDelegateTester1.class.getName()+\": level 1\", 24);\n+            d.topDown = true; d.trimStackFrames = false;\n+            checkStackTrace(d, true, false, NestableDelegateTester1.class.getName()+\": level 1\", 80);\n+            d.topDown = false; d.trimStackFrames = true;\n+            checkStackTrace(d, false, true, \"java.lang.Exception: level 5\", 24);\n+            d.topDown = false; d.trimStackFrames = false;\n+            checkStackTrace(d, false, false, \"java.lang.Exception: level 5\", 80);\n+            d.topDown = true; d.trimStackFrames = true;\n+        }\n+    }\n+    private void checkStackTrace(NestableDelegate d, boolean topDown, boolean trimStackFrames,\n+            String startsWith, int expCount) {\n+        ByteArrayOutputStream baos1 = new ByteArrayOutputStream();\n+        PrintStream ps1 = new PrintStream(baos1);\n+        d.printStackTrace(ps1);\n+        String stack1 = baos1.toString();\n+        int actCount = countLines(stack1);\n+        assertTrue(\"topDown: \"+topDown+\", trimStackFrames: \"+trimStackFrames+\" startsWith\",\n+            stack1.startsWith(startsWith));\n+        assertEquals(\"topDown: \"+topDown+\", trimStackFrames: \"+trimStackFrames+\" lineCount\",\n+            expCount, actCount);\n+    }\n+    private int countLines(String s) {\n+        if (s == null) return 0;\n+        \n+        int i = 0, ndx = -1;\n+        while ((ndx = s.indexOf(\"\\n\", ndx+1)) != -1) {\n+            i++;\n+        }\n+        return i;\n     }\n     \n     public static void main(String args[])\n     }\n }\n \n+/**\n+ * Nestable and Throwable class which can be passed to the NestableDelegate\n+ * constructor. Used for testing various methods which iterate through the\n+ * nested causes.\n+ */\n class NestableDelegateTester1 extends Exception implements Nestable\n {\n     private Throwable cause = null;\n      */\n     public void printPartialStackTrace(PrintWriter out)\n     {\n+        super.printStackTrace(out);\n     }\n     \n     /**\n     \n }\n \n+/**\n+ * Nestable and Throwable class which can be passed to the NestableDelegate\n+ * constructor. Used for testing various methods which iterate through the\n+ * nested causes.\n+ */\n class NestableDelegateTester2 extends Throwable implements Nestable\n {\n     private Throwable cause = null;\n      */\n     public void printPartialStackTrace(PrintWriter out)\n     {\n+        super.printStackTrace(out);\n     }\n     \n     /**\n     \n }\n \n+/**\n+ * Used to test that the constructor passes when passed a throwable cause\n+ * And, the NestableDelegate.getMessage() returns the message from underlying \n+ * nestable (which also has to be a Throwable).\n+ */\n class ThrowableNestable extends Throwable implements Nestable\n {\n     private Throwable cause = new Exception(\"ThrowableNestable cause\");\n     \n }\n \n+/**\n+ * Nestable and Throwable class which takes in a 'cause' object.\n+ * Returns a message wrapping the 'cause' message\n+ * Prints a fixed stack trace and partial stack trace.\n+ */\n class ThrowableNestedNestable extends Throwable implements Nestable\n {\n     private Throwable cause = null;\n     \n }\n \n+/**\n+ * Used to test that the constructor fails when passed a non-throwable cause\n+ */\n class NonThrowableNestable implements Nestable\n {\n     /**", "timestamp": 1052881153, "metainfo": ""}