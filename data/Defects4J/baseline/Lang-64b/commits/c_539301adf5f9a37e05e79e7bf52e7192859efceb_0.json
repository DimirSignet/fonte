{"sha": "539301adf5f9a37e05e79e7bf52e7192859efceb", "log": "PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=26656 [lang][patch] Validate.java: fixes comment skew, removes unused loop counter. Submitted by:\tJanek Bogucki Reviewed by:\tGary Gregory   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n  * @author Stephen Colebourne\n  * @author Gary Gregory\n  * @since 2.0\n- * @version $Id: Validate.java,v 1.7 2004/01/19 23:24:07 fredrik Exp $\n+ * @version $Id: Validate.java,v 1.8 2004/02/11 23:33:23 ggregory Exp $\n  */\n public class Validate {\n     \n      * Validate.isTrue( i > 0, \"The value must be greater than zero: \", i);\n      * </pre>\n      *\n-     * <p>For performance reasons, the object is passed as a separate parameter and\n+     * <p>For performance reasons, the long value is passed as a separate parameter and\n      * appended to the message string only in the case of an error.</p>\n      * \n      * @param expression  a boolean expression\n      * Validate.isTrue( d > 0.0, \"The value must be greater than zero: \", d);\n      * </pre>\n      *\n-     * <p>For performance reasons, the object is passed as a separate parameter and\n+     * <p>For performance reasons, the double value is passed as a separate parameter and\n      * appended to the message string only in the case of an error.</p>\n      * \n      * @param expression  a boolean expression\n      * if the argument Map is empty (<code>null</code> or no elements).</p>\n      *\n      * <pre>\n-     * Validate.notEmpty(myMap, \"The collection must not be empty\");\n+     * Validate.notEmpty(myMap, \"The map must not be empty\");\n      * </pre>\n      * \n      * @param map  the map to check is not empty\n      * <code>null</code>.</p>\n      *\n      * <pre>\n-     * Validate.notEmpty(myArray, \"The array must not contain null elements\");\n-     * </pre>\n-     * \n+     * Validate.noNullElements(myArray, \"The array must not contain null elements\");\n+     * </pre>\n+     * \n+     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n+     *\n      * @param array  the array to check\n      * @param message  the exception message if the array has\n      *  <code>null</code> elements\n      * <code>null</code>.</p>\n      *\n      * <pre>\n-     * Validate.notEmpty(myArray);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated array contains null element at index: '.</p>\n+     * Validate.noNullElements(myArray);\n+     * </pre>\n+     *\n+     * <p>If the array has a null element the message in the exception is\n+     * 'The validated array contains null element at index: '.</p>\n+     *\n+     * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n      * \n      * @param array  the array to check\n      * @throws IllegalArgumentException if the array has <code>null</code>\n \n     /**\n      * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument collection has <code>null</code> elements or is\n+     * if the argument Collection has <code>null</code> elements or is\n      * <code>null</code>.</p>\n      *\n      * <pre>\n-     * Validate.notEmpty(myCollection, \"The collection must not contain null elements\");\n-     * </pre>\n+     * Validate.noNullElements(myCollection, \"The collection must not contain null elements\");\n+     * </pre>\n+     *\n+     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n      * \n      * @param collection  the collection to check\n-     * @param message  the exception message if the array has\n+     * @param message  the exception message if the collection has\n      *  <code>null</code> elements\n      * @throws IllegalArgumentException if the collection has\n      *  <code>null</code> elements or is <code>null</code>\n      */\n     public static void noNullElements(Collection collection, String message) {\n         Validate.notNull(collection);\n-        int i = 0;\n-        for (Iterator it = collection.iterator(); it.hasNext(); i++) {\n+        for (Iterator it = collection.iterator(); it.hasNext();) {\n             if (it.next() == null) {\n                 throw new IllegalArgumentException(message);\n             }\n \n     /**\n      * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument collection has <code>null</code> elements or is\n+     * if the argument Collection has <code>null</code> elements or is\n      * <code>null</code>.</p>\n      *\n      * <pre>\n-     * Validate.notEmpty(myCollection);\n+     * Validate.noNullElements(myCollection);\n      * </pre>\n      *\n      * <p>The message in the exception is 'The validated collection contains null element at index: '.</p>\n+     *\n+     * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n      * \n      * @param collection  the collection to check\n      * @throws IllegalArgumentException if the collection has", "timestamp": 1076542403, "metainfo": ""}