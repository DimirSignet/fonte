{"sha": "2382755d1ddb4862e4298d1220e7d76f86d93b15", "log": "Javadoc ArrayUtils.toArray()  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n     // Generic array\n     //-----------------------------------------------------------------------\n     /**\n-     * Create a type-safe generic array.\n-     *\n-     * <p>Arrays are covariant i.e. they cannot be created from a generic type:</p>\n+     * <p>Create a type-safe generic array.</p>\n+     *\n+     * <p>The Java language does not allow an array to be created from a generic type:</p>\n      *\n      * <pre>\n     public static &lt;T&gt; T[] createAnArray(int size) {\n-        return T[size]; // compiler error here\n+        return new T[size]; // compiler error here\n     }\n     public static &lt;T&gt; T[] createAnArray(int size) {\n         return (T[])new Object[size]; // ClassCastException at runtime\n     }\n      * </pre>\n      *\n-     * <p>Therefore new arrays of generic types can be created with this method, e.g. an arrays\n-     * of Strings:</p>\n+     * <p>Therefore new arrays of generic types can be created with this method.\n+     * For example, an array of Strings can be created:</p>\n      *\n      * <pre>\n     String[] array = ArrayUtils.toArray(\"1\", \"2\");\n     String[] emptyArray = ArrayUtils.&lt;String&gt;toArray();\n      * </pre>\n      * \n-     * The method is typically used in scenarios, where the caller itself uses generic types\n-     * that have to be combined into an array.\n+     * <p>The method is typically used in scenarios, where the caller itself uses generic types\n+     * that have to be combined into an array.</p>\n      * \n-     * Note, this method makes only sense to provide arguments of the same type so that the\n+     * <p>Note, this method makes only sense to provide arguments of the same type so that the\n      * compiler can deduce the type of the array itself. While it is possible to select the\n-     * type explicitly like in <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(new\n-     * Integer(42), new Double(Math.PI))</code>, there is no real advantage to <code>new\n-     * Number[] {new Integer(42), new Double(Math.PI)}</code> anymore.\n+     * type explicitly like in\n+     * <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(new Integer(42), new Double(Math.PI))</code>,\n+     * there is no real advantage when compared to\n+     * <code>new Number[] {new Integer(42), new Double(Math.PI)}</code>.</p>\n      *\n      * @param  <T>   the array's element type\n-     * @param  items the items of the array\n-     * @return the array\n+     * @param  items  the varargs array items, null allowed\n+     * @return the array, not null unless a null array is passed in\n      * @since  3.0\n      */\n     public static <T> T[] toArray(final T... items) {", "timestamp": 1299242508, "metainfo": ""}