{"sha": "39f39ef12a0e152f1cb247a42192f4bbcf8e298f", "log": "Use more efficient Short cache: Use \"Short.valueOf(int)\" instead of \"new Short(short)\"  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n     /** Reusable Integer constant for minus one. */\n     public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);\n     /** Reusable Short constant for zero. */\n-    public static final Short SHORT_ZERO = new Short((short) 0);\n+    public static final Short SHORT_ZERO = Short.valueOf((short) 0);\n     /** Reusable Short constant for one. */\n-    public static final Short SHORT_ONE = new Short((short) 1);\n+    public static final Short SHORT_ONE = Short.valueOf((short) 1);\n     /** Reusable Short constant for minus one. */\n-    public static final Short SHORT_MINUS_ONE = new Short((short) -1);\n+    public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);\n     /** Reusable Byte constant for zero. */\n     public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);\n     /** Reusable Byte constant for one. */\n     // Long.getLong(String,Integer)\n     // Long.valueOf(String,int)\n     // Long.valueOf(String)\n-    // new Short(String)\n+    // Short.valueOf(String)\n     // Short.decode(String)\n     // Short.valueOf(String,int)\n     // Short.valueOf(String)\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java\n      * @return the value as a Short, never null\n      */\n     public Short getValue() {\n-        return new Short(this.value);\n+        return Short.valueOf(this.value);\n     }\n \n     /**\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n         \n         assertTrue(Arrays.equals(\n             new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n-            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n-                new Short(Short.MAX_VALUE), new Short((short)9999999)}))\n+            ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE), \n+                Short.valueOf(Short.MAX_VALUE), Short.valueOf((short)9999999)}))\n         );\n \n         try {\n-            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null});\n+            ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE), null});\n             fail();\n         } catch (NullPointerException ex) {}\n     }\n         \n         assertTrue(Arrays.equals(\n             new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n-            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), \n-                new Short(Short.MAX_VALUE), new Short((short)9999999)}, Short.MIN_VALUE))\n+            ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE), \n+                Short.valueOf(Short.MAX_VALUE), Short.valueOf((short)9999999)}, Short.MIN_VALUE))\n         );\n         \n         assertTrue(Arrays.equals(\n             new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999},\n-            ArrayUtils.toPrimitive(new Short[] {new Short(Short.MIN_VALUE), null, \n-                new Short((short)9999999)}, Short.MAX_VALUE))\n+            ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE), null, \n+                Short.valueOf((short)9999999)}, Short.MAX_VALUE))\n         );\n     }\n \n         ArrayUtils.toObject(new short[0]));\n         \n         assertTrue(Arrays.equals(\n-            new Short[] {new Short(Short.MIN_VALUE), new Short(Short.MAX_VALUE), \n-                new Short((short)9999999)},\n+            new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE), \n+                Short.valueOf((short)9999999)},\n             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE, \n                 (short)9999999}))\n         );\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableShortTest.java\n         \n         assertEquals((short) 1, new MutableShort((short) 1).shortValue());\n         \n-        assertEquals((short) 2, new MutableShort(new Short((short) 2)).shortValue());\n+        assertEquals((short) 2, new MutableShort(Short.valueOf((short) 2)).shortValue());\n         assertEquals((short) 3, new MutableShort(new MutableShort((short) 3)).shortValue());\n \n         assertEquals((short) 2, new MutableShort(\"2\").shortValue());\n     public void testGetSet() {\n         final MutableShort mutNum = new MutableShort((short) 0);\n         assertEquals((short) 0, new MutableShort().shortValue());\n-        assertEquals(new Short((short) 0), new MutableShort().getValue());\n+        assertEquals(Short.valueOf((short) 0), new MutableShort().getValue());\n         \n         mutNum.setValue((short) 1);\n         assertEquals((short) 1, mutNum.shortValue());\n-        assertEquals(new Short((short) 1), mutNum.getValue());\n+        assertEquals(Short.valueOf((short) 1), mutNum.getValue());\n         \n-        mutNum.setValue(new Short((short) 2));\n+        mutNum.setValue(Short.valueOf((short) 2));\n         assertEquals((short) 2, mutNum.shortValue());\n-        assertEquals(new Short((short) 2), mutNum.getValue());\n+        assertEquals(Short.valueOf((short) 2), mutNum.getValue());\n         \n         mutNum.setValue(new MutableShort((short) 3));\n         assertEquals((short) 3, mutNum.shortValue());\n-        assertEquals(new Short((short) 3), mutNum.getValue());\n+        assertEquals(Short.valueOf((short) 3), mutNum.getValue());\n         try {\n             mutNum.setValue(null);\n             fail();\n         assertEquals(false, mutNumB.equals(mutNumC));\n         assertEquals(true, mutNumC.equals(mutNumC));\n         assertEquals(false, mutNumA.equals(null));\n-        assertEquals(false, mutNumA.equals(new Short((short) 0)));\n+        assertEquals(false, mutNumA.equals(Short.valueOf((short) 0)));\n         assertEquals(false, mutNumA.equals(\"0\"));\n     }\n \n         assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n         assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n         assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == new Short((short) 0).hashCode());\n+        assertEquals(true, mutNumA.hashCode() == Short.valueOf((short) 0).hashCode());\n     }\n \n     public void testCompareTo() {\n     }\n \n     public void testToShort() {\n-        assertEquals(new Short((short) 0), new MutableShort((short) 0).toShort());\n-        assertEquals(new Short((short) 123), new MutableShort((short) 123).toShort());\n+        assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort());\n+        assertEquals(Short.valueOf((short) 123), new MutableShort((short) 123).toShort());\n     }\n \n     public void testIncrement() {\n \n     public void testAddValueObject() {\n         MutableShort mutNum = new MutableShort((short) 1);\n-        mutNum.add(new Short((short) 1));\n+        mutNum.add(Short.valueOf((short) 1));\n         \n         assertEquals((short) 2, mutNum.shortValue());\n     }\n \n     public void testSubtractValueObject() {\n         MutableShort mutNum = new MutableShort((short) 1);\n-        mutNum.subtract(new Short((short) 1));\n+        mutNum.subtract(Short.valueOf((short) 1));\n         \n         assertEquals((short) 0, mutNum.shortValue());\n     }", "timestamp": 1312379269, "metainfo": ""}