{"sha": "13207a88a64ded4240aa19c42351e613aadb3ad1", "log": "PR: 25227 Obtained from: Discussion around http://nagoya.apache.org/bugzilla/show_bug.cgi?id=25227   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Entities.java\n+++ b/src/java/org/apache/commons/lang/Entities.java\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 2.0\n- * @version $Id: Entities.java,v 1.15 2003/09/13 03:11:29 psteitz Exp $\n+ * @version $Id: Entities.java,v 1.16 2004/01/10 02:58:36 ggregory Exp $\n  */\n class Entities {\n \n                 String entityName = str.substring(i + 1, semi);\n                 int entityValue;\n                 if (entityName.charAt(0) == '#') {\n-                    entityValue = Integer.parseInt(entityName.substring(1));\n+                    char charAt1 = entityName.charAt(1);\n+                    if (charAt1 == 'x' || charAt1=='X') {\n+                        entityValue = Integer.valueOf(entityName.substring(2), 16).intValue();\n+                    } else {\n+                        entityValue = Integer.parseInt(entityName.substring(1));\n+                    }\n                 } else {\n                     entityValue = this.entityValue(entityName);\n                 }\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n  *\n  * @author of original StringUtilsTest.testEscape = ?\n  * @author <a href=\"mailto:alex@purpletech.com\">Alexander Day Chaffee</a>\n- * @version $Id: StringEscapeUtilsTest.java,v 1.12 2003/08/18 02:22:25 bayard Exp $\n+ * @version $Id: StringEscapeUtilsTest.java,v 1.13 2004/01/10 02:58:36 ggregory Exp $\n  */\n public class StringEscapeUtilsTest extends TestCase {\n     private final static String FOO = \"foo\";\n         }\n         // \\u00E7 is a cedilla (c with wiggle under)\n         // note that the test string must be 7-bit-clean (unicode escaped) or else it will compile incorrectly\n-        // on some locales\n+        // on some locales        \n         assertEquals(\"funny chars pass through OK\", \"Fran\\u00E7ais\", StringEscapeUtils.unescapeHtml(\"Fran\\u00E7ais\"));\n+    }\n+\n+    public void testUnescapeHexCharsHtml() {\n+        // Simple easy to grok test \n+        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#x80;&#x9F;\"));\n+        assertEquals(\"hex number unescape\", \"\\u0080\\u009F\", StringEscapeUtils.unescapeHtml(\"&#X80;&#X9F;\"));\n+        // Test all Character values:\n+        for (char i = Character.MIN_VALUE; i < Character.MAX_VALUE; i++) {\n+            Character c1 = new Character(i);\n+            Character c2 = new Character((char)(i+1));\n+            String expected = c1.toString() + c2.toString();\n+            String escapedC1 = \"&#x\" + Integer.toHexString((int)(c1.charValue())) + \";\";\n+            String escapedC2 = \"&#x\" + Integer.toHexString((int)(c2.charValue())) + \";\";\n+            assertEquals(\"hex number unescape index \" + (int)i, expected, StringEscapeUtils.unescapeHtml(escapedC1 + escapedC2));\n+        }\n     }\n \n     public void testUnescapeUnknownEntity() throws Exception", "timestamp": 1073703516, "metainfo": ""}