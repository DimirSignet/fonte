{"sha": "80b1cc0e4f08533603c1b073ba7b762fded66351", "log": "[LANG-723] Add mode and median Comparable... methods to ObjectUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n import java.lang.reflect.Array;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeSet;\n \n import org.apache.commons.lang3.exception.CloneFailedException;\n+import org.apache.commons.lang3.mutable.MutableInt;\n \n /**\n  * <p>Operations on {@code Object}.</p>\n             return (nullGreater ? -1 : 1);\n         }\n         return c1.compareTo(c2);\n+    }\n+\n+    /**\n+     * Find the \"best guess\" middle value among comparables. If there is an even\n+     * number of total values, the lower of the two middle values will be returned.\n+     * @param <T> type of values processed by this method\n+     * @param items to compare\n+     * @return T at middle position\n+     * @throws NullPointerException if items is {@code null}\n+     * @throws IllegalArgumentException if items is empty or contains {@code null} values\n+     */\n+    public static <T extends Comparable<? super T>> T median(T... items) {\n+        Validate.notEmpty(items);\n+        Validate.noNullElements(items);\n+        TreeSet<T> sort = new TreeSet<T>();\n+        Collections.addAll(sort, items);\n+        @SuppressWarnings(\"unchecked\") //we know all items added were T instances\n+        T result = (T) sort.toArray()[(sort.size() - 1) / 2];\n+        return result;\n+    }\n+\n+    /**\n+     * Find the \"best guess\" middle value among comparables. If there is an even\n+     * number of total values, the lower of the two middle values will be returned.\n+     * @param <T> type of values processed by this method\n+     * @param comparator to use for comparisons\n+     * @param items to compare\n+     * @return T at middle position\n+     * @throws NullPointerException if items or comparator is {@code null}\n+     * @throws IllegalArgumentException if items is empty or contains {@code null} values\n+     */\n+    public static <T> T median(Comparator<T> comparator, T... items) {\n+        Validate.notEmpty(items, \"null/empty items\");\n+        Validate.noNullElements(items);\n+        Validate.notNull(comparator, \"null comparator\");\n+        TreeSet<T> sort = new TreeSet<T>(comparator);\n+        Collections.addAll(sort, items);\n+        @SuppressWarnings(\"unchecked\") //we know all items added were T instances\n+        T result = (T) sort.toArray()[(sort.size() - 1) / 2];\n+        return result;\n+    }\n+\n+    // Mode\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Find the most frequently occurring item.\n+     * \n+     * @param <T>\n+     * @param items to check\n+     * @return most populous T, {@code null} if non-unique or no items supplied\n+     */\n+    public static <T> T mode(T... items) {\n+        if (ArrayUtils.isNotEmpty(items)) {\n+            HashMap<T, MutableInt> occurrences = new HashMap<T, MutableInt>(items.length);\n+            for (T t : items) {\n+                MutableInt count = occurrences.get(t);\n+                if (count == null) {\n+                    occurrences.put(t, new MutableInt(1));\n+                } else {\n+                    count.increment();\n+                }\n+            }\n+            T result = null;\n+            int max = 0;\n+            for (Map.Entry<T, MutableInt> e : occurrences.entrySet()) {\n+                int cmp = e.getValue().intValue();\n+                if (cmp == max) {\n+                    result = null;\n+                } else if (cmp > max) {\n+                    max = cmp;\n+                    result = e.getKey();\n+                }\n+            }\n+            return result;\n+        }\n+        return null;\n     }\n \n     // cloning\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Calendar;\n+import java.util.Comparator;\n import java.util.Date;\n import java.util.List;\n \n         assertEquals(\"one two true\",  -1, ObjectUtils.compare(one, two, true));\n     }\n \n+    @Test\n+    public void testMedian() {\n+        assertEquals(\"foo\", ObjectUtils.median(\"foo\"));\n+        assertEquals(\"bar\", ObjectUtils.median(\"foo\", \"bar\"));\n+        assertEquals(\"baz\", ObjectUtils.median(\"foo\", \"bar\", \"baz\"));\n+        assertEquals(\"baz\", ObjectUtils.median(\"foo\", \"bar\", \"baz\", \"blah\"));\n+        assertEquals(\"blah\", ObjectUtils.median(\"foo\", \"bar\", \"baz\", \"blah\", \"wah\"));\n+        assertEquals(Integer.valueOf(5),\n+            ObjectUtils.median(Integer.valueOf(1), Integer.valueOf(5), Integer.valueOf(10)));\n+        assertEquals(\n+            Integer.valueOf(7),\n+            ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8),\n+                Integer.valueOf(9)));\n+        assertEquals(Integer.valueOf(6),\n+            ObjectUtils.median(Integer.valueOf(5), Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testMedian_nullItems() {\n+        ObjectUtils.median((String[]) null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testMedian_emptyItems() {\n+        ObjectUtils.<String> median();\n+    }\n+\n+    @Test\n+    public void testComparatorMedian() {\n+        CharSequenceComparator cmp = new CharSequenceComparator();\n+        NonComparableCharSequence foo = new NonComparableCharSequence(\"foo\");\n+        NonComparableCharSequence bar = new NonComparableCharSequence(\"bar\");\n+        NonComparableCharSequence baz = new NonComparableCharSequence(\"baz\");\n+        NonComparableCharSequence blah = new NonComparableCharSequence(\"blah\");\n+        NonComparableCharSequence wah = new NonComparableCharSequence(\"wah\");\n+        assertSame(foo, ObjectUtils.median(cmp, foo));\n+        assertSame(bar, ObjectUtils.median(cmp, foo, bar));\n+        assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz));\n+        assertSame(baz, ObjectUtils.median(cmp, foo, bar, baz, blah));\n+        assertSame(blah, ObjectUtils.median(cmp, foo, bar, baz, blah, wah));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testComparatorMedian_nullComparator() {\n+        ObjectUtils.median((Comparator<CharSequence>) null, new NonComparableCharSequence(\"foo\"));\n+    }\n+\n+    @Test(expected = NullPointerException.class)\n+    public void testComparatorMedian_nullItems() {\n+        ObjectUtils.median(new CharSequenceComparator(), (CharSequence[]) null);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void testComparatorMedian_emptyItems() {\n+        ObjectUtils.median(new CharSequenceComparator());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test\n+    public void testMode() {\n+        assertNull(ObjectUtils.mode((Object[]) null));\n+        assertNull(ObjectUtils.mode());\n+        assertNull(ObjectUtils.mode(\"foo\", \"bar\", \"baz\"));\n+        assertNull(ObjectUtils.mode(\"foo\", \"bar\", \"baz\", \"foo\", \"bar\"));\n+        assertEquals(\"foo\", ObjectUtils.mode(\"foo\", \"bar\", \"baz\", \"foo\"));\n+        assertEquals(Integer.valueOf(9),\n+            ObjectUtils.mode(\"foo\", \"bar\", \"baz\", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9)));\n+    }\n+\n     /**\n      * Tests {@link ObjectUtils#clone(Object)} with a cloneable object.\n      */\n         }\n     }\n \n+    static final class NonComparableCharSequence implements CharSequence {\n+        final String value;\n+\n+        /**\n+         * Create a new NonComparableCharSequence instance.\n+         *\n+         * @param value\n+         */\n+        public NonComparableCharSequence(String value) {\n+            super();\n+            Validate.notNull(value);\n+            this.value = value;\n+        }\n+\n+        public char charAt(int arg0) {\n+            return value.charAt(arg0);\n+        }\n+\n+        public int length() {\n+            return value.length();\n+        }\n+\n+        public CharSequence subSequence(int arg0, int arg1) {\n+            return value.subSequence(arg0, arg1);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return value;\n+        }\n+    }\n+\n+    static final class CharSequenceComparator implements Comparator<CharSequence> {\n+\n+        public int compare(CharSequence o1, CharSequence o2) {\n+            return o1.toString().compareTo(o2.toString());\n+        }\n+\n+    }\n }", "timestamp": 1310876571, "metainfo": ""}