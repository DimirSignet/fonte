{"sha": "f97f800104addef001e0f9f5adc4927f639a959f", "log": "Port to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n  */\n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.util.Iterator;\n import java.util.Locale;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.lang3.text.WordUtils;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.StringUtils}.\n  *\n  * @version $Id$\n  */\n-public class StringUtilsTest extends TestCase {\n+public class StringUtilsTest {\n     \n     static final String WHITESPACE;\n     static final String NON_WHITESPACE;\n     private static final String SENTENCE_UNCAP = \"foo bar baz\";\n     private static final String SENTENCE_CAP = \"Foo Bar Baz\";\n \n-    public StringUtilsTest(String name) {\n-        super(name);\n-    }\n-\n     //-----------------------------------------------------------------------\n+    @Test\n     public void testConstructor() {\n         assertNotNull(new StringUtils());\n         Constructor<?>[] cons = StringUtils.class.getDeclaredConstructors();\n     }\n     \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCaseFunctions() {\n         assertEquals(null, StringUtils.upperCase(null));\n         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH));\n                      \"\", StringUtils.lowerCase(\"\", Locale.ENGLISH) );\n     }\n \n+    @Test\n     public void testSwapCase_String() {\n         assertEquals(null, StringUtils.swapCase(null));\n         assertEquals(\"\", StringUtils.swapCase(\"\"));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testJoin_Objects() {\n         assertEquals(\"abc\", StringUtils.join(\"a\", \"b\", \"c\"));\n         assertEquals(\"a\",   StringUtils.join(null, \"\", \"a\"));\n         assertEquals(null,  StringUtils.join((Object[])null));\n     }\n \n+    @Test\n     public void testJoin_Objectarray() {\n //        assertEquals(null, StringUtils.join(null)); // generates warning\n         assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast\n         assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));\n     }\n         \n+    @Test\n     public void testJoin_ArrayChar() {\n         assertEquals(null, StringUtils.join((Object[]) null, ','));\n         assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));\n         assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));\n     }\n     \n+    @Test\n     public void testJoin_ArrayString() {\n         assertEquals(null, StringUtils.join((Object[]) null, null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(ARRAY_LIST, null));\n         assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, \"/\", 2, 1));\n     }\n     \n+    @Test\n     public void testJoin_IteratorChar() {\n         assertEquals(null, StringUtils.join((Iterator<?>) null, ','));\n         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR));\n         assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\").iterator(), 'x'));\n     }\n     \n+    @Test\n     public void testJoin_IteratorString() {\n         assertEquals(null, StringUtils.join((Iterator<?>) null, null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), null));\n         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR));\n     }\n \n+    @Test\n     public void testJoin_IterableChar() {\n         assertEquals(null, StringUtils.join((Iterable<?>) null, ','));\n         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR_CHAR));\n         assertEquals(\"foo\", StringUtils.join(Collections.singleton(\"foo\"), 'x'));\n     }\n \n+    @Test\n     public void testJoin_IterableString() {\n         assertEquals(null, StringUtils.join((Iterable<?>) null, null));\n         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null));\n         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR));\n     }\n \n+    @Test\n     public void testSplit_String() {\n         assertEquals(null, StringUtils.split(null));\n         assertEquals(0, StringUtils.split(\"\").length);\n         assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[1]);                       \n     }\n     \n+    @Test\n     public void testSplit_StringChar() {\n         assertEquals(null, StringUtils.split(null, '.'));\n         assertEquals(0, StringUtils.split(\"\", '.').length);\n         assertEquals(\"c\", res[2]);\n     }\n     \n+    @Test\n     public void testSplit_StringString_StringStringInt() {\n         assertEquals(null, StringUtils.split(null, \".\"));\n         assertEquals(null, StringUtils.split(null, \".\", 3));\n         assertEquals(msg, str.substring(2), res[1]);\n     }\n \n+    @Test\n     public void testSplitByWholeString_StringStringBoolean() {\n         assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\" ) ) ;\n \n         }\n     }\n \n+    @Test\n     public void testSplitByWholeString_StringStringBooleanInt() {\n         assertEquals( null, StringUtils.splitByWholeSeparator( null, \".\", 3 ) ) ;\n \n         }\n     }\n \n+    @Test\n     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() {\n         assertEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, \".\", -1 ) ) ;\n \n         }\n     }\n     \n+    @Test\n     public void testSplitPreserveAllTokens_String() {\n         assertEquals(null, StringUtils.splitPreserveAllTokens(null));\n         assertEquals(0, StringUtils.splitPreserveAllTokens(\"\").length);\n         assertEquals(\"b\" + NON_WHITESPACE + \"c\", res[WHITESPACE.length()]);                       \n     }\n     \n+    @Test\n     public void testSplitPreserveAllTokens_StringChar() {\n         assertEquals(null, StringUtils.splitPreserveAllTokens(null, '.'));\n         assertEquals(0, StringUtils.splitPreserveAllTokens(\"\", '.').length);\n         }\n     }\n     \n+    @Test\n     public void testSplitPreserveAllTokens_StringString_StringStringInt() {\n         assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\"));\n         assertEquals(null, StringUtils.splitPreserveAllTokens(null, \".\", 3));\n         assertEquals(msg, str.substring(2), res[1]);\n     }\n \n+    @Test\n     public void testSplitByCharacterType() {\n         assertNull(StringUtils.splitByCharacterType(null));\n         assertEquals(0, StringUtils.splitByCharacterType(\"\").length);\n                 StringUtils.splitByCharacterType(\"ASFRules\")));\n     }\n     \n+    @Test\n     public void testSplitByCharacterTypeCamelCase() {\n         assertNull(StringUtils.splitByCharacterTypeCamelCase(null));\n         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase(\"\").length);\n                 StringUtils.splitByCharacterTypeCamelCase(\"ASFRules\")));\n     }\n \n+    @Test\n     public void testDeleteWhitespace_String() {\n         assertEquals(null, StringUtils.deleteWhitespace(null));\n         assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n         assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n     }\n \n+    @Test\n     public void testLang623() {\n         assertEquals(\"t\", StringUtils.replaceChars(\"\\u00DE\", '\\u00DE', 't'));\n         assertEquals(\"t\", StringUtils.replaceChars(\"\\u00FE\", '\\u00FE', 't'));\n     }\n \n+    @Test\n     public void testReplace_StringStringString() {\n         assertEquals(null, StringUtils.replace(null, null, null));\n         assertEquals(null, StringUtils.replace(null, null, \"any\"));\n         assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n     }\n     \n+    @Test\n     public void testReplace_StringStringStringInt() {\n         assertEquals(null, StringUtils.replace(null, null, null, 2));\n         assertEquals(null, StringUtils.replace(null, null, \"any\", 2));\n         assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1000));\n     }\n     \n+    @Test\n     public void testReplaceOnce_StringStringString() {\n         assertEquals(null, StringUtils.replaceOnce(null, null, null));\n         assertEquals(null, StringUtils.replaceOnce(null, null, \"any\"));\n     /**\n      * Test method for 'StringUtils.replaceEach(String, String[], String[])'\n      */\n+    @Test\n     public void testReplace_StringStringArrayStringArray() {\n-\n-        \n         //JAVADOC TESTS START\n         assertNull(StringUtils.replaceEach(null, new String[]{\"a\"}, new String[]{\"b\"}));\n         assertEquals(StringUtils.replaceEach(\"\", new String[]{\"a\"}, new String[]{\"b\"}),\"\");\n     /**\n      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])'\n      */\n+    @Test\n     public void testReplace_StringStringArrayStringArrayBoolean() {\n         //JAVADOC TESTS START\n         assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{\"a\"}, new String[]{\"b\"}));\n         } catch (IllegalStateException e) {}\n \n         //JAVADOC TESTS END\n-\n-    }\n-    \n+    }\n+    \n+    @Test\n     public void testReplaceChars_StringCharChar() {\n         assertEquals(null, StringUtils.replaceChars(null, 'b', 'z'));\n         assertEquals(\"\", StringUtils.replaceChars(\"\", 'b', 'z'));\n         assertEquals(\"abcba\", StringUtils.replaceChars(\"abcba\", 'x', 'z'));\n     }\n     \n+    @Test\n     public void testReplaceChars_StringStringString() {\n         assertEquals(null, StringUtils.replaceChars(null, null, null));\n         assertEquals(null, StringUtils.replaceChars(null, \"\", null));\n             \"nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234\"));\n     }\n     \n+    @Test\n     public void testOverlay_StringStringIntInt() {\n         assertEquals(null, StringUtils.overlay(null, null, 2, 4));\n         assertEquals(null, StringUtils.overlay(null, null, -2, -4));\n         assertEquals(\"abcdefzzzz\", StringUtils.overlay(\"abcdef\", \"zzzz\", 10, 8));\n     }\n \n+    @Test\n     public void testRepeat_StringInt() {\n         assertEquals(null, StringUtils.repeat(null, 2));\n         assertEquals(\"\", StringUtils.repeat(\"ab\", 0));\n         assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n     }\n \n+    @Test\n     public void testRepeat_StringStringInt() {\n         assertEquals(null, StringUtils.repeat(null, null, 2));\n         assertEquals(null, StringUtils.repeat(null, \"x\", 2));\n         assertEquals(\"?, ?, ?\", StringUtils.repeat(\"?\", \", \", 3));\n     }\n \n+    @Test\n     public void testChop() {\n \n         String[][] chopCases = {\n         }\n     }\n \n+    @Test\n     public void testChomp() {\n \n         String[][] chompCases = {\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testRightPad_StringInt() {\n         assertEquals(null, StringUtils.rightPad(null, 5));\n         assertEquals(\"     \", StringUtils.rightPad(\"\", 5));\n         assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1));\n     }\n \n+    @Test\n     public void testRightPad_StringIntChar() {\n         assertEquals(null, StringUtils.rightPad(null, 5, ' '));\n         assertEquals(\"     \", StringUtils.rightPad(\"\", 5, ' '));\n         assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n     }\n \n+    @Test\n     public void testRightPad_StringIntString() {\n         assertEquals(null, StringUtils.rightPad(null, 5, \"-+\"));\n         assertEquals(\"     \", StringUtils.rightPad(\"\", 5, \" \"));\n     }\n         \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testLeftPad_StringInt() {\n         assertEquals(null, StringUtils.leftPad(null, 5));\n         assertEquals(\"     \", StringUtils.leftPad(\"\", 5));\n         assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2));\n     }\n         \n+    @Test\n     public void testLeftPad_StringIntChar() {\n         assertEquals(null, StringUtils.leftPad(null, 5, ' '));\n         assertEquals(\"     \", StringUtils.leftPad(\"\", 5, ' '));\n         assertEquals(true, StringUtils.containsOnly(str, new char[] {'a'}));\n     }\n         \n+    @Test\n     public void testLeftPad_StringIntString() {\n         assertEquals(null, StringUtils.leftPad(null, 5, \"-+\"));\n         assertEquals(null, StringUtils.leftPad(null, 5, null));\n         assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n     }\n \n+    @Test\n     public void testLengthString() {\n         assertEquals(0, StringUtils.length(null));\n         assertEquals(0, StringUtils.length(\"\"));\n         assertEquals(8, StringUtils.length(\"ABCDEFGH\"));\n     }\n \n+    @Test\n     public void testLengthStringBuffer() {\n         assertEquals(0, StringUtils.length(new StringBuffer(\"\")));\n         assertEquals(0, StringUtils.length(new StringBuffer(StringUtils.EMPTY)));\n         assertEquals(8, StringUtils.length(new StringBuffer(\"ABCDEFGH\")));\n     }\n \n+    @Test\n     public void testLengthStringBuilder() {\n         assertEquals(0, StringUtils.length(new StringBuilder(\"\")));\n         assertEquals(0, StringUtils.length(new StringBuilder(StringUtils.EMPTY)));\n         assertEquals(8, StringUtils.length(new StringBuilder(\"ABCDEFGH\")));\n     }\n     \n+    @Test\n     public void testLength_CharBuffer() {\n         assertEquals(0, StringUtils.length(CharBuffer.wrap(\"\")));\n         assertEquals(1, StringUtils.length(CharBuffer.wrap(\"A\")));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testCenter_StringInt() {\n         assertEquals(null, StringUtils.center(null, -1));\n         assertEquals(null, StringUtils.center(null, 4));\n         assertEquals(\"  a  \", StringUtils.center(\"a\", 5));\n     }\n     \n+    @Test\n     public void testCenter_StringIntChar() {\n         assertEquals(null, StringUtils.center(null, -1, ' '));\n         assertEquals(null, StringUtils.center(null, 4, ' '));\n         assertEquals(\"xxaxx\", StringUtils.center(\"a\", 5, 'x'));\n     }\n     \n+    @Test\n     public void testCenter_StringIntString() {\n         assertEquals(null, StringUtils.center(null, 4, null));\n         assertEquals(null, StringUtils.center(null, -1, \" \"));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testReverse_String() {\n         assertEquals(null, StringUtils.reverse(null) );\n         assertEquals(\"\", StringUtils.reverse(\"\") );\n         assertEquals(\"sdrawkcab\", StringUtils.reverse(\"backwards\") );\n     }\n         \n+    @Test\n     public void testReverseDelimited_StringChar() {\n         assertEquals(null, StringUtils.reverseDelimited(null, '.') );\n         assertEquals(\"\", StringUtils.reverseDelimited(\"\", '.') );\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testDefault_String() {\n         assertEquals(\"\", StringUtils.defaultString(null));\n         assertEquals(\"\", StringUtils.defaultString(\"\"));\n         assertEquals(\"abc\", StringUtils.defaultString(\"abc\"));\n     }\n \n+    @Test\n     public void testDefault_StringString() {\n         assertEquals(\"NULL\", StringUtils.defaultString(null, \"NULL\"));\n         assertEquals(\"\", StringUtils.defaultString(\"\", \"NULL\"));\n         assertEquals(\"abc\", StringUtils.defaultString(\"abc\", \"NULL\"));\n     }\n \n+    @Test\n     public void testDefaultIfEmpty_StringString() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(null, \"NULL\"));\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n         assertEquals(\"abc\", s);\n     }\n \n+    @Test\n     public void testDefaultIfBlank_StringString() {\n         assertEquals(\"NULL\", StringUtils.defaultIfBlank(null, \"NULL\"));\n         assertEquals(\"NULL\", StringUtils.defaultIfBlank(\"\", \"NULL\"));\n         assertEquals(\"abc\", s);\n     }\n \n+    @Test\n     public void testDefaultIfEmpty_StringBuilders() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n         assertEquals(\"abc\", s.toString());\n     }\n \n+    @Test\n     public void testDefaultIfBlank_StringBuilders() {\n         assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n         assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuilder(\" \"), new StringBuilder(\"NULL\")).toString());\n         assertEquals(\"abc\", s.toString());\n     }\n \n+    @Test\n     public void testDefaultIfEmpty_StringBuffers() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n         assertEquals(\"abc\", s.toString());\n     }\n \n+    @Test\n     public void testDefaultIfBlank_StringBuffers() {\n         assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n         assertEquals(\"NULL\", StringUtils.defaultIfBlank(new StringBuffer(\" \"), new StringBuffer(\"NULL\")).toString());\n         assertEquals(\"abc\", s.toString());\n     }\n \n+    @Test\n     public void testDefaultIfEmpty_CharBuffers() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n         assertEquals(\"abc\", s.toString());\n     }\n \n+    @Test\n     public void testDefaultIfBlank_CharBuffers() {\n         assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n         assertEquals(\"NULL\", StringUtils.defaultIfBlank(CharBuffer.wrap(\" \"), CharBuffer.wrap(\"NULL\")).toString());\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testAbbreviate_StringInt() {\n         assertEquals(null, StringUtils.abbreviate(null, 10));\n         assertEquals(\"\", StringUtils.abbreviate(\"\", 10));\n         }              \n     }\n     \n+    @Test\n     public void testAbbreviate_StringIntInt() {\n         assertEquals(null, StringUtils.abbreviate(null, 10, 12));\n         assertEquals(\"\", StringUtils.abbreviate(\"\", 0, 10));\n         assertEquals(message, expected, actual);\n     }\n \n+    @Test\n     public void testAbbreviateMiddle() {\n         // javadoc examples\n         assertNull( StringUtils.abbreviateMiddle(null, null, 0) );\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testDifference_StringString() {\n         assertEquals(null, StringUtils.difference(null, null));\n         assertEquals(\"\", StringUtils.difference(\"\", \"\"));\n         assertEquals(\"you are a robot\", StringUtils.difference(\"i am a robot\", \"you are a robot\"));\n     }\n \n+    @Test\n     public void testDifferenceAt_StringString() {\n         assertEquals(-1, StringUtils.indexOfDifference(null, null));\n         assertEquals(0, StringUtils.indexOfDifference(null, \"i am a robot\"));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetLevenshteinDistance_StringString() {\n         assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\") );\n         assertEquals(1, StringUtils.getLevenshteinDistance(\"\", \"a\") );\n         }\n     }\n \n+    @Test\n     public void testGetLevenshteinDistance_StringStringInt() {\n         // empty strings\n         assertEquals(0, StringUtils.getLevenshteinDistance(\"\", \"\", 0));\n     /**\n      * A sanity check for {@link StringUtils#EMPTY}.\n      */\n+    @Test\n     public void testEMPTY() {\n         assertNotNull(StringUtils.EMPTY);\n         assertEquals(\"\", StringUtils.EMPTY);\n     /**\n      * Test for {@link StringUtils#isAllLowerCase(CharSequence)}.\n      */\n+    @Test\n     public void testIsAllLowerCase() {\n         assertFalse(StringUtils.isAllLowerCase(null));\n         assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY));\n     /**\n      * Test for {@link StringUtils#isAllUpperCase(CharSequence)}.\n      */\n+    @Test\n     public void testIsAllUpperCase() {\n         assertFalse(StringUtils.isAllUpperCase(null));\n         assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY));\n         assertFalse(StringUtils.isAllUpperCase(\"aBC\"));\n     }\n \n+    @Test\n     public void testRemoveStart() {\n         // StringUtils.removeStart(\"\", *)        = \"\"\n         assertNull(StringUtils.removeStart(null, null));\n         assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");        \n     }\n     \n+    @Test\n     public void testRemoveStartIgnoreCase() {\n         // StringUtils.removeStart(\"\", *)        = \"\"\n         assertNull(\"removeStartIgnoreCase(null, null)\", StringUtils.removeStartIgnoreCase(null, null));\n         assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\");\n     }\n \n+    @Test\n     public void testRemoveEnd() {\n         // StringUtils.removeEnd(\"\", *)        = \"\"\n         assertNull(StringUtils.removeEnd(null, null));\n         assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n     }\n \n+    @Test\n     public void testRemoveEndIgnoreCase() {\n         // StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n         assertNull(\"removeEndIgnoreCase(null, null)\", StringUtils.removeEndIgnoreCase(null, null));\n         assertEquals(\"removeEndIgnoreCase(\\\"www.domain.COM\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.COM\", \".com\"), \"www.domain\");\n     }\n \n+    @Test\n     public void testRemove_String() {\n         // StringUtils.remove(null, *)        = null\n         assertEquals(null, StringUtils.remove(null, null));\n         assertEquals(\"queued\", StringUtils.remove(\"queued\", \"zz\"));\n     }\n \n+    @Test\n     public void testRemove_char() {\n         // StringUtils.remove(null, *)       = null\n         assertEquals(null, StringUtils.remove(null, 'a'));\n         assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n     }\n     \n-    public void testDifferenceAt_StringArray(){        \n+    @Test\n+    public void testDifferenceAt_StringArray() {        \n         assertEquals(-1, StringUtils.indexOfDifference((String[])null));\n         assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\n         assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\n         assertEquals(7, StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}));\n     }\n     \n-    public void testGetCommonPrefix_StringArray(){\n+    @Test\n+    public void testGetCommonPrefix_StringArray() {\n         assertEquals(\"\", StringUtils.getCommonPrefix((String[])null));\n         assertEquals(\"\", StringUtils.getCommonPrefix());\n         assertEquals(\"abc\", StringUtils.getCommonPrefix(\"abc\"));\n         assertEquals(\"i am a \", StringUtils.getCommonPrefix(\"i am a machine\", \"i am a robot\"));\n     }\n         \n+    @Test\n     public void testNormalizeSpace() {\n         assertEquals(null, StringUtils.normalizeSpace(null));\n         assertEquals(\"\", StringUtils.normalizeSpace(\"\"));\n         assertEquals(\"a b c\", StringUtils.normalizeSpace(\"a\\t\\f\\r  b\\u000B   c\\n\"));\n     }\n \n+    @Test\n     public void testLANG666() {\n         assertEquals(\"12\",StringUtils.stripEnd(\"120.00\", \".0\"));\n         assertEquals(\"121\",StringUtils.stripEnd(\"121.00\", \".0\"));\n     // should take a CharSequence parameter. Methods that are mutable in spirit (i.e. capitalize) \n     // should take a String or String[] parameter and return String or String[].\n     // This test enforces that this is done.\n+    @Test\n     public void testStringUtilsCharSequenceContract() {\n         Class<StringUtils> c = StringUtils.class;\n         Method[] methods = c.getMethods();", "timestamp": 1318621576, "metainfo": ""}