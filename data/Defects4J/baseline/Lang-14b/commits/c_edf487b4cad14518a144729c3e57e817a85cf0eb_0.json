{"sha": "edf487b4cad14518a144729c3e57e817a85cf0eb", "log": "Port to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java\n  */\n package org.apache.commons.lang3.builder;\n \n+import static org.junit.Assert.assertEquals;\n+\n import java.util.ArrayList;\n import java.util.HashMap;\n \n-import junit.framework.TestCase;\n-\n import org.apache.commons.lang3.SystemUtils;\n import org.apache.commons.lang3.builder.ToStringStyleTest.Person;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * Unit tests {@link org.apache.commons.lang3.builder.MultiLineToStringStyleTest}.\n  *\n  * @version $Id$\n  */\n-public class MultiLineToStringStyleTest extends TestCase {\n+public class MultiLineToStringStyleTest {\n \n     private final Integer base = Integer.valueOf(5);\n     private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n     \n-    public MultiLineToStringStyleTest(String name) {\n-        super(name);\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    @Before\n+    public void setUp() throws Exception {\n         ToStringBuilder.setDefaultStyle(ToStringStyle.MULTI_LINE_STYLE);\n     }\n \n-    @Override\n-    protected void tearDown() throws Exception {\n-        super.tearDown();\n+    @After\n+    public void tearDown() throws Exception {\n         ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE);\n     }\n \n     //----------------------------------------------------------------\n-    \n+\n+    @Test\n     public void testBlank() {\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).toString());\n     }\n \n+    @Test\n     public void testAppendSuper() {\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(\"Integer@8888[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\").toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=hello\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).appendSuper(null).append(\"a\", \"hello\").toString());\n     }\n     \n+    @Test\n     public void testObject() {\n         Integer i3 = Integer.valueOf(3);\n         Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a={}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) new String[0], true).toString());\n     }\n \n+    @Test\n     public void testPerson() {\n         Person p = new Person();\n         p.name = \"Jane Doe\";\n         assertEquals(pBaseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  name=Jane Doe\" + SystemUtils.LINE_SEPARATOR + \"  age=25\" + SystemUtils.LINE_SEPARATOR + \"  smoker=true\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(p).append(\"name\", p.name).append(\"age\", p.age).append(\"smoker\", p.smoker).toString());\n     }\n \n+    @Test\n     public void testLong() {\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(3L).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=3\" + SystemUtils.LINE_SEPARATOR + \"  b=4\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", 3L).append(\"b\", 4L).toString());\n     }\n \n+    @Test\n     public void testObjectArray() {\n         Object[] array = new Object[] {null, base, new int[] {3, 6}};\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {<null>,5,{3,6}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testLongArray() {\n         long[] array = new long[] {1, 2, -3, 4};\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {1,2,-3,4}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) array).toString());\n     }\n \n+    @Test\n     public void testLongArrayArray() {\n         long[][] array = new long[][] {{1, 2}, null, {5}};\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  {{1,2},<null>,{5}}\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(array).toString());", "timestamp": 1318949816, "metainfo": ""}