{"sha": "a7fb1967312a783231307048122e74003dc25554", "log": "Relax exceptions in leftPad(), rightPad() and center()   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.88 2003/08/01 23:11:55 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.89 2003/08/01 23:20:06 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n      * StringUtils.rightPad(\"bat\", 8, \"yz\")  = \"batyzyzy\"\n      * StringUtils.rightPad(\"bat\", 1, \"yz\")  = \"bat\"\n      * StringUtils.rightPad(\"bat\", -1, \"yz\") = \"bat\"\n-     * StringUtils.rightPad(\"bat\", 1, null)  = IllegalArgumentException\n-     * StringUtils.rightPad(\"bat\", 1, \"\")    = IllegalArgumentException\n-     * StringUtils.rightPad(null, 1, \"\")     = null\n+     * StringUtils.rightPad(\"bat\", 5, null)  = \"bat  \"\n+     * StringUtils.rightPad(\"bat\", 5, \"\")    = \"bat  \"\n      * </pre>\n      *\n      * @param str  the String to pad out, may be null\n      * @param size  the size to pad to\n-     * @param padStr  the String to pad with, must not be null\n+     * @param padStr  the String to pad with, null or empty treated as single space\n      * @return right padded String or original String if no padding is necessary,\n      *  <code>null</code> if null String input\n-     * @throws IllegalArgumentException if padStr is the empty String or null\n      */\n     public static String rightPad(String str, int size, String padStr) {\n         if (str == null) {\n             return null;\n         }\n-        int padLen;\n-        if (padStr == null || (padLen = padStr.length()) == 0) {\n-            throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n-        }\n+        if (padStr == null || padStr.length() == 0) {\n+            padStr = \" \";\n+        }\n+        int padLen = padStr.length();\n         int strLen = str.length();\n         int pads = size - strLen;\n         if (pads <= 0) {\n      * StringUtils.leftPad(\"bat\", 8, \"yz\")  = \"yzyzybat\"\n      * StringUtils.leftPad(\"bat\", 1, \"yz\")  = \"bat\"\n      * StringUtils.leftPad(\"bat\", -1, \"yz\") = \"bat\"\n-     * StringUtils.leftPad(\"bat\", 1, null)  = IllegalArgumentException\n-     * StringUtils.leftPad(\"bat\", 1, \"\")    = IllegalArgumentException\n-     * StringUtils.leftPad(null, 1, \"\")     = null\n+     * StringUtils.leftPad(\"bat\", 5, null)  = \"  bat\"\n+     * StringUtils.leftPad(\"bat\", 5, \"\")    = \"  bat\"\n      * </pre>\n      *\n      * @param str  the String to pad out, may be null\n      * @param size  the size to pad to\n-     * @param padStr  the String to pad with, must not be null\n+     * @param padStr  the String to pad with, null or empty treated as single space\n      * @return left padded String or original String if no padding is necessary,\n      *  <code>null</code> if null String input\n-     * @throws IllegalArgumentException if padStr is the empty String or null\n      */\n     public static String leftPad(String str, int size, String padStr) {\n         if (str == null) {\n             return null;\n         }\n-        int padLen;\n-        if (padStr == null || (padLen = padStr.length()) == 0) {\n-            throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n-        }\n+        if (padStr == null || padStr.length() == 0) {\n+            padStr = \" \";\n+        }\n+        int padLen = padStr.length();\n         int strLen = str.length();\n         int pads = size - strLen;\n         if (pads <= 0) {\n      * StringUtils.center(\"abcd\", 2, \" \") = \"abcd\"\n      * StringUtils.center(\"a\", 4, \" \")    = \" a  \"\n      * StringUtils.center(\"a\", 4, \"yz\")   = \"yayz\"\n-     * StringUtils.center(\"abc\", 4, null) = IllegalArgumentException\n-     * StringUtils.center(\"abc\", 4, \"\")   = IllegalArgumentException\n-     * StringUtils.center(null, 4, \"\")    = null\n+     * StringUtils.center(\"abc\", 7, null) = \"  abc  \"\n+     * StringUtils.center(\"abc\", 7, \"\")   = \"  abc  \"\n      * </pre>\n      * \n      * @param str  the String to center, may be null\n             return str;\n         }\n         if (padStr == null || padStr.length() == 0) {\n-            throw new IllegalArgumentException(\"Pad String must not be null or empty\");\n+            padStr = \" \";\n         }\n         int strLen = str.length();\n         int pads = size - strLen;\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n- * @version $Id: StringUtilsTest.java,v 1.43 2003/08/01 23:01:52 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.44 2003/08/01 23:20:06 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         assertEquals(\"abc-+\", StringUtils.rightPad(\"abc\", 5, \"-+~\"));\n         assertEquals(\"abc\", StringUtils.rightPad(\"abc\", 2, \" \"));\n         assertEquals(\"abc\", StringUtils.rightPad(\"abc\", -1, \" \"));\n-        try {\n-            StringUtils.rightPad(\"abc56\", 6, null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            StringUtils.rightPad(\"abc56\", 6, \"\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, null));\n+        assertEquals(\"abc  \", StringUtils.rightPad(\"abc\", 5, \"\"));\n     }\n         \n     //-----------------------------------------------------------------------\n         assertEquals(\"-+abc\", StringUtils.leftPad(\"abc\", 5, \"-+~\"));\n         assertEquals(\"abc\", StringUtils.leftPad(\"abc\", 2, \" \"));\n         assertEquals(\"abc\", StringUtils.leftPad(\"abc\", -1, \" \"));\n-        try {\n-            StringUtils.leftPad(\"abc56\", 6, null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n-        try {\n-            StringUtils.leftPad(\"abc56\", 6, \"\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {}\n+        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, null));\n+        assertEquals(\"  abc\", StringUtils.leftPad(\"abc\", 5, \"\"));\n     }\n \n     //-----------------------------------------------------------------------\n         assertEquals(\" a  \", StringUtils.center(\"a\", 4, \" \"));\n         assertEquals(\"yayz\", StringUtils.center(\"a\", 4, \"yz\"));\n         assertEquals(\"yzyayzy\", StringUtils.center(\"a\", 7, \"yz\"));\n-        try {\n-            StringUtils.center(\"abc\", 4, null);\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-        }\n-        try {\n-            StringUtils.center(\"abc\", 4, \"\");\n-            fail();\n-        } catch (IllegalArgumentException ex) {\n-        }\n+        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, null));\n+        assertEquals(\"  abc  \", StringUtils.center(\"abc\", 7, \"\"));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1059780006, "metainfo": ""}