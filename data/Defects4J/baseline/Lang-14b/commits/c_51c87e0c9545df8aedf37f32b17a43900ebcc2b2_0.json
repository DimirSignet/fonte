{"sha": "51c87e0c9545df8aedf37f32b17a43900ebcc2b2", "log": "Additional Javadoc; Remove IllegalArgumentException from throws clause  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n import org.apache.commons.lang3.builder.ToStringStyle;\n \n /**\n- * Helper methods for working with {@link Annotation}s.\n+ * <p>Helper methods for working with {@link Annotation} instances.</p>\n+ * \n+ * <p>This contains various utility methods that make working with annotations simpler.</p>\n+ * \n+ * <p>#ThreadSafe#</p>\n+ * \n  * @since 3.0\n  * @version $Id$\n  */\n public class AnnotationUtils {\n+\n+    /**\n+     * A style that prints annotations as recommended.\n+     */\n     private static final ToStringStyle TO_STRING_STYLE = new ToStringStyle() {\n         /** Serialization version */\n         private static final long serialVersionUID = 1L;\n     public AnnotationUtils() {\n     }\n \n-    /**\n-     * Learn whether two annotations are equivalent; dynamically created\n-     * {@link Annotation} instances are always proxy objects which cannot be\n-     * depended upon to know how to implement {@link Annotation#equals(Object)}\n-     * per spec.\n-     * @param a1 the first Annotation to compare\n-     * @param a2 the second Annotation to compare\n-     * @return Whether the two annotations are equal\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Checks if two annotations are equal.</p>\n+     * \n+     * <p>Dynamically created {@link Annotation} instances are always proxy\n+     * objects which cannot be depended upon to know how to implement\n+     * {@link Annotation#equals(Object)} correctly.</p>\n+     * \n+     * @param a1 the first Annotation to compare, null returns false unless both are null\n+     * @param a2 the second Annotation to compare, null returns false unless both are null\n+     * @return true if the two annotations are equal or both null\n      */\n     public static boolean equals(Annotation a1, Annotation a2) {\n         if (a1 == a2) {\n     }\n \n     /**\n-     * Generate a hashcode for the given annotation; dynamically created\n-     * {@link Annotation} instances are always proxy objects which cannot be\n-     * depended upon to know how to implement {@link Annotation#hashCode()} per\n-     * spec.\n-     * \n-     * @param a the Annotation for a hashcode calculation is desired\n-     * @return the calculated hashcode\n-     * @throws IllegalArgumentException\n-     * @throws IllegalAccessException\n-     * @throws InvocationTargetException\n-     */\n-    public static int hashCode(Annotation a) throws IllegalArgumentException,\n-            IllegalAccessException, InvocationTargetException {\n+     * <p>Generate a hash code for the given annotation.</p>\n+     * \n+     * <p>Dynamically created {@link Annotation} instances are always proxy\n+     * objects which cannot be depended upon to know how to implement\n+     * {@link Annotation#hashCode()} correctly.</p>\n+     * \n+     * @param a the Annotation for a hash code calculation is desired, not null\n+     * @return the calculated hash code\n+     * @throws IllegalAccessException if thrown during annotation access\n+     * @throws InvocationTargetException if thrown during annotation access\n+     */\n+    public static int hashCode(Annotation a)\n+            throws IllegalAccessException, InvocationTargetException {\n         int result = 0;\n         Class<? extends Annotation> type = a.annotationType();\n         for (Method m : type.getDeclaredMethods()) {\n             Object value = m.invoke(a);\n             if (value == null) {\n-                throw new IllegalStateException(String.format(\"Annotation method %s returned null\",\n-                        m));\n+                throw new IllegalStateException(\n+                        String.format(\"Annotation method %s returned null\", m));\n             }\n             result += hashMember(m.getName(), value);\n         }\n     }\n \n     /**\n-     * Generate a string representation of an Annotation, as suggested by\n-     * {@link Annotation#toString()}.\n+     * <p>Generate a string representation of an Annotation, as suggested by\n+     * {@link Annotation#toString()}.</p>\n+     * \n      * @param a the annotation of which a string representation is desired\n-     * @return String\n+     * @return the standard string representation of an annotation, not null\n      */\n     public static String toString(final Annotation a) {\n         ToStringBuilder builder = new ToStringBuilder(a, TO_STRING_STYLE);\n     }\n \n     /**\n-     * Learn whether the specified type is permitted as an annotation member.\n-     * These include {@link String}, {@link Class}, primitive types,\n-     * {@link Annotation}s, {@link Enum}s, and arrays of same.\n-     * @param type to check\n-     * @return boolean\n+     * <p>Checks if the specified type is permitted as an annotation member.</p>\n+     * \n+     * <p>The Java language specification only permits certain types to be used\n+     * in annotations. These include {@link String}, {@link Class}, primitive types,\n+     * {@link Annotation}, {@link Enum}, and arrays of these types.</p>\n+     * \n+     * @param type the type to check, null returns false\n+     * @return true if the type is a valid type to use in an annotation\n      */\n     public static boolean isValidAnnotationMemberType(Class<?> type) {\n         if (type == null) {\n     }\n \n     //besides modularity, this has the advantage of autoboxing primitives:\n-    private static int hashMember(String name, Object value) throws IllegalArgumentException,\n-            IllegalAccessException, InvocationTargetException {\n+    private static int hashMember(String name, Object value)\n+            throws IllegalAccessException, InvocationTargetException {\n         int part1 = name.hashCode() * 127;\n         if (value.getClass().isArray()) {\n             return part1 ^ arrayMemberHash(value.getClass().getComponentType(), value);", "timestamp": 1299240202, "metainfo": ""}