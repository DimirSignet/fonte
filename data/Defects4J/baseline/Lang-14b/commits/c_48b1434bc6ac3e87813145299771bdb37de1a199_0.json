{"sha": "48b1434bc6ac3e87813145299771bdb37de1a199", "log": "Replacing the creation of a List in the core of each Builder class to test contains on the excludeFields with a call to ArrayUtils.contains. Reported by Anthony Whitford in LANG-575  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n \n /** \n  * Assists in implementing {@link java.lang.Comparable#compareTo(Object)} methods.\n         String[] excludeFields) {\n         \n         Field[] fields = clazz.getDeclaredFields();\n-        List<String> excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();\n         AccessibleObject.setAccessible(fields, true);\n         for (int i = 0; i < fields.length && builder.comparison == 0; i++) {\n             Field f = fields[i];\n-            if (!excludedFieldList.contains(f.getName())\n+            if (!ArrayUtils.contains(excludeFields, f.getName())\n                 && (f.getName().indexOf('$') == -1)\n                 && (useTransients || !Modifier.isTransient(f.getModifiers()))\n                 && (!Modifier.isStatic(f.getModifiers()))) {\n--- a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java\n import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n  * <p>Assists in implementing {@link Object#equals(Object)} methods.</p>\n         boolean useTransients,\n         String[] excludeFields) {\n         Field[] fields = clazz.getDeclaredFields();\n-        List<String> excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();\n         AccessibleObject.setAccessible(fields, true);\n         for (int i = 0; i < fields.length && builder.isEquals; i++) {\n             Field f = fields[i];\n-            if (!excludedFieldList.contains(f.getName())\n+            if (!ArrayUtils.contains(excludeFields, f.getName())\n                 && (f.getName().indexOf('$') == -1)\n                 && (useTransients || !Modifier.isTransient(f.getModifiers()))\n                 && (!Modifier.isStatic(f.getModifiers()))) {\n--- a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n+import org.apache.commons.lang3.ArrayUtils;\n \n /**\n  * <p>\n         try {\n             register(object);\n             Field[] fields = clazz.getDeclaredFields();\n-            List<String> excludedFieldList = excludeFields != null ? Arrays.asList(excludeFields) : Collections.<String>emptyList();\n             AccessibleObject.setAccessible(fields, true);\n             for (Field field : fields) {\n-                if (!excludedFieldList.contains(field.getName())\n+                if (!ArrayUtils.contains(excludeFields, field.getName())\n                     && (field.getName().indexOf('$') == -1)\n                     && (useTransients || !Modifier.isTransient(field.getModifiers()))\n                     && (!Modifier.isStatic(field.getModifiers()))) {", "timestamp": 1263037446, "metainfo": ""}