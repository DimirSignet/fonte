{"sha": "f34b4cc34aff20638b56dcebc51601ccc61dae8f", "log": "[LANG-597] vastly expanded TypeUtils  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.lang.reflect.TypeVariable;\n-\n-import org.apache.commons.lang3.Validate;\n+import java.lang.reflect.WildcardType;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.ClassUtils;\n \n /**\n- * <p>Utility methods focusing on type inspection, particularly with regard to\n- * generics.</p>\n+ * <p> Utility methods focusing on type inspection, particularly with regard to\n+ * generics. </p>\n+ *\n+ * @author David M. Sledge\n+ * @author Matt Benson\n  * @author James Carman\n- * @author Matt Benson\n  * @since 3.0\n  * @version $Id$\n  */\n public class TypeUtils {\n \n     /**\n-     * Get the raw type of a Java type, given its context. Primarily for use\n+     * <p> TypeUtils instances should NOT be constructed in standard\n+     * programming. Instead, the class should be used as\n+     * <code>TypeUtils.isAssignable(cls, toClass)</code>. </p> <p> This\n+     * constructor is public to permit tools that require a JavaBean instance to\n+     * operate. </p>\n+     */\n+    public TypeUtils() {\n+        super();\n+    }\n+\n+    /**\n+     * <p> Checks if the subject type may be implicitly cast to the target type\n+     * following the Java generics rules. If both types are {@link Class}\n+     * objects, the method returns the result of\n+     * {@link ClassUtils#isAssignable(Class, Class)}. </p>\n+     *\n+     * @param type the subject type to be assigned to the target type\n+     * @param toType the target type\n+     * @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.\n+     */\n+    public static boolean isAssignable(Type type, Type toType) {\n+        return isAssignable(type, toType, null);\n+    }\n+\n+    /**\n+     * <p> Checks if the subject type may be implicitly cast to the target type\n+     * following the Java generics rules. </p>\n+     *\n+     * @param type the subject type to be assigned to the target type\n+     * @param toType the target type\n+     * @param typeVarAssigns optional map of type variable assignments\n+     * @return <code>true</code> if <code>type</code> is assignable to <code>toType</code>.\n+     */\n+    private static boolean isAssignable(Type type, Type toType,\n+            Map<TypeVariable<?>, Type> typeVarAssigns) {\n+        if (toType == null || toType instanceof Class<?>) {\n+            return isAssignable(type, (Class<?>) toType);\n+        }\n+\n+        if (toType instanceof ParameterizedType) {\n+            return isAssignable(type, (ParameterizedType) toType, typeVarAssigns);\n+        }\n+\n+        if (toType instanceof GenericArrayType) {\n+            return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);\n+        }\n+\n+        if (toType instanceof WildcardType) {\n+            return isAssignable(type, (WildcardType) toType, typeVarAssigns);\n+        }\n+\n+        // *\n+        if (toType instanceof TypeVariable<?>) {\n+            return isAssignable(type, (TypeVariable<?>) toType, typeVarAssigns);\n+        }\n+        // */\n+\n+        throw new IllegalStateException(\"found an unhandled type: \" + toType);\n+    }\n+\n+    /**\n+     * <p> Checks if the subject type may be implicitly cast to the target class\n+     * following the Java generics rules. </p>\n+     *\n+     * @param type the subject type to be assigned to the target type\n+     * @param toClass the target class\n+     * @return true if <code>type</code> is assignable to <code>toClass</code>.\n+     */\n+    private static boolean isAssignable(Type type, Class<?> toClass) {\n+        if (type == null) {\n+            // consistency with ClassUtils.isAssignable() behavior\n+            return toClass == null || !toClass.isPrimitive();\n+        }\n+\n+        // only a null type can be assigned to null type which\n+        // would have cause the previous to return true\n+        if (toClass == null) {\n+            return false;\n+        }\n+\n+        // all types are assignable to themselves\n+        if (toClass.equals(type)) {\n+            return true;\n+        }\n+\n+        if (type instanceof Class<?>) {\n+            // just comparing two classes\n+            return ClassUtils.isAssignable((Class<?>) type, toClass);\n+        }\n+\n+        if (type instanceof ParameterizedType) {\n+            // only have to compare the raw type to the class\n+            return isAssignable(getRawType((ParameterizedType) type), toClass);\n+        }\n+\n+        // *\n+        if (type instanceof TypeVariable<?>) {\n+            // if any of the bounds are assignable to the class, then the\n+            // type is assignable to the class.\n+            for (Type bound : ((TypeVariable<?>) type).getBounds()) {\n+                if (isAssignable(bound, toClass)) {\n+                    return true;\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        // the only classes to which a generic array type can be assigned\n+        // are class Object and array classes\n+        if (type instanceof GenericArrayType) {\n+            return toClass.equals(Object.class)\n+                    || toClass.isArray()\n+                    && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass\n+                            .getComponentType());\n+        }\n+\n+        // wildcard types are not assignable to a class (though one would think\n+        // \"? super Object\" would be assignable to Object)\n+        if (type instanceof WildcardType) {\n+            return false;\n+        }\n+\n+        throw new IllegalStateException(\"found an unhandled type: \" + type);\n+    }\n+\n+    /**\n+     * <p> Checks if the subject type may be implicitly cast to the target\n+     * parameterized type following the Java generics rules. </p>\n+     *\n+     * @param type the subject type to be assigned to the target type\n+     * @param toParameterizedType the target parameterized type\n+     * @return true if <code>type</code> is assignable to <code>toType</code>.\n+     */\n+    private static boolean isAssignable(Type type, ParameterizedType toParameterizedType,\n+            Map<TypeVariable<?>, Type> typeVarAssigns) {\n+        if (type == null) {\n+            return true;\n+        }\n+\n+        // only a null type can be assigned to null type which\n+        // would have cause the previous to return true\n+        if (toParameterizedType == null) {\n+            return false;\n+        }\n+\n+        // all types are assignable to themselves\n+        if (toParameterizedType.equals(type)) {\n+            return true;\n+        }\n+\n+        // get the target type's raw type\n+        Class<?> toClass = getRawType(toParameterizedType);\n+        // get the subject type's type arguments including owner type arguments\n+        // and supertype arguments up to and including the target class.\n+        Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);\n+\n+        // null means the two types are not compatible\n+        if (fromTypeVarAssigns == null) {\n+            return false;\n+        }\n+\n+        // compatible types, but there's no type arguments. this is equivalent\n+        // to comparing Map< ?, ? > to Map, and raw types are always assignable\n+        // to parameterized types.\n+        if (fromTypeVarAssigns.isEmpty()) {\n+            return true;\n+        }\n+\n+        // get the target type's type arguments including owner type arguments\n+        Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType,\n+                toClass, typeVarAssigns);\n+\n+        // now to check each type argument\n+        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n+            Type toTypeArg = entry.getValue();\n+            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n+\n+            // parameters must either be absent from the subject type, within\n+            // the bounds of the wildcard type, or be an exact match to the\n+            // parameters of the target type.\n+            if (fromTypeArg != null\n+                    && !toTypeArg.equals(fromTypeArg)\n+                    && !(toTypeArg instanceof WildcardType && isAssignable(fromTypeArg, toTypeArg,\n+                            typeVarAssigns))) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * <p> Checks if the subject type may be implicitly cast to the target\n+     * generic array type following the Java generics rules. </p>\n+     *\n+     * @param type the subject type to be assigned to the target type\n+     * @param toGenericArrayType the target generic array type\n+     * @return true if <code>type</code> is assignable to\n+     * <code>toGenericArrayType</code>.\n+     */\n+    private static boolean isAssignable(Type type, GenericArrayType toGenericArrayType,\n+            Map<TypeVariable<?>, Type> typeVarAssigns) {\n+        if (type == null) {\n+            return true;\n+        }\n+\n+        // only a null type can be assigned to null type which\n+        // would have cause the previous to return true\n+        if (toGenericArrayType == null) {\n+            return false;\n+        }\n+\n+        // all types are assignable to themselves\n+        if (toGenericArrayType.equals(type)) {\n+            return true;\n+        }\n+\n+        Type toComponentType = toGenericArrayType.getGenericComponentType();\n+\n+        if (type instanceof Class<?>) {\n+            Class<?> cls = (Class<?>) type;\n+\n+            // compare the component types\n+            return cls.isArray()\n+                    && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns);\n+        }\n+\n+        if (type instanceof GenericArrayType) {\n+            // compare the component types\n+            return isAssignable(((GenericArrayType) type).getGenericComponentType(),\n+                    toComponentType, typeVarAssigns);\n+        }\n+\n+        if (type instanceof WildcardType) {\n+            // so long as one of the upper bounds is assignable, it's good\n+            for (Type bound : getImplicitUpperBounds((WildcardType) type)) {\n+                if (isAssignable(bound, toGenericArrayType)) {\n+                    return true;\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        if (type instanceof TypeVariable<?>) {\n+            // probably should remove the following logic and just return false.\n+            // type variables cannot specify arrays as bounds.\n+            for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {\n+                if (isAssignable(bound, toGenericArrayType)) {\n+                    return true;\n+                }\n+            }\n+\n+            return false;\n+        }\n+\n+        if (type instanceof ParameterizedType) {\n+            // the raw type of a parameterized type is never an array or\n+            // generic array, otherwise the declaration would look like this:\n+            // Collection[]< ? extends String > collection;\n+            return false;\n+        }\n+\n+        throw new IllegalStateException(\"found an unhandled type: \" + type);\n+    }\n+\n+    /**\n+     * <p> Checks if the subject type may be implicitly cast to the target\n+     * wildcard type following the Java generics rules. </p>\n+     *\n+     * @param type the subject type to be assigned to the target type\n+     * @param toWildcardType the target wildcard type\n+     * @return true if <code>type</code> is assignable to\n+     * <code>toWildcardType</code>.\n+     */\n+    private static boolean isAssignable(Type type, WildcardType toWildcardType,\n+            Map<TypeVariable<?>, Type> typeVarAssigns) {\n+        if (type == null) {\n+            return true;\n+        }\n+\n+        // only a null type can be assigned to null type which\n+        // would have cause the previous to return true\n+        if (toWildcardType == null) {\n+            return false;\n+        }\n+\n+        // all types are assignable to themselves\n+        if (toWildcardType.equals(type)) {\n+            return true;\n+        }\n+\n+        Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType);\n+        Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType);\n+\n+        if (type instanceof WildcardType) {\n+            WildcardType wildcardType = (WildcardType) type;\n+            Type[] upperBounds = getImplicitUpperBounds(wildcardType);\n+            Type[] lowerBounds = getImplicitLowerBounds(wildcardType);\n+\n+            for (Type toBound : toUpperBounds) {\n+                // if there are assignments for unresolved type variables,\n+                // now's the time to substitute them.\n+                toBound = substituteTypeVariables(toBound, typeVarAssigns);\n+\n+                // each upper bound of the subject type has to be assignable to\n+                // each\n+                // upper bound of the target type\n+                for (Type bound : upperBounds) {\n+                    if (!isAssignable(bound, toBound, typeVarAssigns)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+\n+            for (Type toBound : toLowerBounds) {\n+                // if there are assignments for unresolved type variables,\n+                // now's the time to substitute them.\n+                toBound = substituteTypeVariables(toBound, typeVarAssigns);\n+\n+                // each lower bound of the target type has to be assignable to\n+                // each\n+                // lower bound of the subject type\n+                for (Type bound : lowerBounds) {\n+                    if (!isAssignable(toBound, bound, typeVarAssigns)) {\n+                        return false;\n+                    }\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+        for (Type toBound : toUpperBounds) {\n+            // if there are assignments for unresolved type variables,\n+            // now's the time to substitute them.\n+            if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns),\n+                    typeVarAssigns)) {\n+                return false;\n+            }\n+        }\n+\n+        for (Type toBound : toLowerBounds) {\n+            // if there are assignments for unresolved type variables,\n+            // now's the time to substitute them.\n+            if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type,\n+                    typeVarAssigns)) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * <p> Checks if the subject type may be implicitly cast to the target type\n+     * variable following the Java generics rules. </p>\n+     *\n+     * @param type the subject type to be assigned to the target type\n+     * @param toTypeVariable the target type variable\n+     * @return true if <code>type</code> is assignable to\n+     * <code>toTypeVariable</code>.\n+     */\n+    private static boolean isAssignable(Type type, TypeVariable<?> toTypeVariable,\n+            Map<TypeVariable<?>, Type> typeVarAssigns) {\n+        if (type == null) {\n+            return true;\n+        }\n+\n+        // only a null type can be assigned to null type which\n+        // would have cause the previous to return true\n+        if (toTypeVariable == null) {\n+            return false;\n+        }\n+\n+        // all types are assignable to themselves\n+        if (toTypeVariable.equals(type)) {\n+            return true;\n+        }\n+\n+        if (type instanceof TypeVariable<?>) {\n+            // a type variable is assignable to another type variable, if\n+            // and only if the former is the latter, extends the latter, or\n+            // is otherwise a descendant of the latter.\n+            Type[] bounds = getImplicitBounds((TypeVariable<?>) type);\n+\n+            for (Type bound : bounds) {\n+                if (isAssignable(bound, toTypeVariable, typeVarAssigns)) {\n+                    return true;\n+                }\n+            }\n+        }\n+\n+        if (type instanceof Class<?> || type instanceof ParameterizedType\n+                || type instanceof GenericArrayType || type instanceof WildcardType) {\n+            return false;\n+        }\n+\n+        throw new IllegalStateException(\"found an unhandled type: \" + type);\n+    }\n+\n+    /**\n+     * <p> </p>\n+     *\n+     * @param type\n+     * @param typeVarAssigns\n+     * @return\n+     */\n+    private static Type substituteTypeVariables(Type type, Map<TypeVariable<?>, Type> typeVarAssigns) {\n+        if (type instanceof TypeVariable<?> && typeVarAssigns != null) {\n+            Type replacementType = typeVarAssigns.get(type);\n+\n+            if (replacementType == null) {\n+                throw new IllegalArgumentException(\"missing assignment type for type variable \"\n+                        + type);\n+            }\n+\n+            return replacementType;\n+        }\n+\n+        return type;\n+    }\n+\n+    /**\n+     * <p> Retrieves all the type arguments for this parameterized type\n+     * including owner hierarchy arguments such as <code>\n+     * Outer<K,V>.Inner<T>.DeepInner<E></code> . The arguments are returned in a\n+     * {@link Map} specifying the argument type for each {@link TypeVariable}.\n+     * </p>\n+     *\n+     * @param type specifies the subject parameterized type from which to\n+     * harvest the parameters.\n+     * @return a map of the type arguments to their respective type variables.\n+     */\n+    public static Map<TypeVariable<?>, Type> getTypeArguments(ParameterizedType type) {\n+        return getTypeArguments(type, getRawType(type), null);\n+    }\n+\n+    /**\n+     * <p> Gets the type arguments of a class/interface based on a subtype. For\n+     * instance, this method will determine that both of the parameters for the\n+     * interface {@link Map} are {@link Object} for the subtype\n+     * {@link java.util.Properties Properties} even though the subtype does not\n+     * directly implement the <code>Map</code> interface. <p> </p> This method\n+     * returns <code>null</code> if <code>type</code> is not assignable to\n+     * <code>toClass</code>. It returns an empty map if none of the classes or\n+     * interfaces in its inheritance hierarchy specify any type arguments. </p>\n+     * <p> A side-effect of this method is that it also retrieves the type\n+     * arguments for the classes and interfaces that are part of the hierarchy\n+     * between <code>type</code> and <code>toClass</code>. So with the above\n+     * example, this method will also determine that the type arguments for\n+     * {@link java.util.Hashtable Hashtable} are also both <code>Object</code>.\n+     * In cases where the interface specified by <code>toClass</code> is\n+     * (indirectly) implemented more than once (e.g. where <code>toClass</code>\n+     * specifies the interface {@link java.lang.Iterable Iterable} and\n+     * <code>type</code> specifies a parameterized type that implements both\n+     * {@link java.util.Set Set} and {@link java.lang.Collection Collection}),\n+     * this method will look at the inheritance hierarchy of only one of the\n+     * implementations/subclasses; the first interface encountered that isn't a\n+     * subinterface to one of the others in the <code>type</code> to\n+     * <code>toClass</code> hierarchy. </p>\n+     *\n+     * @param type the type from which to determine the type parameters of\n+     * <code>toClass</code>\n+     * @param toClass the class whose type parameters are to be determined based\n+     * on the subtype <code>type</code>\n+     * @return a map of the type assignments for the type variables in each type\n+     * in the inheritance hierarchy from <code>type</code> to\n+     * <code>toClass</code> inclusive.\n+     */\n+    public static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass) {\n+        return getTypeArguments(type, toClass, null);\n+    }\n+\n+    /**\n+     * <p> Return a map of the type arguments of <code>type</code> in the context of <code>toClass</code>. </p>\n+     *\n+     * @param type\n+     * @param toClass\n+     * @param subtypeVarAssigns\n+     * @return\n+     */\n+    private static Map<TypeVariable<?>, Type> getTypeArguments(Type type, Class<?> toClass,\n+            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n+        if (type instanceof Class<?>) {\n+            return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);\n+        }\n+\n+        if (type instanceof ParameterizedType) {\n+            return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);\n+        }\n+\n+        if (type instanceof GenericArrayType) {\n+            return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass\n+                    .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns);\n+        }\n+\n+        // since wildcard types are not assignable to classes, should this just\n+        // return null?\n+        if (type instanceof WildcardType) {\n+            for (Type bound : getImplicitUpperBounds((WildcardType) type)) {\n+                // find the first bound that is assignable to the target class\n+                if (isAssignable(bound, toClass)) {\n+                    return getTypeArguments(bound, toClass, subtypeVarAssigns);\n+                }\n+            }\n+\n+            return null;\n+        }\n+\n+        // *\n+        if (type instanceof TypeVariable<?>) {\n+            for (Type bound : getImplicitBounds((TypeVariable<?>) type)) {\n+                // find the first bound that is assignable to the target class\n+                if (isAssignable(bound, toClass)) {\n+                    return getTypeArguments(bound, toClass, subtypeVarAssigns);\n+                }\n+            }\n+\n+            return null;\n+        }\n+        // */\n+\n+        throw new IllegalStateException(\"found an unhandled type: \" + type);\n+    }\n+\n+    /**\n+     * <p> </p>\n+     *\n+     * @param parameterizedType\n+     * @param toClass\n+     * @param subtypeVarAssigns\n+     * @return\n+     */\n+    private static Map<TypeVariable<?>, Type> getTypeArguments(\n+            ParameterizedType parameterizedType, Class<?> toClass,\n+            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n+        Class<?> cls = getRawType(parameterizedType);\n+\n+        // make sure they're assignable\n+        if (!isAssignable(cls, toClass)) {\n+            return null;\n+        }\n+\n+        Type ownerType = parameterizedType.getOwnerType();\n+        Map<TypeVariable<?>, Type> typeVarAssigns;\n+\n+        if (ownerType instanceof ParameterizedType) {\n+            // get the owner type arguments first\n+            ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;\n+            typeVarAssigns = getTypeArguments(parameterizedOwnerType,\n+                    getRawType(parameterizedOwnerType), subtypeVarAssigns);\n+        } else {\n+            // no owner, prep the type variable assignments map\n+            typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n+                    : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n+        }\n+\n+        // get the subject parameterized type's arguments\n+        Type[] typeArgs = parameterizedType.getActualTypeArguments();\n+        // and get the corresponding type variables from the raw class\n+        TypeVariable<?>[] typeParams = cls.getTypeParameters();\n+\n+        // map the arguments to their respective type variables\n+        for (int i = 0; i < typeParams.length; i++) {\n+            Type typeArg = typeArgs[i];\n+            typeVarAssigns.put(typeParams[i], typeVarAssigns.containsKey(typeArg) ? typeVarAssigns\n+                    .get(typeArg) : typeArg);\n+        }\n+\n+        if (toClass.equals(cls)) {\n+            // target class has been reached. Done.\n+            return typeVarAssigns;\n+        }\n+\n+        // walk the inheritance hierarchy until the target class is reached\n+        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n+    }\n+\n+    /**\n+     * <p> </p>\n+     *\n+     * @param cls\n+     * @param toClass\n+     * @param subtypeVarAssigns\n+     * @return\n+     */\n+    private static Map<TypeVariable<?>, Type> getTypeArguments(Class<?> cls, Class<?> toClass,\n+            Map<TypeVariable<?>, Type> subtypeVarAssigns) {\n+        // make sure they're assignable\n+        if (!isAssignable(cls, toClass)) {\n+            return null;\n+        }\n+\n+        // can't work with primitives\n+        if (cls.isPrimitive()) {\n+            // both classes are primitives?\n+            if (toClass.isPrimitive()) {\n+                // dealing with widening here. No type arguments to be\n+                // harvested with these two types.\n+                return new HashMap<TypeVariable<?>, Type>();\n+            }\n+\n+            // work with wrapper the wrapper class instead of the primitive\n+            cls = ClassUtils.primitiveToWrapper(cls);\n+        }\n+\n+        // create a copy of the incoming map, or an empty one if it's null\n+        HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n+                : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n+\n+        // no arguments for the parameters, or target class has been reached\n+        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n+            return typeVarAssigns;\n+        }\n+\n+        // walk the inheritance hierarchy until the target class is reached\n+        return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns);\n+    }\n+\n+    /**\n+     * <p> Tries to determine the type arguments of a class/interface based on a\n+     * super parameterized type's type arguments. This method is the inverse of\n+     * {@link #getTypeArguments(Type, Class)} which gets a class/interface's\n+     * type arguments based on a subtype. It is far more limited in determining\n+     * the type arguments for the subject class's type variables in that it can\n+     * only determine those parameters that map from the subject {@link Class}\n+     * object to the supertype. </p> <p> Example: {@link java.util.TreeSet\n+     * TreeSet} sets its parameter as the parameter for\n+     * {@link java.util.NavigableSet NavigableSet}, which in turn sets the\n+     * parameter of {@link java.util.SortedSet}, which in turn sets the\n+     * parameter of {@link Set}, which in turn sets the parameter of\n+     * {@link java.util.Collection}, which in turn sets the parameter of\n+     * {@link java.util.Iterable}. Since <code>TreeSet</code>'s parameter maps\n+     * (indirectly) to <code>Iterable</code>'s parameter, it will be able to\n+     * determine that based on the super type <code>Iterable<? extends\n+     * Map<Integer,? extends Collection<?>>></code>, the parameter of\n+     * <code>TreeSet</code> is <code>? extends Map<Integer,? extends\n+     * Collection<?>></code>. </p>\n+     *\n+     * @param cls the class whose type parameters are to be determined\n+     * @param superType the super type from which <code>cls</code>'s type\n+     * arguments are to be determined\n+     * @return a map of the type assignments that could be determined for the\n+     * type variables in each type in the inheritance hierarchy from\n+     * <code>type</code> to <code>toClass</code> inclusive.\n+     */\n+    public static Map<TypeVariable<?>, Type> determineTypeArguments(Class<?> cls,\n+            ParameterizedType superType) {\n+        Class<?> superClass = getRawType(superType);\n+\n+        // compatibility check\n+        if (!isAssignable(cls, superClass)) {\n+            return null;\n+        }\n+\n+        if (cls.equals(superClass)) {\n+            return getTypeArguments(superType, superClass, null);\n+        }\n+\n+        // get the next class in the inheritance hierarchy\n+        Type midType = getClosestParentType(cls, superClass);\n+\n+        // can only be a class or a parameterized type\n+        if (midType instanceof Class<?>) {\n+            return determineTypeArguments((Class<?>) midType, superType);\n+        }\n+\n+        ParameterizedType midParameterizedType = (ParameterizedType) midType;\n+        Class<?> midClass = getRawType(midParameterizedType);\n+        // get the type variables of the mid class that map to the type\n+        // arguments of the super class\n+        Map<TypeVariable<?>, Type> typeVarAssigns = determineTypeArguments(midClass, superType);\n+        // map the arguments of the mid type to the class type variables\n+        mapTypeVariablesToArguments(cls, midParameterizedType, typeVarAssigns);\n+\n+        return typeVarAssigns;\n+    }\n+\n+    /**\n+     * <p> </p>\n+     *\n+     * @param cls\n+     * @param parameterizedType\n+     * @param typeVarAssigns\n+     */\n+    private static <T> void mapTypeVariablesToArguments(Class<T> cls,\n+            ParameterizedType parameterizedType, Map<TypeVariable<?>, Type> typeVarAssigns) {\n+        // capture the type variables from the owner type that have assignments\n+        Type ownerType = parameterizedType.getOwnerType();\n+\n+        if (ownerType instanceof ParameterizedType) {\n+            // recursion to make sure the owner's owner type gets processed\n+            mapTypeVariablesToArguments(cls, (ParameterizedType) ownerType, typeVarAssigns);\n+        }\n+\n+        // parameterizedType is a generic interface/class (or it's in the owner\n+        // hierarchy of said interface/class) implemented/extended by the class\n+        // cls. Find out which type variables of cls are type arguments of\n+        // parameterizedType:\n+        Type[] typeArgs = parameterizedType.getActualTypeArguments();\n+\n+        // of the cls's type variables that are arguments of parameterizedType,\n+        // find out which ones can be determined from the super type's arguments\n+        TypeVariable<?>[] typeVars = getRawType(parameterizedType).getTypeParameters();\n+\n+        // use List view of type parameters of cls so the contains() method can be used:\n+        List<TypeVariable<Class<T>>> typeVarList = Arrays.asList(cls\n+                .getTypeParameters());\n+\n+        for (int i = 0; i < typeArgs.length; i++) {\n+            TypeVariable<?> typeVar = typeVars[i];\n+            Type typeArg = typeArgs[i];\n+\n+            // argument of parameterizedType is a type variable of cls\n+            if (typeVarList.contains(typeArg)\n+            // type variable of parameterizedType has an assignment in\n+                    // the super type.\n+                    && typeVarAssigns.containsKey(typeVar)) {\n+                // map the assignment to the cls's type variable\n+                typeVarAssigns.put((TypeVariable<?>) typeArg, typeVarAssigns.get(typeVar));\n+            }\n+        }\n+    }\n+\n+    /**\n+     * <p> Closest parent type? Closest to what? The closest parent type to the\n+     * super class specified by <code>superClass</code>. </p>\n+     *\n+     * @param cls\n+     * @param superClass\n+     * @return\n+     */\n+    private static Type getClosestParentType(Class<?> cls, Class<?> superClass) {\n+        // only look at the interfaces if the super class is also an interface\n+        if (superClass.isInterface()) {\n+            // get the generic interfaces of the subject class\n+            Type[] interfaceTypes = cls.getGenericInterfaces();\n+            // will hold the best generic interface match found\n+            Type genericInterface = null;\n+\n+            // find the interface closest to the super class\n+            for (int i = 0; i < interfaceTypes.length; i++) {\n+                Type midType = interfaceTypes[i];\n+                Class<?> midClass = null;\n+\n+                if (midType instanceof ParameterizedType) {\n+                    midClass = getRawType((ParameterizedType) midType);\n+                } else if (midType instanceof Class<?>) {\n+                    midClass = (Class<?>) midType;\n+                } else {\n+                    throw new IllegalStateException(\"Unexpected generic\"\n+                            + \" interface type found: \" + midType);\n+                }\n+\n+                // check if this interface is further up the inheritance chain\n+                // than the previously found match\n+                if (isAssignable(midClass, superClass)\n+                        && isAssignable((Type) genericInterface, (Type) midClass)) {\n+                    genericInterface = midType;\n+                }\n+            }\n+\n+            // found a match?\n+            if (genericInterface != null) {\n+                return genericInterface;\n+            }\n+        }\n+\n+        // none of the interfaces were descendants of the target class, so the\n+        // super class has to be one, instead\n+        return cls.getGenericSuperclass();\n+    }\n+\n+    /**\n+     * <p> Checks if the given value can be assigned to the target type\n+     * following the Java generics rules. </p>\n+     *\n+     * @param value\n+     * @param type\n+     * @return true of <code>value</code> is an instance of <code>type</code>.\n+     */\n+    public static boolean isInstance(Object value, Type type) {\n+        if (type == null) {\n+            return false;\n+        }\n+\n+        return value == null ? !(type instanceof Class<?>) || !((Class<?>) type).isPrimitive()\n+                : isAssignable(value.getClass(), type, null);\n+    }\n+\n+    /**\n+     * <p> This method strips out the redundant upper bound types in type\n+     * variable types and wildcard types (or it would with wildcard types if\n+     * multiple upper bounds were allowed). </p> <p> Example: with the variable\n+     * type declaration:\n+     *\n+     * <pre> &lt;K extends java.util.Collection&lt;String&gt; &amp;\n+     * java.util.List&lt;String&gt;&gt; </pre>\n+     *\n+     * since <code>List</code> is a subinterface of <code>Collection</code>,\n+     * this method will return the bounds as if the declaration had been:\n+     *\n+     * <pre> &lt;K extends java.util.List&lt;String&gt;&gt; </pre>\n+     *\n+     * </p>\n+     *\n+     * @param bounds an array of types representing the upper bounds of either\n+     * <code>WildcardType</code> or <code>TypeVariable</code>.\n+     * @return an array containing the values from <code>bounds</code> minus the\n+     * redundant types.\n+     */\n+    public static Type[] normalizeUpperBounds(Type[] bounds) {\n+        // don't bother if there's only one (or none) type\n+        if (bounds.length < 2) {\n+            return bounds;\n+        }\n+\n+        Set<Type> types = new HashSet<Type>(bounds.length);\n+\n+        for (Type type1 : bounds) {\n+            boolean subtypeFound = false;\n+\n+            for (Type type2 : bounds) {\n+                if (type1 != type2 && isAssignable(type2, type1, null)) {\n+                    subtypeFound = true;\n+                    break;\n+                }\n+            }\n+\n+            if (!subtypeFound) {\n+                types.add(type1);\n+            }\n+        }\n+\n+        return types.toArray(new Type[0]);\n+    }\n+\n+    /**\n+     * <p> Returns an array containing the sole type of {@link Object} if\n+     * {@link TypeVariable#getBounds()} returns an empty array. Otherwise, it\n+     * returns the result of <code>TypeVariable.getBounds()</code> passed into\n+     * {@link normalizeUpperBounds}. </p>\n+     *\n+     * @param typeVariable the subject type variable\n+     * @return a non-empty array containing the bounds of the type variable.\n+     */\n+    public static Type[] getImplicitBounds(TypeVariable<?> typeVariable) {\n+        Type[] bounds = typeVariable.getBounds();\n+\n+        return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\n+    }\n+\n+    /**\n+     * <p> Returns an array containing the sole value of {@link Object} if\n+     * {@link WildcardType#getUpperBounds()} returns an empty array. Otherwise,\n+     * it returns the result of <code>WildcardType.getUpperBounds()</code>\n+     * passed into {@link normalizeUpperBounds}. </p>\n+     *\n+     * @param wildcardType the subject wildcard type\n+     * @return a non-empty array containing the upper bounds of the wildcard\n+     * type.\n+     */\n+    public static Type[] getImplicitUpperBounds(WildcardType wildcardType) {\n+        Type[] bounds = wildcardType.getUpperBounds();\n+\n+        return bounds.length == 0 ? new Type[] { Object.class } : normalizeUpperBounds(bounds);\n+    }\n+\n+    /**\n+     * <p> Returns an array containing a single value of <code>null</code> if\n+     * {@link WildcardType#getLowerBounds()} returns an empty array. Otherwise,\n+     * it returns the result of <code>WildcardType.getLowerBounds()</code>. </p>\n+     *\n+     * @param type the subject wildcard type\n+     * @return a non-empty array containing the lower bounds of the wildcard\n+     * type.\n+     */\n+    public static Type[] getImplicitLowerBounds(WildcardType wildcardType) {\n+        Type[] bounds = wildcardType.getLowerBounds();\n+\n+        return bounds.length == 0 ? new Type[] { null } : bounds;\n+    }\n+\n+    /**\n+     * <p> Determines whether or not specified types satisfy the bounds of their\n+     * mapped type variables. When a type parameter extends another (such as\n+     * <code><T, S extends T></code>), uses another as a type parameter (such as\n+     * <code><T, S extends Comparable<T></code>), or otherwise depends on\n+     * another type variable to be specified, the dependencies must be included\n+     * in <code>typeVarAssigns</code>. </p>\n+     *\n+     * @param typeVarAssigns specifies the potential types to be assigned to the\n+     * type variables.\n+     * @return whether or not the types can be assigned to their respective type\n+     * variables.\n+     */\n+    public static boolean typesSatisfyVariables(Map<TypeVariable<?>, Type> typeVarAssigns) {\n+        // all types must be assignable to all the bounds of the their mapped\n+        // type variable.\n+        for (Map.Entry<TypeVariable<?>, Type> entry : typeVarAssigns.entrySet()) {\n+            TypeVariable<?> typeVar = entry.getKey();\n+            Type type = entry.getValue();\n+\n+            for (Type bound : getImplicitBounds(typeVar)) {\n+                if (!isAssignable(type, substituteTypeVariables(bound, typeVarAssigns),\n+                        typeVarAssigns)) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    /**\n+     * <p> Type-checking method of convenience. </p>\n+     *\n+     * @param parameterizedType\n+     * @return\n+     */\n+    private static Class<?> getRawType(ParameterizedType parameterizedType) {\n+        Type rawType = parameterizedType.getRawType();\n+\n+        // check if raw type is a Class object\n+        // not currently necessary, but since the return type is Type instead of\n+        // Class, there's enough reason to believe that future versions of Java\n+        // may return other Type implementations. And type-safety checking is\n+        // rarely a bad idea.\n+        if (!(rawType instanceof Class<?>)) {\n+            throw new IllegalStateException(\"Wait... What!? Type of rawType: \" + rawType);\n+        }\n+\n+        return (Class<?>) rawType;\n+    }\n+\n+    /**\n+     * <p> Get the raw type of a Java type, given its context. Primarily for use\n      * with {@link TypeVariable}s and {@link GenericArrayType}s, or when you do\n      * not know the runtime type of <code>type</code>: if you know you have a\n      * {@link Class} instance, it is already raw; if you know you have a\n-     * {@link ParameterizedType}, its raw type is only a method call away.\n-     * @param enclosingType context\n-     * @param type to read\n-     * @return Class<?>\n-     */\n-    // original code taken from commons [proxy]'s 2.0 branch, then kneaded until firm\n-    public static Class<?> getRawType(Type enclosingType, Type type) {\n+     * {@link ParameterizedType}, its raw type is only a method call away. </p>\n+     *\n+     * @param type to resolve\n+     * @param assigningType type to be resolved against\n+     * @return the resolved <code>Class</code> object or <code>null</code> if\n+     * the type could not be resolved\n+     */\n+    public static Class<?> getRawType(Type type, Type assigningType) {\n         if (type instanceof Class<?>) {\n             // it is raw, no problem\n             return (Class<?>) type;\n         }\n+\n         if (type instanceof ParameterizedType) {\n             // simple enough to get the raw type of a ParameterizedType\n-            return (Class<?>) ((ParameterizedType) type).getRawType();\n-        }\n+            return getRawType((ParameterizedType) type);\n+        }\n+\n         if (type instanceof TypeVariable<?>) {\n-            Validate.notNull(enclosingType,\n-                    \"Cannot get raw type of TypeVariable without enclosing type\");\n-            // resolve the variable against the enclosing type, hope for the best (casting)\n-            return (Class<?>) resolveVariable(enclosingType, (TypeVariable<?>) type);\n-        }\n+            if (assigningType == null) {\n+                return null;\n+            }\n+\n+            // get the entity declaring this type variable\n+            Object genericDeclaration = ((TypeVariable<?>) type).getGenericDeclaration();\n+\n+            // can't get the raw type of a method- or constructor-declared type\n+            // variable\n+            if (!(genericDeclaration instanceof Class<?>)) {\n+                return null;\n+            }\n+\n+            // get the type arguments for the declaring class/interface based\n+            // on the enclosing type\n+            Map<TypeVariable<?>, Type> typeVarAssigns = getTypeArguments(assigningType,\n+                    (Class<?>) genericDeclaration);\n+\n+            // enclosingType has to be a subclass (or subinterface) of the\n+            // declaring type\n+            if (typeVarAssigns == null) {\n+                return null;\n+            }\n+\n+            // get the argument assigned to this type variable\n+            Type typeArgument = typeVarAssigns.get(type);\n+\n+            if (typeArgument == null) {\n+                return null;\n+            }\n+\n+            // get the argument for this type variable\n+            return getRawType(typeArgument, assigningType);\n+        }\n+\n         if (type instanceof GenericArrayType) {\n-            Validate.notNull(enclosingType,\n-                    \"Cannot get raw type of GenericArrayType without enclosing type\");\n-            // not included in original code, but not too difficult:  just have to get raw component type...\n-            Class<?> rawComponentType = getRawType(enclosingType, ((GenericArrayType) type)\n-                    .getGenericComponentType());\n-            // ...and know how to reflectively create array types, uncommon but not unheard of:\n+            // get raw component type\n+            Class<?> rawComponentType = getRawType(((GenericArrayType) type)\n+                    .getGenericComponentType(), assigningType);\n+\n+            // create array type from raw component type and return its class\n             return Array.newInstance(rawComponentType, 0).getClass();\n         }\n-        throw new IllegalArgumentException(String.valueOf(type));\n-    }\n-\n-    /**\n-     * We plan to return Class<?> from the top-level call, as evidenced by the\n-     * cast in the above method, but to handle recursion and falling back up the\n-     * graph, as it were, return Type\n-     * @param enclosingType\n-     * @param typeVar\n-     * @return Type resolved\n-     */\n-    // original code taken from commons [proxy]'s 2.0 branch, then kneaded until firm\n-    private static Type resolveVariable(Type enclosingType, TypeVariable<?> typeVar) {\n-        if (enclosingType instanceof ParameterizedType) {\n-            ParameterizedType parameterizedEnclosingType = (ParameterizedType) enclosingType;\n-            TypeVariable<?>[] typeVariables = getRawType(null,\n-                    parameterizedEnclosingType.getRawType()).getTypeParameters();\n-            //look for the matching variable:\n-            for (int i = 0; i < typeVariables.length; i++) {\n-                if (typeVariables[i].equals(typeVar)) {\n-                    return parameterizedEnclosingType.getActualTypeArguments()[i];\n-                }\n-            }\n-            //otherwise recurse to try against raw class\n-            Type result = resolveVariable(parameterizedEnclosingType.getRawType(), typeVar);\n-            //unroll variable if returned\n-            if (result instanceof TypeVariable<?>) {\n-                return resolveVariable(enclosingType, (TypeVariable<?>) result);\n-            }\n-            return result;\n-        }\n-        if (enclosingType instanceof Class<?>) {\n-            Class<?> enclosingClass = (Class<?>) enclosingType;\n-            Type result = null;\n-            Type genericSuperclass = enclosingClass.getGenericSuperclass();\n-            if (genericSuperclass != null && !Object.class.equals(genericSuperclass)) {\n-                result = resolveVariable(genericSuperclass, typeVar);\n-            }\n-            if (result == null) {\n-                for (Type genericInterface : enclosingClass.getGenericInterfaces()) {\n-                    result = resolveVariable(genericInterface, typeVar);\n-                    if (result != null) {\n-                        break;\n-                    }\n-                }\n-            }\n-            if (result != null) {\n-                return result;\n-            }\n-        }\n-        throw new IllegalArgumentException(String.valueOf(typeVar));\n+\n+        // (hand-waving) this is not the method you're looking for\n+        if (type instanceof WildcardType) {\n+            return null;\n+        }\n+\n+        throw new IllegalArgumentException(\"unknown type: \" + type);\n     }\n \n }\n--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n  */\n package org.apache.commons.lang3.reflect;\n \n-import static junit.framework.Assert.*;\n-\n-import java.lang.reflect.Field;\n import java.lang.reflect.TypeVariable;\n import java.util.List;\n \n-import org.apache.commons.lang3.reflect.testbed.*;\n-import org.junit.Before;\n import org.junit.Test;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.TreeSet;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.commons.lang3.StringEscapeUtils;\n+import org.apache.commons.lang3.reflect.testbed.Foo;\n+import org.apache.commons.lang3.reflect.testbed.GenericParent;\n+import org.apache.commons.lang3.reflect.testbed.GenericTypeHolder;\n+import org.apache.commons.lang3.reflect.testbed.StringParameterizedChild;\n \n /**\n  * Test TypeUtils\n- * @author mbenson\n+ * @author David M. Sledge\n  * @version $Id$\n  */\n-public class TypeUtilsTest {\n-    private Field stringParentField;\n-    private Field integerParentField;\n-    private Field foosField;\n-    private Field barParentsField;\n-    private TypeVariable<?> genericParentT;\n-    private TypeVariable<?> listType;\n-    private TypeVariable<?> iterableType;\n-\n-    @Before\n-    public void setup() throws Exception {\n-        stringParentField = GenericTypeHolder.class.getDeclaredField(\"stringParent\");\n-        integerParentField = GenericTypeHolder.class.getDeclaredField(\"integerParent\");\n-        foosField = GenericTypeHolder.class.getDeclaredField(\"foos\");\n-        barParentsField = GenericTypeHolder.class.getDeclaredField(\"barParents\");\n-        genericParentT = GenericParent.class.getTypeParameters()[0];\n-        listType = List.class.getTypeParameters()[0];\n-        iterableType = Iterable.class.getTypeParameters()[0];\n+@SuppressWarnings({ \"unchecked\", \"unused\" })\n+//raw types, where used, are used purposely\n+public class TypeUtilsTest<B> {\n+\n+    public interface This<K, V> {\n+    }\n+\n+    public class That<K, V> implements This<K, V> {\n+    }\n+\n+    public interface And<K, V> extends This<Number, Number> {\n+    }\n+\n+    public class The<K, V> extends That<Number, Number> implements And<String, String> {\n+    }\n+\n+    public class Other<T> implements This<String, T> {\n+    }\n+\n+    public class Thing<Q> extends Other<B> {\n+    }\n+\n+    public class Tester implements This<String, B> {\n+    }\n+\n+    public This<String, String> dis;\n+\n+    public That<String, String> dat;\n+\n+    public The<String, String> da;\n+\n+    public Other<String> uhder;\n+\n+    public Thing ding;\n+\n+    public TypeUtilsTest<String>.Tester tester;\n+\n+    public Tester tester2;\n+\n+    public TypeUtilsTest<String>.That<String, String> dat2;\n+\n+    public TypeUtilsTest<Number>.That<String, String> dat3;\n+\n+    public Comparable<? extends Integer>[] intWildcardComparable;\n+\n+    public static Comparable<String> stringComparable;\n+\n+    public static Comparable<URI> uriComparable;\n+\n+    public static Comparable<Integer> intComparable;\n+\n+    public static Comparable<Long> longComparable;\n+\n+    public static URI uri;\n+\n+    public void dummyMethod(List list0, List<Object> list1, List<?> list2,\n+            List<? super Object> list3, List<String> list4, List<? extends String> list5,\n+            List<? super String> list6, List[] list7, List<Object>[] list8, List<?>[] list9,\n+            List<? super Object>[] list10, List<String>[] list11, List<? extends String>[] list12,\n+            List<? super String>[] list13) {\n     }\n \n     @Test\n-    public void testGetRawTypeClass() throws Exception {\n-        assertEquals(GenericParent.class, TypeUtils.getRawType(null, GenericParent.class));\n+    public void testIsAssignable() throws SecurityException, NoSuchMethodException,\n+            NoSuchFieldException {\n+        List list0 = null;\n+        List<Object> list1 = null;\n+        List<?> list2 = null;\n+        List<? super Object> list3 = null;\n+        List<String> list4 = null;\n+        List<? extends String> list5 = null;\n+        List<? super String> list6 = null;\n+        List[] list7 = null;\n+        List<Object>[] list8 = null;\n+        List<?>[] list9 = null;\n+        List<? super Object>[] list10 = null;\n+        List<String>[] list11 = null;\n+        List<? extends String>[] list12 = null;\n+        List<? super String>[] list13;\n+        Class<?> clazz = getClass();\n+        Method method = clazz.getMethod(\"dummyMethod\", List.class, List.class, List.class,\n+                List.class, List.class, List.class, List.class, List[].class, List[].class,\n+                List[].class, List[].class, List[].class, List[].class, List[].class);\n+        Type[] types = method.getGenericParameterTypes();\n+        list0 = list0;\n+        delegateBooleanAssertion(types, 0, 0, true);\n+        list1 = list0;\n+        delegateBooleanAssertion(types, 0, 1, true);\n+        list0 = list1;\n+        delegateBooleanAssertion(types, 1, 0, true);\n+        list2 = list0;\n+        delegateBooleanAssertion(types, 0, 2, true);\n+        list0 = list2;\n+        delegateBooleanAssertion(types, 2, 0, true);\n+        list3 = list0;\n+        delegateBooleanAssertion(types, 0, 3, true);\n+        list0 = list3;\n+        delegateBooleanAssertion(types, 3, 0, true);\n+        list4 = list0;\n+        delegateBooleanAssertion(types, 0, 4, true);\n+        list0 = list4;\n+        delegateBooleanAssertion(types, 4, 0, true);\n+        list5 = list0;\n+        delegateBooleanAssertion(types, 0, 5, true);\n+        list0 = list5;\n+        delegateBooleanAssertion(types, 5, 0, true);\n+        list6 = list0;\n+        delegateBooleanAssertion(types, 0, 6, true);\n+        list0 = list6;\n+        delegateBooleanAssertion(types, 6, 0, true);\n+        list1 = list1;\n+        delegateBooleanAssertion(types, 1, 1, true);\n+        list2 = list1;\n+        delegateBooleanAssertion(types, 1, 2, true);\n+        list1 = (List<Object>) list2;\n+        delegateBooleanAssertion(types, 2, 1, false);\n+        list3 = list1;\n+        delegateBooleanAssertion(types, 1, 3, true);\n+        list1 = (List<Object>) list3;\n+        delegateBooleanAssertion(types, 3, 1, false);\n+        // list4 = list1;\n+        delegateBooleanAssertion(types, 1, 4, false);\n+        // list1 = list4;\n+        delegateBooleanAssertion(types, 4, 1, false);\n+        // list5 = list1;\n+        delegateBooleanAssertion(types, 1, 5, false);\n+        // list1 = list5;\n+        delegateBooleanAssertion(types, 5, 1, false);\n+        list6 = list1;\n+        delegateBooleanAssertion(types, 1, 6, true);\n+        list1 = (List<Object>) list6;\n+        delegateBooleanAssertion(types, 6, 1, false);\n+        list2 = list2;\n+        delegateBooleanAssertion(types, 2, 2, true);\n+        list2 = list3;\n+        delegateBooleanAssertion(types, 2, 3, false);\n+        list2 = list4;\n+        delegateBooleanAssertion(types, 3, 2, true);\n+        list3 = (List<? super Object>) list2;\n+        delegateBooleanAssertion(types, 2, 4, false);\n+        list2 = list5;\n+        delegateBooleanAssertion(types, 4, 2, true);\n+        list4 = (List<String>) list2;\n+        delegateBooleanAssertion(types, 2, 5, false);\n+        list2 = list6;\n+        delegateBooleanAssertion(types, 5, 2, true);\n+        list5 = (List<? extends String>) list2;\n+        delegateBooleanAssertion(types, 2, 6, false);\n+        list3 = list3;\n+        delegateBooleanAssertion(types, 6, 2, true);\n+        list6 = (List<? super String>) list2;\n+        delegateBooleanAssertion(types, 3, 3, true);\n+        // list4 = list3;\n+        delegateBooleanAssertion(types, 3, 4, false);\n+        // list3 = list4;\n+        delegateBooleanAssertion(types, 4, 3, false);\n+        // list5 = list3;\n+        delegateBooleanAssertion(types, 3, 5, false);\n+        // list3 = list5;\n+        delegateBooleanAssertion(types, 5, 3, false);\n+        list6 = list3;\n+        delegateBooleanAssertion(types, 3, 6, true);\n+        list3 = (List<? super Object>) list6;\n+        delegateBooleanAssertion(types, 6, 3, false);\n+        list4 = list4;\n+        delegateBooleanAssertion(types, 4, 4, true);\n+        list5 = list4;\n+        delegateBooleanAssertion(types, 4, 5, true);\n+        list4 = (List<String>) list5;\n+        delegateBooleanAssertion(types, 5, 4, false);\n+        list6 = list4;\n+        delegateBooleanAssertion(types, 4, 6, true);\n+        list4 = (List<String>) list6;\n+        delegateBooleanAssertion(types, 6, 4, false);\n+        list5 = list5;\n+        delegateBooleanAssertion(types, 5, 5, true);\n+        list6 = (List<? super String>) list5;\n+        delegateBooleanAssertion(types, 5, 6, false);\n+        list5 = (List<? extends String>) list6;\n+        delegateBooleanAssertion(types, 6, 5, false);\n+        list6 = list6;\n+        delegateBooleanAssertion(types, 6, 6, true);\n+\n+        list7 = list7;\n+        delegateBooleanAssertion(types, 7, 7, true);\n+        list8 = list7;\n+        delegateBooleanAssertion(types, 7, 8, true);\n+        list7 = list8;\n+        delegateBooleanAssertion(types, 8, 7, true);\n+        list9 = list7;\n+        delegateBooleanAssertion(types, 7, 9, true);\n+        list7 = list9;\n+        delegateBooleanAssertion(types, 9, 7, true);\n+        list10 = list7;\n+        delegateBooleanAssertion(types, 7, 10, true);\n+        list7 = list10;\n+        delegateBooleanAssertion(types, 10, 7, true);\n+        list11 = list7;\n+        delegateBooleanAssertion(types, 7, 11, true);\n+        list7 = list11;\n+        delegateBooleanAssertion(types, 11, 7, true);\n+        list12 = list7;\n+        delegateBooleanAssertion(types, 7, 12, true);\n+        list7 = list12;\n+        delegateBooleanAssertion(types, 12, 7, true);\n+        list13 = list7;\n+        delegateBooleanAssertion(types, 7, 13, true);\n+        list7 = list13;\n+        delegateBooleanAssertion(types, 13, 7, true);\n+        list8 = list8;\n+        delegateBooleanAssertion(types, 8, 8, true);\n+        list9 = list8;\n+        delegateBooleanAssertion(types, 8, 9, true);\n+        list8 = (List<Object>[]) list9;\n+        delegateBooleanAssertion(types, 9, 8, false);\n+        list10 = list8;\n+        delegateBooleanAssertion(types, 8, 10, true);\n+        list8 = (List<Object>[]) list10;\n+        delegateBooleanAssertion(types, 10, 8, false);\n+        // list11 = list8;\n+        delegateBooleanAssertion(types, 8, 11, false);\n+        // list8 = list11;\n+        delegateBooleanAssertion(types, 11, 8, false);\n+        // list12 = list8;\n+        delegateBooleanAssertion(types, 8, 12, false);\n+        // list8 = list12;\n+        delegateBooleanAssertion(types, 12, 8, false);\n+        list13 = list8;\n+        delegateBooleanAssertion(types, 8, 13, true);\n+        list8 = (List<Object>[]) list13;\n+        delegateBooleanAssertion(types, 13, 8, false);\n+        list9 = list9;\n+        delegateBooleanAssertion(types, 9, 9, true);\n+        list10 = (List<? super Object>[]) list9;\n+        delegateBooleanAssertion(types, 9, 10, false);\n+        list9 = list10;\n+        delegateBooleanAssertion(types, 10, 9, true);\n+        list11 = (List<String>[]) list9;\n+        delegateBooleanAssertion(types, 9, 11, false);\n+        list9 = list11;\n+        delegateBooleanAssertion(types, 11, 9, true);\n+        list12 = (List<? extends String>[]) list9;\n+        delegateBooleanAssertion(types, 9, 12, false);\n+        list9 = list12;\n+        delegateBooleanAssertion(types, 12, 9, true);\n+        list13 = (List<? super String>[]) list9;\n+        delegateBooleanAssertion(types, 9, 13, false);\n+        list9 = list13;\n+        delegateBooleanAssertion(types, 13, 9, true);\n+        list10 = list10;\n+        delegateBooleanAssertion(types, 10, 10, true);\n+        // list11 = list10;\n+        delegateBooleanAssertion(types, 10, 11, false);\n+        // list10 = list11;\n+        delegateBooleanAssertion(types, 11, 10, false);\n+        // list12 = list10;\n+        delegateBooleanAssertion(types, 10, 12, false);\n+        // list10 = list12;\n+        delegateBooleanAssertion(types, 12, 10, false);\n+        list13 = list10;\n+        delegateBooleanAssertion(types, 10, 13, true);\n+        list10 = (List<? super Object>[]) list13;\n+        delegateBooleanAssertion(types, 13, 10, false);\n+        list11 = list11;\n+        delegateBooleanAssertion(types, 11, 11, true);\n+        list12 = list11;\n+        delegateBooleanAssertion(types, 11, 12, true);\n+        list11 = (List<String>[]) list12;\n+        delegateBooleanAssertion(types, 12, 11, false);\n+        list13 = list11;\n+        delegateBooleanAssertion(types, 11, 13, true);\n+        list11 = (List<String>[]) list13;\n+        delegateBooleanAssertion(types, 13, 11, false);\n+        list12 = list12;\n+        delegateBooleanAssertion(types, 12, 12, true);\n+        list13 = (List<? super String>[]) list12;\n+        delegateBooleanAssertion(types, 12, 13, false);\n+        list12 = (List<? extends String>[]) list13;\n+        delegateBooleanAssertion(types, 13, 12, false);\n+        list13 = list13;\n+        delegateBooleanAssertion(types, 13, 13, true);\n+        Type disType = getClass().getField(\"dis\").getGenericType();\n+        // Reporter.log( ( ( ParameterizedType ) disType\n+        // ).getOwnerType().getClass().toString() );\n+        Type datType = getClass().getField(\"dat\").getGenericType();\n+        Type daType = getClass().getField(\"da\").getGenericType();\n+        Type uhderType = getClass().getField(\"uhder\").getGenericType();\n+        Type dingType = getClass().getField(\"ding\").getGenericType();\n+        Type testerType = getClass().getField(\"tester\").getGenericType();\n+        Type tester2Type = getClass().getField(\"tester2\").getGenericType();\n+        Type dat2Type = getClass().getField(\"dat2\").getGenericType();\n+        Type dat3Type = getClass().getField(\"dat3\").getGenericType();\n+        dis = dat;\n+        Assert.assertTrue(TypeUtils.isAssignable(datType, disType));\n+        // dis = da;\n+        Assert.assertFalse(TypeUtils.isAssignable(daType, disType));\n+        dis = uhder;\n+        Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));\n+        dis = ding;\n+        Assert.assertTrue(\"WRONG!\", TypeUtils.isAssignable(dingType, disType));\n+        dis = tester;\n+        Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));\n+        // dis = tester2;\n+        Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));\n+        // dat = dat2;\n+        Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));\n+        // dat2 = dat;\n+        Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));\n+        // dat = dat3;\n+        Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));\n+        char ch = 0;\n+        boolean bo = false;\n+        byte by = 0;\n+        short sh = 0;\n+        int in = 0;\n+        long lo = 0;\n+        float fl = 0;\n+        double du = 0;\n+        du = ch;\n+        Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));\n+        du = by;\n+        Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));\n+        du = sh;\n+        Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));\n+        du = in;\n+        Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));\n+        du = lo;\n+        Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));\n+        du = fl;\n+        Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));\n+        // du = bo;\n+        Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));\n+        lo = new Integer(0);\n+        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));\n+        // Long lngW = 1;\n+        Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));\n+        // lngW = new Integer( 0 );\n+        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));\n+        in = new Integer(0);\n+        Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));\n+        Integer inte = in;\n+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));\n+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));\n+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));\n+        Type intComparableType = getClass().getField(\"intComparable\").getGenericType();\n+        intComparable = 1;\n+        Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));\n+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));\n+        Serializable ser = 1;\n+        Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));\n+        Type longComparableType = getClass().getField(\"longComparable\").getGenericType();\n+        // longComparable = 1;\n+        Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));\n+        // longComparable = new Integer( 0 );\n+        Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));\n+        // int[] ia;\n+        // long[] la = ia;\n+        Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));\n+        Integer[] ia = null;\n+        Type caType = getClass().getField(\"intWildcardComparable\").getGenericType();\n+        intWildcardComparable = ia;\n+        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));\n+        // int[] ina = ia;\n+        Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));\n+        int[] ina = null;\n+        Object[] oa;\n+        // oa = ina;\n+        Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));\n+        oa = new Integer[0];\n+        Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));\n+        Type bClassType = AClass.class.getField(\"bClass\").getGenericType();\n+        Type cClassType = AClass.class.getField(\"cClass\").getGenericType();\n+        Type dClassType = AClass.class.getField(\"dClass\").getGenericType();\n+        Type eClassType = AClass.class.getField(\"eClass\").getGenericType();\n+        Type fClassType = AClass.class.getField(\"fClass\").getGenericType();\n+        AClass aClass = new AClass(new AAClass<String>());\n+        aClass.bClass = aClass.cClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));\n+        aClass.bClass = aClass.dClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));\n+        aClass.bClass = aClass.eClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));\n+        aClass.bClass = aClass.fClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));\n+        aClass.cClass = aClass.dClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));\n+        aClass.cClass = aClass.eClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));\n+        aClass.cClass = aClass.fClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));\n+        aClass.dClass = aClass.eClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));\n+        aClass.dClass = aClass.fClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));\n+        aClass.eClass = aClass.fClass;\n+        Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));\n+    }\n+\n+    public void delegateBooleanAssertion(Type[] types, int i2, int i1, boolean expected) {\n+        Type type1 = types[i1];\n+        Type type2 = types[i2];\n+        boolean isAssignable = TypeUtils.isAssignable(type2, type1);\n+\n+        if (expected) {\n+            Assert.assertTrue(\"[\" + i1 + \", \" + i2 + \"]: From \"\n+                    + StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + \" to \"\n+                    + StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable);\n+        } else {\n+            Assert.assertFalse(\"[\" + i1 + \", \" + i2 + \"]: From \"\n+                    + StringEscapeUtils.escapeHtml4(String.valueOf(type2)) + \" to \"\n+                    + StringEscapeUtils.escapeHtml4(String.valueOf(type1)), isAssignable);\n+        }\n     }\n \n     @Test\n-    public void testGetRawTypeParameterizedType() throws Exception {\n-        assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,\n-                stringParentField.getGenericType()));\n-        assertEquals(GenericParent.class, TypeUtils.getRawType(GenericTypeHolder.class,\n-                integerParentField.getGenericType()));\n-        assertEquals(List.class, TypeUtils.getRawType(GenericTypeHolder.class, foosField\n-                .getGenericType()));\n+    public void testIsInstance() throws SecurityException, NoSuchFieldException {\n+        Type intComparableType = getClass().getField(\"intComparable\").getGenericType();\n+        Type uriComparableType = getClass().getField(\"uriComparable\").getGenericType();\n+        intComparable = 1;\n+        Assert.assertTrue(TypeUtils.isInstance(1, intComparableType));\n+        // uriComparable = 1;\n+        Assert.assertFalse(TypeUtils.isInstance(1, uriComparableType));\n     }\n \n     @Test\n-    public void testGetRawTypeTypeVariable() throws Exception {\n-        assertEquals(String.class, TypeUtils.getRawType(StringParameterizedChild.class,\n-                genericParentT));\n-        assertEquals(String.class, TypeUtils.getRawType(stringParentField.getGenericType(),\n-                genericParentT));\n-        assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), iterableType));\n-        assertEquals(Foo.class, TypeUtils.getRawType(foosField.getGenericType(), listType));\n-    }\n-\n-    @Test(expected = IllegalArgumentException.class)\n-    public void testGetRawTypeUnresolvableTypeVariable() {\n-        TypeUtils.getRawType(GenericParent.class, genericParentT);\n+    public void testGetTypeArguments() {\n+        Map<TypeVariable<?>, Type> typeVarAssigns;\n+        TypeVariable<?> treeSetTypeVar;\n+        Type typeArg;\n+\n+        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);\n+        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n+        Assert.assertTrue(\"Type var assigns for Comparable from Integer: \" + typeVarAssigns,\n+                typeVarAssigns.containsKey(treeSetTypeVar));\n+        typeArg = typeVarAssigns.get(treeSetTypeVar);\n+        Assert.assertEquals(\"Type argument of Comparable from Integer: \" + typeArg, Integer.class,\n+                typeVarAssigns.get(treeSetTypeVar));\n+\n+        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);\n+        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n+        Assert.assertTrue(\"Type var assigns for Comparable from int: \" + typeVarAssigns,\n+                typeVarAssigns.containsKey(treeSetTypeVar));\n+        typeArg = typeVarAssigns.get(treeSetTypeVar);\n+        Assert.assertEquals(\"Type argument of Comparable from int: \" + typeArg, Integer.class,\n+                typeVarAssigns.get(treeSetTypeVar));\n+\n+        Collection<Integer> col = Arrays.asList(new Integer[0]);\n+        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);\n+        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n+        Assert.assertFalse(\"Type var assigns for Collection from List: \" + typeVarAssigns,\n+                typeVarAssigns.containsKey(treeSetTypeVar));\n+\n+        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\n+        Assert.assertTrue(typeVarAssigns.size() == 2);\n+        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));\n+        Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));\n     }\n \n     @Test\n-    public void testGetRawTypeGenericArray() throws Exception {\n-        assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class,\n-                barParentsField.getGenericType()));\n+    public void testTypesSatisfyVariables() throws SecurityException, NoSuchFieldException,\n+            NoSuchMethodException {\n+        Map<TypeVariable<?>, Type> typeVarAssigns = new HashMap<TypeVariable<?>, Type>();\n+        Integer max = TypeUtilsTest.stub();\n+        typeVarAssigns.put(getClass().getMethod(\"stub\").getTypeParameters()[0], Integer.class);\n+        Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n+        typeVarAssigns.clear();\n+        typeVarAssigns.put(getClass().getMethod(\"stub2\").getTypeParameters()[0], Integer.class);\n+        Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n+        typeVarAssigns.clear();\n+        typeVarAssigns.put(getClass().getMethod(\"stub3\").getTypeParameters()[0], Integer.class);\n+        Assert.assertTrue(TypeUtils.typesSatisfyVariables(typeVarAssigns));\n+    }\n+\n+    @Test\n+    public void testDetermineTypeVariableAssignments() throws SecurityException,\n+            NoSuchFieldException, NoSuchMethodException {\n+        ParameterizedType iterableType = (ParameterizedType) getClass().getField(\"iterable\")\n+                .getGenericType();\n+        Map<TypeVariable<?>, Type> typeVarAssigns = TypeUtils.determineTypeArguments(TreeSet.class,\n+                iterableType);\n+        TypeVariable<?> treeSetTypeVar = TreeSet.class.getTypeParameters()[0];\n+        Assert.assertTrue(typeVarAssigns.containsKey(treeSetTypeVar));\n+        Assert.assertEquals(iterableType.getActualTypeArguments()[0], typeVarAssigns\n+                .get(treeSetTypeVar));\n+    }\n+\n+    @Test\n+    public void testGetRawType() throws SecurityException, NoSuchFieldException {\n+        Type stringParentFieldType = GenericTypeHolder.class.getDeclaredField(\"stringParent\")\n+                .getGenericType();\n+        Type integerParentFieldType = GenericTypeHolder.class.getDeclaredField(\"integerParent\")\n+                .getGenericType();\n+        Type foosFieldType = GenericTypeHolder.class.getDeclaredField(\"foos\").getGenericType();\n+        Type genericParentT = GenericParent.class.getTypeParameters()[0];\n+        Assert.assertEquals(GenericParent.class, TypeUtils.getRawType(stringParentFieldType, null));\n+        Assert\n+                .assertEquals(GenericParent.class, TypeUtils.getRawType(integerParentFieldType,\n+                        null));\n+        Assert.assertEquals(List.class, TypeUtils.getRawType(foosFieldType, null));\n+        Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT,\n+                StringParameterizedChild.class));\n+        Assert.assertEquals(String.class, TypeUtils.getRawType(genericParentT,\n+                stringParentFieldType));\n+        Assert.assertEquals(Foo.class, TypeUtils.getRawType(Iterable.class.getTypeParameters()[0],\n+                foosFieldType));\n+        Assert.assertEquals(Foo.class, TypeUtils.getRawType(List.class.getTypeParameters()[0],\n+                foosFieldType));\n+        Assert.assertNull(TypeUtils.getRawType(genericParentT, GenericParent.class));\n+        Assert.assertEquals(GenericParent[].class, TypeUtils.getRawType(GenericTypeHolder.class\n+                .getDeclaredField(\"barParents\").getGenericType(), null));\n+    }\n+\n+    public Iterable<? extends Map<Integer, ? extends Collection<?>>> iterable;\n+\n+    public static <G extends Comparable<G>> G stub() {\n+        return null;\n+    }\n+\n+    public static <G extends Comparable<? super G>> G stub2() {\n+        return null;\n+    }\n+\n+    public static <T extends Comparable<? extends T>> T stub3() {\n+        return null;\n     }\n }\n+\n+class AAClass<T> {\n+\n+    public class BBClass<S> {\n+    }\n+}\n+\n+class AAAClass extends AAClass<String> {\n+    public class BBBClass extends BBClass<String> {\n+    }\n+}\n+\n+@SuppressWarnings(\"unchecked\")\n+//raw types, where used, are used purposely\n+class AClass extends AAClass<String>.BBClass<Number> {\n+\n+    public AClass(AAClass<String> enclosingInstance) {\n+        enclosingInstance.super();\n+    }\n+\n+    public class BClass<T> {\n+    }\n+\n+    public class CClass<T> extends BClass {\n+    }\n+\n+    public class DClass<T> extends CClass<T> {\n+    }\n+\n+    public class EClass<T> extends DClass {\n+    }\n+\n+    public class FClass extends EClass<String> {\n+    }\n+\n+    public class GClass<T extends BClass<? extends T> & AInterface<AInterface<? super T>>> {\n+    }\n+\n+    public BClass<Number> bClass;\n+\n+    public CClass<? extends String> cClass;\n+\n+    public DClass<String> dClass;\n+\n+    public EClass<String> eClass;\n+\n+    public FClass fClass;\n+\n+    public GClass gClass;\n+\n+    public interface AInterface<T> {\n+    }\n+}", "timestamp": 1279051005, "metainfo": ""}