{"sha": "0c01b4c48bc886a7e53b517efeb2192d1caaffe2", "log": "Additional tests for MethodUtils from Nathan Beyer - LANG-712  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java\n  * @version $Id$\n  */\n public class MethodUtilsTest extends TestCase {\n+  \n+    private static interface PrivateInterface {}\n+    \n+    static class TestBeanWithInterfaces implements PrivateInterface {\n+        public String foo() {\n+            return \"foo()\";\n+        }\n+    }\n+    \n     public static class TestBean {\n \n         public static String bar() {\n         public static String bar(Object o) {\n             return \"bar(Object)\";\n         }\n+        \n+        @SuppressWarnings(\"unused\")\n+        private void privateStuff() {\n+        }\n+\n \n         public String foo() {\n             return \"foo()\";\n             assertSame(Mutable.class, accessibleMethod.getDeclaringClass());\n         }\n     }\n+    \n+    public void testGetAccessibleMethodPrivateInterface() throws Exception {\n+        Method expected = TestBeanWithInterfaces.class.getMethod(\"foo\");\n+        assertNotNull(expected);\n+        Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, \"foo\");\n+        assertNull(actual);\n+    }\n \n     public void testGetAccessibleInterfaceMethodFromDescription()\n             throws Exception {\n         assertSame(MutableObject.class, MethodUtils.getAccessibleMethod(\n                 MutableObject.class, \"getValue\", ArrayUtils.EMPTY_CLASS_ARRAY)\n                 .getDeclaringClass());\n+    }\n+    \n+    public void testGetAccessibleMethodInaccessible() throws Exception {\n+        Method expected = TestBean.class.getDeclaredMethod(\"privateStuff\");\n+        Method actual = MethodUtils.getAccessibleMethod(expected);\n+        assertNull(actual);\n     }\n \n     public void testGetMatchingAccessibleMethod() throws Exception {", "timestamp": 1309676399, "metainfo": ""}