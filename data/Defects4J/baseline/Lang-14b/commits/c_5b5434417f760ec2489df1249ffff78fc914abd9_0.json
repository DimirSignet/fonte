{"sha": "5b5434417f760ec2489df1249ffff78fc914abd9", "log": "Add extra tests for reflection and multi dimensional arrays   ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/builder/HashCodeBuilderTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.builder;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+/**\n+ * Unit tests {@link org.apache.commons.lang.HashCodeBuilder}.\n+ *\n+ * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n+ * @version $Id: HashCodeBuilderTest.java,v 1.1 2002/09/12 22:01:00 scolebourne Exp $\n+ */\n+public class HashCodeBuilderTest extends TestCase {\n+\n+    public HashCodeBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(HashCodeBuilderTest.class);\n+        suite.setName(\"HashCodeBuilder Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testConstructorEx1() {\n+        try {\n+            new HashCodeBuilder(0, 0);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testConstructorEx2() {\n+        try {\n+            new HashCodeBuilder(2, 2);\n+            \n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    static class TestObject {\n+        private int a;\n+        public TestObject(int a) {\n+            this.a = a;\n+        }\n+        public boolean equals(Object o) {\n+            if (o == this) {\n+                return true;\n+            }\n+            if (!(o instanceof TestObject)) {\n+                return false;\n+            }\n+            TestObject rhs = (TestObject) o;\n+            return (a == rhs.a);\n+        }\n+\n+        public void setA(int a) {\n+            this.a = a;\n+        }\n+\n+        public int getA() {\n+            return a;\n+        }\n+    }\n+\n+    public void testReflectionHashCode() {\n+        assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0)));\n+        assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456)));\n+    }\n+\n+    public void testReflectionHashCodeEx1() {\n+        try {\n+            HashCodeBuilder.reflectionHashCode(0, 0, new TestObject(0), true);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionHashCodeEx2() {\n+        try {\n+            HashCodeBuilder.reflectionHashCode(2, 2, new TestObject(0), true);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testReflectionHashCodeEx3() {\n+        try {\n+            HashCodeBuilder.reflectionHashCode(13, 19, null, true);\n+        } catch (IllegalArgumentException ex) {\n+            return;\n+        }\n+        fail();\n+    }\n+\n+    public void testObject() {\n+        Object obj = null;\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj = new Object();\n+        assertEquals(17 * 37 + obj.hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testLong() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long) 0L).toHashCode());\n+        assertEquals(17 * 37 + (int) (123456789L ^ (123456789L >> 32)), new HashCodeBuilder(17, 37).append((long) 123456789L).toHashCode());\n+    }\n+\n+    public void testInt() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int) 0).toHashCode());\n+        assertEquals(17 * 37 + 123456, new HashCodeBuilder(17, 37).append((int) 123456).toHashCode());\n+    }\n+\n+    public void testShort() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short) 0).toHashCode());\n+        assertEquals(17 * 37 + 12345, new HashCodeBuilder(17, 37).append((short) 12345).toHashCode());\n+    }\n+\n+    public void testChar() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char) 0).toHashCode());\n+        assertEquals(17 * 37 + 1234, new HashCodeBuilder(17, 37).append((char) 1234).toHashCode());\n+    }\n+\n+    public void testByte() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte) 0).toHashCode());\n+        assertEquals(17 * 37 + 123, new HashCodeBuilder(17, 37).append((byte) 123).toHashCode());\n+    }\n+\n+    public void testDouble() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double) 0d).toHashCode());\n+        double d = 1234567.89;\n+        long l = Double.doubleToLongBits(d);\n+        assertEquals(17 * 37 + (int) (l ^ (l >> 32)), new HashCodeBuilder(17, 37).append(d).toHashCode());\n+    }\n+\n+    public void testFloat() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float) 0f).toHashCode());\n+        float f = 1234.89f;\n+        int i = Float.floatToIntBits(f);\n+        assertEquals(17 * 37 + i, new HashCodeBuilder(17, 37).append(f).toHashCode());\n+    }\n+\n+    public void testBoolean() {\n+        assertEquals(17 * 37 + 0, new HashCodeBuilder(17, 37).append(true).toHashCode());\n+        assertEquals(17 * 37 + 1, new HashCodeBuilder(17, 37).append(false).toHashCode());\n+    }\n+\n+    public void testObjectArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode());\n+        Object[] obj = new Object[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = new Object();\n+        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = new Object();\n+        assertEquals( (17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testObjectArrayAsObject() {\n+        Object[] obj = new Object[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = new Object();\n+        assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = new Object();\n+        assertEquals( (17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testLongArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((long[]) null).toHashCode());\n+        long[] obj = new long[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5L;\n+        int h1 = (int) (5L ^ (5L >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6L;\n+        int h2 = (int) (6L ^ (6L >> 32));\n+        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testLongArrayAsObject() {\n+        long[] obj = new long[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = 5L;\n+        int h1 = (int) (5L ^ (5L >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = 6L;\n+        int h2 = (int) (6L ^ (6L >> 32));\n+        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testIntArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode());\n+        int[] obj = new int[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testIntArrayAsObject() {\n+        int[] obj = new int[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testShortArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode());\n+        short[] obj = new short[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = (short) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = (short) 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testShortArrayAsObject() {\n+        short[] obj = new short[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = (short) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = (short) 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testCharArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode());\n+        char[] obj = new char[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = (char) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = (char) 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testCharArrayAsObject() {\n+        char[] obj = new char[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = (char) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = (char) 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testByteArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode());\n+        byte[] obj = new byte[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = (byte) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = (byte) 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testByteArrayAsObject() {\n+        byte[] obj = new byte[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = (byte) 5;\n+        assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = (byte) 6;\n+        assertEquals( (17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testDoubleArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((double[]) null).toHashCode());\n+        double[] obj = new double[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5.4d;\n+        long l1 = Double.doubleToLongBits(5.4d);\n+        int h1 = (int) (l1 ^ (l1 >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6.3d;\n+        long l2 = Double.doubleToLongBits(6.3d);\n+        int h2 = (int) (l2 ^ (l2 >> 32));\n+        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testDoubleArrayAsObject() {\n+        double[] obj = new double[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = 5.4d;\n+        long l1 = Double.doubleToLongBits(5.4d);\n+        int h1 = (int) (l1 ^ (l1 >> 32));\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = 6.3d;\n+        long l2 = Double.doubleToLongBits(6.3d);\n+        int h2 = (int) (l2 ^ (l2 >> 32));\n+        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testFloatArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode());\n+        float[] obj = new float[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = 5.4f;\n+        int h1 = Float.floatToIntBits(5.4f);\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = 6.3f;\n+        int h2 = Float.floatToIntBits(6.3f);\n+        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testFloatArrayAsObject() {\n+        float[] obj = new float[2];\n+        assertEquals((17 * 37) * 37 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = 5.4f;\n+        int h1 = Float.floatToIntBits(5.4f);\n+        assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = 6.3f;\n+        int h2 = Float.floatToIntBits(6.3f);\n+        assertEquals( (17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testBooleanArray() {\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((boolean[]) null).toHashCode());\n+        boolean[] obj = new boolean[2];\n+        assertEquals((17 * 37 + 1) * 37 + 1 , new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = true;\n+        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = false;\n+        assertEquals( (17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+    public void testBooleanArrayAsObject() {\n+        boolean[] obj = new boolean[2];\n+        assertEquals((17 * 37 + 1) * 37 + 1 , new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[0] = true;\n+        assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+        obj[1] = false;\n+        assertEquals( (17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());\n+    }\n+\n+    public void testBooleanMultiArray() {\n+        boolean[][] obj = new boolean[2][];\n+        assertEquals((17 * 37) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = new boolean[0];\n+        assertEquals(17 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = new boolean[1];\n+        assertEquals((17 * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0] = new boolean[2];\n+        assertEquals(((17 * 37 + 1) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[0][0] = true;\n+        assertEquals(((17 * 37 + 0) * 37 + 1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+        obj[1] = new boolean[1];\n+        assertEquals( (((17 * 37 + 0) * 37 + 1) * 37 + 1), new HashCodeBuilder(17, 37).append(obj).toHashCode());\n+    }\n+\n+}", "timestamp": 1031868060, "metainfo": ""}