{"sha": "c6398457bca1cabf15d1ee449e71b135a55e26c8", "log": "[LANG-762] Handle or document ReflectionToStringBuilder and ToStringBuilder for collections that are not thread safe.  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/builder/ReflectionToStringBuilderMutateInspectConcurrencyTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.builder;\n+\n+import java.util.LinkedList;\n+import java.util.Random;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+/**\n+ * Tests concurrent access for {@link ReflectionToStringBuilder}.\n+ * <p>\n+ * The {@link ToStringStyle} class includes a registry to avoid infinite loops for objects with circular references. We\n+ * want to make sure that we do not get concurrency exceptions accessing this registry.\n+ * </p>\n+ * \n+ * @see <a href=\"https://issues.apache.org/jira/browse/LANG-762\">[LANG-762] Handle or document ReflectionToStringBuilder\n+ *      and ToStringBuilder for collections that are not thread safe</a>\n+ * @since 3.0.2\n+ * @version $Id$\n+ */\n+public class ReflectionToStringBuilderMutateInspectConcurrencyTest {\n+\n+    class TestFixture {\n+        final private LinkedList<Integer> listField = new LinkedList<Integer>();\n+        final private Random random = new Random();\n+        private int N = 100;\n+\n+        public TestFixture() {\n+            synchronized (this) {\n+                for (int i = 0; i < N; i++) {\n+                    listField.add(Integer.valueOf(i));\n+                }\n+            }\n+        }\n+\n+        public synchronized void add() {\n+            listField.add(Integer.valueOf(random.nextInt(N)));\n+        }\n+\n+        public synchronized void delete() {\n+            listField.removeFirstOccurrence(Integer.valueOf(random.nextInt(N)));\n+        }\n+    }\n+\n+    class MutatingClient implements Runnable {\n+        final private TestFixture testFixture;\n+        final private Random random = new Random();\n+\n+        public MutatingClient(TestFixture testFixture) {\n+            this.testFixture = testFixture;\n+        }\n+\n+        public void run() {\n+            if (random.nextBoolean()) {\n+                testFixture.add();\n+            } else {\n+                testFixture.delete();\n+            }\n+        }\n+    }\n+\n+    class InspectingClient implements Runnable {\n+        final private TestFixture testFixture;\n+        final private Random random = new Random();\n+\n+        public InspectingClient(TestFixture testFixture) {\n+            this.testFixture = testFixture;\n+        }\n+\n+        public void run() {\n+            ReflectionToStringBuilder.toString(testFixture);\n+        }\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void testConcurrency() throws Exception {\n+        TestFixture testFixture = new TestFixture();\n+        final int numMutators = 10;\n+        final int numIterations = 10;\n+        for (int i = 0; i < numIterations; i++) {\n+            for (int j = 0; j < numMutators; j++) {\n+                Thread t = new Thread(new MutatingClient(testFixture));\n+                t.start();\n+                Thread s = new Thread(new InspectingClient(testFixture));\n+                s.start();\n+            }\n+        }\n+    }\n+}", "timestamp": 1320851585, "metainfo": ""}