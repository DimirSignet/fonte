{"sha": "bec66dcfe4167c3d25c79d6c258b9968a5b42123", "log": "Applying Valentin Rocher's patch from LANG-559, adding isInstanceOf and isAssignableFrom methods.   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n     private static final String DEFAULT_VALID_INDEX_CHAR_SEQUENCE_EX_MESSAGE = \"The validated character sequence index is invalid: %d\";\n     private static final String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE = \"The validated collection index is invalid: %d\";\n     private static final String DEFAULT_VALID_STATE_EX_MESSAGE = \"The validated state is false\";\n+    private static final String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE = \"The validated class can not be converted to the %s class\";\n+    private static final String DEFAULT_IS_INSTANCE_OF_EX_MESSAGE = \"The validated object is not an instance of %s\";\n \n     /**\n      * Constructor. This class should not normally be instantiated.\n             throw new IllegalArgumentException(String.format(message, values));\n         }\n     }\n+\n+    /**\n+     * <p>Validate that the argument is an instance of the specified class; otherwise\n+     * throwing an exception. This method is useful when validating according to an arbitrary\n+     * class</p>\n+     * \n+     * <pre>Validate.isInstanceOf(OkClass.class, object);</pre>\n+     * \n+     * <p>The message of the exception is &quot;The validated object is not an instance of&quot;\n+     * followed by the name of the class</p>\n+     * \n+     * @param type the class the object must be validated against\n+     * @param o the object to check\n+     * @throws IllegalArgumentException if argument is not of specified class\n+     * @see #isInstanceOf(Class, Object, String, Object...)\n+     */\n+    public static void isInstanceOf(Class<?> type, Object o)\n+    {\n+        if (type.isInstance(o) == false)\n+        {\n+            throw new IllegalArgumentException(String.format(DEFAULT_IS_INSTANCE_OF_EX_MESSAGE, type.getName()));\n+        }\n+    }\n+    \n+    /**\n+     * <p>Validate that the argument is an instance of the specified class; otherwise\n+     * throwing an exception with the specified message. This method is useful when \n+     * validating according to an arbitrary class</p>\n+     * \n+     * <pre>Validate.isInstanceOf(OkClass.classs, object, \"Wrong class, object is of class %s\", object.getClass().getName());</pre>\n+     * \n+     * @param type the class the object must be validated against\n+     * @param o the object to check\n+     * @param message exception message\n+     * @param values optional value for the exception message\n+     * @throws IllegalArgumentException if argument is not of specified class\n+     * @see #isInstanceOf(Class, Object)\n+     */\n+    public static void isInstanceOf(Class<?> type, Object o, String message, Object... values)\n+    {\n+        if (type.isInstance(o) == false)\n+        {\n+            throw new IllegalArgumentException(String.format(message, values));\n+        }\n+    }\n+    \n+    /**\n+     * <p>Validate that the argument can be converted to the specified class; otherwise\n+     * throwing an exception with the specified message. This method is useful when\n+     * validating if there will be no casting errors.</p>\n+     * \n+     * <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre>\n+     * \n+     * <p>The message of the exception is &quot;The validated object can not be converted to the&quot;\n+     * followed by the name of the class and &quot;class&quot;</p>\n+     * \n+     * @param superType the class the class must be validated against\n+     * @param type the class to check\n+     * @throws IllegalArgumentException if argument can not be converted to the specified class\n+     * @see #isAssignableFrom(Class, Class, String, Object...)\n+     */\n+    public static void isAssignableFrom(Class<?> superType, Class<?> type)\n+    {\n+        if (superType.isAssignableFrom(type) == false)\n+        {\n+            throw new IllegalArgumentException(String.format(DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, superType.getName()));\n+        }\n+    }\n+    \n+    /**\n+     * <p>Validate that the argument can be converted to the specified class; otherwise\n+     * throwing an exception. This method is useful when validating if there will be no\n+     * casting errors.</p>\n+     * \n+     * <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre>\n+     * \n+     * <p>The message of the exception is &quot;The validated object can not be converted to the&quot;\n+     * followed by the name of the class and &quot;class&quot;</p>\n+     * \n+     * @param superType the class the class must be validated against\n+     * @param type the class to check\n+     * @param message the exception message if invalid\n+     * @param values the optional values for the formatted exception message\n+     * @throws IllegalArgumentException if argument can not be converted to the specified class\n+     * @see #isAssignableFrom(Class, Class)\n+     */\n+    public static void isAssignableFrom(Class<?> superType, Class<?> type, String message, Object... values)\n+    {\n+        if (superType.isAssignableFrom(type) == false)\n+        {\n+            throw new IllegalArgumentException(String.format(message, values));\n+        }\n+    }\n }\n--- a/src/test/java/org/apache/commons/lang3/ValidateTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ValidateTest.java\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n+import java.util.AbstractList;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n             assertEquals(\"Error\", e.getMessage());\n         }\n     }\n+\n+    public void testIsInstanceOf() {\n+        Validate.isInstanceOf(String.class, \"hi\");\n+        Validate.isInstanceOf(Integer.class, 1);\n+        try {\n+            Validate.isInstanceOf(List.class, \"hi\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            assertEquals(\"The validated object is not an instance of java.util.List\", e.getMessage());\n+        }\n+    }\n+    \n+    public void testIsInstanceOf_withMessage() {\n+        Validate.isInstanceOf(String.class, \"hi\", \"Error\");\n+        Validate.isInstanceOf(Integer.class, 1, \"Error\");\n+        try {\n+            Validate.isInstanceOf(List.class, \"hi\", \"Error\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            assertEquals(\"Error\", e.getMessage());\n+        }\n+    }\n+    \n+    public void testIsAssignable() {\n+        Validate.isAssignableFrom(CharSequence.class, String.class);\n+        Validate.isAssignableFrom(AbstractList.class, ArrayList.class);\n+        try {\n+            Validate.isAssignableFrom(List.class, String.class);\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            assertEquals(\"The validated class can not be converted to the java.util.List class\", e.getMessage());\n+        }\n+    }\n+    \n+    public void testIsAssignable_withMessage() {\n+        Validate.isAssignableFrom(CharSequence.class, String.class, \"Error\");\n+        Validate.isAssignableFrom(AbstractList.class, ArrayList.class, \"Error\");\n+        try {\n+            Validate.isAssignableFrom(List.class, String.class, \"Error\");\n+            fail(\"Expecting IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            assertEquals(\"Error\", e.getMessage());\n+        }\n+    }\n+\n }", "timestamp": 1267606582, "metainfo": ""}