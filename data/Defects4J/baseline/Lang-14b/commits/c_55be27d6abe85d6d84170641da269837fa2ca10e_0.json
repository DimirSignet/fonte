{"sha": "55be27d6abe85d6d84170641da269837fa2ca10e", "log": "Add generic return types  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n      * @param object  the object to check is not <code>null</code>\n      * @param message  the exception message you would like to see\n      *  if the object is <code>null</code>\n+     * @return the input object, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n-    public static void notNull(Object object, String message) {\n+    public static <T> T notNull(T object, String message) {\n         if (object == null) {\n             throw new IllegalArgumentException(message);\n         }\n+        return object;\n     }\n \n     /**\n      * <p>The message in the exception is 'The validated object is null'.</p>\n      * \n      * @param object  the object to check is not <code>null</code>\n+     * @return the input object, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the object is <code>null</code>\n      */\n-    public static void notNull(Object object) {\n-        notNull(object, \"The validated object is null\");\n+    public static <T> T notNull(T object) {\n+        return notNull(object, \"The validated object is null\");\n     }\n \n     // notEmpty array\n      * \n      * @param array  the array to check is not empty\n      * @param message  the exception message you would like to see if the array is empty\n+     * @return the input array, never <code>null</code> or empty, for chaining\n      * @throws IllegalArgumentException if the array is empty\n      */\n-    public static void notEmpty(Object[] array, String message) {\n+    public static <T> T[] notEmpty(T[] array, String message) {\n         if (array == null || array.length == 0) {\n             throw new IllegalArgumentException(message);\n         }\n+        return array;\n     }\n \n     /**\n      * <p>The message in the exception is 'The validated array is empty'.\n      * \n      * @param array  the array to check is not empty\n+     * @return the input array, never <code>null</code> or empty, for chaining\n      * @throws IllegalArgumentException if the array is empty\n      */\n-    public static void notEmpty(Object[] array) {\n-        notEmpty(array, \"The validated array is empty\");\n+    public static <T> T[] notEmpty(T[] array) {\n+        return notEmpty(array, \"The validated array is empty\");\n     }\n \n     // notEmpty collection\n      * \n      * @param collection  the collection to check is not empty\n      * @param message  the exception message you would like to see if the collection is empty\n+     * @return the input collection, never <code>null</code> or empty, for chaining\n      * @throws IllegalArgumentException if the collection is empty\n      */\n-    public static void notEmpty(Collection<?> collection, String message) {\n+    public static <T extends Collection<?>> T notEmpty(T collection, String message) {\n         if (collection == null || collection.size() == 0) {\n             throw new IllegalArgumentException(message);\n         }\n+        return collection;\n     }\n \n     /**\n      * <p>The message in the exception is 'The validated collection is empty'.</p>\n      * \n      * @param collection  the collection to check is not empty\n+     * @return the input collection, never <code>null</code> or empty, for chaining\n      * @throws IllegalArgumentException if the collection is empty\n      */\n-    public static void notEmpty(Collection<?> collection) {\n-        notEmpty(collection, \"The validated collection is empty\");\n+    public static <T extends Collection<?>> T notEmpty(T collection) {\n+        return notEmpty(collection, \"The validated collection is empty\");\n     }\n \n     // notEmpty map\n      * \n      * @param map  the map to check is not empty\n      * @param message  the exception message you would like to see if the map is empty\n+     * @return the input map, never <code>null</code> or empty, for chaining\n      * @throws IllegalArgumentException if the map is empty\n      */\n-    public static void notEmpty(Map<?,?> map, String message) {\n+    public static <T extends Map<?, ?>> T notEmpty(T map, String message) {\n         if (map == null || map.size() == 0) {\n             throw new IllegalArgumentException(message);\n         }\n+        return map;\n     }\n \n     /**\n      * <p>The message in the exception is 'The validated map is empty'.</p>\n      * \n      * @param map  the map to check is not empty\n+     * @return the input map, never <code>null</code> or empty, for chaining\n      * @throws IllegalArgumentException if the map is empty\n      */\n-    public static void notEmpty(Map<?,?> map) {\n-        notEmpty(map, \"The validated map is empty\");\n+    public static <T extends Map<?, ?>> T notEmpty(T map) {\n+        return notEmpty(map, \"The validated map is empty\");\n     }\n \n     // notEmpty string\n      * \n      * @param string  the string to check is not empty\n      * @param message  the exception message you would like to see if the string is empty\n+     * @return the input string, never <code>null</code> or empty, for chaining\n      * @throws IllegalArgumentException if the string is empty\n      */\n-    public static void notEmpty(String string, String message) {\n+    public static <T extends CharSequence> T notEmpty(T string, String message) {\n         if (string == null || string.length() == 0) {\n             throw new IllegalArgumentException(message);\n         }\n+        return string;\n     }\n \n     /**\n      * <p>The message in the exception is 'The validated string is empty'.</p>\n      * \n      * @param string  the string to check is not empty\n+     * @return the input string, never <code>null</code> or empty, for chaining\n      * @throws IllegalArgumentException if the string is empty\n      */\n-    public static void notEmpty(String string) {\n-        notEmpty(string, \"The validated string is empty\");\n+    public static <T extends CharSequence> T notEmpty(T string) {\n+        return notEmpty(string, \"The validated string is empty\");\n     }\n \n     // notBlank string\n      * if the argument String is blank (<code>null</code>, empty or whitespace).</p>\n      *\n      * <pre>\n-     * Validate.notBlank(myString);\n-     * </pre>\n-     *\n-     * <p>The message in the exception is 'The validated string is blank'.</p>\n+     * Validate.notBlank(myString, \"The string must not be blank\");\n+     * </pre>\n      *\n      * @param string  the string to check is not blank\n+     * @param message  the exception message you would like to see if the string is blank\n+     * @return the input string, never <code>null</code> or blank, for chaining\n      * @throws IllegalArgumentException if the string is blank\n      * @see StringUtils#isBlank(CharSequence)\n      */\n-    public static void notBlank(String string) {\n+    public static <T extends CharSequence> T notBlank(T string, String message) {\n         if (StringUtils.isBlank(string)) {\n-            throw new IllegalArgumentException(\"The validated string is blank\");\n-        }\n+            throw new IllegalArgumentException(message);\n+        }\n+        return string;\n     }\n \n     /**\n      * if the argument String is blank (<code>null</code>, empty or whitespace).</p>\n      *\n      * <pre>\n-     * Validate.notBlank(myString, \"The string must not be blank\");\n-     * </pre>\n+     * Validate.notBlank(myString);\n+     * </pre>\n+     *\n+     * <p>The message in the exception is 'The validated string is blank'.</p>\n      *\n      * @param string  the string to check is not blank\n-     * @param message  the exception message you would like to see if the string is blank\n+     * @return the input string, never <code>null</code> or blank, for chaining\n      * @throws IllegalArgumentException if the string is blank\n      * @see StringUtils#isBlank(CharSequence)\n      */\n-    public static void notBlank(String string, String message) {\n-        if (StringUtils.isBlank(string)) {\n-            throw new IllegalArgumentException(message);\n-        }\n+    public static <T extends CharSequence> T notBlank(T string) {\n+        return notBlank(string, \"The validated string is blank\");\n     }\n \n     // notNullElements array\n      * @param array  the array to check\n      * @param message  the exception message if the array has\n      *  <code>null</code> elements\n+     * @return the validated input array, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the array has <code>null</code>\n      *  elements or is <code>null</code>\n      */\n-    public static void noNullElements(Object[] array, String message) {\n+    public static <T> T[] noNullElements(T[] array, String message) {\n         Validate.notNull(array);\n         for (int i = 0; i < array.length; i++) {\n             if (array[i] == null) {\n                 throw new IllegalArgumentException(message);\n             }\n         }\n+        return array;\n     }\n \n     /**\n      * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n      * \n      * @param array  the array to check\n+     * @return the validated input array, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the array has <code>null</code>\n      *  elements or is <code>null</code>\n      */\n-    public static void noNullElements(Object[] array) {\n+    public static <T> T[] noNullElements(T[] array) {\n         Validate.notNull(array);\n         for (int i = 0; i < array.length; i++) {\n             if (array[i] == null) {\n                 throw new IllegalArgumentException(\"The validated array contains null element at index: \" + i);\n             }\n         }\n+        return array;\n     }\n \n     // notNullElements collection\n      * @param collection  the collection to check\n      * @param message  the exception message if the collection has\n      *  <code>null</code> elements\n+     * @return the validated input collection, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the collection has\n      *  <code>null</code> elements or is <code>null</code>\n      */\n-    public static void noNullElements(Collection<?> collection, String message) {\n+    public static <T extends Collection<?>> T noNullElements(T collection, String message) {\n         Validate.notNull(collection);\n         for (Iterator<?> it = collection.iterator(); it.hasNext();) {\n             if (it.next() == null) {\n                 throw new IllegalArgumentException(message);\n             }\n         }\n+        return collection;\n     }\n \n     /**\n      * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n      * \n      * @param collection  the collection to check\n+     * @return the validated input collection, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the collection has\n      *  <code>null</code> elements or is <code>null</code>\n      */\n-    public static void noNullElements(Collection<?> collection) {\n+    public static <T extends Collection<?>> T noNullElements(T collection) {\n         Validate.notNull(collection);\n         int i = 0;\n         for (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {\n                 throw new IllegalArgumentException(\"The validated collection contains null element at index: \" + i);\n             }\n         }\n-    }\n+        return collection;\n+    }\n+\n+    // allElementsOfType collection\n+    //---------------------------------------------------------------------------------\n \n     /**\n      * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n      *\n      * @param array  the array to check, not null\n      * @param message  the exception message if the array index is invalid\n+     * @return the validated input array, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the array index is invalid or null\n      */\n-    public static void validIndex(Object[] array, int index, String message) {\n+    public static <T> T[] validIndex(T[] array, int index, String message) {\n         Validate.notNull(array);\n         if (index < 0 || index >= array.length) {\n             throw new IllegalArgumentException(message + index);\n         }\n+        return array;\n     }\n \n     /**\n      * <p>If the array is null then the message in the exception is 'The validated object is null'.</p>\n      * \n      * @param array  the array to check, not null\n+     * @return the validated input array, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the array index is invalid or null\n      */\n-    public static void validIndex(Object[] array, int index) {\n-        validIndex(array, index, \"The validated array index is invalid: \");\n+    public static <T> T[] validIndex(T[] array, int index) {\n+        return validIndex(array, index, \"The validated array index is invalid: \");\n     }\n \n     // validIndex collection\n      *\n      * @param coll  the collection to check, not null\n      * @param message  the exception message if the collection index is invalid\n+     * @return the validated input collection, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the collection index is invalid or null\n      */\n-    public static void validIndex(Collection<?> coll, int index, String message) {\n+    public static <T extends Collection<?>> T validIndex(T coll, int index, String message) {\n         Validate.notNull(coll);\n         if (index < 0 || index >= coll.size()) {\n             throw new IllegalArgumentException(message + index);\n         }\n+        return coll;\n     }\n \n     /**\n      * <p>If the collection is null then the message in the exception is 'The validated object is null'.</p>\n      * \n      * @param coll  the collection to check, not null\n+     * @return the validated input collection, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the collection index is invalid or null\n      */\n-    public static void validIndex(Collection<?> coll, int index) {\n-        validIndex(coll, index, \"The validated collection index is invalid: \");\n+    public static <T extends Collection<?>> T validIndex(T coll, int index) {\n+        return validIndex(coll, index, \"The validated collection index is invalid: \");\n     }\n \n     // validIndex string\n      *\n      * @param str  the string to check, not null\n      * @param message  the exception message if the string index is invalid\n+     * @return the validated input string, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the string index is invalid or null\n      */\n-    public static void validIndex(CharSequence str, int index, String message) {\n+    public static <T extends CharSequence> T validIndex(T str, int index, String message) {\n         Validate.notNull(str);\n         if (index < 0 || index >= str.length()) {\n             throw new IllegalArgumentException(message + index);\n         }\n+        return str;\n     }\n \n     /**\n      * <p>If the string is null then the message in the exception is 'The validated object is null'.</p>\n      * \n      * @param str  the string to check, not null\n+     * @return the validated input string, never <code>null</code>, for chaining\n      * @throws IllegalArgumentException if the string index is invalid or null\n      */\n-    public static void validIndex(CharSequence str, int index) {\n-        validIndex(str, index, \"The validated string index is invalid: \");\n+    public static <T extends CharSequence> T validIndex(T str, int index) {\n+        return validIndex(str, index, \"The validated string index is invalid: \");\n     }\n \n }\n--- a/src/test/org/apache/commons/lang/ValidateTest.java\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n     }\n \n     //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     public void testNotNull1() {\n         Validate.notNull(new Object());\n         try {\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated object is null\", ex.getMessage());\n         }\n+        \n+        String str = \"Hi\";\n+        String testStr = Validate.notNull(str);\n+        assertSame(str, testStr);\n     }\n \n     //-----------------------------------------------------------------------\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n-    }\n-\n+        \n+        String str = \"Hi\";\n+        String testStr = Validate.notNull(str, \"Message\");\n+        assertSame(str, testStr);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     public void testNotEmptyArray1() {\n         Validate.notEmpty(new Object[] {null});\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated array is empty\", ex.getMessage());\n         }\n+        \n+        String[] array = new String[] {\"hi\"};\n+        String[] test = Validate.notEmpty(array);\n+        assertSame(array, test);\n     }\n \n     //-----------------------------------------------------------------------\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n-    }\n-\n+        \n+        String[] array = new String[] {\"hi\"};\n+        String[] test = Validate.notEmpty(array, \"Message\");\n+        assertSame(array, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     public void testNotEmptyCollection1() {\n         Collection<Integer> coll = new ArrayList<Integer>();\n         }\n         coll.add(new Integer(8));\n         Validate.notEmpty(coll);\n+        \n+        Collection<Integer> test = Validate.notEmpty(coll);\n+        assertSame(coll, test);\n     }\n \n     //-----------------------------------------------------------------------\n         }\n         coll.add(new Integer(8));\n         Validate.notEmpty(coll, \"MSG\");\n-    }\n-\n+        \n+        Collection<Integer> test = Validate.notEmpty(coll, \"Message\");\n+        assertSame(coll, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     public void testNotEmptyMap1() {\n         Map<String, Integer> map = new HashMap<String, Integer>();\n         }\n         map.put(\"ll\", new Integer(8));\n         Validate.notEmpty(map);\n+        \n+        Map<String, Integer> test = Validate.notEmpty(map);\n+        assertSame(map, test);\n     }\n \n     //-----------------------------------------------------------------------\n         }\n         map.put(\"ll\", new Integer(8));\n         Validate.notEmpty(map, \"MSG\");\n-    }\n-\n+        \n+        Map<String, Integer> test = Validate.notEmpty(map, \"Message\");\n+        assertSame(map, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     public void testNotEmptyString1() {\n         Validate.notEmpty(\"hjl\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated string is empty\", ex.getMessage());\n         }\n+        \n+        String str = \"Hi\";\n+        String testStr = Validate.notEmpty(str);\n+        assertSame(str, testStr);\n     }\n \n     //-----------------------------------------------------------------------\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n-    }\n-\n+        \n+        String str = \"Hi\";\n+        String testStr = Validate.notEmpty(str, \"Message\");\n+        assertSame(str, testStr);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     public void testNotBlankNullStringShouldThrow() {\n         //given\n     }\n \n     //-----------------------------------------------------------------------\n+    public void testNotBlankReturnValues1() {\n+        String str = \"Hi\";\n+        String test = Validate.notBlank(str);\n+        assertSame(str, test);\n+    }\n+\n+    public void testNotBlankReturnValues2() {\n+        String str = \"Hi\";\n+        String test = Validate.notBlank(str, \"Message\");\n+        assertSame(str, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     public void testNoNullElementsArray1() {\n         String[] array = new String[] {\"a\", \"b\"};\n         Validate.noNullElements(array);\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated array contains null element at index: 1\", ex.getMessage());\n         }\n+        \n+        array = new String[] {\"a\", \"b\"};\n+        String[] test = Validate.noNullElements(array);\n+        assertSame(array, test);\n     }\n \n     //-----------------------------------------------------------------------\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n-    }\n-\n+        \n+        array = new String[] {\"a\", \"b\"};\n+        String[] test = Validate.noNullElements(array, \"Message\");\n+        assertSame(array, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     public void testNoNullElementsCollection1() {\n         List<String> coll = new ArrayList<String>();\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated collection contains null element at index: 1\", ex.getMessage());\n         }\n+        \n+        coll.set(1, \"b\");\n+        List<String> test = Validate.noNullElements(coll);\n+        assertSame(coll, test);\n     }\n \n     //-----------------------------------------------------------------------\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n-    }\n-\n+        \n+        coll.set(1, \"b\");\n+        List<String> test = Validate.noNullElements(coll, \"Message\");\n+        assertSame(coll, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     public void testAllElementsOfType() {\n         List<Object> coll = new ArrayList<Object>();\n         }\n     }\n \n+    //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new Validate());\n         Constructor<?>[] cons = Validate.class.getDeclaredConstructors();\n     }\n \n     //-----------------------------------------------------------------------\n+    //-----------------------------------------------------------------------\n     public void testValidIndex_withMessage_array() {\n         Object[] array = new Object[2];\n         Validate.validIndex(array, 0, \"Broken: \");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"Broken: 2\", ex.getMessage());\n         }\n+        \n+        String[] strArray = new String[] {\"Hi\"};\n+        String[] test = Validate.noNullElements(strArray, \"Message\");\n+        assertSame(strArray, test);\n     }\n \n     public void testValidIndex_array() {\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated array index is invalid: 2\", ex.getMessage());\n         }\n-    }\n-\n+        \n+        String[] strArray = new String[] {\"Hi\"};\n+        String[] test = Validate.noNullElements(strArray);\n+        assertSame(strArray, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     public void testValidIndex_withMessage_collection() {\n         Collection<String> coll = new ArrayList<String>();\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"Broken: 2\", ex.getMessage());\n         }\n+        \n+        List<String> strColl = Arrays.asList(new String[] {\"Hi\"});\n+        List<String> test = Validate.validIndex(strColl, 0, \"Message\");\n+        assertSame(strColl, test);\n     }\n \n     public void testValidIndex_collection() {\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated collection index is invalid: 2\", ex.getMessage());\n         }\n-    }\n-\n+        \n+        List<String> strColl = Arrays.asList(new String[] {\"Hi\"});\n+        List<String> test = Validate.validIndex(strColl, 0);\n+        assertSame(strColl, test);\n+    }\n+\n+    //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n     public void testValidIndex_withMessage_charSequence() {\n         CharSequence str = \"Hi\";\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"Broken: 2\", ex.getMessage());\n         }\n+        \n+        String input = \"Hi\";\n+        String test = Validate.validIndex(input, 0, \"Message\");\n+        assertSame(input, test);\n     }\n \n     public void testValidIndex_charSequence() {\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated string index is invalid: 2\", ex.getMessage());\n         }\n+        \n+        String input = \"Hi\";\n+        String test = Validate.validIndex(input, 0);\n+        assertSame(input, test);\n     }\n \n }", "timestamp": 1257094474, "metainfo": ""}