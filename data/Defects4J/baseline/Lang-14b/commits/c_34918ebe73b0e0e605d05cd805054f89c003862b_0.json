{"sha": "34918ebe73b0e0e605d05cd805054f89c003862b", "log": "Fix to handle null input array, and remove check for NULL  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ObjectUtils.java\n+++ b/src/java/org/apache/commons/lang/ObjectUtils.java\n      *  or <code>null</code> if there are no non-null values\n      */\n     public static <T> T firstNonNull(T... values) {\n-        for (T val : values) {\n-            if (val != null && val != ObjectUtils.NULL) {\n-                return val;\n+        if (values != null) {\n+            for (T val : values) {\n+                if (val != null) {\n+                    return val;\n+                }\n             }\n         }\n         return null;\n--- a/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ObjectUtilsTest.java\n         assertEquals(true, Modifier.isPublic(ObjectUtils.class.getModifiers()));\n         assertEquals(false, Modifier.isFinal(ObjectUtils.class.getModifiers()));\n     }\n-    \n+\n     //-----------------------------------------------------------------------\n     public void testIsNull() {\n         Object o = FOO;\n         assertSame(\"dflt was returned when o was not null\", o, ObjectUtils.defaultIfNull(o, dflt));\n     }\n \n+    public void testFirstNonNull() {\n+        assertEquals(null, ObjectUtils.firstNonNull(null, null));\n+        assertEquals(\"\", ObjectUtils.firstNonNull(null, \"\"));\n+        String firstNonNullGenerics = ObjectUtils.firstNonNull(null, null, \"123\", \"456\");\n+        assertEquals(\"123\", firstNonNullGenerics);\n+        assertEquals(\"123\", ObjectUtils.firstNonNull(\"123\", null, \"456\", null));\n+        assertEquals(null, ObjectUtils.firstNonNull());\n+        assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE));\n+        assertNull(ObjectUtils.firstNonNull());\n+        assertNull(ObjectUtils.firstNonNull(null, null));\n+//        assertSame(\"123\", ObjectUtils.firstNonNull(null, ObjectUtils.NULL, \"123\", \"456\"));\n+//        assertSame(\"456\", ObjectUtils.firstNonNull(ObjectUtils.NULL, \"456\", \"123\", null));\n+//        assertNull(ObjectUtils.firstNonNull(null, null, ObjectUtils.NULL));\n+        assertNull(ObjectUtils.firstNonNull((Object) null));\n+        assertNull(ObjectUtils.firstNonNull((Object[]) null));\n+    }\n+\n+    //-----------------------------------------------------------------------\n     public void testEquals() {\n         assertTrue(\"ObjectUtils.equals(null, null) returned false\", ObjectUtils.equals(null, null));\n         assertTrue(\"ObjectUtils.equals(\\\"foo\\\", null) returned true\", !ObjectUtils.equals(FOO, null));\n         assertNull( ObjectUtils.min((String)null, (String)null) );\n     }\n \n-    public void testFirstNonNull() {\n-      assertEquals(null, ObjectUtils.firstNonNull(null, null));\n-      assertEquals(\"\", ObjectUtils.firstNonNull(null, \"\"));\n-      assertEquals(\"123\", ObjectUtils.firstNonNull(null, null, \"123\", \"456\"));\n-      assertEquals(\"123\", ObjectUtils.firstNonNull(\"123\", null, \"456\", null));\n-      assertEquals(null, ObjectUtils.firstNonNull());\n-      assertSame(Boolean.TRUE, ObjectUtils.firstNonNull(Boolean.TRUE));\n-      assertNull(ObjectUtils.firstNonNull());\n-      assertNull(ObjectUtils.firstNonNull(null, null));\n-      assertSame(\"123\", ObjectUtils.firstNonNull(null, ObjectUtils.NULL, \"123\", \"456\"));\n-      assertSame(\"456\", ObjectUtils.firstNonNull(ObjectUtils.NULL, \"456\", \"123\", null));\n-      assertNull(ObjectUtils.firstNonNull(null, null, ObjectUtils.NULL));\n-    }\n-\n }", "timestamp": 1258450241, "metainfo": ""}