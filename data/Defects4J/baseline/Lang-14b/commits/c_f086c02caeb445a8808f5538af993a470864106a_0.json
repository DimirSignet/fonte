{"sha": "f086c02caeb445a8808f5538af993a470864106a", "log": "junit4ify RangeTest  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/RangeTest.java\n+++ b/src/test/java/org/apache/commons/lang3/RangeTest.java\n \n package org.apache.commons.lang3;\n \n+import static org.junit.Assert.*;\n+\n import java.util.Comparator;\n \n-import junit.framework.TestCase;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * <p>\n  * @version $Id$\n  */\n @SuppressWarnings(\"boxing\")\n-public class RangeTest extends TestCase {\n+public class RangeTest {\n \n     private Range<Byte> byteRange;\n     private Range<Byte> byteRange2;\n     private Range<Double> doubleRange;\n \n     @SuppressWarnings(\"cast\") // intRange\n-    @Override\n+    @Before\n     public void setUp() {\n         byteRange   = Range.between((byte) 0, (byte) 5);\n         byteRange2  = Range.between((byte) 0, (byte) 5);\n \n     //-----------------------------------------------------------------------\n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    @Test\n     public void testComparableConstructors() {\n         Comparable c = \n             new Comparable() { \n         assertEquals(true, r2.isNaturalOrdering());\n     }\n \n+    @Test\n     public void testIsWithCompare(){\n         Comparator<Integer> c = new Comparator<Integer>(){\n             public int compare(Integer o1, Integer o2) {\n         assertTrue(\"should contain 11\",ri.contains(11));\n     }\n \n+    @Test\n     public void testBetweenWithCompare(){\n         // TODO add tests with a better comparator\n         Comparator<Integer> c = new Comparator<Integer>(){\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testRangeOfChars() {\n         Range<Character> chars = Range.between('a', 'z');\n         assertTrue(chars.contains('b'));\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testEqualsObject() {\n         assertEquals(byteRange, byteRange);\n         assertEquals(byteRange, byteRange2);\n         assertFalse(byteRange2.equals(\"Ni!\"));\n     }\n \n+    @Test\n     public void testHashCode() {\n         assertEquals(byteRange.hashCode(), byteRange2.hashCode());\n         assertFalse(byteRange.hashCode() == byteRange3.hashCode());\n         assertTrue(intRange.hashCode() != 0);\n     }\n \n+    @Test\n     public void testToString() {\n         assertNotNull(byteRange.toString());\n         \n         assertEquals(\"[-20..-10]\", Range.between(-20, -10).toString());\n     }\n \n+    @Test\n     public void testToStringFormat() {\n         String str = intRange.toString(\"From %1$s to %2$s\");\n         assertEquals(\"From 10 to 20\", str);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testGetMinimum() {\n         assertEquals(10, (int) intRange.getMinimum());\n         assertEquals(10L, (long) longRange.getMinimum());\n         assertEquals(10d, doubleRange.getMinimum(), 0.00001d);\n     }\n \n+    @Test\n     public void testGetMaximum() {\n         assertEquals(20, (int) intRange.getMaximum());\n         assertEquals(20L, (long) longRange.getMaximum());\n         assertEquals(20d, doubleRange.getMaximum(), 0.00001d);\n     }\n \n+    @Test\n     public void testContains() {\n         assertFalse(intRange.contains(null));\n         \n         assertFalse(intRange.contains(25));\n     }\n \n+    @Test\n     public void testIsAfter() {\n         assertFalse(intRange.isAfter(null));\n         \n         assertFalse(intRange.isAfter(25));\n     }\n \n+    @Test\n     public void testIsStartedBy() {\n         assertFalse(intRange.isStartedBy(null));\n         \n         assertFalse(intRange.isStartedBy(25));\n     }\n \n+    @Test\n     public void testIsEndedBy() {\n         assertFalse(intRange.isEndedBy(null));\n         \n         assertFalse(intRange.isEndedBy(25));\n     }\n \n+    @Test\n     public void testIsBefore() {\n         assertFalse(intRange.isBefore(null));\n         \n         assertTrue(intRange.isBefore(25));\n     }\n \n+    @Test\n     public void testElementCompareTo() {\n         try {\n             intRange.elementCompareTo(null);\n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testContainsRange() {\n \n         // null handling\n         assertFalse(intRange.containsRange(Range.between(-11, -18)));\n     }\n \n+    @Test\n     public void testIsAfterRange() {\n         assertFalse(intRange.isAfterRange(null));\n         \n         assertFalse(intRange.isAfterRange(Range.between(10, 20)));\n     }\n \n+    @Test\n     public void testIsOverlappedBy() {\n \n         // null handling\n         assertFalse(intRange.isOverlappedBy(Range.between(-11, -18)));\n     }\n \n+    @Test\n     public void testIsBeforeRange() {\n         assertFalse(intRange.isBeforeRange(null));\n         \n     }\n \n     //-----------------------------------------------------------------------\n+    @Test\n     public void testSerializing() {\n         SerializationUtils.clone(intRange);\n     }", "timestamp": 1310882477, "metainfo": ""}