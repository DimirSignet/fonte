{"sha": "0b3a8a3128890f710700d04e38df48b883d11d91", "log": "Adding tests and resolving LANG-710, reported by Benjamin Valentin. Note that this changed such that the code will now escape an unfinished entity (i.e. &#030). This matches browser behaviour.   ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java\n import java.io.Writer;\n \n /**\n- * Translate XML numeric entities of the form &#[xX]?\\d+; to \n+ * Translate XML numeric entities of the form &#[xX]?\\d+;? to \n  * the specific codepoint.\n+ *\n+ * Note that the semi-colon is optional.\n  * \n  * @since 3.0\n  * @version $Id$\n      */\n     @Override\n     public int translate(CharSequence input, int index, Writer out) throws IOException {\n-        if(input.charAt(index) == '&' && index < (input.length() - 1) && input.charAt(index + 1) == '#') {\n+        int seqEnd = input.length();\n+        // Uses -2 to ensure there is something after the &#\n+        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n             int start = index + 2;\n             boolean isHex = false;\n \n             if(firstChar == 'x' || firstChar == 'X') {\n                 start++;\n                 isHex = true;\n+\n+                // Check there's more than just an x after the &#\n+                if(start == seqEnd) {\n+                    return 0;\n+                }\n             }\n \n             int end = start;\n-            while(input.charAt(end) != ';') {\n+            // Note that this supports character codes without a ; on the end\n+            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n+                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n+                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n+            {\n                 end++;\n             }\n \n                     entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);\n                 }\n             } catch(NumberFormatException nfe) {\n+            System.err.println(\"FAIL: \" + input.subSequence(start, end) + \"[\" + start +\"][\"+ end +\"]\");\n                 return 0;\n             }\n \n             } else {\n                 out.write(entityValue);\n             }\n-            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n+\n+            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n+\n+            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n         }\n         return 0;\n     }\n--- a/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java\n \n     public void testOutOfBounds() {\n         NumericEntityUnescaper neu = new NumericEntityUnescaper();\n-        String input = \"Test &\";\n-        String expected = input;\n+\n+        assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));\n+        assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));\n+        assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));\n+        assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));\n+    }\n+\n+    public void testUnfinishedEntity() {\n+        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n+        String input = \"Test &#x30 not test\";\n+        String expected = \"Test \\u0030 not test\";\n \n         String result = neu.translate(input);\n-        assertEquals(\"Failed to ignore when last character is &\", expected, result);\n+        assertEquals(\"Failed to support unfinished entities (i.e. missing semi-colon\", expected, result);\n     }\n \n }", "timestamp": 1309679733, "metainfo": ""}