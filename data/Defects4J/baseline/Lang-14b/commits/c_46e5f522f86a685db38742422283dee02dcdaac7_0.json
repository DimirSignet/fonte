{"sha": "46e5f522f86a685db38742422283dee02dcdaac7", "log": "LANG-290 - Add more enum utility methods  ", "commit": "\n--- a/src/java/org/apache/commons/lang/EnumUtils.java\n+++ b/src/java/org/apache/commons/lang/EnumUtils.java\n  */\n package org.apache.commons.lang;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n import java.util.Map;\n-import java.util.LinkedHashMap;\n-import java.util.EnumSet;\n \n /**\n  * Utility library to provide helper methods for Java enums.\n  * @author Apache Software Foundation\n  */\n public class EnumUtils {\n-    \n+\n     /**\n-     * <p>This constructor is public to permit tools that require a JavaBean\n-     * instance to operate.</p>\n+     * This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.\n      */\n     public EnumUtils() {\n     }\n \n     /**\n-     * <p>Gets the <code>Map</code> of <code>enums</code> by name.</p>\n+     * Gets the <code>Map</code> of <code>enums</code> by name.\n+     * <p>\n+     * This method is useful when you need a map of enums by name.\n      *\n-     * @param enumClass the class of the <code>enum</code> to get\n-     * @return the enum Map\n+     * @param enumClass  the class of the <code>enum</code> to get, not null\n+     * @return the modifiable map of enum names to enums, never null\n      */\n-    public static <E extends Enum<E>> Map<String, Enum<E>> getEnumMap(Class<E> enumClass) {\n-        Map<String, Enum<E>> map = new LinkedHashMap<String, Enum<E>>();\n-\n-        for (E e: EnumSet.allOf(enumClass)) {\n+    public static <E extends Enum<E>> Map<String, E> getEnumMap(Class<E> enumClass) {\n+        Map<String, E> map = new LinkedHashMap<String, E>();\n+        for (E e: enumClass.getEnumConstants()) {\n             map.put(e.name(), e);\n         }\n-\n         return map;\n     }\n-    \n+\n+    /**\n+     * Gets the <code>List</code> of <code>enums</code>.\n+     * <p>\n+     * This method is useful when you need a list of enums rather than an array.\n+     *\n+     * @param enumClass  the class of the <code>enum</code> to get, not null\n+     * @return the modifiable list of enums, never null\n+     */\n+    public static <E extends Enum<E>> List<E> getEnumList(Class<E> enumClass) {\n+        return new ArrayList<E>(Arrays.asList(enumClass.getEnumConstants()));\n+    }\n+\n+    /**\n+     * Checks if the specified name is a valid <code>enum</code> for the class.\n+     * <p>\n+     * This method differs from {@link Enum#valueOf} in that checks if the name is\n+     * a valid enum without needing to catch the exception.\n+     *\n+     * @param enumClass  the class of the <code>enum</code> to get, not null\n+     * @return the map of enum names to enums, never null\n+     */\n+    public static <E extends Enum<E>> boolean isEnum(Class<E> enumClass, String enumName) {\n+        try {\n+            Enum.valueOf(enumClass, enumName);\n+            return true;\n+        } catch (IllegalArgumentException ex) {\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * Gets the <code>enum</code> for the class, returning <code>null</code> if not found.\n+     * <p>\n+     * This method differs from {@link Enum#valueOf} in that it does not throw an exception\n+     * for an invalid enum name.\n+     *\n+     * @param enumClass  the class of the <code>enum</code> to get, not null\n+     * @return the map of enum names to enums, never null\n+     */\n+    public static <E extends Enum<E>> E getEnum(Class<E> enumClass, String enumName) {\n+        try {\n+            return Enum.valueOf(enumClass, enumName);\n+        } catch (IllegalArgumentException ex) {\n+            return null;\n+        }\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/EnumUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/EnumUtilsTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.util.List;\n+import java.util.Map;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n         new EnumUtils();\n     }\n \n-    public void testGetEnumMap() {\n-        String toString = EnumUtils.getEnumMap(Traffic.class).toString(); \n-        assertEquals( \"getEnumMap not created correctly\", \"{RED=RED, AMBER=AMBER, GREEN=GREEN}\", toString);\n+    public void test_getEnumMap() {\n+        Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class);\n+        assertEquals( \"getEnumMap not created correctly\", \"{RED=RED, AMBER=AMBER, GREEN=GREEN}\", test.toString());\n+        assertEquals(3, test.size());\n+        assertEquals(true, test.containsKey(\"RED\"));\n+        assertEquals(Traffic.RED, test.get(\"RED\"));\n+        assertEquals(true, test.containsKey(\"AMBER\"));\n+        assertEquals(Traffic.AMBER, test.get(\"AMBER\"));\n+        assertEquals(true, test.containsKey(\"GREEN\"));\n+        assertEquals(Traffic.GREEN, test.get(\"GREEN\"));\n+        assertEquals(false, test.containsKey(\"PURPLE\"));\n+    }\n+\n+    public void test_getEnumList() {\n+        List<Traffic> test = EnumUtils.getEnumList(Traffic.class);\n+        assertEquals(3, test.size());\n+        assertEquals(Traffic.RED, test.get(0));\n+        assertEquals(Traffic.AMBER, test.get(1));\n+        assertEquals(Traffic.GREEN, test.get(2));\n+    }\n+\n+    public void test_isEnum() {\n+        assertEquals(true, EnumUtils.isEnum(Traffic.class, \"RED\"));\n+        assertEquals(true, EnumUtils.isEnum(Traffic.class, \"AMBER\"));\n+        assertEquals(true, EnumUtils.isEnum(Traffic.class, \"GREEN\"));\n+        assertEquals(false, EnumUtils.isEnum(Traffic.class, \"PURPLE\"));\n+    }\n+\n+    public void test_getEnum() {\n+        assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, \"RED\"));\n+        assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, \"AMBER\"));\n+        assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, \"GREEN\"));\n+        assertEquals(null, EnumUtils.getEnum(Traffic.class, \"PURPLE\"));\n     }\n \n }", "timestamp": 1256604698, "metainfo": ""}