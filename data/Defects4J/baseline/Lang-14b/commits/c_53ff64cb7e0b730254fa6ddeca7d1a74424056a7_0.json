{"sha": "53ff64cb7e0b730254fa6ddeca7d1a74424056a7", "log": "Copying from Collections to Lang  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/compare/ComparableComparator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+\n+/**\n+ * A {@link Comparator Comparator} that compares \n+ * {@link Comparable Comparable} objects.\n+ * <p />\n+ * This Comparator is useful, for example,\n+ * for enforcing the natural order in custom implementations\n+ * of SortedSet and SortedMap.\n+ * <p />\n+ * Note: In the 2.0 and 2.1 releases of Commons Collections, \n+ * this class would throw a {@link ClassCastException} if\n+ * either of the arguments to {@link #compare(Object, Object) compare}\n+ * were <code>null</code>, not {@link Comparable Comparable},\n+ * or for which {@link Comparable#compareTo(Object) compareTo} gave\n+ * inconsistent results.  This is no longer the case.  See\n+ * {@link #compare(Object, Object) compare} for details.\n+ *\n+ * @since Commons Collections 2.0\n+ * @version $Revision$ $Date$\n+ *\n+ * @see java.util.Collections#reverseOrder()\n+ */\n+public class ComparableComparator<E extends Comparable<? super E>> implements Comparator<E>, Serializable {\n+\n+    /** Serialization version. */\n+    private static final long serialVersionUID=-291439688585137865L;\n+\n+    /** The singleton instance. */\n+    @SuppressWarnings(\"rawtypes\")\n+    public static final ComparableComparator<?> INSTANCE = new ComparableComparator();\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Gets the singleton instance of a ComparableComparator.\n+     * <p>\n+     * Developers are encouraged to use the comparator returned from this method\n+     * instead of constructing a new instance to reduce allocation and GC overhead\n+     * when multiple comparable comparators may be used in the same VM.\n+     * \n+     * @return the singleton ComparableComparator\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <E extends Comparable<? super E>> ComparableComparator<E> comparableComparator() {\n+        return (ComparableComparator<E>) INSTANCE;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Constructor whose use should be avoided.\n+     * <p>\n+     * Please use the {@link #comparableComparator()} method whenever possible.\n+     */\n+    public ComparableComparator() {\n+        super();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compare the two {@link Comparable Comparable} arguments.\n+     * This method is equivalent to:\n+     * <pre>((Comparable)obj1).compareTo(obj2)</pre>\n+     * \n+     * @param obj1  the first object to compare\n+     * @param obj2  the second object to compare\n+     * @return negative if obj1 is less, positive if greater, zero if equal\n+     * @throws NullPointerException when <i>obj1</i> is <code>null</code>, \n+     *         or when <code>((Comparable)obj1).compareTo(obj2)</code> does\n+     * @throws ClassCastException when <i>obj1</i> is not a <code>Comparable</code>,\n+     *         or when <code>((Comparable)obj1).compareTo(obj2)</code> does\n+     */\n+    public int compare(E obj1, E obj2) {\n+        return obj1.compareTo(obj2);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement a hash code for this comparator that is consistent with\n+     * {@link #equals(Object) equals}.\n+     *\n+     * @return a hash code for this comparator.\n+     * @since Commons Collections 3.0\n+     */\n+    @Override\n+    public int hashCode() {\n+        return \"ComparableComparator\".hashCode();\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff <i>that</i> Object is \n+     * is a {@link Comparator Comparator} whose ordering is \n+     * known to be equivalent to mine.\n+     * <p>\n+     * This implementation returns <code>true</code>\n+     * iff <code><i>object</i>.{@link Object#getClass() getClass()}</code>\n+     * equals <code>this.getClass()</code>.\n+     * Subclasses may want to override this behavior to remain consistent\n+     * with the {@link Comparator#equals(Object)} contract.\n+     * \n+     * @param object  the object to compare with\n+     * @return true if equal\n+     * @since Commons Collections 3.0\n+     */\n+    @Override\n+    public boolean equals(Object object) {\n+        return (this == object) || \n+               ((null != object) && (object.getClass().equals(this.getClass())));\n+    }\n+\n+}", "timestamp": 1312780233, "metainfo": ""}