{"sha": "b06d5bf2f92c993c77ac57da63d12c960413cb63", "log": "Rename WordWrapUtils to WordUtils Refactor wrapLine method, making it public and work properly Remove wrapText method Test   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/WordUtils.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowledgements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+/**\n+ * <p><code>WordUtils</code> is a utility class to assist with word wrapping.</p>\n+ * \n+ * <p>This class tries to handle <code>null</code> input gracefully.\n+ * An exception will not be thrown for a <code>null</code> input.\n+ * Each method documents its behaviour in more detail.</p>\n+ * \n+ * @author Apache Jakarta Velocity\n+ * @author Henri Yandell\n+ * @author Stephen Colebourne\n+ * @author <a href=\"mailto:hps@intermeta.de\">Henning P. Schmiedehausen</a>\n+ * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n+ * @since 2.0\n+ * @version $Id: WordUtils.java,v 1.1 2003/08/17 21:57:37 scolebourne Exp $\n+ */\n+public class WordUtils {\n+\n+    /**\n+     * <p><code>WordWrapUtils</code> instances should NOT be constructed in\n+     * standard programming. Instead, the class should be used as\n+     * <code>WordWrapUtils.wrap(\"foo bar\", 20);</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean\n+     * instance to operate.</p>\n+     */\n+    public WordUtils() {\n+    }\n+\n+    // Wrapping\n+    //--------------------------------------------------------------------------\n+//    /**\n+//     * <p>Wraps a block of text to a specified line length using '\\n' as\n+//     * a newline.</p>\n+//     *\n+//     * <p>This method takes a block of text, which might have long lines in it\n+//     * and wraps the long lines based on the supplied lineLength parameter.</p>\n+//     * \n+//     * <p>If a single word is longer than the line length (eg. a URL), it will\n+//     * not be broken, and will display beyond the expected width.</p>\n+//     * \n+//     * <p>If there are tabs in inString, you are going to get results that are\n+//     * a bit strange. Tabs are a single character but are displayed as 4 or 8\n+//     * spaces. Remove the tabs.</p>\n+//     *\n+//     * @param str  text which is in need of word-wrapping, may be null\n+//     * @param lineLength  the column to wrap the words at\n+//     * @return the text with all the long lines word-wrapped\n+//     *  <code>null</code> if null string input\n+//     */\n+//    public static String wrapText(String str, int lineLength) {\n+//        return wrap(str, null, lineLength);\n+//    }\n+    \n+//    /**\n+//     * <p>Wraps a block of text to a specified line length.</p>\n+//     *\n+//     * <p>This method takes a block of text, which might have long lines in it\n+//     * and wraps the long lines based on the supplied lineLength parameter.</p>\n+//     * \n+//     * <p>If a single word is longer than the wrapColumn (eg. a URL), it will\n+//     * not be broken, and will display beyond the expected width.</p>\n+//     * \n+//     * <p>If there are tabs in inString, you are going to get results that are\n+//     * a bit strange. Tabs are a single character but are displayed as 4 or 8\n+//     * spaces. Remove the tabs.</p>\n+//     *\n+//     * @param str  text which is in need of word-wrapping, may be null\n+//     * @param newLineChars  the characters that define a newline, null treated as \\n\n+//     * @param lineLength  the column to wrap the words at\n+//     * @return the text with all the long lines word-wrapped\n+//     *  <code>null</code> if null string input\n+//     */\n+//    public static String wrapText(String str, String newLineChars, int lineLength) {\n+//        if (str == null) {\n+//            return null;\n+//        }\n+//        if (newLineChars == null) {\n+//            newLineChars = \"\\n\";\n+//        }\n+//        StringTokenizer lineTokenizer = new StringTokenizer(str, newLineChars, true);\n+//        StringBuffer stringBuffer = new StringBuffer();\n+//\n+//        while (lineTokenizer.hasMoreTokens()) {\n+//            try {\n+//                String nextLine = lineTokenizer.nextToken();\n+//\n+//                if (nextLine.length() > lineLength) {\n+//                    // This line is long enough to be wrapped.\n+//                    nextLine = wrapLine(nextLine, null, lineLength, false);\n+//                }\n+//\n+//                stringBuffer.append(nextLine);\n+//\n+//            } catch (NoSuchElementException nsee) {\n+//                // thrown by nextToken(), but I don't know why it would\n+//                break;\n+//            }\n+//        }\n+//\n+//        return (stringBuffer.toString());\n+//    }\n+\n+    /**\n+     * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>\n+     * \n+     * <p>New lines will be separated by the system property line separator.\n+     * Very long words, such as URLs will <i>not</i> be wrapped.</p>\n+     * \n+     * <p>Leading spaces on a new line are stripped.\n+     * Trailing spaces are not stripped.</p>\n+     *\n+     * <pre>\n+     * WordUtils.wrap(null, *) = null\n+     * WordUtils.wrap(\"\", *) = null\n+     * </pre>\n+     *\n+     * @param str  the String to be word wrapped, may be null\n+     * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1\n+     * @return a line with newlines inserted, <code>null</code> if null input\n+     */\n+    public static String wrap(String str, int wrapLength) {\n+        return wrap(str, wrapLength, null, false);\n+    }\n+    \n+    /**\n+     * <p>Wraps a single line of text, identifying words by <code>' '</code>.</p>\n+     * \n+     * <p>Leading spaces on a new line are stripped.\n+     * Trailing spaces are not stripped.</p>\n+     * \n+     * <pre>\n+     * WordUtils.wrap(null, *, *, *) = null\n+     * WordUtils.wrap(\"\", *, *, *) = null\n+     * </pre>\n+     *\n+     * @param str  the String to be word wrapped, may be null\n+     * @param wrapLength  the column to wrap the words at, less than 1 is treated as 1\n+     * @param newLineStr  the string to insert for a new line, \n+     *  <code>null</code> uses the system property line separator\n+     * @param wrapLongWords  true if long words (such as URLs) should be wrapped\n+     * @return a line with newlines inserted, <code>null</code> if null input\n+     */\n+    public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords) {\n+        if (str == null) {\n+            return null;\n+        }\n+        if (newLineStr == null) {\n+            newLineStr = SystemUtils.LINE_SEPARATOR;\n+        }\n+        if (wrapLength < 1) {\n+            wrapLength = 1;\n+        }\n+        int inputLineLength = str.length();\n+        int offset = 0;\n+        StringBuffer wrappedLine = new StringBuffer(inputLineLength + 32);\n+        \n+        while ((inputLineLength - offset) > wrapLength) {\n+            if (str.charAt(offset) == ' ') {\n+                offset++;\n+                continue;\n+            }\n+            int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);\n+\n+            if (spaceToWrapAt >= offset) {\n+                // normal case\n+                wrappedLine.append(str.substring(offset, spaceToWrapAt));\n+                wrappedLine.append(newLineStr);\n+                offset = spaceToWrapAt + 1;\n+                \n+            } else {\n+                // really long word or URL\n+                if (wrapLongWords) {\n+                    // wrap really long word one line at a time\n+                    wrappedLine.append(str.substring(offset, wrapLength + offset));\n+                    wrappedLine.append(newLineStr);\n+                    offset += wrapLength;\n+                } else {\n+                    // do not wrap really long word, just extend beyond limit\n+                    spaceToWrapAt = str.indexOf(' ', wrapLength + offset);\n+                    if (spaceToWrapAt >= 0) {\n+                        wrappedLine.append(str.substring(offset, spaceToWrapAt));\n+                        wrappedLine.append(newLineStr);\n+                        offset = spaceToWrapAt + 1;\n+                    } else {\n+                        wrappedLine.append(str.substring(offset));\n+                        offset = inputLineLength;\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Whatever is left in line is short enough to just pass through\n+        wrappedLine.append(str.substring(offset));\n+\n+        return wrappedLine.toString();\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n  * @author Stephen Colebourne\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Matthew Hawthorne\n- * @version $Id: LangTestSuite.java,v 1.20 2003/08/17 19:41:17 bayard Exp $\n+ * @version $Id: LangTestSuite.java,v 1.21 2003/08/17 21:57:37 scolebourne Exp $\n  */\n public class LangTestSuite extends TestCase {\n     \n         suite.addTest(StringEscapeUtilsTest.suite());\n         suite.addTest(SystemUtilsTest.suite());\n         suite.addTest(UnhandledExceptionTest.suite());\n+        suite.addTest(WordUtilsTest.suite());\n         return suite;\n     }\n }\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/WordUtilsTest.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002-2003 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Unit tests for WordUtils class.\n+ * \n+ * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n+ * @author Henri Yandell\n+ * @author Stephen Colebourne\n+ * @version $Id: WordUtilsTest.java,v 1.1 2003/08/17 21:57:37 scolebourne Exp $\n+ */\n+public class WordUtilsTest extends TestCase {\n+\n+    public WordUtilsTest(String name) {\n+        super(name);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(WordUtilsTest.class);\n+        suite.setName(\"WordUtilsTests\");\n+        return suite;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    public void testConstructor() {\n+        assertNotNull(new WordUtils());\n+        Constructor[] cons = WordUtils.class.getDeclaredConstructors();\n+        assertEquals(1, cons.length);\n+        assertEquals(true, Modifier.isPublic(cons[0].getModifiers()));\n+        assertEquals(true, Modifier.isPublic(WordUtils.class.getModifiers()));\n+        assertEquals(false, Modifier.isFinal(WordUtils.class.getModifiers()));\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testWrap_StringInt() {\n+        assertEquals(null, WordUtils.wrap(null, 20));\n+        assertEquals(null, WordUtils.wrap(null, -1));\n+        \n+        assertEquals(\"\", WordUtils.wrap(\"\", 20));\n+        assertEquals(\"\", WordUtils.wrap(\"\", -1));\n+        \n+        // normal\n+        String systemNewLine = System.getProperty(\"line.separator\");\n+        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        String expected = \"Here is one line of\" + systemNewLine + \"text that is going\" \n+            + systemNewLine + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20));\n+        \n+        // long word at end\n+        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n+        expected = \"Click here to jump\" + systemNewLine + \"to the jakarta\" + systemNewLine \n+            + \"website -\" + systemNewLine + \"http://jakarta.apache.org\";\n+        assertEquals(expected, WordUtils.wrap(input, 20));\n+        \n+        // long word in middle\n+        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n+        expected = \"Click here,\" + systemNewLine + \"http://jakarta.apache.org,\" + systemNewLine \n+            + \"to jump to the\" + systemNewLine + \"jakarta website\";\n+        assertEquals(expected, WordUtils.wrap(input, 20));\n+    }\n+    \n+    public void testWrap_StringIntStringBoolean() {\n+        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", false));\n+        assertEquals(null, WordUtils.wrap(null, 20, \"\\n\", true));\n+        assertEquals(null, WordUtils.wrap(null, 20, null, true));\n+        assertEquals(null, WordUtils.wrap(null, 20, null, false));\n+        assertEquals(null, WordUtils.wrap(null, -1, null, true));\n+        assertEquals(null, WordUtils.wrap(null, -1, null, false));\n+        \n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", false));\n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, \"\\n\", true));\n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, false));\n+        assertEquals(\"\", WordUtils.wrap(\"\", 20, null, true));\n+        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, false));\n+        assertEquals(\"\", WordUtils.wrap(\"\", -1, null, true));\n+        \n+        // normal\n+        String input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        String expected = \"Here is one line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+\n+        // unusual newline char\n+        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"<br />\", true));\n+\n+        // short line length\n+        input = \"Here is one line\";\n+        expected = \"Here\\nis one\\nline\";\n+        assertEquals(expected, WordUtils.wrap(input, 6, \"\\n\", false));\n+        expected = \"Here\\nis\\none\\nline\";\n+        assertEquals(expected, WordUtils.wrap(input, 2, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, -1, \"\\n\", false));\n+\n+        // system newline char\n+        String systemNewLine = System.getProperty(\"line.separator\");\n+        input = \"Here is one line of text that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is one line of\" + systemNewLine + \"text that is going\" + systemNewLine \n+            + \"to be wrapped after\" + systemNewLine + \"20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, null, false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, null, true));\n+\n+        // with extra spaces\n+        input = \" Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns.\";\n+        expected = \"Here:  is  one  line\\nof  text  that  is \\ngoing  to  be \\nwrapped  after  20 \\ncolumns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // with tab\n+        input = \"Here is\\tone line of text that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is\\tone line of\\ntext that is going\\nto be wrapped after\\n20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // with tab at wrapColumn\n+        input = \"Here is one line of\\ttext that is going to be wrapped after 20 columns.\";\n+        expected = \"Here is one line\\nof\\ttext that is\\ngoing to be wrapped\\nafter 20 columns.\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // difference because of long word\n+        input = \"Click here to jump to the jakarta website - http://jakarta.apache.org\";\n+        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apache.org\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        expected = \"Click here to jump\\nto the jakarta\\nwebsite -\\nhttp://jakarta.apach\\ne.org\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+        \n+        // difference because of long word in middle\n+        input = \"Click here, http://jakarta.apache.org, to jump to the jakarta website\";\n+        expected = \"Click here,\\nhttp://jakarta.apache.org,\\nto jump to the\\njakarta website\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", false));\n+        expected = \"Click here,\\nhttp://jakarta.apach\\ne.org, to jump to\\nthe jakarta website\";\n+        assertEquals(expected, WordUtils.wrap(input, 20, \"\\n\", true));\n+//        System.err.println(expected);\n+//        System.err.println(WordUtils.wrap(input, 20, \"\\n\", false));\n+    }\n+}", "timestamp": 1061157457, "metainfo": ""}