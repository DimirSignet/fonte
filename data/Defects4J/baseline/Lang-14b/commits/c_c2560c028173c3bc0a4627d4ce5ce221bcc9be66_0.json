{"sha": "c2560c028173c3bc0a4627d4ce5ce221bcc9be66", "log": "Making it so that NumberUtils.createNumber throws a NumberFormatException instead of a StringIndexOutOfBoundsException when Strings such as 1eE are passed in. Thanks to Ingo Heinrich's report and patch in LANG-638  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n         if (decPos > -1) {\n \n             if (expPos > -1) {\n-                if (expPos < decPos) {\n+                if (expPos < decPos || expPos > str.length()) {\n                     throw new NumberFormatException(str + \" is not a valid number.\");\n                 }\n                 dec = str.substring(decPos + 1, expPos);\n             mant = str.substring(0, decPos);\n         } else {\n             if (expPos > -1) {\n+                if (expPos > str.length()) {\n+                    throw new NumberFormatException(str + \" is not a valid number.\");\n+                }\n                 mant = str.substring(0, expPos);\n             } else {\n                 mant = str;\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n \n         // LANG-521\n         assertEquals(\"createNumber(String) LANG-521 failed\", new Float(\"2.\"), NumberUtils.createNumber(\"2.\"));\n+\n+        // LANG-638\n+        assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));\n     }\n \n     public void testCreateFloat() {", "timestamp": 1280810464, "metainfo": ""}