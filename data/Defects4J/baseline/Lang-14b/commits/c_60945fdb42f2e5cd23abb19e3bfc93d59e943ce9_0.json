{"sha": "60945fdb42f2e5cd23abb19e3bfc93d59e943ce9", "log": "Raw types  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n     // should take a String or String[] parameter and return String or String[].\n     // This test enforces that this is done.\n     public void testStringUtilsCharSequenceContract() {\n-        Class c = StringUtils.class;\n+        Class<StringUtils> c = StringUtils.class;\n         Method[] methods = c.getMethods();\n         for (int i=0; i<methods.length; i++) {\n             Method m = methods[i];\n                 // Assume this is mutable and ensure the first parameter is not CharSequence.\n                 // It may be String or it may be something else (String[], Object, Object[]) so \n                 // don't actively test for that.\n-                Class[] params = m.getParameterTypes();\n+                Class<?>[] params = m.getParameterTypes();\n                 if ( params.length > 0 && (params[0] == CharSequence.class || params[0] == CharSequence[].class)) {\n                     fail(\"The method \" + m + \" appears to be mutable in spirit and therefore must not accept a CharSequence\");\n                 }\n             } else {\n                 // Assume this is immutable in spirit and ensure the first parameter is not String.\n                 // As above, it may be something other than CharSequence.\n-                Class[] params = m.getParameterTypes();\n+                Class<?>[] params = m.getParameterTypes();\n                 if ( params.length > 0 && (params[0] == String.class || params[0] == String[].class)) {\n                     fail(\"The method \" + m + \" appears to be immutable in spirit and therefore must not accept a String\");\n                 }", "timestamp": 1302206781, "metainfo": ""}