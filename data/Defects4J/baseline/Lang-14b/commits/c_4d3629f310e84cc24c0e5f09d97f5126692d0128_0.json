{"sha": "4d3629f310e84cc24c0e5f09d97f5126692d0128", "log": "Applying my patch from LANG-535 - adding support to getShortClassName and getPackageName for arrays, including primitive arrays and multi-dimensional arrays. Also stopped getPackageName relying on the underlying class.getPackage as it's sometimes null  ", "commit": "\n--- a/src/java/org/apache/commons/lang/ClassUtils.java\n+++ b/src/java/org/apache/commons/lang/ClassUtils.java\n             return StringUtils.EMPTY;\n         }\n \n+        StringBuffer arrayPrefix = new StringBuffer();\n+\n+        // Handle array encoding\n+        if (className.startsWith(\"[\")) {\n+            while (className.charAt(0) == '[') {\n+                className = className.substring(1);\n+                arrayPrefix.append(\"[]\");\n+            }\n+            // Strip Object type encoding\n+            if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n+                className = className.substring(1, className.length() - 1);\n+            }\n+        }\n+\n+        if (reverseAbbreviationMap.containsKey(className)) {\n+            className = reverseAbbreviationMap.get(className);\n+        }\n+\n         int lastDotIdx = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         int innerIdx = className.indexOf(\n                 INNER_CLASS_SEPARATOR_CHAR, lastDotIdx == -1 ? 0 : lastDotIdx + 1);\n         if (innerIdx != -1) {\n             out = out.replace(INNER_CLASS_SEPARATOR_CHAR, PACKAGE_SEPARATOR_CHAR);\n         }\n-        return out;\n+        return out + arrayPrefix;\n     }\n \n     // Package name\n         if (cls == null) {\n             return StringUtils.EMPTY;\n         }\n-        return cls.getPackage().getName();\n+        return getPackageName(cls.getName());\n     }\n \n     /**\n      * @return the package name or an empty string\n      */\n     public static String getPackageName(String className) {\n-        if (className == null) {\n+        if (className == null || className.length() == 0) {\n             return StringUtils.EMPTY;\n         }\n+\n+        // Strip array encoding\n+        while (className.charAt(0) == '[') {\n+            className = className.substring(1);\n+        }\n+        // Strip Object type encoding\n+        if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {\n+            className = className.substring(1);\n+        }\n+\n         int i = className.lastIndexOf(PACKAGE_SEPARATOR_CHAR);\n         if (i == -1) {\n             return StringUtils.EMPTY;\n--- a/src/test/org/apache/commons/lang/ClassUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ClassUtilsTest.java\n         assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));\n         assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));\n         assertEquals(\"\", ClassUtils.getShortClassName((Class) null));\n+\n+        // LANG-535\n+        assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));\n+        assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));\n+\n+        // Primitives\n+        assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));\n+        assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));\n+        assertEquals(\"char\", ClassUtils.getShortClassName(char.class));\n+        assertEquals(\"short\", ClassUtils.getShortClassName(short.class));\n+        assertEquals(\"int\", ClassUtils.getShortClassName(int.class));\n+        assertEquals(\"long\", ClassUtils.getShortClassName(long.class));\n+        assertEquals(\"float\", ClassUtils.getShortClassName(float.class));\n+        assertEquals(\"double\", ClassUtils.getShortClassName(double.class));\n+\n+        // Primitive Arrays\n+        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));\n+        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));\n+        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));\n+        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));\n+        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));\n+        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));\n+        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));\n+        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));\n+\n+        // Arrays of arrays of ...\n+        assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));\n+        assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));\n+        assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));\n     }\n     \n     public void test_getShortClassName_String() {\n         assertEquals(\"\", ClassUtils.getShortClassName((String) null));\n         assertEquals(\"\", ClassUtils.getShortClassName(\"\"));\n     }\n-    \n+\n     // -------------------------------------------------------------------------\n     public void test_getPackageName_Object() {\n         assertEquals(\"org.apache.commons.lang\", ClassUtils.getPackageName(new ClassUtils(), \"<null>\"));\n         assertEquals(\"java.lang\", ClassUtils.getPackageName(String.class));\n         assertEquals(\"java.util\", ClassUtils.getPackageName(Map.Entry.class));\n         assertEquals(\"\", ClassUtils.getPackageName((Class)null));\n+\n+        // LANG-535\n+        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[].class));\n+\n+        // Primitive Arrays\n+        assertEquals(\"\", ClassUtils.getPackageName(boolean[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(byte[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(char[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(short[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(int[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(long[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(float[].class));\n+        assertEquals(\"\", ClassUtils.getPackageName(double[].class));\n+\n+        // Arrays of arrays of ...\n+        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][].class));\n+        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][].class));\n+        assertEquals(\"java.lang\", ClassUtils.getPackageName(String[][][][].class));\n     }\n     \n     public void test_getPackageName_String() {", "timestamp": 1255591892, "metainfo": ""}