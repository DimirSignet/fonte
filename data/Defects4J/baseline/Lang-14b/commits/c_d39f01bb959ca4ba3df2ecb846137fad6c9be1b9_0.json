{"sha": "d39f01bb959ca4ba3df2ecb846137fad6c9be1b9", "log": "Adding an OctalUnescaper to handle Java's support of 1->377 Octal values. LANG-646  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n import org.apache.commons.lang3.text.translate.EntityArrays;\n import org.apache.commons.lang3.text.translate.LookupTranslator;\n import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;\n+import org.apache.commons.lang3.text.translate.OctalUnescaper;\n import org.apache.commons.lang3.text.translate.UnicodeEscaper;\n import org.apache.commons.lang3.text.translate.UnicodeUnescaper;\n \n     // TODO: throw \"illegal character: \\92\" as an Exception if a \\ on the end of the Java (as per the compiler)?\n     public static final CharSequenceTranslator UNESCAPE_JAVA = \n         new AggregateTranslator(\n+            new OctalUnescaper(),     // .between('\\1', '\\377'),\n             new UnicodeUnescaper(),\n             new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_UNESCAPE()),\n             new LookupTranslator(\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/OctalUnescaper.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang3.text.translate;\n+\n+import java.io.IOException;\n+import java.io.Writer;\n+\n+/**\n+ * Translate escaped octal Strings back to their octal values.\n+ *\n+ * For example, \"\\45\" should go back to being the specific value (a %).\n+ *\n+ * Note that this currently only supports the viable range of octal for Java; namely \n+ * 1 to 377. This is both because parsing Java is the main use case and Integer.parseInt\n+ * throws an exception when values are larger than octal 377.\n+ * \n+ * @author Apache Software Foundation\n+ * @since 3.0\n+ * @version $Id: OctalUnescaper.java 967237 2010-07-23 20:08:57Z mbenson $\n+ */\n+public class OctalUnescaper extends CharSequenceTranslator {\n+\n+    private static int OCTAL_MAX = 377;\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int translate(CharSequence input, int index, Writer out) throws IOException {\n+        if(input.charAt(index) == '\\\\' && index < (input.length() - 1) && Character.isDigit(input.charAt(index + 1)) ) {\n+            int start = index + 1;\n+\n+            int end = index + 2;\n+            while ( end < input.length() && Character.isDigit(input.charAt(end)) ) {\n+                end++;\n+                if ( Integer.parseInt(input.subSequence(start, end).toString(), 10) > OCTAL_MAX) {\n+                    end--; // rollback\n+                    break;\n+                }\n+            }\n+\n+            out.write( Integer.parseInt(input.subSequence(start, end).toString(), 8) );\n+            return 1 + end - start;\n+        }\n+        return 0;\n+    }\n+}\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/OctalUnescaperTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.text.translate;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang3.text.translate.OctalUnescaper}.\n+ * @version $Id: OctalUnescaperTest.java 979392 2010-07-26 18:09:52Z mbenson $\n+ */\n+public class OctalUnescaperTest extends TestCase {\n+\n+    public void testBetween() {\n+        OctalUnescaper oue = new OctalUnescaper();   //.between(\"1\", \"377\");\n+\n+        String input = \"\\\\45\";\n+        String result = oue.translate(input);\n+        assertEquals(\"Failed to unescape octal characters via the between method\", \"\\45\", result);\n+\n+        input = \"\\\\377\";\n+        result = oue.translate(input);\n+        assertEquals(\"Failed to unescape octal characters via the between method\", \"\\377\", result);\n+\n+        input = \"\\\\377 and\";\n+        result = oue.translate(input);\n+        assertEquals(\"Failed to unescape octal characters via the between method\", \"\\377 and\", result);\n+\n+        input = \"\\\\378 and\";\n+        result = oue.translate(input);\n+        assertEquals(\"Failed to unescape octal characters via the between method\", \"\\378 and\", result);\n+\n+        input = \"\\\\378\";\n+        result = oue.translate(input);\n+        assertEquals(\"Failed to unescape octal characters via the between method\", \"\\378\", result);\n+\n+        input = \"\\\\1\";\n+        result = oue.translate(input);\n+        assertEquals(\"Failed to unescape octal characters via the between method\", \"\\1\", result);\n+    }\n+\n+}", "timestamp": 1295242413, "metainfo": ""}