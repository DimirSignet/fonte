{"sha": "aff3ccddf949304c0609a4e9128e0a40e692072b", "log": "Copying from Collections to Lang  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/compare/AbstractTestNullComparator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+import junit.framework.Test;\n+import junit.framework.TestSuite;\n+\n+/**\n+ * Test the NullComparator.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Michael A. Smith\n+ */\n+public abstract class AbstractTestNullComparator extends AbstractTestComparator<Integer> {\n+\n+    public AbstractTestNullComparator(String testName) {\n+        super(testName);\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(AbstractTestNullComparator.class.getName());\n+        suite.addTest(new TestSuite(TestNullComparator1.class));\n+        suite.addTest(new TestSuite(TestNullComparator2.class));\n+        return suite;\n+    }\n+\n+    /**\n+     *  Test the NullComparator with nulls high, using comparable comparator\n+     **/\n+    public static class TestNullComparator1 extends AbstractTestNullComparator {\n+\n+        public TestNullComparator1(String testName) {\n+            super(testName);\n+        }\n+\n+        @Override\n+        public Comparator<Integer> makeObject() {\n+            return new NullComparator<Integer>();\n+        }\n+\n+        @Override\n+        public List<Integer> getComparableObjectsOrdered() {\n+            List<Integer> list = new LinkedList<Integer>();\n+            list.add(new Integer(1));\n+            list.add(new Integer(2));\n+            list.add(new Integer(3));\n+            list.add(new Integer(4));\n+            list.add(new Integer(5));\n+            list.add(null);\n+            return list;\n+        }\n+\n+        @Override\n+        public String getCanonicalComparatorName(Object object) {\n+            return super.getCanonicalComparatorName(object) + \"1\";\n+        }\n+    }\n+\n+    /**\n+     *  Test the NullComparator with nulls low using the comparable comparator\n+     **/\n+    public static class TestNullComparator2 extends AbstractTestNullComparator {\n+\n+        public TestNullComparator2(String testName) {\n+            super(testName);\n+        }\n+\n+        @Override\n+        public Comparator<Integer> makeObject() {\n+            return new NullComparator<Integer>(false);\n+        }\n+\n+        @Override\n+        public List<Integer> getComparableObjectsOrdered() {\n+            List<Integer> list = new LinkedList<Integer>();\n+            list.add(null);\n+            list.add(new Integer(1));\n+            list.add(new Integer(2));\n+            list.add(new Integer(3));\n+            list.add(new Integer(4));\n+            list.add(new Integer(5));\n+            return list;\n+        }\n+\n+        @Override\n+        public String getCanonicalComparatorName(Object object) {\n+            return super.getCanonicalComparatorName(object) + \"2\";\n+        }\n+    }\n+}", "timestamp": 1312780791, "metainfo": ""}