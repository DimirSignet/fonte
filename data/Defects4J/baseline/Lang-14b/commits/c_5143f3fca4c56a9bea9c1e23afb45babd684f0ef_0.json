{"sha": "5143f3fca4c56a9bea9c1e23afb45babd684f0ef", "log": "Added getFullStackTrace and isNestedThrowable. Listed as Bug #16689   ", "commit": "\n--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java\n  * @author Dmitri Plotnikov\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: ExceptionUtils.java,v 1.20 2003/01/20 23:04:19 dlr Exp $\n+ * @version $Id: ExceptionUtils.java,v 1.21 2003/03/18 05:10:48 bayard Exp $\n  */\n public class ExceptionUtils {\n     /**\n     }\n \n     /**\n+     * A way to get the entire nested stack-trace of an throwable.\n+     *\n+     * @param t The <code>Throwable</code>.\n+     * @return The nested stack trace, with the root cause first.\n+     */\n+    public static String getFullStackTrace(Throwable t) {\n+        StringWriter sw = new StringWriter();\n+        PrintWriter pw = new PrintWriter(sw, true);\n+        Throwable[] ts = getThrowables(t);\n+        for(int i=0; i<ts.length; i++) {\n+            ts[i].printStackTrace(pw);\n+            if(isNestedThrowable(ts[i])) {\n+                break;\n+            }\n+        }\n+        return sw.getBuffer().toString();\n+    }\n+\n+    /**\n+     * Whether an Throwable is considered nested or not.\n+     *\n+     * @param t The <code>Throwable</code>.\n+     * @return boolean true/false\n+     */\n+    public static boolean isNestedThrowable(Throwable throwable) {\n+        if(throwable == null) {\n+            return false;\n+        }\n+\n+        if (throwable instanceof Nestable) {\n+            return true;\n+        } else if (throwable instanceof SQLException) {\n+            return true;\n+        } else if (throwable instanceof InvocationTargetException) {\n+            return true;\n+        }\n+\n+        int sz = CAUSE_METHOD_NAMES.length;\n+        for(int i=0; i<sz; i++) {\n+            try {\n+                Method method = throwable.getClass().getMethod(CAUSE_METHOD_NAMES[i], null);\n+                if(method != null) {\n+                    return true;\n+                }\n+            } catch (NoSuchMethodException ignored) {\n+            } catch (SecurityException ignored) {\n+            }\n+        }\n+\n+        try {\n+            Field field = throwable.getClass().getField(\"detail\");\n+            if(field != null) {\n+                return true;\n+            }\n+        } catch (NoSuchFieldException ignored) {\n+        } catch (SecurityException ignored) {\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n      * Captures the stack trace associated with the specified\n      * <code>Throwable</code> object, decomposing it into a list of\n      * stack frames.", "timestamp": 1047964248, "metainfo": ""}