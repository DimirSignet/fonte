{"sha": "8185a9e681d6de5f40b0ed07b40730c9761bad37", "log": "[LANG-775] [LANG-776] fix related bugs dealing with type variable inheritance  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n                 toClass, typeVarAssigns);\n \n         // now to check each type argument\n-        for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) {\n-            Type toTypeArg = entry.getValue();\n-            Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey());\n+        for (TypeVariable<?> var : toTypeVarAssigns.keySet()) {\n+            Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);\n+            Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);\n \n             // parameters must either be absent from the subject type, within\n             // the bounds of the wildcard type, or be an exact match to the\n         }\n \n         return true;\n+    }\n+\n+    private static Type unrollVariableAssignments(TypeVariable<?> var, Map<TypeVariable<?>, Type> typeVarAssigns) {\n+        Type result;\n+        do {\n+            result = typeVarAssigns.get(var);\n+            if (result instanceof TypeVariable<?> && !result.equals(var)) {\n+                var = (TypeVariable<?>) result;\n+                continue;\n+            }\n+            break;\n+        } while (true);\n+        return result;\n     }\n \n     /**\n         HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()\n                 : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);\n \n-        // no arguments for the parameters, or target class has been reached\n-        if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {\n+        // has target class been reached?\n+        if (toClass.equals(cls)) {\n             return typeVarAssigns;\n         }\n ", "timestamp": 1321574376, "metainfo": ""}