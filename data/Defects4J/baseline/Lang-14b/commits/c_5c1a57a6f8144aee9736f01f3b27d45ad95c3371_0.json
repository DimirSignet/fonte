{"sha": "5c1a57a6f8144aee9736f01f3b27d45ad95c3371", "log": "Use more efficient Integer cache: Use \"Integer.valueOf(int)\" instead of \"new Integer(int)\".  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java\n      * <p>Note, this method makes only sense to provide arguments of the same type so that the\n      * compiler can deduce the type of the array itself. While it is possible to select the\n      * type explicitly like in\n-     * <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(new Integer(42), new Double(Math.PI))</code>,\n+     * <code>Number[] array = ArrayUtils.&lt;Number&gt;toArray(Integer.valueOf(42), new Double(Math.PI))</code>,\n      * there is no real advantage when compared to\n-     * <code>new Number[] {new Integer(42), new Double(Math.PI)}</code>.</p>\n+     * <code>new Number[] {Integer.valueOf(42), new Double(Math.PI)}</code>.</p>\n      *\n      * @param  <T>   the array's element type\n      * @param  items  the varargs array items, null allowed\n--- a/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/BooleanUtils.java\n      * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n      *\n      * <pre>\n-     *   BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE\n-     *   BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE\n-     *   BooleanUtils.toBoolean(new Integer(null)) = null\n+     *   BooleanUtils.toBoolean(Integer.valueOf(0))    = Boolean.FALSE\n+     *   BooleanUtils.toBoolean(Integer.valueOf(1))    = Boolean.TRUE\n+     *   BooleanUtils.toBoolean(Integer.valueOf(null)) = null\n      * </pre>\n      *\n      * @param value  the Integer to convert\n      * <p>Converts an Integer to a boolean specifying the conversion values.</p>\n      *\n      * <pre>\n-     *   BooleanUtils.toBoolean(new Integer(0), new Integer(1), new Integer(0)) = false\n-     *   BooleanUtils.toBoolean(new Integer(1), new Integer(1), new Integer(0)) = true\n-     *   BooleanUtils.toBoolean(new Integer(2), new Integer(1), new Integer(2)) = false\n-     *   BooleanUtils.toBoolean(new Integer(2), new Integer(2), new Integer(0)) = true\n-     *   BooleanUtils.toBoolean(null, null, new Integer(0))                     = true\n+     *   BooleanUtils.toBoolean(Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(0)) = false\n+     *   BooleanUtils.toBoolean(Integer.valueOf(1), Integer.valueOf(1), Integer.valueOf(0)) = true\n+     *   BooleanUtils.toBoolean(Integer.valueOf(2), Integer.valueOf(1), Integer.valueOf(2)) = false\n+     *   BooleanUtils.toBoolean(Integer.valueOf(2), Integer.valueOf(2), Integer.valueOf(0)) = true\n+     *   BooleanUtils.toBoolean(null, null, Integer.valueOf(0))                     = true\n      * </pre>\n      *\n      * @param value  the Integer to convert\n      * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n      *\n      * <pre>\n-     *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE\n-     *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE\n-     *   BooleanUtils.toBooleanObject(new Integer(3), new Integer(1), new Integer(2), new Integer(3)) = null\n+     *   BooleanUtils.toBooleanObject(Integer.valueOf(0), Integer.valueOf(0), Integer.valueOf(2), Integer.valueOf(3)) = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(Integer.valueOf(2), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)) = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(Integer.valueOf(3), Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3)) = null\n      * </pre>\n      *\n      * @param value  the Integer to convert\n      * {@code zero} is {@code false}.</p>\n      *\n      * <pre>\n-     *   BooleanUtils.toIntegerObject(true)  = new Integer(1)\n-     *   BooleanUtils.toIntegerObject(false) = new Integer(0)\n+     *   BooleanUtils.toIntegerObject(true)  = Integer.valueOf(1)\n+     *   BooleanUtils.toIntegerObject(false) = Integer.valueOf(0)\n      * </pre>\n      *\n      * @param bool  the boolean to convert\n      * <p>{@code null} will be converted to {@code null}.</p>\n      *\n      * <pre>\n-     *   BooleanUtils.toIntegerObject(Boolean.TRUE)  = new Integer(1)\n-     *   BooleanUtils.toIntegerObject(Boolean.FALSE) = new Integer(0)\n+     *   BooleanUtils.toIntegerObject(Boolean.TRUE)  = Integer.valueOf(1)\n+     *   BooleanUtils.toIntegerObject(Boolean.FALSE) = Integer.valueOf(0)\n      * </pre>\n      *\n      * @param bool  the Boolean to convert\n      * <p>Converts a boolean to an Integer specifying the conversion values.</p>\n      *\n      * <pre>\n-     *   BooleanUtils.toIntegerObject(true, new Integer(1), new Integer(0))  = new Integer(1)\n-     *   BooleanUtils.toIntegerObject(false, new Integer(1), new Integer(0)) = new Integer(0)\n+     *   BooleanUtils.toIntegerObject(true, Integer.valueOf(1), Integer.valueOf(0))  = Integer.valueOf(1)\n+     *   BooleanUtils.toIntegerObject(false, Integer.valueOf(1), Integer.valueOf(0)) = Integer.valueOf(0)\n      * </pre>\n      *\n      * @param bool  the to convert\n      * <p>Converts a Boolean to an Integer specifying the conversion values.</p>\n      *\n      * <pre>\n-     *   BooleanUtils.toIntegerObject(Boolean.TRUE, new Integer(1), new Integer(0), new Integer(2))  = new Integer(1)\n-     *   BooleanUtils.toIntegerObject(Boolean.FALSE, new Integer(1), new Integer(0), new Integer(2)) = new Integer(0)\n-     *   BooleanUtils.toIntegerObject(null, new Integer(1), new Integer(0), new Integer(2))          = new Integer(2)\n+     *   BooleanUtils.toIntegerObject(Boolean.TRUE, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2))  = Integer.valueOf(1)\n+     *   BooleanUtils.toIntegerObject(Boolean.FALSE, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2)) = Integer.valueOf(0)\n+     *   BooleanUtils.toIntegerObject(null, Integer.valueOf(1), Integer.valueOf(0), Integer.valueOf(2))          = Integer.valueOf(2)\n      * </pre>\n      *\n      * @param bool  the Boolean to convert\n--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java\n     /** Reusable Long constant for minus one. */\n     public static final Long LONG_MINUS_ONE = new Long(-1L);\n     /** Reusable Integer constant for zero. */\n-    public static final Integer INTEGER_ZERO = new Integer(0);\n+    public static final Integer INTEGER_ZERO = Integer.valueOf(0);\n     /** Reusable Integer constant for one. */\n-    public static final Integer INTEGER_ONE = new Integer(1);\n+    public static final Integer INTEGER_ONE = Integer.valueOf(1);\n     /** Reusable Integer constant for minus one. */\n-    public static final Integer INTEGER_MINUS_ONE = new Integer(-1);\n+    public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);\n     /** Reusable Short constant for zero. */\n     public static final Short SHORT_ZERO = new Short((short) 0);\n     /** Reusable Short constant for one. */\n     // Integer.getInteger(String)\n     // Integer.getInteger(String,int val)\n     // Integer.getInteger(String,Integer val)\n-    // new Integer(String)\n+    // Integer.valueOf(String)\n     // new Double(String)\n     // new Byte(String)\n     // new Long(String)\n--- a/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java\n+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java\n      * @return the value as a Integer, never null\n      */\n     public Integer getValue() {\n-        return new Integer(this.value);\n+        return Integer.valueOf(this.value);\n     }\n \n     /**\n--- a/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrBuilder.java\n //            size = -1;\n //            nullText = null;\n //            return (String) con.newInstance(\n-//                new Object[] {new Integer(0), new Integer(size), buffer});\n+//                new Object[] {Integer.valueOf(0), Integer.valueOf(size), buffer});\n //            \n //        } catch (Exception ex) {\n //            ex.printStackTrace();\n--- a/src/main/java/org/apache/commons/lang3/text/StrLookup.java\n+++ b/src/main/java/org/apache/commons/lang3/text/StrLookup.java\n      * the underlying data, by converting it as necessary. For example:\n      * <pre>\n      * Map<String, Object> map = new HashMap<String, Object>();\n-     * map.put(\"number\", new Integer(2));\n+     * map.put(\"number\", Integer.valueOf(2));\n      * assertEquals(\"2\", StrLookup.mapLookup(map).lookup(\"number\"));\n      * </pre>\n      * @param key  the key to be looked up, may be null\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsAddTest.java\n         assertTrue(Arrays.equals((new String[]{\"a\", \"b\", \"c\", \"d\"}), newArray));\n         assertEquals(String.class, newArray.getClass().getComponentType());\n \n-        Number[] numberArray1 = new Number[]{new Integer(1), new Double(2)};\n+        Number[] numberArray1 = new Number[]{Integer.valueOf(1), new Double(2)};\n         newArray = ArrayUtils.add(numberArray1, new Float(3));\n-        assertTrue(Arrays.equals((new Number[]{new Integer(1), new Double(2), new Float(3)}), newArray));\n+        assertTrue(Arrays.equals((new Number[]{Integer.valueOf(1), new Double(2), new Float(3)}), newArray));\n         assertEquals(Number.class, newArray.getClass().getComponentType());\n \n         numberArray1 = null;\n--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java\n          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0]));\n          assertTrue(Arrays.equals(\n              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n-                 new Integer(Integer.MAX_VALUE), new Integer(9999999)}))\n+             ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), \n+                 Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)}))\n          );\n \n          try {\n-             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), null});\n+             ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), null});\n              fail();\n          } catch (NullPointerException ex) {}\n      }\n          ArrayUtils.toPrimitive(new Integer[0], 1));\n          assertTrue(Arrays.equals(\n              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n-                 new Integer(Integer.MAX_VALUE), new Integer(9999999)},1)));\n+             ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), \n+                 Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)},1)));\n          assertTrue(Arrays.equals(\n              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999},\n-             ArrayUtils.toPrimitive(new Integer[] {new Integer(Integer.MIN_VALUE), \n-                 null, new Integer(9999999)}, Integer.MAX_VALUE))\n+             ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), \n+                 null, Integer.valueOf(9999999)}, Integer.MAX_VALUE))\n          );\n      }\n      \n         assertTrue(\n             Arrays.equals(\n                 new Integer[] {\n-                    new Integer(Integer.MIN_VALUE),\n-                    new Integer(Integer.MAX_VALUE),\n-                    new Integer(9999999)},\n+                    Integer.valueOf(Integer.MIN_VALUE),\n+                    Integer.valueOf(Integer.MAX_VALUE),\n+                    Integer.valueOf(9999999)},\n             ArrayUtils.toObject(\n                 new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 })));\n     }\n--- a/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/BooleanUtilsTest.java\n     \n     @Test\n     public void test_toBooleanObject_Integer() {\n-        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(1)));\n-        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(-1)));\n-        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(0)));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1)));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1)));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0)));\n         assertEquals(null, BooleanUtils.toBooleanObject((Integer) null));\n     }\n     \n     \n     @Test\n     public void test_toBoolean_Integer_Integer_Integer() {\n-        Integer six = new Integer(6);\n-        Integer seven = new Integer(7);\n+        Integer six = Integer.valueOf(6);\n+        Integer seven = Integer.valueOf(7);\n \n         assertEquals(true, BooleanUtils.toBoolean((Integer) null, null, seven));\n         assertEquals(false, BooleanUtils.toBoolean((Integer) null, six, null));\n \n-        assertEquals(true, BooleanUtils.toBoolean(new Integer(6), six, seven));\n-        assertEquals(false, BooleanUtils.toBoolean(new Integer(7), six, seven));\n+        assertEquals(true, BooleanUtils.toBoolean(Integer.valueOf(6), six, seven));\n+        assertEquals(false, BooleanUtils.toBoolean(Integer.valueOf(7), six, seven));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n \n     @Test(expected = IllegalArgumentException.class)\n     public void test_toBoolean_Integer_Integer_Integer_noMatch() {\n-        BooleanUtils.toBoolean(new Integer(8), Integer.valueOf(6), Integer.valueOf(7));\n+        BooleanUtils.toBoolean(Integer.valueOf(8), Integer.valueOf(6), Integer.valueOf(7));\n     }\n     \n     //-----------------------------------------------------------------------\n     \n     @Test\n     public void test_toBooleanObject_Integer_Integer_Integer_Integer() {\n-        Integer six = new Integer(6);\n-        Integer seven = new Integer(7);\n-        Integer eight = new Integer(8);\n+        Integer six = Integer.valueOf(6);\n+        Integer seven = Integer.valueOf(7);\n+        Integer eight = Integer.valueOf(8);\n \n         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight));\n         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight));\n         assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null));\n \n-        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(new Integer(6), six, seven, eight));\n-        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(new Integer(7), six, seven, eight));\n-        assertEquals(null, BooleanUtils.toBooleanObject(new Integer(8), six, seven, eight));\n+        assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight));\n+        assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight));\n+        assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight));\n     }\n \n     @Test(expected = IllegalArgumentException.class)\n     \n     @Test\n     public void test_toIntegerObject_boolean() {\n-        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(true));\n-        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(false));\n+        assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(true));\n+        assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(false));\n     }\n     \n     @Test\n     public void test_toIntegerObject_Boolean() {\n-        assertEquals(new Integer(1), BooleanUtils.toIntegerObject(Boolean.TRUE));\n-        assertEquals(new Integer(0), BooleanUtils.toIntegerObject(Boolean.FALSE));\n+        assertEquals(Integer.valueOf(1), BooleanUtils.toIntegerObject(Boolean.TRUE));\n+        assertEquals(Integer.valueOf(0), BooleanUtils.toIntegerObject(Boolean.FALSE));\n         assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null));\n     }\n     \n     \n     @Test\n     public void test_toIntegerObject_boolean_Integer_Integer() {\n-        Integer six = new Integer(6);\n-        Integer seven = new Integer(7);\n+        Integer six = Integer.valueOf(6);\n+        Integer seven = Integer.valueOf(7);\n         assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven));\n         assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven));\n     }\n     \n     @Test\n     public void test_toIntegerObject_Boolean_Integer_Integer_Integer() {\n-        Integer six = new Integer(6);\n-        Integer seven = new Integer(7);\n-        Integer eight = new Integer(8);\n+        Integer six = Integer.valueOf(6);\n+        Integer seven = Integer.valueOf(7);\n+        Integer eight = Integer.valueOf(8);\n         assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight));\n         assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight));\n         assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight));\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n         assertEquals(\n             \"java.lang.String@\" + Integer.toHexString(System.identityHashCode(FOO)),\n             ObjectUtils.identityToString(FOO));\n-        Integer i = new Integer(90);\n+        Integer i = Integer.valueOf(90);\n         String expected = \"java.lang.Integer@\" + Integer.toHexString(System.identityHashCode(i));\n         assertEquals(expected, ObjectUtils.identityToString(i));\n         StringBuffer buffer = new StringBuffer();\n--- a/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/SerializationUtilsTest.java\n         super.setUp();\n \n         iString = \"foo\";\n-        iInteger = new Integer(7);\n+        iInteger = Integer.valueOf(7);\n         iMap = new HashMap<Object, Object>();\n         iMap.put(\"FOO\", iString);\n         iMap.put(\"BAR\", iInteger);\n--- a/src/test/java/org/apache/commons/lang3/ValidateTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ValidateTest.java\n \n     //-----------------------------------------------------------------------\n     public void testIsTrue3() {\n-        Validate.isTrue(true, \"MSG\", new Integer(6));\n-        try {\n-            Validate.isTrue(false, \"MSG\", new Integer(6));\n+        Validate.isTrue(true, \"MSG\", Integer.valueOf(6));\n+        try {\n+            Validate.isTrue(false, \"MSG\", Integer.valueOf(6));\n             fail(\"Expecting IllegalArgumentException\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated collection is empty\", ex.getMessage());\n         }\n-        coll.add(new Integer(8));\n+        coll.add(Integer.valueOf(8));\n         Validate.notEmpty(coll);\n         \n         Collection<Integer> test = Validate.notEmpty(coll);\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n-        coll.add(new Integer(8));\n+        coll.add(Integer.valueOf(8));\n         Validate.notEmpty(coll, \"MSG\");\n         \n         Collection<Integer> test = Validate.notEmpty(coll, \"Message\");\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"The validated map is empty\", ex.getMessage());\n         }\n-        map.put(\"ll\", new Integer(8));\n+        map.put(\"ll\", Integer.valueOf(8));\n         Validate.notEmpty(map);\n         \n         Map<String, Integer> test = Validate.notEmpty(map);\n         } catch (IllegalArgumentException ex) {\n             assertEquals(\"MSG\", ex.getMessage());\n         }\n-        map.put(\"ll\", new Integer(8));\n+        map.put(\"ll\", Integer.valueOf(8));\n         Validate.notEmpty(map, \"MSG\");\n         \n         Map<String, Integer> test = Validate.notEmpty(map, \"Message\");\n--- a/src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/DefaultToStringStyleTest.java\n  */\n public class DefaultToStringStyleTest extends TestCase {\n \n-    private final Integer base = new Integer(5);\n+    private final Integer base = Integer.valueOf(5);\n     private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n     \n     public DefaultToStringStyleTest(String name) {\n     }\n     \n     public void testObject() {\n-        Integer i3 = new Integer(3);\n-        Integer i4 = new Integer(4);\n+        Integer i3 = Integer.valueOf(3);\n+        Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n         assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n--- a/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/EqualsBuilderTest.java\n      * Test from http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n      */\n     public void testNpeForNullElement() {\n-        Object[] x1 = new Object[] { new Integer(1), null, new Integer(3) };\n-        Object[] x2 = new Object[] { new Integer(1), new Integer(2), new Integer(3) };\n+        Object[] x1 = new Object[] { Integer.valueOf(1), null, Integer.valueOf(3) };\n+        Object[] x2 = new Object[] { Integer.valueOf(1), Integer.valueOf(2), Integer.valueOf(3) };\n \n         // causes an NPE in 2.0 according to:\n         // http://issues.apache.org/bugzilla/show_bug.cgi?id=33067\n--- a/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/HashCodeBuilderAndEqualsBuilderTest.java\n     //-----------------------------------------------------------------------\n \n     public void testInteger(boolean testTransients) {\n-        Integer i1 = new Integer(12345);\n-        Integer i2 = new Integer(12345);\n+        Integer i1 = Integer.valueOf(12345);\n+        Integer i2 = Integer.valueOf(12345);\n         assertEqualsAndHashCodeContract(i1, i2, testTransients);\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/MultiLineToStringStyleTest.java\n  */\n public class MultiLineToStringStyleTest extends TestCase {\n \n-    private final Integer base = new Integer(5);\n+    private final Integer base = Integer.valueOf(5);\n     private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n     \n     public MultiLineToStringStyleTest(String name) {\n     }\n     \n     public void testObject() {\n-        Integer i3 = new Integer(3);\n-        Integer i4 = new Integer(4);\n+        Integer i3 = Integer.valueOf(3);\n+        Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  <null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append((Object) null).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  3\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(i3).toString());\n         assertEquals(baseStr + \"[\" + SystemUtils.LINE_SEPARATOR + \"  a=<null>\" + SystemUtils.LINE_SEPARATOR + \"]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n--- a/src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/NoFieldNamesToStringStyleTest.java\n  */\n public class NoFieldNamesToStringStyleTest extends TestCase {\n \n-    private final Integer base = new Integer(5);\n+    private final Integer base = Integer.valueOf(5);\n     private final String baseStr = base.getClass().getName() + \"@\" + Integer.toHexString(System.identityHashCode(base));\n     \n     public NoFieldNamesToStringStyleTest(String name) {\n     }\n     \n     public void testObject() {\n-        Integer i3 = new Integer(3);\n-        Integer i4 = new Integer(4);\n+        Integer i3 = Integer.valueOf(3);\n+        Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n--- a/src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ShortPrefixToStringStyleTest.java\n  */\n public class ShortPrefixToStringStyleTest extends TestCase {\n \n-    private final Integer base = new Integer(5);\n+    private final Integer base = Integer.valueOf(5);\n     private final String baseStr = \"Integer\";\n     \n     @Override\n     }\n     \n     public void testObject() {\n-        Integer i3 = new Integer(3);\n-        Integer i4 = new Integer(4);\n+        Integer i3 = Integer.valueOf(3);\n+        Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n         assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n--- a/src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/SimpleToStringStyleTest.java\n  */\n public class SimpleToStringStyleTest extends TestCase {\n \n-    private final Integer base = new Integer(5);\n+    private final Integer base = Integer.valueOf(5);\n     \n     public SimpleToStringStyleTest(String name) {\n         super(name);\n     }\n     \n     public void testObject() {\n-        Integer i3 = new Integer(3);\n-        Integer i4 = new Integer(4);\n+        Integer i3 = Integer.valueOf(3);\n+        Integer i4 = Integer.valueOf(4);\n         assertEquals(\"<null>\", new ToStringBuilder(base).append((Object) null).toString());\n         assertEquals(\"3\", new ToStringBuilder(base).append(i3).toString());\n         assertEquals(\"<null>\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n--- a/src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/StandardToStringStyleTest.java\n  */\n public class StandardToStringStyleTest extends TestCase {\n \n-    private final Integer base = new Integer(5);\n+    private final Integer base = Integer.valueOf(5);\n     private final String baseStr = \"Integer\";\n     \n     private static final StandardToStringStyle STYLE = new StandardToStringStyle();\n     }\n     \n     public void testObject() {\n-        Integer i3 = new Integer(3);\n-        Integer i4 = new Integer(4);\n+        Integer i3 = Integer.valueOf(3);\n+        Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[%NULL%]\", new ToStringBuilder(base).append((Object) null).toString());\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n         assertEquals(baseStr + \"[a=%NULL%]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n--- a/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java\n     }\n \n     public void testObject() {\n-        Integer i3 = new Integer(3);\n-        Integer i4 = new Integer(4);\n+        Integer i3 = Integer.valueOf(3);\n+        Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).toString());\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).toString());\n         assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).toString());\n     }\n     \n     public void testObjectBuild() {\n-        Integer i3 = new Integer(3);\n-        Integer i4 = new Integer(4);\n+        Integer i3 = Integer.valueOf(3);\n+        Integer i4 = Integer.valueOf(4);\n         assertEquals(baseStr + \"[<null>]\", new ToStringBuilder(base).append((Object) null).build());\n         assertEquals(baseStr + \"[3]\", new ToStringBuilder(base).append(i3).build());\n         assertEquals(baseStr + \"[a=<null>]\", new ToStringBuilder(base).append(\"a\", (Object) null).build());\n      * Tests ReflectionToStringBuilder setUpToClass().\n      */\n     public void test_setUpToClass_valid() {\n-        Integer val = new Integer(5);\n+        Integer val = Integer.valueOf(5);\n         ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n         test.setUpToClass(Number.class);\n     }\n      * Tests ReflectionToStringBuilder setUpToClass().\n      */\n     public void test_setUpToClass_invalid() {\n-        Integer val = new Integer(5);\n+        Integer val = Integer.valueOf(5);\n         ReflectionToStringBuilder test = new ReflectionToStringBuilder(val);\n         try {\n             test.setUpToClass(String.class);\n      * See issue LANG-372.\n      */\n     class MultiLineTestObject {\n-        Integer i = new Integer(31337);\n+        Integer i = Integer.valueOf(31337);\n         @Override\n         public String toString() {\n             return new ToStringBuilder(this).append(\"testInt\", i).toString();\n--- a/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/ConcurrentUtilsTest.java\n      */\n     @Test\n     public void testConstantFuture_Integer() throws Exception {\n-        Integer value = new Integer(5);\n+        Integer value = Integer.valueOf(5);\n         Future<Integer> test = ConcurrentUtils.constantFuture(value);\n         assertTrue(test.isDone());\n         assertSame(value, test.get());\n--- a/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java\n     public void testEqualsTrue() {\n         checkEquals(init, true);\n         ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>(\n-                new Integer(VALUE.intValue()));\n+                Integer.valueOf(VALUE.intValue()));\n         checkEquals(init2, true);\n         init = new ConstantInitializer<Integer>(null);\n         init2 = new ConstantInitializer<Integer>(null);\n--- a/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/AbstractExceptionContextTest.java\n             .addContextValue(\"test1\", null)\n             .addContextValue(\"test2\", \"some value\")\n             .addContextValue(\"test Date\", new Date())\n-            .addContextValue(\"test Nbr\", new Integer(5))\n+            .addContextValue(\"test Nbr\", Integer.valueOf(5))\n             .addContextValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ContextedExceptionTest.java\n         .addContextValue(\"test1\", null)\n         .addContextValue(\"test2\", \"some value\")\n         .addContextValue(\"test Date\", new Date())\n-        .addContextValue(\"test Nbr\", new Integer(5))\n+        .addContextValue(\"test Nbr\", Integer.valueOf(5))\n         .addContextValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n         \n         String message = exceptionContext.getMessage();\n--- a/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/exception/ContextedRuntimeExceptionTest.java\n         .addContextValue(\"test1\", null)\n         .addContextValue(\"test2\", \"some value\")\n         .addContextValue(\"test Date\", new Date())\n-        .addContextValue(\"test Nbr\", new Integer(5))\n+        .addContextValue(\"test Nbr\", Integer.valueOf(5))\n         .addContextValue(\"test Poorly written obj\", new ObjectWithFaultyToString());\n         \n         String message = exceptionContext.getMessage();\n--- a/src/test/java/org/apache/commons/lang3/math/FractionTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/FractionTest.java\n         f1 = Fraction.getFraction(3, 5);\n         assertEquals(false, f1.equals(null));\n         assertEquals(false, f1.equals(new Object()));\n-        assertEquals(false, f1.equals(new Integer(6)));\n+        assertEquals(false, f1.equals(Integer.valueOf(6)));\n         \n         f1 = Fraction.getFraction(3, 5);\n         f2 = Fraction.getFraction(2, 5);\n--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java\n     public void testCreateNumber() {\n         // a lot of things can go wrong\n         assertEquals(\"createNumber(String) 1 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));\n-        assertEquals(\"createNumber(String) 2 failed\", new Integer(\"12345\"), NumberUtils.createNumber(\"12345\"));\n+        assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));\n         assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));\n         assertEquals(\"createNumber(String) 3 failed\", new Double(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));\n         assertEquals(\"createNumber(String) 4 failed\", new Float(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));\n         assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345L\"));\n         assertEquals(\"createNumber(String) 6 failed\", new Long(12345), NumberUtils.createNumber(\"12345l\"));\n         assertEquals(\"createNumber(String) 7 failed\", new Float(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));\n-        assertEquals(\"createNumber(String) 8 failed\", new Integer(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n+        assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));\n         assertTrue(\"createNumber(String) 9 failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());\n         assertTrue(\"createNumber(String) 10 failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());\n         assertEquals(\"createNumber(String) 11 failed\", new Double(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));\n \n     @Test\n     public void testCreateInteger() {\n-        assertEquals(\"createInteger(String) failed\", new Integer(\"12345\"), NumberUtils.createInteger(\"12345\"));\n+        assertEquals(\"createInteger(String) failed\", Integer.valueOf(\"12345\"), NumberUtils.createInteger(\"12345\"));\n         assertEquals(\"createInteger(null) failed\", null, NumberUtils.createInteger(null));\n         this.testCreateIntegerFailure(\"\");\n         this.testCreateIntegerFailure(\" \");\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableByteTest.java\n \n     public void testAddValueObject() {\n         MutableByte mutNum = new MutableByte((byte) 1);\n-        mutNum.add(new Integer(1));\n+        mutNum.add(Integer.valueOf(1));\n         \n         assertEquals((byte) 2, mutNum.byteValue());\n     }\n \n     public void testSubtractValueObject() {\n         MutableByte mutNum = new MutableByte((byte) 1);\n-        mutNum.subtract(new Integer(1));\n+        mutNum.subtract(Integer.valueOf(1));\n         \n         assertEquals((byte) 0, mutNum.byteValue());\n     }\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableIntTest.java\n         \n         assertEquals(1, new MutableInt(1).intValue());\n         \n-        assertEquals(2, new MutableInt(new Integer(2)).intValue());\n+        assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue());\n         assertEquals(3, new MutableInt(new MutableLong(3)).intValue());\n \n         assertEquals(2, new MutableInt(\"2\").intValue());\n     public void testGetSet() {\n         final MutableInt mutNum = new MutableInt(0);\n         assertEquals(0, new MutableInt().intValue());\n-        assertEquals(new Integer(0), new MutableInt().getValue());\n+        assertEquals(Integer.valueOf(0), new MutableInt().getValue());\n         \n         mutNum.setValue(1);\n         assertEquals(1, mutNum.intValue());\n-        assertEquals(new Integer(1), mutNum.getValue());\n+        assertEquals(Integer.valueOf(1), mutNum.getValue());\n         \n-        mutNum.setValue(new Integer(2));\n+        mutNum.setValue(Integer.valueOf(2));\n         assertEquals(2, mutNum.intValue());\n-        assertEquals(new Integer(2), mutNum.getValue());\n+        assertEquals(Integer.valueOf(2), mutNum.getValue());\n         \n         mutNum.setValue(new MutableLong(3));\n         assertEquals(3, mutNum.intValue());\n-        assertEquals(new Integer(3), mutNum.getValue());\n+        assertEquals(Integer.valueOf(3), mutNum.getValue());\n         try {\n             mutNum.setValue(null);\n             fail();\n     public void testEquals() {\n         this.testEquals(new MutableInt(0), new MutableInt(0), new MutableInt(1));\n         // Should Numbers be supported? GaryG July-21-2005.\n-        //this.testEquals(mutNumA, new Integer(0), mutNumC);\n+        //this.testEquals(mutNumA, Integer.valueOf(0), mutNumC);\n     }\n \n     /**\n         assertEquals(false, numB.equals(numC));\n         assertEquals(true, numC.equals(numC));\n         assertEquals(false, numA.equals(null));\n-        assertEquals(false, numA.equals(new Integer(0)));\n+        assertEquals(false, numA.equals(Integer.valueOf(0)));\n         assertEquals(false, numA.equals(\"0\"));\n     }\n \n         assertEquals(true, mutNumA.hashCode() == mutNumA.hashCode());\n         assertEquals(true, mutNumA.hashCode() == mutNumB.hashCode());\n         assertEquals(false, mutNumA.hashCode() == mutNumC.hashCode());\n-        assertEquals(true, mutNumA.hashCode() == new Integer(0).hashCode());\n+        assertEquals(true, mutNumA.hashCode() == Integer.valueOf(0).hashCode());\n     }\n \n     public void testCompareTo() {\n     }\n \n     public void testToInteger() {\n-        assertEquals(new Integer(0), new MutableInt(0).toInteger());\n-        assertEquals(new Integer(123), new MutableInt(123).toInteger());\n+        assertEquals(Integer.valueOf(0), new MutableInt(0).toInteger());\n+        assertEquals(Integer.valueOf(123), new MutableInt(123).toInteger());\n     }\n \n     public void testIncrement() {\n \n     public void testAddValueObject() {\n         MutableInt mutNum = new MutableInt(1);\n-        mutNum.add(new Integer(1));\n+        mutNum.add(Integer.valueOf(1));\n         \n         assertEquals(2, mutNum.intValue());\n         assertEquals(2L, mutNum.longValue());\n \n     public void testSubtractValueObject() {\n         MutableInt mutNum = new MutableInt(1);\n-        mutNum.subtract(new Integer(1));\n+        mutNum.subtract(Integer.valueOf(1));\n         \n         assertEquals(0, mutNum.intValue());\n         assertEquals(0L, mutNum.longValue());\n--- a/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n+++ b/src/test/java/org/apache/commons/lang3/mutable/MutableObjectTest.java\n     public void testConstructors() {\n         assertEquals(null, new MutableObject<String>().getValue());\n         \n-        Integer i = new Integer(6);\n+        Integer i = Integer.valueOf(6);\n         assertSame(i, new MutableObject<Integer>(i).getValue());\n         assertSame(\"HI\", new MutableObject<String>(\"HI\").getValue());\n         assertSame(null, new MutableObject<Object>(null).getValue());\n--- a/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n \n     static final String S = \"s\";\n     static final String SS = \"ss\";\n-    static final Integer I0 = new Integer(0);\n-    static final Integer I1 = new Integer(1);\n+    static final Integer I0 = Integer.valueOf(0);\n+    static final Integer I1 = Integer.valueOf(1);\n     static final Double D0 = new Double(0.0);\n     static final Double D1 = new Double(1.0);\n \n         }\n         field = parentClass.getDeclaredField(\"i\");\n         try {\n-            FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE));\n+            FieldUtils.writeField(field, publicChild, Integer.valueOf(Integer.MAX_VALUE));\n         } catch (IllegalAccessException e) {\n             // pass\n         }\n         FieldUtils.writeField(field, publicChild, Boolean.TRUE, true);\n         assertEquals(Boolean.TRUE, field.get(publicChild));\n         field = parentClass.getDeclaredField(\"i\");\n-        FieldUtils.writeField(field, publicChild, new Integer(Integer.MAX_VALUE), true);\n-        assertEquals(new Integer(Integer.MAX_VALUE), field.get(publicChild));\n+        FieldUtils.writeField(field, publicChild, Integer.valueOf(Integer.MAX_VALUE), true);\n+        assertEquals(Integer.valueOf(Integer.MAX_VALUE), field.get(publicChild));\n         field = parentClass.getDeclaredField(\"d\");\n         FieldUtils.writeField(field, publicChild, new Double(Double.MAX_VALUE), true);\n         assertEquals(new Double(Double.MAX_VALUE), field.get(publicChild));\n             // pass\n         }\n         try {\n-            FieldUtils.writeField(publicChild, \"i\", new Integer(1));\n+            FieldUtils.writeField(publicChild, \"i\", Integer.valueOf(1));\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n         assertEquals(\"S\", FieldUtils.readField(publiclyShadowedChild, \"s\"));\n         FieldUtils.writeField(publiclyShadowedChild, \"b\", Boolean.FALSE);\n         assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\"));\n-        FieldUtils.writeField(publiclyShadowedChild, \"i\", new Integer(0));\n-        assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, \"i\"));\n+        FieldUtils.writeField(publiclyShadowedChild, \"i\", Integer.valueOf(0));\n+        assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, \"i\"));\n         FieldUtils.writeField(publiclyShadowedChild, \"d\", new Double(0.0));\n         assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\"));\n \n             // pass\n         }\n         try {\n-            FieldUtils.writeField(privatelyShadowedChild, \"i\", new Integer(1));\n+            FieldUtils.writeField(privatelyShadowedChild, \"i\", Integer.valueOf(1));\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n         assertEquals(\"S\", FieldUtils.readField(publicChild, \"s\", true));\n         FieldUtils.writeField(publicChild, \"b\", Boolean.TRUE, true);\n         assertEquals(Boolean.TRUE, FieldUtils.readField(publicChild, \"b\", true));\n-        FieldUtils.writeField(publicChild, \"i\", new Integer(1), true);\n-        assertEquals(new Integer(1), FieldUtils.readField(publicChild, \"i\", true));\n+        FieldUtils.writeField(publicChild, \"i\", Integer.valueOf(1), true);\n+        assertEquals(Integer.valueOf(1), FieldUtils.readField(publicChild, \"i\", true));\n         FieldUtils.writeField(publicChild, \"d\", new Double(1.0), true);\n         assertEquals(new Double(1.0), FieldUtils.readField(publicChild, \"d\", true));\n \n         assertEquals(\"S\", FieldUtils.readField(publiclyShadowedChild, \"s\", true));\n         FieldUtils.writeField(publiclyShadowedChild, \"b\", Boolean.FALSE, true);\n         assertEquals(Boolean.FALSE, FieldUtils.readField(publiclyShadowedChild, \"b\", true));\n-        FieldUtils.writeField(publiclyShadowedChild, \"i\", new Integer(0), true);\n-        assertEquals(new Integer(0), FieldUtils.readField(publiclyShadowedChild, \"i\", true));\n+        FieldUtils.writeField(publiclyShadowedChild, \"i\", Integer.valueOf(0), true);\n+        assertEquals(Integer.valueOf(0), FieldUtils.readField(publiclyShadowedChild, \"i\", true));\n         FieldUtils.writeField(publiclyShadowedChild, \"d\", new Double(0.0), true);\n         assertEquals(new Double(0.0), FieldUtils.readField(publiclyShadowedChild, \"d\", true));\n \n         assertEquals(\"S\", FieldUtils.readField(privatelyShadowedChild, \"s\", true));\n         FieldUtils.writeField(privatelyShadowedChild, \"b\", Boolean.FALSE, true);\n         assertEquals(Boolean.FALSE, FieldUtils.readField(privatelyShadowedChild, \"b\", true));\n-        FieldUtils.writeField(privatelyShadowedChild, \"i\", new Integer(0), true);\n-        assertEquals(new Integer(0), FieldUtils.readField(privatelyShadowedChild, \"i\", true));\n+        FieldUtils.writeField(privatelyShadowedChild, \"i\", Integer.valueOf(0), true);\n+        assertEquals(Integer.valueOf(0), FieldUtils.readField(privatelyShadowedChild, \"i\", true));\n         FieldUtils.writeField(privatelyShadowedChild, \"d\", new Double(0.0), true);\n         assertEquals(new Double(0.0), FieldUtils.readField(privatelyShadowedChild, \"d\", true));\n     }\n             // pass\n         }\n         try {\n-            FieldUtils.writeDeclaredField(publicChild, \"i\", new Integer(1));\n+            FieldUtils.writeDeclaredField(publicChild, \"i\", Integer.valueOf(1));\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n         assertEquals(\"S\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\"));\n         FieldUtils.writeDeclaredField(publiclyShadowedChild, \"b\", Boolean.FALSE);\n         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\"));\n-        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", new Integer(0));\n-        assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\"));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", Integer.valueOf(0));\n+        assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\"));\n         FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", new Double(0.0));\n         assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\"));\n \n             // pass\n         }\n         try {\n-            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", new Integer(1));\n+            FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", Integer.valueOf(1));\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n             // pass\n         }\n         try {\n-            FieldUtils.writeDeclaredField(publicChild, \"i\", new Integer(1), true);\n+            FieldUtils.writeDeclaredField(publicChild, \"i\", Integer.valueOf(1), true);\n             fail(\"Expected IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n             // pass\n         assertEquals(\"S\", FieldUtils.readDeclaredField(publiclyShadowedChild, \"s\", true));\n         FieldUtils.writeDeclaredField(publiclyShadowedChild, \"b\", Boolean.FALSE, true);\n         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(publiclyShadowedChild, \"b\", true));\n-        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", new Integer(0), true);\n-        assertEquals(new Integer(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\", true));\n+        FieldUtils.writeDeclaredField(publiclyShadowedChild, \"i\", Integer.valueOf(0), true);\n+        assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"i\", true));\n         FieldUtils.writeDeclaredField(publiclyShadowedChild, \"d\", new Double(0.0), true);\n         assertEquals(new Double(0.0), FieldUtils.readDeclaredField(publiclyShadowedChild, \"d\", true));\n \n         assertEquals(\"S\", FieldUtils.readDeclaredField(privatelyShadowedChild, \"s\", true));\n         FieldUtils.writeDeclaredField(privatelyShadowedChild, \"b\", Boolean.FALSE, true);\n         assertEquals(Boolean.FALSE, FieldUtils.readDeclaredField(privatelyShadowedChild, \"b\", true));\n-        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", new Integer(0), true);\n-        assertEquals(new Integer(0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\", true));\n+        FieldUtils.writeDeclaredField(privatelyShadowedChild, \"i\", Integer.valueOf(0), true);\n+        assertEquals(Integer.valueOf(0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"i\", true));\n         FieldUtils.writeDeclaredField(privatelyShadowedChild, \"d\", new Double(0.0), true);\n         assertEquals(new Double(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n     }\n--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));\n         lo = in;\n         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));\n-        lo = new Integer(0);\n+        lo = Integer.valueOf(0);\n         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));\n         // Long lngW = 1;\n         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));\n-        // lngW = new Integer( 0 );\n+        // lngW = Integer.valueOf( 0 );\n         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));\n-        in = new Integer(0);\n+        in = Integer.valueOf(0);\n         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));\n         Integer inte = in;\n         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));\n         Type longComparableType = getClass().getField(\"longComparable\").getGenericType();\n         // longComparable = 1;\n         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));\n-        // longComparable = new Integer( 0 );\n+        // longComparable = Integer.valueOf( 0 );\n         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));\n         // int[] ia;\n         // long[] la = ia;\n--- a/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/ExtendedMessageFormatTest.java\n //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry);\n //        assertPatterns(null, pattern, emf.toPattern());\n //        try {\n-//            assertEquals(\"one\", emf.format(new Object[] {new Integer(1), \"ONE\"}));\n-//            assertEquals(\"TWO\", emf.format(new Object[] {new Integer(2), \"two\"}));\n+//            assertEquals(\"one\", emf.format(new Object[] {Integer.valueOf(1), \"ONE\"}));\n+//            assertEquals(\"TWO\", emf.format(new Object[] {Integer.valueOf(2), \"two\"}));\n //        } catch (IllegalArgumentException e) {\n //            // currently sub-formats not supported\n //        }\n //     */\n //    public void testExtendedAndBuiltInWithChoiceFormat() {\n //        String pattern = \"Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}\";\n-//        Object[] lowArgs  = new Object[] {new Integer(1), \"Low\",  new Double(\"1234.56\")};\n-//        Object[] highArgs = new Object[] {new Integer(2), \"High\", new Double(\"9876.54\")};\n+//        Object[] lowArgs  = new Object[] {Integer.valueOf(1), \"Low\",  new Double(\"1234.56\")};\n+//        Object[] highArgs = new Object[] {Integer.valueOf(2), \"High\", new Double(\"9876.54\")};\n //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales();\n //        Locale[] testLocales = new Locale[availableLocales.length + 1];\n //        testLocales[0] = null;\n      * Test the built in choice format.\n      */\n     public void testBuiltInChoiceFormat() {\n-        Object[] values = new Number[] {new Integer(1), new Double(\"2.2\"), new Double(\"1234.5\")};\n+        Object[] values = new Number[] {Integer.valueOf(1), new Double(\"2.2\"), new Double(\"1234.5\")};\n         String choicePattern = null;\n         Locale[] availableLocales = ChoiceFormat.getAvailableLocales();\n \n--- a/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrBuilderAppendInsertTest.java\n         sb.appendln(FOO);\n         assertEquals(SEP + \"foo\" + SEP, sb.toString());\n \n-        sb.appendln(new Integer(6));\n+        sb.appendln(Integer.valueOf(6));\n         assertEquals(SEP + \"foo\" + SEP + \"6\" + SEP, sb.toString());\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrBuilderTest.java\n         assertEquals(true, sb1.equals(sb2));\n         assertEquals(true, sb1.equals((Object) sb2));\n         \n-        assertEquals(false, sb1.equals(new Integer(1)));\n+        assertEquals(false, sb1.equals(Integer.valueOf(1)));\n         assertEquals(false, sb1.equals(\"abc\"));\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/StrLookupTest.java\n     public void testMapLookup() {\n         Map<String, Object> map = new HashMap<String, Object>();\n         map.put(\"key\", \"value\");\n-        map.put(\"number\", new Integer(2));\n+        map.put(\"number\", Integer.valueOf(2));\n         assertEquals(\"value\", StrLookup.mapLookup(map).lookup(\"key\"));\n         assertEquals(\"2\", StrLookup.mapLookup(map).lookup(\"number\"));\n         assertEquals(null, StrLookup.mapLookup(map).lookup(null));\n--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java\n                 new Object())));\n         assertFalse(\"Token equal to Token with different count. \", token.equals(new DurationFormatUtils.Token(\n                 DurationFormatUtils.y, 1)));\n-        DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(new Integer(1), 4);\n+        DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4);\n         assertTrue(\"Token with Number value not equal to itself. \", numToken.equals(numToken));\n     }\n ", "timestamp": 1312378782, "metainfo": ""}