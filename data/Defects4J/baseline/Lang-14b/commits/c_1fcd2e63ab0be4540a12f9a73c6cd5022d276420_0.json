{"sha": "1fcd2e63ab0be4540a12f9a73c6cd5022d276420", "log": "Port to JUnit 4.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/FieldUtilsTest.java\n package org.apache.commons.lang3.reflect;\n \n import static org.junit.Assume.*;\n+import static org.junit.Assert.*;\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Field;\n import org.apache.commons.lang3.reflect.testbed.PubliclyShadowedChild;\n import org.apache.commons.lang3.reflect.testbed.StaticContainer;\n import org.apache.commons.lang3.reflect.testbed.StaticContainerChild;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * Unit tests FieldUtils\n  * @version $Id$\n  */\n-public class FieldUtilsTest extends TestCase {\n+public class FieldUtilsTest {\n \n     static final String S = \"s\";\n     static final String SS = \"ss\";\n     private PrivatelyShadowedChild privatelyShadowedChild;\n     private Class<?> parentClass = PublicChild.class.getSuperclass();\n \n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    @Before\n+    public void setUp() {\n         StaticContainer.reset();\n         publicChild = new PublicChild();\n         publiclyShadowedChild = new PubliclyShadowedChild();\n         privatelyShadowedChild = new PrivatelyShadowedChild();\n     }\n \n+    @Test\n     public void testConstructor() {\n         assertNotNull(new FieldUtils());\n         Constructor<?>[] cons = FieldUtils.class.getDeclaredConstructors();\n         assertEquals(false, Modifier.isFinal(FieldUtils.class.getModifiers()));\n     }\n     \n+    @Test\n     public void testGetField() {\n         assertEquals(Foo.class, FieldUtils.getField(PublicChild.class, \"VALUE\").getDeclaringClass());\n         assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"s\").getDeclaringClass());\n         }\n     }\n \n+    @Test\n     public void testGetFieldForceAccess() {\n         assertEquals(PublicChild.class, FieldUtils.getField(PublicChild.class, \"VALUE\", true).getDeclaringClass());\n         assertEquals(parentClass, FieldUtils.getField(PublicChild.class, \"s\", true).getDeclaringClass());\n         }\n     }\n \n+    @Test\n     public void testGetDeclaredField() {\n         assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"VALUE\"));\n         assertNull(FieldUtils.getDeclaredField(PublicChild.class, \"s\"));\n         }\n     }\n \n+    @Test\n     public void testGetDeclaredFieldForceAccess() {\n         assertEquals(PublicChild.class, FieldUtils.getDeclaredField(PublicChild.class, \"VALUE\", true)\n                 .getDeclaringClass());\n         }\n     }\n \n+    @Test\n     public void testReadStaticField() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n         \n         \n     }\n \n+    @Test\n     public void testReadStaticFieldForceAccess() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(Foo.class, \"VALUE\")));\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(FieldUtils.getField(PublicChild.class, \"VALUE\")));\n         }\n     }\n \n+    @Test\n     public void testReadNamedStaticField() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, \"VALUE\"));\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\"));\n         }\n     }\n \n+    @Test\n     public void testReadNamedStaticFieldForceAccess() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(Foo.class, \"VALUE\", true));\n         assertEquals(Foo.VALUE, FieldUtils.readStaticField(PubliclyShadowedChild.class, \"VALUE\", true));\n         }\n     }\n \n+    @Test\n     public void testReadDeclaredNamedStaticField() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, \"VALUE\"));\n         try {\n         }\n     }\n \n+    @Test\n     public void testReadDeclaredNamedStaticFieldForceAccess() throws Exception {\n         assertEquals(Foo.VALUE, FieldUtils.readDeclaredStaticField(Foo.class, \"VALUE\", true));\n         assertEquals(\"child\", FieldUtils.readDeclaredStaticField(PublicChild.class, \"VALUE\", true));\n         }\n     }\n \n+    @Test\n     public void testReadField() throws Exception {\n         Field parentS = FieldUtils.getDeclaredField(parentClass, \"s\");\n         assertEquals(\"s\", FieldUtils.readField(parentS, publicChild));\n         }\n     }\n \n+    @Test\n     public void testReadFieldForceAccess() throws Exception {\n         Field parentS = FieldUtils.getDeclaredField(parentClass, \"s\");\n         parentS.setAccessible(false);\n         }\n     }\n \n+    @Test\n     public void testReadNamedField() throws Exception {\n         assertEquals(\"s\", FieldUtils.readField(publicChild, \"s\"));\n         assertEquals(\"ss\", FieldUtils.readField(publiclyShadowedChild, \"s\"));\n         }\n     }\n \n+    @Test\n     public void testReadNamedFieldForceAccess() throws Exception {\n         assertEquals(\"s\", FieldUtils.readField(publicChild, \"s\", true));\n         assertEquals(\"ss\", FieldUtils.readField(publiclyShadowedChild, \"s\", true));\n         }\n     }\n \n+    @Test\n     public void testReadDeclaredNamedField() throws Exception {\n         try {\n             FieldUtils.readDeclaredField(publicChild, null);\n         }\n     }\n \n+    @Test\n     public void testReadDeclaredNamedFieldForceAccess() throws Exception {\n         try {\n             FieldUtils.readDeclaredField(publicChild, null, true);\n         assertEquals(D1, FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n     }\n \n+    @Test\n     public void testWriteStaticField() throws Exception {\n         Field field = StaticContainer.class.getDeclaredField(\"mutablePublic\");\n         FieldUtils.writeStaticField(field, \"new\");\n         }\n     }\n \n+    @Test\n     public void testWriteStaticFieldForceAccess() throws Exception {\n         Field field = StaticContainer.class.getDeclaredField(\"mutablePublic\");\n         FieldUtils.writeStaticField(field, \"new\", true);\n         }\n     }\n \n+    @Test\n     public void testWriteNamedStaticField() throws Exception {\n         FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePublic\", \"new\");\n         assertEquals(\"new\", StaticContainer.mutablePublic);\n         }\n     }\n \n+    @Test\n     public void testWriteNamedStaticFieldForceAccess() throws Exception {\n         FieldUtils.writeStaticField(StaticContainerChild.class, \"mutablePublic\", \"new\", true);\n         assertEquals(\"new\", StaticContainer.mutablePublic);\n         }\n     }\n \n+    @Test\n     public void testWriteDeclaredNamedStaticField() throws Exception {\n         FieldUtils.writeStaticField(StaticContainer.class, \"mutablePublic\", \"new\");\n         assertEquals(\"new\", StaticContainer.mutablePublic);\n         }\n     }\n \n+    @Test\n     public void testWriteDeclaredNamedStaticFieldForceAccess() throws Exception {\n         FieldUtils.writeDeclaredStaticField(StaticContainer.class, \"mutablePublic\", \"new\", true);\n         assertEquals(\"new\", StaticContainer.mutablePublic);\n         }\n     }\n \n+    @Test\n     public void testWriteField() throws Exception {\n         Field field = parentClass.getDeclaredField(\"s\");\n         FieldUtils.writeField(field, publicChild, \"S\");\n         }\n     }\n \n+    @Test\n     public void testWriteFieldForceAccess() throws Exception {\n         Field field = parentClass.getDeclaredField(\"s\");\n         FieldUtils.writeField(field, publicChild, \"S\", true);\n         assertEquals(new Double(Double.MAX_VALUE), field.get(publicChild));\n     }\n \n+    @Test\n     public void testWriteNamedField() throws Exception {\n         FieldUtils.writeField(publicChild, \"s\", \"S\");\n         assertEquals(\"S\", FieldUtils.readField(publicChild, \"s\"));\n         }\n     }\n \n+    @Test\n     public void testWriteNamedFieldForceAccess() throws Exception {\n         FieldUtils.writeField(publicChild, \"s\", \"S\", true);\n         assertEquals(\"S\", FieldUtils.readField(publicChild, \"s\", true));\n         assertEquals(new Double(0.0), FieldUtils.readField(privatelyShadowedChild, \"d\", true));\n     }\n \n+    @Test\n     public void testWriteDeclaredNamedField() throws Exception {\n         try {\n             FieldUtils.writeDeclaredField(publicChild, \"s\", \"S\");\n         }\n     }\n \n+    @Test\n     public void testWriteDeclaredNamedFieldForceAccess() throws Exception {\n         try {\n             FieldUtils.writeDeclaredField(publicChild, \"s\", \"S\", true);\n         assertEquals(new Double(0.0), FieldUtils.readDeclaredField(privatelyShadowedChild, \"d\", true));\n     }\n \n+    @Test\n     public void testAmbig() {\n         try {\n             FieldUtils.getField(Ambig.class, \"VALUE\");", "timestamp": 1309790931, "metainfo": ""}