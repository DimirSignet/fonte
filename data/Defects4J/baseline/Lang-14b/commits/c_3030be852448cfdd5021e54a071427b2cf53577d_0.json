{"sha": "3030be852448cfdd5021e54a071427b2cf53577d", "log": "[lang] Request for MutableBoolean implementation. http://issues.apache.org/bugzilla/show_bug.cgi?id=37111.  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/mutable/MutableBoolean.java\n+/*\n+ * Copyright 2004-2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang.mutable;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * A mutable <code>boolean</code> wrapper.\n+ * \n+ * @see Boolean\n+ * @since 2.2\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class MutableBoolean implements Mutable, Serializable, Comparable {\n+\n+    /** Serialization lock. */\n+    private static final long serialVersionUID = -4830728138360036487L;\n+\n+    /** The mutable value. */\n+    private boolean value;\n+\n+    /**\n+     * Constructs a new MutableBoolean with the default value of false.\n+     */\n+    public MutableBoolean() {\n+        super();\n+    }\n+\n+    /**\n+     * Constructs a new MutableBoolean with the specified value.\n+     * \n+     * @param value\n+     *            a value.\n+     */\n+    public MutableBoolean(boolean value) {\n+        super();\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Constructs a new MutableBoolean with the specified value.\n+     * \n+     * @param value\n+     *            a value.\n+     * @throws NullPointerException\n+     *             if the object is null\n+     */\n+    public MutableBoolean(Boolean value) {\n+        super();\n+        this.value = value.booleanValue();\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    /**\n+     * Returns the value of this MutableBoolean as a boolean.\n+     * \n+     * @return the boolean value represented by this object.\n+     */\n+    public boolean booleanValue() {\n+        return value;\n+    }\n+\n+    /**\n+     * Compares this mutable to another in ascending order.\n+     * \n+     * @param obj\n+     *            the mutable to compare to\n+     * @return zero if this object represents the same boolean value as the argument; a positive value if this object\n+     *         represents true and the argument represents false; and a negative value if this object represents false\n+     *         and the argument represents true\n+     * @throws ClassCastException\n+     *             if the argument is not a MutableInt\n+     */\n+    public int compareTo(Object obj) {\n+        MutableBoolean other = (MutableBoolean) obj;\n+        boolean anotherVal = other.value;\n+        return value == anotherVal ? 0 : (value ? 1 : -1);\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    /**\n+     * Compares this object to the specified object. The result is <code>true</code> if and only if the argument is\n+     * not <code>null</code> and is an <code>MutableBoolean</code> object that contains the same\n+     * <code>boolean</code> value as this object.\n+     * \n+     * @param obj\n+     *            the object to compare with.\n+     * @return <code>true</code> if the objects are the same; <code>false</code> otherwise.\n+     */\n+    public boolean equals(Object obj) {\n+        if (obj instanceof MutableBoolean) {\n+            return value == ((MutableBoolean) obj).booleanValue();\n+        }\n+        return false;\n+    }\n+\n+    // -----------------------------------------------------------------------\n+    /**\n+     * Gets the value as a Boolean instance.\n+     * \n+     * @return the value as a Boolean\n+     */\n+    public Object getValue() {\n+        return new Boolean(this.value);\n+    }\n+\n+    /**\n+     * Returns a suitable hashcode for this mutable.\n+     * \n+     * @return the integer <code>1231</code> if this object represents <code>true</code>; returns the integer\n+     *         <code>1237</code> if this object represents <code>false</code>.\n+     */\n+    public int hashCode() {\n+        return value ? Boolean.TRUE.hashCode() : Boolean.FALSE.hashCode();\n+    }\n+\n+    /**\n+     * Sets the value.\n+     * \n+     * @param value\n+     *            the value to set\n+     */\n+    public void setValue(boolean value) {\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Sets the value from any Boolean instance.\n+     * \n+     * @param value\n+     *            the value to set\n+     * @throws NullPointerException\n+     *             if the object is null\n+     * @throws ClassCastException\n+     *             if the type is not a {@link Boolean}\n+     */\n+    public void setValue(Object value) {\n+        setValue(((Boolean) value).booleanValue());\n+    }\n+\n+    /**\n+     * Returns the String value of this mutable.\n+     * \n+     * @return the mutable value as a string\n+     */\n+    public String toString() {\n+        return String.valueOf(value);\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/mutable/MutableBooleanTest.java\n+/*\n+ * Copyright 2002-2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang.mutable;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * JUnit tests.\n+ * \n+ * @since 2.2\n+ * @see MutableBoolean\n+ * @author Apache Software Foundation\n+ * @version $Id$\n+ */\n+public class MutableBooleanTest extends TestCase {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        return new TestSuite(MutableBooleanTest.class);\n+    }\n+\n+    public MutableBooleanTest(String testName) {\n+        super(testName);\n+    }\n+\n+    public void testCompareTo() {\n+        final MutableBoolean mutBool = new MutableBoolean(false);\n+\n+        assertEquals(0, mutBool.compareTo(new MutableBoolean(false)));\n+        assertEquals(-1, mutBool.compareTo(new MutableBoolean(true)));\n+        mutBool.setValue(true);\n+        assertEquals(+1, mutBool.compareTo(new MutableBoolean(false)));\n+        assertEquals(0, mutBool.compareTo(new MutableBoolean(true)));\n+\n+        try {\n+            mutBool.compareTo(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n+        try {\n+            mutBool.compareTo(Boolean.FALSE);\n+            fail();\n+        } catch (ClassCastException ex) {\n+        }\n+        try {\n+            mutBool.compareTo(\"false\");\n+            fail();\n+        } catch (ClassCastException ex) {\n+        }\n+    }\n+\n+    // ----------------------------------------------------------------\n+    public void testConstructors() {\n+        assertEquals(false, new MutableBoolean().booleanValue());\n+\n+        assertEquals(true, new MutableBoolean(true).booleanValue());\n+        assertEquals(false, new MutableBoolean(false).booleanValue());\n+\n+        assertEquals(true, new MutableBoolean(Boolean.TRUE).booleanValue());\n+        assertEquals(false, new MutableBoolean(Boolean.FALSE).booleanValue());\n+\n+        try {\n+            new MutableBoolean(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n+    }\n+\n+    public void testEquals() {\n+        final MutableBoolean mutBoolA = new MutableBoolean(false);\n+        final MutableBoolean mutBoolB = new MutableBoolean(false);\n+        final MutableBoolean mutBoolC = new MutableBoolean(true);\n+\n+        assertEquals(true, mutBoolA.equals(mutBoolA));\n+        assertEquals(true, mutBoolA.equals(mutBoolB));\n+        assertEquals(true, mutBoolB.equals(mutBoolA));\n+        assertEquals(true, mutBoolB.equals(mutBoolB));\n+        assertEquals(false, mutBoolA.equals(mutBoolC));\n+        assertEquals(false, mutBoolB.equals(mutBoolC));\n+        assertEquals(true, mutBoolC.equals(mutBoolC));\n+        assertEquals(false, mutBoolA.equals(null));\n+        assertEquals(false, mutBoolA.equals(Boolean.FALSE));\n+        assertEquals(false, mutBoolA.equals(\"false\"));\n+    }\n+\n+    public void testGetSet() {\n+        final MutableBoolean mutBool = new MutableBoolean(false);\n+        assertEquals(false, new MutableBoolean().booleanValue());\n+\n+        mutBool.setValue(Boolean.TRUE);\n+        assertEquals(true, mutBool.booleanValue());\n+\n+        mutBool.setValue(false);\n+        assertEquals(false, mutBool.booleanValue());\n+\n+        mutBool.setValue(true);\n+        assertEquals(true, mutBool.booleanValue());\n+\n+        try {\n+            mutBool.setValue(null);\n+            fail();\n+        } catch (NullPointerException ex) {\n+        }\n+        try {\n+            mutBool.setValue(\"false\");\n+            fail();\n+        } catch (ClassCastException ex) {\n+        }\n+    }\n+\n+    public void testHashCode() {\n+        final MutableBoolean mutBoolA = new MutableBoolean(false);\n+        final MutableBoolean mutBoolB = new MutableBoolean(false);\n+        final MutableBoolean mutBoolC = new MutableBoolean(true);\n+\n+        assertEquals(true, mutBoolA.hashCode() == mutBoolA.hashCode());\n+        assertEquals(true, mutBoolA.hashCode() == mutBoolB.hashCode());\n+        assertEquals(false, mutBoolA.hashCode() == mutBoolC.hashCode());\n+        assertEquals(true, mutBoolA.hashCode() == Boolean.FALSE.hashCode());\n+        assertEquals(true, mutBoolC.hashCode() == Boolean.TRUE.hashCode());\n+    }\n+\n+    public void testToString() {\n+        assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString());\n+        assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString());\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/mutable/MutableTestSuite.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableTestSuite.java\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.commons.lang.mutable;\n \n import junit.framework.Test;\n \n /**\n  * JUnit tests.\n- *\n+ * \n  * @version $Id$\n  */\n public class MutableTestSuite {\n     public static Test suite() {\n         final TestSuite suite = new TestSuite();\n \n+        suite.addTest(MutableBooleanTest.suite());\n         suite.addTest(MutableByteTest.suite());\n         suite.addTest(MutableShortTest.suite());\n         suite.addTest(MutableIntTest.suite());\n         return suite;\n     }\n \n-    private MutableTestSuite() {}\n+    private MutableTestSuite() {\n+    }\n \n }", "timestamp": 1130018603, "metainfo": ""}