{"sha": "2007b8efda07f0928279091f136bf0fb2732cd7d", "log": "LANG-580: Add Event Support Utilities  Applying documentation patch \"commons-lang-event-support-docs.patch\" from Michael Wooten.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n+++ b/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n \n package org.apache.commons.lang3.event;\n \n-import org.apache.commons.lang3.Validate;\n-\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n import java.util.List;\n import java.util.concurrent.CopyOnWriteArrayList;\n \n+import org.apache.commons.lang3.Validate;\n+\n /**\n- * An EventListenerSupport object can be used to manage a list of event listeners of a particular type.\n+ * An EventListenerSupport object can be used to manage a list of event \n+ * listeners of a particular type. The class provides \n+ * {@link #addListener(Object)} and {@link #removeListener(Object)} methods\n+ * for registering listeners, as well as a {@link #fire()} method for firing\n+ * events to the listeners.\n+ * \n  * <p/>\n  * To use this class, suppose you want to support ActionEvents.  You would do:\n- * <pre>\n+ * <code><pre>\n  * public class MyActionEventSource\n  * {\n- *   private EventListenerSupport<ActionListener> actionListeners = EventListenerSupport.create(ActionListener.class);\n- * <p/>\n+ *   private EventListenerSupport<ActionListener> actionListeners = \n+ *       EventListenerSupport.create(ActionListener.class);\n+ *\n  *   public void someMethodThatFiresAction()\n  *   {\n  *     ActionEvent e = new ActionEvent(this, ActionEvent.ACTION_PERFORMED, \"somethingCool\");\n  *     actionListeners.fire().actionPerformed(e);\n  *   }\n  * }\n- * </pre>\n- *\n- * @param <L> The event listener type\n+ * </pre></code>\n+ *\n+ * @param <L> the type of event listener that is supported by this proxy.\n  *\n  * @since 3.0\n  * @version $Id$\n  */\n public class EventListenerSupport<L>\n {\n+    /**\n+    * The list used to hold the registered listeners. This list is \n+    * intentionally a thread-safe copy-on-write-array so that traversals over\n+    * the list of listeners will be atomic.\n+    */\n     private final List<L> listeners = new CopyOnWriteArrayList<L>();\n+    \n+    /**\n+     * The proxy representing the collection of listeners. Calls to this proxy \n+     * object will sent to all registered listeners.\n+     */\n     private final L proxy;\n \n     /**\n-     * Creates an EventListenerSupport object which supports the specified listener type.\n-     *\n-     * @param listenerType the listener type\n-     * @return an EventListenerSupport object which supports the specified listener type\n-     */\n-    public static <T> EventListenerSupport<T> create(Class<T> listenerType)\n-    {\n-        return new EventListenerSupport<T>(listenerType);\n-    }\n-\n-    /**\n-     * Creates an EventListenerSupport object which supports the provided listener interface.\n-     *\n-     * @param listenerInterface the listener interface\n+     * Creates an EventListenerSupport object which supports the specified \n+     * listener type.\n+     *\n+     * @param listenerInterface the type of listener interface that will receive\n+     *        events posted using this class.\n+     * \n+     * @return an EventListenerSupport object which supports the specified \n+     *         listener type.\n+     *         \n+     * @throws NullPointerException if <code>listenerInterface</code> is \n+     *         <code>null</code>.\n+     * @throws IllegalArgumentException if <code>listenerInterface</code> is\n+     *         not an interface.\n+     */\n+    public static <T> EventListenerSupport<T> create(Class<T> listenerInterface)\n+    {\n+        return new EventListenerSupport<T>(listenerInterface);\n+    }\n+\n+    /**\n+     * Creates an EventListenerSupport object which supports the provided \n+     * listener interface.\n+     *\n+     * @param listenerInterface the type of listener interface that will receive\n+     *        events posted using this class.\n+     * \n+     * @throws NullPointerException if <code>listenerInterface</code> is \n+     *         <code>null</code>.\n+     * @throws IllegalArgumentException if <code>listenerInterface</code> is\n+     *         not an interface.\n      */\n     public EventListenerSupport(Class<L> listenerInterface)\n     {\n     }\n \n     /**\n-     * Creates an EventListenerSupport object which supports the provided listener interface using the specified\n-     * class loader to create the JDK dynamic proxy.\n-     *\n-     * @param listenerInterface the listener interface\n-     * @param classLoader       the class loader\n+     * Creates an EventListenerSupport object which supports the provided \n+     * listener interface using the specified class loader to create the JDK \n+     * dynamic proxy.\n+     *\n+     * @param listenerInterface the listener interface.\n+     * @param classLoader       the class loader.\n+     * \n+     * @throws NullPointerException if <code>listenerInterface</code> or\n+     *         <code>classLoader</code> is <code>null</code>.\n+     * @throws IllegalArgumentException if <code>listenerInterface</code> is\n+     *         not an interface.\n      */\n     public EventListenerSupport(Class<L> listenerInterface, ClassLoader classLoader)\n     {\n         Validate.notNull(listenerInterface, \"Listener interface cannot be null.\");\n         Validate.notNull(classLoader, \"ClassLoader cannot be null.\");\n-        Validate.isTrue(listenerInterface.isInterface(), \"Class {0} is not an interface\", listenerInterface.getName());\n-        proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader, new Class[]{listenerInterface},\n+        Validate.isTrue(listenerInterface.isInterface(), \n+            \"Class {0} is not an interface\", \n+            listenerInterface.getName());\n+        proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader, \n+                new Class[]{listenerInterface},\n                 new ProxyInvocationHandler()));\n     }\n \n     /**\n-     * Returns a proxy object which can be used to call listener methods on all of the registered event listeners.\n-     *\n-     * @return a proxy object which can be used to call listener methods on all of the registered event listeners\n+     * Returns a proxy object which can be used to call listener methods on all \n+     * of the registered event listeners. All calls made to this proxy will be\n+     * forwarded to all registered listeners.\n+     *\n+     * @return a proxy object which can be used to call listener methods on all \n+     * of the registered event listeners\n      */\n     public L fire()\n     {\n     /**\n      * Registers an event listener.\n      *\n-     * @param listener the event listener\n+     * @param listener the event listener (may not be <code>null</code>).\n+     * \n+     * @throws NullPointerException if <code>listener</code> is \n+     *         <code>null</code>.\n      */\n     public void addListener(L listener)\n     {\n     /**\n      * Returns the number of registered listeners.\n      *\n-     * @return the number of registered listeners\n-     */\n-    public int getListenerCount()\n+     * @return the number of registered listeners.\n+     */\n+    int getListenerCount()\n     {\n         return listeners.size();\n     }\n     /**\n      * Unregisters an event listener.\n      *\n-     * @param listener the event listener\n+     * @param listener the event listener (may not be <code>null</code>).\n+     * \n+     * @throws NullPointerException if <code>listener</code> is \n+     *         <code>null</code>.\n      */\n     public void removeListener(L listener)\n     {\n      */\n     private class ProxyInvocationHandler implements InvocationHandler\n     {\n-        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable\n+        /**\n+         * Propagates the method call to all registered listeners in place of\n+         * the proxy listener object.\n+         * \n+         * @param proxy the proxy object representing a listener on which the \n+         *        invocation was called.\n+         * @param method the listener method that will be called on all of the\n+         *        listeners.\n+         * @param args event arguments to propogate to the listeners.\n+         */\n+        public Object invoke(Object proxy, Method method, Object[] args) \n+            throws Throwable\n         {\n             for (L listener : listeners)\n             {", "timestamp": 1279975778, "metainfo": ""}