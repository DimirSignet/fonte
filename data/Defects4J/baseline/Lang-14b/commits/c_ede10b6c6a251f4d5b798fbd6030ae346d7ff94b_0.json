{"sha": "ede10b6c6a251f4d5b798fbd6030ae346d7ff94b", "log": "retract @Nonbinding support; doesn't seem proper default behavior  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n     };\n \n     /**\n-     * Statically cached class instance for the CDI Nonbinding annotation.\n-     */\n-    private static final Class<? extends Annotation> NONBINDING_ANNOTATION_TYPE;\n-    static {\n-        Class<?> nonbindingAnnotationType = null;\n-        try {\n-            nonbindingAnnotationType = ClassUtils.getClass(\"javax.enterprise.util.Nonbinding\");\n-        } catch (ClassNotFoundException e) {\n-        }\n-        if (nonbindingAnnotationType != null\n-                && Annotation.class.isAssignableFrom(nonbindingAnnotationType)) {\n-            //just checked:\n-            @SuppressWarnings(\"unchecked\")\n-            Class<? extends Annotation> stronglyTyped = (Class<? extends Annotation>) nonbindingAnnotationType;\n-            NONBINDING_ANNOTATION_TYPE = stronglyTyped;\n-        } else {\n-            NONBINDING_ANNOTATION_TYPE = null;\n-        }\n-    }\n-\n-    /**\n      * <p>{@code AnnotationUtils} instances should NOT be constructed in\n      * standard programming. Instead, the class should be used statically.</p>\n      *\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Checks if two annotations are equal using the criteria for equality\n-     * presented in the {@link Annotation#equals(Object)} API docs. Additionally\n-     * if the <code>javax.enterprise.util.Nonbinding</code> annotation is found\n-     * on the classpath, its implications will be respected:\n-     * <code>Nonbinding</code> members will contribute nothing to the equality\n-     * calculation.</p>\n+     * presented in the {@link Annotation#equals(Object)} API docs.</p>\n      *\n      * @param a1 the first Annotation to compare, {@code null} returns\n      * {@code false} unless both are {@code null}\n         try {\n             for (Method m : type.getDeclaredMethods()) {\n                 if (m.getParameterTypes().length == 0\n-                        && isValidAnnotationMemberType(m.getReturnType())\n-                        && !isNonbindingMember(m)) {\n+                        && isValidAnnotationMemberType(m.getReturnType())) {\n                     Object v1 = m.invoke(a1);\n                     Object v2 = m.invoke(a2);\n                     if (!memberEquals(m.getReturnType(), v1, v2)) {\n         }\n         return Arrays.hashCode((Object[]) o);\n     }\n-\n-    /**\n-     * Helper method to look for the CDI {@code Nonbinding} annotation on an\n-     * {@link Annotation} member.\n-     * @param accessor the accessor method to check\n-     * @return whether the {@code Nonbinding} annotation was found\n-     */\n-    private static boolean isNonbindingMember(Method accessor) {\n-        return NONBINDING_ANNOTATION_TYPE != null\n-                && accessor.isAnnotationPresent(NONBINDING_ANNOTATION_TYPE);\n-    }\n }\n--- a/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/AnnotationUtilsTest.java\n import java.lang.reflect.Proxy;\n import java.util.Collection;\n import java.util.Map;\n-\n-import javax.enterprise.util.Nonbinding;\n \n import org.junit.Before;\n import org.junit.Test;\n             type = Object.class,\n             types = { Object.class }\n     )\n-    @Blah(foo = 6, bar = \"x\")\n     public Object dummy1;\n \n     @TestAnnotation(\n             type = Object.class,\n             types = { Object.class }\n     )\n-    @Blah(foo = 6, bar = \"y\")\n     public Object dummy2;\n \n     @TestAnnotation(\n             type = Object.class,\n             types = { Object.class }\n     )\n-    @Blah(foo = 7, bar = \"x\")\n     public Object dummy3;\n \n     @NestAnnotation(\n         MOE, LARRY, CURLY, JOE, SHEMP;\n     }\n \n-    @Retention(RUNTIME)\n-    @Target(FIELD)\n-    public @interface Blah {\n-        int foo();\n-\n-        @Nonbinding\n-        String bar();\n-    }\n-\n     private Field field1;\n     private Field field2;\n     private Field field3;\n         assertTrue(toString.contains(\", \"));\n     }\n \n-    @Test\n-    public void testNonbinding() throws Exception {\n-        Blah blah1 = field1.getAnnotation(Blah.class);\n-        Blah blah2 = field2.getAnnotation(Blah.class);\n-        Blah blah3 = field3.getAnnotation(Blah.class);\n-        assertTrue(AnnotationUtils.equals(blah1, blah2));\n-        assertFalse(AnnotationUtils.equals(blah1, blah3));\n-    }\n }", "timestamp": 1300723087, "metainfo": ""}