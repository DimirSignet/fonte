{"sha": "982e295053663787bb0396b81a8956c3c87dc25b", "log": "(LANG-624) SystemUtils.getJavaVersionAsFloat throws StringIndexOutOfBoundsException on Android runtime/Dalvik VM. Oops, fix return type.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/SystemUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/SystemUtils.java\n      * \n      * @return the version, for example 131 for Java 1.3.1\n      */\n-    static float toJavaVersionInt(String version) {\n+    static int toJavaVersionInt(String version) {\n         return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java\n     }\n \n     public void testJavaVersionAsInt() {\n-        assertEquals(0, SystemUtils.toJavaVersionInt(null), 0.000001f);\n-        assertEquals(0, SystemUtils.toJavaVersionInt(\"\"), 0.000001f);\n-        assertEquals(0, SystemUtils.toJavaVersionInt(\"0\"), 0.000001f);\n-        assertEquals(110, SystemUtils.toJavaVersionInt(\"1.1\"), 0.000001f);\n-        assertEquals(120, SystemUtils.toJavaVersionInt(\"1.2\"), 0.000001f);\n-        assertEquals(130, SystemUtils.toJavaVersionInt(\"1.3.0\"), 0.000001f);\n-        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1\"), 0.000001f);\n-        assertEquals(140, SystemUtils.toJavaVersionInt(\"1.4.0\"), 0.000001f);\n-        assertEquals(141, SystemUtils.toJavaVersionInt(\"1.4.1\"), 0.000001f);\n-        assertEquals(142, SystemUtils.toJavaVersionInt(\"1.4.2\"), 0.000001f);\n-        assertEquals(150, SystemUtils.toJavaVersionInt(\"1.5.0\"), 0.000001f);\n-        assertEquals(160, SystemUtils.toJavaVersionInt(\"1.6.0\"), 0.000001f);\n-        assertEquals(131, SystemUtils.toJavaVersionInt(\"JavaVM-1.3.1\"), 0.000001f);\n-        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1 subset\"), 0.000001f);\n+        assertEquals(0, SystemUtils.toJavaVersionInt(null));\n+        assertEquals(0, SystemUtils.toJavaVersionInt(\"\"));\n+        assertEquals(0, SystemUtils.toJavaVersionInt(\"0\"));\n+        assertEquals(110, SystemUtils.toJavaVersionInt(\"1.1\"));\n+        assertEquals(120, SystemUtils.toJavaVersionInt(\"1.2\"));\n+        assertEquals(130, SystemUtils.toJavaVersionInt(\"1.3.0\"));\n+        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1\"));\n+        assertEquals(140, SystemUtils.toJavaVersionInt(\"1.4.0\"));\n+        assertEquals(141, SystemUtils.toJavaVersionInt(\"1.4.1\"));\n+        assertEquals(142, SystemUtils.toJavaVersionInt(\"1.4.2\"));\n+        assertEquals(150, SystemUtils.toJavaVersionInt(\"1.5.0\"));\n+        assertEquals(160, SystemUtils.toJavaVersionInt(\"1.6.0\"));\n+        assertEquals(131, SystemUtils.toJavaVersionInt(\"JavaVM-1.3.1\"));\n+        assertEquals(131, SystemUtils.toJavaVersionInt(\"1.3.1 subset\"));\n         // This used to return 0f in [lang] version 2.5:\n-        assertEquals(130, SystemUtils.toJavaVersionInt(\"XXX-1.3.x\"), 0.000001f);\n+        assertEquals(130, SystemUtils.toJavaVersionInt(\"XXX-1.3.x\"));\n     }\n \n     public void testJavaVersionAtLeastFloat() {", "timestamp": 1275064403, "metainfo": ""}