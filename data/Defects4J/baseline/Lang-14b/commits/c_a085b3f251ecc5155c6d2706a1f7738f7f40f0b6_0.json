{"sha": "a085b3f251ecc5155c6d2706a1f7738f7f40f0b6", "log": "Moving a startsWith test to the right test class  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsStartsEndsWithTest.java\n         assertFalse(\"startsWithIgnoreCase(FOOBAR, bar)\", StringUtils.startsWithIgnoreCase(FOOBAR, bar));\n     }\n \n+    public void testStartsWithAny() {\n+        assertFalse(StringUtils.startsWithAny(null, (String[])null));\n+        assertFalse(StringUtils.startsWithAny(null, \"abc\"));\n+        assertFalse(StringUtils.startsWithAny(\"abcxyz\", (String[])null));\n+        assertFalse(StringUtils.startsWithAny(\"abcxyz\"));\n+        assertTrue(StringUtils.startsWithAny(\"abcxyz\", \"abc\"));\n+        assertTrue(StringUtils.startsWithAny(\"abcxyz\", null, \"xyz\", \"abc\"));\n+        assertFalse(StringUtils.startsWithAny(\"abcxyz\", null, \"xyz\", \"abcd\"));\n+\n+        assertTrue(\"StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))\", StringUtils.startsWithAny(\"abcxyz\", new StringBuilder(\"xyz\"), new StringBuffer(\"abc\")));\n+        assertTrue(\"StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))\", StringUtils.startsWithAny( new StrBuilder(\"abcxyz\"), new StringBuilder(\"xyz\"), new StringBuffer(\"abc\")));\n+    }\n+ \n \n     /**\n      * Test StringUtils.endsWith()\n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n \n import junit.framework.TestCase;\n \n-import org.apache.commons.lang3.text.StrBuilder;\n import org.apache.commons.lang3.text.WordUtils;\n \n /**\n         assertEquals(\"i am a \", StringUtils.getCommonPrefix(\"i am a machine\", \"i am a robot\"));\n     }\n         \n-    public void testStartsWithAny() {\n-        assertFalse(StringUtils.startsWithAny(null, (String[])null));\n-        assertFalse(StringUtils.startsWithAny(null, \"abc\"));\n-        assertFalse(StringUtils.startsWithAny(\"abcxyz\", (String[])null));\n-        assertFalse(StringUtils.startsWithAny(\"abcxyz\"));\n-        assertTrue(StringUtils.startsWithAny(\"abcxyz\", \"abc\"));\n-        assertTrue(StringUtils.startsWithAny(\"abcxyz\", null, \"xyz\", \"abc\"));\n-        assertFalse(StringUtils.startsWithAny(\"abcxyz\", null, \"xyz\", \"abcd\"));\n-\n-        assertTrue(\"StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))\", StringUtils.startsWithAny(\"abcxyz\", new StringBuilder(\"xyz\"), new StringBuffer(\"abc\")));\n-        assertTrue(\"StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))\", StringUtils.startsWithAny( new StrBuilder(\"abcxyz\"), new StringBuilder(\"xyz\"), new StringBuffer(\"abc\")));\n-    }\n- \n     public void testNormalizeSpace() {\n         assertEquals(null, StringUtils.normalizeSpace(null));\n         assertEquals(\"\", StringUtils.normalizeSpace(\"\"));", "timestamp": 1302149157, "metainfo": ""}