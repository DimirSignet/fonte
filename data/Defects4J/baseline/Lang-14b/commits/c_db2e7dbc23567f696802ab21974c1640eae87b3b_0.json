{"sha": "db2e7dbc23567f696802ab21974c1640eae87b3b", "log": "Increment, decrement add and subtract methods from Stephen Putman  ", "commit": "\n--- a/src/java/org/apache/commons/lang/mutable/MutableByte.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableByte.java\n /*\n- * Copyright 2004-2005 The Apache Software Foundation.\n+ * Copyright 2004-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.commons.lang.mutable;\n \n /**\n \n     //-----------------------------------------------------------------------\n     /**\n+     * Increments the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void increment() {\n+        value++;\n+    }\n+\n+    /**\n+     * Decrements the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void decrement() {\n+        value--;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(byte operand) {\n+        this.value += operand;\n+    }\n+\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(Number operand) {\n+        this.value += operand.byteValue();\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(byte operand) {\n+        this.value -= operand;\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(Number operand) {\n+        this.value -= operand.byteValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n      * Compares this object against the specified object. The result is <code>true</code> if and only if the argument\n      * is not <code>null</code> and is a <code>MutableByte</code> object that contains the same <code>byte</code>\n      * value as this object.\n--- a/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableDouble.java\n /*\n- * Copyright 2004-2005 The Apache Software Foundation.\n+ * Copyright 2004-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.commons.lang.mutable;\n \n import org.apache.commons.lang.math.NumberUtils;\n      */\n     public Double toDouble() {\n         return new Double(doubleValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Increments the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void increment() {\n+        value++;\n+    }\n+\n+    /**\n+     * Decrements the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void decrement() {\n+        value--;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(double operand) {\n+        this.value += operand;\n+    }\n+\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(Number operand) {\n+        this.value += operand.doubleValue();\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(double operand) {\n+        this.value -= operand;\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(Number operand) {\n+        this.value -= operand.doubleValue();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableFloat.java\n /*\n- * Copyright 2004-2005 The Apache Software Foundation.\n+ * Copyright 2004-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.commons.lang.mutable;\n \n import org.apache.commons.lang.math.NumberUtils;\n      */\n     public void setValue(Object value) {\n         setValue(((Number) value).floatValue());\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Increments the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void increment() {\n+        value++;\n+    }\n+\n+    /**\n+     * Decrements the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void decrement() {\n+        value--;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(float operand) {\n+        this.value += operand;\n+    }\n+\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(Number operand) {\n+        this.value += operand.floatValue();\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(float operand) {\n+        this.value -= operand;\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(Number operand) {\n+        this.value -= operand.floatValue();\n     }\n \n     //-----------------------------------------------------------------------\n--- a/src/java/org/apache/commons/lang/mutable/MutableInt.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableInt.java\n /*\n- * Copyright 2004-2005 The Apache Software Foundation.\n+ * Copyright 2004-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.commons.lang.mutable;\n \n /**\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Increments the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void increment() {\n+        value++;\n+    }\n+\n+    /**\n+     * Decrements the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void decrement() {\n+        value--;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(int operand) {\n+        this.value += operand;\n+    }\n+\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(Number operand) {\n+        this.value += operand.intValue();\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(int operand) {\n+        this.value -= operand;\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(Number operand) {\n+        this.value -= operand.intValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     // shortValue and bytValue rely on Number implementation\n     /**\n      * Returns the value of this MutableInt as a int.\n--- a/src/java/org/apache/commons/lang/mutable/MutableLong.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableLong.java\n /*\n- * Copyright 2004-2005 The Apache Software Foundation.\n+ * Copyright 2004-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.commons.lang.mutable;\n \n /**\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Increments the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void increment() {\n+        value++;\n+    }\n+\n+    /**\n+     * Decrements the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void decrement() {\n+        value--;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(long operand) {\n+        this.value += operand;\n+    }\n+\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(Number operand) {\n+        this.value += operand.longValue();\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(long operand) {\n+        this.value -= operand;\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(Number operand) {\n+        this.value -= operand.longValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     // shortValue and bytValue rely on Number implementation\n     /**\n      * Returns the value of this MutableLong as a int.\n--- a/src/java/org/apache/commons/lang/mutable/MutableShort.java\n+++ b/src/java/org/apache/commons/lang/mutable/MutableShort.java\n /*\n- * Copyright 2004-2005 The Apache Software Foundation.\n+ * Copyright 2004-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n package org.apache.commons.lang.mutable;\n \n /**\n     }\n \n     //-----------------------------------------------------------------------\n+    /**\n+     * Increments the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void increment() {\n+        value++;\n+    }\n+\n+    /**\n+     * Decrements the value.\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void decrement() {\n+        value--;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(short operand) {\n+        this.value += operand;\n+    }\n+\n+    /**\n+     * Adds a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void add(Number operand) {\n+        this.value += operand.shortValue();\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(short operand) {\n+        this.value -= operand;\n+    }\n+\n+    /**\n+     * Subtracts a value.\n+     * \n+     * @param operand\n+     *            the value to add\n+     * @throws NullPointerException\n+     *             if the object is null\n+     *\n+     * @since Commons Lang 2.2\n+     */\n+    public void subtract(Number operand) {\n+        this.value -= operand.shortValue();\n+    }\n+\n+    //-----------------------------------------------------------------------\n     // bytValue relies on Number implementation\n     /**\n      * Returns the value of this MutableShort as a short.\n--- a/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableByteTest.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2002-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         assertEquals(new Byte((byte) 123), new MutableByte((byte) 123).toByte());\n     }\n \n+    public void testIncrement() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.add((byte)1);\n+        \n+        assertEquals((byte) 2, mutNum.byteValue());\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.add(new Integer(1));\n+        \n+        assertEquals((byte) 2, mutNum.byteValue());\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.subtract((byte) 1);\n+        \n+        assertEquals((byte) 0, mutNum.byteValue());\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableByte mutNum = new MutableByte((byte) 1);\n+        mutNum.subtract(new Integer(1));\n+        \n+        assertEquals((byte) 0, mutNum.byteValue());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableByte((byte) 0).toString());\n         assertEquals(\"10\", new MutableByte((byte) 10).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableDoubleTest.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2002-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         assertEquals(new Double(12.3d), new MutableDouble(12.3d).toDouble());\n     }\n \n+    public void testIncrement() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.add(1.1d);\n+        \n+        assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.add(new Double(1.1d));\n+        \n+        assertEquals(2.1d, mutNum.doubleValue(), 0.01d);\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.subtract(0.9d);\n+        \n+        assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableDouble mutNum = new MutableDouble(1);\n+        mutNum.subtract(new Double(0.9d));\n+        \n+        assertEquals(0.1d, mutNum.doubleValue(), 0.01d);\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0.0\", new MutableDouble(0d).toString());\n         assertEquals(\"10.0\", new MutableDouble(10d).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableFloatTest.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2002-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         assertEquals(new Float(12.3f), new MutableFloat(12.3f).toFloat());\n     }\n \n+    public void testIncrement() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.add(1.1f);\n+        \n+        assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.add(new Float(1.1f));\n+        \n+        assertEquals(2.1f, mutNum.floatValue(), 0.01f);\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.subtract(0.9f);\n+        \n+        assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableFloat mutNum = new MutableFloat(1);\n+        mutNum.subtract(new Float(0.9f));\n+        \n+        assertEquals(0.1f, mutNum.floatValue(), 0.01f);\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0.0\", new MutableFloat(0f).toString());\n         assertEquals(\"10.0\", new MutableFloat(10f).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableIntTest.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2002-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         assertEquals(new Integer(123), new MutableInt(123).toInteger());\n     }\n \n+    public void testIncrement() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.add(1);\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.add(new Integer(1));\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.subtract(1);\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableInt mutNum = new MutableInt(1);\n+        mutNum.subtract(new Integer(1));\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableInt(0).toString());\n         assertEquals(\"10\", new MutableInt(10).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableLongTest.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2002-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         assertEquals(new Long(123L), new MutableLong(123L).toLong());\n     }\n \n+    public void testIncrement() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.add(1);\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.add(new Long(1));\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.subtract(1);\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableLong mutNum = new MutableLong(1);\n+        mutNum.subtract(new Long(1));\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableLong(0).toString());\n         assertEquals(\"10\", new MutableLong(10).toString());\n--- a/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n+++ b/src/test/org/apache/commons/lang/mutable/MutableShortTest.java\n /*\n- * Copyright 2002-2005 The Apache Software Foundation.\n+ * Copyright 2002-2006 The Apache Software Foundation.\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n         assertEquals(new Short((short) 123), new MutableShort((short) 123).toShort());\n     }\n \n+    public void testIncrement() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.increment();\n+        \n+        assertEquals(2, mutNum.intValue());\n+        assertEquals(2L, mutNum.longValue());\n+    }\n+\n+    public void testDecrement() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.decrement();\n+        \n+        assertEquals(0, mutNum.intValue());\n+        assertEquals(0L, mutNum.longValue());\n+    }\n+\n+    public void testAddValuePrimitive() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.add((short) 1);\n+        \n+        assertEquals((short) 2, mutNum.shortValue());\n+    }\n+\n+    public void testAddValueObject() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.add(new Short((short) 1));\n+        \n+        assertEquals((short) 2, mutNum.shortValue());\n+    }\n+\n+    public void testSubtractValuePrimitive() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.subtract((short) 1);\n+        \n+        assertEquals((short) 0, mutNum.shortValue());\n+    }\n+\n+    public void testSubtractValueObject() {\n+        MutableShort mutNum = new MutableShort((short) 1);\n+        mutNum.subtract(new Short((short) 1));\n+        \n+        assertEquals((short) 0, mutNum.shortValue());\n+    }\n+\n     public void testToString() {\n         assertEquals(\"0\", new MutableShort((short) 0).toString());\n         assertEquals(\"10\", new MutableShort((short) 10).toString());", "timestamp": 1142892584, "metainfo": ""}