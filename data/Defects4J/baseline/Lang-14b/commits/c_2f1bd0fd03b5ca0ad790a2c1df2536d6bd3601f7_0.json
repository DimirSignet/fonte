{"sha": "2f1bd0fd03b5ca0ad790a2c1df2536d6bd3601f7", "log": "Javadoc updates only  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharRange.java\n+++ b/src/main/java/org/apache/commons/lang3/CharRange.java\n      * <p>Constructs a <code>CharRange</code> over a single character.</p>\n      *\n      * @param ch  only character in this range\n+     * @return the new CharRange object\n      * @see CharRange#CharRange(char, char, boolean)\n      */\n     public static CharRange is(char ch) {\n      * <p>Constructs a negated <code>CharRange</code> over a single character.</p>\n      *\n      * @param ch  only character in this range\n+     * @return the new CharRange object\n      * @see CharRange#CharRange(char, char, boolean)\n      */\n     public static CharRange isNot(char ch) {\n      *\n      * @param start  first character, inclusive, in this range\n      * @param end  last character, inclusive, in this range\n+     * @return the new CharRange object\n      * @see CharRange#CharRange(char, char, boolean)\n      */\n     public static CharRange isIn(char start, char end) {\n      *\n      * @param start  first character, inclusive, in this range\n      * @param end  last character, inclusive, in this range\n+     * @return the new CharRange object\n      * @see CharRange#CharRange(char, char, boolean)\n      */\n     public static CharRange isNotIn(char start, char end) {\n--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java\n         return new ArrayList<Class<?>>(interfacesFound);\n     }\n \n+    /**\n+     * Get the interfaces for the specified class.\n+     *\n+     * @param cls  the class to look up, may be <code>null</code>\n+     * @param interfacesFound the <code>Set</code> of interfaces for the class\n+     */\n     private static void getAllInterfaces(Class<?> cls, HashSet<Class<?>> interfacesFound) {\n         while (cls != null) {\n             Class<?>[] interfaces = cls.getInterfaces();\n--- a/src/main/java/org/apache/commons/lang3/EnumUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/EnumUtils.java\n      * a valid enum without needing to catch the exception.\n      *\n      * @param enumClass  the class of the <code>enum</code> to get, not null\n-     * @return the map of enum names to enums, never null\n+     * @param enumName   the enum name\n+     * @return true if the enum name is valid, otherwise false\n      */\n     public static <E extends Enum<E>> boolean isValidEnum(Class<E> enumClass, String enumName) {\n         try {\n      * for an invalid enum name.\n      *\n      * @param enumClass  the class of the <code>enum</code> to get, not null\n-     * @return the map of enum names to enums, never null\n+     * @param enumName   the enum name\n+     * @return the enum or null if not found\n      */\n     public static <E extends Enum<E>> E getEnum(Class<E> enumClass, String enumName) {\n         try {\n--- a/src/main/java/org/apache/commons/lang3/Range.java\n+++ b/src/main/java/org/apache/commons/lang3/Range.java\n      * determine where values lie in the range.</p>\n      *\n      * @param element  the value to use for this range, must not be <code>null</code>\n+     * @return the new range object\n      * @throws IllegalArgumentException if the value is <code>null</code>\n      * @throws ClassCastException if the value is not Comparable\n      */\n      *\n      * @param element1  first value that defines the edge of the range, inclusive\n      * @param element2  second value that defines the edge of the range, inclusive\n+     * @return the new range object\n      * @throws IllegalArgumentException if either value is <code>null</code>\n      * @throws ClassCastException if either value is not Comparable\n      */\n      *\n      * @param element  the value to use for this range, must not be <code>null</code>\n      * @param c comparator to be used\n+     * @return the new range object\n      * @throws IllegalArgumentException if the value is <code>null</code>\n      */\n     public static <T> Range<T> is(T element, Comparator<T> c) {\n      * @param element1  first value that defines the edge of the range, inclusive\n      * @param element2  second value that defines the edge of the range, inclusive\n      * @param c comparator to be used\n+     * @return the new range object\n      * @throws IllegalArgumentException if either value is <code>null</code>\n      */\n     public static <T> Range<T> between(T element1, T element2, Comparator<T> c) {", "timestamp": 1264157527, "metainfo": ""}