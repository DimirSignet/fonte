{"sha": "9922975fdd8f80e7a9fd64e96c37ad92b1d82f53", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n  * (the \"License\"); you may not use this file except in compliance with\n  * the License.  You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n \n /**\n  * <p>Helper methods for working with {@link Annotation} instances.</p>\n- * \n+ *\n  * <p>This contains various utility methods that make working with annotations simpler.</p>\n- * \n+ *\n  * <p>#ThreadSafe#</p>\n- * \n+ *\n  * @since 3.0\n  * @version $Id$\n  */\n     /**\n      * <p>{@code AnnotationUtils} instances should NOT be constructed in\n      * standard programming. Instead, the class should be used statically.</p>\n-     * \n+     *\n      * <p>This constructor is public to permit tools that require a JavaBean\n      * instance to operate.</p>\n      */\n     //-----------------------------------------------------------------------\n     /**\n      * <p>Checks if two annotations are equal.</p>\n-     * \n+     *\n      * <p>Dynamically created {@link Annotation} instances are always proxy\n      * objects which cannot be depended upon to know how to implement\n      * {@link Annotation#equals(Object)} correctly.</p>\n-     * \n+     *\n      * @param a1 the first Annotation to compare, null returns false unless both are null\n      * @param a2 the second Annotation to compare, null returns false unless both are null\n      * @return true if the two annotations are equal or both null\n \n     /**\n      * <p>Generate a hash code for the given annotation.</p>\n-     * \n+     *\n      * <p>Dynamically created {@link Annotation} instances are always proxy\n      * objects which cannot be depended upon to know how to implement\n      * {@link Annotation#hashCode()} correctly.</p>\n-     * \n+     *\n      * @param a the Annotation for a hash code calculation is desired, not null\n      * @return the calculated hash code\n-     * @throws RuntimeException if IllegalAccessException or InvocationTargetException \n+     * @throws RuntimeException if IllegalAccessException or InvocationTargetException\n      * or any other Exception is thrown during annotation access\n      * @throws IllegalStateException if an annotation method invocation returns {@code null}\n      */\n     /**\n      * <p>Generate a string representation of an Annotation, as suggested by\n      * {@link Annotation#toString()}.</p>\n-     * \n+     *\n      * @param a the annotation of which a string representation is desired\n      * @return the standard string representation of an annotation, not null\n      */\n \n     /**\n      * <p>Checks if the specified type is permitted as an annotation member.</p>\n-     * \n+     *\n      * <p>The Java language specification only permits certain types to be used\n      * in annotations. These include {@link String}, {@link Class}, primitive types,\n      * {@link Annotation}, {@link Enum}, and arrays of these types.</p>\n-     * \n+     *\n      * @param type the type to check, null returns false\n      * @return true if the type is a valid type to use in an annotation\n      */\n     }\n \n     //besides modularity, this has the advantage of autoboxing primitives:\n+    /**\n+     * Helper method for generating a hash code for a member of an annotation.\n+     *\n+     * @param name the name of the member\n+     * @param the value of the member\n+     * @return a hash code for this member\n+     */\n     private static int hashMember(String name, Object value) {\n         int part1 = name.hashCode() * 127;\n         if (value.getClass().isArray()) {\n         return part1 ^ value.hashCode();\n     }\n \n+    /**\n+     * Helper method for checking whether two objects of the given type are\n+     * equal. This method is used to compare the parameters of two annotation\n+     * instances.\n+     *\n+     * @param type the type of the objects to be compared\n+     * @param o1 the first object\n+     * @param o2 the second object\n+     * @return a flag whether these objects are equal\n+     */\n     private static boolean memberEquals(Class<?> type, Object o1, Object o2) {\n         if (o1 == o2) {\n             return true;\n         return o1.equals(o2);\n     }\n \n+    /**\n+     * Helper method for comparing two objects of an array type.\n+     *\n+     * @param componentType the component type of the array\n+     * @param o1 the first object\n+     * @param o2 the second object\n+     * @return a flag whether these objects are equal\n+     */\n     private static boolean arrayMemberEquals(Class<?> componentType, Object o1, Object o2) {\n         if (componentType.isAnnotation()) {\n             return annotationArrayMemberEquals((Annotation[]) o1, (Annotation[]) o2);\n         return Arrays.equals((Object[]) o1, (Object[]) o2);\n     }\n \n+    /**\n+     * Helper method for comparing two arrays of annotations.\n+     *\n+     * @param a1 the first array\n+     * @param a2 the second array\n+     * @return a flag whether these arrays are equal\n+     */\n     private static boolean annotationArrayMemberEquals(Annotation[] a1, Annotation[] a2) {\n         if (a1.length != a2.length) {\n             return false;\n         return true;\n     }\n \n+    /**\n+     * Helper method for generating a hash code for an array.\n+     *\n+     * @param componentType the component type of the array\n+     * @param o the array\n+     * @return a hash code for this array\n+     */\n     private static int arrayMemberHash(Class<?> componentType, Object o) {\n         if (componentType.equals(Byte.TYPE)) {\n             return Arrays.hashCode((byte[]) o);", "timestamp": 1300481215, "metainfo": ""}