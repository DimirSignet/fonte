{"sha": "c90c3af528d14ae8d05919b5768bd1164d150b71", "log": "Make boxing explicit  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n         final EventCounter counter = new EventCounter();\n         EventUtils.bindEventsToMethod(counter, \"eventOccurred\", src, MultipleEventListener.class, \"event1\");\n         assertEquals(0, counter.getCount());\n-        src.listeners.fire().event1(new PropertyChangeEvent(new Date(), \"Day\", 0, 1));\n-        assertEquals(1, counter.getCount());\n-        src.listeners.fire().event2(new PropertyChangeEvent(new Date(), \"Day\", 1, 2));\n+        src.listeners.fire().event1(new PropertyChangeEvent(new Date(), \"Day\", Integer.valueOf(0), Integer.valueOf(1)));\n+        assertEquals(1, counter.getCount());\n+        src.listeners.fire().event2(new PropertyChangeEvent(new Date(), \"Day\", Integer.valueOf(1), Integer.valueOf(2)));\n         assertEquals(1, counter.getCount());\n     }\n \n         public int getEventCount(String eventName)\n         {\n             Integer count = eventCounts.get(eventName);\n-            return count == null ? 0 : count;\n+            return count == null ? 0 : count.intValue();\n         }\n \n         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable\n             Integer count = eventCounts.get(method.getName());\n             if (count == null)\n             {\n-                eventCounts.put(method.getName(), 1);\n+                eventCounts.put(method.getName(), Integer.valueOf(1));\n             }\n             else\n             {\n-                eventCounts.put(method.getName(), count + 1);\n+                eventCounts.put(method.getName(), Integer.valueOf(count.intValue() + 1));\n             }\n             return null;\n         }", "timestamp": 1304509376, "metainfo": ""}