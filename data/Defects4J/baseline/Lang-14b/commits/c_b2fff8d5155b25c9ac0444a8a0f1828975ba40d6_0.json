{"sha": "b2fff8d5155b25c9ac0444a8a0f1828975ba40d6", "log": "increase Entities test coverage as reported by clover  ", "commit": "\n--- a/src/test/org/apache/commons/lang/EntitiesTest.java\n+++ b/src/test/org/apache/commons/lang/EntitiesTest.java\n  */\n package org.apache.commons.lang;\n \n+import java.io.StringWriter;\n+\n import junit.framework.Test;\n import junit.framework.TestCase;\n import junit.framework.TestSuite;\n \n     public void testEscapeNamedEntity() throws Exception\n     {\n-        assertEquals(\"&foo;\", entities.escape(\"\\u00A1\"));\n-        assertEquals(\"x&foo;\", entities.escape(\"x\\u00A1\"));\n-        assertEquals(\"&foo;x\", entities.escape(\"\\u00A1x\"));\n-        assertEquals(\"x&foo;x\", entities.escape(\"x\\u00A1x\"));\n-        assertEquals(\"&foo;&bar;\", entities.escape(\"\\u00A1\\u00A2\"));\n-    }\n-\n+        doTestEscapeNamedEntity(\"&foo;\", \"\\u00A1\");\n+        doTestEscapeNamedEntity(\"x&foo;\", \"x\\u00A1\");\n+        doTestEscapeNamedEntity(\"&foo;x\", \"\\u00A1x\");\n+        doTestEscapeNamedEntity(\"x&foo;x\", \"x\\u00A1x\");\n+        doTestEscapeNamedEntity(\"&foo;&bar;\", \"\\u00A1\\u00A2\");\n+    }\n+\n+    private void doTestEscapeNamedEntity(final String expected, final String entity) throws Exception\n+    {\n+        assertEquals(expected, entities.escape(entity));\n+        StringWriter writer = new StringWriter();\n+        entities.escape(writer, entity);\n+        assertEquals(expected, writer.toString());\n+    }\n+    \n     public void testUnescapeNamedEntity() throws Exception\n     {\n         assertEquals(\"\\u00A1\", entities.unescape(\"&foo;\"));\n \n     public void testUnescapeUnknownEntity() throws Exception\n     {\n-        assertEquals(\"&zzzz;\", entities.unescape(\"&zzzz;\"));\n-    }\n-\n+        doTestUnescapeEntity(\"&zzzz;\", \"&zzzz;\");\n+    }\n+\n+    public void testUnescapeMiscellaneous() throws Exception\n+    {\n+      doTestUnescapeEntity(\"&hello\", \"&hello\");\n+      doTestUnescapeEntity(\"&;\", \"&;\");\n+      doTestUnescapeEntity(\"&#;\", \"&#;\");\n+      doTestUnescapeEntity(\"&#invalid;\", \"&#invalid;\");\n+      doTestUnescapeEntity(\"A\", \"&#X41;\");\n+    }\n+    \n+    private void doTestUnescapeEntity(final String expected, final String entity) throws Exception\n+    {\n+        assertEquals(expected, entities.unescape(entity));\n+        StringWriter writer = new StringWriter();\n+        entities.unescape(writer, entity);\n+        assertEquals(expected, writer.toString());\n+    }\n+    \n     public void testAddEntitiesArray() throws Exception\n     {\n         String[][] array = {{\"foo\", \"100\"}, {\"bar\", \"101\"}};\n     {\n         Entities.ArrayEntityMap map = new Entities.ArrayEntityMap(2);\n         checkSomeEntityMap(map);\n+        Entities.ArrayEntityMap map1 = new Entities.ArrayEntityMap();\n+        checkSomeEntityMap(map1);\n+        assertEquals(-1, map.value(\"null\"));\n+        assertNull(map.name(-1));\n     }\n \n     public void testTreeIntMap() throws Exception\n     {\n         Entities.EntityMap map = new Entities.HashEntityMap();\n         checkSomeEntityMap(map);\n+        assertEquals(-1, map.value(\"noname\"));\n     }\n \n     public void testBinaryIntMap() throws Exception\n     {\n         Entities.BinaryEntityMap map = new Entities.BinaryEntityMap(2);\n         checkSomeEntityMap(map);\n+        Entities.BinaryEntityMap map1 = new Entities.BinaryEntityMap();\n+        checkSomeEntityMap(map1);\n+        \n+        // value cannot be added twice\n+        map1.add(\"baz4a\", 4);\n+        map1.add(\"baz4b\", 4);\n+        assertEquals(-1, map1.value(\"baz4b\"));\n+        assertEquals(\"baz4a\", map1.name(4));\n+        assertNull(map1.name(99));\n+        \n+        Entities.BinaryEntityMap map2 = new Entities.BinaryEntityMap();\n+        map2.add(\"val1\", 1);\n+        map2.add(\"val2\", 2);\n+        map2.add(\"val3\", 3);\n+        map2.add(\"val4\", 4);\n+        map2.add(\"val5\", 5);\n+        assertEquals(\"val5\", map2.name(5));\n+        assertEquals(\"val4\", map2.name(4));\n+        assertEquals(\"val3\", map2.name(3));\n+        assertEquals(\"val2\", map2.name(2));\n+        assertEquals(\"val1\", map2.name(1));\n     }\n \n     public void testPrimitiveIntMap() throws Exception\n         assertEquals(3, map.value(\"baz\"));\n         assertEquals(\"baz\", map.name(3));\n     }\n-\n+    \n     public void testHtml40Nbsp() throws Exception\n     {\n         assertEquals(\"&nbsp;\", Entities.HTML40.escape(\"\\u00A0\"));", "timestamp": 1124671874, "metainfo": ""}