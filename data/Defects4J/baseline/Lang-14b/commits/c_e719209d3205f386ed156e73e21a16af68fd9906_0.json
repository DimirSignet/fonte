{"sha": "e719209d3205f386ed156e73e21a16af68fd9906", "log": "Initial version of LocaleUtils for review of concept  ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/LocaleUtils.java\n+/*\n+ * Copyright 2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+/**\n+ * <p>Operations to assist when working with a Locale.</p>\n+ *\n+ * <p>This class tries to handle <code>null</code> input gracefully.\n+ * An exception will not be thrown for a <code>null</code> input.\n+ * Each method documents its behaviour in more detail.</p>\n+ *\n+ * @author Stephen Colebourne\n+ * @since 2.2\n+ * @version $Id$\n+ */\n+public class LocaleUtils {\n+\n+    /**\n+     * <p><code>LocaleUtils</code> instances should NOT be constructed in standard programming.\n+     * Instead, the class should be used as <code>LocaleUtils.toLocale(\"en_GB\");</code>.</p>\n+     *\n+     * <p>This constructor is public to permit tools that require a JavaBean instance\n+     * to operate.</p>\n+     */\n+    public LocaleUtils() {\n+      super();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Converts a String to a Locale.</p>\n+     *\n+     * <p>This method takes the string format of a locale and creates the\n+     * locale object from it.</p>\n+     *\n+     * <pre>\n+     *   LocaleUtils.toLocale(\"en\")     = new Locale(\"en\", \"\")\n+     *   LocaleUtils.toLocale(\"en_GB\")  = new Locale(\"en\", \"GB\")\n+     *   LocaleUtils.toLocale(\"en_GB_xxx\")  = new Locale(\"en\", \"GB\", \"xxx\")\n+     * </pre>\n+     *\n+     * @param str  the locale String to convert, null returns null\n+     * @return a Locale\n+     * @throws IllegalArgumentException if the string is an invalid format\n+     */\n+    public static Locale toLocale(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        if (str.length() != 2 &&\n+            str.length() != 5 &&\n+            str.length() < 7) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (Character.isLowerCase(str.charAt(0)) == false ||\n+            Character.isLowerCase(str.charAt(1)) == false) {\n+            throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+        }\n+        if (str.length() == 2) {\n+            return new Locale(str, \"\");\n+        } else {\n+            if (Character.isUpperCase(str.charAt(3)) == false ||\n+                Character.isUpperCase(str.charAt(4)) == false) {\n+                throw new IllegalArgumentException(\"Invalid locale format: \" + str);\n+            }\n+            if (str.length() == 5) {\n+                return new Locale(str.substring(0, 2), str.substring(3, 5));\n+            } else {\n+                return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));\n+            }\n+        }\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Obtains the list of locales to search through when performing\n+     * a locale search.</p>\n+     *\n+     * <pre>\n+     * localeLookupList(Locale(\"fr\",\"CA\",\"xxx\"))\n+     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\")]\n+     * </pre>\n+     *\n+     * @param locale  the locale to start from\n+     * @param defaultLocale  the default locale to use if no other is found\n+     * @return the list of Locale objects, 0 being locale\n+     */\n+    public static List localeLookupList(Locale locale) {\n+        return localeLookupList(locale, locale);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Obtains the list of locales to search through when performing\n+     * a locale search.</p>\n+     *\n+     * <pre>\n+     * localeLookupList(Locale(\"fr\", \"CA\", \"xxx\"), Locale(\"en\"))\n+     *   = [Locale(\"fr\",\"CA\",\"xxx\"), Locale(\"fr\",\"CA\"), Locale(\"fr\"), Locale(\"en\"]\n+     * </pre>\n+     *\n+     * <p>This method takes a country code and searches to find the\n+     * languages available for that country. Variant locales are removed.</p>\n+     *\n+     * @param locale  the locale to start from, null returns empty list\n+     * @param defaultLocale  the default locale to use if no other is found\n+     * @return the list of Locale objects, 0 being locale\n+     */\n+    public static List localeLookupList(Locale locale, Locale defaultLocale) {\n+        List list = new ArrayList(4);\n+        if (locale != null) {\n+            list.add(locale);\n+            if (locale.getVariant().length() > 0) {\n+                list.add(new Locale(locale.getLanguage(), locale.getCountry()));\n+            }\n+            if (locale.getCountry().length() > 0) {\n+                list.add(new Locale(locale.getLanguage(), \"\"));\n+            }\n+            if (list.contains(defaultLocale) == false) {\n+                list.add(defaultLocale);\n+            }\n+        }\n+        return list;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Obtains the set of languages supported for a given country.</p>\n+     \n+     * <p>This method takes a country code and searches to find the\n+     * languages available for that country. Variant locales are removed.</p>\n+     *\n+     * @param countryCode  the 2 letter country code, null returns empty\n+     * @return a Set of Locale objects\n+     */\n+    public static Set languagesByCountry(String countryCode) {\n+        Set set = new HashSet();\n+        Locale[] array = Locale.getAvailableLocales();\n+        if (countryCode != null) {\n+            for (int i = 0; i < array.length; i++) {\n+                if (countryCode.equals(array[i].getCountry()) &&\n+                        array[i].getVariant().length() == 0) {\n+                    set.add(array[i]);\n+                }\n+            }\n+        }\n+        return set;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Obtains the set of countries supported for a given language.</p>\n+     * \n+     * <p>This method takes a language code and searches to find the\n+     * countries available for that language. Variant locales are removed.</p>\n+     *\n+     * @param languageCode  the 2 letter language code, null returns empty\n+     * @return a Set of Locale objects\n+     */\n+    public static Set countriesByLanguage(String languageCode) {\n+        Set set = new HashSet();\n+        Locale[] array = Locale.getAvailableLocales();\n+        if (languageCode != null) {\n+            for (int i = 0; i < array.length; i++) {\n+                if (languageCode.equals(array[i].getLanguage()) &&\n+                        array[i].getVariant().length() == 0) {\n+                    set.add(array[i]);\n+                }\n+            }\n+        }\n+        return set;\n+    }\n+\n+}", "timestamp": 1124228486, "metainfo": ""}