{"sha": "8a25b17e37a6a21dc82d5fa42831b563ae6258f6", "log": "Rolling capitalize and uncapitalize back from (CharSequence) to (String)  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      * StringUtils.capitalize(\"cAt\") = \"CAt\"\n      * </pre>\n      *\n-     * @param cs the String to capitalize, may be null\n+     * @param str the String to capitalize, may be null\n      * @return the capitalized String, {@code null} if null String input\n      * @see org.apache.commons.lang3.text.WordUtils#capitalize(String)\n-     * @see #uncapitalize(CharSequence)\n+     * @see #uncapitalize(String)\n      * @since 2.0\n-     * @since 3.0 Changed signature from capitalize(String) to capitalize(CharSequence)\n-     */\n-    public static String capitalize(CharSequence cs) {\n-        if (cs == null ) {\n-            return null;\n-        }\n+     */\n+    public static String capitalize(String str) {\n         int strLen;\n-        if ((strLen = cs.length()) == 0) {\n-            return cs.toString();\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n         }\n         return new StringBuilder(strLen)\n-            .append(Character.toTitleCase(cs.charAt(0)))\n-            .append(StringUtils.subSequence(cs, 1))\n+            .append(Character.toTitleCase(str.charAt(0)))\n+            .append(str.substring(1))\n             .toString();\n     }\n \n     /**\n-     * <p>Uncapitalizes a CharSequence changing the first letter to title case as\n+     * <p>Uncapitalizes a String changing the first letter to title case as\n      * per {@link Character#toLowerCase(char)}. No other letters are changed.</p>\n      *\n      * <p>For a word based algorithm, see {@link org.apache.commons.lang3.text.WordUtils#uncapitalize(String)}.\n      * StringUtils.uncapitalize(\"CAT\") = \"cAT\"\n      * </pre>\n      *\n-     * @param cs the String to uncapitalize, may be null\n+     * @param str the String to uncapitalize, may be null\n      * @return the uncapitalized String, {@code null} if null String input\n      * @see org.apache.commons.lang3.text.WordUtils#uncapitalize(String)\n-     * @see #capitalize(CharSequence)\n+     * @see #capitalize(String)\n      * @since 2.0\n-     * @since 3.0 Changed signature from uncapitalize(String) to uncapitalize(CharSequence)\n-     */\n-    public static String uncapitalize(CharSequence cs) {\n-        if (cs == null ) {\n-            return null;\n-        }\n+     */\n+    public static String uncapitalize(String str) {\n         int strLen;\n-        if ((strLen = cs.length()) == 0) {\n-            return cs.toString();\n+        if (str == null || (strLen = str.length()) == 0) {\n+            return str;\n         }\n         return new StringBuilder(strLen)\n-            .append(Character.toLowerCase(cs.charAt(0)))\n-            .append(StringUtils.subSequence(cs, 1))\n+            .append(Character.toLowerCase(str.charAt(0)))\n+            .append(str.substring(1))\n             .toString();\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n                      \"\", StringUtils.capitalize(\"\") );\n         assertEquals(\"capitalize(single-char-string) failed\",\n                 \"X\", StringUtils.capitalize(\"x\") );\n-        assertEquals(\"capitalize(single-char-string) failed\",\n-                \"X\", StringUtils.capitalize(new StringBuilder(\"x\")) );\n-        assertEquals(\"capitalize(single-char-string) failed\",\n-                \"X\", StringUtils.capitalize(new StringBuffer(\"x\")) );\n-        assertEquals(\"capitalize(single-char-string) failed\",\n-                \"X\", StringUtils.capitalize(CharBuffer.wrap(\"x\")) );\n         \n         assertEquals(\"uncapitalize(String) failed\",\n                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) );\n                      \"\", StringUtils.uncapitalize(\"\") );\n         assertEquals(\"uncapitalize(single-char-string) failed\",\n                 \"x\", StringUtils.uncapitalize(\"X\") );\n-        assertEquals(\"uncapitalize(single-char-string) failed\",\n-                \"x\", StringUtils.uncapitalize(new StringBuilder(\"X\")) );\n-        assertEquals(\"uncapitalize(single-char-string) failed\",\n-                \"x\", StringUtils.uncapitalize(new StringBuffer(\"X\")) );\n-        assertEquals(\"uncapitalize(single-char-string) failed\",\n-                \"x\", StringUtils.uncapitalize(CharBuffer.wrap(\"X\")) );\n                      \n         // reflection type of tests: Sentences.\n         assertEquals(\"uncapitalize(capitalize(String)) failed\",", "timestamp": 1301906558, "metainfo": ""}