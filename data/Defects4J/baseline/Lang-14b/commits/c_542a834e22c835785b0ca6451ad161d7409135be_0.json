{"sha": "542a834e22c835785b0ca6451ad161d7409135be", "log": "Moving text translation classes to the Range class for its configuration  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java\n           }).with(\n             new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE())\n           ).with(\n-            UnicodeEscaper.outsideOf(32, 0x7f) \n+            new AggregateTranslator(\n+                new UnicodeEscaper(Range.between(0, 31)), \n+                new UnicodeEscaper(Range.between(0x80, Integer.MAX_VALUE)) \n+            )\n         );\n \n     /**\n                             {\"/\", \"\\\\/\"}\n                       }),\n             new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE()),\n-            UnicodeEscaper.outsideOf(32, 0x7f) \n+            new AggregateTranslator(\n+                new UnicodeEscaper(Range.between(0, 31)), \n+                new UnicodeEscaper(Range.between(0x80, Integer.MAX_VALUE)) \n+            )\n         );\n             \n     /**\n--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityEscaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityEscaper.java\n import java.io.IOException;\n import java.io.Writer;\n \n+import org.apache.commons.lang3.Range;\n+\n /**\n  * Translates codepoints to their XML numeric entity escaped value.\n  *\n  */\n public class NumericEntityEscaper extends CodePointTranslator {\n \n-    private final int below;\n-    private final int above;\n-    private final boolean between;\n+    private Range<Integer> range;\n \n     /**\n      * <p>Constructs a <code>NumericEntityEscaper</code> for the specified range. This is\n-     * the underlying method for the other constructors/builders. The <code>below</code>\n-     * and <code>above</code> boundaries are inclusive when <code>between</code> is\n-     * <code>true</code> and exclusive when it is <code>false</code>. </p>\n+     * the underlying method for the other constructors/builders. </p>\n      *\n-     * @param below int value representing the lowest codepoint boundary\n-     * @param above int value representing the highest codepoint boundary\n-     * @param between whether to escape between the boundaries or outside them\n+     * @param range range within which to escape entities\n      */\n-    private NumericEntityEscaper(int below, int above, boolean between) {\n-        this.below = below;\n-        this.above = above;\n-        this.between = between;\n+    public NumericEntityEscaper(Range<Integer> range) {\n+        this.range = range;\n     }\n \n     /**\n      * <p>Constructs a <code>NumericEntityEscaper</code> for all characters. </p>\n      */\n     public NumericEntityEscaper() {\n-        this(0, Integer.MAX_VALUE, true);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>NumericEntityEscaper</code> below the specified value (exclusive). </p>\n-     *\n-     * @param codepoint below which to escape\n-     * @return the newly created {@code NumericEntityEscaper} instance\n-     */\n-    public static NumericEntityEscaper below(int codepoint) {\n-        return outsideOf(codepoint, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>NumericEntityEscaper</code> above the specified value (exclusive). </p>\n-     *\n-     * @param codepoint above which to escape\n-     * @return the newly created {@code NumericEntityEscaper} instance\n-     */\n-    public static NumericEntityEscaper above(int codepoint) {\n-        return outsideOf(0, codepoint);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>NumericEntityEscaper</code> between the specified values (inclusive). </p>\n-     *\n-     * @param codepointLow above which to escape\n-     * @param codepointHigh below which to escape\n-     * @return the newly created {@code NumericEntityEscaper} instance\n-     */\n-    public static NumericEntityEscaper between(int codepointLow, int codepointHigh) {\n-        return new NumericEntityEscaper(codepointLow, codepointHigh, true);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>NumericEntityEscaper</code> outside of the specified values (exclusive). </p>\n-     *\n-     * @param codepointLow below which to escape\n-     * @param codepointHigh above which to escape\n-     * @return the newly created {@code NumericEntityEscaper} instance\n-     */\n-    public static NumericEntityEscaper outsideOf(int codepointLow, int codepointHigh) {\n-        return new NumericEntityEscaper(codepointLow, codepointHigh, false);\n+        this.range = Range.between(0, Integer.MAX_VALUE);\n     }\n \n     /**\n      */\n     @Override\n     public boolean translate(int codepoint, Writer out) throws IOException {\n-        if(between) {\n-            if (codepoint < below || codepoint > above) {\n-                return false;\n-            }\n-        } else {\n-            if (codepoint >= below && codepoint <= above) {\n-                return false;\n-            }\n+        if(!range.contains(codepoint)) {\n+            return false;\n         }\n \n         out.write(\"&#\");\n--- a/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java\n+++ b/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java\n import java.io.IOException;\n import java.io.Writer;\n \n+import org.apache.commons.lang3.Range;\n+\n /**\n  * Translates codepoints to their unicode escaped value.\n  *\n  */\n public class UnicodeEscaper extends CodePointTranslator {\n \n-    private final int below;\n-    private final int above;\n-    private final boolean between;\n+    private Range<Integer> range;\n+\n+    /**\n+     * <p>Constructs a <code>UnicodeEscaper</code> for the specified range. This is\n+     * the underlying method for the other constructors/builders. </p>\n+     *\n+     * @param range range within which to escape entities\n+     */\n+    public UnicodeEscaper(Range<Integer> range) {\n+        this.range = range;\n+    }\n \n     /**\n      * <p>Constructs a <code>UnicodeEscaper</code> for all characters. </p>\n      */\n-    public UnicodeEscaper(){\n-        this(0, Integer.MAX_VALUE, true);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>UnicodeEscaper</code> for the specified range. This is\n-     * the underlying method for the other constructors/builders. The <code>below</code>\n-     * and <code>above</code> boundaries are inclusive when <code>between</code> is\n-     * <code>true</code> and exclusive when it is <code>false</code>. </p>\n-     *\n-     * @param below int value representing the lowest codepoint boundary\n-     * @param above int value representing the highest codepoint boundary\n-     * @param between whether to escape between the boundaries or outside them\n-     */\n-    private UnicodeEscaper(int below, int above, boolean between) {\n-        this.below = below;\n-        this.above = above;\n-        this.between = between;\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>UnicodeEscaper</code> below the specified value (exclusive). </p>\n-     *\n-     * @param codepoint below which to escape\n-     * @return the newly created {@code UnicodeEscaper} instance\n-     */\n-    public static UnicodeEscaper below(int codepoint) {\n-        return outsideOf(codepoint, Integer.MAX_VALUE);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>UnicodeEscaper</code> above the specified value (exclusive). </p>\n-     *\n-     * @param codepoint above which to escape\n-     * @return the newly created {@code UnicodeEscaper} instance\n-     */\n-    public static UnicodeEscaper above(int codepoint) {\n-        return outsideOf(0, codepoint);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>UnicodeEscaper</code> outside of the specified values (exclusive). </p>\n-     *\n-     * @param codepointLow below which to escape\n-     * @param codepointHigh above which to escape\n-     * @return the newly created {@code UnicodeEscaper} instance\n-     */\n-    public static UnicodeEscaper outsideOf(int codepointLow, int codepointHigh) {\n-        return new UnicodeEscaper(codepointLow, codepointHigh, false);\n-    }\n-\n-    /**\n-     * <p>Constructs a <code>UnicodeEscaper</code> between the specified values (inclusive). </p>\n-     *\n-     * @param codepointLow above which to escape\n-     * @param codepointHigh below which to escape\n-     * @return the newly created {@code UnicodeEscaper} instance\n-     */\n-    public static UnicodeEscaper between(int codepointLow, int codepointHigh) {\n-        return new UnicodeEscaper(codepointLow, codepointHigh, true);\n+    public UnicodeEscaper() {\n+        this.range = Range.between(0, Integer.MAX_VALUE);\n     }\n \n     /**\n      */\n     @Override\n     public boolean translate(int codepoint, Writer out) throws IOException {\n-        if(between) {\n-            if (codepoint < below || codepoint > above) {\n-                return false;\n-            }\n-        } else {\n-            if (codepoint >= below && codepoint <= above) {\n-                return false;\n-            }\n+        if(!range.contains(codepoint)) {\n+            return false;\n         }\n \n         // TODO: Handle potential + sign per various unicode escape implementations\n--- a/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/NumericEntityEscaperTest.java\n \n import junit.framework.TestCase;\n \n+import org.apache.commons.lang3.Range;\n+\n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.translate.NumericEntityEscaper}.\n  * @version $Id$\n public class NumericEntityEscaperTest extends TestCase {\n \n     public void testBelow() {\n-        NumericEntityEscaper nee = NumericEntityEscaper.below('F');\n+        NumericEntityEscaper nee = new NumericEntityEscaper(Range.between(0, (int)'E'));\n \n         String input = \"ADFGZ\";\n         String result = nee.translate(input);\n     }\n \n     public void testBetween() {\n-        NumericEntityEscaper nee = NumericEntityEscaper.between('F', 'L');\n+        NumericEntityEscaper nee = new NumericEntityEscaper(Range.between((int)'F', (int)'L'));\n \n         String input = \"ADFGZ\";\n         String result = nee.translate(input);\n     }\n \n     public void testAbove() {\n-        NumericEntityEscaper nee = NumericEntityEscaper.above('F');\n+        NumericEntityEscaper nee = new NumericEntityEscaper(Range.between((int)'G', Integer.MAX_VALUE));\n \n         String input = \"ADFGZ\";\n         String result = nee.translate(input);\n--- a/src/test/java/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java\n+++ b/src/test/java/org/apache/commons/lang3/text/translate/UnicodeEscaperTest.java\n \n import junit.framework.TestCase;\n \n+import org.apache.commons.lang3.Range;\n+\n /**\n  * Unit tests for {@link org.apache.commons.lang3.text.translate.UnicodeEscaper}.\n  * @version $Id$\n public class UnicodeEscaperTest extends TestCase {\n \n     public void testBelow() {\n-        UnicodeEscaper ue = UnicodeEscaper.below('F');\n+        UnicodeEscaper ue = new UnicodeEscaper(Range.between(0, (int)'E'));\n \n         String input = \"ADFGZ\";\n         String result = ue.translate(input);\n     }\n \n     public void testBetween() {\n-        UnicodeEscaper ue = UnicodeEscaper.between('F', 'L');\n+        UnicodeEscaper ue = new UnicodeEscaper(Range.between((int)'F', (int)'L'));\n \n         String input = \"ADFGZ\";\n         String result = ue.translate(input);\n     }\n \n     public void testAbove() {\n-        UnicodeEscaper ue = UnicodeEscaper.above('F');\n+        UnicodeEscaper ue = new UnicodeEscaper(Range.between((int)'G', Integer.MAX_VALUE));\n \n         String input = \"ADFGZ\";\n         String result = ue.translate(input);", "timestamp": 1302238041, "metainfo": ""}