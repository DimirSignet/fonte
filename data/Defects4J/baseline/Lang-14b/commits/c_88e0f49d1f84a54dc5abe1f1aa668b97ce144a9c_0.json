{"sha": "88e0f49d1f84a54dc5abe1f1aa668b97ce144a9c", "log": "add methods for inspecting array types  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java\n         throw new IllegalArgumentException(\"unknown type: \" + type);\n     }\n \n+    /**\n+     * Learn whether the specified type denotes an array type.\n+     * @param type\n+     * @return <code>true</code> if <code>type</code> is an array class or a {@link GenericArrayType}.\n+     */\n+    public static boolean isArrayType(Type type) {\n+        return type instanceof GenericArrayType || type instanceof Class<?> && ((Class<?>) type).isArray();\n+    }\n+\n+    /**\n+     * Get the array component type of <code>type</code>.\n+     * @param type\n+     * @return component type or null if type is not an array type\n+     */\n+    public static Type getArrayComponentType(Type type) {\n+        if (type instanceof Class<?>) {\n+            Class<?> clazz = (Class<?>) type;\n+            return clazz.isArray() ? clazz.getComponentType() : null;\n+        }\n+        if (type instanceof GenericArrayType) {\n+            return ((GenericArrayType) type).getGenericComponentType();\n+        }\n+        return null;\n+    }\n+\n }\n--- a/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java\n import java.util.Map;\n import java.util.TreeSet;\n \n-import junit.framework.Assert;\n+import org.junit.Assert;\n \n import org.apache.commons.lang3.StringEscapeUtils;\n import org.apache.commons.lang3.reflect.testbed.Foo;\n                 .getDeclaredField(\"barParents\").getGenericType(), null));\n     }\n \n+    @Test\n+    public void testIsArrayTypeClasses() {\n+        Assert.assertTrue(TypeUtils.isArrayType(boolean[].class));\n+        Assert.assertTrue(TypeUtils.isArrayType(byte[].class));\n+        Assert.assertTrue(TypeUtils.isArrayType(short[].class));\n+        Assert.assertTrue(TypeUtils.isArrayType(int[].class));\n+        Assert.assertTrue(TypeUtils.isArrayType(char[].class));\n+        Assert.assertTrue(TypeUtils.isArrayType(long[].class));\n+        Assert.assertTrue(TypeUtils.isArrayType(float[].class));\n+        Assert.assertTrue(TypeUtils.isArrayType(double[].class));\n+        Assert.assertTrue(TypeUtils.isArrayType(Object[].class));\n+        Assert.assertTrue(TypeUtils.isArrayType(String[].class));\n+\n+        Assert.assertFalse(TypeUtils.isArrayType(boolean.class));\n+        Assert.assertFalse(TypeUtils.isArrayType(byte.class));\n+        Assert.assertFalse(TypeUtils.isArrayType(short.class));\n+        Assert.assertFalse(TypeUtils.isArrayType(int.class));\n+        Assert.assertFalse(TypeUtils.isArrayType(char.class));\n+        Assert.assertFalse(TypeUtils.isArrayType(long.class));\n+        Assert.assertFalse(TypeUtils.isArrayType(float.class));\n+        Assert.assertFalse(TypeUtils.isArrayType(double.class));\n+        Assert.assertFalse(TypeUtils.isArrayType(Object.class));\n+        Assert.assertFalse(TypeUtils.isArrayType(String.class));\n+    }\n+\n+    @Test\n+    public void testIsArrayGenericTypes() throws Exception {\n+        Method method = getClass().getMethod(\"dummyMethod\", List.class, List.class, List.class,\n+                List.class, List.class, List.class, List.class, List[].class, List[].class,\n+                List[].class, List[].class, List[].class, List[].class, List[].class);\n+\n+        Type[] types = method.getGenericParameterTypes();\n+\n+        Assert.assertFalse(TypeUtils.isArrayType(types[0]));\n+        Assert.assertFalse(TypeUtils.isArrayType(types[1]));\n+        Assert.assertFalse(TypeUtils.isArrayType(types[2]));\n+        Assert.assertFalse(TypeUtils.isArrayType(types[3]));\n+        Assert.assertFalse(TypeUtils.isArrayType(types[4]));\n+        Assert.assertFalse(TypeUtils.isArrayType(types[5]));\n+        Assert.assertFalse(TypeUtils.isArrayType(types[6]));\n+        Assert.assertTrue(TypeUtils.isArrayType(types[7]));\n+        Assert.assertTrue(TypeUtils.isArrayType(types[8]));\n+        Assert.assertTrue(TypeUtils.isArrayType(types[9]));\n+        Assert.assertTrue(TypeUtils.isArrayType(types[10]));\n+        Assert.assertTrue(TypeUtils.isArrayType(types[11]));\n+        Assert.assertTrue(TypeUtils.isArrayType(types[12]));\n+        Assert.assertTrue(TypeUtils.isArrayType(types[13]));\n+    }\n+\n+    @Test\n+    public void testGetPrimitiveArrayComponentType() throws Exception {\n+        Assert.assertEquals(boolean.class, TypeUtils.getArrayComponentType(boolean[].class));\n+        Assert.assertEquals(byte.class, TypeUtils.getArrayComponentType(byte[].class));\n+        Assert.assertEquals(short.class, TypeUtils.getArrayComponentType(short[].class));\n+        Assert.assertEquals(int.class, TypeUtils.getArrayComponentType(int[].class));\n+        Assert.assertEquals(char.class, TypeUtils.getArrayComponentType(char[].class));\n+        Assert.assertEquals(long.class, TypeUtils.getArrayComponentType(long[].class));\n+        Assert.assertEquals(float.class, TypeUtils.getArrayComponentType(float[].class));\n+        Assert.assertEquals(double.class, TypeUtils.getArrayComponentType(double[].class));\n+\n+        Assert.assertNull(TypeUtils.getArrayComponentType(boolean.class));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(byte.class));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(short.class));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(int.class));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(char.class));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(long.class));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(float.class));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(double.class));\n+    }\n+\n+    @Test\n+    public void testGetArrayComponentType() throws Exception {\n+        Method method = getClass().getMethod(\"dummyMethod\", List.class, List.class, List.class,\n+                List.class, List.class, List.class, List.class, List[].class, List[].class,\n+                List[].class, List[].class, List[].class, List[].class, List[].class);\n+\n+        Type[] types = method.getGenericParameterTypes();\n+\n+        Assert.assertNull(TypeUtils.getArrayComponentType(types[0]));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(types[1]));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(types[2]));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(types[3]));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(types[4]));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(types[5]));\n+        Assert.assertNull(TypeUtils.getArrayComponentType(types[6]));\n+        Assert.assertEquals(types[0], TypeUtils.getArrayComponentType(types[7]));\n+        Assert.assertEquals(types[1], TypeUtils.getArrayComponentType(types[8]));\n+        Assert.assertEquals(types[2], TypeUtils.getArrayComponentType(types[9]));\n+        Assert.assertEquals(types[3], TypeUtils.getArrayComponentType(types[10]));\n+        Assert.assertEquals(types[4], TypeUtils.getArrayComponentType(types[11]));\n+        Assert.assertEquals(types[5], TypeUtils.getArrayComponentType(types[12]));\n+        Assert.assertEquals(types[6], TypeUtils.getArrayComponentType(types[13]));\n+    }\n+\n     public Iterable<? extends Map<Integer, ? extends Collection<?>>> iterable;\n \n     public static <G extends Comparable<G>> G stub() {\n \n     public interface AInterface<T> {\n     }\n-}\n+}", "timestamp": 1280434870, "metainfo": ""}