{"sha": "5f41ad155cab90d9969502e8ed075ac69d09a108", "log": "LANG-493 - Remove allElementsOfType as generics handles this pretty well now  ", "commit": "\n--- a/src/java/org/apache/commons/lang/Validate.java\n+++ b/src/java/org/apache/commons/lang/Validate.java\n         return collection;\n     }\n \n-    // allElementsOfType collection\n-    //---------------------------------------------------------------------------------\n-\n-    /**\n-     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>\n-     * if the argument collection  is <code>null</code> or has elements that\n-     * are not of type <code>clazz</code> or a subclass.</p>\n-     *\n-     * <pre>\n-     * Validate.allElementsOfType(collection, String.class, \"Collection has invalid elements\");\n-     * </pre>\n-     *\n-     * @param collection  the collection to check, not null\n-     * @param clazz  the <code>Class</code> which the collection's elements are expected to be, not null\n-     * @param message  the exception message if the <code>Collection</code> has elements not of type <code>clazz</code>\n-     * @since 2.1\n-     */\n-    public static void allElementsOfType(Collection<?> collection, Class<?> clazz, String message) {\n-        Validate.notNull(collection);\n-        Validate.notNull(clazz);\n-        for (Iterator<?> it = collection.iterator(); it.hasNext(); ) {\n-            if (clazz.isInstance(it.next()) == false) {\n-                throw new IllegalArgumentException(message);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * <p>\n-     * Validate an argument, throwing <code>IllegalArgumentException</code> if the argument collection is\n-     * <code>null</code> or has elements that are not of type <code>clazz</code> or a subclass.\n-     * </p>\n-     * \n-     * <pre>\n-     * Validate.allElementsOfType(collection, String.class);\n-     * </pre>\n-     * \n-     * <p>\n-     * The message in the exception is 'The validated collection contains an element not of type clazz at index: '.\n-     * </p>\n-     * \n-     * @param collection  the collection to check, not null\n-     * @param clazz  the <code>Class</code> which the collection's elements are expected to be, not null\n-     * @since 2.1\n-     */\n-    public static void allElementsOfType(Collection<?> collection, Class<?> clazz) {\n-        Validate.notNull(collection);\n-        Validate.notNull(clazz);\n-        int i = 0;\n-        for (Iterator<?> it = collection.iterator(); it.hasNext(); i++) {\n-            if (clazz.isInstance(it.next()) == false) {\n-                throw new IllegalArgumentException(\"The validated collection contains an element not of type \"\n-                    + clazz.getName() + \" at index: \" + i);\n-            }\n-        }\n-    }\n-\n     // validIndex array\n     //---------------------------------------------------------------------------------\n \n--- a/src/test/org/apache/commons/lang/ValidateTest.java\n+++ b/src/test/org/apache/commons/lang/ValidateTest.java\n \n     //-----------------------------------------------------------------------\n     //-----------------------------------------------------------------------\n-    public void testAllElementsOfType() {\n-        List<Object> coll = new ArrayList<Object>();\n-        coll.add(\"a\");\n-        coll.add(\"b\");\n-        Validate.allElementsOfType(coll, String.class, \"MSG\");\n-        Validate.allElementsOfType(coll, String.class);\n-        try {\n-            Validate.allElementsOfType(coll, Integer.class, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"MSG\", ex.getMessage());\n-        }\n-        coll.set(1, Boolean.FALSE);\n-        try {\n-            Validate.allElementsOfType(coll, String.class);\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"The validated collection contains an element not of type java.lang.String at index: 1\", ex.getMessage());\n-        }\n-        \n-        coll = new ArrayList<Object>();\n-        coll.add(new Integer(5));\n-        coll.add(new Double(2.0d));\n-        Validate.allElementsOfType(coll, Number.class, \"MSG\");\n-        try {\n-            Validate.allElementsOfType(coll, Integer.class, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"MSG\", ex.getMessage());\n-        }\n-        try {\n-            Validate.allElementsOfType(coll, Double.class, \"MSG\");\n-            fail(\"Expecting IllegalArgumentException\");\n-        } catch (IllegalArgumentException ex) {\n-            assertEquals(\"MSG\", ex.getMessage());\n-        }\n-    }\n-\n-    //-----------------------------------------------------------------------\n-    //-----------------------------------------------------------------------\n     public void testConstructor() {\n         assertNotNull(new Validate());\n         Constructor<?>[] cons = Validate.class.getDeclaredConstructors();", "timestamp": 1257095402, "metainfo": ""}