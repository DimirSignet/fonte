{"sha": "629de7a936b2d14fea792465102ec3a4cf3a6432", "log": "Copying from Collections to Lang  ", "commit": "\n--- /dev/null\n+++ b/src/main/java/org/apache/commons/lang3/compare/ReverseComparator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+\n+import org.apache.commons.collections.ComparatorUtils;\n+\n+/**\n+ * Reverses the order of another comparator by reversing the arguments\n+ * to its {@link #compare(Object, Object) compare} method.\n+ *\n+ * @since Commons Collections 2.0\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Michael A. Smith\n+ *\n+ * @see java.util.Collections#reverseOrder()\n+ */\n+public class ReverseComparator<E> implements Comparator<E>, Serializable {\n+\n+    /** Serialization version from Collections 2.0. */\n+    private static final long serialVersionUID = 2858887242028539265L;\n+\n+    /** The comparator being decorated. */\n+    private final Comparator<E> comparator;\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Creates a comparator that compares objects based on the inverse of their\n+     * natural ordering.  Using this Constructor will create a ReverseComparator\n+     * that is functionally identical to the Comparator returned by\n+     * java.util.Collections.<b>reverseOrder()</b>.\n+     * \n+     * @see java.util.Collections#reverseOrder()\n+     */\n+    public ReverseComparator() {\n+        this(null);\n+    }\n+\n+    /**\n+     * Creates a comparator that inverts the comparison\n+     * of the given comparator.  If you pass in <code>null</code>,\n+     * the ReverseComparator defaults to reversing the\n+     * natural order, as per \n+     * {@link java.util.Collections#reverseOrder()}</b>.\n+     * \n+     * @param comparator Comparator to reverse\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public ReverseComparator(Comparator<E> comparator) {\n+        this.comparator = comparator == null ? ComparatorUtils.NATURAL_COMPARATOR : comparator;\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Compares two objects in reverse order.\n+     * \n+     * @param obj1  the first object to compare\n+     * @param obj2  the second object to compare\n+     * @return negative if obj1 is less, positive if greater, zero if equal\n+     */\n+    public int compare(E obj1, E obj2) {\n+        return comparator.compare(obj2, obj1);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+    /**\n+     * Implement a hash code for this comparator that is consistent with\n+     * {@link #equals(Object) equals}.\n+     * \n+     * @return a suitable hash code\n+     * @since Commons Collections 3.0\n+     */\n+    @Override\n+    public int hashCode() {\n+        return \"ReverseComparator\".hashCode() ^ comparator.hashCode();\n+    }\n+\n+    /**\n+     * Returns <code>true</code> iff <i>that</i> Object is \n+     * is a {@link Comparator} whose ordering is known to be \n+     * equivalent to mine.\n+     * <p>\n+     * This implementation returns <code>true</code>\n+     * iff <code><i>object</i>.{@link Object#getClass() getClass()}</code>\n+     * equals <code>this.getClass()</code>, and the underlying \n+     * comparators are equal.\n+     * Subclasses may want to override this behavior to remain consistent\n+     * with the {@link Comparator#equals(Object) equals} contract.\n+     * \n+     * @param object  the object to compare to\n+     * @return true if equal\n+     * @since Commons Collections 3.0\n+     */\n+    @Override\n+    public boolean equals(Object object) {\n+        if (this == object) {\n+            return true;\n+        }\n+        if (null == object) {\n+            return false;\n+        }\n+        if (object.getClass().equals(this.getClass())) {\n+            ReverseComparator<?> thatrc = (ReverseComparator<?>) object;\n+            return comparator.equals(thatrc.comparator);\n+        }\n+        return false;\n+    }\n+\n+}", "timestamp": 1312780286, "metainfo": ""}