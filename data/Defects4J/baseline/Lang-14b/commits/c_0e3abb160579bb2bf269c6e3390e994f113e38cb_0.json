{"sha": "0e3abb160579bb2bf269c6e3390e994f113e38cb", "log": "Genericizing per LANG-336. Removed two lines in the test that were trying to build a to string up to a class that was not in the hierarchy. The compiler now protects against this.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java\n      *            the superclass to reflect up to (inclusive), may be <code>null</code>\n      * @return int hash code\n      */\n-    public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,\n-            boolean testTransients, Class<?> reflectUpToClass) {\n+    public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object,\n+            boolean testTransients, Class<? super T> reflectUpToClass) {\n         return reflectionHashCode(initialNonZeroOddNumber, multiplierNonZeroOddNumber, object, testTransients,\n                 reflectUpToClass, null);\n     }\n      *             if the number is zero or even\n      * @since 2.0\n      */\n-    public static int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, Object object,\n-            boolean testTransients, Class<?> reflectUpToClass, String[] excludeFields) {\n+    public static <T> int reflectionHashCode(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber, T object,\n+            boolean testTransients, Class<? super T> reflectUpToClass, String[] excludeFields) {\n \n         if (object == null) {\n             throw new IllegalArgumentException(\"The object to build a hash code for must not be null\");\n--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java\n  * @since 2.0\n  * @version $Id$\n  */\n-public class ReflectionToStringBuilder extends ToStringBuilder {\n+public class ReflectionToStringBuilder<T> extends ToStringBuilder<T> {\n \n     /**\n      * <p>\n      *             if the Object is <code>null</code>\n      * @since 2.1\n      */\n-    public static String toString(Object object, ToStringStyle style, boolean outputTransients, boolean outputStatics,\n-            Class<?> reflectUpToClass) {\n-        return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients, outputStatics)\n+    public static <T> String toString(T object, ToStringStyle style, boolean outputTransients, boolean outputStatics,\n+            Class<? super T> reflectUpToClass) {\n+        return new ReflectionToStringBuilder<T>(object, style, null, reflectUpToClass, outputTransients, outputStatics)\n                 .toString();\n     }\n \n      *            The field names to exclude\n      * @return The toString value.\n      */\n-    public static String toStringExclude(Object object, String[] excludeFieldNames) {\n-        return new ReflectionToStringBuilder(object).setExcludeFieldNames(excludeFieldNames).toString();\n+    public static <T> String toStringExclude(T object, String[] excludeFieldNames) {\n+        return new ReflectionToStringBuilder<T>(object).setExcludeFieldNames(excludeFieldNames).toString();\n     }\n \n     /**\n     /**\n      * The last super class to stop appending fields for.\n      */\n-    private Class<?> upToClass = null;\n+    private Class<? super T> upToClass = null;\n \n     /**\n      * <p>\n      * @throws IllegalArgumentException\n      *             if the Object passed in is <code>null</code>\n      */\n-    public ReflectionToStringBuilder(Object object) {\n+    public ReflectionToStringBuilder(T object) {\n         super(object);\n     }\n \n      * @throws IllegalArgumentException\n      *             if the Object passed in is <code>null</code>\n      */\n-    public ReflectionToStringBuilder(Object object, ToStringStyle style) {\n+    public ReflectionToStringBuilder(T object, ToStringStyle style) {\n         super(object, style);\n     }\n \n      * @throws IllegalArgumentException\n      *             if the Object passed in is <code>null</code>\n      */\n-    public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n+    public ReflectionToStringBuilder(T object, ToStringStyle style, StringBuffer buffer) {\n         super(object, style, buffer);\n     }\n \n      *            whether to include static fields\n      * @since 2.1\n      */\n-    public ReflectionToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer, Class<?> reflectUpToClass,\n+    public ReflectionToStringBuilder(T object, ToStringStyle style, StringBuffer buffer, Class<? super T> reflectUpToClass,\n             boolean outputTransients, boolean outputStatics) {\n         super(object, style, buffer);\n         this.setUpToClass(reflectUpToClass);\n      *            the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder reflectionAppendArray(Object array) {\n+    public ToStringBuilder<T> reflectionAppendArray(Object array) {\n         this.getStyle().reflectionAppendArrayDetail(this.getStringBuffer(), null, array);\n         return this;\n     }\n      *            The excludeFieldNames to excluding from toString or <code>null</code>.\n      * @return <code>this</code>\n      */\n-    public ReflectionToStringBuilder setExcludeFieldNames(String[] excludeFieldNamesParam) {\n+    public ReflectionToStringBuilder<T> setExcludeFieldNames(String[] excludeFieldNamesParam) {\n         if (excludeFieldNamesParam == null) {\n             this.excludeFieldNames = null;\n         } else {\n      * @param clazz\n      *            The last super class to stop appending fields for.\n      */\n-    public void setUpToClass(Class<?> clazz) {\n+    public void setUpToClass(Class<? super T> clazz) {\n         this.upToClass = clazz;\n     }\n \n--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java\n  * @since 1.0\n  * @version $Id$\n  */\n-public class ToStringBuilder {\n+public class ToStringBuilder<T> {\n \n     /**\n      * The default style of output to use.\n      * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,boolean,Class)\n      * @since 2.0\n      */\n-    public static String reflectionToString(\n-        Object object,\n+    public static <T> String reflectionToString(\n+        T object,\n         ToStringStyle style,\n         boolean outputTransients,\n-        Class reflectUpToClass) {\n+        Class<? super T> reflectUpToClass) {\n         return ReflectionToStringBuilder.toString(object, style, outputTransients, false, reflectUpToClass);\n     }\n \n     /**\n      * The object being output.\n      */\n-    private final Object object;\n+    private final T object;\n \n     /**\n      * The style of output to use.\n      * @throws IllegalArgumentException  if the Object passed in is\n      *  <code>null</code>\n      */\n-    public ToStringBuilder(Object object) {\n+    public ToStringBuilder(T object) {\n         this(object, getDefaultStyle(), null);\n     }\n \n      * @throws IllegalArgumentException  if the Object passed in is\n      *  <code>null</code>\n      */\n-    public ToStringBuilder(Object object, ToStringStyle style) {\n+    public ToStringBuilder(T object, ToStringStyle style) {\n         this(object, style, null);\n     }\n \n      * @param buffer  the <code>StringBuffer</code> to populate, may be\n      *  <code>null</code>\n      */\n-    public ToStringBuilder(Object object, ToStringStyle style, StringBuffer buffer) {\n+    public ToStringBuilder(T object, ToStringStyle style, StringBuffer buffer) {\n         if (style == null) {\n             style = getDefaultStyle();\n         }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(boolean value) {\n+    public ToStringBuilder<T> append(boolean value) {\n         style.append(buffer, null, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(boolean[] array) {\n+    public ToStringBuilder<T> append(boolean[] array) {\n         style.append(buffer, null, array, null);\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(byte value) {\n+    public ToStringBuilder<T> append(byte value) {\n         style.append(buffer, null, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(byte[] array) {\n+    public ToStringBuilder<T> append(byte[] array) {\n         style.append(buffer, null, array, null);\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(char value) {\n+    public ToStringBuilder<T> append(char value) {\n         style.append(buffer, null, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(char[] array) {\n+    public ToStringBuilder<T> append(char[] array) {\n         style.append(buffer, null, array, null);\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(double value) {\n+    public ToStringBuilder<T> append(double value) {\n         style.append(buffer, null, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(double[] array) {\n+    public ToStringBuilder<T> append(double[] array) {\n         style.append(buffer, null, array, null);\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(float value) {\n+    public ToStringBuilder<T> append(float value) {\n         style.append(buffer, null, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(float[] array) {\n+    public ToStringBuilder<T> append(float[] array) {\n         style.append(buffer, null, array, null);\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(int value) {\n+    public ToStringBuilder<T> append(int value) {\n         style.append(buffer, null, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(int[] array) {\n+    public ToStringBuilder<T> append(int[] array) {\n         style.append(buffer, null, array, null);\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(long value) {\n+    public ToStringBuilder<T> append(long value) {\n         style.append(buffer, null, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(long[] array) {\n+    public ToStringBuilder<T> append(long[] array) {\n         style.append(buffer, null, array, null);\n         return this;\n     }\n      * @param obj  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(Object obj) {\n+    public ToStringBuilder<T> append(Object obj) {\n         style.append(buffer, null, obj, null);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(Object[] array) {\n+    public ToStringBuilder<T> append(Object[] array) {\n         style.append(buffer, null, array, null);\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(short value) {\n+    public ToStringBuilder<T> append(short value) {\n         style.append(buffer, null, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(short[] array) {\n+    public ToStringBuilder<T> append(short[] array) {\n         style.append(buffer, null, array, null);\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, boolean value) {\n+    public ToStringBuilder<T> append(String fieldName, boolean value) {\n         style.append(buffer, fieldName, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>hashCode</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, boolean[] array) {\n+    public ToStringBuilder<T> append(String fieldName, boolean[] array) {\n         style.append(buffer, fieldName, array, null);\n         return this;\n     }\n      *  for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, boolean[] array, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, boolean[] array, boolean fullDetail) {\n         style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, byte value) {\n+    public ToStringBuilder<T> append(String fieldName, byte value) {\n         style.append(buffer, fieldName, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, byte[] array) {\n+    public ToStringBuilder<T> append(String fieldName, byte[] array) {\n         style.append(buffer, fieldName, array, null);\n         return this;\n     }\n      *  for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, byte[] array, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, byte[] array, boolean fullDetail) {\n         style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, char value) {\n+    public ToStringBuilder<T> append(String fieldName, char value) {\n         style.append(buffer, fieldName, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, char[] array) {\n+    public ToStringBuilder<T> append(String fieldName, char[] array) {\n         style.append(buffer, fieldName, array, null);\n         return this;\n     }\n      *  for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, char[] array, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, char[] array, boolean fullDetail) {\n         style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, double value) {\n+    public ToStringBuilder<T> append(String fieldName, double value) {\n         style.append(buffer, fieldName, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, double[] array) {\n+    public ToStringBuilder<T> append(String fieldName, double[] array) {\n         style.append(buffer, fieldName, array, null);\n         return this;\n     }\n      *  for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, double[] array, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, double[] array, boolean fullDetail) {\n         style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, float value) {\n+    public ToStringBuilder<T> append(String fieldName, float value) {\n         style.append(buffer, fieldName, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, float[] array) {\n+    public ToStringBuilder<T> append(String fieldName, float[] array) {\n         style.append(buffer, fieldName, array, null);\n         return this;\n     }\n      *  for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, float[] array, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, float[] array, boolean fullDetail) {\n         style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, int value) {\n+    public ToStringBuilder<T> append(String fieldName, int value) {\n         style.append(buffer, fieldName, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, int[] array) {\n+    public ToStringBuilder<T> append(String fieldName, int[] array) {\n         style.append(buffer, fieldName, array, null);\n         return this;\n     }\n      *  for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, int[] array, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, int[] array, boolean fullDetail) {\n         style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, long value) {\n+    public ToStringBuilder<T> append(String fieldName, long value) {\n         style.append(buffer, fieldName, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, long[] array) {\n+    public ToStringBuilder<T> append(String fieldName, long[] array) {\n         style.append(buffer, fieldName, array, null);\n         return this;\n     }\n      *  for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, long[] array, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, long[] array, boolean fullDetail) {\n         style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @param obj  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, Object obj) {\n+    public ToStringBuilder<T> append(String fieldName, Object obj) {\n         style.append(buffer, fieldName, obj, null);\n         return this;\n     }\n      *  <code>false</code> for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, Object obj, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, Object obj, boolean fullDetail) {\n         style.append(buffer, fieldName, obj, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, Object[] array) {\n+    public ToStringBuilder<T> append(String fieldName, Object[] array) {\n         style.append(buffer, fieldName, array, null);\n         return this;\n     }\n      *  for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, Object[] array, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, Object[] array, boolean fullDetail) {\n         style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @param value  the value to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, short value) {\n+    public ToStringBuilder<T> append(String fieldName, short value) {\n         style.append(buffer, fieldName, value);\n         return this;\n     }\n      * @param array  the array to add to the <code>toString</code>\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, short[] array) {\n+    public ToStringBuilder<T> append(String fieldName, short[] array) {\n         style.append(buffer, fieldName, array, null);\n         return this;\n     }\n      *  for summary info\n      * @return this\n      */\n-    public ToStringBuilder append(String fieldName, short[] array, boolean fullDetail) {\n+    public ToStringBuilder<T> append(String fieldName, short[] array, boolean fullDetail) {\n         style.append(buffer, fieldName, array, Boolean.valueOf(fullDetail));\n         return this;\n     }\n      * @return this\n      * @since 2.0\n      */\n-    public ToStringBuilder appendAsObjectToString(Object object) {\n+    public ToStringBuilder<T> appendAsObjectToString(Object object) {\n         ObjectUtils.identityToString(this.getStringBuffer(), object);\n         return this;\n     }\n      * @return this\n      * @since 2.0\n      */\n-    public ToStringBuilder appendSuper(String superToString) {\n+    public ToStringBuilder<T> appendSuper(String superToString) {\n         if (superToString != null) {\n             style.appendSuper(buffer, superToString);\n         }\n      * @return this\n      * @since 2.0\n      */\n-    public ToStringBuilder appendToString(String toString) {\n+    public ToStringBuilder<T> appendToString(String toString) {\n         if (toString != null) {\n             style.appendToString(buffer, toString);\n         }\n      * @return The object being output.\n      * @since 2.0\n      */\n-    public Object getObject() {\n+    public T getObject() {\n         return object;\n     }\n \n--- a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java\n         assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));\n         assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));\n         assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));\n-        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, List.class));\n         assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));\n         \n         ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n         assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));\n         assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));\n         assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));\n-        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, List.class));\n         assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));\n         assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));\n         this.validateEmptyToStringStyleRegistry();", "timestamp": 1242372782, "metainfo": ""}