{"sha": "a335e80f01870db86c6da463af97e63c74a808e3", "log": "Fix incorrect Javadoc re thrown exceptions; requires further change to private method  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java\n      * \n      * @param a the Annotation for a hash code calculation is desired, not null\n      * @return the calculated hash code\n-     * @throws IllegalAccessException if thrown during annotation access\n-     * @throws InvocationTargetException if thrown during annotation access\n+     * @throws RuntimeException if IllegalAccessException or InvocationTargetException \n+     * or any other Exception is thrown during annotation access\n+     * @throws IllegalStateException if an annotation method invocation returns {@code null}\n      */\n     public static int hashCode(Annotation a) {\n         int result = 0;\n     }\n \n     //besides modularity, this has the advantage of autoboxing primitives:\n-    private static int hashMember(String name, Object value)\n-            throws IllegalAccessException, InvocationTargetException {\n+    private static int hashMember(String name, Object value) {\n         int part1 = name.hashCode() * 127;\n         if (value.getClass().isArray()) {\n             return part1 ^ arrayMemberHash(value.getClass().getComponentType(), value);", "timestamp": 1299601440, "metainfo": ""}