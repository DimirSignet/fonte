{"sha": "45fcab5907176b816eb7009615b5bb530bd00e1d", "log": "Suppress warnings for unread/unused fields and casts  ", "commit": "\n--- a/src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsRemoveTest.java\n         assertEquals(Character.TYPE, array.getClass().getComponentType());\n     }\n     \n+    @SuppressWarnings(\"cast\")\n     public void testRemoveElementDoubleArray() {\n         double[] array;\n         array = ArrayUtils.removeElement((double[]) null, (double) 1);\n         assertEquals(Double.TYPE, array.getClass().getComponentType());\n     }\n     \n+    @SuppressWarnings(\"cast\")\n     public void testRemoveElementFloatArray() {\n         float[] array;\n         array = ArrayUtils.removeElement((float[]) null, (float) 1);\n         assertEquals(Integer.TYPE, array.getClass().getComponentType());\n     }\n     \n+    @SuppressWarnings(\"cast\")\n     public void testRemoveElementLongArray() {\n         long[] array;\n         array = ArrayUtils.removeElement((long[]) null, (long) 1);\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n     }\n     \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"cast\")\n     public void testIndexOfDouble() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testIndexOfDoubleTolerance() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, (double) 0));\n         assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, (double) 0.0001));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testIndexOfDoubleWithStartIndex() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 6));\n     }\n     \n+    @SuppressWarnings(\"cast\")\n     public void testIndexOfDoubleWithStartIndexTolerance() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0));\n         assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testLastIndexOfDouble() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testLastIndexOfDoubleTolerance() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0));\n         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testLastIndexOfDoubleWithStartIndex() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testLastIndexOfDoubleWithStartIndexTolerance() {\n         double[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2, (double) 0));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 4.15, -200, (double) 2.0));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testContainsDouble() {\n         double[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (double) 1));\n         assertEquals(false, ArrayUtils.contains(array, (double) 99));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testContainsDoubleTolerance() {\n         double[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (double) 1, (double) 0));\n     }\n     \n     //-----------------------------------------------------------------------\n+    @SuppressWarnings(\"cast\")\n     public void testIndexOfFloat() {\n         float[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 0));\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 99));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testIndexOfFloatWithStartIndex() {\n         float[] array = null;\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 2));\n         assertEquals(-1, ArrayUtils.indexOf(array, (float) 0, 6));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testLastIndexOfFloat() {\n         float[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0));\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 99));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testLastIndexOfFloatWithStartIndex() {\n         float[] array = null;\n         assertEquals(-1, ArrayUtils.lastIndexOf(array, (float) 0, 2));\n         assertEquals(4, ArrayUtils.lastIndexOf(array, (float) 0, 88));\n     }\n \n+    @SuppressWarnings(\"cast\")\n     public void testContainsFloat() {\n         float[] array = null;\n         assertEquals(false, ArrayUtils.contains(array, (float) 1));\n--- a/src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java\n+++ b/src/test/org/apache/commons/lang/builder/CompareToBuilderTest.java\n     }\n \n     static class TestTransientSubObject extends TestObject {\n+        @SuppressWarnings(\"unused\")\n         private transient int t;\n         public TestTransientSubObject(int a, int t) {\n             super(a);", "timestamp": 1237064426, "metainfo": ""}