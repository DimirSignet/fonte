{"sha": "2155582e3ea27555160d5ab372009281904bfd96", "log": "Copying from Collections to Lang  ", "commit": "\n--- /dev/null\n+++ b/src/test/java/org/apache/commons/lang3/compare/TestReverseComparator.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.collections.comparators;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n+/**\n+ * Tests for ReverseComparator.\n+ *\n+ * @version $Revision$ $Date$\n+ *\n+ * @author Unknown\n+ */\n+public class TestReverseComparator extends AbstractTestComparator<Integer> {\n+\n+    public TestReverseComparator(String testName) {\n+        super(testName);\n+    }\n+\n+    /**\n+     * For the purposes of this test, return a\n+     * ReverseComparator that wraps the java.util.Collections.reverseOrder()\n+     * Comparator.  The resulting comparator should\n+     * sort according to natural Order.  (Note: we wrap\n+     * a Comparator taken from the JDK so that we can\n+     * save a \"canonical\" form in SVN.\n+     *\n+     * @return Comparator that returns \"natural\" order\n+     */\n+    @Override\n+    public Comparator<Integer> makeObject() {\n+        return new ReverseComparator<Integer>(Collections.<Integer>reverseOrder());\n+    }\n+\n+    @Override\n+    public List<Integer> getComparableObjectsOrdered() {\n+        List<Integer> list = new LinkedList<Integer>();\n+        list.add(new Integer(1));\n+        list.add(new Integer(2));\n+        list.add(new Integer(3));\n+        list.add(new Integer(4));\n+        list.add(new Integer(5));\n+        return list;\n+    }\n+\n+    /**\n+     * Override this inherited test since Collections.reverseOrder\n+     * doesn't adhere to the \"soft\" Comparator contract, and we've\n+     * already \"cannonized\" the comparator returned by makeComparator.\n+     */\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void testSerializeDeserializeThenCompare() throws Exception {\n+        Comparator comp = new ReverseComparator(new ComparableComparator());\n+\n+        ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream(buffer);\n+        out.writeObject(comp);\n+        out.close();\n+\n+        ObjectInputStream in = new ObjectInputStream(new ByteArrayInputStream(buffer.toByteArray()));\n+        Object dest = in.readObject();\n+        in.close();\n+        assertEquals(\"obj != deserialize(serialize(obj))\",comp,dest);\n+    }\n+\n+}", "timestamp": 1312780803, "metainfo": ""}