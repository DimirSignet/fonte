{"sha": "7b75d0fd0fafabfd2ecd75c69bca0a70d18b03d8", "log": "Checkstyle and trailing spaces.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n+++ b/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java\n import org.apache.commons.lang3.Validate;\n \n /**\n- * An EventListenerSupport object can be used to manage a list of event \n- * listeners of a particular type. The class provides \n+ * An EventListenerSupport object can be used to manage a list of event\n+ * listeners of a particular type. The class provides\n  * {@link #addListener(Object)} and {@link #removeListener(Object)} methods\n  * for registering listeners, as well as a {@link #fire()} method for firing\n  * events to the listeners.\n- * \n+ *\n  * <p/>\n  * To use this class, suppose you want to support ActionEvents.  You would do:\n  * <code><pre>\n  * public class MyActionEventSource\n  * {\n- *   private EventListenerSupport<ActionListener> actionListeners = \n+ *   private EventListenerSupport<ActionListener> actionListeners =\n  *       EventListenerSupport.create(ActionListener.class);\n  *\n  *   public void someMethodThatFiresAction()\n     private static final long serialVersionUID = 3593265990380473632L;\n \n     /**\n-     * The list used to hold the registered listeners. This list is \n+     * The list used to hold the registered listeners. This list is\n      * intentionally a thread-safe copy-on-write-array so that traversals over\n      * the list of listeners will be atomic.\n      */\n     private List<L> listeners = new CopyOnWriteArrayList<L>();\n \n     /**\n-     * The proxy representing the collection of listeners. Calls to this proxy \n+     * The proxy representing the collection of listeners. Calls to this proxy\n      * object will sent to all registered listeners.\n      */\n     private transient L proxy;\n     private transient L[] prototypeArray;\n \n     /**\n-     * Creates an EventListenerSupport object which supports the specified \n+     * Creates an EventListenerSupport object which supports the specified\n      * listener type.\n      *\n+     * @param <T> the type of the listener interface\n      * @param listenerInterface the type of listener interface that will receive\n      *        events posted using this class.\n-     * \n-     * @return an EventListenerSupport object which supports the specified \n+     *\n+     * @return an EventListenerSupport object which supports the specified\n      *         listener type.\n-     *         \n-     * @throws NullPointerException if <code>listenerInterface</code> is \n+     *\n+     * @throws NullPointerException if <code>listenerInterface</code> is\n      *         <code>null</code>.\n      * @throws IllegalArgumentException if <code>listenerInterface</code> is\n      *         not an interface.\n     }\n \n     /**\n-     * Creates an EventListenerSupport object which supports the provided \n+     * Creates an EventListenerSupport object which supports the provided\n      * listener interface.\n      *\n      * @param listenerInterface the type of listener interface that will receive\n      *        events posted using this class.\n-     * \n-     * @throws NullPointerException if <code>listenerInterface</code> is \n+     *\n+     * @throws NullPointerException if <code>listenerInterface</code> is\n      *         <code>null</code>.\n      * @throws IllegalArgumentException if <code>listenerInterface</code> is\n      *         not an interface.\n     }\n \n     /**\n-     * Creates an EventListenerSupport object which supports the provided \n-     * listener interface using the specified class loader to create the JDK \n+     * Creates an EventListenerSupport object which supports the provided\n+     * listener interface using the specified class loader to create the JDK\n      * dynamic proxy.\n      *\n      * @param listenerInterface the listener interface.\n      * @param classLoader       the class loader.\n-     * \n+     *\n      * @throws NullPointerException if <code>listenerInterface</code> or\n      *         <code>classLoader</code> is <code>null</code>.\n      * @throws IllegalArgumentException if <code>listenerInterface</code> is\n     }\n \n     /**\n-     * Returns a proxy object which can be used to call listener methods on all \n+     * Returns a proxy object which can be used to call listener methods on all\n      * of the registered event listeners. All calls made to this proxy will be\n      * forwarded to all registered listeners.\n      *\n-     * @return a proxy object which can be used to call listener methods on all \n+     * @return a proxy object which can be used to call listener methods on all\n      * of the registered event listeners\n      */\n     public L fire() {\n      * Registers an event listener.\n      *\n      * @param listener the event listener (may not be <code>null</code>).\n-     * \n-     * @throws NullPointerException if <code>listener</code> is \n+     *\n+     * @throws NullPointerException if <code>listener</code> is\n      *         <code>null</code>.\n      */\n     public void addListener(L listener) {\n      * Unregisters an event listener.\n      *\n      * @param listener the event listener (may not be <code>null</code>).\n-     * \n-     * @throws NullPointerException if <code>listener</code> is \n+     *\n+     * @throws NullPointerException if <code>listener</code> is\n      *         <code>null</code>.\n      */\n     public void removeListener(L listener) {\n \n     /**\n      * Serialize.\n-     * @param objectOutputStream\n-     * @throws IOException\n+     * @param objectOutputStream the output stream\n+     * @throws IOException if an IO error occurs\n      */\n     private void writeObject(ObjectOutputStream objectOutputStream) throws IOException {\n         ArrayList<L> serializableListeners = new ArrayList<L>();\n \n     /**\n      * Deserialize.\n-     * @param objectInputStream\n-     * @throws IOException\n-     * @throws ClassNotFoundException\n+     * @param objectInputStream the input stream\n+     * @throws IOException if an IO error occurs\n+     * @throws ClassNotFoundException if the class cannot be resolved\n      */\n     private void readObject(ObjectInputStream objectInputStream) throws IOException, ClassNotFoundException {\n         @SuppressWarnings(\"unchecked\")\n \n     /**\n      * Initialize transient fields.\n-     * @param listenerInterface\n-     * @param classLoader\n+     * @param listenerInterface the class of the listener interface\n+     * @param classLoader the class loader to be used\n      */\n     private void initializeTransientFields(Class<L> listenerInterface, ClassLoader classLoader) {\n         @SuppressWarnings(\"unchecked\")\n \n     /**\n      * Create the proxy object.\n-     * @param listenerInterface\n-     * @param classLoader\n+     * @param listenerInterface the class of the listener interface\n+     * @param classLoader the class loader to be used\n      */\n     private void createProxy(Class<L> listenerInterface, ClassLoader classLoader) {\n         proxy = listenerInterface.cast(Proxy.newProxyInstance(classLoader,\n         /**\n          * Propagates the method call to all registered listeners in place of\n          * the proxy listener object.\n-         * \n-         * @param proxy the proxy object representing a listener on which the \n+         *\n+         * @param proxy the proxy object representing a listener on which the\n          *        invocation was called.\n          * @param method the listener method that will be called on all of the\n          *        listeners.\n          * @param args event arguments to propagate to the listeners.\n+         * @return the result of the method call\n+         * @throws Throwable if an error occurs\n          */\n         public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n             for (L listener : listeners) {", "timestamp": 1300309707, "metainfo": ""}