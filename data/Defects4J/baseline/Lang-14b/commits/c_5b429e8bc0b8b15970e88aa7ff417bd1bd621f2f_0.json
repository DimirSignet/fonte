{"sha": "5b429e8bc0b8b15970e88aa7ff417bd1bd621f2f", "log": "[LANG-751] Include the actual type in the Validate.isInstance and isAssignableFrom exception messages.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/Validate.java\n+++ b/src/main/java/org/apache/commons/lang3/Validate.java\n     private static final String DEFAULT_VALID_INDEX_COLLECTION_EX_MESSAGE =\n         \"The validated collection index is invalid: %d\";\n     private static final String DEFAULT_VALID_STATE_EX_MESSAGE = \"The validated state is false\";\n-    private static final String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE =\n-        \"The validated class can not be converted to the %s class\";\n-    private static final String DEFAULT_IS_INSTANCE_OF_EX_MESSAGE = \"The validated object is not an instance of %s\";\n+    private static final String DEFAULT_IS_ASSIGNABLE_EX_MESSAGE = \"Cannot assign a %s to a %s\";\n+    private static final String DEFAULT_IS_INSTANCE_OF_EX_MESSAGE = \"Expected type: %s, actual: %s\";\n \n     /**\n      * Constructor. This class should not normally be instantiated.\n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the argument is an instance of the specified class; otherwise\n-     * throwing an exception. This method is useful when validating according to an arbitrary\n-     * class</p>\n+     * Validates that the argument is an instance of the specified class, if not throws an exception.\n+     *  \n+     * <p>This method is useful when validating according to an arbitrary class</p>\n      *\n      * <pre>Validate.isInstanceOf(OkClass.class, object);</pre>\n      *\n-     * <p>The message of the exception is &quot;The validated object is not an instance of&quot;\n-     * followed by the name of the class</p>\n+     * <p>The message of the exception is &quot;Expected type: {type}, actual: {obj_type}&quot;</p>\n      *\n      * @param type  the class the object must be validated against, not null\n      * @param obj  the object to check, null throws an exception\n      */\n     public static void isInstanceOf(Class<?> type, Object obj) {\n         if (type.isInstance(obj) == false) {\n-            throw new IllegalArgumentException(String.format(DEFAULT_IS_INSTANCE_OF_EX_MESSAGE, type.getName()));\n+            throw new IllegalArgumentException(String.format(DEFAULT_IS_INSTANCE_OF_EX_MESSAGE, type.getName(),\n+                    obj == null ? \"null\" : obj.getClass().getName()));\n         }\n     }\n \n     //---------------------------------------------------------------------------------\n \n     /**\n-     * <p>Validate that the argument can be converted to the specified class; otherwise\n-     * throwing an exception with the specified message. This method is useful when\n-     * validating if there will be no casting errors.</p>\n+     * Validates that the argument can be converted to the specified class, if not, throws an exception.\n+     * \n+     * <p>This method is useful when validating that there will be no casting errors.</p>\n      *\n      * <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre>\n      *\n-     * <p>The message of the exception is &quot;The validated object can not be converted to the&quot;\n-     * followed by the name of the class and &quot;class&quot;</p>\n+     * <p>The message format of the exception is &quot;Cannot assign {type} to {superType}&quot;</p>\n      *\n      * @param superType  the class the class must be validated against, not null\n      * @param type  the class to check, not null\n-     * @throws IllegalArgumentException if argument can not be converted to the specified class\n+     * @throws IllegalArgumentException if type argument is not assignable to the specified superType\n      * @see #isAssignableFrom(Class, Class, String, Object...)\n      *\n      * @since 3.0\n      */\n     public static void isAssignableFrom(Class<?> superType, Class<?> type) {\n         if (superType.isAssignableFrom(type) == false) {\n-            throw new IllegalArgumentException(String.format(DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, superType.getName()));\n-        }\n-    }\n-\n-    /**\n-     * <p>Validate that the argument can be converted to the specified class; otherwise\n-     * throwing an exception. This method is useful when validating if there will be no\n-     * casting errors.</p>\n+            throw new IllegalArgumentException(String.format(DEFAULT_IS_ASSIGNABLE_EX_MESSAGE, type == null ? \"null\" : type.getName(),\n+                    superType.getName()));\n+        }\n+    }\n+\n+    /**\n+     * Validates that the argument can be converted to the specified class, if not throws an exception.\n+     *  \n+     * <p>This method is useful when validating if there will be no casting errors.</p>\n      *\n      * <pre>Validate.isAssignableFrom(SuperClass.class, object.getClass());</pre>\n      *\n--- a/src/test/java/org/apache/commons/lang3/ValidateTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ValidateTest.java\n     public void testIsInstanceOf() {\n         Validate.isInstanceOf(String.class, \"hi\");\n         Validate.isInstanceOf(Integer.class, 1);\n+    }\n+    \n+    public void testIsInstanceOfExceptionMessage() {\n         try {\n             Validate.isInstanceOf(List.class, \"hi\");\n             fail(\"Expecting IllegalArgumentException\");\n         } catch(IllegalArgumentException e) {\n-            assertEquals(\"The validated object is not an instance of java.util.List\", e.getMessage());\n+            assertEquals(\"Expected type: java.util.List, actual: java.lang.String\", e.getMessage());\n         }\n     }\n     \n     public void testIsAssignable() {\n         Validate.isAssignableFrom(CharSequence.class, String.class);\n         Validate.isAssignableFrom(AbstractList.class, ArrayList.class);\n+    }\n+    \n+    public void testIsAssignableExceptionMessage() {\n         try {\n             Validate.isAssignableFrom(List.class, String.class);\n             fail(\"Expecting IllegalArgumentException\");\n         } catch(IllegalArgumentException e) {\n-            assertEquals(\"The validated class can not be converted to the java.util.List class\", e.getMessage());\n+            assertEquals(\"Cannot assign a java.lang.String to a java.util.List\", e.getMessage());\n         }\n     }\n     ", "timestamp": 1315489265, "metainfo": ""}