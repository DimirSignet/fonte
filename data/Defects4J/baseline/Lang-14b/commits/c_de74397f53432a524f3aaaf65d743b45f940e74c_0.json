{"sha": "de74397f53432a524f3aaaf65d743b45f940e74c", "log": "[lang] Using ReflectionToStringBuilder and excluding secure fields. ASF Bugzilla Bug 36925. http://issues.apache.org/bugzilla/show_bug.cgi?id=36925  ", "commit": "\n--- a/src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java\n+++ b/src/test/org/apache/commons/lang/builder/ReflectionToStringBuilderExcludeTest.java\n \n package org.apache.commons.lang.builder;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n import junit.framework.Assert;\n import junit.framework.TestCase;\n+\n+import org.apache.commons.lang.ArrayUtils;\n \n /**\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">ggregory</a>\n         private String showField = NOT_SECRET_VALUE;\n     }\n \n-    private static final int INDEX_NOT_FOUND = -1;\n-\n     private static final String NOT_SECRET_FIELD = \"showField\";\n \n     private static final String NOT_SECRET_VALUE = \"Hello World!\";\n \n     private static final String SECRET_VALUE = \"secret value\";\n \n-    public void test_toStringExcluding() {\n+    public void test_toStringExclude() {\n         String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), SECRET_FIELD);\n-        this.validateToStringValue(toString);\n+        this.validateSecretFieldAbsent(toString);\n     }\n \n-    public void test_toStringExcludingArray() {\n+    public void test_toStringExcludeArray() {\n         String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{SECRET_FIELD});\n-        this.validateToStringValue(toString);\n+        this.validateSecretFieldAbsent(toString);\n     }\n \n-    void validateToStringValue(String toString) {\n-        Assert.assertEquals(INDEX_NOT_FOUND, toString.indexOf(SECRET_VALUE));\n-        Assert.assertTrue(toString.indexOf(NOT_SECRET_FIELD) > INDEX_NOT_FOUND);\n-        Assert.assertTrue(toString.indexOf(NOT_SECRET_VALUE) > INDEX_NOT_FOUND);\n+    public void test_toStringExcludeArrayWithNull() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null});\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeArrayWithNulls() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new String[]{null, null});\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeCollection() {\n+        List excludeList = new ArrayList();\n+        excludeList.add(SECRET_FIELD);\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n+        this.validateSecretFieldAbsent(toString);\n+    }\n+\n+    public void test_toStringExcludeCollectionWithNull() {\n+        List excludeList = new ArrayList();\n+        excludeList.add(null);\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeCollectionWithNulls() {\n+        List excludeList = new ArrayList();\n+        excludeList.add(null);\n+        excludeList.add(null);\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeEmptyArray() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), ArrayUtils.EMPTY_STRING_ARRAY);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeEmptyCollection() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), new ArrayList());\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeNullArray() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    public void test_toStringExcludeNullCollection() {\n+        String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (Collection) null);\n+        this.validateSecretFieldPresent(toString);\n+    }\n+\n+    private void validateNonSecretField(String toString) {\n+        Assert.assertTrue(toString.indexOf(NOT_SECRET_FIELD) > ArrayUtils.INDEX_NOT_FOUND);\n+        Assert.assertTrue(toString.indexOf(NOT_SECRET_VALUE) > ArrayUtils.INDEX_NOT_FOUND);\n+    }\n+\n+    private void validateSecretFieldAbsent(String toString) {\n+        Assert.assertEquals(ArrayUtils.INDEX_NOT_FOUND, toString.indexOf(SECRET_VALUE));\n+        this.validateNonSecretField(toString);\n+    }\n+\n+    private void validateSecretFieldPresent(String toString) {\n+        Assert.assertTrue(toString.indexOf(SECRET_VALUE) > 0);\n+        this.validateNonSecretField(toString);\n     }\n }", "timestamp": 1145254702, "metainfo": ""}