{"sha": "c3206c4356f610c474ba1b309b885079eb4badfb", "log": "...", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/base64/TestJsonParserBinary.java\n+package com.fasterxml.jackson.core.base64;\n+\n+import java.io.*;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * Tests for verifying that accessing base64 encoded content works ok.\n+ */\n+public class TestJsonParserBinary\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+    /*\n+    /**********************************************************************\n+    /* Unit tests\n+    /**********************************************************************\n+     */\n+\n+    public void testSimple()\n+        throws IOException\n+    {\n+        // let's test reader (char) based first, then stream (byte)\n+        _testSimple(false);\n+        _testSimple(true);\n+    }\n+\n+    public void testInArray()\n+        throws IOException\n+    {\n+        // let's test reader (char) based first, then stream (byte)\n+        _testInArray(false);\n+        _testInArray(true);\n+    }\n+\n+    public void testWithEscaped() throws IOException\n+    {\n+        // let's test reader (char) based first, then stream (byte)\n+        _testEscaped(false);\n+        _testEscaped(true);\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Actual test methods\n+    /**********************************************************************\n+     */\n+\n+    private void _testSimple(boolean useStream)\n+        throws IOException\n+    {\n+        /* The usual sample input string, from Thomas Hobbes's \"Leviathan\"\n+         * (via Wikipedia)\n+         */\n+        final String RESULT = \"Man is distinguished, not only by his reason, but by this singular passion from other animals, which is a lust of the mind, that by a perseverance of delight in the continued and indefatigable generation of knowledge, exceeds the short vehemence of any carnal pleasure.\";\n+        final byte[] RESULT_BYTES = RESULT.getBytes(\"US-ASCII\");\n+\n+        // And here's what should produce it...\n+        final String INPUT_STR = \n+ \"TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyByZWFzb24sIGJ1dCBieSB0aGlz\"\n++\"IHNpbmd1bGFyIHBhc3Npb24gZnJvbSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2Yg\"\n++\"dGhlIG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdodCBpbiB0aGUgY29udGlu\"\n++\"dWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdlbmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRo\"\n++\"ZSBzaG9ydCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=\"\n+            ;\n+\n+        final String DOC = \"\\\"\"+INPUT_STR+\"\\\"\";\n+        JsonParser jp = _getParser(DOC, useStream);\n+\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        byte[] data = jp.getBinaryValue();\n+        assertNotNull(data);\n+        assertArrayEquals(RESULT_BYTES, data);\n+    }\n+\n+    private void _testInArray(boolean useStream)\n+        throws IOException\n+    {\n+        JsonFactory jf = new JsonFactory();\n+\n+        final int entryCount = 7;\n+\n+        StringWriter sw = new StringWriter();\n+        JsonGenerator jg = jf.createGenerator(sw);\n+        jg.writeStartArray();\n+\n+        byte[][] entries = new byte[entryCount][];\n+        for (int i = 0; i < entryCount; ++i) {\n+            byte[] b = new byte[200 + i * 100];\n+            for (int x = 0; x < b.length; ++x) {\n+                b[x] = (byte) (i + x);\n+            }\n+            entries[i] = b;\n+            jg.writeBinary(b);\n+        }\n+\n+        jg.writeEndArray();\n+        jg.close();\n+\n+        JsonParser jp = _getParser(sw.toString(), useStream);\n+\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+\n+        for (int i = 0; i < entryCount; ++i) {\n+            assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+            byte[] b = jp.getBinaryValue();\n+            assertArrayEquals(entries[i], b);\n+        }\n+        assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+    }\n+\n+    private void _testEscaped(boolean useStream) throws IOException\n+    {\n+        // Input: \"Test!\" -> \"VGVzdCE=\"\n+\n+        // First, try with embedded linefeed half-way through:\n+\n+        String DOC = quote(\"VGVz\\\\ndCE=\"); // note: must double-quote to get linefeed\n+        JsonParser jp = _getParser(DOC, useStream);\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        byte[] b = jp.getBinaryValue();\n+        assertEquals(\"Test!\", new String(b, \"US-ASCII\"));\n+        assertNull(jp.nextToken());\n+        jp.close();\n+\n+        // and then with escaped chars\n+//        DOC = quote(\"V\\\\u0047V\\\\u007AdCE=\"); // note: must escape backslash...\n+        DOC = quote(\"V\\\\u0047V\\\\u007AdCE=\"); // note: must escape backslash...\n+        jp = _getParser(DOC, useStream);\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        b = jp.getBinaryValue();\n+        assertEquals(\"Test!\", new String(b, \"US-ASCII\"));\n+        assertNull(jp.nextToken());\n+        jp.close();\n+    }\n+    \n+    /*\n+    /**********************************************************************\n+    /* Other helper methods\n+    /**********************************************************************\n+     */\n+    \n+    private JsonParser _getParser(String doc, boolean useStream)\n+        throws IOException\n+    {\n+        JsonFactory jf = new JsonFactory();\n+        if (useStream) {\n+            return jf.createParser(doc.getBytes(\"UTF-8\"));\n+        }\n+        return jf.createParser(new StringReader(doc));\n+    }\n+}", "timestamp": 1370549649, "metainfo": ""}