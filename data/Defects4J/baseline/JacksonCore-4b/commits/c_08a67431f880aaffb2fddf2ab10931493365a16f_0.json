{"sha": "08a67431f880aaffb2fddf2ab10931493365a16f", "log": "One more significant refactoring: move JsonNode out of core (to mapper); add TreeNode interface locally", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      * for convenience and to make code more explicit in cases\n      * where it deals specifically with trees.\n      */\n-    public abstract void writeTree(JsonNode rootNode)\n+    public abstract void writeTree(TreeNode rootNode)\n         throws IOException, JsonProcessingException;\n \n     /*\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     \n     /**\n      * Method to deserialize JSON content into equivalent \"tree model\",\n-     * represented by root {@link JsonNode} of resulting model.\n+     * represented by root {@link TreeNode} of resulting model.\n      * For JSON Arrays it will an array node (with child nodes),\n      * for objects object node (with child nodes), and for other types\n      * matching leaf node type\n      */\n-    public JsonNode readValueAsTree()\n+    public TreeNode readValueAsTree()\n         throws IOException, JsonProcessingException\n     {\n         ObjectCodec codec = getCodec();\n--- a/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n+++ b/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n         throws IOException, JsonProcessingException;\n \n     /**\n-     * Method to deserialize JSON content as tree expressed\n-     * using set of {@link JsonNode} instances. Returns\n-     * root of the resulting tree (where root can consist\n-     * of just a single node if the current event is a\n-     * value event, not container).\n+     * Method to deserialize JSON content into a POJO, type specified\n+     * with fully resolved type object (so it can be a generic type,\n+     * including containers like {@link java.util.Collection} and\n+     * {@link java.util.Map}).\n      */\n     public abstract <T> T readValue(JsonParser jp, ResolvedType valueType)\n         throws IOException, JsonProcessingException;\n \n     /**\n      * Method to deserialize JSON content as tree expressed\n-     * using set of {@link JsonNode} instances. Returns\n+     * using set of {@link TreeNode} instances. Returns\n      * root of the resulting tree (where root can consist\n      * of just a single node if the current event is a\n      * value event, not container).\n      */\n-    public abstract JsonNode readTree(JsonParser jp)\n+    public abstract <T extends TreeNode> T readTree(JsonParser jp)\n         throws IOException, JsonProcessingException;\n \n     /**\n     public abstract void writeValue(JsonGenerator jgen, Object value)\n         throws IOException, JsonProcessingException;\n \n-    /**\n-     * Method to serialize given Json Tree, using generator\n-     * provided.\n-     */\n-    public abstract void writeTree(JsonGenerator jgen, JsonNode rootNode)\n-        throws IOException, JsonProcessingException;\n-\n     /*\n     /**********************************************************\n     /* API for Tree Model handling\n      * Method for construct root level Object nodes\n      * for Tree Model instances.\n      */\n-    public abstract JsonNode createObjectNode();\n+    public abstract TreeNode createObjectNode();\n \n     /**\n      * Method for construct root level Array nodes\n      * for Tree Model instances.\n      */\n-    public abstract JsonNode createArrayNode();\n+    public abstract TreeNode createArrayNode();\n \n     /**\n      * Method for constructing a {@link JsonParser} for reading\n      * contents of a JSON tree, as if it was external serialized\n      * JSON content.\n      */\n-    public abstract JsonParser treeAsTokens(JsonNode n);\n+    public abstract JsonParser treeAsTokens(TreeNode n);\n \n     /**\n      * Convenience method for converting given JSON tree into instance of specified\n      * value type. This is equivalent to first constructing a {@link JsonParser} to\n      * iterate over contents of the tree, and using that parser for data binding.\n      */\n-    public abstract <T> T treeToValue(JsonNode n, Class<T> valueType)\n+    public abstract <T> T treeToValue(TreeNode n, Class<T> valueType)\n         throws JsonProcessingException;\n \n     /*\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/core/TreeNode.java\n+package com.fasterxml.jackson.core;\n+\n+/**\n+ * Marker interface used to denote JSON Tree nodes, as far as\n+ * the core package knows them (which is very little): mostly\n+ * needed to allow {@link ObjectCodec} to have some level\n+ * of interoperability.\n+ * All real functionality is within <code>JsonNode</code>\n+ * base class in <code>mapper</code> package.\n+ *<p>\n+ * Note that in Jackson 1.x <code>JsonNode</code> itself\n+ * was part of core package: Jackson 2.x refactored this\n+ * since conceptually Tree Model is part of mapper package,\n+ * and so part visible to <code>core</code> package should\n+ * be minimized.\n+ */\n+public interface TreeNode\n+{\n+    /*\n+    /**********************************************************\n+    /* Minimal introspection methods\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Method that can be used for efficient type detection\n+     * when using stream abstraction for traversing nodes.\n+     * Will return the first {@link JsonToken} that equivalent\n+     * stream event would produce (for most nodes there is just\n+     * one token but for structured/container types multiple)\n+     */\n+    public abstract JsonToken asToken();\n+\n+    /**\n+     * If this node is a numeric type (as per {@link #isNumber}),\n+     * returns native type that node uses to store the numeric value;\n+     * otherwise returns null.\n+     * \n+     * @return Type of number contained, if any; or null if node does not\n+     *  contain numeric value.\n+     */\n+    public abstract JsonParser.NumberType numberType();\n+\n+    /*\n+    /**********************************************************\n+    /* Public API: converting to/from Streaming API\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for constructing a {@link JsonParser} instance for\n+     * iterating over contents of the tree that this node is root of.\n+     * Functionally equivalent to first serializing tree using\n+     * {@link ObjectCodec} and then re-parsing but\n+     * more efficient.\n+     */\n+    public abstract JsonParser traverse();\n+\n+}\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n     }\n \n     @Override\n-    public void writeTree(JsonNode rootNode)\n+    public void writeTree(TreeNode rootNode)\n         throws IOException, JsonProcessingException\n     {\n         // As with 'writeObject()', we are not check if write would work\n             if (_objectCodec == null) {\n                 throw new IllegalStateException(\"No ObjectCodec defined for the generator, can not serialize JsonNode-based trees\");\n             }\n-            _objectCodec.writeTree(this, rootNode);\n+            _objectCodec.writeValue(this, rootNode);\n         }\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/core/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/core/package-info.java\n  * is found from the \"jackson-databind\" bundle, except for following\n  * base interfaces that are defined here:\n  * <ul>\n- *<li>{@link com.fasterxml.jackson.core.JsonNode} is included\n+ *<li>{@link com.fasterxml.jackson.core.TreeNode} is included\n  *within Streaming API to support integration of the Tree Model\n  *(which is based on <code>JsonNode</code>) with the basic\n  *parsers and generators (iff using mapping-supporting factory: which\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonGeneratorDelegate.java\n     }\n     \n     @Override\n-    public void writeTree(JsonNode rootNode) throws IOException, JsonProcessingException {\n+    public void writeTree(TreeNode rootNode) throws IOException, JsonProcessingException {\n         delegate.writeTree(rootNode);\n     }\n }", "timestamp": 1327884218, "metainfo": ""}