{"sha": "6890ab1f2745900b2ef1fa8b9ec8a36934ac03f1", "log": "Adding bit more tests for 'isNextXxx()' methods", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n         JsonParser jp = useStream ?\n             jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n             : jf.createParser(new StringReader(DOC));\n-        SerializedString NAME = new SerializedString(\"name\");\n+        final SerializedString NAME = new SerializedString(\"name\");\n         assertFalse(jp.nextFieldName(NAME));\n         assertToken(JsonToken.START_OBJECT, jp.getCurrentToken());\n         assertTrue(jp.nextFieldName(NAME));\n+        assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n+        assertEquals(NAME.getValue(), jp.getCurrentName());\n+        assertEquals(NAME.getValue(), jp.getText());\n+        assertFalse(jp.nextFieldName(NAME));\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.getCurrentToken());\n+        assertEquals(123, jp.getIntValue());\n+\n+        assertFalse(jp.nextFieldName(NAME));\n+        assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n+        assertEquals(\"name2\", jp.getCurrentName());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+\n+        assertFalse(jp.nextFieldName(NAME));\n+        assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n+        assertEquals(\"x\", jp.getCurrentName());\n+\n+        assertFalse(jp.nextFieldName(NAME));\n+        assertToken(JsonToken.VALUE_STRING, jp.getCurrentToken());\n+\n+        assertFalse(jp.nextFieldName(NAME));\n+        assertToken(JsonToken.END_OBJECT, jp.getCurrentToken());\n+\n+        assertFalse(jp.nextFieldName(NAME));\n+        assertNull(jp.getCurrentToken());\n+\n+        jp.close();\n+\n+        // Actually, try again with slightly different sequence...\n+        jp = useStream ? jf.createParser(DOC.getBytes(\"UTF-8\"))\n+                : jf.createParser(DOC);\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        assertFalse(jp.nextFieldName(new SerializedString(\"Nam\")));\n         assertToken(JsonToken.FIELD_NAME, jp.getCurrentToken());\n         assertEquals(NAME.getValue(), jp.getCurrentName());\n         assertEquals(NAME.getValue(), jp.getText());\n--- a/src/test/java/perf/ManualReadPerfWithMedia.java\n+++ b/src/test/java/perf/ManualReadPerfWithMedia.java\n package perf;\n-\n-import java.io.*;\n \n import com.fasterxml.jackson.core.*;\n \n         new ManualReadPerfWithMedia(f, jsonStr).test(\"String\", \"char[]\", json.length);\n     }\n \n+    @Override\n     protected void testRead1(int reps) throws Exception\n     {\n         while (--reps >= 0) {\n         }\n     }\n \n+    @Override\n     protected void testRead2(int reps) throws Exception\n     {\n         final char[] ch = _json.toCharArray();", "timestamp": 1400810317, "metainfo": ""}