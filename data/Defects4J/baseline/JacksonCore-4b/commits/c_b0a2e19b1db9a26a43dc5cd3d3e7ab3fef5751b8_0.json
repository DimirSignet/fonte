{"sha": "b0a2e19b1db9a26a43dc5cd3d3e7ab3fef5751b8", "log": "cosmetic cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n      *\n      * @param out Writer to use for writing JSON content \n      */\n-    public JsonGenerator createGenerator(Writer out)\n-        throws IOException\n-    {\n+    public JsonGenerator createGenerator(Writer out) throws IOException {\n         IOContext ctxt = _createContext(out, false);\n         // [JACKSON-512]: allow wrapping with _outputDecorator\n         if (_outputDecorator != null) {\n      * \n      * @since 2.1\n      */\n-    public JsonGenerator createGenerator(File f, JsonEncoding enc)\n-        throws IOException\n+    public JsonGenerator createGenerator(File f, JsonEncoding enc) throws IOException\n     {\n         OutputStream out = new FileOutputStream(f);\n         // true -> yes, we have to manage the stream since we created it\n      * @deprecated Since 2.2, use {@link #createGenerator(OutputStream, JsonEncoding)} instead.\n      */\n     @Deprecated\n-    public JsonGenerator createJsonGenerator(OutputStream out, JsonEncoding enc)\n-        throws IOException\n-    {\n+    public JsonGenerator createJsonGenerator(OutputStream out, JsonEncoding enc) throws IOException {\n         return createGenerator(out, enc);\n     }\n \n      * @deprecated Since 2.2, use {@link #createGenerator(Writer)} instead.\n      */\n     @Deprecated\n-    public JsonGenerator createJsonGenerator(Writer out)\n-        throws IOException\n-    {\n+    public JsonGenerator createJsonGenerator(Writer out) throws IOException {\n         return createGenerator(out);\n     }\n \n      * @deprecated Since 2.2, use {@link #createGenerator(File,JsonEncoding)} instead.\n      */\n     @Deprecated\n-    public JsonGenerator createJsonGenerator(File f, JsonEncoding enc)\n-        throws IOException\n-    {\n+    public JsonGenerator createJsonGenerator(File f, JsonEncoding enc) throws IOException {\n         return createGenerator(f, enc);\n     }\n \n      * \n      * @since 2.1\n      */\n-    protected JsonParser _createParser(InputStream in, IOContext ctxt)\n-        throws IOException, JsonParseException\n-    {\n+    protected JsonParser _createParser(InputStream in, IOContext ctxt) throws IOException {\n         // As per [JACKSON-259], may want to fully disable canonicalization:\n         return new ByteSourceJsonBootstrapper(ctxt, in).constructParser(_parserFeatures,\n                 _objectCodec, _rootByteSymbols, _rootCharSymbols,\n      * \n      * @since 2.1\n      */\n-    protected JsonParser _createParser(Reader r, IOContext ctxt)\n-        throws IOException, JsonParseException\n-    {\n+    protected JsonParser _createParser(Reader r, IOContext ctxt) throws IOException {\n         return new ReaderBasedJsonParser(ctxt, _parserFeatures, r, _objectCodec,\n                 _rootCharSymbols.makeChild(isEnabled(JsonFactory.Feature.CANONICALIZE_FIELD_NAMES),\n                         isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES)));", "timestamp": 1397147767, "metainfo": ""}