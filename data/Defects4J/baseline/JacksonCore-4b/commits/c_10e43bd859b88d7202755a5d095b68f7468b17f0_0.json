{"sha": "10e43bd859b88d7202755a5d095b68f7468b17f0", "log": "more testing", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n         assertEquals(true, jp.getBooleanValue());\n         jp.close();\n     }\n-\n-    public void testSimpleShort() throws Exception\n-    {\n-        final String NUM = \"-12.9\";\n-        JsonParser jp = FACTORY.createParser(NUM);\n-        assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n-        assertEquals(JsonParser.NumberType.DOUBLE, jp.getNumberType());\n-        assertEquals(NUM, jp.getText());\n-        assertEquals(NUM, String.valueOf(jp.getDoubleValue()));\n-        jp.close();\n-    }\n     \n     public void testSimpleInt() throws Exception\n     {\n-        int EXP_I = 1234;\n-\n-        JsonParser jp = FACTORY.createParser(\"[ \"+EXP_I+\" ]\");\n+        for (int EXP_I : new int[] { 1234, -999, 0, -2 }) {\n+            _testSimpleInt(EXP_I, false);\n+            _testSimpleInt(EXP_I, true);\n+        }\n+    }\n+\n+    private void _testSimpleInt(int EXP_I, boolean useStream) throws Exception\n+    {\n+        String DOC = \"[ \"+EXP_I+\" ]\";\n+        JsonParser jp = useStream\n+                ? FACTORY.createParser(DOC)\n+                : FACTORY.createParser(DOC.getBytes(\"UTF-8\"));\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         assertEquals(JsonParser.NumberType.INT, jp.getNumberType());\n         assertEquals((long) EXP_I, jp.getLongValue());\n         assertEquals((double) EXP_I, jp.getDoubleValue());\n         assertEquals(BigDecimal.valueOf((long) EXP_I), jp.getDecimalValue());\n+        assertToken(JsonToken.END_ARRAY, jp.nextToken());\n+        assertNull(jp.nextToken());\n+        jp.close();\n+\n+        DOC = String.valueOf(EXP_I);\n+        jp = useStream\n+                ? FACTORY.createParser(DOC)\n+                : FACTORY.createParser(DOC.getBytes(\"UTF-8\"));\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertEquals(DOC, jp.getText());\n+\n+        int i = 0;\n+        \n+        try {\n+            i = jp.getIntValue();\n+        } catch (Exception e) {\n+            throw new Exception(\"Failed to parse input '\"+DOC+\"' (parser of type \"+jp.getClass().getSimpleName()+\")\", e);\n+        }\n+        \n+        assertEquals(EXP_I, i);\n+\n+        assertEquals((long) EXP_I, jp.getLongValue());\n+        assertEquals((double) EXP_I, jp.getDoubleValue());\n+        assertEquals(BigDecimal.valueOf((long) EXP_I), jp.getDecimalValue());\n+        assertNull(jp.nextToken());\n         jp.close();\n     }\n \n         }\n     }\n \n-    public void testSimpleLong()\n-        throws Exception\n+    public void testSimpleLong() throws Exception\n     {\n         long EXP_L = 12345678907L;\n \n         jp.close();\n     }\n \n-    public void testLongRange()\n-        throws Exception\n+    public void testLongRange() throws Exception\n     {\n         for (int i = 0; i < 2; ++i) {\n             long belowMinInt = -1L + Integer.MIN_VALUE;\n     public void testSimpleDouble() throws Exception\n     {\n         final String[] INPUTS = new String[] {\n-            \"1234.00\", \"2.1101567E-16\", \"1.0e5\", \"2.5e+5\", \"9e4\", \"-12e-3\", \"0.25\",\n-            \"-0.5\", \"-999.0\"\n+            \"1234.00\", \"2.1101567E-16\", \"1.0e5\", \"0.0\", \"1.0\", \"2.5e+5\", \"9e4\", \"-12e-3\", \"0.25\",\n+            \"-0.5\", \"-12.9\", \"-999.0\"\n         };\n         for (int input = 0; input < 2; ++input) {\n             for (int i = 0; i < INPUTS.length; ++i) {\n                 } else {\n                     jp = FACTORY.createParser(STR);\n                 }\n-                assertToken(JsonToken.VALUE_NUMBER_FLOAT, jp.nextToken());\n+                JsonToken t = null;\n+\n+                try {\n+                    t = jp.nextToken();\n+                } catch (Exception e) {\n+                    throw new Exception(\"Failed to parse input '\"+STR+\"' (parser of type \"+jp.getClass().getSimpleName()+\")\", e);\n+                }\n+                \n+                assertToken(JsonToken.VALUE_NUMBER_FLOAT, t);\n                 assertEquals(STR, jp.getText());\n                 assertNull(jp.nextToken());\n                 jp.close();", "timestamp": 1399522389, "metainfo": ""}