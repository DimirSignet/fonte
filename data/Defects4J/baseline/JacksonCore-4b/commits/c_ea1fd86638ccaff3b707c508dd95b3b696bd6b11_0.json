{"sha": "ea1fd86638ccaff3b707c508dd95b3b696bd6b11", "log": "Rewrite whitespace skipping, based on superior speed by code from 2.2; lookup table not that good it seems", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n     protected final static int INT_SLASH = '/';\n     protected final static int INT_COLON = ':';\n     protected final static int INT_COMMA = ',';\n+    protected final static int INT_HASH = '#';\n \n     // fp numbers\n     protected final static int INT_PERIOD = '.';\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     \n     private final int _skipWS() throws IOException\n     {\n+        /*\n         final int[] codes = _icWS;\n         while (_inputPtr < _inputEnd || loadMore()) {\n             final int i = _inputBuffer[_inputPtr++] & 0xFF;\n                 _reportInvalidChar(i);\n             }\n         }\n+        */\n+        while (_inputPtr < _inputEnd || loadMore()) {\n+            int i = _inputBuffer[_inputPtr++] & 0xFF;\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH) {\n+                    _skipComment();\n+                    continue;\n+                }\n+                if (i == INT_HASH) {\n+                    if (_skipYAMLComment()) {\n+                        continue;\n+                    }\n+                }\n+                return i;\n+            } else if (i != INT_SPACE) {\n+                if (i == INT_LF) {\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n+                } else if (i == INT_CR) {\n+                    _skipCR();\n+                } else if (i != INT_TAB) {\n+                    _throwInvalidSpace(i);\n+                }\n+            }\n+        }        \n         throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");\n     }\n \n     private final int _skipWSOrEnd() throws IOException\n     {\n+        while ((_inputPtr < _inputEnd) || loadMore()) {\n+            int i = _inputBuffer[_inputPtr++] & 0xFF;\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH) {\n+                    _skipComment();\n+                    continue;\n+                }\n+                if (i == INT_HASH) {\n+                    if (_skipYAMLComment()) {\n+                        continue;\n+                    }\n+                }\n+                return i;\n+            } else if (i != INT_SPACE) {\n+                if (i == INT_LF) {\n+                    ++_currInputRow;\n+                    _currInputRowStart = _inputPtr;\n+                } else if (i == INT_CR) {\n+                    _skipCR();\n+                } else if (i != INT_TAB) {\n+                    _throwInvalidSpace(i);\n+                }\n+            }\n+        }\n+        // We ran out of input...\n+        _handleEOF();\n+        return -1;\n+        \n+        /*\n         final int[] codes = _icWS;\n         while ((_inputPtr < _inputEnd) || loadMore()) {\n             final int i = _inputBuffer[_inputPtr++] & 0xFF;\n                 return i;\n             case 1: // skip\n                 continue;\n-            case 2: // 2-byte UTF\n-                _skipUtf8_2(i);\n-                break;\n-            case 3: // 3-byte UTF\n-                _skipUtf8_3(i);\n-                break;\n-            case 4: // 4-byte UTF\n-                _skipUtf8_4(i);\n-                break;\n             case INT_LF:\n                 ++_currInputRow;\n                 _currInputRowStart = _inputPtr;\n                     return i;\n                 }\n                 break;\n+//            case 2: // 2-byte UTF\n+//            case 3: // 3-byte UTF\n+//            case 4: // 4-byte UTF\n             default: // e.g. -1\n                 _reportInvalidChar(i);\n             }\n         // We ran out of input...\n         _handleEOF();\n         return -1;\n+        */\n     }\n     \n     private final int _skipColon() throws IOException\n         if (i == INT_COLON) { // common case, no leading space\n             i = _inputBuffer[++_inputPtr];\n             if (i > INT_SPACE) { // nor trailing\n+                if (i == INT_SLASH || i == INT_HASH) {\n+                    return _skipColon2(true);\n+                }\n                 ++_inputPtr;\n                 return i;\n             }\n             if (i == INT_SPACE || i == INT_TAB) {\n                 i = (int) _inputBuffer[++_inputPtr];\n                 if (i > INT_SPACE) {\n+                    if (i == INT_SLASH || i == INT_HASH) {\n+                        return _skipColon2(true);\n+                    }\n                     ++_inputPtr;                    \n                     return i;\n                 }\n         }\n         if (i == INT_COLON) {\n             i = _inputBuffer[++_inputPtr];\n-            if (i > 32) {\n+            if (i > INT_SPACE) {\n+                if (i == INT_SLASH || i == INT_HASH) {\n+                    return _skipColon2(true);\n+                }\n                 ++_inputPtr;\n                 return i;\n             }\n             if (i == INT_SPACE || i == INT_TAB) {\n                 i = (int) _inputBuffer[++_inputPtr];\n                 if (i > INT_SPACE) {\n+                    if (i == INT_SLASH || i == INT_HASH) {\n+                        return _skipColon2(true);\n+                    }\n                     ++_inputPtr;\n                     return i;\n                 }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestComments.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestComments.java\n     }\n \n     public void testYAMLCommentsBytes() throws Exception {\n-        _testYAMLComments(true);\n+        JsonFactory f = new JsonFactory();\n+        f.configure(JsonParser.Feature.ALLOW_YAML_COMMENTS, true);\n+        _testYAMLComments(f, true);\n+        _testCommentsGenerated(f, true, \"# foo\\n\");\n     }\n \n     public void testYAMLCommentsChars() throws Exception {\n-        _testYAMLComments(false);\n-    }\n-    \n-    private void _testYAMLComments(boolean useStream) throws Exception\n-    {\n-        JsonFactory jf = new JsonFactory();\n-        jf.configure(JsonParser.Feature.ALLOW_YAML_COMMENTS, true);\n+        JsonFactory f = new JsonFactory();\n+        f.configure(JsonParser.Feature.ALLOW_YAML_COMMENTS, true);\n+        _testYAMLComments(f, false);\n+        _testCommentsGenerated(f, false, \"# foo\\n\");\n+    }\n+\n+    public void testCCommentsBytes() throws Exception {\n+        JsonFactory f = new JsonFactory();\n+        f.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n+        _testCommentsGenerated(f, true, \"/* foo */\\n\");\n+    }\n+\n+    public void testCCommentsChars() throws Exception {\n+        JsonFactory f = new JsonFactory();\n+        f.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n+        _testCommentsGenerated(f, false, \"/* foo */\\n\");\n+    }\n+\n+    public void testCppCommentsBytes() throws Exception {\n+        JsonFactory f = new JsonFactory();\n+        f.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n+        _testCommentsGenerated(f, true, \"// foo\\n\");\n+    }\n+\n+    public void testCppCommentsChars() throws Exception {\n+        JsonFactory f = new JsonFactory();\n+        f.configure(JsonParser.Feature.ALLOW_COMMENTS, true);\n+        _testCommentsGenerated(f, false, \"// foo \\n\");\n+    }\n+    \n+    @SuppressWarnings(\"resource\")\n+    private void _testCommentsGenerated(JsonFactory f, boolean useStream, String comment) throws Exception\n+    {\n+        for (String arg : new String[] {\n+                \":%s123\",\n+                \" :%s123\",\n+                \"\\t:%s123\",\n+                \": %s123\",\n+                \":\\t%s123\",\n+        }) {\n+            String commented = String.format(arg, comment);\n+            \n+            final String DOC = \"{\\\"abc\\\"\" + commented + \"}\";\n+            JsonParser jp = useStream ?\n+                    f.createParser(DOC.getBytes(\"UTF-8\"))\n+                    : f.createParser(DOC);\n+            assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n+            JsonToken t = null;\n+            try {\n+                t = jp.nextToken();\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed on '\"+DOC+\"' due to \"+e, e);\n+            }\n+            assertEquals(JsonToken.FIELD_NAME, t);\n+\n+            try {\n+                t = jp.nextToken();\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed on '\"+DOC+\"' due to \"+e, e);\n+            }\n+            assertEquals(JsonToken.VALUE_NUMBER_INT, t);\n+            assertEquals(123, jp.getIntValue());\n+            assertEquals(JsonToken.END_OBJECT, jp.nextToken());\n+            jp.close();\n+        }\n+        \n+    }\n+    \n+    private void _testYAMLComments(JsonFactory f, boolean useStream) throws Exception\n+    {\n         final String DOC = \"# foo\\n\"\n                 +\" {\\\"a\\\" # xyz\\n\"\n                 +\" : # foo\\n\"\n                 +\"} # x\"\n                 ;\n         JsonParser jp = useStream ?\n-                jf.createParser(DOC.getBytes(\"UTF-8\"))\n-                : jf.createParser(DOC);\n+                f.createParser(DOC.getBytes(\"UTF-8\"))\n+                : f.createParser(DOC);\n         assertEquals(JsonToken.START_OBJECT, jp.nextToken());\n         assertEquals(JsonToken.FIELD_NAME, jp.nextToken());\n         assertEquals(\"a\", jp.getCurrentName());", "timestamp": 1398964475, "metainfo": ""}