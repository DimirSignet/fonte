{"sha": "18bc774fb5842c101443acb0eae175cf5755c7ea", "log": "streamlining of ws skipping for byte-based sources", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n         }\n     }\n \n+    /**\n+     * @since 2.4\n+     */\n+    protected final int _eofAsNextChar() throws JsonParseException {\n+        _handleEOF();\n+        return -1;\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Internal/package methods: Error reporting\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n         // it is either non-whitespace; or we have longer run of white space\n         if (_inputPtr >= _inputEnd) {\n             if (!loadMore()) {\n-                _handleEOF();\n-                return -1;\n+                return _eofAsNextChar();\n             }\n         }\n         int i = _inputBuffer[_inputPtr++];\n         while (true) {\n             if (_inputPtr >= _inputEnd) {\n                 if (!loadMore()) { // We ran out of input...\n-                    _handleEOF();\n-                    return -1;\n+                    return _eofAsNextChar();\n                 }\n             }\n             int i = (int) _inputBuffer[_inputPtr++];\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     \n     private final int _skipWSOrEnd() throws IOException\n     {\n+        // Let's handle first character separately since it is likely that\n+        // it is either non-whitespace; or we have longer run of white space\n+        if (_inputPtr >= _inputEnd) {\n+            if (!loadMore()) {\n+                return _eofAsNextChar();\n+            }\n+        }\n+        int i = _inputBuffer[_inputPtr++] & 0xFF;\n+        if (i > INT_SPACE) {\n+            if (i == INT_SLASH || i == INT_HASH) {\n+                --_inputPtr;\n+                return _skipWSOrEnd2();\n+            }\n+            return i;\n+        }\n+        if (i != INT_SPACE) {\n+            if (i == INT_LF) {\n+                ++_currInputRow;\n+                _currInputRowStart = _inputPtr;\n+            } else if (i == INT_CR) {\n+                _skipCR();\n+            } else if (i != INT_TAB) {\n+                _throwInvalidSpace(i);\n+            }\n+        }\n+        \n         while (_inputPtr < _inputEnd) {\n-            int i = _inputBuffer[_inputPtr++] & 0xFF;\n+            i = _inputBuffer[_inputPtr++] & 0xFF;\n             if (i > INT_SPACE) {\n                 if (i == INT_SLASH || i == INT_HASH) {\n                     --_inputPtr;\n             }\n         }\n         // We ran out of input...\n-        _handleEOF();\n-        return -1;\n+        return _eofAsNextChar();\n     }\n     \n     private final int _skipColon() throws IOException", "timestamp": 1399611834, "metainfo": ""}