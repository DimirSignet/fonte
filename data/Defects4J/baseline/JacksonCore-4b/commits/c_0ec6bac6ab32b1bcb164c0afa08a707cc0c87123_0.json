{"sha": "0ec6bac6ab32b1bcb164c0afa08a707cc0c87123", "log": "Add a test case for #78", "commit": "\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNumericValues.java\n public class TestNumericValues\n     extends com.fasterxml.jackson.test.BaseTest\n {\n-    public void testSimpleInt()\n-        throws Exception\n+    public void testSimpleBoolean() throws Exception\n+    {\n+        JsonParser jp = createParserUsingReader(\"[ true ]\");\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+        assertToken(JsonToken.VALUE_TRUE, jp.nextToken());\n+        assertEquals(true, jp.getBooleanValue());\n+        jp.close();\n+    }\n+\n+    public void testSimpleInt() throws Exception\n     {\n         int EXP_I = 1234;\n \n         assertEquals((long) EXP_I, jp.getLongValue());\n         assertEquals((double) EXP_I, jp.getDoubleValue());\n         assertEquals(BigDecimal.valueOf((long) EXP_I), jp.getDecimalValue());\n-    }\n-\n-    public void testIntRange()\n-        throws Exception\n+        jp.close();\n+    }\n+\n+    public void testIntRange() throws Exception\n     {\n         // let's test with readers and streams, separate code paths:\n         for (int i = 0; i < 2; ++i) {\n             assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n             assertEquals(JsonParser.NumberType.INT, jp.getNumberType());\n             assertEquals(Integer.MIN_VALUE, jp.getIntValue());\n-        }\n-    }\n-    \n-    public void testInvalidIntAccess()\n-        throws Exception\n-    {\n-        JsonParser jp = createParserUsingReader(\"[ \\\"abc\\\" ]\");\n-        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n-        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n-        try {\n-            jp.getIntValue();\n-            fail(\"Expected error trying to call getIntValue on non-numeric value\");\n-        } catch (JsonParseException e) {\n-            verifyException(e, \"can not use numeric value accessors\");\n         }\n     }\n \n             assertToken(JsonToken.END_ARRAY, jp.nextToken());        \n             jp.close();\n         }\n-}\n+    }\n+\n+    // for [Issue#78]\n+    public void testBigNumbers() throws Exception\n+    {\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < 520; ++i) { // input buffer is 512 bytes by default\n+            sb.append('1');\n+        }\n+        final String NUMBER_STR = sb.toString();\n+        BigInteger biggie = new BigInteger(NUMBER_STR);\n+        \n+        for (int i = 0; i < 2; ++i) {\n+            JsonParser jp;\n+            if (i == 0) {\n+                jp = createParserUsingReader(NUMBER_STR);                \n+            } else {\n+                jp = this.createParserUsingStream(NUMBER_STR, \"UTF-8\");\n+            }\n+            assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+            assertEquals(JsonParser.NumberType.BIG_INTEGER, jp.getNumberType());\n+            assertEquals(NUMBER_STR, jp.getText());\n+            assertEquals(biggie, jp.getBigIntegerValue());\n+            jp.close();\n+        }\n+    }\n     \n     public void testSimpleDouble()\n         throws Exception\n \n     /*\n     /**********************************************************\n-    /* New tests for 1.3 features\n+    /* Tests for invalid access\n     /**********************************************************\n      */\n-\n-    public void testSimpleBoolean()\n-        throws Exception\n-    {\n-        JsonParser jp = createParserUsingReader(\"[ true ]\");\n-        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n-        assertToken(JsonToken.VALUE_TRUE, jp.nextToken());\n-        assertEquals(true, jp.getBooleanValue());\n-    }\n-\n+    \n     public void testInvalidBooleanAccess()\n         throws Exception\n     {\n             verifyException(e, \"not of boolean type\");\n         }\n     }\n+\n+    public void testInvalidIntAccess() throws Exception\n+    {\n+        JsonParser jp = createParserUsingReader(\"[ \\\"abc\\\" ]\");\n+        assertToken(JsonToken.START_ARRAY, jp.nextToken());\n+        assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+        try {\n+            jp.getIntValue();\n+            fail(\"Expected error trying to call getIntValue on non-numeric value\");\n+        } catch (JsonParseException e) {\n+            verifyException(e, \"can not use numeric value accessors\");\n+        }\n+    }\n }", "timestamp": 1370550386, "metainfo": ""}