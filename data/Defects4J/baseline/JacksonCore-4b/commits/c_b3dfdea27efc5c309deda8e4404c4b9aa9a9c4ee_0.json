{"sha": "b3dfdea27efc5c309deda8e4404c4b9aa9a9c4ee", "log": "eclipse warning cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java\n+++ b/src/main/java/com/fasterxml/jackson/core/format/DataFormatMatcher.java\n             return null;\n         }\n         if (_originalStream == null) {\n-            return _match.createJsonParser(_bufferedData, _bufferedStart, _bufferedLength);\n+            return _match.createParser(_bufferedData, _bufferedStart, _bufferedLength);\n         }\n-        return _match.createJsonParser(getDataStream());\n+        return _match.createParser(getDataStream());\n     }\n     \n     /**\n--- a/src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java\n      * Will encode given String as UTF-8 (without any quoting), return\n      * resulting byte array.\n      */\n+    @SuppressWarnings(\"resource\")\n     public byte[] encodeAsUTF8(String text)\n     {\n         ByteArrayBuilder byteBuilder = _byteBuilder;\n--- a/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java\n     /**********************************************************\n      */\n     \n+    @SuppressWarnings(\"resource\")\n     public Reader constructReader()\n         throws IOException\n     {\n--- a/src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java\n+++ b/src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java\n         for (int length : lengths) {\n             String str = generateRandom(length);\n             StringWriter sw = new StringWriter(length*2);\n-            JsonGenerator jgen = f.createJsonGenerator(sw);\n+            JsonGenerator jgen = f.createGenerator(sw);\n             jgen.writeString(str);\n             jgen.close();\n             String encoded = sw.toString();\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestBase64Generation.java\n                     \n                     final ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n                     if (useBytes) {\n-                        jgen = jf.createJsonGenerator(bytes);\n+                        jgen = jf.createGenerator(bytes);\n                     } else {\n-                        jgen = jf.createJsonGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n+                        jgen = jf.createGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n                     }\n                     jgen.writeStartArray();\n                     int length = passLength ? INPUT.length : -1;\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestBase64Parsing.java\n                 JsonGenerator jgen;\n                 if (useBytes) {\n                     bytes.reset();\n-                    jgen = jsonFactory.createJsonGenerator(bytes, JsonEncoding.UTF8);\n+                    jgen = jsonFactory.createGenerator(bytes, JsonEncoding.UTF8);\n                 } else {\n                     chars = new StringWriter();\n-                    jgen = jsonFactory.createJsonGenerator(chars);\n+                    jgen = jsonFactory.createGenerator(chars);\n                 }\n                 jgen.writeBinary(variant, input, 0, input.length);\n                 jgen.close();\n                 JsonParser jp;\n                 if (useBytes) {\n-                    jp = jsonFactory.createJsonParser(bytes.toByteArray());\n+                    jp = jsonFactory.createParser(bytes.toByteArray());\n                 } else {\n-                    jp = jsonFactory.createJsonParser(chars.toString());\n+                    jp = jsonFactory.createParser(chars.toString());\n                 }\n                 assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n                 byte[] data = null;\n             JsonGenerator g;\n             if (useBytes) {\n                 bytes.reset();\n-                g = jsonFactory.createJsonGenerator(bytes, JsonEncoding.UTF8);\n+                g = jsonFactory.createGenerator(bytes, JsonEncoding.UTF8);\n             } else {\n                 chars = new StringWriter();\n-                g = jsonFactory.createJsonGenerator(chars);\n+                g = jsonFactory.createGenerator(chars);\n             }\n \n             g.writeStartObject();\n             // and verify\n             JsonParser p;\n             if (useBytes) {\n-                p = jsonFactory.createJsonParser(bytes.toByteArray());\n+                p = jsonFactory.createParser(bytes.toByteArray());\n             } else {\n-                p = jsonFactory.createJsonParser(chars.toString());\n+                p = jsonFactory.createParser(chars.toString());\n             }\n             assertToken(JsonToken.START_OBJECT, p.nextToken());\n     \n--- a/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n \n         // First: output normally; should not add escaping\n         if (useStream) {\n-            jgen = f.createJsonGenerator(bytes, JsonEncoding.UTF8);\n+            jgen = f.createGenerator(bytes, JsonEncoding.UTF8);\n         } else {\n-            jgen = f.createJsonGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n+            jgen = f.createGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n         }\n         jgen.writeStartArray();\n         jgen.writeString(VALUE);\n \n         bytes = new ByteArrayOutputStream();\n         if (useStream) {\n-            jgen = f.createJsonGenerator(bytes, JsonEncoding.UTF8);\n+            jgen = f.createGenerator(bytes, JsonEncoding.UTF8);\n         } else {\n-            jgen = f.createJsonGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n+            jgen = f.createGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n         }\n         jgen.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII);\n         jgen.writeStartArray();\n         // and then keys\n         bytes = new ByteArrayOutputStream();\n         if (useStream) {\n-            jgen = f.createJsonGenerator(bytes, JsonEncoding.UTF8);\n+            jgen = f.createGenerator(bytes, JsonEncoding.UTF8);\n         } else {\n-            jgen = f.createJsonGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n+            jgen = f.createGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n         }\n         jgen.enable(JsonGenerator.Feature.ESCAPE_NON_ASCII);\n         jgen.writeStartObject();\n         \n         // First: output normally; should not add escaping\n         if (useStream) {\n-            jgen = f.createJsonGenerator(bytes, JsonEncoding.UTF8);\n+            jgen = f.createGenerator(bytes, JsonEncoding.UTF8);\n         } else {\n-            jgen = f.createJsonGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n+            jgen = f.createGenerator(new OutputStreamWriter(bytes, \"UTF-8\"));\n         }\n         jgen.writeStartObject();\n         jgen.writeStringField(STR_IN, STR_IN);\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java\n         f.setInputDecorator(new SimpleInputDecorator());\n         JsonParser jp;\n         // first test with Reader\n-        jp = f.createJsonParser(new StringReader(\"{ }\"));\n+        jp = f.createParser(new StringReader(\"{ }\"));\n         // should be overridden;\n         assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         assertEquals(789, jp.getIntValue());\n         jp.close();\n \n         // similarly with InputStream\n-        jp = f.createJsonParser(new ByteArrayInputStream(\"[ ]\".getBytes(\"UTF-8\")));\n+        jp = f.createParser(new ByteArrayInputStream(\"[ ]\".getBytes(\"UTF-8\")));\n         // should be overridden;\n         assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         assertEquals(123, jp.getIntValue());\n         jp.close();\n \n         // and with raw bytes\n-        jp = f.createJsonParser(\"[ ]\".getBytes(\"UTF-8\"));\n+        jp = f.createParser(\"[ ]\".getBytes(\"UTF-8\"));\n         // should be overridden;\n         assertEquals(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         assertEquals(456, jp.getIntValue());\n         JsonGenerator jg;\n \n         StringWriter sw = new StringWriter();\n-        jg = f.createJsonGenerator(sw);\n+        jg = f.createGenerator(sw);\n         jg.close();\n         assertEquals(\"567\", sw.toString());\n \n         ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        jg = f.createJsonGenerator(out, JsonEncoding.UTF8);\n+        jg = f.createGenerator(out, JsonEncoding.UTF8);\n         jg.close();\n         assertEquals(\"123\", out.toString(\"UTF-8\"));\n     }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParser.java\n             String expResult = en.getValue();\n             final String DOC = \"{ \\\"\"+input+\"\\\":null}\";\n             JsonParser jp = useStream ?\n-                jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-                : jf.createJsonParser(new StringReader(DOC));\n+                jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+                : jf.createParser(new StringReader(DOC));\n \n             assertToken(JsonToken.START_OBJECT, jp.nextToken());\n             assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n         \n         // Let's use real generator to get json done right\n         StringWriter sw = new StringWriter(LEN + (LEN >> 2));\n-        JsonGenerator jg = jf.createJsonGenerator(sw);\n+        JsonGenerator jg = jf.createGenerator(sw);\n         jg.writeStartObject();\n         jg.writeFieldName(\"doc\");\n         jg.writeString(VALUE);\n \n             switch (type) {\n             default:\n-                jp = jf.createJsonParser(DOC.getBytes(\"UTF-8\"));\n+                jp = jf.createParser(DOC.getBytes(\"UTF-8\"));\n                 break;\n             case 1:\n-                jp = jf.createJsonParser(DOC);\n+                jp = jf.createParser(DOC);\n                 break;\n             case 2: // NEW: let's also exercise UTF-32...\n-                jp = jf.createJsonParser(encodeInUTF32BE(DOC));\n+                jp = jf.createParser(encodeInUTF32BE(DOC));\n                 break;\n             }\n             assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         System.arraycopy(b, 0, src, offset, len);\n \n         JsonFactory jf = new JsonFactory();\n-        JsonParser jp = jf.createJsonParser(src, offset, len);\n+        JsonParser jp = jf.createParser(src, offset, len);\n \n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         bytes.write(0xBF);\n         bytes.write(\"[ 1 ]\".getBytes(\"UTF-8\"));\n         JsonFactory jf = new JsonFactory();\n-        JsonParser jp = jf.createJsonParser(bytes.toByteArray());\n+        JsonParser jp = jf.createParser(bytes.toByteArray());\n         assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n         // should also have skipped first 3 bytes of BOM; but do we have offset available?\n         /*\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestJsonParserBinary.java\n         final int entryCount = 7;\n \n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = jf.createJsonGenerator(sw);\n+        JsonGenerator jg = jf.createGenerator(sw);\n         jg.writeStartArray();\n \n         byte[][] entries = new byte[entryCount][];\n     {\n         JsonFactory jf = new JsonFactory();\n         if (useStream) {\n-            return jf.createJsonParser(doc.getBytes(\"UTF-8\"));\n+            return jf.createParser(doc.getBytes(\"UTF-8\"));\n         }\n-        return jf.createJsonParser(new StringReader(doc));\n+        return jf.createParser(new StringReader(doc));\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestNextXxx.java\n         final String DOC = \"{\\\"name\\\":123,\\\"name2\\\":14,\\\"x\\\":\\\"name\\\"}\";\n         JsonFactory jf = new JsonFactory();\n         JsonParser jp = useStream ?\n-            jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-            : jf.createJsonParser(new StringReader(DOC));\n+            jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : jf.createParser(new StringReader(DOC));\n         SerializedString NAME = new SerializedString(\"name\");\n         assertFalse(jp.nextFieldName(NAME));\n         assertToken(JsonToken.START_OBJECT, jp.getCurrentToken());\n         final String DOC = \"{\\\"name\\\":123,\\\"name2\\\":14,\\\"x\\\":\\\"name\\\"}\";\n         JsonFactory jf = new JsonFactory();\n         JsonParser jp = useStream ?\n-            jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-            : jf.createJsonParser(new StringReader(DOC));\n+            jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : jf.createParser(new StringReader(DOC));\n         SerializableString NAME = new SerializedString(\"name\");\n         assertFalse(jp.nextFieldName(NAME));\n         assertToken(JsonToken.START_OBJECT, jp.getCurrentToken());\n         SerializableString fieldName = new SerializedString(\"fieldName\");\n         JsonFactory jf = new JsonFactory();\n         JsonParser parser = useStream ?\n-            jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-            : jf.createJsonParser(new StringReader(DOC));\n+            jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : jf.createParser(new StringReader(DOC));\n \n         for (int i = 0; i < TESTROUNDS - 1; i++) {\n             assertEquals(JsonToken.START_OBJECT, parser.nextToken());\n         SerializableString fieldName = new SerializedString(\"field\");\n         JsonFactory jf = new JsonFactory();\n         JsonParser parser = useStream ?\n-            jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-            : jf.createJsonParser(new StringReader(DOC));\n+            jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+            : jf.createParser(new StringReader(DOC));\n         assertEquals(JsonToken.START_OBJECT, parser.nextToken());\n         assertTrue(parser.nextFieldName(fieldName));\n         assertEquals(JsonToken.VALUE_STRING, parser.nextToken());\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestParserOverrides.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestParserOverrides.java\n     {\n         final String DOC = \"[ ]\";\n         JsonParser jp = useStream ?\n-                jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-                : jf.createJsonParser(DOC);\n+                jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+                : jf.createParser(DOC);\n         assertNull(jp.getCurrentToken());\n         jp.clearCurrentToken();\n         assertNull(jp.getCurrentToken());\n     {\n         final String DOC = \"{\\\"first\\\":{\\\"second\\\":3, \\\"third\\\":false}}\";\n         JsonParser jp = useStream ?\n-                jf.createJsonParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n-                : jf.createJsonParser(new StringReader(DOC));\n+                jf.createParser(new ByteArrayInputStream(DOC.getBytes(\"UTF-8\")))\n+                : jf.createParser(new StringReader(DOC));\n         assertNull(jp.getCurrentToken());\n         assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestUtf8Parser.java\n \n         byte[] data = bout.toByteArray();\n \n-        JsonParser jp = new JsonFactory().createJsonParser(new ByteArrayInputStream(data));\n+        JsonParser jp = new JsonFactory().createParser(new ByteArrayInputStream(data));\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         String act = jp.getText();\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestCharEscaping.java\n         }\n \n         StringWriter writer = new StringWriter();\n-        // must call #createJsonGenerator(Writer), #createJsonGenerator(OutputStream) doesn't trigger bug\n-        JsonGenerator jgen = jf.createJsonGenerator(writer);\n+        // must call #createGenerator(Writer), #createGenerator(OutputStream) doesn't trigger bug\n+        JsonGenerator jgen = jf.createGenerator(writer);\n         jgen.setHighestNonEscapedChar(127); // must set to trigger bug\n         jgen.writeString(longString.toString());\n       }      \n--- a/src/test/java/com/fasterxml/jackson/core/main/TestComments.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestComments.java\n     {\n         JsonFactory jf = new JsonFactory();\n         assertFalse(jf.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));\n-        JsonParser jp = jf.createJsonParser(new StringReader(\"[ 1 ]\"));\n+        JsonParser jp = jf.createParser(new StringReader(\"[ 1 ]\"));\n         assertFalse(jp.isEnabled(JsonParser.Feature.ALLOW_COMMENTS));\n     }\n \n         JsonFactory jf = new JsonFactory();\n         jf.configure(JsonParser.Feature.ALLOW_COMMENTS, enabled);\n         JsonParser jp = useStream ?\n-            jf.createJsonParser(doc.getBytes(\"UTF-8\"))\n-            : jf.createJsonParser(doc);\n+            jf.createParser(doc.getBytes(\"UTF-8\"))\n+            : jf.createParser(doc);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         return jp;\n     }\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorArray.java\n         throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n \n         JsonStreamContext ctxt = gen.getOutputContext();\n         assertTrue(ctxt.inRoot());\n \n         // Ok, then array with nested empty array\n         sw = new StringWriter();\n-        gen = new JsonFactory().createJsonGenerator(sw);\n+        gen = new JsonFactory().createGenerator(sw);\n         gen.writeStartArray();\n         gen.writeStartArray();\n         gen.writeEndArray();\n         throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         gen.writeStartArray();\n         // Mismatch:\n         try {\n         throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         gen.writeStartArray();\n         gen.writeNumber(13);\n         gen.writeBoolean(true);\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorClosing.java\n         f.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         assertFalse(f.isEnabled(JsonGenerator.Feature.AUTO_CLOSE_TARGET));\n         MyWriter output = new MyWriter();\n-        JsonGenerator jg = f.createJsonGenerator(output);\n+        JsonGenerator jg = f.createGenerator(output);\n \n         // shouldn't be closed to begin with...\n         assertFalse(output.isClosed());\n         JsonFactory f = new JsonFactory();\n         f.enable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         MyWriter output = new MyWriter();\n-        JsonGenerator jg = f.createJsonGenerator(output);\n+        JsonGenerator jg = f.createGenerator(output);\n \n         // shouldn't be closed to begin with...\n         assertFalse(output.isClosed());\n         JsonFactory f = new JsonFactory();\n         f.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n         MyStream output = new MyStream();\n-        JsonGenerator jg = f.createJsonGenerator(output, JsonEncoding.UTF8);\n+        JsonGenerator jg = f.createGenerator(output, JsonEncoding.UTF8);\n \n         assertFalse(output.isClosed());\n         jg.writeNumber(39);\n         StringWriter sw = new StringWriter();\n \n         // First, test arrays:\n-        JsonGenerator jg = f.createJsonGenerator(sw);\n+        JsonGenerator jg = f.createGenerator(sw);\n         jg.writeStartArray();\n         jg.close();\n         assertEquals(\"[]\", sw.toString());\n \n         // Then objects\n         sw = new StringWriter();\n-        jg = f.createJsonGenerator(sw);\n+        jg = f.createGenerator(sw);\n         jg.writeStartObject();\n         jg.close();\n         assertEquals(\"{}\", sw.toString());\n         JsonFactory f = new JsonFactory();\n         f.disable(JsonGenerator.Feature.AUTO_CLOSE_JSON_CONTENT);\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = f.createJsonGenerator(sw);\n+        JsonGenerator jg = f.createGenerator(sw);\n         jg.writeStartArray();\n         jg.close();\n         // shouldn't close\n \n         // Then objects\n         sw = new StringWriter();\n-        jg = f.createJsonGenerator(sw);\n+        jg = f.createGenerator(sw);\n         jg.writeStartObject();\n         jg.close();\n         assertEquals(\"{\", sw.toString());\n         JsonFactory f = new JsonFactory();\n         assertTrue(f.isEnabled(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM));\n         MyChars sw = new MyChars();\n-        JsonGenerator jg = f.createJsonGenerator(sw);\n+        JsonGenerator jg = f.createGenerator(sw);\n         jg.writeStartArray();\n         jg.writeEndArray();\n         assertEquals(0, sw.flushed);\n         \n         // ditto with stream\n         MyBytes bytes = new MyBytes();\n-        jg = f.createJsonGenerator(bytes, JsonEncoding.UTF8);\n+        jg = f.createGenerator(bytes, JsonEncoding.UTF8);\n         jg.writeStartArray();\n         jg.writeEndArray();\n         assertEquals(0, bytes.flushed);\n         f.disable(JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM);\n         // first with a Writer\n         sw = new MyChars();\n-        jg = f.createJsonGenerator(sw);\n+        jg = f.createGenerator(sw);\n         jg.writeStartArray();\n         jg.writeEndArray();\n         assertEquals(0, sw.flushed);\n \n         // and then with OutputStream\n         bytes = new MyBytes();\n-        jg = f.createJsonGenerator(bytes, JsonEncoding.UTF8);\n+        jg = f.createGenerator(bytes, JsonEncoding.UTF8);\n         jg.writeStartArray();\n         jg.writeEndArray();\n         assertEquals(0, bytes.flushed);\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorCopy.java\n     {\n         JsonFactory jf = new JsonFactory();\n         final String DOC = \"\\\"text\\\\non two lines\\\" true false 2.0\";\n-        JsonParser jp = jf.createJsonParser(new StringReader(DOC));\n+        JsonParser jp = jf.createParser(new StringReader(DOC));\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = jf.createJsonGenerator(sw);\n+        JsonGenerator gen = jf.createGenerator(sw);\n \n         JsonToken t;\n \n     {\n         JsonFactory jf = new JsonFactory();\n         final String DOC = \"123 [ 1, null, [ false ] ]\";\n-        JsonParser jp = jf.createJsonParser(new StringReader(DOC));\n+        JsonParser jp = jf.createParser(new StringReader(DOC));\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = jf.createJsonGenerator(sw);\n+        JsonGenerator gen = jf.createGenerator(sw);\n \n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         gen.copyCurrentEvent(jp);\n     {\n         JsonFactory jf = new JsonFactory();\n         final String DOC = \"{ \\\"a\\\":1, \\\"b\\\":[{ \\\"c\\\" : null }] }\";\n-        JsonParser jp = jf.createJsonParser(new StringReader(DOC));\n+        JsonParser jp = jf.createParser(new StringReader(DOC));\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = jf.createJsonGenerator(sw);\n+        JsonGenerator gen = jf.createGenerator(sw);\n \n         assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         gen.copyCurrentStructure(jp);\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorMisc.java\n         for (int i = 0; i < 2; ++i) {\n             boolean stream = ((i & 1) == 0);\n             JsonGenerator jg = stream ?\n-                jf.createJsonGenerator(new StringWriter())\n-                : jf.createJsonGenerator(new ByteArrayOutputStream(), JsonEncoding.UTF8)\n+                jf.createGenerator(new StringWriter())\n+                : jf.createGenerator(new ByteArrayOutputStream(), JsonEncoding.UTF8)\n                 ;\n             assertFalse(jg.isClosed());\n             jg.writeStartArray();\n         // note: NOT mapping factory, for this test\n         JsonFactory jf = new JsonFactory();\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = jf.createJsonGenerator(sw);\n+        JsonGenerator gen = jf.createGenerator(sw);\n         gen.writeStartArray();\n \n         // simple wrappers first\n         \n         // then other basic types\n         sw = new StringWriter();\n-        gen = jf.createJsonGenerator(sw);\n+        gen = jf.createGenerator(sw);\n         gen.writeStartArray();\n         gen.writeObject(BigInteger.valueOf(1234));\n         gen.writeObject(new BigDecimal(0.5));\n \n         // then Atomic types\n         sw = new StringWriter();\n-        gen = jf.createJsonGenerator(sw);\n+        gen = jf.createGenerator(sw);\n         gen.writeStartArray();\n         gen.writeObject(new AtomicBoolean(false));\n         gen.writeObject(new AtomicInteger(13));\n     {\n         JsonFactory jf = new JsonFactory();\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = jf.createJsonGenerator(sw);\n+        JsonGenerator gen = jf.createGenerator(sw);\n         gen.writeStartArray();\n         gen.writeRaw(\"-123, true\");\n         gen.writeRaw(\", \\\"x\\\"  \");\n     {\n         JsonFactory jf = new JsonFactory();\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = jf.createJsonGenerator(sw);\n+        JsonGenerator gen = jf.createGenerator(sw);\n         gen.writeStartArray();\n         gen.writeRawValue(\"7\");\n         gen.writeRawValue(\"[ null ]\");\n             JsonGenerator gen;\n             ByteArrayOutputStream bout = new ByteArrayOutputStream(200);\n             if (useCharBased) {\n-                gen = jf.createJsonGenerator(new OutputStreamWriter(bout, \"UTF-8\"));\n+                gen = jf.createGenerator(new OutputStreamWriter(bout, \"UTF-8\"));\n             } else {\n-                gen = jf.createJsonGenerator(bout, JsonEncoding.UTF8);\n+                gen = jf.createGenerator(bout, JsonEncoding.UTF8);\n             }\n \n             switch (i) {\n             }\n             gen.close();\n \n-            JsonParser jp = jf.createJsonParser(new ByteArrayInputStream(bout.toByteArray()));\n+            JsonParser jp = jf.createParser(new ByteArrayInputStream(bout.toByteArray()));\n             \n             // Need to skip other events before binary data:\n             switch (i) {\n             JsonGenerator jgen;\n             ByteArrayOutputStream bout = new ByteArrayOutputStream(200);\n             if (useChars) {\n-                jgen = jf.createJsonGenerator(new OutputStreamWriter(bout, \"UTF-8\"));\n+                jgen = jf.createGenerator(new OutputStreamWriter(bout, \"UTF-8\"));\n             } else {\n-                jgen = jf.createJsonGenerator(bout, JsonEncoding.UTF8);\n+                jgen = jf.createGenerator(bout, JsonEncoding.UTF8);\n             }\n \n             jgen.writeStartObject();\n             jgen.close();\n \n             byte[] json = bout.toByteArray();\n-            JsonParser jp = jf.createJsonParser(json);\n+            JsonParser jp = jf.createParser(json);\n             assertToken(JsonToken.START_OBJECT, jp.nextToken());\n             for (int rounds = 0; rounds < 1500; ++rounds) {\n             for (int letter = 'a'; letter <= 'z'; ++letter) {\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorObject.java\n package com.fasterxml.jackson.core.main;\n-\n \n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.test.BaseTest;\n         throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n \n         JsonStreamContext ctxt = gen.getOutputContext();\n         assertTrue(ctxt.inRoot());\n         throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         gen.writeStartObject();\n         // Mismatch:\n         try {\n         throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         gen.writeStartObject();\n         gen.writeFieldName(\"first\");\n         gen.writeNumber(-901);\n         throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         gen.writeStartObject();\n \n         final BigDecimal dec = new BigDecimal(\"0.1\");\n         throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         gen.writeStartObject();\n \n         gen.writeStringField(\"str\", null);\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestGeneratorWithSerializedString.java\n \n         // First using char-backed generator\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jgen = jf.createJsonGenerator(sw);\n+        JsonGenerator jgen = jf.createGenerator(sw);\n         _writeSimple(jgen);\n         jgen.close();\n         String json = sw.toString();\n-        _verifySimple(jf.createJsonParser(json));\n+        _verifySimple(jf.createParser(json));\n \n         // then using UTF-8\n         ByteArrayOutputStream out = new ByteArrayOutputStream();\n-        jgen = jf.createJsonGenerator(out, JsonEncoding.UTF8);\n+        jgen = jf.createGenerator(out, JsonEncoding.UTF8);\n         _writeSimple(jgen);\n         jgen.close();\n         byte[] jsonB = out.toByteArray();\n-        _verifySimple(jf.createJsonParser(jsonB));\n+        _verifySimple(jf.createParser(jsonB));\n     }\n \n     /*\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestJsonFactory.java\n         JsonFactory f = new JsonFactory();\n \n         // First: create file via generator.. and use an odd encoding\n-        JsonGenerator jg = f.createJsonGenerator(file, JsonEncoding.UTF16_LE);\n+        JsonGenerator jg = f.createGenerator(file, JsonEncoding.UTF16_LE);\n         jg.writeStartObject();\n         jg.writeRaw(\"   \");\n         jg.writeEndObject();\n         jg.close();\n \n         // Ok: first read file directly\n-        JsonParser jp = f.createJsonParser(file);\n+        JsonParser jp = f.createParser(file);\n         assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n         assertNull(jp.nextToken());\n         jp.close();\n \n         // Then via URL:\n-        jp = f.createJsonParser(file.toURI().toURL());\n+        jp = f.createParser(file.toURI().toURL());\n         assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         assertToken(JsonToken.END_OBJECT, jp.nextToken());\n         assertNull(jp.nextToken());\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestJsonGenerator.java\n                     JsonGenerator gen;\n                     ByteArrayOutputStream bout = new ByteArrayOutputStream();\n                     if (useReader != 0) {\n-                        gen = jf.createJsonGenerator(new OutputStreamWriter(bout, \"UTF-8\"));\n+                        gen = jf.createGenerator(new OutputStreamWriter(bout, \"UTF-8\"));\n                     } else {\n-                        gen = jf.createJsonGenerator(bout, JsonEncoding.UTF8);\n+                        gen = jf.createGenerator(bout, JsonEncoding.UTF8);\n                     }\n                     if (writeString > 0) {\n                         gen.writeString(input);\n                     }\n                     gen.flush();\n                     gen.close();\n-                    JsonParser jp = jf.createJsonParser(new ByteArrayInputStream(bout.toByteArray()));\n+                    JsonParser jp = jf.createParser(new ByteArrayInputStream(bout.toByteArray()));\n                 \n                     JsonToken t = jp.nextToken();\n                     assertNotNull(\"Document \\\"\"+bout.toString(\"UTF-8\")+\"\\\" yielded no tokens\", t);\n             boolean state = (i & 1) == 0;\n             boolean pad = (i & 2) == 0;\n             StringWriter sw = new StringWriter();\n-            JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+            JsonGenerator gen = new JsonFactory().createGenerator(sw);\n             gen.writeBoolean(state);\n             if (pad) {\n                 gen.writeRaw(\" \");\n         for (int i = 0; i < 2; ++i) {\n             boolean pad = (i & 1) == 0;\n             StringWriter sw = new StringWriter();\n-            JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+            JsonGenerator gen = new JsonFactory().createGenerator(sw);\n             gen.writeNull();\n             if (pad) {\n                 gen.writeRaw(\" \");\n          throws Exception\n      {\n          StringWriter sw = new StringWriter();\n-         JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+         JsonGenerator gen = new JsonFactory().createGenerator(sw);\n          gen.writeNumber(1);\n          gen.writeNumber(2);\n          gen.writeNumber(-13);\n          throws Exception\n      {\n          StringWriter sw = new StringWriter();\n-         JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+         JsonGenerator gen = new JsonFactory().createGenerator(sw);\n          gen.writeStartObject();\n          gen.writeNumberField(\"long\", 3L);\n          gen.writeNumberField(\"double\", 0.25);\n         for (int i = 0; i < VALUES.length; ++i) {\n             int VALUE = VALUES[i];\n             StringWriter sw = new StringWriter();\n-            JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+            JsonGenerator gen = new JsonFactory().createGenerator(sw);\n             gen.writeNumber(VALUE);\n             if (pad) {\n                 gen.writeRaw(\" \");\n         for (int i = 0; i < VALUES.length; ++i) {\n             long VALUE = VALUES[i];\n             StringWriter sw = new StringWriter();\n-            JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+            JsonGenerator gen = new JsonFactory().createGenerator(sw);\n             gen.writeNumber(VALUE);\n             if (pad) {\n                 gen.writeRaw(\" \");\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestJsonGeneratorFeatures.java\n     public void testConfigDefaults() throws IOException\n     {\n         JsonFactory jf = new JsonFactory();\n-        JsonGenerator jg = jf.createJsonGenerator(new StringWriter());\n+        JsonGenerator jg = jf.createGenerator(new StringWriter());\n         assertFalse(jg.isEnabled(JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS));\n     }\n \n     private String _writeNumbers(JsonFactory jf) throws IOException\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = jf.createJsonGenerator(sw);\n+        JsonGenerator jg = jf.createGenerator(sw);\n     \n         jg.writeStartArray();\n         jg.writeNumber(1);\n         throws IOException\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = jf.createJsonGenerator(sw);\n+        JsonGenerator jg = jf.createGenerator(sw);\n         jg.writeStartObject();\n         jg.writeFieldName(\"foo\");\n         jg.writeNumber(1);\n         throws IOException\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = jf.createJsonGenerator(sw);\n+        JsonGenerator jg = jf.createGenerator(sw);\n         jg.writeStartObject();\n         jg.writeFieldName(\"double\");\n         jg.writeNumber(Double.NaN);\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestParserClosing.java\n         f.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\n         assertFalse(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));\n         MyReader input = new MyReader(DOC);\n-        JsonParser jp = f.createJsonParser(input);\n+        JsonParser jp = f.createParser(input);\n \n         // shouldn't be closed to begin with...\n         assertFalse(input.isClosed());\n         f.enable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\n         assertTrue(f.isEnabled(JsonParser.Feature.AUTO_CLOSE_SOURCE));\n         MyReader input = new MyReader(DOC);\n-        JsonParser jp = f.createJsonParser(input);\n+        JsonParser jp = f.createParser(input);\n         assertFalse(input.isClosed());\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         // but can close half-way through\n \n         // And then let's test implicit close at the end too:\n         input = new MyReader(DOC);\n-        jp = f.createJsonParser(input);\n+        jp = f.createParser(input);\n         assertFalse(input.isClosed());\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n \n         f.disable(JsonParser.Feature.AUTO_CLOSE_SOURCE);\n         MyStream input = new MyStream(DOC.getBytes(\"UTF-8\"));\n-        JsonParser jp = f.createJsonParser(input);\n+        JsonParser jp = f.createParser(input);\n \n         // shouldn't be closed to begin with...\n         assertFalse(input.isClosed());\n     public void testReleaseContentBytes() throws Exception\n     {\n         byte[] input = \"[1]foobar\".getBytes(\"UTF-8\");\n-        JsonParser jp = new JsonFactory().createJsonParser(input);\n+        JsonParser jp = new JsonFactory().createParser(input);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n \n     public void testReleaseContentChars() throws Exception\n     {\n-        JsonParser jp = new JsonFactory().createJsonParser(\"[true]xyz\");\n+        JsonParser jp = new JsonFactory().createParser(\"[true]xyz\");\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertToken(JsonToken.VALUE_TRUE, jp.nextToken());\n         assertToken(JsonToken.END_ARRAY, jp.nextToken());\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestParserWithObjects.java\n     {\n         JsonFactory jf = new JsonFactory();\n         if (useStream) {\n-            return jf.createJsonParser(doc.getBytes(\"UTF-8\"));\n+            return jf.createParser(doc.getBytes(\"UTF-8\"));\n         }\n-        return jf.createJsonParser(new StringReader(doc));\n+        return jf.createParser(new StringReader(doc));\n     }\n }\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestPrettyPrinter.java\n             boolean useBytes = (i > 0);\n             ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n             StringWriter sw = new StringWriter();\n-            JsonGenerator gen = useBytes ? jf.createJsonGenerator(bytes)\n-                    : jf.createJsonGenerator(sw);\n+            JsonGenerator gen = useBytes ? jf.createGenerator(bytes)\n+                    : jf.createGenerator(sw);\n             gen.setPrettyPrinter(new CountPrinter());\n             gen.writeStartObject();\n             gen.writeFieldName(\"x\");\n             boolean useBytes = (i > 0);\n             ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n             StringWriter sw = new StringWriter();\n-            JsonGenerator gen = useBytes ? jf.createJsonGenerator(bytes)\n-                    : jf.createJsonGenerator(sw);\n+            JsonGenerator gen = useBytes ? jf.createGenerator(bytes)\n+                    : jf.createGenerator(sw);\n             gen.setPrettyPrinter(new CountPrinter());\n             gen.writeStartArray();\n             gen.writeNumber(6);\n     public void testSimpleDocWithDefault() throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         gen.useDefaultPrettyPrinter();\n         _verifyPrettyPrinter(gen, sw);\n     }\n     public void testSimpleDocWithMinimal() throws Exception\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         // first with standard minimal\n         gen.setPrettyPrinter(new MinimalPrettyPrinter());\n         String docStr = _verifyPrettyPrinter(gen, sw);\n         assertEquals(-1, docStr.indexOf('\\t'));\n \n         // And then with slightly customized variant\n-        gen = new JsonFactory().createJsonGenerator(sw);\n+        gen = new JsonFactory().createGenerator(sw);\n         gen.setPrettyPrinter(new MinimalPrettyPrinter() {\n             @Override\n             // use TAB between array values\n         JsonFactory jf = new JsonFactory();\n         jf.setRootValueSeparator(\"##\");\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = jf.createJsonGenerator(sw);\n+        JsonGenerator gen = jf.createGenerator(sw);\n         gen.writeNumber(13);\n         gen.writeBoolean(false);\n         gen.writeNull();\n     protected String _generateRoot(JsonFactory jf, PrettyPrinter pp) throws IOException\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator gen = new JsonFactory().createGenerator(sw);\n         gen.setPrettyPrinter(pp);\n         gen.writeStartObject();\n         gen.writeEndObject();\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestRawStringWriting.java\n         List<byte[]> strings = generateStrings(new Random(28), 750000, false);\n         ByteArrayOutputStream out = new ByteArrayOutputStream(16000);\n         JsonFactory jf = new JsonFactory();\n-        JsonGenerator jgen = jf.createJsonGenerator(out, JsonEncoding.UTF8);\n+        JsonGenerator jgen = jf.createGenerator(out, JsonEncoding.UTF8);\n         jgen.writeStartArray();\n         for (byte[] str : strings) {\n             jgen.writeRawUTF8String(str, 0, str.length);\n         byte[] json = out.toByteArray();\n         \n         // Ok: let's verify that stuff was written out ok\n-        JsonParser jp = jf.createJsonParser(json);\n+        JsonParser jp = jf.createParser(json);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         for (byte[] inputBytes : strings) {\n             assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n         List<byte[]> strings = generateStrings(new Random(28), 720000, true);\n         ByteArrayOutputStream out = new ByteArrayOutputStream(16000);\n         JsonFactory jf = new JsonFactory();\n-        JsonGenerator jgen = jf.createJsonGenerator(out, JsonEncoding.UTF8);\n+        JsonGenerator jgen = jf.createGenerator(out, JsonEncoding.UTF8);\n         jgen.writeStartArray();\n \n         for (byte[] str : strings) {\n         byte[] json = out.toByteArray();\n         \n         // Ok: let's verify that stuff was written out ok\n-        JsonParser jp = jf.createJsonParser(json);\n+        JsonParser jp = jf.createParser(json);\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         for (byte[] inputBytes : strings) {\n             assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestStringGeneration.java\n         for (int i = 0; i < SAMPLES.length; ++i) {\n             String VALUE = SAMPLES[i];\n             StringWriter sw = new StringWriter();\n-            JsonGenerator gen = new JsonFactory().createJsonGenerator(sw);\n+            JsonGenerator gen = new JsonFactory().createGenerator(sw);\n             gen.writeStartArray();\n             if (charArray) {\n                 char[] buf = new char[VALUE.length() + i];\n         throws Exception\n     {\n         ByteArrayOutputStream bow = new ByteArrayOutputStream(text.length());\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(bow, JsonEncoding.UTF8);\n+        JsonGenerator gen = new JsonFactory().createGenerator(bow, JsonEncoding.UTF8);\n \n         gen.writeStartArray();\n         if (charArray) {\n         gen.writeEndArray();\n         gen.close();\n         byte[] docData = bow.toByteArray();\n-        JsonParser jp = new JsonFactory().createJsonParser(new ByteArrayInputStream(docData));\n+        JsonParser jp = new JsonFactory().createParser(new ByteArrayInputStream(docData));\n         assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n         JsonToken t = jp.nextToken();\n         assertEquals(JsonToken.VALUE_STRING, t);\n         throws Exception\n     {\n         ByteArrayOutputStream bow = new ByteArrayOutputStream(text.length());\n-        JsonGenerator gen = new JsonFactory().createJsonGenerator(bow, JsonEncoding.UTF8);\n+        JsonGenerator gen = new JsonFactory().createGenerator(bow, JsonEncoding.UTF8);\n         gen.writeStartArray();\n \n         gen.writeString(text);\n         gen.writeEndArray();\n         gen.close();\n         \n-        gen = new JsonFactory().createJsonGenerator(bow, JsonEncoding.UTF8);\n+        gen = new JsonFactory().createGenerator(bow, JsonEncoding.UTF8);\n         gen.writeStartArray();\n         gen.writeStartArray();\n \n         gen.writeEndArray();\n         gen.close();\n         byte[] docData = bow.toByteArray();\n-        JsonParser jp = new JsonFactory().createJsonParser(new ByteArrayInputStream(docData));\n+        JsonParser jp = new JsonFactory().createParser(new ByteArrayInputStream(docData));\n         assertEquals(JsonToken.START_ARRAY, jp.nextToken());\n \n         offset = 0;\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestUnicode.java\n     {\n         byte[] json = \"{\\\"text\\\":\\\"\\uD83D\\uDE03\\\"}\".getBytes(\"UTF-8\");\n         // first\n-        JsonParser jp = f.createJsonParser(json);\n+        JsonParser jp = f.createParser(json);\n         assertToken(JsonToken.START_OBJECT, jp.nextToken());\n         assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n         if (checkText) {\n--- a/src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java\n+++ b/src/test/java/com/fasterxml/jackson/core/main/TestWithTonsaSymbols.java\n          */\n         for (int x = 0; x < 3; ++x) {\n             JsonParser jp = useStream ?\n-                jf.createJsonParser(new ByteArrayInputStream(doc.getBytes(\"UTF-8\")))\n-                : jf.createJsonParser(new StringReader(doc));\n+                jf.createParser(new ByteArrayInputStream(doc.getBytes(\"UTF-8\")))\n+                : jf.createParser(new StringReader(doc));\n             assertToken(JsonToken.START_OBJECT, jp.nextToken());\n             for (int i = 0; i < FIELD_COUNT; ++i) {\n                 assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestByteBasedSymbols.java\n     }\n \n     /*\n-    ////////////////////////////////////////////\n-    // Helper methods\n-    ////////////////////////////////////////////\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n      */\n \n     protected JsonParser createParser(JsonFactory jf, String input)\n     {\n         byte[] data = input.getBytes(\"UTF-8\");\n         InputStream is = new ByteArrayInputStream(data);\n-        return jf.createJsonParser(is);\n+        return jf.createParser(is);\n     }\n \n     private String createDoc(String[] fieldNames, boolean add)\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java\n     {\n         JsonParser jp;\n         if (useBytes) {\n-            jp = f.createJsonParser(doc.getBytes(\"UTF-8\"));\n+            jp = f.createParser(doc.getBytes(\"UTF-8\"));\n             assertEquals(UTF8StreamJsonParser.class, jp.getClass());\n             assertEquals(0, f.byteSymbolCount());\n         } else {\n-            jp = f.createJsonParser(doc);\n+            jp = f.createParser(doc);\n             assertEquals(ReaderBasedJsonParser.class, jp.getClass());\n             assertEquals(0, f.charSymbolCount());\n         }\n--- a/src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java\n      */\n     public void testParserDelegate() throws IOException\n     {\n-        JsonParser jp = new JsonFactory().createJsonParser(\"[ 1, true ]\");\n+        JsonParser jp = new JsonFactory().createParser(\"[ 1, true ]\");\n         assertNull(jp.getCurrentToken());\n         assertToken(JsonToken.START_ARRAY, jp.nextToken());\n         assertEquals(\"[\", jp.getText());\n     public void testGeneratorDelegate() throws IOException\n     {\n         StringWriter sw = new StringWriter();\n-        JsonGenerator jg = new JsonFactory().createJsonGenerator(sw);\n+        JsonGenerator jg = new JsonFactory().createGenerator(sw);\n         jg.writeStartArray();\n         jg.writeNumber(13);\n         jg.writeNull();\n--- a/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n+++ b/src/test/java/com/fasterxml/jackson/test/BaseTest.java\n     protected JsonParser createParserUsingReader(JsonFactory f, String input)\n         throws IOException, JsonParseException\n     {\n-        return f.createJsonParser(new StringReader(input));\n+        return f.createParser(new StringReader(input));\n     }\n \n     protected JsonParser createParserUsingStream(String input, String encoding)\n             data = input.getBytes(encoding);\n         }\n         InputStream is = new ByteArrayInputStream(data);\n-        return f.createJsonParser(is);\n+        return f.createParser(is);\n     }\n \n     /*\n--- a/src/test/java/perf/ConcurrencyReadTest.java\n+++ b/src/test/java/perf/ConcurrencyReadTest.java\n \n     protected void parse(JsonFactory jf, byte[] input) throws IOException\n     {\n-        JsonParser jp = jf.createJsonParser(input, 0, input.length);\n+        JsonParser jp = jf.createParser(input, 0, input.length);\n         while (jp.nextToken() != null) {\n             ;\n         }", "timestamp": 1353048048, "metainfo": ""}