{"sha": "f22190742ab05aeaa1edcdd49ce6cb768de5ced8", "log": "test refactoring", "commit": "\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestJsonParserSymbols.java\n+package com.fasterxml.jackson.core.sym;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.*;\n+import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;\n+import com.fasterxml.jackson.core.json.UTF8StreamJsonParser;\n+\n+/**\n+ * Unit tests for verifying that {@link JsonParser} instances properly\n+ * merge back symbols to the root symbol table\n+ */\n+public class TestJsonParserSymbols\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+    /**\n+     * To peek into state of \"root\" symbol tables (parent of all symbol\n+     * tables for parsers constructed by this factory) we need to\n+     * add some methods.\n+     */\n+    final static class MyJsonFactory extends JsonFactory\n+    {\n+        public int byteSymbolCount() { return _rootByteSymbols.size(); }\n+        public int charSymbolCount() { return _rootCharSymbols.size(); }\n+    }\n+\n+    final static String JSON = \"{ \\\"a\\\" : 3, \\\"aaa\\\" : 4, \\\"_a\\\" : 0 }\";\n+\n+    public void testByteSymbolsWithClose() throws Exception\n+    {\n+        _testWithClose(true);\n+    }\n+\n+    public void testByteSymbolsWithEOF() throws Exception\n+    {\n+        MyJsonFactory f = new MyJsonFactory();\n+        JsonParser jp = _getParser(f, JSON, true);\n+        while (jp.nextToken() != null) {\n+            // shouldn't update before hitting end\n+            assertEquals(0, f.byteSymbolCount());\n+        }\n+        // but now should have it after hitting EOF\n+        assertEquals(3, f.byteSymbolCount());\n+        jp.close();\n+        assertEquals(3, f.byteSymbolCount());\n+    }\n+\n+    public void testCharSymbolsWithClose() throws Exception\n+    {\n+        _testWithClose(false);\n+    }\n+\n+    public void testCharSymbolsWithEOF() throws Exception\n+    {\n+        MyJsonFactory f = new MyJsonFactory();\n+        JsonParser jp = _getParser(f, JSON, false);\n+        while (jp.nextToken() != null) {\n+            // shouldn't update before hitting end\n+            assertEquals(0, f.charSymbolCount());\n+        }\n+        // but now should have it\n+        assertEquals(3, f.charSymbolCount());\n+        jp.close();\n+        assertEquals(3, f.charSymbolCount());\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods\n+    /**********************************************************\n+     */\n+\n+    private void _testWithClose(boolean useBytes) throws IOException\n+    {\n+        MyJsonFactory f = new MyJsonFactory();\n+        JsonParser jp = _getParser(f, JSON, useBytes);\n+        // Let's check 2 names\n+        assertToken(JsonToken.START_OBJECT, jp.nextToken());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+        assertToken(JsonToken.VALUE_NUMBER_INT, jp.nextToken());\n+        assertToken(JsonToken.FIELD_NAME, jp.nextToken());\n+\n+        // shouldn't update before close or EOF:\n+        assertEquals(0, useBytes ? f.byteSymbolCount() : f.charSymbolCount());\n+        jp.close();\n+        // but should after close\n+        assertEquals(2, useBytes ? f.byteSymbolCount() : f.charSymbolCount());\n+    }\n+\n+    private JsonParser _getParser(MyJsonFactory f, String doc, boolean useBytes) throws IOException\n+    {\n+        JsonParser jp;\n+        if (useBytes) {\n+            jp = f.createJsonParser(doc.getBytes(\"UTF-8\"));\n+            assertEquals(UTF8StreamJsonParser.class, jp.getClass());\n+            assertEquals(0, f.byteSymbolCount());\n+        } else {\n+            jp = f.createJsonParser(doc);\n+            assertEquals(ReaderBasedJsonParser.class, jp.getClass());\n+            assertEquals(0, f.charSymbolCount());\n+        }\n+        return jp;\n+    }\n+}\n--- a/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n+++ b/src/test/java/com/fasterxml/jackson/core/sym/TestSymbolTables.java\n     public void testSyntheticWithBytes() throws IOException\n     {\n         // pass seed, to keep results consistent:\n-        BytesToNameCanonicalizer symbols = BytesToNameCanonicalizer.createRoot(33333);\n+        BytesToNameCanonicalizer symbols =\n+                BytesToNameCanonicalizer.createRoot(33333).makeChild(true, true);\n         final int COUNT = 6000;\n         for (int i = 0; i < COUNT; ++i) {\n             String id = fieldNameFor(i);\n--- /dev/null\n+++ b/src/test/java/perf/ConcurrencyReadTest.java\n+package perf;\n+\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import com.fasterxml.jackson.core.*;\n+\n+/**\n+ * Manual performance test to try out various synchronization\n+ * methods for symbol tables.\n+ */\n+public class ConcurrencyReadTest\n+{\n+    private final static int THREADS = 50;\n+    \n+    private void test() throws Exception\n+    {\n+        final JsonFactory jf = new JsonFactory();\n+        final byte[] INPUT = \"{\\\"a\\\":1}\".getBytes(\"UTF-8\");\n+        final AtomicInteger count = new AtomicInteger();\n+        \n+        for (int i = 0; i < THREADS; ++i) {\n+            new Thread(new Runnable() {\n+                public void run()\n+                {\n+                    try {\n+                        while (true) {\n+                            parse(jf, INPUT);\n+                            count.addAndGet(1);\n+                        }\n+                    } catch (IOException e) {\n+                        System.err.println(\"PROBLEM: \"+e);\n+                    }\n+                }\n+            }).start();\n+        }\n+\n+        // wait slightly....\n+        Thread.sleep(200L);\n+        \n+        double totalTime = 0.0;\n+        double totalCount = 0.0;\n+\n+        while (true) {\n+            long start = System.currentTimeMillis();\n+            int startCount = count.get();\n+\n+            Thread.sleep(1000L);\n+            \n+            int done = count.get() - startCount;\n+            long time = System.currentTimeMillis() - start;\n+\n+            totalTime += time;\n+            totalCount += done;\n+            \n+            double rate = (double) done / (double) time;\n+            System.out.printf(\"Rate: %.1f (avg: %.1f)\\n\", rate, totalCount/totalTime);\n+        }\n+    }\n+\n+    protected void parse(JsonFactory jf, byte[] input) throws IOException\n+    {\n+        JsonParser jp = jf.createJsonParser(input, 0, input.length);\n+        while (jp.nextToken() != null) {\n+            ;\n+        }\n+        jp.close();\n+    }\n+    \n+    public static void main(String[] args) throws Exception\n+    {\n+        if (args.length != 0) {\n+            System.err.println(\"Usage: java ...\");\n+            System.exit(1);\n+        }\n+        new ConcurrencyReadTest().test();\n+    }\n+\n+}", "timestamp": 1343196757, "metainfo": ""}