{"sha": "66a855e4b06b245a1f6e4872c825c8006c3d7b83", "log": "javadoc cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/type/TypeReference.java\n+++ b/src/main/java/com/fasterxml/jackson/core/type/TypeReference.java\n public abstract class TypeReference<T>\n     implements Comparable<TypeReference<T>>\n {\n-    final Type _type;\n-\n+    protected final Type _type;\n+    \n     protected TypeReference()\n     {\n         Type superClass = getClass().getGenericSuperclass();\n         }\n         /* 22-Dec-2008, tatu: Not sure if this case is safe -- I suspect\n          *   it is possible to make it fail?\n-         *   But let's deal with specifc\n+         *   But let's deal with specific\n          *   case when we know an actual use case, and thereby suitable\n-         *   work arounds for valid case(s) and/or error to throw\n+         *   workarounds for valid case(s) and/or error to throw\n          *   on invalid one(s).\n          */\n         _type = ((ParameterizedType) superClass).getActualTypeArguments()[0];\n     }\n \n     public Type getType() { return _type; }\n-\n+    \n     /**\n      * The only reason we define this method (and require implementation\n      * of <code>Comparable</code>) is to prevent constructing a", "timestamp": 1329635609, "metainfo": ""}