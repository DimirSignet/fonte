{"sha": "0e791abb721f9934f143555f8f75703e91d87b0a", "log": "Merge pull request #125 from goncalossilva/minor_cleanup  Minor cleanup", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/Base64Variants.java\n+++ b/src/main/java/com/fasterxml/jackson/core/Base64Variants.java\n      */\n     public final static Base64Variant MODIFIED_FOR_URL;\n     static {\n-        StringBuffer sb = new StringBuffer(STD_BASE64_ALPHABET);\n+        StringBuilder sb = new StringBuilder(STD_BASE64_ALPHABET);\n         // Replace plus with hyphen, slash with underscore (and no padding)\n         sb.setCharAt(sb.indexOf(\"+\"), '-');\n         sb.setCharAt(sb.indexOf(\"/\"), '_');\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n      * and this reuse only works within context of a single\n      * factory instance.\n      */\n-    public JsonFactory() { this((ObjectCodec) null); }\n+    public JsonFactory() { this(null); }\n \n     public JsonFactory(ObjectCodec oc) { _objectCodec = oc; }\n \n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerationException.java\n \n     public JsonGenerationException(String msg, Throwable rootCause)\n     {\n-        super(msg, (JsonLocation)null, rootCause);\n+        super(msg, null, rootCause);\n     }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/Version.java\n+++ b/src/main/java/com/fasterxml/jackson/core/Version.java\n     public String getArtifactId() { return _artifactId; }\n     \n     public String toFullString() {\n-        return new StringBuilder()\n-        \t.append(_groupId)\n-        \t.append('/')\n-        \t.append(_artifactId)\n-        \t.append('/')\n-        \t.append(toString())\n-        \t.toString();\n+        return _groupId + '/' + _artifactId + '/' + toString();\n     }\n     \n     @Override\n--- a/src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/UTF32Reader.java\n         // Bytes that need to be moved to the beginning of buffer?\n         if (available > 0) {\n             if (_ptr > 0) {\n-                for (int i = 0; i < available; ++i) {\n-                    _buffer[i] = _buffer[_ptr+i];\n-                }\n+                System.arraycopy(_buffer, _ptr, _buffer, 0, available);\n                 _ptr = 0;\n             }\n             _length = available;\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n         }\n         int c = (int) _inputBuffer[_inputPtr++];\n \n-        switch ((int) c) {\n+        switch (c) {\n             // First, ones that are mapped\n         case 'b':\n             return '\\b';\n \n     protected int _decodeCharForError(int firstByte) throws IOException\n     {\n-        int c = (int) firstByte;\n+        int c = firstByte;\n         if (c < 0) { // if >= 0, is ascii and fine as is\n             int needed;\n             \n--- a/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n         }\n         // Otherwise, need to copy the incoming buffer\n         int[] buf = new int[qlen];\n-        for (int i = 0; i < qlen; ++i) {\n-            buf[i] = quads[i];\n-        }\n+        System.arraycopy(quads, 0, buf, 0, qlen);\n         return new NameN(name, hash, buf, qlen);\n     }\n \n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n         final char[] result = carr(size);\n         if (_segments != null) {\n             for (int i = 0, len = _segments.size(); i < len; ++i) {\n-                char[] curr = (char[]) _segments.get(i);\n+                char[] curr = _segments.get(i);\n                 int currLen = curr.length;\n                 System.arraycopy(curr, 0, result, offset, currLen);\n                 offset += currLen;", "timestamp": 1390672531, "metainfo": ""}