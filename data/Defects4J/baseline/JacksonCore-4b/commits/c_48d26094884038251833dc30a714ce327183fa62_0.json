{"sha": "48d26094884038251833dc30a714ce327183fa62", "log": "Further improvements to version handling", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      * @param schema Schema to use\n      * \n      * @throws UnsupportedOperationException if generator does not support schema\n-     * \n-     * @since 1.8\n      */\n     public void setSchema(FormatSchema schema)\n     {\n      * @param schema Schema to check\n      * \n      * @return True if this generator can use given schema; false if not\n-     * \n-     * @since 1.8\n      */\n     public boolean canUseSchema(FormatSchema schema) {\n         return false;\n     }\n     \n     /**\n-     * @since 1.6\n+     * Accessor for finding out version of the bundle that provided this generator instance.\n      */\n     @Override\n-    public Version version() {\n-        return Version.unknownVersion();\n-    }\n+    public abstract Version version();\n \n     /**\n      * Method that can be used to get access to object that is used\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     \n     /**\n      * Accessor for getting version of the core package, given a parser instance.\n+     * Left for sub-classes to implement.\n      */\n     @Override\n-    public Version version() {\n-        return Version.unknownVersion();\n-    }\n+    public abstract Version version();\n \n     /**\n      * Method that can be used to get access to object that is used\n--- a/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/GeneratorBase.java\n         _objectCodec = codec;\n         _cfgNumbersAsStrings = isEnabled(Feature.WRITE_NUMBERS_AS_STRINGS);\n     }\n-\n+    /**\n+     * Implemented with detection that tries to find \"VERSION.txt\" in same\n+     * package as the implementation class.\n+     */\n     @Override\n     public Version version() {\n         return VersionUtil.versionFor(getClass());\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserBase.java\n import com.fasterxml.jackson.core.json.JsonReadContext;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n import com.fasterxml.jackson.core.util.TextBuffer;\n-import com.fasterxml.jackson.core.util.VersionUtil;\n \n /**\n  * Intermediate base class used by all Jackson {@link JsonParser}\n         _ioContext = ctxt;\n         _textBuffer = ctxt.constructTextBuffer();\n         _parsingContext = JsonReadContext.createRootContext();\n-    }\n-    \n-    @Override\n-    public Version version() {\n-        return VersionUtil.versionFor(getClass());\n     }\n     \n     /*\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n import com.fasterxml.jackson.core.JsonParser.Feature;\n import com.fasterxml.jackson.core.io.NumberInput;\n import com.fasterxml.jackson.core.util.ByteArrayBuilder;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n \n /**\n  * Intermediate base class used by all Jackson {@link JsonParser}\n  * Note that 'minimal' here mostly refers to minimal number of fields\n  * (size) and functionality that is specific to certain types\n  * of parser implementations; but not necessarily to number of methods.\n- * \n- * @since 1.6\n  *\n  * @author Tatu Saloranta\n  */\n         super(features);\n     }\n \n+    @Override\n+    public Version version() {\n+        return VersionUtil.versionFor(getClass());\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Configuration overrides if any\n--- a/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/JsonReadContext.java\n         return new JsonReadContext(null, TYPE_ROOT, lineNr, colNr);\n     }\n \n-    /**\n-     * @since 1.9\n-     */\n     public static JsonReadContext createRootContext()\n     {\n         return new JsonReadContext(null, TYPE_ROOT, 1, 0);\n--- /dev/null\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ModuleVersion.java\n+package com.fasterxml.jackson.core.json;\n+\n+import com.fasterxml.jackson.core.util.VersionUtil;\n+\n+/**\n+ * Helper class used for finding and caching version information\n+ * for the core bundle.\n+ */\n+public class ModuleVersion extends VersionUtil\n+{\n+    public final static ModuleVersion instance = new ModuleVersion();\n+}\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n         _symbols = st;\n     }\n \n+    @Override\n+    public Version version() {\n+        return ModuleVersion.instance.version();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Base method defs, overrides\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n         _objectCodec = c;\n     }\n \n+    @Override\n+    public Version version() {\n+        return ModuleVersion.instance.version();\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Former StreamBasedParserBase methods\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n import com.fasterxml.jackson.core.*;\n import com.fasterxml.jackson.core.base.GeneratorBase;\n import com.fasterxml.jackson.core.io.*;\n+import com.fasterxml.jackson.core.util.VersionUtil;\n \n /**\n  * {@link JsonGenerator} that outputs JSON content using a {@link java.io.Writer}\n      * Definition of custom character escapes to use for generators created\n      * by this factory, if any. If null, standard data format specific\n      * escapes are used.\n-     * \n-     * @since 1.8\n      */\n     protected CharacterEscapes _characterEscapes;\n \n     /**\n      * When custom escapes are used, this member variable can be used to\n      * store escape to use\n-     * \n-     * @since 1.8\n      */\n     protected SerializableString _currentEscape;\n \n             setHighestNonEscapedChar(127);\n         }\n     }\n- \n+\n+    @Override\n+    public Version version() {\n+        return VersionUtil.versionFor(getClass());\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Overridden configuration methods\n     /**\n      * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n      * it creates.\n-     * \n-     * @since 1.8\n      */\n     @Override\n     public CharacterEscapes getCharacterEscapes() {\n     /**********************************************************\n     /* Internal methods, low-level writing, text segment\n     /* with additional escaping (ASCII or such)\n-    /* (since 1.8; see [JACKSON-102])\n     /**********************************************************\n      */\n \n     /**********************************************************\n     /* Internal methods, low-level writing, text segment\n     /* with custom escaping (possibly coupling with ASCII limits)\n-    /* (since 1.8; see [JACKSON-106])\n     /**********************************************************\n      */\n \n--- a/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/VersionUtil.java\n \n /**\n  * Functionality for supporting exposing of component {@link Version}s.\n+ *<p>\n+ * Note that this class can be used in two roles: first, as a static\n+ * utility class for loading purposes, and second, as a singleton\n+ * loader of per-module version information.\n+ * In latter case one must sub-class to get proper per-module instance;\n+ * and sub-class must reside in same Java package as matching \"VERSION.txt\"\n+ * file.\n  */\n public class VersionUtil\n {\n     public final static String VERSION_FILE = \"VERSION.txt\";\n \n     private final static Pattern VERSION_SEPARATOR = Pattern.compile(\"[-_./;:]\");\n+\n+    private final Version _version;\n+\n+    /*\n+    /**********************************************************\n+    /* Instance life-cycle, accesso\n+    /**********************************************************\n+     */\n+    \n+    protected VersionUtil()\n+    {\n+        Version v = null;\n+        try {\n+            /* Class we pass only matters for resource-loading: can't use this Class\n+             * (as it's just being loaded at this point), nor anything that depends on it.\n+             */\n+            v = VersionUtil.versionFor(getClass());\n+        } catch (Exception e) { // not good to dump to stderr; but that's all we have at this low level\n+            System.err.println(\"ERROR: Failed to load Version information for bundle (via \"+getClass().getName()+\").\");\n+        }\n+        if (v == null) {\n+            v = Version.unknownVersion();\n+        }\n+        _version = v;\n+    }\n+\n+    public Version version() { return _version; }\n+    \n+    /*\n+    /**********************************************************\n+    /* Static load methods\n+    /**********************************************************\n+     */\n     \n     /**\n      * Helper method that will try to load version information for specified", "timestamp": 1325142709, "metainfo": ""}