{"sha": "51bf0302998685205c2b318e551c108e75db2cf7", "log": "Remove all pre-2.0 @since tags (since nothing in these packages predates 2.0)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/FormatSchema.java\n+++ b/src/main/java/com/fasterxml/jackson/core/FormatSchema.java\n  * to cast to schema implementations they use. This marker interface is mostly\n  * used for tagging \"some kind of schema\" -- instead of passing opaque\n  * {@link java.lang.Object} -- for documentation purposes.\n- * \n- * @since 1.8\n  */\n public interface FormatSchema\n {\n--- a/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonGenerator.java\n      * @param charCode Either -1 to indicate that no additional escaping\n      *   is to be done; or highest code point not to escape (meaning higher\n      *   ones will be), if positive value.\n-     * \n-     * @since 1.8\n      */\n     public JsonGenerator setHighestNonEscapedChar(int charCode) {\n         return this;\n     /**\n      * Method for accessing custom escapes factory uses for {@link JsonGenerator}s\n      * it creates.\n-     * \n-     * @since 1.8\n      */\n     public CharacterEscapes getCharacterEscapes() {\n         return null;\n     /**\n      * Method for defining custom escapes factory uses for {@link JsonGenerator}s\n      * it creates.\n-     * \n-     * @since 1.8\n      */\n     public JsonGenerator setCharacterEscapes(CharacterEscapes esc) {\n         return this;\n      * generator implementation may instead choose to throw a\n      * {@link UnsupportedOperationException} due to ineffectiveness\n      * of having to decode input.\n-     * \n-     * @since 1.7\n      */\n     public abstract void writeUTF8String(byte[] text, int offset, int length)\n         throws IOException, JsonGenerationException;\n--- a/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n      * future. This is the case with non-blocking parsers --\n      * they can not block to wait for more data to parse and\n      * must return something.\n-     *\n-     * @since 0.9.7\n      */\n     NOT_AVAILABLE(null),\n \n      * Note: this token is never returned by regular JSON readers, but\n      * only by readers that expose other kinds of source (like\n      * {@link JsonNode}-based JSON trees, Maps, Lists and such).\n-     *\n-     * @since 1.1\n      */\n     VALUE_EMBEDDED_OBJECT(null),\n \n--- a/src/main/java/com/fasterxml/jackson/core/Versioned.java\n+++ b/src/main/java/com/fasterxml/jackson/core/Versioned.java\n  * This may be useful for example for ensuring that proper Jackson version is deployed\n  * (beyond mechanisms that deployment system may have), as well as for possible\n  * workarounds.\n- * \n- * @since 1.6\n  */\n public interface Versioned {\n     /**\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n     /**\n      * Helper method that can be used for base64 decoding in cases where\n      * encoded content has already been read as a String.\n-     * \n-     * @since 1.9.3\n      */\n     protected void _decodeBase64(String str, ByteArrayBuilder builder, Base64Variant b64variant)\n         throws IOException, JsonParseException\n--- a/src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java\n+++ b/src/main/java/com/fasterxml/jackson/core/format/DataFormatDetector.java\n  * Simple helper class that allows data format (content type) auto-detection,\n  * given an ordered set of {@link JsonFactory} instances to use for actual low-level\n  * detection.\n- *\n- * @since 1.7\n  */\n public class DataFormatDetector\n {\n--- a/src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java\n+++ b/src/main/java/com/fasterxml/jackson/core/format/InputAccessor.java\n /**\n  * Interface used to expose beginning of a data file to data format\n  * detection code.\n- * \n- * @since 1.8\n  */\n public interface InputAccessor\n {\n--- a/src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java\n+++ b/src/main/java/com/fasterxml/jackson/core/format/MatchStrength.java\n  * Values are in increasing match strength; and detectors should return\n  * \"strongest\" value: that is, it should start with strongest match\n  * criteria, and downgrading if criteria is not fulfilled.\n- * \n- * @since 1.8\n  */\n public enum MatchStrength\n {\n--- a/src/main/java/com/fasterxml/jackson/core/format/package-info.java\n+++ b/src/main/java/com/fasterxml/jackson/core/format/package-info.java\n  * Package that contains interfaces needed for dynamic, pluggable\n  * format (auto)detection; as well as basic utility classes for\n  * simple format detection functionality.\n- * \n- * @since 1.8\n  */\n package com.fasterxml.jackson.core.format;\n--- a/src/main/java/com/fasterxml/jackson/core/io/CharTypes.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/CharTypes.java\n      * need to have alternate checking.\n      * Basically this is list of 8-bit ASCII characters that are legal\n      * as part of Javascript identifier\n-     *\n-     * @since 1.2\n      */\n     final static int[] sInputCodesJsNames;\n     static {\n         }\n     }\n \n-    /**\n-     * @since 1.6\n-     */\n     public static char[] copyHexChars()\n     {\n         return (char[]) HEX_CHARS.clone();\n     }\n \n-    /**\n-     * @since 1.6\n-     */\n     public static byte[] copyHexBytes()\n     {\n         return (byte[]) HEX_BYTES.clone();\n--- a/src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/CharacterEscapes.java\n  * Abstract base class that defines interface for customizing character\n  * escaping aspects for String values, for formats that use escaping.\n  * For JSON this applies to both property names and String values.\n- *\n- * @since 1.8\n  */\n public abstract class CharacterEscapes\n {\n--- a/src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/InputDecorator.java\n  * Typical use is to use a filter abstraction (filtered stream,\n  * reader) around original input source, and apply additional\n  * processing during read operations.\n- * \n- * @since 1.8\n  */\n public abstract class InputDecorator\n {\n--- a/src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java\n  * Note that methods in here are somewhat optimized, but not ridiculously so.\n  * Reason is that conversion method results are expected to be cached so that\n  * these methods will not be hot spots during normal operation.\n- *\n- * @since 1.6\n  */\n public final class JsonStringEncoder\n {\n--- a/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/NumberInput.java\n     /**\n      * Helper method to (more) efficiently parse integer numbers from\n      * String values.\n-     * \n-     * @since 1.7\n      */\n     public final static int parseInt(String str)\n     {\n      *\n      * @param negative Whether original number had a minus sign (which is\n      *    NOT passed to this method) or not\n-     *\n-     * @since 1.5.0\n      */\n     public final static boolean inLongRange(String numberStr, boolean negative)\n     {\n         return true;\n     }\n \n-    /**\n-     * @since 1.6\n-     */\n     public static int parseAsInt(String input, int defaultValue)\n     {\n         if (input == null) {\n         return defaultValue;\n     }\n \n-    /**\n-     * @since 1.6\n-     */\n     public static long parseAsLong(String input, long defaultValue)\n     {\n         if (input == null) {\n         return defaultValue;\n     }\n     \n-    /**\n-     * @since 1.6\n-     */\n     public static double parseAsDouble(String input, double defaultValue)\n     {\n         if (input == null) {\n         return defaultValue;\n     }\n     \n-    /**\n-     * @since 1.8\n-     */\n     public final static double parseDouble(String numStr) throws NumberFormatException\n     {\n         // [JACKSON-486]: avoid some nasty float representations... but should it be MIN_NORMAL or MIN_VALUE?\n--- a/src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/OutputDecorator.java\n  * Typical use is to use a filter abstraction (filtered output stream,\n  * writer) around original output destination, and apply additional\n  * processing during write operations.\n- * \n- * @since 1.8\n  */\n public abstract class OutputDecorator\n {\n--- a/src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/SegmentedStringWriter.java\n  * This class is most useful when serializing JSON content as a String:\n  * if so, instance of this class can be given as the writer to\n  * <code>JsonGenerator</code>.\n- *\n- * @since 1.3\n  */\n public final class SegmentedStringWriter\n     extends Writer\n--- a/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ByteSourceJsonBootstrapper.java\n      * ({@link com.fasterxml.jackson.core.json.ByteSourceJsonBootstrapper}); \n      * supports UTF-8, for example. But it should work, for now, and can\n      * be improved as necessary.\n-     * \n-     * @since 1.8\n      */\n     public static MatchStrength hasJSONFormat(InputAccessor acc) throws IOException\n     {\n--- a/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java\n      * than double quote, when expecting a field name.\n      * In standard mode will just throw an expection; but\n      * in non-standard modes may be able to parse name.\n-     *\n-     * @since 1.2\n      */\n     protected final String _handleUnusualFieldName(int i)\n         throws IOException, JsonParseException\n     /**\n      * Method for handling cases where first non-space character\n      * of an expected value token is not legal for standard JSON content.\n-     *\n-     * @since 1.3\n      */\n     protected final JsonToken _handleUnexpectedValue(int i)\n         throws IOException, JsonParseException\n         return null;\n     }\n     \n-    /**\n-     * @since 1.8\n-     */\n     protected final JsonToken _handleApostropheValue()\n         throws IOException, JsonParseException\n     {\n         return JsonToken.VALUE_STRING;\n     }\n     \n-    /**\n-     * @since 1.2\n-     */\n     private String _parseUnusualFieldName2(int startPtr, int hash, int[] codes)\n         throws IOException, JsonParseException\n     {\n     \n     /**\n      * Helper method for checking whether input matches expected token\n-     * \n-     * @since 1.8\n      */\n     protected final void _matchToken(String matchStr, int i)\n         throws IOException, JsonParseException\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n     /**\n      * Helper method that will try to load at least specified number bytes in\n      * input buffer, possible moving existing data around if necessary\n-     * \n-     * @since 1.6\n      */\n     protected final boolean _loadToHaveAtLeast(int minAvailable)\n         throws IOException\n     /**\n      * Method for handling cases where first non-space character\n      * of an expected value token is not legal for standard JSON content.\n-     *\n-     * @since 1.3\n      */\n     protected JsonToken _handleUnexpectedValue(int c)\n         throws IOException, JsonParseException\n     /**\n      * Helper method for matching and skipping a colon character,\n      * optionally surrounded by white space\n-     * \n-     * @since 1.9\n      */\n     private final int _skipColon()\n         throws IOException, JsonParseException\n--- a/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/BytesToNameCanonicalizer.java\n      * Let's not expand symbol tables past some maximum size;\n      * this should protected against OOMEs caused by large documents\n      * with uniquer (~= random) names.\n-     * \n-     * @since 1.5\n      */\n     protected static final int MAX_TABLE_SIZE = 0x10000; // 64k entries == 256k mem\n     \n     /**********************************************************\n      */\n \n-    /**\n-     * @since 1.6.0\n-     */\n     public Name addName(String symbolStr, int q1, int q2)\n     {\n         if (_intern) {\n--- a/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/sym/CharsToNameCanonicalizer.java\n      * Let's not expand symbol tables past some maximum size;\n      * this should protected against OOMEs caused by large documents\n      * with uniquer (~= random) names.\n-     * \n-     * @since 1.5\n      */\n     protected static final int MAX_TABLE_SIZE = 0x10000; // 64k entries == 256k mem\n \n--- a/src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/ByteArrayBuilder.java\n     /**\n      * Optional buffer recycler instance that we can use for allocating\n      * the first block.\n-     * \n-     * @since 1.5\n      */\n     private final BufferRecycler _bufferRecycler;\n     \n     /**\n      * Method called when starting \"manual\" output: will clear out\n      * current state and return the first segment buffer to fill\n-     * \n-     * @since 1.6\n      */\n     public byte[] resetAndGetFirstSegment() {\n         reset();\n      * Method called when the current segment buffer is full; will\n      * append to current contents, allocate a new segment buffer\n      * and return it\n-     * \n-     * @since 1.6\n      */\n     public byte[] finishCurrentSegment() {\n         _allocMore();\n--- a/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/JsonParserSequence.java\n  *<p>\n  * Fairly simple use of {@link JsonParserDelegate}: only need\n  * to override {@link #nextToken} to handle transition\n- * \n- * @author tatu\n- * @since 1.5\n  */\n public class JsonParserSequence extends JsonParserDelegate\n {\n--- a/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/MinimalPrettyPrinter.java\n  * configurability which may be useful for actual use: for example,\n  * it is possible to redefine separator used between root-level\n  * values (default is single space; can be changed to line-feed).\n- * \n- * @since 1.6\n  */\n public class MinimalPrettyPrinter\n     implements PrettyPrinter\n         this(DEFAULT_ROOT_VALUE_SEPARATOR);\n     }\n \n-    /**\n-     * @since 1.9\n-     */\n     public MinimalPrettyPrinter(String rootValueSeparator) {\n         _rootValueSeparator = rootValueSeparator;\n     }\n--- a/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/util/TextBuffer.java\n     /**\n      * Method that can be used to check whether textual contents can\n      * be efficiently accessed using {@link #getTextBuffer}.\n-     * \n-     * @since 1.9\n      */\n     public boolean hasTextAsCharacters()\n     {", "timestamp": 1327104275, "metainfo": ""}