{"sha": "a5a69a56b9e23537598fe4fa69e5b1f796d7356f", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n      * Method called if expected numeric value (due to leading sign) does not\n      * look like a number\n      */\n-    protected JsonToken _handleInvalidNumberStart(int ch, boolean negative)\n-        throws IOException, JsonParseException\n-    {\n-        if (ch == 'I') {\n+    protected JsonToken _handleInvalidNumberStart(int ch, boolean neg)\n+        throws IOException, JsonParseException\n+    {\n+        while (ch == 'I') {\n             if (_inputPtr >= _inputEnd) {\n                 if (!loadMore()) {\n                     _reportInvalidEOFInValue();\n                 }\n             }\n             ch = _inputBuffer[_inputPtr++];\n+            String match;\n             if (ch == 'N') {\n-                String match = negative ? \"-INF\" :\"+INF\";\n-                _matchToken(match, 3);\n-                if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n-                    return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n-                }\n-                _reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n+                match = neg ? \"-INF\" :\"+INF\";\n             } else if (ch == 'n') {\n-                String match = negative ? \"-Infinity\" :\"+Infinity\";\n-                _matchToken(match, 3);\n-                if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n-                    return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n-                }\n-                _reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n-            }\n+                match = neg ? \"-Infinity\" :\"+Infinity\";\n+            } else {\n+                break;\n+            }\n+            _matchToken(match, 3);\n+            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n+                return resetAsNaN(match, neg ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);\n+            }\n+            _reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n         }\n         reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");\n         return null;\n     }\n-\n+    \n     protected void _matchToken(String matchStr, int i)\n         throws IOException, JsonParseException\n     {\n     protected void _reportInvalidToken(String matchedPart)\n             throws IOException, JsonParseException\n     {\n-    \t_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");\n+        _reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");\n     }\n     \n     protected void _reportInvalidToken(String matchedPart, String msg)", "timestamp": 1365356671, "metainfo": ""}