{"sha": "0ccc4c95cec8f7907230897034520ceb0064bbe9", "log": "Implement [JACKSON-742], add more SerializableString accessors", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/SerializableString.java\n+++ b/src/main/java/com/fasterxml/jackson/core/SerializableString.java\n package com.fasterxml.jackson.core;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n \n /**\n  * Interface that defines how Jackson package can interact with efficient\n  * Typically implementations store possible serialized version(s) so that\n  * serialization of String can be done more efficiently, especially when\n  * used multiple times.\n- *\n- * @since 1.7 (1.6 introduced implementation, but interface extracted later)\n  * \n  * @see com.fasterxml.jackson.core.io.SerializedString\n  */\n      */\n     public int charLength();\n \n+    \n+    /*\n+    /**********************************************************\n+    /* Accessors for byte sequences\n+    /**********************************************************\n+     */\n+    \n     /**\n      * Returns JSON quoted form of the String, as character array. Result\n      * can be embedded as-is in textual JSON as property name or JSON String.\n      *</pre>\n      */\n     public byte[] asQuotedUTF8();\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods for appending byte/char sequences\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method that will append quoted UTF-8 bytes of this String into given\n+     * buffer, if there is enough room; if not, returns -1.\n+     * Functionally equivalent to:\n+     *<pre>\n+     *  byte[] bytes = str.asQuotedUTF8();\n+     *  System.arraycopy(bytes, 0, buffer, offset, bytes.length);\n+     *  return bytes.length;\n+     *</pre>\n+     * \n+     * @return Number of bytes appended, if successful, otherwise -1\n+     * \n+     * @since 2.0\n+     */\n+    public int appendQuotedUTF8(byte[] buffer, int offset);\n+\n+    /**\n+     * Method that will append quoted characters of this String into given\n+     * buffer. Functionally equivalent to:\n+     *<pre>\n+     *  char[] ch = str.asQuotedChars();\n+     *  System.arraycopy(ch, 0, buffer, offset, ch.length);\n+     *  return ch.length;\n+     *</pre>\n+     * \n+     * @return Number of characters appended, if successful, otherwise -1\n+     * \n+     * @since 2.0\n+     */\n+    public int appendQuoted(char[] buffer, int offset);\n+    \n+    /**\n+     * Method that will append unquoted ('raw') UTF-8 bytes of this String into given\n+     * buffer. Functionally equivalent to:\n+     *<pre>\n+     *  byte[] bytes = str.asUnquotedUTF8();\n+     *  System.arraycopy(bytes, 0, buffer, offset, bytes.length);\n+     *  return bytes.length;\n+     *</pre>\n+     * \n+     * @return Number of bytes appended, if successful, otherwise -1\n+     * \n+     * @since 2.0\n+     */\n+    public int appendUnquotedUTF8(byte[] buffer, int offset);\n+\n+    \n+    /**\n+     * Method that will append unquoted characters of this String into given\n+     * buffer. Functionally equivalent to:\n+     *<pre>\n+     *  char[] ch = str.getValue().toCharArray();\n+     *  System.arraycopy(bytes, 0, buffer, offset, ch.length);\n+     *  return ch.length;\n+     *</pre>\n+     * \n+     * @return Number of characters appended, if successful, otherwise -1\n+     * \n+     * @since 2.0\n+     */\n+    public int appendUnquoted(char[] buffer, int offset);\n+\n+    /*\n+    /**********************************************************\n+    /* Helper methods for writing out byte sequences\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * @return Number of bytes written\n+     * \n+     * @since 2.0\n+     */\n+    public int writeQuotedUTF8(OutputStream out) throws IOException;\n+\n+    /**\n+     * @return Number of bytes written\n+     * \n+     * @since 2.0\n+     */\n+    public int writeUnquotedUTF8(OutputStream out) throws IOException;\n+\n+    /**\n+     * @return Number of bytes put, if successful, otherwise -1\n+     * \n+     * @since 2.0\n+     */\n+    public int putQuotedUTF8(ByteBuffer buffer) throws IOException;\n+\n+    /**\n+     * @return Number of bytes put, if successful, otherwise -1\n+     * \n+     * @since 2.0\n+     */\n+    public int putUnquotedUTF8(ByteBuffer out) throws IOException;\n }\n--- a/src/main/java/com/fasterxml/jackson/core/io/SerializedString.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/SerializedString.java\n package com.fasterxml.jackson.core.io;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.ByteBuffer;\n \n import com.fasterxml.jackson.core.SerializableString;\n \n  *<p>\n  * Class is final for performance reasons and since this is not designed to\n  * be extensible or customizable (customizations would occur in calling code)\n- *\n- * @since 1.6\n  */\n public class SerializedString implements SerializableString\n {\n         }\n         return result;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Additional 2.0 methods for appending/writing contents\n+    /**********************************************************\n+     */\n+    @Override\n+    public int appendQuotedUTF8(byte[] buffer, int offset)\n+    {\n+        byte[] result = _quotedUTF8Ref;\n+        if (result == null) {\n+            result = JsonStringEncoder.getInstance().quoteAsUTF8(_value);\n+            _quotedUTF8Ref = result;\n+        }\n+        final int length = result.length;\n+        if ((offset + length) > buffer.length) {\n+            return -1;\n+        }\n+        System.arraycopy(result, 0, buffer, offset, length);\n+        return length;\n+    }\n+\n+    @Override\n+    public int appendQuoted(char[] buffer, int offset)\n+    {\n+        char[] result = _quotedChars;\n+        if (result == null) {\n+            result = JsonStringEncoder.getInstance().quoteAsString(_value);\n+            _quotedChars = result;\n+        }\n+        final int length = result.length;\n+        if ((offset + length) > buffer.length) {\n+            return -1;\n+        }\n+        System.arraycopy(result, 0, buffer, offset, length);\n+        return length;\n+    }\n+\n+    @Override\n+    public int appendUnquotedUTF8(byte[] buffer, int offset)\n+    {\n+        byte[] result = _unquotedUTF8Ref;\n+        if (result == null) {\n+            result = JsonStringEncoder.getInstance().encodeAsUTF8(_value);\n+            _unquotedUTF8Ref  = result;\n+        }\n+        final int length = result.length;\n+        if ((offset + length) > buffer.length) {\n+            return -1;\n+        }\n+        System.arraycopy(result, 0, buffer, offset, length);\n+        return length;\n+    }\n+\n+    @Override\n+    public int appendUnquoted(char[] buffer, int offset)\n+    {\n+        String str = _value;\n+        final int length = str.length();\n+        if ((offset + length) > buffer.length) {\n+            return -1;\n+        }\n+        str.getChars(0,  length, buffer, offset);\n+        return length;\n+    }\n+\n+    @Override\n+    public int writeQuotedUTF8(OutputStream out) throws IOException\n+    {\n+        byte[] result = _quotedUTF8Ref;\n+        if (result == null) {\n+            result = JsonStringEncoder.getInstance().quoteAsUTF8(_value);\n+            _quotedUTF8Ref = result;\n+        }\n+        final int length = result.length;\n+        out.write(result, 0, length);\n+        return length;\n+    }\n+\n+    @Override\n+    public int writeUnquotedUTF8(OutputStream out) throws IOException\n+    {\n+        byte[] result = _unquotedUTF8Ref;\n+        if (result == null) {\n+            result = JsonStringEncoder.getInstance().encodeAsUTF8(_value);\n+            _unquotedUTF8Ref  = result;\n+        }\n+        final int length = result.length;\n+        out.write(result, 0, length);\n+        return length;\n+    }\n+\n+    @Override\n+    public int putQuotedUTF8(ByteBuffer buffer)\n+    {\n+        byte[] result = _quotedUTF8Ref;\n+        if (result == null) {\n+            result = JsonStringEncoder.getInstance().quoteAsUTF8(_value);\n+            _quotedUTF8Ref = result;\n+        }\n+        final int length = result.length;\n+        if (length > buffer.remaining()) {\n+            return -1;\n+        }\n+        buffer.put(result, 0, length);\n+        return length;\n+    }\n+\n+    @Override\n+    public int putUnquotedUTF8(ByteBuffer buffer)\n+    {\n+        byte[] result = _unquotedUTF8Ref;\n+        if (result == null) {\n+            result = JsonStringEncoder.getInstance().encodeAsUTF8(_value);\n+            _unquotedUTF8Ref  = result;\n+        }\n+        final int length = result.length;\n+        if (length > buffer.remaining()) {\n+            return -1;\n+        }\n+        buffer.put(result, 0, length);\n+        return length;\n+    }\n+\n     \n     /*\n     /**********************************************************\n--- /dev/null\n+++ b/src/test/java/com/fasterxml/jackson/core/util/TestSerializedString.java\n+package com.fasterxml.jackson.core.util;\n+\n+import java.io.*;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+\n+import com.fasterxml.jackson.core.SerializableString;\n+import com.fasterxml.jackson.core.io.SerializedString;\n+\n+/**\n+ * Simple unit tests to try to verify that the default\n+ * {@link SerializableString} implementation works as expected.\n+ */\n+public class TestSerializedString\n+    extends com.fasterxml.jackson.test.BaseTest\n+{\n+    public void testAppending() throws IOException\n+    {\n+        final String INPUT = \"\\\"quo\\\\ted\\\"\";\n+        final String QUOTED = \"\\\\\\\"quo\\\\\\\\ted\\\\\\\"\";\n+        \n+        SerializableString sstr = new SerializedString(INPUT);\n+        // sanity checks first:\n+        assertEquals(sstr.getValue(), INPUT);\n+        assertEquals(QUOTED, new String(sstr.asQuotedChars()));\n+\n+        ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n+        assertEquals(QUOTED.length(), sstr.writeQuotedUTF8(bytes));\n+        assertEquals(QUOTED, bytes.toString(\"UTF-8\"));\n+        bytes.reset();\n+        assertEquals(INPUT.length(), sstr.writeUnquotedUTF8(bytes));\n+        assertEquals(INPUT, bytes.toString(\"UTF-8\"));\n+\n+        byte[] buffer = new byte[100];\n+        assertEquals(QUOTED.length(), sstr.appendQuotedUTF8(buffer, 3));\n+        assertEquals(QUOTED, new String(buffer, 3, QUOTED.length()));\n+        Arrays.fill(buffer, (byte) 0);\n+        assertEquals(INPUT.length(), sstr.appendUnquotedUTF8(buffer, 5));\n+        assertEquals(INPUT, new String(buffer, 5, INPUT.length()));\n+    }\n+\n+    public void testFailedAccess() throws IOException\n+    {\n+        final String INPUT = \"Bit longer text\";\n+        SerializableString sstr = new SerializedString(INPUT);\n+\n+        final byte[] buffer = new byte[INPUT.length() - 2];\n+        final char[] ch = new char[INPUT.length() - 2];\n+        final ByteBuffer bbuf = ByteBuffer.allocate(INPUT.length() - 2);\n+        \n+        assertEquals(-1, sstr.appendQuotedUTF8(buffer, 0));\n+        assertEquals(-1, sstr.appendQuoted(ch, 0));\n+        assertEquals(-1, sstr.putQuotedUTF8(bbuf));\n+\n+        bbuf.rewind();\n+        assertEquals(-1, sstr.appendUnquotedUTF8(buffer, 0));\n+        assertEquals(-1, sstr.appendUnquoted(ch, 0));\n+        assertEquals(-1, sstr.putUnquotedUTF8(bbuf));\n+    }\n+}", "timestamp": 1326867196, "metainfo": ""}