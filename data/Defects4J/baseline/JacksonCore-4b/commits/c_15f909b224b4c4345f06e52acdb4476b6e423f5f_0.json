{"sha": "15f909b224b4c4345f06e52acdb4476b6e423f5f", "log": "...", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/WriterBasedJsonGenerator.java\n      */\n \n     @Override\n-    protected void _verifyValueWrite(String typeMsg)\n-        throws IOException, JsonGenerationException\n+    protected void _verifyValueWrite(String typeMsg) throws IOException\n     {\n         int status = _writeContext.writeValue();\n         if (status == JsonWriteContext.STATUS_EXPECT_NAME) {\n             _reportError(\"Can not \"+typeMsg+\", expecting field name\");\n         }\n-        if (_cfgPrettyPrinter == null) {\n-            char c;\n-            switch (status) {\n-            case JsonWriteContext.STATUS_OK_AFTER_COMMA:\n-                c = ',';\n-                break;\n-            case JsonWriteContext.STATUS_OK_AFTER_COLON:\n-                c = ':';\n-                break;\n-            case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator\n-                if (_rootValueSeparator != null) {\n-                    writeRaw(_rootValueSeparator.getValue());\n-                }\n-                return;\n-            case JsonWriteContext.STATUS_OK_AS_IS:\n-            default:\n-                return;\n-            }\n-            if (_outputTail >= _outputEnd) {\n-                _flushBuffer();\n-            }\n-            _outputBuffer[_outputTail] = c;\n-            ++_outputTail;\n-            return;\n-        }\n-        // Otherwise, pretty printer knows what to do...\n-        _verifyPrettyValueWrite(typeMsg, status);\n-    }\n-\n-    protected void _verifyPrettyValueWrite(String typeMsg, int status)\n-        throws IOException, JsonGenerationException\n+        if (_cfgPrettyPrinter != null) {\n+            // Otherwise, pretty printer knows what to do...\n+            _verifyPrettyValueWrite(typeMsg, status);\n+            return;\n+        }\n+        char c;\n+        switch (status) {\n+        case JsonWriteContext.STATUS_OK_AFTER_COMMA:\n+            c = ',';\n+            break;\n+        case JsonWriteContext.STATUS_OK_AFTER_COLON:\n+            c = ':';\n+            break;\n+        case JsonWriteContext.STATUS_OK_AFTER_SPACE: // root-value separator\n+            if (_rootValueSeparator != null) {\n+                writeRaw(_rootValueSeparator.getValue());\n+            }\n+            return;\n+        case JsonWriteContext.STATUS_OK_AS_IS:\n+        default:\n+            return;\n+        }\n+        if (_outputTail >= _outputEnd) {\n+            _flushBuffer();\n+        }\n+        _outputBuffer[_outputTail] = c;\n+        ++_outputTail;\n+    }\n+\n+    protected void _verifyPrettyValueWrite(String typeMsg, int status) throws IOException\n     {\n         // If we have a pretty printer, it knows what to do:\n         switch (status) {\n      */\n \n     @Override\n-    public void flush()\n-        throws IOException\n+    public void flush() throws IOException\n     {\n         _flushBuffer();\n         if (_writer != null) {\n     /**********************************************************\n      */\n \n-    private void _writeString(String text)\n-        throws IOException, JsonGenerationException\n+    private void _writeString(String text) throws IOException\n     {\n         /* One check first: if String won't fit in the buffer, let's\n          * segment writes. No point in extending buffer to huge sizes\n         }\n     }\n \n-    private void _writeString2(final int len)\n-        throws IOException, JsonGenerationException\n+    private void _writeString2(final int len) throws IOException\n     {\n         // And then we'll need to verify need for escaping etc:\n-        int end = _outputTail + len;\n+        final int end = _outputTail + len;\n         final int[] escCodes = _outputEscapes;\n         final int escLen = escCodes.length;\n \n      * Method called to write \"long strings\", strings whose length exceeds\n      * output buffer length.\n      */\n-    private void _writeLongString(String text)\n-        throws IOException, JsonGenerationException\n+    private void _writeLongString(String text) throws IOException\n     {\n         // First things first: let's flush the buffer to get some more room\n         _flushBuffer();\n      * buffer, right after buffered content (if any). That's why only\n      * length of that text is passed, as buffer and offset are implied.\n      */\n-    private void _writeSegment(int end)\n-        throws IOException, JsonGenerationException\n+    private void _writeSegment(int end) throws IOException\n     {\n         final int[] escCodes = _outputEscapes;\n         final int escLen = escCodes.length;\n      * This method called when the string content is already in\n      * a char buffer, and need not be copied for processing.\n      */\n-    private void _writeString(char[] text, int offset, int len)\n-        throws IOException, JsonGenerationException\n+    private void _writeString(char[] text, int offset, int len) throws IOException\n     {\n         if (_characterEscapes != null) {\n             _writeStringCustom(text, offset, len);", "timestamp": 1398830203, "metainfo": ""}