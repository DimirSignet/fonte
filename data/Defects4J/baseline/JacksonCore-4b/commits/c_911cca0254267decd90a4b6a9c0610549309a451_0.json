{"sha": "911cca0254267decd90a4b6a9c0610549309a451", "log": "Fix #111", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonPointer.java\n  * <a href=\"http://tools.ietf.org/html/draft-ietf-appsawg-json-pointer-03\">JSON Pointer</a>\n  * specification.\n  * Pointer instances can be used to locate logical JSON nodes for things like\n- * tree traversal (see {@link TreeNode#at}) and filtering of streaming JSON content\n- * (see {@link JsonParser#filter}).\n+ * tree traversal (see {@link TreeNode#at}).\n+ * It may be used in future for filtering of streaming JSON content\n+ * as well (not implemented yet for 2.3).\n  *<p>\n  * Instances are fully immutable and can be shared, cached.\n  * \n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8StreamJsonParser.java\n         _inputBuffer = inputBuffer;\n         _inputPtr = start;\n         _inputEnd = end;\n+        _currInputRowStart = start;\n+        // If we have offset, need to omit that from byte offset, so:\n+        _currInputProcessed = -start;\n         _bufferRecyclable = bufferRecyclable;\n     }\n \n--- a/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestLocation.java\n \n         p.close();\n     }\n+\n+    // for [Issue#111]\n+    public void testOffsetWithInputOffset() throws Exception\n+    {\n+        final JsonFactory f = new JsonFactory();\n+        JsonLocation loc;\n+        JsonParser p;\n+        // 3 spaces before, 2 after, just for padding\n+        byte[] b = \"   { }  \".getBytes(\"UTF-8\");\n+\n+        // and then peel them off\n+        p = f.createParser(b, 3, b.length-5);\n+        assertToken(JsonToken.START_OBJECT, p.nextToken());\n+\n+        loc = p.getTokenLocation();\n+        assertEquals(0L, loc.getByteOffset());\n+        assertEquals(-1L, loc.getCharOffset());\n+        assertEquals(1, loc.getLineNr());\n+        assertEquals(1, loc.getColumnNr());\n+        \n+        loc = p.getCurrentLocation();\n+        assertEquals(1L, loc.getByteOffset());\n+        assertEquals(-1L, loc.getCharOffset());\n+        assertEquals(1, loc.getLineNr());\n+        assertEquals(2, loc.getColumnNr());\n+\n+        p.close();\n+    }\n }", "timestamp": 1381251824, "metainfo": ""}