{"sha": "ad2df5ffad90ca0558b7a18caf8cb548289cc53b", "log": "Added 'requiresCustomCodec()' methods, needed for format auto-detection", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n         return null;\n     }\n \n+    /**\n+     * Method that can be called to determine if a custom\n+     * {@link ObjectCodec} is needed for binding data parsed\n+     * using {@link JsonParser} constructed by this factory\n+     * (which typically also implies the same for serialization\n+     * with {@link JsonGenerator}).\n+     * \n+     * @return True if custom codec is needed with parsers and\n+     *   generators created by this factory; false if a general\n+     *   {@link ObjectCodec} is enough\n+     * \n+     * @since 2.1\n+     */\n+    public boolean requiresCustomCodec() {\n+        return false;\n+    }\n+    \n+    /**\n+     * Helper method that can be called to determine if content accessed\n+     * using given accessor seems to be JSON content.\n+     */\n     protected MatchStrength hasJSONFormat(InputAccessor acc) throws IOException\n     {\n         return ByteSourceJsonBootstrapper.hasJSONFormat(acc);\n-    }    \n-    \n+    }\n+\n     /*\n     /**********************************************************\n     /* Versioned\n--- a/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonParser.java\n     public abstract void setCodec(ObjectCodec c);\n \n     /**\n-     * Method to call to make this parser use specified schema. Method must\n-     * be called before trying to parse any content, right after parser instance\n-     * has been created.\n-     * Note that not all parsers support schemas; and those that do usually only\n-     * accept specific types of schemas: ones defined for data format parser can read.\n-     *<p>\n-     * If parser does not support specified schema, {@link UnsupportedOperationException}\n-     * is thrown.\n-     * \n-     * @param schema Schema to use\n-     * \n-     * @throws UnsupportedOperationException if parser does not support schema\n-     */\n-    public void setSchema(FormatSchema schema)\n-    {\n-        throw new UnsupportedOperationException(\"Parser of type \"+getClass().getName()+\" does not support schema of type '\"\n-                +schema.getSchemaType()+\"'\");\n-    }\n-\n-    /**\n-     * Method for accessing Schema that this parser uses, if any.\n-     * Default implementation returns null.\n-     *\n-     * @since 2.1\n-     */\n-    public FormatSchema getSchema() {\n-        return null;\n-    }\n-    \n-    /**\n-     * Method that can be used to verify that given schema can be used with\n-     * this parser (using {@link #setSchema}).\n-     * \n-     * @param schema Schema to check\n-     * \n-     * @return True if this parser can use given schema; false if not\n-     */\n-    public boolean canUseSchema(FormatSchema schema) {\n-        return false;\n-    }\n-    \n-    /**\n-     * Accessor for getting version of the core package, given a parser instance.\n-     * Left for sub-classes to implement.\n-     */\n-//  @Override\n-    public abstract Version version();\n-\n-    /**\n      * Method that can be used to get access to object that is used\n      * to access input being parsed; this is usually either\n      * {@link InputStream} or {@link Reader}, depending on what\n     public Object getInputSource() {\n         return null;\n     }\n+\n+    /*\n+    /**********************************************************\n+    /* Format support\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Method to call to make this parser use specified schema. Method must\n+     * be called before trying to parse any content, right after parser instance\n+     * has been created.\n+     * Note that not all parsers support schemas; and those that do usually only\n+     * accept specific types of schemas: ones defined for data format parser can read.\n+     *<p>\n+     * If parser does not support specified schema, {@link UnsupportedOperationException}\n+     * is thrown.\n+     * \n+     * @param schema Schema to use\n+     * \n+     * @throws UnsupportedOperationException if parser does not support schema\n+     */\n+    public void setSchema(FormatSchema schema)\n+    {\n+        throw new UnsupportedOperationException(\"Parser of type \"+getClass().getName()+\" does not support schema of type '\"\n+                +schema.getSchemaType()+\"'\");\n+    }\n+\n+    /**\n+     * Method for accessing Schema that this parser uses, if any.\n+     * Default implementation returns null.\n+     *\n+     * @since 2.1\n+     */\n+    public FormatSchema getSchema() {\n+        return null;\n+    }\n+    \n+    /**\n+     * Method that can be used to verify that given schema can be used with\n+     * this parser (using {@link #setSchema}).\n+     * \n+     * @param schema Schema to check\n+     * \n+     * @return True if this parser can use given schema; false if not\n+     */\n+    public boolean canUseSchema(FormatSchema schema) {\n+        return false;\n+    }\n+\n+    /**\n+     * Method that can be called to determine if a custom\n+     * {@link ObjectCodec} is needed for binding data parsed\n+     * using {@link JsonParser} constructed by this factory\n+     * (which typically also implies the same for serialization\n+     * with {@link JsonGenerator}).\n+     * \n+     * @return True if custom codec is needed with parsers and\n+     *   generators created by this factory; false if a general\n+     *   {@link ObjectCodec} is enough\n+     * \n+     * @since 2.1\n+     */\n+    public boolean requiresCustomCodec() {\n+        return false;\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Versioned\n+    /**********************************************************\n+     */\n+    \n+    /**\n+     * Accessor for getting version of the core package, given a parser instance.\n+     * Left for sub-classes to implement.\n+     */\n+//  @Override\n+    public abstract Version version();\n     \n     /*\n     /**********************************************************", "timestamp": 1345694149, "metainfo": ""}