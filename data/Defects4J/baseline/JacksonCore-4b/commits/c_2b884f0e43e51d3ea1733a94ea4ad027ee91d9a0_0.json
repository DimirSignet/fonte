{"sha": "2b884f0e43e51d3ea1733a94ea4ad027ee91d9a0", "log": "Fixing [JACKSON-884]", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java\n+++ b/src/main/java/com/fasterxml/jackson/core/io/JsonStringEncoder.java\n                 }\n             }\n             // something to escape; 2 or 6-char variant? \n-            int escCode = escCodes[input.charAt(inPtr++)];\n-            int length = _appendSingleEscape(escCode, _quoteBuffer);\n+            char d = input.charAt(inPtr++);\n+            int escCode = escCodes[d];\n+            int length = (escCode < 0)\n+                    ? _appendNumericEscape(d, _quoteBuffer)\n+                    : _appendNamedEscape(escCode, _quoteBuffer);\n+                    ;\n             if ((outPtr + length) > outputBuffer.length) {\n                 int first = outputBuffer.length - outPtr;\n                 if (first > 0) {\n     /**********************************************************\n      */\n \n-    private int _appendSingleEscape(int escCode, char[] quoteBuffer)\n-    {\n-        if (escCode < 0) { // control char, value -(char + 1)\n-            int value = -(escCode + 1);\n-            quoteBuffer[1] = 'u';\n-            // We know it's a control char, so only the last 2 chars are non-0\n-            quoteBuffer[4] = HEX_CHARS[value >> 4];\n-            quoteBuffer[5] = HEX_CHARS[value & 0xF];\n-            return 6;\n-        }\n+    private int _appendNumericEscape(int value, char[] quoteBuffer)\n+    {\n+        quoteBuffer[1] = 'u';\n+        // We know it's a control char, so only the last 2 chars are non-0\n+        quoteBuffer[4] = HEX_CHARS[value >> 4];\n+        quoteBuffer[5] = HEX_CHARS[value & 0xF];\n+        return 6;\n+    }\n+\n+    private int _appendNamedEscape(int escCode, char[] quoteBuffer)\n+    {\n         quoteBuffer[1] = (char) escCode;\n         return 2;\n     }\n--- a/src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java\n+++ b/src/test/java/com/fasterxml/jackson/core/io/TestJsonStringEncoder.java\n         }\n     }\n \n+    // [JACKSON-884]\n+    public void testCtrlChars() throws Exception\n+    {\n+        char[] input = new char[] { 0, 1, 2, 3, 4 };\n+        char[] quoted = JsonStringEncoder.getInstance().quoteAsString(new String(input));\n+        assertEquals(\"\\\\u0000\\\\u0001\\\\u0002\\\\u0003\\\\u0004\", new String(quoted));\n+    }\n+    \n     /*\n     /**********************************************************\n     /* Helper methods\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestCustomEscaping.java\n import com.fasterxml.jackson.core.io.CharacterEscapes;\n import com.fasterxml.jackson.core.io.SerializedString;\n \n-public class TestCustomEscaping  extends com.fasterxml.jackson.test.BaseTest\n+public class TestCustomEscaping extends com.fasterxml.jackson.test.BaseTest\n {\n     final static int TWO_BYTE_ESCAPED = 0x111;\n     final static int THREE_BYTE_ESCAPED = 0x1111;", "timestamp": 1358312692, "metainfo": ""}