{"sha": "feaabd1683a424d5f112f0497be6c2f68492160e", "log": "Working on [Issue-25], removing references to 'json' (create[Json]Parser, create[Json]Generator)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n \n     /*\n     /**********************************************************\n-    /* Reader factories\n+    /* Parser factories (new ones, as per [Issue-25])\n     /**********************************************************\n      */\n \n      * the parser, since caller has no access to it.\n      *\n      * @param f File that contains JSON content to parse\n-     */\n-    public JsonParser createJsonParser(File f)\n-        throws IOException, JsonParseException\n-    {\n-        // true, since we create InputStream from File\n-        IOContext ctxt = _createContext(f, true);\n-        InputStream in = new FileInputStream(f);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            in = _inputDecorator.decorate(ctxt, in);\n-        }\n-        return _createParser(in, ctxt);\n+     * \n+     * @since 2.1\n+     */\n+    public JsonParser createParser(File f)\n+        throws IOException, JsonParseException\n+    {\n+        // Must delegate to old version, until 2.2\n+        // TODO: change direction in 2.2; after ensuring impls support new method\n+        return createJsonParser(f);\n     }\n \n     /**\n      * the parser, since caller has no access to it.\n      *\n      * @param url URL pointing to resource that contains JSON content to parse\n-     */\n-    public JsonParser createJsonParser(URL url)\n-        throws IOException, JsonParseException\n-    {\n-        // true, since we create InputStream from URL\n-        IOContext ctxt = _createContext(url, true);\n-        InputStream in = _optimizedStreamFromURL(url);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            in = _inputDecorator.decorate(ctxt, in);\n-        }\n-        return _createParser(in, ctxt);\n+     * \n+     * @since 2.1\n+     */\n+    public JsonParser createParser(URL url)\n+        throws IOException, JsonParseException\n+    {\n+        // Must delegate to old version, until 2.2\n+        // TODO: change direction in 2.2; after ensuring impls support new method\n+        return createJsonParser(url);\n     }\n \n     /**\n      * is enabled.\n      *<p>\n      * Note: no encoding argument is taken since it can always be\n-     * auto-detected as suggested by Json RFC.\n+     * auto-detected as suggested by JSON RFC.\n      *\n      * @param in InputStream to use for reading JSON content to parse\n-     */\n-    public JsonParser createJsonParser(InputStream in)\n-        throws IOException, JsonParseException\n-    {\n-        IOContext ctxt = _createContext(in, false);\n-        // [JACKSON-512]: allow wrapping with InputDecorator\n-        if (_inputDecorator != null) {\n-            in = _inputDecorator.decorate(ctxt, in);\n-        }\n-        return _createParser(in, ctxt);\n+     * \n+     * @since 2.1\n+     */\n+    public JsonParser createParser(InputStream in)\n+        throws IOException, JsonParseException\n+    {\n+        // Must delegate to old version, until 2.2\n+        // TODO: change direction in 2.2; after ensuring impls support new method\n+        return createJsonParser(in);\n     }\n \n     /**\n      * end-of-stream is reacher, or parser close method called)\n      * if (and only if) {@link com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE}\n      * is enabled.\n-     *<p>\n+     *\n+     * @param r Reader to use for reading JSON content to parse\n+     * \n+     * @since 2.1\n+     */\n+    public JsonParser createParser(Reader r)\n+        throws IOException, JsonParseException\n+    {\n+        // Must delegate to old version, until 2.2\n+        // TODO: change direction in 2.2; after ensuring impls support new method\n+        return createJsonParser(r);\n+    }\n+\n+    /**\n+     * Method for constructing parser for parsing\n+     * the contents of given byte array.\n+     * \n+     * @since 2.1\n+     */\n+    public JsonParser createParser(byte[] data)\n+        throws IOException, JsonParseException\n+    {\n+        // Must delegate to old version, until 2.2\n+        // TODO: change direction in 2.2; after ensuring impls support new method\n+        return createJsonParser(data);\n+    }\n+\n+    /**\n+     * Method for constructing parser for parsing\n+     * the contents of given byte array.\n+     * \n+     * @param data Buffer that contains data to parse\n+     * @param offset Offset of the first data byte within buffer\n+     * @param len Length of contents to parse within buffer\n+     * \n+     * @since 2.1\n+     */\n+    public JsonParser createParser(byte[] data, int offset, int len)\n+        throws IOException, JsonParseException\n+    {\n+        // Must delegate to old version, until 2.2\n+        // TODO: change direction in 2.2; after ensuring impls support new method\n+        return createJsonParser(data, offset, len);\n+    }\n+\n+    /**\n+     * Method for constructing parser for parsing\n+     * contents of given String.\n+     * \n+     * @since 2.1\n+     */\n+    public JsonParser createParser(String content)\n+        throws IOException, JsonParseException\n+    {\n+        // Must delegate to old version, until 2.2\n+        // TODO: change direction in 2.2; after ensuring impls support new method\n+        return createJsonParser(content);\n+    }\n+\n+    /*\n+    /**********************************************************\n+    /* Parser factories (old ones, as per [Issue-25])\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for constructing JSON parser instance to parse\n+     * contents of specified file. Encoding is auto-detected\n+     * from contents according to JSON specification recommended\n+     * mechanism.\n+     *<p>\n+     * Underlying input stream (needed for reading contents)\n+     * will be <b>owned</b> (and managed, i.e. closed as need be) by\n+     * the parser, since caller has no access to it.\n+     *<p>\n+     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createParser</code>.\n+     *\n+     * @param f File that contains JSON content to parse\n+     */\n+    public JsonParser createJsonParser(File f)\n+        throws IOException, JsonParseException\n+    {\n+        // true, since we create InputStream from File\n+        IOContext ctxt = _createContext(f, true);\n+        InputStream in = new FileInputStream(f);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            in = _inputDecorator.decorate(ctxt, in);\n+        }\n+        return _createParser(in, ctxt);\n+    }\n+\n+    /**\n+     * Method for constructing JSON parser instance to parse\n+     * contents of resource reference by given URL.\n+     * Encoding is auto-detected\n+     * from contents according to JSON specification recommended\n+     * mechanism.\n+     *<p>\n+     * Underlying input stream (needed for reading contents)\n+     * will be <b>owned</b> (and managed, i.e. closed as need be) by\n+     * the parser, since caller has no access to it.\n+     *<p>\n+     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createParser</code>.\n+     *\n+     * @param url URL pointing to resource that contains JSON content to parse\n+     */\n+    public JsonParser createJsonParser(URL url)\n+        throws IOException, JsonParseException\n+    {\n+        // true, since we create InputStream from URL\n+        IOContext ctxt = _createContext(url, true);\n+        InputStream in = _optimizedStreamFromURL(url);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            in = _inputDecorator.decorate(ctxt, in);\n+        }\n+        return _createParser(in, ctxt);\n+    }\n+\n+    /**\n+     * Method for constructing JSON parser instance to parse\n+     * the contents accessed via specified input stream.\n+     *<p>\n+     * The input stream will <b>not be owned</b> by\n+     * the parser, it will still be managed (i.e. closed if\n+     * end-of-stream is reacher, or parser close method called)\n+     * if (and only if) {@link com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE}\n+     * is enabled.\n+     *<p>\n+     * Note: no encoding argument is taken since it can always be\n+     * auto-detected as suggested by JSON RFC.\n+     *<p>\n+     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createParser</code>.\n+     *\n+     * @param in InputStream to use for reading JSON content to parse\n+     */\n+    public JsonParser createJsonParser(InputStream in)\n+        throws IOException, JsonParseException\n+    {\n+        IOContext ctxt = _createContext(in, false);\n+        // [JACKSON-512]: allow wrapping with InputDecorator\n+        if (_inputDecorator != null) {\n+            in = _inputDecorator.decorate(ctxt, in);\n+        }\n+        return _createParser(in, ctxt);\n+    }\n+\n+    /**\n+     * Method for constructing parser for parsing\n+     * the contents accessed via specified Reader.\n+     <p>\n+     * The read stream will <b>not be owned</b> by\n+     * the parser, it will still be managed (i.e. closed if\n+     * end-of-stream is reacher, or parser close method called)\n+     * if (and only if) {@link com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE}\n+     * is enabled.\n+     *<p>\n+     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createParser</code>.\n      *\n      * @param r Reader to use for reading JSON content to parse\n      */\n     /**\n      * Method for constructing parser for parsing\n      * the contents of given byte array.\n+     *<p>\n+     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createParser</code>.\n      */\n     public JsonParser createJsonParser(byte[] data)\n         throws IOException, JsonParseException\n     /**\n      * Method for constructing parser for parsing\n      * the contents of given byte array.\n+     *<p>\n+     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createParser</code>.\n      * \n      * @param data Buffer that contains data to parse\n      * @param offset Offset of the first data byte within buffer\n     /**\n      * Method for constructing parser for parsing\n      * contents of given String.\n+     *<p>\n+     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createParser</code>.\n      */\n     public JsonParser createJsonParser(String content)\n         throws IOException, JsonParseException\n \n     /*\n     /**********************************************************\n-    /* Generator factories\n+    /* Generator factories, new (as per [Issue-25]\n     /**********************************************************\n      */\n \n      *<p>\n      * Note: there are formats that use fixed encoding (like most binary data formats)\n      * and that ignore passed in encoding.\n+     *<p>\n+     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createGenerator</code>.\n+     * \n+     * @since 2.1 Will eventually replace <code>createJsonGenerator</code> variant.\n+     *\n+     * @param out OutputStream to use for writing JSON content \n+     * @param enc Character encoding to use\n+     */\n+    public JsonGenerator createGenerator(OutputStream out, JsonEncoding enc)\n+        throws IOException\n+    {\n+        return createJsonGenerator(out, enc);\n+    }\n+\n+    /**\n+     * Method for constructing JSON generator for writing JSON content\n+     * using specified Writer.\n+     *<p>\n+     * Underlying stream <b>is NOT owned</b> by the generator constructed,\n+     * so that generator will NOT close the Reader when\n+     * {@link JsonGenerator#close} is called (unless auto-closing\n+     * feature,\n+     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET} is enabled).\n+     * Using application needs to close it explicitly.\n+     *<p>\n+     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createGenerator</code>.\n+     * \n+     * @since 2.1 Will eventually replace <code>createJsonGenerator</code> variant.\n+     *\n+     * @param out Writer to use for writing JSON content \n+     */\n+    public JsonGenerator createGenerator(Writer out)\n+        throws IOException\n+    {\n+        return createJsonGenerator(out);\n+    }\n+\n+    /**\n+     * Convenience method for constructing generator that uses default\n+     * encoding of the format (UTF-8 for JSON and most other data formats).\n+     *<p>\n+     * Note: there are formats that use fixed encoding (like most binary data formats).\n+     *<p>\n+     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createGenerator</code>.\n+     * \n+     * @since 2.1 Will eventually replace <code>createJsonGenerator</code> variant.\n+     */\n+    public JsonGenerator createGenerator(OutputStream out) throws IOException {\n+        return createJsonGenerator(out);\n+    }\n+    \n+    /**\n+     * Method for constructing JSON generator for writing JSON content\n+     * to specified file, overwriting contents it might have (or creating\n+     * it if such file does not yet exist).\n+     * Encoding to use must be specified, and needs to be one of available\n+     * types (as per JSON specification).\n+     *<p>\n+     * Underlying stream <b>is owned</b> by the generator constructed,\n+     * i.e. generator will handle closing of file when\n+     * {@link JsonGenerator#close} is called.\n+     *<p>\n+     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createGenerator</code>.\n+     * \n+     * @since 2.1 Will eventually replace <code>createJsonGenerator</code> variant.\n+     *\n+     * @param f File to write contents to\n+     * @param enc Character encoding to use\n+     */\n+    public JsonGenerator createGenerator(File f, JsonEncoding enc)\n+        throws IOException\n+    {\n+        return createJsonGenerator(f, enc);\n+    }    \n+\n+    /*\n+    /**********************************************************\n+    /* Generator factories, old (as per [Issue-25]\n+    /**********************************************************\n+     */\n+\n+    /**\n+     * Method for constructing JSON generator for writing JSON content\n+     * using specified output stream.\n+     * Encoding to use must be specified, and needs to be one of available\n+     * types (as per JSON specification).\n+     *<p>\n+     * Underlying stream <b>is NOT owned</b> by the generator constructed,\n+     * so that generator will NOT close the output stream when\n+     * {@link JsonGenerator#close} is called (unless auto-closing\n+     * feature,\n+     * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET}\n+     * is enabled).\n+     * Using application needs to close it explicitly if this is the case.\n+     *<p>\n+     * Note: there are formats that use fixed encoding (like most binary data formats)\n+     * and that ignore passed in encoding.\n+     *<p>\n+     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createGenerator</code>.\n      *\n      * @param out OutputStream to use for writing JSON content \n      * @param enc Character encoding to use\n      * feature,\n      * {@link com.fasterxml.jackson.core.JsonGenerator.Feature#AUTO_CLOSE_TARGET} is enabled).\n      * Using application needs to close it explicitly.\n+     *<p>\n+     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createGenerator</code>.\n      *\n      * @param out Writer to use for writing JSON content \n      */\n      * encoding of the format (UTF-8 for JSON and most other data formats).\n      *<p>\n      * Note: there are formats that use fixed encoding (like most binary data formats).\n+     *<p>\n+     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createGenerator</code>.\n      */\n     public JsonGenerator createJsonGenerator(OutputStream out) throws IOException {\n         return createJsonGenerator(out, JsonEncoding.UTF8);\n      * Underlying stream <b>is owned</b> by the generator constructed,\n      * i.e. generator will handle closing of file when\n      * {@link JsonGenerator#close} is called.\n+     *<p>\n+     * NOTE: starting with 2.1, should not be used (will be deprecated in 2.2);\n+     * instead, should call <code>createGenerator</code>.\n      *\n      * @param f File to write contents to\n      * @param enc Character encoding to use", "timestamp": 1343023421, "metainfo": ""}