{"sha": "75273be705211ea23bfb554b1cd46607af3d28d4", "log": "minor tweaks", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n+++ b/src/main/java/com/fasterxml/jackson/core/json/UTF8JsonGenerator.java\n      * Helper method called when it is possible that output of raw section\n      * to output may cross buffer boundary\n      */\n-    private void _writeSegmentedRaw(char[] cbuf, int offset, int len)\n+    private final void _writeSegmentedRaw(char[] cbuf, int offset, int len)\n         throws IOException, JsonGenerationException\n     {\n         final int end = _outputEnd;\n     /**********************************************************\n      */\n \n-    private void _writeBytes(byte[] bytes) throws IOException\n+    private final void _writeBytes(byte[] bytes) throws IOException\n     {\n         final int len = bytes.length;\n         if ((_outputTail + len) > _outputEnd) {\n         _outputTail += len;\n     }\n \n-    private void _writeBytes(byte[] bytes, int offset, int len) throws IOException\n+    private final void _writeBytes(byte[] bytes, int offset, int len) throws IOException\n     {\n         if ((_outputTail + len) > _outputEnd) {\n             _flushBuffer();\n      * to single-segment writes (instead of maximum slices that\n      * would fit in copy buffer)\n      */\n-    private void _writeStringSegments(String text)\n+    private final void _writeStringSegments(String text)\n         throws IOException, JsonGenerationException\n     {\n         int left = text.length();\n      * the output buffer. If so, we will need to choose smaller output\n      * chunks to write at a time.\n      */\n-    private void _writeStringSegments(char[] cbuf, int offset, int totalLen)\n+    private final void _writeStringSegments(char[] cbuf, int offset, int totalLen)\n         throws IOException, JsonGenerationException\n     {\n         do {\n      * assuming case of all non-escaped ASCII characters, as well as\n      * potentially enough space for other cases (but not necessarily flushed)\n      */\n-    private void _writeStringSegment(char[] cbuf, int offset, int len)\n+    private final void _writeStringSegment(char[] cbuf, int offset, int len)\n         throws IOException, JsonGenerationException\n     {\n         // note: caller MUST ensure (via flushing) there's room for ASCII only\n      * Secondary method called when content contains characters to escape,\n      * and/or multi-byte UTF-8 characters.\n      */\n-    private void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n+    private final void _writeStringSegment2(final char[] cbuf, int offset, final int end)\n         throws IOException, JsonGenerationException\n     {\n         // Ok: caller guarantees buffer can have room; but that may require flushing:\n      * Same as <code>_writeStringSegment2(char[], ...)</code., but with\n      * additional escaping for high-range code points\n      */\n-    private void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end)\n+    private final void _writeStringSegmentASCII2(final char[] cbuf, int offset, final int end)\n         throws IOException, JsonGenerationException\n     {\n         // Ok: caller guarantees buffer can have room; but that may require flushing:", "timestamp": 1352677326, "metainfo": ""}