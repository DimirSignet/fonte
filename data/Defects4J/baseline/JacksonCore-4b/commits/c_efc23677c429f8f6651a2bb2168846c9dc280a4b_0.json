{"sha": "efc23677c429f8f6651a2bb2168846c9dc280a4b", "log": "Removing deprecated internal methods (deprecated in 2.1)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonFactory.java\n      * \n      * @since 2.1\n      */\n-    public JsonParser createParser(String content)\n-        throws IOException, JsonParseException\n+    public JsonParser createParser(String content) throws IOException, JsonParseException\n     {\n         Reader r = new StringReader(content);\n         // true -> we own the Reader (and must close); not a big deal\n      * Underlying input stream (needed for reading contents)\n      * will be <b>owned</b> (and managed, i.e. closed as need be) by\n      * the parser, since caller has no access to it.\n-     *<p>\n-     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createParser</code>.\n      *\n      * @param f File that contains JSON content to parse\n      * \n      * @deprecated Since 2.2, use {@link #createParser(File)} instead.\n      */\n     @Deprecated\n-    public JsonParser createJsonParser(File f)\n-        throws IOException, JsonParseException\n-    {\n+    public JsonParser createJsonParser(File f) throws IOException, JsonParseException {\n         return createParser(f);\n     }\n \n      * Underlying input stream (needed for reading contents)\n      * will be <b>owned</b> (and managed, i.e. closed as need be) by\n      * the parser, since caller has no access to it.\n-     *<p>\n-     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createParser</code>.\n      *\n      * @param url URL pointing to resource that contains JSON content to parse\n      * \n      * @deprecated Since 2.2, use {@link #createParser(URL)} instead.\n      */\n     @Deprecated\n-    public JsonParser createJsonParser(URL url)\n-        throws IOException, JsonParseException\n-    {\n+    public JsonParser createJsonParser(URL url) throws IOException, JsonParseException {\n         return createParser(url);\n     }\n \n      *<p>\n      * Note: no encoding argument is taken since it can always be\n      * auto-detected as suggested by JSON RFC.\n-     *<p>\n-     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createParser</code>.\n      *\n      * @param in InputStream to use for reading JSON content to parse\n      * \n      * @deprecated Since 2.2, use {@link #createParser(InputStream)} instead.\n      */\n     @Deprecated\n-    public JsonParser createJsonParser(InputStream in)\n-        throws IOException, JsonParseException\n-    {\n+    public JsonParser createJsonParser(InputStream in) throws IOException, JsonParseException {\n         return createParser(in);\n     }\n \n      * end-of-stream is reacher, or parser close method called)\n      * if (and only if) {@link com.fasterxml.jackson.core.JsonParser.Feature#AUTO_CLOSE_SOURCE}\n      * is enabled.\n-     *<p>\n-     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createParser</code>.\n      *\n      * @param r Reader to use for reading JSON content to parse\n      * \n      * @deprecated Since 2.2, use {@link #createParser(Reader)} instead.\n      */\n     @Deprecated\n-    public JsonParser createJsonParser(Reader r)\n-        throws IOException, JsonParseException\n-    {\n+    public JsonParser createJsonParser(Reader r) throws IOException, JsonParseException {\n         return createParser(r);\n+    }\n+\n+    /**\n+     * Method for constructing parser for parsing the contents of given byte array.\n+     * \n+     * @deprecated Since 2.2, use {@link #createParser(byte[])} instead.\n+     */\n+    @Deprecated\n+    public JsonParser createJsonParser(byte[] data) throws IOException, JsonParseException {\n+        return createParser(data);\n     }\n \n     /**\n      * Method for constructing parser for parsing\n      * the contents of given byte array.\n-     *<p>\n-     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createParser</code>.\n-     * \n-     * @deprecated Since 2.2, use {@link #createParser(byte[])} instead.\n-     */\n-    @Deprecated\n-    public JsonParser createJsonParser(byte[] data)\n-        throws IOException, JsonParseException\n-    {\n-        return createParser(data);\n-    }\n-\n-    /**\n-     * Method for constructing parser for parsing\n-     * the contents of given byte array.\n-     *<p>\n-     * NOTE: as of 2.1, should not be used (will be deprecated in 2.2);\n-     * instead, should call <code>createParser</code>.\n      * \n      * @param data Buffer that contains data to parse\n      * @param offset Offset of the first data byte within buffer\n      * @deprecated Since 2.2, use {@link #createParser(byte[],int,int)} instead.\n      */\n     @Deprecated\n-    public JsonParser createJsonParser(byte[] data, int offset, int len)\n-        throws IOException, JsonParseException\n-    {\n+    public JsonParser createJsonParser(byte[] data, int offset, int len) throws IOException, JsonParseException {\n         return createParser(data, offset, len);\n     }\n \n      * @deprecated Since 2.2, use {@link #createParser(String)} instead.\n      */\n     @Deprecated\n-    public JsonParser createJsonParser(String content)\n-        throws IOException, JsonParseException\n-    {\n+    public JsonParser createJsonParser(String content) throws IOException, JsonParseException {\n         return createParser(content);\n     }\n \n     }\n \n     /**\n-     * @deprecated since 2.1 -- use {@link #_createParser(InputStream, IOContext)} instead\n-     */\n-    @Deprecated\n-    protected JsonParser _createJsonParser(InputStream in, IOContext ctxt) throws IOException, JsonParseException {\n-        return _createParser(in, ctxt);\n-    }\n-    \n-    /**\n      * Overridable factory method that actually instantiates parser\n      * using given {@link Reader} object for reading content.\n      *<p>\n     }\n \n     /**\n-     * @deprecated since 2.1 -- use {@link #_createParser(Reader, IOContext)} instead\n-     */\n-    @Deprecated\n-    protected JsonParser _createJsonParser(Reader r, IOContext ctxt) throws IOException, JsonParseException {\n-        return _createParser(r, ctxt);\n-    }\n-\n-    /**\n      * Overridable factory method that actually instantiates parser\n      * using given {@link Reader} object for reading content\n      * passed as raw byte array.\n      * interface from sub-class perspective, although not a public\n      * method available to users of factory implementations.\n      */\n-    protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt)\n-        throws IOException, JsonParseException\n+    protected JsonParser _createParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException, JsonParseException\n     {\n         return new ByteSourceJsonBootstrapper(ctxt, data, offset, len).constructParser(_parserFeatures,\n                 _objectCodec, _rootByteSymbols, _rootCharSymbols,\n                 isEnabled(JsonFactory.Feature.INTERN_FIELD_NAMES));\n     }\n \n-    /**\n-     * @deprecated since 2.1 -- use {@link #_createParser(byte[], int, int, IOContext)} instead\n-     */\n-    @Deprecated\n-    protected JsonParser _createJsonParser(byte[] data, int offset, int len, IOContext ctxt) throws IOException, JsonParseException {\n-        return _createParser(data, offset, len, ctxt);\n-    }\n-    \n     /*\n     /**********************************************************\n     /* Factory methods used by factory for creating generator instances,\n      * interface from sub-class perspective, although not a public\n      * method available to users of factory implementations.\n      */\n-    protected JsonGenerator _createGenerator(Writer out, IOContext ctxt)\n-        throws IOException\n+    protected JsonGenerator _createGenerator(Writer out, IOContext ctxt) throws IOException\n     {\n         WriterBasedJsonGenerator gen = new WriterBasedJsonGenerator(ctxt,\n                 _generatorFeatures, _objectCodec, out);\n             gen.setRootValueSeparator(rootSep);\n         }\n         return gen;\n-    }\n-\n-    /**\n-     * @deprecated since 2.1 -- use {@link #_createGenerator(Writer, IOContext)} instead\n-     */\n-    @Deprecated\n-    protected JsonGenerator _createJsonGenerator(Writer out, IOContext ctxt)\n-        throws IOException\n-    {\n-        /* NOTE: MUST call the deprecated method until it is deleted, just so\n-         * that override still works as expected, for now.\n-         */\n-        return _createGenerator(out, ctxt);\n     }\n \n     /**\n         return gen;\n     }\n \n-    /**\n-     * @deprecated since 2.1\n-     */\n-    @Deprecated\n-    protected JsonGenerator _createUTF8JsonGenerator(OutputStream out, IOContext ctxt)\n-        throws IOException\n-    {\n-        return _createUTF8Generator(out, ctxt);\n-    }\n-\n     protected Writer _createWriter(OutputStream out, JsonEncoding enc, IOContext ctxt) throws IOException\n     {\n         // note: this should not get called any more (caller checks, dispatches)\n      * Overridable factory method that actually instantiates desired\n      * context object.\n      */\n-    protected IOContext _createContext(Object srcRef, boolean resourceManaged)\n-    {\n+    protected IOContext _createContext(Object srcRef, boolean resourceManaged) {\n         return new IOContext(_getBufferRecycler(), srcRef, resourceManaged);\n     }\n \n      * parsers to use, when input is to be read from an URL.\n      * This helps when reading file content via URL.\n      */\n-    protected InputStream _optimizedStreamFromURL(URL url)\n-        throws IOException\n-    {\n+    protected InputStream _optimizedStreamFromURL(URL url) throws IOException {\n         if (\"file\".equals(url.getProtocol())) {\n             /* Can not do this if the path refers\n              * to a network drive on windows. This fixes the problem;\n--- a/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n+++ b/src/main/java/com/fasterxml/jackson/core/ObjectCodec.java\n \n     // Since 2.3: need baseline implementation to avoid backwards compatibility\n     @Override\n-    public Version version() {\n-        return Version.unknownVersion();\n-    }\n+    public Version version() { return Version.unknownVersion(); }\n     \n     /*\n     /**********************************************************\n      * @deprecated Since 2.1: Use {@link #getFactory} instead.\n      */\n     @Deprecated\n-    public abstract JsonFactory getJsonFactory();\n+    public JsonFactory getJsonFactory() { return getFactory(); }\n \n     /**\n      * Accessor for finding underlying data format factory\n      * \n      * @since 2.1\n      */\n-    public JsonFactory getFactory() {\n-        return getJsonFactory();\n-    }\n+    public JsonFactory getFactory() { return getJsonFactory(); }\n }", "timestamp": 1388459379, "metainfo": ""}