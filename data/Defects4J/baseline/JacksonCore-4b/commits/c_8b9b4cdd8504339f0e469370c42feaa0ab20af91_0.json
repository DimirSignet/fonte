{"sha": "8b9b4cdd8504339f0e469370c42feaa0ab20af91", "log": "Another inner class bites the dust (swtich removal)", "commit": "\n--- a/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n+++ b/src/main/java/com/fasterxml/jackson/core/JsonToken.java\n      * VALUE_TRUE is returned when encountering literal \"true\" in\n      * value context\n      */\n-    VALUE_TRUE(\"true\", 's'),\n+    VALUE_TRUE(\"true\", 'b'),\n \n     /**\n      * VALUE_FALSE is returned when encountering literal \"false\" in\n      * value context\n      */\n-    VALUE_FALSE(\"false\", 's'),\n+    VALUE_FALSE(\"false\", 'b'),\n \n     /**\n      * VALUE_NULL is returned when encountering literal \"null\" in\n      * value context\n      */\n-    VALUE_NULL(\"null\", 's'),\n+    VALUE_NULL(\"null\", '0'),\n         ;\n \n     final String _serialized;\n \n     final boolean _isStructStart, _isStructEnd;\n \n+    final boolean _isNull;\n+\n+    final boolean _isNumber;\n+\n+    final boolean _isBoolean;\n+\n     final boolean _isScalar;\n \n-    final boolean _isNumber;\n-    \n     /**\n      * @param token representation for this token, if there is a\n      *   single static representation; null otherwise\n                 _serializedBytes[i] = (byte) _serializedChars[i];\n             }\n         }\n+        _isBoolean = (typeChar == 'b');\n+        _isNull = (typeChar == '0');\n         _isNumber = (typeChar == 'n');\n+        _isScalar = \"bns0\".indexOf(typeChar) >= 0;\n+\n         _isStructStart = (typeChar == '(');\n         _isStructEnd = (typeChar == ')');\n-        _isScalar = (typeChar == 'n' || typeChar == 's');\n     }\n \n     public String asString() { return _serialized; }\n     public boolean isScalarValue() {\n         return _isScalar;\n     }\n+\n+    public boolean isBoolean() {\n+        return _isBoolean;\n+    }\n+\n+    public boolean isNull() {\n+        return _isNull;\n+    }\n }\n--- a/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n+++ b/src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java\n      * Last token retrieved via {@link #nextToken}, if any.\n      * Null before the first call to <code>nextToken()</code>,\n      * as well as if token has been explicitly cleared\n-     * (by call to {@link #clearCurrentToken})\n      */\n     protected JsonToken _currToken;\n \n     {\n         JsonToken t = _currToken;\n         if (t != null) {\n-            switch (t) {\n-            case VALUE_NUMBER_INT:\n+            if (t.isBoolean()) {\n+                return (t == JsonToken.VALUE_TRUE);\n+            }\n+            if (t == JsonToken.VALUE_NUMBER_INT) {\n                 return getIntValue() != 0;\n-            case VALUE_TRUE:\n-                return true;\n-            case VALUE_FALSE:\n-            case VALUE_NULL:\n-                return false;\n-            case VALUE_EMBEDDED_OBJECT:\n-                {\n-                    Object value = this.getEmbeddedObject();\n-                    if (value instanceof Boolean) {\n-                        return (Boolean) value;\n-                    }\n-                }\n-            case VALUE_STRING:\n+            }\n+            if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n+                Object value = this.getEmbeddedObject();\n+                if (value instanceof Boolean) {\n+                    return (Boolean) value;\n+                }\n+            } else if (t == JsonToken.VALUE_STRING) {\n                 String str = getText().trim();\n                 if (\"true\".equals(str)) {\n                     return true;\n                 }\n+                if (\"false\".equals(str)) {\n+                    return false;\n+                }\n                 if (_hasTextualNull(str)) {\n                     return false;\n                 }\n-                break;\n-            default:\n             }\n         }\n         return defaultValue;\n     {\n         JsonToken t = _currToken;\n         if (t != null) {\n-            switch (t) {\n-            case VALUE_NUMBER_INT:\n-            case VALUE_NUMBER_FLOAT:\n+            if (t.isNumeric()) {\n                 return getIntValue();\n-            case VALUE_TRUE:\n-                return 1;\n-            case VALUE_FALSE:\n-            case VALUE_NULL:\n+            }\n+            if (t.isBoolean()) {\n+                return (t == JsonToken.VALUE_TRUE) ? 1 : 0;\n+            }\n+            if (t.isNull()) {\n                 return 0;\n-            case VALUE_STRING:\n+            }\n+            if (t == JsonToken.VALUE_STRING) {\n                 String str = getText();\n                 if (_hasTextualNull(str)) {\n                     return 0;\n                 }\n                 return NumberInput.parseAsInt(str, defaultValue);\n-            case VALUE_EMBEDDED_OBJECT:\n-                {\n-                    Object value = this.getEmbeddedObject();\n-                    if (value instanceof Number) {\n-                        return ((Number) value).intValue();\n-                    }\n-                }\n-            default:\n+            }\n+            if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n+                Object value = this.getEmbeddedObject();\n+                if (value instanceof Number) {\n+                    return ((Number) value).intValue();\n+                }\n             }\n         }\n         return defaultValue;\n     {\n         JsonToken t = _currToken;\n         if (t != null) {\n-            switch (t) {\n-            case VALUE_NUMBER_INT:\n-            case VALUE_NUMBER_FLOAT:\n+            if (t.isNumeric()) {\n                 return getLongValue();\n-            case VALUE_TRUE:\n-                return 1;\n-            case VALUE_FALSE:\n-            case VALUE_NULL:\n-                return 0;\n-            case VALUE_STRING:\n-                String str = getText();\n-                if (_hasTextualNull(str)) {\n-                    return 0L;\n-                }\n-                return NumberInput.parseAsLong(str, defaultValue);\n-            case VALUE_EMBEDDED_OBJECT:\n-                {\n-                    Object value = this.getEmbeddedObject();\n-                    if (value instanceof Number) {\n-                        return ((Number) value).longValue();\n-                    }\n-                }\n-            default:\n-            }\n-        }\n-        return defaultValue;\n-    }\n-\n-    @Override\n-    public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException\n-    {\n-        JsonToken t = _currToken;\n-        if (t != null) {\n-            switch (t) {\n-            case VALUE_NUMBER_INT:\n-            case VALUE_NUMBER_FLOAT:\n-                return getDoubleValue();\n-            case VALUE_TRUE:\n-                return 1;\n-            case VALUE_FALSE:\n-            case VALUE_NULL:\n-                return 0;\n-            case VALUE_STRING:\n+            }\n+            if (t.isBoolean()) {\n+                return (t == JsonToken.VALUE_TRUE) ? 1L : 0L;\n+            }\n+            if (t.isNull()) {\n+                return 0L;\n+            }\n+            if (t == JsonToken.VALUE_STRING) {\n                 String str = getText();\n                 if (_hasTextualNull(str)) {\n                     return 0;\n                 }\n+                return NumberInput.parseAsLong(str, defaultValue);\n+            }\n+            if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n+                Object value = this.getEmbeddedObject();\n+                if (value instanceof Number) {\n+                    return ((Number) value).longValue();\n+                }\n+            }\n+        }\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public double getValueAsDouble(double defaultValue) throws IOException, JsonParseException\n+    {\n+        JsonToken t = _currToken;\n+        if (t != null) {\n+            if (t.isNumeric()) {\n+                return getDoubleValue();\n+            }\n+            if (t.isBoolean()) {\n+                return (t == JsonToken.VALUE_TRUE) ? 1.0 : 0.0;\n+            }\n+            if (t.isNull()) {\n+                return 0L;\n+            }\n+            if (t == JsonToken.VALUE_STRING) {\n+                String str = getText();\n+                if (_hasTextualNull(str)) {\n+                    return 0;\n+                }\n                 return NumberInput.parseAsDouble(str, defaultValue);\n-            case VALUE_EMBEDDED_OBJECT:\n-                {\n-                    Object value = this.getEmbeddedObject();\n-                    if (value instanceof Number) {\n-                        return ((Number) value).doubleValue();\n-                    }\n-                }\n-            default:\n+            }\n+            if (t == JsonToken.VALUE_EMBEDDED_OBJECT) {\n+                Object value = this.getEmbeddedObject();\n+                if (value instanceof Number) {\n+                    return ((Number) value).doubleValue();\n+                }\n             }\n         }\n         return defaultValue;\n--- a/src/test/java/com/fasterxml/jackson/core/json/TestValueConversions.java\n+++ b/src/test/java/com/fasterxml/jackson/core/json/TestValueConversions.java\n             assertEquals(0, jp.getIntValue());\n             assertEquals(false, jp.getValueAsBoolean());\n \n-            assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n+            assertToken(JsonToken.VALUE_STRING, jp.nextToken()); // \"true\"\n             assertEquals(true, jp.getValueAsBoolean());\n             assertToken(JsonToken.VALUE_STRING, jp.nextToken());\n             assertEquals(false, jp.getValueAsBoolean());", "timestamp": 1379898527, "metainfo": ""}