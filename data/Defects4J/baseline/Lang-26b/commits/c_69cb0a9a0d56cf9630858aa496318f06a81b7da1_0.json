{"sha": "69cb0a9a0d56cf9630858aa496318f06a81b7da1", "log": "Tab police Also removed extraneous trailing spaces  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n+++ b/src/test/java/org/apache/commons/lang3/CharRangeTest.java\n  * @version $Id$\n  */\n public class CharRangeTest extends TestCase {\n-    \n+\n     public CharRangeTest(String name) {\n         super(name);\n     }\n         assertEquals(false, rangea.isNegated());\n         assertEquals(\"a\", rangea.toString());\n     }\n-    \n+\n     public void testConstructorAccessors_isNot() {\n         CharRange rangea = CharRange.isNot('a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(true, rangea.isNegated());\n         assertEquals(\"^a\", rangea.toString());\n     }\n-    \n+\n     public void testConstructorAccessors_isIn_Same() {\n         CharRange rangea = CharRange.isIn('a', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(false, rangea.isNegated());\n         assertEquals(\"a\", rangea.toString());\n     }\n-    \n+\n     public void testConstructorAccessors_isIn_Normal() {\n         CharRange rangea = CharRange.isIn('a', 'e');\n         assertEquals('a', rangea.getStart());\n         assertEquals(false, rangea.isNegated());\n         assertEquals(\"a-e\", rangea.toString());\n     }\n-    \n+\n     public void testConstructorAccessors_isIn_Reversed() {\n         CharRange rangea = CharRange.isIn('e', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(false, rangea.isNegated());\n         assertEquals(\"a-e\", rangea.toString());\n     }\n-    \n+\n     public void testConstructorAccessors_isNotIn_Same() {\n         CharRange rangea = CharRange.isNotIn('a', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(true, rangea.isNegated());\n         assertEquals(\"^a\", rangea.toString());\n     }\n-    \n+\n     public void testConstructorAccessors_isNotIn_Normal() {\n         CharRange rangea = CharRange.isNotIn('a', 'e');\n         assertEquals('a', rangea.getStart());\n         assertEquals(true, rangea.isNegated());\n         assertEquals(\"^a-e\", rangea.toString());\n     }\n-    \n+\n     public void testConstructorAccessors_isNotIn_Reversed() {\n         CharRange rangea = CharRange.isNotIn('e', 'a');\n         assertEquals('a', rangea.getStart());\n         assertEquals(\"^a-e\", rangea.toString());\n     }\n \n-    //-----------------------------------------------------------------------    \n+    //-----------------------------------------------------------------------\n     public void testEquals_Object() {\n         CharRange rangea = CharRange.is('a');\n         CharRange rangeae = CharRange.isIn('a', 'e');\n         CharRange rangenotbf = CharRange.isIn('b', 'f');\n-        \n+\n         assertEquals(false, rangea.equals(null));\n-        \n+\n         assertEquals(true, rangea.equals(rangea));\n         assertEquals(true, rangea.equals(CharRange.is('a')));\n         assertEquals(true, rangeae.equals(rangeae));\n         assertEquals(true, rangeae.equals(CharRange.isIn('a', 'e')));\n         assertEquals(true, rangenotbf.equals(rangenotbf));\n         assertEquals(true, rangenotbf.equals(CharRange.isIn('b', 'f')));\n-        \n+\n         assertEquals(false, rangea.equals(rangeae));\n         assertEquals(false, rangea.equals(rangenotbf));\n         assertEquals(false, rangeae.equals(rangea));\n         assertEquals(false, rangenotbf.equals(rangea));\n         assertEquals(false, rangenotbf.equals(rangeae));\n     }\n-            \n+\n     public void testHashCode() {\n         CharRange rangea = CharRange.is('a');\n         CharRange rangeae = CharRange.isIn('a', 'e');\n         CharRange rangenotbf = CharRange.isIn('b', 'f');\n-        \n+\n         assertEquals(true, rangea.hashCode() == rangea.hashCode());\n         assertEquals(true, rangea.hashCode() == CharRange.is('a').hashCode());\n         assertEquals(true, rangeae.hashCode() == rangeae.hashCode());\n         assertEquals(true, rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode());\n         assertEquals(true, rangenotbf.hashCode() == rangenotbf.hashCode());\n         assertEquals(true, rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode());\n-        \n+\n         assertEquals(false, rangea.hashCode() == rangeae.hashCode());\n         assertEquals(false, rangea.hashCode() == rangenotbf.hashCode());\n         assertEquals(false, rangeae.hashCode() == rangea.hashCode());\n         assertEquals(false, rangenotbf.hashCode() == rangea.hashCode());\n         assertEquals(false, rangenotbf.hashCode() == rangeae.hashCode());\n     }\n-    \n-    //-----------------------------------------------------------------------    \n+\n+    //-----------------------------------------------------------------------\n     public void testContains_Char() {\n         CharRange range = CharRange.is('c');\n         assertEquals(false, range.contains('b'));\n         assertEquals(true, range.contains('c'));\n         assertEquals(false, range.contains('d'));\n         assertEquals(false, range.contains('e'));\n-        \n+\n         range = CharRange.isIn('c', 'd');\n         assertEquals(false, range.contains('b'));\n         assertEquals(true, range.contains('c'));\n         assertEquals(true, range.contains('d'));\n         assertEquals(false, range.contains('e'));\n-        \n+\n         range = CharRange.isIn('d', 'c');\n         assertEquals(false, range.contains('b'));\n         assertEquals(true, range.contains('c'));\n         assertEquals(true, range.contains('d'));\n         assertEquals(false, range.contains('e'));\n-        \n+\n         range = CharRange.isNotIn('c', 'd');\n         assertEquals(true, range.contains('b'));\n         assertEquals(false, range.contains('c'));\n         assertEquals(true, range.contains((char) 0));\n         assertEquals(true, range.contains(Character.MAX_VALUE));\n     }\n-    \n-    //-----------------------------------------------------------------------    \n+\n+    //-----------------------------------------------------------------------\n     public void testContains_Charrange() {\n         CharRange a = CharRange.is('a');\n         CharRange b = CharRange.is('b');\n         CharRange de = CharRange.isIn('d', 'e');\n         CharRange ef = CharRange.isIn('e', 'f');\n         CharRange ae = CharRange.isIn('a', 'e');\n-        \n+\n         // normal/normal\n         assertEquals(false, c.contains(b));\n         assertEquals(true, c.contains(c));\n         assertEquals(true, c.contains(c2));\n         assertEquals(false, c.contains(d));\n-        \n+\n         assertEquals(false, c.contains(cd));\n         assertEquals(false, c.contains(bd));\n         assertEquals(false, c.contains(bc));\n         assertEquals(false, c.contains(ab));\n         assertEquals(false, c.contains(de));\n-        \n+\n         assertEquals(true, cd.contains(c));\n         assertEquals(true, bd.contains(c));\n         assertEquals(true, bc.contains(c));\n         assertEquals(true, ae.contains(bc));\n         assertEquals(true, ae.contains(cd));\n         assertEquals(true, ae.contains(de));\n-        \n+\n         CharRange notb = CharRange.isNot('b');\n         CharRange notc = CharRange.isNot('c');\n         CharRange notd = CharRange.isNot('d');\n         CharRange notae = CharRange.isNotIn('a', 'e');\n         CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE);\n         CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE);\n-        \n+\n         // normal/negated\n         assertEquals(false, c.contains(notc));\n         assertEquals(false, c.contains(notbd));\n         assertEquals(true, all.contains(notbd));\n         assertEquals(false, allbutfirst.contains(notc));\n         assertEquals(false, allbutfirst.contains(notbd));\n-        \n+\n         // negated/normal\n         assertEquals(true, notc.contains(a));\n         assertEquals(true, notc.contains(b));\n         assertEquals(false, notc.contains(c));\n         assertEquals(true, notc.contains(d));\n         assertEquals(true, notc.contains(e));\n-        \n+\n         assertEquals(true, notc.contains(ab));\n         assertEquals(false, notc.contains(bc));\n         assertEquals(false, notc.contains(bd));\n         assertEquals(false, notc.contains(ae));\n         assertEquals(false, notc.contains(all));\n         assertEquals(false, notc.contains(allbutfirst));\n-        \n+\n         assertEquals(true, notbd.contains(a));\n         assertEquals(false, notbd.contains(b));\n         assertEquals(false, notbd.contains(c));\n         assertEquals(false, notbd.contains(d));\n         assertEquals(true, notbd.contains(e));\n-        \n+\n         assertEquals(true, notcd.contains(ab));\n         assertEquals(false, notcd.contains(bc));\n         assertEquals(false, notcd.contains(bd));\n         assertEquals(true, notcd.contains(ef));\n         assertEquals(false, notcd.contains(all));\n         assertEquals(false, notcd.contains(allbutfirst));\n-        \n+\n         // negated/negated\n         assertEquals(false, notc.contains(notb));\n         assertEquals(true, notc.contains(notc));\n         assertEquals(false, notc.contains(notd));\n-        \n+\n         assertEquals(false, notc.contains(notab));\n         assertEquals(true, notc.contains(notbc));\n         assertEquals(true, notc.contains(notbd));\n         assertEquals(true, notc.contains(notcd));\n         assertEquals(false, notc.contains(notde));\n-        \n+\n         assertEquals(false, notbd.contains(notb));\n         assertEquals(false, notbd.contains(notc));\n         assertEquals(false, notbd.contains(notd));\n-        \n+\n         assertEquals(false, notbd.contains(notab));\n         assertEquals(false, notbd.contains(notbc));\n         assertEquals(true, notbd.contains(notbd));\n         assertEquals(false, notbd.contains(notde));\n         assertEquals(true, notbd.contains(notae));\n     }\n-    \n+\n     public void testContainsNullArg() {\n         CharRange range = CharRange.is('a');\n         try {\n         assertEquals(Character.valueOf((char) 0), notFirstIt.next());\n         assertFalse(notFirstIt.hasNext());\n         try {\n-        \tnotFirstIt.next();\n+            notFirstIt.next();\n             fail(\"Should throw NoSuchElementException\");\n         } catch (NoSuchElementException e) {\n             assertTrue(true);\n         assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next());\n         assertFalse(notLastIt.hasNext());\n         try {\n-        \tnotLastIt.next();\n+            notLastIt.next();\n             fail(\"Should throw NoSuchElementException\");\n         } catch (NoSuchElementException e) {\n             assertTrue(true);\n         }\n     }\n \n-    //-----------------------------------------------------------------------    \n+    //-----------------------------------------------------------------------\n     public void testSerialization() {\n         CharRange range = CharRange.is('a');\n         assertEquals(range, SerializationUtils.clone(range)); \n         range = CharRange.isNotIn('a', 'e');\n         assertEquals(range, SerializationUtils.clone(range)); \n     }\n-    \n+\n }", "timestamp": 1267570329, "metainfo": ""}