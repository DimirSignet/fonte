{"sha": "4443f6f1f8ec4d690c4a58dd9d29f27cd4487783", "log": "Improving test coverage.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/event/EventUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/event/EventUtils.java\n \n public class EventUtils\n {\n+    /**\n+     * Adds an event listener to the specified source.  This looks for an \"add\" method corresponding to the event\n+     * type (addActionListener, for example).\n+     * @param eventSource the event source\n+     * @param listenerType the event listener type\n+     * @param listener the listener\n+     * @param <L> the event listener type\n+     *\n+     * @throws IllegalArgumentException if the object doesn't support the listener type\n+     */\n     public static <L> void addEventListener(Object eventSource, Class<L> listenerType, L listener)\n     {\n         try\n         }\n         catch (NoSuchMethodException e)\n         {\n-            throw new IllegalArgumentException(\"Class \" + eventSource.getClass() + \" does not have an accesible add\" + listenerType.getSimpleName() + \" method which takes a parameter of type \" + listenerType.getClass().getName() + \".\");\n+            throw new IllegalArgumentException(\"Class \" + eventSource.getClass().getName() + \" does not have a public add\" + listenerType.getSimpleName() + \" method which takes a parameter of type \" + listenerType.getName() + \".\");\n         }\n         catch (IllegalAccessException e)\n         {\n-            throw new IllegalArgumentException(\"Class \" + eventSource.getClass() + \" does not have an accesible add\" + listenerType.getSimpleName () + \" method which takes a parameter of type \" + listenerType.getClass().getName() + \".\");\n+            throw new IllegalArgumentException(\"Class \" + eventSource.getClass().getName() + \" does not have an accesible add\" + listenerType.getSimpleName () + \" method which takes a parameter of type \" + listenerType.getName() + \".\");\n         }\n         catch (InvocationTargetException e)\n         {\n                 }\n                 else\n                 {\n-                    return MethodUtils.invokeMethod(target, methodName, new Object[]{});\n+                    return MethodUtils.invokeMethod(target, methodName);\n                 }\n             }\n             return null;\n--- a/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/event/EventUtilsTest.java\n \n import junit.framework.TestCase;\n \n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n import java.beans.PropertyChangeEvent;\n import java.beans.PropertyChangeListener;\n+import java.beans.VetoableChangeListener;\n import java.lang.reflect.InvocationHandler;\n import java.lang.reflect.Method;\n import java.lang.reflect.Proxy;\n         assertEquals(1, handler.getEventCount(\"propertyChange\"));\n     }\n \n+    public void testAddEventListenerWithNoAddMethod()\n+    {\n+        final PropertyChangeSource src = new PropertyChangeSource();\n+        EventCountingInvociationHandler handler = new EventCountingInvociationHandler();\n+        ActionListener listener = handler.createListener(ActionListener.class);\n+        try\n+        {\n+            EventUtils.addEventListener(src, ActionListener.class, listener);\n+            fail(\"Should not be allowed to add a listener to an object that doesn't support it.\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            assertEquals(\"Class \" + src.getClass().getName() + \" does not have a public add\" + ActionListener.class.getSimpleName() + \" method which takes a parameter of type \" + ActionListener.class.getName() + \".\", e.getMessage());\n+        }\n+    }\n+\n+    public void testAddEventListenerThrowsException()\n+    {\n+        final ExceptionEventSource src = new ExceptionEventSource();\n+        try\n+        {\n+            EventUtils.addEventListener(src, ActionListener.class, new ActionListener()\n+            {\n+                public void actionPerformed(ActionEvent e)\n+                {\n+                    // Do nothing!\n+                }\n+            });\n+            fail(\"Add method should have thrown an exception, so method should fail.\");\n+        }\n+        catch (RuntimeException e)\n+        {\n+\n+        }\n+    }\n+\n+    public void testAddEventListenerWithPrivateAddMethod()\n+    {\n+        final PropertyChangeSource src = new PropertyChangeSource();\n+        EventCountingInvociationHandler handler = new EventCountingInvociationHandler();\n+        VetoableChangeListener listener = handler.createListener(VetoableChangeListener.class);\n+        try\n+        {\n+            EventUtils.addEventListener(src, VetoableChangeListener.class, listener);\n+            fail(\"Should not be allowed to add a listener to an object that doesn't support it.\");\n+        }\n+        catch (IllegalArgumentException e)\n+        {\n+            assertEquals(\"Class \" + src.getClass().getName() + \" does not have a public add\" + VetoableChangeListener.class.getSimpleName() + \" method which takes a parameter of type \" + VetoableChangeListener.class.getName() + \".\", e.getMessage());\n+        }\n+    }\n+\n     public void testBindEventsToMethod()\n     {\n         final PropertyChangeSource src = new PropertyChangeSource();\n         assertEquals(1, counter.getCount());\n     }\n \n+\n+    public void testBindEventsToMethodWithEvent()\n+    {\n+        final PropertyChangeSource src = new PropertyChangeSource();\n+        final EventCounterWithEvent counter = new EventCounterWithEvent();\n+        EventUtils.bindEventsToMethod(counter, \"eventOccurred\", src, PropertyChangeListener.class);\n+        assertEquals(0, counter.getCount());\n+        src.setProperty(\"newValue\");\n+        assertEquals(1, counter.getCount());\n+    }\n+\n+\n+    public void testBindFilteredEventsToMethod()\n+    {\n+        final MultipleEventSource src = new MultipleEventSource();\n+        final EventCounter counter = new EventCounter();\n+        EventUtils.bindEventsToMethod(counter, \"eventOccurred\", src, MultipleEventListener.class, \"event1\");\n+        assertEquals(0, counter.getCount());\n+        src.listeners.fire().event1(new ActionEvent(src, ActionEvent.ACTION_PERFORMED, \"event1\"));\n+        assertEquals(1, counter.getCount());\n+        src.listeners.fire().event2(new ActionEvent(src, ActionEvent.ACTION_PERFORMED, \"event2\"));\n+        assertEquals(1, counter.getCount());\n+    }\n+\n+    public static interface MultipleEventListener\n+    {\n+        public void event1(ActionEvent e);\n+\n+        public void event2(ActionEvent e);\n+    }\n+\n     public static class EventCounter\n     {\n         private int count;\n             return count;\n         }\n     }\n+\n+    public static class EventCounterWithEvent\n+    {\n+        private int count;\n+\n+        public void eventOccurred(PropertyChangeEvent e)\n+        {\n+            count++;\n+        }\n+\n+        public int getCount()\n+        {\n+            return count;\n+        }\n+    }\n+\n \n     private static class EventCountingInvociationHandler implements InvocationHandler\n     {\n         }\n     }\n \n+    public static class MultipleEventSource\n+    {\n+        private EventListenerSupport<MultipleEventListener> listeners = EventListenerSupport.create(MultipleEventListener.class);\n+\n+        public void addMultipleEventListener(MultipleEventListener listener)\n+        {\n+            listeners.addListener(listener);\n+        }\n+    }\n+\n+    public static class ExceptionEventSource\n+    {\n+        public void addActionListener(ActionListener listener)\n+        {\n+            throw new RuntimeException();\n+        }\n+    }\n+\n     public static class PropertyChangeSource\n     {\n         private EventListenerSupport<PropertyChangeListener> listeners = EventListenerSupport.create(PropertyChangeListener.class);\n         {\n             String oldValue = this.property;\n             this.property = property;\n-            listeners.fire().propertyChange(new PropertyChangeEvent(this, \"property\", \"oldValue\", property));\n+            listeners.fire().propertyChange(new PropertyChangeEvent(this, \"property\", oldValue, property));\n+        }\n+\n+        protected void addVetoableChangeListener(VetoableChangeListener listener)\n+        {\n+            // Do nothing!\n         }\n \n         public void addPropertyChangeListener(PropertyChangeListener listener)", "timestamp": 1279805428, "metainfo": ""}