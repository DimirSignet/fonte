{"sha": "738127eaeda8b7ec3290c813ca65ad1afa67eaa0", "log": "Add subArray method to get a portion of an array from Ash   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n import org.apache.commons.lang.builder.ToStringStyle;\n \n /**\n- * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and primitive wrapper arrays \n+ * <p>Operations on arrays, primitive arrays (like <code>int[]</code>) and primitive wrapper arrays\n  * (like <code>Integer[]</code>).</p>\n  * \n  * <p>This class tries to handle <code>null</code> input gracefully.\n  * @author Tim O'Brien\n  * @author Pete Gieser\n  * @author Gary Gregory\n+ * @author Ash\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.25 2003/08/22 17:25:33 ggregory Exp $\n+ * @version $Id: ArrayUtils.java,v 1.26 2003/11/29 12:56:15 scolebourne Exp $\n  */\n public class ArrayUtils {\n \n      * \n      * <p>This method returns <code>null</code> if <code>null</code> array input.</p>\n      *\n-     * @param array  an array whose elements are either a {@link java.util.Map.Entry} or \n+     * @param array  an array whose elements are either a {@link java.util.Map.Entry} or\n      *  an Array containing at least two elements, may be <code>null</code>\n      * @return a <code>Map</code> that was created from the array\n      * @throws IllegalArgumentException  if one element of this Array is\n             } else if (object instanceof Object[]) {\n                 Object[] entry = (Object[]) object;\n                 if (entry.length < 2) {\n-                    throw new IllegalArgumentException(\"Array element \" + i + \", '\" \n+                    throw new IllegalArgumentException(\"Array element \" + i + \", '\"\n                         + object\n                         + \"', has a length less than 2\");\n                 }\n                 map.put(entry[0], entry[1]);\n             } else {\n-                throw new IllegalArgumentException(\"Array element \" + i + \", '\" \n+                throw new IllegalArgumentException(\"Array element \" + i + \", '\"\n                         + object\n                         + \"', is neither of type Map.Entry nor an Array\");\n             }\n             return null;\n         }\n         return (boolean[]) array.clone();\n+    }\n+\n+    // Subarrays\n+    //-----------------------------------------------------------------------\n+    /**\n+     * <p>Produces a new array containing the elements between\n+     * the start and end indices.</p>\n+     * \n+     * <p>The start index is inclusive, the end index exclusive.\n+     * Null array input produces null output.\n+     * The result is always an <code>Object[]</code> instance</p>\n+     *\n+     * @param array  the array\n+     * @param startIndex  the starting index. Undervalue (&lt;0)\n+     *      is promoted to 0, overvalue (&gt;array.length) results\n+     *      in an empty array.\n+     * @param endIndex  elements upto endIndex-1 are present in the\n+     *      returned subarray. Undervalue (&lt; startIndex) produces\n+     *      empty array, overvalue (&gt;array.length) is demoted to\n+     *      array length.\n+     */\n+    public static Object[] subArray(Object[] array, int startIndexInclusive, int endIndexExclusive) {\n+        if (array == null) {\n+            return null;\n+        }\n+        if (startIndexInclusive < 0) {\n+            startIndexInclusive = 0;\n+        }\n+        if (endIndexExclusive > array.length) {\n+            endIndexExclusive = array.length;\n+        }\n+        int newSize = endIndexExclusive - startIndexInclusive;\n+        if (newSize <= 0) {\n+            return EMPTY_OBJECT_ARRAY;\n+        }\n+        Object[] subArray = new Object[newSize];\n+        System.arraycopy(array, startIndexInclusive, subArray, 0, newSize);\n+        return subArray;\n     }\n \n     // Is same length\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author Nikolay Metchev\n  * @author Matthew Hawthorne\n  * @author Tim O'Brien\n- * @version $Id: ArrayUtilsTest.java,v 1.14 2003/10/11 19:58:40 tobrien Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.15 2003/11/29 12:56:16 scolebourne Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         float[] cloned = ArrayUtils.clone(original);\n         assertTrue(Arrays.equals(original, cloned));\n         assertTrue(original != cloned);\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    public void testSubArray() {\n+        Object[] inarray = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"};\n+\n+        assertEquals(\"0 start, mid end\", \"abcd\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, 0, 4)));\n+        assertEquals(\"0 start, length end\", \"abcdef\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, 0, inarray.length)));\n+        assertEquals(\"mid start, mid end\", \"bcd\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, 1, 4)));\n+        assertEquals(\"mid start, length end\", \"bcdef\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, 1, inarray.length)));\n+\n+        assertNull(\"null input\", ArrayUtils.subArray(null, 0, 3));\n+        assertEquals(\"empty array\", \"\",\n+            StringUtils.join(ArrayUtils.subArray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2)));\n+        assertEquals(\"start > end\", \"\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, 4, 2)));\n+        assertEquals(\"start == end\", \"\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, 3, 3)));\n+        assertEquals(\"start undershoot, normal end\", \"abcd\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, -2, 4)));\n+        assertEquals(\"start overshoot, any end\", \"\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, 33, 4)));\n+        assertEquals(\"normal start, end overshoot\", \"cdef\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, 2, 33)));\n+        assertEquals(\"start undershoot, end overshoot\", \"abcdef\",\n+            StringUtils.join(ArrayUtils.subArray(inarray, -2, 12)));\n+            \n+        // object-level tests\n+        assertSame(\"empty array, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n+            ArrayUtils.subArray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2));\n+        assertSame(\"start > end, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n+            ArrayUtils.subArray(inarray, 4, 1));\n+        assertSame(\"start > end, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n+            ArrayUtils.subArray(inarray, 33, 1));\n+        assertSame(\"start == end, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n+            ArrayUtils.subArray(inarray, 3, 3));\n+        assertSame(\"start overshoot, any end, object test\", ArrayUtils.EMPTY_OBJECT_ARRAY,\n+            ArrayUtils.subArray(inarray, 8733, 4));\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1070110576, "metainfo": ""}