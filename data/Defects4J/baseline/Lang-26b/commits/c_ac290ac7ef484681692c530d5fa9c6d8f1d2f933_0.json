{"sha": "ac290ac7ef484681692c530d5fa9c6d8f1d2f933", "log": "added tests of rounding and truncating across daylight saving time beginning and ending   ", "commit": "\n--- a/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/time/DateUtilsTest.java\n import java.util.Iterator;\n import java.util.Locale;\n import java.util.NoSuchElementException;\n+import java.util.TimeZone;\n \n import junit.framework.AssertionFailedError;\n import junit.framework.Test;\n public class DateUtilsTest extends TestCase {\n     DateFormat dateParser = null;\n     DateFormat dateTimeParser = null;\n+    DateFormat timeZoneDateParser = null;\n     Date date1 = null;\n     Date date2 = null;\n+    Date date3 = null;\n+    Date date4 = null;\n+    Date date5 = null;\n+    Date date6 = null;\n+    Date date7 = null;\n+    Date date8 = null;\n     Calendar cal1 = null;\n     Calendar cal2 = null;\n+    Calendar cal3 = null;\n+    Calendar cal4 = null;\n+    Calendar cal5 = null;\n+    Calendar cal6 = null;\n+    Calendar cal7 = null;\n+    Calendar cal8 = null;\n+    TimeZone zone = null;\n+    TimeZone defaultZone = null;\n \n     public DateUtilsTest(String name) {\n         super(name);\n \n         date1 = dateTimeParser.parse(\"February 12, 2002 12:34:56.789\");\n         date2 = dateTimeParser.parse(\"November 18, 2001 1:23:11.321\");\n+        defaultZone = TimeZone.getDefault();\n+        zone = TimeZone.getTimeZone(\"MET\");\n+        TimeZone.setDefault(zone);\n+        dateTimeParser.setTimeZone(zone);\n+        date3 = dateTimeParser.parse(\"March 30, 2003 05:30:45.000\");\n+        date4 = dateTimeParser.parse(\"March 30, 2003 01:10:00.000\");\n+        date5 = dateTimeParser.parse(\"March 30, 2003 01:40:00.000\");\n+        date6 = dateTimeParser.parse(\"March 30, 2003 02:10:00.000\");\n+        date7 = dateTimeParser.parse(\"March 30, 2003 02:40:00.000\");\n+        date8 = dateTimeParser.parse(\"October 26, 2003 05:30:45.000\");\n+        dateTimeParser.setTimeZone(defaultZone);\n+        TimeZone.setDefault(defaultZone);\n         cal1 = Calendar.getInstance();\n         cal1.setTime(date1);\n         cal2 = Calendar.getInstance();\n         cal2.setTime(date2);\n+        TimeZone.setDefault(zone);\n+        cal3 = Calendar.getInstance();\n+        cal3.setTime(date3);\n+        cal4 = Calendar.getInstance();\n+        cal4.setTime(date4);\n+        cal5 = Calendar.getInstance();\n+        cal5.setTime(date5);\n+        cal6 = Calendar.getInstance();\n+        cal6.setTime(date6);\n+        cal7 = Calendar.getInstance();\n+        cal7.setTime(date7);\n+        cal8 = Calendar.getInstance();\n+        cal8.setTime(date8);\n+        TimeZone.setDefault(defaultZone);\n     }\n \n     protected void tearDown() throws Exception {\n             DateUtils.round(date1, -9999);\n             fail();\n         } catch(IllegalArgumentException ex) {}\n+        \n+        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n+        // Test rounding across the beginning of daylight saving time\n+        TimeZone.setDefault(zone);\n+        dateTimeParser.setTimeZone(zone);\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round(date4, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round((Object) cal4, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round(date5, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round((Object) cal5, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round(date6, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round((Object) cal6, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round(date7, Calendar.DATE));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.round((Object) cal7, Calendar.DATE));\n+        \n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n+                DateUtils.round(date4, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 01:00:00.000\"),\n+                DateUtils.round((Object) cal4, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                DateUtils.round(date5, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                DateUtils.round((Object) cal5, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                DateUtils.round(date6, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 03:00:00.000\"),\n+                DateUtils.round((Object) cal6, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                DateUtils.round(date7, Calendar.HOUR_OF_DAY));\n+        assertEquals(\"round MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 04:00:00.000\"),\n+                DateUtils.round((Object) cal7, Calendar.HOUR_OF_DAY));\n+        TimeZone.setDefault(defaultZone);\n+        dateTimeParser.setTimeZone(defaultZone);\n     }\n \n     /**\n             DateUtils.truncate(\"\", Calendar.SECOND);\n             fail();\n         } catch (ClassCastException ex) {}\n+\n+        // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560\n+        // Test truncate across beginning of daylight saving time\n+        TimeZone.setDefault(zone);\n+        dateTimeParser.setTimeZone(zone);\n+        assertEquals(\"truncate MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.truncate(date3, Calendar.DATE));\n+        assertEquals(\"truncate MET date across DST change-over\",\n+                dateTimeParser.parse(\"March 30, 2003 00:00:00.000\"),\n+                DateUtils.truncate((Object) cal3, Calendar.DATE));\n+        // Test truncate across end of daylight saving time\n+        assertEquals(\"truncate MET date across DST change-over\",\n+                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n+                DateUtils.truncate(date8, Calendar.DATE));\n+        assertEquals(\"truncate MET date across DST change-over\",\n+                dateTimeParser.parse(\"October 26, 2003 00:00:00.000\"),\n+                DateUtils.truncate((Object) cal8, Calendar.DATE));\n+        TimeZone.setDefault(defaultZone);\n+        dateTimeParser.setTimeZone(defaultZone);\n     }\n \n     // TODO: Decide whether this code is removed or goes into 2.1", "timestamp": 1089050153, "metainfo": ""}