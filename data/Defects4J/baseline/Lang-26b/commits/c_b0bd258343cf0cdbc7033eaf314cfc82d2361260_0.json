{"sha": "b0bd258343cf0cdbc7033eaf314cfc82d2361260", "log": "Applying Scott Johnson's great work in LANG-269  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  *  <li><b>Abbreviate</b>\n  *      - abbreviates a string using ellipsis</li>\n  *  <li><b>Difference</b>\n- *      - compares two Strings and reports on their differences</li>\n+ *      - compares Strings and reports on their differences</li>\n  *  <li><b>LevensteinDistance</b>\n  *      - the number of changes needed to change one String into another</li>\n  * </ul>\n  * @author Michael Davey\n  * @author Reuben Sivan\n  * @author Chris Hyzer\n+ * @author Scott Johnson\n  * @since 1.0\n  * @version $Id$\n  */\n         return -1;\n     }\n \n+    /**\n+     * <p>Compares all Strings in an array and returns the index at which the\n+     * Strings begin to differ.</p>\n+     *\n+     * <p>For example,\n+     * <code>indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) -> 7</code></p>\n+     *\n+     * <pre>\n+     * StringUtils.indexOfDifference(null) = -1\n+     * StringUtils.indexOfDifference(new String[] {}) = -1\n+     * StringUtils.indexOfDifference(new String[] {\"abc\"}) = -1\n+     * StringUtils.indexOfDifference(new String[] {null, null}) = -1\n+     * StringUtils.indexOfDifference(new String[] {\"\", \"\"}) = -1\n+     * StringUtils.indexOfDifference(new String[] {\"\", null}) = 0\n+     * StringUtils.indexOfDifference(new String[] {\"abc\", null, null}) = 0\n+     * StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}) = 0\n+     * StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}) = 0\n+     * StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}) = 0\n+     * StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}) = -1\n+     * StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}) = 1\n+     * StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}) = 2\n+     * StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}) = 2\n+     * StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}) = 0\n+     * StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}) = 0\n+     * StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}) = 7\n+     * </pre>\n+     *\n+     * @param strs  array of strings, entries may be null\n+     * @return the index where the strings begin to differ; -1 if they are all equal\n+     */\n+    public static int indexOfDifference(String[] strs) {\n+        if (strs == null || strs.length <= 1) {\n+            return -1;\n+        }\n+        boolean anyStringNull = false;\n+        boolean allStringsNull = true;\n+        int arrayLen = strs.length;\n+        int shortestStrLen = Integer.MAX_VALUE;\n+        int longestStrLen = 0;\n+\n+        // find the min and max string lengths; this avoids checking to make \n+        // sure we are not exceeding the length of the string each time through\n+        // the bottom loop.\n+        for (int i=0; i<arrayLen; i++) {\n+            if (strs[i] == null) {\n+                anyStringNull = true;\n+                shortestStrLen = 0;\n+            } else {   \n+                allStringsNull = false;\n+                shortestStrLen = Math.min(strs[i].length(), shortestStrLen);\n+                longestStrLen = Math.max(strs[i].length(), longestStrLen);\n+            }\n+        }\n+\n+        // handle lists containing all nulls or all empty strings\n+        if (allStringsNull || (longestStrLen == 0 && !anyStringNull)) {\n+            return -1;\n+        }\n+\n+        // handle lists containing some nulls or some empty strings\n+        if (shortestStrLen == 0) {\n+            return 0;\n+        } \n+\n+        // find the position with the first difference across all strings\n+        int firstDiff = -1;\n+        for (int stringPos = 0; stringPos<shortestStrLen; stringPos++) {\n+            char comparisonChar = strs[0].charAt(stringPos);\n+            for (int arrayPos = 1; arrayPos<arrayLen; arrayPos++) {\n+                if (strs[arrayPos].charAt(stringPos) != comparisonChar) {\n+                    firstDiff = stringPos;\n+                    break;\n+                }\n+            }\n+            if (firstDiff != -1) {\n+                break;\n+            }\n+        }\n+\n+        if (firstDiff == -1 && shortestStrLen != longestStrLen) {\n+            // we compared all of the characters up to the length of the \n+            // shortest string and didn't find a match, but the string lengths \n+            // vary, so return the length of the shortest string.\n+            return shortestStrLen;\n+        } else {\n+            return firstDiff;\n+        }\n+    }\n+    \n+    /**\n+     * <p>Compares all Strings in an array and returns the initial sequence of \n+     * characters that is common to all of them.</p>\n+     *\n+     * <p>For example,\n+     * <code>getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) -> \"i am a \"</code></p>\n+     *\n+     * <pre>\n+     * StringUtils.getCommonPrefix(null) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {\"abc\"}) = \"abc\"\n+     * StringUtils.getCommonPrefix(new String[] {null, null}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {\"\", \"\"}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {\"\", null}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}) = \"abc\"\n+     * StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}) = \"a\"\n+     * StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}) = \"ab\"\n+     * StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}) = \"ab\"\n+     * StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}) = \"\"\n+     * StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}) = \"i am a \"\n+     * </pre>\n+     *\n+     * @param strs  array of String objects, entries may be null\n+     * @return the initial sequence of characters that are common to all Strings\n+     * in the array; empty String if the array is null or the strings in the\n+     * array are all null; -1 if all Strings are equal\n+     */\n+    public static String getCommonPrefix(String[] strs) {\n+        if (strs == null || strs.length == 0) {\n+            return EMPTY;\n+        }\n+        int smallestIndexOfDiff = indexOfDifference(strs);\n+        if (smallestIndexOfDiff == -1) {\n+            // all strings were identical\n+            if (strs[0] == null) {\n+                return EMPTY;\n+            } else {\n+                return strs[0];\n+            }\n+        } else if (smallestIndexOfDiff == 0) {\n+            // there were no common initial characters\n+            return EMPTY;\n+        } else {\n+            // we found a common initial character sequence \n+            return strs[0].substring(0, smallestIndexOfDiff);\n+        }\n+    }  \n+    \n     // Misc\n     //-----------------------------------------------------------------------\n     /**\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n  * @author Phil Steitz\n  * @author Gary D. Gregory\n+ * @author Scott Johnson\n  * @author Al Chou\n  * @version $Id$\n  */\n         assertEquals(\"queued\", StringUtils.remove(\"queued\", 'z'));\n     }\n \n+    \n+    public void testDifferenceAt_StringArray(){        \n+        assertEquals(-1, StringUtils.indexOfDifference(null));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {}));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\"}));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {null, null}));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"\", \"\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", null}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", null, null}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {null, null, \"abc\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"\", \"abc\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abc\", \"\"}));\n+        assertEquals(-1, StringUtils.indexOfDifference(new String[] {\"abc\", \"abc\"}));\n+        assertEquals(1, StringUtils.indexOfDifference(new String[] {\"abc\", \"a\"}));\n+        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"ab\", \"abxyz\"}));\n+        assertEquals(2, StringUtils.indexOfDifference(new String[] {\"abcde\", \"abxyz\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"abcde\", \"xyz\"}));\n+        assertEquals(0, StringUtils.indexOfDifference(new String[] {\"xyz\", \"abcde\"}));\n+        assertEquals(7, StringUtils.indexOfDifference(new String[] {\"i am a machine\", \"i am a robot\"}));\n+    }\n+    \n+    public void testGetCommonPrefix_StringArray(){        \n+        assertEquals(\"\", StringUtils.getCommonPrefix(null));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {}));\n+        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", null}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", null, null}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {null, null, \"abc\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"\", \"abc\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"\"}));\n+        assertEquals(\"abc\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"abc\"}));\n+        assertEquals(\"a\", StringUtils.getCommonPrefix(new String[] {\"abc\", \"a\"}));\n+        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"ab\", \"abxyz\"}));\n+        assertEquals(\"ab\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"abxyz\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"abcde\", \"xyz\"}));\n+        assertEquals(\"\", StringUtils.getCommonPrefix(new String[] {\"xyz\", \"abcde\"}));\n+        assertEquals(\"i am a \", StringUtils.getCommonPrefix(new String[] {\"i am a machine\", \"i am a robot\"}));\n+    }\n+ \n }", "timestamp": 1194923916, "metainfo": ""}