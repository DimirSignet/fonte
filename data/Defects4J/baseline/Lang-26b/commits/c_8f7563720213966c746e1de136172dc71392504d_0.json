{"sha": "8f7563720213966c746e1de136172dc71392504d", "log": "Added javadoc Added protected getters and setters for fields Made fields private   ", "commit": "\n--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java\n import org.apache.commons.lang.SystemUtils;\n /**\n  * <code>ToStringStyle</code> works with ToStringBuilder to create a\n- * toString.\n+ * toString. The main public interface is always via ToStringBuilder.\n  * <p>\n  * These classes are intended to be used as singletons. There is no need \n- * to instantiate a new style each time. A prohram will generally use one\n+ * to instantiate a new style each time. A program will generally use one\n  * of the predefined constants on this class. Alternatively, the \n  * {@link StandardToStringStyle} class can be used to set the individual\n- * settings.\n- * <P>\n- * If necessary, this class can be subclassed to provide specific toString\n- * designs. The main public interface is always via ToStringBuilder however.\n+ * settings. Thus most styles can be achieved without subclassing.\n+ * <p>\n+ * If required, a subclass can override as many or as few of the methods as \n+ * it requires.Each object type (from boolean to long to Object to int[]) has \n+ * its own methods to output it. Most have two versions, detail and summary. For\n+ * example, the detail version of the array based methods will output the\n+ * whole array, whereas the summary method will just output the array length.\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n- * @version $Id: ToStringStyle.java,v 1.2 2002/09/17 22:09:11 scolebourne Exp $\n+ * @version $Id: ToStringStyle.java,v 1.3 2002/09/19 19:44:10 scolebourne Exp $\n  */\n public abstract class ToStringStyle implements Serializable {\n     \n     /**\n      * Whether to use the field names 'true'\n      */\n-    protected boolean useFieldNames = true;\n+    private boolean useFieldNames = true;\n     /**\n      * Whether to use the class name 'true'\n      */\n-    protected boolean useClassName = true;\n+    private boolean useClassName = true;\n     /**\n      * Whether to use short class names 'false'\n      */\n-    protected boolean useShortClassName = false;\n+    private boolean useShortClassName = false;\n     /**\n      * Whether to use the identity hash code 'true'\n      */\n-    protected boolean useIdentityHashCode = true;\n+    private boolean useIdentityHashCode = true;\n     \n     /**\n      * The content start '['\n      */\n-    protected String contentStart = \"[\";\n+    private String contentStart = \"[\";\n     /**\n      * The content end ']'\n      */\n-    protected String contentEnd = \"]\";\n+    private String contentEnd = \"]\";\n     /**\n      * The field name value separator '='\n      */\n-    protected String fieldNameValueSeparator = \"=\";\n+    private String fieldNameValueSeparator = \"=\";\n     /**\n      * The field separator ','\n      */\n-    protected String fieldSeparator = \",\";\n+    private String fieldSeparator = \",\";\n     /**\n      * The array start '{'\n      */\n-    protected String arrayStart = \"{\";\n+    private String arrayStart = \"{\";\n     /**\n      * The array separator ','\n      */\n-    protected String arraySeparator = \",\";\n+    private String arraySeparator = \",\";\n     /**\n      * The detail for array content\n      */\n-    protected boolean arrayContentDetail = true;\n+    private boolean arrayContentDetail = true;\n     /**\n      * The array end '}'\n      */\n-    protected String arrayEnd = \"}\";\n+    private String arrayEnd = \"}\";\n     /**\n      * The value to use when fullDetail is null 'true'\n      */\n-    protected boolean defaultFullDetail = true;\n+    private boolean defaultFullDetail = true;\n     /**\n      * The null text '<null>'\n      */\n-    protected String nullText = \"<null>\";\n+    private String nullText = \"<null>\";\n     /**\n      * The summary size text start '<size'\n      */\n-    protected String sizeStartText = \"<size=\";\n+    private String sizeStartText = \"<size=\";\n     /**\n      * The summary size text start '>'\n      */\n-    protected String sizeEndText = \">\";\n+    private String sizeEndText = \">\";\n     /**\n      * The summary object text start '<'\n      */\n-    protected String summaryObjectStartText = \"<\";\n+    private String summaryObjectStartText = \"<\";\n     /**\n      * The summary object text start '>'\n      */\n-    protected String summaryObjectEndText = \">\";\n+    private String summaryObjectEndText = \">\";\n     \n     //----------------------------------------------------------------------------\n     \n     \n     /**\n      * Append to the toString an Object, correctly interpretting its type.\n+     * <p>\n+     * This method performs the main lookup by Class type to correctly route\n+     * arrays, collections, maps and objects to the appropriate method. Either\n+     * detail or summary views can be specified.\n      *\n      * @param buffer  the StringBuffer to populate\n      * @param fieldName  the field name, typically not used as already appended\n     \n     /**\n      * Append to the toString a size summary.\n+     * <p>\n+     * The size summary is used to summarize the contents of collections, maps \n+     * and arrays. The text output is a prefix, the size (passed in) and a suffix.\n+     * The default format is '&lt;size=n&gt;'.\n      *\n      * @param buffer  the StringBuffer to populate\n      * @param fieldName  the field name, typically not used as already appended\n \n     /**\n      * Is this field to be output in full detail.\n+     * <p>\n+     * This method converts a detail request into a detail level. The calling code\n+     * may request full detail (true), but a subclass might ignore that and always \n+     * return false. The calling code may pass in null indicating that it doesn't\n+     * care about the detail level. In this case the default detail level is used.\n      * \n      * @param fullDetail  the detail level requested\n      * @return whether full detail is to be shown\n     \n     /**\n      * Gets the short class name for a class.\n+     * <p>\n+     * The short class name is the name excluding the package name.\n      *\n      * @param cls  the class to get the short name of\n      * @return the short name\n         return name.substring(pos + 1);\n     }\n \n+    // Setters and getters for the customizable parts of the style\n+    // These methods are not expected to be overridden, except to make public\n+    // (They are not public so that immutable subclasses can be written)\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets whether to use the class name.\n+     * @return the current useClassName flag\n+     */\n+    protected boolean isUseClassName() {\n+        return useClassName;\n+    }\n+\n+    /**\n+     * Sets whether to use the class name.\n+     * @param useClassName  the new useClassName flag\n+     */\n+    protected void setUseClassName(boolean useClassName) {\n+        this.useClassName = useClassName;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets whether to output short or long class names.\n+     * @return the current shortClassName flag\n+     */\n+    protected boolean isShortClassName() {\n+        return useShortClassName;\n+    }\n+\n+    /**\n+     * Sets whether to output short or long class names.\n+     * @param shortClassName  the new shortClassName flag\n+     */\n+    protected void setShortClassName(boolean shortClassName) {\n+        this.useShortClassName = shortClassName;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets whether to use the identity hash code.\n+     * @return the current useIdentityHashCode flag\n+     */\n+    protected boolean isUseIdentityHashCode() {\n+        return useIdentityHashCode;\n+    }\n+\n+    /**\n+     * Sets whether to use the identity hash code.\n+     * @param useFieldNames  the new useIdentityHashCode flag\n+     */\n+    protected void setUseIdentityHashCode(boolean useIdentityHashCode) {\n+        this.useIdentityHashCode = useIdentityHashCode;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets whether to use the field names passed in.\n+     * @return the current useFieldNames flag\n+     */\n+    protected boolean isUseFieldNames() {\n+        return useFieldNames;\n+    }\n+\n+    /**\n+     * Sets whether to use the field names passed in.\n+     * @param useFieldNames  the new useFieldNames flag\n+     */\n+    protected void setUseFieldNames(boolean useFieldNames) {\n+        this.useFieldNames = useFieldNames;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets whether to use full detail when the caller doesn't specify.\n+     * @return the current defaultFullDetail flag\n+     */\n+    protected boolean isDefaultFullDetail() {\n+        return defaultFullDetail;\n+    }\n+\n+    /**\n+     * Sets whether to use full detail when the caller doesn't specify.\n+     * @param defaultFullDetail  the new defaultFullDetail flag\n+     */\n+    protected void setDefaultFullDetail(boolean defaultFullDetail) {\n+        this.defaultFullDetail = defaultFullDetail;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets whether to output array content detail.\n+     * @return the current array content detail setting\n+     */\n+    protected boolean isArrayContentDetail() {\n+        return arrayContentDetail;\n+    }\n+    \n+    /**\n+     * Sets whether to output array content detail.\n+     * @param arrayContentDetail  the new arrayContentDetail flag\n+     */\n+    protected void setArrayContentDetail(boolean arrayContentDetail) {\n+        this.arrayContentDetail = arrayContentDetail;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the array start text.\n+     * @return the current array start text\n+     */\n+    protected String getArrayStart() {\n+        return arrayStart;\n+    }\n+\n+    /**\n+     * Sets the array start text.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param arrayStart  the new array start text\n+     */\n+    protected void setArrayStart(String arrayStart) {\n+        if (arrayStart == null) {\n+            arrayStart = \"\";\n+        }\n+        this.arrayStart = arrayStart;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the array end text.\n+     * @return the current array end text\n+     */\n+    protected String getArrayEnd() {\n+        return arrayEnd;\n+    }\n+\n+    /**\n+     * Sets the array end text.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param arrayEnd  the new array end text\n+     */\n+    protected void setArrayEnd(String arrayEnd) {\n+        if (arrayStart == null) {\n+            arrayStart = \"\";\n+        }\n+        this.arrayEnd = arrayEnd;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the array separator text.\n+     * @return the current array separator text\n+     */\n+    protected String getArraySeparator() {\n+        return arraySeparator;\n+    }\n+\n+    /**\n+     * Sets the array separator text.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param arraySeparator  the new array separator text\n+     */\n+    protected void setArraySeparator(String arraySeparator) {\n+        if (arraySeparator == null) {\n+            arraySeparator = \"\";\n+        }\n+        this.arraySeparator = arraySeparator;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the content start text.\n+     * @return the current content start text\n+     */\n+    protected String getContentStart() {\n+        return contentStart;\n+    }\n+\n+    /**\n+     * Sets the content start text.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param contentStart  the new content start text\n+     */\n+    protected void setContentStart(String contentStart) {\n+        if (contentStart == null) {\n+            contentStart = \"\";\n+        }\n+        this.contentStart = contentStart;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the content end text.\n+     * @return the current content end text\n+     */\n+    protected String getContentEnd() {\n+        return contentEnd;\n+    }\n+\n+    /**\n+     * Sets the content end text.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param contentEnd  the new content end text\n+     */\n+    protected void setContentEnd(String contentEnd) {\n+        if (contentEnd == null) {\n+            contentEnd = \"\";\n+        }\n+        this.contentEnd = contentEnd;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the field name value separator text.\n+     * @return the current field name value separator text\n+     */\n+    protected String getFieldNameValueSeparator() {\n+        return fieldNameValueSeparator;\n+    }\n+\n+    /**\n+     * Sets the field name value separator text.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param fieldNameValueSeparator  the new field name value separator text\n+     */\n+    protected void setFieldNameValueSeparator(String fieldNameValueSeparator) {\n+        if (fieldNameValueSeparator == null) {\n+            fieldNameValueSeparator = \"\";\n+        }\n+        this.fieldNameValueSeparator = fieldNameValueSeparator;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the field separator text.\n+     * @return the current field separator text\n+     */\n+    protected String getFieldSeparator() {\n+        return fieldSeparator;\n+    }\n+\n+    /**\n+     * Sets the field separator text.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param fieldSeparator  the new field separator text\n+     */\n+    protected void setFieldSeparator(String fieldSeparator) {\n+        if (fieldSeparator == null) {\n+            fieldSeparator = \"\";\n+        }\n+        this.fieldSeparator = fieldSeparator;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the text to output when null found.\n+     * @return the current text to output when null found\n+     */\n+    protected String getNullText() {\n+        return nullText;\n+    }\n+\n+    /**\n+     * Sets the text to output when null found.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param nullText  the new text to output when null found\n+     */\n+    protected void setNullText(String nullText) {\n+        if (nullText == null) {\n+            nullText = \"\";\n+        }\n+        this.nullText = nullText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the text to output when a Collection, Map or Array size is output.\n+     * This is output before the size value.\n+     * @return the current start of size text\n+     */\n+    protected String getSizeStartText() {\n+        return sizeStartText;\n+    }\n+\n+    /**\n+     * Sets the text to output when a Collection, Map or Array size is output.\n+     * This is output before the size value.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param sizeStartText  the new start of size text\n+     */\n+    protected void setSizeStartText(String sizeStartText) {\n+        if (sizeStartText == null) {\n+            sizeStartText = \"\";\n+        }\n+        this.sizeStartText = sizeStartText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the text to output when a Collection, Map or Array size is output.\n+     * This is output after the size value.\n+     * @return the current end of size text\n+     */\n+    protected String getSizeEndText() {\n+        return sizeEndText;\n+    }\n+\n+    /**\n+     * Sets the text to output when a Collection, Map or Array size is output.\n+     * This is output after the size value.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param sizeEndText  the new end of size text\n+     */\n+    protected void setSizeEndText(String sizeEndText) {\n+        if (sizeEndText == null) {\n+            sizeEndText = \"\";\n+        }\n+        this.sizeEndText = sizeEndText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the text to output when an Object is output in summary mode.\n+     * This is output before the size value.\n+     * @return the current start of summary text\n+     */\n+    protected String getSummaryObjectStartText() {\n+        return summaryObjectStartText;\n+    }\n+\n+    /**\n+     * Sets the text to output when an Object is output in summary mode.\n+     * This is output before the size value.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param summaryObjectStartText  the new start of summary text\n+     */\n+    protected void setSummaryObjectStartText(String summaryObjectStartText) {\n+        if (summaryObjectStartText == null) {\n+            summaryObjectStartText = \"\";\n+        }\n+        this.summaryObjectStartText = summaryObjectStartText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n+    /**\n+     * Gets the text to output when an Object is output in summary mode.\n+     * This is output after the size value.\n+     * @return the current end of summary text\n+     */\n+    protected String getSummaryObjectEndText() {\n+        return summaryObjectEndText;\n+    }\n+\n+    /**\n+     * Sets the text to output when an Object is output in summary mode.\n+     * This is output after the size value.\n+     * Null is accepted, but will be converted to a blank string.\n+     * @param summaryObjectEndText  the new end of summary text\n+     */\n+    protected void setSummaryObjectEndText(String summaryObjectEndText) {\n+        if (summaryObjectEndText == null) {\n+            summaryObjectEndText = \"\";\n+        }\n+        this.summaryObjectEndText = summaryObjectEndText;\n+    }\n+\n+    //---------------------------------------------------------------------\n+    \n     //----------------------------------------------------------------------------\n     \n     /**\n      * This is an inner class rather than using StandardToStringStyle to\n      * ensure its immutability.\n      */\n-    private static class DefaultToStringStyle extends ToStringStyle {\n+    private static final class DefaultToStringStyle extends ToStringStyle {\n         \n         /**\n          * Constructor - use the static constant rather than instantiating.\n      * This is an inner class rather than using StandardToStringStyle to\n      * ensure its immutability.\n      */\n-    private static class NoFieldNameToStringStyle extends ToStringStyle {\n+    private static final class NoFieldNameToStringStyle extends ToStringStyle {\n         \n         /**\n          * Constructor - use the static constant rather than instantiating.\n          */\n         private NoFieldNameToStringStyle() {\n             super();\n-            useFieldNames = false;\n+            setUseFieldNames(false);\n         }\n         \n         /**\n      * This is an inner class rather than using StandardToStringStyle to\n      * ensure its immutability.\n      */\n-    private static class SimpleToStringStyle extends ToStringStyle {\n+    private static final class SimpleToStringStyle extends ToStringStyle {\n         \n         /**\n          * Constructor - use the static constant rather than instantiating.\n          */\n         private SimpleToStringStyle() {\n             super();\n-            useClassName = false;\n-            useIdentityHashCode = false;\n-            useFieldNames = false;\n-            contentStart = \"\";\n-            contentEnd = \"\";\n+            setUseClassName(false);\n+            setUseIdentityHashCode(false);\n+            setUseFieldNames(false);\n+            setContentStart(\"\");\n+            setContentEnd(\"\");\n         }\n         \n         /**\n      * This is an inner class rather than using StandardToStringStyle to\n      * ensure its immutability.\n      */\n-    private static class MultiLineToStringStyle extends ToStringStyle {\n+    private static final class MultiLineToStringStyle extends ToStringStyle {\n \n         /**\n          * Constructor - use the static constant rather than instantiating.\n          */\n         private MultiLineToStringStyle() {\n             super();\n-            contentStart = \"[\" + SystemUtils.LINE_SEPARATOR + \"  \";\n-            fieldSeparator = SystemUtils.LINE_SEPARATOR + \"  \";\n-            contentEnd = SystemUtils.LINE_SEPARATOR + \"]\";\n+            setContentStart(\"[\" + SystemUtils.LINE_SEPARATOR + \"  \");\n+            setFieldSeparator(SystemUtils.LINE_SEPARATOR + \"  \");\n+            setContentEnd(SystemUtils.LINE_SEPARATOR + \"]\");\n         }\n         \n         /**", "timestamp": 1032464650, "metainfo": ""}