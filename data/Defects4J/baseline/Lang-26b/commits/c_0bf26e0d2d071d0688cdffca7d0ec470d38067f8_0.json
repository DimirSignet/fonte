{"sha": "0bf26e0d2d071d0688cdffca7d0ec470d38067f8", "log": "LANG-326 - StringUtils: startsWith / endsWith / startsWithIgnoreCase / endsWithIgnoreCase / removeStartIgnoreCase / removeEndIgnoreCase methods  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  *      - removes leading and trailing whitespace</li>\n  *  <li><b>Equals</b>\n  *      - compares two strings null-safe</li>\n+ *  <li><b>startsWith</b>\n+ *      - check if a String starts with a prefix null-safe</li>\n+ *  <li><b>endsWith</b>\n+ *      - check if a String ends with a suffix null-safe</li>\n  *  <li><b>IndexOf/LastIndexOf/Contains</b>\n  *      - null-safe index-of checks\n  *  <li><b>IndexOfAny/LastIndexOfAny/IndexOfAnyBut/LastIndexOfAnyBut</b>\n     }\n \n     /**\n+     * <p>Case insensitive removal of a substring if it is at the begining of a source string,\n+     * otherwise returns the source string.</p>\n+     *\n+     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * An empty (\"\") source string will return the empty string.\n+     * A <code>null</code> search string will return the source string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.removeStartIgnoreCase(null, *)      = null\n+     * StringUtils.removeStartIgnoreCase(\"\", *)        = \"\"\n+     * StringUtils.removeStartIgnoreCase(*, null)      = *\n+     * StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\")   = \"domain.com\"\n+     * StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")   = \"domain.com\"\n+     * StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\")       = \"domain.com\"\n+     * StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n+     * StringUtils.removeStartIgnoreCase(\"abc\", \"\")    = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the source String to search, may be null\n+     * @param remove  the String to search for (case insensitive) and remove, may be null\n+     * @return the substring with the string removed if found,\n+     *  <code>null</code> if null String input\n+     * @since 2.4\n+     */\n+    public static String removeStartIgnoreCase(String str, String remove) {\n+        if (isEmpty(str) || isEmpty(remove)) {\n+            return str;\n+        }\n+        if (startsWithIgnoreCase(str, remove)){\n+            return str.substring(remove.length());\n+        }\n+        return str;\n+    }\n+\n+    /**\n      * <p>Removes a substring only if it is at the end of a source string,\n      * otherwise returns the source string.</p>\n      *\n             return str;\n         }\n         if (str.endsWith(remove)) {\n+            return str.substring(0, str.length() - remove.length());\n+        }\n+        return str;\n+    }\n+\n+    /**\n+     * <p>Case insensitive removal of a substring if it is at the end of a source string,\n+     * otherwise returns the source string.</p>\n+     *\n+     * <p>A <code>null</code> source string will return <code>null</code>.\n+     * An empty (\"\") source string will return the empty string.\n+     * A <code>null</code> search string will return the source string.</p>\n+     *\n+     * <pre>\n+     * StringUtils.removeEnd(null, *)      = null\n+     * StringUtils.removeEnd(\"\", *)        = \"\"\n+     * StringUtils.removeEnd(*, null)      = *\n+     * StringUtils.removeEnd(\"www.domain.com\", \".com.\")  = \"www.domain.com.\"\n+     * StringUtils.removeEnd(\"www.domain.com\", \".com\")   = \"www.domain\"\n+     * StringUtils.removeEnd(\"www.domain.com\", \"domain\") = \"www.domain.com\"\n+     * StringUtils.removeEnd(\"abc\", \"\")    = \"abc\"\n+     * </pre>\n+     *\n+     * @param str  the source String to search, may be null\n+     * @param remove  the String to search for (case insensitive) and remove, may be null\n+     * @return the substring with the string removed if found,\n+     *  <code>null</code> if null String input\n+     * @since 2.4\n+     */\n+    public static String removeEndIgnoreCase(String str, String remove) {\n+        if (isEmpty(str) || isEmpty(remove)) {\n+            return str;\n+        }\n+        if (endsWithIgnoreCase(str, remove)) {\n             return str.substring(0, str.length() - remove.length());\n         }\n         return str;\n     }\n */\n \n+    // startsWith\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * <p>Check if a String starts with a specified prefix.</p>\n+     *\n+     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * references are considered to be equal. The comparison is case sensitive.</p>\n+     *\n+     * <pre>\n+     * StringUtils.startsWith(null, null)      = true\n+     * StringUtils.startsWith(null, \"abcdef\")  = false\n+     * StringUtils.startsWith(\"abc\", null)     = false\n+     * StringUtils.startsWith(\"abc\", \"abcdef\") = true\n+     * StringUtils.startsWith(\"abc\", \"ABCDEF\") = false\n+     * </pre>\n+     *\n+     * @see java.lang.String#startsWith(String)\n+     * @param str  the String to check, may be null\n+     * @param prefix the prefix to find, may be null\n+     * @return <code>true</code> if the String starts with the prefix, case sensitive, or\n+     *  both <code>null</code>\n+     * @since 2.4\n+     */\n+    public static boolean startsWith(String str, String prefix) {\n+        return startsWith(str, prefix, false);\n+    }\n+\n+    /**\n+     * <p>Case insensitive check if a String starts with a specified prefix.</p>\n+     *\n+     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * references are considered to be equal. The comparison is case insensitive.</p>\n+     *\n+     * <pre>\n+     * StringUtils.startsWithIgnoreCase(null, null)      = true\n+     * StringUtils.startsWithIgnoreCase(null, \"abcdef\")  = false\n+     * StringUtils.startsWithIgnoreCase(\"abc\", null)     = false\n+     * StringUtils.startsWithIgnoreCase(\"abc\", \"abcdef\") = true\n+     * StringUtils.startsWithIgnoreCase(\"abc\", \"ABCDEF\") = true\n+     * </pre>\n+     *\n+     * @see java.lang.String#startsWith(String)\n+     * @param str  the String to check, may be null\n+     * @param prefix the prefix to find, may be null\n+     * @return <code>true</code> if the String starts with the prefix, case insensitive, or\n+     *  both <code>null</code>\n+     * @since 2.4\n+     */\n+    public static boolean startsWithIgnoreCase(String str, String prefix) {\n+        return startsWith(str, prefix, true);\n+    }\n+\n+    /**\n+     * <p>Check if a String starts with a specified prefix (optionally case insensitive).</p>\n+     *\n+     * @see java.lang.String#startsWith(String)\n+     * @param str  the String to check, may be null\n+     * @param prefix the prefix to find, may be null\n+     * @param ignoreCase inidicates whether the compare should ignore case\n+     *  (case insensitive) or not.\n+     * @return <code>true</code> if the String starts with the prefix or\n+     *  both <code>null</code>\n+     */\n+    private static boolean startsWith(String str, String prefix, boolean ignoreCase) {\n+        if (str == null || prefix == null) {\n+            return (str == null && prefix == null);\n+        }\n+        if (prefix.length() > str.length()) {\n+            return false;\n+        }\n+        return str.regionMatches(ignoreCase, 0, prefix, 0, prefix.length());\n+    }\n+\n+    // endsWith\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * <p>Check if a String ends with a specified suffix.</p>\n+     *\n+     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * references are considered to be equal. The comparison is case sensitive.</p>\n+     *\n+     * <pre>\n+     * StringUtils.endsWith(null, null)      = true\n+     * StringUtils.endsWith(null, \"abcdef\")  = false\n+     * StringUtils.endsWith(\"def\", null)     = false\n+     * StringUtils.endsWith(\"def\", \"abcdef\") = true\n+     * StringUtils.endsWith(\"def\", \"ABCDEF\") = false\n+     * </pre>\n+     *\n+     * @see java.lang.String#endsWith(String)\n+     * @param str  the String to check, may be null\n+     * @param suffix the suffix to find, may be null\n+     * @return <code>true</code> if the String ends with the suffix, case sensitive, or\n+     *  both <code>null</code>\n+     * @since 2.4\n+     */\n+    public static boolean endsWith(String str, String suffix) {\n+        return endsWith(str, suffix, false);\n+    }\n+\n+    /**\n+     * <p>Case insensitive check if a String ends with a specified suffix.</p>\n+     *\n+     * <p><code>null</code>s are handled without exceptions. Two <code>null</code>\n+     * references are considered to be equal. The comparison is case insensitive.</p>\n+     *\n+     * <pre>\n+     * StringUtils.endsWithIgnoreCase(null, null)      = true\n+     * StringUtils.endsWithIgnoreCase(null, \"abcdef\")  = false\n+     * StringUtils.endsWithIgnoreCase(\"def\", null)     = false\n+     * StringUtils.endsWithIgnoreCase(\"def\", \"abcdef\") = true\n+     * StringUtils.endsWithIgnoreCase(\"def\", \"ABCDEF\") = false\n+     * </pre>\n+     *\n+     * @see java.lang.String#endsWith(String)\n+     * @param str  the String to check, may be null\n+     * @param suffix the suffix to find, may be null\n+     * @return <code>true</code> if the String ends with the suffix, case insensitive, or\n+     *  both <code>null</code>\n+     * @since 2.4\n+     */\n+    public static boolean endsWithIgnoreCase(String str, String suffix) {\n+        return endsWith(str, suffix, true);\n+    }\n+\n+    /**\n+     * <p>Check if a String ends with a specified suffix (optionally case insensitive).</p>\n+     *\n+     * @see java.lang.String#endsWith(String)\n+     * @param str  the String to check, may be null\n+     * @param suffix the suffix to find, may be null\n+     * @param ignoreCase inidicates whether the compare should ignore case\n+     *  (case insensitive) or not.\n+     * @return <code>true</code> if the String starts with the prefix or\n+     *  both <code>null</code>\n+     */\n+    private static boolean endsWith(String str, String suffix, boolean ignoreCase) {\n+        if (str == null || suffix == null) {\n+            return (str == null && suffix == null);\n+        }\n+        if (suffix.length() > str.length()) {\n+            return false;\n+        }\n+        int strOffset = str.length() - suffix.length();\n+        return str.regionMatches(ignoreCase, strOffset, suffix, 0, suffix.length());\n+    }\n+\n }\n--- a/src/test/org/apache/commons/lang/LangTestSuite.java\n+++ b/src/test/org/apache/commons/lang/LangTestSuite.java\n         suite.addTest(StringUtilsSubstringTest.suite());\n         suite.addTest(StringUtilsEqualsIndexOfTest.suite());\n         suite.addTest(StringUtilsIsTest.suite());\n+        suite.addTest(StringUtilsStartsEndsWithTest.suite());\n         suite.addTest(StringEscapeUtilsTest.suite());\n         suite.addTest(SystemUtilsTest.suite());\n         suite.addTest(UnhandledExceptionTest.suite());\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/StringUtilsStartsEndsWithTest.java\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.commons.lang;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests {@link org.apache.commons.lang.StringUtils} - StartsWith/EndsWith methods\n+ *\n+ * @version $Id$\n+ */\n+public class StringUtilsStartsEndsWithTest extends TestCase {\n+    private static final String foo    = \"foo\";\n+    private static final String bar    = \"bar\";\n+    private static final String foobar = \"foobar\";\n+    private static final String FOO    = \"FOO\";\n+    private static final String BAR    = \"BAR\";\n+    private static final String FOOBAR = \"FOOBAR\";\n+\n+    public StringUtilsStartsEndsWithTest(String name) {\n+        super(name);\n+    }\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StringUtilsStartsEndsWithTest.class);\n+        suite.setName(\"StringUtilsStartsEndsWith Tests\");\n+        return suite;\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * Test StringUtils.startsWith()\n+     */\n+    public void testStartsWith() {\n+        assertTrue(\"startsWith(null, null)\", StringUtils.startsWith(null, (String)null));\n+        assertFalse(\"startsWith(FOOBAR, null)\", StringUtils.startsWith(FOOBAR, (String)null));\n+        assertFalse(\"startsWith(null, FOO)\",    StringUtils.startsWith(null, FOO));\n+        assertTrue(\"startsWith(FOOBAR, \\\"\\\")\",  StringUtils.startsWith(FOOBAR, \"\"));\n+\n+        assertTrue(\"startsWith(foobar, foo)\",  StringUtils.startsWith(foobar, foo));\n+        assertTrue(\"startsWith(FOOBAR, FOO)\",  StringUtils.startsWith(FOOBAR, FOO));\n+        assertFalse(\"startsWith(foobar, FOO)\", StringUtils.startsWith(foobar, FOO));\n+        assertFalse(\"startsWith(FOOBAR, foo)\", StringUtils.startsWith(FOOBAR, foo));\n+\n+        assertFalse(\"startsWith(foo, foobar)\", StringUtils.startsWith(foo, foobar));\n+        assertFalse(\"startsWith(foo, foobar)\", StringUtils.startsWith(bar, foobar));\n+\n+        assertFalse(\"startsWith(foobar, bar)\", StringUtils.startsWith(foobar, bar));\n+        assertFalse(\"startsWith(FOOBAR, BAR)\", StringUtils.startsWith(FOOBAR, BAR));\n+        assertFalse(\"startsWith(foobar, BAR)\", StringUtils.startsWith(foobar, BAR));\n+        assertFalse(\"startsWith(FOOBAR, bar)\", StringUtils.startsWith(FOOBAR, bar));\n+    }\n+\n+    /**\n+     * Test StringUtils.testStartsWithIgnoreCase()\n+     */\n+    public void testStartsWithIgnoreCase() {\n+        assertTrue(\"startsWithIgnoreCase(null, null)\",    StringUtils.startsWithIgnoreCase(null, (String)null));\n+        assertFalse(\"startsWithIgnoreCase(FOOBAR, null)\", StringUtils.startsWithIgnoreCase(FOOBAR, (String)null));\n+        assertFalse(\"startsWithIgnoreCase(null, FOO)\",    StringUtils.startsWithIgnoreCase(null, FOO));\n+        assertTrue(\"startsWithIgnoreCase(FOOBAR, \\\"\\\")\",  StringUtils.startsWithIgnoreCase(FOOBAR, \"\"));\n+\n+        assertTrue(\"startsWithIgnoreCase(foobar, foo)\", StringUtils.startsWithIgnoreCase(foobar, foo));\n+        assertTrue(\"startsWithIgnoreCase(FOOBAR, FOO)\", StringUtils.startsWithIgnoreCase(FOOBAR, FOO));\n+        assertTrue(\"startsWithIgnoreCase(foobar, FOO)\", StringUtils.startsWithIgnoreCase(foobar, FOO));\n+        assertTrue(\"startsWithIgnoreCase(FOOBAR, foo)\", StringUtils.startsWithIgnoreCase(FOOBAR, foo));\n+\n+        assertFalse(\"startsWithIgnoreCase(foo, foobar)\", StringUtils.startsWithIgnoreCase(foo, foobar));\n+        assertFalse(\"startsWithIgnoreCase(foo, foobar)\", StringUtils.startsWithIgnoreCase(bar, foobar));\n+\n+        assertFalse(\"startsWithIgnoreCase(foobar, bar)\", StringUtils.startsWithIgnoreCase(foobar, bar));\n+        assertFalse(\"startsWithIgnoreCase(FOOBAR, BAR)\", StringUtils.startsWithIgnoreCase(FOOBAR, BAR));\n+        assertFalse(\"startsWithIgnoreCase(foobar, BAR)\", StringUtils.startsWithIgnoreCase(foobar, BAR));\n+        assertFalse(\"startsWithIgnoreCase(FOOBAR, bar)\", StringUtils.startsWithIgnoreCase(FOOBAR, bar));\n+    }\n+\n+\n+    /**\n+     * Test StringUtils.endsWith()\n+     */\n+    public void testEndsWith() {\n+        assertTrue(\"endsWith(null, null)\",    StringUtils.endsWith(null, (String)null));\n+        assertFalse(\"endsWith(FOOBAR, null)\", StringUtils.endsWith(FOOBAR, (String)null));\n+        assertFalse(\"endsWith(null, FOO)\",    StringUtils.endsWith(null, FOO));\n+        assertTrue(\"endsWith(FOOBAR, \\\"\\\")\",  StringUtils.endsWith(FOOBAR, \"\"));\n+\n+        assertFalse(\"endsWith(foobar, foo)\", StringUtils.endsWith(foobar, foo));\n+        assertFalse(\"endsWith(FOOBAR, FOO)\", StringUtils.endsWith(FOOBAR, FOO));\n+        assertFalse(\"endsWith(foobar, FOO)\", StringUtils.endsWith(foobar, FOO));\n+        assertFalse(\"endsWith(FOOBAR, foo)\", StringUtils.endsWith(FOOBAR, foo));\n+\n+        assertFalse(\"endsWith(foo, foobar)\", StringUtils.endsWith(foo, foobar));\n+        assertFalse(\"endsWith(foo, foobar)\", StringUtils.endsWith(bar, foobar));\n+\n+        assertTrue(\"endsWith(foobar, bar)\",  StringUtils.endsWith(foobar, bar));\n+        assertTrue(\"endsWith(FOOBAR, BAR)\",  StringUtils.endsWith(FOOBAR, BAR));\n+        assertFalse(\"endsWith(foobar, BAR)\", StringUtils.endsWith(foobar, BAR));\n+        assertFalse(\"endsWith(FOOBAR, bar)\", StringUtils.endsWith(FOOBAR, bar));\n+    }\n+\n+    /**\n+     * Test StringUtils.endsWithIgnoreCase()\n+     */\n+    public void testEndsWithIgnoreCase() {\n+        assertTrue(\"endsWithIgnoreCase(null, null)\",    StringUtils.endsWithIgnoreCase(null, (String)null));\n+        assertFalse(\"endsWithIgnoreCase(FOOBAR, null)\", StringUtils.endsWithIgnoreCase(FOOBAR, (String)null));\n+        assertFalse(\"endsWithIgnoreCase(null, FOO)\",    StringUtils.endsWithIgnoreCase(null, FOO));\n+        assertTrue(\"endsWithIgnoreCase(FOOBAR, \\\"\\\")\",  StringUtils.endsWithIgnoreCase(FOOBAR, \"\"));\n+\n+        assertFalse(\"endsWithIgnoreCase(foobar, foo)\", StringUtils.endsWithIgnoreCase(foobar, foo));\n+        assertFalse(\"endsWithIgnoreCase(FOOBAR, FOO)\", StringUtils.endsWithIgnoreCase(FOOBAR, FOO));\n+        assertFalse(\"endsWithIgnoreCase(foobar, FOO)\", StringUtils.endsWithIgnoreCase(foobar, FOO));\n+        assertFalse(\"endsWithIgnoreCase(FOOBAR, foo)\", StringUtils.endsWithIgnoreCase(FOOBAR, foo));\n+\n+        assertFalse(\"endsWithIgnoreCase(foo, foobar)\", StringUtils.endsWithIgnoreCase(foo, foobar));\n+        assertFalse(\"endsWithIgnoreCase(foo, foobar)\", StringUtils.endsWithIgnoreCase(bar, foobar));\n+\n+        assertTrue(\"endsWithIgnoreCase(foobar, bar)\", StringUtils.endsWithIgnoreCase(foobar, bar));\n+        assertTrue(\"endsWithIgnoreCase(FOOBAR, BAR)\", StringUtils.endsWithIgnoreCase(FOOBAR, BAR));\n+        assertTrue(\"endsWithIgnoreCase(foobar, BAR)\", StringUtils.endsWithIgnoreCase(foobar, BAR));\n+        assertTrue(\"endsWithIgnoreCase(FOOBAR, bar)\", StringUtils.endsWithIgnoreCase(FOOBAR, bar));\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n         assertEquals(StringUtils.removeStart(\"domain.com\", \"\"), \"domain.com\");        \n         assertEquals(StringUtils.removeStart(\"domain.com\", null), \"domain.com\");        \n     }\n+    \n+    public void testRemoveStartIgnoreCase() {\n+        // StringUtils.removeStart(\"\", *)        = \"\"\n+        assertNull(\"removeStartIgnoreCase(null, null)\", StringUtils.removeStartIgnoreCase(null, null));\n+        assertNull(\"removeStartIgnoreCase(null, \\\"\\\")\", StringUtils.removeStartIgnoreCase(null, \"\"));\n+        assertNull(\"removeStartIgnoreCase(null, \\\"a\\\")\", StringUtils.removeStartIgnoreCase(null, \"a\"));\n+        \n+        // StringUtils.removeStart(*, null)      = *\n+        assertEquals(\"removeStartIgnoreCase(\\\"\\\", null)\", StringUtils.removeStartIgnoreCase(\"\", null), \"\");\n+        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"\"), \"\");\n+        assertEquals(\"removeStartIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeStartIgnoreCase(\"\", \"a\"), \"\");\n+        \n+        // All others:\n+        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"www.\"), \"domain.com\");\n+        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"www.\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"www.\"), \"domain.com\");\n+        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeStartIgnoreCase(\"domain.com\", \"\"), \"domain.com\");        \n+        assertEquals(\"removeStartIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeStartIgnoreCase(\"domain.com\", null), \"domain.com\");        \n+        \n+        // Case insensitive:\n+        assertEquals(\"removeStartIgnoreCase(\\\"www.domain.com\\\", \\\"WWW.\\\")\", StringUtils.removeStartIgnoreCase(\"www.domain.com\", \"WWW.\"), \"domain.com\");\n+    }\n \n     public void testRemoveEnd() {\n         // StringUtils.removeEnd(\"\", *)        = \"\"\n         assertEquals(StringUtils.removeEnd(\"domain.com\", null), \"domain.com\");   \n     }\n \n+    public void testRemoveEndIgnoreCase() {\n+        // StringUtils.removeEndIgnoreCase(\"\", *)        = \"\"\n+        assertNull(\"removeEndIgnoreCase(null, null)\", StringUtils.removeEndIgnoreCase(null, null));\n+        assertNull(\"removeEndIgnoreCase(null, \\\"\\\")\", StringUtils.removeEndIgnoreCase(null, \"\"));\n+        assertNull(\"removeEndIgnoreCase(null, \\\"a\\\")\", StringUtils.removeEndIgnoreCase(null, \"a\"));\n+        \n+        // StringUtils.removeEnd(*, null)      = *\n+        assertEquals(\"removeEndIgnoreCase(\\\"\\\", null)\", StringUtils.removeEndIgnoreCase(\"\", null), \"\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"\"), \"\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"\\\", \\\"a\\\")\", StringUtils.removeEndIgnoreCase(\"\", \"a\"), \"\");\n+        \n+        // All others:\n+        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com.\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com.\", \".com\"), \"www.domain.com.\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".com\"), \"www.domain\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"www.domain\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain\", \".com\"), \"www.domain\");\n+        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", \\\"\\\")\", StringUtils.removeEndIgnoreCase(\"domain.com\", \"\"), \"domain.com\");   \n+        assertEquals(\"removeEndIgnoreCase(\\\"domain.com\\\", null)\", StringUtils.removeEndIgnoreCase(\"domain.com\", null), \"domain.com\");   \n+\n+        // Case insensitive:\n+        assertEquals(\"removeEndIgnoreCase(\\\"www.domain.com\\\", \\\".com\\\")\", StringUtils.removeEndIgnoreCase(\"www.domain.com\", \".COM\"), \"www.domain\");\n+    }\n+\n     public void testRemove_String() {\n         // StringUtils.remove(null, *)        = null\n         assertEquals(null, StringUtils.remove(null, null));", "timestamp": 1183173953, "metainfo": ""}