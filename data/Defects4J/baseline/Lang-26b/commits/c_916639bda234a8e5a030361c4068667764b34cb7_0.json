{"sha": "916639bda234a8e5a030361c4068667764b34cb7", "log": "(LANG-421) StringEscapeUtils.escapeJava(String) escapes '/' characters  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java\n      * @return String with escaped values, <code>null</code> if null string input\n      */\n     public static String escapeJava(String str) {\n-        return escapeJavaStyleString(str, false);\n+        return escapeJavaStyleString(str, false, false);\n     }\n \n     /**\n      * @throws IOException if error occurs on underlying Writer\n      */\n     public static void escapeJava(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, false);\n+        escapeJavaStyleString(out, str, false, false);\n     }\n \n     /**\n      * @return String with escaped values, <code>null</code> if null string input\n      */\n     public static String escapeJavaScript(String str) {\n-        return escapeJavaStyleString(str, true);\n+        return escapeJavaStyleString(str, true, true);\n     }\n \n     /**\n      * @throws IOException if error occurs on underlying Writer\n      **/\n     public static void escapeJavaScript(Writer out, String str) throws IOException {\n-        escapeJavaStyleString(out, str, true);\n+        escapeJavaStyleString(out, str, true, true);\n     }\n \n     /**\n      * \n      * @param str String to escape values in, may be null\n      * @param escapeSingleQuotes escapes single quotes if <code>true</code>\n+     * @param escapeForwardSlash TODO\n      * @return the escaped string\n      */\n-    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes) {\n+    private static String escapeJavaStyleString(String str, boolean escapeSingleQuotes, boolean escapeForwardSlash) {\n         if (str == null) {\n             return null;\n         }\n         try {\n             StringWriter writer = new StringWriter(str.length() * 2);\n-            escapeJavaStyleString(writer, str, escapeSingleQuotes);\n+            escapeJavaStyleString(writer, str, escapeSingleQuotes, escapeForwardSlash);\n             return writer.toString();\n         } catch (IOException ioe) {\n             // this should never ever happen while writing to a StringWriter\n      * @param out write to receieve the escaped string\n      * @param str String to escape values in, may be null\n      * @param escapeSingleQuote escapes single quotes if <code>true</code>\n+     * @param escapeForwardSlash TODO\n      * @throws IOException if an IOException occurs\n      */\n-    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote) throws IOException {\n+    private static void escapeJavaStyleString(Writer out, String str, boolean escapeSingleQuote,\n+            boolean escapeForwardSlash) throws IOException {\n         if (out == null) {\n             throw new IllegalArgumentException(\"The Writer must not be null\");\n         }\n                 out.write(\"\\\\u00\" + hex(ch));\n             } else if (ch < 32) {\n                 switch (ch) {\n-                    case '\\b':\n+                    case '\\b' :\n                         out.write('\\\\');\n                         out.write('b');\n                         break;\n-                    case '\\n':\n+                    case '\\n' :\n                         out.write('\\\\');\n                         out.write('n');\n                         break;\n-                    case '\\t':\n+                    case '\\t' :\n                         out.write('\\\\');\n                         out.write('t');\n                         break;\n-                    case '\\f':\n+                    case '\\f' :\n                         out.write('\\\\');\n                         out.write('f');\n                         break;\n-                    case '\\r':\n+                    case '\\r' :\n                         out.write('\\\\');\n                         out.write('r');\n                         break;\n                 }\n             } else {\n                 switch (ch) {\n-                    case '\\'':\n+                    case '\\'' :\n                         if (escapeSingleQuote) {\n-                          out.write('\\\\');\n+                            out.write('\\\\');\n                         }\n                         out.write('\\'');\n                         break;\n-                    case '\"':\n+                    case '\"' :\n                         out.write('\\\\');\n                         out.write('\"');\n                         break;\n-                    case '\\\\':\n+                    case '\\\\' :\n                         out.write('\\\\');\n                         out.write('\\\\');\n                         break;\n-                    case '/':\n-                        out.write('\\\\');\n+                    case '/' :\n+                        if (escapeForwardSlash) {\n+                            out.write('\\\\');\n+                        }\n                         out.write('/');\n                         break;\n                     default :\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n                 \"\\uABCD\\u1234\\u012C\");\n     }\n \n+    /**\n+     * https://issues.apache.org/jira/browse/LANG-421\n+     */\n+    public void testEscapeJavaWithSlash() {\n+        final String input = \"String with a slash (/) in it\";\n+\n+        final String expected = input;\n+        final String actual = StringEscapeUtils.escapeJava(input);\n+\n+        /**\n+         * In 2.4 StringEscapeUtils.escapeJava(String) escapes '/' characters, which are not a valid character to escape\n+         * in a Java string.\n+         */\n+        assertEquals(expected, actual);\n+    }\n+    \n     private void assertEscapeJava(String escaped, String original) throws IOException {\n         assertEscapeJava(null, escaped, original);\n     }", "timestamp": 1207152501, "metainfo": ""}