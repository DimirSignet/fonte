{"sha": "c2ae0de2c942dd097f087054ed97d7b48155bb63", "log": "Changing the standard escapeXml method to not escape high characters. It's easier to add that back on that remove it. LANG-516 and LANG-517  ", "commit": "\n--- a/src/java/org/apache/commons/lang/text/translate/EscapeUtils.java\n+++ b/src/java/org/apache/commons/lang/text/translate/EscapeUtils.java\n     public static final CharSequenceTranslator ESCAPE_XML = \n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n-            new LookupTranslator(EntityArrays.APOS_ESCAPE()),\n-            NumericEntityEscaper.above(0x7f)\n+            new LookupTranslator(EntityArrays.APOS_ESCAPE())\n         );\n \n     public static final String escapeXml(String input) {\n     public static final CharSequenceTranslator ESCAPE_HTML3 = \n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n-            new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE()),\n-            NumericEntityEscaper.above(0x7f)\n+            new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE())\n         );\n \n     public static final String escapeHtml3(String input) {\n         new AggregateTranslator(\n             new LookupTranslator(EntityArrays.BASIC_ESCAPE()),\n             new LookupTranslator(EntityArrays.ISO8859_1_ESCAPE()),\n-            new LookupTranslator(EntityArrays.HTML40_EXTENDED_ESCAPE()),\n-            NumericEntityEscaper.above(0x7f)\n+            new LookupTranslator(EntityArrays.HTML40_EXTENDED_ESCAPE())\n         );\n \n     public static final String escapeHtml4(String input) {\n--- a/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringEscapeUtilsTest.java\n         {\"final character only\", \"greater than &gt;\", \"greater than >\"},\n         {\"first character only\", \"&lt; less than\", \"< less than\"},\n         {\"apostrophe\", \"Huntington's chorea\", \"Huntington's chorea\"},\n-        {\"languages\", \"English,Fran&ccedil;ais,&#26085;&#26412;&#35486; (nihongo)\", \"English,Fran\\u00E7ais,\\u65E5\\u672C\\u8A9E (nihongo)\"},\n-        {\"8-bit ascii doesn't number-escape\", \"~\\u007F\", \"\\u007E\\u007F\"},\n-        {\"8-bit ascii does number-escape\", \"&#128;&#159;\", \"\\u0080\\u009F\"},\n+        {\"languages\", \"English,Fran&ccedil;ais,\\u65E5\\u672C\\u8A9E (nihongo)\", \"English,Fran\\u00E7ais,\\u65E5\\u672C\\u8A9E (nihongo)\"},\n+        {\"8-bit ascii shouldn't number-escape\", \"\\u0080\\u009F\", \"\\u0080\\u009F\"},\n     };\n \n     public void testEscapeHtml() {\n         assertEquals(\"&lt;abc&gt;\", StringEscapeUtils.escapeXml(\"<abc>\"));\n         assertEquals(\"<abc>\", StringEscapeUtils.unescapeXml(\"&lt;abc&gt;\"));\n \n-        assertEquals(\"XML should use numbers, not names for HTML entities\",\n-                \"&#161;\", StringEscapeUtils.escapeXml(\"\\u00A1\"));\n-        assertEquals(\"XML should use numbers, not names for HTML entities\",\n+        assertEquals(\"XML should not escape >0x7f values\",\n+                \"\\u00A1\", StringEscapeUtils.escapeXml(\"\\u00A1\"));\n+        assertEquals(\"XML should be able to unescape >0x7f values\",\n                 \"\\u00A0\", StringEscapeUtils.unescapeXml(\"&#160;\"));\n \n         assertEquals(\"ain't\", StringEscapeUtils.unescapeXml(\"ain&apos;t\"));\n         // codepoint: U+1D362\n         byte[] data = new byte[] { (byte)0xF0, (byte)0x9D, (byte)0x8D, (byte)0xA2 };\n \n-        String escaped = StringEscapeUtils.escapeHtml( new String(data, \"UTF8\") );\n+        String original = new String(data, \"UTF8\");\n+\n+        String escaped = StringEscapeUtils.escapeHtml( original );\n+        assertEquals( \"High unicode should not have been escaped\", original, escaped);\n+\n         String unescaped = StringEscapeUtils.unescapeHtml( escaped );\n-\n-        assertEquals( \"High unicode was not escaped correctly\", \"&#119650;\", escaped);\n+        assertEquals( \"High unicode should have been unchanged\", original, unescaped);\n+\n+// TODO: I think this should hold, needs further investigation\n+//        String unescapedFromEntity = StringEscapeUtils.unescapeHtml( \"&#119650;\" );\n+//        assertEquals( \"High unicode should have been unescaped\", original, unescapedFromEntity);\n     }\n \n     // https://issues.apache.org/jira/browse/LANG-339\n     public void testEscapeHiragana() throws java.io.UnsupportedEncodingException {\n         // Some random Japanese unicode characters\n-        String escaped = StringEscapeUtils.escapeHtml( \"\\u304B\\u304C\\u3068\" );\n-        assertEquals( \"Hiragana character unicode behaviour has changed from their being escaped\", \n-        \"&#12363;&#12364;&#12392;\", escaped);\n+        String original = \"\\u304B\\u304C\\u3068\";\n+        String escaped = StringEscapeUtils.escapeHtml(original);\n+        assertEquals( \"Hiragana character unicode behaviour should not be being escaped by escapeHtml\",\n+        original, escaped);\n \n         String unescaped = StringEscapeUtils.unescapeHtml( escaped );\n \n-        assertEquals( \"Hiragana character unicode behaviour has changed - expected no unescaping\", escaped, escaped);\n+        assertEquals( \"Hiragana character unicode behaviour has changed - expected no unescaping\", escaped, unescaped);\n     }\n }", "timestamp": 1258195527, "metainfo": ""}