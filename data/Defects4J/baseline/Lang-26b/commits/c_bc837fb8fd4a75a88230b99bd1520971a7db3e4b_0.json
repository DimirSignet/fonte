{"sha": "bc837fb8fd4a75a88230b99bd1520971a7db3e4b", "log": "Deprecate deleteSpaces() Move delete methods next to replace   ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n  * @author Arun Mammen Thomas\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @since 1.0\n- * @version $Id: StringUtils.java,v 1.68 2003/07/20 00:04:12 scolebourne Exp $\n+ * @version $Id: StringUtils.java,v 1.69 2003/07/20 00:17:29 scolebourne Exp $\n  */\n public class StringUtils {\n     // Performance testing notes (JDK 1.4, Jul03, scolebourne)\n         return (str == null ? \"\" : str.trim());\n     }\n     \n-    // Delete\n-    //-----------------------------------------------------------------------\n-\n-    /**\n-     * <p>Deletes all 'space' characters from a String as defined by\n-     * {@link Character#isSpace(char)}.</p>\n-     * \n-     * <p>This is the only StringUtils method that uses the \n-     * <code>isSpace</code> definition. You are advised to use\n-     * {@link #deleteWhitespace(String)} instead as whitespace is much\n-     * better localized.</p>\n-     *\n-     * <pre>\n-     * StringUtils.deleteSpaces(null)           = null\n-     * StringUtils.deleteSpaces(\"abc\")          = \"abc\"\n-     * StringUtils.deleteSpaces(\" \\t  abc \\n \") = \"abc\"\n-     * StringUtils.deleteSpaces(\"ab  c\")        = \"abc\"\n-     * StringUtils.deleteSpaces(\"a\\nb\\tc     \") = \"abc\"\n-     * </pre>\n-     *  \n-     * <p>Spaces are defined as <code>{' ', '\\t', '\\r', '\\n', '\\b'}</code>\n-     * in line with the deprecated <code>isSpace</code> method.</p>\n-     *\n-     * @param str  the String to delete spaces from, may be null\n-     * @return the String without 'spaces', <code>null</code> if null String input\n-     */\n-    public static String deleteSpaces(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        return CharSetUtils.delete(str, \" \\t\\r\\n\\b\");\n-    }\n-\n-    /**\n-     * <p>Deletes all whitespaces from a String as defined by\n-     * {@link Character#isWhitespace(char)}.</p>\n-     *\n-     * <pre>\n-     * StringUtils.deleteWhitespace(null)        = null\n-     * StringUtils.deleteWhitespace(\"abc\")       = \"abc\"\n-     * StringUtils.deleteWhitespace(\"   abc  \")  = \"abc\"\n-     * </pre>\n-     *  \n-     * @param str  the String to delete whitespace from, may be null\n-     * @return the String without whitespaces, <code>null</code> if null String input\n-     */\n-    public static String deleteWhitespace(String str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        int sz = str.length();\n-        StringBuffer buffer = new StringBuffer(sz);\n-        for (int i = 0; i < sz; i++) {\n-            if (!Character.isWhitespace(str.charAt(i))) {\n-                buffer.append(str.charAt(i));\n-            }\n-        }\n-        return buffer.toString();\n-    }\n-\n     // Empty checks\n     //-----------------------------------------------------------------------\n \n         return buf.toString();\n     }\n \n+    // Delete\n+    //-----------------------------------------------------------------------\n+\n+    /**\n+     * <p>Deletes all 'space' characters from a String as defined by\n+     * {@link Character#isSpace(char)}.</p>\n+     * \n+     * <p>This is the only StringUtils method that uses the \n+     * <code>isSpace</code> definition. You are advised to use\n+     * {@link #deleteWhitespace(String)} instead as whitespace is much\n+     * better localized.</p>\n+     *\n+     * <pre>\n+     * StringUtils.deleteSpaces(null)           = null\n+     * StringUtils.deleteSpaces(\"abc\")          = \"abc\"\n+     * StringUtils.deleteSpaces(\" \\t  abc \\n \") = \"abc\"\n+     * StringUtils.deleteSpaces(\"ab  c\")        = \"abc\"\n+     * StringUtils.deleteSpaces(\"a\\nb\\tc     \") = \"abc\"\n+     * </pre>\n+     *  \n+     * <p>Spaces are defined as <code>{' ', '\\t', '\\r', '\\n', '\\b'}</code>\n+     * in line with the deprecated <code>isSpace</code> method.</p>\n+     *\n+     * @param str  the String to delete spaces from, may be null\n+     * @return the String without 'spaces', <code>null</code> if null String input\n+     * @deprecated Use the better localized {@link #deleteWhitespace(String)}.\n+     *             Method will be removed in Commons Lang 3.0.\n+     */\n+    public static String deleteSpaces(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        return CharSetUtils.delete(str, \" \\t\\r\\n\\b\");\n+    }\n+\n+    /**\n+     * <p>Deletes all whitespaces from a String as defined by\n+     * {@link Character#isWhitespace(char)}.</p>\n+     *\n+     * <pre>\n+     * StringUtils.deleteWhitespace(null)        = null\n+     * StringUtils.deleteWhitespace(\"abc\")       = \"abc\"\n+     * StringUtils.deleteWhitespace(\"   abc  \")  = \"abc\"\n+     * </pre>\n+     *  \n+     * @param str  the String to delete whitespace from, may be null\n+     * @return the String without whitespaces, <code>null</code> if null String input\n+     */\n+    public static String deleteWhitespace(String str) {\n+        if (str == null) {\n+            return null;\n+        }\n+        int sz = str.length();\n+        StringBuffer buffer = new StringBuffer(sz);\n+        for (int i = 0; i < sz; i++) {\n+            if (!Character.isWhitespace(str.charAt(i))) {\n+                buffer.append(str.charAt(i));\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n     // Replacing\n     //-----------------------------------------------------------------------\n     \n     /**\n-     * <p>Replace a String with another String inside a larger String, once.</p>\n+     * <p>Replaces a String with another String inside a larger String, once.</p>\n      * \n      * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n      * \n     }\n \n     /**\n-     * <p>Replace all occurances of a String within another String.</p>\n+     * <p>Replaces all occurances of a String within another String.</p>\n      *\n      * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n      * \n     }\n \n     /**\n-     * <p>Replace a String with another String inside a larger String,\n+     * <p>Replaces a String with another String inside a larger String,\n      * for the first <code>max</code> values of the search String.</p>\n      *\n      * <p>A <code>null</code> reference passed to this method is a no-op.</p>\n--- a/src/test/org/apache/commons/lang/StringUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTest.java\n  * @author <a href=\"mailto:fredrik@westermarck.com>Fredrik Westermarck</a>\n  * @author Holger Krauth\n  * @author <a href=\"hps@intermeta.de\">Henning P. Schmiedehausen</a>\n- * @version $Id: StringUtilsTest.java,v 1.30 2003/07/19 23:28:23 scolebourne Exp $\n+ * @version $Id: StringUtilsTest.java,v 1.31 2003/07/20 00:17:29 scolebourne Exp $\n  */\n public class StringUtilsTest extends TestCase {\n     \n         }\n     }\n \n-    public void testReplaceFunctions() {\n-        assertEquals(\"replace(String, String, String, int) failed\",\n-                     FOO, StringUtils.replace(\"oo\" + FOO, \"o\", \"\", 2));\n-        assertEquals(\"replace(String, String, String) failed\",\n-                     \"\", StringUtils.replace(FOO + FOO + FOO, FOO, \"\"));\n-        assertEquals(\"replaceOnce(String, String, String) failed\",\n-                     FOO, StringUtils.replaceOnce(FOO + FOO, FOO, \"\"));\n-        assertEquals(\"carriage-return replace(String,String,String) failed\",\n-                     \"test123\", StringUtils.replace(\"test\\r1\\r2\\r3\", \"\\r\", \"\"));\n-\n-        assertEquals(\"replace(String, String, String) failed\",\n-            \"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n-        assertEquals(\"replace(String, String, String) failed\",\n-            \"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n-        assertEquals(\"replace(String, String, String) failed\",\n-            \"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n-        assertEquals(\"replace(String, String, String) failed\",\n-            \"FOO\", StringUtils.replace(\"FOO\", null, null));\n-        assertEquals(\"replace(String, String, String) failed\",\n-            null, StringUtils.replace(null, \"\", \"any\"));\n+    public void testDeleteSpace_String() {\n+        assertEquals(null, StringUtils.deleteSpaces(null));\n+        assertEquals(\"\", StringUtils.deleteSpaces(\"\"));\n+        assertEquals(\"\", StringUtils.deleteSpaces(\"    \\t\\t\\n\\n   \"));\n+        assertEquals(\"test\", StringUtils.deleteSpaces(\"t  \\t\\ne\\rs\\n\\n   \\tt\"));\n+    }\n+    \n+    public void testDeleteWhitespace_String() {\n+        assertEquals(null, StringUtils.deleteWhitespace(null));\n+        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n+        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n+        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n+        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n+        // Note: u-2007 and u-000A both cause problems in the source code\n+        // it should ignore 2007 but delete 000A\n+        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n+        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n+        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n+    }\n+\n+    public void testReplace_StringStringString() {\n+        assertEquals(null, StringUtils.replace(null, null, null));\n+        assertEquals(null, StringUtils.replace(null, null, \"any\"));\n+        assertEquals(null, StringUtils.replace(null, \"any\", null));\n+        assertEquals(null, StringUtils.replace(null, \"any\", \"any\"));\n+\n+        assertEquals(\"\", StringUtils.replace(\"\", null, null));\n+        assertEquals(\"\", StringUtils.replace(\"\", null, \"any\"));\n+        assertEquals(\"\", StringUtils.replace(\"\", \"any\", null));\n+        assertEquals(\"\", StringUtils.replace(\"\", \"any\", \"any\"));\n+\n+        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"\", \"any\"));\n+        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, \"any\"));\n+        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", \"F\", null));\n+        assertEquals(\"FOO\", StringUtils.replace(\"FOO\", null, null));\n+\n+        assertEquals(\"\", StringUtils.replace(\"foofoofoo\", \"foo\", \"\"));\n+        assertEquals(\"barbarbar\", StringUtils.replace(\"foofoofoo\", \"foo\", \"bar\"));\n+        assertEquals(\"farfarfar\", StringUtils.replace(\"foofoofoo\", \"oo\", \"ar\"));\n+    }\n+    \n+    public void testReplace_StringStringStringInt() {\n+        assertEquals(null, StringUtils.replace(null, null, null, 2));\n+        assertEquals(null, StringUtils.replace(null, null, \"any\", 2));\n+        assertEquals(null, StringUtils.replace(null, \"any\", null, 2));\n+        assertEquals(null, StringUtils.replace(null, \"any\", \"any\", 2));\n+\n+        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", -1));\n+        assertEquals(\"oofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 0));\n+        assertEquals(\"ofoo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 1));\n+        assertEquals(\"foo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 2));\n+        assertEquals(\"fo\", StringUtils.replace(\"oofoo\", \"o\", \"\", 3));\n+        assertEquals(\"f\", StringUtils.replace(\"oofoo\", \"o\", \"\", 4));\n+    }\n+    \n+    public void testReplaceOnce_StringStringString() {\n+        assertEquals(null, StringUtils.replaceOnce(null, null, null));\n+        assertEquals(null, StringUtils.replaceOnce(null, null, \"any\"));\n+        assertEquals(null, StringUtils.replaceOnce(null, \"any\", null));\n+        assertEquals(null, StringUtils.replaceOnce(null, \"any\", \"any\"));\n+\n+        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, null));\n+        assertEquals(\"\", StringUtils.replaceOnce(\"\", null, \"any\"));\n+        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", null));\n+        assertEquals(\"\", StringUtils.replaceOnce(\"\", \"any\", \"any\"));\n+\n+        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"\", \"any\"));\n+        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, \"any\"));\n+        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", \"F\", null));\n+        assertEquals(\"FOO\", StringUtils.replaceOnce(\"FOO\", null, null));\n+\n+        assertEquals(\"foofoo\", StringUtils.replaceOnce(\"foofoofoo\", \"foo\", \"\"));\n     }\n \n     public void testOverlayString() {\n--- a/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n+++ b/src/test/org/apache/commons/lang/StringUtilsTrimEmptyTest.java\n  *\n  * @author <a href=\"mailto:scolebourne@joda.org\">Stephen Colebourne</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Id: StringUtilsTrimEmptyTest.java,v 1.13 2003/07/20 00:04:12 scolebourne Exp $\n+ * @version $Id: StringUtilsTrimEmptyTest.java,v 1.14 2003/07/20 00:17:29 scolebourne Exp $\n  */\n public class StringUtilsTrimEmptyTest extends TestCase {\n     private static final String FOO = \"foo\";\n         assertEquals(false, StringUtils.isNotBlank(StringUtilsTest.WHITESPACE));\n         assertEquals(true, StringUtils.isNotBlank(\"foo\"));\n         assertEquals(true, StringUtils.isNotBlank(\"  foo  \"));\n-    }\n-\n-    public void testDeleteSpace() {\n-        assertEquals(null, StringUtils.deleteSpaces(null));\n-        assertEquals(\"\", StringUtils.deleteSpaces(\"\"));\n-        assertEquals(\"\", StringUtils.deleteSpaces(\"    \\t\\t\\n\\n   \"));\n-        assertEquals(\"test\", StringUtils.deleteSpaces(\"t  \\t\\ne\\rs\\n\\n   \\tt\"));\n-    }\n-    \n-    public void testDeleteWhitespace() {\n-        assertEquals(null, StringUtils.deleteWhitespace(null));\n-        assertEquals(\"\", StringUtils.deleteWhitespace(\"\"));\n-        assertEquals(\"\", StringUtils.deleteWhitespace(\"  \\u000C  \\t\\t\\u001F\\n\\n \\u000B  \"));\n-        assertEquals(\"\", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE));\n-        assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE));\n-        // Note: u-2007 and u-000A both cause problems in the source code\n-        // it should ignore 2007 but delete 000A\n-        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"  \\u00A0  \\t\\t\\n\\n \\u202F  \"));\n-        assertEquals(\"\\u00A0\\u202F\", StringUtils.deleteWhitespace(\"\\u00A0\\u202F\"));\n-        assertEquals(\"test\", StringUtils.deleteWhitespace(\"\\u000Bt  \\t\\n\\u0009e\\rs\\n\\n   \\tt\"));\n     }\n \n     public void testStrip_String() {", "timestamp": 1058660249, "metainfo": ""}