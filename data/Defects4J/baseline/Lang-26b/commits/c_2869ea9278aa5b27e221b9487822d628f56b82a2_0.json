{"sha": "2869ea9278aa5b27e221b9487822d628f56b82a2", "log": "Fix defaultIsEmpty typing.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/CharSequenceUtils.java\n \t\treturn cs == null ? 0 : cs.length();\n \t}\n \n-    /**\n-     * <p>Reverses a CharSequence as per {@link StringBuilder#reverse()}.</p>\n-     *\n-     * <p>A <code>null</code> CharSequence returns <code>null</code>.</p>\n-     *\n-     * <pre>\n-     * CharSequenceUtils.reverse(null) = null\n-     * CharSequenceUtils.reverse(\"\").toString() = \"\"\n-     * CharSequenceUtils.reverse(\"bat\").toString() = \"tab\"\n-     * </pre>\n-     *\n-     * @param str  the String to reverse, may be null\n-     * @return the reversed String, <code>null</code> if null String input\n-     */\n-    public static CharSequence reverse(CharSequence str) {\n-        if (str == null) {\n-            return null;\n-        }\n-        return new StringBuilder(str).reverse();\n-    }\n-    \n+\t/**\n+\t * <p>\n+\t * Reverses a CharSequence as per {@link StringBuilder#reverse()}.\n+\t * </p>\n+\t * \n+\t * <p>\n+\t * A <code>null</code> CharSequence returns <code>null</code>.\n+\t * </p>\n+\t * \n+\t * <pre>\n+\t * CharSequenceUtils.reverse(null) = null\n+\t * CharSequenceUtils.reverse(\"\").toString() = \"\"\n+\t * CharSequenceUtils.reverse(\"bat\").toString() = \"tab\"\n+\t * </pre>\n+\t * \n+\t * @param str\n+\t *            the String to reverse, may be null\n+\t * @return the reversed String, <code>null</code> if null String input\n+\t */\n+\tpublic static CharSequence reverse(CharSequence str) {\n+\t\tif (str == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn new StringBuilder(str).reverse();\n+\t}\n+\n \t/**\n \t * Returns a new <code>CharSequence</code> that is a subsequence of this\n \t * sequence starting with the <code>char</code> value at the specified\n \tpublic static CharSequence subSequence(CharSequence cs, int start) {\n \t\treturn cs == null ? null : cs.subSequence(start, cs.length());\n \t}\n+\n+\tpublic static int indexOf(CharSequence cs, int ch, int startPos) {\n+\t\tint max = cs.length();\n+\n+\t\tif (startPos < 0) {\n+\t\t\tstartPos = 0;\n+\t\t} else if (startPos >= max) {\n+\t\t\treturn StringUtils.INDEX_NOT_FOUND;\n+\t\t}\n+\n+\t\tif (ch < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n+\t\t\tfor (int i = startPos; i < max; i++) {\n+\t\t\t\tif (cs.charAt(i) == ch) {\n+\t\t\t\t\treturn i;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn StringUtils.INDEX_NOT_FOUND;\n+\t\t}\n+\n+\t\t// supp chars\n+\t\tif (ch <= Character.MAX_CODE_POINT) {\n+\t\t\tchar[] surrogates = Character.toChars(ch);\n+\t\t\tfor (int i = startPos; i < max; i++) {\n+\t\t\t\tif (cs.charAt(i) == surrogates[0]) {\n+\t\t\t\t\tif (i + 1 == max) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (cs.charAt(i + 1) == surrogates[1]) {\n+\t\t\t\t\t\treturn i;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn StringUtils.INDEX_NOT_FOUND;\n+\t}\n }\n--- a/src/main/java/org/apache/commons/lang3/StringUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java\n      *  if the input is empty (\"\") or <code>null</code>, may be null\n      * @return the passed in CharSequence, or the default\n      */\n-    public static CharSequence defaultIfEmpty(CharSequence str, CharSequence defaultStr) {\n+    public static <T extends CharSequence> T defaultIfEmpty(T str, T defaultStr) {\n         return StringUtils.isEmpty(str) ? defaultStr : str;\n     }\n \n--- a/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/StringUtilsTest.java\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(\"\", \"NULL\"));\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(\"abc\", \"NULL\"));\n         assertNull(StringUtils.defaultIfEmpty(\"\", null));\n+        // Tests compatibility for the API return type\n+        String s = StringUtils.defaultIfEmpty(\"abc\", \"NULL\");\n+        assertEquals(\"abc\", s);\n     }\n \n     public void testDefaultIfEmpty_StringBuilders() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuilder(\"\"), new StringBuilder(\"NULL\")).toString());\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\")).toString());\n         assertNull(StringUtils.defaultIfEmpty(new StringBuilder(\"\"), null));\n+        // Tests compatibility for the API return type\n+        StringBuilder s = StringUtils.defaultIfEmpty(new StringBuilder(\"abc\"), new StringBuilder(\"NULL\"));\n+        assertEquals(\"abc\", s.toString());\n     }\n \n     public void testDefaultIfEmpty_StringBuffers() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(new StringBuffer(\"\"), new StringBuffer(\"NULL\")).toString());\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\")).toString());\n         assertNull(StringUtils.defaultIfEmpty(new StringBuffer(\"\"), null));\n+        // Tests compatibility for the API return type\n+        StringBuffer s = StringUtils.defaultIfEmpty(new StringBuffer(\"abc\"), new StringBuffer(\"NULL\"));\n+        assertEquals(\"abc\", s.toString());\n     }\n \n     public void testDefaultIfEmpty_CharBuffers() {\n         assertEquals(\"NULL\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), CharBuffer.wrap(\"NULL\")).toString());\n         assertEquals(\"abc\", StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\")).toString());\n         assertNull(StringUtils.defaultIfEmpty(CharBuffer.wrap(\"\"), null));\n+        // Tests compatibility for the API return type\n+        CharBuffer s = StringUtils.defaultIfEmpty(CharBuffer.wrap(\"abc\"), CharBuffer.wrap(\"NULL\"));\n+        assertEquals(\"abc\", s.toString());\n     }\n \n     //-----------------------------------------------------------------------", "timestamp": 1268588003, "metainfo": ""}