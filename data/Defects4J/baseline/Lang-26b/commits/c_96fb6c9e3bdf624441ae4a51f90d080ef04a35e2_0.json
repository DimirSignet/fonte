{"sha": "96fb6c9e3bdf624441ae4a51f90d080ef04a35e2", "log": "Genericize; remove invalid Javadoc reference  ", "commit": "\n--- a/src/java/org/apache/commons/lang/StringUtils.java\n+++ b/src/java/org/apache/commons/lang/StringUtils.java\n         }\n         int closeLen = close.length();\n         int openLen = open.length();\n-        List list = new ArrayList();\n+        List<String> list = new ArrayList<String>();\n         int pos = 0;\n         while (pos < (strLen - closeLen)) {\n             int start = str.indexOf(open, pos);\n         if (list.isEmpty()) {\n             return null;\n         } \n-        return (String[]) list.toArray(new String [list.size()]);\n+        return list.toArray(new String [list.size()]);\n     }\n \n     // Nested extraction\n \n         int separatorLength = separator.length();\n \n-        ArrayList substrings = new ArrayList();\n+        ArrayList<String> substrings = new ArrayList<String>();\n         int numberOfSubstrings = 0;\n         int beg = 0;\n         int end = 0;\n             }\n         }\n \n-        return (String[]) substrings.toArray(new String[substrings.size()]);\n+        return substrings.toArray(new String[substrings.size()]);\n     }\n \n     // -----------------------------------------------------------------------\n         if (len == 0) {\n             return ArrayUtils.EMPTY_STRING_ARRAY;\n         }\n-        List list = new ArrayList();\n+        List<String> list = new ArrayList<String>();\n         int i = 0, start = 0;\n         boolean match = false;\n         boolean lastMatch = false;\n         if (match || (preserveAllTokens && lastMatch)) {\n             list.add(str.substring(start, i));\n         }\n-        return (String[]) list.toArray(new String[list.size()]);\n+        return list.toArray(new String[list.size()]);\n     }\n \n     /**\n         if (len == 0) {\n             return ArrayUtils.EMPTY_STRING_ARRAY;\n         }\n-        List list = new ArrayList();\n+        List<String> list = new ArrayList<String>();\n         int sizePlus1 = 1;\n         int i = 0, start = 0;\n         boolean match = false;\n         if (match || (preserveAllTokens && lastMatch)) {\n             list.add(str.substring(start, i));\n         }\n-        return (String[]) list.toArray(new String[list.size()]);\n+        return list.toArray(new String[list.size()]);\n     }\n \n     /**\n             return ArrayUtils.EMPTY_STRING_ARRAY;\n         }\n         char[] c = str.toCharArray();\n-        List list = new ArrayList();\n+        List<String> list = new ArrayList<String>();\n         int tokenStart = 0;\n         int currentType = Character.getType(c[tokenStart]);\n         for (int pos = tokenStart + 1; pos < c.length; pos++) {\n             currentType = type;\n         }\n         list.add(new String(c, tokenStart, c.length - tokenStart));\n-        return (String[]) list.toArray(new String[list.size()]);\n+        return list.toArray(new String[list.size()]);\n     }\n \n     // Joining\n      * @return the joined String, <code>null</code> if null iterator input\n      * @since 2.0\n      */\n-    public static String join(Iterator iterator, char separator) {\n+    public static String join(Iterator<?> iterator, char separator) {\n \n         // handle null, zero and one elements before building a buffer\n         if (iterator == null) {\n      * @param separator  the separator character to use, null treated as \"\"\n      * @return the joined String, <code>null</code> if null iterator input\n      */\n-    public static String join(Iterator iterator, String separator) {\n+    public static String join(Iterator<?> iterator, String separator) {\n \n         // handle null, zero and one elements before building a buffer\n         if (iterator == null) {\n      * @return the joined String, <code>null</code> if null iterator input\n      * @since 2.3\n      */\n-    public static String join(Collection collection, char separator) {\n+    public static String join(Collection<?> collection, char separator) {\n         if (collection == null) {\n             return null;\n         }\n      * @return the joined String, <code>null</code> if null iterator input\n      * @since 2.3\n      */\n-    public static String join(Collection collection, String separator) {\n+    public static String join(Collection<?> collection, String separator) {\n         if (collection == null) {\n             return null;\n         }\n      * StringUtils.startsWithAny(\"abcxyz\", new String[] {null, \"xyz\", \"abc\"}) = true\n      * </pre>\n      *\n-     * @see java.lang.String#startsWithAny(String, String[])\n      * @param string  the String to check, may be null\n      * @param searchStrings the Strings to find, may be null or empty\n      * @return <code>true</code> if the String starts with any of the the prefixes, case insensitive, or", "timestamp": 1237133461, "metainfo": ""}