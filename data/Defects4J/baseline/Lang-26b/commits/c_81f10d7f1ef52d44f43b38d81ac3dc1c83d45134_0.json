{"sha": "81f10d7f1ef52d44f43b38d81ac3dc1c83d45134", "log": "Applying test/fix from LANG-457 - getting a StringIndexOutOfBounds from createNumber rather than a NumberFormatException  ", "commit": "\n--- a/src/java/org/apache/commons/lang/NumberUtils.java\n+++ b/src/java/org/apache/commons/lang/NumberUtils.java\n         if (val.length() == 0) {\n             throw new NumberFormatException(\"\\\"\\\" is not a valid number.\");\n         }\n+        if (val.length() == 1 && !Character.isDigit(val.charAt(0))) {\n+            throw new NumberFormatException(val + \" is not a valid number.\");\n+        }\n         if (val.startsWith(\"--\")) {\n             // this is protection for poorness in java.lang.BigDecimal.\n             // it accepts this as a legal value, but it does not appear \n--- a/src/test/org/apache/commons/lang/NumberUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/NumberUtilsTest.java\n             fail( \"Error calling public no-arg constructor\" );\n         }\n     }\n+\n+    public void testLang457() {\n+        String[] badInputs = new String[] { \"l\", \"L\", \"f\", \"F\", \"junk\", \"bobL\"};\n+        for(int i=0; i<badInputs.length; i++) {\n+            try {\n+                NumberUtils.createNumber(badInputs[i]);\n+                fail(\"NumberFormatException was expected for \" + badInputs[i]);\n+            } catch (NumberFormatException e) {\n+                return; // expected\n+            }\n+        }\n+    }\n     \n }", "timestamp": 1225902805, "metainfo": ""}