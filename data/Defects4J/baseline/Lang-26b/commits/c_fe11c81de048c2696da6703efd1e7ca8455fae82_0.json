{"sha": "fe11c81de048c2696da6703efd1e7ca8455fae82", "log": "Switched to JUnit 4 style.  ", "commit": "\n--- a/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java\n+++ b/src/test/java/org/apache/commons/lang3/concurrent/MultiBackgroundInitializerTest.java\n  */\n package org.apache.commons.lang3.concurrent;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.util.Iterator;\n import java.util.NoSuchElementException;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n \n-import junit.framework.TestCase;\n+import org.junit.Before;\n+import org.junit.Test;\n \n /**\n  * Test class for {@link MultiBackgroundInitializer}.\n  *\n  * @version $Id$\n  */\n-public class MultiBackgroundInitializerTest extends TestCase {\n+public class MultiBackgroundInitializerTest {\n     /** Constant for the names of the child initializers. */\n     private static final String CHILD_INIT = \"childInitializer\";\n \n     /** The initializer to be tested. */\n     private MultiBackgroundInitializer initializer;\n \n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n+    @Before\n+    public void setUp() throws Exception {\n         initializer = new MultiBackgroundInitializer();\n     }\n \n      * Tests addInitializer() if a null name is passed in. This should cause an\n      * exception.\n      */\n+    @Test(expected = IllegalArgumentException.class)\n     public void testAddInitializerNullName() {\n-        try {\n-            initializer.addInitializer(null, new ChildBackgroundInitializer());\n-            fail(\"Null name not detected!\");\n-        } catch (IllegalArgumentException iex) {\n-            // ok\n-        }\n+        initializer.addInitializer(null, new ChildBackgroundInitializer());\n     }\n \n     /**\n      * Tests addInitializer() if a null initializer is passed in. This should\n      * cause an exception.\n      */\n+    @Test(expected = IllegalArgumentException.class)\n     public void testAddInitializerNullInit() {\n-        try {\n-            initializer.addInitializer(CHILD_INIT, null);\n-            fail(\"Could add null initializer!\");\n-        } catch (IllegalArgumentException iex) {\n-            // ok\n-        }\n+        initializer.addInitializer(CHILD_INIT, null);\n     }\n \n     /**\n      * Tests the background processing if there are no child initializers.\n      */\n+    @Test\n     public void testInitializeNoChildren() throws ConcurrentException {\n         assertTrue(\"Wrong result of start()\", initializer.start());\n         MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n     /**\n      * Tests background processing if a temporary executor is used.\n      */\n+    @Test\n     public void testInitializeTempExec() throws ConcurrentException {\n         checkInitialize();\n         assertTrue(\"Executor not shutdown\", initializer.getActiveExecutor()\n     /**\n      * Tests background processing if an external executor service is provided.\n      */\n+    @Test\n     public void testInitializeExternalExec() throws ConcurrentException {\n         ExecutorService exec = Executors.newCachedThreadPool();\n         try {\n      * Tests the behavior of initialize() if a child initializer has a specific\n      * executor service. Then this service should not be overridden.\n      */\n+    @Test\n     public void testInitializeChildWithExecutor() throws ConcurrentException {\n         final String initExec = \"childInitializerWithExecutor\";\n         ExecutorService exec = Executors.newSingleThreadExecutor();\n      * Tries to add another child initializer after the start() method has been\n      * called. This should not be allowed.\n      */\n+    @Test\n     public void testAddInitializerAfterStart() throws ConcurrentException {\n         initializer.start();\n         try {\n      * Tries to query an unknown child initializer from the results object. This\n      * should cause an exception.\n      */\n+    @Test(expected = NoSuchElementException.class)\n     public void testResultGetInitializerUnknown() throws ConcurrentException {\n         MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n-        try {\n-            res.getInitializer(\"unknown\");\n-            fail(\"Could obtain unknown child initializer!\");\n-        } catch (NoSuchElementException nex) {\n-            // ok\n-        }\n+        res.getInitializer(\"unknown\");\n     }\n \n     /**\n      * Tries to query the results of an unknown child initializer from the\n      * results object. This should cause an exception.\n      */\n+    @Test(expected = NoSuchElementException.class)\n     public void testResultGetResultObjectUnknown() throws ConcurrentException {\n         MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n-        try {\n-            res.getResultObject(\"unknown\");\n-            fail(\"Could obtain results from unknown child initializer!\");\n-        } catch (NoSuchElementException nex) {\n-            // ok\n-        }\n+        res.getResultObject(\"unknown\");\n     }\n \n     /**\n      * Tries to query the exception of an unknown child initializer from the\n      * results object. This should cause an exception.\n      */\n+    @Test(expected = NoSuchElementException.class)\n     public void testResultGetExceptionUnknown() throws ConcurrentException {\n         MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n-        try {\n-            res.getException(\"unknown\");\n-            fail(\"Could obtain exception from unknown child initializer!\");\n-        } catch (NoSuchElementException nex) {\n-            // ok\n-        }\n+        res.getException(\"unknown\");\n     }\n \n     /**\n      * Tries to query the exception flag of an unknown child initializer from\n      * the results object. This should cause an exception.\n      */\n+    @Test(expected = NoSuchElementException.class)\n     public void testResultIsExceptionUnknown() throws ConcurrentException {\n         MultiBackgroundInitializer.MultiBackgroundInitializerResults res = checkInitialize();\n-        try {\n-            res.isException(\"unknown\");\n-            fail(\"Could obtain exception status from unknown child initializer!\");\n-        } catch (NoSuchElementException nex) {\n-            // ok\n-        }\n+        res.isException(\"unknown\");\n     }\n \n     /**\n      * Tests that the set with the names of the initializers cannot be modified.\n      */\n+    @Test(expected = UnsupportedOperationException.class)\n     public void testResultInitializerNamesModify() throws ConcurrentException {\n         checkInitialize();\n         MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer\n                 .get();\n         Iterator<String> it = res.initializerNames().iterator();\n         it.next();\n-        try {\n-            it.remove();\n-            fail(\"Could modify set with initializer names!\");\n-        } catch (UnsupportedOperationException uex) {\n-            // ok\n-        }\n+        it.remove();\n     }\n \n     /**\n      * Tests the behavior of the initializer if one of the child initializers\n      * throws a runtime exception.\n      */\n+    @Test\n     public void testInitializeRuntimeEx() {\n         ChildBackgroundInitializer child = new ChildBackgroundInitializer();\n         child.ex = new RuntimeException();\n      * Tests the behavior of the initializer if one of the child initializers\n      * throws a checked exception.\n      */\n+    @Test\n     public void testInitializeEx() throws ConcurrentException {\n         ChildBackgroundInitializer child = new ChildBackgroundInitializer();\n         child.ex = new Exception();\n      * Tests whether MultiBackgroundInitializers can be combined in a nested\n      * way.\n      */\n+    @Test\n     public void testInitializeNested() throws ConcurrentException {\n         final String nameMulti = \"multiChildInitializer\";\n         initializer", "timestamp": 1282333883, "metainfo": ""}