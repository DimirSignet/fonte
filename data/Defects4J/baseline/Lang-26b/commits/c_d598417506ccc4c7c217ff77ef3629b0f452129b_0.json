{"sha": "d598417506ccc4c7c217ff77ef3629b0f452129b", "log": "added printStackTrace(PrintStream) method to NonThrowableNestable static class to satisfy Nestable interface; removed deprecated getLength() and indexOfThrowable(int,Class) methods from static test classes; revised javadocs fof static test classes to be more accurate in describing method behavior   ", "commit": "\n--- a/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n+++ b/src/test/org/apache/commons/lang/exception/NestableDelegateTestCase.java\n  *\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:dlr@finemaltcoding.com\">Daniel Rall</a>\n- * @version $Id: NestableDelegateTestCase.java,v 1.2 2002/07/26 20:30:58 stevencaswell Exp $\n+ * @version $Id: NestableDelegateTestCase.java,v 1.3 2002/09/18 15:51:41 stevencaswell Exp $\n  */\n public class NestableDelegateTestCase extends junit.framework.TestCase\n {\n     }\n     \n     /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n-     *\n-     * @return the <code>Throwable</code>s\n+     * @see Nestable#getThrowables()\n+     * Returns zero-length <code>Throwable</code> array for this test.\n      */\n     public Throwable[] getThrowables()\n     {\n     }\n     \n     /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n-     *\n-     * @return the error messages\n+     * @see Nestable#getMessages()\n+     * Returns zero-length String array for this test.\n      */\n     public String[] getMessages()\n     {\n     }\n     \n     /**\n-     * Returns the index, numbered from 0, of the first occurrence of the\n-     * specified type in the chain of <code>Throwable</code>s, or -1 if the\n-     * specified type is not found in the chain. If <code>pos</code> is\n-     * negative, the effect is the same as if it were 0. If <code>pos</code>\n-     * is greater than or equal to the length of the chain, the effect is the\n-     * same as if it were the index of the last element in the chain.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n+     * @see Nestable#indexOfThrowable(Class)\n+     * Returns -1 for this test.\n      */\n     public int indexOfThrowable(Class type)\n     {\n     }\n     \n     /**\n-     * Returns the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s at the specified index, numbererd from 0. If\n-     * <code>index</code> is negative, the effect is the same as if it\n-     * were 0. If <code>index</code> is greater than or equal to the length\n-     * of the chain, the last <code>Throwable</code> in the chain is returned.\n-     *\n-     * @param index the index of the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s\n-     * @return the <code>Throwable</code>\n+     * @see Nestable#getThrowable(int)\n+     * Returns <code>null</code> for this test.\n      */\n     public Throwable getThrowable(int index)\n     {\n     }\n     \n     /**\n-     * Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n      */\n     public int getThrowableCount()\n     {\n     }\n     \n     /**\n-     * Returns the reference to the exception or error that caused the\n-     * exception implementing the <code>Nestable</code> to be thrown.\n+     * @see Nestable#getCause()\n      */\n     public Throwable getCause()\n     {\n     }\n     \n     /**\n-     * Prints the stack trace for this exception only--root cause not\n-     * included--using the provided writer.  Used by {@link\n-     * org.apache.commons.lang.exception.NestableDelegate} to write\n-     * individual stack traces to a buffer.  The implementation of\n-     * this method should call\n-     * <code>super.printStackTrace(out);</code> in most cases.\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n      *\n      * @param out The writer to use.\n      */\n     }\n     \n     /**\n-     * Returns the error message of the <code>Throwable</code> in the chain\n-     * of <code>Throwable</code>s at the specified index, numbererd from 0.\n-     * If <code>index</code> is negative, the effect is the same as if it\n-     * were 0. If <code>index</code> is greater than or equal to the length\n-     * of the chain, the message of the last <code>Throwable</code> in the\n-     * chain is returned.\n-     *\n-     * @param index the index of the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s\n-     * @return the error message\n+     * @see Nestable#getMessage(int)\n      */\n     public String getMessage(int index)\n     {\n     }\n     \n     /**\n-     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     *\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n+     * @see Nestable#indexOfThrowable(Class, int)\n+     * Returns -1 for this test.\n      */\n     public int indexOfThrowable(Class type, int fromIndex)\n-    {\n-        return -1;\n-    }\n-    \n-    /** Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n-     * @deprecated\n-     */\n-    public int getLength()\n-    {\n-        return 1;\n-    }\n-    \n-    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     * @param type <code>Class</code> to be found\n-     *\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n-     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n-     */\n-    public int indexOfThrowable(int pos, Class type)\n     {\n         return -1;\n     }\n     }\n     \n     /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n+     * @see Nestable#getThrowables()\n+     * Returns zero-length <code>Throwable</code> array for this test.\n+     */\n+    public Throwable[] getThrowables()\n+    {\n+        return new Throwable[0];\n+    }\n+    \n+    /**\n+     * @see Nestable#getMessages()\n+     * Returns zero-length String array for this test.\n+     */\n+    public String[] getMessages()\n+    {\n+        return new String[0];\n+    }\n+    \n+    /**\n+     * @see Nestable#indexOfThrowable(Class)\n+     * Returns -1 for this test.\n+     */\n+    public int indexOfThrowable(Class type)\n+    {\n+        return -1;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowable(int)\n+     * Returns <code>null</code> for this test.\n+     */\n+    public Throwable getThrowable(int index)\n+    {\n+        return null;\n+    }\n+    \n+    /**\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n      *\n-     * @return the <code>Throwable</code>s\n-     */\n-    public Throwable[] getThrowables()\n-    {\n-        return new Throwable[0];\n-    }\n-    \n-    /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n-     *\n-     * @return the error messages\n-     */\n-    public String[] getMessages()\n-    {\n-        return new String[0];\n-    }\n-    \n-    /**\n-     * Returns the index, numbered from 0, of the first occurrence of the\n-     * specified type in the chain of <code>Throwable</code>s, or -1 if the\n-     * specified type is not found in the chain. If <code>pos</code> is\n-     * negative, the effect is the same as if it were 0. If <code>pos</code>\n-     * is greater than or equal to the length of the chain, the effect is the\n-     * same as if it were the index of the last element in the chain.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n-     */\n-    public int indexOfThrowable(Class type)\n-    {\n-        return -1;\n-    }\n-    \n-    /**\n-     * Returns the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s at the specified index, numbererd from 0. If\n-     * <code>index</code> is negative, the effect is the same as if it\n-     * were 0. If <code>index</code> is greater than or equal to the length\n-     * of the chain, the last <code>Throwable</code> in the chain is returned.\n-     *\n-     * @param index the index of the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s\n-     * @return the <code>Throwable</code>\n-     */\n-    public Throwable getThrowable(int index)\n-    {\n-        return null;\n-    }\n-    \n-    /**\n-     * Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @return 1\n      */\n     public int getThrowableCount()\n     {\n     }\n     \n     /**\n-     * Returns the reference to the exception or error that caused the\n-     * exception implementing the <code>Nestable</code> to be thrown.\n+     * @see Nestable#getCause()\n      */\n     public Throwable getCause()\n     {\n     }\n     \n     /**\n-     * Prints the stack trace for this exception only--root cause not\n-     * included--using the provided writer.  Used by {@link\n-     * org.apache.commons.lang.exception.NestableDelegate} to write\n-     * individual stack traces to a buffer.  The implementation of\n-     * this method should call\n-     * <code>super.printStackTrace(out);</code> in most cases.\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n      *\n      * @param out The writer to use.\n      */\n     }\n     \n     /**\n-     * Returns the error message of the <code>Throwable</code> in the chain\n-     * of <code>Throwable</code>s at the specified index, numbererd from 0.\n-     * If <code>index</code> is negative, the effect is the same as if it\n-     * were 0. If <code>index</code> is greater than or equal to the length\n-     * of the chain, the message of the last <code>Throwable</code> in the\n-     * chain is returned.\n-     *\n-     * @param index the index of the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s\n-     * @return the error message\n+     * @see Nestable#getMessage(int)\n      */\n     public String getMessage(int index)\n     {\n     }\n     \n     /**\n-     * Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     *\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n+     * @see Nestable#indexOfThrowable(Class, int)     \n+     * Returns -1 for this test.\n      */\n     public int indexOfThrowable(Class type, int fromIndex)\n-    {\n-        return -1;\n-    }\n-    \n-    /** Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n-     * @deprecated\n-     */\n-    public int getLength()\n-    {\n-        return 1;\n-    }\n-    \n-    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     * @param type <code>Class</code> to be found\n-     *\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n-     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n-     */\n-    public int indexOfThrowable(int pos, Class type)\n     {\n         return -1;\n     }\n     private Throwable cause = new Exception(\"ThrowableNestable cause\");\n \n     /**\n-     * Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n      */\n     public int getThrowableCount()\n     {\n     }\n     \n     /**\n-     * Returns the error message of this and any nested\n-     * <code>Throwable</code>.\n-     *\n-     * @return The error message.\n+     * @see Nestable#getMessage()\n+     * Returns the hard-coded string \"ThrowableNestable exception\" for this\n+     * test.\n      */\n     public String getMessage()\n     {\n     }\n \n     /**\n-     * Returns the error message of the <code>Throwable</code> in the chain\n-     * of <code>Throwable</code>s at the specified index, numbererd from 0.\n-     * If <code>index</code> is negative, the effect is the same as if it\n-     * were 0. If <code>index</code> is greater than or equal to the length\n-     * of the chain, the message of the last <code>Throwable</code> in the\n-     * chain is returned.\n-     *\n-     * @param index the index of the <code>Throwable</code> in the chain of\n-     * <code>Throwable</code>s\n-     * @return the error message\n+     * @see Nestable#getMessage(int)\n+     * Returns the hard-coded string \"ThrowableNestable exception\" for this\n+     * test.\n      */\n     public String getMessage(int index)\n     {\n     }\n \n     /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n+     * @see Nestable#getMessages()\n+     * Returns single-element string array with \"ThrowableNestable exception\".\n      */\n     public String[] getMessages()\n     {\n     }\n     \n     /**\n-     * Returns the reference to the exception or error that caused the\n-     * exception implementing the <code>Nestable</code> to be thrown.\n+     * @see Nestable#getCause()\n      */\n     public Throwable getCause()\n     {\n     }\n \n     /**\n-     * Prints the stack trace of this exception to the specified print\n-     * writer.  Includes inforamation from the exception--if\n-     * any--which caused this exception.\n-     *\n-     * @param out <code>PrintWriter</code> to use for output.\n+     * @see Nestable#printStackTrace(PrintWriter)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n      */\n     public void printStackTrace(PrintWriter out)\n     {\n     }\n     \n     /**\n-     * Prints the stack trace for this exception only--root cause not\n-     * included--using the provided writer.  Used by {@link\n-     * org.apache.commons.lang.exception.NestableDelegate} to write\n-     * individual stack traces to a buffer.  The implementation of\n-     * this method should call\n-     * <code>super.printStackTrace(out);</code> in most cases.\n-     *\n-     * @param out The writer to use.\n+     * @see Nestable#printPartialStackTrace(PrintWriter)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n      */\n     public void printPartialStackTrace(PrintWriter out)\n     {\n     }\n     \n+    /**\n+     * @see Nestable#getThrowable(int)\n+     */\n     public Throwable getThrowable(int index)\n     {\n         return cause;\n     }\n     \n+    /**\n+     * @see Nestable#getThrowables()\n+     */\n     public Throwable[] getThrowables()\n     {\n         Throwable throwables[] = new Throwable[1];\n         return throwables;\n     }\n     \n+    /**\n+     * @see Nestable#indexOfThrowable(Class)\n+     */\n     public int indexOfThrowable(Class type)\n     {\n         if(Exception.class.isInstance(type))\n     }\n     \n     /**\n-     * Returns the index of the first <code>Throwable</code> that matches the\n-     * specified type with an index greater than or equal to the specified\n-     * position, or -1 if the type is not found.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @param pos\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n+     * @see Nestable#indexOfThrowable(Class,int)\n      */\n     public int indexOfThrowable(Class type, int fromIndex)\n-    {\n-        return indexOfThrowable(type);\n-    }\n-    \n-    /** Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n-     * @deprecated\n-     */\n-    public int getLength()\n-    {\n-        return 1;\n-    }\n-    \n-    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     * @param type <code>Class</code> to be found\n-     *\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n-     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n-     */\n-    public int indexOfThrowable(int pos, Class type)\n     {\n         return indexOfThrowable(type);\n     }\n         this.cause = cause;\n     }\n     \n+    /**\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n+     */\n     public int getThrowableCount()\n     {\n         return 1;\n     }\n     \n     /**\n-     * Returns the error message of this and any nested\n-     * <code>Throwable</code>.\n-     *\n-     * @return The error message.\n+     * @see Nestable#getMessage()\n+     * For this test, returns \"ThrowableNestable exception (\" appended to the\n+     * message of the cause specified in the constructor.\n      */\n     public String getMessage()\n     {\n         return \"ThrowableNestedNestable exception (\" + cause.getMessage() + \")\";\n     }\n \n+    /**\n+     * @see Nestable#getMessage(int)\n+     * For this test, returns \"ThrowableNestable exception (\" appended to the\n+     * message of the cause specified in the constructor.\n+     */\n     public String getMessage(int index)\n     {\n         return \"ThrowableNestedNestable exception (\" + cause.getMessage() + \")\";\n     }\n     \n     /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n+     * @see Nestable#getMessages()\n+     * For this test, returns a single-element string array containing\n+     * \"ThrowableNestable exception (\" appended to the\n+     * message of the cause specified in the constructor.\n      */\n     public String[] getMessages()\n     {\n     }\n     \n     /**\n-     * Returns the reference to the exception or error that caused the\n-     * exception implementing the <code>Nestable</code> to be thrown.\n+     * @see Nestable#getCause()\n      */\n     public Throwable getCause()\n     {\n     }\n     \n     /**\n-     * Prints the stack trace of this exception to the specified print\n-     * writer.  Includes inforamation from the exception--if\n-     * any--which caused this exception.\n-     *\n-     * @param out <code>PrintWriter</code> to use for output.\n+     * @see Nestable#printStackTrace(PrintWriter)\n+     * For this test, writes the string\n+     * \"ThrowableNestedNestable stack trace place-holder\" to the print writer.\n      */\n     public void printStackTrace(PrintWriter out)\n     {\n     }\n     \n     /**\n-     * Prints the stack trace for this exception only--root cause not\n-     * included--using the provided writer.  Used by {@link\n-     * org.apache.commons.lang.exception.NestableDelegate} to write\n-     * individual stack traces to a buffer.  The implementation of\n-     * this method should call\n-     * <code>super.printStackTrace(out);</code> in most cases.\n-     *\n-     * @param out The writer to use.\n+     * @see Nestable#printPartialStackTrace(PrintWriter)\n+     * For this test, writes the string\n+     * \"ThrowableNestedNestable partial stack trace place-holder\" to the print\n+     * writer.\n      */\n     public void printPartialStackTrace(PrintWriter out)\n     {\n         out.println(\"ThrowableNestedNestable partial stack trace place-holder\");\n     }\n     \n+    /**\n+     * @see Nestable#getThrowable(int)\n+     */\n     public Throwable getThrowable(int index)\n     {\n         return cause;\n     }\n     \n+    /**\n+     * @see Nestable#getThrowableS()\n+     */\n     public Throwable[] getThrowables()\n     {\n         Throwable throwables[] = new Throwable[1];\n         return throwables;\n     }\n     \n+    /**\n+     * @see Nestable#indexOfThrowable(Class)\n+     */\n     public int indexOfThrowable(Class type)\n     {\n         if(Exception.class.isInstance(type))\n     }\n     \n     /**\n-     * Returns the index of the first <code>Throwable</code> that matches the\n-     * specified type with an index greater than or equal to the specified\n-     * position, or -1 if the type is not found.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @param pos\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n+     * @see Nestable#indexOfThrowable(Class, int)\n      */\n     public int indexOfThrowable(Class type, int fromIndex)\n-    {\n-        return indexOfThrowable(type);\n-    }\n-    \n-    /** Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n-     * @deprecated\n-     */\n-    public int getLength()\n-    {\n-        return 1;\n-    }\n-    \n-    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     * @param type <code>Class</code> to be found\n-     *\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n-     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n-     */\n-    public int indexOfThrowable(int pos, Class type)\n     {\n         return indexOfThrowable(type);\n     }\n \n class NonThrowableNestable implements Nestable\n {\n+    /**\n+     * @see Nestable#getThrowableCount()\n+     * Returns 1 for this test.\n+     */\n     public int getThrowableCount()\n     {\n         return 1;\n     }\n     \n     /**\n-     * Returns the error message of this and any nested\n-     * <code>Throwable</code>.\n-     *\n-     * @return The error message.\n+     * @see Nestable#getMessage()\n+     * Returns the string \"non-throwable\" for this test.\n      */\n     public String getMessage()\n     {\n         return \"non-throwable\";\n     }\n \n+    /**\n+     * @see Nestable#getMessage(int)\n+     * Returns the string \"non-throwable\" for this test.\n+     */\n     public String getMessage(int index)\n     {\n         return \"non-throwable\";\n     }\n     \n     /**\n-     * Returns the error message of this and any nested <code>Throwable</code>s\n-     * in an array of Strings, one element for each message. Any\n-     * <code>Throwable</code> specified without a message is represented in\n-     * the array by a null.\n+     * @see Nestable#getMessage()\n+     * Returns a single-element array containing the string \"non-throwable\" for\n+     * this test.\n      */\n     public String[] getMessages()\n     {\n     }\n     \n     /**\n-     * Returns the reference to the exception or error that caused the\n-     * exception implementing the <code>Nestable</code> to be thrown.\n+     * @see Nestable#getCause()\n+     * Returns <code>null</code> for this test.\n      */\n     public Throwable getCause()\n     {\n     }\n     \n     /**\n-     * Prints the stack trace of this exception to the specified print\n-     * writer.  Includes inforamation from the exception--if\n-     * any--which caused this exception.\n-     *\n-     * @param out <code>PrintWriter</code> to use for output.\n+     * @see Nestable#printStackTrace(PrintWriter)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n      */\n     public void printStackTrace(PrintWriter out)\n     {\n     }\n     \n     /**\n-     * Prints the stack trace for this exception only--root cause not\n-     * included--using the provided writer.  Used by {@link\n-     * org.apache.commons.lang.exception.NestableDelegate} to write\n-     * individual stack traces to a buffer.  The implementation of\n-     * this method should call\n-     * <code>super.printStackTrace(out);</code> in most cases.\n-     *\n-     * @param out The writer to use.\n+     * @see Nestable#printStackTrace(PrintStream)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n+     */\n+    public void printStackTrace(PrintStream out)\n+    {\n+    }\n+    \n+    /**\n+     * @see Nestable#printPartialStackTrace(PrintWriter)\n+     * Empty method to satisfy the implemented interface. Does nothing\n+     * in this test.\n      */\n     public void printPartialStackTrace(PrintWriter out)\n     {\n     }\n     \n+\n+    /**\n+     * @see Nestable#getThrowable(int)\n+     * Returns <code>null</code> for this test.\n+     */\n     public Throwable getThrowable(int index)\n     {\n         return null;\n     }\n     \n+    /**\n+     * @see Nestable#getThrowables()\n+     * Returns zero-length <code>Throwable</code> array.\n+     */\n     public Throwable[] getThrowables()\n     {\n         return new Throwable[0];\n     }\n     \n+    /**\n+     * @see Nestable#indexOfThrowable(Class)\n+     * Returns -1 for this test.\n+     */\n     public int indexOfThrowable(Class type)\n     {\n         return -1;\n     }\n     \n     /**\n-     * Returns the index of the first <code>Throwable</code> that matches the\n-     * specified type with an index greater than or equal to the specified\n-     * position, or -1 if the type is not found.\n-     *\n-     * @param type <code>Class</code> to be found\n-     * @param pos\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n+     * @see Nestable#indexOfThrowable(Class, int)\n+     * Returns -1 for this test.\n      */\n     public int indexOfThrowable(Class type, int fromIndex)\n     {\n         return -1;\n     }\n     \n-    /** Returns the number of nested <code>Throwable</code>s represented by\n-     * this <code>Nestable</code>, including this <code>Nestable</code>.\n-     * @deprecated\n-     */\n-    public int getLength()\n-    {\n-        return 1;\n-    }\n-    \n-    /** Returns the index, numbered from 0, of the first <code>Throwable</code>\n-     * that matches the specified type in the chain of <code>Throwable</code>s\n-     * with an index greater than or equal to the specified position, or -1 if\n-     * the type is not found. If <code>pos</code> is negative, the effect is the\n-     * same as if it were 0. If <code>pos</code> is greater than or equal to the\n-     * length of the chain, the effect is the same as if it were the index of\n-     * the last element in the chain.\n-     *\n-     * @param pos index, numbered from 0, of the starting position in the chain\n-     * to be searched\n-     * @param type <code>Class</code> to be found\n-     *\n-     * @return index of the first occurrence of the type in the chain, or -1 if\n-     * the type is not found\n-     * @deprecated replaced by {@link #indexOfThrowable(Class, int)}\n-     */\n-    public int indexOfThrowable(int pos, Class type)\n-    {\n-        return -1;\n-    }\n-    \n }", "timestamp": 1032364301, "metainfo": ""}