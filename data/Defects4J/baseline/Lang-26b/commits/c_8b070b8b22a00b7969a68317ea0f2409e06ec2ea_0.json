{"sha": "8b070b8b22a00b7969a68317ea0f2409e06ec2ea", "log": "Add StopWatch   ", "commit": "\n--- /dev/null\n+++ b/src/java/org/apache/commons/lang/time/StopWatch.java\n+/* ====================================================================\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 1999-2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Commons\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Software Foundation.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.time;\n+\n+/**\n+ * <p><code>StopWatch</code> provides a convenient API for timings.</p>\n+ * \n+ * <p>The methods do <b>not</b> protect against inappropriate calls. Thus you\n+ * can call stop before start, resume before suspend or unsplit before split.\n+ * The results are indeterminate in these cases.</p>\n+ * \n+ * <p>To start the watch, call {@link #start()}. At this point you can:</p>\n+ * <ul>\n+ * <li>{@link #split()} the watch to get the time whilst the watch continues in the\n+ *  background. {@link #unsplit()} will remove the effect of the split. At this point,\n+ *  these three options are available again.\n+ * <li>{@link #suspend()} the watch to pause it. {@link #resume()} allows the watch\n+ *  to continue. Any time between the suspend and resume will not be counted in\n+ *  the total. At this point, these three options are available again.\n+ * <li>{@link #stop()} the watch to complete the timing session.\n+ * </ul>\n+ * <p>It is intended that the output methods {@link #toString()} and {@link #getTime()}\n+ * should only be called after stop, split or suspend, however a suitable result will\n+ * be returned at other points.</p>\n+ *\n+ * @author Henri Yandell\n+ * @author Stephen Colebourne\n+ * @since 2.0\n+ * @version $Id: StopWatch.java,v 1.1 2002/12/22 22:59:58 scolebourne Exp $\n+ */\n+public class StopWatch {\n+    \n+    private static final int MILLIS_IN_HOUR = 60 * 60 * 1000;\n+    private static final int MILLIS_IN_MINUTE = 60 * 1000;\n+\n+    /** The start time */\n+    private long startTime = -1;\n+    /** The stop time */\n+    private long stopTime = -1;\n+\n+    /**\n+     * <p>Constructor.</p>\n+     */\n+    public StopWatch() {\n+    }\n+\n+    /**\n+     * <p>Start the stopwatch.</p>\n+     * \n+     * <p>This method starts a new timing session, clearing any previous values.</p>\n+     */\n+    public void start() {\n+        stopTime = -1;\n+        startTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * <p>Stop the stopwatch.</p>\n+     * \n+     * <p>This method ends a new timing session, allowing the time to be retrieved.</p>\n+     */\n+    public void stop() {\n+        stopTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * <p>Reset the stopwatch.</p>\n+     * \n+     * <p>This method clears the internal values to allow the object to be reused.</p>\n+     */\n+    public void reset() {\n+        startTime = -1;\n+        stopTime = -1;\n+    }\n+\n+    /**\n+     * <p>Split the time.</p>\n+     * \n+     * <p>This method sets the stop time of the watch to allow a time to be extracted.\n+     * The start time is unaffected, enabling {@link #unsplit()} to contine the \n+     * timing from the original start point.</p>\n+     */\n+    public void split() {\n+        stopTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * <p>Remove a split.</p>\n+     * \n+     * <p>This method clears the stop time. The start time is unaffected, enabling \n+     * timing from the original start point to continue.</p>\n+     */\n+    public void unsplit() {\n+        stopTime = -1;\n+    }\n+\n+    /**\n+     * <p>Suspend the stopwatch for later resumption.</p>\n+     * \n+     * <p>This method suspends the watch until it is resumed. The watch will not include\n+     * time between the suspend and resume calls in the total time.</p>\n+     */\n+    public void suspend() {\n+        stopTime = System.currentTimeMillis();\n+    }\n+\n+    /**\n+     * <p>Resume the stopwatch after a suspend.</p>\n+     * \n+     * <p>This method resumes the watch after it was suspended. The watch will not include\n+     * time between the suspend and resume calls in the total time.</p>\n+     */\n+    public void resume() {\n+        startTime += (System.currentTimeMillis() - stopTime);\n+        stopTime = -1;\n+    }\n+\n+    /**\n+     * <p>Get the time on the stopwatch.</p>\n+     * \n+     * <p>This is either the time between start and latest split, between start\n+     * and stop, or the time between the start and the moment this method is called.</p>\n+     * \n+     * @return the time in milliseconds\n+     */\n+    public long getTime() {\n+        if (stopTime == -1) {\n+            if (startTime == -1) {\n+                return 0;\n+            }\n+            return (System.currentTimeMillis() - this.startTime);\n+        }\n+        return (this.stopTime - this.startTime);\n+    }\n+\n+    /**\n+     * <p>Gets a summary of the time that the stopwatch recorded as a string.</p>\n+     * \n+     * <p>The format used is ISO8601,\n+     * <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>\n+     * \n+     * @return the time as a String\n+     */\n+    public String toString() {\n+        return StopWatch.toString(getTime());\n+    }\n+\n+    /**\n+     * <p>Get the time gap as a string.</p>\n+     * \n+     * <p>The format used is ISO8601,\n+     * <i>hours</i>:<i>minutes</i>:<i>seconds</i>.<i>milliseconds</i>.</p>\n+     * \n+     * @return the time as a String\n+     */\n+    public static String toString(long time) {\n+        int hours, minutes, seconds, milliseconds;\n+        hours = (int) (time / MILLIS_IN_HOUR);\n+        time = time - (hours * MILLIS_IN_HOUR);\n+        minutes = (int) (time / MILLIS_IN_MINUTE);\n+        time = time - (minutes * MILLIS_IN_MINUTE);\n+        seconds = (int) (time / 1000);\n+        time = time - (seconds * 1000);\n+        milliseconds = (int) time;\n+\n+        StringBuffer buf = new StringBuffer(32);\n+        buf.append(hours);\n+        buf.append(':');\n+        if (minutes < 10) {\n+            buf.append('0');\n+        }\n+        buf.append(minutes);\n+        buf.append(':');\n+        if (seconds < 10) {\n+            buf.append('0');\n+        }\n+        buf.append(seconds);\n+        buf.append('.');\n+        if (milliseconds < 10) {\n+            buf.append(\"00\");\n+        } else if (milliseconds < 100) {\n+            buf.append('0');\n+        }\n+        buf.append(milliseconds);\n+        return buf.toString();\n+    }\n+\n+}\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/time/StopWatchTest.java\n+/*\n+ * The Apache Software License, Version 1.1\n+ *\n+ * Copyright (c) 2002 The Apache Software Foundation.  All rights\n+ * reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions\n+ * are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright\n+ *    notice, this list of conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in\n+ *    the documentation and/or other materials provided with the\n+ *    distribution.\n+ *\n+ * 3. The end-user documentation included with the redistribution, if\n+ *    any, must include the following acknowlegement:\n+ *       \"This product includes software developed by the\n+ *        Apache Software Foundation (http://www.apache.org/).\"\n+ *    Alternately, this acknowlegement may appear in the software itself,\n+ *    if and wherever such third-party acknowlegements normally appear.\n+ *\n+ * 4. The names \"The Jakarta Project\", \"Ant\", and \"Apache Software\n+ *    Foundation\" must not be used to endorse or promote products derived\n+ *    from this software without prior written permission. For written\n+ *    permission, please contact apache@apache.org.\n+ *\n+ * 5. Products derived from this software may not be called \"Apache\"\n+ *    nor may \"Apache\" appear in their names without prior written\n+ *    permission of the Apache Group.\n+ *\n+ * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED\n+ * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n+ * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR\n+ * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF\n+ * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n+ * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n+ * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n+ * SUCH DAMAGE.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ */\n+package org.apache.commons.lang.time;\n+\n+import java.util.Date;\n+import java.util.Calendar;\n+import java.util.TimeZone;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * TestCase for StopWatch.\n+ *\n+ * @author Stephen Colebourne\n+ * @version $Id: StopWatchTest.java,v 1.1 2002/12/22 22:59:58 scolebourne Exp $\n+ */\n+public class StopWatchTest extends TestCase {\n+\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    public static Test suite() {\n+    \tTestSuite suite = new TestSuite(StopWatchTest.class);\n+    \tsuite.setName(\"StopWatch Tests\");\n+        return suite;\n+    }\n+\n+    public StopWatchTest(String s) {\n+        super(s);\n+    }\n+\n+    public void testToString(){\n+        long time = 0;\n+        assertEquals(\"0:00:00.000\", StopWatch.toString(time));\n+        \n+        time = 1;\n+        assertEquals(\"0:00:00.001\", StopWatch.toString(time));\n+        \n+        time = 15;\n+        assertEquals(\"0:00:00.015\", StopWatch.toString(time));\n+        \n+        time = 165;\n+        assertEquals(\"0:00:00.165\", StopWatch.toString(time));\n+        \n+        time = 1675;\n+        assertEquals(\"0:00:01.675\", StopWatch.toString(time));\n+        \n+        time = 13465;\n+        assertEquals(\"0:00:13.465\", StopWatch.toString(time));\n+        \n+        time = 72789;\n+        assertEquals(\"0:01:12.789\", StopWatch.toString(time));\n+        \n+        time = 12789 + 32 * 60000;\n+        assertEquals(\"0:32:12.789\", StopWatch.toString(time));\n+        \n+        time = 12789 + 62 * 60000;\n+        assertEquals(\"1:02:12.789\", StopWatch.toString(time));\n+    }\n+    \n+    public void testStopWatchSimple(){\n+        StopWatch watch = new StopWatch();\n+        assertEquals(0, watch.getTime());\n+        \n+        watch.start();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.stop();\n+        long time = watch.getTime();\n+        assertEquals(time, watch.getTime());\n+        \n+        assertTrue(time >= 500);\n+        assertTrue(time < 650);\n+        \n+        watch.reset();\n+        assertEquals(0, watch.getTime());\n+    }\n+    \n+    public void testStopWatchSplit(){\n+        StopWatch watch = new StopWatch();\n+        watch.start();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.split();\n+        long splitTime = watch.getTime();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.unsplit();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.stop();\n+        long totalTime = watch.getTime();\n+        \n+//        System.err.println(splitTime +\"  \"+totalTime);\n+        assertTrue(splitTime >= 500);\n+        assertTrue(splitTime < 650);\n+        assertTrue(totalTime >= 1500);\n+        assertTrue(totalTime < 1800);\n+    }\n+    \n+    public void testStopWatchSuspend(){\n+        StopWatch watch = new StopWatch();\n+        watch.start();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.suspend();\n+        long suspendTime = watch.getTime();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.resume();\n+            try {Thread.sleep(550);} catch (InterruptedException ex) {}\n+        watch.stop();\n+        long totalTime = watch.getTime();\n+        \n+//        System.err.println(suspendTime +\"  \"+totalTime);\n+        assertTrue(suspendTime >= 500);\n+        assertTrue(suspendTime < 600);\n+        assertTrue(totalTime >= 1000);\n+        assertTrue(totalTime < 1200);\n+    }\n+\n+}\n--- a/src/test/org/apache/commons/lang/time/TimeTestSuite.java\n+++ b/src/test/org/apache/commons/lang/time/TimeTestSuite.java\n  * Test suite for the Time package.\n  *\n  * @author Stephen Colebourne\n- * @version $Id: TimeTestSuite.java,v 1.1 2002/12/18 23:30:19 scolebourne Exp $\n+ * @version $Id: TimeTestSuite.java,v 1.2 2002/12/22 22:59:58 scolebourne Exp $\n  */\n public class TimeTestSuite extends TestCase {\n     \n         suite.setName(\"Commons-Lang-Time Tests\");\n         suite.addTest(CalendarUtilsTest.suite());\n         suite.addTest(DateUtilsTest.suite());\n+        suite.addTest(StopWatchTest.suite());\n         return suite;\n     }\n }", "timestamp": 1040597998, "metainfo": ""}