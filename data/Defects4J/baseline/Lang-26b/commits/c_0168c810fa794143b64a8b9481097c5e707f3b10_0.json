{"sha": "0168c810fa794143b64a8b9481097c5e707f3b10", "log": "Javadoc.   ", "commit": "\n--- a/src/java/org/apache/commons/lang/Tokenizer.java\n+++ b/src/java/org/apache/commons/lang/Tokenizer.java\n  *\n  * @author Matthew Inger\n  * @author Stephen Colebourne\n+ * @author Gary D. Gregory\n  */\n public class Tokenizer implements ListIterator {\n     // TODO: Constructors\n      * This character is ignored when parsing the String, unless it is\n      * within a quoted region.\n      * \n-     * @param quote  the ignored character to use\n+     * @param ignored  the ignored character to use\n      */\n     public void setIgnoredChar(char ignored) {\n         setIgnoredMatcher(new CharMatcher(ignored));\n      * Sets whether the tokenizer should return empty tokens as null.\n      * The default for this property is false.\n      * \n-     * @return emptyAsNull  whether empty tokens are returned as null\n+     * @param emptyAsNull  whether empty tokens are returned as null\n      */\n     public void setEmptyTokenAsNull(boolean emptyAsNull) {\n         this.emptyAsNull = emptyAsNull;\n      * Sets whether the tokenizer should ignore and not return empty tokens.\n      * The default for this property is false.\n      * \n-     * @return ignoreEmptyTokens  whether empty tokens are not returned\n+     * @param ignoreEmptyTokens  whether empty tokens are not returned\n      */\n     public void setIgnoreEmptyTokens(boolean ignoreEmptyTokens) {\n         this.ignoreEmptyTokens = ignoreEmptyTokens;\n             return (char[]) chars.clone();\n         }\n \n-        public boolean isMatch(char c) {\n-            return (Arrays.binarySearch(chars, c) >= 0);\n+        /**\n+         * Returns whether or not the given charatcer matches.\n+         * \n+         * @param ch the character to match.\n+         * @return whether or not the given charatcer matches.\n+         */\n+        public boolean isMatch(char ch) {\n+            return (Arrays.binarySearch(chars, ch) >= 0);\n         }\n     }\n     \n         /**\n          * Constructor that creates a matcher that matches a single character.\n          * \n-         * @param chars  the character to match\n+         * @param ch  the character to match\n          */\n         public CharMatcher(char ch) {\n             super();\n             return this.ch;\n         }\n \n+        /**\n+         * Returns whether or not the given charatcer matches.\n+         * \n+         * @param ch the character to match.\n+         * @return whether or not the given charatcer matches.\n+         */\n         public boolean isMatch(char ch) {\n             return (this.ch == ch);\n         }\n             super();\n         }\n \n+        /**\n+         * Always returns <code>false</code>.\n+         * \n+         * @param ch the character to match.\n+         * @return Always returns <code>false</code>.\n+         */\n         public boolean isMatch(char ch) {\n             return false;\n         }\n             super();\n         }\n \n+        /**\n+         * Returns whether or not the given charatcer matches.\n+         * \n+         * @param ch the character to match.\n+         * @return whether or not the given charatcer matches.\n+         */\n         public boolean isMatch(char ch) {\n             return (ch <= 32);\n         }", "timestamp": 1071451069, "metainfo": ""}