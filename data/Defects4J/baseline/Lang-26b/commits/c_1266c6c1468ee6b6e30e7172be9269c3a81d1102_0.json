{"sha": "1266c6c1468ee6b6e30e7172be9269c3a81d1102", "log": "Three new methods and unit tests: add(Object[],Object), add(Object[],int,Object), and join(Object[],Object[]). PR: http://nagoya.apache.org/bugzilla/show_bug.cgi?id=26056 Submitted by:\tGary Gregory and Maarten Coene Reviewed by:\tGary Gregory   ", "commit": "\n--- a/src/java/org/apache/commons/lang/ArrayUtils.java\n+++ b/src/java/org/apache/commons/lang/ArrayUtils.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Fredrik Westermarck\n  * @since 2.0\n- * @version $Id: ArrayUtils.java,v 1.34 2004/01/25 00:09:10 tobrien Exp $\n+ * @version $Id: ArrayUtils.java,v 1.35 2004/01/30 01:39:58 ggregory Exp $\n  */\n public class ArrayUtils {\n \n         }\n         return false;\n     }\n+\n+    /**\n+     * <p>Joins the elements of the provided arrays into a single new array.</p>\n+     * <p>The new array contains all of the element of the first array followed\n+     * by all of the elements from the second array.</p>\n+     *\n+     * <pre>\n+     * ArrayUtils.join(null, null)     = null\n+     * ArrayUtils.join(array1, null)   = array1\n+     * ArrayUtils.join(null, array2)   = array2\n+     * ArrayUtils.join([], [])         = []\n+     * ArrayUtils.join([null], [null]) = [null, null]\n+     * ArrayUtils.join([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) = [\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"]\n+     * </pre>\n+     *\n+     * @param array1  the first array of values to join together, may be null\n+     * @param array2  the second array of values to join together, may be null\n+     * @return The new joined array, <code>null</code> if null array inputs. \n+     *      The type of the joined array is the type of the first array.\n+     * @since 2.1\n+     */\n+    public static Object[] join(Object[] array1, Object[] array2) {\n+        if (array1 == null) {\n+            return array2;\n+        } else if (array2 == null) {\n+            return array1;\n+        } else {\n+            Object[] joinedArray = (Object[]) Array.newInstance(array1.getClass().getComponentType(), array1.length\n+                + array2.length);\n+            System.arraycopy(array1, 0, joinedArray, 0, array1.length);\n+            System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);\n+            return joinedArray;\n+        }\n+    }\n+\n+    /**\n+     * <p>Adds the element to the end of the array.</p>\n+     *\n+     * <p>The new array contains the same elements of the input\n+     * array plus the given element in the last position. The component type of \n+     * the new array is  the same as that of the input array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, null)      = [null]\n+     * ArrayUtils.add(null, \"a\")       = [\"a\"]\n+     * ArrayUtils.add([\"a\"], null)     = [\"a\", null]\n+     * ArrayUtils.add([\"a\"], \"b\")      = [\"a\", \"b\"]\n+     * ArrayUtils.add([\"a\", \"b\"], \"c\") = [\"a\", \"b\", \"c\"]\n+     * </pre>\n+     * \n+     * @param array  the array to \"add\" the element to, may be <code>null</code>\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @since 2.1\n+     */\n+    public static Object[] add(Object[] array, Object element) {\n+        Object joinedArray;\n+        int elementPos;\n+        if (array != null) {\n+            joinedArray = Array.newInstance(array.getClass().getComponentType(), array.length + 1);\n+            System.arraycopy(array, 0, joinedArray, 0, array.length);\n+            elementPos = array.length;\n+        } else {\n+            // null input array, use the element type\n+            joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);\n+            elementPos = 0;\n+        }\n+        Array.set(joinedArray, elementPos, element);\n+        return (Object[]) joinedArray;\n+    }\n+\n+    /**\n+     * <p>Inserts the specified element at the specified position in the array. \n+     * Shifts the element currently at that position (if any) and any subsequent\n+     * elements to the right (adds one to their indices).</p>\n+     *\n+     * <p>This method returns a new array with the same elements of the input\n+     * array plus the given element on the specified position. The component \n+     * type of the returned array is always the same as that of the input \n+     * array.</p>\n+     *\n+     * <p>If the input array is <code>null</code>, a new one element array is returned\n+     *  whose component type is the same as the element.</p>\n+     * \n+     * <pre>\n+     * ArrayUtils.add(null, 0, null)      = [null]\n+     * ArrayUtils.add(null, 0, \"a\")       = [\"a\"]\n+     * ArrayUtils.add([\"a\"], 1, null)     = [\"a\", null]\n+     * ArrayUtils.add([\"a\"], 1, \"b\")      = [\"a\", \"b\"]\n+     * ArrayUtils.add([\"a\", \"b\"], 3, \"c\") = [\"a\", \"b\", \"c\"]\n+     * </pre>\n+     * \n+     * @param array  the array to add the element to, may be <code>null</code>\n+     * @param index  the position of the new object\n+     * @param element  the object to add\n+     * @return A new array containing the existing elements and the new element\n+     * @throws IndexOutOfBoundsException if the index is out of range \n+     * (index < 0 || index > array.length).\n+     */\n+    public static Object[] add(final Object[] array, final int index, final Object element) {\n+        if (array == null) {\n+            if (index != 0) {\n+                throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: 0\");\n+            }\n+            Object joinedArray = Array.newInstance(element != null ? element.getClass() : Object.class, 1);\n+            Array.set(joinedArray, 0, element);\n+            return (Object[]) joinedArray;\n+        }\n+        int length = array.length;\n+        if (index > length || index < 0) {\n+            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Length: \" + length);\n+        }\n+        Object result = Array.newInstance(array.getClass().getComponentType(), length + 1);\n+        System.arraycopy(array, 0, result, 0, index);\n+        Array.set(result, index, element);\n+        if (index < length) {\n+            System.arraycopy(array, index, result, index + 1, length - index);\n+        }\n+        return (Object[]) result;\n+    }\n }\n--- a/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n+++ b/src/test/org/apache/commons/lang/ArrayUtilsTest.java\n  * @author <a href=\"mailto:equinus100@hotmail.com\">Ashwin S</a>\n  * @author Fredrik Westermarck\n  * @author Gary Gregory\n- * @version $Id: ArrayUtilsTest.java,v 1.21 2004/01/19 22:55:05 ggregory Exp $\n+ * @version $Id: ArrayUtilsTest.java,v 1.22 2004/01/30 01:39:57 ggregory Exp $\n  */\n public class ArrayUtilsTest extends TestCase {\n \n         assertEquals(false, Modifier.isFinal(ArrayUtils.class.getModifiers()));\n     }\n     \n+    void assertArraysEquals(Object[] array1, Object[] array2) {\n+        assertTrue(Arrays.equals(array1, array2));\n+    }\n+    \n+    public void testJoin() {\n+        assertNull(ArrayUtils.join(null, null));\n+        Object[] joinedArray;\n+        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n+        String[] stringArray2 = new String[]{\"1\", \"2\", \"3\"};\n+        joinedArray = ArrayUtils.join(stringArray1, null);\n+        assertArraysEquals(stringArray1, joinedArray);\n+        assertArraysEquals(new String[]{\"a\", \"b\", \"c\"}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.join(null, stringArray2);\n+        assertArraysEquals(stringArray2, joinedArray);\n+        assertArraysEquals(new String[]{\"1\", \"2\", \"3\"}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.join(stringArray1, stringArray2);\n+        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", \"1\", \"2\", \"3\"}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.join(ArrayUtils.EMPTY_STRING_ARRAY, null);\n+        assertArraysEquals(ArrayUtils.EMPTY_STRING_ARRAY, joinedArray);\n+        assertArraysEquals(new String[]{}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.join(null, ArrayUtils.EMPTY_STRING_ARRAY);\n+        assertArraysEquals(ArrayUtils.EMPTY_STRING_ARRAY, joinedArray);\n+        assertArraysEquals(new String[]{}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.join(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY);\n+        assertArraysEquals(ArrayUtils.EMPTY_STRING_ARRAY, joinedArray);\n+        assertArraysEquals(new String[]{}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        String[] stringArrayNull = new String []{null};\n+        joinedArray = ArrayUtils.join(stringArrayNull, stringArrayNull);        \n+        assertArraysEquals(new String[]{null, null}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+    }    \n+    \n+    public void testAddObjectArrayObject() {\n+        Object[] joinedArray;\n+        joinedArray = ArrayUtils.add((Object[])null, null);\n+        assertArraysEquals(new Object[]{null}, joinedArray);\n+        assertEquals(Object.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.add((Object[])null, \"a\");\n+        assertArraysEquals(new String[]{\"a\"}, joinedArray);\n+        assertArraysEquals(new Object[]{\"a\"}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n+        joinedArray = ArrayUtils.add(stringArray1, null);\n+        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", null}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.add(stringArray1, \"d\");\n+        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", \"d\"}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());        \n+    }\n+\n+    public void testAddAtIndex() {\n+        Object[] joinedArray;\n+        joinedArray = ArrayUtils.add((Object[])null, 0, null);\n+        assertArraysEquals(new Object[]{null}, joinedArray);\n+        assertEquals(Object.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.add((Object[])null, 0, \"a\");\n+        assertArraysEquals(new String[]{\"a\"}, joinedArray);\n+        assertArraysEquals(new Object[]{\"a\"}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        String[] stringArray1 = new String[]{\"a\", \"b\", \"c\"};\n+        joinedArray = ArrayUtils.add(stringArray1, 0, null);\n+        assertArraysEquals(new String[]{null, \"a\", \"b\", \"c\"}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.add(stringArray1, 1, null);\n+        assertArraysEquals(new String[]{\"a\", null, \"b\", \"c\"}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.add(stringArray1, 3, null);\n+        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", null}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());\n+        joinedArray = ArrayUtils.add(stringArray1, 3, \"d\");\n+        assertArraysEquals(new String[]{\"a\", \"b\", \"c\", \"d\"}, joinedArray);\n+        assertEquals(String.class, joinedArray.getClass().getComponentType());        \n+\n+        Object[] o = new Object[] {\"1\", \"2\", \"4\"};\n+        Object[] result = ArrayUtils.add(o, 2, \"3\");\n+        Object[] result2 = ArrayUtils.add(o, 3, \"5\");\n+        \n+        assertNotNull(result);\n+        assertEquals(4, result.length);\n+        assertEquals(\"1\", result[0]);\n+        assertEquals(\"2\", result[1]);\n+        assertEquals(\"3\", result[2]);\n+        assertEquals(\"4\", result[3]);\n+        assertNotNull(result2);\n+        assertEquals(4, result2.length);\n+        assertEquals(\"1\", result2[0]);\n+        assertEquals(\"2\", result2[1]);\n+        assertEquals(\"4\", result2[2]);\n+        assertEquals(\"5\", result2[3]);\n+    }\n+\n     //-----------------------------------------------------------------------\n     public void testToString() {\n         assertEquals(\"{}\", ArrayUtils.toString(null));", "timestamp": 1075426798, "metainfo": ""}