{"sha": "c44f4008f8a1f25c1ab358efe729fa5ce51ba3b4", "log": "A good start for: [Bug 34715][lang] unit test for org.apache.commons.lang.text.StrBuilder. From heuermh@acm.org.  ", "commit": "\n--- /dev/null\n+++ b/src/test/org/apache/commons/lang/text/StrBuilderTest.java\n+/*\n+ * Copyright 2002-2005 The Apache Software Foundation.\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang.text;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+import junit.framework.Test;\n+import junit.framework.TestCase;\n+import junit.framework.TestSuite;\n+import junit.textui.TestRunner;\n+\n+/**\n+ * Unit tests for {@link org.apache.commons.lang.text.StrBuilder}.\n+ * \n+ * @author Michael Heuer\n+ * @version $Id$\n+ */\n+public class StrBuilderTest extends TestCase {\n+\n+    private static Object FOO = new Object() {\n+        public String toString() {\n+            return \"foo\";\n+        }\n+    };\n+\n+    /**\n+     * Main.\n+     * \n+     * @param args\n+     *            command line arguments, ignored\n+     */\n+    public static void main(String[] args) {\n+        TestRunner.run(suite());\n+    }\n+\n+    /**\n+     * Return a new test suite containing this test case.\n+     * \n+     * @return a new test suite containing this test case\n+     */\n+    public static Test suite() {\n+        TestSuite suite = new TestSuite(StrBuilderTest.class);\n+        suite.setName(\"StrBuilder Tests\");\n+        return suite;\n+    }\n+\n+    /**\n+     * Create a new test case with the specified name.\n+     * \n+     * @param name\n+     *            name\n+     */\n+    public StrBuilderTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testAppend() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendNull();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append((Object) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(FOO);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((String) null);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(\"bar\");\n+        assertEquals(\"foobar\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"foobar\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"baz\"));\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append((char[]) null);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(new char[0]);\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(new char[]{'f', 'o', 'o'});\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append((char[]) null, 0, 1);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, -1, 1);\n+            fail(\"append(char[], -1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 3, 1);\n+            fail(\"append(char[], 3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 1, -1);\n+            fail(\"append(char[],, -1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.append(new char[]{'b', 'a', 'r'}, 1, 3);\n+            fail(\"append(char[], 1, 3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        // These next two cases slip by the error condition checks but are silent modifications\n+        sb.append(new char[]{'b', 'a', 'r'}, -1, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new char[]{'b', 'a', 'r'}, 3, 0);\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.append(new char[]{'a', 'b', 'c', 'b', 'a', 'r', 'd', 'e', 'f'}, 3, 3);\n+        assertEquals(\"foobar\", sb.toString());\n+\n+        sb.append(true);\n+        assertEquals(\"foobartrue\", sb.toString());\n+\n+        sb.append(false);\n+        assertEquals(\"foobartruefalse\", sb.toString());\n+\n+        sb.append('!');\n+        assertEquals(\"foobartruefalse!\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.append(0);\n+        assertEquals(\"0\", sb.toString());\n+\n+        sb.append(1L);\n+        assertEquals(\"01\", sb.toString());\n+\n+        sb.append(2.3F);\n+        assertEquals(\"012.3\", sb.toString());\n+\n+        sb.append(4.5D);\n+        assertEquals(\"012.34.5\", sb.toString());\n+    }\n+\n+    public void testAppendFixedLength() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendFixedLengthPadLeft(\"foo\", -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendFixedLengthPadLeft(\"foo\", 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendFixedLengthPadLeft(\"foo\", 1, '-');\n+        assertEquals(\"o\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendFixedLengthPadLeft(\"foo\", 2, '-');\n+        assertEquals(\"oo\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendFixedLengthPadLeft(\"foo\", 3, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendFixedLengthPadLeft(\"foo\", 4, '-');\n+        assertEquals(\"-foo\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendFixedLengthPadLeft(\"foo\", 10, '-');\n+        assertEquals(10, sb.length());\n+        // 1234567890\n+        assertEquals(\"-------foo\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendFixedLengthPadRight(\"foo\", -1, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendFixedLengthPadRight(\"foo\", 0, '-');\n+        assertEquals(\"\", sb.toString());\n+\n+        /*\n+         * \n+         * TODO: appears the implementation for appendFixedLengthPadRight is broken?\n+         * \n+         * sb.appendFixedLengthPadRight(\"foo\", 1, '-'); assertEquals(\"f\", sb.toString());\n+         * \n+         * sb.clear(); assertEquals(\"\", sb.toString());\n+         * \n+         * sb.appendFixedLengthPadRight(\"foo\", 2, '-'); assertEquals(\"fo\", sb.toString());\n+         * \n+         * sb.clear(); assertEquals(\"\", sb.toString());\n+         * \n+         * sb.appendFixedLengthPadRight(\"foo\", 3, '-'); assertEquals(\"foo\", sb.toString());\n+         * \n+         * sb.clear(); assertEquals(\"\", sb.toString());\n+         * \n+         * sb.appendFixedLengthPadRight(\"foo\", 4, '-'); assertEquals(\"foo-\", sb.toString());\n+         * \n+         * sb.clear(); assertEquals(\"\", sb.toString());\n+         * \n+         * sb.appendFixedLengthPadRight(\"foo\", 10, '-'); assertEquals(10, sb.length()); // 1234567890\n+         * assertEquals(\"foo-------\", sb.toString());\n+         * \n+         */\n+    }\n+\n+    public void testAppendPadding() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"foo\");\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(-1, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(0, '-');\n+        assertEquals(\"foo\", sb.toString());\n+\n+        sb.appendPadding(1, '-');\n+        assertEquals(\"foo-\", sb.toString());\n+\n+        sb.appendPadding(16, '-');\n+        assertEquals(20, sb.length());\n+        // 12345678901234567890\n+        assertEquals(\"foo-----------------\", sb.toString());\n+    }\n+\n+    public void testAppendWithNullText() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"null\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendNull();\n+        assertEquals(\"null\", sb.toString());\n+\n+        sb.append((Object) null);\n+        assertEquals(\"nullnull\", sb.toString());\n+\n+        sb.append(FOO);\n+        assertEquals(\"nullnullfoo\", sb.toString());\n+\n+        sb.append((String) null);\n+        assertEquals(\"nullnullfoonull\", sb.toString());\n+\n+        sb.append(\"\");\n+        assertEquals(\"nullnullfoonull\", sb.toString());\n+\n+        sb.append(\"bar\");\n+        assertEquals(\"nullnullfoonullbar\", sb.toString());\n+\n+        sb.append((StringBuffer) null);\n+        assertEquals(\"nullnullfoonullbarnull\", sb.toString());\n+\n+        sb.append(new StringBuffer(\"baz\"));\n+        assertEquals(\"nullnullfoonullbarnullbaz\", sb.toString());\n+    }\n+\n+    public void testAppendWithSeparators() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators((Object[]) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(new Object[0], \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(new Object[]{\"foo\", \"bar\", \"baz\"}, null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators((Collection) null, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(Collections.EMPTY_LIST, \",\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), \",\");\n+        assertEquals(\"foo,bar,baz\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", \"bar\", \"baz\"}), null);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n+        assertEquals(\"foo,,baz\", sb.toString());\n+    }\n+\n+    public void testAppendWithSeparatorsWithNullText() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"null\");\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(new Object[]{\"foo\", null, \"baz\"}, \",\");\n+        assertEquals(\"foo,null,baz\", sb.toString());\n+\n+        sb.clear();\n+        assertEquals(\"\", sb.toString());\n+\n+        sb.appendWithSeparators(Arrays.asList(new Object[]{\"foo\", null, \"baz\"}), \",\");\n+        assertEquals(\"foo,null,baz\", sb.toString());\n+    }\n+\n+    public void testCapacityAndLength() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(32, sb.capacity());\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+\n+        sb.minimizeCapacity();\n+        assertEquals(0, sb.capacity());\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+\n+        sb.ensureCapacity(32);\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+\n+        sb.append(\"foo\");\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(3, sb.length());\n+        assertEquals(3, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.clear();\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+\n+        sb.append(\"123456789012345678901234567890123\");\n+        assertTrue(sb.capacity() > 32);\n+        assertEquals(33, sb.length());\n+        assertEquals(33, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.ensureCapacity(16);\n+        assertTrue(sb.capacity() > 16);\n+        assertEquals(33, sb.length());\n+        assertEquals(33, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.minimizeCapacity();\n+        assertEquals(33, sb.capacity());\n+        assertEquals(33, sb.length());\n+        assertEquals(33, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        try {\n+            sb.setLength(-1);\n+            fail(\"setLength(-1) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.setLength(33);\n+        assertEquals(33, sb.capacity());\n+        assertEquals(33, sb.length());\n+        assertEquals(33, sb.size());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.setLength(16);\n+        assertTrue(sb.capacity() >= 16);\n+        assertEquals(16, sb.length());\n+        assertEquals(16, sb.size());\n+        assertEquals(\"1234567890123456\", sb.toString());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.setLength(32);\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(32, sb.length());\n+        assertEquals(32, sb.size());\n+        assertEquals(\"1234567890123456\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\", sb.toString());\n+        assertTrue(sb.isEmpty() == false);\n+\n+        sb.setLength(0);\n+        assertTrue(sb.capacity() >= 32);\n+        assertEquals(0, sb.length());\n+        assertEquals(0, sb.size());\n+        assertTrue(sb.isEmpty());\n+    }\n+\n+    public void testCharArray() {\n+        // TODO\n+    }\n+\n+    public void testConstructor() {\n+\n+        StrBuilder sb0 = new StrBuilder();\n+        assertTrue(sb0.isEmpty());\n+        StrBuilder sb1 = new StrBuilder(32);\n+        assertTrue(sb1.isEmpty());\n+        StrBuilder sb2 = new StrBuilder(0);\n+        assertTrue(sb2.isEmpty());\n+        StrBuilder sb3 = new StrBuilder(-1);\n+        assertTrue(sb3.isEmpty());\n+        StrBuilder sb4 = new StrBuilder(1);\n+        assertTrue(sb4.isEmpty());\n+        StrBuilder sb5 = new StrBuilder((String) null);\n+        assertTrue(sb5.isEmpty());\n+        StrBuilder sb6 = new StrBuilder(\"\");\n+        assertTrue(sb6.isEmpty());\n+        StrBuilder sb7 = new StrBuilder(\"foo\");\n+        assertFalse(sb7.isEmpty());\n+    }\n+\n+    public void testGetSetChar() {\n+\n+        StrBuilder sb = new StrBuilder();\n+\n+        try {\n+            sb.charAt(0);\n+            fail(\"charAt(0) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.charAt(-1);\n+            fail(\"charAt(-1) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.setCharAt(0, 'f');\n+            fail(\"setCharAt(0,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.setCharAt(-1, 'f');\n+            fail(\"setCharAt(-1,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.append(\"foo\");\n+        assertEquals('f', sb.charAt(0));\n+        assertEquals('o', sb.charAt(1));\n+        assertEquals('o', sb.charAt(2));\n+\n+        try {\n+            sb.charAt(3);\n+            fail(\"charAt(3) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.setCharAt(0, 'b');\n+        sb.setCharAt(1, 'a');\n+        sb.setCharAt(2, 'r');\n+\n+        try {\n+            sb.setCharAt(3, '!');\n+            fail(\"setCharAt(3,) expected IndexOutOfBoundsException\");\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        assertEquals('b', sb.charAt(0));\n+        assertEquals('a', sb.charAt(1));\n+        assertEquals('r', sb.charAt(2));\n+    }\n+\n+    public void testInitialCapacityAndLength() {\n+\n+        StrBuilder sb0 = new StrBuilder();\n+        assertEquals(32, sb0.capacity());\n+        assertEquals(0, sb0.length());\n+        assertEquals(0, sb0.size());\n+\n+        StrBuilder sb1 = new StrBuilder(32);\n+        assertEquals(32, sb1.capacity());\n+        assertEquals(0, sb1.length());\n+        assertEquals(0, sb1.size());\n+\n+        StrBuilder sb2 = new StrBuilder(0);\n+        assertEquals(32, sb2.capacity());\n+        assertEquals(0, sb2.length());\n+        assertEquals(0, sb2.size());\n+\n+        StrBuilder sb3 = new StrBuilder(-1);\n+        assertEquals(32, sb3.capacity());\n+        assertEquals(0, sb3.length());\n+        assertEquals(0, sb3.size());\n+\n+        StrBuilder sb4 = new StrBuilder(1);\n+        assertEquals(1, sb4.capacity());\n+        assertEquals(0, sb4.length());\n+        assertEquals(0, sb4.size());\n+\n+        StrBuilder sb5 = new StrBuilder((String) null);\n+        assertEquals(32, sb5.capacity());\n+        assertEquals(0, sb5.length());\n+        assertEquals(0, sb5.size());\n+\n+        StrBuilder sb6 = new StrBuilder(\"\");\n+        assertEquals(32, sb6.capacity());\n+        assertEquals(0, sb6.length());\n+        assertEquals(0, sb6.size());\n+\n+        StrBuilder sb7 = new StrBuilder(\"foo\");\n+        assertEquals(35, sb7.capacity());\n+        assertEquals(3, sb7.length());\n+        assertEquals(3, sb7.size());\n+    }\n+\n+    public void testInsert() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, FOO);\n+            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, FOO);\n+            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (Object) null);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, FOO);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, \"foo\");\n+            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, \"foo\");\n+            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (String) null);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, \"foo\");\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, new char[]{'f', 'o', 'o'});\n+            fail(\"insert(-1, char[]) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, new char[]{'f', 'o', 'o'});\n+            fail(\"insert(7, char[]) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (char[]) null);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[0]);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[]{'f', 'o', 'o'});\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n+            fail(\"insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n+            fail(\"insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (char[]) null, 0, 0);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[0], 0, 0);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3);\n+            fail(\"insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3);\n+            fail(\"insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1);\n+            fail(\"insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10);\n+            fail(\"insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0);\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3);\n+        assertEquals(\"foobarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, true);\n+            fail(\"insert(-1, boolean) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, true);\n+            fail(\"insert(7, boolean) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, true);\n+        assertEquals(\"truebarbaz\", sb.toString());\n+\n+        sb.insert(0, false);\n+        assertEquals(\"falsetruebarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, '!');\n+            fail(\"insert(-1, char) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, '!');\n+            fail(\"insert(7, char) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, '!');\n+        assertEquals(\"!barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 0);\n+            fail(\"insert(-1, int) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 0);\n+            fail(\"insert(7, int) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, '0');\n+        assertEquals(\"0barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 1L);\n+            fail(\"insert(-1, long) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 1L);\n+            fail(\"insert(7, long) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, 1L);\n+        assertEquals(\"1barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 2.3F);\n+            fail(\"insert(-1, float) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 2.3F);\n+            fail(\"insert(7, float) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, 2.3F);\n+        assertEquals(\"2.3barbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, 4.5D);\n+            fail(\"insert(-1, double) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, 4.5D);\n+            fail(\"insert(7, double) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, 4.5D);\n+        assertEquals(\"4.5barbaz\", sb.toString());\n+    }\n+\n+    public void testInsertWithNullText() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        sb.setNullText(\"null\");\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, FOO);\n+            fail(\"insert(-1, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, FOO);\n+            fail(\"insert(7, Object) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (Object) null);\n+        assertEquals(\"nullbarbaz\", sb.toString());\n+\n+        sb.insert(0, FOO);\n+        assertEquals(\"foonullbarbaz\", sb.toString());\n+\n+        sb.clear();\n+        sb.append(\"barbaz\");\n+        assertEquals(\"barbaz\", sb.toString());\n+\n+        try {\n+            sb.insert(-1, \"foo\");\n+            fail(\"insert(-1, String) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            sb.insert(7, \"foo\");\n+            fail(\"insert(7, String) expected StringIndexOutOfBoundsException\");\n+        } catch (StringIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        sb.insert(0, (String) null);\n+        assertEquals(\"nullbarbaz\", sb.toString());\n+\n+        sb.insert(0, \"foo\");\n+        assertEquals(\"foonullbarbaz\", sb.toString());\n+    }\n+\n+    public void testNullText() {\n+\n+        StrBuilder sb = new StrBuilder();\n+        assertEquals(null, sb.getNullText());\n+\n+        sb.setNullText(\"null\");\n+        assertEquals(\"null\", sb.getNullText());\n+\n+        sb.setNullText(\"\");\n+        assertEquals(null, sb.getNullText());\n+\n+        sb.setNullText(\"foo\");\n+        assertEquals(\"foo\", sb.getNullText());\n+\n+        sb.setNullText((String) null);\n+        assertEquals(null, sb.getNullText());\n+    }\n+}", "timestamp": 1115074531, "metainfo": ""}