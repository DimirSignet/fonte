{"sha": "171676d5bc9527b971fa3140d29d018840741cc0", "log": "Fix cloning of array types.  ", "commit": "\n--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java\n package org.apache.commons.lang3;\n \n import java.io.Serializable;\n+import java.lang.reflect.Array;\n import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n \n      */\n     public static <T> T clone(final T o) {\n         if (o instanceof Cloneable) {\n-            try {\n-                final Method clone = o.getClass().getMethod(\"clone\", (Class[])null);\n-                @SuppressWarnings(\"unchecked\")\n-                final T result = (T)clone.invoke(o, (Object[])null);\n-                return result;\n-            } catch (final NoSuchMethodException e) {\n-                throw new CloneFailedException(\"Cloneable type has no clone method\", e);\n-            } catch (final IllegalAccessException e) {\n-                throw new CloneFailedException(\"Cannot clone Cloneable type\", e);\n-            } catch (final InvocationTargetException e) {\n-                throw new CloneFailedException(\"Exception cloning Cloneable type\", e.getCause());\n+            final Object result;\n+            if (o.getClass().isArray()) {\n+                final Class<?> componentType = o.getClass().getComponentType();\n+                if (!componentType.isPrimitive()) {\n+                    result = ((Object[])o).clone();\n+                } else {\n+                    int length = Array.getLength(o);\n+                    result = Array.newInstance(componentType, length);\n+                    while (length-- > 0) {\n+                        Array.set(result, length, Array.get(o, length));\n+                    }\n+                }\n+            } else {\n+                try {\n+                    final Method clone = o.getClass().getMethod(\"clone\");\n+                    result = clone.invoke(o);\n+                } catch (final NoSuchMethodException e) {\n+                    throw new CloneFailedException(\"Cloneable type \"\n+                        + o.getClass().getName()\n+                        + \" has no clone method\", e);\n+                } catch (final IllegalAccessException e) {\n+                    throw new CloneFailedException(\"Cannot clone Cloneable type \"\n+                        + o.getClass().getName(), e);\n+                } catch (final InvocationTargetException e) {\n+                    throw new CloneFailedException(\"Exception cloning Cloneable type \"\n+                        + o.getClass().getName(), e.getCause());\n+                }\n             }\n+            @SuppressWarnings(\"unchecked\")\n+            final T checked = (T)result;\n+            return checked;\n         }\n \n         return null;\n--- a/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n+++ b/src/test/java/org/apache/commons/lang3/ObjectUtilsTest.java\n \n import java.lang.reflect.Constructor;\n import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Date;\n \n     }\n \n     /**\n+     * Tests {@link ObjectUtils#clone(Object)} with an object array.\n+     */\n+    public void testCloneOfStringArray() {\n+        assertTrue(Arrays.deepEquals(\n+            new String[]{\"string\"}, ObjectUtils.clone(new String[]{\"string\"})));\n+    }\n+\n+    /**\n+     * Tests {@link ObjectUtils#clone(Object)} with an array of primitives.\n+     */\n+    public void testCloneOfPrimitiveArray() {\n+        assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1})));\n+    }\n+\n+    /**\n      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object.\n      */\n     public void testPossibleCloneOfCloneable() {", "timestamp": 1278117046, "metainfo": ""}